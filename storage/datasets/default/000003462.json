{
	"title": "mod.rs - source",
	"url": "https://doc.rust-lang.org/stable/src/core/fmt/mod.rs.html",
	"markdown": "# mod.rs - source\n\n```\n//! Utilities for formatting and printing strings.\n\n#![stable(feature = \"rust1\", since = \"1.0.0\")]\n\nuse crate::cell::{Cell, Ref, RefCell, RefMut, SyncUnsafeCell, UnsafeCell};\nuse crate::char::EscapeDebugExtArgs;\nuse crate::iter;\nuse crate::marker::PhantomData;\nuse crate::mem;\nuse crate::num::fmt as numfmt;\nuse crate::ops::Deref;\nuse crate::result;\nuse crate::str;\n\nmod builders;\n#[cfg(not(no_fp_fmt_parse))]\nmod float;\n#[cfg(no_fp_fmt_parse)]\nmod nofloat;\nmod num;\nmod rt;\n\n#[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"Alignment\")]\n/// Possible alignments returned by `Formatter::align`\n#[derive(Copy, Clone, Debug, PartialEq, Eq)]\npub enum Alignment {\n    #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n    /// Indication that contents should be left-aligned.\n    Left,\n    #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n    /// Indication that contents should be right-aligned.\n    Right,\n    #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n    /// Indication that contents should be center-aligned.\n    Center,\n}\n\n#[stable(feature = \"debug_builders\", since = \"1.2.0\")]\npub use self::builders::{DebugList, DebugMap, DebugSet, DebugStruct, DebugTuple};\n\n#[unstable(feature = \"debug_closure_helpers\", issue = \"117729\")]\npub use self::builders::FormatterFn;\n\n/// The type returned by formatter methods.\n///\n/// # Examples\n///\n/// ```\n/// use std::fmt;\n///\n/// #[derive(Debug)]\n/// struct Triangle {\n///     a: f32,\n///     b: f32,\n///     c: f32\n/// }\n///\n/// impl fmt::Display for Triangle {\n///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n///         write!(f, \"({}, {}, {})\", self.a, self.b, self.c)\n///     }\n/// }\n///\n/// let pythagorean_triple = Triangle { a: 3.0, b: 4.0, c: 5.0 };\n///\n/// assert_eq!(format!(\"{pythagorean_triple}\"), \"(3, 4, 5)\");\n/// ```\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub type Result = result::Result<(), Error>;\n\n/// The error type which is returned from formatting a message into a stream.\n///\n/// This type does not support transmission of an error other than that an error\n/// occurred. This is because, despite the existence of this error,\n/// string formatting is considered an infallible operation.\n/// `fmt()` implementors should not return this `Error` unless they received it from their\n/// [`Formatter`]. The only time your code should create a new instance of this\n/// error is when implementing `fmt::Write`, in order to cancel the formatting operation when\n/// writing to the underlying stream fails.\n///\n/// Any extra information must be arranged to be transmitted through some other means,\n/// such as storing it in a field to be consulted after the formatting operation has been\n/// cancelled. (For example, this is how [`std::io::Write::write_fmt()`] propagates IO errors\n/// during writing.)\n///\n/// This type, `fmt::Error`, should not be\n/// confused with [`std::io::Error`] or [`std::error::Error`], which you may also\n/// have in scope.\n///\n/// [`std::io::Error`]: ../../std/io/struct.Error.html\n/// [`std::io::Write::write_fmt()`]: ../../std/io/trait.Write.html#method.write_fmt\n/// [`std::error::Error`]: ../../std/error/trait.Error.html\n///\n/// # Examples\n///\n/// ```rust\n/// use std::fmt::{self, write};\n///\n/// let mut output = String::new();\n/// if let Err(fmt::Error) = write(&mut output, format_args!(\"Hello {}!\", \"world\")) {\n///     panic!(\"An error occurred\");\n/// }\n/// ```\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]\npub struct Error;\n\n/// A trait for writing or formatting into Unicode-accepting buffers or streams.\n///\n/// This trait only accepts UTF-8â€“encoded data and is not [flushable]. If you only\n/// want to accept Unicode and you don't need flushing, you should implement this trait;\n/// otherwise you should implement [`std::io::Write`].\n///\n/// [`std::io::Write`]: ../../std/io/trait.Write.html\n/// [flushable]: ../../std/io/trait.Write.html#tymethod.flush\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub trait Write {\n    /// Writes a string slice into this writer, returning whether the write\n    /// succeeded.\n    ///\n    /// This method can only succeed if the entire string slice was successfully\n    /// written, and this method will not return until all data has been\n    /// written or an error occurs.\n    ///\n    /// # Errors\n    ///\n    /// This function will return an instance of [`std::fmt::Error`][Error] on error.\n    ///\n    /// The purpose of that error is to abort the formatting operation when the underlying\n    /// destination encounters some error preventing it from accepting more text;\n    /// in particular, it does not communicate any information about *what* error occurred.\n    /// It should generally be propagated rather than handled, at least when implementing\n    /// formatting traits.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt::{Error, Write};\n    ///\n    /// fn writer<W: Write>(f: &mut W, s: &str) -> Result<(), Error> {\n    ///     f.write_str(s)\n    /// }\n    ///\n    /// let mut buf = String::new();\n    /// writer(&mut buf, \"hola\").unwrap();\n    /// assert_eq!(&buf, \"hola\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn write_str(&mut self, s: &str) -> Result;\n\n    /// Writes a [`char`] into this writer, returning whether the write succeeded.\n    ///\n    /// A single [`char`] may be encoded as more than one byte.\n    /// This method can only succeed if the entire byte sequence was successfully\n    /// written, and this method will not return until all data has been\n    /// written or an error occurs.\n    ///\n    /// # Errors\n    ///\n    /// This function will return an instance of [`Error`] on error.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt::{Error, Write};\n    ///\n    /// fn writer<W: Write>(f: &mut W, c: char) -> Result<(), Error> {\n    ///     f.write_char(c)\n    /// }\n    ///\n    /// let mut buf = String::new();\n    /// writer(&mut buf, 'a').unwrap();\n    /// writer(&mut buf, 'b').unwrap();\n    /// assert_eq!(&buf, \"ab\");\n    /// ```\n    #[stable(feature = \"fmt_write_char\", since = \"1.1.0\")]\n    fn write_char(&mut self, c: char) -> Result {\n        self.write_str(c.encode_utf8(&mut [0; 4]))\n    }\n\n    /// Glue for usage of the [`write!`] macro with implementors of this trait.\n    ///\n    /// This method should generally not be invoked manually, but rather through\n    /// the [`write!`] macro itself.\n    ///\n    /// # Errors\n    ///\n    /// This function will return an instance of [`Error`] on error. Please see\n    /// [write_str](Write::write_str) for details.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt::{Error, Write};\n    ///\n    /// fn writer<W: Write>(f: &mut W, s: &str) -> Result<(), Error> {\n    ///     f.write_fmt(format_args!(\"{s}\"))\n    /// }\n    ///\n    /// let mut buf = String::new();\n    /// writer(&mut buf, \"world\").unwrap();\n    /// assert_eq!(&buf, \"world\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {\n        // We use a specialization for `Sized` types to avoid an indirection\n        // through `&mut self`\n        trait SpecWriteFmt {\n            fn spec_write_fmt(self, args: Arguments<'_>) -> Result;\n        }\n\n        impl<W: Write + ?Sized> SpecWriteFmt for &mut W {\n            #[inline]\n            default fn spec_write_fmt(mut self, args: Arguments<'_>) -> Result {\n                if let Some(s) = args.as_statically_known_str() {\n                    self.write_str(s)\n                } else {\n                    write(&mut self, args)\n                }\n            }\n        }\n\n        impl<W: Write> SpecWriteFmt for &mut W {\n            #[inline]\n            fn spec_write_fmt(self, args: Arguments<'_>) -> Result {\n                if let Some(s) = args.as_statically_known_str() {\n                    self.write_str(s)\n                } else {\n                    write(self, args)\n                }\n            }\n        }\n\n        self.spec_write_fmt(args)\n    }\n}\n\n#[stable(feature = \"fmt_write_blanket_impl\", since = \"1.4.0\")]\nimpl<W: Write + ?Sized> Write for &mut W {\n    fn write_str(&mut self, s: &str) -> Result {\n        (**self).write_str(s)\n    }\n\n    fn write_char(&mut self, c: char) -> Result {\n        (**self).write_char(c)\n    }\n\n    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {\n        (**self).write_fmt(args)\n    }\n}\n\n/// Configuration for formatting.\n///\n/// A `Formatter` represents various options related to formatting. Users do not\n/// construct `Formatter`s directly; a mutable reference to one is passed to\n/// the `fmt` method of all formatting traits, like [`Debug`] and [`Display`].\n///\n/// To interact with a `Formatter`, you'll call various methods to change the\n/// various options related to formatting. For examples, please see the\n/// documentation of the methods defined on `Formatter` below.\n#[allow(missing_debug_implementations)]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_diagnostic_item = \"Formatter\"]\npub struct Formatter<'a> {\n    flags: u32,\n    fill: char,\n    align: rt::Alignment,\n    width: Option<usize>,\n    precision: Option<usize>,\n\n    buf: &'a mut (dyn Write + 'a),\n}\n\nimpl<'a> Formatter<'a> {\n    /// Creates a new formatter with default settings.\n    ///\n    /// This can be used as a micro-optimization in cases where a full `Arguments`\n    /// structure (as created by `format_args!`) is not necessary; `Arguments`\n    /// is a little more expensive to use in simple formatting scenarios.\n    ///\n    /// Currently not intended for use outside of the standard library.\n    #[unstable(feature = \"fmt_internals\", reason = \"internal to standard library\", issue = \"none\")]\n    #[doc(hidden)]\n    pub fn new(buf: &'a mut (dyn Write + 'a)) -> Formatter<'a> {\n        Formatter {\n            flags: 0,\n            fill: ' ',\n            align: rt::Alignment::Unknown,\n            width: None,\n            precision: None,\n            buf,\n        }\n    }\n}\n\n/// This structure represents a safely precompiled version of a format string\n/// and its arguments. This cannot be generated at runtime because it cannot\n/// safely be done, so no constructors are given and the fields are private\n/// to prevent modification.\n///\n/// The [`format_args!`] macro will safely create an instance of this structure.\n/// The macro validates the format string at compile-time so usage of the\n/// [`write()`] and [`format()`] functions can be safely performed.\n///\n/// You can use the `Arguments<'a>` that [`format_args!`] returns in `Debug`\n/// and `Display` contexts as seen below. The example also shows that `Debug`\n/// and `Display` format to the same thing: the interpolated format string\n/// in `format_args!`.\n///\n/// ```rust\n/// let debug = format!(\"{:?}\", format_args!(\"{} foo {:?}\", 1, 2));\n/// let display = format!(\"{}\", format_args!(\"{} foo {:?}\", 1, 2));\n/// assert_eq!(\"1 foo 2\", display);\n/// assert_eq!(display, debug);\n/// ```\n///\n/// [`format()`]: ../../std/fmt/fn.format.html\n#[lang = \"format_arguments\"]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[derive(Copy, Clone)]\npub struct Arguments<'a> {\n    // Format string pieces to print.\n    pieces: &'a [&'static str],\n\n    // Placeholder specs, or `None` if all specs are default (as in \"{}{}\").\n    fmt: Option<&'a [rt::Placeholder]>,\n\n    // Dynamic arguments for interpolation, to be interleaved with string\n    // pieces. (Every argument is preceded by a string piece.)\n    args: &'a [rt::Argument<'a>],\n}\n\n/// Used by the format_args!() macro to create a fmt::Arguments object.\n#[doc(hidden)]\n#[unstable(feature = \"fmt_internals\", issue = \"none\")]\nimpl<'a> Arguments<'a> {\n    #[inline]\n    #[rustc_const_unstable(feature = \"const_fmt_arguments_new\", issue = \"none\")]\n    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {\n        const { assert!(N <= 1) };\n        Arguments { pieces, fmt: None, args: &[] }\n    }\n\n    /// When using the format_args!() macro, this function is used to generate the\n    /// Arguments structure.\n    #[inline]\n    pub fn new_v1<const P: usize, const A: usize>(\n        pieces: &'a [&'static str; P],\n        args: &'a [rt::Argument<'a>; A],\n    ) -> Arguments<'a> {\n        const { assert!(P >= A && P <= A + 1, \"invalid args\") }\n        Arguments { pieces, fmt: None, args }\n    }\n\n    /// This function is used to specify nonstandard formatting parameters.\n    ///\n    /// An `rt::UnsafeArg` is required because the following invariants must be held\n    /// in order for this function to be safe:\n    /// 1. The `pieces` slice must be at least as long as `fmt`.\n    /// 2. Every `rt::Placeholder::position` value within `fmt` must be a valid index of `args`.\n    /// 3. Every `rt::Count::Param` within `fmt` must contain a valid index of `args`.\n    #[inline]\n    pub fn new_v1_formatted(\n        pieces: &'a [&'static str],\n        args: &'a [rt::Argument<'a>],\n        fmt: &'a [rt::Placeholder],\n        _unsafe_arg: rt::UnsafeArg,\n    ) -> Arguments<'a> {\n        Arguments { pieces, fmt: Some(fmt), args }\n    }\n\n    /// Estimates the length of the formatted text.\n    ///\n    /// This is intended to be used for setting initial `String` capacity\n    /// when using `format!`. Note: this is neither the lower nor upper bound.\n    #[inline]\n    pub fn estimated_capacity(&self) -> usize {\n        let pieces_length: usize = self.pieces.iter().map(|x| x.len()).sum();\n\n        if self.args.is_empty() {\n            pieces_length\n        } else if !self.pieces.is_empty() && self.pieces[0].is_empty() && pieces_length < 16 {\n            // If the format string starts with an argument,\n            // don't preallocate anything, unless length\n            // of pieces is significant.\n            0\n        } else {\n            // There are some arguments, so any additional push\n            // will reallocate the string. To avoid that,\n            // we're \"pre-doubling\" the capacity here.\n            pieces_length.checked_mul(2).unwrap_or(0)\n        }\n    }\n}\n\nimpl<'a> Arguments<'a> {\n    /// Get the formatted string, if it has no arguments to be formatted at runtime.\n    ///\n    /// This can be used to avoid allocations in some cases.\n    ///\n    /// # Guarantees\n    ///\n    /// For `format_args!(\"just a literal\")`, this function is guaranteed to\n    /// return `Some(\"just a literal\")`.\n    ///\n    /// For most cases with placeholders, this function will return `None`.\n    ///\n    /// However, the compiler may perform optimizations that can cause this\n    /// function to return `Some(_)` even if the format string contains\n    /// placeholders. For example, `format_args!(\"Hello, {}!\", \"world\")` may be\n    /// optimized to `format_args!(\"Hello, world!\")`, such that `as_str()`\n    /// returns `Some(\"Hello, world!\")`.\n    ///\n    /// The behavior for anything but the trivial case (without placeholders)\n    /// is not guaranteed, and should not be relied upon for anything other\n    /// than optimization.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use std::fmt::Arguments;\n    ///\n    /// fn write_str(_: &str) { /* ... */ }\n    ///\n    /// fn write_fmt(args: &Arguments<'_>) {\n    ///     if let Some(s) = args.as_str() {\n    ///         write_str(s)\n    ///     } else {\n    ///         write_str(&args.to_string());\n    ///     }\n    /// }\n    /// ```\n    ///\n    /// ```rust\n    /// assert_eq!(format_args!(\"hello\").as_str(), Some(\"hello\"));\n    /// assert_eq!(format_args!(\"\").as_str(), Some(\"\"));\n    /// assert_eq!(format_args!(\"{:?}\", std::env::current_dir()).as_str(), None);\n    /// ```\n    #[stable(feature = \"fmt_as_str\", since = \"1.52.0\")]\n    #[rustc_const_unstable(feature = \"const_arguments_as_str\", issue = \"103900\")]\n    #[must_use]\n    #[inline]\n    pub const fn as_str(&self) -> Option<&'static str> {\n        match (self.pieces, self.args) {\n            ([], []) => Some(\"\"),\n            ([s], []) => Some(s),\n            _ => None,\n        }\n    }\n\n    /// Same as [`Arguments::as_str`], but will only return `Some(s)` if it can be determined at compile time.\n    #[must_use]\n    #[inline]\n    fn as_statically_known_str(&self) -> Option<&'static str> {\n        let s = self.as_str();\n        if core::intrinsics::is_val_statically_known(s.is_some()) { s } else { None }\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Debug for Arguments<'_> {\n    fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n        Display::fmt(self, fmt)\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Display for Arguments<'_> {\n    fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n        write(fmt.buf, *self)\n    }\n}\n\n/// `?` formatting.\n///\n/// `Debug` should format the output in a programmer-facing, debugging context.\n///\n/// Generally speaking, you should just `derive` a `Debug` implementation.\n///\n/// When used with the alternate format specifier `#?`, the output is pretty-printed.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n///\n/// This trait can be used with `#[derive]` if all fields implement `Debug`. When\n/// `derive`d for structs, it will use the name of the `struct`, then `{`, then a\n/// comma-separated list of each field's name and `Debug` value, then `}`. For\n/// `enum`s, it will use the name of the variant and, if applicable, `(`, then the\n/// `Debug` values of the fields, then `)`.\n///\n/// # Stability\n///\n/// Derived `Debug` formats are not stable, and so may change with future Rust\n/// versions. Additionally, `Debug` implementations of types provided by the\n/// standard library (`std`, `core`, `alloc`, etc.) are not stable, and\n/// may also change with future Rust versions.\n///\n/// # Examples\n///\n/// Deriving an implementation:\n///\n/// ```\n/// #[derive(Debug)]\n/// struct Point {\n///     x: i32,\n///     y: i32,\n/// }\n///\n/// let origin = Point { x: 0, y: 0 };\n///\n/// assert_eq!(format!(\"The origin is: {origin:?}\"), \"The origin is: Point { x: 0, y: 0 }\");\n/// ```\n///\n/// Manually implementing:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Point {\n///     x: i32,\n///     y: i32,\n/// }\n///\n/// impl fmt::Debug for Point {\n///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n///         f.debug_struct(\"Point\")\n///          .field(\"x\", &self.x)\n///          .field(\"y\", &self.y)\n///          .finish()\n///     }\n/// }\n///\n/// let origin = Point { x: 0, y: 0 };\n///\n/// assert_eq!(format!(\"The origin is: {origin:?}\"), \"The origin is: Point { x: 0, y: 0 }\");\n/// ```\n///\n/// There are a number of helper methods on the [`Formatter`] struct to help you with manual\n/// implementations, such as [`debug_struct`].\n///\n/// [`debug_struct`]: Formatter::debug_struct\n///\n/// Types that do not wish to use the standard suite of debug representations\n/// provided by the `Formatter` trait (`debug_struct`, `debug_tuple`,\n/// `debug_list`, `debug_set`, `debug_map`) can do something totally custom by\n/// manually writing an arbitrary representation to the `Formatter`.\n///\n/// ```\n/// # use std::fmt;\n/// # struct Point {\n/// #     x: i32,\n/// #     y: i32,\n/// # }\n/// #\n/// impl fmt::Debug for Point {\n///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n///         write!(f, \"Point [{} {}]\", self.x, self.y)\n///     }\n/// }\n/// ```\n///\n/// `Debug` implementations using either `derive` or the debug builder API\n/// on [`Formatter`] support pretty-printing using the alternate flag: `{:#?}`.\n///\n/// Pretty-printing with `#?`:\n///\n/// ```\n/// #[derive(Debug)]\n/// struct Point {\n///     x: i32,\n///     y: i32,\n/// }\n///\n/// let origin = Point { x: 0, y: 0 };\n///\n/// assert_eq!(format!(\"The origin is: {origin:#?}\"),\n/// \"The origin is: Point {\n///     x: 0,\n///     y: 0,\n/// }\");\n/// ```\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_on_unimplemented(\n    on(\n        crate_local,\n        label = \"`{Self}` cannot be formatted using `{{:?}}`\",\n        note = \"add `#[derive(Debug)]` to `{Self}` or manually `impl {Debug} for {Self}`\"\n    ),\n    message = \"`{Self}` doesn't implement `{Debug}`\",\n    label = \"`{Self}` cannot be formatted using `{{:?}}` because it doesn't implement `{Debug}`\"\n)]\n#[doc(alias = \"{:?}\")]\n#[rustc_diagnostic_item = \"Debug\"]\n#[rustc_trivial_field_reads]\npub trait Debug {\n    #[doc = include_str!(\"fmt_trait_method_doc.md\")]\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Position {\n    ///     longitude: f32,\n    ///     latitude: f32,\n    /// }\n    ///\n    /// impl fmt::Debug for Position {\n    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         f.debug_tuple(\"\")\n    ///          .field(&self.longitude)\n    ///          .field(&self.latitude)\n    ///          .finish()\n    ///     }\n    /// }\n    ///\n    /// let position = Position { longitude: 1.987, latitude: 2.983 };\n    /// assert_eq!(format!(\"{position:?}\"), \"(1.987, 2.983)\");\n    ///\n    /// assert_eq!(format!(\"{position:#?}\"), \"(\n    ///     1.987,\n    ///     2.983,\n    /// )\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n}\n\n// Separate module to reexport the macro `Debug` from prelude without the trait `Debug`.\npub(crate) mod macros {\n    /// Derive macro generating an impl of the trait `Debug`.\n    #[rustc_builtin_macro]\n    #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n    #[allow_internal_unstable(core_intrinsics, fmt_helpers_for_derive)]\n    pub macro Debug($item:item) {\n        /* compiler built-in */\n    }\n}\n#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n#[doc(inline)]\npub use macros::Debug;\n\n/// Format trait for an empty format, `{}`.\n///\n/// Implementing this trait for a type will automatically implement the\n/// [`ToString`][tostring] trait for the type, allowing the usage\n/// of the [`.to_string()`][tostring_function] method. Prefer implementing\n/// the `Display` trait for a type, rather than [`ToString`][tostring].\n///\n/// `Display` is similar to [`Debug`], but `Display` is for user-facing\n/// output, and so cannot be derived.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n/// [tostring]: ../../std/string/trait.ToString.html\n/// [tostring_function]: ../../std/string/trait.ToString.html#tymethod.to_string\n///\n/// # Internationalization\n///\n/// Because a type can only have one `Display` implementation, it is often preferable\n/// to only implement `Display` when there is a single most \"obvious\" way that\n/// values can be formatted as text. This could mean formatting according to the\n/// \"invariant\" culture and \"undefined\" locale, or it could mean that the type\n/// display is designed for a specific culture/locale, such as developer logs.\n///\n/// If not all values have a justifiably canonical textual format or if you want\n/// to support alternative formats not covered by the standard set of possible\n/// [formatting traits], the most flexible approach is display adapters: methods\n/// like [`str::escape_default`] or [`Path::display`] which create a wrapper\n/// implementing `Display` to output the specific display format.\n///\n/// [formatting traits]: ../../std/fmt/index.html#formatting-traits\n/// [`Path::display`]: ../../std/path/struct.Path.html#method.display\n///\n/// # Examples\n///\n/// Implementing `Display` on a type:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Point {\n///     x: i32,\n///     y: i32,\n/// }\n///\n/// impl fmt::Display for Point {\n///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n///         write!(f, \"({}, {})\", self.x, self.y)\n///     }\n/// }\n///\n/// let origin = Point { x: 0, y: 0 };\n///\n/// assert_eq!(format!(\"The origin is: {origin}\"), \"The origin is: (0, 0)\");\n/// ```\n#[rustc_on_unimplemented(\n    on(\n        any(_Self = \"std::path::Path\", _Self = \"std::path::PathBuf\"),\n        label = \"`{Self}` cannot be formatted with the default formatter; call `.display()` on it\",\n        note = \"call `.display()` or `.to_string_lossy()` to safely print paths, \\\n                as they may contain non-Unicode data\"\n    ),\n    message = \"`{Self}` doesn't implement `{Display}`\",\n    label = \"`{Self}` cannot be formatted with the default formatter\",\n    note = \"in format strings you may be able to use `{{:?}}` (or {{:#?}} for pretty-print) instead\"\n)]\n#[doc(alias = \"{}\")]\n#[rustc_diagnostic_item = \"Display\"]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub trait Display {\n    #[doc = include_str!(\"fmt_trait_method_doc.md\")]\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Position {\n    ///     longitude: f32,\n    ///     latitude: f32,\n    /// }\n    ///\n    /// impl fmt::Display for Position {\n    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         write!(f, \"({}, {})\", self.longitude, self.latitude)\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(\"(1.987, 2.983)\",\n    ///            format!(\"{}\", Position { longitude: 1.987, latitude: 2.983, }));\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n}\n\n/// `o` formatting.\n///\n/// The `Octal` trait should format its output as a number in base-8.\n///\n/// For primitive signed integers (`i8` to `i128`, and `isize`),\n/// negative values are formatted as the twoâ€™s complement representation.\n///\n/// The alternate flag, `#`, adds a `0o` in front of the output.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n///\n/// # Examples\n///\n/// Basic usage with `i32`:\n///\n/// ```\n/// let x = 42; // 42 is '52' in octal\n///\n/// assert_eq!(format!(\"{x:o}\"), \"52\");\n/// assert_eq!(format!(\"{x:#o}\"), \"0o52\");\n///\n/// assert_eq!(format!(\"{:o}\", -16), \"37777777760\");\n/// ```\n///\n/// Implementing `Octal` on a type:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Length(i32);\n///\n/// impl fmt::Octal for Length {\n///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n///         let val = self.0;\n///\n///         fmt::Octal::fmt(&val, f) // delegate to i32's implementation\n///     }\n/// }\n///\n/// let l = Length(9);\n///\n/// assert_eq!(format!(\"l as octal is: {l:o}\"), \"l as octal is: 11\");\n///\n/// assert_eq!(format!(\"l as octal is: {l:#06o}\"), \"l as octal is: 0o0011\");\n/// ```\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub trait Octal {\n    #[doc = include_str!(\"fmt_trait_method_doc.md\")]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n}\n\n/// `b` formatting.\n///\n/// The `Binary` trait should format its output as a number in binary.\n///\n/// For primitive signed integers ([`i8`] to [`i128`], and [`isize`]),\n/// negative values are formatted as the twoâ€™s complement representation.\n///\n/// The alternate flag, `#`, adds a `0b` in front of the output.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n///\n/// # Examples\n///\n/// Basic usage with [`i32`]:\n///\n/// ```\n/// let x = 42; // 42 is '101010' in binary\n///\n/// assert_eq!(format!(\"{x:b}\"), \"101010\");\n/// assert_eq!(format!(\"{x:#b}\"), \"0b101010\");\n///\n/// assert_eq!(format!(\"{:b}\", -16), \"11111111111111111111111111110000\");\n/// ```\n///\n/// Implementing `Binary` on a type:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Length(i32);\n///\n/// impl fmt::Binary for Length {\n///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n///         let val = self.0;\n///\n///         fmt::Binary::fmt(&val, f) // delegate to i32's implementation\n///     }\n/// }\n///\n/// let l = Length(107);\n///\n/// assert_eq!(format!(\"l as binary is: {l:b}\"), \"l as binary is: 1101011\");\n///\n/// assert_eq!(\n///     // Note that the `0b` prefix added by `#` is included in the total width, so we\n///     // need to add two to correctly display all 32 bits.\n///     format!(\"l as binary is: {l:#034b}\"),\n///     \"l as binary is: 0b00000000000000000000000001101011\"\n/// );\n/// ```\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub trait Binary {\n    #[doc = include_str!(\"fmt_trait_method_doc.md\")]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n}\n\n/// `x` formatting.\n///\n/// The `LowerHex` trait should format its output as a number in hexadecimal, with `a` through `f`\n/// in lower case.\n///\n/// For primitive signed integers (`i8` to `i128`, and `isize`),\n/// negative values are formatted as the twoâ€™s complement representation.\n///\n/// The alternate flag, `#`, adds a `0x` in front of the output.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n///\n/// # Examples\n///\n/// Basic usage with `i32`:\n///\n/// ```\n/// let y = 42; // 42 is '2a' in hex\n///\n/// assert_eq!(format!(\"{y:x}\"), \"2a\");\n/// assert_eq!(format!(\"{y:#x}\"), \"0x2a\");\n///\n/// assert_eq!(format!(\"{:x}\", -16), \"fffffff0\");\n/// ```\n///\n/// Implementing `LowerHex` on a type:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Length(i32);\n///\n/// impl fmt::LowerHex for Length {\n///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n///         let val = self.0;\n///\n///         fmt::LowerHex::fmt(&val, f) // delegate to i32's implementation\n///     }\n/// }\n///\n/// let l = Length(9);\n///\n/// assert_eq!(format!(\"l as hex is: {l:x}\"), \"l as hex is: 9\");\n///\n/// assert_eq!(format!(\"l as hex is: {l:#010x}\"), \"l as hex is: 0x00000009\");\n/// ```\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub trait LowerHex {\n    #[doc = include_str!(\"fmt_trait_method_doc.md\")]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n}\n\n/// `X` formatting.\n///\n/// The `UpperHex` trait should format its output as a number in hexadecimal, with `A` through `F`\n/// in upper case.\n///\n/// For primitive signed integers (`i8` to `i128`, and `isize`),\n/// negative values are formatted as the twoâ€™s complement representation.\n///\n/// The alternate flag, `#`, adds a `0x` in front of the output.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n///\n/// # Examples\n///\n/// Basic usage with `i32`:\n///\n/// ```\n/// let y = 42; // 42 is '2A' in hex\n///\n/// assert_eq!(format!(\"{y:X}\"), \"2A\");\n/// assert_eq!(format!(\"{y:#X}\"), \"0x2A\");\n///\n/// assert_eq!(format!(\"{:X}\", -16), \"FFFFFFF0\");\n/// ```\n///\n/// Implementing `UpperHex` on a type:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Length(i32);\n///\n/// impl fmt::UpperHex for Length {\n///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n///         let val = self.0;\n///\n///         fmt::UpperHex::fmt(&val, f) // delegate to i32's implementation\n///     }\n/// }\n///\n/// let l = Length(i32::MAX);\n///\n/// assert_eq!(format!(\"l as hex is: {l:X}\"), \"l as hex is: 7FFFFFFF\");\n///\n/// assert_eq!(format!(\"l as hex is: {l:#010X}\"), \"l as hex is: 0x7FFFFFFF\");\n/// ```\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub trait UpperHex {\n    #[doc = include_str!(\"fmt_trait_method_doc.md\")]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n}\n\n/// `p` formatting.\n///\n/// The `Pointer` trait should format its output as a memory location. This is commonly presented\n/// as hexadecimal.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n///\n/// # Examples\n///\n/// Basic usage with `&i32`:\n///\n/// ```\n/// let x = &42;\n///\n/// let address = format!(\"{x:p}\"); // this produces something like '0x7f06092ac6d0'\n/// ```\n///\n/// Implementing `Pointer` on a type:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Length(i32);\n///\n/// impl fmt::Pointer for Length {\n///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n///         // use `as` to convert to a `*const T`, which implements Pointer, which we can use\n///\n///         let ptr = self as *const Self;\n///         fmt::Pointer::fmt(&ptr, f)\n///     }\n/// }\n///\n/// let l = Length(42);\n///\n/// println!(\"l is in memory here: {l:p}\");\n///\n/// let l_ptr = format!(\"{l:018p}\");\n/// assert_eq!(l_ptr.len(), 18);\n/// assert_eq!(&l_ptr[..2], \"0x\");\n/// ```\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_diagnostic_item = \"Pointer\"]\npub trait Pointer {\n    #[doc = include_str!(\"fmt_trait_method_doc.md\")]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n}\n\n/// `e` formatting.\n///\n/// The `LowerExp` trait should format its output in scientific notation with a lower-case `e`.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n///\n/// # Examples\n///\n/// Basic usage with `f64`:\n///\n/// ```\n/// let x = 42.0; // 42.0 is '4.2e1' in scientific notation\n///\n/// assert_eq!(format!(\"{x:e}\"), \"4.2e1\");\n/// ```\n///\n/// Implementing `LowerExp` on a type:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Length(i32);\n///\n/// impl fmt::LowerExp for Length {\n///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n///         let val = f64::from(self.0);\n///         fmt::LowerExp::fmt(&val, f) // delegate to f64's implementation\n///     }\n/// }\n///\n/// let l = Length(100);\n///\n/// assert_eq!(\n///     format!(\"l in scientific notation is: {l:e}\"),\n///     \"l in scientific notation is: 1e2\"\n/// );\n///\n/// assert_eq!(\n///     format!(\"l in scientific notation is: {l:05e}\"),\n///     \"l in scientific notation is: 001e2\"\n/// );\n/// ```\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub trait LowerExp {\n    #[doc = include_str!(\"fmt_trait_method_doc.md\")]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n}\n\n/// `E` formatting.\n///\n/// The `UpperExp` trait should format its output in scientific notation with an upper-case `E`.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n///\n/// # Examples\n///\n/// Basic usage with `f64`:\n///\n/// ```\n/// let x = 42.0; // 42.0 is '4.2E1' in scientific notation\n///\n/// assert_eq!(format!(\"{x:E}\"), \"4.2E1\");\n/// ```\n///\n/// Implementing `UpperExp` on a type:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Length(i32);\n///\n/// impl fmt::UpperExp for Length {\n///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n///         let val = f64::from(self.0);\n///         fmt::UpperExp::fmt(&val, f) // delegate to f64's implementation\n///     }\n/// }\n///\n/// let l = Length(100);\n///\n/// assert_eq!(\n///     format!(\"l in scientific notation is: {l:E}\"),\n///     \"l in scientific notation is: 1E2\"\n/// );\n///\n/// assert_eq!(\n///     format!(\"l in scientific notation is: {l:05E}\"),\n///     \"l in scientific notation is: 001E2\"\n/// );\n/// ```\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub trait UpperExp {\n    #[doc = include_str!(\"fmt_trait_method_doc.md\")]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n}\n\n/// The `write` function takes an output stream, and an `Arguments` struct\n/// that can be precompiled with the `format_args!` macro.\n///\n/// The arguments will be formatted according to the specified format string\n/// into the output stream provided.\n///\n/// # Examples\n///\n/// Basic usage:\n///\n/// ```\n/// use std::fmt;\n///\n/// let mut output = String::new();\n/// fmt::write(&mut output, format_args!(\"Hello {}!\", \"world\"))\n///     .expect(\"Error occurred while trying to write in String\");\n/// assert_eq!(output, \"Hello world!\");\n/// ```\n///\n/// Please note that using [`write!`] might be preferable. Example:\n///\n/// ```\n/// use std::fmt::Write;\n///\n/// let mut output = String::new();\n/// write!(&mut output, \"Hello {}!\", \"world\")\n///     .expect(\"Error occurred while trying to write in String\");\n/// assert_eq!(output, \"Hello world!\");\n/// ```\n///\n/// [`write!`]: crate::write!\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n    let mut formatter = Formatter::new(output);\n    let mut idx = 0;\n\n    match args.fmt {\n        None => {\n            // We can use default formatting parameters for all arguments.\n            for (i, arg) in args.args.iter().enumerate() {\n                // SAFETY: args.args and args.pieces come from the same Arguments,\n                // which guarantees the indexes are always within bounds.\n                let piece = unsafe { args.pieces.get_unchecked(i) };\n                if !piece.is_empty() {\n                    formatter.buf.write_str(*piece)?;\n                }\n\n                // SAFETY: There are no formatting parameters and hence no\n                // count arguments.\n                unsafe {\n                    arg.fmt(&mut formatter)?;\n                }\n                idx += 1;\n            }\n        }\n        Some(fmt) => {\n            // Every spec has a corresponding argument that is preceded by\n            // a string piece.\n            for (i, arg) in fmt.iter().enumerate() {\n                // SAFETY: fmt and args.pieces come from the same Arguments,\n                // which guarantees the indexes are always within bounds.\n                let piece = unsafe { args.pieces.get_unchecked(i) };\n                if !piece.is_empty() {\n                    formatter.buf.write_str(*piece)?;\n                }\n                // SAFETY: arg and args.args come from the same Arguments,\n                // which guarantees the indexes are always within bounds.\n                unsafe { run(&mut formatter, arg, args.args) }?;\n                idx += 1;\n            }\n        }\n    }\n\n    // There can be only one trailing string piece left.\n    if let Some(piece) = args.pieces.get(idx) {\n        formatter.buf.write_str(*piece)?;\n    }\n\n    Ok(())\n}\n\nunsafe fn run(fmt: &mut Formatter<'_>, arg: &rt::Placeholder, args: &[rt::Argument<'_>]) -> Result {\n    fmt.fill = arg.fill;\n    fmt.align = arg.align;\n    fmt.flags = arg.flags;\n    // SAFETY: arg and args come from the same Arguments,\n    // which guarantees the indexes are always within bounds.\n    unsafe {\n        fmt.width = getcount(args, &arg.width);\n        fmt.precision = getcount(args, &arg.precision);\n    }\n\n    // Extract the correct argument\n    debug_assert!(arg.position < args.len());\n    // SAFETY: arg and args come from the same Arguments,\n    // which guarantees its index is always within bounds.\n    let value = unsafe { args.get_unchecked(arg.position) };\n\n    // Then actually do some printing\n    // SAFETY: this is a placeholder argument.\n    unsafe { value.fmt(fmt) }\n}\n\nunsafe fn getcount(args: &[rt::Argument<'_>], cnt: &rt::Count) -> Option<usize> {\n    match *cnt {\n        rt::Count::Is(n) => Some(n),\n        rt::Count::Implied => None,\n        rt::Count::Param(i) => {\n            debug_assert!(i < args.len());\n            // SAFETY: cnt and args come from the same Arguments,\n            // which guarantees this index is always within bounds.\n            unsafe { args.get_unchecked(i).as_usize() }\n        }\n    }\n}\n\n/// Padding after the end of something. Returned by `Formatter::padding`.\n#[must_use = \"don't forget to write the post padding\"]\npub(crate) struct PostPadding {\n    fill: char,\n    padding: usize,\n}\n\nimpl PostPadding {\n    fn new(fill: char, padding: usize) -> PostPadding {\n        PostPadding { fill, padding }\n    }\n\n    /// Write this post padding.\n    pub(crate) fn write(self, f: &mut Formatter<'_>) -> Result {\n        for _ in 0..self.padding {\n            f.buf.write_char(self.fill)?;\n        }\n        Ok(())\n    }\n}\n\nimpl<'a> Formatter<'a> {\n    fn wrap_buf<'b, 'c, F>(&'b mut self, wrap: F) -> Formatter<'c>\n    where\n        'b: 'c,\n        F: FnOnce(&'b mut (dyn Write + 'b)) -> &'c mut (dyn Write + 'c),\n    {\n        Formatter {\n            // We want to change this\n            buf: wrap(self.buf),\n\n            // And preserve these\n            flags: self.flags,\n            fill: self.fill,\n            align: self.align,\n            width: self.width,\n            precision: self.precision,\n        }\n    }\n\n    // Helper methods used for padding and processing formatting arguments that\n    // all formatting traits can use.\n\n    /// Performs the correct padding for an integer which has already been\n    /// emitted into a str. The str should *not* contain the sign for the\n    /// integer, that will be added by this method.\n    ///\n    /// # Arguments\n    ///\n    /// * is_nonnegative - whether the original integer was either positive or zero.\n    /// * prefix - if the '#' character (Alternate) is provided, this\n    ///   is the prefix to put in front of the number.\n    /// * buf - the byte array that the number has been formatted into\n    ///\n    /// This function will correctly account for the flags provided as well as\n    /// the minimum width. It will not take precision into account.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo { nb: i32 }\n    ///\n    /// impl Foo {\n    ///     fn new(nb: i32) -> Foo {\n    ///         Foo {\n    ///             nb,\n    ///         }\n    ///     }\n    /// }\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         // We need to remove \"-\" from the number output.\n    ///         let tmp = self.nb.abs().to_string();\n    ///\n    ///         formatter.pad_integral(self.nb >= 0, \"Foo \", &tmp)\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{}\", Foo::new(2)), \"2\");\n    /// assert_eq!(format!(\"{}\", Foo::new(-1)), \"-1\");\n    /// assert_eq!(format!(\"{}\", Foo::new(0)), \"0\");\n    /// assert_eq!(format!(\"{:#}\", Foo::new(-1)), \"-Foo 1\");\n    /// assert_eq!(format!(\"{:0>#8}\", Foo::new(-1)), \"00-Foo 1\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn pad_integral(&mut self, is_nonnegative: bool, prefix: &str, buf: &str) -> Result {\n        let mut width = buf.len();\n\n        let mut sign = None;\n        if !is_nonnegative {\n            sign = Some('-');\n            width += 1;\n        } else if self.sign_plus() {\n            sign = Some('+');\n            width += 1;\n        }\n\n        let prefix = if self.alternate() {\n            width += prefix.chars().count();\n            Some(prefix)\n        } else {\n            None\n        };\n\n        // Writes the sign if it exists, and then the prefix if it was requested\n        #[inline(never)]\n        fn write_prefix(f: &mut Formatter<'_>, sign: Option<char>, prefix: Option<&str>) -> Result {\n            if let Some(c) = sign {\n                f.buf.write_char(c)?;\n            }\n            if let Some(prefix) = prefix { f.buf.write_str(prefix) } else { Ok(()) }\n        }\n\n        // The `width` field is more of a `min-width` parameter at this point.\n        match self.width {\n            // If there's no minimum length requirements then we can just\n            // write the bytes.\n            None => {\n                write_prefix(self, sign, prefix)?;\n                self.buf.write_str(buf)\n            }\n            // Check if we're over the minimum width, if so then we can also\n            // just write the bytes.\n            Some(min) if width >= min => {\n                write_prefix(self, sign, prefix)?;\n                self.buf.write_str(buf)\n            }\n            // The sign and prefix goes before the padding if the fill character\n            // is zero\n            Some(min) if self.sign_aware_zero_pad() => {\n                let old_fill = crate::mem::replace(&mut self.fill, '0');\n                let old_align = crate::mem::replace(&mut self.align, rt::Alignment::Right);\n                write_prefix(self, sign, prefix)?;\n                let post_padding = self.padding(min - width, Alignment::Right)?;\n                self.buf.write_str(buf)?;\n                post_padding.write(self)?;\n                self.fill = old_fill;\n                self.align = old_align;\n                Ok(())\n            }\n            // Otherwise, the sign and prefix goes after the padding\n            Some(min) => {\n                let post_padding = self.padding(min - width, Alignment::Right)?;\n                write_prefix(self, sign, prefix)?;\n                self.buf.write_str(buf)?;\n                post_padding.write(self)\n            }\n        }\n    }\n\n    /// This function takes a string slice and emits it to the internal buffer\n    /// after applying the relevant formatting flags specified. The flags\n    /// recognized for generic strings are:\n    ///\n    /// * width - the minimum width of what to emit\n    /// * fill/align - what to emit and where to emit it if the string\n    ///                provided needs to be padded\n    /// * precision - the maximum length to emit, the string is truncated if it\n    ///               is longer than this length\n    ///\n    /// Notably this function ignores the `flag` parameters.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo;\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         formatter.pad(\"Foo\")\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{Foo:<4}\"), \"Foo \");\n    /// assert_eq!(format!(\"{Foo:0>4}\"), \"0Foo\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn pad(&mut self, s: &str) -> Result {\n        // Make sure there's a fast path up front\n        if self.width.is_none() && self.precision.is_none() {\n            return self.buf.write_str(s);\n        }\n        // The `precision` field can be interpreted as a `max-width` for the\n        // string being formatted.\n        let s = if let Some(max) = self.precision {\n            // If our string is longer that the precision, then we must have\n            // truncation. However other flags like `fill`, `width` and `align`\n            // must act as always.\n            if let Some((i, _)) = s.char_indices().nth(max) {\n                // LLVM here can't prove that `..i` won't panic `&s[..i]`, but\n                // we know that it can't panic. Use `get` + `unwrap_or` to avoid\n                // `unsafe` and otherwise don't emit any panic-related code\n                // here.\n                s.get(..i).unwrap_or(s)\n            } else {\n                &s\n            }\n        } else {\n            &s\n        };\n        // The `width` field is more of a `min-width` parameter at this point.\n        match self.width {\n            // If we're under the maximum length, and there's no minimum length\n            // requirements, then we can just emit the string\n            None => self.buf.write_str(s),\n            Some(width) => {\n                let chars_count = s.chars().count();\n                // If we're under the maximum width, check if we're over the minimum\n                // width, if so it's as easy as just emitting the string.\n                if chars_count >= width {\n                    self.buf.write_str(s)\n                }\n                // If we're under both the maximum and the minimum width, then fill\n                // up the minimum width with the specified string + some alignment.\n                else {\n                    let align = Alignment::Left;\n                    let post_padding = self.padding(width - chars_count, align)?;\n                    self.buf.write_str(s)?;\n                    post_padding.write(self)\n                }\n            }\n        }\n    }\n\n    /// Write the pre-padding and return the unwritten post-padding. Callers are\n    /// responsible for ensuring post-padding is written after the thing that is\n    /// being padded.\n    pub(crate) fn padding(\n        &mut self,\n        padding: usize,\n        default: Alignment,\n    ) -> result::Result<PostPadding, Error> {\n        let align = match self.align {\n            rt::Alignment::Unknown => default,\n            rt::Alignment::Left => Alignment::Left,\n            rt::Alignment::Right => Alignment::Right,\n            rt::Alignment::Center => Alignment::Center,\n        };\n\n        let (pre_pad, post_pad) = match align {\n            Alignment::Left => (0, padding),\n            Alignment::Right => (padding, 0),\n            Alignment::Center => (padding / 2, (padding + 1) / 2),\n        };\n\n        for _ in 0..pre_pad {\n            self.buf.write_char(self.fill)?;\n        }\n\n        Ok(PostPadding::new(self.fill, post_pad))\n    }\n\n    /// Takes the formatted parts and applies the padding.\n    /// Assumes that the caller already has rendered the parts with required precision,\n    /// so that `self.precision` can be ignored.\n    ///\n    /// # Safety\n    ///\n    /// Any `numfmt::Part::Copy` parts in `formatted` must contain valid UTF-8.\n    unsafe fn pad_formatted_parts(&mut self, formatted: &numfmt::Formatted<'_>) -> Result {\n        if let Some(mut width) = self.width {\n            // for the sign-aware zero padding, we render the sign first and\n            // behave as if we had no sign from the beginning.\n            let mut formatted = formatted.clone();\n            let old_fill = self.fill;\n            let old_align = self.align;\n            if self.sign_aware_zero_pad() {\n                // a sign always goes first\n                let sign = formatted.sign;\n                self.buf.write_str(sign)?;\n\n                // remove the sign from the formatted parts\n                formatted.sign = \"\";\n                width = width.saturating_sub(sign.len());\n                self.fill = '0';\n                self.align = rt::Alignment::Right;\n            }\n\n            // remaining parts go through the ordinary padding process.\n            let len = formatted.len();\n            let ret = if width <= len {\n                // no padding\n                // SAFETY: Per the precondition.\n                unsafe { self.write_formatted_parts(&formatted) }\n            } else {\n                let post_padding = self.padding(width - len, Alignment::Right)?;\n                // SAFETY: Per the precondition.\n                unsafe {\n                    self.write_formatted_parts(&formatted)?;\n                }\n                post_padding.write(self)\n            };\n            self.fill = old_fill;\n            self.align = old_align;\n            ret\n        } else {\n            // this is the common case and we take a shortcut\n            // SAFETY: Per the precondition.\n            unsafe { self.write_formatted_parts(formatted) }\n        }\n    }\n\n    /// # Safety\n    ///\n    /// Any `numfmt::Part::Copy` parts in `formatted` must contain valid UTF-8.\n    unsafe fn write_formatted_parts(&mut self, formatted: &numfmt::Formatted<'_>) -> Result {\n        unsafe fn write_bytes(buf: &mut dyn Write, s: &[u8]) -> Result {\n            // SAFETY: This is used for `numfmt::Part::Num` and `numfmt::Part::Copy`.\n            // It's safe to use for `numfmt::Part::Num` since every char `c` is between\n            // `b'0'` and `b'9'`, which means `s` is valid UTF-8. It's safe to use for\n            // `numfmt::Part::Copy` due to this function's precondition.\n            buf.write_str(unsafe { str::from_utf8_unchecked(s) })\n        }\n\n        if !formatted.sign.is_empty() {\n            self.buf.write_str(formatted.sign)?;\n        }\n        for part in formatted.parts {\n            match *part {\n                numfmt::Part::Zero(mut nzeroes) => {\n                    const ZEROES: &str = // 64 zeroes\n                        \"0000000000000000000000000000000000000000000000000000000000000000\";\n                    while nzeroes > ZEROES.len() {\n                        self.buf.write_str(ZEROES)?;\n                        nzeroes -= ZEROES.len();\n                    }\n                    if nzeroes > 0 {\n                        self.buf.write_str(&ZEROES[..nzeroes])?;\n                    }\n                }\n                numfmt::Part::Num(mut v) => {\n                    let mut s = [0; 5];\n                    let len = part.len();\n                    for c in s[..len].iter_mut().rev() {\n                        *c = b'0' + (v % 10) as u8;\n                        v /= 10;\n                    }\n                    // SAFETY: Per the precondition.\n                    unsafe {\n                        write_bytes(self.buf, &s[..len])?;\n                    }\n                }\n                // SAFETY: Per the precondition.\n                numfmt::Part::Copy(buf) => unsafe {\n                    write_bytes(self.buf, buf)?;\n                },\n            }\n        }\n        Ok(())\n    }\n\n    /// Writes some data to the underlying buffer contained within this\n    /// formatter.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo;\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         formatter.write_str(\"Foo\")\n    ///         // This is equivalent to:\n    ///         // write!(formatter, \"Foo\")\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{Foo}\"), \"Foo\");\n    /// assert_eq!(format!(\"{Foo:0>8}\"), \"Foo\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn write_str(&mut self, data: &str) -> Result {\n        self.buf.write_str(data)\n    }\n\n    /// Writes some formatted information into this instance.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo(i32);\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         formatter.write_fmt(format_args!(\"Foo {}\", self.0))\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{}\", Foo(-1)), \"Foo -1\");\n    /// assert_eq!(format!(\"{:0>8}\", Foo(2)), \"Foo 2\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[inline]\n    pub fn write_fmt(&mut self, fmt: Arguments<'_>) -> Result {\n        if let Some(s) = fmt.as_statically_known_str() {\n            self.buf.write_str(s)\n        } else {\n            write(self.buf, fmt)\n        }\n    }\n\n    /// Flags for formatting\n    #[must_use]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[deprecated(\n        since = \"1.24.0\",\n        note = \"use the `sign_plus`, `sign_minus`, `alternate`, \\\n                or `sign_aware_zero_pad` methods instead\"\n    )]\n    pub fn flags(&self) -> u32 {\n        self.flags\n    }\n\n    /// Character used as 'fill' whenever there is alignment.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo;\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         let c = formatter.fill();\n    ///         if let Some(width) = formatter.width() {\n    ///             for _ in 0..width {\n    ///                 write!(formatter, \"{c}\")?;\n    ///             }\n    ///             Ok(())\n    ///         } else {\n    ///             write!(formatter, \"{c}\")\n    ///         }\n    ///     }\n    /// }\n    ///\n    /// // We set alignment to the right with \">\".\n    /// assert_eq!(format!(\"{Foo:G>3}\"), \"GGG\");\n    /// assert_eq!(format!(\"{Foo:t>6}\"), \"tttttt\");\n    /// ```\n    #[must_use]\n    #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n    pub fn fill(&self) -> char {\n        self.fill\n    }\n\n    /// Flag indicating what form of alignment was requested.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt::{self, Alignment};\n    ///\n    /// struct Foo;\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         let s = if let Some(s) = formatter.align() {\n    ///             match s {\n    ///                 Alignment::Left    => \"left\",\n    ///                 Alignment::Right   => \"right\",\n    ///                 Alignment::Center  => \"center\",\n    ///             }\n    ///         } else {\n    ///             \"into the void\"\n    ///         };\n    ///         write!(formatter, \"{s}\")\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{Foo:<}\"), \"left\");\n    /// assert_eq!(format!(\"{Foo:>}\"), \"right\");\n    /// assert_eq!(format!(\"{Foo:^}\"), \"center\");\n    /// assert_eq!(format!(\"{Foo}\"), \"into the void\");\n    /// ```\n    #[must_use]\n    #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n    pub fn align(&self) -> Option<Alignment> {\n        match self.align {\n            rt::Alignment::Left => Some(Alignment::Left),\n            rt::Alignment::Right => Some(Alignment::Right),\n            rt::Alignment::Center => Some(Alignment::Center),\n            rt::Alignment::Unknown => None,\n        }\n    }\n\n    /// Optionally specified integer width that the output should be.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo(i32);\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         if let Some(width) = formatter.width() {\n    ///             // If we received a width, we use it\n    ///             write!(formatter, \"{:width$}\", format!(\"Foo({})\", self.0), width = width)\n    ///         } else {\n    ///             // Otherwise we do nothing special\n    ///             write!(formatter, \"Foo({})\", self.0)\n    ///         }\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{:10}\", Foo(23)), \"Foo(23)   \");\n    /// assert_eq!(format!(\"{}\", Foo(23)), \"Foo(23)\");\n    /// ```\n    #[must_use]\n    #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n    pub fn width(&self) -> Option<usize> {\n        self.width\n    }\n\n    /// Optionally specified precision for numeric types. Alternatively, the\n    /// maximum width for string types.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo(f32);\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         if let Some(precision) = formatter.precision() {\n    ///             // If we received a precision, we use it.\n    ///             write!(formatter, \"Foo({1:.*})\", precision, self.0)\n    ///         } else {\n    ///             // Otherwise we default to 2.\n    ///             write!(formatter, \"Foo({:.2})\", self.0)\n    ///         }\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{:.4}\", Foo(23.2)), \"Foo(23.2000)\");\n    /// assert_eq!(format!(\"{}\", Foo(23.2)), \"Foo(23.20)\");\n    /// ```\n    #[must_use]\n    #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n    pub fn precision(&self) -> Option<usize> {\n        self.precision\n    }\n\n    /// Determines if the `+` flag was specified.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo(i32);\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         if formatter.sign_plus() {\n    ///             write!(formatter,\n    ///                    \"Foo({}{})\",\n    ///                    if self.0 < 0 { '-' } else { '+' },\n    ///                    self.0.abs())\n    ///         } else {\n    ///             write!(formatter, \"Foo({})\", self.0)\n    ///         }\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{:+}\", Foo(23)), \"Foo(+23)\");\n    /// assert_eq!(format!(\"{:+}\", Foo(-23)), \"Foo(-23)\");\n    /// assert_eq!(format!(\"{}\", Foo(23)), \"Foo(23)\");\n    /// ```\n    #[must_use]\n    #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n    pub fn sign_plus(&self) -> bool {\n        self.flags & (1 << rt::Flag::SignPlus as u32) != 0\n    }\n\n    /// Determines if the `-` flag was specified.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo(i32);\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         if formatter.sign_minus() {\n    ///             // You want a minus sign? Have one!\n    ///             write!(formatter, \"-Foo({})\", self.0)\n    ///         } else {\n    ///             write!(formatter, \"Foo({})\", self.0)\n    ///         }\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{:-}\", Foo(23)), \"-Foo(23)\");\n    /// assert_eq!(format!(\"{}\", Foo(23)), \"Foo(23)\");\n    /// ```\n    #[must_use]\n    #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n    pub fn sign_minus(&self) -> bool {\n        self.flags & (1 << rt::Flag::SignMinus as u32) != 0\n    }\n\n    /// Determines if the `#` flag was specified.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo(i32);\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         if formatter.alternate() {\n    ///             write!(formatter, \"Foo({})\", self.0)\n    ///         } else {\n    ///             write!(formatter, \"{}\", self.0)\n    ///         }\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{:#}\", Foo(23)), \"Foo(23)\");\n    /// assert_eq!(format!(\"{}\", Foo(23)), \"23\");\n    /// ```\n    #[must_use]\n    #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n    pub fn alternate(&self) -> bool {\n        self.flags & (1 << rt::Flag::Alternate as u32) != 0\n    }\n\n    /// Determines if the `0` flag was specified.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo(i32);\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         assert!(formatter.sign_aware_zero_pad());\n    ///         assert_eq!(formatter.width(), Some(4));\n    ///         // We ignore the formatter's options.\n    ///         write!(formatter, \"{}\", self.0)\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{:04}\", Foo(23)), \"23\");\n    /// ```\n    #[must_use]\n    #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n    pub fn sign_aware_zero_pad(&self) -> bool {\n        self.flags & (1 << rt::Flag::SignAwareZeroPad as u32) != 0\n    }\n\n    // FIXME: Decide what public API we want for these two flags.\n    // https://github.com/rust-lang/rust/issues/48584\n    fn debug_lower_hex(&self) -> bool {\n        self.flags & (1 << rt::Flag::DebugLowerHex as u32) != 0\n    }\n\n    fn debug_upper_hex(&self) -> bool {\n        self.flags & (1 << rt::Flag::DebugUpperHex as u32) != 0\n    }\n\n    /// Creates a [`DebugStruct`] builder designed to assist with creation of\n    /// [`fmt::Debug`] implementations for structs.\n    ///\n    /// [`fmt::Debug`]: self::Debug\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use std::fmt;\n    /// use std::net::Ipv4Addr;\n    ///\n    /// struct Foo {\n    ///     bar: i32,\n    ///     baz: String,\n    ///     addr: Ipv4Addr,\n    /// }\n    ///\n    /// impl fmt::Debug for Foo {\n    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         fmt.debug_struct(\"Foo\")\n    ///             .field(\"bar\", &self.bar)\n    ///             .field(\"baz\", &self.baz)\n    ///             .field(\"addr\", &format_args!(\"{}\", self.addr))\n    ///             .finish()\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(\n    ///     \"Foo { bar: 10, baz: \\\"Hello World\\\", addr: 127.0.0.1 }\",\n    ///     format!(\"{:?}\", Foo {\n    ///         bar: 10,\n    ///         baz: \"Hello World\".to_string(),\n    ///         addr: Ipv4Addr::new(127, 0, 0, 1),\n    ///     })\n    /// );\n    /// ```\n    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n    pub fn debug_struct<'b>(&'b mut self, name: &str) -> DebugStruct<'b, 'a> {\n        builders::debug_struct_new(self, name)\n    }\n\n    /// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_struct_fields_finish` is more general, but this is faster for 1 field.\n    #[doc(hidden)]\n    #[unstable(feature = \"fmt_helpers_for_derive\", issue = \"none\")]\n    pub fn debug_struct_field1_finish<'b>(\n        &'b mut self,\n        name: &str,\n        name1: &str,\n        value1: &dyn Debug,\n    ) -> Result {\n        let mut builder = builders::debug_struct_new(self, name);\n        builder.field(name1, value1);\n        builder.finish()\n    }\n\n    /// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_struct_fields_finish` is more general, but this is faster for 2 fields.\n    #[doc(hidden)]\n    #[unstable(feature = \"fmt_helpers_for_derive\", issue = \"none\")]\n    pub fn debug_struct_field2_finish<'b>(\n        &'b mut self,\n        name: &str,\n        name1: &str,\n        value1: &dyn Debug,\n        name2: &str,\n        value2: &dyn Debug,\n    ) -> Result {\n        let mut builder = builders::debug_struct_new(self, name);\n        builder.field(name1, value1);\n        builder.field(name2, value2);\n        builder.finish()\n    }\n\n    /// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_struct_fields_finish` is more general, but this is faster for 3 fields.\n    #[doc(hidden)]\n    #[unstable(feature = \"fmt_helpers_for_derive\", issue = \"none\")]\n    pub fn debug_struct_field3_finish<'b>(\n        &'b mut self,\n        name: &str,\n        name1: &str,\n        value1: &dyn Debug,\n        name2: &str,\n        value2: &dyn Debug,\n        name3: &str,\n        value3: &dyn Debug,\n    ) -> Result {\n        let mut builder = builders::debug_struct_new(self, name);\n        builder.field(name1, value1);\n        builder.field(name2, value2);\n        builder.field(name3, value3);\n        builder.finish()\n    }\n\n    /// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_struct_fields_finish` is more general, but this is faster for 4 fields.\n    #[doc(hidden)]\n    #[unstable(feature = \"fmt_helpers_for_derive\", issue = \"none\")]\n    pub fn debug_struct_field4_finish<'b>(\n        &'b mut self,\n        name: &str,\n        name1: &str,\n        value1: &dyn Debug,\n        name2: &str,\n        value2: &dyn Debug,\n        name3: &str,\n        value3: &dyn Debug,\n        name4: &str,\n        value4: &dyn Debug,\n    ) -> Result {\n        let mut builder = builders::debug_struct_new(self, name);\n        builder.field(name1, value1);\n        builder.field(name2, value2);\n        builder.field(name3, value3);\n        builder.field(name4, value4);\n        builder.finish()\n    }\n\n    /// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_struct_fields_finish` is more general, but this is faster for 5 fields.\n    #[doc(hidden)]\n    #[unstable(feature = \"fmt_helpers_for_derive\", issue = \"none\")]\n    pub fn debug_struct_field5_finish<'b>(\n        &'b mut self,\n        name: &str,\n        name1: &str,\n        value1: &dyn Debug,\n        name2: &str,\n        value2: &dyn Debug,\n        name3: &str,\n        value3: &dyn Debug,\n        name4: &str,\n        value4: &dyn Debug,\n        name5: &str,\n        value5: &dyn Debug,\n    ) -> Result {\n        let mut builder = builders::debug_struct_new(self, name);\n        builder.field(name1, value1);\n        builder.field(name2, value2);\n        builder.field(name3, value3);\n        builder.field(name4, value4);\n        builder.field(name5, value5);\n        builder.finish()\n    }\n\n    /// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// For the cases not covered by `debug_struct_field[12345]_finish`.\n    #[doc(hidden)]\n    #[unstable(feature = \"fmt_helpers_for_derive\", issue = \"none\")]\n    pub fn debug_struct_fields_finish<'b>(\n        &'b mut self,\n        name: &str,\n        names: &[&str],\n        values: &[&dyn Debug],\n    ) -> Result {\n        assert_eq!(names.len(), values.len());\n        let mut builder = builders::debug_struct_new(self, name);\n        for (name, value) in iter::zip(names, values) {\n            builder.field(name, value);\n        }\n        builder.finish()\n    }\n\n    /// Creates a `DebugTuple` builder designed to assist with creation of\n    /// `fmt::Debug` implementations for tuple structs.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use std::fmt;\n    /// use std::marker::PhantomData;\n    ///\n    /// struct Foo<T>(i32, String, PhantomData<T>);\n    ///\n    /// impl<T> fmt::Debug for Foo<T> {\n    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         fmt.debug_tuple(\"Foo\")\n    ///             .field(&self.0)\n    ///             .field(&self.1)\n    ///             .field(&format_args!(\"_\"))\n    ///             .finish()\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(\n    ///     \"Foo(10, \\\"Hello\\\", _)\",\n    ///     format!(\"{:?}\", Foo(10, \"Hello\".to_string(), PhantomData::<u8>))\n    /// );\n    /// ```\n    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n    pub fn debug_tuple<'b>(&'b mut self, name: &str) -> DebugTuple<'b, 'a> {\n        builders::debug_tuple_new(self, name)\n    }\n\n    /// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_tuple_fields_finish` is more general, but this is faster for 1 field.\n    #[doc(hidden)]\n    #[unstable(feature = \"fmt_helpers_for_derive\", issue = \"none\")]\n    pub fn debug_tuple_field1_finish<'b>(&'b mut self, name: &str, value1: &dyn Debug) -> Result {\n        let mut builder = builders::debug_tuple_new(self, name);\n        builder.field(value1);\n        builder.finish()\n    }\n\n    /// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_tuple_fields_finish` is more general, but this is faster for 2 fields.\n    #[doc(hidden)]\n    #[unstable(feature = \"fmt_helpers_for_derive\", issue = \"none\")]\n    pub fn debug_tuple_field2_finish<'b>(\n        &'b mut self,\n        name: &str,\n        value1: &dyn Debug,\n        value2: &dyn Debug,\n    ) -> Result {\n        let mut builder = builders::debug_tuple_new(self, name);\n        builder.field(value1);\n        builder.field(value2);\n        builder.finish()\n    }\n\n    /// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_tuple_fields_finish` is more general, but this is faster for 3 fields.\n    #[doc(hidden)]\n    #[unstable(feature = \"fmt_helpers_for_derive\", issue = \"none\")]\n    pub fn debug_tuple_field3_finish<'b>(\n        &'b mut self,\n        name: &str,\n        value1: &dyn Debug,\n        value2: &dyn Debug,\n        value3: &dyn Debug,\n    ) -> Result {\n        let mut builder = builders::debug_tuple_new(self, name);\n        builder.field(value1);\n        builder.field(value2);\n        builder.field(value3);\n        builder.finish()\n    }\n\n    /// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_tuple_fields_finish` is more general, but this is faster for 4 fields.\n    #[doc(hidden)]\n    #[unstable(feature = \"fmt_helpers_for_derive\", issue = \"none\")]\n    pub fn debug_tuple_field4_finish<'b>(\n        &'b mut self,\n        name: &str,\n        value1: &dyn Debug,\n        value2: &dyn Debug,\n        value3: &dyn Debug,\n        value4: &dyn Debug,\n    ) -> Result {\n        let mut builder = builders::debug_tuple_new(self, name);\n        builder.field(value1);\n        builder.field(value2);\n        builder.field(value3);\n        builder.field(value4);\n        builder.finish()\n    }\n\n    /// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_tuple_fields_finish` is more general, but this is faster for 5 fields.\n    #[doc(hidden)]\n    #[unstable(feature = \"fmt_helpers_for_derive\", issue = \"none\")]\n    pub fn debug_tuple_field5_finish<'b>(\n        &'b mut self,\n        name: &str,\n        value1: &dyn Debug,\n        value2: &dyn Debug,\n        value3: &dyn Debug,\n        value4: &dyn Debug,\n        value5: &dyn Debug,\n    ) -> Result {\n        let mut builder = builders::debug_tuple_new(self, name);\n        builder.field(value1);\n        builder.field(value2);\n        builder.field(value3);\n        builder.field(value4);\n        builder.field(value5);\n        builder.finish()\n    }\n\n    /// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// For the cases not covered by `debug_tuple_field[12345]_finish`.\n    #[doc(hidden)]\n    #[unstable(feature = \"fmt_helpers_for_derive\", issue = \"none\")]\n    pub fn debug_tuple_fields_finish<'b>(\n        &'b mut self,\n        name: &str,\n        values: &[&dyn Debug],\n    ) -> Result {\n        let mut builder = builders::debug_tuple_new(self, name);\n        for value in values {\n            builder.field(value);\n        }\n        builder.finish()\n    }\n\n    /// Creates a `DebugList` builder designed to assist with creation of\n    /// `fmt::Debug` implementations for list-like structures.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use std::fmt;\n    ///\n    /// struct Foo(Vec<i32>);\n    ///\n    /// impl fmt::Debug for Foo {\n    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         fmt.debug_list().entries(self.0.iter()).finish()\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{:?}\", Foo(vec![10, 11])), \"[10, 11]\");\n    /// ```\n    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n    pub fn debug_list<'b>(&'b mut self) -> DebugList<'b, 'a> {\n        builders::debug_list_new(self)\n    }\n\n    /// Creates a `DebugSet` builder designed to assist with creation of\n    /// `fmt::Debug` implementations for set-like structures.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use std::fmt;\n    ///\n    /// struct Foo(Vec<i32>);\n    ///\n    /// impl fmt::Debug for Foo {\n    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         fmt.debug_set().entries(self.0.iter()).finish()\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{:?}\", Foo(vec![10, 11])), \"{10, 11}\");\n    /// ```\n    ///\n    /// [`format_args!`]: crate::format_args\n    ///\n    /// In this more complex example, we use [`format_args!`] and `.debug_set()`\n    /// to build a list of match arms:\n    ///\n    /// ```rust\n    /// use std::fmt;\n    ///\n    /// struct Arm<'a, L, R>(&'a (L, R));\n    /// struct Table<'a, K, V>(&'a [(K, V)], V);\n    ///\n    /// impl<'a, L, R> fmt::Debug for Arm<'a, L, R>\n    /// where\n    ///     L: 'a + fmt::Debug, R: 'a + fmt::Debug\n    /// {\n    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         L::fmt(&(self.0).0, fmt)?;\n    ///         fmt.write_str(\" => \")?;\n    ///         R::fmt(&(self.0).1, fmt)\n    ///     }\n    /// }\n    ///\n    /// impl<'a, K, V> fmt::Debug for Table<'a, K, V>\n    /// where\n    ///     K: 'a + fmt::Debug, V: 'a + fmt::Debug\n    /// {\n    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         fmt.debug_set()\n    ///         .entries(self.0.iter().map(Arm))\n    ///         .entry(&Arm(&(format_args!(\"_\"), &self.1)))\n    ///         .finish()\n    ///     }\n    /// }\n    /// ```\n    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n    pub fn debug_set<'b>(&'b mut self) -> DebugSet<'b, 'a> {\n        builders::debug_set_new(self)\n    }\n\n    /// Creates a `DebugMap` builder designed to assist with creation of\n    /// `fmt::Debug` implementations for map-like structures.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use std::fmt;\n    ///\n    /// struct Foo(Vec<(String, i32)>);\n    ///\n    /// impl fmt::Debug for Foo {\n    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ///         fmt.debug_map().entries(self.0.iter().map(|&(ref k, ref v)| (k, v))).finish()\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(\n    ///     format!(\"{:?}\",  Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n    ///     r#\"{\"A\": 10, \"B\": 11}\"#\n    ///  );\n    /// ```\n    #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n    pub fn debug_map<'b>(&'b mut self) -> DebugMap<'b, 'a> {\n        builders::debug_map_new(self)\n    }\n}\n\n#[stable(since = \"1.2.0\", feature = \"formatter_write\")]\nimpl Write for Formatter<'_> {\n    fn write_str(&mut self, s: &str) -> Result {\n        self.buf.write_str(s)\n    }\n\n    fn write_char(&mut self, c: char) -> Result {\n        self.buf.write_char(c)\n    }\n\n    #[inline]\n    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {\n        if let Some(s) = args.as_statically_known_str() {\n            self.buf.write_str(s)\n        } else {\n            write(self.buf, args)\n        }\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Display for Error {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        Display::fmt(\"an error occurred when formatting an argument\", f)\n    }\n}\n\n// Implementations of the core formatting traits\n\nmacro_rules! fmt_refs {\n    ($($tr:ident),*) => {\n        $(\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl<T: ?Sized + $tr> $tr for &T {\n            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }\n        }\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl<T: ?Sized + $tr> $tr for &mut T {\n            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }\n        }\n        )*\n    }\n}\n\nfmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp }\n\n#[unstable(feature = \"never_type\", issue = \"35121\")]\nimpl Debug for ! {\n    #[inline]\n    fn fmt(&self, _: &mut Formatter<'_>) -> Result {\n        *self\n    }\n}\n\n#[unstable(feature = \"never_type\", issue = \"35121\")]\nimpl Display for ! {\n    #[inline]\n    fn fmt(&self, _: &mut Formatter<'_>) -> Result {\n        *self\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Debug for bool {\n    #[inline]\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        Display::fmt(self, f)\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Display for bool {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        Display::fmt(if *self { \"true\" } else { \"false\" }, f)\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Debug for str {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        f.write_char('\"')?;\n\n        // substring we know is printable\n        let mut printable_range = 0..0;\n\n        fn needs_escape(b: u8) -> bool {\n            b > 0x7E || b < 0x20 || b == b'\\\\' || b == b'\"'\n        }\n\n        // the loop here first skips over runs of printable ASCII as a fast path.\n        // other chars (unicode, or ASCII that needs escaping) are then handled per-`char`.\n        let mut rest = self;\n        while rest.len() > 0 {\n            let Some(non_printable_start) = rest.as_bytes().iter().position(|&b| needs_escape(b))\n            else {\n                printable_range.end += rest.len();\n                break;\n            };\n\n            printable_range.end += non_printable_start;\n            // SAFETY: the position was derived from an iterator, so is known to be within bounds, and at a char boundary\n            rest = unsafe { rest.get_unchecked(non_printable_start..) };\n\n            let mut chars = rest.chars();\n            if let Some(c) = chars.next() {\n                let esc = c.escape_debug_ext(EscapeDebugExtArgs {\n                    escape_grapheme_extended: true,\n                    escape_single_quote: false,\n                    escape_double_quote: true,\n                });\n                if esc.len() != 1 {\n                    f.write_str(&self[printable_range.clone()])?;\n                    Display::fmt(&esc, f)?;\n                    printable_range.start = printable_range.end + c.len_utf8();\n                }\n                printable_range.end += c.len_utf8();\n            }\n            rest = chars.as_str();\n        }\n\n        f.write_str(&self[printable_range])?;\n\n        f.write_char('\"')\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Display for str {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        f.pad(self)\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Debug for char {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        f.write_char('\\'')?;\n        let esc = self.escape_debug_ext(EscapeDebugExtArgs {\n            escape_grapheme_extended: true,\n            escape_single_quote: true,\n            escape_double_quote: false,\n        });\n        Display::fmt(&esc, f)?;\n        f.write_char('\\'')\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Display for char {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        if f.width.is_none() && f.precision.is_none() {\n            f.write_char(*self)\n        } else {\n            f.pad(self.encode_utf8(&mut [0; 4]))\n        }\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> Pointer for *const T {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        // Cast is needed here because `.expose_provenance()` requires `T: Sized`.\n        pointer_fmt_inner((*self as *const ()).expose_provenance(), f)\n    }\n}\n\n/// Since the formatting will be identical for all pointer types, use a non-monomorphized\n/// implementation for the actual formatting to reduce the amount of codegen work needed.\n///\n/// This uses `ptr_addr: usize` and not `ptr: *const ()` to be able to use this for\n/// `fn(...) -> ...` without using [problematic] \"Oxford Casts\".\n///\n/// [problematic]: https://github.com/rust-lang/rust/issues/95489\npub(crate) fn pointer_fmt_inner(ptr_addr: usize, f: &mut Formatter<'_>) -> Result {\n    let old_width = f.width;\n    let old_flags = f.flags;\n\n    // The alternate flag is already treated by LowerHex as being special-\n    // it denotes whether to prefix with 0x. We use it to work out whether\n    // or not to zero extend, and then unconditionally set it to get the\n    // prefix.\n    if f.alternate() {\n        f.flags |= 1 << (rt::Flag::SignAwareZeroPad as u32);\n\n        if f.width.is_none() {\n            f.width = Some((usize::BITS / 4) as usize + 2);\n        }\n    }\n    f.flags |= 1 << (rt::Flag::Alternate as u32);\n\n    let ret = LowerHex::fmt(&ptr_addr, f);\n\n    f.width = old_width;\n    f.flags = old_flags;\n\n    ret\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> Pointer for *mut T {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        Pointer::fmt(&(*self as *const T), f)\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> Pointer for &T {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        Pointer::fmt(&(*self as *const T), f)\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> Pointer for &mut T {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        Pointer::fmt(&(&**self as *const T), f)\n    }\n}\n\n// Implementation of Display/Debug for various core types\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> Debug for *const T {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        Pointer::fmt(self, f)\n    }\n}\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> Debug for *mut T {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        Pointer::fmt(self, f)\n    }\n}\n\nmacro_rules! peel {\n    ($name:ident, $($other:ident,)*) => (tuple! { $($other,)* })\n}\n\nmacro_rules! tuple {\n    () => ();\n    ( $($name:ident,)+ ) => (\n        maybe_tuple_doc! {\n            $($name)+ @\n            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n            impl<$($name:Debug),+> Debug for ($($name,)+) where last_type!($($name,)+): ?Sized {\n                #[allow(non_snake_case, unused_assignments)]\n                fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n                    let mut builder = f.debug_tuple(\"\");\n                    let ($(ref $name,)+) = *self;\n                    $(\n                        builder.field(&$name);\n                    )+\n\n                    builder.finish()\n                }\n            }\n        }\n        peel! { $($name,)+ }\n    )\n}\n\nmacro_rules! maybe_tuple_doc {\n    ($a:ident @ #[$meta:meta] $item:item) => {\n        #[doc(fake_variadic)]\n        #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n        #[$meta]\n        $item\n    };\n    ($a:ident $($rest_a:ident)+ @ #[$meta:meta] $item:item) => {\n        #[doc(hidden)]\n        #[$meta]\n        $item\n    };\n}\n\nmacro_rules! last_type {\n    ($a:ident,) => { $a };\n    ($a:ident, $($rest_a:ident,)+) => { last_type!($($rest_a,)+) };\n}\n\ntuple! { E, D, C, B, A, Z, Y, X, W, V, U, T, }\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: Debug> Debug for [T] {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        f.debug_list().entries(self.iter()).finish()\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Debug for () {\n    #[inline]\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        f.pad(\"()\")\n    }\n}\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> Debug for PhantomData<T> {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        write!(f, \"PhantomData<{}>\", crate::any::type_name::<T>())\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: Copy + Debug> Debug for Cell<T> {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        f.debug_struct(\"Cell\").field(\"value\", &self.get()).finish()\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized + Debug> Debug for RefCell<T> {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        let mut d = f.debug_struct(\"RefCell\");\n        match self.try_borrow() {\n            Ok(borrow) => d.field(\"value\", &borrow),\n            Err(_) => d.field(\"value\", &format_args!(\"<borrowed>\")),\n        };\n        d.finish()\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized + Debug> Debug for Ref<'_, T> {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        Debug::fmt(&**self, f)\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized + Debug> Debug for RefMut<'_, T> {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        Debug::fmt(&*(self.deref()), f)\n    }\n}\n\n#[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\nimpl<T: ?Sized> Debug for UnsafeCell<T> {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        f.debug_struct(\"UnsafeCell\").finish_non_exhaustive()\n    }\n}\n\n#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\nimpl<T: ?Sized> Debug for SyncUnsafeCell<T> {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        f.debug_struct(\"SyncUnsafeCell\").finish_non_exhaustive()\n    }\n}\n\n// If you expected tests to be here, look instead at the core/tests/fmt.rs file,\n// it's a lot easier than creating all of the rt::Piece structures here.\n// There are also tests in the alloc crate, for those that need allocations.\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Source of the Rust file `library/core/src/fmt/mod.rs`.\"><title>mod.rs - source</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"core\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../../../static.files/src-script-e66d777a5a92e9b2.js\"></script><script defer=\"\" src=\"../../../src-files1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc src\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"sidebar\"><div class=\"src-sidebar-title\"><h2>Files</h2></div><div id=\"src-sidebar\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>boxed</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/boxed/thin.rs.html\">thin.rs</a></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>binary_heap</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/binary_heap/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>btree</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>map</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/btree/map/entry.rs.html\">entry.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/collections/btree/append.rs.html\">append.rs</a><a href=\"../../../src/alloc/collections/btree/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/alloc/collections/btree/dedup_sorted_iter.rs.html\">dedup_sorted_iter.rs</a><a href=\"../../../src/alloc/collections/btree/fix.rs.html\">fix.rs</a><a href=\"../../../src/alloc/collections/btree/map.rs.html\">map.rs</a><a href=\"../../../src/alloc/collections/btree/mem.rs.html\">mem.rs</a><a href=\"../../../src/alloc/collections/btree/merge_iter.rs.html\">merge_iter.rs</a><a href=\"../../../src/alloc/collections/btree/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/collections/btree/navigate.rs.html\">navigate.rs</a><a href=\"../../../src/alloc/collections/btree/node.rs.html\">node.rs</a><a href=\"../../../src/alloc/collections/btree/remove.rs.html\">remove.rs</a><a href=\"../../../src/alloc/collections/btree/search.rs.html\">search.rs</a><a href=\"../../../src/alloc/collections/btree/set.rs.html\">set.rs</a><a href=\"../../../src/alloc/collections/btree/set_val.rs.html\">set_val.rs</a><a href=\"../../../src/alloc/collections/btree/split.rs.html\">split.rs</a></div></details><details class=\"dir-entry\"><summary>vec_deque</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/vec_deque/drain.rs.html\">drain.rs</a><a href=\"../../../src/alloc/collections/vec_deque/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../src/alloc/collections/vec_deque/iter.rs.html\">iter.rs</a><a href=\"../../../src/alloc/collections/vec_deque/iter_mut.rs.html\">iter_mut.rs</a><a href=\"../../../src/alloc/collections/vec_deque/macros.rs.html\">macros.rs</a><a href=\"../../../src/alloc/collections/vec_deque/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/collections/vec_deque/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../src/alloc/collections/vec_deque/spec_from_iter.rs.html\">spec_from_iter.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/collections/linked_list.rs.html\">linked_list.rs</a><a href=\"../../../src/alloc/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/alloc/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>vec</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/vec/cow.rs.html\">cow.rs</a><a href=\"../../../src/alloc/vec/drain.rs.html\">drain.rs</a><a href=\"../../../src/alloc/vec/extract_if.rs.html\">extract_if.rs</a><a href=\"../../../src/alloc/vec/in_place_collect.rs.html\">in_place_collect.rs</a><a href=\"../../../src/alloc/vec/in_place_drop.rs.html\">in_place_drop.rs</a><a href=\"../../../src/alloc/vec/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../src/alloc/vec/is_zero.rs.html\">is_zero.rs</a><a href=\"../../../src/alloc/vec/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/vec/partial_eq.rs.html\">partial_eq.rs</a><a href=\"../../../src/alloc/vec/set_len_on_drop.rs.html\">set_len_on_drop.rs</a><a href=\"../../../src/alloc/vec/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../src/alloc/vec/spec_from_elem.rs.html\">spec_from_elem.rs</a><a href=\"../../../src/alloc/vec/spec_from_iter.rs.html\">spec_from_iter.rs</a><a href=\"../../../src/alloc/vec/spec_from_iter_nested.rs.html\">spec_from_iter_nested.rs</a><a href=\"../../../src/alloc/vec/splice.rs.html\">splice.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/alloc/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/alloc/boxed.rs.html\">boxed.rs</a><a href=\"../../../src/alloc/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/alloc/lib.rs.html\">lib.rs</a><a href=\"../../../src/alloc/macros.rs.html\">macros.rs</a><a href=\"../../../src/alloc/raw_vec.rs.html\">raw_vec.rs</a><a href=\"../../../src/alloc/rc.rs.html\">rc.rs</a><a href=\"../../../src/alloc/slice.rs.html\">slice.rs</a><a href=\"../../../src/alloc/str.rs.html\">str.rs</a><a href=\"../../../src/alloc/string.rs.html\">string.rs</a><a href=\"../../../src/alloc/sync.rs.html\">sync.rs</a><a href=\"../../../src/alloc/task.rs.html\">task.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/alloc/global.rs.html\">global.rs</a><a href=\"../../../src/core/alloc/layout.rs.html\">layout.rs</a><a href=\"../../../src/core/alloc/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>array</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/array/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/array/drain.rs.html\">drain.rs</a><a href=\"../../../src/core/array/equality.rs.html\">equality.rs</a><a href=\"../../../src/core/array/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/array/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ascii</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ascii/ascii_char.rs.html\">ascii_char.rs</a></div></details><details class=\"dir-entry\"><summary>async_iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/async_iter/async_iter.rs.html\">async_iter.rs</a><a href=\"../../../src/core/async_iter/from_iter.rs.html\">from_iter.rs</a><a href=\"../../../src/core/async_iter/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cell</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/cell/lazy.rs.html\">lazy.rs</a><a href=\"../../../src/core/cell/once.rs.html\">once.rs</a></div></details><details class=\"dir-entry\"><summary>char</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/char/convert.rs.html\">convert.rs</a><a href=\"../../../src/core/char/decode.rs.html\">decode.rs</a><a href=\"../../../src/core/char/methods.rs.html\">methods.rs</a><a href=\"../../../src/core/char/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/cmp/bytewise.rs.html\">bytewise.rs</a></div></details><details class=\"dir-entry\"><summary>convert</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/convert/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/convert/num.rs.html\">num.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/core/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>fmt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/fmt/builders.rs.html\">builders.rs</a><a href=\"../../../src/core/fmt/float.rs.html\">float.rs</a><a href=\"../../../src/core/fmt/mod.rs.html\" class=\"selected\">mod.rs</a><a href=\"../../../src/core/fmt/num.rs.html\">num.rs</a><a href=\"../../../src/core/fmt/rt.rs.html\">rt.rs</a></div></details><details class=\"dir-entry\"><summary>future</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/future/async_drop.rs.html\">async_drop.rs</a><a href=\"../../../src/core/future/future.rs.html\">future.rs</a><a href=\"../../../src/core/future/into_future.rs.html\">into_future.rs</a><a href=\"../../../src/core/future/join.rs.html\">join.rs</a><a href=\"../../../src/core/future/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/future/pending.rs.html\">pending.rs</a><a href=\"../../../src/core/future/poll_fn.rs.html\">poll_fn.rs</a><a href=\"../../../src/core/future/ready.rs.html\">ready.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/hash/sip.rs.html\">sip.rs</a></div></details><details class=\"dir-entry\"><summary>intrinsics</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/intrinsics/mir.rs.html\">mir.rs</a><a href=\"../../../src/core/intrinsics/simd.rs.html\">simd.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/io/borrowed_buf.rs.html\">borrowed_buf.rs</a><a href=\"../../../src/core/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>adapters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/adapters/array_chunks.rs.html\">array_chunks.rs</a><a href=\"../../../src/core/iter/adapters/by_ref_sized.rs.html\">by_ref_sized.rs</a><a href=\"../../../src/core/iter/adapters/chain.rs.html\">chain.rs</a><a href=\"../../../src/core/iter/adapters/cloned.rs.html\">cloned.rs</a><a href=\"../../../src/core/iter/adapters/copied.rs.html\">copied.rs</a><a href=\"../../../src/core/iter/adapters/cycle.rs.html\">cycle.rs</a><a href=\"../../../src/core/iter/adapters/enumerate.rs.html\">enumerate.rs</a><a href=\"../../../src/core/iter/adapters/filter.rs.html\">filter.rs</a><a href=\"../../../src/core/iter/adapters/filter_map.rs.html\">filter_map.rs</a><a href=\"../../../src/core/iter/adapters/flatten.rs.html\">flatten.rs</a><a href=\"../../../src/core/iter/adapters/fuse.rs.html\">fuse.rs</a><a href=\"../../../src/core/iter/adapters/inspect.rs.html\">inspect.rs</a><a href=\"../../../src/core/iter/adapters/intersperse.rs.html\">intersperse.rs</a><a href=\"../../../src/core/iter/adapters/map.rs.html\">map.rs</a><a href=\"../../../src/core/iter/adapters/map_while.rs.html\">map_while.rs</a><a href=\"../../../src/core/iter/adapters/map_windows.rs.html\">map_windows.rs</a><a href=\"../../../src/core/iter/adapters/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/adapters/peekable.rs.html\">peekable.rs</a><a href=\"../../../src/core/iter/adapters/rev.rs.html\">rev.rs</a><a href=\"../../../src/core/iter/adapters/scan.rs.html\">scan.rs</a><a href=\"../../../src/core/iter/adapters/skip.rs.html\">skip.rs</a><a href=\"../../../src/core/iter/adapters/skip_while.rs.html\">skip_while.rs</a><a href=\"../../../src/core/iter/adapters/step_by.rs.html\">step_by.rs</a><a href=\"../../../src/core/iter/adapters/take.rs.html\">take.rs</a><a href=\"../../../src/core/iter/adapters/take_while.rs.html\">take_while.rs</a><a href=\"../../../src/core/iter/adapters/zip.rs.html\">zip.rs</a></div></details><details class=\"dir-entry\"><summary>sources</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/sources/empty.rs.html\">empty.rs</a><a href=\"../../../src/core/iter/sources/from_coroutine.rs.html\">from_coroutine.rs</a><a href=\"../../../src/core/iter/sources/from_fn.rs.html\">from_fn.rs</a><a href=\"../../../src/core/iter/sources/once.rs.html\">once.rs</a><a href=\"../../../src/core/iter/sources/once_with.rs.html\">once_with.rs</a><a href=\"../../../src/core/iter/sources/repeat.rs.html\">repeat.rs</a><a href=\"../../../src/core/iter/sources/repeat_n.rs.html\">repeat_n.rs</a><a href=\"../../../src/core/iter/sources/repeat_with.rs.html\">repeat_with.rs</a><a href=\"../../../src/core/iter/sources/successors.rs.html\">successors.rs</a></div></details><details class=\"dir-entry\"><summary>traits</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/traits/accum.rs.html\">accum.rs</a><a href=\"../../../src/core/iter/traits/collect.rs.html\">collect.rs</a><a href=\"../../../src/core/iter/traits/double_ended.rs.html\">double_ended.rs</a><a href=\"../../../src/core/iter/traits/exact_size.rs.html\">exact_size.rs</a><a href=\"../../../src/core/iter/traits/iterator.rs.html\">iterator.rs</a><a href=\"../../../src/core/iter/traits/marker.rs.html\">marker.rs</a><a href=\"../../../src/core/iter/traits/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/traits/unchecked_iterator.rs.html\">unchecked_iterator.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/iter/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/range.rs.html\">range.rs</a><a href=\"../../../src/core/iter/sources.rs.html\">sources.rs</a></div></details><details class=\"dir-entry\"><summary>macros</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/macros/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mem</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/mem/manually_drop.rs.html\">manually_drop.rs</a><a href=\"../../../src/core/mem/maybe_uninit.rs.html\">maybe_uninit.rs</a><a href=\"../../../src/core/mem/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/mem/transmutability.rs.html\">transmutability.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/net/display_buffer.rs.html\">display_buffer.rs</a><a href=\"../../../src/core/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../src/core/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/net/parser.rs.html\">parser.rs</a><a href=\"../../../src/core/net/socket_addr.rs.html\">socket_addr.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dec2flt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/dec2flt/common.rs.html\">common.rs</a><a href=\"../../../src/core/num/dec2flt/decimal.rs.html\">decimal.rs</a><a href=\"../../../src/core/num/dec2flt/float.rs.html\">float.rs</a><a href=\"../../../src/core/num/dec2flt/fpu.rs.html\">fpu.rs</a><a href=\"../../../src/core/num/dec2flt/lemire.rs.html\">lemire.rs</a><a href=\"../../../src/core/num/dec2flt/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/num/dec2flt/number.rs.html\">number.rs</a><a href=\"../../../src/core/num/dec2flt/parse.rs.html\">parse.rs</a><a href=\"../../../src/core/num/dec2flt/slow.rs.html\">slow.rs</a><a href=\"../../../src/core/num/dec2flt/table.rs.html\">table.rs</a></div></details><details class=\"dir-entry\"><summary>flt2dec</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>strategy</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/flt2dec/strategy/dragon.rs.html\">dragon.rs</a><a href=\"../../../src/core/num/flt2dec/strategy/grisu.rs.html\">grisu.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/num/flt2dec/decoder.rs.html\">decoder.rs</a><a href=\"../../../src/core/num/flt2dec/estimator.rs.html\">estimator.rs</a><a href=\"../../../src/core/num/flt2dec/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>shells</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/shells/i128.rs.html\">i128.rs</a><a href=\"../../../src/core/num/shells/i16.rs.html\">i16.rs</a><a href=\"../../../src/core/num/shells/i32.rs.html\">i32.rs</a><a href=\"../../../src/core/num/shells/i64.rs.html\">i64.rs</a><a href=\"../../../src/core/num/shells/i8.rs.html\">i8.rs</a><a href=\"../../../src/core/num/shells/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../src/core/num/shells/isize.rs.html\">isize.rs</a><a href=\"../../../src/core/num/shells/u128.rs.html\">u128.rs</a><a href=\"../../../src/core/num/shells/u16.rs.html\">u16.rs</a><a href=\"../../../src/core/num/shells/u32.rs.html\">u32.rs</a><a href=\"../../../src/core/num/shells/u64.rs.html\">u64.rs</a><a href=\"../../../src/core/num/shells/u8.rs.html\">u8.rs</a><a href=\"../../../src/core/num/shells/usize.rs.html\">usize.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/num/bignum.rs.html\">bignum.rs</a><a href=\"../../../src/core/num/diy_float.rs.html\">diy_float.rs</a><a href=\"../../../src/core/num/error.rs.html\">error.rs</a><a href=\"../../../src/core/num/f128.rs.html\">f128.rs</a><a href=\"../../../src/core/num/f16.rs.html\">f16.rs</a><a href=\"../../../src/core/num/f32.rs.html\">f32.rs</a><a href=\"../../../src/core/num/f64.rs.html\">f64.rs</a><a href=\"../../../src/core/num/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/core/num/int_log10.rs.html\">int_log10.rs</a><a href=\"../../../src/core/num/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../src/core/num/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/num/nonzero.rs.html\">nonzero.rs</a><a href=\"../../../src/core/num/overflow_panic.rs.html\">overflow_panic.rs</a><a href=\"../../../src/core/num/saturating.rs.html\">saturating.rs</a><a href=\"../../../src/core/num/uint_macros.rs.html\">uint_macros.rs</a><a href=\"../../../src/core/num/wrapping.rs.html\">wrapping.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ops/arith.rs.html\">arith.rs</a><a href=\"../../../src/core/ops/async_function.rs.html\">async_function.rs</a><a href=\"../../../src/core/ops/bit.rs.html\">bit.rs</a><a href=\"../../../src/core/ops/control_flow.rs.html\">control_flow.rs</a><a href=\"../../../src/core/ops/coroutine.rs.html\">coroutine.rs</a><a href=\"../../../src/core/ops/deref.rs.html\">deref.rs</a><a href=\"../../../src/core/ops/drop.rs.html\">drop.rs</a><a href=\"../../../src/core/ops/function.rs.html\">function.rs</a><a href=\"../../../src/core/ops/index.rs.html\">index.rs</a><a href=\"../../../src/core/ops/index_range.rs.html\">index_range.rs</a><a href=\"../../../src/core/ops/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/ops/range.rs.html\">range.rs</a><a href=\"../../../src/core/ops/try_trait.rs.html\">try_trait.rs</a><a href=\"../../../src/core/ops/unsize.rs.html\">unsize.rs</a></div></details><details class=\"dir-entry\"><summary>panic</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/panic/location.rs.html\">location.rs</a><a href=\"../../../src/core/panic/panic_info.rs.html\">panic_info.rs</a><a href=\"../../../src/core/panic/unwind_safe.rs.html\">unwind_safe.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>masks</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html\">full_masks.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html\">assign.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html\">deref.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html\">shift_scalar.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html\">unary.rs</a></div></details><details class=\"dir-entry\"><summary>simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html\">eq.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html\">ord.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html\">float.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html\">int.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html\">uint.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html\">mut_ptr.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num.rs.html\">num.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/prelude.rs.html\">prelude.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr.rs.html\">ptr.rs</a></div></details><details class=\"dir-entry\"><summary>vendor</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html\">x86.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/alias.rs.html\">alias.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/cast.rs.html\">cast.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/lane_count.rs.html\">lane_count.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/masks.rs.html\">masks.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops.rs.html\">ops.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/select.rs.html\">select.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/swizzle.rs.html\">swizzle.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html\">swizzle_dyn.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html\">to_bytes.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vector.rs.html\">vector.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vendor.rs.html\">vendor.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/prelude/common.rs.html\">common.rs</a><a href=\"../../../src/core/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ptr/alignment.rs.html\">alignment.rs</a><a href=\"../../../src/core/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../src/core/ptr/metadata.rs.html\">metadata.rs</a><a href=\"../../../src/core/ptr/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/ptr/mut_ptr.rs.html\">mut_ptr.rs</a><a href=\"../../../src/core/ptr/non_null.rs.html\">non_null.rs</a><a href=\"../../../src/core/ptr/unique.rs.html\">unique.rs</a></div></details><details class=\"dir-entry\"><summary>slice</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/slice/iter/macros.rs.html\">macros.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/slice/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/slice/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/slice/index.rs.html\">index.rs</a><a href=\"../../../src/core/slice/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/slice/memchr.rs.html\">memchr.rs</a><a href=\"../../../src/core/slice/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/slice/raw.rs.html\">raw.rs</a><a href=\"../../../src/core/slice/rotate.rs.html\">rotate.rs</a><a href=\"../../../src/core/slice/select.rs.html\">select.rs</a><a href=\"../../../src/core/slice/sort.rs.html\">sort.rs</a><a href=\"../../../src/core/slice/specialize.rs.html\">specialize.rs</a></div></details><details class=\"dir-entry\"><summary>stdarch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_arch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>aarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/prefetch.rs.html\">prefetch.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/tme.rs.html\">tme.rs</a></div></details><details class=\"dir-entry\"><summary>arm</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/dsp.rs.html\">dsp.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/neon.rs.html\">neon.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/sat.rs.html\">sat.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/simd32.rs.html\">simd32.rs</a></div></details><details class=\"dir-entry\"><summary>arm_shared</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>barrier</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/cp15.rs.html\">cp15.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/crc.rs.html\">crc.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/crypto.rs.html\">crypto.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/hints.rs.html\">hints.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>loongarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>lasx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/types.rs.html\">types.rs</a></div></details><details class=\"dir-entry\"><summary>lsx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mips</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/mips/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>nvptx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/nvptx/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/altivec.rs.html\">altivec.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc64/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>riscv32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv32/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv32/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv64/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv_shared</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/p.rs.html\">p.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zb.rs.html\">zb.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>wasm32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/atomic.rs.html\">atomic.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/memory.rs.html\">memory.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/relaxed_simd.rs.html\">relaxed_simd.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/simd128.rs.html\">simd128.rs</a></div></details><details class=\"dir-entry\"><summary>x86</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/abm.rs.html\">abm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/adx.rs.html\">adx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/aes.rs.html\">aes.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx.rs.html\">avx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx2.rs.html\">avx2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bf16.rs.html\">avx512bf16.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bitalg.rs.html\">avx512bitalg.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bw.rs.html\">avx512bw.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512cd.rs.html\">avx512cd.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512ifma.rs.html\">avx512ifma.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi.rs.html\">avx512vbmi.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi2.rs.html\">avx512vbmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vnni.rs.html\">avx512vnni.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vpopcntdq.rs.html\">avx512vpopcntdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bmi1.rs.html\">bmi1.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bswap.rs.html\">bswap.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bt.rs.html\">bt.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/cpuid.rs.html\">cpuid.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/eflags.rs.html\">eflags.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/f16c.rs.html\">f16c.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/fma.rs.html\">fma.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/gfni.rs.html\">gfni.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/pclmulqdq.rs.html\">pclmulqdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rdtsc.rs.html\">rdtsc.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rtm.rs.html\">rtm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sha.rs.html\">sha.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse.rs.html\">sse.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse2.rs.html\">sse2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse3.rs.html\">sse3.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse41.rs.html\">sse41.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse42.rs.html\">sse42.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse4a.rs.html\">sse4a.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/ssse3.rs.html\">ssse3.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/tbm.rs.html\">tbm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/vaes.rs.html\">vaes.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/vpclmulqdq.rs.html\">vpclmulqdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/xsave.rs.html\">xsave.rs</a></div></details><details class=\"dir-entry\"><summary>x86_64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/abm.rs.html\">abm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/adx.rs.html\">adx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx.rs.html\">avx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx2.rs.html\">avx2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi.rs.html\">bmi.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bswap.rs.html\">bswap.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bt.rs.html\">bt.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/cmpxchg16b.rs.html\">cmpxchg16b.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse.rs.html\">sse.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse2.rs.html\">sse2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse41.rs.html\">sse41.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse42.rs.html\">sse42.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/xsave.rs.html\">xsave.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/simd.rs.html\">simd.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/str/converts.rs.html\">converts.rs</a><a href=\"../../../src/core/str/count.rs.html\">count.rs</a><a href=\"../../../src/core/str/error.rs.html\">error.rs</a><a href=\"../../../src/core/str/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/str/lossy.rs.html\">lossy.rs</a><a href=\"../../../src/core/str/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/str/pattern.rs.html\">pattern.rs</a><a href=\"../../../src/core/str/traits.rs.html\">traits.rs</a><a href=\"../../../src/core/str/validations.rs.html\">validations.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/sync/atomic.rs.html\">atomic.rs</a><a href=\"../../../src/core/sync/exclusive.rs.html\">exclusive.rs</a><a href=\"../../../src/core/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>task</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/task/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/task/poll.rs.html\">poll.rs</a><a href=\"../../../src/core/task/ready.rs.html\">ready.rs</a><a href=\"../../../src/core/task/wake.rs.html\">wake.rs</a></div></details><details class=\"dir-entry\"><summary>unicode</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/unicode/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/unicode/printable.rs.html\">printable.rs</a><a href=\"../../../src/core/unicode/unicode_data.rs.html\">unicode_data.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/any.rs.html\">any.rs</a><a href=\"../../../src/core/arch.rs.html\">arch.rs</a><a href=\"../../../src/core/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/asserting.rs.html\">asserting.rs</a><a href=\"../../../src/core/bool.rs.html\">bool.rs</a><a href=\"../../../src/core/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/core/cell.rs.html\">cell.rs</a><a href=\"../../../src/core/clone.rs.html\">clone.rs</a><a href=\"../../../src/core/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/default.rs.html\">default.rs</a><a href=\"../../../src/core/error.rs.html\">error.rs</a><a href=\"../../../src/core/escape.rs.html\">escape.rs</a><a href=\"../../../src/core/hint.rs.html\">hint.rs</a><a href=\"../../../src/core/internal_macros.rs.html\">internal_macros.rs</a><a href=\"../../../src/core/intrinsics.rs.html\">intrinsics.rs</a><a href=\"../../../src/core/lib.rs.html\">lib.rs</a><a href=\"../../../src/core/marker.rs.html\">marker.rs</a><a href=\"../../../src/core/option.rs.html\">option.rs</a><a href=\"../../../src/core/panic.rs.html\">panic.rs</a><a href=\"../../../src/core/panicking.rs.html\">panicking.rs</a><a href=\"../../../src/core/pat.rs.html\">pat.rs</a><a href=\"../../../src/core/pin.rs.html\">pin.rs</a><a href=\"../../../src/core/primitive.rs.html\">primitive.rs</a><a href=\"../../../src/core/primitive_docs.rs.html\">primitive_docs.rs</a><a href=\"../../../src/core/result.rs.html\">result.rs</a><a href=\"../../../src/core/time.rs.html\">time.rs</a><a href=\"../../../src/core/tuple.rs.html\">tuple.rs</a><a href=\"../../../src/core/ub_checks.rs.html\">ub_checks.rs</a><a href=\"../../../src/core/unit.rs.html\">unit.rs</a></div></details><details class=\"dir-entry\"><summary>proc_macro</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bridge</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/proc_macro/bridge/arena.rs.html\">arena.rs</a><a href=\"../../../src/proc_macro/bridge/buffer.rs.html\">buffer.rs</a><a href=\"../../../src/proc_macro/bridge/client.rs.html\">client.rs</a><a href=\"../../../src/proc_macro/bridge/closure.rs.html\">closure.rs</a><a href=\"../../../src/proc_macro/bridge/fxhash.rs.html\">fxhash.rs</a><a href=\"../../../src/proc_macro/bridge/handle.rs.html\">handle.rs</a><a href=\"../../../src/proc_macro/bridge/mod.rs.html\">mod.rs</a><a href=\"../../../src/proc_macro/bridge/rpc.rs.html\">rpc.rs</a><a href=\"../../../src/proc_macro/bridge/selfless_reify.rs.html\">selfless_reify.rs</a><a href=\"../../../src/proc_macro/bridge/server.rs.html\">server.rs</a><a href=\"../../../src/proc_macro/bridge/symbol.rs.html\">symbol.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/proc_macro/diagnostic.rs.html\">diagnostic.rs</a><a href=\"../../../src/proc_macro/lib.rs.html\">lib.rs</a><a href=\"../../../src/proc_macro/quote.rs.html\">quote.rs</a></div></details><details class=\"dir-entry\"><summary>std</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/backtrace/libunwind.rs.html\">libunwind.rs</a><a href=\"../../../src/std/backtrace/src/backtrace/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>symbolize</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>gimli</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/symbolize/gimli/elf.rs.html\">elf.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/libs_dl_iterate_phdr.rs.html\">libs_dl_iterate_phdr.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/mmap_unix.rs.html\">mmap_unix.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/parse_running_mmaps_unix.rs.html\">parse_running_mmaps_unix.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/stash.rs.html\">stash.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/symbolize/gimli.rs.html\">gimli.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/lib.rs.html\">lib.rs</a><a href=\"../../../src/std/backtrace/src/print.rs.html\">print.rs</a><a href=\"../../../src/std/backtrace/src/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/collections/hash/map.rs.html\">map.rs</a><a href=\"../../../src/std/collections/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/collections/hash/set.rs.html\">set.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/core/src/primitive_docs.rs.html\">primitive_docs.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/std/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/hash/random.rs.html\">random.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>buffered</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bufreader</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/io/buffered/bufreader/buffer.rs.html\">buffer.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/io/buffered/bufreader.rs.html\">bufreader.rs</a><a href=\"../../../src/std/io/buffered/bufwriter.rs.html\">bufwriter.rs</a><a href=\"../../../src/std/io/buffered/linewriter.rs.html\">linewriter.rs</a><a href=\"../../../src/std/io/buffered/linewritershim.rs.html\">linewritershim.rs</a><a href=\"../../../src/std/io/buffered/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>error</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/io/error/repr_bitpacked.rs.html\">repr_bitpacked.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/io/copy.rs.html\">copy.rs</a><a href=\"../../../src/std/io/cursor.rs.html\">cursor.rs</a><a href=\"../../../src/std/io/error.rs.html\">error.rs</a><a href=\"../../../src/std/io/impls.rs.html\">impls.rs</a><a href=\"../../../src/std/io/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/io/prelude.rs.html\">prelude.rs</a><a href=\"../../../src/std/io/stdio.rs.html\">stdio.rs</a><a href=\"../../../src/std/io/util.rs.html\">util.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../src/std/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/net/socket_addr.rs.html\">socket_addr.rs</a><a href=\"../../../src/std/net/tcp.rs.html\">tcp.rs</a><a href=\"../../../src/std/net/udp.rs.html\">udp.rs</a></div></details><details class=\"dir-entry\"><summary>os</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fd</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/fd/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/fd/net.rs.html\">net.rs</a><a href=\"../../../src/std/os/fd/owned.rs.html\">owned.rs</a><a href=\"../../../src/std/os/fd/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>linux</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/linux/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/linux/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/linux/net.rs.html\">net.rs</a><a href=\"../../../src/std/os/linux/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/linux/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>linux_ext</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/net/linux_ext/addr.rs.html\">addr.rs</a><a href=\"../../../src/std/os/net/linux_ext/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/net/linux_ext/socket.rs.html\">socket.rs</a><a href=\"../../../src/std/os/net/linux_ext/tcp.rs.html\">tcp.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/net/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>raw</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/raw/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/net/addr.rs.html\">addr.rs</a><a href=\"../../../src/std/os/unix/net/ancillary.rs.html\">ancillary.rs</a><a href=\"../../../src/std/os/unix/net/datagram.rs.html\">datagram.rs</a><a href=\"../../../src/std/os/unix/net/listener.rs.html\">listener.rs</a><a href=\"../../../src/std/os/unix/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/net/stream.rs.html\">stream.rs</a><a href=\"../../../src/std/os/unix/net/ucred.rs.html\">ucred.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/unix/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/unix/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/unix/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/unix/thread.rs.html\">thread.rs</a></div></details><details class=\"dir-entry\"><summary>wasi</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/net/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/ffi.rs.html\">ffi.rs</a><a href=\"../../../src/std/os/wasi/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/wasi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>wasip2</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasip2/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>windows</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/windows/io/handle.rs.html\">handle.rs</a><a href=\"../../../src/std/os/windows/io/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/windows/io/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/windows/io/socket.rs.html\">socket.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/windows/ffi.rs.html\">ffi.rs</a><a href=\"../../../src/std/os/windows/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/windows/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/windows/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/windows/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/windows/thread.rs.html\">thread.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>std_float</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html\">lib.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/prelude/common.rs.html\">common.rs</a><a href=\"../../../src/std/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>mpmc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sync/mpmc/array.rs.html\">array.rs</a><a href=\"../../../src/std/sync/mpmc/context.rs.html\">context.rs</a><a href=\"../../../src/std/sync/mpmc/counter.rs.html\">counter.rs</a><a href=\"../../../src/std/sync/mpmc/error.rs.html\">error.rs</a><a href=\"../../../src/std/sync/mpmc/list.rs.html\">list.rs</a><a href=\"../../../src/std/sync/mpmc/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sync/mpmc/select.rs.html\">select.rs</a><a href=\"../../../src/std/sync/mpmc/utils.rs.html\">utils.rs</a><a href=\"../../../src/std/sync/mpmc/waker.rs.html\">waker.rs</a><a href=\"../../../src/std/sync/mpmc/zero.rs.html\">zero.rs</a></div></details><details class=\"dir-entry\"><summary>mpsc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sync/mpsc/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sync/barrier.rs.html\">barrier.rs</a><a href=\"../../../src/std/sync/condvar.rs.html\">condvar.rs</a><a href=\"../../../src/std/sync/lazy_lock.rs.html\">lazy_lock.rs</a><a href=\"../../../src/std/sync/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sync/mutex.rs.html\">mutex.rs</a><a href=\"../../../src/std/sync/once.rs.html\">once.rs</a><a href=\"../../../src/std/sync/once_lock.rs.html\">once_lock.rs</a><a href=\"../../../src/std/sync/poison.rs.html\">poison.rs</a><a href=\"../../../src/std/sync/reentrant_lock.rs.html\">reentrant_lock.rs</a><a href=\"../../../src/std/sync/rwlock.rs.html\">rwlock.rs</a></div></details><details class=\"dir-entry\"><summary>sys</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>os_str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/os_str/bytes.rs.html\">bytes.rs</a><a href=\"../../../src/std/sys/os_str/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>pal</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/common/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/sys/pal/common/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/common/small_c_string.rs.html\">small_c_string.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>process</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/unix/process/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/unix/process/process_common.rs.html\">process_common.rs</a><a href=\"../../../src/std/sys/pal/unix/process/process_unix.rs.html\">process_unix.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/unix/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/sys/pal/unix/args.rs.html\">args.rs</a><a href=\"../../../src/std/sys/pal/unix/env.rs.html\">env.rs</a><a href=\"../../../src/std/sys/pal/unix/fd.rs.html\">fd.rs</a><a href=\"../../../src/std/sys/pal/unix/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/sys/pal/unix/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/pal/unix/io.rs.html\">io.rs</a><a href=\"../../../src/std/sys/pal/unix/kernel_copy.rs.html\">kernel_copy.rs</a><a href=\"../../../src/std/sys/pal/unix/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/unix/net.rs.html\">net.rs</a><a href=\"../../../src/std/sys/pal/unix/os.rs.html\">os.rs</a><a href=\"../../../src/std/sys/pal/unix/pipe.rs.html\">pipe.rs</a><a href=\"../../../src/std/sys/pal/unix/rand.rs.html\">rand.rs</a><a href=\"../../../src/std/sys/pal/unix/stack_overflow.rs.html\">stack_overflow.rs</a><a href=\"../../../src/std/sys/pal/unix/stdio.rs.html\">stdio.rs</a><a href=\"../../../src/std/sys/pal/unix/thread.rs.html\">thread.rs</a><a href=\"../../../src/std/sys/pal/unix/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../src/std/sys/pal/unix/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../src/std/sys/pal/unix/time.rs.html\">time.rs</a><a href=\"../../../src/std/sys/pal/unix/weak.rs.html\">weak.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>path</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/path/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/path/unix.rs.html\">unix.rs</a></div></details><details class=\"dir-entry\"><summary>personality</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dwarf</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/personality/dwarf/eh.rs.html\">eh.rs</a><a href=\"../../../src/std/sys/personality/dwarf/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/personality/gcc.rs.html\">gcc.rs</a><a href=\"../../../src/std/sys/personality/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>condvar</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/condvar/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/condvar/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mutex</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/mutex/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/mutex/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>once</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/once/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/once/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>rwlock</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/rwlock/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/rwlock/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_parking</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/thread_parking/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/thread_parking/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_local</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fast_local</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/thread_local/fast_local/eager.rs.html\">eager.rs</a><a href=\"../../../src/std/sys/thread_local/fast_local/lazy.rs.html\">lazy.rs</a><a href=\"../../../src/std/sys/thread_local/fast_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/thread_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/cmath.rs.html\">cmath.rs</a><a href=\"../../../src/std/sys/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sys_common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys_common/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../src/std/sys_common/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/sys_common/io.rs.html\">io.rs</a><a href=\"../../../src/std/sys_common/lazy_box.rs.html\">lazy_box.rs</a><a href=\"../../../src/std/sys_common/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys_common/net.rs.html\">net.rs</a><a href=\"../../../src/std/sys_common/process.rs.html\">process.rs</a><a href=\"../../../src/std/sys_common/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../src/std/sys_common/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../src/std/sys_common/wstr.rs.html\">wstr.rs</a><a href=\"../../../src/std/sys_common/wtf8.rs.html\">wtf8.rs</a></div></details><details class=\"dir-entry\"><summary>thread</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/thread/local.rs.html\">local.rs</a><a href=\"../../../src/std/thread/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/thread/scoped.rs.html\">scoped.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/std/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../src/std/env.rs.html\">env.rs</a><a href=\"../../../src/std/error.rs.html\">error.rs</a><a href=\"../../../src/std/f128.rs.html\">f128.rs</a><a href=\"../../../src/std/f16.rs.html\">f16.rs</a><a href=\"../../../src/std/f32.rs.html\">f32.rs</a><a href=\"../../../src/std/f64.rs.html\">f64.rs</a><a href=\"../../../src/std/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/keyword_docs.rs.html\">keyword_docs.rs</a><a href=\"../../../src/std/lib.rs.html\">lib.rs</a><a href=\"../../../src/std/macros.rs.html\">macros.rs</a><a href=\"../../../src/std/num.rs.html\">num.rs</a><a href=\"../../../src/std/panic.rs.html\">panic.rs</a><a href=\"../../../src/std/panicking.rs.html\">panicking.rs</a><a href=\"../../../src/std/pat.rs.html\">pat.rs</a><a href=\"../../../src/std/path.rs.html\">path.rs</a><a href=\"../../../src/std/process.rs.html\">process.rs</a><a href=\"../../../src/std/rt.rs.html\">rt.rs</a><a href=\"../../../src/std/time.rs.html\">time.rs</a></div></details><details class=\"dir-entry\"><summary>test</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>formatters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/formatters/json.rs.html\">json.rs</a><a href=\"../../../src/test/formatters/junit.rs.html\">junit.rs</a><a href=\"../../../src/test/formatters/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/formatters/pretty.rs.html\">pretty.rs</a><a href=\"../../../src/test/formatters/terse.rs.html\">terse.rs</a></div></details><details class=\"dir-entry\"><summary>helpers</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/helpers/concurrency.rs.html\">concurrency.rs</a><a href=\"../../../src/test/helpers/metrics.rs.html\">metrics.rs</a><a href=\"../../../src/test/helpers/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/helpers/shuffle.rs.html\">shuffle.rs</a></div></details><details class=\"dir-entry\"><summary>term</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>terminfo</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>parser</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/term/terminfo/parser/compiled.rs.html\">compiled.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/test/term/terminfo/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/term/terminfo/parm.rs.html\">parm.rs</a><a href=\"../../../src/test/term/terminfo/searcher.rs.html\">searcher.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"><a href=\"../../../src/test/bench.rs.html\">bench.rs</a><a href=\"../../../src/test/cli.rs.html\">cli.rs</a><a href=\"../../../src/test/console.rs.html\">console.rs</a><a href=\"../../../src/test/event.rs.html\">event.rs</a><a href=\"../../../src/test/lib.rs.html\">lib.rs</a><a href=\"../../../src/test/options.rs.html\">options.rs</a><a href=\"../../../src/test/stats.rs.html\">stats.rs</a><a href=\"../../../src/test/term.rs.html\">term.rs</a><a href=\"../../../src/test/test_result.rs.html\">test_result.rs</a><a href=\"../../../src/test/time.rs.html\">time.rs</a><a href=\"../../../src/test/types.rs.html\">types.rs</a></div></details></div></nav><div class=\"sidebar-resizer\"></div><main><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../core/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"example-wrap\"><div data-nosnippet=\"\"><pre class=\"src-line-numbers\"><a href=\"#1\" id=\"1\">1</a>\n<a href=\"#2\" id=\"2\">2</a>\n<a href=\"#3\" id=\"3\">3</a>\n<a href=\"#4\" id=\"4\">4</a>\n<a href=\"#5\" id=\"5\">5</a>\n<a href=\"#6\" id=\"6\">6</a>\n<a href=\"#7\" id=\"7\">7</a>\n<a href=\"#8\" id=\"8\">8</a>\n<a href=\"#9\" id=\"9\">9</a>\n<a href=\"#10\" id=\"10\">10</a>\n<a href=\"#11\" id=\"11\">11</a>\n<a href=\"#12\" id=\"12\">12</a>\n<a href=\"#13\" id=\"13\">13</a>\n<a href=\"#14\" id=\"14\">14</a>\n<a href=\"#15\" id=\"15\">15</a>\n<a href=\"#16\" id=\"16\">16</a>\n<a href=\"#17\" id=\"17\">17</a>\n<a href=\"#18\" id=\"18\">18</a>\n<a href=\"#19\" id=\"19\">19</a>\n<a href=\"#20\" id=\"20\">20</a>\n<a href=\"#21\" id=\"21\">21</a>\n<a href=\"#22\" id=\"22\">22</a>\n<a href=\"#23\" id=\"23\">23</a>\n<a href=\"#24\" id=\"24\">24</a>\n<a href=\"#25\" id=\"25\">25</a>\n<a href=\"#26\" id=\"26\">26</a>\n<a href=\"#27\" id=\"27\">27</a>\n<a href=\"#28\" id=\"28\">28</a>\n<a href=\"#29\" id=\"29\">29</a>\n<a href=\"#30\" id=\"30\">30</a>\n<a href=\"#31\" id=\"31\">31</a>\n<a href=\"#32\" id=\"32\">32</a>\n<a href=\"#33\" id=\"33\">33</a>\n<a href=\"#34\" id=\"34\">34</a>\n<a href=\"#35\" id=\"35\">35</a>\n<a href=\"#36\" id=\"36\">36</a>\n<a href=\"#37\" id=\"37\">37</a>\n<a href=\"#38\" id=\"38\">38</a>\n<a href=\"#39\" id=\"39\">39</a>\n<a href=\"#40\" id=\"40\">40</a>\n<a href=\"#41\" id=\"41\">41</a>\n<a href=\"#42\" id=\"42\">42</a>\n<a href=\"#43\" id=\"43\">43</a>\n<a href=\"#44\" id=\"44\">44</a>\n<a href=\"#45\" id=\"45\">45</a>\n<a href=\"#46\" id=\"46\">46</a>\n<a href=\"#47\" id=\"47\">47</a>\n<a href=\"#48\" id=\"48\">48</a>\n<a href=\"#49\" id=\"49\">49</a>\n<a href=\"#50\" id=\"50\">50</a>\n<a href=\"#51\" id=\"51\">51</a>\n<a href=\"#52\" id=\"52\">52</a>\n<a href=\"#53\" id=\"53\">53</a>\n<a href=\"#54\" id=\"54\">54</a>\n<a href=\"#55\" id=\"55\">55</a>\n<a href=\"#56\" id=\"56\">56</a>\n<a href=\"#57\" id=\"57\">57</a>\n<a href=\"#58\" id=\"58\">58</a>\n<a href=\"#59\" id=\"59\">59</a>\n<a href=\"#60\" id=\"60\">60</a>\n<a href=\"#61\" id=\"61\">61</a>\n<a href=\"#62\" id=\"62\">62</a>\n<a href=\"#63\" id=\"63\">63</a>\n<a href=\"#64\" id=\"64\">64</a>\n<a href=\"#65\" id=\"65\">65</a>\n<a href=\"#66\" id=\"66\">66</a>\n<a href=\"#67\" id=\"67\">67</a>\n<a href=\"#68\" id=\"68\">68</a>\n<a href=\"#69\" id=\"69\">69</a>\n<a href=\"#70\" id=\"70\">70</a>\n<a href=\"#71\" id=\"71\">71</a>\n<a href=\"#72\" id=\"72\">72</a>\n<a href=\"#73\" id=\"73\">73</a>\n<a href=\"#74\" id=\"74\">74</a>\n<a href=\"#75\" id=\"75\">75</a>\n<a href=\"#76\" id=\"76\">76</a>\n<a href=\"#77\" id=\"77\">77</a>\n<a href=\"#78\" id=\"78\">78</a>\n<a href=\"#79\" id=\"79\">79</a>\n<a href=\"#80\" id=\"80\">80</a>\n<a href=\"#81\" id=\"81\">81</a>\n<a href=\"#82\" id=\"82\">82</a>\n<a href=\"#83\" id=\"83\">83</a>\n<a href=\"#84\" id=\"84\">84</a>\n<a href=\"#85\" id=\"85\">85</a>\n<a href=\"#86\" id=\"86\">86</a>\n<a href=\"#87\" id=\"87\">87</a>\n<a href=\"#88\" id=\"88\">88</a>\n<a href=\"#89\" id=\"89\">89</a>\n<a href=\"#90\" id=\"90\">90</a>\n<a href=\"#91\" id=\"91\">91</a>\n<a href=\"#92\" id=\"92\">92</a>\n<a href=\"#93\" id=\"93\">93</a>\n<a href=\"#94\" id=\"94\">94</a>\n<a href=\"#95\" id=\"95\">95</a>\n<a href=\"#96\" id=\"96\">96</a>\n<a href=\"#97\" id=\"97\">97</a>\n<a href=\"#98\" id=\"98\">98</a>\n<a href=\"#99\" id=\"99\">99</a>\n<a href=\"#100\" id=\"100\">100</a>\n<a href=\"#101\" id=\"101\">101</a>\n<a href=\"#102\" id=\"102\">102</a>\n<a href=\"#103\" id=\"103\">103</a>\n<a href=\"#104\" id=\"104\">104</a>\n<a href=\"#105\" id=\"105\">105</a>\n<a href=\"#106\" id=\"106\">106</a>\n<a href=\"#107\" id=\"107\">107</a>\n<a href=\"#108\" id=\"108\">108</a>\n<a href=\"#109\" id=\"109\">109</a>\n<a href=\"#110\" id=\"110\">110</a>\n<a href=\"#111\" id=\"111\">111</a>\n<a href=\"#112\" id=\"112\">112</a>\n<a href=\"#113\" id=\"113\">113</a>\n<a href=\"#114\" id=\"114\">114</a>\n<a href=\"#115\" id=\"115\">115</a>\n<a href=\"#116\" id=\"116\">116</a>\n<a href=\"#117\" id=\"117\">117</a>\n<a href=\"#118\" id=\"118\">118</a>\n<a href=\"#119\" id=\"119\">119</a>\n<a href=\"#120\" id=\"120\">120</a>\n<a href=\"#121\" id=\"121\">121</a>\n<a href=\"#122\" id=\"122\">122</a>\n<a href=\"#123\" id=\"123\">123</a>\n<a href=\"#124\" id=\"124\">124</a>\n<a href=\"#125\" id=\"125\">125</a>\n<a href=\"#126\" id=\"126\">126</a>\n<a href=\"#127\" id=\"127\">127</a>\n<a href=\"#128\" id=\"128\">128</a>\n<a href=\"#129\" id=\"129\">129</a>\n<a href=\"#130\" id=\"130\">130</a>\n<a href=\"#131\" id=\"131\">131</a>\n<a href=\"#132\" id=\"132\">132</a>\n<a href=\"#133\" id=\"133\">133</a>\n<a href=\"#134\" id=\"134\">134</a>\n<a href=\"#135\" id=\"135\">135</a>\n<a href=\"#136\" id=\"136\">136</a>\n<a href=\"#137\" id=\"137\">137</a>\n<a href=\"#138\" id=\"138\">138</a>\n<a href=\"#139\" id=\"139\">139</a>\n<a href=\"#140\" id=\"140\">140</a>\n<a href=\"#141\" id=\"141\">141</a>\n<a href=\"#142\" id=\"142\">142</a>\n<a href=\"#143\" id=\"143\">143</a>\n<a href=\"#144\" id=\"144\">144</a>\n<a href=\"#145\" id=\"145\">145</a>\n<a href=\"#146\" id=\"146\">146</a>\n<a href=\"#147\" id=\"147\">147</a>\n<a href=\"#148\" id=\"148\">148</a>\n<a href=\"#149\" id=\"149\">149</a>\n<a href=\"#150\" id=\"150\">150</a>\n<a href=\"#151\" id=\"151\">151</a>\n<a href=\"#152\" id=\"152\">152</a>\n<a href=\"#153\" id=\"153\">153</a>\n<a href=\"#154\" id=\"154\">154</a>\n<a href=\"#155\" id=\"155\">155</a>\n<a href=\"#156\" id=\"156\">156</a>\n<a href=\"#157\" id=\"157\">157</a>\n<a href=\"#158\" id=\"158\">158</a>\n<a href=\"#159\" id=\"159\">159</a>\n<a href=\"#160\" id=\"160\">160</a>\n<a href=\"#161\" id=\"161\">161</a>\n<a href=\"#162\" id=\"162\">162</a>\n<a href=\"#163\" id=\"163\">163</a>\n<a href=\"#164\" id=\"164\">164</a>\n<a href=\"#165\" id=\"165\">165</a>\n<a href=\"#166\" id=\"166\">166</a>\n<a href=\"#167\" id=\"167\">167</a>\n<a href=\"#168\" id=\"168\">168</a>\n<a href=\"#169\" id=\"169\">169</a>\n<a href=\"#170\" id=\"170\">170</a>\n<a href=\"#171\" id=\"171\">171</a>\n<a href=\"#172\" id=\"172\">172</a>\n<a href=\"#173\" id=\"173\">173</a>\n<a href=\"#174\" id=\"174\">174</a>\n<a href=\"#175\" id=\"175\">175</a>\n<a href=\"#176\" id=\"176\">176</a>\n<a href=\"#177\" id=\"177\">177</a>\n<a href=\"#178\" id=\"178\">178</a>\n<a href=\"#179\" id=\"179\">179</a>\n<a href=\"#180\" id=\"180\">180</a>\n<a href=\"#181\" id=\"181\">181</a>\n<a href=\"#182\" id=\"182\">182</a>\n<a href=\"#183\" id=\"183\">183</a>\n<a href=\"#184\" id=\"184\">184</a>\n<a href=\"#185\" id=\"185\">185</a>\n<a href=\"#186\" id=\"186\">186</a>\n<a href=\"#187\" id=\"187\">187</a>\n<a href=\"#188\" id=\"188\">188</a>\n<a href=\"#189\" id=\"189\">189</a>\n<a href=\"#190\" id=\"190\">190</a>\n<a href=\"#191\" id=\"191\">191</a>\n<a href=\"#192\" id=\"192\">192</a>\n<a href=\"#193\" id=\"193\">193</a>\n<a href=\"#194\" id=\"194\">194</a>\n<a href=\"#195\" id=\"195\">195</a>\n<a href=\"#196\" id=\"196\">196</a>\n<a href=\"#197\" id=\"197\">197</a>\n<a href=\"#198\" id=\"198\">198</a>\n<a href=\"#199\" id=\"199\">199</a>\n<a href=\"#200\" id=\"200\">200</a>\n<a href=\"#201\" id=\"201\">201</a>\n<a href=\"#202\" id=\"202\">202</a>\n<a href=\"#203\" id=\"203\">203</a>\n<a href=\"#204\" id=\"204\">204</a>\n<a href=\"#205\" id=\"205\">205</a>\n<a href=\"#206\" id=\"206\">206</a>\n<a href=\"#207\" id=\"207\">207</a>\n<a href=\"#208\" id=\"208\">208</a>\n<a href=\"#209\" id=\"209\">209</a>\n<a href=\"#210\" id=\"210\">210</a>\n<a href=\"#211\" id=\"211\">211</a>\n<a href=\"#212\" id=\"212\">212</a>\n<a href=\"#213\" id=\"213\">213</a>\n<a href=\"#214\" id=\"214\">214</a>\n<a href=\"#215\" id=\"215\">215</a>\n<a href=\"#216\" id=\"216\">216</a>\n<a href=\"#217\" id=\"217\">217</a>\n<a href=\"#218\" id=\"218\">218</a>\n<a href=\"#219\" id=\"219\">219</a>\n<a href=\"#220\" id=\"220\">220</a>\n<a href=\"#221\" id=\"221\">221</a>\n<a href=\"#222\" id=\"222\">222</a>\n<a href=\"#223\" id=\"223\">223</a>\n<a href=\"#224\" id=\"224\">224</a>\n<a href=\"#225\" id=\"225\">225</a>\n<a href=\"#226\" id=\"226\">226</a>\n<a href=\"#227\" id=\"227\">227</a>\n<a href=\"#228\" id=\"228\">228</a>\n<a href=\"#229\" id=\"229\">229</a>\n<a href=\"#230\" id=\"230\">230</a>\n<a href=\"#231\" id=\"231\">231</a>\n<a href=\"#232\" id=\"232\">232</a>\n<a href=\"#233\" id=\"233\">233</a>\n<a href=\"#234\" id=\"234\">234</a>\n<a href=\"#235\" id=\"235\">235</a>\n<a href=\"#236\" id=\"236\">236</a>\n<a href=\"#237\" id=\"237\">237</a>\n<a href=\"#238\" id=\"238\">238</a>\n<a href=\"#239\" id=\"239\">239</a>\n<a href=\"#240\" id=\"240\">240</a>\n<a href=\"#241\" id=\"241\">241</a>\n<a href=\"#242\" id=\"242\">242</a>\n<a href=\"#243\" id=\"243\">243</a>\n<a href=\"#244\" id=\"244\">244</a>\n<a href=\"#245\" id=\"245\">245</a>\n<a href=\"#246\" id=\"246\">246</a>\n<a href=\"#247\" id=\"247\">247</a>\n<a href=\"#248\" id=\"248\">248</a>\n<a href=\"#249\" id=\"249\">249</a>\n<a href=\"#250\" id=\"250\">250</a>\n<a href=\"#251\" id=\"251\">251</a>\n<a href=\"#252\" id=\"252\">252</a>\n<a href=\"#253\" id=\"253\">253</a>\n<a href=\"#254\" id=\"254\">254</a>\n<a href=\"#255\" id=\"255\">255</a>\n<a href=\"#256\" id=\"256\">256</a>\n<a href=\"#257\" id=\"257\">257</a>\n<a href=\"#258\" id=\"258\">258</a>\n<a href=\"#259\" id=\"259\">259</a>\n<a href=\"#260\" id=\"260\">260</a>\n<a href=\"#261\" id=\"261\">261</a>\n<a href=\"#262\" id=\"262\">262</a>\n<a href=\"#263\" id=\"263\">263</a>\n<a href=\"#264\" id=\"264\">264</a>\n<a href=\"#265\" id=\"265\">265</a>\n<a href=\"#266\" id=\"266\">266</a>\n<a href=\"#267\" id=\"267\">267</a>\n<a href=\"#268\" id=\"268\">268</a>\n<a href=\"#269\" id=\"269\">269</a>\n<a href=\"#270\" id=\"270\">270</a>\n<a href=\"#271\" id=\"271\">271</a>\n<a href=\"#272\" id=\"272\">272</a>\n<a href=\"#273\" id=\"273\">273</a>\n<a href=\"#274\" id=\"274\">274</a>\n<a href=\"#275\" id=\"275\">275</a>\n<a href=\"#276\" id=\"276\">276</a>\n<a href=\"#277\" id=\"277\">277</a>\n<a href=\"#278\" id=\"278\">278</a>\n<a href=\"#279\" id=\"279\">279</a>\n<a href=\"#280\" id=\"280\">280</a>\n<a href=\"#281\" id=\"281\">281</a>\n<a href=\"#282\" id=\"282\">282</a>\n<a href=\"#283\" id=\"283\">283</a>\n<a href=\"#284\" id=\"284\">284</a>\n<a href=\"#285\" id=\"285\">285</a>\n<a href=\"#286\" id=\"286\">286</a>\n<a href=\"#287\" id=\"287\">287</a>\n<a href=\"#288\" id=\"288\">288</a>\n<a href=\"#289\" id=\"289\">289</a>\n<a href=\"#290\" id=\"290\">290</a>\n<a href=\"#291\" id=\"291\">291</a>\n<a href=\"#292\" id=\"292\">292</a>\n<a href=\"#293\" id=\"293\">293</a>\n<a href=\"#294\" id=\"294\">294</a>\n<a href=\"#295\" id=\"295\">295</a>\n<a href=\"#296\" id=\"296\">296</a>\n<a href=\"#297\" id=\"297\">297</a>\n<a href=\"#298\" id=\"298\">298</a>\n<a href=\"#299\" id=\"299\">299</a>\n<a href=\"#300\" id=\"300\">300</a>\n<a href=\"#301\" id=\"301\">301</a>\n<a href=\"#302\" id=\"302\">302</a>\n<a href=\"#303\" id=\"303\">303</a>\n<a href=\"#304\" id=\"304\">304</a>\n<a href=\"#305\" id=\"305\">305</a>\n<a href=\"#306\" id=\"306\">306</a>\n<a href=\"#307\" id=\"307\">307</a>\n<a href=\"#308\" id=\"308\">308</a>\n<a href=\"#309\" id=\"309\">309</a>\n<a href=\"#310\" id=\"310\">310</a>\n<a href=\"#311\" id=\"311\">311</a>\n<a href=\"#312\" id=\"312\">312</a>\n<a href=\"#313\" id=\"313\">313</a>\n<a href=\"#314\" id=\"314\">314</a>\n<a href=\"#315\" id=\"315\">315</a>\n<a href=\"#316\" id=\"316\">316</a>\n<a href=\"#317\" id=\"317\">317</a>\n<a href=\"#318\" id=\"318\">318</a>\n<a href=\"#319\" id=\"319\">319</a>\n<a href=\"#320\" id=\"320\">320</a>\n<a href=\"#321\" id=\"321\">321</a>\n<a href=\"#322\" id=\"322\">322</a>\n<a href=\"#323\" id=\"323\">323</a>\n<a href=\"#324\" id=\"324\">324</a>\n<a href=\"#325\" id=\"325\">325</a>\n<a href=\"#326\" id=\"326\">326</a>\n<a href=\"#327\" id=\"327\">327</a>\n<a href=\"#328\" id=\"328\">328</a>\n<a href=\"#329\" id=\"329\">329</a>\n<a href=\"#330\" id=\"330\">330</a>\n<a href=\"#331\" id=\"331\">331</a>\n<a href=\"#332\" id=\"332\">332</a>\n<a href=\"#333\" id=\"333\">333</a>\n<a href=\"#334\" id=\"334\">334</a>\n<a href=\"#335\" id=\"335\">335</a>\n<a href=\"#336\" id=\"336\">336</a>\n<a href=\"#337\" id=\"337\">337</a>\n<a href=\"#338\" id=\"338\">338</a>\n<a href=\"#339\" id=\"339\">339</a>\n<a href=\"#340\" id=\"340\">340</a>\n<a href=\"#341\" id=\"341\">341</a>\n<a href=\"#342\" id=\"342\">342</a>\n<a href=\"#343\" id=\"343\">343</a>\n<a href=\"#344\" id=\"344\">344</a>\n<a href=\"#345\" id=\"345\">345</a>\n<a href=\"#346\" id=\"346\">346</a>\n<a href=\"#347\" id=\"347\">347</a>\n<a href=\"#348\" id=\"348\">348</a>\n<a href=\"#349\" id=\"349\">349</a>\n<a href=\"#350\" id=\"350\">350</a>\n<a href=\"#351\" id=\"351\">351</a>\n<a href=\"#352\" id=\"352\">352</a>\n<a href=\"#353\" id=\"353\">353</a>\n<a href=\"#354\" id=\"354\">354</a>\n<a href=\"#355\" id=\"355\">355</a>\n<a href=\"#356\" id=\"356\">356</a>\n<a href=\"#357\" id=\"357\">357</a>\n<a href=\"#358\" id=\"358\">358</a>\n<a href=\"#359\" id=\"359\">359</a>\n<a href=\"#360\" id=\"360\">360</a>\n<a href=\"#361\" id=\"361\">361</a>\n<a href=\"#362\" id=\"362\">362</a>\n<a href=\"#363\" id=\"363\">363</a>\n<a href=\"#364\" id=\"364\">364</a>\n<a href=\"#365\" id=\"365\">365</a>\n<a href=\"#366\" id=\"366\">366</a>\n<a href=\"#367\" id=\"367\">367</a>\n<a href=\"#368\" id=\"368\">368</a>\n<a href=\"#369\" id=\"369\">369</a>\n<a href=\"#370\" id=\"370\">370</a>\n<a href=\"#371\" id=\"371\">371</a>\n<a href=\"#372\" id=\"372\">372</a>\n<a href=\"#373\" id=\"373\">373</a>\n<a href=\"#374\" id=\"374\">374</a>\n<a href=\"#375\" id=\"375\">375</a>\n<a href=\"#376\" id=\"376\">376</a>\n<a href=\"#377\" id=\"377\">377</a>\n<a href=\"#378\" id=\"378\">378</a>\n<a href=\"#379\" id=\"379\">379</a>\n<a href=\"#380\" id=\"380\">380</a>\n<a href=\"#381\" id=\"381\">381</a>\n<a href=\"#382\" id=\"382\">382</a>\n<a href=\"#383\" id=\"383\">383</a>\n<a href=\"#384\" id=\"384\">384</a>\n<a href=\"#385\" id=\"385\">385</a>\n<a href=\"#386\" id=\"386\">386</a>\n<a href=\"#387\" id=\"387\">387</a>\n<a href=\"#388\" id=\"388\">388</a>\n<a href=\"#389\" id=\"389\">389</a>\n<a href=\"#390\" id=\"390\">390</a>\n<a href=\"#391\" id=\"391\">391</a>\n<a href=\"#392\" id=\"392\">392</a>\n<a href=\"#393\" id=\"393\">393</a>\n<a href=\"#394\" id=\"394\">394</a>\n<a href=\"#395\" id=\"395\">395</a>\n<a href=\"#396\" id=\"396\">396</a>\n<a href=\"#397\" id=\"397\">397</a>\n<a href=\"#398\" id=\"398\">398</a>\n<a href=\"#399\" id=\"399\">399</a>\n<a href=\"#400\" id=\"400\">400</a>\n<a href=\"#401\" id=\"401\">401</a>\n<a href=\"#402\" id=\"402\">402</a>\n<a href=\"#403\" id=\"403\">403</a>\n<a href=\"#404\" id=\"404\">404</a>\n<a href=\"#405\" id=\"405\">405</a>\n<a href=\"#406\" id=\"406\">406</a>\n<a href=\"#407\" id=\"407\">407</a>\n<a href=\"#408\" id=\"408\">408</a>\n<a href=\"#409\" id=\"409\">409</a>\n<a href=\"#410\" id=\"410\">410</a>\n<a href=\"#411\" id=\"411\">411</a>\n<a href=\"#412\" id=\"412\">412</a>\n<a href=\"#413\" id=\"413\">413</a>\n<a href=\"#414\" id=\"414\">414</a>\n<a href=\"#415\" id=\"415\">415</a>\n<a href=\"#416\" id=\"416\">416</a>\n<a href=\"#417\" id=\"417\">417</a>\n<a href=\"#418\" id=\"418\">418</a>\n<a href=\"#419\" id=\"419\">419</a>\n<a href=\"#420\" id=\"420\">420</a>\n<a href=\"#421\" id=\"421\">421</a>\n<a href=\"#422\" id=\"422\">422</a>\n<a href=\"#423\" id=\"423\">423</a>\n<a href=\"#424\" id=\"424\">424</a>\n<a href=\"#425\" id=\"425\">425</a>\n<a href=\"#426\" id=\"426\">426</a>\n<a href=\"#427\" id=\"427\">427</a>\n<a href=\"#428\" id=\"428\">428</a>\n<a href=\"#429\" id=\"429\">429</a>\n<a href=\"#430\" id=\"430\">430</a>\n<a href=\"#431\" id=\"431\">431</a>\n<a href=\"#432\" id=\"432\">432</a>\n<a href=\"#433\" id=\"433\">433</a>\n<a href=\"#434\" id=\"434\">434</a>\n<a href=\"#435\" id=\"435\">435</a>\n<a href=\"#436\" id=\"436\">436</a>\n<a href=\"#437\" id=\"437\">437</a>\n<a href=\"#438\" id=\"438\">438</a>\n<a href=\"#439\" id=\"439\">439</a>\n<a href=\"#440\" id=\"440\">440</a>\n<a href=\"#441\" id=\"441\">441</a>\n<a href=\"#442\" id=\"442\">442</a>\n<a href=\"#443\" id=\"443\">443</a>\n<a href=\"#444\" id=\"444\">444</a>\n<a href=\"#445\" id=\"445\">445</a>\n<a href=\"#446\" id=\"446\">446</a>\n<a href=\"#447\" id=\"447\">447</a>\n<a href=\"#448\" id=\"448\">448</a>\n<a href=\"#449\" id=\"449\">449</a>\n<a href=\"#450\" id=\"450\">450</a>\n<a href=\"#451\" id=\"451\">451</a>\n<a href=\"#452\" id=\"452\">452</a>\n<a href=\"#453\" id=\"453\">453</a>\n<a href=\"#454\" id=\"454\">454</a>\n<a href=\"#455\" id=\"455\">455</a>\n<a href=\"#456\" id=\"456\">456</a>\n<a href=\"#457\" id=\"457\">457</a>\n<a href=\"#458\" id=\"458\">458</a>\n<a href=\"#459\" id=\"459\">459</a>\n<a href=\"#460\" id=\"460\">460</a>\n<a href=\"#461\" id=\"461\">461</a>\n<a href=\"#462\" id=\"462\">462</a>\n<a href=\"#463\" id=\"463\">463</a>\n<a href=\"#464\" id=\"464\">464</a>\n<a href=\"#465\" id=\"465\">465</a>\n<a href=\"#466\" id=\"466\">466</a>\n<a href=\"#467\" id=\"467\">467</a>\n<a href=\"#468\" id=\"468\">468</a>\n<a href=\"#469\" id=\"469\">469</a>\n<a href=\"#470\" id=\"470\">470</a>\n<a href=\"#471\" id=\"471\">471</a>\n<a href=\"#472\" id=\"472\">472</a>\n<a href=\"#473\" id=\"473\">473</a>\n<a href=\"#474\" id=\"474\">474</a>\n<a href=\"#475\" id=\"475\">475</a>\n<a href=\"#476\" id=\"476\">476</a>\n<a href=\"#477\" id=\"477\">477</a>\n<a href=\"#478\" id=\"478\">478</a>\n<a href=\"#479\" id=\"479\">479</a>\n<a href=\"#480\" id=\"480\">480</a>\n<a href=\"#481\" id=\"481\">481</a>\n<a href=\"#482\" id=\"482\">482</a>\n<a href=\"#483\" id=\"483\">483</a>\n<a href=\"#484\" id=\"484\">484</a>\n<a href=\"#485\" id=\"485\">485</a>\n<a href=\"#486\" id=\"486\">486</a>\n<a href=\"#487\" id=\"487\">487</a>\n<a href=\"#488\" id=\"488\">488</a>\n<a href=\"#489\" id=\"489\">489</a>\n<a href=\"#490\" id=\"490\">490</a>\n<a href=\"#491\" id=\"491\">491</a>\n<a href=\"#492\" id=\"492\">492</a>\n<a href=\"#493\" id=\"493\">493</a>\n<a href=\"#494\" id=\"494\">494</a>\n<a href=\"#495\" id=\"495\">495</a>\n<a href=\"#496\" id=\"496\">496</a>\n<a href=\"#497\" id=\"497\">497</a>\n<a href=\"#498\" id=\"498\">498</a>\n<a href=\"#499\" id=\"499\">499</a>\n<a href=\"#500\" id=\"500\">500</a>\n<a href=\"#501\" id=\"501\">501</a>\n<a href=\"#502\" id=\"502\">502</a>\n<a href=\"#503\" id=\"503\">503</a>\n<a href=\"#504\" id=\"504\">504</a>\n<a href=\"#505\" id=\"505\">505</a>\n<a href=\"#506\" id=\"506\">506</a>\n<a href=\"#507\" id=\"507\">507</a>\n<a href=\"#508\" id=\"508\">508</a>\n<a href=\"#509\" id=\"509\">509</a>\n<a href=\"#510\" id=\"510\">510</a>\n<a href=\"#511\" id=\"511\">511</a>\n<a href=\"#512\" id=\"512\">512</a>\n<a href=\"#513\" id=\"513\">513</a>\n<a href=\"#514\" id=\"514\">514</a>\n<a href=\"#515\" id=\"515\">515</a>\n<a href=\"#516\" id=\"516\">516</a>\n<a href=\"#517\" id=\"517\">517</a>\n<a href=\"#518\" id=\"518\">518</a>\n<a href=\"#519\" id=\"519\">519</a>\n<a href=\"#520\" id=\"520\">520</a>\n<a href=\"#521\" id=\"521\">521</a>\n<a href=\"#522\" id=\"522\">522</a>\n<a href=\"#523\" id=\"523\">523</a>\n<a href=\"#524\" id=\"524\">524</a>\n<a href=\"#525\" id=\"525\">525</a>\n<a href=\"#526\" id=\"526\">526</a>\n<a href=\"#527\" id=\"527\">527</a>\n<a href=\"#528\" id=\"528\">528</a>\n<a href=\"#529\" id=\"529\">529</a>\n<a href=\"#530\" id=\"530\">530</a>\n<a href=\"#531\" id=\"531\">531</a>\n<a href=\"#532\" id=\"532\">532</a>\n<a href=\"#533\" id=\"533\">533</a>\n<a href=\"#534\" id=\"534\">534</a>\n<a href=\"#535\" id=\"535\">535</a>\n<a href=\"#536\" id=\"536\">536</a>\n<a href=\"#537\" id=\"537\">537</a>\n<a href=\"#538\" id=\"538\">538</a>\n<a href=\"#539\" id=\"539\">539</a>\n<a href=\"#540\" id=\"540\">540</a>\n<a href=\"#541\" id=\"541\">541</a>\n<a href=\"#542\" id=\"542\">542</a>\n<a href=\"#543\" id=\"543\">543</a>\n<a href=\"#544\" id=\"544\">544</a>\n<a href=\"#545\" id=\"545\">545</a>\n<a href=\"#546\" id=\"546\">546</a>\n<a href=\"#547\" id=\"547\">547</a>\n<a href=\"#548\" id=\"548\">548</a>\n<a href=\"#549\" id=\"549\">549</a>\n<a href=\"#550\" id=\"550\">550</a>\n<a href=\"#551\" id=\"551\">551</a>\n<a href=\"#552\" id=\"552\">552</a>\n<a href=\"#553\" id=\"553\">553</a>\n<a href=\"#554\" id=\"554\">554</a>\n<a href=\"#555\" id=\"555\">555</a>\n<a href=\"#556\" id=\"556\">556</a>\n<a href=\"#557\" id=\"557\">557</a>\n<a href=\"#558\" id=\"558\">558</a>\n<a href=\"#559\" id=\"559\">559</a>\n<a href=\"#560\" id=\"560\">560</a>\n<a href=\"#561\" id=\"561\">561</a>\n<a href=\"#562\" id=\"562\">562</a>\n<a href=\"#563\" id=\"563\">563</a>\n<a href=\"#564\" id=\"564\">564</a>\n<a href=\"#565\" id=\"565\">565</a>\n<a href=\"#566\" id=\"566\">566</a>\n<a href=\"#567\" id=\"567\">567</a>\n<a href=\"#568\" id=\"568\">568</a>\n<a href=\"#569\" id=\"569\">569</a>\n<a href=\"#570\" id=\"570\">570</a>\n<a href=\"#571\" id=\"571\">571</a>\n<a href=\"#572\" id=\"572\">572</a>\n<a href=\"#573\" id=\"573\">573</a>\n<a href=\"#574\" id=\"574\">574</a>\n<a href=\"#575\" id=\"575\">575</a>\n<a href=\"#576\" id=\"576\">576</a>\n<a href=\"#577\" id=\"577\">577</a>\n<a href=\"#578\" id=\"578\">578</a>\n<a href=\"#579\" id=\"579\">579</a>\n<a href=\"#580\" id=\"580\">580</a>\n<a href=\"#581\" id=\"581\">581</a>\n<a href=\"#582\" id=\"582\">582</a>\n<a href=\"#583\" id=\"583\">583</a>\n<a href=\"#584\" id=\"584\">584</a>\n<a href=\"#585\" id=\"585\">585</a>\n<a href=\"#586\" id=\"586\">586</a>\n<a href=\"#587\" id=\"587\">587</a>\n<a href=\"#588\" id=\"588\">588</a>\n<a href=\"#589\" id=\"589\">589</a>\n<a href=\"#590\" id=\"590\">590</a>\n<a href=\"#591\" id=\"591\">591</a>\n<a href=\"#592\" id=\"592\">592</a>\n<a href=\"#593\" id=\"593\">593</a>\n<a href=\"#594\" id=\"594\">594</a>\n<a href=\"#595\" id=\"595\">595</a>\n<a href=\"#596\" id=\"596\">596</a>\n<a href=\"#597\" id=\"597\">597</a>\n<a href=\"#598\" id=\"598\">598</a>\n<a href=\"#599\" id=\"599\">599</a>\n<a href=\"#600\" id=\"600\">600</a>\n<a href=\"#601\" id=\"601\">601</a>\n<a href=\"#602\" id=\"602\">602</a>\n<a href=\"#603\" id=\"603\">603</a>\n<a href=\"#604\" id=\"604\">604</a>\n<a href=\"#605\" id=\"605\">605</a>\n<a href=\"#606\" id=\"606\">606</a>\n<a href=\"#607\" id=\"607\">607</a>\n<a href=\"#608\" id=\"608\">608</a>\n<a href=\"#609\" id=\"609\">609</a>\n<a href=\"#610\" id=\"610\">610</a>\n<a href=\"#611\" id=\"611\">611</a>\n<a href=\"#612\" id=\"612\">612</a>\n<a href=\"#613\" id=\"613\">613</a>\n<a href=\"#614\" id=\"614\">614</a>\n<a href=\"#615\" id=\"615\">615</a>\n<a href=\"#616\" id=\"616\">616</a>\n<a href=\"#617\" id=\"617\">617</a>\n<a href=\"#618\" id=\"618\">618</a>\n<a href=\"#619\" id=\"619\">619</a>\n<a href=\"#620\" id=\"620\">620</a>\n<a href=\"#621\" id=\"621\">621</a>\n<a href=\"#622\" id=\"622\">622</a>\n<a href=\"#623\" id=\"623\">623</a>\n<a href=\"#624\" id=\"624\">624</a>\n<a href=\"#625\" id=\"625\">625</a>\n<a href=\"#626\" id=\"626\">626</a>\n<a href=\"#627\" id=\"627\">627</a>\n<a href=\"#628\" id=\"628\">628</a>\n<a href=\"#629\" id=\"629\">629</a>\n<a href=\"#630\" id=\"630\">630</a>\n<a href=\"#631\" id=\"631\">631</a>\n<a href=\"#632\" id=\"632\">632</a>\n<a href=\"#633\" id=\"633\">633</a>\n<a href=\"#634\" id=\"634\">634</a>\n<a href=\"#635\" id=\"635\">635</a>\n<a href=\"#636\" id=\"636\">636</a>\n<a href=\"#637\" id=\"637\">637</a>\n<a href=\"#638\" id=\"638\">638</a>\n<a href=\"#639\" id=\"639\">639</a>\n<a href=\"#640\" id=\"640\">640</a>\n<a href=\"#641\" id=\"641\">641</a>\n<a href=\"#642\" id=\"642\">642</a>\n<a href=\"#643\" id=\"643\">643</a>\n<a href=\"#644\" id=\"644\">644</a>\n<a href=\"#645\" id=\"645\">645</a>\n<a href=\"#646\" id=\"646\">646</a>\n<a href=\"#647\" id=\"647\">647</a>\n<a href=\"#648\" id=\"648\">648</a>\n<a href=\"#649\" id=\"649\">649</a>\n<a href=\"#650\" id=\"650\">650</a>\n<a href=\"#651\" id=\"651\">651</a>\n<a href=\"#652\" id=\"652\">652</a>\n<a href=\"#653\" id=\"653\">653</a>\n<a href=\"#654\" id=\"654\">654</a>\n<a href=\"#655\" id=\"655\">655</a>\n<a href=\"#656\" id=\"656\">656</a>\n<a href=\"#657\" id=\"657\">657</a>\n<a href=\"#658\" id=\"658\">658</a>\n<a href=\"#659\" id=\"659\">659</a>\n<a href=\"#660\" id=\"660\">660</a>\n<a href=\"#661\" id=\"661\">661</a>\n<a href=\"#662\" id=\"662\">662</a>\n<a href=\"#663\" id=\"663\">663</a>\n<a href=\"#664\" id=\"664\">664</a>\n<a href=\"#665\" id=\"665\">665</a>\n<a href=\"#666\" id=\"666\">666</a>\n<a href=\"#667\" id=\"667\">667</a>\n<a href=\"#668\" id=\"668\">668</a>\n<a href=\"#669\" id=\"669\">669</a>\n<a href=\"#670\" id=\"670\">670</a>\n<a href=\"#671\" id=\"671\">671</a>\n<a href=\"#672\" id=\"672\">672</a>\n<a href=\"#673\" id=\"673\">673</a>\n<a href=\"#674\" id=\"674\">674</a>\n<a href=\"#675\" id=\"675\">675</a>\n<a href=\"#676\" id=\"676\">676</a>\n<a href=\"#677\" id=\"677\">677</a>\n<a href=\"#678\" id=\"678\">678</a>\n<a href=\"#679\" id=\"679\">679</a>\n<a href=\"#680\" id=\"680\">680</a>\n<a href=\"#681\" id=\"681\">681</a>\n<a href=\"#682\" id=\"682\">682</a>\n<a href=\"#683\" id=\"683\">683</a>\n<a href=\"#684\" id=\"684\">684</a>\n<a href=\"#685\" id=\"685\">685</a>\n<a href=\"#686\" id=\"686\">686</a>\n<a href=\"#687\" id=\"687\">687</a>\n<a href=\"#688\" id=\"688\">688</a>\n<a href=\"#689\" id=\"689\">689</a>\n<a href=\"#690\" id=\"690\">690</a>\n<a href=\"#691\" id=\"691\">691</a>\n<a href=\"#692\" id=\"692\">692</a>\n<a href=\"#693\" id=\"693\">693</a>\n<a href=\"#694\" id=\"694\">694</a>\n<a href=\"#695\" id=\"695\">695</a>\n<a href=\"#696\" id=\"696\">696</a>\n<a href=\"#697\" id=\"697\">697</a>\n<a href=\"#698\" id=\"698\">698</a>\n<a href=\"#699\" id=\"699\">699</a>\n<a href=\"#700\" id=\"700\">700</a>\n<a href=\"#701\" id=\"701\">701</a>\n<a href=\"#702\" id=\"702\">702</a>\n<a href=\"#703\" id=\"703\">703</a>\n<a href=\"#704\" id=\"704\">704</a>\n<a href=\"#705\" id=\"705\">705</a>\n<a href=\"#706\" id=\"706\">706</a>\n<a href=\"#707\" id=\"707\">707</a>\n<a href=\"#708\" id=\"708\">708</a>\n<a href=\"#709\" id=\"709\">709</a>\n<a href=\"#710\" id=\"710\">710</a>\n<a href=\"#711\" id=\"711\">711</a>\n<a href=\"#712\" id=\"712\">712</a>\n<a href=\"#713\" id=\"713\">713</a>\n<a href=\"#714\" id=\"714\">714</a>\n<a href=\"#715\" id=\"715\">715</a>\n<a href=\"#716\" id=\"716\">716</a>\n<a href=\"#717\" id=\"717\">717</a>\n<a href=\"#718\" id=\"718\">718</a>\n<a href=\"#719\" id=\"719\">719</a>\n<a href=\"#720\" id=\"720\">720</a>\n<a href=\"#721\" id=\"721\">721</a>\n<a href=\"#722\" id=\"722\">722</a>\n<a href=\"#723\" id=\"723\">723</a>\n<a href=\"#724\" id=\"724\">724</a>\n<a href=\"#725\" id=\"725\">725</a>\n<a href=\"#726\" id=\"726\">726</a>\n<a href=\"#727\" id=\"727\">727</a>\n<a href=\"#728\" id=\"728\">728</a>\n<a href=\"#729\" id=\"729\">729</a>\n<a href=\"#730\" id=\"730\">730</a>\n<a href=\"#731\" id=\"731\">731</a>\n<a href=\"#732\" id=\"732\">732</a>\n<a href=\"#733\" id=\"733\">733</a>\n<a href=\"#734\" id=\"734\">734</a>\n<a href=\"#735\" id=\"735\">735</a>\n<a href=\"#736\" id=\"736\">736</a>\n<a href=\"#737\" id=\"737\">737</a>\n<a href=\"#738\" id=\"738\">738</a>\n<a href=\"#739\" id=\"739\">739</a>\n<a href=\"#740\" id=\"740\">740</a>\n<a href=\"#741\" id=\"741\">741</a>\n<a href=\"#742\" id=\"742\">742</a>\n<a href=\"#743\" id=\"743\">743</a>\n<a href=\"#744\" id=\"744\">744</a>\n<a href=\"#745\" id=\"745\">745</a>\n<a href=\"#746\" id=\"746\">746</a>\n<a href=\"#747\" id=\"747\">747</a>\n<a href=\"#748\" id=\"748\">748</a>\n<a href=\"#749\" id=\"749\">749</a>\n<a href=\"#750\" id=\"750\">750</a>\n<a href=\"#751\" id=\"751\">751</a>\n<a href=\"#752\" id=\"752\">752</a>\n<a href=\"#753\" id=\"753\">753</a>\n<a href=\"#754\" id=\"754\">754</a>\n<a href=\"#755\" id=\"755\">755</a>\n<a href=\"#756\" id=\"756\">756</a>\n<a href=\"#757\" id=\"757\">757</a>\n<a href=\"#758\" id=\"758\">758</a>\n<a href=\"#759\" id=\"759\">759</a>\n<a href=\"#760\" id=\"760\">760</a>\n<a href=\"#761\" id=\"761\">761</a>\n<a href=\"#762\" id=\"762\">762</a>\n<a href=\"#763\" id=\"763\">763</a>\n<a href=\"#764\" id=\"764\">764</a>\n<a href=\"#765\" id=\"765\">765</a>\n<a href=\"#766\" id=\"766\">766</a>\n<a href=\"#767\" id=\"767\">767</a>\n<a href=\"#768\" id=\"768\">768</a>\n<a href=\"#769\" id=\"769\">769</a>\n<a href=\"#770\" id=\"770\">770</a>\n<a href=\"#771\" id=\"771\">771</a>\n<a href=\"#772\" id=\"772\">772</a>\n<a href=\"#773\" id=\"773\">773</a>\n<a href=\"#774\" id=\"774\">774</a>\n<a href=\"#775\" id=\"775\">775</a>\n<a href=\"#776\" id=\"776\">776</a>\n<a href=\"#777\" id=\"777\">777</a>\n<a href=\"#778\" id=\"778\">778</a>\n<a href=\"#779\" id=\"779\">779</a>\n<a href=\"#780\" id=\"780\">780</a>\n<a href=\"#781\" id=\"781\">781</a>\n<a href=\"#782\" id=\"782\">782</a>\n<a href=\"#783\" id=\"783\">783</a>\n<a href=\"#784\" id=\"784\">784</a>\n<a href=\"#785\" id=\"785\">785</a>\n<a href=\"#786\" id=\"786\">786</a>\n<a href=\"#787\" id=\"787\">787</a>\n<a href=\"#788\" id=\"788\">788</a>\n<a href=\"#789\" id=\"789\">789</a>\n<a href=\"#790\" id=\"790\">790</a>\n<a href=\"#791\" id=\"791\">791</a>\n<a href=\"#792\" id=\"792\">792</a>\n<a href=\"#793\" id=\"793\">793</a>\n<a href=\"#794\" id=\"794\">794</a>\n<a href=\"#795\" id=\"795\">795</a>\n<a href=\"#796\" id=\"796\">796</a>\n<a href=\"#797\" id=\"797\">797</a>\n<a href=\"#798\" id=\"798\">798</a>\n<a href=\"#799\" id=\"799\">799</a>\n<a href=\"#800\" id=\"800\">800</a>\n<a href=\"#801\" id=\"801\">801</a>\n<a href=\"#802\" id=\"802\">802</a>\n<a href=\"#803\" id=\"803\">803</a>\n<a href=\"#804\" id=\"804\">804</a>\n<a href=\"#805\" id=\"805\">805</a>\n<a href=\"#806\" id=\"806\">806</a>\n<a href=\"#807\" id=\"807\">807</a>\n<a href=\"#808\" id=\"808\">808</a>\n<a href=\"#809\" id=\"809\">809</a>\n<a href=\"#810\" id=\"810\">810</a>\n<a href=\"#811\" id=\"811\">811</a>\n<a href=\"#812\" id=\"812\">812</a>\n<a href=\"#813\" id=\"813\">813</a>\n<a href=\"#814\" id=\"814\">814</a>\n<a href=\"#815\" id=\"815\">815</a>\n<a href=\"#816\" id=\"816\">816</a>\n<a href=\"#817\" id=\"817\">817</a>\n<a href=\"#818\" id=\"818\">818</a>\n<a href=\"#819\" id=\"819\">819</a>\n<a href=\"#820\" id=\"820\">820</a>\n<a href=\"#821\" id=\"821\">821</a>\n<a href=\"#822\" id=\"822\">822</a>\n<a href=\"#823\" id=\"823\">823</a>\n<a href=\"#824\" id=\"824\">824</a>\n<a href=\"#825\" id=\"825\">825</a>\n<a href=\"#826\" id=\"826\">826</a>\n<a href=\"#827\" id=\"827\">827</a>\n<a href=\"#828\" id=\"828\">828</a>\n<a href=\"#829\" id=\"829\">829</a>\n<a href=\"#830\" id=\"830\">830</a>\n<a href=\"#831\" id=\"831\">831</a>\n<a href=\"#832\" id=\"832\">832</a>\n<a href=\"#833\" id=\"833\">833</a>\n<a href=\"#834\" id=\"834\">834</a>\n<a href=\"#835\" id=\"835\">835</a>\n<a href=\"#836\" id=\"836\">836</a>\n<a href=\"#837\" id=\"837\">837</a>\n<a href=\"#838\" id=\"838\">838</a>\n<a href=\"#839\" id=\"839\">839</a>\n<a href=\"#840\" id=\"840\">840</a>\n<a href=\"#841\" id=\"841\">841</a>\n<a href=\"#842\" id=\"842\">842</a>\n<a href=\"#843\" id=\"843\">843</a>\n<a href=\"#844\" id=\"844\">844</a>\n<a href=\"#845\" id=\"845\">845</a>\n<a href=\"#846\" id=\"846\">846</a>\n<a href=\"#847\" id=\"847\">847</a>\n<a href=\"#848\" id=\"848\">848</a>\n<a href=\"#849\" id=\"849\">849</a>\n<a href=\"#850\" id=\"850\">850</a>\n<a href=\"#851\" id=\"851\">851</a>\n<a href=\"#852\" id=\"852\">852</a>\n<a href=\"#853\" id=\"853\">853</a>\n<a href=\"#854\" id=\"854\">854</a>\n<a href=\"#855\" id=\"855\">855</a>\n<a href=\"#856\" id=\"856\">856</a>\n<a href=\"#857\" id=\"857\">857</a>\n<a href=\"#858\" id=\"858\">858</a>\n<a href=\"#859\" id=\"859\">859</a>\n<a href=\"#860\" id=\"860\">860</a>\n<a href=\"#861\" id=\"861\">861</a>\n<a href=\"#862\" id=\"862\">862</a>\n<a href=\"#863\" id=\"863\">863</a>\n<a href=\"#864\" id=\"864\">864</a>\n<a href=\"#865\" id=\"865\">865</a>\n<a href=\"#866\" id=\"866\">866</a>\n<a href=\"#867\" id=\"867\">867</a>\n<a href=\"#868\" id=\"868\">868</a>\n<a href=\"#869\" id=\"869\">869</a>\n<a href=\"#870\" id=\"870\">870</a>\n<a href=\"#871\" id=\"871\">871</a>\n<a href=\"#872\" id=\"872\">872</a>\n<a href=\"#873\" id=\"873\">873</a>\n<a href=\"#874\" id=\"874\">874</a>\n<a href=\"#875\" id=\"875\">875</a>\n<a href=\"#876\" id=\"876\">876</a>\n<a href=\"#877\" id=\"877\">877</a>\n<a href=\"#878\" id=\"878\">878</a>\n<a href=\"#879\" id=\"879\">879</a>\n<a href=\"#880\" id=\"880\">880</a>\n<a href=\"#881\" id=\"881\">881</a>\n<a href=\"#882\" id=\"882\">882</a>\n<a href=\"#883\" id=\"883\">883</a>\n<a href=\"#884\" id=\"884\">884</a>\n<a href=\"#885\" id=\"885\">885</a>\n<a href=\"#886\" id=\"886\">886</a>\n<a href=\"#887\" id=\"887\">887</a>\n<a href=\"#888\" id=\"888\">888</a>\n<a href=\"#889\" id=\"889\">889</a>\n<a href=\"#890\" id=\"890\">890</a>\n<a href=\"#891\" id=\"891\">891</a>\n<a href=\"#892\" id=\"892\">892</a>\n<a href=\"#893\" id=\"893\">893</a>\n<a href=\"#894\" id=\"894\">894</a>\n<a href=\"#895\" id=\"895\">895</a>\n<a href=\"#896\" id=\"896\">896</a>\n<a href=\"#897\" id=\"897\">897</a>\n<a href=\"#898\" id=\"898\">898</a>\n<a href=\"#899\" id=\"899\">899</a>\n<a href=\"#900\" id=\"900\">900</a>\n<a href=\"#901\" id=\"901\">901</a>\n<a href=\"#902\" id=\"902\">902</a>\n<a href=\"#903\" id=\"903\">903</a>\n<a href=\"#904\" id=\"904\">904</a>\n<a href=\"#905\" id=\"905\">905</a>\n<a href=\"#906\" id=\"906\">906</a>\n<a href=\"#907\" id=\"907\">907</a>\n<a href=\"#908\" id=\"908\">908</a>\n<a href=\"#909\" id=\"909\">909</a>\n<a href=\"#910\" id=\"910\">910</a>\n<a href=\"#911\" id=\"911\">911</a>\n<a href=\"#912\" id=\"912\">912</a>\n<a href=\"#913\" id=\"913\">913</a>\n<a href=\"#914\" id=\"914\">914</a>\n<a href=\"#915\" id=\"915\">915</a>\n<a href=\"#916\" id=\"916\">916</a>\n<a href=\"#917\" id=\"917\">917</a>\n<a href=\"#918\" id=\"918\">918</a>\n<a href=\"#919\" id=\"919\">919</a>\n<a href=\"#920\" id=\"920\">920</a>\n<a href=\"#921\" id=\"921\">921</a>\n<a href=\"#922\" id=\"922\">922</a>\n<a href=\"#923\" id=\"923\">923</a>\n<a href=\"#924\" id=\"924\">924</a>\n<a href=\"#925\" id=\"925\">925</a>\n<a href=\"#926\" id=\"926\">926</a>\n<a href=\"#927\" id=\"927\">927</a>\n<a href=\"#928\" id=\"928\">928</a>\n<a href=\"#929\" id=\"929\">929</a>\n<a href=\"#930\" id=\"930\">930</a>\n<a href=\"#931\" id=\"931\">931</a>\n<a href=\"#932\" id=\"932\">932</a>\n<a href=\"#933\" id=\"933\">933</a>\n<a href=\"#934\" id=\"934\">934</a>\n<a href=\"#935\" id=\"935\">935</a>\n<a href=\"#936\" id=\"936\">936</a>\n<a href=\"#937\" id=\"937\">937</a>\n<a href=\"#938\" id=\"938\">938</a>\n<a href=\"#939\" id=\"939\">939</a>\n<a href=\"#940\" id=\"940\">940</a>\n<a href=\"#941\" id=\"941\">941</a>\n<a href=\"#942\" id=\"942\">942</a>\n<a href=\"#943\" id=\"943\">943</a>\n<a href=\"#944\" id=\"944\">944</a>\n<a href=\"#945\" id=\"945\">945</a>\n<a href=\"#946\" id=\"946\">946</a>\n<a href=\"#947\" id=\"947\">947</a>\n<a href=\"#948\" id=\"948\">948</a>\n<a href=\"#949\" id=\"949\">949</a>\n<a href=\"#950\" id=\"950\">950</a>\n<a href=\"#951\" id=\"951\">951</a>\n<a href=\"#952\" id=\"952\">952</a>\n<a href=\"#953\" id=\"953\">953</a>\n<a href=\"#954\" id=\"954\">954</a>\n<a href=\"#955\" id=\"955\">955</a>\n<a href=\"#956\" id=\"956\">956</a>\n<a href=\"#957\" id=\"957\">957</a>\n<a href=\"#958\" id=\"958\">958</a>\n<a href=\"#959\" id=\"959\">959</a>\n<a href=\"#960\" id=\"960\">960</a>\n<a href=\"#961\" id=\"961\">961</a>\n<a href=\"#962\" id=\"962\">962</a>\n<a href=\"#963\" id=\"963\">963</a>\n<a href=\"#964\" id=\"964\">964</a>\n<a href=\"#965\" id=\"965\">965</a>\n<a href=\"#966\" id=\"966\">966</a>\n<a href=\"#967\" id=\"967\">967</a>\n<a href=\"#968\" id=\"968\">968</a>\n<a href=\"#969\" id=\"969\">969</a>\n<a href=\"#970\" id=\"970\">970</a>\n<a href=\"#971\" id=\"971\">971</a>\n<a href=\"#972\" id=\"972\">972</a>\n<a href=\"#973\" id=\"973\">973</a>\n<a href=\"#974\" id=\"974\">974</a>\n<a href=\"#975\" id=\"975\">975</a>\n<a href=\"#976\" id=\"976\">976</a>\n<a href=\"#977\" id=\"977\">977</a>\n<a href=\"#978\" id=\"978\">978</a>\n<a href=\"#979\" id=\"979\">979</a>\n<a href=\"#980\" id=\"980\">980</a>\n<a href=\"#981\" id=\"981\">981</a>\n<a href=\"#982\" id=\"982\">982</a>\n<a href=\"#983\" id=\"983\">983</a>\n<a href=\"#984\" id=\"984\">984</a>\n<a href=\"#985\" id=\"985\">985</a>\n<a href=\"#986\" id=\"986\">986</a>\n<a href=\"#987\" id=\"987\">987</a>\n<a href=\"#988\" id=\"988\">988</a>\n<a href=\"#989\" id=\"989\">989</a>\n<a href=\"#990\" id=\"990\">990</a>\n<a href=\"#991\" id=\"991\">991</a>\n<a href=\"#992\" id=\"992\">992</a>\n<a href=\"#993\" id=\"993\">993</a>\n<a href=\"#994\" id=\"994\">994</a>\n<a href=\"#995\" id=\"995\">995</a>\n<a href=\"#996\" id=\"996\">996</a>\n<a href=\"#997\" id=\"997\">997</a>\n<a href=\"#998\" id=\"998\">998</a>\n<a href=\"#999\" id=\"999\">999</a>\n<a href=\"#1000\" id=\"1000\">1000</a>\n<a href=\"#1001\" id=\"1001\">1001</a>\n<a href=\"#1002\" id=\"1002\">1002</a>\n<a href=\"#1003\" id=\"1003\">1003</a>\n<a href=\"#1004\" id=\"1004\">1004</a>\n<a href=\"#1005\" id=\"1005\">1005</a>\n<a href=\"#1006\" id=\"1006\">1006</a>\n<a href=\"#1007\" id=\"1007\">1007</a>\n<a href=\"#1008\" id=\"1008\">1008</a>\n<a href=\"#1009\" id=\"1009\">1009</a>\n<a href=\"#1010\" id=\"1010\">1010</a>\n<a href=\"#1011\" id=\"1011\">1011</a>\n<a href=\"#1012\" id=\"1012\">1012</a>\n<a href=\"#1013\" id=\"1013\">1013</a>\n<a href=\"#1014\" id=\"1014\">1014</a>\n<a href=\"#1015\" id=\"1015\">1015</a>\n<a href=\"#1016\" id=\"1016\">1016</a>\n<a href=\"#1017\" id=\"1017\">1017</a>\n<a href=\"#1018\" id=\"1018\">1018</a>\n<a href=\"#1019\" id=\"1019\">1019</a>\n<a href=\"#1020\" id=\"1020\">1020</a>\n<a href=\"#1021\" id=\"1021\">1021</a>\n<a href=\"#1022\" id=\"1022\">1022</a>\n<a href=\"#1023\" id=\"1023\">1023</a>\n<a href=\"#1024\" id=\"1024\">1024</a>\n<a href=\"#1025\" id=\"1025\">1025</a>\n<a href=\"#1026\" id=\"1026\">1026</a>\n<a href=\"#1027\" id=\"1027\">1027</a>\n<a href=\"#1028\" id=\"1028\">1028</a>\n<a href=\"#1029\" id=\"1029\">1029</a>\n<a href=\"#1030\" id=\"1030\">1030</a>\n<a href=\"#1031\" id=\"1031\">1031</a>\n<a href=\"#1032\" id=\"1032\">1032</a>\n<a href=\"#1033\" id=\"1033\">1033</a>\n<a href=\"#1034\" id=\"1034\">1034</a>\n<a href=\"#1035\" id=\"1035\">1035</a>\n<a href=\"#1036\" id=\"1036\">1036</a>\n<a href=\"#1037\" id=\"1037\">1037</a>\n<a href=\"#1038\" id=\"1038\">1038</a>\n<a href=\"#1039\" id=\"1039\">1039</a>\n<a href=\"#1040\" id=\"1040\">1040</a>\n<a href=\"#1041\" id=\"1041\">1041</a>\n<a href=\"#1042\" id=\"1042\">1042</a>\n<a href=\"#1043\" id=\"1043\">1043</a>\n<a href=\"#1044\" id=\"1044\">1044</a>\n<a href=\"#1045\" id=\"1045\">1045</a>\n<a href=\"#1046\" id=\"1046\">1046</a>\n<a href=\"#1047\" id=\"1047\">1047</a>\n<a href=\"#1048\" id=\"1048\">1048</a>\n<a href=\"#1049\" id=\"1049\">1049</a>\n<a href=\"#1050\" id=\"1050\">1050</a>\n<a href=\"#1051\" id=\"1051\">1051</a>\n<a href=\"#1052\" id=\"1052\">1052</a>\n<a href=\"#1053\" id=\"1053\">1053</a>\n<a href=\"#1054\" id=\"1054\">1054</a>\n<a href=\"#1055\" id=\"1055\">1055</a>\n<a href=\"#1056\" id=\"1056\">1056</a>\n<a href=\"#1057\" id=\"1057\">1057</a>\n<a href=\"#1058\" id=\"1058\">1058</a>\n<a href=\"#1059\" id=\"1059\">1059</a>\n<a href=\"#1060\" id=\"1060\">1060</a>\n<a href=\"#1061\" id=\"1061\">1061</a>\n<a href=\"#1062\" id=\"1062\">1062</a>\n<a href=\"#1063\" id=\"1063\">1063</a>\n<a href=\"#1064\" id=\"1064\">1064</a>\n<a href=\"#1065\" id=\"1065\">1065</a>\n<a href=\"#1066\" id=\"1066\">1066</a>\n<a href=\"#1067\" id=\"1067\">1067</a>\n<a href=\"#1068\" id=\"1068\">1068</a>\n<a href=\"#1069\" id=\"1069\">1069</a>\n<a href=\"#1070\" id=\"1070\">1070</a>\n<a href=\"#1071\" id=\"1071\">1071</a>\n<a href=\"#1072\" id=\"1072\">1072</a>\n<a href=\"#1073\" id=\"1073\">1073</a>\n<a href=\"#1074\" id=\"1074\">1074</a>\n<a href=\"#1075\" id=\"1075\">1075</a>\n<a href=\"#1076\" id=\"1076\">1076</a>\n<a href=\"#1077\" id=\"1077\">1077</a>\n<a href=\"#1078\" id=\"1078\">1078</a>\n<a href=\"#1079\" id=\"1079\">1079</a>\n<a href=\"#1080\" id=\"1080\">1080</a>\n<a href=\"#1081\" id=\"1081\">1081</a>\n<a href=\"#1082\" id=\"1082\">1082</a>\n<a href=\"#1083\" id=\"1083\">1083</a>\n<a href=\"#1084\" id=\"1084\">1084</a>\n<a href=\"#1085\" id=\"1085\">1085</a>\n<a href=\"#1086\" id=\"1086\">1086</a>\n<a href=\"#1087\" id=\"1087\">1087</a>\n<a href=\"#1088\" id=\"1088\">1088</a>\n<a href=\"#1089\" id=\"1089\">1089</a>\n<a href=\"#1090\" id=\"1090\">1090</a>\n<a href=\"#1091\" id=\"1091\">1091</a>\n<a href=\"#1092\" id=\"1092\">1092</a>\n<a href=\"#1093\" id=\"1093\">1093</a>\n<a href=\"#1094\" id=\"1094\">1094</a>\n<a href=\"#1095\" id=\"1095\">1095</a>\n<a href=\"#1096\" id=\"1096\">1096</a>\n<a href=\"#1097\" id=\"1097\">1097</a>\n<a href=\"#1098\" id=\"1098\">1098</a>\n<a href=\"#1099\" id=\"1099\">1099</a>\n<a href=\"#1100\" id=\"1100\">1100</a>\n<a href=\"#1101\" id=\"1101\">1101</a>\n<a href=\"#1102\" id=\"1102\">1102</a>\n<a href=\"#1103\" id=\"1103\">1103</a>\n<a href=\"#1104\" id=\"1104\">1104</a>\n<a href=\"#1105\" id=\"1105\">1105</a>\n<a href=\"#1106\" id=\"1106\">1106</a>\n<a href=\"#1107\" id=\"1107\">1107</a>\n<a href=\"#1108\" id=\"1108\">1108</a>\n<a href=\"#1109\" id=\"1109\">1109</a>\n<a href=\"#1110\" id=\"1110\">1110</a>\n<a href=\"#1111\" id=\"1111\">1111</a>\n<a href=\"#1112\" id=\"1112\">1112</a>\n<a href=\"#1113\" id=\"1113\">1113</a>\n<a href=\"#1114\" id=\"1114\">1114</a>\n<a href=\"#1115\" id=\"1115\">1115</a>\n<a href=\"#1116\" id=\"1116\">1116</a>\n<a href=\"#1117\" id=\"1117\">1117</a>\n<a href=\"#1118\" id=\"1118\">1118</a>\n<a href=\"#1119\" id=\"1119\">1119</a>\n<a href=\"#1120\" id=\"1120\">1120</a>\n<a href=\"#1121\" id=\"1121\">1121</a>\n<a href=\"#1122\" id=\"1122\">1122</a>\n<a href=\"#1123\" id=\"1123\">1123</a>\n<a href=\"#1124\" id=\"1124\">1124</a>\n<a href=\"#1125\" id=\"1125\">1125</a>\n<a href=\"#1126\" id=\"1126\">1126</a>\n<a href=\"#1127\" id=\"1127\">1127</a>\n<a href=\"#1128\" id=\"1128\">1128</a>\n<a href=\"#1129\" id=\"1129\">1129</a>\n<a href=\"#1130\" id=\"1130\">1130</a>\n<a href=\"#1131\" id=\"1131\">1131</a>\n<a href=\"#1132\" id=\"1132\">1132</a>\n<a href=\"#1133\" id=\"1133\">1133</a>\n<a href=\"#1134\" id=\"1134\">1134</a>\n<a href=\"#1135\" id=\"1135\">1135</a>\n<a href=\"#1136\" id=\"1136\">1136</a>\n<a href=\"#1137\" id=\"1137\">1137</a>\n<a href=\"#1138\" id=\"1138\">1138</a>\n<a href=\"#1139\" id=\"1139\">1139</a>\n<a href=\"#1140\" id=\"1140\">1140</a>\n<a href=\"#1141\" id=\"1141\">1141</a>\n<a href=\"#1142\" id=\"1142\">1142</a>\n<a href=\"#1143\" id=\"1143\">1143</a>\n<a href=\"#1144\" id=\"1144\">1144</a>\n<a href=\"#1145\" id=\"1145\">1145</a>\n<a href=\"#1146\" id=\"1146\">1146</a>\n<a href=\"#1147\" id=\"1147\">1147</a>\n<a href=\"#1148\" id=\"1148\">1148</a>\n<a href=\"#1149\" id=\"1149\">1149</a>\n<a href=\"#1150\" id=\"1150\">1150</a>\n<a href=\"#1151\" id=\"1151\">1151</a>\n<a href=\"#1152\" id=\"1152\">1152</a>\n<a href=\"#1153\" id=\"1153\">1153</a>\n<a href=\"#1154\" id=\"1154\">1154</a>\n<a href=\"#1155\" id=\"1155\">1155</a>\n<a href=\"#1156\" id=\"1156\">1156</a>\n<a href=\"#1157\" id=\"1157\">1157</a>\n<a href=\"#1158\" id=\"1158\">1158</a>\n<a href=\"#1159\" id=\"1159\">1159</a>\n<a href=\"#1160\" id=\"1160\">1160</a>\n<a href=\"#1161\" id=\"1161\">1161</a>\n<a href=\"#1162\" id=\"1162\">1162</a>\n<a href=\"#1163\" id=\"1163\">1163</a>\n<a href=\"#1164\" id=\"1164\">1164</a>\n<a href=\"#1165\" id=\"1165\">1165</a>\n<a href=\"#1166\" id=\"1166\">1166</a>\n<a href=\"#1167\" id=\"1167\">1167</a>\n<a href=\"#1168\" id=\"1168\">1168</a>\n<a href=\"#1169\" id=\"1169\">1169</a>\n<a href=\"#1170\" id=\"1170\">1170</a>\n<a href=\"#1171\" id=\"1171\">1171</a>\n<a href=\"#1172\" id=\"1172\">1172</a>\n<a href=\"#1173\" id=\"1173\">1173</a>\n<a href=\"#1174\" id=\"1174\">1174</a>\n<a href=\"#1175\" id=\"1175\">1175</a>\n<a href=\"#1176\" id=\"1176\">1176</a>\n<a href=\"#1177\" id=\"1177\">1177</a>\n<a href=\"#1178\" id=\"1178\">1178</a>\n<a href=\"#1179\" id=\"1179\">1179</a>\n<a href=\"#1180\" id=\"1180\">1180</a>\n<a href=\"#1181\" id=\"1181\">1181</a>\n<a href=\"#1182\" id=\"1182\">1182</a>\n<a href=\"#1183\" id=\"1183\">1183</a>\n<a href=\"#1184\" id=\"1184\">1184</a>\n<a href=\"#1185\" id=\"1185\">1185</a>\n<a href=\"#1186\" id=\"1186\">1186</a>\n<a href=\"#1187\" id=\"1187\">1187</a>\n<a href=\"#1188\" id=\"1188\">1188</a>\n<a href=\"#1189\" id=\"1189\">1189</a>\n<a href=\"#1190\" id=\"1190\">1190</a>\n<a href=\"#1191\" id=\"1191\">1191</a>\n<a href=\"#1192\" id=\"1192\">1192</a>\n<a href=\"#1193\" id=\"1193\">1193</a>\n<a href=\"#1194\" id=\"1194\">1194</a>\n<a href=\"#1195\" id=\"1195\">1195</a>\n<a href=\"#1196\" id=\"1196\">1196</a>\n<a href=\"#1197\" id=\"1197\">1197</a>\n<a href=\"#1198\" id=\"1198\">1198</a>\n<a href=\"#1199\" id=\"1199\">1199</a>\n<a href=\"#1200\" id=\"1200\">1200</a>\n<a href=\"#1201\" id=\"1201\">1201</a>\n<a href=\"#1202\" id=\"1202\">1202</a>\n<a href=\"#1203\" id=\"1203\">1203</a>\n<a href=\"#1204\" id=\"1204\">1204</a>\n<a href=\"#1205\" id=\"1205\">1205</a>\n<a href=\"#1206\" id=\"1206\">1206</a>\n<a href=\"#1207\" id=\"1207\">1207</a>\n<a href=\"#1208\" id=\"1208\">1208</a>\n<a href=\"#1209\" id=\"1209\">1209</a>\n<a href=\"#1210\" id=\"1210\">1210</a>\n<a href=\"#1211\" id=\"1211\">1211</a>\n<a href=\"#1212\" id=\"1212\">1212</a>\n<a href=\"#1213\" id=\"1213\">1213</a>\n<a href=\"#1214\" id=\"1214\">1214</a>\n<a href=\"#1215\" id=\"1215\">1215</a>\n<a href=\"#1216\" id=\"1216\">1216</a>\n<a href=\"#1217\" id=\"1217\">1217</a>\n<a href=\"#1218\" id=\"1218\">1218</a>\n<a href=\"#1219\" id=\"1219\">1219</a>\n<a href=\"#1220\" id=\"1220\">1220</a>\n<a href=\"#1221\" id=\"1221\">1221</a>\n<a href=\"#1222\" id=\"1222\">1222</a>\n<a href=\"#1223\" id=\"1223\">1223</a>\n<a href=\"#1224\" id=\"1224\">1224</a>\n<a href=\"#1225\" id=\"1225\">1225</a>\n<a href=\"#1226\" id=\"1226\">1226</a>\n<a href=\"#1227\" id=\"1227\">1227</a>\n<a href=\"#1228\" id=\"1228\">1228</a>\n<a href=\"#1229\" id=\"1229\">1229</a>\n<a href=\"#1230\" id=\"1230\">1230</a>\n<a href=\"#1231\" id=\"1231\">1231</a>\n<a href=\"#1232\" id=\"1232\">1232</a>\n<a href=\"#1233\" id=\"1233\">1233</a>\n<a href=\"#1234\" id=\"1234\">1234</a>\n<a href=\"#1235\" id=\"1235\">1235</a>\n<a href=\"#1236\" id=\"1236\">1236</a>\n<a href=\"#1237\" id=\"1237\">1237</a>\n<a href=\"#1238\" id=\"1238\">1238</a>\n<a href=\"#1239\" id=\"1239\">1239</a>\n<a href=\"#1240\" id=\"1240\">1240</a>\n<a href=\"#1241\" id=\"1241\">1241</a>\n<a href=\"#1242\" id=\"1242\">1242</a>\n<a href=\"#1243\" id=\"1243\">1243</a>\n<a href=\"#1244\" id=\"1244\">1244</a>\n<a href=\"#1245\" id=\"1245\">1245</a>\n<a href=\"#1246\" id=\"1246\">1246</a>\n<a href=\"#1247\" id=\"1247\">1247</a>\n<a href=\"#1248\" id=\"1248\">1248</a>\n<a href=\"#1249\" id=\"1249\">1249</a>\n<a href=\"#1250\" id=\"1250\">1250</a>\n<a href=\"#1251\" id=\"1251\">1251</a>\n<a href=\"#1252\" id=\"1252\">1252</a>\n<a href=\"#1253\" id=\"1253\">1253</a>\n<a href=\"#1254\" id=\"1254\">1254</a>\n<a href=\"#1255\" id=\"1255\">1255</a>\n<a href=\"#1256\" id=\"1256\">1256</a>\n<a href=\"#1257\" id=\"1257\">1257</a>\n<a href=\"#1258\" id=\"1258\">1258</a>\n<a href=\"#1259\" id=\"1259\">1259</a>\n<a href=\"#1260\" id=\"1260\">1260</a>\n<a href=\"#1261\" id=\"1261\">1261</a>\n<a href=\"#1262\" id=\"1262\">1262</a>\n<a href=\"#1263\" id=\"1263\">1263</a>\n<a href=\"#1264\" id=\"1264\">1264</a>\n<a href=\"#1265\" id=\"1265\">1265</a>\n<a href=\"#1266\" id=\"1266\">1266</a>\n<a href=\"#1267\" id=\"1267\">1267</a>\n<a href=\"#1268\" id=\"1268\">1268</a>\n<a href=\"#1269\" id=\"1269\">1269</a>\n<a href=\"#1270\" id=\"1270\">1270</a>\n<a href=\"#1271\" id=\"1271\">1271</a>\n<a href=\"#1272\" id=\"1272\">1272</a>\n<a href=\"#1273\" id=\"1273\">1273</a>\n<a href=\"#1274\" id=\"1274\">1274</a>\n<a href=\"#1275\" id=\"1275\">1275</a>\n<a href=\"#1276\" id=\"1276\">1276</a>\n<a href=\"#1277\" id=\"1277\">1277</a>\n<a href=\"#1278\" id=\"1278\">1278</a>\n<a href=\"#1279\" id=\"1279\">1279</a>\n<a href=\"#1280\" id=\"1280\">1280</a>\n<a href=\"#1281\" id=\"1281\">1281</a>\n<a href=\"#1282\" id=\"1282\">1282</a>\n<a href=\"#1283\" id=\"1283\">1283</a>\n<a href=\"#1284\" id=\"1284\">1284</a>\n<a href=\"#1285\" id=\"1285\">1285</a>\n<a href=\"#1286\" id=\"1286\">1286</a>\n<a href=\"#1287\" id=\"1287\">1287</a>\n<a href=\"#1288\" id=\"1288\">1288</a>\n<a href=\"#1289\" id=\"1289\">1289</a>\n<a href=\"#1290\" id=\"1290\">1290</a>\n<a href=\"#1291\" id=\"1291\">1291</a>\n<a href=\"#1292\" id=\"1292\">1292</a>\n<a href=\"#1293\" id=\"1293\">1293</a>\n<a href=\"#1294\" id=\"1294\">1294</a>\n<a href=\"#1295\" id=\"1295\">1295</a>\n<a href=\"#1296\" id=\"1296\">1296</a>\n<a href=\"#1297\" id=\"1297\">1297</a>\n<a href=\"#1298\" id=\"1298\">1298</a>\n<a href=\"#1299\" id=\"1299\">1299</a>\n<a href=\"#1300\" id=\"1300\">1300</a>\n<a href=\"#1301\" id=\"1301\">1301</a>\n<a href=\"#1302\" id=\"1302\">1302</a>\n<a href=\"#1303\" id=\"1303\">1303</a>\n<a href=\"#1304\" id=\"1304\">1304</a>\n<a href=\"#1305\" id=\"1305\">1305</a>\n<a href=\"#1306\" id=\"1306\">1306</a>\n<a href=\"#1307\" id=\"1307\">1307</a>\n<a href=\"#1308\" id=\"1308\">1308</a>\n<a href=\"#1309\" id=\"1309\">1309</a>\n<a href=\"#1310\" id=\"1310\">1310</a>\n<a href=\"#1311\" id=\"1311\">1311</a>\n<a href=\"#1312\" id=\"1312\">1312</a>\n<a href=\"#1313\" id=\"1313\">1313</a>\n<a href=\"#1314\" id=\"1314\">1314</a>\n<a href=\"#1315\" id=\"1315\">1315</a>\n<a href=\"#1316\" id=\"1316\">1316</a>\n<a href=\"#1317\" id=\"1317\">1317</a>\n<a href=\"#1318\" id=\"1318\">1318</a>\n<a href=\"#1319\" id=\"1319\">1319</a>\n<a href=\"#1320\" id=\"1320\">1320</a>\n<a href=\"#1321\" id=\"1321\">1321</a>\n<a href=\"#1322\" id=\"1322\">1322</a>\n<a href=\"#1323\" id=\"1323\">1323</a>\n<a href=\"#1324\" id=\"1324\">1324</a>\n<a href=\"#1325\" id=\"1325\">1325</a>\n<a href=\"#1326\" id=\"1326\">1326</a>\n<a href=\"#1327\" id=\"1327\">1327</a>\n<a href=\"#1328\" id=\"1328\">1328</a>\n<a href=\"#1329\" id=\"1329\">1329</a>\n<a href=\"#1330\" id=\"1330\">1330</a>\n<a href=\"#1331\" id=\"1331\">1331</a>\n<a href=\"#1332\" id=\"1332\">1332</a>\n<a href=\"#1333\" id=\"1333\">1333</a>\n<a href=\"#1334\" id=\"1334\">1334</a>\n<a href=\"#1335\" id=\"1335\">1335</a>\n<a href=\"#1336\" id=\"1336\">1336</a>\n<a href=\"#1337\" id=\"1337\">1337</a>\n<a href=\"#1338\" id=\"1338\">1338</a>\n<a href=\"#1339\" id=\"1339\">1339</a>\n<a href=\"#1340\" id=\"1340\">1340</a>\n<a href=\"#1341\" id=\"1341\">1341</a>\n<a href=\"#1342\" id=\"1342\">1342</a>\n<a href=\"#1343\" id=\"1343\">1343</a>\n<a href=\"#1344\" id=\"1344\">1344</a>\n<a href=\"#1345\" id=\"1345\">1345</a>\n<a href=\"#1346\" id=\"1346\">1346</a>\n<a href=\"#1347\" id=\"1347\">1347</a>\n<a href=\"#1348\" id=\"1348\">1348</a>\n<a href=\"#1349\" id=\"1349\">1349</a>\n<a href=\"#1350\" id=\"1350\">1350</a>\n<a href=\"#1351\" id=\"1351\">1351</a>\n<a href=\"#1352\" id=\"1352\">1352</a>\n<a href=\"#1353\" id=\"1353\">1353</a>\n<a href=\"#1354\" id=\"1354\">1354</a>\n<a href=\"#1355\" id=\"1355\">1355</a>\n<a href=\"#1356\" id=\"1356\">1356</a>\n<a href=\"#1357\" id=\"1357\">1357</a>\n<a href=\"#1358\" id=\"1358\">1358</a>\n<a href=\"#1359\" id=\"1359\">1359</a>\n<a href=\"#1360\" id=\"1360\">1360</a>\n<a href=\"#1361\" id=\"1361\">1361</a>\n<a href=\"#1362\" id=\"1362\">1362</a>\n<a href=\"#1363\" id=\"1363\">1363</a>\n<a href=\"#1364\" id=\"1364\">1364</a>\n<a href=\"#1365\" id=\"1365\">1365</a>\n<a href=\"#1366\" id=\"1366\">1366</a>\n<a href=\"#1367\" id=\"1367\">1367</a>\n<a href=\"#1368\" id=\"1368\">1368</a>\n<a href=\"#1369\" id=\"1369\">1369</a>\n<a href=\"#1370\" id=\"1370\">1370</a>\n<a href=\"#1371\" id=\"1371\">1371</a>\n<a href=\"#1372\" id=\"1372\">1372</a>\n<a href=\"#1373\" id=\"1373\">1373</a>\n<a href=\"#1374\" id=\"1374\">1374</a>\n<a href=\"#1375\" id=\"1375\">1375</a>\n<a href=\"#1376\" id=\"1376\">1376</a>\n<a href=\"#1377\" id=\"1377\">1377</a>\n<a href=\"#1378\" id=\"1378\">1378</a>\n<a href=\"#1379\" id=\"1379\">1379</a>\n<a href=\"#1380\" id=\"1380\">1380</a>\n<a href=\"#1381\" id=\"1381\">1381</a>\n<a href=\"#1382\" id=\"1382\">1382</a>\n<a href=\"#1383\" id=\"1383\">1383</a>\n<a href=\"#1384\" id=\"1384\">1384</a>\n<a href=\"#1385\" id=\"1385\">1385</a>\n<a href=\"#1386\" id=\"1386\">1386</a>\n<a href=\"#1387\" id=\"1387\">1387</a>\n<a href=\"#1388\" id=\"1388\">1388</a>\n<a href=\"#1389\" id=\"1389\">1389</a>\n<a href=\"#1390\" id=\"1390\">1390</a>\n<a href=\"#1391\" id=\"1391\">1391</a>\n<a href=\"#1392\" id=\"1392\">1392</a>\n<a href=\"#1393\" id=\"1393\">1393</a>\n<a href=\"#1394\" id=\"1394\">1394</a>\n<a href=\"#1395\" id=\"1395\">1395</a>\n<a href=\"#1396\" id=\"1396\">1396</a>\n<a href=\"#1397\" id=\"1397\">1397</a>\n<a href=\"#1398\" id=\"1398\">1398</a>\n<a href=\"#1399\" id=\"1399\">1399</a>\n<a href=\"#1400\" id=\"1400\">1400</a>\n<a href=\"#1401\" id=\"1401\">1401</a>\n<a href=\"#1402\" id=\"1402\">1402</a>\n<a href=\"#1403\" id=\"1403\">1403</a>\n<a href=\"#1404\" id=\"1404\">1404</a>\n<a href=\"#1405\" id=\"1405\">1405</a>\n<a href=\"#1406\" id=\"1406\">1406</a>\n<a href=\"#1407\" id=\"1407\">1407</a>\n<a href=\"#1408\" id=\"1408\">1408</a>\n<a href=\"#1409\" id=\"1409\">1409</a>\n<a href=\"#1410\" id=\"1410\">1410</a>\n<a href=\"#1411\" id=\"1411\">1411</a>\n<a href=\"#1412\" id=\"1412\">1412</a>\n<a href=\"#1413\" id=\"1413\">1413</a>\n<a href=\"#1414\" id=\"1414\">1414</a>\n<a href=\"#1415\" id=\"1415\">1415</a>\n<a href=\"#1416\" id=\"1416\">1416</a>\n<a href=\"#1417\" id=\"1417\">1417</a>\n<a href=\"#1418\" id=\"1418\">1418</a>\n<a href=\"#1419\" id=\"1419\">1419</a>\n<a href=\"#1420\" id=\"1420\">1420</a>\n<a href=\"#1421\" id=\"1421\">1421</a>\n<a href=\"#1422\" id=\"1422\">1422</a>\n<a href=\"#1423\" id=\"1423\">1423</a>\n<a href=\"#1424\" id=\"1424\">1424</a>\n<a href=\"#1425\" id=\"1425\">1425</a>\n<a href=\"#1426\" id=\"1426\">1426</a>\n<a href=\"#1427\" id=\"1427\">1427</a>\n<a href=\"#1428\" id=\"1428\">1428</a>\n<a href=\"#1429\" id=\"1429\">1429</a>\n<a href=\"#1430\" id=\"1430\">1430</a>\n<a href=\"#1431\" id=\"1431\">1431</a>\n<a href=\"#1432\" id=\"1432\">1432</a>\n<a href=\"#1433\" id=\"1433\">1433</a>\n<a href=\"#1434\" id=\"1434\">1434</a>\n<a href=\"#1435\" id=\"1435\">1435</a>\n<a href=\"#1436\" id=\"1436\">1436</a>\n<a href=\"#1437\" id=\"1437\">1437</a>\n<a href=\"#1438\" id=\"1438\">1438</a>\n<a href=\"#1439\" id=\"1439\">1439</a>\n<a href=\"#1440\" id=\"1440\">1440</a>\n<a href=\"#1441\" id=\"1441\">1441</a>\n<a href=\"#1442\" id=\"1442\">1442</a>\n<a href=\"#1443\" id=\"1443\">1443</a>\n<a href=\"#1444\" id=\"1444\">1444</a>\n<a href=\"#1445\" id=\"1445\">1445</a>\n<a href=\"#1446\" id=\"1446\">1446</a>\n<a href=\"#1447\" id=\"1447\">1447</a>\n<a href=\"#1448\" id=\"1448\">1448</a>\n<a href=\"#1449\" id=\"1449\">1449</a>\n<a href=\"#1450\" id=\"1450\">1450</a>\n<a href=\"#1451\" id=\"1451\">1451</a>\n<a href=\"#1452\" id=\"1452\">1452</a>\n<a href=\"#1453\" id=\"1453\">1453</a>\n<a href=\"#1454\" id=\"1454\">1454</a>\n<a href=\"#1455\" id=\"1455\">1455</a>\n<a href=\"#1456\" id=\"1456\">1456</a>\n<a href=\"#1457\" id=\"1457\">1457</a>\n<a href=\"#1458\" id=\"1458\">1458</a>\n<a href=\"#1459\" id=\"1459\">1459</a>\n<a href=\"#1460\" id=\"1460\">1460</a>\n<a href=\"#1461\" id=\"1461\">1461</a>\n<a href=\"#1462\" id=\"1462\">1462</a>\n<a href=\"#1463\" id=\"1463\">1463</a>\n<a href=\"#1464\" id=\"1464\">1464</a>\n<a href=\"#1465\" id=\"1465\">1465</a>\n<a href=\"#1466\" id=\"1466\">1466</a>\n<a href=\"#1467\" id=\"1467\">1467</a>\n<a href=\"#1468\" id=\"1468\">1468</a>\n<a href=\"#1469\" id=\"1469\">1469</a>\n<a href=\"#1470\" id=\"1470\">1470</a>\n<a href=\"#1471\" id=\"1471\">1471</a>\n<a href=\"#1472\" id=\"1472\">1472</a>\n<a href=\"#1473\" id=\"1473\">1473</a>\n<a href=\"#1474\" id=\"1474\">1474</a>\n<a href=\"#1475\" id=\"1475\">1475</a>\n<a href=\"#1476\" id=\"1476\">1476</a>\n<a href=\"#1477\" id=\"1477\">1477</a>\n<a href=\"#1478\" id=\"1478\">1478</a>\n<a href=\"#1479\" id=\"1479\">1479</a>\n<a href=\"#1480\" id=\"1480\">1480</a>\n<a href=\"#1481\" id=\"1481\">1481</a>\n<a href=\"#1482\" id=\"1482\">1482</a>\n<a href=\"#1483\" id=\"1483\">1483</a>\n<a href=\"#1484\" id=\"1484\">1484</a>\n<a href=\"#1485\" id=\"1485\">1485</a>\n<a href=\"#1486\" id=\"1486\">1486</a>\n<a href=\"#1487\" id=\"1487\">1487</a>\n<a href=\"#1488\" id=\"1488\">1488</a>\n<a href=\"#1489\" id=\"1489\">1489</a>\n<a href=\"#1490\" id=\"1490\">1490</a>\n<a href=\"#1491\" id=\"1491\">1491</a>\n<a href=\"#1492\" id=\"1492\">1492</a>\n<a href=\"#1493\" id=\"1493\">1493</a>\n<a href=\"#1494\" id=\"1494\">1494</a>\n<a href=\"#1495\" id=\"1495\">1495</a>\n<a href=\"#1496\" id=\"1496\">1496</a>\n<a href=\"#1497\" id=\"1497\">1497</a>\n<a href=\"#1498\" id=\"1498\">1498</a>\n<a href=\"#1499\" id=\"1499\">1499</a>\n<a href=\"#1500\" id=\"1500\">1500</a>\n<a href=\"#1501\" id=\"1501\">1501</a>\n<a href=\"#1502\" id=\"1502\">1502</a>\n<a href=\"#1503\" id=\"1503\">1503</a>\n<a href=\"#1504\" id=\"1504\">1504</a>\n<a href=\"#1505\" id=\"1505\">1505</a>\n<a href=\"#1506\" id=\"1506\">1506</a>\n<a href=\"#1507\" id=\"1507\">1507</a>\n<a href=\"#1508\" id=\"1508\">1508</a>\n<a href=\"#1509\" id=\"1509\">1509</a>\n<a href=\"#1510\" id=\"1510\">1510</a>\n<a href=\"#1511\" id=\"1511\">1511</a>\n<a href=\"#1512\" id=\"1512\">1512</a>\n<a href=\"#1513\" id=\"1513\">1513</a>\n<a href=\"#1514\" id=\"1514\">1514</a>\n<a href=\"#1515\" id=\"1515\">1515</a>\n<a href=\"#1516\" id=\"1516\">1516</a>\n<a href=\"#1517\" id=\"1517\">1517</a>\n<a href=\"#1518\" id=\"1518\">1518</a>\n<a href=\"#1519\" id=\"1519\">1519</a>\n<a href=\"#1520\" id=\"1520\">1520</a>\n<a href=\"#1521\" id=\"1521\">1521</a>\n<a href=\"#1522\" id=\"1522\">1522</a>\n<a href=\"#1523\" id=\"1523\">1523</a>\n<a href=\"#1524\" id=\"1524\">1524</a>\n<a href=\"#1525\" id=\"1525\">1525</a>\n<a href=\"#1526\" id=\"1526\">1526</a>\n<a href=\"#1527\" id=\"1527\">1527</a>\n<a href=\"#1528\" id=\"1528\">1528</a>\n<a href=\"#1529\" id=\"1529\">1529</a>\n<a href=\"#1530\" id=\"1530\">1530</a>\n<a href=\"#1531\" id=\"1531\">1531</a>\n<a href=\"#1532\" id=\"1532\">1532</a>\n<a href=\"#1533\" id=\"1533\">1533</a>\n<a href=\"#1534\" id=\"1534\">1534</a>\n<a href=\"#1535\" id=\"1535\">1535</a>\n<a href=\"#1536\" id=\"1536\">1536</a>\n<a href=\"#1537\" id=\"1537\">1537</a>\n<a href=\"#1538\" id=\"1538\">1538</a>\n<a href=\"#1539\" id=\"1539\">1539</a>\n<a href=\"#1540\" id=\"1540\">1540</a>\n<a href=\"#1541\" id=\"1541\">1541</a>\n<a href=\"#1542\" id=\"1542\">1542</a>\n<a href=\"#1543\" id=\"1543\">1543</a>\n<a href=\"#1544\" id=\"1544\">1544</a>\n<a href=\"#1545\" id=\"1545\">1545</a>\n<a href=\"#1546\" id=\"1546\">1546</a>\n<a href=\"#1547\" id=\"1547\">1547</a>\n<a href=\"#1548\" id=\"1548\">1548</a>\n<a href=\"#1549\" id=\"1549\">1549</a>\n<a href=\"#1550\" id=\"1550\">1550</a>\n<a href=\"#1551\" id=\"1551\">1551</a>\n<a href=\"#1552\" id=\"1552\">1552</a>\n<a href=\"#1553\" id=\"1553\">1553</a>\n<a href=\"#1554\" id=\"1554\">1554</a>\n<a href=\"#1555\" id=\"1555\">1555</a>\n<a href=\"#1556\" id=\"1556\">1556</a>\n<a href=\"#1557\" id=\"1557\">1557</a>\n<a href=\"#1558\" id=\"1558\">1558</a>\n<a href=\"#1559\" id=\"1559\">1559</a>\n<a href=\"#1560\" id=\"1560\">1560</a>\n<a href=\"#1561\" id=\"1561\">1561</a>\n<a href=\"#1562\" id=\"1562\">1562</a>\n<a href=\"#1563\" id=\"1563\">1563</a>\n<a href=\"#1564\" id=\"1564\">1564</a>\n<a href=\"#1565\" id=\"1565\">1565</a>\n<a href=\"#1566\" id=\"1566\">1566</a>\n<a href=\"#1567\" id=\"1567\">1567</a>\n<a href=\"#1568\" id=\"1568\">1568</a>\n<a href=\"#1569\" id=\"1569\">1569</a>\n<a href=\"#1570\" id=\"1570\">1570</a>\n<a href=\"#1571\" id=\"1571\">1571</a>\n<a href=\"#1572\" id=\"1572\">1572</a>\n<a href=\"#1573\" id=\"1573\">1573</a>\n<a href=\"#1574\" id=\"1574\">1574</a>\n<a href=\"#1575\" id=\"1575\">1575</a>\n<a href=\"#1576\" id=\"1576\">1576</a>\n<a href=\"#1577\" id=\"1577\">1577</a>\n<a href=\"#1578\" id=\"1578\">1578</a>\n<a href=\"#1579\" id=\"1579\">1579</a>\n<a href=\"#1580\" id=\"1580\">1580</a>\n<a href=\"#1581\" id=\"1581\">1581</a>\n<a href=\"#1582\" id=\"1582\">1582</a>\n<a href=\"#1583\" id=\"1583\">1583</a>\n<a href=\"#1584\" id=\"1584\">1584</a>\n<a href=\"#1585\" id=\"1585\">1585</a>\n<a href=\"#1586\" id=\"1586\">1586</a>\n<a href=\"#1587\" id=\"1587\">1587</a>\n<a href=\"#1588\" id=\"1588\">1588</a>\n<a href=\"#1589\" id=\"1589\">1589</a>\n<a href=\"#1590\" id=\"1590\">1590</a>\n<a href=\"#1591\" id=\"1591\">1591</a>\n<a href=\"#1592\" id=\"1592\">1592</a>\n<a href=\"#1593\" id=\"1593\">1593</a>\n<a href=\"#1594\" id=\"1594\">1594</a>\n<a href=\"#1595\" id=\"1595\">1595</a>\n<a href=\"#1596\" id=\"1596\">1596</a>\n<a href=\"#1597\" id=\"1597\">1597</a>\n<a href=\"#1598\" id=\"1598\">1598</a>\n<a href=\"#1599\" id=\"1599\">1599</a>\n<a href=\"#1600\" id=\"1600\">1600</a>\n<a href=\"#1601\" id=\"1601\">1601</a>\n<a href=\"#1602\" id=\"1602\">1602</a>\n<a href=\"#1603\" id=\"1603\">1603</a>\n<a href=\"#1604\" id=\"1604\">1604</a>\n<a href=\"#1605\" id=\"1605\">1605</a>\n<a href=\"#1606\" id=\"1606\">1606</a>\n<a href=\"#1607\" id=\"1607\">1607</a>\n<a href=\"#1608\" id=\"1608\">1608</a>\n<a href=\"#1609\" id=\"1609\">1609</a>\n<a href=\"#1610\" id=\"1610\">1610</a>\n<a href=\"#1611\" id=\"1611\">1611</a>\n<a href=\"#1612\" id=\"1612\">1612</a>\n<a href=\"#1613\" id=\"1613\">1613</a>\n<a href=\"#1614\" id=\"1614\">1614</a>\n<a href=\"#1615\" id=\"1615\">1615</a>\n<a href=\"#1616\" id=\"1616\">1616</a>\n<a href=\"#1617\" id=\"1617\">1617</a>\n<a href=\"#1618\" id=\"1618\">1618</a>\n<a href=\"#1619\" id=\"1619\">1619</a>\n<a href=\"#1620\" id=\"1620\">1620</a>\n<a href=\"#1621\" id=\"1621\">1621</a>\n<a href=\"#1622\" id=\"1622\">1622</a>\n<a href=\"#1623\" id=\"1623\">1623</a>\n<a href=\"#1624\" id=\"1624\">1624</a>\n<a href=\"#1625\" id=\"1625\">1625</a>\n<a href=\"#1626\" id=\"1626\">1626</a>\n<a href=\"#1627\" id=\"1627\">1627</a>\n<a href=\"#1628\" id=\"1628\">1628</a>\n<a href=\"#1629\" id=\"1629\">1629</a>\n<a href=\"#1630\" id=\"1630\">1630</a>\n<a href=\"#1631\" id=\"1631\">1631</a>\n<a href=\"#1632\" id=\"1632\">1632</a>\n<a href=\"#1633\" id=\"1633\">1633</a>\n<a href=\"#1634\" id=\"1634\">1634</a>\n<a href=\"#1635\" id=\"1635\">1635</a>\n<a href=\"#1636\" id=\"1636\">1636</a>\n<a href=\"#1637\" id=\"1637\">1637</a>\n<a href=\"#1638\" id=\"1638\">1638</a>\n<a href=\"#1639\" id=\"1639\">1639</a>\n<a href=\"#1640\" id=\"1640\">1640</a>\n<a href=\"#1641\" id=\"1641\">1641</a>\n<a href=\"#1642\" id=\"1642\">1642</a>\n<a href=\"#1643\" id=\"1643\">1643</a>\n<a href=\"#1644\" id=\"1644\">1644</a>\n<a href=\"#1645\" id=\"1645\">1645</a>\n<a href=\"#1646\" id=\"1646\">1646</a>\n<a href=\"#1647\" id=\"1647\">1647</a>\n<a href=\"#1648\" id=\"1648\">1648</a>\n<a href=\"#1649\" id=\"1649\">1649</a>\n<a href=\"#1650\" id=\"1650\">1650</a>\n<a href=\"#1651\" id=\"1651\">1651</a>\n<a href=\"#1652\" id=\"1652\">1652</a>\n<a href=\"#1653\" id=\"1653\">1653</a>\n<a href=\"#1654\" id=\"1654\">1654</a>\n<a href=\"#1655\" id=\"1655\">1655</a>\n<a href=\"#1656\" id=\"1656\">1656</a>\n<a href=\"#1657\" id=\"1657\">1657</a>\n<a href=\"#1658\" id=\"1658\">1658</a>\n<a href=\"#1659\" id=\"1659\">1659</a>\n<a href=\"#1660\" id=\"1660\">1660</a>\n<a href=\"#1661\" id=\"1661\">1661</a>\n<a href=\"#1662\" id=\"1662\">1662</a>\n<a href=\"#1663\" id=\"1663\">1663</a>\n<a href=\"#1664\" id=\"1664\">1664</a>\n<a href=\"#1665\" id=\"1665\">1665</a>\n<a href=\"#1666\" id=\"1666\">1666</a>\n<a href=\"#1667\" id=\"1667\">1667</a>\n<a href=\"#1668\" id=\"1668\">1668</a>\n<a href=\"#1669\" id=\"1669\">1669</a>\n<a href=\"#1670\" id=\"1670\">1670</a>\n<a href=\"#1671\" id=\"1671\">1671</a>\n<a href=\"#1672\" id=\"1672\">1672</a>\n<a href=\"#1673\" id=\"1673\">1673</a>\n<a href=\"#1674\" id=\"1674\">1674</a>\n<a href=\"#1675\" id=\"1675\">1675</a>\n<a href=\"#1676\" id=\"1676\">1676</a>\n<a href=\"#1677\" id=\"1677\">1677</a>\n<a href=\"#1678\" id=\"1678\">1678</a>\n<a href=\"#1679\" id=\"1679\">1679</a>\n<a href=\"#1680\" id=\"1680\">1680</a>\n<a href=\"#1681\" id=\"1681\">1681</a>\n<a href=\"#1682\" id=\"1682\">1682</a>\n<a href=\"#1683\" id=\"1683\">1683</a>\n<a href=\"#1684\" id=\"1684\">1684</a>\n<a href=\"#1685\" id=\"1685\">1685</a>\n<a href=\"#1686\" id=\"1686\">1686</a>\n<a href=\"#1687\" id=\"1687\">1687</a>\n<a href=\"#1688\" id=\"1688\">1688</a>\n<a href=\"#1689\" id=\"1689\">1689</a>\n<a href=\"#1690\" id=\"1690\">1690</a>\n<a href=\"#1691\" id=\"1691\">1691</a>\n<a href=\"#1692\" id=\"1692\">1692</a>\n<a href=\"#1693\" id=\"1693\">1693</a>\n<a href=\"#1694\" id=\"1694\">1694</a>\n<a href=\"#1695\" id=\"1695\">1695</a>\n<a href=\"#1696\" id=\"1696\">1696</a>\n<a href=\"#1697\" id=\"1697\">1697</a>\n<a href=\"#1698\" id=\"1698\">1698</a>\n<a href=\"#1699\" id=\"1699\">1699</a>\n<a href=\"#1700\" id=\"1700\">1700</a>\n<a href=\"#1701\" id=\"1701\">1701</a>\n<a href=\"#1702\" id=\"1702\">1702</a>\n<a href=\"#1703\" id=\"1703\">1703</a>\n<a href=\"#1704\" id=\"1704\">1704</a>\n<a href=\"#1705\" id=\"1705\">1705</a>\n<a href=\"#1706\" id=\"1706\">1706</a>\n<a href=\"#1707\" id=\"1707\">1707</a>\n<a href=\"#1708\" id=\"1708\">1708</a>\n<a href=\"#1709\" id=\"1709\">1709</a>\n<a href=\"#1710\" id=\"1710\">1710</a>\n<a href=\"#1711\" id=\"1711\">1711</a>\n<a href=\"#1712\" id=\"1712\">1712</a>\n<a href=\"#1713\" id=\"1713\">1713</a>\n<a href=\"#1714\" id=\"1714\">1714</a>\n<a href=\"#1715\" id=\"1715\">1715</a>\n<a href=\"#1716\" id=\"1716\">1716</a>\n<a href=\"#1717\" id=\"1717\">1717</a>\n<a href=\"#1718\" id=\"1718\">1718</a>\n<a href=\"#1719\" id=\"1719\">1719</a>\n<a href=\"#1720\" id=\"1720\">1720</a>\n<a href=\"#1721\" id=\"1721\">1721</a>\n<a href=\"#1722\" id=\"1722\">1722</a>\n<a href=\"#1723\" id=\"1723\">1723</a>\n<a href=\"#1724\" id=\"1724\">1724</a>\n<a href=\"#1725\" id=\"1725\">1725</a>\n<a href=\"#1726\" id=\"1726\">1726</a>\n<a href=\"#1727\" id=\"1727\">1727</a>\n<a href=\"#1728\" id=\"1728\">1728</a>\n<a href=\"#1729\" id=\"1729\">1729</a>\n<a href=\"#1730\" id=\"1730\">1730</a>\n<a href=\"#1731\" id=\"1731\">1731</a>\n<a href=\"#1732\" id=\"1732\">1732</a>\n<a href=\"#1733\" id=\"1733\">1733</a>\n<a href=\"#1734\" id=\"1734\">1734</a>\n<a href=\"#1735\" id=\"1735\">1735</a>\n<a href=\"#1736\" id=\"1736\">1736</a>\n<a href=\"#1737\" id=\"1737\">1737</a>\n<a href=\"#1738\" id=\"1738\">1738</a>\n<a href=\"#1739\" id=\"1739\">1739</a>\n<a href=\"#1740\" id=\"1740\">1740</a>\n<a href=\"#1741\" id=\"1741\">1741</a>\n<a href=\"#1742\" id=\"1742\">1742</a>\n<a href=\"#1743\" id=\"1743\">1743</a>\n<a href=\"#1744\" id=\"1744\">1744</a>\n<a href=\"#1745\" id=\"1745\">1745</a>\n<a href=\"#1746\" id=\"1746\">1746</a>\n<a href=\"#1747\" id=\"1747\">1747</a>\n<a href=\"#1748\" id=\"1748\">1748</a>\n<a href=\"#1749\" id=\"1749\">1749</a>\n<a href=\"#1750\" id=\"1750\">1750</a>\n<a href=\"#1751\" id=\"1751\">1751</a>\n<a href=\"#1752\" id=\"1752\">1752</a>\n<a href=\"#1753\" id=\"1753\">1753</a>\n<a href=\"#1754\" id=\"1754\">1754</a>\n<a href=\"#1755\" id=\"1755\">1755</a>\n<a href=\"#1756\" id=\"1756\">1756</a>\n<a href=\"#1757\" id=\"1757\">1757</a>\n<a href=\"#1758\" id=\"1758\">1758</a>\n<a href=\"#1759\" id=\"1759\">1759</a>\n<a href=\"#1760\" id=\"1760\">1760</a>\n<a href=\"#1761\" id=\"1761\">1761</a>\n<a href=\"#1762\" id=\"1762\">1762</a>\n<a href=\"#1763\" id=\"1763\">1763</a>\n<a href=\"#1764\" id=\"1764\">1764</a>\n<a href=\"#1765\" id=\"1765\">1765</a>\n<a href=\"#1766\" id=\"1766\">1766</a>\n<a href=\"#1767\" id=\"1767\">1767</a>\n<a href=\"#1768\" id=\"1768\">1768</a>\n<a href=\"#1769\" id=\"1769\">1769</a>\n<a href=\"#1770\" id=\"1770\">1770</a>\n<a href=\"#1771\" id=\"1771\">1771</a>\n<a href=\"#1772\" id=\"1772\">1772</a>\n<a href=\"#1773\" id=\"1773\">1773</a>\n<a href=\"#1774\" id=\"1774\">1774</a>\n<a href=\"#1775\" id=\"1775\">1775</a>\n<a href=\"#1776\" id=\"1776\">1776</a>\n<a href=\"#1777\" id=\"1777\">1777</a>\n<a href=\"#1778\" id=\"1778\">1778</a>\n<a href=\"#1779\" id=\"1779\">1779</a>\n<a href=\"#1780\" id=\"1780\">1780</a>\n<a href=\"#1781\" id=\"1781\">1781</a>\n<a href=\"#1782\" id=\"1782\">1782</a>\n<a href=\"#1783\" id=\"1783\">1783</a>\n<a href=\"#1784\" id=\"1784\">1784</a>\n<a href=\"#1785\" id=\"1785\">1785</a>\n<a href=\"#1786\" id=\"1786\">1786</a>\n<a href=\"#1787\" id=\"1787\">1787</a>\n<a href=\"#1788\" id=\"1788\">1788</a>\n<a href=\"#1789\" id=\"1789\">1789</a>\n<a href=\"#1790\" id=\"1790\">1790</a>\n<a href=\"#1791\" id=\"1791\">1791</a>\n<a href=\"#1792\" id=\"1792\">1792</a>\n<a href=\"#1793\" id=\"1793\">1793</a>\n<a href=\"#1794\" id=\"1794\">1794</a>\n<a href=\"#1795\" id=\"1795\">1795</a>\n<a href=\"#1796\" id=\"1796\">1796</a>\n<a href=\"#1797\" id=\"1797\">1797</a>\n<a href=\"#1798\" id=\"1798\">1798</a>\n<a href=\"#1799\" id=\"1799\">1799</a>\n<a href=\"#1800\" id=\"1800\">1800</a>\n<a href=\"#1801\" id=\"1801\">1801</a>\n<a href=\"#1802\" id=\"1802\">1802</a>\n<a href=\"#1803\" id=\"1803\">1803</a>\n<a href=\"#1804\" id=\"1804\">1804</a>\n<a href=\"#1805\" id=\"1805\">1805</a>\n<a href=\"#1806\" id=\"1806\">1806</a>\n<a href=\"#1807\" id=\"1807\">1807</a>\n<a href=\"#1808\" id=\"1808\">1808</a>\n<a href=\"#1809\" id=\"1809\">1809</a>\n<a href=\"#1810\" id=\"1810\">1810</a>\n<a href=\"#1811\" id=\"1811\">1811</a>\n<a href=\"#1812\" id=\"1812\">1812</a>\n<a href=\"#1813\" id=\"1813\">1813</a>\n<a href=\"#1814\" id=\"1814\">1814</a>\n<a href=\"#1815\" id=\"1815\">1815</a>\n<a href=\"#1816\" id=\"1816\">1816</a>\n<a href=\"#1817\" id=\"1817\">1817</a>\n<a href=\"#1818\" id=\"1818\">1818</a>\n<a href=\"#1819\" id=\"1819\">1819</a>\n<a href=\"#1820\" id=\"1820\">1820</a>\n<a href=\"#1821\" id=\"1821\">1821</a>\n<a href=\"#1822\" id=\"1822\">1822</a>\n<a href=\"#1823\" id=\"1823\">1823</a>\n<a href=\"#1824\" id=\"1824\">1824</a>\n<a href=\"#1825\" id=\"1825\">1825</a>\n<a href=\"#1826\" id=\"1826\">1826</a>\n<a href=\"#1827\" id=\"1827\">1827</a>\n<a href=\"#1828\" id=\"1828\">1828</a>\n<a href=\"#1829\" id=\"1829\">1829</a>\n<a href=\"#1830\" id=\"1830\">1830</a>\n<a href=\"#1831\" id=\"1831\">1831</a>\n<a href=\"#1832\" id=\"1832\">1832</a>\n<a href=\"#1833\" id=\"1833\">1833</a>\n<a href=\"#1834\" id=\"1834\">1834</a>\n<a href=\"#1835\" id=\"1835\">1835</a>\n<a href=\"#1836\" id=\"1836\">1836</a>\n<a href=\"#1837\" id=\"1837\">1837</a>\n<a href=\"#1838\" id=\"1838\">1838</a>\n<a href=\"#1839\" id=\"1839\">1839</a>\n<a href=\"#1840\" id=\"1840\">1840</a>\n<a href=\"#1841\" id=\"1841\">1841</a>\n<a href=\"#1842\" id=\"1842\">1842</a>\n<a href=\"#1843\" id=\"1843\">1843</a>\n<a href=\"#1844\" id=\"1844\">1844</a>\n<a href=\"#1845\" id=\"1845\">1845</a>\n<a href=\"#1846\" id=\"1846\">1846</a>\n<a href=\"#1847\" id=\"1847\">1847</a>\n<a href=\"#1848\" id=\"1848\">1848</a>\n<a href=\"#1849\" id=\"1849\">1849</a>\n<a href=\"#1850\" id=\"1850\">1850</a>\n<a href=\"#1851\" id=\"1851\">1851</a>\n<a href=\"#1852\" id=\"1852\">1852</a>\n<a href=\"#1853\" id=\"1853\">1853</a>\n<a href=\"#1854\" id=\"1854\">1854</a>\n<a href=\"#1855\" id=\"1855\">1855</a>\n<a href=\"#1856\" id=\"1856\">1856</a>\n<a href=\"#1857\" id=\"1857\">1857</a>\n<a href=\"#1858\" id=\"1858\">1858</a>\n<a href=\"#1859\" id=\"1859\">1859</a>\n<a href=\"#1860\" id=\"1860\">1860</a>\n<a href=\"#1861\" id=\"1861\">1861</a>\n<a href=\"#1862\" id=\"1862\">1862</a>\n<a href=\"#1863\" id=\"1863\">1863</a>\n<a href=\"#1864\" id=\"1864\">1864</a>\n<a href=\"#1865\" id=\"1865\">1865</a>\n<a href=\"#1866\" id=\"1866\">1866</a>\n<a href=\"#1867\" id=\"1867\">1867</a>\n<a href=\"#1868\" id=\"1868\">1868</a>\n<a href=\"#1869\" id=\"1869\">1869</a>\n<a href=\"#1870\" id=\"1870\">1870</a>\n<a href=\"#1871\" id=\"1871\">1871</a>\n<a href=\"#1872\" id=\"1872\">1872</a>\n<a href=\"#1873\" id=\"1873\">1873</a>\n<a href=\"#1874\" id=\"1874\">1874</a>\n<a href=\"#1875\" id=\"1875\">1875</a>\n<a href=\"#1876\" id=\"1876\">1876</a>\n<a href=\"#1877\" id=\"1877\">1877</a>\n<a href=\"#1878\" id=\"1878\">1878</a>\n<a href=\"#1879\" id=\"1879\">1879</a>\n<a href=\"#1880\" id=\"1880\">1880</a>\n<a href=\"#1881\" id=\"1881\">1881</a>\n<a href=\"#1882\" id=\"1882\">1882</a>\n<a href=\"#1883\" id=\"1883\">1883</a>\n<a href=\"#1884\" id=\"1884\">1884</a>\n<a href=\"#1885\" id=\"1885\">1885</a>\n<a href=\"#1886\" id=\"1886\">1886</a>\n<a href=\"#1887\" id=\"1887\">1887</a>\n<a href=\"#1888\" id=\"1888\">1888</a>\n<a href=\"#1889\" id=\"1889\">1889</a>\n<a href=\"#1890\" id=\"1890\">1890</a>\n<a href=\"#1891\" id=\"1891\">1891</a>\n<a href=\"#1892\" id=\"1892\">1892</a>\n<a href=\"#1893\" id=\"1893\">1893</a>\n<a href=\"#1894\" id=\"1894\">1894</a>\n<a href=\"#1895\" id=\"1895\">1895</a>\n<a href=\"#1896\" id=\"1896\">1896</a>\n<a href=\"#1897\" id=\"1897\">1897</a>\n<a href=\"#1898\" id=\"1898\">1898</a>\n<a href=\"#1899\" id=\"1899\">1899</a>\n<a href=\"#1900\" id=\"1900\">1900</a>\n<a href=\"#1901\" id=\"1901\">1901</a>\n<a href=\"#1902\" id=\"1902\">1902</a>\n<a href=\"#1903\" id=\"1903\">1903</a>\n<a href=\"#1904\" id=\"1904\">1904</a>\n<a href=\"#1905\" id=\"1905\">1905</a>\n<a href=\"#1906\" id=\"1906\">1906</a>\n<a href=\"#1907\" id=\"1907\">1907</a>\n<a href=\"#1908\" id=\"1908\">1908</a>\n<a href=\"#1909\" id=\"1909\">1909</a>\n<a href=\"#1910\" id=\"1910\">1910</a>\n<a href=\"#1911\" id=\"1911\">1911</a>\n<a href=\"#1912\" id=\"1912\">1912</a>\n<a href=\"#1913\" id=\"1913\">1913</a>\n<a href=\"#1914\" id=\"1914\">1914</a>\n<a href=\"#1915\" id=\"1915\">1915</a>\n<a href=\"#1916\" id=\"1916\">1916</a>\n<a href=\"#1917\" id=\"1917\">1917</a>\n<a href=\"#1918\" id=\"1918\">1918</a>\n<a href=\"#1919\" id=\"1919\">1919</a>\n<a href=\"#1920\" id=\"1920\">1920</a>\n<a href=\"#1921\" id=\"1921\">1921</a>\n<a href=\"#1922\" id=\"1922\">1922</a>\n<a href=\"#1923\" id=\"1923\">1923</a>\n<a href=\"#1924\" id=\"1924\">1924</a>\n<a href=\"#1925\" id=\"1925\">1925</a>\n<a href=\"#1926\" id=\"1926\">1926</a>\n<a href=\"#1927\" id=\"1927\">1927</a>\n<a href=\"#1928\" id=\"1928\">1928</a>\n<a href=\"#1929\" id=\"1929\">1929</a>\n<a href=\"#1930\" id=\"1930\">1930</a>\n<a href=\"#1931\" id=\"1931\">1931</a>\n<a href=\"#1932\" id=\"1932\">1932</a>\n<a href=\"#1933\" id=\"1933\">1933</a>\n<a href=\"#1934\" id=\"1934\">1934</a>\n<a href=\"#1935\" id=\"1935\">1935</a>\n<a href=\"#1936\" id=\"1936\">1936</a>\n<a href=\"#1937\" id=\"1937\">1937</a>\n<a href=\"#1938\" id=\"1938\">1938</a>\n<a href=\"#1939\" id=\"1939\">1939</a>\n<a href=\"#1940\" id=\"1940\">1940</a>\n<a href=\"#1941\" id=\"1941\">1941</a>\n<a href=\"#1942\" id=\"1942\">1942</a>\n<a href=\"#1943\" id=\"1943\">1943</a>\n<a href=\"#1944\" id=\"1944\">1944</a>\n<a href=\"#1945\" id=\"1945\">1945</a>\n<a href=\"#1946\" id=\"1946\">1946</a>\n<a href=\"#1947\" id=\"1947\">1947</a>\n<a href=\"#1948\" id=\"1948\">1948</a>\n<a href=\"#1949\" id=\"1949\">1949</a>\n<a href=\"#1950\" id=\"1950\">1950</a>\n<a href=\"#1951\" id=\"1951\">1951</a>\n<a href=\"#1952\" id=\"1952\">1952</a>\n<a href=\"#1953\" id=\"1953\">1953</a>\n<a href=\"#1954\" id=\"1954\">1954</a>\n<a href=\"#1955\" id=\"1955\">1955</a>\n<a href=\"#1956\" id=\"1956\">1956</a>\n<a href=\"#1957\" id=\"1957\">1957</a>\n<a href=\"#1958\" id=\"1958\">1958</a>\n<a href=\"#1959\" id=\"1959\">1959</a>\n<a href=\"#1960\" id=\"1960\">1960</a>\n<a href=\"#1961\" id=\"1961\">1961</a>\n<a href=\"#1962\" id=\"1962\">1962</a>\n<a href=\"#1963\" id=\"1963\">1963</a>\n<a href=\"#1964\" id=\"1964\">1964</a>\n<a href=\"#1965\" id=\"1965\">1965</a>\n<a href=\"#1966\" id=\"1966\">1966</a>\n<a href=\"#1967\" id=\"1967\">1967</a>\n<a href=\"#1968\" id=\"1968\">1968</a>\n<a href=\"#1969\" id=\"1969\">1969</a>\n<a href=\"#1970\" id=\"1970\">1970</a>\n<a href=\"#1971\" id=\"1971\">1971</a>\n<a href=\"#1972\" id=\"1972\">1972</a>\n<a href=\"#1973\" id=\"1973\">1973</a>\n<a href=\"#1974\" id=\"1974\">1974</a>\n<a href=\"#1975\" id=\"1975\">1975</a>\n<a href=\"#1976\" id=\"1976\">1976</a>\n<a href=\"#1977\" id=\"1977\">1977</a>\n<a href=\"#1978\" id=\"1978\">1978</a>\n<a href=\"#1979\" id=\"1979\">1979</a>\n<a href=\"#1980\" id=\"1980\">1980</a>\n<a href=\"#1981\" id=\"1981\">1981</a>\n<a href=\"#1982\" id=\"1982\">1982</a>\n<a href=\"#1983\" id=\"1983\">1983</a>\n<a href=\"#1984\" id=\"1984\">1984</a>\n<a href=\"#1985\" id=\"1985\">1985</a>\n<a href=\"#1986\" id=\"1986\">1986</a>\n<a href=\"#1987\" id=\"1987\">1987</a>\n<a href=\"#1988\" id=\"1988\">1988</a>\n<a href=\"#1989\" id=\"1989\">1989</a>\n<a href=\"#1990\" id=\"1990\">1990</a>\n<a href=\"#1991\" id=\"1991\">1991</a>\n<a href=\"#1992\" id=\"1992\">1992</a>\n<a href=\"#1993\" id=\"1993\">1993</a>\n<a href=\"#1994\" id=\"1994\">1994</a>\n<a href=\"#1995\" id=\"1995\">1995</a>\n<a href=\"#1996\" id=\"1996\">1996</a>\n<a href=\"#1997\" id=\"1997\">1997</a>\n<a href=\"#1998\" id=\"1998\">1998</a>\n<a href=\"#1999\" id=\"1999\">1999</a>\n<a href=\"#2000\" id=\"2000\">2000</a>\n<a href=\"#2001\" id=\"2001\">2001</a>\n<a href=\"#2002\" id=\"2002\">2002</a>\n<a href=\"#2003\" id=\"2003\">2003</a>\n<a href=\"#2004\" id=\"2004\">2004</a>\n<a href=\"#2005\" id=\"2005\">2005</a>\n<a href=\"#2006\" id=\"2006\">2006</a>\n<a href=\"#2007\" id=\"2007\">2007</a>\n<a href=\"#2008\" id=\"2008\">2008</a>\n<a href=\"#2009\" id=\"2009\">2009</a>\n<a href=\"#2010\" id=\"2010\">2010</a>\n<a href=\"#2011\" id=\"2011\">2011</a>\n<a href=\"#2012\" id=\"2012\">2012</a>\n<a href=\"#2013\" id=\"2013\">2013</a>\n<a href=\"#2014\" id=\"2014\">2014</a>\n<a href=\"#2015\" id=\"2015\">2015</a>\n<a href=\"#2016\" id=\"2016\">2016</a>\n<a href=\"#2017\" id=\"2017\">2017</a>\n<a href=\"#2018\" id=\"2018\">2018</a>\n<a href=\"#2019\" id=\"2019\">2019</a>\n<a href=\"#2020\" id=\"2020\">2020</a>\n<a href=\"#2021\" id=\"2021\">2021</a>\n<a href=\"#2022\" id=\"2022\">2022</a>\n<a href=\"#2023\" id=\"2023\">2023</a>\n<a href=\"#2024\" id=\"2024\">2024</a>\n<a href=\"#2025\" id=\"2025\">2025</a>\n<a href=\"#2026\" id=\"2026\">2026</a>\n<a href=\"#2027\" id=\"2027\">2027</a>\n<a href=\"#2028\" id=\"2028\">2028</a>\n<a href=\"#2029\" id=\"2029\">2029</a>\n<a href=\"#2030\" id=\"2030\">2030</a>\n<a href=\"#2031\" id=\"2031\">2031</a>\n<a href=\"#2032\" id=\"2032\">2032</a>\n<a href=\"#2033\" id=\"2033\">2033</a>\n<a href=\"#2034\" id=\"2034\">2034</a>\n<a href=\"#2035\" id=\"2035\">2035</a>\n<a href=\"#2036\" id=\"2036\">2036</a>\n<a href=\"#2037\" id=\"2037\">2037</a>\n<a href=\"#2038\" id=\"2038\">2038</a>\n<a href=\"#2039\" id=\"2039\">2039</a>\n<a href=\"#2040\" id=\"2040\">2040</a>\n<a href=\"#2041\" id=\"2041\">2041</a>\n<a href=\"#2042\" id=\"2042\">2042</a>\n<a href=\"#2043\" id=\"2043\">2043</a>\n<a href=\"#2044\" id=\"2044\">2044</a>\n<a href=\"#2045\" id=\"2045\">2045</a>\n<a href=\"#2046\" id=\"2046\">2046</a>\n<a href=\"#2047\" id=\"2047\">2047</a>\n<a href=\"#2048\" id=\"2048\">2048</a>\n<a href=\"#2049\" id=\"2049\">2049</a>\n<a href=\"#2050\" id=\"2050\">2050</a>\n<a href=\"#2051\" id=\"2051\">2051</a>\n<a href=\"#2052\" id=\"2052\">2052</a>\n<a href=\"#2053\" id=\"2053\">2053</a>\n<a href=\"#2054\" id=\"2054\">2054</a>\n<a href=\"#2055\" id=\"2055\">2055</a>\n<a href=\"#2056\" id=\"2056\">2056</a>\n<a href=\"#2057\" id=\"2057\">2057</a>\n<a href=\"#2058\" id=\"2058\">2058</a>\n<a href=\"#2059\" id=\"2059\">2059</a>\n<a href=\"#2060\" id=\"2060\">2060</a>\n<a href=\"#2061\" id=\"2061\">2061</a>\n<a href=\"#2062\" id=\"2062\">2062</a>\n<a href=\"#2063\" id=\"2063\">2063</a>\n<a href=\"#2064\" id=\"2064\">2064</a>\n<a href=\"#2065\" id=\"2065\">2065</a>\n<a href=\"#2066\" id=\"2066\">2066</a>\n<a href=\"#2067\" id=\"2067\">2067</a>\n<a href=\"#2068\" id=\"2068\">2068</a>\n<a href=\"#2069\" id=\"2069\">2069</a>\n<a href=\"#2070\" id=\"2070\">2070</a>\n<a href=\"#2071\" id=\"2071\">2071</a>\n<a href=\"#2072\" id=\"2072\">2072</a>\n<a href=\"#2073\" id=\"2073\">2073</a>\n<a href=\"#2074\" id=\"2074\">2074</a>\n<a href=\"#2075\" id=\"2075\">2075</a>\n<a href=\"#2076\" id=\"2076\">2076</a>\n<a href=\"#2077\" id=\"2077\">2077</a>\n<a href=\"#2078\" id=\"2078\">2078</a>\n<a href=\"#2079\" id=\"2079\">2079</a>\n<a href=\"#2080\" id=\"2080\">2080</a>\n<a href=\"#2081\" id=\"2081\">2081</a>\n<a href=\"#2082\" id=\"2082\">2082</a>\n<a href=\"#2083\" id=\"2083\">2083</a>\n<a href=\"#2084\" id=\"2084\">2084</a>\n<a href=\"#2085\" id=\"2085\">2085</a>\n<a href=\"#2086\" id=\"2086\">2086</a>\n<a href=\"#2087\" id=\"2087\">2087</a>\n<a href=\"#2088\" id=\"2088\">2088</a>\n<a href=\"#2089\" id=\"2089\">2089</a>\n<a href=\"#2090\" id=\"2090\">2090</a>\n<a href=\"#2091\" id=\"2091\">2091</a>\n<a href=\"#2092\" id=\"2092\">2092</a>\n<a href=\"#2093\" id=\"2093\">2093</a>\n<a href=\"#2094\" id=\"2094\">2094</a>\n<a href=\"#2095\" id=\"2095\">2095</a>\n<a href=\"#2096\" id=\"2096\">2096</a>\n<a href=\"#2097\" id=\"2097\">2097</a>\n<a href=\"#2098\" id=\"2098\">2098</a>\n<a href=\"#2099\" id=\"2099\">2099</a>\n<a href=\"#2100\" id=\"2100\">2100</a>\n<a href=\"#2101\" id=\"2101\">2101</a>\n<a href=\"#2102\" id=\"2102\">2102</a>\n<a href=\"#2103\" id=\"2103\">2103</a>\n<a href=\"#2104\" id=\"2104\">2104</a>\n<a href=\"#2105\" id=\"2105\">2105</a>\n<a href=\"#2106\" id=\"2106\">2106</a>\n<a href=\"#2107\" id=\"2107\">2107</a>\n<a href=\"#2108\" id=\"2108\">2108</a>\n<a href=\"#2109\" id=\"2109\">2109</a>\n<a href=\"#2110\" id=\"2110\">2110</a>\n<a href=\"#2111\" id=\"2111\">2111</a>\n<a href=\"#2112\" id=\"2112\">2112</a>\n<a href=\"#2113\" id=\"2113\">2113</a>\n<a href=\"#2114\" id=\"2114\">2114</a>\n<a href=\"#2115\" id=\"2115\">2115</a>\n<a href=\"#2116\" id=\"2116\">2116</a>\n<a href=\"#2117\" id=\"2117\">2117</a>\n<a href=\"#2118\" id=\"2118\">2118</a>\n<a href=\"#2119\" id=\"2119\">2119</a>\n<a href=\"#2120\" id=\"2120\">2120</a>\n<a href=\"#2121\" id=\"2121\">2121</a>\n<a href=\"#2122\" id=\"2122\">2122</a>\n<a href=\"#2123\" id=\"2123\">2123</a>\n<a href=\"#2124\" id=\"2124\">2124</a>\n<a href=\"#2125\" id=\"2125\">2125</a>\n<a href=\"#2126\" id=\"2126\">2126</a>\n<a href=\"#2127\" id=\"2127\">2127</a>\n<a href=\"#2128\" id=\"2128\">2128</a>\n<a href=\"#2129\" id=\"2129\">2129</a>\n<a href=\"#2130\" id=\"2130\">2130</a>\n<a href=\"#2131\" id=\"2131\">2131</a>\n<a href=\"#2132\" id=\"2132\">2132</a>\n<a href=\"#2133\" id=\"2133\">2133</a>\n<a href=\"#2134\" id=\"2134\">2134</a>\n<a href=\"#2135\" id=\"2135\">2135</a>\n<a href=\"#2136\" id=\"2136\">2136</a>\n<a href=\"#2137\" id=\"2137\">2137</a>\n<a href=\"#2138\" id=\"2138\">2138</a>\n<a href=\"#2139\" id=\"2139\">2139</a>\n<a href=\"#2140\" id=\"2140\">2140</a>\n<a href=\"#2141\" id=\"2141\">2141</a>\n<a href=\"#2142\" id=\"2142\">2142</a>\n<a href=\"#2143\" id=\"2143\">2143</a>\n<a href=\"#2144\" id=\"2144\">2144</a>\n<a href=\"#2145\" id=\"2145\">2145</a>\n<a href=\"#2146\" id=\"2146\">2146</a>\n<a href=\"#2147\" id=\"2147\">2147</a>\n<a href=\"#2148\" id=\"2148\">2148</a>\n<a href=\"#2149\" id=\"2149\">2149</a>\n<a href=\"#2150\" id=\"2150\">2150</a>\n<a href=\"#2151\" id=\"2151\">2151</a>\n<a href=\"#2152\" id=\"2152\">2152</a>\n<a href=\"#2153\" id=\"2153\">2153</a>\n<a href=\"#2154\" id=\"2154\">2154</a>\n<a href=\"#2155\" id=\"2155\">2155</a>\n<a href=\"#2156\" id=\"2156\">2156</a>\n<a href=\"#2157\" id=\"2157\">2157</a>\n<a href=\"#2158\" id=\"2158\">2158</a>\n<a href=\"#2159\" id=\"2159\">2159</a>\n<a href=\"#2160\" id=\"2160\">2160</a>\n<a href=\"#2161\" id=\"2161\">2161</a>\n<a href=\"#2162\" id=\"2162\">2162</a>\n<a href=\"#2163\" id=\"2163\">2163</a>\n<a href=\"#2164\" id=\"2164\">2164</a>\n<a href=\"#2165\" id=\"2165\">2165</a>\n<a href=\"#2166\" id=\"2166\">2166</a>\n<a href=\"#2167\" id=\"2167\">2167</a>\n<a href=\"#2168\" id=\"2168\">2168</a>\n<a href=\"#2169\" id=\"2169\">2169</a>\n<a href=\"#2170\" id=\"2170\">2170</a>\n<a href=\"#2171\" id=\"2171\">2171</a>\n<a href=\"#2172\" id=\"2172\">2172</a>\n<a href=\"#2173\" id=\"2173\">2173</a>\n<a href=\"#2174\" id=\"2174\">2174</a>\n<a href=\"#2175\" id=\"2175\">2175</a>\n<a href=\"#2176\" id=\"2176\">2176</a>\n<a href=\"#2177\" id=\"2177\">2177</a>\n<a href=\"#2178\" id=\"2178\">2178</a>\n<a href=\"#2179\" id=\"2179\">2179</a>\n<a href=\"#2180\" id=\"2180\">2180</a>\n<a href=\"#2181\" id=\"2181\">2181</a>\n<a href=\"#2182\" id=\"2182\">2182</a>\n<a href=\"#2183\" id=\"2183\">2183</a>\n<a href=\"#2184\" id=\"2184\">2184</a>\n<a href=\"#2185\" id=\"2185\">2185</a>\n<a href=\"#2186\" id=\"2186\">2186</a>\n<a href=\"#2187\" id=\"2187\">2187</a>\n<a href=\"#2188\" id=\"2188\">2188</a>\n<a href=\"#2189\" id=\"2189\">2189</a>\n<a href=\"#2190\" id=\"2190\">2190</a>\n<a href=\"#2191\" id=\"2191\">2191</a>\n<a href=\"#2192\" id=\"2192\">2192</a>\n<a href=\"#2193\" id=\"2193\">2193</a>\n<a href=\"#2194\" id=\"2194\">2194</a>\n<a href=\"#2195\" id=\"2195\">2195</a>\n<a href=\"#2196\" id=\"2196\">2196</a>\n<a href=\"#2197\" id=\"2197\">2197</a>\n<a href=\"#2198\" id=\"2198\">2198</a>\n<a href=\"#2199\" id=\"2199\">2199</a>\n<a href=\"#2200\" id=\"2200\">2200</a>\n<a href=\"#2201\" id=\"2201\">2201</a>\n<a href=\"#2202\" id=\"2202\">2202</a>\n<a href=\"#2203\" id=\"2203\">2203</a>\n<a href=\"#2204\" id=\"2204\">2204</a>\n<a href=\"#2205\" id=\"2205\">2205</a>\n<a href=\"#2206\" id=\"2206\">2206</a>\n<a href=\"#2207\" id=\"2207\">2207</a>\n<a href=\"#2208\" id=\"2208\">2208</a>\n<a href=\"#2209\" id=\"2209\">2209</a>\n<a href=\"#2210\" id=\"2210\">2210</a>\n<a href=\"#2211\" id=\"2211\">2211</a>\n<a href=\"#2212\" id=\"2212\">2212</a>\n<a href=\"#2213\" id=\"2213\">2213</a>\n<a href=\"#2214\" id=\"2214\">2214</a>\n<a href=\"#2215\" id=\"2215\">2215</a>\n<a href=\"#2216\" id=\"2216\">2216</a>\n<a href=\"#2217\" id=\"2217\">2217</a>\n<a href=\"#2218\" id=\"2218\">2218</a>\n<a href=\"#2219\" id=\"2219\">2219</a>\n<a href=\"#2220\" id=\"2220\">2220</a>\n<a href=\"#2221\" id=\"2221\">2221</a>\n<a href=\"#2222\" id=\"2222\">2222</a>\n<a href=\"#2223\" id=\"2223\">2223</a>\n<a href=\"#2224\" id=\"2224\">2224</a>\n<a href=\"#2225\" id=\"2225\">2225</a>\n<a href=\"#2226\" id=\"2226\">2226</a>\n<a href=\"#2227\" id=\"2227\">2227</a>\n<a href=\"#2228\" id=\"2228\">2228</a>\n<a href=\"#2229\" id=\"2229\">2229</a>\n<a href=\"#2230\" id=\"2230\">2230</a>\n<a href=\"#2231\" id=\"2231\">2231</a>\n<a href=\"#2232\" id=\"2232\">2232</a>\n<a href=\"#2233\" id=\"2233\">2233</a>\n<a href=\"#2234\" id=\"2234\">2234</a>\n<a href=\"#2235\" id=\"2235\">2235</a>\n<a href=\"#2236\" id=\"2236\">2236</a>\n<a href=\"#2237\" id=\"2237\">2237</a>\n<a href=\"#2238\" id=\"2238\">2238</a>\n<a href=\"#2239\" id=\"2239\">2239</a>\n<a href=\"#2240\" id=\"2240\">2240</a>\n<a href=\"#2241\" id=\"2241\">2241</a>\n<a href=\"#2242\" id=\"2242\">2242</a>\n<a href=\"#2243\" id=\"2243\">2243</a>\n<a href=\"#2244\" id=\"2244\">2244</a>\n<a href=\"#2245\" id=\"2245\">2245</a>\n<a href=\"#2246\" id=\"2246\">2246</a>\n<a href=\"#2247\" id=\"2247\">2247</a>\n<a href=\"#2248\" id=\"2248\">2248</a>\n<a href=\"#2249\" id=\"2249\">2249</a>\n<a href=\"#2250\" id=\"2250\">2250</a>\n<a href=\"#2251\" id=\"2251\">2251</a>\n<a href=\"#2252\" id=\"2252\">2252</a>\n<a href=\"#2253\" id=\"2253\">2253</a>\n<a href=\"#2254\" id=\"2254\">2254</a>\n<a href=\"#2255\" id=\"2255\">2255</a>\n<a href=\"#2256\" id=\"2256\">2256</a>\n<a href=\"#2257\" id=\"2257\">2257</a>\n<a href=\"#2258\" id=\"2258\">2258</a>\n<a href=\"#2259\" id=\"2259\">2259</a>\n<a href=\"#2260\" id=\"2260\">2260</a>\n<a href=\"#2261\" id=\"2261\">2261</a>\n<a href=\"#2262\" id=\"2262\">2262</a>\n<a href=\"#2263\" id=\"2263\">2263</a>\n<a href=\"#2264\" id=\"2264\">2264</a>\n<a href=\"#2265\" id=\"2265\">2265</a>\n<a href=\"#2266\" id=\"2266\">2266</a>\n<a href=\"#2267\" id=\"2267\">2267</a>\n<a href=\"#2268\" id=\"2268\">2268</a>\n<a href=\"#2269\" id=\"2269\">2269</a>\n<a href=\"#2270\" id=\"2270\">2270</a>\n<a href=\"#2271\" id=\"2271\">2271</a>\n<a href=\"#2272\" id=\"2272\">2272</a>\n<a href=\"#2273\" id=\"2273\">2273</a>\n<a href=\"#2274\" id=\"2274\">2274</a>\n<a href=\"#2275\" id=\"2275\">2275</a>\n<a href=\"#2276\" id=\"2276\">2276</a>\n<a href=\"#2277\" id=\"2277\">2277</a>\n<a href=\"#2278\" id=\"2278\">2278</a>\n<a href=\"#2279\" id=\"2279\">2279</a>\n<a href=\"#2280\" id=\"2280\">2280</a>\n<a href=\"#2281\" id=\"2281\">2281</a>\n<a href=\"#2282\" id=\"2282\">2282</a>\n<a href=\"#2283\" id=\"2283\">2283</a>\n<a href=\"#2284\" id=\"2284\">2284</a>\n<a href=\"#2285\" id=\"2285\">2285</a>\n<a href=\"#2286\" id=\"2286\">2286</a>\n<a href=\"#2287\" id=\"2287\">2287</a>\n<a href=\"#2288\" id=\"2288\">2288</a>\n<a href=\"#2289\" id=\"2289\">2289</a>\n<a href=\"#2290\" id=\"2290\">2290</a>\n<a href=\"#2291\" id=\"2291\">2291</a>\n<a href=\"#2292\" id=\"2292\">2292</a>\n<a href=\"#2293\" id=\"2293\">2293</a>\n<a href=\"#2294\" id=\"2294\">2294</a>\n<a href=\"#2295\" id=\"2295\">2295</a>\n<a href=\"#2296\" id=\"2296\">2296</a>\n<a href=\"#2297\" id=\"2297\">2297</a>\n<a href=\"#2298\" id=\"2298\">2298</a>\n<a href=\"#2299\" id=\"2299\">2299</a>\n<a href=\"#2300\" id=\"2300\">2300</a>\n<a href=\"#2301\" id=\"2301\">2301</a>\n<a href=\"#2302\" id=\"2302\">2302</a>\n<a href=\"#2303\" id=\"2303\">2303</a>\n<a href=\"#2304\" id=\"2304\">2304</a>\n<a href=\"#2305\" id=\"2305\">2305</a>\n<a href=\"#2306\" id=\"2306\">2306</a>\n<a href=\"#2307\" id=\"2307\">2307</a>\n<a href=\"#2308\" id=\"2308\">2308</a>\n<a href=\"#2309\" id=\"2309\">2309</a>\n<a href=\"#2310\" id=\"2310\">2310</a>\n<a href=\"#2311\" id=\"2311\">2311</a>\n<a href=\"#2312\" id=\"2312\">2312</a>\n<a href=\"#2313\" id=\"2313\">2313</a>\n<a href=\"#2314\" id=\"2314\">2314</a>\n<a href=\"#2315\" id=\"2315\">2315</a>\n<a href=\"#2316\" id=\"2316\">2316</a>\n<a href=\"#2317\" id=\"2317\">2317</a>\n<a href=\"#2318\" id=\"2318\">2318</a>\n<a href=\"#2319\" id=\"2319\">2319</a>\n<a href=\"#2320\" id=\"2320\">2320</a>\n<a href=\"#2321\" id=\"2321\">2321</a>\n<a href=\"#2322\" id=\"2322\">2322</a>\n<a href=\"#2323\" id=\"2323\">2323</a>\n<a href=\"#2324\" id=\"2324\">2324</a>\n<a href=\"#2325\" id=\"2325\">2325</a>\n<a href=\"#2326\" id=\"2326\">2326</a>\n<a href=\"#2327\" id=\"2327\">2327</a>\n<a href=\"#2328\" id=\"2328\">2328</a>\n<a href=\"#2329\" id=\"2329\">2329</a>\n<a href=\"#2330\" id=\"2330\">2330</a>\n<a href=\"#2331\" id=\"2331\">2331</a>\n<a href=\"#2332\" id=\"2332\">2332</a>\n<a href=\"#2333\" id=\"2333\">2333</a>\n<a href=\"#2334\" id=\"2334\">2334</a>\n<a href=\"#2335\" id=\"2335\">2335</a>\n<a href=\"#2336\" id=\"2336\">2336</a>\n<a href=\"#2337\" id=\"2337\">2337</a>\n<a href=\"#2338\" id=\"2338\">2338</a>\n<a href=\"#2339\" id=\"2339\">2339</a>\n<a href=\"#2340\" id=\"2340\">2340</a>\n<a href=\"#2341\" id=\"2341\">2341</a>\n<a href=\"#2342\" id=\"2342\">2342</a>\n<a href=\"#2343\" id=\"2343\">2343</a>\n<a href=\"#2344\" id=\"2344\">2344</a>\n<a href=\"#2345\" id=\"2345\">2345</a>\n<a href=\"#2346\" id=\"2346\">2346</a>\n<a href=\"#2347\" id=\"2347\">2347</a>\n<a href=\"#2348\" id=\"2348\">2348</a>\n<a href=\"#2349\" id=\"2349\">2349</a>\n<a href=\"#2350\" id=\"2350\">2350</a>\n<a href=\"#2351\" id=\"2351\">2351</a>\n<a href=\"#2352\" id=\"2352\">2352</a>\n<a href=\"#2353\" id=\"2353\">2353</a>\n<a href=\"#2354\" id=\"2354\">2354</a>\n<a href=\"#2355\" id=\"2355\">2355</a>\n<a href=\"#2356\" id=\"2356\">2356</a>\n<a href=\"#2357\" id=\"2357\">2357</a>\n<a href=\"#2358\" id=\"2358\">2358</a>\n<a href=\"#2359\" id=\"2359\">2359</a>\n<a href=\"#2360\" id=\"2360\">2360</a>\n<a href=\"#2361\" id=\"2361\">2361</a>\n<a href=\"#2362\" id=\"2362\">2362</a>\n<a href=\"#2363\" id=\"2363\">2363</a>\n<a href=\"#2364\" id=\"2364\">2364</a>\n<a href=\"#2365\" id=\"2365\">2365</a>\n<a href=\"#2366\" id=\"2366\">2366</a>\n<a href=\"#2367\" id=\"2367\">2367</a>\n<a href=\"#2368\" id=\"2368\">2368</a>\n<a href=\"#2369\" id=\"2369\">2369</a>\n<a href=\"#2370\" id=\"2370\">2370</a>\n<a href=\"#2371\" id=\"2371\">2371</a>\n<a href=\"#2372\" id=\"2372\">2372</a>\n<a href=\"#2373\" id=\"2373\">2373</a>\n<a href=\"#2374\" id=\"2374\">2374</a>\n<a href=\"#2375\" id=\"2375\">2375</a>\n<a href=\"#2376\" id=\"2376\">2376</a>\n<a href=\"#2377\" id=\"2377\">2377</a>\n<a href=\"#2378\" id=\"2378\">2378</a>\n<a href=\"#2379\" id=\"2379\">2379</a>\n<a href=\"#2380\" id=\"2380\">2380</a>\n<a href=\"#2381\" id=\"2381\">2381</a>\n<a href=\"#2382\" id=\"2382\">2382</a>\n<a href=\"#2383\" id=\"2383\">2383</a>\n<a href=\"#2384\" id=\"2384\">2384</a>\n<a href=\"#2385\" id=\"2385\">2385</a>\n<a href=\"#2386\" id=\"2386\">2386</a>\n<a href=\"#2387\" id=\"2387\">2387</a>\n<a href=\"#2388\" id=\"2388\">2388</a>\n<a href=\"#2389\" id=\"2389\">2389</a>\n<a href=\"#2390\" id=\"2390\">2390</a>\n<a href=\"#2391\" id=\"2391\">2391</a>\n<a href=\"#2392\" id=\"2392\">2392</a>\n<a href=\"#2393\" id=\"2393\">2393</a>\n<a href=\"#2394\" id=\"2394\">2394</a>\n<a href=\"#2395\" id=\"2395\">2395</a>\n<a href=\"#2396\" id=\"2396\">2396</a>\n<a href=\"#2397\" id=\"2397\">2397</a>\n<a href=\"#2398\" id=\"2398\">2398</a>\n<a href=\"#2399\" id=\"2399\">2399</a>\n<a href=\"#2400\" id=\"2400\">2400</a>\n<a href=\"#2401\" id=\"2401\">2401</a>\n<a href=\"#2402\" id=\"2402\">2402</a>\n<a href=\"#2403\" id=\"2403\">2403</a>\n<a href=\"#2404\" id=\"2404\">2404</a>\n<a href=\"#2405\" id=\"2405\">2405</a>\n<a href=\"#2406\" id=\"2406\">2406</a>\n<a href=\"#2407\" id=\"2407\">2407</a>\n<a href=\"#2408\" id=\"2408\">2408</a>\n<a href=\"#2409\" id=\"2409\">2409</a>\n<a href=\"#2410\" id=\"2410\">2410</a>\n<a href=\"#2411\" id=\"2411\">2411</a>\n<a href=\"#2412\" id=\"2412\">2412</a>\n<a href=\"#2413\" id=\"2413\">2413</a>\n<a href=\"#2414\" id=\"2414\">2414</a>\n<a href=\"#2415\" id=\"2415\">2415</a>\n<a href=\"#2416\" id=\"2416\">2416</a>\n<a href=\"#2417\" id=\"2417\">2417</a>\n<a href=\"#2418\" id=\"2418\">2418</a>\n<a href=\"#2419\" id=\"2419\">2419</a>\n<a href=\"#2420\" id=\"2420\">2420</a>\n<a href=\"#2421\" id=\"2421\">2421</a>\n<a href=\"#2422\" id=\"2422\">2422</a>\n<a href=\"#2423\" id=\"2423\">2423</a>\n<a href=\"#2424\" id=\"2424\">2424</a>\n<a href=\"#2425\" id=\"2425\">2425</a>\n<a href=\"#2426\" id=\"2426\">2426</a>\n<a href=\"#2427\" id=\"2427\">2427</a>\n<a href=\"#2428\" id=\"2428\">2428</a>\n<a href=\"#2429\" id=\"2429\">2429</a>\n<a href=\"#2430\" id=\"2430\">2430</a>\n<a href=\"#2431\" id=\"2431\">2431</a>\n<a href=\"#2432\" id=\"2432\">2432</a>\n<a href=\"#2433\" id=\"2433\">2433</a>\n<a href=\"#2434\" id=\"2434\">2434</a>\n<a href=\"#2435\" id=\"2435\">2435</a>\n<a href=\"#2436\" id=\"2436\">2436</a>\n<a href=\"#2437\" id=\"2437\">2437</a>\n<a href=\"#2438\" id=\"2438\">2438</a>\n<a href=\"#2439\" id=\"2439\">2439</a>\n<a href=\"#2440\" id=\"2440\">2440</a>\n<a href=\"#2441\" id=\"2441\">2441</a>\n<a href=\"#2442\" id=\"2442\">2442</a>\n<a href=\"#2443\" id=\"2443\">2443</a>\n<a href=\"#2444\" id=\"2444\">2444</a>\n<a href=\"#2445\" id=\"2445\">2445</a>\n<a href=\"#2446\" id=\"2446\">2446</a>\n<a href=\"#2447\" id=\"2447\">2447</a>\n<a href=\"#2448\" id=\"2448\">2448</a>\n<a href=\"#2449\" id=\"2449\">2449</a>\n<a href=\"#2450\" id=\"2450\">2450</a>\n<a href=\"#2451\" id=\"2451\">2451</a>\n<a href=\"#2452\" id=\"2452\">2452</a>\n<a href=\"#2453\" id=\"2453\">2453</a>\n<a href=\"#2454\" id=\"2454\">2454</a>\n<a href=\"#2455\" id=\"2455\">2455</a>\n<a href=\"#2456\" id=\"2456\">2456</a>\n<a href=\"#2457\" id=\"2457\">2457</a>\n<a href=\"#2458\" id=\"2458\">2458</a>\n<a href=\"#2459\" id=\"2459\">2459</a>\n<a href=\"#2460\" id=\"2460\">2460</a>\n<a href=\"#2461\" id=\"2461\">2461</a>\n<a href=\"#2462\" id=\"2462\">2462</a>\n<a href=\"#2463\" id=\"2463\">2463</a>\n<a href=\"#2464\" id=\"2464\">2464</a>\n<a href=\"#2465\" id=\"2465\">2465</a>\n<a href=\"#2466\" id=\"2466\">2466</a>\n<a href=\"#2467\" id=\"2467\">2467</a>\n<a href=\"#2468\" id=\"2468\">2468</a>\n<a href=\"#2469\" id=\"2469\">2469</a>\n<a href=\"#2470\" id=\"2470\">2470</a>\n<a href=\"#2471\" id=\"2471\">2471</a>\n<a href=\"#2472\" id=\"2472\">2472</a>\n<a href=\"#2473\" id=\"2473\">2473</a>\n<a href=\"#2474\" id=\"2474\">2474</a>\n<a href=\"#2475\" id=\"2475\">2475</a>\n<a href=\"#2476\" id=\"2476\">2476</a>\n<a href=\"#2477\" id=\"2477\">2477</a>\n<a href=\"#2478\" id=\"2478\">2478</a>\n<a href=\"#2479\" id=\"2479\">2479</a>\n<a href=\"#2480\" id=\"2480\">2480</a>\n<a href=\"#2481\" id=\"2481\">2481</a>\n<a href=\"#2482\" id=\"2482\">2482</a>\n<a href=\"#2483\" id=\"2483\">2483</a>\n<a href=\"#2484\" id=\"2484\">2484</a>\n<a href=\"#2485\" id=\"2485\">2485</a>\n<a href=\"#2486\" id=\"2486\">2486</a>\n<a href=\"#2487\" id=\"2487\">2487</a>\n<a href=\"#2488\" id=\"2488\">2488</a>\n<a href=\"#2489\" id=\"2489\">2489</a>\n<a href=\"#2490\" id=\"2490\">2490</a>\n<a href=\"#2491\" id=\"2491\">2491</a>\n<a href=\"#2492\" id=\"2492\">2492</a>\n<a href=\"#2493\" id=\"2493\">2493</a>\n<a href=\"#2494\" id=\"2494\">2494</a>\n<a href=\"#2495\" id=\"2495\">2495</a>\n<a href=\"#2496\" id=\"2496\">2496</a>\n<a href=\"#2497\" id=\"2497\">2497</a>\n<a href=\"#2498\" id=\"2498\">2498</a>\n<a href=\"#2499\" id=\"2499\">2499</a>\n<a href=\"#2500\" id=\"2500\">2500</a>\n<a href=\"#2501\" id=\"2501\">2501</a>\n<a href=\"#2502\" id=\"2502\">2502</a>\n<a href=\"#2503\" id=\"2503\">2503</a>\n<a href=\"#2504\" id=\"2504\">2504</a>\n<a href=\"#2505\" id=\"2505\">2505</a>\n<a href=\"#2506\" id=\"2506\">2506</a>\n<a href=\"#2507\" id=\"2507\">2507</a>\n<a href=\"#2508\" id=\"2508\">2508</a>\n<a href=\"#2509\" id=\"2509\">2509</a>\n<a href=\"#2510\" id=\"2510\">2510</a>\n<a href=\"#2511\" id=\"2511\">2511</a>\n<a href=\"#2512\" id=\"2512\">2512</a>\n<a href=\"#2513\" id=\"2513\">2513</a>\n<a href=\"#2514\" id=\"2514\">2514</a>\n<a href=\"#2515\" id=\"2515\">2515</a>\n<a href=\"#2516\" id=\"2516\">2516</a>\n<a href=\"#2517\" id=\"2517\">2517</a>\n<a href=\"#2518\" id=\"2518\">2518</a>\n<a href=\"#2519\" id=\"2519\">2519</a>\n<a href=\"#2520\" id=\"2520\">2520</a>\n<a href=\"#2521\" id=\"2521\">2521</a>\n<a href=\"#2522\" id=\"2522\">2522</a>\n<a href=\"#2523\" id=\"2523\">2523</a>\n<a href=\"#2524\" id=\"2524\">2524</a>\n<a href=\"#2525\" id=\"2525\">2525</a>\n<a href=\"#2526\" id=\"2526\">2526</a>\n<a href=\"#2527\" id=\"2527\">2527</a>\n<a href=\"#2528\" id=\"2528\">2528</a>\n<a href=\"#2529\" id=\"2529\">2529</a>\n<a href=\"#2530\" id=\"2530\">2530</a>\n<a href=\"#2531\" id=\"2531\">2531</a>\n<a href=\"#2532\" id=\"2532\">2532</a>\n<a href=\"#2533\" id=\"2533\">2533</a>\n<a href=\"#2534\" id=\"2534\">2534</a>\n<a href=\"#2535\" id=\"2535\">2535</a>\n<a href=\"#2536\" id=\"2536\">2536</a>\n<a href=\"#2537\" id=\"2537\">2537</a>\n<a href=\"#2538\" id=\"2538\">2538</a>\n<a href=\"#2539\" id=\"2539\">2539</a>\n<a href=\"#2540\" id=\"2540\">2540</a>\n<a href=\"#2541\" id=\"2541\">2541</a>\n<a href=\"#2542\" id=\"2542\">2542</a>\n<a href=\"#2543\" id=\"2543\">2543</a>\n<a href=\"#2544\" id=\"2544\">2544</a>\n<a href=\"#2545\" id=\"2545\">2545</a>\n<a href=\"#2546\" id=\"2546\">2546</a>\n<a href=\"#2547\" id=\"2547\">2547</a>\n<a href=\"#2548\" id=\"2548\">2548</a>\n<a href=\"#2549\" id=\"2549\">2549</a>\n<a href=\"#2550\" id=\"2550\">2550</a>\n<a href=\"#2551\" id=\"2551\">2551</a>\n<a href=\"#2552\" id=\"2552\">2552</a>\n<a href=\"#2553\" id=\"2553\">2553</a>\n<a href=\"#2554\" id=\"2554\">2554</a>\n<a href=\"#2555\" id=\"2555\">2555</a>\n<a href=\"#2556\" id=\"2556\">2556</a>\n<a href=\"#2557\" id=\"2557\">2557</a>\n<a href=\"#2558\" id=\"2558\">2558</a>\n<a href=\"#2559\" id=\"2559\">2559</a>\n<a href=\"#2560\" id=\"2560\">2560</a>\n<a href=\"#2561\" id=\"2561\">2561</a>\n<a href=\"#2562\" id=\"2562\">2562</a>\n<a href=\"#2563\" id=\"2563\">2563</a>\n<a href=\"#2564\" id=\"2564\">2564</a>\n<a href=\"#2565\" id=\"2565\">2565</a>\n<a href=\"#2566\" id=\"2566\">2566</a>\n<a href=\"#2567\" id=\"2567\">2567</a>\n<a href=\"#2568\" id=\"2568\">2568</a>\n<a href=\"#2569\" id=\"2569\">2569</a>\n<a href=\"#2570\" id=\"2570\">2570</a>\n<a href=\"#2571\" id=\"2571\">2571</a>\n<a href=\"#2572\" id=\"2572\">2572</a>\n<a href=\"#2573\" id=\"2573\">2573</a>\n<a href=\"#2574\" id=\"2574\">2574</a>\n<a href=\"#2575\" id=\"2575\">2575</a>\n<a href=\"#2576\" id=\"2576\">2576</a>\n<a href=\"#2577\" id=\"2577\">2577</a>\n<a href=\"#2578\" id=\"2578\">2578</a>\n<a href=\"#2579\" id=\"2579\">2579</a>\n<a href=\"#2580\" id=\"2580\">2580</a>\n<a href=\"#2581\" id=\"2581\">2581</a>\n<a href=\"#2582\" id=\"2582\">2582</a>\n<a href=\"#2583\" id=\"2583\">2583</a>\n<a href=\"#2584\" id=\"2584\">2584</a>\n<a href=\"#2585\" id=\"2585\">2585</a>\n<a href=\"#2586\" id=\"2586\">2586</a>\n<a href=\"#2587\" id=\"2587\">2587</a>\n<a href=\"#2588\" id=\"2588\">2588</a>\n<a href=\"#2589\" id=\"2589\">2589</a>\n<a href=\"#2590\" id=\"2590\">2590</a>\n<a href=\"#2591\" id=\"2591\">2591</a>\n<a href=\"#2592\" id=\"2592\">2592</a>\n<a href=\"#2593\" id=\"2593\">2593</a>\n<a href=\"#2594\" id=\"2594\">2594</a>\n<a href=\"#2595\" id=\"2595\">2595</a>\n<a href=\"#2596\" id=\"2596\">2596</a>\n<a href=\"#2597\" id=\"2597\">2597</a>\n<a href=\"#2598\" id=\"2598\">2598</a>\n<a href=\"#2599\" id=\"2599\">2599</a>\n<a href=\"#2600\" id=\"2600\">2600</a>\n<a href=\"#2601\" id=\"2601\">2601</a>\n<a href=\"#2602\" id=\"2602\">2602</a>\n<a href=\"#2603\" id=\"2603\">2603</a>\n<a href=\"#2604\" id=\"2604\">2604</a>\n<a href=\"#2605\" id=\"2605\">2605</a>\n<a href=\"#2606\" id=\"2606\">2606</a>\n<a href=\"#2607\" id=\"2607\">2607</a>\n<a href=\"#2608\" id=\"2608\">2608</a>\n<a href=\"#2609\" id=\"2609\">2609</a>\n<a href=\"#2610\" id=\"2610\">2610</a>\n<a href=\"#2611\" id=\"2611\">2611</a>\n<a href=\"#2612\" id=\"2612\">2612</a>\n<a href=\"#2613\" id=\"2613\">2613</a>\n<a href=\"#2614\" id=\"2614\">2614</a>\n<a href=\"#2615\" id=\"2615\">2615</a>\n<a href=\"#2616\" id=\"2616\">2616</a>\n<a href=\"#2617\" id=\"2617\">2617</a>\n<a href=\"#2618\" id=\"2618\">2618</a>\n<a href=\"#2619\" id=\"2619\">2619</a>\n<a href=\"#2620\" id=\"2620\">2620</a>\n<a href=\"#2621\" id=\"2621\">2621</a>\n<a href=\"#2622\" id=\"2622\">2622</a>\n<a href=\"#2623\" id=\"2623\">2623</a>\n<a href=\"#2624\" id=\"2624\">2624</a>\n<a href=\"#2625\" id=\"2625\">2625</a>\n<a href=\"#2626\" id=\"2626\">2626</a>\n<a href=\"#2627\" id=\"2627\">2627</a>\n<a href=\"#2628\" id=\"2628\">2628</a>\n<a href=\"#2629\" id=\"2629\">2629</a>\n<a href=\"#2630\" id=\"2630\">2630</a>\n<a href=\"#2631\" id=\"2631\">2631</a>\n<a href=\"#2632\" id=\"2632\">2632</a>\n<a href=\"#2633\" id=\"2633\">2633</a>\n<a href=\"#2634\" id=\"2634\">2634</a>\n<a href=\"#2635\" id=\"2635\">2635</a>\n<a href=\"#2636\" id=\"2636\">2636</a>\n<a href=\"#2637\" id=\"2637\">2637</a>\n<a href=\"#2638\" id=\"2638\">2638</a>\n<a href=\"#2639\" id=\"2639\">2639</a>\n<a href=\"#2640\" id=\"2640\">2640</a>\n<a href=\"#2641\" id=\"2641\">2641</a>\n<a href=\"#2642\" id=\"2642\">2642</a>\n<a href=\"#2643\" id=\"2643\">2643</a>\n<a href=\"#2644\" id=\"2644\">2644</a>\n<a href=\"#2645\" id=\"2645\">2645</a>\n<a href=\"#2646\" id=\"2646\">2646</a>\n<a href=\"#2647\" id=\"2647\">2647</a>\n<a href=\"#2648\" id=\"2648\">2648</a>\n<a href=\"#2649\" id=\"2649\">2649</a>\n<a href=\"#2650\" id=\"2650\">2650</a>\n<a href=\"#2651\" id=\"2651\">2651</a>\n<a href=\"#2652\" id=\"2652\">2652</a>\n<a href=\"#2653\" id=\"2653\">2653</a>\n<a href=\"#2654\" id=\"2654\">2654</a>\n<a href=\"#2655\" id=\"2655\">2655</a>\n<a href=\"#2656\" id=\"2656\">2656</a>\n<a href=\"#2657\" id=\"2657\">2657</a>\n<a href=\"#2658\" id=\"2658\">2658</a>\n<a href=\"#2659\" id=\"2659\">2659</a>\n<a href=\"#2660\" id=\"2660\">2660</a>\n<a href=\"#2661\" id=\"2661\">2661</a>\n<a href=\"#2662\" id=\"2662\">2662</a>\n<a href=\"#2663\" id=\"2663\">2663</a>\n<a href=\"#2664\" id=\"2664\">2664</a>\n<a href=\"#2665\" id=\"2665\">2665</a>\n<a href=\"#2666\" id=\"2666\">2666</a>\n<a href=\"#2667\" id=\"2667\">2667</a>\n<a href=\"#2668\" id=\"2668\">2668</a>\n<a href=\"#2669\" id=\"2669\">2669</a>\n<a href=\"#2670\" id=\"2670\">2670</a>\n<a href=\"#2671\" id=\"2671\">2671</a>\n<a href=\"#2672\" id=\"2672\">2672</a>\n</pre></div><pre class=\"rust\"><code><span class=\"doccomment\">//! Utilities for formatting and printing strings.\n\n</span><span class=\"attr\">#![stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n\n</span><span class=\"kw\">use </span><span class=\"kw\">crate</span>::cell::{Cell, Ref, RefCell, RefMut, SyncUnsafeCell, UnsafeCell};\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::char::EscapeDebugExtArgs;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::iter;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::marker::PhantomData;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::mem;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::num::fmt <span class=\"kw\">as </span>numfmt;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::ops::Deref;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::result;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::str;\n\n<span class=\"kw\">mod </span>builders;\n<span class=\"attr\">#[cfg(not(no_fp_fmt_parse))]\n</span><span class=\"kw\">mod </span>float;\n<span class=\"attr\">#[cfg(no_fp_fmt_parse)]\n</span><span class=\"kw\">mod </span>nofloat;\n<span class=\"kw\">mod </span>num;\n<span class=\"kw\">mod </span>rt;\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"fmt_flags_align\"</span>, since = <span class=\"string\">\"1.28.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"Alignment\"</span>)]\n</span><span class=\"doccomment\">/// Possible alignments returned by `Formatter::align`\n</span><span class=\"attr\">#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n</span><span class=\"kw\">pub enum </span>Alignment {\n    <span class=\"attr\">#[stable(feature = <span class=\"string\">\"fmt_flags_align\"</span>, since = <span class=\"string\">\"1.28.0\"</span>)]\n    </span><span class=\"doccomment\">/// Indication that contents should be left-aligned.\n    </span>Left,\n    <span class=\"attr\">#[stable(feature = <span class=\"string\">\"fmt_flags_align\"</span>, since = <span class=\"string\">\"1.28.0\"</span>)]\n    </span><span class=\"doccomment\">/// Indication that contents should be right-aligned.\n    </span>Right,\n    <span class=\"attr\">#[stable(feature = <span class=\"string\">\"fmt_flags_align\"</span>, since = <span class=\"string\">\"1.28.0\"</span>)]\n    </span><span class=\"doccomment\">/// Indication that contents should be center-aligned.\n    </span>Center,\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"debug_builders\"</span>, since = <span class=\"string\">\"1.2.0\"</span>)]\n</span><span class=\"kw\">pub use </span><span class=\"self\">self</span>::builders::{DebugList, DebugMap, DebugSet, DebugStruct, DebugTuple};\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"debug_closure_helpers\"</span>, issue = <span class=\"string\">\"117729\"</span>)]\n</span><span class=\"kw\">pub use </span><span class=\"self\">self</span>::builders::FormatterFn;\n\n<span class=\"doccomment\">/// The type returned by formatter methods.\n///\n/// # Examples\n///\n/// ```\n/// use std::fmt;\n///\n/// #[derive(Debug)]\n/// struct Triangle {\n///     a: f32,\n///     b: f32,\n///     c: f32\n/// }\n///\n/// impl fmt::Display for Triangle {\n///     fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n///         write!(f, \"({}, {}, {})\", self.a, self.b, self.c)\n///     }\n/// }\n///\n/// let pythagorean_triple = Triangle { a: 3.0, b: 4.0, c: 5.0 };\n///\n/// assert_eq!(format!(\"{pythagorean_triple}\"), \"(3, 4, 5)\");\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub type </span><span class=\"prelude-ty\">Result </span>= result::Result&lt;(), Error&gt;;\n\n<span class=\"doccomment\">/// The error type which is returned from formatting a message into a stream.\n///\n/// This type does not support transmission of an error other than that an error\n/// occurred. This is because, despite the existence of this error,\n/// string formatting is considered an infallible operation.\n/// `fmt()` implementors should not return this `Error` unless they received it from their\n/// [`Formatter`]. The only time your code should create a new instance of this\n/// error is when implementing `fmt::Write`, in order to cancel the formatting operation when\n/// writing to the underlying stream fails.\n///\n/// Any extra information must be arranged to be transmitted through some other means,\n/// such as storing it in a field to be consulted after the formatting operation has been\n/// cancelled. (For example, this is how [`std::io::Write::write_fmt()`] propagates IO errors\n/// during writing.)\n///\n/// This type, `fmt::Error`, should not be\n/// confused with [`std::io::Error`] or [`std::error::Error`], which you may also\n/// have in scope.\n///\n/// [`std::io::Error`]: ../../std/io/struct.Error.html\n/// [`std::io::Write::write_fmt()`]: ../../std/io/trait.Write.html#method.write_fmt\n/// [`std::error::Error`]: ../../std/error/trait.Error.html\n///\n/// # Examples\n///\n/// ```rust\n/// use std::fmt::{self, write};\n///\n/// let mut output = String::new();\n/// if let Err(fmt::Error) = write(&amp;mut output, format_args!(\"Hello {}!\", \"world\")) {\n///     panic!(\"An error occurred\");\n/// }\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]\n</span><span class=\"kw\">pub struct </span>Error;\n\n<span class=\"doccomment\">/// A trait for writing or formatting into Unicode-accepting buffers or streams.\n///\n/// This trait only accepts UTF-8â€“encoded data and is not [flushable]. If you only\n/// want to accept Unicode and you don't need flushing, you should implement this trait;\n/// otherwise you should implement [`std::io::Write`].\n///\n/// [`std::io::Write`]: ../../std/io/trait.Write.html\n/// [flushable]: ../../std/io/trait.Write.html#tymethod.flush\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub trait </span>Write {\n    <span class=\"doccomment\">/// Writes a string slice into this writer, returning whether the write\n    /// succeeded.\n    ///\n    /// This method can only succeed if the entire string slice was successfully\n    /// written, and this method will not return until all data has been\n    /// written or an error occurs.\n    ///\n    /// # Errors\n    ///\n    /// This function will return an instance of [`std::fmt::Error`][Error] on error.\n    ///\n    /// The purpose of that error is to abort the formatting operation when the underlying\n    /// destination encounters some error preventing it from accepting more text;\n    /// in particular, it does not communicate any information about *what* error occurred.\n    /// It should generally be propagated rather than handled, at least when implementing\n    /// formatting traits.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt::{Error, Write};\n    ///\n    /// fn writer&lt;W: Write&gt;(f: &amp;mut W, s: &amp;str) -&gt; Result&lt;(), Error&gt; {\n    ///     f.write_str(s)\n    /// }\n    ///\n    /// let mut buf = String::new();\n    /// writer(&amp;mut buf, \"hola\").unwrap();\n    /// assert_eq!(&amp;buf, \"hola\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">fn </span>write_str(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, s: <span class=\"kw-2\">&amp;</span>str) -&gt; <span class=\"prelude-ty\">Result</span>;\n\n    <span class=\"doccomment\">/// Writes a [`char`] into this writer, returning whether the write succeeded.\n    ///\n    /// A single [`char`] may be encoded as more than one byte.\n    /// This method can only succeed if the entire byte sequence was successfully\n    /// written, and this method will not return until all data has been\n    /// written or an error occurs.\n    ///\n    /// # Errors\n    ///\n    /// This function will return an instance of [`Error`] on error.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt::{Error, Write};\n    ///\n    /// fn writer&lt;W: Write&gt;(f: &amp;mut W, c: char) -&gt; Result&lt;(), Error&gt; {\n    ///     f.write_char(c)\n    /// }\n    ///\n    /// let mut buf = String::new();\n    /// writer(&amp;mut buf, 'a').unwrap();\n    /// writer(&amp;mut buf, 'b').unwrap();\n    /// assert_eq!(&amp;buf, \"ab\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"fmt_write_char\"</span>, since = <span class=\"string\">\"1.1.0\"</span>)]\n    </span><span class=\"kw\">fn </span>write_char(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, c: char) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"self\">self</span>.write_str(c.encode_utf8(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>; <span class=\"number\">4</span>]))\n    }\n\n    <span class=\"doccomment\">/// Glue for usage of the [`write!`] macro with implementors of this trait.\n    ///\n    /// This method should generally not be invoked manually, but rather through\n    /// the [`write!`] macro itself.\n    ///\n    /// # Errors\n    ///\n    /// This function will return an instance of [`Error`] on error. Please see\n    /// [write_str](Write::write_str) for details.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt::{Error, Write};\n    ///\n    /// fn writer&lt;W: Write&gt;(f: &amp;mut W, s: &amp;str) -&gt; Result&lt;(), Error&gt; {\n    ///     f.write_fmt(format_args!(\"{s}\"))\n    /// }\n    ///\n    /// let mut buf = String::new();\n    /// writer(&amp;mut buf, \"world\").unwrap();\n    /// assert_eq!(&amp;buf, \"world\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">fn </span>write_fmt(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, args: Arguments&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"comment\">// We use a specialization for `Sized` types to avoid an indirection\n        // through `&amp;mut self`\n        </span><span class=\"kw\">trait </span>SpecWriteFmt {\n            <span class=\"kw\">fn </span>spec_write_fmt(<span class=\"self\">self</span>, args: Arguments&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result</span>;\n        }\n\n        <span class=\"kw\">impl</span>&lt;W: Write + <span class=\"question-mark\">?</span>Sized&gt; SpecWriteFmt <span class=\"kw\">for </span><span class=\"kw-2\">&amp;mut </span>W {\n            <span class=\"attr\">#[inline]\n            </span>default <span class=\"kw\">fn </span>spec_write_fmt(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, args: Arguments&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n                <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(s) = args.as_statically_known_str() {\n                    <span class=\"self\">self</span>.write_str(s)\n                } <span class=\"kw\">else </span>{\n                    write(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, args)\n                }\n            }\n        }\n\n        <span class=\"kw\">impl</span>&lt;W: Write&gt; SpecWriteFmt <span class=\"kw\">for </span><span class=\"kw-2\">&amp;mut </span>W {\n            <span class=\"attr\">#[inline]\n            </span><span class=\"kw\">fn </span>spec_write_fmt(<span class=\"self\">self</span>, args: Arguments&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n                <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(s) = args.as_statically_known_str() {\n                    <span class=\"self\">self</span>.write_str(s)\n                } <span class=\"kw\">else </span>{\n                    write(<span class=\"self\">self</span>, args)\n                }\n            }\n        }\n\n        <span class=\"self\">self</span>.spec_write_fmt(args)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"fmt_write_blanket_impl\"</span>, since = <span class=\"string\">\"1.4.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;W: Write + <span class=\"question-mark\">?</span>Sized&gt; Write <span class=\"kw\">for </span><span class=\"kw-2\">&amp;mut </span>W {\n    <span class=\"kw\">fn </span>write_str(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, s: <span class=\"kw-2\">&amp;</span>str) -&gt; <span class=\"prelude-ty\">Result </span>{\n        (<span class=\"kw-2\">**</span><span class=\"self\">self</span>).write_str(s)\n    }\n\n    <span class=\"kw\">fn </span>write_char(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, c: char) -&gt; <span class=\"prelude-ty\">Result </span>{\n        (<span class=\"kw-2\">**</span><span class=\"self\">self</span>).write_char(c)\n    }\n\n    <span class=\"kw\">fn </span>write_fmt(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, args: Arguments&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        (<span class=\"kw-2\">**</span><span class=\"self\">self</span>).write_fmt(args)\n    }\n}\n\n<span class=\"doccomment\">/// Configuration for formatting.\n///\n/// A `Formatter` represents various options related to formatting. Users do not\n/// construct `Formatter`s directly; a mutable reference to one is passed to\n/// the `fmt` method of all formatting traits, like [`Debug`] and [`Display`].\n///\n/// To interact with a `Formatter`, you'll call various methods to change the\n/// various options related to formatting. For examples, please see the\n/// documentation of the methods defined on `Formatter` below.\n</span><span class=\"attr\">#[allow(missing_debug_implementations)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[rustc_diagnostic_item = <span class=\"string\">\"Formatter\"</span>]\n</span><span class=\"kw\">pub struct </span>Formatter&lt;<span class=\"lifetime\">'a</span>&gt; {\n    flags: u32,\n    fill: char,\n    align: rt::Alignment,\n    width: <span class=\"prelude-ty\">Option</span>&lt;usize&gt;,\n    precision: <span class=\"prelude-ty\">Option</span>&lt;usize&gt;,\n\n    buf: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>(<span class=\"kw\">dyn </span>Write + <span class=\"lifetime\">'a</span>),\n}\n\n<span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>&gt; Formatter&lt;<span class=\"lifetime\">'a</span>&gt; {\n    <span class=\"doccomment\">/// Creates a new formatter with default settings.\n    ///\n    /// This can be used as a micro-optimization in cases where a full `Arguments`\n    /// structure (as created by `format_args!`) is not necessary; `Arguments`\n    /// is a little more expensive to use in simple formatting scenarios.\n    ///\n    /// Currently not intended for use outside of the standard library.\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"fmt_internals\"</span>, reason = <span class=\"string\">\"internal to standard library\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    #[doc(hidden)]\n    </span><span class=\"kw\">pub fn </span>new(buf: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>(<span class=\"kw\">dyn </span>Write + <span class=\"lifetime\">'a</span>)) -&gt; Formatter&lt;<span class=\"lifetime\">'a</span>&gt; {\n        Formatter {\n            flags: <span class=\"number\">0</span>,\n            fill: <span class=\"string\">' '</span>,\n            align: rt::Alignment::Unknown,\n            width: <span class=\"prelude-val\">None</span>,\n            precision: <span class=\"prelude-val\">None</span>,\n            buf,\n        }\n    }\n}\n\n<span class=\"doccomment\">/// This structure represents a safely precompiled version of a format string\n/// and its arguments. This cannot be generated at runtime because it cannot\n/// safely be done, so no constructors are given and the fields are private\n/// to prevent modification.\n///\n/// The [`format_args!`] macro will safely create an instance of this structure.\n/// The macro validates the format string at compile-time so usage of the\n/// [`write()`] and [`format()`] functions can be safely performed.\n///\n/// You can use the `Arguments&lt;'a&gt;` that [`format_args!`] returns in `Debug`\n/// and `Display` contexts as seen below. The example also shows that `Debug`\n/// and `Display` format to the same thing: the interpolated format string\n/// in `format_args!`.\n///\n/// ```rust\n/// let debug = format!(\"{:?}\", format_args!(\"{} foo {:?}\", 1, 2));\n/// let display = format!(\"{}\", format_args!(\"{} foo {:?}\", 1, 2));\n/// assert_eq!(\"1 foo 2\", display);\n/// assert_eq!(display, debug);\n/// ```\n///\n/// [`format()`]: ../../std/fmt/fn.format.html\n</span><span class=\"attr\">#[lang = <span class=\"string\">\"format_arguments\"</span>]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[derive(Copy, Clone)]\n</span><span class=\"kw\">pub struct </span>Arguments&lt;<span class=\"lifetime\">'a</span>&gt; {\n    <span class=\"comment\">// Format string pieces to print.\n    </span>pieces: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str],\n\n    <span class=\"comment\">// Placeholder specs, or `None` if all specs are default (as in \"{}{}\").\n    </span>fmt: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[rt::Placeholder]&gt;,\n\n    <span class=\"comment\">// Dynamic arguments for interpolation, to be interleaved with string\n    // pieces. (Every argument is preceded by a string piece.)\n    </span>args: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[rt::Argument&lt;<span class=\"lifetime\">'a</span>&gt;],\n}\n\n<span class=\"doccomment\">/// Used by the format_args!() macro to create a fmt::Arguments object.\n</span><span class=\"attr\">#[doc(hidden)]\n#[unstable(feature = <span class=\"string\">\"fmt_internals\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>&gt; Arguments&lt;<span class=\"lifetime\">'a</span>&gt; {\n    <span class=\"attr\">#[inline]\n    #[rustc_const_unstable(feature = <span class=\"string\">\"const_fmt_arguments_new\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    </span><span class=\"kw\">pub const fn </span>new_const&lt;<span class=\"kw\">const </span>N: usize&gt;(pieces: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str; N]) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"kw\">const </span>{ <span class=\"macro\">assert!</span>(N &lt;= <span class=\"number\">1</span>) };\n        Arguments { pieces, fmt: <span class=\"prelude-val\">None</span>, args: <span class=\"kw-2\">&amp;</span>[] }\n    }\n\n    <span class=\"doccomment\">/// When using the format_args!() macro, this function is used to generate the\n    /// Arguments structure.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">pub fn </span>new_v1&lt;<span class=\"kw\">const </span>P: usize, <span class=\"kw\">const </span>A: usize&gt;(\n        pieces: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str; P],\n        args: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[rt::Argument&lt;<span class=\"lifetime\">'a</span>&gt;; A],\n    ) -&gt; Arguments&lt;<span class=\"lifetime\">'a</span>&gt; {\n        <span class=\"kw\">const </span>{ <span class=\"macro\">assert!</span>(P &gt;= A &amp;&amp; P &lt;= A + <span class=\"number\">1</span>, <span class=\"string\">\"invalid args\"</span>) }\n        Arguments { pieces, fmt: <span class=\"prelude-val\">None</span>, args }\n    }\n\n    <span class=\"doccomment\">/// This function is used to specify nonstandard formatting parameters.\n    ///\n    /// An `rt::UnsafeArg` is required because the following invariants must be held\n    /// in order for this function to be safe:\n    /// 1. The `pieces` slice must be at least as long as `fmt`.\n    /// 2. Every `rt::Placeholder::position` value within `fmt` must be a valid index of `args`.\n    /// 3. Every `rt::Count::Param` within `fmt` must contain a valid index of `args`.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">pub fn </span>new_v1_formatted(\n        pieces: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str],\n        args: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[rt::Argument&lt;<span class=\"lifetime\">'a</span>&gt;],\n        fmt: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[rt::Placeholder],\n        _unsafe_arg: rt::UnsafeArg,\n    ) -&gt; Arguments&lt;<span class=\"lifetime\">'a</span>&gt; {\n        Arguments { pieces, fmt: <span class=\"prelude-val\">Some</span>(fmt), args }\n    }\n\n    <span class=\"doccomment\">/// Estimates the length of the formatted text.\n    ///\n    /// This is intended to be used for setting initial `String` capacity\n    /// when using `format!`. Note: this is neither the lower nor upper bound.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">pub fn </span>estimated_capacity(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; usize {\n        <span class=\"kw\">let </span>pieces_length: usize = <span class=\"self\">self</span>.pieces.iter().map(|x| x.len()).sum();\n\n        <span class=\"kw\">if </span><span class=\"self\">self</span>.args.is_empty() {\n            pieces_length\n        } <span class=\"kw\">else if </span>!<span class=\"self\">self</span>.pieces.is_empty() &amp;&amp; <span class=\"self\">self</span>.pieces[<span class=\"number\">0</span>].is_empty() &amp;&amp; pieces_length &lt; <span class=\"number\">16 </span>{\n            <span class=\"comment\">// If the format string starts with an argument,\n            // don't preallocate anything, unless length\n            // of pieces is significant.\n            </span><span class=\"number\">0\n        </span>} <span class=\"kw\">else </span>{\n            <span class=\"comment\">// There are some arguments, so any additional push\n            // will reallocate the string. To avoid that,\n            // we're \"pre-doubling\" the capacity here.\n            </span>pieces_length.checked_mul(<span class=\"number\">2</span>).unwrap_or(<span class=\"number\">0</span>)\n        }\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>&gt; Arguments&lt;<span class=\"lifetime\">'a</span>&gt; {\n    <span class=\"doccomment\">/// Get the formatted string, if it has no arguments to be formatted at runtime.\n    ///\n    /// This can be used to avoid allocations in some cases.\n    ///\n    /// # Guarantees\n    ///\n    /// For `format_args!(\"just a literal\")`, this function is guaranteed to\n    /// return `Some(\"just a literal\")`.\n    ///\n    /// For most cases with placeholders, this function will return `None`.\n    ///\n    /// However, the compiler may perform optimizations that can cause this\n    /// function to return `Some(_)` even if the format string contains\n    /// placeholders. For example, `format_args!(\"Hello, {}!\", \"world\")` may be\n    /// optimized to `format_args!(\"Hello, world!\")`, such that `as_str()`\n    /// returns `Some(\"Hello, world!\")`.\n    ///\n    /// The behavior for anything but the trivial case (without placeholders)\n    /// is not guaranteed, and should not be relied upon for anything other\n    /// than optimization.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use std::fmt::Arguments;\n    ///\n    /// fn write_str(_: &amp;str) { /* ... */ }\n    ///\n    /// fn write_fmt(args: &amp;Arguments&lt;'_&gt;) {\n    ///     if let Some(s) = args.as_str() {\n    ///         write_str(s)\n    ///     } else {\n    ///         write_str(&amp;args.to_string());\n    ///     }\n    /// }\n    /// ```\n    ///\n    /// ```rust\n    /// assert_eq!(format_args!(\"hello\").as_str(), Some(\"hello\"));\n    /// assert_eq!(format_args!(\"\").as_str(), Some(\"\"));\n    /// assert_eq!(format_args!(\"{:?}\", std::env::current_dir()).as_str(), None);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"fmt_as_str\"</span>, since = <span class=\"string\">\"1.52.0\"</span>)]\n    #[rustc_const_unstable(feature = <span class=\"string\">\"const_arguments_as_str\"</span>, issue = <span class=\"string\">\"103900\"</span>)]\n    #[must_use]\n    #[inline]\n    </span><span class=\"kw\">pub const fn </span>as_str(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; {\n        <span class=\"kw\">match </span>(<span class=\"self\">self</span>.pieces, <span class=\"self\">self</span>.args) {\n            ([], []) =&gt; <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"\"</span>),\n            ([s], []) =&gt; <span class=\"prelude-val\">Some</span>(s),\n            <span class=\"kw\">_ </span>=&gt; <span class=\"prelude-val\">None</span>,\n        }\n    }\n\n    <span class=\"doccomment\">/// Same as [`Arguments::as_str`], but will only return `Some(s)` if it can be determined at compile time.\n    </span><span class=\"attr\">#[must_use]\n    #[inline]\n    </span><span class=\"kw\">fn </span>as_statically_known_str(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; {\n        <span class=\"kw\">let </span>s = <span class=\"self\">self</span>.as_str();\n        <span class=\"kw\">if </span>core::intrinsics::is_val_statically_known(s.is_some()) { s } <span class=\"kw\">else </span>{ <span class=\"prelude-val\">None </span>}\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Debug <span class=\"kw\">for </span>Arguments&lt;<span class=\"lifetime\">'_</span>&gt; {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        Display::fmt(<span class=\"self\">self</span>, fmt)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Display <span class=\"kw\">for </span>Arguments&lt;<span class=\"lifetime\">'_</span>&gt; {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        write(fmt.buf, <span class=\"kw-2\">*</span><span class=\"self\">self</span>)\n    }\n}\n\n<span class=\"doccomment\">/// `?` formatting.\n///\n/// `Debug` should format the output in a programmer-facing, debugging context.\n///\n/// Generally speaking, you should just `derive` a `Debug` implementation.\n///\n/// When used with the alternate format specifier `#?`, the output is pretty-printed.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n///\n/// This trait can be used with `#[derive]` if all fields implement `Debug`. When\n/// `derive`d for structs, it will use the name of the `struct`, then `{`, then a\n/// comma-separated list of each field's name and `Debug` value, then `}`. For\n/// `enum`s, it will use the name of the variant and, if applicable, `(`, then the\n/// `Debug` values of the fields, then `)`.\n///\n/// # Stability\n///\n/// Derived `Debug` formats are not stable, and so may change with future Rust\n/// versions. Additionally, `Debug` implementations of types provided by the\n/// standard library (`std`, `core`, `alloc`, etc.) are not stable, and\n/// may also change with future Rust versions.\n///\n/// # Examples\n///\n/// Deriving an implementation:\n///\n/// ```\n/// #[derive(Debug)]\n/// struct Point {\n///     x: i32,\n///     y: i32,\n/// }\n///\n/// let origin = Point { x: 0, y: 0 };\n///\n/// assert_eq!(format!(\"The origin is: {origin:?}\"), \"The origin is: Point { x: 0, y: 0 }\");\n/// ```\n///\n/// Manually implementing:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Point {\n///     x: i32,\n///     y: i32,\n/// }\n///\n/// impl fmt::Debug for Point {\n///     fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n///         f.debug_struct(\"Point\")\n///          .field(\"x\", &amp;self.x)\n///          .field(\"y\", &amp;self.y)\n///          .finish()\n///     }\n/// }\n///\n/// let origin = Point { x: 0, y: 0 };\n///\n/// assert_eq!(format!(\"The origin is: {origin:?}\"), \"The origin is: Point { x: 0, y: 0 }\");\n/// ```\n///\n/// There are a number of helper methods on the [`Formatter`] struct to help you with manual\n/// implementations, such as [`debug_struct`].\n///\n/// [`debug_struct`]: Formatter::debug_struct\n///\n/// Types that do not wish to use the standard suite of debug representations\n/// provided by the `Formatter` trait (`debug_struct`, `debug_tuple`,\n/// `debug_list`, `debug_set`, `debug_map`) can do something totally custom by\n/// manually writing an arbitrary representation to the `Formatter`.\n///\n/// ```\n/// # use std::fmt;\n/// # struct Point {\n/// #     x: i32,\n/// #     y: i32,\n/// # }\n/// #\n/// impl fmt::Debug for Point {\n///     fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n///         write!(f, \"Point [{} {}]\", self.x, self.y)\n///     }\n/// }\n/// ```\n///\n/// `Debug` implementations using either `derive` or the debug builder API\n/// on [`Formatter`] support pretty-printing using the alternate flag: `{:#?}`.\n///\n/// Pretty-printing with `#?`:\n///\n/// ```\n/// #[derive(Debug)]\n/// struct Point {\n///     x: i32,\n///     y: i32,\n/// }\n///\n/// let origin = Point { x: 0, y: 0 };\n///\n/// assert_eq!(format!(\"The origin is: {origin:#?}\"),\n/// \"The origin is: Point {\n///     x: 0,\n///     y: 0,\n/// }\");\n/// ```\n\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[rustc_on_unimplemented(\n    on(\n        crate_local,\n        label = <span class=\"string\">\"`{Self}` cannot be formatted using `{{:?}}`\"</span>,\n        note = <span class=\"string\">\"add `#[derive(Debug)]` to `{Self}` or manually `impl {Debug} for {Self}`\"\n    </span>),\n    message = <span class=\"string\">\"`{Self}` doesn't implement `{Debug}`\"</span>,\n    label = <span class=\"string\">\"`{Self}` cannot be formatted using `{{:?}}` because it doesn't implement `{Debug}`\"\n</span>)]\n#[doc(alias = <span class=\"string\">\"{:?}\"</span>)]\n#[rustc_diagnostic_item = <span class=\"string\">\"Debug\"</span>]\n#[rustc_trivial_field_reads]\n</span><span class=\"kw\">pub trait </span>Debug {\n    <span class=\"attr\">#[doc = <span class=\"macro\">include_str!</span>(<span class=\"string\">\"fmt_trait_method_doc.md\"</span>)]\n    </span><span class=\"doccomment\">///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Position {\n    ///     longitude: f32,\n    ///     latitude: f32,\n    /// }\n    ///\n    /// impl fmt::Debug for Position {\n    ///     fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         f.debug_tuple(\"\")\n    ///          .field(&amp;self.longitude)\n    ///          .field(&amp;self.latitude)\n    ///          .finish()\n    ///     }\n    /// }\n    ///\n    /// let position = Position { longitude: 1.987, latitude: 2.983 };\n    /// assert_eq!(format!(\"{position:?}\"), \"(1.987, 2.983)\");\n    ///\n    /// assert_eq!(format!(\"{position:#?}\"), \"(\n    ///     1.987,\n    ///     2.983,\n    /// )\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result</span>;\n}\n\n<span class=\"comment\">// Separate module to reexport the macro `Debug` from prelude without the trait `Debug`.\n</span><span class=\"kw\">pub</span>(<span class=\"kw\">crate</span>) <span class=\"kw\">mod </span>macros {\n    <span class=\"doccomment\">/// Derive macro generating an impl of the trait `Debug`.\n    </span><span class=\"attr\">#[rustc_builtin_macro]\n    #[stable(feature = <span class=\"string\">\"builtin_macro_prelude\"</span>, since = <span class=\"string\">\"1.38.0\"</span>)]\n    #[allow_internal_unstable(core_intrinsics, fmt_helpers_for_derive)]\n    </span><span class=\"kw\">pub macro </span>Debug(<span class=\"macro-nonterminal\">$item</span>:item) {\n        <span class=\"comment\">/* compiler built-in */\n    </span>}\n}\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"builtin_macro_prelude\"</span>, since = <span class=\"string\">\"1.38.0\"</span>)]\n#[doc(inline)]\n</span><span class=\"kw\">pub use </span>macros::Debug;\n\n<span class=\"doccomment\">/// Format trait for an empty format, `{}`.\n///\n/// Implementing this trait for a type will automatically implement the\n/// [`ToString`][tostring] trait for the type, allowing the usage\n/// of the [`.to_string()`][tostring_function] method. Prefer implementing\n/// the `Display` trait for a type, rather than [`ToString`][tostring].\n///\n/// `Display` is similar to [`Debug`], but `Display` is for user-facing\n/// output, and so cannot be derived.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n/// [tostring]: ../../std/string/trait.ToString.html\n/// [tostring_function]: ../../std/string/trait.ToString.html#tymethod.to_string\n///\n/// # Internationalization\n///\n/// Because a type can only have one `Display` implementation, it is often preferable\n/// to only implement `Display` when there is a single most \"obvious\" way that\n/// values can be formatted as text. This could mean formatting according to the\n/// \"invariant\" culture and \"undefined\" locale, or it could mean that the type\n/// display is designed for a specific culture/locale, such as developer logs.\n///\n/// If not all values have a justifiably canonical textual format or if you want\n/// to support alternative formats not covered by the standard set of possible\n/// [formatting traits], the most flexible approach is display adapters: methods\n/// like [`str::escape_default`] or [`Path::display`] which create a wrapper\n/// implementing `Display` to output the specific display format.\n///\n/// [formatting traits]: ../../std/fmt/index.html#formatting-traits\n/// [`Path::display`]: ../../std/path/struct.Path.html#method.display\n///\n/// # Examples\n///\n/// Implementing `Display` on a type:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Point {\n///     x: i32,\n///     y: i32,\n/// }\n///\n/// impl fmt::Display for Point {\n///     fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n///         write!(f, \"({}, {})\", self.x, self.y)\n///     }\n/// }\n///\n/// let origin = Point { x: 0, y: 0 };\n///\n/// assert_eq!(format!(\"The origin is: {origin}\"), \"The origin is: (0, 0)\");\n/// ```\n</span><span class=\"attr\">#[rustc_on_unimplemented(\n    on(\n        any(_Self = <span class=\"string\">\"std::path::Path\"</span>, _Self = <span class=\"string\">\"std::path::PathBuf\"</span>),\n        label = <span class=\"string\">\"`{Self}` cannot be formatted with the default formatter; call `.display()` on it\"</span>,\n        note = <span class=\"string\">\"call `.display()` or `.to_string_lossy()` to safely print paths, \\\n                as they may contain non-Unicode data\"\n    </span>),\n    message = <span class=\"string\">\"`{Self}` doesn't implement `{Display}`\"</span>,\n    label = <span class=\"string\">\"`{Self}` cannot be formatted with the default formatter\"</span>,\n    note = <span class=\"string\">\"in format strings you may be able to use `{{:?}}` (or {{:#?}} for pretty-print) instead\"\n</span>)]\n#[doc(alias = <span class=\"string\">\"{}\"</span>)]\n#[rustc_diagnostic_item = <span class=\"string\">\"Display\"</span>]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub trait </span>Display {\n    <span class=\"attr\">#[doc = <span class=\"macro\">include_str!</span>(<span class=\"string\">\"fmt_trait_method_doc.md\"</span>)]\n    </span><span class=\"doccomment\">///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Position {\n    ///     longitude: f32,\n    ///     latitude: f32,\n    /// }\n    ///\n    /// impl fmt::Display for Position {\n    ///     fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         write!(f, \"({}, {})\", self.longitude, self.latitude)\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(\"(1.987, 2.983)\",\n    ///            format!(\"{}\", Position { longitude: 1.987, latitude: 2.983, }));\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result</span>;\n}\n\n<span class=\"doccomment\">/// `o` formatting.\n///\n/// The `Octal` trait should format its output as a number in base-8.\n///\n/// For primitive signed integers (`i8` to `i128`, and `isize`),\n/// negative values are formatted as the twoâ€™s complement representation.\n///\n/// The alternate flag, `#`, adds a `0o` in front of the output.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n///\n/// # Examples\n///\n/// Basic usage with `i32`:\n///\n/// ```\n/// let x = 42; // 42 is '52' in octal\n///\n/// assert_eq!(format!(\"{x:o}\"), \"52\");\n/// assert_eq!(format!(\"{x:#o}\"), \"0o52\");\n///\n/// assert_eq!(format!(\"{:o}\", -16), \"37777777760\");\n/// ```\n///\n/// Implementing `Octal` on a type:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Length(i32);\n///\n/// impl fmt::Octal for Length {\n///     fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n///         let val = self.0;\n///\n///         fmt::Octal::fmt(&amp;val, f) // delegate to i32's implementation\n///     }\n/// }\n///\n/// let l = Length(9);\n///\n/// assert_eq!(format!(\"l as octal is: {l:o}\"), \"l as octal is: 11\");\n///\n/// assert_eq!(format!(\"l as octal is: {l:#06o}\"), \"l as octal is: 0o0011\");\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub trait </span>Octal {\n    <span class=\"attr\">#[doc = <span class=\"macro\">include_str!</span>(<span class=\"string\">\"fmt_trait_method_doc.md\"</span>)]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result</span>;\n}\n\n<span class=\"doccomment\">/// `b` formatting.\n///\n/// The `Binary` trait should format its output as a number in binary.\n///\n/// For primitive signed integers ([`i8`] to [`i128`], and [`isize`]),\n/// negative values are formatted as the twoâ€™s complement representation.\n///\n/// The alternate flag, `#`, adds a `0b` in front of the output.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n///\n/// # Examples\n///\n/// Basic usage with [`i32`]:\n///\n/// ```\n/// let x = 42; // 42 is '101010' in binary\n///\n/// assert_eq!(format!(\"{x:b}\"), \"101010\");\n/// assert_eq!(format!(\"{x:#b}\"), \"0b101010\");\n///\n/// assert_eq!(format!(\"{:b}\", -16), \"11111111111111111111111111110000\");\n/// ```\n///\n/// Implementing `Binary` on a type:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Length(i32);\n///\n/// impl fmt::Binary for Length {\n///     fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n///         let val = self.0;\n///\n///         fmt::Binary::fmt(&amp;val, f) // delegate to i32's implementation\n///     }\n/// }\n///\n/// let l = Length(107);\n///\n/// assert_eq!(format!(\"l as binary is: {l:b}\"), \"l as binary is: 1101011\");\n///\n/// assert_eq!(\n///     // Note that the `0b` prefix added by `#` is included in the total width, so we\n///     // need to add two to correctly display all 32 bits.\n///     format!(\"l as binary is: {l:#034b}\"),\n///     \"l as binary is: 0b00000000000000000000000001101011\"\n/// );\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub trait </span>Binary {\n    <span class=\"attr\">#[doc = <span class=\"macro\">include_str!</span>(<span class=\"string\">\"fmt_trait_method_doc.md\"</span>)]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result</span>;\n}\n\n<span class=\"doccomment\">/// `x` formatting.\n///\n/// The `LowerHex` trait should format its output as a number in hexadecimal, with `a` through `f`\n/// in lower case.\n///\n/// For primitive signed integers (`i8` to `i128`, and `isize`),\n/// negative values are formatted as the twoâ€™s complement representation.\n///\n/// The alternate flag, `#`, adds a `0x` in front of the output.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n///\n/// # Examples\n///\n/// Basic usage with `i32`:\n///\n/// ```\n/// let y = 42; // 42 is '2a' in hex\n///\n/// assert_eq!(format!(\"{y:x}\"), \"2a\");\n/// assert_eq!(format!(\"{y:#x}\"), \"0x2a\");\n///\n/// assert_eq!(format!(\"{:x}\", -16), \"fffffff0\");\n/// ```\n///\n/// Implementing `LowerHex` on a type:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Length(i32);\n///\n/// impl fmt::LowerHex for Length {\n///     fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n///         let val = self.0;\n///\n///         fmt::LowerHex::fmt(&amp;val, f) // delegate to i32's implementation\n///     }\n/// }\n///\n/// let l = Length(9);\n///\n/// assert_eq!(format!(\"l as hex is: {l:x}\"), \"l as hex is: 9\");\n///\n/// assert_eq!(format!(\"l as hex is: {l:#010x}\"), \"l as hex is: 0x00000009\");\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub trait </span>LowerHex {\n    <span class=\"attr\">#[doc = <span class=\"macro\">include_str!</span>(<span class=\"string\">\"fmt_trait_method_doc.md\"</span>)]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result</span>;\n}\n\n<span class=\"doccomment\">/// `X` formatting.\n///\n/// The `UpperHex` trait should format its output as a number in hexadecimal, with `A` through `F`\n/// in upper case.\n///\n/// For primitive signed integers (`i8` to `i128`, and `isize`),\n/// negative values are formatted as the twoâ€™s complement representation.\n///\n/// The alternate flag, `#`, adds a `0x` in front of the output.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n///\n/// # Examples\n///\n/// Basic usage with `i32`:\n///\n/// ```\n/// let y = 42; // 42 is '2A' in hex\n///\n/// assert_eq!(format!(\"{y:X}\"), \"2A\");\n/// assert_eq!(format!(\"{y:#X}\"), \"0x2A\");\n///\n/// assert_eq!(format!(\"{:X}\", -16), \"FFFFFFF0\");\n/// ```\n///\n/// Implementing `UpperHex` on a type:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Length(i32);\n///\n/// impl fmt::UpperHex for Length {\n///     fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n///         let val = self.0;\n///\n///         fmt::UpperHex::fmt(&amp;val, f) // delegate to i32's implementation\n///     }\n/// }\n///\n/// let l = Length(i32::MAX);\n///\n/// assert_eq!(format!(\"l as hex is: {l:X}\"), \"l as hex is: 7FFFFFFF\");\n///\n/// assert_eq!(format!(\"l as hex is: {l:#010X}\"), \"l as hex is: 0x7FFFFFFF\");\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub trait </span>UpperHex {\n    <span class=\"attr\">#[doc = <span class=\"macro\">include_str!</span>(<span class=\"string\">\"fmt_trait_method_doc.md\"</span>)]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result</span>;\n}\n\n<span class=\"doccomment\">/// `p` formatting.\n///\n/// The `Pointer` trait should format its output as a memory location. This is commonly presented\n/// as hexadecimal.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n///\n/// # Examples\n///\n/// Basic usage with `&amp;i32`:\n///\n/// ```\n/// let x = &amp;42;\n///\n/// let address = format!(\"{x:p}\"); // this produces something like '0x7f06092ac6d0'\n/// ```\n///\n/// Implementing `Pointer` on a type:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Length(i32);\n///\n/// impl fmt::Pointer for Length {\n///     fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n///         // use `as` to convert to a `*const T`, which implements Pointer, which we can use\n///\n///         let ptr = self as *const Self;\n///         fmt::Pointer::fmt(&amp;ptr, f)\n///     }\n/// }\n///\n/// let l = Length(42);\n///\n/// println!(\"l is in memory here: {l:p}\");\n///\n/// let l_ptr = format!(\"{l:018p}\");\n/// assert_eq!(l_ptr.len(), 18);\n/// assert_eq!(&amp;l_ptr[..2], \"0x\");\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[rustc_diagnostic_item = <span class=\"string\">\"Pointer\"</span>]\n</span><span class=\"kw\">pub trait </span>Pointer {\n    <span class=\"attr\">#[doc = <span class=\"macro\">include_str!</span>(<span class=\"string\">\"fmt_trait_method_doc.md\"</span>)]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result</span>;\n}\n\n<span class=\"doccomment\">/// `e` formatting.\n///\n/// The `LowerExp` trait should format its output in scientific notation with a lower-case `e`.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n///\n/// # Examples\n///\n/// Basic usage with `f64`:\n///\n/// ```\n/// let x = 42.0; // 42.0 is '4.2e1' in scientific notation\n///\n/// assert_eq!(format!(\"{x:e}\"), \"4.2e1\");\n/// ```\n///\n/// Implementing `LowerExp` on a type:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Length(i32);\n///\n/// impl fmt::LowerExp for Length {\n///     fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n///         let val = f64::from(self.0);\n///         fmt::LowerExp::fmt(&amp;val, f) // delegate to f64's implementation\n///     }\n/// }\n///\n/// let l = Length(100);\n///\n/// assert_eq!(\n///     format!(\"l in scientific notation is: {l:e}\"),\n///     \"l in scientific notation is: 1e2\"\n/// );\n///\n/// assert_eq!(\n///     format!(\"l in scientific notation is: {l:05e}\"),\n///     \"l in scientific notation is: 001e2\"\n/// );\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub trait </span>LowerExp {\n    <span class=\"attr\">#[doc = <span class=\"macro\">include_str!</span>(<span class=\"string\">\"fmt_trait_method_doc.md\"</span>)]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result</span>;\n}\n\n<span class=\"doccomment\">/// `E` formatting.\n///\n/// The `UpperExp` trait should format its output in scientific notation with an upper-case `E`.\n///\n/// For more information on formatters, see [the module-level documentation][module].\n///\n/// [module]: ../../std/fmt/index.html\n///\n/// # Examples\n///\n/// Basic usage with `f64`:\n///\n/// ```\n/// let x = 42.0; // 42.0 is '4.2E1' in scientific notation\n///\n/// assert_eq!(format!(\"{x:E}\"), \"4.2E1\");\n/// ```\n///\n/// Implementing `UpperExp` on a type:\n///\n/// ```\n/// use std::fmt;\n///\n/// struct Length(i32);\n///\n/// impl fmt::UpperExp for Length {\n///     fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n///         let val = f64::from(self.0);\n///         fmt::UpperExp::fmt(&amp;val, f) // delegate to f64's implementation\n///     }\n/// }\n///\n/// let l = Length(100);\n///\n/// assert_eq!(\n///     format!(\"l in scientific notation is: {l:E}\"),\n///     \"l in scientific notation is: 1E2\"\n/// );\n///\n/// assert_eq!(\n///     format!(\"l in scientific notation is: {l:05E}\"),\n///     \"l in scientific notation is: 001E2\"\n/// );\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub trait </span>UpperExp {\n    <span class=\"attr\">#[doc = <span class=\"macro\">include_str!</span>(<span class=\"string\">\"fmt_trait_method_doc.md\"</span>)]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result</span>;\n}\n\n<span class=\"doccomment\">/// The `write` function takes an output stream, and an `Arguments` struct\n/// that can be precompiled with the `format_args!` macro.\n///\n/// The arguments will be formatted according to the specified format string\n/// into the output stream provided.\n///\n/// # Examples\n///\n/// Basic usage:\n///\n/// ```\n/// use std::fmt;\n///\n/// let mut output = String::new();\n/// fmt::write(&amp;mut output, format_args!(\"Hello {}!\", \"world\"))\n///     .expect(\"Error occurred while trying to write in String\");\n/// assert_eq!(output, \"Hello world!\");\n/// ```\n///\n/// Please note that using [`write!`] might be preferable. Example:\n///\n/// ```\n/// use std::fmt::Write;\n///\n/// let mut output = String::new();\n/// write!(&amp;mut output, \"Hello {}!\", \"world\")\n///     .expect(\"Error occurred while trying to write in String\");\n/// assert_eq!(output, \"Hello world!\");\n/// ```\n///\n/// [`write!`]: crate::write!\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>write(output: <span class=\"kw-2\">&amp;mut </span><span class=\"kw\">dyn </span>Write, args: Arguments&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>formatter = Formatter::new(output);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>idx = <span class=\"number\">0</span>;\n\n    <span class=\"kw\">match </span>args.fmt {\n        <span class=\"prelude-val\">None </span>=&gt; {\n            <span class=\"comment\">// We can use default formatting parameters for all arguments.\n            </span><span class=\"kw\">for </span>(i, arg) <span class=\"kw\">in </span>args.args.iter().enumerate() {\n                <span class=\"comment\">// SAFETY: args.args and args.pieces come from the same Arguments,\n                // which guarantees the indexes are always within bounds.\n                </span><span class=\"kw\">let </span>piece = <span class=\"kw\">unsafe </span>{ args.pieces.get_unchecked(i) };\n                <span class=\"kw\">if </span>!piece.is_empty() {\n                    formatter.buf.write_str(<span class=\"kw-2\">*</span>piece)<span class=\"question-mark\">?</span>;\n                }\n\n                <span class=\"comment\">// SAFETY: There are no formatting parameters and hence no\n                // count arguments.\n                </span><span class=\"kw\">unsafe </span>{\n                    arg.fmt(<span class=\"kw-2\">&amp;mut </span>formatter)<span class=\"question-mark\">?</span>;\n                }\n                idx += <span class=\"number\">1</span>;\n            }\n        }\n        <span class=\"prelude-val\">Some</span>(fmt) =&gt; {\n            <span class=\"comment\">// Every spec has a corresponding argument that is preceded by\n            // a string piece.\n            </span><span class=\"kw\">for </span>(i, arg) <span class=\"kw\">in </span>fmt.iter().enumerate() {\n                <span class=\"comment\">// SAFETY: fmt and args.pieces come from the same Arguments,\n                // which guarantees the indexes are always within bounds.\n                </span><span class=\"kw\">let </span>piece = <span class=\"kw\">unsafe </span>{ args.pieces.get_unchecked(i) };\n                <span class=\"kw\">if </span>!piece.is_empty() {\n                    formatter.buf.write_str(<span class=\"kw-2\">*</span>piece)<span class=\"question-mark\">?</span>;\n                }\n                <span class=\"comment\">// SAFETY: arg and args.args come from the same Arguments,\n                // which guarantees the indexes are always within bounds.\n                </span><span class=\"kw\">unsafe </span>{ run(<span class=\"kw-2\">&amp;mut </span>formatter, arg, args.args) }<span class=\"question-mark\">?</span>;\n                idx += <span class=\"number\">1</span>;\n            }\n        }\n    }\n\n    <span class=\"comment\">// There can be only one trailing string piece left.\n    </span><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(piece) = args.pieces.get(idx) {\n        formatter.buf.write_str(<span class=\"kw-2\">*</span>piece)<span class=\"question-mark\">?</span>;\n    }\n\n    <span class=\"prelude-val\">Ok</span>(())\n}\n\n<span class=\"kw\">unsafe fn </span>run(fmt: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;, arg: <span class=\"kw-2\">&amp;</span>rt::Placeholder, args: <span class=\"kw-2\">&amp;</span>[rt::Argument&lt;<span class=\"lifetime\">'_</span>&gt;]) -&gt; <span class=\"prelude-ty\">Result </span>{\n    fmt.fill = arg.fill;\n    fmt.align = arg.align;\n    fmt.flags = arg.flags;\n    <span class=\"comment\">// SAFETY: arg and args come from the same Arguments,\n    // which guarantees the indexes are always within bounds.\n    </span><span class=\"kw\">unsafe </span>{\n        fmt.width = getcount(args, <span class=\"kw-2\">&amp;</span>arg.width);\n        fmt.precision = getcount(args, <span class=\"kw-2\">&amp;</span>arg.precision);\n    }\n\n    <span class=\"comment\">// Extract the correct argument\n    </span><span class=\"macro\">debug_assert!</span>(arg.position &lt; args.len());\n    <span class=\"comment\">// SAFETY: arg and args come from the same Arguments,\n    // which guarantees its index is always within bounds.\n    </span><span class=\"kw\">let </span>value = <span class=\"kw\">unsafe </span>{ args.get_unchecked(arg.position) };\n\n    <span class=\"comment\">// Then actually do some printing\n    // SAFETY: this is a placeholder argument.\n    </span><span class=\"kw\">unsafe </span>{ value.fmt(fmt) }\n}\n\n<span class=\"kw\">unsafe fn </span>getcount(args: <span class=\"kw-2\">&amp;</span>[rt::Argument&lt;<span class=\"lifetime\">'_</span>&gt;], cnt: <span class=\"kw-2\">&amp;</span>rt::Count) -&gt; <span class=\"prelude-ty\">Option</span>&lt;usize&gt; {\n    <span class=\"kw\">match </span><span class=\"kw-2\">*</span>cnt {\n        rt::Count::Is(n) =&gt; <span class=\"prelude-val\">Some</span>(n),\n        rt::Count::Implied =&gt; <span class=\"prelude-val\">None</span>,\n        rt::Count::Param(i) =&gt; {\n            <span class=\"macro\">debug_assert!</span>(i &lt; args.len());\n            <span class=\"comment\">// SAFETY: cnt and args come from the same Arguments,\n            // which guarantees this index is always within bounds.\n            </span><span class=\"kw\">unsafe </span>{ args.get_unchecked(i).as_usize() }\n        }\n    }\n}\n\n<span class=\"doccomment\">/// Padding after the end of something. Returned by `Formatter::padding`.\n</span><span class=\"attr\">#[must_use = <span class=\"string\">\"don't forget to write the post padding\"</span>]\n</span><span class=\"kw\">pub</span>(<span class=\"kw\">crate</span>) <span class=\"kw\">struct </span>PostPadding {\n    fill: char,\n    padding: usize,\n}\n\n<span class=\"kw\">impl </span>PostPadding {\n    <span class=\"kw\">fn </span>new(fill: char, padding: usize) -&gt; PostPadding {\n        PostPadding { fill, padding }\n    }\n\n    <span class=\"doccomment\">/// Write this post padding.\n    </span><span class=\"kw\">pub</span>(<span class=\"kw\">crate</span>) <span class=\"kw\">fn </span>write(<span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..<span class=\"self\">self</span>.padding {\n            f.buf.write_char(<span class=\"self\">self</span>.fill)<span class=\"question-mark\">?</span>;\n        }\n        <span class=\"prelude-val\">Ok</span>(())\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>&gt; Formatter&lt;<span class=\"lifetime\">'a</span>&gt; {\n    <span class=\"kw\">fn </span>wrap_buf&lt;<span class=\"lifetime\">'b</span>, <span class=\"lifetime\">'c</span>, F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>, wrap: F) -&gt; Formatter&lt;<span class=\"lifetime\">'c</span>&gt;\n    <span class=\"kw\">where\n        </span><span class=\"lifetime\">'b</span>: <span class=\"lifetime\">'c</span>,\n        F: FnOnce(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span>(<span class=\"kw\">dyn </span>Write + <span class=\"lifetime\">'b</span>)) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'c </span><span class=\"kw-2\">mut </span>(<span class=\"kw\">dyn </span>Write + <span class=\"lifetime\">'c</span>),\n    {\n        Formatter {\n            <span class=\"comment\">// We want to change this\n            </span>buf: wrap(<span class=\"self\">self</span>.buf),\n\n            <span class=\"comment\">// And preserve these\n            </span>flags: <span class=\"self\">self</span>.flags,\n            fill: <span class=\"self\">self</span>.fill,\n            align: <span class=\"self\">self</span>.align,\n            width: <span class=\"self\">self</span>.width,\n            precision: <span class=\"self\">self</span>.precision,\n        }\n    }\n\n    <span class=\"comment\">// Helper methods used for padding and processing formatting arguments that\n    // all formatting traits can use.\n\n    </span><span class=\"doccomment\">/// Performs the correct padding for an integer which has already been\n    /// emitted into a str. The str should *not* contain the sign for the\n    /// integer, that will be added by this method.\n    ///\n    /// # Arguments\n    ///\n    /// * is_nonnegative - whether the original integer was either positive or zero.\n    /// * prefix - if the '#' character (Alternate) is provided, this\n    ///   is the prefix to put in front of the number.\n    /// * buf - the byte array that the number has been formatted into\n    ///\n    /// This function will correctly account for the flags provided as well as\n    /// the minimum width. It will not take precision into account.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo { nb: i32 }\n    ///\n    /// impl Foo {\n    ///     fn new(nb: i32) -&gt; Foo {\n    ///         Foo {\n    ///             nb,\n    ///         }\n    ///     }\n    /// }\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         // We need to remove \"-\" from the number output.\n    ///         let tmp = self.nb.abs().to_string();\n    ///\n    ///         formatter.pad_integral(self.nb &gt;= 0, \"Foo \", &amp;tmp)\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{}\", Foo::new(2)), \"2\");\n    /// assert_eq!(format!(\"{}\", Foo::new(-1)), \"-1\");\n    /// assert_eq!(format!(\"{}\", Foo::new(0)), \"0\");\n    /// assert_eq!(format!(\"{:#}\", Foo::new(-1)), \"-Foo 1\");\n    /// assert_eq!(format!(\"{:0&gt;#8}\", Foo::new(-1)), \"00-Foo 1\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>pad_integral(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, is_nonnegative: bool, prefix: <span class=\"kw-2\">&amp;</span>str, buf: <span class=\"kw-2\">&amp;</span>str) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>width = buf.len();\n\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sign = <span class=\"prelude-val\">None</span>;\n        <span class=\"kw\">if </span>!is_nonnegative {\n            sign = <span class=\"prelude-val\">Some</span>(<span class=\"string\">'-'</span>);\n            width += <span class=\"number\">1</span>;\n        } <span class=\"kw\">else if </span><span class=\"self\">self</span>.sign_plus() {\n            sign = <span class=\"prelude-val\">Some</span>(<span class=\"string\">'+'</span>);\n            width += <span class=\"number\">1</span>;\n        }\n\n        <span class=\"kw\">let </span>prefix = <span class=\"kw\">if </span><span class=\"self\">self</span>.alternate() {\n            width += prefix.chars().count();\n            <span class=\"prelude-val\">Some</span>(prefix)\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>};\n\n        <span class=\"comment\">// Writes the sign if it exists, and then the prefix if it was requested\n        </span><span class=\"attr\">#[inline(never)]\n        </span><span class=\"kw\">fn </span>write_prefix(f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;, sign: <span class=\"prelude-ty\">Option</span>&lt;char&gt;, prefix: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(c) = sign {\n                f.buf.write_char(c)<span class=\"question-mark\">?</span>;\n            }\n            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(prefix) = prefix { f.buf.write_str(prefix) } <span class=\"kw\">else </span>{ <span class=\"prelude-val\">Ok</span>(()) }\n        }\n\n        <span class=\"comment\">// The `width` field is more of a `min-width` parameter at this point.\n        </span><span class=\"kw\">match </span><span class=\"self\">self</span>.width {\n            <span class=\"comment\">// If there's no minimum length requirements then we can just\n            // write the bytes.\n            </span><span class=\"prelude-val\">None </span>=&gt; {\n                write_prefix(<span class=\"self\">self</span>, sign, prefix)<span class=\"question-mark\">?</span>;\n                <span class=\"self\">self</span>.buf.write_str(buf)\n            }\n            <span class=\"comment\">// Check if we're over the minimum width, if so then we can also\n            // just write the bytes.\n            </span><span class=\"prelude-val\">Some</span>(min) <span class=\"kw\">if </span>width &gt;= min =&gt; {\n                write_prefix(<span class=\"self\">self</span>, sign, prefix)<span class=\"question-mark\">?</span>;\n                <span class=\"self\">self</span>.buf.write_str(buf)\n            }\n            <span class=\"comment\">// The sign and prefix goes before the padding if the fill character\n            // is zero\n            </span><span class=\"prelude-val\">Some</span>(min) <span class=\"kw\">if </span><span class=\"self\">self</span>.sign_aware_zero_pad() =&gt; {\n                <span class=\"kw\">let </span>old_fill = <span class=\"kw\">crate</span>::mem::replace(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.fill, <span class=\"string\">'0'</span>);\n                <span class=\"kw\">let </span>old_align = <span class=\"kw\">crate</span>::mem::replace(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.align, rt::Alignment::Right);\n                write_prefix(<span class=\"self\">self</span>, sign, prefix)<span class=\"question-mark\">?</span>;\n                <span class=\"kw\">let </span>post_padding = <span class=\"self\">self</span>.padding(min - width, Alignment::Right)<span class=\"question-mark\">?</span>;\n                <span class=\"self\">self</span>.buf.write_str(buf)<span class=\"question-mark\">?</span>;\n                post_padding.write(<span class=\"self\">self</span>)<span class=\"question-mark\">?</span>;\n                <span class=\"self\">self</span>.fill = old_fill;\n                <span class=\"self\">self</span>.align = old_align;\n                <span class=\"prelude-val\">Ok</span>(())\n            }\n            <span class=\"comment\">// Otherwise, the sign and prefix goes after the padding\n            </span><span class=\"prelude-val\">Some</span>(min) =&gt; {\n                <span class=\"kw\">let </span>post_padding = <span class=\"self\">self</span>.padding(min - width, Alignment::Right)<span class=\"question-mark\">?</span>;\n                write_prefix(<span class=\"self\">self</span>, sign, prefix)<span class=\"question-mark\">?</span>;\n                <span class=\"self\">self</span>.buf.write_str(buf)<span class=\"question-mark\">?</span>;\n                post_padding.write(<span class=\"self\">self</span>)\n            }\n        }\n    }\n\n    <span class=\"doccomment\">/// This function takes a string slice and emits it to the internal buffer\n    /// after applying the relevant formatting flags specified. The flags\n    /// recognized for generic strings are:\n    ///\n    /// * width - the minimum width of what to emit\n    /// * fill/align - what to emit and where to emit it if the string\n    ///                provided needs to be padded\n    /// * precision - the maximum length to emit, the string is truncated if it\n    ///               is longer than this length\n    ///\n    /// Notably this function ignores the `flag` parameters.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo;\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         formatter.pad(\"Foo\")\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{Foo:&lt;4}\"), \"Foo \");\n    /// assert_eq!(format!(\"{Foo:0&gt;4}\"), \"0Foo\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>pad(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, s: <span class=\"kw-2\">&amp;</span>str) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"comment\">// Make sure there's a fast path up front\n        </span><span class=\"kw\">if </span><span class=\"self\">self</span>.width.is_none() &amp;&amp; <span class=\"self\">self</span>.precision.is_none() {\n            <span class=\"kw\">return </span><span class=\"self\">self</span>.buf.write_str(s);\n        }\n        <span class=\"comment\">// The `precision` field can be interpreted as a `max-width` for the\n        // string being formatted.\n        </span><span class=\"kw\">let </span>s = <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(max) = <span class=\"self\">self</span>.precision {\n            <span class=\"comment\">// If our string is longer that the precision, then we must have\n            // truncation. However other flags like `fill`, `width` and `align`\n            // must act as always.\n            </span><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>((i, <span class=\"kw\">_</span>)) = s.char_indices().nth(max) {\n                <span class=\"comment\">// LLVM here can't prove that `..i` won't panic `&amp;s[..i]`, but\n                // we know that it can't panic. Use `get` + `unwrap_or` to avoid\n                // `unsafe` and otherwise don't emit any panic-related code\n                // here.\n                </span>s.get(..i).unwrap_or(s)\n            } <span class=\"kw\">else </span>{\n                <span class=\"kw-2\">&amp;</span>s\n            }\n        } <span class=\"kw\">else </span>{\n            <span class=\"kw-2\">&amp;</span>s\n        };\n        <span class=\"comment\">// The `width` field is more of a `min-width` parameter at this point.\n        </span><span class=\"kw\">match </span><span class=\"self\">self</span>.width {\n            <span class=\"comment\">// If we're under the maximum length, and there's no minimum length\n            // requirements, then we can just emit the string\n            </span><span class=\"prelude-val\">None </span>=&gt; <span class=\"self\">self</span>.buf.write_str(s),\n            <span class=\"prelude-val\">Some</span>(width) =&gt; {\n                <span class=\"kw\">let </span>chars_count = s.chars().count();\n                <span class=\"comment\">// If we're under the maximum width, check if we're over the minimum\n                // width, if so it's as easy as just emitting the string.\n                </span><span class=\"kw\">if </span>chars_count &gt;= width {\n                    <span class=\"self\">self</span>.buf.write_str(s)\n                }\n                <span class=\"comment\">// If we're under both the maximum and the minimum width, then fill\n                // up the minimum width with the specified string + some alignment.\n                </span><span class=\"kw\">else </span>{\n                    <span class=\"kw\">let </span>align = Alignment::Left;\n                    <span class=\"kw\">let </span>post_padding = <span class=\"self\">self</span>.padding(width - chars_count, align)<span class=\"question-mark\">?</span>;\n                    <span class=\"self\">self</span>.buf.write_str(s)<span class=\"question-mark\">?</span>;\n                    post_padding.write(<span class=\"self\">self</span>)\n                }\n            }\n        }\n    }\n\n    <span class=\"doccomment\">/// Write the pre-padding and return the unwritten post-padding. Callers are\n    /// responsible for ensuring post-padding is written after the thing that is\n    /// being padded.\n    </span><span class=\"kw\">pub</span>(<span class=\"kw\">crate</span>) <span class=\"kw\">fn </span>padding(\n        <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>,\n        padding: usize,\n        default: Alignment,\n    ) -&gt; result::Result&lt;PostPadding, Error&gt; {\n        <span class=\"kw\">let </span>align = <span class=\"kw\">match </span><span class=\"self\">self</span>.align {\n            rt::Alignment::Unknown =&gt; default,\n            rt::Alignment::Left =&gt; Alignment::Left,\n            rt::Alignment::Right =&gt; Alignment::Right,\n            rt::Alignment::Center =&gt; Alignment::Center,\n        };\n\n        <span class=\"kw\">let </span>(pre_pad, post_pad) = <span class=\"kw\">match </span>align {\n            Alignment::Left =&gt; (<span class=\"number\">0</span>, padding),\n            Alignment::Right =&gt; (padding, <span class=\"number\">0</span>),\n            Alignment::Center =&gt; (padding / <span class=\"number\">2</span>, (padding + <span class=\"number\">1</span>) / <span class=\"number\">2</span>),\n        };\n\n        <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..pre_pad {\n            <span class=\"self\">self</span>.buf.write_char(<span class=\"self\">self</span>.fill)<span class=\"question-mark\">?</span>;\n        }\n\n        <span class=\"prelude-val\">Ok</span>(PostPadding::new(<span class=\"self\">self</span>.fill, post_pad))\n    }\n\n    <span class=\"doccomment\">/// Takes the formatted parts and applies the padding.\n    /// Assumes that the caller already has rendered the parts with required precision,\n    /// so that `self.precision` can be ignored.\n    ///\n    /// # Safety\n    ///\n    /// Any `numfmt::Part::Copy` parts in `formatted` must contain valid UTF-8.\n    </span><span class=\"kw\">unsafe fn </span>pad_formatted_parts(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, formatted: <span class=\"kw-2\">&amp;</span>numfmt::Formatted&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span>width) = <span class=\"self\">self</span>.width {\n            <span class=\"comment\">// for the sign-aware zero padding, we render the sign first and\n            // behave as if we had no sign from the beginning.\n            </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>formatted = formatted.clone();\n            <span class=\"kw\">let </span>old_fill = <span class=\"self\">self</span>.fill;\n            <span class=\"kw\">let </span>old_align = <span class=\"self\">self</span>.align;\n            <span class=\"kw\">if </span><span class=\"self\">self</span>.sign_aware_zero_pad() {\n                <span class=\"comment\">// a sign always goes first\n                </span><span class=\"kw\">let </span>sign = formatted.sign;\n                <span class=\"self\">self</span>.buf.write_str(sign)<span class=\"question-mark\">?</span>;\n\n                <span class=\"comment\">// remove the sign from the formatted parts\n                </span>formatted.sign = <span class=\"string\">\"\"</span>;\n                width = width.saturating_sub(sign.len());\n                <span class=\"self\">self</span>.fill = <span class=\"string\">'0'</span>;\n                <span class=\"self\">self</span>.align = rt::Alignment::Right;\n            }\n\n            <span class=\"comment\">// remaining parts go through the ordinary padding process.\n            </span><span class=\"kw\">let </span>len = formatted.len();\n            <span class=\"kw\">let </span>ret = <span class=\"kw\">if </span>width &lt;= len {\n                <span class=\"comment\">// no padding\n                // SAFETY: Per the precondition.\n                </span><span class=\"kw\">unsafe </span>{ <span class=\"self\">self</span>.write_formatted_parts(<span class=\"kw-2\">&amp;</span>formatted) }\n            } <span class=\"kw\">else </span>{\n                <span class=\"kw\">let </span>post_padding = <span class=\"self\">self</span>.padding(width - len, Alignment::Right)<span class=\"question-mark\">?</span>;\n                <span class=\"comment\">// SAFETY: Per the precondition.\n                </span><span class=\"kw\">unsafe </span>{\n                    <span class=\"self\">self</span>.write_formatted_parts(<span class=\"kw-2\">&amp;</span>formatted)<span class=\"question-mark\">?</span>;\n                }\n                post_padding.write(<span class=\"self\">self</span>)\n            };\n            <span class=\"self\">self</span>.fill = old_fill;\n            <span class=\"self\">self</span>.align = old_align;\n            ret\n        } <span class=\"kw\">else </span>{\n            <span class=\"comment\">// this is the common case and we take a shortcut\n            // SAFETY: Per the precondition.\n            </span><span class=\"kw\">unsafe </span>{ <span class=\"self\">self</span>.write_formatted_parts(formatted) }\n        }\n    }\n\n    <span class=\"doccomment\">/// # Safety\n    ///\n    /// Any `numfmt::Part::Copy` parts in `formatted` must contain valid UTF-8.\n    </span><span class=\"kw\">unsafe fn </span>write_formatted_parts(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, formatted: <span class=\"kw-2\">&amp;</span>numfmt::Formatted&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">unsafe fn </span>write_bytes(buf: <span class=\"kw-2\">&amp;mut </span><span class=\"kw\">dyn </span>Write, s: <span class=\"kw-2\">&amp;</span>[u8]) -&gt; <span class=\"prelude-ty\">Result </span>{\n            <span class=\"comment\">// SAFETY: This is used for `numfmt::Part::Num` and `numfmt::Part::Copy`.\n            // It's safe to use for `numfmt::Part::Num` since every char `c` is between\n            // `b'0'` and `b'9'`, which means `s` is valid UTF-8. It's safe to use for\n            // `numfmt::Part::Copy` due to this function's precondition.\n            </span>buf.write_str(<span class=\"kw\">unsafe </span>{ str::from_utf8_unchecked(s) })\n        }\n\n        <span class=\"kw\">if </span>!formatted.sign.is_empty() {\n            <span class=\"self\">self</span>.buf.write_str(formatted.sign)<span class=\"question-mark\">?</span>;\n        }\n        <span class=\"kw\">for </span>part <span class=\"kw\">in </span>formatted.parts {\n            <span class=\"kw\">match </span><span class=\"kw-2\">*</span>part {\n                numfmt::Part::Zero(<span class=\"kw-2\">mut </span>nzeroes) =&gt; {\n                    <span class=\"kw\">const </span>ZEROES: <span class=\"kw-2\">&amp;</span>str = <span class=\"comment\">// 64 zeroes\n                        </span><span class=\"string\">\"0000000000000000000000000000000000000000000000000000000000000000\"</span>;\n                    <span class=\"kw\">while </span>nzeroes &gt; ZEROES.len() {\n                        <span class=\"self\">self</span>.buf.write_str(ZEROES)<span class=\"question-mark\">?</span>;\n                        nzeroes -= ZEROES.len();\n                    }\n                    <span class=\"kw\">if </span>nzeroes &gt; <span class=\"number\">0 </span>{\n                        <span class=\"self\">self</span>.buf.write_str(<span class=\"kw-2\">&amp;</span>ZEROES[..nzeroes])<span class=\"question-mark\">?</span>;\n                    }\n                }\n                numfmt::Part::Num(<span class=\"kw-2\">mut </span>v) =&gt; {\n                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = [<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n                    <span class=\"kw\">let </span>len = part.len();\n                    <span class=\"kw\">for </span>c <span class=\"kw\">in </span>s[..len].iter_mut().rev() {\n                        <span class=\"kw-2\">*</span>c = <span class=\"string\">b'0' </span>+ (v % <span class=\"number\">10</span>) <span class=\"kw\">as </span>u8;\n                        v /= <span class=\"number\">10</span>;\n                    }\n                    <span class=\"comment\">// SAFETY: Per the precondition.\n                    </span><span class=\"kw\">unsafe </span>{\n                        write_bytes(<span class=\"self\">self</span>.buf, <span class=\"kw-2\">&amp;</span>s[..len])<span class=\"question-mark\">?</span>;\n                    }\n                }\n                <span class=\"comment\">// SAFETY: Per the precondition.\n                </span>numfmt::Part::Copy(buf) =&gt; <span class=\"kw\">unsafe </span>{\n                    write_bytes(<span class=\"self\">self</span>.buf, buf)<span class=\"question-mark\">?</span>;\n                },\n            }\n        }\n        <span class=\"prelude-val\">Ok</span>(())\n    }\n\n    <span class=\"doccomment\">/// Writes some data to the underlying buffer contained within this\n    /// formatter.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo;\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         formatter.write_str(\"Foo\")\n    ///         // This is equivalent to:\n    ///         // write!(formatter, \"Foo\")\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{Foo}\"), \"Foo\");\n    /// assert_eq!(format!(\"{Foo:0&gt;8}\"), \"Foo\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>write_str(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, data: <span class=\"kw-2\">&amp;</span>str) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"self\">self</span>.buf.write_str(data)\n    }\n\n    <span class=\"doccomment\">/// Writes some formatted information into this instance.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo(i32);\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         formatter.write_fmt(format_args!(\"Foo {}\", self.0))\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{}\", Foo(-1)), \"Foo -1\");\n    /// assert_eq!(format!(\"{:0&gt;8}\", Foo(2)), \"Foo 2\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub fn </span>write_fmt(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, fmt: Arguments&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(s) = fmt.as_statically_known_str() {\n            <span class=\"self\">self</span>.buf.write_str(s)\n        } <span class=\"kw\">else </span>{\n            write(<span class=\"self\">self</span>.buf, fmt)\n        }\n    }\n\n    <span class=\"doccomment\">/// Flags for formatting\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[deprecated(\n        since = <span class=\"string\">\"1.24.0\"</span>,\n        note = <span class=\"string\">\"use the `sign_plus`, `sign_minus`, `alternate`, \\\n                or `sign_aware_zero_pad` methods instead\"\n    </span>)]\n    </span><span class=\"kw\">pub fn </span>flags(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u32 {\n        <span class=\"self\">self</span>.flags\n    }\n\n    <span class=\"doccomment\">/// Character used as 'fill' whenever there is alignment.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo;\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         let c = formatter.fill();\n    ///         if let Some(width) = formatter.width() {\n    ///             for _ in 0..width {\n    ///                 write!(formatter, \"{c}\")?;\n    ///             }\n    ///             Ok(())\n    ///         } else {\n    ///             write!(formatter, \"{c}\")\n    ///         }\n    ///     }\n    /// }\n    ///\n    /// // We set alignment to the right with \"&gt;\".\n    /// assert_eq!(format!(\"{Foo:G&gt;3}\"), \"GGG\");\n    /// assert_eq!(format!(\"{Foo:t&gt;6}\"), \"tttttt\");\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"fmt_flags\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>fill(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; char {\n        <span class=\"self\">self</span>.fill\n    }\n\n    <span class=\"doccomment\">/// Flag indicating what form of alignment was requested.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt::{self, Alignment};\n    ///\n    /// struct Foo;\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         let s = if let Some(s) = formatter.align() {\n    ///             match s {\n    ///                 Alignment::Left    =&gt; \"left\",\n    ///                 Alignment::Right   =&gt; \"right\",\n    ///                 Alignment::Center  =&gt; \"center\",\n    ///             }\n    ///         } else {\n    ///             \"into the void\"\n    ///         };\n    ///         write!(formatter, \"{s}\")\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{Foo:&lt;}\"), \"left\");\n    /// assert_eq!(format!(\"{Foo:&gt;}\"), \"right\");\n    /// assert_eq!(format!(\"{Foo:^}\"), \"center\");\n    /// assert_eq!(format!(\"{Foo}\"), \"into the void\");\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"fmt_flags_align\"</span>, since = <span class=\"string\">\"1.28.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>align(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Alignment&gt; {\n        <span class=\"kw\">match </span><span class=\"self\">self</span>.align {\n            rt::Alignment::Left =&gt; <span class=\"prelude-val\">Some</span>(Alignment::Left),\n            rt::Alignment::Right =&gt; <span class=\"prelude-val\">Some</span>(Alignment::Right),\n            rt::Alignment::Center =&gt; <span class=\"prelude-val\">Some</span>(Alignment::Center),\n            rt::Alignment::Unknown =&gt; <span class=\"prelude-val\">None</span>,\n        }\n    }\n\n    <span class=\"doccomment\">/// Optionally specified integer width that the output should be.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo(i32);\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         if let Some(width) = formatter.width() {\n    ///             // If we received a width, we use it\n    ///             write!(formatter, \"{:width$}\", format!(\"Foo({})\", self.0), width = width)\n    ///         } else {\n    ///             // Otherwise we do nothing special\n    ///             write!(formatter, \"Foo({})\", self.0)\n    ///         }\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{:10}\", Foo(23)), \"Foo(23)   \");\n    /// assert_eq!(format!(\"{}\", Foo(23)), \"Foo(23)\");\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"fmt_flags\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>width(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;usize&gt; {\n        <span class=\"self\">self</span>.width\n    }\n\n    <span class=\"doccomment\">/// Optionally specified precision for numeric types. Alternatively, the\n    /// maximum width for string types.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo(f32);\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         if let Some(precision) = formatter.precision() {\n    ///             // If we received a precision, we use it.\n    ///             write!(formatter, \"Foo({1:.*})\", precision, self.0)\n    ///         } else {\n    ///             // Otherwise we default to 2.\n    ///             write!(formatter, \"Foo({:.2})\", self.0)\n    ///         }\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{:.4}\", Foo(23.2)), \"Foo(23.2000)\");\n    /// assert_eq!(format!(\"{}\", Foo(23.2)), \"Foo(23.20)\");\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"fmt_flags\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>precision(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;usize&gt; {\n        <span class=\"self\">self</span>.precision\n    }\n\n    <span class=\"doccomment\">/// Determines if the `+` flag was specified.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo(i32);\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         if formatter.sign_plus() {\n    ///             write!(formatter,\n    ///                    \"Foo({}{})\",\n    ///                    if self.0 &lt; 0 { '-' } else { '+' },\n    ///                    self.0.abs())\n    ///         } else {\n    ///             write!(formatter, \"Foo({})\", self.0)\n    ///         }\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{:+}\", Foo(23)), \"Foo(+23)\");\n    /// assert_eq!(format!(\"{:+}\", Foo(-23)), \"Foo(-23)\");\n    /// assert_eq!(format!(\"{}\", Foo(23)), \"Foo(23)\");\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"fmt_flags\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>sign_plus(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.flags &amp; (<span class=\"number\">1 </span>&lt;&lt; rt::Flag::SignPlus <span class=\"kw\">as </span>u32) != <span class=\"number\">0\n    </span>}\n\n    <span class=\"doccomment\">/// Determines if the `-` flag was specified.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo(i32);\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         if formatter.sign_minus() {\n    ///             // You want a minus sign? Have one!\n    ///             write!(formatter, \"-Foo({})\", self.0)\n    ///         } else {\n    ///             write!(formatter, \"Foo({})\", self.0)\n    ///         }\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{:-}\", Foo(23)), \"-Foo(23)\");\n    /// assert_eq!(format!(\"{}\", Foo(23)), \"Foo(23)\");\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"fmt_flags\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>sign_minus(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.flags &amp; (<span class=\"number\">1 </span>&lt;&lt; rt::Flag::SignMinus <span class=\"kw\">as </span>u32) != <span class=\"number\">0\n    </span>}\n\n    <span class=\"doccomment\">/// Determines if the `#` flag was specified.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo(i32);\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         if formatter.alternate() {\n    ///             write!(formatter, \"Foo({})\", self.0)\n    ///         } else {\n    ///             write!(formatter, \"{}\", self.0)\n    ///         }\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{:#}\", Foo(23)), \"Foo(23)\");\n    /// assert_eq!(format!(\"{}\", Foo(23)), \"23\");\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"fmt_flags\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>alternate(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.flags &amp; (<span class=\"number\">1 </span>&lt;&lt; rt::Flag::Alternate <span class=\"kw\">as </span>u32) != <span class=\"number\">0\n    </span>}\n\n    <span class=\"doccomment\">/// Determines if the `0` flag was specified.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// struct Foo(i32);\n    ///\n    /// impl fmt::Display for Foo {\n    ///     fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         assert!(formatter.sign_aware_zero_pad());\n    ///         assert_eq!(formatter.width(), Some(4));\n    ///         // We ignore the formatter's options.\n    ///         write!(formatter, \"{}\", self.0)\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{:04}\", Foo(23)), \"23\");\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"fmt_flags\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>sign_aware_zero_pad(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.flags &amp; (<span class=\"number\">1 </span>&lt;&lt; rt::Flag::SignAwareZeroPad <span class=\"kw\">as </span>u32) != <span class=\"number\">0\n    </span>}\n\n    <span class=\"comment\">// FIXME: Decide what public API we want for these two flags.\n    // https://github.com/rust-lang/rust/issues/48584\n    </span><span class=\"kw\">fn </span>debug_lower_hex(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.flags &amp; (<span class=\"number\">1 </span>&lt;&lt; rt::Flag::DebugLowerHex <span class=\"kw\">as </span>u32) != <span class=\"number\">0\n    </span>}\n\n    <span class=\"kw\">fn </span>debug_upper_hex(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.flags &amp; (<span class=\"number\">1 </span>&lt;&lt; rt::Flag::DebugUpperHex <span class=\"kw\">as </span>u32) != <span class=\"number\">0\n    </span>}\n\n    <span class=\"doccomment\">/// Creates a [`DebugStruct`] builder designed to assist with creation of\n    /// [`fmt::Debug`] implementations for structs.\n    ///\n    /// [`fmt::Debug`]: self::Debug\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use std::fmt;\n    /// use std::net::Ipv4Addr;\n    ///\n    /// struct Foo {\n    ///     bar: i32,\n    ///     baz: String,\n    ///     addr: Ipv4Addr,\n    /// }\n    ///\n    /// impl fmt::Debug for Foo {\n    ///     fn fmt(&amp;self, fmt: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         fmt.debug_struct(\"Foo\")\n    ///             .field(\"bar\", &amp;self.bar)\n    ///             .field(\"baz\", &amp;self.baz)\n    ///             .field(\"addr\", &amp;format_args!(\"{}\", self.addr))\n    ///             .finish()\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(\n    ///     \"Foo { bar: 10, baz: \\\"Hello World\\\", addr: 127.0.0.1 }\",\n    ///     format!(\"{:?}\", Foo {\n    ///         bar: 10,\n    ///         baz: \"Hello World\".to_string(),\n    ///         addr: Ipv4Addr::new(127, 0, 0, 1),\n    ///     })\n    /// );\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"debug_builders\"</span>, since = <span class=\"string\">\"1.2.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_struct&lt;<span class=\"lifetime\">'b</span>&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>, name: <span class=\"kw-2\">&amp;</span>str) -&gt; DebugStruct&lt;<span class=\"lifetime\">'b</span>, <span class=\"lifetime\">'a</span>&gt; {\n        builders::debug_struct_new(<span class=\"self\">self</span>, name)\n    }\n\n    <span class=\"doccomment\">/// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_struct_fields_finish` is more general, but this is faster for 1 field.\n    </span><span class=\"attr\">#[doc(hidden)]\n    #[unstable(feature = <span class=\"string\">\"fmt_helpers_for_derive\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_struct_field1_finish&lt;<span class=\"lifetime\">'b</span>&gt;(\n        <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>,\n        name: <span class=\"kw-2\">&amp;</span>str,\n        name1: <span class=\"kw-2\">&amp;</span>str,\n        value1: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n    ) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>builder = builders::debug_struct_new(<span class=\"self\">self</span>, name);\n        builder.field(name1, value1);\n        builder.finish()\n    }\n\n    <span class=\"doccomment\">/// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_struct_fields_finish` is more general, but this is faster for 2 fields.\n    </span><span class=\"attr\">#[doc(hidden)]\n    #[unstable(feature = <span class=\"string\">\"fmt_helpers_for_derive\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_struct_field2_finish&lt;<span class=\"lifetime\">'b</span>&gt;(\n        <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>,\n        name: <span class=\"kw-2\">&amp;</span>str,\n        name1: <span class=\"kw-2\">&amp;</span>str,\n        value1: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        name2: <span class=\"kw-2\">&amp;</span>str,\n        value2: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n    ) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>builder = builders::debug_struct_new(<span class=\"self\">self</span>, name);\n        builder.field(name1, value1);\n        builder.field(name2, value2);\n        builder.finish()\n    }\n\n    <span class=\"doccomment\">/// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_struct_fields_finish` is more general, but this is faster for 3 fields.\n    </span><span class=\"attr\">#[doc(hidden)]\n    #[unstable(feature = <span class=\"string\">\"fmt_helpers_for_derive\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_struct_field3_finish&lt;<span class=\"lifetime\">'b</span>&gt;(\n        <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>,\n        name: <span class=\"kw-2\">&amp;</span>str,\n        name1: <span class=\"kw-2\">&amp;</span>str,\n        value1: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        name2: <span class=\"kw-2\">&amp;</span>str,\n        value2: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        name3: <span class=\"kw-2\">&amp;</span>str,\n        value3: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n    ) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>builder = builders::debug_struct_new(<span class=\"self\">self</span>, name);\n        builder.field(name1, value1);\n        builder.field(name2, value2);\n        builder.field(name3, value3);\n        builder.finish()\n    }\n\n    <span class=\"doccomment\">/// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_struct_fields_finish` is more general, but this is faster for 4 fields.\n    </span><span class=\"attr\">#[doc(hidden)]\n    #[unstable(feature = <span class=\"string\">\"fmt_helpers_for_derive\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_struct_field4_finish&lt;<span class=\"lifetime\">'b</span>&gt;(\n        <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>,\n        name: <span class=\"kw-2\">&amp;</span>str,\n        name1: <span class=\"kw-2\">&amp;</span>str,\n        value1: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        name2: <span class=\"kw-2\">&amp;</span>str,\n        value2: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        name3: <span class=\"kw-2\">&amp;</span>str,\n        value3: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        name4: <span class=\"kw-2\">&amp;</span>str,\n        value4: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n    ) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>builder = builders::debug_struct_new(<span class=\"self\">self</span>, name);\n        builder.field(name1, value1);\n        builder.field(name2, value2);\n        builder.field(name3, value3);\n        builder.field(name4, value4);\n        builder.finish()\n    }\n\n    <span class=\"doccomment\">/// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_struct_fields_finish` is more general, but this is faster for 5 fields.\n    </span><span class=\"attr\">#[doc(hidden)]\n    #[unstable(feature = <span class=\"string\">\"fmt_helpers_for_derive\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_struct_field5_finish&lt;<span class=\"lifetime\">'b</span>&gt;(\n        <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>,\n        name: <span class=\"kw-2\">&amp;</span>str,\n        name1: <span class=\"kw-2\">&amp;</span>str,\n        value1: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        name2: <span class=\"kw-2\">&amp;</span>str,\n        value2: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        name3: <span class=\"kw-2\">&amp;</span>str,\n        value3: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        name4: <span class=\"kw-2\">&amp;</span>str,\n        value4: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        name5: <span class=\"kw-2\">&amp;</span>str,\n        value5: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n    ) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>builder = builders::debug_struct_new(<span class=\"self\">self</span>, name);\n        builder.field(name1, value1);\n        builder.field(name2, value2);\n        builder.field(name3, value3);\n        builder.field(name4, value4);\n        builder.field(name5, value5);\n        builder.finish()\n    }\n\n    <span class=\"doccomment\">/// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// For the cases not covered by `debug_struct_field[12345]_finish`.\n    </span><span class=\"attr\">#[doc(hidden)]\n    #[unstable(feature = <span class=\"string\">\"fmt_helpers_for_derive\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_struct_fields_finish&lt;<span class=\"lifetime\">'b</span>&gt;(\n        <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>,\n        name: <span class=\"kw-2\">&amp;</span>str,\n        names: <span class=\"kw-2\">&amp;</span>[<span class=\"kw-2\">&amp;</span>str],\n        values: <span class=\"kw-2\">&amp;</span>[<span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug],\n    ) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"macro\">assert_eq!</span>(names.len(), values.len());\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>builder = builders::debug_struct_new(<span class=\"self\">self</span>, name);\n        <span class=\"kw\">for </span>(name, value) <span class=\"kw\">in </span>iter::zip(names, values) {\n            builder.field(name, value);\n        }\n        builder.finish()\n    }\n\n    <span class=\"doccomment\">/// Creates a `DebugTuple` builder designed to assist with creation of\n    /// `fmt::Debug` implementations for tuple structs.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use std::fmt;\n    /// use std::marker::PhantomData;\n    ///\n    /// struct Foo&lt;T&gt;(i32, String, PhantomData&lt;T&gt;);\n    ///\n    /// impl&lt;T&gt; fmt::Debug for Foo&lt;T&gt; {\n    ///     fn fmt(&amp;self, fmt: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         fmt.debug_tuple(\"Foo\")\n    ///             .field(&amp;self.0)\n    ///             .field(&amp;self.1)\n    ///             .field(&amp;format_args!(\"_\"))\n    ///             .finish()\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(\n    ///     \"Foo(10, \\\"Hello\\\", _)\",\n    ///     format!(\"{:?}\", Foo(10, \"Hello\".to_string(), PhantomData::&lt;u8&gt;))\n    /// );\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"debug_builders\"</span>, since = <span class=\"string\">\"1.2.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_tuple&lt;<span class=\"lifetime\">'b</span>&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>, name: <span class=\"kw-2\">&amp;</span>str) -&gt; DebugTuple&lt;<span class=\"lifetime\">'b</span>, <span class=\"lifetime\">'a</span>&gt; {\n        builders::debug_tuple_new(<span class=\"self\">self</span>, name)\n    }\n\n    <span class=\"doccomment\">/// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_tuple_fields_finish` is more general, but this is faster for 1 field.\n    </span><span class=\"attr\">#[doc(hidden)]\n    #[unstable(feature = <span class=\"string\">\"fmt_helpers_for_derive\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_tuple_field1_finish&lt;<span class=\"lifetime\">'b</span>&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>, name: <span class=\"kw-2\">&amp;</span>str, value1: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>builder = builders::debug_tuple_new(<span class=\"self\">self</span>, name);\n        builder.field(value1);\n        builder.finish()\n    }\n\n    <span class=\"doccomment\">/// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_tuple_fields_finish` is more general, but this is faster for 2 fields.\n    </span><span class=\"attr\">#[doc(hidden)]\n    #[unstable(feature = <span class=\"string\">\"fmt_helpers_for_derive\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_tuple_field2_finish&lt;<span class=\"lifetime\">'b</span>&gt;(\n        <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>,\n        name: <span class=\"kw-2\">&amp;</span>str,\n        value1: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        value2: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n    ) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>builder = builders::debug_tuple_new(<span class=\"self\">self</span>, name);\n        builder.field(value1);\n        builder.field(value2);\n        builder.finish()\n    }\n\n    <span class=\"doccomment\">/// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_tuple_fields_finish` is more general, but this is faster for 3 fields.\n    </span><span class=\"attr\">#[doc(hidden)]\n    #[unstable(feature = <span class=\"string\">\"fmt_helpers_for_derive\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_tuple_field3_finish&lt;<span class=\"lifetime\">'b</span>&gt;(\n        <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>,\n        name: <span class=\"kw-2\">&amp;</span>str,\n        value1: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        value2: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        value3: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n    ) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>builder = builders::debug_tuple_new(<span class=\"self\">self</span>, name);\n        builder.field(value1);\n        builder.field(value2);\n        builder.field(value3);\n        builder.finish()\n    }\n\n    <span class=\"doccomment\">/// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_tuple_fields_finish` is more general, but this is faster for 4 fields.\n    </span><span class=\"attr\">#[doc(hidden)]\n    #[unstable(feature = <span class=\"string\">\"fmt_helpers_for_derive\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_tuple_field4_finish&lt;<span class=\"lifetime\">'b</span>&gt;(\n        <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>,\n        name: <span class=\"kw-2\">&amp;</span>str,\n        value1: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        value2: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        value3: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        value4: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n    ) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>builder = builders::debug_tuple_new(<span class=\"self\">self</span>, name);\n        builder.field(value1);\n        builder.field(value2);\n        builder.field(value3);\n        builder.field(value4);\n        builder.finish()\n    }\n\n    <span class=\"doccomment\">/// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// `debug_tuple_fields_finish` is more general, but this is faster for 5 fields.\n    </span><span class=\"attr\">#[doc(hidden)]\n    #[unstable(feature = <span class=\"string\">\"fmt_helpers_for_derive\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_tuple_field5_finish&lt;<span class=\"lifetime\">'b</span>&gt;(\n        <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>,\n        name: <span class=\"kw-2\">&amp;</span>str,\n        value1: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        value2: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        value3: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        value4: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n        value5: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug,\n    ) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>builder = builders::debug_tuple_new(<span class=\"self\">self</span>, name);\n        builder.field(value1);\n        builder.field(value2);\n        builder.field(value3);\n        builder.field(value4);\n        builder.field(value5);\n        builder.finish()\n    }\n\n    <span class=\"doccomment\">/// Used to shrink `derive(Debug)` code, for faster compilation and smaller binaries.\n    /// For the cases not covered by `debug_tuple_field[12345]_finish`.\n    </span><span class=\"attr\">#[doc(hidden)]\n    #[unstable(feature = <span class=\"string\">\"fmt_helpers_for_derive\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_tuple_fields_finish&lt;<span class=\"lifetime\">'b</span>&gt;(\n        <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>,\n        name: <span class=\"kw-2\">&amp;</span>str,\n        values: <span class=\"kw-2\">&amp;</span>[<span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Debug],\n    ) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>builder = builders::debug_tuple_new(<span class=\"self\">self</span>, name);\n        <span class=\"kw\">for </span>value <span class=\"kw\">in </span>values {\n            builder.field(value);\n        }\n        builder.finish()\n    }\n\n    <span class=\"doccomment\">/// Creates a `DebugList` builder designed to assist with creation of\n    /// `fmt::Debug` implementations for list-like structures.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use std::fmt;\n    ///\n    /// struct Foo(Vec&lt;i32&gt;);\n    ///\n    /// impl fmt::Debug for Foo {\n    ///     fn fmt(&amp;self, fmt: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         fmt.debug_list().entries(self.0.iter()).finish()\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{:?}\", Foo(vec![10, 11])), \"[10, 11]\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"debug_builders\"</span>, since = <span class=\"string\">\"1.2.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_list&lt;<span class=\"lifetime\">'b</span>&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; DebugList&lt;<span class=\"lifetime\">'b</span>, <span class=\"lifetime\">'a</span>&gt; {\n        builders::debug_list_new(<span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// Creates a `DebugSet` builder designed to assist with creation of\n    /// `fmt::Debug` implementations for set-like structures.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use std::fmt;\n    ///\n    /// struct Foo(Vec&lt;i32&gt;);\n    ///\n    /// impl fmt::Debug for Foo {\n    ///     fn fmt(&amp;self, fmt: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         fmt.debug_set().entries(self.0.iter()).finish()\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(format!(\"{:?}\", Foo(vec![10, 11])), \"{10, 11}\");\n    /// ```\n    ///\n    /// [`format_args!`]: crate::format_args\n    ///\n    /// In this more complex example, we use [`format_args!`] and `.debug_set()`\n    /// to build a list of match arms:\n    ///\n    /// ```rust\n    /// use std::fmt;\n    ///\n    /// struct Arm&lt;'a, L, R&gt;(&amp;'a (L, R));\n    /// struct Table&lt;'a, K, V&gt;(&amp;'a [(K, V)], V);\n    ///\n    /// impl&lt;'a, L, R&gt; fmt::Debug for Arm&lt;'a, L, R&gt;\n    /// where\n    ///     L: 'a + fmt::Debug, R: 'a + fmt::Debug\n    /// {\n    ///     fn fmt(&amp;self, fmt: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         L::fmt(&amp;(self.0).0, fmt)?;\n    ///         fmt.write_str(\" =&gt; \")?;\n    ///         R::fmt(&amp;(self.0).1, fmt)\n    ///     }\n    /// }\n    ///\n    /// impl&lt;'a, K, V&gt; fmt::Debug for Table&lt;'a, K, V&gt;\n    /// where\n    ///     K: 'a + fmt::Debug, V: 'a + fmt::Debug\n    /// {\n    ///     fn fmt(&amp;self, fmt: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         fmt.debug_set()\n    ///         .entries(self.0.iter().map(Arm))\n    ///         .entry(&amp;Arm(&amp;(format_args!(\"_\"), &amp;self.1)))\n    ///         .finish()\n    ///     }\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"debug_builders\"</span>, since = <span class=\"string\">\"1.2.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_set&lt;<span class=\"lifetime\">'b</span>&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; DebugSet&lt;<span class=\"lifetime\">'b</span>, <span class=\"lifetime\">'a</span>&gt; {\n        builders::debug_set_new(<span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// Creates a `DebugMap` builder designed to assist with creation of\n    /// `fmt::Debug` implementations for map-like structures.\n    ///\n    /// # Examples\n    ///\n    /// ```rust\n    /// use std::fmt;\n    ///\n    /// struct Foo(Vec&lt;(String, i32)&gt;);\n    ///\n    /// impl fmt::Debug for Foo {\n    ///     fn fmt(&amp;self, fmt: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n    ///         fmt.debug_map().entries(self.0.iter().map(|&amp;(ref k, ref v)| (k, v))).finish()\n    ///     }\n    /// }\n    ///\n    /// assert_eq!(\n    ///     format!(\"{:?}\",  Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n    ///     r#\"{\"A\": 10, \"B\": 11}\"#\n    ///  );\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"debug_builders\"</span>, since = <span class=\"string\">\"1.2.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>debug_map&lt;<span class=\"lifetime\">'b</span>&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span><span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; DebugMap&lt;<span class=\"lifetime\">'b</span>, <span class=\"lifetime\">'a</span>&gt; {\n        builders::debug_map_new(<span class=\"self\">self</span>)\n    }\n}\n\n<span class=\"attr\">#[stable(since = <span class=\"string\">\"1.2.0\"</span>, feature = <span class=\"string\">\"formatter_write\"</span>)]\n</span><span class=\"kw\">impl </span>Write <span class=\"kw\">for </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt; {\n    <span class=\"kw\">fn </span>write_str(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, s: <span class=\"kw-2\">&amp;</span>str) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"self\">self</span>.buf.write_str(s)\n    }\n\n    <span class=\"kw\">fn </span>write_char(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, c: char) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"self\">self</span>.buf.write_char(c)\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>write_fmt(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, args: Arguments&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(s) = args.as_statically_known_str() {\n            <span class=\"self\">self</span>.buf.write_str(s)\n        } <span class=\"kw\">else </span>{\n            write(<span class=\"self\">self</span>.buf, args)\n        }\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Display <span class=\"kw\">for </span>Error {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        Display::fmt(<span class=\"string\">\"an error occurred when formatting an argument\"</span>, f)\n    }\n}\n\n<span class=\"comment\">// Implementations of the core formatting traits\n\n</span><span class=\"macro\">macro_rules!</span> fmt_refs {\n    ($(<span class=\"macro-nonterminal\">$tr</span>:ident),<span class=\"kw-2\">*</span>) =&gt; {\n        $(\n        <span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n        </span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized + <span class=\"macro-nonterminal\">$tr</span>&gt; <span class=\"macro-nonterminal\">$tr </span><span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>T {\n            <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{ <span class=\"macro-nonterminal\">$tr::fmt</span>(<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>, f) }\n        }\n        <span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n        </span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized + <span class=\"macro-nonterminal\">$tr</span>&gt; <span class=\"macro-nonterminal\">$tr </span><span class=\"kw\">for </span><span class=\"kw-2\">&amp;mut </span>T {\n            <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{ <span class=\"macro-nonterminal\">$tr::fmt</span>(<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>, f) }\n        }\n        )*\n    }\n}\n\n<span class=\"macro\">fmt_refs!</span> { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp }\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"never_type\"</span>, issue = <span class=\"string\">\"35121\"</span>)]\n</span><span class=\"kw\">impl </span>Debug <span class=\"kw\">for </span>! {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, <span class=\"kw\">_</span>: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw-2\">*</span><span class=\"self\">self\n    </span>}\n}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"never_type\"</span>, issue = <span class=\"string\">\"35121\"</span>)]\n</span><span class=\"kw\">impl </span>Display <span class=\"kw\">for </span>! {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, <span class=\"kw\">_</span>: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw-2\">*</span><span class=\"self\">self\n    </span>}\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Debug <span class=\"kw\">for </span>bool {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        Display::fmt(<span class=\"self\">self</span>, f)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Display <span class=\"kw\">for </span>bool {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        Display::fmt(<span class=\"kw\">if </span><span class=\"kw-2\">*</span><span class=\"self\">self </span>{ <span class=\"string\">\"true\" </span>} <span class=\"kw\">else </span>{ <span class=\"string\">\"false\" </span>}, f)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Debug <span class=\"kw\">for </span>str {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        f.write_char(<span class=\"string\">'\"'</span>)<span class=\"question-mark\">?</span>;\n\n        <span class=\"comment\">// substring we know is printable\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>printable_range = <span class=\"number\">0</span>..<span class=\"number\">0</span>;\n\n        <span class=\"kw\">fn </span>needs_escape(b: u8) -&gt; bool {\n            b &gt; <span class=\"number\">0x7E </span>|| b &lt; <span class=\"number\">0x20 </span>|| b == <span class=\"string\">b'\\\\' </span>|| b == <span class=\"string\">b'\"'\n        </span>}\n\n        <span class=\"comment\">// the loop here first skips over runs of printable ASCII as a fast path.\n        // other chars (unicode, or ASCII that needs escaping) are then handled per-`char`.\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rest = <span class=\"self\">self</span>;\n        <span class=\"kw\">while </span>rest.len() &gt; <span class=\"number\">0 </span>{\n            <span class=\"kw\">let </span><span class=\"prelude-val\">Some</span>(non_printable_start) = rest.as_bytes().iter().position(|<span class=\"kw-2\">&amp;</span>b| needs_escape(b))\n            <span class=\"kw\">else </span>{\n                printable_range.end += rest.len();\n                <span class=\"kw\">break</span>;\n            };\n\n            printable_range.end += non_printable_start;\n            <span class=\"comment\">// SAFETY: the position was derived from an iterator, so is known to be within bounds, and at a char boundary\n            </span>rest = <span class=\"kw\">unsafe </span>{ rest.get_unchecked(non_printable_start..) };\n\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>chars = rest.chars();\n            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(c) = chars.next() {\n                <span class=\"kw\">let </span>esc = c.escape_debug_ext(EscapeDebugExtArgs {\n                    escape_grapheme_extended: <span class=\"bool-val\">true</span>,\n                    escape_single_quote: <span class=\"bool-val\">false</span>,\n                    escape_double_quote: <span class=\"bool-val\">true</span>,\n                });\n                <span class=\"kw\">if </span>esc.len() != <span class=\"number\">1 </span>{\n                    f.write_str(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>[printable_range.clone()])<span class=\"question-mark\">?</span>;\n                    Display::fmt(<span class=\"kw-2\">&amp;</span>esc, f)<span class=\"question-mark\">?</span>;\n                    printable_range.start = printable_range.end + c.len_utf8();\n                }\n                printable_range.end += c.len_utf8();\n            }\n            rest = chars.as_str();\n        }\n\n        f.write_str(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>[printable_range])<span class=\"question-mark\">?</span>;\n\n        f.write_char(<span class=\"string\">'\"'</span>)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Display <span class=\"kw\">for </span>str {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        f.pad(<span class=\"self\">self</span>)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Debug <span class=\"kw\">for </span>char {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        f.write_char(<span class=\"string\">'\\''</span>)<span class=\"question-mark\">?</span>;\n        <span class=\"kw\">let </span>esc = <span class=\"self\">self</span>.escape_debug_ext(EscapeDebugExtArgs {\n            escape_grapheme_extended: <span class=\"bool-val\">true</span>,\n            escape_single_quote: <span class=\"bool-val\">true</span>,\n            escape_double_quote: <span class=\"bool-val\">false</span>,\n        });\n        Display::fmt(<span class=\"kw-2\">&amp;</span>esc, f)<span class=\"question-mark\">?</span>;\n        f.write_char(<span class=\"string\">'\\''</span>)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Display <span class=\"kw\">for </span>char {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">if </span>f.width.is_none() &amp;&amp; f.precision.is_none() {\n            f.write_char(<span class=\"kw-2\">*</span><span class=\"self\">self</span>)\n        } <span class=\"kw\">else </span>{\n            f.pad(<span class=\"self\">self</span>.encode_utf8(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>; <span class=\"number\">4</span>]))\n        }\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; Pointer <span class=\"kw\">for </span><span class=\"kw-2\">*const </span>T {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"comment\">// Cast is needed here because `.expose_provenance()` requires `T: Sized`.\n        </span>pointer_fmt_inner((<span class=\"kw-2\">*</span><span class=\"self\">self </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>()).expose_provenance(), f)\n    }\n}\n\n<span class=\"doccomment\">/// Since the formatting will be identical for all pointer types, use a non-monomorphized\n/// implementation for the actual formatting to reduce the amount of codegen work needed.\n///\n/// This uses `ptr_addr: usize` and not `ptr: *const ()` to be able to use this for\n/// `fn(...) -&gt; ...` without using [problematic] \"Oxford Casts\".\n///\n/// [problematic]: https://github.com/rust-lang/rust/issues/95489\n</span><span class=\"kw\">pub</span>(<span class=\"kw\">crate</span>) <span class=\"kw\">fn </span>pointer_fmt_inner(ptr_addr: usize, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n    <span class=\"kw\">let </span>old_width = f.width;\n    <span class=\"kw\">let </span>old_flags = f.flags;\n\n    <span class=\"comment\">// The alternate flag is already treated by LowerHex as being special-\n    // it denotes whether to prefix with 0x. We use it to work out whether\n    // or not to zero extend, and then unconditionally set it to get the\n    // prefix.\n    </span><span class=\"kw\">if </span>f.alternate() {\n        f.flags |= <span class=\"number\">1 </span>&lt;&lt; (rt::Flag::SignAwareZeroPad <span class=\"kw\">as </span>u32);\n\n        <span class=\"kw\">if </span>f.width.is_none() {\n            f.width = <span class=\"prelude-val\">Some</span>((usize::BITS / <span class=\"number\">4</span>) <span class=\"kw\">as </span>usize + <span class=\"number\">2</span>);\n        }\n    }\n    f.flags |= <span class=\"number\">1 </span>&lt;&lt; (rt::Flag::Alternate <span class=\"kw\">as </span>u32);\n\n    <span class=\"kw\">let </span>ret = LowerHex::fmt(<span class=\"kw-2\">&amp;</span>ptr_addr, f);\n\n    f.width = old_width;\n    f.flags = old_flags;\n\n    ret\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; Pointer <span class=\"kw\">for </span><span class=\"kw-2\">*mut </span>T {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        Pointer::fmt(<span class=\"kw-2\">&amp;</span>(<span class=\"kw-2\">*</span><span class=\"self\">self </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>T), f)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; Pointer <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>T {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        Pointer::fmt(<span class=\"kw-2\">&amp;</span>(<span class=\"kw-2\">*</span><span class=\"self\">self </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>T), f)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; Pointer <span class=\"kw\">for </span><span class=\"kw-2\">&amp;mut </span>T {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        Pointer::fmt(<span class=\"kw-2\">&amp;</span>(<span class=\"kw-2\">&amp;**</span><span class=\"self\">self </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>T), f)\n    }\n}\n\n<span class=\"comment\">// Implementation of Display/Debug for various core types\n\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; Debug <span class=\"kw\">for </span><span class=\"kw-2\">*const </span>T {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        Pointer::fmt(<span class=\"self\">self</span>, f)\n    }\n}\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; Debug <span class=\"kw\">for </span><span class=\"kw-2\">*mut </span>T {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        Pointer::fmt(<span class=\"self\">self</span>, f)\n    }\n}\n\n<span class=\"macro\">macro_rules!</span> peel {\n    (<span class=\"macro-nonterminal\">$name</span>:ident, $(<span class=\"macro-nonterminal\">$other</span>:ident,)<span class=\"kw-2\">*</span>) =&gt; (<span class=\"macro\">tuple!</span> { $(<span class=\"macro-nonterminal\">$other</span>,)* })\n}\n\n<span class=\"macro\">macro_rules!</span> tuple {\n    () =&gt; ();\n    ( $(<span class=\"macro-nonterminal\">$name</span>:ident,)+ ) =&gt; (\n        <span class=\"macro\">maybe_tuple_doc!</span> {\n            $(<span class=\"macro-nonterminal\">$name</span>)+ @\n            <span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n            </span><span class=\"kw\">impl</span>&lt;$(<span class=\"macro-nonterminal\">$name</span>:Debug),+&gt; Debug <span class=\"kw\">for </span>($(<span class=\"macro-nonterminal\">$name</span>,)+) <span class=\"kw\">where </span><span class=\"macro\">last_type!</span>($(<span class=\"macro-nonterminal\">$name</span>,)+): <span class=\"question-mark\">?</span>Sized {\n                <span class=\"attr\">#[allow(non_snake_case, unused_assignments)]\n                </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>builder = f.debug_tuple(<span class=\"string\">\"\"</span>);\n                    <span class=\"kw\">let </span>($(<span class=\"kw-2\">ref </span><span class=\"macro-nonterminal\">$name</span>,)+) = <span class=\"kw-2\">*</span><span class=\"self\">self</span>;\n                    $(\n                        builder.field(<span class=\"kw-2\">&amp;</span><span class=\"macro-nonterminal\">$name</span>);\n                    )+\n\n                    builder.finish()\n                }\n            }\n        }\n        <span class=\"macro\">peel!</span> { $(<span class=\"macro-nonterminal\">$name</span>,)+ }\n    )\n}\n\n<span class=\"macro\">macro_rules!</span> maybe_tuple_doc {\n    (<span class=\"macro-nonterminal\">$a</span>:ident @ <span class=\"attr\">#[<span class=\"macro-nonterminal\">$meta</span>:meta] </span><span class=\"macro-nonterminal\">$item</span>:item) =&gt; {\n        <span class=\"attr\">#[doc(fake_variadic)]\n        #[doc = <span class=\"string\">\"This trait is implemented for tuples up to twelve items long.\"</span>]\n        #[<span class=\"macro-nonterminal\">$meta</span>]\n        </span><span class=\"macro-nonterminal\">$item\n    </span>};\n    (<span class=\"macro-nonterminal\">$a</span>:ident $(<span class=\"macro-nonterminal\">$rest_a</span>:ident)+ @ <span class=\"attr\">#[<span class=\"macro-nonterminal\">$meta</span>:meta] </span><span class=\"macro-nonterminal\">$item</span>:item) =&gt; {\n        <span class=\"attr\">#[doc(hidden)]\n        #[<span class=\"macro-nonterminal\">$meta</span>]\n        </span><span class=\"macro-nonterminal\">$item\n    </span>};\n}\n\n<span class=\"macro\">macro_rules!</span> last_type {\n    (<span class=\"macro-nonterminal\">$a</span>:ident,) =&gt; { <span class=\"macro-nonterminal\">$a </span>};\n    (<span class=\"macro-nonterminal\">$a</span>:ident, $(<span class=\"macro-nonterminal\">$rest_a</span>:ident,)+) =&gt; { <span class=\"macro\">last_type!</span>($(<span class=\"macro-nonterminal\">$rest_a</span>,)+) };\n}\n\n<span class=\"macro\">tuple!</span> { E, D, C, B, A, Z, Y, X, W, V, U, T, }\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: Debug&gt; Debug <span class=\"kw\">for </span>[T] {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        f.debug_list().entries(<span class=\"self\">self</span>.iter()).finish()\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Debug <span class=\"kw\">for </span>() {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        f.pad(<span class=\"string\">\"()\"</span>)\n    }\n}\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; Debug <span class=\"kw\">for </span>PhantomData&lt;T&gt; {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"PhantomData&lt;{}&gt;\"</span>, <span class=\"kw\">crate</span>::any::type_name::&lt;T&gt;())\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: Copy + Debug&gt; Debug <span class=\"kw\">for </span>Cell&lt;T&gt; {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        f.debug_struct(<span class=\"string\">\"Cell\"</span>).field(<span class=\"string\">\"value\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.get()).finish()\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized + Debug&gt; Debug <span class=\"kw\">for </span>RefCell&lt;T&gt; {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>d = f.debug_struct(<span class=\"string\">\"RefCell\"</span>);\n        <span class=\"kw\">match </span><span class=\"self\">self</span>.try_borrow() {\n            <span class=\"prelude-val\">Ok</span>(borrow) =&gt; d.field(<span class=\"string\">\"value\"</span>, <span class=\"kw-2\">&amp;</span>borrow),\n            <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; d.field(<span class=\"string\">\"value\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"macro\">format_args!</span>(<span class=\"string\">\"&lt;borrowed&gt;\"</span>)),\n        };\n        d.finish()\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized + Debug&gt; Debug <span class=\"kw\">for </span>Ref&lt;<span class=\"lifetime\">'_</span>, T&gt; {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        Debug::fmt(<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>, f)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized + Debug&gt; Debug <span class=\"kw\">for </span>RefMut&lt;<span class=\"lifetime\">'_</span>, T&gt; {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        Debug::fmt(<span class=\"kw-2\">&amp;*</span>(<span class=\"self\">self</span>.deref()), f)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"core_impl_debug\"</span>, since = <span class=\"string\">\"1.9.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; Debug <span class=\"kw\">for </span>UnsafeCell&lt;T&gt; {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        f.debug_struct(<span class=\"string\">\"UnsafeCell\"</span>).finish_non_exhaustive()\n    }\n}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"sync_unsafe_cell\"</span>, issue = <span class=\"string\">\"95439\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; Debug <span class=\"kw\">for </span>SyncUnsafeCell&lt;T&gt; {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result </span>{\n        f.debug_struct(<span class=\"string\">\"SyncUnsafeCell\"</span>).finish_non_exhaustive()\n    }\n}\n\n<span class=\"comment\">// If you expected tests to be here, look instead at the core/tests/fmt.rs file,\n// it's a lot easier than creating all of the rt::Piece structures here.\n// There are also tests in the alloc crate, for those that need allocations.\n</span></code></pre></div></section></main></body></html>",
	"crawlDate": "2024-07-28T05:29:06.394Z"
}