{
	"title": "NonZero in std::num - Rust",
	"url": "https://doc.rust-lang.org/stable/std/num/struct.NonZero.html",
	"markdown": "# NonZero in std::num - Rust\n\n## Struct [std](../index.html)::[num](index.html)::[NonZero](#)\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#116) ·\n\n```\npub struct NonZero<T>(/* private fields */)\nwhere\n    T: ZeroablePrimitive;\n```\n\nExpand description\n\nA value that is known not to equal zero.\n\nThis enables some memory layout optimization. For example, `Option<NonZero<u32>>` is the same size as `u32`:\n\n```\nuse core::{mem::size_of, num::NonZero};\n\nassert_eq!(size_of::<Option<NonZero<u32>>>(), size_of::<u32>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::%7Bmem::size_of,+num::NonZero%7D;%0A++++%0A++++assert_eq!(size_of::%3COption%3CNonZero%3Cu32%3E%3E%3E(),+size_of::%3Cu32%3E());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#348-350)[§](#impl-NonZero%3CT%3E)\n\n1.28.0 (const: 1.47.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#357)\n\nCreates a non-zero if the given value is not zero.\n\n1.28.0 (const: 1.28.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#373)\n\nCreates a non-zero without checking whether the value is non-zero. This results in undefined behaviour if the value is zero.\n\n##### [§](#safety)Safety\n\nThe value must not be zero.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#395)\n\n🔬This is a nightly-only experimental API. (`nonzero_from_mut` [#106290](https://github.com/rust-lang/rust/issues/106290))\n\nConverts a reference to a non-zero mutable reference if the referenced value is not zero.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#413)\n\n🔬This is a nightly-only experimental API. (`nonzero_from_mut` [#106290](https://github.com/rust-lang/rust/issues/106290))\n\nConverts a mutable reference to a non-zero mutable reference without checking whether the referenced value is non-zero. This results in undefined behavior if the referenced value is zero.\n\n##### [§](#safety-1)Safety\n\nThe referenced value must not be zero.\n\n1.28.0 (const: 1.34.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#434)\n\nReturns the contained value as a primitive type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)[§](#impl-NonZero%3Cu8%3E)\n\n1.67.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\nThe size of this non-zero integer type in bits.\n\nThis value is equal to [`u8::BITS`](about:blank/primitive.u8.html#associatedconstant.BITS \"associated constant u8::BITS\").\n\n##### [§](#examples)Examples\n\n```\nassert_eq!(NonZero::<u8>::BITS, u8::BITS);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu8%3E::BITS,+u8::BITS);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\nReturns the number of leading zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-1)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<u8>::new(u8::MAX).unwrap();\n\nassert_eq!(n.leading_zeros(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu8%3E::new(u8::MAX).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\nReturns the number of trailing zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-2)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<u8>::new(0b0101000).unwrap();\n\nassert_eq!(n.trailing_zeros(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu8%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\n🔬This is a nightly-only experimental API. (`non_zero_count_ones` [#120287](https://github.com/rust-lang/rust/issues/120287))\n\nReturns the number of ones in the binary representation of `self`.\n\n##### [§](#examples-3)Examples\n\nBasic usage:\n\n```\n#![feature(non_zero_count_ones)]\n\nlet a = NonZero::<u8>::new(0b100_0000)?;\nlet b = NonZero::<u8>::new(0b100_0011)?;\n\nassert_eq!(a.count_ones(), NonZero::new(1)?);\nassert_eq!(b.count_ones(), NonZero::new(3)?);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Cu8%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Cu8%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\nThe smallest value that can be represented by this non-zero integer type, 1.\n\n##### [§](#examples-4)Examples\n\n```\nassert_eq!(NonZero::<u8>::MIN.get(), 1u8);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu8%3E::MIN.get(),+1u8);%0A%7D&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\nThe largest value that can be represented by this non-zero integer type, equal to [`u8::MAX`](about:blank/primitive.u8.html#associatedconstant.MAX \"associated constant u8::MAX\").\n\n##### [§](#examples-5)Examples\n\n```\nassert_eq!(NonZero::<u8>::MAX.get(), u8::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu8%3E::MAX.get(),+u8::MAX);%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\nAdds an unsigned integer to a non-zero value. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-6)Examples\n\n```\nlet one = NonZero::new(1u8)?;\nlet two = NonZero::new(2u8)?;\nlet max = NonZero::new(u8::MAX)?;\n\nassert_eq!(Some(two), one.checked_add(1));\nassert_eq!(None, max.checked_add(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u8)?;%0Alet+two+=+NonZero::new(2u8)?;%0Alet+max+=+NonZero::new(u8::MAX)?;%0A%0Aassert_eq!(Some(two),+one.checked_add(1));%0Aassert_eq!(None,+max.checked_add(1));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\nAdds an unsigned integer to a non-zero value. Return [`NonZero::<u8>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-7)Examples\n\n```\nlet one = NonZero::new(1u8)?;\nlet two = NonZero::new(2u8)?;\nlet max = NonZero::new(u8::MAX)?;\n\nassert_eq!(two, one.saturating_add(1));\nassert_eq!(max, max.saturating_add(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u8)?;%0Alet+two+=+NonZero::new(2u8)?;%0Alet+max+=+NonZero::new(u8::MAX)?;%0A%0Aassert_eq!(two,+one.saturating_add(1));%0Aassert_eq!(max,+max.saturating_add(1));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nAdds an unsigned integer to a non-zero value, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self + rhs > u8::MAX`.\n\n##### [§](#examples-8)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet one = NonZero::new(1u8)?;\nlet two = NonZero::new(2u8)?;\n\nassert_eq!(two, unsafe { one.unchecked_add(1) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u8)?;%0Alet+two+=+NonZero::new(2u8)?;%0A%0Aassert_eq!(two,+unsafe+%7B+one.unchecked_add(1)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\nReturns the smallest power of two greater than or equal to n. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if the next power of two is greater than the type’s maximum value. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-9)Examples\n\n```\nlet two = NonZero::new(2u8)?;\nlet three = NonZero::new(3u8)?;\nlet four = NonZero::new(4u8)?;\nlet max = NonZero::new(u8::MAX)?;\n\nassert_eq!(Some(two), two.checked_next_power_of_two() );\nassert_eq!(Some(four), three.checked_next_power_of_two() );\nassert_eq!(None, max.checked_next_power_of_two() );\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u8)?;%0Alet+three+=+NonZero::new(3u8)?;%0Alet+four+=+NonZero::new(4u8)?;%0Alet+max+=+NonZero::new(u8::MAX)?;%0A%0Aassert_eq!(Some(two),+two.checked_next_power_of_two()+);%0Aassert_eq!(Some(four),+three.checked_next_power_of_two()+);%0Aassert_eq!(None,+max.checked_next_power_of_two()+);%0ASome(())%0A%7D&edition=2021)\n\n1.67.0 (const: 1.67.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\nReturns the base 2 logarithm of the number, rounded down.\n\nThis is the same operation as [`u8::ilog2`](about:blank/primitive.u8.html#method.ilog2 \"method u8::ilog2\"), except that it has no failure cases to worry about since this value can never be zero.\n\n##### [§](#examples-10)Examples\n\n```\nassert_eq!(NonZero::new(7u8).unwrap().ilog2(), 2);\nassert_eq!(NonZero::new(8u8).unwrap().ilog2(), 3);\nassert_eq!(NonZero::new(9u8).unwrap().ilog2(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(7u8).unwrap().ilog2(),+2);%0A++++assert_eq!(NonZero::new(8u8).unwrap().ilog2(),+3);%0A++++assert_eq!(NonZero::new(9u8).unwrap().ilog2(),+3);%0A%7D&edition=2021)\n\n1.67.0 (const: 1.67.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\nReturns the base 10 logarithm of the number, rounded down.\n\nThis is the same operation as [`u8::ilog10`](about:blank/primitive.u8.html#method.ilog10 \"method u8::ilog10\"), except that it has no failure cases to worry about since this value can never be zero.\n\n##### [§](#examples-11)Examples\n\n```\nassert_eq!(NonZero::new(99u8).unwrap().ilog10(), 1);\nassert_eq!(NonZero::new(100u8).unwrap().ilog10(), 2);\nassert_eq!(NonZero::new(101u8).unwrap().ilog10(), 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(99u8).unwrap().ilog10(),+1);%0A++++assert_eq!(NonZero::new(100u8).unwrap().ilog10(),+2);%0A++++assert_eq!(NonZero::new(101u8).unwrap().ilog10(),+2);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\n🔬This is a nightly-only experimental API. (`num_midpoint` [#110840](https://github.com/rust-lang/rust/issues/110840))\n\nCalculates the middle point of `self` and `rhs`.\n\n`midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a sufficiently-large signed integral type. This implies that the result is always rounded towards negative infinity and that no overflow will ever occur.\n\n##### [§](#examples-12)Examples\n\n```\n#![feature(num_midpoint)]\n\nlet one = NonZero::new(1u8)?;\nlet two = NonZero::new(2u8)?;\nlet four = NonZero::new(4u8)?;\n\nassert_eq!(one.midpoint(four), two);\nassert_eq!(four.midpoint(one), two);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u8)?;%0Alet+two+=+NonZero::new(2u8)?;%0Alet+four+=+NonZero::new(4u8)?;%0A%0Aassert_eq!(one.midpoint(four),+two);%0Aassert_eq!(four.midpoint(one),+two);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.59.0 (const: 1.59.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\nReturns `true` if and only if `self == (1 << k)` for some `k`.\n\nOn many architectures, this function can perform better than `is_power_of_two()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-13)Examples\n\nBasic usage:\n\n```\nlet eight = std::num::NonZero::new(8u8).unwrap();\nassert!(eight.is_power_of_two());\nlet ten = std::num::NonZero::new(10u8).unwrap();\nassert!(!ten.is_power_of_two());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+eight+=+std::num::NonZero::new(8u8).unwrap();%0A++++assert!(eight.is_power_of_two());%0A++++let+ten+=+std::num::NonZero::new(10u8).unwrap();%0A++++assert!(!ten.is_power_of_two());%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\nMultiplies two non-zero integers together. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-14)Examples\n\n```\nlet two = NonZero::new(2u8)?;\nlet four = NonZero::new(4u8)?;\nlet max = NonZero::new(u8::MAX)?;\n\nassert_eq!(Some(four), two.checked_mul(two));\nassert_eq!(None, max.checked_mul(two));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u8)?;%0Alet+four+=+NonZero::new(4u8)?;%0Alet+max+=+NonZero::new(u8::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\nMultiplies two non-zero integers together. Return [`NonZero::<u8>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-15)Examples\n\n```\nlet two = NonZero::new(2u8)?;\nlet four = NonZero::new(4u8)?;\nlet max = NonZero::new(u8::MAX)?;\n\nassert_eq!(four, two.saturating_mul(two));\nassert_eq!(max, four.saturating_mul(max));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u8)?;%0Alet+four+=+NonZero::new(4u8)?;%0Alet+max+=+NonZero::new(u8::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nMultiplies two non-zero integers together, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self * rhs > u8::MAX`.\n\n##### [§](#examples-16)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet two = NonZero::new(2u8)?;\nlet four = NonZero::new(4u8)?;\n\nassert_eq!(four, unsafe { two.unchecked_mul(two) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u8)?;%0Alet+four+=+NonZero::new(4u8)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\nRaises non-zero value to an integer power. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-17)Examples\n\n```\nlet three = NonZero::new(3u8)?;\nlet twenty_seven = NonZero::new(27u8)?;\nlet half_max = NonZero::new(u8::MAX / 2)?;\n\nassert_eq!(Some(twenty_seven), three.checked_pow(3));\nassert_eq!(None, half_max.checked_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u8)?;%0Alet+twenty_seven+=+NonZero::new(27u8)?;%0Alet+half_max+=+NonZero::new(u8::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)\n\nRaise non-zero value to an integer power. Return [`NonZero::<u8>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-18)Examples\n\n```\nlet three = NonZero::new(3u8)?;\nlet twenty_seven = NonZero::new(27u8)?;\nlet max = NonZero::new(u8::MAX)?;\n\nassert_eq!(twenty_seven, three.saturating_pow(3));\nassert_eq!(max, max.saturating_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u8)?;%0Alet+twenty_seven+=+NonZero::new(27u8)?;%0Alet+max+=+NonZero::new(u8::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)[§](#impl-NonZero%3Cu16%3E)\n\n1.67.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\nThe size of this non-zero integer type in bits.\n\nThis value is equal to [`u16::BITS`](about:blank/primitive.u16.html#associatedconstant.BITS \"associated constant u16::BITS\").\n\n##### [§](#examples-19)Examples\n\n```\nassert_eq!(NonZero::<u16>::BITS, u16::BITS);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu16%3E::BITS,+u16::BITS);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\nReturns the number of leading zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-20)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<u16>::new(u16::MAX).unwrap();\n\nassert_eq!(n.leading_zeros(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu16%3E::new(u16::MAX).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\nReturns the number of trailing zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-21)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<u16>::new(0b0101000).unwrap();\n\nassert_eq!(n.trailing_zeros(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu16%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\n🔬This is a nightly-only experimental API. (`non_zero_count_ones` [#120287](https://github.com/rust-lang/rust/issues/120287))\n\nReturns the number of ones in the binary representation of `self`.\n\n##### [§](#examples-22)Examples\n\nBasic usage:\n\n```\n#![feature(non_zero_count_ones)]\n\nlet a = NonZero::<u16>::new(0b100_0000)?;\nlet b = NonZero::<u16>::new(0b100_0011)?;\n\nassert_eq!(a.count_ones(), NonZero::new(1)?);\nassert_eq!(b.count_ones(), NonZero::new(3)?);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Cu16%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Cu16%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\nThe smallest value that can be represented by this non-zero integer type, 1.\n\n##### [§](#examples-23)Examples\n\n```\nassert_eq!(NonZero::<u16>::MIN.get(), 1u16);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu16%3E::MIN.get(),+1u16);%0A%7D&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\nThe largest value that can be represented by this non-zero integer type, equal to [`u16::MAX`](about:blank/primitive.u16.html#associatedconstant.MAX \"associated constant u16::MAX\").\n\n##### [§](#examples-24)Examples\n\n```\nassert_eq!(NonZero::<u16>::MAX.get(), u16::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu16%3E::MAX.get(),+u16::MAX);%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\nAdds an unsigned integer to a non-zero value. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-25)Examples\n\n```\nlet one = NonZero::new(1u16)?;\nlet two = NonZero::new(2u16)?;\nlet max = NonZero::new(u16::MAX)?;\n\nassert_eq!(Some(two), one.checked_add(1));\nassert_eq!(None, max.checked_add(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u16)?;%0Alet+two+=+NonZero::new(2u16)?;%0Alet+max+=+NonZero::new(u16::MAX)?;%0A%0Aassert_eq!(Some(two),+one.checked_add(1));%0Aassert_eq!(None,+max.checked_add(1));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\nAdds an unsigned integer to a non-zero value. Return [`NonZero::<u16>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-26)Examples\n\n```\nlet one = NonZero::new(1u16)?;\nlet two = NonZero::new(2u16)?;\nlet max = NonZero::new(u16::MAX)?;\n\nassert_eq!(two, one.saturating_add(1));\nassert_eq!(max, max.saturating_add(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u16)?;%0Alet+two+=+NonZero::new(2u16)?;%0Alet+max+=+NonZero::new(u16::MAX)?;%0A%0Aassert_eq!(two,+one.saturating_add(1));%0Aassert_eq!(max,+max.saturating_add(1));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nAdds an unsigned integer to a non-zero value, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self + rhs > u16::MAX`.\n\n##### [§](#examples-27)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet one = NonZero::new(1u16)?;\nlet two = NonZero::new(2u16)?;\n\nassert_eq!(two, unsafe { one.unchecked_add(1) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u16)?;%0Alet+two+=+NonZero::new(2u16)?;%0A%0Aassert_eq!(two,+unsafe+%7B+one.unchecked_add(1)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\nReturns the smallest power of two greater than or equal to n. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if the next power of two is greater than the type’s maximum value. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-28)Examples\n\n```\nlet two = NonZero::new(2u16)?;\nlet three = NonZero::new(3u16)?;\nlet four = NonZero::new(4u16)?;\nlet max = NonZero::new(u16::MAX)?;\n\nassert_eq!(Some(two), two.checked_next_power_of_two() );\nassert_eq!(Some(four), three.checked_next_power_of_two() );\nassert_eq!(None, max.checked_next_power_of_two() );\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u16)?;%0Alet+three+=+NonZero::new(3u16)?;%0Alet+four+=+NonZero::new(4u16)?;%0Alet+max+=+NonZero::new(u16::MAX)?;%0A%0Aassert_eq!(Some(two),+two.checked_next_power_of_two()+);%0Aassert_eq!(Some(four),+three.checked_next_power_of_two()+);%0Aassert_eq!(None,+max.checked_next_power_of_two()+);%0ASome(())%0A%7D&edition=2021)\n\n1.67.0 (const: 1.67.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\nReturns the base 2 logarithm of the number, rounded down.\n\nThis is the same operation as [`u16::ilog2`](about:blank/primitive.u16.html#method.ilog2 \"method u16::ilog2\"), except that it has no failure cases to worry about since this value can never be zero.\n\n##### [§](#examples-29)Examples\n\n```\nassert_eq!(NonZero::new(7u16).unwrap().ilog2(), 2);\nassert_eq!(NonZero::new(8u16).unwrap().ilog2(), 3);\nassert_eq!(NonZero::new(9u16).unwrap().ilog2(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(7u16).unwrap().ilog2(),+2);%0A++++assert_eq!(NonZero::new(8u16).unwrap().ilog2(),+3);%0A++++assert_eq!(NonZero::new(9u16).unwrap().ilog2(),+3);%0A%7D&edition=2021)\n\n1.67.0 (const: 1.67.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\nReturns the base 10 logarithm of the number, rounded down.\n\nThis is the same operation as [`u16::ilog10`](about:blank/primitive.u16.html#method.ilog10 \"method u16::ilog10\"), except that it has no failure cases to worry about since this value can never be zero.\n\n##### [§](#examples-30)Examples\n\n```\nassert_eq!(NonZero::new(99u16).unwrap().ilog10(), 1);\nassert_eq!(NonZero::new(100u16).unwrap().ilog10(), 2);\nassert_eq!(NonZero::new(101u16).unwrap().ilog10(), 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(99u16).unwrap().ilog10(),+1);%0A++++assert_eq!(NonZero::new(100u16).unwrap().ilog10(),+2);%0A++++assert_eq!(NonZero::new(101u16).unwrap().ilog10(),+2);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\n🔬This is a nightly-only experimental API. (`num_midpoint` [#110840](https://github.com/rust-lang/rust/issues/110840))\n\nCalculates the middle point of `self` and `rhs`.\n\n`midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a sufficiently-large signed integral type. This implies that the result is always rounded towards negative infinity and that no overflow will ever occur.\n\n##### [§](#examples-31)Examples\n\n```\n#![feature(num_midpoint)]\n\nlet one = NonZero::new(1u16)?;\nlet two = NonZero::new(2u16)?;\nlet four = NonZero::new(4u16)?;\n\nassert_eq!(one.midpoint(four), two);\nassert_eq!(four.midpoint(one), two);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u16)?;%0Alet+two+=+NonZero::new(2u16)?;%0Alet+four+=+NonZero::new(4u16)?;%0A%0Aassert_eq!(one.midpoint(four),+two);%0Aassert_eq!(four.midpoint(one),+two);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.59.0 (const: 1.59.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\nReturns `true` if and only if `self == (1 << k)` for some `k`.\n\nOn many architectures, this function can perform better than `is_power_of_two()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-32)Examples\n\nBasic usage:\n\n```\nlet eight = std::num::NonZero::new(8u16).unwrap();\nassert!(eight.is_power_of_two());\nlet ten = std::num::NonZero::new(10u16).unwrap();\nassert!(!ten.is_power_of_two());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+eight+=+std::num::NonZero::new(8u16).unwrap();%0A++++assert!(eight.is_power_of_two());%0A++++let+ten+=+std::num::NonZero::new(10u16).unwrap();%0A++++assert!(!ten.is_power_of_two());%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\nMultiplies two non-zero integers together. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-33)Examples\n\n```\nlet two = NonZero::new(2u16)?;\nlet four = NonZero::new(4u16)?;\nlet max = NonZero::new(u16::MAX)?;\n\nassert_eq!(Some(four), two.checked_mul(two));\nassert_eq!(None, max.checked_mul(two));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u16)?;%0Alet+four+=+NonZero::new(4u16)?;%0Alet+max+=+NonZero::new(u16::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\nMultiplies two non-zero integers together. Return [`NonZero::<u16>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-34)Examples\n\n```\nlet two = NonZero::new(2u16)?;\nlet four = NonZero::new(4u16)?;\nlet max = NonZero::new(u16::MAX)?;\n\nassert_eq!(four, two.saturating_mul(two));\nassert_eq!(max, four.saturating_mul(max));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u16)?;%0Alet+four+=+NonZero::new(4u16)?;%0Alet+max+=+NonZero::new(u16::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nMultiplies two non-zero integers together, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self * rhs > u16::MAX`.\n\n##### [§](#examples-35)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet two = NonZero::new(2u16)?;\nlet four = NonZero::new(4u16)?;\n\nassert_eq!(four, unsafe { two.unchecked_mul(two) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u16)?;%0Alet+four+=+NonZero::new(4u16)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\nRaises non-zero value to an integer power. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-36)Examples\n\n```\nlet three = NonZero::new(3u16)?;\nlet twenty_seven = NonZero::new(27u16)?;\nlet half_max = NonZero::new(u16::MAX / 2)?;\n\nassert_eq!(Some(twenty_seven), three.checked_pow(3));\nassert_eq!(None, half_max.checked_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u16)?;%0Alet+twenty_seven+=+NonZero::new(27u16)?;%0Alet+half_max+=+NonZero::new(u16::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)\n\nRaise non-zero value to an integer power. Return [`NonZero::<u16>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-37)Examples\n\n```\nlet three = NonZero::new(3u16)?;\nlet twenty_seven = NonZero::new(27u16)?;\nlet max = NonZero::new(u16::MAX)?;\n\nassert_eq!(twenty_seven, three.saturating_pow(3));\nassert_eq!(max, max.saturating_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u16)?;%0Alet+twenty_seven+=+NonZero::new(27u16)?;%0Alet+max+=+NonZero::new(u16::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)[§](#impl-NonZero%3Cu32%3E)\n\n1.67.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\nThe size of this non-zero integer type in bits.\n\nThis value is equal to [`u32::BITS`](about:blank/primitive.u32.html#associatedconstant.BITS \"associated constant u32::BITS\").\n\n##### [§](#examples-38)Examples\n\n```\nassert_eq!(NonZero::<u32>::BITS, u32::BITS);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu32%3E::BITS,+u32::BITS);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\nReturns the number of leading zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-39)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<u32>::new(u32::MAX).unwrap();\n\nassert_eq!(n.leading_zeros(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu32%3E::new(u32::MAX).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\nReturns the number of trailing zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-40)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<u32>::new(0b0101000).unwrap();\n\nassert_eq!(n.trailing_zeros(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu32%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\n🔬This is a nightly-only experimental API. (`non_zero_count_ones` [#120287](https://github.com/rust-lang/rust/issues/120287))\n\nReturns the number of ones in the binary representation of `self`.\n\n##### [§](#examples-41)Examples\n\nBasic usage:\n\n```\n#![feature(non_zero_count_ones)]\n\nlet a = NonZero::<u32>::new(0b100_0000)?;\nlet b = NonZero::<u32>::new(0b100_0011)?;\n\nassert_eq!(a.count_ones(), NonZero::new(1)?);\nassert_eq!(b.count_ones(), NonZero::new(3)?);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Cu32%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Cu32%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\nThe smallest value that can be represented by this non-zero integer type, 1.\n\n##### [§](#examples-42)Examples\n\n```\nassert_eq!(NonZero::<u32>::MIN.get(), 1u32);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu32%3E::MIN.get(),+1u32);%0A%7D&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\nThe largest value that can be represented by this non-zero integer type, equal to [`u32::MAX`](about:blank/primitive.u32.html#associatedconstant.MAX \"associated constant u32::MAX\").\n\n##### [§](#examples-43)Examples\n\n```\nassert_eq!(NonZero::<u32>::MAX.get(), u32::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu32%3E::MAX.get(),+u32::MAX);%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\nAdds an unsigned integer to a non-zero value. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-44)Examples\n\n```\nlet one = NonZero::new(1u32)?;\nlet two = NonZero::new(2u32)?;\nlet max = NonZero::new(u32::MAX)?;\n\nassert_eq!(Some(two), one.checked_add(1));\nassert_eq!(None, max.checked_add(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u32)?;%0Alet+two+=+NonZero::new(2u32)?;%0Alet+max+=+NonZero::new(u32::MAX)?;%0A%0Aassert_eq!(Some(two),+one.checked_add(1));%0Aassert_eq!(None,+max.checked_add(1));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\nAdds an unsigned integer to a non-zero value. Return [`NonZero::<u32>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-45)Examples\n\n```\nlet one = NonZero::new(1u32)?;\nlet two = NonZero::new(2u32)?;\nlet max = NonZero::new(u32::MAX)?;\n\nassert_eq!(two, one.saturating_add(1));\nassert_eq!(max, max.saturating_add(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u32)?;%0Alet+two+=+NonZero::new(2u32)?;%0Alet+max+=+NonZero::new(u32::MAX)?;%0A%0Aassert_eq!(two,+one.saturating_add(1));%0Aassert_eq!(max,+max.saturating_add(1));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nAdds an unsigned integer to a non-zero value, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self + rhs > u32::MAX`.\n\n##### [§](#examples-46)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet one = NonZero::new(1u32)?;\nlet two = NonZero::new(2u32)?;\n\nassert_eq!(two, unsafe { one.unchecked_add(1) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u32)?;%0Alet+two+=+NonZero::new(2u32)?;%0A%0Aassert_eq!(two,+unsafe+%7B+one.unchecked_add(1)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\nReturns the smallest power of two greater than or equal to n. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if the next power of two is greater than the type’s maximum value. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-47)Examples\n\n```\nlet two = NonZero::new(2u32)?;\nlet three = NonZero::new(3u32)?;\nlet four = NonZero::new(4u32)?;\nlet max = NonZero::new(u32::MAX)?;\n\nassert_eq!(Some(two), two.checked_next_power_of_two() );\nassert_eq!(Some(four), three.checked_next_power_of_two() );\nassert_eq!(None, max.checked_next_power_of_two() );\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u32)?;%0Alet+three+=+NonZero::new(3u32)?;%0Alet+four+=+NonZero::new(4u32)?;%0Alet+max+=+NonZero::new(u32::MAX)?;%0A%0Aassert_eq!(Some(two),+two.checked_next_power_of_two()+);%0Aassert_eq!(Some(four),+three.checked_next_power_of_two()+);%0Aassert_eq!(None,+max.checked_next_power_of_two()+);%0ASome(())%0A%7D&edition=2021)\n\n1.67.0 (const: 1.67.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\nReturns the base 2 logarithm of the number, rounded down.\n\nThis is the same operation as [`u32::ilog2`](about:blank/primitive.u32.html#method.ilog2 \"method u32::ilog2\"), except that it has no failure cases to worry about since this value can never be zero.\n\n##### [§](#examples-48)Examples\n\n```\nassert_eq!(NonZero::new(7u32).unwrap().ilog2(), 2);\nassert_eq!(NonZero::new(8u32).unwrap().ilog2(), 3);\nassert_eq!(NonZero::new(9u32).unwrap().ilog2(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(7u32).unwrap().ilog2(),+2);%0A++++assert_eq!(NonZero::new(8u32).unwrap().ilog2(),+3);%0A++++assert_eq!(NonZero::new(9u32).unwrap().ilog2(),+3);%0A%7D&edition=2021)\n\n1.67.0 (const: 1.67.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\nReturns the base 10 logarithm of the number, rounded down.\n\nThis is the same operation as [`u32::ilog10`](about:blank/primitive.u32.html#method.ilog10 \"method u32::ilog10\"), except that it has no failure cases to worry about since this value can never be zero.\n\n##### [§](#examples-49)Examples\n\n```\nassert_eq!(NonZero::new(99u32).unwrap().ilog10(), 1);\nassert_eq!(NonZero::new(100u32).unwrap().ilog10(), 2);\nassert_eq!(NonZero::new(101u32).unwrap().ilog10(), 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(99u32).unwrap().ilog10(),+1);%0A++++assert_eq!(NonZero::new(100u32).unwrap().ilog10(),+2);%0A++++assert_eq!(NonZero::new(101u32).unwrap().ilog10(),+2);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\n🔬This is a nightly-only experimental API. (`num_midpoint` [#110840](https://github.com/rust-lang/rust/issues/110840))\n\nCalculates the middle point of `self` and `rhs`.\n\n`midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a sufficiently-large signed integral type. This implies that the result is always rounded towards negative infinity and that no overflow will ever occur.\n\n##### [§](#examples-50)Examples\n\n```\n#![feature(num_midpoint)]\n\nlet one = NonZero::new(1u32)?;\nlet two = NonZero::new(2u32)?;\nlet four = NonZero::new(4u32)?;\n\nassert_eq!(one.midpoint(four), two);\nassert_eq!(four.midpoint(one), two);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u32)?;%0Alet+two+=+NonZero::new(2u32)?;%0Alet+four+=+NonZero::new(4u32)?;%0A%0Aassert_eq!(one.midpoint(four),+two);%0Aassert_eq!(four.midpoint(one),+two);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.59.0 (const: 1.59.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\nReturns `true` if and only if `self == (1 << k)` for some `k`.\n\nOn many architectures, this function can perform better than `is_power_of_two()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-51)Examples\n\nBasic usage:\n\n```\nlet eight = std::num::NonZero::new(8u32).unwrap();\nassert!(eight.is_power_of_two());\nlet ten = std::num::NonZero::new(10u32).unwrap();\nassert!(!ten.is_power_of_two());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+eight+=+std::num::NonZero::new(8u32).unwrap();%0A++++assert!(eight.is_power_of_two());%0A++++let+ten+=+std::num::NonZero::new(10u32).unwrap();%0A++++assert!(!ten.is_power_of_two());%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\nMultiplies two non-zero integers together. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-52)Examples\n\n```\nlet two = NonZero::new(2u32)?;\nlet four = NonZero::new(4u32)?;\nlet max = NonZero::new(u32::MAX)?;\n\nassert_eq!(Some(four), two.checked_mul(two));\nassert_eq!(None, max.checked_mul(two));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u32)?;%0Alet+four+=+NonZero::new(4u32)?;%0Alet+max+=+NonZero::new(u32::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\nMultiplies two non-zero integers together. Return [`NonZero::<u32>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-53)Examples\n\n```\nlet two = NonZero::new(2u32)?;\nlet four = NonZero::new(4u32)?;\nlet max = NonZero::new(u32::MAX)?;\n\nassert_eq!(four, two.saturating_mul(two));\nassert_eq!(max, four.saturating_mul(max));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u32)?;%0Alet+four+=+NonZero::new(4u32)?;%0Alet+max+=+NonZero::new(u32::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nMultiplies two non-zero integers together, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self * rhs > u32::MAX`.\n\n##### [§](#examples-54)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet two = NonZero::new(2u32)?;\nlet four = NonZero::new(4u32)?;\n\nassert_eq!(four, unsafe { two.unchecked_mul(two) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u32)?;%0Alet+four+=+NonZero::new(4u32)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\nRaises non-zero value to an integer power. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-55)Examples\n\n```\nlet three = NonZero::new(3u32)?;\nlet twenty_seven = NonZero::new(27u32)?;\nlet half_max = NonZero::new(u32::MAX / 2)?;\n\nassert_eq!(Some(twenty_seven), three.checked_pow(3));\nassert_eq!(None, half_max.checked_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u32)?;%0Alet+twenty_seven+=+NonZero::new(27u32)?;%0Alet+half_max+=+NonZero::new(u32::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)\n\nRaise non-zero value to an integer power. Return [`NonZero::<u32>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-56)Examples\n\n```\nlet three = NonZero::new(3u32)?;\nlet twenty_seven = NonZero::new(27u32)?;\nlet max = NonZero::new(u32::MAX)?;\n\nassert_eq!(twenty_seven, three.saturating_pow(3));\nassert_eq!(max, max.saturating_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u32)?;%0Alet+twenty_seven+=+NonZero::new(27u32)?;%0Alet+max+=+NonZero::new(u32::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)[§](#impl-NonZero%3Cu64%3E)\n\n1.67.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\nThe size of this non-zero integer type in bits.\n\nThis value is equal to [`u64::BITS`](about:blank/primitive.u64.html#associatedconstant.BITS \"associated constant u64::BITS\").\n\n##### [§](#examples-57)Examples\n\n```\nassert_eq!(NonZero::<u64>::BITS, u64::BITS);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu64%3E::BITS,+u64::BITS);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\nReturns the number of leading zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-58)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<u64>::new(u64::MAX).unwrap();\n\nassert_eq!(n.leading_zeros(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu64%3E::new(u64::MAX).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\nReturns the number of trailing zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-59)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<u64>::new(0b0101000).unwrap();\n\nassert_eq!(n.trailing_zeros(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu64%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\n🔬This is a nightly-only experimental API. (`non_zero_count_ones` [#120287](https://github.com/rust-lang/rust/issues/120287))\n\nReturns the number of ones in the binary representation of `self`.\n\n##### [§](#examples-60)Examples\n\nBasic usage:\n\n```\n#![feature(non_zero_count_ones)]\n\nlet a = NonZero::<u64>::new(0b100_0000)?;\nlet b = NonZero::<u64>::new(0b100_0011)?;\n\nassert_eq!(a.count_ones(), NonZero::new(1)?);\nassert_eq!(b.count_ones(), NonZero::new(3)?);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Cu64%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Cu64%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\nThe smallest value that can be represented by this non-zero integer type, 1.\n\n##### [§](#examples-61)Examples\n\n```\nassert_eq!(NonZero::<u64>::MIN.get(), 1u64);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu64%3E::MIN.get(),+1u64);%0A%7D&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\nThe largest value that can be represented by this non-zero integer type, equal to [`u64::MAX`](about:blank/primitive.u64.html#associatedconstant.MAX \"associated constant u64::MAX\").\n\n##### [§](#examples-62)Examples\n\n```\nassert_eq!(NonZero::<u64>::MAX.get(), u64::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu64%3E::MAX.get(),+u64::MAX);%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\nAdds an unsigned integer to a non-zero value. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-63)Examples\n\n```\nlet one = NonZero::new(1u64)?;\nlet two = NonZero::new(2u64)?;\nlet max = NonZero::new(u64::MAX)?;\n\nassert_eq!(Some(two), one.checked_add(1));\nassert_eq!(None, max.checked_add(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u64)?;%0Alet+two+=+NonZero::new(2u64)?;%0Alet+max+=+NonZero::new(u64::MAX)?;%0A%0Aassert_eq!(Some(two),+one.checked_add(1));%0Aassert_eq!(None,+max.checked_add(1));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\nAdds an unsigned integer to a non-zero value. Return [`NonZero::<u64>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-64)Examples\n\n```\nlet one = NonZero::new(1u64)?;\nlet two = NonZero::new(2u64)?;\nlet max = NonZero::new(u64::MAX)?;\n\nassert_eq!(two, one.saturating_add(1));\nassert_eq!(max, max.saturating_add(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u64)?;%0Alet+two+=+NonZero::new(2u64)?;%0Alet+max+=+NonZero::new(u64::MAX)?;%0A%0Aassert_eq!(two,+one.saturating_add(1));%0Aassert_eq!(max,+max.saturating_add(1));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nAdds an unsigned integer to a non-zero value, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self + rhs > u64::MAX`.\n\n##### [§](#examples-65)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet one = NonZero::new(1u64)?;\nlet two = NonZero::new(2u64)?;\n\nassert_eq!(two, unsafe { one.unchecked_add(1) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u64)?;%0Alet+two+=+NonZero::new(2u64)?;%0A%0Aassert_eq!(two,+unsafe+%7B+one.unchecked_add(1)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\nReturns the smallest power of two greater than or equal to n. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if the next power of two is greater than the type’s maximum value. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-66)Examples\n\n```\nlet two = NonZero::new(2u64)?;\nlet three = NonZero::new(3u64)?;\nlet four = NonZero::new(4u64)?;\nlet max = NonZero::new(u64::MAX)?;\n\nassert_eq!(Some(two), two.checked_next_power_of_two() );\nassert_eq!(Some(four), three.checked_next_power_of_two() );\nassert_eq!(None, max.checked_next_power_of_two() );\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u64)?;%0Alet+three+=+NonZero::new(3u64)?;%0Alet+four+=+NonZero::new(4u64)?;%0Alet+max+=+NonZero::new(u64::MAX)?;%0A%0Aassert_eq!(Some(two),+two.checked_next_power_of_two()+);%0Aassert_eq!(Some(four),+three.checked_next_power_of_two()+);%0Aassert_eq!(None,+max.checked_next_power_of_two()+);%0ASome(())%0A%7D&edition=2021)\n\n1.67.0 (const: 1.67.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\nReturns the base 2 logarithm of the number, rounded down.\n\nThis is the same operation as [`u64::ilog2`](about:blank/primitive.u64.html#method.ilog2 \"method u64::ilog2\"), except that it has no failure cases to worry about since this value can never be zero.\n\n##### [§](#examples-67)Examples\n\n```\nassert_eq!(NonZero::new(7u64).unwrap().ilog2(), 2);\nassert_eq!(NonZero::new(8u64).unwrap().ilog2(), 3);\nassert_eq!(NonZero::new(9u64).unwrap().ilog2(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(7u64).unwrap().ilog2(),+2);%0A++++assert_eq!(NonZero::new(8u64).unwrap().ilog2(),+3);%0A++++assert_eq!(NonZero::new(9u64).unwrap().ilog2(),+3);%0A%7D&edition=2021)\n\n1.67.0 (const: 1.67.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\nReturns the base 10 logarithm of the number, rounded down.\n\nThis is the same operation as [`u64::ilog10`](about:blank/primitive.u64.html#method.ilog10 \"method u64::ilog10\"), except that it has no failure cases to worry about since this value can never be zero.\n\n##### [§](#examples-68)Examples\n\n```\nassert_eq!(NonZero::new(99u64).unwrap().ilog10(), 1);\nassert_eq!(NonZero::new(100u64).unwrap().ilog10(), 2);\nassert_eq!(NonZero::new(101u64).unwrap().ilog10(), 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(99u64).unwrap().ilog10(),+1);%0A++++assert_eq!(NonZero::new(100u64).unwrap().ilog10(),+2);%0A++++assert_eq!(NonZero::new(101u64).unwrap().ilog10(),+2);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\n🔬This is a nightly-only experimental API. (`num_midpoint` [#110840](https://github.com/rust-lang/rust/issues/110840))\n\nCalculates the middle point of `self` and `rhs`.\n\n`midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a sufficiently-large signed integral type. This implies that the result is always rounded towards negative infinity and that no overflow will ever occur.\n\n##### [§](#examples-69)Examples\n\n```\n#![feature(num_midpoint)]\n\nlet one = NonZero::new(1u64)?;\nlet two = NonZero::new(2u64)?;\nlet four = NonZero::new(4u64)?;\n\nassert_eq!(one.midpoint(four), two);\nassert_eq!(four.midpoint(one), two);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u64)?;%0Alet+two+=+NonZero::new(2u64)?;%0Alet+four+=+NonZero::new(4u64)?;%0A%0Aassert_eq!(one.midpoint(four),+two);%0Aassert_eq!(four.midpoint(one),+two);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.59.0 (const: 1.59.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\nReturns `true` if and only if `self == (1 << k)` for some `k`.\n\nOn many architectures, this function can perform better than `is_power_of_two()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-70)Examples\n\nBasic usage:\n\n```\nlet eight = std::num::NonZero::new(8u64).unwrap();\nassert!(eight.is_power_of_two());\nlet ten = std::num::NonZero::new(10u64).unwrap();\nassert!(!ten.is_power_of_two());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+eight+=+std::num::NonZero::new(8u64).unwrap();%0A++++assert!(eight.is_power_of_two());%0A++++let+ten+=+std::num::NonZero::new(10u64).unwrap();%0A++++assert!(!ten.is_power_of_two());%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\nMultiplies two non-zero integers together. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-71)Examples\n\n```\nlet two = NonZero::new(2u64)?;\nlet four = NonZero::new(4u64)?;\nlet max = NonZero::new(u64::MAX)?;\n\nassert_eq!(Some(four), two.checked_mul(two));\nassert_eq!(None, max.checked_mul(two));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u64)?;%0Alet+four+=+NonZero::new(4u64)?;%0Alet+max+=+NonZero::new(u64::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\nMultiplies two non-zero integers together. Return [`NonZero::<u64>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-72)Examples\n\n```\nlet two = NonZero::new(2u64)?;\nlet four = NonZero::new(4u64)?;\nlet max = NonZero::new(u64::MAX)?;\n\nassert_eq!(four, two.saturating_mul(two));\nassert_eq!(max, four.saturating_mul(max));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u64)?;%0Alet+four+=+NonZero::new(4u64)?;%0Alet+max+=+NonZero::new(u64::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nMultiplies two non-zero integers together, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self * rhs > u64::MAX`.\n\n##### [§](#examples-73)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet two = NonZero::new(2u64)?;\nlet four = NonZero::new(4u64)?;\n\nassert_eq!(four, unsafe { two.unchecked_mul(two) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u64)?;%0Alet+four+=+NonZero::new(4u64)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\nRaises non-zero value to an integer power. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-74)Examples\n\n```\nlet three = NonZero::new(3u64)?;\nlet twenty_seven = NonZero::new(27u64)?;\nlet half_max = NonZero::new(u64::MAX / 2)?;\n\nassert_eq!(Some(twenty_seven), three.checked_pow(3));\nassert_eq!(None, half_max.checked_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u64)?;%0Alet+twenty_seven+=+NonZero::new(27u64)?;%0Alet+half_max+=+NonZero::new(u64::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)\n\nRaise non-zero value to an integer power. Return [`NonZero::<u64>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-75)Examples\n\n```\nlet three = NonZero::new(3u64)?;\nlet twenty_seven = NonZero::new(27u64)?;\nlet max = NonZero::new(u64::MAX)?;\n\nassert_eq!(twenty_seven, three.saturating_pow(3));\nassert_eq!(max, max.saturating_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u64)?;%0Alet+twenty_seven+=+NonZero::new(27u64)?;%0Alet+max+=+NonZero::new(u64::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)[§](#impl-NonZero%3Cu128%3E)\n\n1.67.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\nThe size of this non-zero integer type in bits.\n\nThis value is equal to [`u128::BITS`](about:blank/primitive.u128.html#associatedconstant.BITS \"associated constant u128::BITS\").\n\n##### [§](#examples-76)Examples\n\n```\nassert_eq!(NonZero::<u128>::BITS, u128::BITS);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu128%3E::BITS,+u128::BITS);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\nReturns the number of leading zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-77)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<u128>::new(u128::MAX).unwrap();\n\nassert_eq!(n.leading_zeros(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu128%3E::new(u128::MAX).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\nReturns the number of trailing zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-78)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<u128>::new(0b0101000).unwrap();\n\nassert_eq!(n.trailing_zeros(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu128%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\n🔬This is a nightly-only experimental API. (`non_zero_count_ones` [#120287](https://github.com/rust-lang/rust/issues/120287))\n\nReturns the number of ones in the binary representation of `self`.\n\n##### [§](#examples-79)Examples\n\nBasic usage:\n\n```\n#![feature(non_zero_count_ones)]\n\nlet a = NonZero::<u128>::new(0b100_0000)?;\nlet b = NonZero::<u128>::new(0b100_0011)?;\n\nassert_eq!(a.count_ones(), NonZero::new(1)?);\nassert_eq!(b.count_ones(), NonZero::new(3)?);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Cu128%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Cu128%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\nThe smallest value that can be represented by this non-zero integer type, 1.\n\n##### [§](#examples-80)Examples\n\n```\nassert_eq!(NonZero::<u128>::MIN.get(), 1u128);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu128%3E::MIN.get(),+1u128);%0A%7D&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\nThe largest value that can be represented by this non-zero integer type, equal to [`u128::MAX`](about:blank/primitive.u128.html#associatedconstant.MAX \"associated constant u128::MAX\").\n\n##### [§](#examples-81)Examples\n\n```\nassert_eq!(NonZero::<u128>::MAX.get(), u128::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu128%3E::MAX.get(),+u128::MAX);%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\nAdds an unsigned integer to a non-zero value. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-82)Examples\n\n```\nlet one = NonZero::new(1u128)?;\nlet two = NonZero::new(2u128)?;\nlet max = NonZero::new(u128::MAX)?;\n\nassert_eq!(Some(two), one.checked_add(1));\nassert_eq!(None, max.checked_add(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u128)?;%0Alet+two+=+NonZero::new(2u128)?;%0Alet+max+=+NonZero::new(u128::MAX)?;%0A%0Aassert_eq!(Some(two),+one.checked_add(1));%0Aassert_eq!(None,+max.checked_add(1));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\nAdds an unsigned integer to a non-zero value. Return [`NonZero::<u128>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-83)Examples\n\n```\nlet one = NonZero::new(1u128)?;\nlet two = NonZero::new(2u128)?;\nlet max = NonZero::new(u128::MAX)?;\n\nassert_eq!(two, one.saturating_add(1));\nassert_eq!(max, max.saturating_add(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u128)?;%0Alet+two+=+NonZero::new(2u128)?;%0Alet+max+=+NonZero::new(u128::MAX)?;%0A%0Aassert_eq!(two,+one.saturating_add(1));%0Aassert_eq!(max,+max.saturating_add(1));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nAdds an unsigned integer to a non-zero value, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self + rhs > u128::MAX`.\n\n##### [§](#examples-84)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet one = NonZero::new(1u128)?;\nlet two = NonZero::new(2u128)?;\n\nassert_eq!(two, unsafe { one.unchecked_add(1) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u128)?;%0Alet+two+=+NonZero::new(2u128)?;%0A%0Aassert_eq!(two,+unsafe+%7B+one.unchecked_add(1)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\nReturns the smallest power of two greater than or equal to n. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if the next power of two is greater than the type’s maximum value. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-85)Examples\n\n```\nlet two = NonZero::new(2u128)?;\nlet three = NonZero::new(3u128)?;\nlet four = NonZero::new(4u128)?;\nlet max = NonZero::new(u128::MAX)?;\n\nassert_eq!(Some(two), two.checked_next_power_of_two() );\nassert_eq!(Some(four), three.checked_next_power_of_two() );\nassert_eq!(None, max.checked_next_power_of_two() );\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u128)?;%0Alet+three+=+NonZero::new(3u128)?;%0Alet+four+=+NonZero::new(4u128)?;%0Alet+max+=+NonZero::new(u128::MAX)?;%0A%0Aassert_eq!(Some(two),+two.checked_next_power_of_two()+);%0Aassert_eq!(Some(four),+three.checked_next_power_of_two()+);%0Aassert_eq!(None,+max.checked_next_power_of_two()+);%0ASome(())%0A%7D&edition=2021)\n\n1.67.0 (const: 1.67.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\nReturns the base 2 logarithm of the number, rounded down.\n\nThis is the same operation as [`u128::ilog2`](about:blank/primitive.u128.html#method.ilog2 \"method u128::ilog2\"), except that it has no failure cases to worry about since this value can never be zero.\n\n##### [§](#examples-86)Examples\n\n```\nassert_eq!(NonZero::new(7u128).unwrap().ilog2(), 2);\nassert_eq!(NonZero::new(8u128).unwrap().ilog2(), 3);\nassert_eq!(NonZero::new(9u128).unwrap().ilog2(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(7u128).unwrap().ilog2(),+2);%0A++++assert_eq!(NonZero::new(8u128).unwrap().ilog2(),+3);%0A++++assert_eq!(NonZero::new(9u128).unwrap().ilog2(),+3);%0A%7D&edition=2021)\n\n1.67.0 (const: 1.67.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\nReturns the base 10 logarithm of the number, rounded down.\n\nThis is the same operation as [`u128::ilog10`](about:blank/primitive.u128.html#method.ilog10 \"method u128::ilog10\"), except that it has no failure cases to worry about since this value can never be zero.\n\n##### [§](#examples-87)Examples\n\n```\nassert_eq!(NonZero::new(99u128).unwrap().ilog10(), 1);\nassert_eq!(NonZero::new(100u128).unwrap().ilog10(), 2);\nassert_eq!(NonZero::new(101u128).unwrap().ilog10(), 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(99u128).unwrap().ilog10(),+1);%0A++++assert_eq!(NonZero::new(100u128).unwrap().ilog10(),+2);%0A++++assert_eq!(NonZero::new(101u128).unwrap().ilog10(),+2);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\n🔬This is a nightly-only experimental API. (`num_midpoint` [#110840](https://github.com/rust-lang/rust/issues/110840))\n\nCalculates the middle point of `self` and `rhs`.\n\n`midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a sufficiently-large signed integral type. This implies that the result is always rounded towards negative infinity and that no overflow will ever occur.\n\n##### [§](#examples-88)Examples\n\n```\n#![feature(num_midpoint)]\n\nlet one = NonZero::new(1u128)?;\nlet two = NonZero::new(2u128)?;\nlet four = NonZero::new(4u128)?;\n\nassert_eq!(one.midpoint(four), two);\nassert_eq!(four.midpoint(one), two);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u128)?;%0Alet+two+=+NonZero::new(2u128)?;%0Alet+four+=+NonZero::new(4u128)?;%0A%0Aassert_eq!(one.midpoint(four),+two);%0Aassert_eq!(four.midpoint(one),+two);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.59.0 (const: 1.59.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\nReturns `true` if and only if `self == (1 << k)` for some `k`.\n\nOn many architectures, this function can perform better than `is_power_of_two()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-89)Examples\n\nBasic usage:\n\n```\nlet eight = std::num::NonZero::new(8u128).unwrap();\nassert!(eight.is_power_of_two());\nlet ten = std::num::NonZero::new(10u128).unwrap();\nassert!(!ten.is_power_of_two());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+eight+=+std::num::NonZero::new(8u128).unwrap();%0A++++assert!(eight.is_power_of_two());%0A++++let+ten+=+std::num::NonZero::new(10u128).unwrap();%0A++++assert!(!ten.is_power_of_two());%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\nMultiplies two non-zero integers together. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-90)Examples\n\n```\nlet two = NonZero::new(2u128)?;\nlet four = NonZero::new(4u128)?;\nlet max = NonZero::new(u128::MAX)?;\n\nassert_eq!(Some(four), two.checked_mul(two));\nassert_eq!(None, max.checked_mul(two));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u128)?;%0Alet+four+=+NonZero::new(4u128)?;%0Alet+max+=+NonZero::new(u128::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\nMultiplies two non-zero integers together. Return [`NonZero::<u128>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-91)Examples\n\n```\nlet two = NonZero::new(2u128)?;\nlet four = NonZero::new(4u128)?;\nlet max = NonZero::new(u128::MAX)?;\n\nassert_eq!(four, two.saturating_mul(two));\nassert_eq!(max, four.saturating_mul(max));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u128)?;%0Alet+four+=+NonZero::new(4u128)?;%0Alet+max+=+NonZero::new(u128::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nMultiplies two non-zero integers together, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self * rhs > u128::MAX`.\n\n##### [§](#examples-92)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet two = NonZero::new(2u128)?;\nlet four = NonZero::new(4u128)?;\n\nassert_eq!(four, unsafe { two.unchecked_mul(two) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u128)?;%0Alet+four+=+NonZero::new(4u128)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\nRaises non-zero value to an integer power. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-93)Examples\n\n```\nlet three = NonZero::new(3u128)?;\nlet twenty_seven = NonZero::new(27u128)?;\nlet half_max = NonZero::new(u128::MAX / 2)?;\n\nassert_eq!(Some(twenty_seven), three.checked_pow(3));\nassert_eq!(None, half_max.checked_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u128)?;%0Alet+twenty_seven+=+NonZero::new(27u128)?;%0Alet+half_max+=+NonZero::new(u128::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)\n\nRaise non-zero value to an integer power. Return [`NonZero::<u128>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-94)Examples\n\n```\nlet three = NonZero::new(3u128)?;\nlet twenty_seven = NonZero::new(27u128)?;\nlet max = NonZero::new(u128::MAX)?;\n\nassert_eq!(twenty_seven, three.saturating_pow(3));\nassert_eq!(max, max.saturating_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u128)?;%0Alet+twenty_seven+=+NonZero::new(27u128)?;%0Alet+max+=+NonZero::new(u128::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)[§](#impl-NonZero%3Cusize%3E)\n\n1.67.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\nThe size of this non-zero integer type in bits.\n\nThis value is equal to [`usize::BITS`](about:blank/primitive.usize.html#associatedconstant.BITS \"associated constant usize::BITS\").\n\n##### [§](#examples-95)Examples\n\n```\nassert_eq!(NonZero::<usize>::BITS, usize::BITS);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cusize%3E::BITS,+usize::BITS);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\nReturns the number of leading zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-96)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<usize>::new(usize::MAX).unwrap();\n\nassert_eq!(n.leading_zeros(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cusize%3E::new(usize::MAX).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\nReturns the number of trailing zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-97)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<usize>::new(0b0101000).unwrap();\n\nassert_eq!(n.trailing_zeros(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cusize%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\n🔬This is a nightly-only experimental API. (`non_zero_count_ones` [#120287](https://github.com/rust-lang/rust/issues/120287))\n\nReturns the number of ones in the binary representation of `self`.\n\n##### [§](#examples-98)Examples\n\nBasic usage:\n\n```\n#![feature(non_zero_count_ones)]\n\nlet a = NonZero::<usize>::new(0b100_0000)?;\nlet b = NonZero::<usize>::new(0b100_0011)?;\n\nassert_eq!(a.count_ones(), NonZero::new(1)?);\nassert_eq!(b.count_ones(), NonZero::new(3)?);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Cusize%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Cusize%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\nThe smallest value that can be represented by this non-zero integer type, 1.\n\n##### [§](#examples-99)Examples\n\n```\nassert_eq!(NonZero::<usize>::MIN.get(), 1usize);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cusize%3E::MIN.get(),+1usize);%0A%7D&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\nThe largest value that can be represented by this non-zero integer type, equal to [`usize::MAX`](about:blank/primitive.usize.html#associatedconstant.MAX \"associated constant usize::MAX\").\n\n##### [§](#examples-100)Examples\n\n```\nassert_eq!(NonZero::<usize>::MAX.get(), usize::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cusize%3E::MAX.get(),+usize::MAX);%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\nAdds an unsigned integer to a non-zero value. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-101)Examples\n\n```\nlet one = NonZero::new(1usize)?;\nlet two = NonZero::new(2usize)?;\nlet max = NonZero::new(usize::MAX)?;\n\nassert_eq!(Some(two), one.checked_add(1));\nassert_eq!(None, max.checked_add(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1usize)?;%0Alet+two+=+NonZero::new(2usize)?;%0Alet+max+=+NonZero::new(usize::MAX)?;%0A%0Aassert_eq!(Some(two),+one.checked_add(1));%0Aassert_eq!(None,+max.checked_add(1));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\nAdds an unsigned integer to a non-zero value. Return [`NonZero::<usize>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-102)Examples\n\n```\nlet one = NonZero::new(1usize)?;\nlet two = NonZero::new(2usize)?;\nlet max = NonZero::new(usize::MAX)?;\n\nassert_eq!(two, one.saturating_add(1));\nassert_eq!(max, max.saturating_add(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1usize)?;%0Alet+two+=+NonZero::new(2usize)?;%0Alet+max+=+NonZero::new(usize::MAX)?;%0A%0Aassert_eq!(two,+one.saturating_add(1));%0Aassert_eq!(max,+max.saturating_add(1));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nAdds an unsigned integer to a non-zero value, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self + rhs > usize::MAX`.\n\n##### [§](#examples-103)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet one = NonZero::new(1usize)?;\nlet two = NonZero::new(2usize)?;\n\nassert_eq!(two, unsafe { one.unchecked_add(1) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1usize)?;%0Alet+two+=+NonZero::new(2usize)?;%0A%0Aassert_eq!(two,+unsafe+%7B+one.unchecked_add(1)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\nReturns the smallest power of two greater than or equal to n. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if the next power of two is greater than the type’s maximum value. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-104)Examples\n\n```\nlet two = NonZero::new(2usize)?;\nlet three = NonZero::new(3usize)?;\nlet four = NonZero::new(4usize)?;\nlet max = NonZero::new(usize::MAX)?;\n\nassert_eq!(Some(two), two.checked_next_power_of_two() );\nassert_eq!(Some(four), three.checked_next_power_of_two() );\nassert_eq!(None, max.checked_next_power_of_two() );\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2usize)?;%0Alet+three+=+NonZero::new(3usize)?;%0Alet+four+=+NonZero::new(4usize)?;%0Alet+max+=+NonZero::new(usize::MAX)?;%0A%0Aassert_eq!(Some(two),+two.checked_next_power_of_two()+);%0Aassert_eq!(Some(four),+three.checked_next_power_of_two()+);%0Aassert_eq!(None,+max.checked_next_power_of_two()+);%0ASome(())%0A%7D&edition=2021)\n\n1.67.0 (const: 1.67.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\nReturns the base 2 logarithm of the number, rounded down.\n\nThis is the same operation as [`usize::ilog2`](about:blank/primitive.usize.html#method.ilog2 \"method usize::ilog2\"), except that it has no failure cases to worry about since this value can never be zero.\n\n##### [§](#examples-105)Examples\n\n```\nassert_eq!(NonZero::new(7usize).unwrap().ilog2(), 2);\nassert_eq!(NonZero::new(8usize).unwrap().ilog2(), 3);\nassert_eq!(NonZero::new(9usize).unwrap().ilog2(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(7usize).unwrap().ilog2(),+2);%0A++++assert_eq!(NonZero::new(8usize).unwrap().ilog2(),+3);%0A++++assert_eq!(NonZero::new(9usize).unwrap().ilog2(),+3);%0A%7D&edition=2021)\n\n1.67.0 (const: 1.67.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\nReturns the base 10 logarithm of the number, rounded down.\n\nThis is the same operation as [`usize::ilog10`](about:blank/primitive.usize.html#method.ilog10 \"method usize::ilog10\"), except that it has no failure cases to worry about since this value can never be zero.\n\n##### [§](#examples-106)Examples\n\n```\nassert_eq!(NonZero::new(99usize).unwrap().ilog10(), 1);\nassert_eq!(NonZero::new(100usize).unwrap().ilog10(), 2);\nassert_eq!(NonZero::new(101usize).unwrap().ilog10(), 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(99usize).unwrap().ilog10(),+1);%0A++++assert_eq!(NonZero::new(100usize).unwrap().ilog10(),+2);%0A++++assert_eq!(NonZero::new(101usize).unwrap().ilog10(),+2);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\n🔬This is a nightly-only experimental API. (`num_midpoint` [#110840](https://github.com/rust-lang/rust/issues/110840))\n\nCalculates the middle point of `self` and `rhs`.\n\n`midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a sufficiently-large signed integral type. This implies that the result is always rounded towards negative infinity and that no overflow will ever occur.\n\n##### [§](#examples-107)Examples\n\n```\n#![feature(num_midpoint)]\n\nlet one = NonZero::new(1usize)?;\nlet two = NonZero::new(2usize)?;\nlet four = NonZero::new(4usize)?;\n\nassert_eq!(one.midpoint(four), two);\nassert_eq!(four.midpoint(one), two);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1usize)?;%0Alet+two+=+NonZero::new(2usize)?;%0Alet+four+=+NonZero::new(4usize)?;%0A%0Aassert_eq!(one.midpoint(four),+two);%0Aassert_eq!(four.midpoint(one),+two);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.59.0 (const: 1.59.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\nReturns `true` if and only if `self == (1 << k)` for some `k`.\n\nOn many architectures, this function can perform better than `is_power_of_two()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-108)Examples\n\nBasic usage:\n\n```\nlet eight = std::num::NonZero::new(8usize).unwrap();\nassert!(eight.is_power_of_two());\nlet ten = std::num::NonZero::new(10usize).unwrap();\nassert!(!ten.is_power_of_two());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+eight+=+std::num::NonZero::new(8usize).unwrap();%0A++++assert!(eight.is_power_of_two());%0A++++let+ten+=+std::num::NonZero::new(10usize).unwrap();%0A++++assert!(!ten.is_power_of_two());%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\nMultiplies two non-zero integers together. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-109)Examples\n\n```\nlet two = NonZero::new(2usize)?;\nlet four = NonZero::new(4usize)?;\nlet max = NonZero::new(usize::MAX)?;\n\nassert_eq!(Some(four), two.checked_mul(two));\nassert_eq!(None, max.checked_mul(two));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2usize)?;%0Alet+four+=+NonZero::new(4usize)?;%0Alet+max+=+NonZero::new(usize::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\nMultiplies two non-zero integers together. Return [`NonZero::<usize>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-110)Examples\n\n```\nlet two = NonZero::new(2usize)?;\nlet four = NonZero::new(4usize)?;\nlet max = NonZero::new(usize::MAX)?;\n\nassert_eq!(four, two.saturating_mul(two));\nassert_eq!(max, four.saturating_mul(max));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2usize)?;%0Alet+four+=+NonZero::new(4usize)?;%0Alet+max+=+NonZero::new(usize::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nMultiplies two non-zero integers together, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self * rhs > usize::MAX`.\n\n##### [§](#examples-111)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet two = NonZero::new(2usize)?;\nlet four = NonZero::new(4usize)?;\n\nassert_eq!(four, unsafe { two.unchecked_mul(two) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2usize)?;%0Alet+four+=+NonZero::new(4usize)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\nRaises non-zero value to an integer power. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-112)Examples\n\n```\nlet three = NonZero::new(3usize)?;\nlet twenty_seven = NonZero::new(27usize)?;\nlet half_max = NonZero::new(usize::MAX / 2)?;\n\nassert_eq!(Some(twenty_seven), three.checked_pow(3));\nassert_eq!(None, half_max.checked_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3usize)?;%0Alet+twenty_seven+=+NonZero::new(27usize)?;%0Alet+half_max+=+NonZero::new(usize::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)\n\nRaise non-zero value to an integer power. Return [`NonZero::<usize>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-113)Examples\n\n```\nlet three = NonZero::new(3usize)?;\nlet twenty_seven = NonZero::new(27usize)?;\nlet max = NonZero::new(usize::MAX)?;\n\nassert_eq!(twenty_seven, three.saturating_pow(3));\nassert_eq!(max, max.saturating_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3usize)?;%0Alet+twenty_seven+=+NonZero::new(27usize)?;%0Alet+max+=+NonZero::new(usize::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)[§](#impl-NonZero%3Ci8%3E)\n\n1.67.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nThe size of this non-zero integer type in bits.\n\nThis value is equal to [`i8::BITS`](about:blank/primitive.i8.html#associatedconstant.BITS \"associated constant i8::BITS\").\n\n##### [§](#examples-114)Examples\n\n```\nassert_eq!(NonZero::<i8>::BITS, i8::BITS);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci8%3E::BITS,+i8::BITS);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nReturns the number of leading zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-115)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<i8>::new(-1i8).unwrap();\n\nassert_eq!(n.leading_zeros(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci8%3E::new(-1i8).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nReturns the number of trailing zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-116)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<i8>::new(0b0101000).unwrap();\n\nassert_eq!(n.trailing_zeros(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci8%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\n🔬This is a nightly-only experimental API. (`non_zero_count_ones` [#120287](https://github.com/rust-lang/rust/issues/120287))\n\nReturns the number of ones in the binary representation of `self`.\n\n##### [§](#examples-117)Examples\n\nBasic usage:\n\n```\n#![feature(non_zero_count_ones)]\n\nlet a = NonZero::<i8>::new(0b100_0000)?;\nlet b = NonZero::<i8>::new(0b100_0011)?;\n\nassert_eq!(a.count_ones(), NonZero::new(1)?);\nassert_eq!(b.count_ones(), NonZero::new(3)?);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Ci8%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Ci8%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nThe smallest value that can be represented by this non-zero integer type, equal to [`i8::MIN`](about:blank/primitive.i8.html#associatedconstant.MIN \"associated constant i8::MIN\").\n\nNote: While most integer types are defined for every whole number between `MIN` and `MAX`, signed non-zero integers are a special case. They have a “gap” at 0.\n\n##### [§](#examples-118)Examples\n\n```\nassert_eq!(NonZero::<i8>::MIN.get(), i8::MIN);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci8%3E::MIN.get(),+i8::MIN);%0A%7D&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nThe largest value that can be represented by this non-zero integer type, equal to [`i8::MAX`](about:blank/primitive.i8.html#associatedconstant.MAX \"associated constant i8::MAX\").\n\nNote: While most integer types are defined for every whole number between `MIN` and `MAX`, signed non-zero integers are a special case. They have a “gap” at 0.\n\n##### [§](#examples-119)Examples\n\n```\nassert_eq!(NonZero::<i8>::MAX.get(), i8::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci8%3E::MAX.get(),+i8::MAX);%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nComputes the absolute value of self. See [`i8::abs`](about:blank/primitive.i8.html#method.abs \"method i8::abs\") for documentation on overflow behaviour.\n\n##### [§](#example)Example\n\n```\nlet pos = NonZero::new(1i8)?;\nlet neg = NonZero::new(-1i8)?;\n\nassert_eq!(pos, pos.abs());\nassert_eq!(pos, neg.abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i8)?;%0Alet+neg+=+NonZero::new(-1i8)?;%0A%0Aassert_eq!(pos,+pos.abs());%0Aassert_eq!(pos,+neg.abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nChecked absolute value. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if `self == NonZero::<i8>::MIN`. The result cannot be zero.\n\n##### [§](#example-1)Example\n\n```\nlet pos = NonZero::new(1i8)?;\nlet neg = NonZero::new(-1i8)?;\nlet min = NonZero::new(i8::MIN)?;\n\nassert_eq!(Some(pos), neg.checked_abs());\nassert_eq!(None, min.checked_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i8)?;%0Alet+neg+=+NonZero::new(-1i8)?;%0Alet+min+=+NonZero::new(i8::MIN)?;%0A%0Aassert_eq!(Some(pos),+neg.checked_abs());%0Aassert_eq!(None,+min.checked_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nComputes the absolute value of self, with overflow information, see [`i8::overflowing_abs`](about:blank/primitive.i8.html#method.overflowing_abs \"method i8::overflowing_abs\").\n\n##### [§](#example-2)Example\n\n```\nlet pos = NonZero::new(1i8)?;\nlet neg = NonZero::new(-1i8)?;\nlet min = NonZero::new(i8::MIN)?;\n\nassert_eq!((pos, false), pos.overflowing_abs());\nassert_eq!((pos, false), neg.overflowing_abs());\nassert_eq!((min, true), min.overflowing_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i8)?;%0Alet+neg+=+NonZero::new(-1i8)?;%0Alet+min+=+NonZero::new(i8::MIN)?;%0A%0Aassert_eq!((pos,+false),+pos.overflowing_abs());%0Aassert_eq!((pos,+false),+neg.overflowing_abs());%0Aassert_eq!((min,+true),+min.overflowing_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nSaturating absolute value, see [`i8::saturating_abs`](about:blank/primitive.i8.html#method.saturating_abs \"method i8::saturating_abs\").\n\n##### [§](#example-3)Example\n\n```\nlet pos = NonZero::new(1i8)?;\nlet neg = NonZero::new(-1i8)?;\nlet min = NonZero::new(i8::MIN)?;\nlet min_plus = NonZero::new(i8::MIN + 1)?;\nlet max = NonZero::new(i8::MAX)?;\n\nassert_eq!(pos, pos.saturating_abs());\nassert_eq!(pos, neg.saturating_abs());\nassert_eq!(max, min.saturating_abs());\nassert_eq!(max, min_plus.saturating_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i8)?;%0Alet+neg+=+NonZero::new(-1i8)?;%0Alet+min+=+NonZero::new(i8::MIN)?;%0Alet+min_plus+=+NonZero::new(i8::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i8::MAX)?;%0A%0Aassert_eq!(pos,+pos.saturating_abs());%0Aassert_eq!(pos,+neg.saturating_abs());%0Aassert_eq!(max,+min.saturating_abs());%0Aassert_eq!(max,+min_plus.saturating_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nWrapping absolute value, see [`i8::wrapping_abs`](about:blank/primitive.i8.html#method.wrapping_abs \"method i8::wrapping_abs\").\n\n##### [§](#example-4)Example\n\n```\nlet pos = NonZero::new(1i8)?;\nlet neg = NonZero::new(-1i8)?;\nlet min = NonZero::new(i8::MIN)?;\n\nassert_eq!(pos, pos.wrapping_abs());\nassert_eq!(pos, neg.wrapping_abs());\nassert_eq!(min, min.wrapping_abs());\nassert_eq!(max, (-max).wrapping_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i8)?;%0Alet+neg+=+NonZero::new(-1i8)?;%0Alet+min+=+NonZero::new(i8::MIN)?;%0Alet+max+=+NonZero::new(i8::MAX)?;%0A%0Aassert_eq!(pos,+pos.wrapping_abs());%0Aassert_eq!(pos,+neg.wrapping_abs());%0Aassert_eq!(min,+min.wrapping_abs());%0Aassert_eq!(max,+(-max).wrapping_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nComputes the absolute value of self without any wrapping or panicking.\n\n##### [§](#example-5)Example\n\n```\nlet u_pos = NonZero::new(1u8)?;\nlet i_pos = NonZero::new(1i8)?;\nlet i_neg = NonZero::new(-1i8)?;\nlet i_min = NonZero::new(i8::MIN)?;\nlet u_max = NonZero::new(u8::MAX / 2 + 1)?;\n\nassert_eq!(u_pos, i_pos.unsigned_abs());\nassert_eq!(u_pos, i_neg.unsigned_abs());\nassert_eq!(u_max, i_min.unsigned_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+u_pos+=+NonZero::new(1u8)?;%0Alet+i_pos+=+NonZero::new(1i8)?;%0Alet+i_neg+=+NonZero::new(-1i8)?;%0Alet+i_min+=+NonZero::new(i8::MIN)?;%0Alet+u_max+=+NonZero::new(u8::MAX+/+2+%2B+1)?;%0A%0Aassert_eq!(u_pos,+i_pos.unsigned_abs());%0Aassert_eq!(u_pos,+i_neg.unsigned_abs());%0Aassert_eq!(u_max,+i_min.unsigned_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nReturns `true` if `self` is positive and `false` if the number is negative.\n\n##### [§](#example-6)Example\n\n```\nlet pos_five = NonZero::new(5i8)?;\nlet neg_five = NonZero::new(-5i8)?;\n\nassert!(pos_five.is_positive());\nassert!(!neg_five.is_positive());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i8)?;%0Alet+neg_five+=+NonZero::new(-5i8)?;%0A%0Aassert!(pos_five.is_positive());%0Aassert!(!neg_five.is_positive());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nReturns `true` if `self` is negative and `false` if the number is positive.\n\n##### [§](#example-7)Example\n\n```\nlet pos_five = NonZero::new(5i8)?;\nlet neg_five = NonZero::new(-5i8)?;\n\nassert!(neg_five.is_negative());\nassert!(!pos_five.is_negative());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i8)?;%0Alet+neg_five+=+NonZero::new(-5i8)?;%0A%0Aassert!(neg_five.is_negative());%0Aassert!(!pos_five.is_negative());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nChecked negation. Computes `-self`, returning `None` if `self == NonZero::<i8>::MIN`.\n\n##### [§](#example-8)Example\n\n```\nlet pos_five = NonZero::new(5i8)?;\nlet neg_five = NonZero::new(-5i8)?;\nlet min = NonZero::new(i8::MIN)?;\n\nassert_eq!(pos_five.checked_neg(), Some(neg_five));\nassert_eq!(min.checked_neg(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i8)?;%0Alet+neg_five+=+NonZero::new(-5i8)?;%0Alet+min+=+NonZero::new(i8::MIN)?;%0A%0Aassert_eq!(pos_five.checked_neg(),+Some(neg_five));%0Aassert_eq!(min.checked_neg(),+None);%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nNegates self, overflowing if this is equal to the minimum value.\n\nSee [`i8::overflowing_neg`](about:blank/primitive.i8.html#method.overflowing_neg \"method i8::overflowing_neg\") for documentation on overflow behaviour.\n\n##### [§](#example-9)Example\n\n```\nlet pos_five = NonZero::new(5i8)?;\nlet neg_five = NonZero::new(-5i8)?;\nlet min = NonZero::new(i8::MIN)?;\n\nassert_eq!(pos_five.overflowing_neg(), (neg_five, false));\nassert_eq!(min.overflowing_neg(), (min, true));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i8)?;%0Alet+neg_five+=+NonZero::new(-5i8)?;%0Alet+min+=+NonZero::new(i8::MIN)?;%0A%0Aassert_eq!(pos_five.overflowing_neg(),+(neg_five,+false));%0Aassert_eq!(min.overflowing_neg(),+(min,+true));%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nSaturating negation. Computes `-self`, returning [`NonZero::<i8>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") if `self == NonZero::<i8>::MIN` instead of overflowing.\n\n##### [§](#example-10)Example\n\n```\nlet pos_five = NonZero::new(5i8)?;\nlet neg_five = NonZero::new(-5i8)?;\nlet min = NonZero::new(i8::MIN)?;\nlet min_plus_one = NonZero::new(i8::MIN + 1)?;\nlet max = NonZero::new(i8::MAX)?;\n\nassert_eq!(pos_five.saturating_neg(), neg_five);\nassert_eq!(min.saturating_neg(), max);\nassert_eq!(max.saturating_neg(), min_plus_one);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i8)?;%0Alet+neg_five+=+NonZero::new(-5i8)?;%0Alet+min+=+NonZero::new(i8::MIN)?;%0Alet+min_plus_one+=+NonZero::new(i8::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i8::MAX)?;%0A%0Aassert_eq!(pos_five.saturating_neg(),+neg_five);%0Aassert_eq!(min.saturating_neg(),+max);%0Aassert_eq!(max.saturating_neg(),+min_plus_one);%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nWrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.\n\nSee [`i8::wrapping_neg`](about:blank/primitive.i8.html#method.wrapping_neg \"method i8::wrapping_neg\") for documentation on overflow behaviour.\n\n##### [§](#example-11)Example\n\n```\nlet pos_five = NonZero::new(5i8)?;\nlet neg_five = NonZero::new(-5i8)?;\nlet min = NonZero::new(i8::MIN)?;\n\nassert_eq!(pos_five.wrapping_neg(), neg_five);\nassert_eq!(min.wrapping_neg(), min);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i8)?;%0Alet+neg_five+=+NonZero::new(-5i8)?;%0Alet+min+=+NonZero::new(i8::MIN)?;%0A%0Aassert_eq!(pos_five.wrapping_neg(),+neg_five);%0Aassert_eq!(min.wrapping_neg(),+min);%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nMultiplies two non-zero integers together. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-120)Examples\n\n```\nlet two = NonZero::new(2i8)?;\nlet four = NonZero::new(4i8)?;\nlet max = NonZero::new(i8::MAX)?;\n\nassert_eq!(Some(four), two.checked_mul(two));\nassert_eq!(None, max.checked_mul(two));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i8)?;%0Alet+four+=+NonZero::new(4i8)?;%0Alet+max+=+NonZero::new(i8::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nMultiplies two non-zero integers together. Return [`NonZero::<i8>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-121)Examples\n\n```\nlet two = NonZero::new(2i8)?;\nlet four = NonZero::new(4i8)?;\nlet max = NonZero::new(i8::MAX)?;\n\nassert_eq!(four, two.saturating_mul(two));\nassert_eq!(max, four.saturating_mul(max));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i8)?;%0Alet+four+=+NonZero::new(4i8)?;%0Alet+max+=+NonZero::new(i8::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nMultiplies two non-zero integers together, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self * rhs > i8::MAX`, or `self * rhs < i8::MIN`.\n\n##### [§](#examples-122)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet two = NonZero::new(2i8)?;\nlet four = NonZero::new(4i8)?;\n\nassert_eq!(four, unsafe { two.unchecked_mul(two) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i8)?;%0Alet+four+=+NonZero::new(4i8)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nRaises non-zero value to an integer power. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-123)Examples\n\n```\nlet three = NonZero::new(3i8)?;\nlet twenty_seven = NonZero::new(27i8)?;\nlet half_max = NonZero::new(i8::MAX / 2)?;\n\nassert_eq!(Some(twenty_seven), three.checked_pow(3));\nassert_eq!(None, half_max.checked_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i8)?;%0Alet+twenty_seven+=+NonZero::new(27i8)?;%0Alet+half_max+=+NonZero::new(i8::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)\n\nRaise non-zero value to an integer power. Return [`NonZero::<i8>::MIN`](about:blank/struct.NonZero.html#associatedconstant.MIN \"associated constant std::num::NonZero::MIN\") or [`NonZero::<i8>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-124)Examples\n\n```\nlet three = NonZero::new(3i8)?;\nlet twenty_seven = NonZero::new(27i8)?;\nlet max = NonZero::new(i8::MAX)?;\n\nassert_eq!(twenty_seven, three.saturating_pow(3));\nassert_eq!(max, max.saturating_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i8)?;%0Alet+twenty_seven+=+NonZero::new(27i8)?;%0Alet+max+=+NonZero::new(i8::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)[§](#impl-NonZero%3Ci16%3E)\n\n1.67.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nThe size of this non-zero integer type in bits.\n\nThis value is equal to [`i16::BITS`](about:blank/primitive.i16.html#associatedconstant.BITS \"associated constant i16::BITS\").\n\n##### [§](#examples-125)Examples\n\n```\nassert_eq!(NonZero::<i16>::BITS, i16::BITS);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci16%3E::BITS,+i16::BITS);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nReturns the number of leading zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-126)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<i16>::new(-1i16).unwrap();\n\nassert_eq!(n.leading_zeros(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci16%3E::new(-1i16).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nReturns the number of trailing zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-127)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<i16>::new(0b0101000).unwrap();\n\nassert_eq!(n.trailing_zeros(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci16%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\n🔬This is a nightly-only experimental API. (`non_zero_count_ones` [#120287](https://github.com/rust-lang/rust/issues/120287))\n\nReturns the number of ones in the binary representation of `self`.\n\n##### [§](#examples-128)Examples\n\nBasic usage:\n\n```\n#![feature(non_zero_count_ones)]\n\nlet a = NonZero::<i16>::new(0b100_0000)?;\nlet b = NonZero::<i16>::new(0b100_0011)?;\n\nassert_eq!(a.count_ones(), NonZero::new(1)?);\nassert_eq!(b.count_ones(), NonZero::new(3)?);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Ci16%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Ci16%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nThe smallest value that can be represented by this non-zero integer type, equal to [`i16::MIN`](about:blank/primitive.i16.html#associatedconstant.MIN \"associated constant i16::MIN\").\n\nNote: While most integer types are defined for every whole number between `MIN` and `MAX`, signed non-zero integers are a special case. They have a “gap” at 0.\n\n##### [§](#examples-129)Examples\n\n```\nassert_eq!(NonZero::<i16>::MIN.get(), i16::MIN);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci16%3E::MIN.get(),+i16::MIN);%0A%7D&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nThe largest value that can be represented by this non-zero integer type, equal to [`i16::MAX`](about:blank/primitive.i16.html#associatedconstant.MAX \"associated constant i16::MAX\").\n\nNote: While most integer types are defined for every whole number between `MIN` and `MAX`, signed non-zero integers are a special case. They have a “gap” at 0.\n\n##### [§](#examples-130)Examples\n\n```\nassert_eq!(NonZero::<i16>::MAX.get(), i16::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci16%3E::MAX.get(),+i16::MAX);%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nComputes the absolute value of self. See [`i16::abs`](about:blank/primitive.i16.html#method.abs \"method i16::abs\") for documentation on overflow behaviour.\n\n##### [§](#example-12)Example\n\n```\nlet pos = NonZero::new(1i16)?;\nlet neg = NonZero::new(-1i16)?;\n\nassert_eq!(pos, pos.abs());\nassert_eq!(pos, neg.abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i16)?;%0Alet+neg+=+NonZero::new(-1i16)?;%0A%0Aassert_eq!(pos,+pos.abs());%0Aassert_eq!(pos,+neg.abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nChecked absolute value. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if `self == NonZero::<i16>::MIN`. The result cannot be zero.\n\n##### [§](#example-13)Example\n\n```\nlet pos = NonZero::new(1i16)?;\nlet neg = NonZero::new(-1i16)?;\nlet min = NonZero::new(i16::MIN)?;\n\nassert_eq!(Some(pos), neg.checked_abs());\nassert_eq!(None, min.checked_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i16)?;%0Alet+neg+=+NonZero::new(-1i16)?;%0Alet+min+=+NonZero::new(i16::MIN)?;%0A%0Aassert_eq!(Some(pos),+neg.checked_abs());%0Aassert_eq!(None,+min.checked_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nComputes the absolute value of self, with overflow information, see [`i16::overflowing_abs`](about:blank/primitive.i16.html#method.overflowing_abs \"method i16::overflowing_abs\").\n\n##### [§](#example-14)Example\n\n```\nlet pos = NonZero::new(1i16)?;\nlet neg = NonZero::new(-1i16)?;\nlet min = NonZero::new(i16::MIN)?;\n\nassert_eq!((pos, false), pos.overflowing_abs());\nassert_eq!((pos, false), neg.overflowing_abs());\nassert_eq!((min, true), min.overflowing_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i16)?;%0Alet+neg+=+NonZero::new(-1i16)?;%0Alet+min+=+NonZero::new(i16::MIN)?;%0A%0Aassert_eq!((pos,+false),+pos.overflowing_abs());%0Aassert_eq!((pos,+false),+neg.overflowing_abs());%0Aassert_eq!((min,+true),+min.overflowing_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nSaturating absolute value, see [`i16::saturating_abs`](about:blank/primitive.i16.html#method.saturating_abs \"method i16::saturating_abs\").\n\n##### [§](#example-15)Example\n\n```\nlet pos = NonZero::new(1i16)?;\nlet neg = NonZero::new(-1i16)?;\nlet min = NonZero::new(i16::MIN)?;\nlet min_plus = NonZero::new(i16::MIN + 1)?;\nlet max = NonZero::new(i16::MAX)?;\n\nassert_eq!(pos, pos.saturating_abs());\nassert_eq!(pos, neg.saturating_abs());\nassert_eq!(max, min.saturating_abs());\nassert_eq!(max, min_plus.saturating_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i16)?;%0Alet+neg+=+NonZero::new(-1i16)?;%0Alet+min+=+NonZero::new(i16::MIN)?;%0Alet+min_plus+=+NonZero::new(i16::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i16::MAX)?;%0A%0Aassert_eq!(pos,+pos.saturating_abs());%0Aassert_eq!(pos,+neg.saturating_abs());%0Aassert_eq!(max,+min.saturating_abs());%0Aassert_eq!(max,+min_plus.saturating_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nWrapping absolute value, see [`i16::wrapping_abs`](about:blank/primitive.i16.html#method.wrapping_abs \"method i16::wrapping_abs\").\n\n##### [§](#example-16)Example\n\n```\nlet pos = NonZero::new(1i16)?;\nlet neg = NonZero::new(-1i16)?;\nlet min = NonZero::new(i16::MIN)?;\n\nassert_eq!(pos, pos.wrapping_abs());\nassert_eq!(pos, neg.wrapping_abs());\nassert_eq!(min, min.wrapping_abs());\nassert_eq!(max, (-max).wrapping_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i16)?;%0Alet+neg+=+NonZero::new(-1i16)?;%0Alet+min+=+NonZero::new(i16::MIN)?;%0Alet+max+=+NonZero::new(i16::MAX)?;%0A%0Aassert_eq!(pos,+pos.wrapping_abs());%0Aassert_eq!(pos,+neg.wrapping_abs());%0Aassert_eq!(min,+min.wrapping_abs());%0Aassert_eq!(max,+(-max).wrapping_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nComputes the absolute value of self without any wrapping or panicking.\n\n##### [§](#example-17)Example\n\n```\nlet u_pos = NonZero::new(1u16)?;\nlet i_pos = NonZero::new(1i16)?;\nlet i_neg = NonZero::new(-1i16)?;\nlet i_min = NonZero::new(i16::MIN)?;\nlet u_max = NonZero::new(u16::MAX / 2 + 1)?;\n\nassert_eq!(u_pos, i_pos.unsigned_abs());\nassert_eq!(u_pos, i_neg.unsigned_abs());\nassert_eq!(u_max, i_min.unsigned_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+u_pos+=+NonZero::new(1u16)?;%0Alet+i_pos+=+NonZero::new(1i16)?;%0Alet+i_neg+=+NonZero::new(-1i16)?;%0Alet+i_min+=+NonZero::new(i16::MIN)?;%0Alet+u_max+=+NonZero::new(u16::MAX+/+2+%2B+1)?;%0A%0Aassert_eq!(u_pos,+i_pos.unsigned_abs());%0Aassert_eq!(u_pos,+i_neg.unsigned_abs());%0Aassert_eq!(u_max,+i_min.unsigned_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nReturns `true` if `self` is positive and `false` if the number is negative.\n\n##### [§](#example-18)Example\n\n```\nlet pos_five = NonZero::new(5i16)?;\nlet neg_five = NonZero::new(-5i16)?;\n\nassert!(pos_five.is_positive());\nassert!(!neg_five.is_positive());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i16)?;%0Alet+neg_five+=+NonZero::new(-5i16)?;%0A%0Aassert!(pos_five.is_positive());%0Aassert!(!neg_five.is_positive());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nReturns `true` if `self` is negative and `false` if the number is positive.\n\n##### [§](#example-19)Example\n\n```\nlet pos_five = NonZero::new(5i16)?;\nlet neg_five = NonZero::new(-5i16)?;\n\nassert!(neg_five.is_negative());\nassert!(!pos_five.is_negative());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i16)?;%0Alet+neg_five+=+NonZero::new(-5i16)?;%0A%0Aassert!(neg_five.is_negative());%0Aassert!(!pos_five.is_negative());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nChecked negation. Computes `-self`, returning `None` if `self == NonZero::<i16>::MIN`.\n\n##### [§](#example-20)Example\n\n```\nlet pos_five = NonZero::new(5i16)?;\nlet neg_five = NonZero::new(-5i16)?;\nlet min = NonZero::new(i16::MIN)?;\n\nassert_eq!(pos_five.checked_neg(), Some(neg_five));\nassert_eq!(min.checked_neg(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i16)?;%0Alet+neg_five+=+NonZero::new(-5i16)?;%0Alet+min+=+NonZero::new(i16::MIN)?;%0A%0Aassert_eq!(pos_five.checked_neg(),+Some(neg_five));%0Aassert_eq!(min.checked_neg(),+None);%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nNegates self, overflowing if this is equal to the minimum value.\n\nSee [`i16::overflowing_neg`](about:blank/primitive.i16.html#method.overflowing_neg \"method i16::overflowing_neg\") for documentation on overflow behaviour.\n\n##### [§](#example-21)Example\n\n```\nlet pos_five = NonZero::new(5i16)?;\nlet neg_five = NonZero::new(-5i16)?;\nlet min = NonZero::new(i16::MIN)?;\n\nassert_eq!(pos_five.overflowing_neg(), (neg_five, false));\nassert_eq!(min.overflowing_neg(), (min, true));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i16)?;%0Alet+neg_five+=+NonZero::new(-5i16)?;%0Alet+min+=+NonZero::new(i16::MIN)?;%0A%0Aassert_eq!(pos_five.overflowing_neg(),+(neg_five,+false));%0Aassert_eq!(min.overflowing_neg(),+(min,+true));%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nSaturating negation. Computes `-self`, returning [`NonZero::<i16>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") if `self == NonZero::<i16>::MIN` instead of overflowing.\n\n##### [§](#example-22)Example\n\n```\nlet pos_five = NonZero::new(5i16)?;\nlet neg_five = NonZero::new(-5i16)?;\nlet min = NonZero::new(i16::MIN)?;\nlet min_plus_one = NonZero::new(i16::MIN + 1)?;\nlet max = NonZero::new(i16::MAX)?;\n\nassert_eq!(pos_five.saturating_neg(), neg_five);\nassert_eq!(min.saturating_neg(), max);\nassert_eq!(max.saturating_neg(), min_plus_one);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i16)?;%0Alet+neg_five+=+NonZero::new(-5i16)?;%0Alet+min+=+NonZero::new(i16::MIN)?;%0Alet+min_plus_one+=+NonZero::new(i16::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i16::MAX)?;%0A%0Aassert_eq!(pos_five.saturating_neg(),+neg_five);%0Aassert_eq!(min.saturating_neg(),+max);%0Aassert_eq!(max.saturating_neg(),+min_plus_one);%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nWrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.\n\nSee [`i16::wrapping_neg`](about:blank/primitive.i16.html#method.wrapping_neg \"method i16::wrapping_neg\") for documentation on overflow behaviour.\n\n##### [§](#example-23)Example\n\n```\nlet pos_five = NonZero::new(5i16)?;\nlet neg_five = NonZero::new(-5i16)?;\nlet min = NonZero::new(i16::MIN)?;\n\nassert_eq!(pos_five.wrapping_neg(), neg_five);\nassert_eq!(min.wrapping_neg(), min);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i16)?;%0Alet+neg_five+=+NonZero::new(-5i16)?;%0Alet+min+=+NonZero::new(i16::MIN)?;%0A%0Aassert_eq!(pos_five.wrapping_neg(),+neg_five);%0Aassert_eq!(min.wrapping_neg(),+min);%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nMultiplies two non-zero integers together. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-131)Examples\n\n```\nlet two = NonZero::new(2i16)?;\nlet four = NonZero::new(4i16)?;\nlet max = NonZero::new(i16::MAX)?;\n\nassert_eq!(Some(four), two.checked_mul(two));\nassert_eq!(None, max.checked_mul(two));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i16)?;%0Alet+four+=+NonZero::new(4i16)?;%0Alet+max+=+NonZero::new(i16::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nMultiplies two non-zero integers together. Return [`NonZero::<i16>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-132)Examples\n\n```\nlet two = NonZero::new(2i16)?;\nlet four = NonZero::new(4i16)?;\nlet max = NonZero::new(i16::MAX)?;\n\nassert_eq!(four, two.saturating_mul(two));\nassert_eq!(max, four.saturating_mul(max));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i16)?;%0Alet+four+=+NonZero::new(4i16)?;%0Alet+max+=+NonZero::new(i16::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nMultiplies two non-zero integers together, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self * rhs > i16::MAX`, or `self * rhs < i16::MIN`.\n\n##### [§](#examples-133)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet two = NonZero::new(2i16)?;\nlet four = NonZero::new(4i16)?;\n\nassert_eq!(four, unsafe { two.unchecked_mul(two) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i16)?;%0Alet+four+=+NonZero::new(4i16)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nRaises non-zero value to an integer power. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-134)Examples\n\n```\nlet three = NonZero::new(3i16)?;\nlet twenty_seven = NonZero::new(27i16)?;\nlet half_max = NonZero::new(i16::MAX / 2)?;\n\nassert_eq!(Some(twenty_seven), three.checked_pow(3));\nassert_eq!(None, half_max.checked_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i16)?;%0Alet+twenty_seven+=+NonZero::new(27i16)?;%0Alet+half_max+=+NonZero::new(i16::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)\n\nRaise non-zero value to an integer power. Return [`NonZero::<i16>::MIN`](about:blank/struct.NonZero.html#associatedconstant.MIN \"associated constant std::num::NonZero::MIN\") or [`NonZero::<i16>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-135)Examples\n\n```\nlet three = NonZero::new(3i16)?;\nlet twenty_seven = NonZero::new(27i16)?;\nlet max = NonZero::new(i16::MAX)?;\n\nassert_eq!(twenty_seven, three.saturating_pow(3));\nassert_eq!(max, max.saturating_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i16)?;%0Alet+twenty_seven+=+NonZero::new(27i16)?;%0Alet+max+=+NonZero::new(i16::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)[§](#impl-NonZero%3Ci32%3E)\n\n1.67.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nThe size of this non-zero integer type in bits.\n\nThis value is equal to [`i32::BITS`](about:blank/primitive.i32.html#associatedconstant.BITS \"associated constant i32::BITS\").\n\n##### [§](#examples-136)Examples\n\n```\nassert_eq!(NonZero::<i32>::BITS, i32::BITS);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci32%3E::BITS,+i32::BITS);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nReturns the number of leading zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-137)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<i32>::new(-1i32).unwrap();\n\nassert_eq!(n.leading_zeros(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci32%3E::new(-1i32).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nReturns the number of trailing zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-138)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<i32>::new(0b0101000).unwrap();\n\nassert_eq!(n.trailing_zeros(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci32%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\n🔬This is a nightly-only experimental API. (`non_zero_count_ones` [#120287](https://github.com/rust-lang/rust/issues/120287))\n\nReturns the number of ones in the binary representation of `self`.\n\n##### [§](#examples-139)Examples\n\nBasic usage:\n\n```\n#![feature(non_zero_count_ones)]\n\nlet a = NonZero::<i32>::new(0b100_0000)?;\nlet b = NonZero::<i32>::new(0b100_0011)?;\n\nassert_eq!(a.count_ones(), NonZero::new(1)?);\nassert_eq!(b.count_ones(), NonZero::new(3)?);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Ci32%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Ci32%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nThe smallest value that can be represented by this non-zero integer type, equal to [`i32::MIN`](about:blank/primitive.i32.html#associatedconstant.MIN \"associated constant i32::MIN\").\n\nNote: While most integer types are defined for every whole number between `MIN` and `MAX`, signed non-zero integers are a special case. They have a “gap” at 0.\n\n##### [§](#examples-140)Examples\n\n```\nassert_eq!(NonZero::<i32>::MIN.get(), i32::MIN);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci32%3E::MIN.get(),+i32::MIN);%0A%7D&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nThe largest value that can be represented by this non-zero integer type, equal to [`i32::MAX`](about:blank/primitive.i32.html#associatedconstant.MAX \"associated constant i32::MAX\").\n\nNote: While most integer types are defined for every whole number between `MIN` and `MAX`, signed non-zero integers are a special case. They have a “gap” at 0.\n\n##### [§](#examples-141)Examples\n\n```\nassert_eq!(NonZero::<i32>::MAX.get(), i32::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci32%3E::MAX.get(),+i32::MAX);%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nComputes the absolute value of self. See [`i32::abs`](about:blank/primitive.i32.html#method.abs \"method i32::abs\") for documentation on overflow behaviour.\n\n##### [§](#example-24)Example\n\n```\nlet pos = NonZero::new(1i32)?;\nlet neg = NonZero::new(-1i32)?;\n\nassert_eq!(pos, pos.abs());\nassert_eq!(pos, neg.abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i32)?;%0Alet+neg+=+NonZero::new(-1i32)?;%0A%0Aassert_eq!(pos,+pos.abs());%0Aassert_eq!(pos,+neg.abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nChecked absolute value. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if `self == NonZero::<i32>::MIN`. The result cannot be zero.\n\n##### [§](#example-25)Example\n\n```\nlet pos = NonZero::new(1i32)?;\nlet neg = NonZero::new(-1i32)?;\nlet min = NonZero::new(i32::MIN)?;\n\nassert_eq!(Some(pos), neg.checked_abs());\nassert_eq!(None, min.checked_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i32)?;%0Alet+neg+=+NonZero::new(-1i32)?;%0Alet+min+=+NonZero::new(i32::MIN)?;%0A%0Aassert_eq!(Some(pos),+neg.checked_abs());%0Aassert_eq!(None,+min.checked_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nComputes the absolute value of self, with overflow information, see [`i32::overflowing_abs`](about:blank/primitive.i32.html#method.overflowing_abs \"method i32::overflowing_abs\").\n\n##### [§](#example-26)Example\n\n```\nlet pos = NonZero::new(1i32)?;\nlet neg = NonZero::new(-1i32)?;\nlet min = NonZero::new(i32::MIN)?;\n\nassert_eq!((pos, false), pos.overflowing_abs());\nassert_eq!((pos, false), neg.overflowing_abs());\nassert_eq!((min, true), min.overflowing_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i32)?;%0Alet+neg+=+NonZero::new(-1i32)?;%0Alet+min+=+NonZero::new(i32::MIN)?;%0A%0Aassert_eq!((pos,+false),+pos.overflowing_abs());%0Aassert_eq!((pos,+false),+neg.overflowing_abs());%0Aassert_eq!((min,+true),+min.overflowing_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nSaturating absolute value, see [`i32::saturating_abs`](about:blank/primitive.i32.html#method.saturating_abs \"method i32::saturating_abs\").\n\n##### [§](#example-27)Example\n\n```\nlet pos = NonZero::new(1i32)?;\nlet neg = NonZero::new(-1i32)?;\nlet min = NonZero::new(i32::MIN)?;\nlet min_plus = NonZero::new(i32::MIN + 1)?;\nlet max = NonZero::new(i32::MAX)?;\n\nassert_eq!(pos, pos.saturating_abs());\nassert_eq!(pos, neg.saturating_abs());\nassert_eq!(max, min.saturating_abs());\nassert_eq!(max, min_plus.saturating_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i32)?;%0Alet+neg+=+NonZero::new(-1i32)?;%0Alet+min+=+NonZero::new(i32::MIN)?;%0Alet+min_plus+=+NonZero::new(i32::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i32::MAX)?;%0A%0Aassert_eq!(pos,+pos.saturating_abs());%0Aassert_eq!(pos,+neg.saturating_abs());%0Aassert_eq!(max,+min.saturating_abs());%0Aassert_eq!(max,+min_plus.saturating_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nWrapping absolute value, see [`i32::wrapping_abs`](about:blank/primitive.i32.html#method.wrapping_abs \"method i32::wrapping_abs\").\n\n##### [§](#example-28)Example\n\n```\nlet pos = NonZero::new(1i32)?;\nlet neg = NonZero::new(-1i32)?;\nlet min = NonZero::new(i32::MIN)?;\n\nassert_eq!(pos, pos.wrapping_abs());\nassert_eq!(pos, neg.wrapping_abs());\nassert_eq!(min, min.wrapping_abs());\nassert_eq!(max, (-max).wrapping_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i32)?;%0Alet+neg+=+NonZero::new(-1i32)?;%0Alet+min+=+NonZero::new(i32::MIN)?;%0Alet+max+=+NonZero::new(i32::MAX)?;%0A%0Aassert_eq!(pos,+pos.wrapping_abs());%0Aassert_eq!(pos,+neg.wrapping_abs());%0Aassert_eq!(min,+min.wrapping_abs());%0Aassert_eq!(max,+(-max).wrapping_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nComputes the absolute value of self without any wrapping or panicking.\n\n##### [§](#example-29)Example\n\n```\nlet u_pos = NonZero::new(1u32)?;\nlet i_pos = NonZero::new(1i32)?;\nlet i_neg = NonZero::new(-1i32)?;\nlet i_min = NonZero::new(i32::MIN)?;\nlet u_max = NonZero::new(u32::MAX / 2 + 1)?;\n\nassert_eq!(u_pos, i_pos.unsigned_abs());\nassert_eq!(u_pos, i_neg.unsigned_abs());\nassert_eq!(u_max, i_min.unsigned_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+u_pos+=+NonZero::new(1u32)?;%0Alet+i_pos+=+NonZero::new(1i32)?;%0Alet+i_neg+=+NonZero::new(-1i32)?;%0Alet+i_min+=+NonZero::new(i32::MIN)?;%0Alet+u_max+=+NonZero::new(u32::MAX+/+2+%2B+1)?;%0A%0Aassert_eq!(u_pos,+i_pos.unsigned_abs());%0Aassert_eq!(u_pos,+i_neg.unsigned_abs());%0Aassert_eq!(u_max,+i_min.unsigned_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nReturns `true` if `self` is positive and `false` if the number is negative.\n\n##### [§](#example-30)Example\n\n```\nlet pos_five = NonZero::new(5i32)?;\nlet neg_five = NonZero::new(-5i32)?;\n\nassert!(pos_five.is_positive());\nassert!(!neg_five.is_positive());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i32)?;%0Alet+neg_five+=+NonZero::new(-5i32)?;%0A%0Aassert!(pos_five.is_positive());%0Aassert!(!neg_five.is_positive());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nReturns `true` if `self` is negative and `false` if the number is positive.\n\n##### [§](#example-31)Example\n\n```\nlet pos_five = NonZero::new(5i32)?;\nlet neg_five = NonZero::new(-5i32)?;\n\nassert!(neg_five.is_negative());\nassert!(!pos_five.is_negative());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i32)?;%0Alet+neg_five+=+NonZero::new(-5i32)?;%0A%0Aassert!(neg_five.is_negative());%0Aassert!(!pos_five.is_negative());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nChecked negation. Computes `-self`, returning `None` if `self == NonZero::<i32>::MIN`.\n\n##### [§](#example-32)Example\n\n```\nlet pos_five = NonZero::new(5i32)?;\nlet neg_five = NonZero::new(-5i32)?;\nlet min = NonZero::new(i32::MIN)?;\n\nassert_eq!(pos_five.checked_neg(), Some(neg_five));\nassert_eq!(min.checked_neg(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i32)?;%0Alet+neg_five+=+NonZero::new(-5i32)?;%0Alet+min+=+NonZero::new(i32::MIN)?;%0A%0Aassert_eq!(pos_five.checked_neg(),+Some(neg_five));%0Aassert_eq!(min.checked_neg(),+None);%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nNegates self, overflowing if this is equal to the minimum value.\n\nSee [`i32::overflowing_neg`](about:blank/primitive.i32.html#method.overflowing_neg \"method i32::overflowing_neg\") for documentation on overflow behaviour.\n\n##### [§](#example-33)Example\n\n```\nlet pos_five = NonZero::new(5i32)?;\nlet neg_five = NonZero::new(-5i32)?;\nlet min = NonZero::new(i32::MIN)?;\n\nassert_eq!(pos_five.overflowing_neg(), (neg_five, false));\nassert_eq!(min.overflowing_neg(), (min, true));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i32)?;%0Alet+neg_five+=+NonZero::new(-5i32)?;%0Alet+min+=+NonZero::new(i32::MIN)?;%0A%0Aassert_eq!(pos_five.overflowing_neg(),+(neg_five,+false));%0Aassert_eq!(min.overflowing_neg(),+(min,+true));%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nSaturating negation. Computes `-self`, returning [`NonZero::<i32>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") if `self == NonZero::<i32>::MIN` instead of overflowing.\n\n##### [§](#example-34)Example\n\n```\nlet pos_five = NonZero::new(5i32)?;\nlet neg_five = NonZero::new(-5i32)?;\nlet min = NonZero::new(i32::MIN)?;\nlet min_plus_one = NonZero::new(i32::MIN + 1)?;\nlet max = NonZero::new(i32::MAX)?;\n\nassert_eq!(pos_five.saturating_neg(), neg_five);\nassert_eq!(min.saturating_neg(), max);\nassert_eq!(max.saturating_neg(), min_plus_one);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i32)?;%0Alet+neg_five+=+NonZero::new(-5i32)?;%0Alet+min+=+NonZero::new(i32::MIN)?;%0Alet+min_plus_one+=+NonZero::new(i32::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i32::MAX)?;%0A%0Aassert_eq!(pos_five.saturating_neg(),+neg_five);%0Aassert_eq!(min.saturating_neg(),+max);%0Aassert_eq!(max.saturating_neg(),+min_plus_one);%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nWrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.\n\nSee [`i32::wrapping_neg`](about:blank/primitive.i32.html#method.wrapping_neg \"method i32::wrapping_neg\") for documentation on overflow behaviour.\n\n##### [§](#example-35)Example\n\n```\nlet pos_five = NonZero::new(5i32)?;\nlet neg_five = NonZero::new(-5i32)?;\nlet min = NonZero::new(i32::MIN)?;\n\nassert_eq!(pos_five.wrapping_neg(), neg_five);\nassert_eq!(min.wrapping_neg(), min);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i32)?;%0Alet+neg_five+=+NonZero::new(-5i32)?;%0Alet+min+=+NonZero::new(i32::MIN)?;%0A%0Aassert_eq!(pos_five.wrapping_neg(),+neg_five);%0Aassert_eq!(min.wrapping_neg(),+min);%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nMultiplies two non-zero integers together. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-142)Examples\n\n```\nlet two = NonZero::new(2i32)?;\nlet four = NonZero::new(4i32)?;\nlet max = NonZero::new(i32::MAX)?;\n\nassert_eq!(Some(four), two.checked_mul(two));\nassert_eq!(None, max.checked_mul(two));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i32)?;%0Alet+four+=+NonZero::new(4i32)?;%0Alet+max+=+NonZero::new(i32::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nMultiplies two non-zero integers together. Return [`NonZero::<i32>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-143)Examples\n\n```\nlet two = NonZero::new(2i32)?;\nlet four = NonZero::new(4i32)?;\nlet max = NonZero::new(i32::MAX)?;\n\nassert_eq!(four, two.saturating_mul(two));\nassert_eq!(max, four.saturating_mul(max));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i32)?;%0Alet+four+=+NonZero::new(4i32)?;%0Alet+max+=+NonZero::new(i32::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nMultiplies two non-zero integers together, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self * rhs > i32::MAX`, or `self * rhs < i32::MIN`.\n\n##### [§](#examples-144)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet two = NonZero::new(2i32)?;\nlet four = NonZero::new(4i32)?;\n\nassert_eq!(four, unsafe { two.unchecked_mul(two) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i32)?;%0Alet+four+=+NonZero::new(4i32)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nRaises non-zero value to an integer power. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-145)Examples\n\n```\nlet three = NonZero::new(3i32)?;\nlet twenty_seven = NonZero::new(27i32)?;\nlet half_max = NonZero::new(i32::MAX / 2)?;\n\nassert_eq!(Some(twenty_seven), three.checked_pow(3));\nassert_eq!(None, half_max.checked_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i32)?;%0Alet+twenty_seven+=+NonZero::new(27i32)?;%0Alet+half_max+=+NonZero::new(i32::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)\n\nRaise non-zero value to an integer power. Return [`NonZero::<i32>::MIN`](about:blank/struct.NonZero.html#associatedconstant.MIN \"associated constant std::num::NonZero::MIN\") or [`NonZero::<i32>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-146)Examples\n\n```\nlet three = NonZero::new(3i32)?;\nlet twenty_seven = NonZero::new(27i32)?;\nlet max = NonZero::new(i32::MAX)?;\n\nassert_eq!(twenty_seven, three.saturating_pow(3));\nassert_eq!(max, max.saturating_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i32)?;%0Alet+twenty_seven+=+NonZero::new(27i32)?;%0Alet+max+=+NonZero::new(i32::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)[§](#impl-NonZero%3Ci64%3E)\n\n1.67.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nThe size of this non-zero integer type in bits.\n\nThis value is equal to [`i64::BITS`](about:blank/primitive.i64.html#associatedconstant.BITS \"associated constant i64::BITS\").\n\n##### [§](#examples-147)Examples\n\n```\nassert_eq!(NonZero::<i64>::BITS, i64::BITS);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci64%3E::BITS,+i64::BITS);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nReturns the number of leading zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-148)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<i64>::new(-1i64).unwrap();\n\nassert_eq!(n.leading_zeros(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci64%3E::new(-1i64).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nReturns the number of trailing zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-149)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<i64>::new(0b0101000).unwrap();\n\nassert_eq!(n.trailing_zeros(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci64%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\n🔬This is a nightly-only experimental API. (`non_zero_count_ones` [#120287](https://github.com/rust-lang/rust/issues/120287))\n\nReturns the number of ones in the binary representation of `self`.\n\n##### [§](#examples-150)Examples\n\nBasic usage:\n\n```\n#![feature(non_zero_count_ones)]\n\nlet a = NonZero::<i64>::new(0b100_0000)?;\nlet b = NonZero::<i64>::new(0b100_0011)?;\n\nassert_eq!(a.count_ones(), NonZero::new(1)?);\nassert_eq!(b.count_ones(), NonZero::new(3)?);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Ci64%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Ci64%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nThe smallest value that can be represented by this non-zero integer type, equal to [`i64::MIN`](about:blank/primitive.i64.html#associatedconstant.MIN \"associated constant i64::MIN\").\n\nNote: While most integer types are defined for every whole number between `MIN` and `MAX`, signed non-zero integers are a special case. They have a “gap” at 0.\n\n##### [§](#examples-151)Examples\n\n```\nassert_eq!(NonZero::<i64>::MIN.get(), i64::MIN);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci64%3E::MIN.get(),+i64::MIN);%0A%7D&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nThe largest value that can be represented by this non-zero integer type, equal to [`i64::MAX`](about:blank/primitive.i64.html#associatedconstant.MAX \"associated constant i64::MAX\").\n\nNote: While most integer types are defined for every whole number between `MIN` and `MAX`, signed non-zero integers are a special case. They have a “gap” at 0.\n\n##### [§](#examples-152)Examples\n\n```\nassert_eq!(NonZero::<i64>::MAX.get(), i64::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci64%3E::MAX.get(),+i64::MAX);%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nComputes the absolute value of self. See [`i64::abs`](about:blank/primitive.i64.html#method.abs \"method i64::abs\") for documentation on overflow behaviour.\n\n##### [§](#example-36)Example\n\n```\nlet pos = NonZero::new(1i64)?;\nlet neg = NonZero::new(-1i64)?;\n\nassert_eq!(pos, pos.abs());\nassert_eq!(pos, neg.abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0A%0Aassert_eq!(pos,+pos.abs());%0Aassert_eq!(pos,+neg.abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nChecked absolute value. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if `self == NonZero::<i64>::MIN`. The result cannot be zero.\n\n##### [§](#example-37)Example\n\n```\nlet pos = NonZero::new(1i64)?;\nlet neg = NonZero::new(-1i64)?;\nlet min = NonZero::new(i64::MIN)?;\n\nassert_eq!(Some(pos), neg.checked_abs());\nassert_eq!(None, min.checked_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!(Some(pos),+neg.checked_abs());%0Aassert_eq!(None,+min.checked_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nComputes the absolute value of self, with overflow information, see [`i64::overflowing_abs`](about:blank/primitive.i64.html#method.overflowing_abs \"method i64::overflowing_abs\").\n\n##### [§](#example-38)Example\n\n```\nlet pos = NonZero::new(1i64)?;\nlet neg = NonZero::new(-1i64)?;\nlet min = NonZero::new(i64::MIN)?;\n\nassert_eq!((pos, false), pos.overflowing_abs());\nassert_eq!((pos, false), neg.overflowing_abs());\nassert_eq!((min, true), min.overflowing_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!((pos,+false),+pos.overflowing_abs());%0Aassert_eq!((pos,+false),+neg.overflowing_abs());%0Aassert_eq!((min,+true),+min.overflowing_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nSaturating absolute value, see [`i64::saturating_abs`](about:blank/primitive.i64.html#method.saturating_abs \"method i64::saturating_abs\").\n\n##### [§](#example-39)Example\n\n```\nlet pos = NonZero::new(1i64)?;\nlet neg = NonZero::new(-1i64)?;\nlet min = NonZero::new(i64::MIN)?;\nlet min_plus = NonZero::new(i64::MIN + 1)?;\nlet max = NonZero::new(i64::MAX)?;\n\nassert_eq!(pos, pos.saturating_abs());\nassert_eq!(pos, neg.saturating_abs());\nassert_eq!(max, min.saturating_abs());\nassert_eq!(max, min_plus.saturating_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0Alet+min_plus+=+NonZero::new(i64::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(pos,+pos.saturating_abs());%0Aassert_eq!(pos,+neg.saturating_abs());%0Aassert_eq!(max,+min.saturating_abs());%0Aassert_eq!(max,+min_plus.saturating_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nWrapping absolute value, see [`i64::wrapping_abs`](about:blank/primitive.i64.html#method.wrapping_abs \"method i64::wrapping_abs\").\n\n##### [§](#example-40)Example\n\n```\nlet pos = NonZero::new(1i64)?;\nlet neg = NonZero::new(-1i64)?;\nlet min = NonZero::new(i64::MIN)?;\n\nassert_eq!(pos, pos.wrapping_abs());\nassert_eq!(pos, neg.wrapping_abs());\nassert_eq!(min, min.wrapping_abs());\nassert_eq!(max, (-max).wrapping_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(pos,+pos.wrapping_abs());%0Aassert_eq!(pos,+neg.wrapping_abs());%0Aassert_eq!(min,+min.wrapping_abs());%0Aassert_eq!(max,+(-max).wrapping_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nComputes the absolute value of self without any wrapping or panicking.\n\n##### [§](#example-41)Example\n\n```\nlet u_pos = NonZero::new(1u64)?;\nlet i_pos = NonZero::new(1i64)?;\nlet i_neg = NonZero::new(-1i64)?;\nlet i_min = NonZero::new(i64::MIN)?;\nlet u_max = NonZero::new(u64::MAX / 2 + 1)?;\n\nassert_eq!(u_pos, i_pos.unsigned_abs());\nassert_eq!(u_pos, i_neg.unsigned_abs());\nassert_eq!(u_max, i_min.unsigned_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+u_pos+=+NonZero::new(1u64)?;%0Alet+i_pos+=+NonZero::new(1i64)?;%0Alet+i_neg+=+NonZero::new(-1i64)?;%0Alet+i_min+=+NonZero::new(i64::MIN)?;%0Alet+u_max+=+NonZero::new(u64::MAX+/+2+%2B+1)?;%0A%0Aassert_eq!(u_pos,+i_pos.unsigned_abs());%0Aassert_eq!(u_pos,+i_neg.unsigned_abs());%0Aassert_eq!(u_max,+i_min.unsigned_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nReturns `true` if `self` is positive and `false` if the number is negative.\n\n##### [§](#example-42)Example\n\n```\nlet pos_five = NonZero::new(5i64)?;\nlet neg_five = NonZero::new(-5i64)?;\n\nassert!(pos_five.is_positive());\nassert!(!neg_five.is_positive());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0A%0Aassert!(pos_five.is_positive());%0Aassert!(!neg_five.is_positive());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nReturns `true` if `self` is negative and `false` if the number is positive.\n\n##### [§](#example-43)Example\n\n```\nlet pos_five = NonZero::new(5i64)?;\nlet neg_five = NonZero::new(-5i64)?;\n\nassert!(neg_five.is_negative());\nassert!(!pos_five.is_negative());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0A%0Aassert!(neg_five.is_negative());%0Aassert!(!pos_five.is_negative());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nChecked negation. Computes `-self`, returning `None` if `self == NonZero::<i64>::MIN`.\n\n##### [§](#example-44)Example\n\n```\nlet pos_five = NonZero::new(5i64)?;\nlet neg_five = NonZero::new(-5i64)?;\nlet min = NonZero::new(i64::MIN)?;\n\nassert_eq!(pos_five.checked_neg(), Some(neg_five));\nassert_eq!(min.checked_neg(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!(pos_five.checked_neg(),+Some(neg_five));%0Aassert_eq!(min.checked_neg(),+None);%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nNegates self, overflowing if this is equal to the minimum value.\n\nSee [`i64::overflowing_neg`](about:blank/primitive.i64.html#method.overflowing_neg \"method i64::overflowing_neg\") for documentation on overflow behaviour.\n\n##### [§](#example-45)Example\n\n```\nlet pos_five = NonZero::new(5i64)?;\nlet neg_five = NonZero::new(-5i64)?;\nlet min = NonZero::new(i64::MIN)?;\n\nassert_eq!(pos_five.overflowing_neg(), (neg_five, false));\nassert_eq!(min.overflowing_neg(), (min, true));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!(pos_five.overflowing_neg(),+(neg_five,+false));%0Aassert_eq!(min.overflowing_neg(),+(min,+true));%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nSaturating negation. Computes `-self`, returning [`NonZero::<i64>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") if `self == NonZero::<i64>::MIN` instead of overflowing.\n\n##### [§](#example-46)Example\n\n```\nlet pos_five = NonZero::new(5i64)?;\nlet neg_five = NonZero::new(-5i64)?;\nlet min = NonZero::new(i64::MIN)?;\nlet min_plus_one = NonZero::new(i64::MIN + 1)?;\nlet max = NonZero::new(i64::MAX)?;\n\nassert_eq!(pos_five.saturating_neg(), neg_five);\nassert_eq!(min.saturating_neg(), max);\nassert_eq!(max.saturating_neg(), min_plus_one);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0Alet+min_plus_one+=+NonZero::new(i64::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(pos_five.saturating_neg(),+neg_five);%0Aassert_eq!(min.saturating_neg(),+max);%0Aassert_eq!(max.saturating_neg(),+min_plus_one);%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nWrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.\n\nSee [`i64::wrapping_neg`](about:blank/primitive.i64.html#method.wrapping_neg \"method i64::wrapping_neg\") for documentation on overflow behaviour.\n\n##### [§](#example-47)Example\n\n```\nlet pos_five = NonZero::new(5i64)?;\nlet neg_five = NonZero::new(-5i64)?;\nlet min = NonZero::new(i64::MIN)?;\n\nassert_eq!(pos_five.wrapping_neg(), neg_five);\nassert_eq!(min.wrapping_neg(), min);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!(pos_five.wrapping_neg(),+neg_five);%0Aassert_eq!(min.wrapping_neg(),+min);%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nMultiplies two non-zero integers together. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-153)Examples\n\n```\nlet two = NonZero::new(2i64)?;\nlet four = NonZero::new(4i64)?;\nlet max = NonZero::new(i64::MAX)?;\n\nassert_eq!(Some(four), two.checked_mul(two));\nassert_eq!(None, max.checked_mul(two));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i64)?;%0Alet+four+=+NonZero::new(4i64)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nMultiplies two non-zero integers together. Return [`NonZero::<i64>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-154)Examples\n\n```\nlet two = NonZero::new(2i64)?;\nlet four = NonZero::new(4i64)?;\nlet max = NonZero::new(i64::MAX)?;\n\nassert_eq!(four, two.saturating_mul(two));\nassert_eq!(max, four.saturating_mul(max));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i64)?;%0Alet+four+=+NonZero::new(4i64)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nMultiplies two non-zero integers together, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self * rhs > i64::MAX`, or `self * rhs < i64::MIN`.\n\n##### [§](#examples-155)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet two = NonZero::new(2i64)?;\nlet four = NonZero::new(4i64)?;\n\nassert_eq!(four, unsafe { two.unchecked_mul(two) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i64)?;%0Alet+four+=+NonZero::new(4i64)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nRaises non-zero value to an integer power. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-156)Examples\n\n```\nlet three = NonZero::new(3i64)?;\nlet twenty_seven = NonZero::new(27i64)?;\nlet half_max = NonZero::new(i64::MAX / 2)?;\n\nassert_eq!(Some(twenty_seven), three.checked_pow(3));\nassert_eq!(None, half_max.checked_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i64)?;%0Alet+twenty_seven+=+NonZero::new(27i64)?;%0Alet+half_max+=+NonZero::new(i64::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nRaise non-zero value to an integer power. Return [`NonZero::<i64>::MIN`](about:blank/struct.NonZero.html#associatedconstant.MIN \"associated constant std::num::NonZero::MIN\") or [`NonZero::<i64>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-157)Examples\n\n```\nlet three = NonZero::new(3i64)?;\nlet twenty_seven = NonZero::new(27i64)?;\nlet max = NonZero::new(i64::MAX)?;\n\nassert_eq!(twenty_seven, three.saturating_pow(3));\nassert_eq!(max, max.saturating_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i64)?;%0Alet+twenty_seven+=+NonZero::new(27i64)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)[§](#impl-NonZero%3Ci128%3E)\n\n1.67.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nThe size of this non-zero integer type in bits.\n\nThis value is equal to [`i128::BITS`](about:blank/primitive.i128.html#associatedconstant.BITS \"associated constant i128::BITS\").\n\n##### [§](#examples-158)Examples\n\n```\nassert_eq!(NonZero::<i128>::BITS, i128::BITS);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci128%3E::BITS,+i128::BITS);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nReturns the number of leading zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-159)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<i128>::new(-1i128).unwrap();\n\nassert_eq!(n.leading_zeros(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci128%3E::new(-1i128).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nReturns the number of trailing zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-160)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<i128>::new(0b0101000).unwrap();\n\nassert_eq!(n.trailing_zeros(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci128%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\n🔬This is a nightly-only experimental API. (`non_zero_count_ones` [#120287](https://github.com/rust-lang/rust/issues/120287))\n\nReturns the number of ones in the binary representation of `self`.\n\n##### [§](#examples-161)Examples\n\nBasic usage:\n\n```\n#![feature(non_zero_count_ones)]\n\nlet a = NonZero::<i128>::new(0b100_0000)?;\nlet b = NonZero::<i128>::new(0b100_0011)?;\n\nassert_eq!(a.count_ones(), NonZero::new(1)?);\nassert_eq!(b.count_ones(), NonZero::new(3)?);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Ci128%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Ci128%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nThe smallest value that can be represented by this non-zero integer type, equal to [`i128::MIN`](about:blank/primitive.i128.html#associatedconstant.MIN \"associated constant i128::MIN\").\n\nNote: While most integer types are defined for every whole number between `MIN` and `MAX`, signed non-zero integers are a special case. They have a “gap” at 0.\n\n##### [§](#examples-162)Examples\n\n```\nassert_eq!(NonZero::<i128>::MIN.get(), i128::MIN);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci128%3E::MIN.get(),+i128::MIN);%0A%7D&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nThe largest value that can be represented by this non-zero integer type, equal to [`i128::MAX`](about:blank/primitive.i128.html#associatedconstant.MAX \"associated constant i128::MAX\").\n\nNote: While most integer types are defined for every whole number between `MIN` and `MAX`, signed non-zero integers are a special case. They have a “gap” at 0.\n\n##### [§](#examples-163)Examples\n\n```\nassert_eq!(NonZero::<i128>::MAX.get(), i128::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci128%3E::MAX.get(),+i128::MAX);%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nComputes the absolute value of self. See [`i128::abs`](about:blank/primitive.i128.html#method.abs \"method i128::abs\") for documentation on overflow behaviour.\n\n##### [§](#example-48)Example\n\n```\nlet pos = NonZero::new(1i128)?;\nlet neg = NonZero::new(-1i128)?;\n\nassert_eq!(pos, pos.abs());\nassert_eq!(pos, neg.abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i128)?;%0Alet+neg+=+NonZero::new(-1i128)?;%0A%0Aassert_eq!(pos,+pos.abs());%0Aassert_eq!(pos,+neg.abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nChecked absolute value. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if `self == NonZero::<i128>::MIN`. The result cannot be zero.\n\n##### [§](#example-49)Example\n\n```\nlet pos = NonZero::new(1i128)?;\nlet neg = NonZero::new(-1i128)?;\nlet min = NonZero::new(i128::MIN)?;\n\nassert_eq!(Some(pos), neg.checked_abs());\nassert_eq!(None, min.checked_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i128)?;%0Alet+neg+=+NonZero::new(-1i128)?;%0Alet+min+=+NonZero::new(i128::MIN)?;%0A%0Aassert_eq!(Some(pos),+neg.checked_abs());%0Aassert_eq!(None,+min.checked_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nComputes the absolute value of self, with overflow information, see [`i128::overflowing_abs`](about:blank/primitive.i128.html#method.overflowing_abs \"method i128::overflowing_abs\").\n\n##### [§](#example-50)Example\n\n```\nlet pos = NonZero::new(1i128)?;\nlet neg = NonZero::new(-1i128)?;\nlet min = NonZero::new(i128::MIN)?;\n\nassert_eq!((pos, false), pos.overflowing_abs());\nassert_eq!((pos, false), neg.overflowing_abs());\nassert_eq!((min, true), min.overflowing_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i128)?;%0Alet+neg+=+NonZero::new(-1i128)?;%0Alet+min+=+NonZero::new(i128::MIN)?;%0A%0Aassert_eq!((pos,+false),+pos.overflowing_abs());%0Aassert_eq!((pos,+false),+neg.overflowing_abs());%0Aassert_eq!((min,+true),+min.overflowing_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nSaturating absolute value, see [`i128::saturating_abs`](about:blank/primitive.i128.html#method.saturating_abs \"method i128::saturating_abs\").\n\n##### [§](#example-51)Example\n\n```\nlet pos = NonZero::new(1i128)?;\nlet neg = NonZero::new(-1i128)?;\nlet min = NonZero::new(i128::MIN)?;\nlet min_plus = NonZero::new(i128::MIN + 1)?;\nlet max = NonZero::new(i128::MAX)?;\n\nassert_eq!(pos, pos.saturating_abs());\nassert_eq!(pos, neg.saturating_abs());\nassert_eq!(max, min.saturating_abs());\nassert_eq!(max, min_plus.saturating_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i128)?;%0Alet+neg+=+NonZero::new(-1i128)?;%0Alet+min+=+NonZero::new(i128::MIN)?;%0Alet+min_plus+=+NonZero::new(i128::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i128::MAX)?;%0A%0Aassert_eq!(pos,+pos.saturating_abs());%0Aassert_eq!(pos,+neg.saturating_abs());%0Aassert_eq!(max,+min.saturating_abs());%0Aassert_eq!(max,+min_plus.saturating_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nWrapping absolute value, see [`i128::wrapping_abs`](about:blank/primitive.i128.html#method.wrapping_abs \"method i128::wrapping_abs\").\n\n##### [§](#example-52)Example\n\n```\nlet pos = NonZero::new(1i128)?;\nlet neg = NonZero::new(-1i128)?;\nlet min = NonZero::new(i128::MIN)?;\n\nassert_eq!(pos, pos.wrapping_abs());\nassert_eq!(pos, neg.wrapping_abs());\nassert_eq!(min, min.wrapping_abs());\nassert_eq!(max, (-max).wrapping_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i128)?;%0Alet+neg+=+NonZero::new(-1i128)?;%0Alet+min+=+NonZero::new(i128::MIN)?;%0Alet+max+=+NonZero::new(i128::MAX)?;%0A%0Aassert_eq!(pos,+pos.wrapping_abs());%0Aassert_eq!(pos,+neg.wrapping_abs());%0Aassert_eq!(min,+min.wrapping_abs());%0Aassert_eq!(max,+(-max).wrapping_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nComputes the absolute value of self without any wrapping or panicking.\n\n##### [§](#example-53)Example\n\n```\nlet u_pos = NonZero::new(1u128)?;\nlet i_pos = NonZero::new(1i128)?;\nlet i_neg = NonZero::new(-1i128)?;\nlet i_min = NonZero::new(i128::MIN)?;\nlet u_max = NonZero::new(u128::MAX / 2 + 1)?;\n\nassert_eq!(u_pos, i_pos.unsigned_abs());\nassert_eq!(u_pos, i_neg.unsigned_abs());\nassert_eq!(u_max, i_min.unsigned_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+u_pos+=+NonZero::new(1u128)?;%0Alet+i_pos+=+NonZero::new(1i128)?;%0Alet+i_neg+=+NonZero::new(-1i128)?;%0Alet+i_min+=+NonZero::new(i128::MIN)?;%0Alet+u_max+=+NonZero::new(u128::MAX+/+2+%2B+1)?;%0A%0Aassert_eq!(u_pos,+i_pos.unsigned_abs());%0Aassert_eq!(u_pos,+i_neg.unsigned_abs());%0Aassert_eq!(u_max,+i_min.unsigned_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nReturns `true` if `self` is positive and `false` if the number is negative.\n\n##### [§](#example-54)Example\n\n```\nlet pos_five = NonZero::new(5i128)?;\nlet neg_five = NonZero::new(-5i128)?;\n\nassert!(pos_five.is_positive());\nassert!(!neg_five.is_positive());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i128)?;%0Alet+neg_five+=+NonZero::new(-5i128)?;%0A%0Aassert!(pos_five.is_positive());%0Aassert!(!neg_five.is_positive());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nReturns `true` if `self` is negative and `false` if the number is positive.\n\n##### [§](#example-55)Example\n\n```\nlet pos_five = NonZero::new(5i128)?;\nlet neg_five = NonZero::new(-5i128)?;\n\nassert!(neg_five.is_negative());\nassert!(!pos_five.is_negative());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i128)?;%0Alet+neg_five+=+NonZero::new(-5i128)?;%0A%0Aassert!(neg_five.is_negative());%0Aassert!(!pos_five.is_negative());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nChecked negation. Computes `-self`, returning `None` if `self == NonZero::<i128>::MIN`.\n\n##### [§](#example-56)Example\n\n```\nlet pos_five = NonZero::new(5i128)?;\nlet neg_five = NonZero::new(-5i128)?;\nlet min = NonZero::new(i128::MIN)?;\n\nassert_eq!(pos_five.checked_neg(), Some(neg_five));\nassert_eq!(min.checked_neg(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i128)?;%0Alet+neg_five+=+NonZero::new(-5i128)?;%0Alet+min+=+NonZero::new(i128::MIN)?;%0A%0Aassert_eq!(pos_five.checked_neg(),+Some(neg_five));%0Aassert_eq!(min.checked_neg(),+None);%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nNegates self, overflowing if this is equal to the minimum value.\n\nSee [`i128::overflowing_neg`](about:blank/primitive.i128.html#method.overflowing_neg \"method i128::overflowing_neg\") for documentation on overflow behaviour.\n\n##### [§](#example-57)Example\n\n```\nlet pos_five = NonZero::new(5i128)?;\nlet neg_five = NonZero::new(-5i128)?;\nlet min = NonZero::new(i128::MIN)?;\n\nassert_eq!(pos_five.overflowing_neg(), (neg_five, false));\nassert_eq!(min.overflowing_neg(), (min, true));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i128)?;%0Alet+neg_five+=+NonZero::new(-5i128)?;%0Alet+min+=+NonZero::new(i128::MIN)?;%0A%0Aassert_eq!(pos_five.overflowing_neg(),+(neg_five,+false));%0Aassert_eq!(min.overflowing_neg(),+(min,+true));%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nSaturating negation. Computes `-self`, returning [`NonZero::<i128>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") if `self == NonZero::<i128>::MIN` instead of overflowing.\n\n##### [§](#example-58)Example\n\n```\nlet pos_five = NonZero::new(5i128)?;\nlet neg_five = NonZero::new(-5i128)?;\nlet min = NonZero::new(i128::MIN)?;\nlet min_plus_one = NonZero::new(i128::MIN + 1)?;\nlet max = NonZero::new(i128::MAX)?;\n\nassert_eq!(pos_five.saturating_neg(), neg_five);\nassert_eq!(min.saturating_neg(), max);\nassert_eq!(max.saturating_neg(), min_plus_one);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i128)?;%0Alet+neg_five+=+NonZero::new(-5i128)?;%0Alet+min+=+NonZero::new(i128::MIN)?;%0Alet+min_plus_one+=+NonZero::new(i128::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i128::MAX)?;%0A%0Aassert_eq!(pos_five.saturating_neg(),+neg_five);%0Aassert_eq!(min.saturating_neg(),+max);%0Aassert_eq!(max.saturating_neg(),+min_plus_one);%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nWrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.\n\nSee [`i128::wrapping_neg`](about:blank/primitive.i128.html#method.wrapping_neg \"method i128::wrapping_neg\") for documentation on overflow behaviour.\n\n##### [§](#example-59)Example\n\n```\nlet pos_five = NonZero::new(5i128)?;\nlet neg_five = NonZero::new(-5i128)?;\nlet min = NonZero::new(i128::MIN)?;\n\nassert_eq!(pos_five.wrapping_neg(), neg_five);\nassert_eq!(min.wrapping_neg(), min);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i128)?;%0Alet+neg_five+=+NonZero::new(-5i128)?;%0Alet+min+=+NonZero::new(i128::MIN)?;%0A%0Aassert_eq!(pos_five.wrapping_neg(),+neg_five);%0Aassert_eq!(min.wrapping_neg(),+min);%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nMultiplies two non-zero integers together. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-164)Examples\n\n```\nlet two = NonZero::new(2i128)?;\nlet four = NonZero::new(4i128)?;\nlet max = NonZero::new(i128::MAX)?;\n\nassert_eq!(Some(four), two.checked_mul(two));\nassert_eq!(None, max.checked_mul(two));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i128)?;%0Alet+four+=+NonZero::new(4i128)?;%0Alet+max+=+NonZero::new(i128::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nMultiplies two non-zero integers together. Return [`NonZero::<i128>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-165)Examples\n\n```\nlet two = NonZero::new(2i128)?;\nlet four = NonZero::new(4i128)?;\nlet max = NonZero::new(i128::MAX)?;\n\nassert_eq!(four, two.saturating_mul(two));\nassert_eq!(max, four.saturating_mul(max));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i128)?;%0Alet+four+=+NonZero::new(4i128)?;%0Alet+max+=+NonZero::new(i128::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nMultiplies two non-zero integers together, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self * rhs > i128::MAX`, or `self * rhs < i128::MIN`.\n\n##### [§](#examples-166)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet two = NonZero::new(2i128)?;\nlet four = NonZero::new(4i128)?;\n\nassert_eq!(four, unsafe { two.unchecked_mul(two) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i128)?;%0Alet+four+=+NonZero::new(4i128)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nRaises non-zero value to an integer power. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-167)Examples\n\n```\nlet three = NonZero::new(3i128)?;\nlet twenty_seven = NonZero::new(27i128)?;\nlet half_max = NonZero::new(i128::MAX / 2)?;\n\nassert_eq!(Some(twenty_seven), three.checked_pow(3));\nassert_eq!(None, half_max.checked_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i128)?;%0Alet+twenty_seven+=+NonZero::new(27i128)?;%0Alet+half_max+=+NonZero::new(i128::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)\n\nRaise non-zero value to an integer power. Return [`NonZero::<i128>::MIN`](about:blank/struct.NonZero.html#associatedconstant.MIN \"associated constant std::num::NonZero::MIN\") or [`NonZero::<i128>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-168)Examples\n\n```\nlet three = NonZero::new(3i128)?;\nlet twenty_seven = NonZero::new(27i128)?;\nlet max = NonZero::new(i128::MAX)?;\n\nassert_eq!(twenty_seven, three.saturating_pow(3));\nassert_eq!(max, max.saturating_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i128)?;%0Alet+twenty_seven+=+NonZero::new(27i128)?;%0Alet+max+=+NonZero::new(i128::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)[§](#impl-NonZero%3Cisize%3E)\n\n1.67.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nThe size of this non-zero integer type in bits.\n\nThis value is equal to [`isize::BITS`](about:blank/primitive.isize.html#associatedconstant.BITS \"associated constant isize::BITS\").\n\n##### [§](#examples-169)Examples\n\n```\nassert_eq!(NonZero::<isize>::BITS, isize::BITS);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cisize%3E::BITS,+isize::BITS);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nReturns the number of leading zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-170)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<isize>::new(-1isize).unwrap();\n\nassert_eq!(n.leading_zeros(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cisize%3E::new(-1isize).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nReturns the number of trailing zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [§](#examples-171)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<isize>::new(0b0101000).unwrap();\n\nassert_eq!(n.trailing_zeros(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cisize%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\n🔬This is a nightly-only experimental API. (`non_zero_count_ones` [#120287](https://github.com/rust-lang/rust/issues/120287))\n\nReturns the number of ones in the binary representation of `self`.\n\n##### [§](#examples-172)Examples\n\nBasic usage:\n\n```\n#![feature(non_zero_count_ones)]\n\nlet a = NonZero::<isize>::new(0b100_0000)?;\nlet b = NonZero::<isize>::new(0b100_0011)?;\n\nassert_eq!(a.count_ones(), NonZero::new(1)?);\nassert_eq!(b.count_ones(), NonZero::new(3)?);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Cisize%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Cisize%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nThe smallest value that can be represented by this non-zero integer type, equal to [`isize::MIN`](about:blank/primitive.isize.html#associatedconstant.MIN \"associated constant isize::MIN\").\n\nNote: While most integer types are defined for every whole number between `MIN` and `MAX`, signed non-zero integers are a special case. They have a “gap” at 0.\n\n##### [§](#examples-173)Examples\n\n```\nassert_eq!(NonZero::<isize>::MIN.get(), isize::MIN);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cisize%3E::MIN.get(),+isize::MIN);%0A%7D&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nThe largest value that can be represented by this non-zero integer type, equal to [`isize::MAX`](about:blank/primitive.isize.html#associatedconstant.MAX \"associated constant isize::MAX\").\n\nNote: While most integer types are defined for every whole number between `MIN` and `MAX`, signed non-zero integers are a special case. They have a “gap” at 0.\n\n##### [§](#examples-174)Examples\n\n```\nassert_eq!(NonZero::<isize>::MAX.get(), isize::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cisize%3E::MAX.get(),+isize::MAX);%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nComputes the absolute value of self. See [`isize::abs`](about:blank/primitive.isize.html#method.abs \"method isize::abs\") for documentation on overflow behaviour.\n\n##### [§](#example-60)Example\n\n```\nlet pos = NonZero::new(1isize)?;\nlet neg = NonZero::new(-1isize)?;\n\nassert_eq!(pos, pos.abs());\nassert_eq!(pos, neg.abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1isize)?;%0Alet+neg+=+NonZero::new(-1isize)?;%0A%0Aassert_eq!(pos,+pos.abs());%0Aassert_eq!(pos,+neg.abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nChecked absolute value. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if `self == NonZero::<isize>::MIN`. The result cannot be zero.\n\n##### [§](#example-61)Example\n\n```\nlet pos = NonZero::new(1isize)?;\nlet neg = NonZero::new(-1isize)?;\nlet min = NonZero::new(isize::MIN)?;\n\nassert_eq!(Some(pos), neg.checked_abs());\nassert_eq!(None, min.checked_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1isize)?;%0Alet+neg+=+NonZero::new(-1isize)?;%0Alet+min+=+NonZero::new(isize::MIN)?;%0A%0Aassert_eq!(Some(pos),+neg.checked_abs());%0Aassert_eq!(None,+min.checked_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nComputes the absolute value of self, with overflow information, see [`isize::overflowing_abs`](about:blank/primitive.isize.html#method.overflowing_abs \"method isize::overflowing_abs\").\n\n##### [§](#example-62)Example\n\n```\nlet pos = NonZero::new(1isize)?;\nlet neg = NonZero::new(-1isize)?;\nlet min = NonZero::new(isize::MIN)?;\n\nassert_eq!((pos, false), pos.overflowing_abs());\nassert_eq!((pos, false), neg.overflowing_abs());\nassert_eq!((min, true), min.overflowing_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1isize)?;%0Alet+neg+=+NonZero::new(-1isize)?;%0Alet+min+=+NonZero::new(isize::MIN)?;%0A%0Aassert_eq!((pos,+false),+pos.overflowing_abs());%0Aassert_eq!((pos,+false),+neg.overflowing_abs());%0Aassert_eq!((min,+true),+min.overflowing_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nSaturating absolute value, see [`isize::saturating_abs`](about:blank/primitive.isize.html#method.saturating_abs \"method isize::saturating_abs\").\n\n##### [§](#example-63)Example\n\n```\nlet pos = NonZero::new(1isize)?;\nlet neg = NonZero::new(-1isize)?;\nlet min = NonZero::new(isize::MIN)?;\nlet min_plus = NonZero::new(isize::MIN + 1)?;\nlet max = NonZero::new(isize::MAX)?;\n\nassert_eq!(pos, pos.saturating_abs());\nassert_eq!(pos, neg.saturating_abs());\nassert_eq!(max, min.saturating_abs());\nassert_eq!(max, min_plus.saturating_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1isize)?;%0Alet+neg+=+NonZero::new(-1isize)?;%0Alet+min+=+NonZero::new(isize::MIN)?;%0Alet+min_plus+=+NonZero::new(isize::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(isize::MAX)?;%0A%0Aassert_eq!(pos,+pos.saturating_abs());%0Aassert_eq!(pos,+neg.saturating_abs());%0Aassert_eq!(max,+min.saturating_abs());%0Aassert_eq!(max,+min_plus.saturating_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nWrapping absolute value, see [`isize::wrapping_abs`](about:blank/primitive.isize.html#method.wrapping_abs \"method isize::wrapping_abs\").\n\n##### [§](#example-64)Example\n\n```\nlet pos = NonZero::new(1isize)?;\nlet neg = NonZero::new(-1isize)?;\nlet min = NonZero::new(isize::MIN)?;\n\nassert_eq!(pos, pos.wrapping_abs());\nassert_eq!(pos, neg.wrapping_abs());\nassert_eq!(min, min.wrapping_abs());\nassert_eq!(max, (-max).wrapping_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1isize)?;%0Alet+neg+=+NonZero::new(-1isize)?;%0Alet+min+=+NonZero::new(isize::MIN)?;%0Alet+max+=+NonZero::new(isize::MAX)?;%0A%0Aassert_eq!(pos,+pos.wrapping_abs());%0Aassert_eq!(pos,+neg.wrapping_abs());%0Aassert_eq!(min,+min.wrapping_abs());%0Aassert_eq!(max,+(-max).wrapping_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nComputes the absolute value of self without any wrapping or panicking.\n\n##### [§](#example-65)Example\n\n```\nlet u_pos = NonZero::new(1usize)?;\nlet i_pos = NonZero::new(1isize)?;\nlet i_neg = NonZero::new(-1isize)?;\nlet i_min = NonZero::new(isize::MIN)?;\nlet u_max = NonZero::new(usize::MAX / 2 + 1)?;\n\nassert_eq!(u_pos, i_pos.unsigned_abs());\nassert_eq!(u_pos, i_neg.unsigned_abs());\nassert_eq!(u_max, i_min.unsigned_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+u_pos+=+NonZero::new(1usize)?;%0Alet+i_pos+=+NonZero::new(1isize)?;%0Alet+i_neg+=+NonZero::new(-1isize)?;%0Alet+i_min+=+NonZero::new(isize::MIN)?;%0Alet+u_max+=+NonZero::new(usize::MAX+/+2+%2B+1)?;%0A%0Aassert_eq!(u_pos,+i_pos.unsigned_abs());%0Aassert_eq!(u_pos,+i_neg.unsigned_abs());%0Aassert_eq!(u_max,+i_min.unsigned_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nReturns `true` if `self` is positive and `false` if the number is negative.\n\n##### [§](#example-66)Example\n\n```\nlet pos_five = NonZero::new(5isize)?;\nlet neg_five = NonZero::new(-5isize)?;\n\nassert!(pos_five.is_positive());\nassert!(!neg_five.is_positive());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5isize)?;%0Alet+neg_five+=+NonZero::new(-5isize)?;%0A%0Aassert!(pos_five.is_positive());%0Aassert!(!neg_five.is_positive());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nReturns `true` if `self` is negative and `false` if the number is positive.\n\n##### [§](#example-67)Example\n\n```\nlet pos_five = NonZero::new(5isize)?;\nlet neg_five = NonZero::new(-5isize)?;\n\nassert!(neg_five.is_negative());\nassert!(!pos_five.is_negative());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5isize)?;%0Alet+neg_five+=+NonZero::new(-5isize)?;%0A%0Aassert!(neg_five.is_negative());%0Aassert!(!pos_five.is_negative());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nChecked negation. Computes `-self`, returning `None` if `self == NonZero::<isize>::MIN`.\n\n##### [§](#example-68)Example\n\n```\nlet pos_five = NonZero::new(5isize)?;\nlet neg_five = NonZero::new(-5isize)?;\nlet min = NonZero::new(isize::MIN)?;\n\nassert_eq!(pos_five.checked_neg(), Some(neg_five));\nassert_eq!(min.checked_neg(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5isize)?;%0Alet+neg_five+=+NonZero::new(-5isize)?;%0Alet+min+=+NonZero::new(isize::MIN)?;%0A%0Aassert_eq!(pos_five.checked_neg(),+Some(neg_five));%0Aassert_eq!(min.checked_neg(),+None);%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nNegates self, overflowing if this is equal to the minimum value.\n\nSee [`isize::overflowing_neg`](about:blank/primitive.isize.html#method.overflowing_neg \"method isize::overflowing_neg\") for documentation on overflow behaviour.\n\n##### [§](#example-69)Example\n\n```\nlet pos_five = NonZero::new(5isize)?;\nlet neg_five = NonZero::new(-5isize)?;\nlet min = NonZero::new(isize::MIN)?;\n\nassert_eq!(pos_five.overflowing_neg(), (neg_five, false));\nassert_eq!(min.overflowing_neg(), (min, true));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5isize)?;%0Alet+neg_five+=+NonZero::new(-5isize)?;%0Alet+min+=+NonZero::new(isize::MIN)?;%0A%0Aassert_eq!(pos_five.overflowing_neg(),+(neg_five,+false));%0Aassert_eq!(min.overflowing_neg(),+(min,+true));%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nSaturating negation. Computes `-self`, returning [`NonZero::<isize>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") if `self == NonZero::<isize>::MIN` instead of overflowing.\n\n##### [§](#example-70)Example\n\n```\nlet pos_five = NonZero::new(5isize)?;\nlet neg_five = NonZero::new(-5isize)?;\nlet min = NonZero::new(isize::MIN)?;\nlet min_plus_one = NonZero::new(isize::MIN + 1)?;\nlet max = NonZero::new(isize::MAX)?;\n\nassert_eq!(pos_five.saturating_neg(), neg_five);\nassert_eq!(min.saturating_neg(), max);\nassert_eq!(max.saturating_neg(), min_plus_one);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5isize)?;%0Alet+neg_five+=+NonZero::new(-5isize)?;%0Alet+min+=+NonZero::new(isize::MIN)?;%0Alet+min_plus_one+=+NonZero::new(isize::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(isize::MAX)?;%0A%0Aassert_eq!(pos_five.saturating_neg(),+neg_five);%0Aassert_eq!(min.saturating_neg(),+max);%0Aassert_eq!(max.saturating_neg(),+min_plus_one);%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nWrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.\n\nSee [`isize::wrapping_neg`](about:blank/primitive.isize.html#method.wrapping_neg \"method isize::wrapping_neg\") for documentation on overflow behaviour.\n\n##### [§](#example-71)Example\n\n```\nlet pos_five = NonZero::new(5isize)?;\nlet neg_five = NonZero::new(-5isize)?;\nlet min = NonZero::new(isize::MIN)?;\n\nassert_eq!(pos_five.wrapping_neg(), neg_five);\nassert_eq!(min.wrapping_neg(), min);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5isize)?;%0Alet+neg_five+=+NonZero::new(-5isize)?;%0Alet+min+=+NonZero::new(isize::MIN)?;%0A%0Aassert_eq!(pos_five.wrapping_neg(),+neg_five);%0Aassert_eq!(min.wrapping_neg(),+min);%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nMultiplies two non-zero integers together. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-175)Examples\n\n```\nlet two = NonZero::new(2isize)?;\nlet four = NonZero::new(4isize)?;\nlet max = NonZero::new(isize::MAX)?;\n\nassert_eq!(Some(four), two.checked_mul(two));\nassert_eq!(None, max.checked_mul(two));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2isize)?;%0Alet+four+=+NonZero::new(4isize)?;%0Alet+max+=+NonZero::new(isize::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nMultiplies two non-zero integers together. Return [`NonZero::<isize>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-176)Examples\n\n```\nlet two = NonZero::new(2isize)?;\nlet four = NonZero::new(4isize)?;\nlet max = NonZero::new(isize::MAX)?;\n\nassert_eq!(four, two.saturating_mul(two));\nassert_eq!(max, four.saturating_mul(max));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2isize)?;%0Alet+four+=+NonZero::new(4isize)?;%0Alet+max+=+NonZero::new(isize::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\n🔬This is a nightly-only experimental API. (`nonzero_ops` [#84186](https://github.com/rust-lang/rust/issues/84186))\n\nMultiplies two non-zero integers together, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self * rhs > isize::MAX`, or `self * rhs < isize::MIN`.\n\n##### [§](#examples-177)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet two = NonZero::new(2isize)?;\nlet four = NonZero::new(4isize)?;\n\nassert_eq!(four, unsafe { two.unchecked_mul(two) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2isize)?;%0Alet+four+=+NonZero::new(4isize)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nRaises non-zero value to an integer power. Checks for overflow and returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [§](#examples-178)Examples\n\n```\nlet three = NonZero::new(3isize)?;\nlet twenty_seven = NonZero::new(27isize)?;\nlet half_max = NonZero::new(isize::MAX / 2)?;\n\nassert_eq!(Some(twenty_seven), three.checked_pow(3));\nassert_eq!(None, half_max.checked_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3isize)?;%0Alet+twenty_seven+=+NonZero::new(27isize)?;%0Alet+half_max+=+NonZero::new(isize::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)\n\nRaise non-zero value to an integer power. Return [`NonZero::<isize>::MIN`](about:blank/struct.NonZero.html#associatedconstant.MIN \"associated constant std::num::NonZero::MIN\") or [`NonZero::<isize>::MAX`](about:blank/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [§](#examples-179)Examples\n\n```\nlet three = NonZero::new(3isize)?;\nlet twenty_seven = NonZero::new(27isize)?;\nlet max = NonZero::new(isize::MAX)?;\n\nassert_eq!(twenty_seven, three.saturating_pow(3));\nassert_eq!(max, max.saturating_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3isize)?;%0Alet+twenty_seven+=+NonZero::new(27isize)?;%0Alet+max+=+NonZero::new(isize::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#135)[§](#impl-Binary-for-NonZero%3CT%3E)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#311-313)[§](#impl-BitOr%3CNonZero%3CT%3E%3E-for-T)\n\n[§](#associatedtype.Output-14)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#318)[§](#method.bitor-2)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#297-299)[§](#impl-BitOr%3CT%3E-for-NonZero%3CT%3E)\n\n[§](#associatedtype.Output-13)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#304)[§](#method.bitor-1)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#283-285)[§](#impl-BitOr-for-NonZero%3CT%3E)\n\n[§](#associatedtype.Output-12)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#290)[§](#method.bitor)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#337-340)[§](#impl-BitOrAssign%3CT%3E-for-NonZero%3CT%3E)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#325-328)[§](#impl-BitOrAssign-for-NonZero%3CT%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#161-163)[§](#impl-Clone-for-NonZero%3CT%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#133)[§](#impl-Debug-for-NonZero%3CT%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#134)[§](#impl-Display-for-NonZero%3CT%3E)\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)[§](#impl-Div%3CNonZero%3Cu128%3E%3E-for-u128)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)[§](#method.div-3)\n\nThis operation rounds towards zero, truncating any fractional part of the exact result, and cannot panic.\n\n[§](#associatedtype.Output-18)\n\nThe resulting type after applying the `/` operator.\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)[§](#impl-Div%3CNonZero%3Cu16%3E%3E-for-u16)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)[§](#method.div-5)\n\nThis operation rounds towards zero, truncating any fractional part of the exact result, and cannot panic.\n\n[§](#associatedtype.Output-20)\n\nThe resulting type after applying the `/` operator.\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)[§](#impl-Div%3CNonZero%3Cu32%3E%3E-for-u32)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)[§](#method.div-1)\n\nThis operation rounds towards zero, truncating any fractional part of the exact result, and cannot panic.\n\n[§](#associatedtype.Output-16)\n\nThe resulting type after applying the `/` operator.\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)[§](#impl-Div%3CNonZero%3Cu64%3E%3E-for-u64)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)[§](#method.div-4)\n\nThis operation rounds towards zero, truncating any fractional part of the exact result, and cannot panic.\n\n[§](#associatedtype.Output-19)\n\nThe resulting type after applying the `/` operator.\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)[§](#impl-Div%3CNonZero%3Cu8%3E%3E-for-u8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)[§](#method.div-2)\n\nThis operation rounds towards zero, truncating any fractional part of the exact result, and cannot panic.\n\n[§](#associatedtype.Output-17)\n\nThe resulting type after applying the `/` operator.\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)[§](#impl-Div%3CNonZero%3Cusize%3E%3E-for-usize)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)[§](#method.div)\n\nThis operation rounds towards zero, truncating any fractional part of the exact result, and cannot panic.\n\n[§](#associatedtype.Output-15)\n\nThe resulting type after applying the `/` operator.\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)[§](#impl-DivAssign%3CNonZero%3Cu128%3E%3E-for-u128)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)[§](#method.div_assign-2)\n\nThis operation rounds towards zero, truncating any fractional part of the exact result, and cannot panic.\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)[§](#impl-DivAssign%3CNonZero%3Cu16%3E%3E-for-u16)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)[§](#method.div_assign-3)\n\nThis operation rounds towards zero, truncating any fractional part of the exact result, and cannot panic.\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)[§](#impl-DivAssign%3CNonZero%3Cu32%3E%3E-for-u32)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)[§](#method.div_assign)\n\nThis operation rounds towards zero, truncating any fractional part of the exact result, and cannot panic.\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)[§](#impl-DivAssign%3CNonZero%3Cu64%3E%3E-for-u64)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)[§](#method.div_assign-5)\n\nThis operation rounds towards zero, truncating any fractional part of the exact result, and cannot panic.\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)[§](#impl-DivAssign%3CNonZero%3Cu8%3E%3E-for-u8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)[§](#method.div_assign-4)\n\nThis operation rounds towards zero, truncating any fractional part of the exact result, and cannot panic.\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)[§](#impl-DivAssign%3CNonZero%3Cusize%3E%3E-for-usize)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)[§](#method.div_assign-1)\n\nThis operation rounds towards zero, truncating any fractional part of the exact result, and cannot panic.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/alignment.rs.html#189)[§](#impl-From%3CAlignment%3E-for-NonZero%3Cusize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/alignment.rs.html#191)[§](#method.from-7)\n\nConverts to this type from the input type.\n\n1.31.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#271-273)[§](#impl-From%3CNonZero%3CT%3E%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#276)[§](#method.from-35)\n\nConverts to this type from the input type.\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#444)[§](#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci128%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#442)[§](#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci32%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#443)[§](#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci64%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#445)[§](#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cisize%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#447)[§](#impl-From%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci128%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#446)[§](#impl-From%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci64%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#448)[§](#impl-From%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci128%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#440)[§](#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci128%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#437)[§](#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci16%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#438)[§](#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci32%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#439)[§](#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci64%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#441)[§](#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cisize%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#458)[§](#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci128%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#456)[§](#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci32%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#457)[§](#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci64%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#430)[§](#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu128%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#428)[§](#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu32%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#429)[§](#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu64%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#431)[§](#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cusize%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#460)[§](#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci128%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#459)[§](#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci64%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#433)[§](#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu128%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#432)[§](#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu64%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#461)[§](#impl-From%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci128%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#434)[§](#impl-From%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu128%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#454)[§](#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci128%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#451)[§](#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci16%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#452)[§](#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci32%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#453)[§](#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci64%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#455)[§](#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cisize%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#426)[§](#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu128%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#423)[§](#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu16%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#424)[§](#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu32%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#425)[§](#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu64%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#427)[§](#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cusize%3E)\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)[§](#impl-FromStr-for-NonZero%3Ci128%3E)\n\n[§](#associatedtype.Err-11)\n\nThe associated error which can be returned from parsing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)[§](#method.from_str-11)\n\nParses a string `s` to return a value of this type. [Read more](about:blank/str/trait.FromStr.html#tymethod.from_str)\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)[§](#impl-FromStr-for-NonZero%3Ci16%3E)\n\n[§](#associatedtype.Err-5)\n\nThe associated error which can be returned from parsing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)[§](#method.from_str-5)\n\nParses a string `s` to return a value of this type. [Read more](about:blank/str/trait.FromStr.html#tymethod.from_str)\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)[§](#impl-FromStr-for-NonZero%3Ci32%3E)\n\n[§](#associatedtype.Err-9)\n\nThe associated error which can be returned from parsing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)[§](#method.from_str-9)\n\nParses a string `s` to return a value of this type. [Read more](about:blank/str/trait.FromStr.html#tymethod.from_str)\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)[§](#impl-FromStr-for-NonZero%3Ci64%3E)\n\n[§](#associatedtype.Err-6)\n\nThe associated error which can be returned from parsing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)[§](#method.from_str-6)\n\nParses a string `s` to return a value of this type. [Read more](about:blank/str/trait.FromStr.html#tymethod.from_str)\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)[§](#impl-FromStr-for-NonZero%3Ci8%3E)\n\n[§](#associatedtype.Err)\n\nThe associated error which can be returned from parsing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)[§](#method.from_str)\n\nParses a string `s` to return a value of this type. [Read more](about:blank/str/trait.FromStr.html#tymethod.from_str)\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)[§](#impl-FromStr-for-NonZero%3Cisize%3E)\n\n[§](#associatedtype.Err-7)\n\nThe associated error which can be returned from parsing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)[§](#method.from_str-7)\n\nParses a string `s` to return a value of this type. [Read more](about:blank/str/trait.FromStr.html#tymethod.from_str)\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)[§](#impl-FromStr-for-NonZero%3Cu128%3E)\n\n[§](#associatedtype.Err-3)\n\nThe associated error which can be returned from parsing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)[§](#method.from_str-3)\n\nParses a string `s` to return a value of this type. [Read more](about:blank/str/trait.FromStr.html#tymethod.from_str)\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)[§](#impl-FromStr-for-NonZero%3Cu16%3E)\n\n[§](#associatedtype.Err-10)\n\nThe associated error which can be returned from parsing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)[§](#method.from_str-10)\n\nParses a string `s` to return a value of this type. [Read more](about:blank/str/trait.FromStr.html#tymethod.from_str)\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)[§](#impl-FromStr-for-NonZero%3Cu32%3E)\n\n[§](#associatedtype.Err-2)\n\nThe associated error which can be returned from parsing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)[§](#method.from_str-2)\n\nParses a string `s` to return a value of this type. [Read more](about:blank/str/trait.FromStr.html#tymethod.from_str)\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)[§](#impl-FromStr-for-NonZero%3Cu64%3E)\n\n[§](#associatedtype.Err-1)\n\nThe associated error which can be returned from parsing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)[§](#method.from_str-1)\n\nParses a string `s` to return a value of this type. [Read more](about:blank/str/trait.FromStr.html#tymethod.from_str)\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)[§](#impl-FromStr-for-NonZero%3Cu8%3E)\n\n[§](#associatedtype.Err-8)\n\nThe associated error which can be returned from parsing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)[§](#method.from_str-8)\n\nParses a string `s` to return a value of this type. [Read more](about:blank/str/trait.FromStr.html#tymethod.from_str)\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)[§](#impl-FromStr-for-NonZero%3Cusize%3E)\n\n[§](#associatedtype.Err-4)\n\nThe associated error which can be returned from parsing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)[§](#method.from_str-4)\n\nParses a string `s` to return a value of this type. [Read more](about:blank/str/trait.FromStr.html#tymethod.from_str)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#257-259)[§](#impl-Hash-for-NonZero%3CT%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#137)[§](#impl-LowerHex-for-NonZero%3CT%3E)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)[§](#impl-Neg-for-%26NonZero%3Ci128%3E)\n\n[§](#associatedtype.Output-10)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)[§](#method.neg-10)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)[§](#impl-Neg-for-%26NonZero%3Ci16%3E)\n\n[§](#associatedtype.Output-9)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)[§](#method.neg-9)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)[§](#impl-Neg-for-%26NonZero%3Ci32%3E)\n\n[§](#associatedtype.Output-5)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)[§](#method.neg-5)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)[§](#impl-Neg-for-%26NonZero%3Ci64%3E)\n\n[§](#associatedtype.Output-11)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)[§](#method.neg-11)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)[§](#impl-Neg-for-%26NonZero%3Ci8%3E)\n\n[§](#associatedtype.Output-4)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)[§](#method.neg-4)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)[§](#impl-Neg-for-%26NonZero%3Cisize%3E)\n\n[§](#associatedtype.Output-7)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)[§](#method.neg-7)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)[§](#impl-Neg-for-NonZero%3Ci128%3E)\n\n[§](#associatedtype.Output)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694)[§](#method.neg)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)[§](#impl-Neg-for-NonZero%3Ci16%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676)[§](#method.neg-1)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)[§](#impl-Neg-for-NonZero%3Ci32%3E)\n\n[§](#associatedtype.Output-6)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682)[§](#method.neg-6)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)[§](#impl-Neg-for-NonZero%3Ci64%3E)\n\n[§](#associatedtype.Output-3)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)[§](#method.neg-3)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)[§](#impl-Neg-for-NonZero%3Ci8%3E)\n\n[§](#associatedtype.Output-2)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670)[§](#method.neg-2)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)[§](#impl-Neg-for-NonZero%3Cisize%3E)\n\n[§](#associatedtype.Output-8)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700)[§](#method.neg-8)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#136)[§](#impl-Octal-for-NonZero%3CT%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#228-230)[§](#impl-Ord-for-NonZero%3CT%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#175-177)[§](#impl-PartialEq-for-NonZero%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#180)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#185)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#197-199)[§](#impl-PartialOrd-for-NonZero%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#202)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#207)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#212)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#217)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#222)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)[§](#impl-Rem%3CNonZero%3Cu128%3E%3E-for-u128)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)[§](#method.rem-4)\n\nThis operation satisfies `n % d == n - (n / d) * d`, and cannot panic.\n\n[§](#associatedtype.Output-25)\n\nThe resulting type after applying the `%` operator.\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)[§](#impl-Rem%3CNonZero%3Cu16%3E%3E-for-u16)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)[§](#method.rem-5)\n\nThis operation satisfies `n % d == n - (n / d) * d`, and cannot panic.\n\n[§](#associatedtype.Output-26)\n\nThe resulting type after applying the `%` operator.\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)[§](#impl-Rem%3CNonZero%3Cu32%3E%3E-for-u32)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)[§](#method.rem-3)\n\nThis operation satisfies `n % d == n - (n / d) * d`, and cannot panic.\n\n[§](#associatedtype.Output-24)\n\nThe resulting type after applying the `%` operator.\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)[§](#impl-Rem%3CNonZero%3Cu64%3E%3E-for-u64)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)[§](#method.rem)\n\nThis operation satisfies `n % d == n - (n / d) * d`, and cannot panic.\n\n[§](#associatedtype.Output-21)\n\nThe resulting type after applying the `%` operator.\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)[§](#impl-Rem%3CNonZero%3Cu8%3E%3E-for-u8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)[§](#method.rem-2)\n\nThis operation satisfies `n % d == n - (n / d) * d`, and cannot panic.\n\n[§](#associatedtype.Output-23)\n\nThe resulting type after applying the `%` operator.\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)[§](#impl-Rem%3CNonZero%3Cusize%3E%3E-for-usize)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)[§](#method.rem-1)\n\nThis operation satisfies `n % d == n - (n / d) * d`, and cannot panic.\n\n[§](#associatedtype.Output-22)\n\nThe resulting type after applying the `%` operator.\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)[§](#impl-RemAssign%3CNonZero%3Cu128%3E%3E-for-u128)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659)[§](#method.rem_assign)\n\nThis operation satisfies `n % d == n - (n / d) * d`, and cannot panic.\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)[§](#impl-RemAssign%3CNonZero%3Cu16%3E%3E-for-u16)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644)[§](#method.rem_assign-5)\n\nThis operation satisfies `n % d == n - (n / d) * d`, and cannot panic.\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)[§](#impl-RemAssign%3CNonZero%3Cu32%3E%3E-for-u32)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649)[§](#method.rem_assign-2)\n\nThis operation satisfies `n % d == n - (n / d) * d`, and cannot panic.\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)[§](#impl-RemAssign%3CNonZero%3Cu64%3E%3E-for-u64)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654)[§](#method.rem_assign-4)\n\nThis operation satisfies `n % d == n - (n / d) * d`, and cannot panic.\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)[§](#impl-RemAssign%3CNonZero%3Cu8%3E%3E-for-u8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639)[§](#method.rem_assign-3)\n\nThis operation satisfies `n % d == n - (n / d) * d`, and cannot panic.\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)[§](#impl-RemAssign%3CNonZero%3Cusize%3E%3E-for-usize)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664)[§](#method.rem_assign-1)\n\nThis operation satisfies `n % d == n - (n / d) * d`, and cannot panic.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525)[§](#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525)[§](#method.try_from-17)\n\n[§](#associatedtype.Error-17)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525)[§](#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525)[§](#method.try_from-74)\n\n[§](#associatedtype.Error-74)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525)[§](#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525)[§](#method.try_from-82)\n\n[§](#associatedtype.Error-82)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525)[§](#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525)[§](#method.try_from-88)\n\n[§](#associatedtype.Error-88)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525)[§](#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cisize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525)[§](#method.try_from-4)\n\n[§](#associatedtype.Error-4)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541)[§](#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu128%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541)[§](#method.try_from-91)\n\n[§](#associatedtype.Error-91)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541)[§](#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541)[§](#method.try_from-14)\n\n[§](#associatedtype.Error-14)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541)[§](#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541)[§](#method.try_from-45)\n\n[§](#associatedtype.Error-45)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541)[§](#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541)[§](#method.try_from-65)\n\n[§](#associatedtype.Error-65)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541)[§](#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541)[§](#method.try_from-61)\n\n[§](#associatedtype.Error-61)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541)[§](#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cusize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541)[§](#method.try_from-78)\n\n[§](#associatedtype.Error-78)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#522)[§](#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#522)[§](#method.try_from-7)\n\n[§](#associatedtype.Error-7)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538)[§](#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu128%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538)[§](#method.try_from-73)\n\n[§](#associatedtype.Error-73)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538)[§](#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538)[§](#method.try_from-75)\n\n[§](#associatedtype.Error-75)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538)[§](#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538)[§](#method.try_from-22)\n\n[§](#associatedtype.Error-22)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538)[§](#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538)[§](#method.try_from-33)\n\n[§](#associatedtype.Error-33)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538)[§](#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538)[§](#method.try_from-52)\n\n[§](#associatedtype.Error-52)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538)[§](#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cusize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538)[§](#method.try_from-72)\n\n[§](#associatedtype.Error-72)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#523)[§](#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#523)[§](#method.try_from-26)\n\n[§](#associatedtype.Error-26)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#523)[§](#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#523)[§](#method.try_from-19)\n\n[§](#associatedtype.Error-19)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#523)[§](#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cisize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#523)[§](#method.try_from-69)\n\n[§](#associatedtype.Error-69)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539)[§](#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu128%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539)[§](#method.try_from-1)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539)[§](#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539)[§](#method.try_from-6)\n\n[§](#associatedtype.Error-6)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539)[§](#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539)[§](#method.try_from-89)\n\n[§](#associatedtype.Error-89)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539)[§](#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539)[§](#method.try_from-53)\n\n[§](#associatedtype.Error-53)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539)[§](#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539)[§](#method.try_from-23)\n\n[§](#associatedtype.Error-23)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539)[§](#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cusize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539)[§](#method.try_from-95)\n\n[§](#associatedtype.Error-95)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#524)[§](#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#524)[§](#method.try_from-96)\n\n[§](#associatedtype.Error-96)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#524)[§](#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#524)[§](#method.try_from-86)\n\n[§](#associatedtype.Error-86)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#524)[§](#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#524)[§](#method.try_from-2)\n\n[§](#associatedtype.Error-2)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#524)[§](#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cisize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#524)[§](#method.try_from-37)\n\n[§](#associatedtype.Error-37)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540)[§](#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu128%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540)[§](#method.try_from-27)\n\n[§](#associatedtype.Error-27)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540)[§](#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540)[§](#method.try_from-77)\n\n[§](#associatedtype.Error-77)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540)[§](#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540)[§](#method.try_from-80)\n\n[§](#associatedtype.Error-80)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540)[§](#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540)[§](#method.try_from-31)\n\n[§](#associatedtype.Error-31)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540)[§](#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540)[§](#method.try_from-94)\n\n[§](#associatedtype.Error-94)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540)[§](#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cusize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540)[§](#method.try_from-58)\n\n[§](#associatedtype.Error-58)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537)[§](#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu128%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537)[§](#method.try_from-101)\n\n[§](#associatedtype.Error-101)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537)[§](#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537)[§](#method.try_from-3)\n\n[§](#associatedtype.Error-3)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537)[§](#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537)[§](#method.try_from-64)\n\n[§](#associatedtype.Error-64)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537)[§](#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537)[§](#method.try_from-43)\n\n[§](#associatedtype.Error-43)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537)[§](#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537)[§](#method.try_from-16)\n\n[§](#associatedtype.Error-16)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537)[§](#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cusize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537)[§](#method.try_from-104)\n\n[§](#associatedtype.Error-104)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526)[§](#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci128%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526)[§](#method.try_from-90)\n\n[§](#associatedtype.Error-90)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526)[§](#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526)[§](#method.try_from-97)\n\n[§](#associatedtype.Error-97)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526)[§](#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526)[§](#method.try_from-9)\n\n[§](#associatedtype.Error-9)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526)[§](#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526)[§](#method.try_from-87)\n\n[§](#associatedtype.Error-87)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526)[§](#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526)[§](#method.try_from-79)\n\n[§](#associatedtype.Error-79)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542)[§](#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu128%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542)[§](#method.try_from-93)\n\n[§](#associatedtype.Error-93)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542)[§](#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542)[§](#method.try_from-99)\n\n[§](#associatedtype.Error-99)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542)[§](#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542)[§](#method.try_from-42)\n\n[§](#associatedtype.Error-42)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542)[§](#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542)[§](#method.try_from-108)\n\n[§](#associatedtype.Error-108)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542)[§](#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542)[§](#method.try_from-70)\n\n[§](#associatedtype.Error-70)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542)[§](#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cusize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542)[§](#method.try_from-15)\n\n[§](#associatedtype.Error-15)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533)[§](#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci128%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533)[§](#method.try_from-98)\n\n[§](#associatedtype.Error-98)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533)[§](#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533)[§](#method.try_from-48)\n\n[§](#associatedtype.Error-48)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533)[§](#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533)[§](#method.try_from-47)\n\n[§](#associatedtype.Error-47)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533)[§](#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533)[§](#method.try_from-76)\n\n[§](#associatedtype.Error-76)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533)[§](#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533)[§](#method.try_from-105)\n\n[§](#associatedtype.Error-105)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533)[§](#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cisize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533)[§](#method.try_from-85)\n\n[§](#associatedtype.Error-85)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518)[§](#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518)[§](#method.try_from-35)\n\n[§](#associatedtype.Error-35)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518)[§](#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518)[§](#method.try_from-49)\n\n[§](#associatedtype.Error-49)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518)[§](#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518)[§](#method.try_from-92)\n\n[§](#associatedtype.Error-92)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518)[§](#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518)[§](#method.try_from-71)\n\n[§](#associatedtype.Error-71)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518)[§](#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cusize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518)[§](#method.try_from-25)\n\n[§](#associatedtype.Error-25)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#530)[§](#impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#530)[§](#method.try_from-5)\n\n[§](#associatedtype.Error-5)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#530)[§](#impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#530)[§](#method.try_from-57)\n\n[§](#associatedtype.Error-57)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#530)[§](#impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cisize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#530)[§](#method.try_from-83)\n\n[§](#associatedtype.Error-83)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#515)[§](#impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#515)[§](#method.try_from-28)\n\n[§](#associatedtype.Error-28)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#531)[§](#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#531)[§](#method.try_from-13)\n\n[§](#associatedtype.Error-13)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#531)[§](#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#531)[§](#method.try_from-38)\n\n[§](#associatedtype.Error-38)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#531)[§](#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#531)[§](#method.try_from-54)\n\n[§](#associatedtype.Error-54)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#531)[§](#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cisize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#531)[§](#method.try_from-109)\n\n[§](#associatedtype.Error-109)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#516)[§](#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#516)[§](#method.try_from-106)\n\n[§](#associatedtype.Error-106)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#516)[§](#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#516)[§](#method.try_from-10)\n\n[§](#associatedtype.Error-10)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#516)[§](#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cusize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#516)[§](#method.try_from-40)\n\n[§](#associatedtype.Error-40)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532)[§](#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532)[§](#method.try_from-41)\n\n[§](#associatedtype.Error-41)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532)[§](#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532)[§](#method.try_from-62)\n\n[§](#associatedtype.Error-62)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532)[§](#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532)[§](#method.try_from-8)\n\n[§](#associatedtype.Error-8)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532)[§](#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532)[§](#method.try_from-84)\n\n[§](#associatedtype.Error-84)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532)[§](#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cisize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532)[§](#method.try_from-29)\n\n[§](#associatedtype.Error-29)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#517)[§](#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#517)[§](#method.try_from-51)\n\n[§](#associatedtype.Error-51)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#517)[§](#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#517)[§](#method.try_from-34)\n\n[§](#associatedtype.Error-34)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#517)[§](#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#517)[§](#method.try_from-39)\n\n[§](#associatedtype.Error-39)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#517)[§](#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cusize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#517)[§](#method.try_from-50)\n\n[§](#associatedtype.Error-50)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#529)[§](#impl-TryFrom%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#529)[§](#method.try_from-68)\n\n[§](#associatedtype.Error-68)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/alignment.rs.html#169)[§](#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-Alignment)\n\n[§](#associatedtype.Error-20)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/alignment.rs.html#173)[§](#method.try_from-20)\n\nPerforms the conversion.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534)[§](#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci128%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534)[§](#method.try_from-12)\n\n[§](#associatedtype.Error-12)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534)[§](#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534)[§](#method.try_from-59)\n\n[§](#associatedtype.Error-59)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534)[§](#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534)[§](#method.try_from-30)\n\n[§](#associatedtype.Error-30)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534)[§](#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534)[§](#method.try_from-67)\n\n[§](#associatedtype.Error-67)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534)[§](#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534)[§](#method.try_from)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534)[§](#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cisize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534)[§](#method.try_from-102)\n\n[§](#associatedtype.Error-102)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519)[§](#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu128%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519)[§](#method.try_from-66)\n\n[§](#associatedtype.Error-66)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519)[§](#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519)[§](#method.try_from-24)\n\n[§](#associatedtype.Error-24)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519)[§](#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519)[§](#method.try_from-11)\n\n[§](#associatedtype.Error-11)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519)[§](#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519)[§](#method.try_from-55)\n\n[§](#associatedtype.Error-55)\n\nThe type returned in the event of a conversion error.\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519)[§](#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519)[§](#method.try_from-103)\n\n[§](#associatedtype.Error-103)\n\nThe type returned in the event of a conversion error.\n\n1.46.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#492)[§](#impl-TryFrom%3Ci128%3E-for-NonZero%3Ci128%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#492)[§](#method.try_from-44)\n\n[§](#associatedtype.Error-44)\n\nThe type returned in the event of a conversion error.\n\n1.46.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#489)[§](#impl-TryFrom%3Ci16%3E-for-NonZero%3Ci16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#489)[§](#method.try_from-36)\n\n[§](#associatedtype.Error-36)\n\nThe type returned in the event of a conversion error.\n\n1.46.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#490)[§](#impl-TryFrom%3Ci32%3E-for-NonZero%3Ci32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#490)[§](#method.try_from-100)\n\n[§](#associatedtype.Error-100)\n\nThe type returned in the event of a conversion error.\n\n1.46.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#491)[§](#impl-TryFrom%3Ci64%3E-for-NonZero%3Ci64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#491)[§](#method.try_from-21)\n\n[§](#associatedtype.Error-21)\n\nThe type returned in the event of a conversion error.\n\n1.46.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#488)[§](#impl-TryFrom%3Ci8%3E-for-NonZero%3Ci8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#488)[§](#method.try_from-63)\n\n[§](#associatedtype.Error-63)\n\nThe type returned in the event of a conversion error.\n\n1.46.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#493)[§](#impl-TryFrom%3Cisize%3E-for-NonZero%3Cisize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#493)[§](#method.try_from-46)\n\n[§](#associatedtype.Error-46)\n\nThe type returned in the event of a conversion error.\n\n1.46.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#486)[§](#impl-TryFrom%3Cu128%3E-for-NonZero%3Cu128%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#486)[§](#method.try_from-18)\n\n[§](#associatedtype.Error-18)\n\nThe type returned in the event of a conversion error.\n\n1.46.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#483)[§](#impl-TryFrom%3Cu16%3E-for-NonZero%3Cu16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#483)[§](#method.try_from-56)\n\n[§](#associatedtype.Error-56)\n\nThe type returned in the event of a conversion error.\n\n1.46.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#484)[§](#impl-TryFrom%3Cu32%3E-for-NonZero%3Cu32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#484)[§](#method.try_from-60)\n\n[§](#associatedtype.Error-60)\n\nThe type returned in the event of a conversion error.\n\n1.46.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#485)[§](#impl-TryFrom%3Cu64%3E-for-NonZero%3Cu64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#485)[§](#method.try_from-81)\n\n[§](#associatedtype.Error-81)\n\nThe type returned in the event of a conversion error.\n\n1.46.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#482)[§](#impl-TryFrom%3Cu8%3E-for-NonZero%3Cu8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#482)[§](#method.try_from-107)\n\n[§](#associatedtype.Error-107)\n\nThe type returned in the event of a conversion error.\n\n1.46.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#487)[§](#impl-TryFrom%3Cusize%3E-for-NonZero%3Cusize%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#487)[§](#method.try_from-32)\n\n[§](#associatedtype.Error-32)\n\nThe type returned in the event of a conversion error.\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#138)[§](#impl-UpperHex-for-NonZero%3CT%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#172)[§](#impl-Copy-for-NonZero%3CT%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#194)[§](#impl-Eq-for-NonZero%3CT%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#153)[§](#impl-Freeze-for-NonZero%3CT%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#154)[§](#impl-RefUnwindSafe-for-NonZero%3CT%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#155)[§](#impl-Send-for-NonZero%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#191)[§](#impl-StructuralPartialEq-for-NonZero%3CT%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#156)[§](#impl-Sync-for-NonZero%3CT%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#157)[§](#impl-Unpin-for-NonZero%3CT%3E)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#158)[§](#impl-UnwindSafe-for-NonZero%3CT%3E)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A value that is known not to equal zero.\"><title>NonZero in std::num - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">NonZero</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">NonZero</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Associated Constants</a></h3><ul class=\"block associatedconstant\"><li><a href=\"#associatedconstant.BITS\">BITS</a></li><li><a href=\"#associatedconstant.BITS-1\">BITS</a></li><li><a href=\"#associatedconstant.BITS-10\">BITS</a></li><li><a href=\"#associatedconstant.BITS-11\">BITS</a></li><li><a href=\"#associatedconstant.BITS-2\">BITS</a></li><li><a href=\"#associatedconstant.BITS-3\">BITS</a></li><li><a href=\"#associatedconstant.BITS-4\">BITS</a></li><li><a href=\"#associatedconstant.BITS-5\">BITS</a></li><li><a href=\"#associatedconstant.BITS-6\">BITS</a></li><li><a href=\"#associatedconstant.BITS-7\">BITS</a></li><li><a href=\"#associatedconstant.BITS-8\">BITS</a></li><li><a href=\"#associatedconstant.BITS-9\">BITS</a></li><li><a href=\"#associatedconstant.MAX\">MAX</a></li><li><a href=\"#associatedconstant.MAX-1\">MAX</a></li><li><a href=\"#associatedconstant.MAX-10\">MAX</a></li><li><a href=\"#associatedconstant.MAX-11\">MAX</a></li><li><a href=\"#associatedconstant.MAX-2\">MAX</a></li><li><a href=\"#associatedconstant.MAX-3\">MAX</a></li><li><a href=\"#associatedconstant.MAX-4\">MAX</a></li><li><a href=\"#associatedconstant.MAX-5\">MAX</a></li><li><a href=\"#associatedconstant.MAX-6\">MAX</a></li><li><a href=\"#associatedconstant.MAX-7\">MAX</a></li><li><a href=\"#associatedconstant.MAX-8\">MAX</a></li><li><a href=\"#associatedconstant.MAX-9\">MAX</a></li><li><a href=\"#associatedconstant.MIN\">MIN</a></li><li><a href=\"#associatedconstant.MIN-1\">MIN</a></li><li><a href=\"#associatedconstant.MIN-10\">MIN</a></li><li><a href=\"#associatedconstant.MIN-11\">MIN</a></li><li><a href=\"#associatedconstant.MIN-2\">MIN</a></li><li><a href=\"#associatedconstant.MIN-3\">MIN</a></li><li><a href=\"#associatedconstant.MIN-4\">MIN</a></li><li><a href=\"#associatedconstant.MIN-5\">MIN</a></li><li><a href=\"#associatedconstant.MIN-6\">MIN</a></li><li><a href=\"#associatedconstant.MIN-7\">MIN</a></li><li><a href=\"#associatedconstant.MIN-8\">MIN</a></li><li><a href=\"#associatedconstant.MIN-9\">MIN</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.abs\">abs</a></li><li><a href=\"#method.abs-1\">abs</a></li><li><a href=\"#method.abs-2\">abs</a></li><li><a href=\"#method.abs-3\">abs</a></li><li><a href=\"#method.abs-4\">abs</a></li><li><a href=\"#method.abs-5\">abs</a></li><li><a href=\"#method.checked_abs\">checked_abs</a></li><li><a href=\"#method.checked_abs-1\">checked_abs</a></li><li><a href=\"#method.checked_abs-2\">checked_abs</a></li><li><a href=\"#method.checked_abs-3\">checked_abs</a></li><li><a href=\"#method.checked_abs-4\">checked_abs</a></li><li><a href=\"#method.checked_abs-5\">checked_abs</a></li><li><a href=\"#method.checked_add\">checked_add</a></li><li><a href=\"#method.checked_add-1\">checked_add</a></li><li><a href=\"#method.checked_add-2\">checked_add</a></li><li><a href=\"#method.checked_add-3\">checked_add</a></li><li><a href=\"#method.checked_add-4\">checked_add</a></li><li><a href=\"#method.checked_add-5\">checked_add</a></li><li><a href=\"#method.checked_mul\">checked_mul</a></li><li><a href=\"#method.checked_mul-1\">checked_mul</a></li><li><a href=\"#method.checked_mul-10\">checked_mul</a></li><li><a href=\"#method.checked_mul-11\">checked_mul</a></li><li><a href=\"#method.checked_mul-2\">checked_mul</a></li><li><a href=\"#method.checked_mul-3\">checked_mul</a></li><li><a href=\"#method.checked_mul-4\">checked_mul</a></li><li><a href=\"#method.checked_mul-5\">checked_mul</a></li><li><a href=\"#method.checked_mul-6\">checked_mul</a></li><li><a href=\"#method.checked_mul-7\">checked_mul</a></li><li><a href=\"#method.checked_mul-8\">checked_mul</a></li><li><a href=\"#method.checked_mul-9\">checked_mul</a></li><li><a href=\"#method.checked_neg\">checked_neg</a></li><li><a href=\"#method.checked_neg-1\">checked_neg</a></li><li><a href=\"#method.checked_neg-2\">checked_neg</a></li><li><a href=\"#method.checked_neg-3\">checked_neg</a></li><li><a href=\"#method.checked_neg-4\">checked_neg</a></li><li><a href=\"#method.checked_neg-5\">checked_neg</a></li><li><a href=\"#method.checked_next_power_of_two\">checked_next_power_of_two</a></li><li><a href=\"#method.checked_next_power_of_two-1\">checked_next_power_of_two</a></li><li><a href=\"#method.checked_next_power_of_two-2\">checked_next_power_of_two</a></li><li><a href=\"#method.checked_next_power_of_two-3\">checked_next_power_of_two</a></li><li><a href=\"#method.checked_next_power_of_two-4\">checked_next_power_of_two</a></li><li><a href=\"#method.checked_next_power_of_two-5\">checked_next_power_of_two</a></li><li><a href=\"#method.checked_pow\">checked_pow</a></li><li><a href=\"#method.checked_pow-1\">checked_pow</a></li><li><a href=\"#method.checked_pow-10\">checked_pow</a></li><li><a href=\"#method.checked_pow-11\">checked_pow</a></li><li><a href=\"#method.checked_pow-2\">checked_pow</a></li><li><a href=\"#method.checked_pow-3\">checked_pow</a></li><li><a href=\"#method.checked_pow-4\">checked_pow</a></li><li><a href=\"#method.checked_pow-5\">checked_pow</a></li><li><a href=\"#method.checked_pow-6\">checked_pow</a></li><li><a href=\"#method.checked_pow-7\">checked_pow</a></li><li><a href=\"#method.checked_pow-8\">checked_pow</a></li><li><a href=\"#method.checked_pow-9\">checked_pow</a></li><li><a href=\"#method.count_ones\">count_ones</a></li><li><a href=\"#method.count_ones-1\">count_ones</a></li><li><a href=\"#method.count_ones-10\">count_ones</a></li><li><a href=\"#method.count_ones-11\">count_ones</a></li><li><a href=\"#method.count_ones-2\">count_ones</a></li><li><a href=\"#method.count_ones-3\">count_ones</a></li><li><a href=\"#method.count_ones-4\">count_ones</a></li><li><a href=\"#method.count_ones-5\">count_ones</a></li><li><a href=\"#method.count_ones-6\">count_ones</a></li><li><a href=\"#method.count_ones-7\">count_ones</a></li><li><a href=\"#method.count_ones-8\">count_ones</a></li><li><a href=\"#method.count_ones-9\">count_ones</a></li><li><a href=\"#method.from_mut\">from_mut</a></li><li><a href=\"#method.from_mut_unchecked\">from_mut_unchecked</a></li><li><a href=\"#method.get\">get</a></li><li><a href=\"#method.ilog10\">ilog10</a></li><li><a href=\"#method.ilog10-1\">ilog10</a></li><li><a href=\"#method.ilog10-2\">ilog10</a></li><li><a href=\"#method.ilog10-3\">ilog10</a></li><li><a href=\"#method.ilog10-4\">ilog10</a></li><li><a href=\"#method.ilog10-5\">ilog10</a></li><li><a href=\"#method.ilog2\">ilog2</a></li><li><a href=\"#method.ilog2-1\">ilog2</a></li><li><a href=\"#method.ilog2-2\">ilog2</a></li><li><a href=\"#method.ilog2-3\">ilog2</a></li><li><a href=\"#method.ilog2-4\">ilog2</a></li><li><a href=\"#method.ilog2-5\">ilog2</a></li><li><a href=\"#method.is_negative\">is_negative</a></li><li><a href=\"#method.is_negative-1\">is_negative</a></li><li><a href=\"#method.is_negative-2\">is_negative</a></li><li><a href=\"#method.is_negative-3\">is_negative</a></li><li><a href=\"#method.is_negative-4\">is_negative</a></li><li><a href=\"#method.is_negative-5\">is_negative</a></li><li><a href=\"#method.is_positive\">is_positive</a></li><li><a href=\"#method.is_positive-1\">is_positive</a></li><li><a href=\"#method.is_positive-2\">is_positive</a></li><li><a href=\"#method.is_positive-3\">is_positive</a></li><li><a href=\"#method.is_positive-4\">is_positive</a></li><li><a href=\"#method.is_positive-5\">is_positive</a></li><li><a href=\"#method.is_power_of_two\">is_power_of_two</a></li><li><a href=\"#method.is_power_of_two-1\">is_power_of_two</a></li><li><a href=\"#method.is_power_of_two-2\">is_power_of_two</a></li><li><a href=\"#method.is_power_of_two-3\">is_power_of_two</a></li><li><a href=\"#method.is_power_of_two-4\">is_power_of_two</a></li><li><a href=\"#method.is_power_of_two-5\">is_power_of_two</a></li><li><a href=\"#method.leading_zeros\">leading_zeros</a></li><li><a href=\"#method.leading_zeros-1\">leading_zeros</a></li><li><a href=\"#method.leading_zeros-10\">leading_zeros</a></li><li><a href=\"#method.leading_zeros-11\">leading_zeros</a></li><li><a href=\"#method.leading_zeros-2\">leading_zeros</a></li><li><a href=\"#method.leading_zeros-3\">leading_zeros</a></li><li><a href=\"#method.leading_zeros-4\">leading_zeros</a></li><li><a href=\"#method.leading_zeros-5\">leading_zeros</a></li><li><a href=\"#method.leading_zeros-6\">leading_zeros</a></li><li><a href=\"#method.leading_zeros-7\">leading_zeros</a></li><li><a href=\"#method.leading_zeros-8\">leading_zeros</a></li><li><a href=\"#method.leading_zeros-9\">leading_zeros</a></li><li><a href=\"#method.midpoint\">midpoint</a></li><li><a href=\"#method.midpoint-1\">midpoint</a></li><li><a href=\"#method.midpoint-2\">midpoint</a></li><li><a href=\"#method.midpoint-3\">midpoint</a></li><li><a href=\"#method.midpoint-4\">midpoint</a></li><li><a href=\"#method.midpoint-5\">midpoint</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.new_unchecked\">new_unchecked</a></li><li><a href=\"#method.overflowing_abs\">overflowing_abs</a></li><li><a href=\"#method.overflowing_abs-1\">overflowing_abs</a></li><li><a href=\"#method.overflowing_abs-2\">overflowing_abs</a></li><li><a href=\"#method.overflowing_abs-3\">overflowing_abs</a></li><li><a href=\"#method.overflowing_abs-4\">overflowing_abs</a></li><li><a href=\"#method.overflowing_abs-5\">overflowing_abs</a></li><li><a href=\"#method.overflowing_neg\">overflowing_neg</a></li><li><a href=\"#method.overflowing_neg-1\">overflowing_neg</a></li><li><a href=\"#method.overflowing_neg-2\">overflowing_neg</a></li><li><a href=\"#method.overflowing_neg-3\">overflowing_neg</a></li><li><a href=\"#method.overflowing_neg-4\">overflowing_neg</a></li><li><a href=\"#method.overflowing_neg-5\">overflowing_neg</a></li><li><a href=\"#method.saturating_abs\">saturating_abs</a></li><li><a href=\"#method.saturating_abs-1\">saturating_abs</a></li><li><a href=\"#method.saturating_abs-2\">saturating_abs</a></li><li><a href=\"#method.saturating_abs-3\">saturating_abs</a></li><li><a href=\"#method.saturating_abs-4\">saturating_abs</a></li><li><a href=\"#method.saturating_abs-5\">saturating_abs</a></li><li><a href=\"#method.saturating_add\">saturating_add</a></li><li><a href=\"#method.saturating_add-1\">saturating_add</a></li><li><a href=\"#method.saturating_add-2\">saturating_add</a></li><li><a href=\"#method.saturating_add-3\">saturating_add</a></li><li><a href=\"#method.saturating_add-4\">saturating_add</a></li><li><a href=\"#method.saturating_add-5\">saturating_add</a></li><li><a href=\"#method.saturating_mul\">saturating_mul</a></li><li><a href=\"#method.saturating_mul-1\">saturating_mul</a></li><li><a href=\"#method.saturating_mul-10\">saturating_mul</a></li><li><a href=\"#method.saturating_mul-11\">saturating_mul</a></li><li><a href=\"#method.saturating_mul-2\">saturating_mul</a></li><li><a href=\"#method.saturating_mul-3\">saturating_mul</a></li><li><a href=\"#method.saturating_mul-4\">saturating_mul</a></li><li><a href=\"#method.saturating_mul-5\">saturating_mul</a></li><li><a href=\"#method.saturating_mul-6\">saturating_mul</a></li><li><a href=\"#method.saturating_mul-7\">saturating_mul</a></li><li><a href=\"#method.saturating_mul-8\">saturating_mul</a></li><li><a href=\"#method.saturating_mul-9\">saturating_mul</a></li><li><a href=\"#method.saturating_neg\">saturating_neg</a></li><li><a href=\"#method.saturating_neg-1\">saturating_neg</a></li><li><a href=\"#method.saturating_neg-2\">saturating_neg</a></li><li><a href=\"#method.saturating_neg-3\">saturating_neg</a></li><li><a href=\"#method.saturating_neg-4\">saturating_neg</a></li><li><a href=\"#method.saturating_neg-5\">saturating_neg</a></li><li><a href=\"#method.saturating_pow\">saturating_pow</a></li><li><a href=\"#method.saturating_pow-1\">saturating_pow</a></li><li><a href=\"#method.saturating_pow-10\">saturating_pow</a></li><li><a href=\"#method.saturating_pow-11\">saturating_pow</a></li><li><a href=\"#method.saturating_pow-2\">saturating_pow</a></li><li><a href=\"#method.saturating_pow-3\">saturating_pow</a></li><li><a href=\"#method.saturating_pow-4\">saturating_pow</a></li><li><a href=\"#method.saturating_pow-5\">saturating_pow</a></li><li><a href=\"#method.saturating_pow-6\">saturating_pow</a></li><li><a href=\"#method.saturating_pow-7\">saturating_pow</a></li><li><a href=\"#method.saturating_pow-8\">saturating_pow</a></li><li><a href=\"#method.saturating_pow-9\">saturating_pow</a></li><li><a href=\"#method.trailing_zeros\">trailing_zeros</a></li><li><a href=\"#method.trailing_zeros-1\">trailing_zeros</a></li><li><a href=\"#method.trailing_zeros-10\">trailing_zeros</a></li><li><a href=\"#method.trailing_zeros-11\">trailing_zeros</a></li><li><a href=\"#method.trailing_zeros-2\">trailing_zeros</a></li><li><a href=\"#method.trailing_zeros-3\">trailing_zeros</a></li><li><a href=\"#method.trailing_zeros-4\">trailing_zeros</a></li><li><a href=\"#method.trailing_zeros-5\">trailing_zeros</a></li><li><a href=\"#method.trailing_zeros-6\">trailing_zeros</a></li><li><a href=\"#method.trailing_zeros-7\">trailing_zeros</a></li><li><a href=\"#method.trailing_zeros-8\">trailing_zeros</a></li><li><a href=\"#method.trailing_zeros-9\">trailing_zeros</a></li><li><a href=\"#method.unchecked_add\">unchecked_add</a></li><li><a href=\"#method.unchecked_add-1\">unchecked_add</a></li><li><a href=\"#method.unchecked_add-2\">unchecked_add</a></li><li><a href=\"#method.unchecked_add-3\">unchecked_add</a></li><li><a href=\"#method.unchecked_add-4\">unchecked_add</a></li><li><a href=\"#method.unchecked_add-5\">unchecked_add</a></li><li><a href=\"#method.unchecked_mul\">unchecked_mul</a></li><li><a href=\"#method.unchecked_mul-1\">unchecked_mul</a></li><li><a href=\"#method.unchecked_mul-10\">unchecked_mul</a></li><li><a href=\"#method.unchecked_mul-11\">unchecked_mul</a></li><li><a href=\"#method.unchecked_mul-2\">unchecked_mul</a></li><li><a href=\"#method.unchecked_mul-3\">unchecked_mul</a></li><li><a href=\"#method.unchecked_mul-4\">unchecked_mul</a></li><li><a href=\"#method.unchecked_mul-5\">unchecked_mul</a></li><li><a href=\"#method.unchecked_mul-6\">unchecked_mul</a></li><li><a href=\"#method.unchecked_mul-7\">unchecked_mul</a></li><li><a href=\"#method.unchecked_mul-8\">unchecked_mul</a></li><li><a href=\"#method.unchecked_mul-9\">unchecked_mul</a></li><li><a href=\"#method.unsigned_abs\">unsigned_abs</a></li><li><a href=\"#method.unsigned_abs-1\">unsigned_abs</a></li><li><a href=\"#method.unsigned_abs-2\">unsigned_abs</a></li><li><a href=\"#method.unsigned_abs-3\">unsigned_abs</a></li><li><a href=\"#method.unsigned_abs-4\">unsigned_abs</a></li><li><a href=\"#method.unsigned_abs-5\">unsigned_abs</a></li><li><a href=\"#method.wrapping_abs\">wrapping_abs</a></li><li><a href=\"#method.wrapping_abs-1\">wrapping_abs</a></li><li><a href=\"#method.wrapping_abs-2\">wrapping_abs</a></li><li><a href=\"#method.wrapping_abs-3\">wrapping_abs</a></li><li><a href=\"#method.wrapping_abs-4\">wrapping_abs</a></li><li><a href=\"#method.wrapping_abs-5\">wrapping_abs</a></li><li><a href=\"#method.wrapping_neg\">wrapping_neg</a></li><li><a href=\"#method.wrapping_neg-1\">wrapping_neg</a></li><li><a href=\"#method.wrapping_neg-2\">wrapping_neg</a></li><li><a href=\"#method.wrapping_neg-3\">wrapping_neg</a></li><li><a href=\"#method.wrapping_neg-4\">wrapping_neg</a></li><li><a href=\"#method.wrapping_neg-5\">wrapping_neg</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Binary-for-NonZero%3CT%3E\">Binary</a></li><li><a href=\"#impl-BitOr-for-NonZero%3CT%3E\">BitOr</a></li><li><a href=\"#impl-BitOr%3CNonZero%3CT%3E%3E-for-T\">BitOr&lt;NonZero&lt;T&gt;&gt;</a></li><li><a href=\"#impl-BitOr%3CT%3E-for-NonZero%3CT%3E\">BitOr&lt;T&gt;</a></li><li><a href=\"#impl-BitOrAssign-for-NonZero%3CT%3E\">BitOrAssign</a></li><li><a href=\"#impl-BitOrAssign%3CT%3E-for-NonZero%3CT%3E\">BitOrAssign&lt;T&gt;</a></li><li><a href=\"#impl-Clone-for-NonZero%3CT%3E\">Clone</a></li><li><a href=\"#impl-Copy-for-NonZero%3CT%3E\">Copy</a></li><li><a href=\"#impl-Debug-for-NonZero%3CT%3E\">Debug</a></li><li><a href=\"#impl-Display-for-NonZero%3CT%3E\">Display</a></li><li><a href=\"#impl-Div%3CNonZero%3Cu128%3E%3E-for-u128\">Div&lt;NonZero&lt;u128&gt;&gt;</a></li><li><a href=\"#impl-Div%3CNonZero%3Cu16%3E%3E-for-u16\">Div&lt;NonZero&lt;u16&gt;&gt;</a></li><li><a href=\"#impl-Div%3CNonZero%3Cu32%3E%3E-for-u32\">Div&lt;NonZero&lt;u32&gt;&gt;</a></li><li><a href=\"#impl-Div%3CNonZero%3Cu64%3E%3E-for-u64\">Div&lt;NonZero&lt;u64&gt;&gt;</a></li><li><a href=\"#impl-Div%3CNonZero%3Cu8%3E%3E-for-u8\">Div&lt;NonZero&lt;u8&gt;&gt;</a></li><li><a href=\"#impl-Div%3CNonZero%3Cusize%3E%3E-for-usize\">Div&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-DivAssign%3CNonZero%3Cu128%3E%3E-for-u128\">DivAssign&lt;NonZero&lt;u128&gt;&gt;</a></li><li><a href=\"#impl-DivAssign%3CNonZero%3Cu16%3E%3E-for-u16\">DivAssign&lt;NonZero&lt;u16&gt;&gt;</a></li><li><a href=\"#impl-DivAssign%3CNonZero%3Cu32%3E%3E-for-u32\">DivAssign&lt;NonZero&lt;u32&gt;&gt;</a></li><li><a href=\"#impl-DivAssign%3CNonZero%3Cu64%3E%3E-for-u64\">DivAssign&lt;NonZero&lt;u64&gt;&gt;</a></li><li><a href=\"#impl-DivAssign%3CNonZero%3Cu8%3E%3E-for-u8\">DivAssign&lt;NonZero&lt;u8&gt;&gt;</a></li><li><a href=\"#impl-DivAssign%3CNonZero%3Cusize%3E%3E-for-usize\">DivAssign&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-Eq-for-NonZero%3CT%3E\">Eq</a></li><li><a href=\"#impl-Freeze-for-NonZero%3CT%3E\">Freeze</a></li><li><a href=\"#impl-From%3CAlignment%3E-for-NonZero%3Cusize%3E\">From&lt;Alignment&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3CT%3E%3E-for-T\">From&lt;NonZero&lt;T&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci128%3E\">From&lt;NonZero&lt;i16&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci32%3E\">From&lt;NonZero&lt;i16&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci64%3E\">From&lt;NonZero&lt;i16&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cisize%3E\">From&lt;NonZero&lt;i16&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci128%3E\">From&lt;NonZero&lt;i32&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci64%3E\">From&lt;NonZero&lt;i32&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci128%3E\">From&lt;NonZero&lt;i64&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci128%3E\">From&lt;NonZero&lt;i8&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci16%3E\">From&lt;NonZero&lt;i8&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci32%3E\">From&lt;NonZero&lt;i8&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci64%3E\">From&lt;NonZero&lt;i8&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cisize%3E\">From&lt;NonZero&lt;i8&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci128%3E\">From&lt;NonZero&lt;u16&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci32%3E\">From&lt;NonZero&lt;u16&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci64%3E\">From&lt;NonZero&lt;u16&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu128%3E\">From&lt;NonZero&lt;u16&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu32%3E\">From&lt;NonZero&lt;u16&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu64%3E\">From&lt;NonZero&lt;u16&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cusize%3E\">From&lt;NonZero&lt;u16&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci128%3E\">From&lt;NonZero&lt;u32&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci64%3E\">From&lt;NonZero&lt;u32&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu128%3E\">From&lt;NonZero&lt;u32&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu64%3E\">From&lt;NonZero&lt;u32&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci128%3E\">From&lt;NonZero&lt;u64&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu128%3E\">From&lt;NonZero&lt;u64&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci128%3E\">From&lt;NonZero&lt;u8&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci16%3E\">From&lt;NonZero&lt;u8&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci32%3E\">From&lt;NonZero&lt;u8&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci64%3E\">From&lt;NonZero&lt;u8&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cisize%3E\">From&lt;NonZero&lt;u8&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu128%3E\">From&lt;NonZero&lt;u8&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu16%3E\">From&lt;NonZero&lt;u8&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu32%3E\">From&lt;NonZero&lt;u8&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu64%3E\">From&lt;NonZero&lt;u8&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cusize%3E\">From&lt;NonZero&lt;u8&gt;&gt;</a></li><li><a href=\"#impl-FromStr-for-NonZero%3Ci128%3E\">FromStr</a></li><li><a href=\"#impl-FromStr-for-NonZero%3Ci16%3E\">FromStr</a></li><li><a href=\"#impl-FromStr-for-NonZero%3Ci32%3E\">FromStr</a></li><li><a href=\"#impl-FromStr-for-NonZero%3Ci64%3E\">FromStr</a></li><li><a href=\"#impl-FromStr-for-NonZero%3Ci8%3E\">FromStr</a></li><li><a href=\"#impl-FromStr-for-NonZero%3Cisize%3E\">FromStr</a></li><li><a href=\"#impl-FromStr-for-NonZero%3Cu128%3E\">FromStr</a></li><li><a href=\"#impl-FromStr-for-NonZero%3Cu16%3E\">FromStr</a></li><li><a href=\"#impl-FromStr-for-NonZero%3Cu32%3E\">FromStr</a></li><li><a href=\"#impl-FromStr-for-NonZero%3Cu64%3E\">FromStr</a></li><li><a href=\"#impl-FromStr-for-NonZero%3Cu8%3E\">FromStr</a></li><li><a href=\"#impl-FromStr-for-NonZero%3Cusize%3E\">FromStr</a></li><li><a href=\"#impl-Hash-for-NonZero%3CT%3E\">Hash</a></li><li><a href=\"#impl-LowerHex-for-NonZero%3CT%3E\">LowerHex</a></li><li><a href=\"#impl-Neg-for-%26NonZero%3Ci128%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-%26NonZero%3Ci16%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-%26NonZero%3Ci32%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-%26NonZero%3Ci64%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-%26NonZero%3Ci8%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-%26NonZero%3Cisize%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-NonZero%3Ci128%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-NonZero%3Ci16%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-NonZero%3Ci32%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-NonZero%3Ci64%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-NonZero%3Ci8%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-NonZero%3Cisize%3E\">Neg</a></li><li><a href=\"#impl-Octal-for-NonZero%3CT%3E\">Octal</a></li><li><a href=\"#impl-Ord-for-NonZero%3CT%3E\">Ord</a></li><li><a href=\"#impl-PartialEq-for-NonZero%3CT%3E\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-NonZero%3CT%3E\">PartialOrd</a></li><li><a href=\"#impl-RefUnwindSafe-for-NonZero%3CT%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Rem%3CNonZero%3Cu128%3E%3E-for-u128\">Rem&lt;NonZero&lt;u128&gt;&gt;</a></li><li><a href=\"#impl-Rem%3CNonZero%3Cu16%3E%3E-for-u16\">Rem&lt;NonZero&lt;u16&gt;&gt;</a></li><li><a href=\"#impl-Rem%3CNonZero%3Cu32%3E%3E-for-u32\">Rem&lt;NonZero&lt;u32&gt;&gt;</a></li><li><a href=\"#impl-Rem%3CNonZero%3Cu64%3E%3E-for-u64\">Rem&lt;NonZero&lt;u64&gt;&gt;</a></li><li><a href=\"#impl-Rem%3CNonZero%3Cu8%3E%3E-for-u8\">Rem&lt;NonZero&lt;u8&gt;&gt;</a></li><li><a href=\"#impl-Rem%3CNonZero%3Cusize%3E%3E-for-usize\">Rem&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-RemAssign%3CNonZero%3Cu128%3E%3E-for-u128\">RemAssign&lt;NonZero&lt;u128&gt;&gt;</a></li><li><a href=\"#impl-RemAssign%3CNonZero%3Cu16%3E%3E-for-u16\">RemAssign&lt;NonZero&lt;u16&gt;&gt;</a></li><li><a href=\"#impl-RemAssign%3CNonZero%3Cu32%3E%3E-for-u32\">RemAssign&lt;NonZero&lt;u32&gt;&gt;</a></li><li><a href=\"#impl-RemAssign%3CNonZero%3Cu64%3E%3E-for-u64\">RemAssign&lt;NonZero&lt;u64&gt;&gt;</a></li><li><a href=\"#impl-RemAssign%3CNonZero%3Cu8%3E%3E-for-u8\">RemAssign&lt;NonZero&lt;u8&gt;&gt;</a></li><li><a href=\"#impl-RemAssign%3CNonZero%3Cusize%3E%3E-for-usize\">RemAssign&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-Send-for-NonZero%3CT%3E\">Send</a></li><li><a href=\"#impl-StructuralPartialEq-for-NonZero%3CT%3E\">StructuralPartialEq</a></li><li><a href=\"#impl-Sync-for-NonZero%3CT%3E\">Sync</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci16%3E\">TryFrom&lt;NonZero&lt;i128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci32%3E\">TryFrom&lt;NonZero&lt;i128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci64%3E\">TryFrom&lt;NonZero&lt;i128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci8%3E\">TryFrom&lt;NonZero&lt;i128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cisize%3E\">TryFrom&lt;NonZero&lt;i128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu128%3E\">TryFrom&lt;NonZero&lt;i128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu16%3E\">TryFrom&lt;NonZero&lt;i128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu32%3E\">TryFrom&lt;NonZero&lt;i128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu64%3E\">TryFrom&lt;NonZero&lt;i128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu8%3E\">TryFrom&lt;NonZero&lt;i128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cusize%3E\">TryFrom&lt;NonZero&lt;i128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci8%3E\">TryFrom&lt;NonZero&lt;i16&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu128%3E\">TryFrom&lt;NonZero&lt;i16&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu16%3E\">TryFrom&lt;NonZero&lt;i16&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu32%3E\">TryFrom&lt;NonZero&lt;i16&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu64%3E\">TryFrom&lt;NonZero&lt;i16&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu8%3E\">TryFrom&lt;NonZero&lt;i16&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cusize%3E\">TryFrom&lt;NonZero&lt;i16&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci16%3E\">TryFrom&lt;NonZero&lt;i32&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci8%3E\">TryFrom&lt;NonZero&lt;i32&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cisize%3E\">TryFrom&lt;NonZero&lt;i32&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu128%3E\">TryFrom&lt;NonZero&lt;i32&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu16%3E\">TryFrom&lt;NonZero&lt;i32&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu32%3E\">TryFrom&lt;NonZero&lt;i32&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu64%3E\">TryFrom&lt;NonZero&lt;i32&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu8%3E\">TryFrom&lt;NonZero&lt;i32&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cusize%3E\">TryFrom&lt;NonZero&lt;i32&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci16%3E\">TryFrom&lt;NonZero&lt;i64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci32%3E\">TryFrom&lt;NonZero&lt;i64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci8%3E\">TryFrom&lt;NonZero&lt;i64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cisize%3E\">TryFrom&lt;NonZero&lt;i64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu128%3E\">TryFrom&lt;NonZero&lt;i64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu16%3E\">TryFrom&lt;NonZero&lt;i64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu32%3E\">TryFrom&lt;NonZero&lt;i64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu64%3E\">TryFrom&lt;NonZero&lt;i64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu8%3E\">TryFrom&lt;NonZero&lt;i64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cusize%3E\">TryFrom&lt;NonZero&lt;i64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu128%3E\">TryFrom&lt;NonZero&lt;i8&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu16%3E\">TryFrom&lt;NonZero&lt;i8&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu32%3E\">TryFrom&lt;NonZero&lt;i8&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu64%3E\">TryFrom&lt;NonZero&lt;i8&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu8%3E\">TryFrom&lt;NonZero&lt;i8&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cusize%3E\">TryFrom&lt;NonZero&lt;i8&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci128%3E\">TryFrom&lt;NonZero&lt;isize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci16%3E\">TryFrom&lt;NonZero&lt;isize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci32%3E\">TryFrom&lt;NonZero&lt;isize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci64%3E\">TryFrom&lt;NonZero&lt;isize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci8%3E\">TryFrom&lt;NonZero&lt;isize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu128%3E\">TryFrom&lt;NonZero&lt;isize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu16%3E\">TryFrom&lt;NonZero&lt;isize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu32%3E\">TryFrom&lt;NonZero&lt;isize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu64%3E\">TryFrom&lt;NonZero&lt;isize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu8%3E\">TryFrom&lt;NonZero&lt;isize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cusize%3E\">TryFrom&lt;NonZero&lt;isize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci128%3E\">TryFrom&lt;NonZero&lt;u128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci16%3E\">TryFrom&lt;NonZero&lt;u128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci32%3E\">TryFrom&lt;NonZero&lt;u128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci64%3E\">TryFrom&lt;NonZero&lt;u128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci8%3E\">TryFrom&lt;NonZero&lt;u128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cisize%3E\">TryFrom&lt;NonZero&lt;u128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu16%3E\">TryFrom&lt;NonZero&lt;u128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu32%3E\">TryFrom&lt;NonZero&lt;u128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu64%3E\">TryFrom&lt;NonZero&lt;u128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu8%3E\">TryFrom&lt;NonZero&lt;u128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cusize%3E\">TryFrom&lt;NonZero&lt;u128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci16%3E\">TryFrom&lt;NonZero&lt;u16&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci8%3E\">TryFrom&lt;NonZero&lt;u16&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cisize%3E\">TryFrom&lt;NonZero&lt;u16&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu8%3E\">TryFrom&lt;NonZero&lt;u16&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci16%3E\">TryFrom&lt;NonZero&lt;u32&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci32%3E\">TryFrom&lt;NonZero&lt;u32&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci8%3E\">TryFrom&lt;NonZero&lt;u32&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cisize%3E\">TryFrom&lt;NonZero&lt;u32&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu16%3E\">TryFrom&lt;NonZero&lt;u32&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu8%3E\">TryFrom&lt;NonZero&lt;u32&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cusize%3E\">TryFrom&lt;NonZero&lt;u32&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci16%3E\">TryFrom&lt;NonZero&lt;u64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci32%3E\">TryFrom&lt;NonZero&lt;u64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci64%3E\">TryFrom&lt;NonZero&lt;u64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci8%3E\">TryFrom&lt;NonZero&lt;u64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cisize%3E\">TryFrom&lt;NonZero&lt;u64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu16%3E\">TryFrom&lt;NonZero&lt;u64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu32%3E\">TryFrom&lt;NonZero&lt;u64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu8%3E\">TryFrom&lt;NonZero&lt;u64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cusize%3E\">TryFrom&lt;NonZero&lt;u64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci8%3E\">TryFrom&lt;NonZero&lt;u8&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-Alignment\">TryFrom&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci128%3E\">TryFrom&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci16%3E\">TryFrom&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci32%3E\">TryFrom&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci64%3E\">TryFrom&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci8%3E\">TryFrom&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cisize%3E\">TryFrom&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu128%3E\">TryFrom&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu16%3E\">TryFrom&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu32%3E\">TryFrom&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu64%3E\">TryFrom&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu8%3E\">TryFrom&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3Ci128%3E-for-NonZero%3Ci128%3E\">TryFrom&lt;i128&gt;</a></li><li><a href=\"#impl-TryFrom%3Ci16%3E-for-NonZero%3Ci16%3E\">TryFrom&lt;i16&gt;</a></li><li><a href=\"#impl-TryFrom%3Ci32%3E-for-NonZero%3Ci32%3E\">TryFrom&lt;i32&gt;</a></li><li><a href=\"#impl-TryFrom%3Ci64%3E-for-NonZero%3Ci64%3E\">TryFrom&lt;i64&gt;</a></li><li><a href=\"#impl-TryFrom%3Ci8%3E-for-NonZero%3Ci8%3E\">TryFrom&lt;i8&gt;</a></li><li><a href=\"#impl-TryFrom%3Cisize%3E-for-NonZero%3Cisize%3E\">TryFrom&lt;isize&gt;</a></li><li><a href=\"#impl-TryFrom%3Cu128%3E-for-NonZero%3Cu128%3E\">TryFrom&lt;u128&gt;</a></li><li><a href=\"#impl-TryFrom%3Cu16%3E-for-NonZero%3Cu16%3E\">TryFrom&lt;u16&gt;</a></li><li><a href=\"#impl-TryFrom%3Cu32%3E-for-NonZero%3Cu32%3E\">TryFrom&lt;u32&gt;</a></li><li><a href=\"#impl-TryFrom%3Cu64%3E-for-NonZero%3Cu64%3E\">TryFrom&lt;u64&gt;</a></li><li><a href=\"#impl-TryFrom%3Cu8%3E-for-NonZero%3Cu8%3E\">TryFrom&lt;u8&gt;</a></li><li><a href=\"#impl-TryFrom%3Cusize%3E-for-NonZero%3Cusize%3E\">TryFrom&lt;usize&gt;</a></li><li><a href=\"#impl-Unpin-for-NonZero%3CT%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-NonZero%3CT%3E\">UnwindSafe</a></li><li><a href=\"#impl-UpperHex-for-NonZero%3CT%3E\">UpperHex</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-ToString-for-T\">ToString</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::num</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.NonZero.html\">NonZero</a></li><li><a href=\"struct.ParseFloatError.html\">ParseFloatError</a></li><li><a href=\"struct.ParseIntError.html\">ParseIntError</a></li><li><a href=\"struct.Saturating.html\">Saturating</a></li><li><a href=\"struct.TryFromIntError.html\">TryFromIntError</a></li><li><a href=\"struct.Wrapping.html\">Wrapping</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.FpCategory.html\">FpCategory</a></li><li><a href=\"enum.IntErrorKind.html\">IntErrorKind</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.ZeroablePrimitive.html\">ZeroablePrimitive</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.NonZeroI128.html\">NonZeroI128</a></li><li><a href=\"type.NonZeroI16.html\">NonZeroI16</a></li><li><a href=\"type.NonZeroI32.html\">NonZeroI32</a></li><li><a href=\"type.NonZeroI64.html\">NonZeroI64</a></li><li><a href=\"type.NonZeroI8.html\">NonZeroI8</a></li><li><a href=\"type.NonZeroIsize.html\">NonZeroIsize</a></li><li><a href=\"type.NonZeroU128.html\">NonZeroU128</a></li><li><a href=\"type.NonZeroU16.html\">NonZeroU16</a></li><li><a href=\"type.NonZeroU32.html\">NonZeroU32</a></li><li><a href=\"type.NonZeroU64.html\">NonZeroU64</a></li><li><a href=\"type.NonZeroU8.html\">NonZeroU8</a></li><li><a href=\"type.NonZeroUsize.html\">NonZeroUsize</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">num</a>::<wbr><a class=\"struct\" href=\"#\">NonZero</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#116\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct NonZero&lt;T&gt;(<span class=\"comment\">/* private fields */</span>)\n<span class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a></span>;</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A value that is known not to equal zero.</p>\n<p>This enables some memory layout optimization.\nFor example, <code>Option&lt;NonZero&lt;u32&gt;&gt;</code> is the same size as <code>u32</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::{mem::size_of, num::NonZero};\n\n<span class=\"macro\">assert_eq!</span>(size_of::&lt;<span class=\"prelude-ty\">Option</span>&lt;NonZero&lt;u32&gt;&gt;&gt;(), size_of::&lt;u32&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::%7Bmem::size_of,+num::NonZero%7D;%0A++++%0A++++assert_eq!(size_of::%3COption%3CNonZero%3Cu32%3E%3E%3E(),+size_of::%3Cu32%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonZero%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#348-350\">source</a><a href=\"#impl-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0, const since 1.47.0\">1.28.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#357\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>(n: T) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a non-zero if the given value is not zero.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0, const since 1.28.0\">1.28.0 (const: 1.28.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#373\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.new_unchecked\" class=\"fn\">new_unchecked</a>(n: T) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a non-zero without checking whether the value is non-zero.\nThis results in undefined behaviour if the value is zero.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The value must not be zero.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#395\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.from_mut\" class=\"fn\">from_mut</a>(n: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_from_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/106290\">#106290</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts a reference to a non-zero mutable reference\nif the referenced value is not zero.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_mut_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#413\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.from_mut_unchecked\" class=\"fn\">from_mut_unchecked</a>(n: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_from_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/106290\">#106290</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts a mutable reference to a non-zero mutable reference\nwithout checking whether the referenced value is non-zero.\nThis results in undefined behavior if the referenced value is zero.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>The referenced value must not be zero.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0, const since 1.34.0\">1.28.0 (const: 1.34.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#434\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.get\" class=\"fn\">get</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained value as a primitive type.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonZero%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a><a href=\"#impl-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0\">1.67.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a> = 8u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to <a href=\"../primitive.u8.html#associatedconstant.BITS\" title=\"associated constant u8::BITS\"><code>u8::BITS</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u8&gt;::BITS, u8::BITS);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu8%3E::BITS,+u8::BITS);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u8&gt;::new(u8::MAX).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu8%3E::new(u8::MAX).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u8&gt;::new(<span class=\"number\">0b0101000</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu8%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count_ones\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_zero_count_ones</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120287\">#120287</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_zero_count_ones)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;u8&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u8&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Cu8%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Cu8%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type, 1.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u8&gt;::MIN.get(), <span class=\"number\">1u8</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu8%3E::MIN.get(),+1u8);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.u8.html#associatedconstant.MAX\" title=\"associated constant u8::MAX\"><code>u8::MAX</code></a>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u8&gt;::MAX.get(), u8::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu8%3E::MAX.get(),+u8::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add\" class=\"fn\">checked_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), one.checked_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_add(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u8)?;%0Alet+two+=+NonZero::new(2u8)?;%0Alet+max+=+NonZero::new(u8::MAX)?;%0A%0Aassert_eq!(Some(two),+one.checked_add(1));%0Aassert_eq!(None,+max.checked_add(1));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add\" class=\"fn\">saturating_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;u8&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, one.saturating_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_add(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u8)?;%0Alet+two+=+NonZero::new(2u8)?;%0Alet+max+=+NonZero::new(u8::MAX)?;%0A%0Aassert_eq!(two,+one.saturating_add(1));%0Aassert_eq!(max,+max.saturating_add(1));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_add\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_add\" class=\"fn\">unchecked_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self + rhs &gt; u8::MAX</code>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, <span class=\"kw\">unsafe </span>{ one.unchecked_add(<span class=\"number\">1</span>) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u8)?;%0Alet+two+=+NonZero::new(2u8)?;%0A%0Aassert_eq!(two,+unsafe+%7B+one.unchecked_add(1)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_next_power_of_two\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_power_of_two\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to n.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>\nif the next power of two is greater than the type’s maximum value.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), two.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), three.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_next_power_of_two() );</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u8)?;%0Alet+three+=+NonZero::new(3u8)?;%0Alet+four+=+NonZero::new(4u8)?;%0Alet+max+=+NonZero::new(u8::MAX)?;%0A%0Aassert_eq!(Some(two),+two.checked_next_power_of_two()+);%0Aassert_eq!(Some(four),+three.checked_next_power_of_two()+);%0Aassert_eq!(None,+max.checked_next_power_of_two()+);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ilog2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n<a href=\"../primitive.u8.html#method.ilog2\" title=\"method u8::ilog2\"><code>u8::ilog2</code></a>,\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">7u8</span>).unwrap().ilog2(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">8u8</span>).unwrap().ilog2(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">9u8</span>).unwrap().ilog2(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(7u8).unwrap().ilog2(),+2);%0A++++assert_eq!(NonZero::new(8u8).unwrap().ilog2(),+3);%0A++++assert_eq!(NonZero::new(9u8).unwrap().ilog2(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ilog10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n<a href=\"../primitive.u8.html#method.ilog10\" title=\"method u8::ilog10\"><code>u8::ilog10</code></a>,\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">99u8</span>).unwrap().ilog10(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">100u8</span>).unwrap().ilog10(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">101u8</span>).unwrap().ilog10(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(99u8).unwrap().ilog10(),+1);%0A++++assert_eq!(NonZero::new(100u8).unwrap().ilog10(),+2);%0A++++assert_eq!(NonZero::new(101u8).unwrap().ilog10(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.midpoint\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.midpoint\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(one.midpoint(four), two);\n<span class=\"macro\">assert_eq!</span>(four.midpoint(one), two);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u8)?;%0Alet+two+=+NonZero::new(2u8)?;%0Alet+four+=+NonZero::new(4u8)?;%0A%0Aassert_eq!(one.midpoint(four),+two);%0Aassert_eq!(four.midpoint(one),+two);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_power_of_two\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.59.0, const since 1.59.0\">1.59.0 (const: 1.59.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_power_of_two\" class=\"fn\">is_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.</p>\n<p>On many architectures, this function can perform better than <code>is_power_of_two()</code>\non the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>eight = std::num::NonZero::new(<span class=\"number\">8u8</span>).unwrap();\n<span class=\"macro\">assert!</span>(eight.is_power_of_two());\n<span class=\"kw\">let </span>ten = std::num::NonZero::new(<span class=\"number\">10u8</span>).unwrap();\n<span class=\"macro\">assert!</span>(!ten.is_power_of_two());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+eight+=+std::num::NonZero::new(8u8).unwrap();%0A++++assert!(eight.is_power_of_two());%0A++++let+ten+=+std::num::NonZero::new(10u8).unwrap();%0A++++assert!(!ten.is_power_of_two());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u8)?;%0Alet+four+=+NonZero::new(4u8)?;%0Alet+max+=+NonZero::new(u8::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;u8&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u8)?;%0Alet+four+=+NonZero::new(4u8)?;%0Alet+max+=+NonZero::new(u8::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_mul\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self * rhs &gt; u8::MAX</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u8)?;%0Alet+four+=+NonZero::new(4u8)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow\" class=\"fn\">checked_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(u8::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u8)?;%0Alet+twenty_seven+=+NonZero::new(27u8)?;%0Alet+half_max+=+NonZero::new(u8::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow\" class=\"fn\">saturating_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;u8&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u8)?;%0Alet+twenty_seven+=+NonZero::new(27u8)?;%0Alet+max+=+NonZero::new(u8::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonZero%3Cu16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a><a href=\"#impl-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.BITS-1\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0\">1.67.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-1\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a> = 16u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to <a href=\"../primitive.u16.html#associatedconstant.BITS\" title=\"associated constant u16::BITS\"><code>u16::BITS</code></a>.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u16&gt;::BITS, u16::BITS);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu16%3E::BITS,+u16::BITS);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-1\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u16&gt;::new(u16::MAX).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu16%3E::new(u16::MAX).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-1\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u16&gt;::new(<span class=\"number\">0b0101000</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu16%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count_ones-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-1\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_zero_count_ones</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120287\">#120287</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_zero_count_ones)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;u16&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u16&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Cu16%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Cu16%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MIN-1\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-1\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type, 1.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u16&gt;::MIN.get(), <span class=\"number\">1u16</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu16%3E::MIN.get(),+1u16);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MAX-1\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-1\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.u16.html#associatedconstant.MAX\" title=\"associated constant u16::MAX\"><code>u16::MAX</code></a>.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u16&gt;::MAX.get(), u16::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu16%3E::MAX.get(),+u16::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_add-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-1\" class=\"fn\">checked_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), one.checked_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_add(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u16)?;%0Alet+two+=+NonZero::new(2u16)?;%0Alet+max+=+NonZero::new(u16::MAX)?;%0A%0Aassert_eq!(Some(two),+one.checked_add(1));%0Aassert_eq!(None,+max.checked_add(1));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-1\" class=\"fn\">saturating_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;u16&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, one.saturating_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_add(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u16)?;%0Alet+two+=+NonZero::new(2u16)?;%0Alet+max+=+NonZero::new(u16::MAX)?;%0A%0Aassert_eq!(two,+one.saturating_add(1));%0Aassert_eq!(max,+max.saturating_add(1));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_add-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_add-1\" class=\"fn\">unchecked_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self + rhs &gt; u16::MAX</code>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, <span class=\"kw\">unsafe </span>{ one.unchecked_add(<span class=\"number\">1</span>) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u16)?;%0Alet+two+=+NonZero::new(2u16)?;%0A%0Aassert_eq!(two,+unsafe+%7B+one.unchecked_add(1)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_next_power_of_two-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_power_of_two-1\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to n.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>\nif the next power of two is greater than the type’s maximum value.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), two.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), three.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_next_power_of_two() );</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u16)?;%0Alet+three+=+NonZero::new(3u16)?;%0Alet+four+=+NonZero::new(4u16)?;%0Alet+max+=+NonZero::new(u16::MAX)?;%0A%0Aassert_eq!(Some(two),+two.checked_next_power_of_two()+);%0Aassert_eq!(Some(four),+three.checked_next_power_of_two()+);%0Aassert_eq!(None,+max.checked_next_power_of_two()+);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ilog2-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-1\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n<a href=\"../primitive.u16.html#method.ilog2\" title=\"method u16::ilog2\"><code>u16::ilog2</code></a>,\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">7u16</span>).unwrap().ilog2(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">8u16</span>).unwrap().ilog2(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">9u16</span>).unwrap().ilog2(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(7u16).unwrap().ilog2(),+2);%0A++++assert_eq!(NonZero::new(8u16).unwrap().ilog2(),+3);%0A++++assert_eq!(NonZero::new(9u16).unwrap().ilog2(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ilog10-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-1\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n<a href=\"../primitive.u16.html#method.ilog10\" title=\"method u16::ilog10\"><code>u16::ilog10</code></a>,\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">99u16</span>).unwrap().ilog10(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">100u16</span>).unwrap().ilog10(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">101u16</span>).unwrap().ilog10(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(99u16).unwrap().ilog10(),+1);%0A++++assert_eq!(NonZero::new(100u16).unwrap().ilog10(),+2);%0A++++assert_eq!(NonZero::new(101u16).unwrap().ilog10(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.midpoint-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.midpoint-1\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(one.midpoint(four), two);\n<span class=\"macro\">assert_eq!</span>(four.midpoint(one), two);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u16)?;%0Alet+two+=+NonZero::new(2u16)?;%0Alet+four+=+NonZero::new(4u16)?;%0A%0Aassert_eq!(one.midpoint(four),+two);%0Aassert_eq!(four.midpoint(one),+two);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_power_of_two-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.59.0, const since 1.59.0\">1.59.0 (const: 1.59.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_power_of_two-1\" class=\"fn\">is_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.</p>\n<p>On many architectures, this function can perform better than <code>is_power_of_two()</code>\non the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>eight = std::num::NonZero::new(<span class=\"number\">8u16</span>).unwrap();\n<span class=\"macro\">assert!</span>(eight.is_power_of_two());\n<span class=\"kw\">let </span>ten = std::num::NonZero::new(<span class=\"number\">10u16</span>).unwrap();\n<span class=\"macro\">assert!</span>(!ten.is_power_of_two());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+eight+=+std::num::NonZero::new(8u16).unwrap();%0A++++assert!(eight.is_power_of_two());%0A++++let+ten+=+std::num::NonZero::new(10u16).unwrap();%0A++++assert!(!ten.is_power_of_two());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_mul-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-1\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u16)?;%0Alet+four+=+NonZero::new(4u16)?;%0Alet+max+=+NonZero::new(u16::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_mul-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-1\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;u16&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u16)?;%0Alet+four+=+NonZero::new(4u16)?;%0Alet+max+=+NonZero::new(u16::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_mul-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_mul-1\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self * rhs &gt; u16::MAX</code>.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u16)?;%0Alet+four+=+NonZero::new(4u16)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_pow-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-1\" class=\"fn\">checked_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(u16::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u16)?;%0Alet+twenty_seven+=+NonZero::new(27u16)?;%0Alet+half_max+=+NonZero::new(u16::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_pow-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-1\" class=\"fn\">saturating_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;u16&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u16)?;%0Alet+twenty_seven+=+NonZero::new(27u16)?;%0Alet+max+=+NonZero::new(u16::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonZero%3Cu32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a><a href=\"#impl-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.BITS-2\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0\">1.67.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-2\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a> = 32u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to <a href=\"../primitive.u32.html#associatedconstant.BITS\" title=\"associated constant u32::BITS\"><code>u32::BITS</code></a>.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u32&gt;::BITS, u32::BITS);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu32%3E::BITS,+u32::BITS);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-2\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u32&gt;::new(u32::MAX).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu32%3E::new(u32::MAX).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-2\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u32&gt;::new(<span class=\"number\">0b0101000</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu32%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count_ones-2\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-2\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_zero_count_ones</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120287\">#120287</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_zero_count_ones)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;u32&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u32&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Cu32%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Cu32%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MIN-2\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-2\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type, 1.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u32&gt;::MIN.get(), <span class=\"number\">1u32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu32%3E::MIN.get(),+1u32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MAX-2\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-2\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.u32.html#associatedconstant.MAX\" title=\"associated constant u32::MAX\"><code>u32::MAX</code></a>.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u32&gt;::MAX.get(), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu32%3E::MAX.get(),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_add-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-2\" class=\"fn\">checked_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), one.checked_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_add(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u32)?;%0Alet+two+=+NonZero::new(2u32)?;%0Alet+max+=+NonZero::new(u32::MAX)?;%0A%0Aassert_eq!(Some(two),+one.checked_add(1));%0Aassert_eq!(None,+max.checked_add(1));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-2\" class=\"fn\">saturating_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;u32&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, one.saturating_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_add(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u32)?;%0Alet+two+=+NonZero::new(2u32)?;%0Alet+max+=+NonZero::new(u32::MAX)?;%0A%0Aassert_eq!(two,+one.saturating_add(1));%0Aassert_eq!(max,+max.saturating_add(1));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_add-2\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_add-2\" class=\"fn\">unchecked_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self + rhs &gt; u32::MAX</code>.</p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, <span class=\"kw\">unsafe </span>{ one.unchecked_add(<span class=\"number\">1</span>) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u32)?;%0Alet+two+=+NonZero::new(2u32)?;%0A%0Aassert_eq!(two,+unsafe+%7B+one.unchecked_add(1)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_next_power_of_two-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_power_of_two-2\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to n.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>\nif the next power of two is greater than the type’s maximum value.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-47\"><a class=\"doc-anchor\" href=\"#examples-47\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), two.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), three.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_next_power_of_two() );</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u32)?;%0Alet+three+=+NonZero::new(3u32)?;%0Alet+four+=+NonZero::new(4u32)?;%0Alet+max+=+NonZero::new(u32::MAX)?;%0A%0Aassert_eq!(Some(two),+two.checked_next_power_of_two()+);%0Aassert_eq!(Some(four),+three.checked_next_power_of_two()+);%0Aassert_eq!(None,+max.checked_next_power_of_two()+);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ilog2-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-2\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n<a href=\"../primitive.u32.html#method.ilog2\" title=\"method u32::ilog2\"><code>u32::ilog2</code></a>,\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-48\"><a class=\"doc-anchor\" href=\"#examples-48\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">7u32</span>).unwrap().ilog2(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">8u32</span>).unwrap().ilog2(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">9u32</span>).unwrap().ilog2(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(7u32).unwrap().ilog2(),+2);%0A++++assert_eq!(NonZero::new(8u32).unwrap().ilog2(),+3);%0A++++assert_eq!(NonZero::new(9u32).unwrap().ilog2(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ilog10-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-2\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n<a href=\"../primitive.u32.html#method.ilog10\" title=\"method u32::ilog10\"><code>u32::ilog10</code></a>,\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-49\"><a class=\"doc-anchor\" href=\"#examples-49\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">99u32</span>).unwrap().ilog10(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">100u32</span>).unwrap().ilog10(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">101u32</span>).unwrap().ilog10(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(99u32).unwrap().ilog10(),+1);%0A++++assert_eq!(NonZero::new(100u32).unwrap().ilog10(),+2);%0A++++assert_eq!(NonZero::new(101u32).unwrap().ilog10(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.midpoint-2\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.midpoint-2\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-50\"><a class=\"doc-anchor\" href=\"#examples-50\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(one.midpoint(four), two);\n<span class=\"macro\">assert_eq!</span>(four.midpoint(one), two);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u32)?;%0Alet+two+=+NonZero::new(2u32)?;%0Alet+four+=+NonZero::new(4u32)?;%0A%0Aassert_eq!(one.midpoint(four),+two);%0Aassert_eq!(four.midpoint(one),+two);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_power_of_two-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.59.0, const since 1.59.0\">1.59.0 (const: 1.59.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_power_of_two-2\" class=\"fn\">is_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.</p>\n<p>On many architectures, this function can perform better than <code>is_power_of_two()</code>\non the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-51\"><a class=\"doc-anchor\" href=\"#examples-51\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>eight = std::num::NonZero::new(<span class=\"number\">8u32</span>).unwrap();\n<span class=\"macro\">assert!</span>(eight.is_power_of_two());\n<span class=\"kw\">let </span>ten = std::num::NonZero::new(<span class=\"number\">10u32</span>).unwrap();\n<span class=\"macro\">assert!</span>(!ten.is_power_of_two());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+eight+=+std::num::NonZero::new(8u32).unwrap();%0A++++assert!(eight.is_power_of_two());%0A++++let+ten+=+std::num::NonZero::new(10u32).unwrap();%0A++++assert!(!ten.is_power_of_two());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_mul-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-2\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-52\"><a class=\"doc-anchor\" href=\"#examples-52\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u32)?;%0Alet+four+=+NonZero::new(4u32)?;%0Alet+max+=+NonZero::new(u32::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_mul-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-2\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;u32&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-53\"><a class=\"doc-anchor\" href=\"#examples-53\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u32)?;%0Alet+four+=+NonZero::new(4u32)?;%0Alet+max+=+NonZero::new(u32::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_mul-2\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_mul-2\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self * rhs &gt; u32::MAX</code>.</p>\n<h5 id=\"examples-54\"><a class=\"doc-anchor\" href=\"#examples-54\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u32)?;%0Alet+four+=+NonZero::new(4u32)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_pow-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-2\" class=\"fn\">checked_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-55\"><a class=\"doc-anchor\" href=\"#examples-55\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(u32::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u32)?;%0Alet+twenty_seven+=+NonZero::new(27u32)?;%0Alet+half_max+=+NonZero::new(u32::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_pow-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-2\" class=\"fn\">saturating_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;u32&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-56\"><a class=\"doc-anchor\" href=\"#examples-56\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u32)?;%0Alet+twenty_seven+=+NonZero::new(27u32)?;%0Alet+max+=+NonZero::new(u32::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonZero%3Cu64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a><a href=\"#impl-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.BITS-3\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0\">1.67.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-3\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a> = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to <a href=\"../primitive.u64.html#associatedconstant.BITS\" title=\"associated constant u64::BITS\"><code>u64::BITS</code></a>.</p>\n<h5 id=\"examples-57\"><a class=\"doc-anchor\" href=\"#examples-57\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u64&gt;::BITS, u64::BITS);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu64%3E::BITS,+u64::BITS);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-3\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-58\"><a class=\"doc-anchor\" href=\"#examples-58\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u64&gt;::new(u64::MAX).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu64%3E::new(u64::MAX).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-3\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-59\"><a class=\"doc-anchor\" href=\"#examples-59\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u64&gt;::new(<span class=\"number\">0b0101000</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu64%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count_ones-3\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-3\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_zero_count_ones</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120287\">#120287</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-60\"><a class=\"doc-anchor\" href=\"#examples-60\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_zero_count_ones)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;u64&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u64&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Cu64%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Cu64%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MIN-3\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-3\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type, 1.</p>\n<h5 id=\"examples-61\"><a class=\"doc-anchor\" href=\"#examples-61\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u64&gt;::MIN.get(), <span class=\"number\">1u64</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu64%3E::MIN.get(),+1u64);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MAX-3\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-3\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.u64.html#associatedconstant.MAX\" title=\"associated constant u64::MAX\"><code>u64::MAX</code></a>.</p>\n<h5 id=\"examples-62\"><a class=\"doc-anchor\" href=\"#examples-62\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u64&gt;::MAX.get(), u64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu64%3E::MAX.get(),+u64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_add-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-3\" class=\"fn\">checked_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-63\"><a class=\"doc-anchor\" href=\"#examples-63\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), one.checked_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_add(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u64)?;%0Alet+two+=+NonZero::new(2u64)?;%0Alet+max+=+NonZero::new(u64::MAX)?;%0A%0Aassert_eq!(Some(two),+one.checked_add(1));%0Aassert_eq!(None,+max.checked_add(1));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-3\" class=\"fn\">saturating_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;u64&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-64\"><a class=\"doc-anchor\" href=\"#examples-64\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, one.saturating_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_add(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u64)?;%0Alet+two+=+NonZero::new(2u64)?;%0Alet+max+=+NonZero::new(u64::MAX)?;%0A%0Aassert_eq!(two,+one.saturating_add(1));%0Aassert_eq!(max,+max.saturating_add(1));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_add-3\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_add-3\" class=\"fn\">unchecked_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self + rhs &gt; u64::MAX</code>.</p>\n<h5 id=\"examples-65\"><a class=\"doc-anchor\" href=\"#examples-65\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, <span class=\"kw\">unsafe </span>{ one.unchecked_add(<span class=\"number\">1</span>) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u64)?;%0Alet+two+=+NonZero::new(2u64)?;%0A%0Aassert_eq!(two,+unsafe+%7B+one.unchecked_add(1)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_next_power_of_two-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_power_of_two-3\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to n.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>\nif the next power of two is greater than the type’s maximum value.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-66\"><a class=\"doc-anchor\" href=\"#examples-66\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), two.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), three.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_next_power_of_two() );</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u64)?;%0Alet+three+=+NonZero::new(3u64)?;%0Alet+four+=+NonZero::new(4u64)?;%0Alet+max+=+NonZero::new(u64::MAX)?;%0A%0Aassert_eq!(Some(two),+two.checked_next_power_of_two()+);%0Aassert_eq!(Some(four),+three.checked_next_power_of_two()+);%0Aassert_eq!(None,+max.checked_next_power_of_two()+);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ilog2-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-3\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n<a href=\"../primitive.u64.html#method.ilog2\" title=\"method u64::ilog2\"><code>u64::ilog2</code></a>,\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-67\"><a class=\"doc-anchor\" href=\"#examples-67\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">7u64</span>).unwrap().ilog2(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">8u64</span>).unwrap().ilog2(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">9u64</span>).unwrap().ilog2(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(7u64).unwrap().ilog2(),+2);%0A++++assert_eq!(NonZero::new(8u64).unwrap().ilog2(),+3);%0A++++assert_eq!(NonZero::new(9u64).unwrap().ilog2(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ilog10-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-3\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n<a href=\"../primitive.u64.html#method.ilog10\" title=\"method u64::ilog10\"><code>u64::ilog10</code></a>,\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-68\"><a class=\"doc-anchor\" href=\"#examples-68\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">99u64</span>).unwrap().ilog10(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">100u64</span>).unwrap().ilog10(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">101u64</span>).unwrap().ilog10(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(99u64).unwrap().ilog10(),+1);%0A++++assert_eq!(NonZero::new(100u64).unwrap().ilog10(),+2);%0A++++assert_eq!(NonZero::new(101u64).unwrap().ilog10(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.midpoint-3\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.midpoint-3\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-69\"><a class=\"doc-anchor\" href=\"#examples-69\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(one.midpoint(four), two);\n<span class=\"macro\">assert_eq!</span>(four.midpoint(one), two);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u64)?;%0Alet+two+=+NonZero::new(2u64)?;%0Alet+four+=+NonZero::new(4u64)?;%0A%0Aassert_eq!(one.midpoint(four),+two);%0Aassert_eq!(four.midpoint(one),+two);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_power_of_two-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.59.0, const since 1.59.0\">1.59.0 (const: 1.59.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_power_of_two-3\" class=\"fn\">is_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.</p>\n<p>On many architectures, this function can perform better than <code>is_power_of_two()</code>\non the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-70\"><a class=\"doc-anchor\" href=\"#examples-70\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>eight = std::num::NonZero::new(<span class=\"number\">8u64</span>).unwrap();\n<span class=\"macro\">assert!</span>(eight.is_power_of_two());\n<span class=\"kw\">let </span>ten = std::num::NonZero::new(<span class=\"number\">10u64</span>).unwrap();\n<span class=\"macro\">assert!</span>(!ten.is_power_of_two());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+eight+=+std::num::NonZero::new(8u64).unwrap();%0A++++assert!(eight.is_power_of_two());%0A++++let+ten+=+std::num::NonZero::new(10u64).unwrap();%0A++++assert!(!ten.is_power_of_two());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_mul-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-3\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-71\"><a class=\"doc-anchor\" href=\"#examples-71\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u64)?;%0Alet+four+=+NonZero::new(4u64)?;%0Alet+max+=+NonZero::new(u64::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_mul-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-3\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;u64&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-72\"><a class=\"doc-anchor\" href=\"#examples-72\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u64)?;%0Alet+four+=+NonZero::new(4u64)?;%0Alet+max+=+NonZero::new(u64::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_mul-3\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_mul-3\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self * rhs &gt; u64::MAX</code>.</p>\n<h5 id=\"examples-73\"><a class=\"doc-anchor\" href=\"#examples-73\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u64)?;%0Alet+four+=+NonZero::new(4u64)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_pow-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-3\" class=\"fn\">checked_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-74\"><a class=\"doc-anchor\" href=\"#examples-74\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(u64::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u64)?;%0Alet+twenty_seven+=+NonZero::new(27u64)?;%0Alet+half_max+=+NonZero::new(u64::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_pow-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-3\" class=\"fn\">saturating_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;u64&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-75\"><a class=\"doc-anchor\" href=\"#examples-75\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u64)?;%0Alet+twenty_seven+=+NonZero::new(27u64)?;%0Alet+max+=+NonZero::new(u64::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonZero%3Cu128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a><a href=\"#impl-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.BITS-4\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0\">1.67.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-4\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a> = 128u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to <a href=\"../primitive.u128.html#associatedconstant.BITS\" title=\"associated constant u128::BITS\"><code>u128::BITS</code></a>.</p>\n<h5 id=\"examples-76\"><a class=\"doc-anchor\" href=\"#examples-76\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u128&gt;::BITS, u128::BITS);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu128%3E::BITS,+u128::BITS);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-4\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-77\"><a class=\"doc-anchor\" href=\"#examples-77\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u128&gt;::new(u128::MAX).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu128%3E::new(u128::MAX).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-4\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-78\"><a class=\"doc-anchor\" href=\"#examples-78\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;u128&gt;::new(<span class=\"number\">0b0101000</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cu128%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count_ones-4\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-4\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_zero_count_ones</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120287\">#120287</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-79\"><a class=\"doc-anchor\" href=\"#examples-79\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_zero_count_ones)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;u128&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;u128&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Cu128%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Cu128%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MIN-4\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-4\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type, 1.</p>\n<h5 id=\"examples-80\"><a class=\"doc-anchor\" href=\"#examples-80\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u128&gt;::MIN.get(), <span class=\"number\">1u128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu128%3E::MIN.get(),+1u128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MAX-4\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-4\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.u128.html#associatedconstant.MAX\" title=\"associated constant u128::MAX\"><code>u128::MAX</code></a>.</p>\n<h5 id=\"examples-81\"><a class=\"doc-anchor\" href=\"#examples-81\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;u128&gt;::MAX.get(), u128::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cu128%3E::MAX.get(),+u128::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_add-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-4\" class=\"fn\">checked_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-82\"><a class=\"doc-anchor\" href=\"#examples-82\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), one.checked_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_add(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u128)?;%0Alet+two+=+NonZero::new(2u128)?;%0Alet+max+=+NonZero::new(u128::MAX)?;%0A%0Aassert_eq!(Some(two),+one.checked_add(1));%0Aassert_eq!(None,+max.checked_add(1));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-4\" class=\"fn\">saturating_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;u128&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-83\"><a class=\"doc-anchor\" href=\"#examples-83\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, one.saturating_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_add(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u128)?;%0Alet+two+=+NonZero::new(2u128)?;%0Alet+max+=+NonZero::new(u128::MAX)?;%0A%0Aassert_eq!(two,+one.saturating_add(1));%0Aassert_eq!(max,+max.saturating_add(1));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_add-4\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_add-4\" class=\"fn\">unchecked_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self + rhs &gt; u128::MAX</code>.</p>\n<h5 id=\"examples-84\"><a class=\"doc-anchor\" href=\"#examples-84\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, <span class=\"kw\">unsafe </span>{ one.unchecked_add(<span class=\"number\">1</span>) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u128)?;%0Alet+two+=+NonZero::new(2u128)?;%0A%0Aassert_eq!(two,+unsafe+%7B+one.unchecked_add(1)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_next_power_of_two-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_power_of_two-4\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to n.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>\nif the next power of two is greater than the type’s maximum value.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-85\"><a class=\"doc-anchor\" href=\"#examples-85\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), two.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), three.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_next_power_of_two() );</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u128)?;%0Alet+three+=+NonZero::new(3u128)?;%0Alet+four+=+NonZero::new(4u128)?;%0Alet+max+=+NonZero::new(u128::MAX)?;%0A%0Aassert_eq!(Some(two),+two.checked_next_power_of_two()+);%0Aassert_eq!(Some(four),+three.checked_next_power_of_two()+);%0Aassert_eq!(None,+max.checked_next_power_of_two()+);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ilog2-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-4\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n<a href=\"../primitive.u128.html#method.ilog2\" title=\"method u128::ilog2\"><code>u128::ilog2</code></a>,\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-86\"><a class=\"doc-anchor\" href=\"#examples-86\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">7u128</span>).unwrap().ilog2(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">8u128</span>).unwrap().ilog2(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">9u128</span>).unwrap().ilog2(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(7u128).unwrap().ilog2(),+2);%0A++++assert_eq!(NonZero::new(8u128).unwrap().ilog2(),+3);%0A++++assert_eq!(NonZero::new(9u128).unwrap().ilog2(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ilog10-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-4\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n<a href=\"../primitive.u128.html#method.ilog10\" title=\"method u128::ilog10\"><code>u128::ilog10</code></a>,\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-87\"><a class=\"doc-anchor\" href=\"#examples-87\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">99u128</span>).unwrap().ilog10(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">100u128</span>).unwrap().ilog10(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">101u128</span>).unwrap().ilog10(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(99u128).unwrap().ilog10(),+1);%0A++++assert_eq!(NonZero::new(100u128).unwrap().ilog10(),+2);%0A++++assert_eq!(NonZero::new(101u128).unwrap().ilog10(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.midpoint-4\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.midpoint-4\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-88\"><a class=\"doc-anchor\" href=\"#examples-88\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(one.midpoint(four), two);\n<span class=\"macro\">assert_eq!</span>(four.midpoint(one), two);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1u128)?;%0Alet+two+=+NonZero::new(2u128)?;%0Alet+four+=+NonZero::new(4u128)?;%0A%0Aassert_eq!(one.midpoint(four),+two);%0Aassert_eq!(four.midpoint(one),+two);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_power_of_two-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.59.0, const since 1.59.0\">1.59.0 (const: 1.59.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_power_of_two-4\" class=\"fn\">is_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.</p>\n<p>On many architectures, this function can perform better than <code>is_power_of_two()</code>\non the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-89\"><a class=\"doc-anchor\" href=\"#examples-89\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>eight = std::num::NonZero::new(<span class=\"number\">8u128</span>).unwrap();\n<span class=\"macro\">assert!</span>(eight.is_power_of_two());\n<span class=\"kw\">let </span>ten = std::num::NonZero::new(<span class=\"number\">10u128</span>).unwrap();\n<span class=\"macro\">assert!</span>(!ten.is_power_of_two());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+eight+=+std::num::NonZero::new(8u128).unwrap();%0A++++assert!(eight.is_power_of_two());%0A++++let+ten+=+std::num::NonZero::new(10u128).unwrap();%0A++++assert!(!ten.is_power_of_two());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_mul-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-4\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-90\"><a class=\"doc-anchor\" href=\"#examples-90\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u128)?;%0Alet+four+=+NonZero::new(4u128)?;%0Alet+max+=+NonZero::new(u128::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_mul-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-4\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;u128&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-91\"><a class=\"doc-anchor\" href=\"#examples-91\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u128)?;%0Alet+four+=+NonZero::new(4u128)?;%0Alet+max+=+NonZero::new(u128::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_mul-4\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_mul-4\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self * rhs &gt; u128::MAX</code>.</p>\n<h5 id=\"examples-92\"><a class=\"doc-anchor\" href=\"#examples-92\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4u128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2u128)?;%0Alet+four+=+NonZero::new(4u128)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_pow-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-4\" class=\"fn\">checked_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-93\"><a class=\"doc-anchor\" href=\"#examples-93\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(u128::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u128)?;%0Alet+twenty_seven+=+NonZero::new(27u128)?;%0Alet+half_max+=+NonZero::new(u128::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_pow-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-4\" class=\"fn\">saturating_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;u128&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-94\"><a class=\"doc-anchor\" href=\"#examples-94\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(u128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3u128)?;%0Alet+twenty_seven+=+NonZero::new(27u128)?;%0Alet+max+=+NonZero::new(u128::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonZero%3Cusize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a><a href=\"#impl-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.BITS-5\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0\">1.67.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-5\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a> = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to <a href=\"../primitive.usize.html#associatedconstant.BITS\" title=\"associated constant usize::BITS\"><code>usize::BITS</code></a>.</p>\n<h5 id=\"examples-95\"><a class=\"doc-anchor\" href=\"#examples-95\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;usize&gt;::BITS, usize::BITS);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cusize%3E::BITS,+usize::BITS);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-5\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-96\"><a class=\"doc-anchor\" href=\"#examples-96\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;usize&gt;::new(usize::MAX).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cusize%3E::new(usize::MAX).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-5\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-97\"><a class=\"doc-anchor\" href=\"#examples-97\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;usize&gt;::new(<span class=\"number\">0b0101000</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cusize%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count_ones-5\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-5\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_zero_count_ones</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120287\">#120287</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-98\"><a class=\"doc-anchor\" href=\"#examples-98\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_zero_count_ones)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;usize&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;usize&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Cusize%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Cusize%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MIN-5\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-5\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type, 1.</p>\n<h5 id=\"examples-99\"><a class=\"doc-anchor\" href=\"#examples-99\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;usize&gt;::MIN.get(), <span class=\"number\">1usize</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cusize%3E::MIN.get(),+1usize);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MAX-5\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-5\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.usize.html#associatedconstant.MAX\" title=\"associated constant usize::MAX\"><code>usize::MAX</code></a>.</p>\n<h5 id=\"examples-100\"><a class=\"doc-anchor\" href=\"#examples-100\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;usize&gt;::MAX.get(), usize::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cusize%3E::MAX.get(),+usize::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_add-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-5\" class=\"fn\">checked_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-101\"><a class=\"doc-anchor\" href=\"#examples-101\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(usize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), one.checked_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_add(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1usize)?;%0Alet+two+=+NonZero::new(2usize)?;%0Alet+max+=+NonZero::new(usize::MAX)?;%0A%0Aassert_eq!(Some(two),+one.checked_add(1));%0Aassert_eq!(None,+max.checked_add(1));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-5\" class=\"fn\">saturating_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;usize&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-102\"><a class=\"doc-anchor\" href=\"#examples-102\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(usize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, one.saturating_add(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_add(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1usize)?;%0Alet+two+=+NonZero::new(2usize)?;%0Alet+max+=+NonZero::new(usize::MAX)?;%0A%0Aassert_eq!(two,+one.saturating_add(1));%0Aassert_eq!(max,+max.saturating_add(1));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_add-5\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_add-5\" class=\"fn\">unchecked_add</a>(self, other: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Adds an unsigned integer to a non-zero value,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self + rhs &gt; usize::MAX</code>.</p>\n<h5 id=\"examples-103\"><a class=\"doc-anchor\" href=\"#examples-103\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(two, <span class=\"kw\">unsafe </span>{ one.unchecked_add(<span class=\"number\">1</span>) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1usize)?;%0Alet+two+=+NonZero::new(2usize)?;%0A%0Aassert_eq!(two,+unsafe+%7B+one.unchecked_add(1)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_next_power_of_two-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_power_of_two-5\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to n.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>\nif the next power of two is greater than the type’s maximum value.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-104\"><a class=\"doc-anchor\" href=\"#examples-104\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(usize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(two), two.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), three.checked_next_power_of_two() );\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_next_power_of_two() );</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2usize)?;%0Alet+three+=+NonZero::new(3usize)?;%0Alet+four+=+NonZero::new(4usize)?;%0Alet+max+=+NonZero::new(usize::MAX)?;%0A%0Aassert_eq!(Some(two),+two.checked_next_power_of_two()+);%0Aassert_eq!(Some(four),+three.checked_next_power_of_two()+);%0Aassert_eq!(None,+max.checked_next_power_of_two()+);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ilog2-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-5\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n<a href=\"../primitive.usize.html#method.ilog2\" title=\"method usize::ilog2\"><code>usize::ilog2</code></a>,\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-105\"><a class=\"doc-anchor\" href=\"#examples-105\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">7usize</span>).unwrap().ilog2(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">8usize</span>).unwrap().ilog2(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">9usize</span>).unwrap().ilog2(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(7usize).unwrap().ilog2(),+2);%0A++++assert_eq!(NonZero::new(8usize).unwrap().ilog2(),+3);%0A++++assert_eq!(NonZero::new(9usize).unwrap().ilog2(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ilog10-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-5\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>This is the same operation as\n<a href=\"../primitive.usize.html#method.ilog10\" title=\"method usize::ilog10\"><code>usize::ilog10</code></a>,\nexcept that it has no failure cases to worry about\nsince this value can never be zero.</p>\n<h5 id=\"examples-106\"><a class=\"doc-anchor\" href=\"#examples-106\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">99usize</span>).unwrap().ilog10(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">100usize</span>).unwrap().ilog10(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(NonZero::new(<span class=\"number\">101usize</span>).unwrap().ilog10(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::new(99usize).unwrap().ilog10(),+1);%0A++++assert_eq!(NonZero::new(100usize).unwrap().ilog10(),+2);%0A++++assert_eq!(NonZero::new(101usize).unwrap().ilog10(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.midpoint-5\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.midpoint-5\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-107\"><a class=\"doc-anchor\" href=\"#examples-107\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n\n</span><span class=\"kw\">let </span>one = NonZero::new(<span class=\"number\">1usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4usize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(one.midpoint(four), two);\n<span class=\"macro\">assert_eq!</span>(four.midpoint(one), two);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+one+=+NonZero::new(1usize)?;%0Alet+two+=+NonZero::new(2usize)?;%0Alet+four+=+NonZero::new(4usize)?;%0A%0Aassert_eq!(one.midpoint(four),+two);%0Aassert_eq!(four.midpoint(one),+two);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_power_of_two-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.59.0, const since 1.59.0\">1.59.0 (const: 1.59.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_power_of_two-5\" class=\"fn\">is_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.</p>\n<p>On many architectures, this function can perform better than <code>is_power_of_two()</code>\non the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-108\"><a class=\"doc-anchor\" href=\"#examples-108\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>eight = std::num::NonZero::new(<span class=\"number\">8usize</span>).unwrap();\n<span class=\"macro\">assert!</span>(eight.is_power_of_two());\n<span class=\"kw\">let </span>ten = std::num::NonZero::new(<span class=\"number\">10usize</span>).unwrap();\n<span class=\"macro\">assert!</span>(!ten.is_power_of_two());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+eight+=+std::num::NonZero::new(8usize).unwrap();%0A++++assert!(eight.is_power_of_two());%0A++++let+ten+=+std::num::NonZero::new(10usize).unwrap();%0A++++assert!(!ten.is_power_of_two());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_mul-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-5\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-109\"><a class=\"doc-anchor\" href=\"#examples-109\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(usize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2usize)?;%0Alet+four+=+NonZero::new(4usize)?;%0Alet+max+=+NonZero::new(usize::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_mul-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-5\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;usize&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-110\"><a class=\"doc-anchor\" href=\"#examples-110\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(usize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2usize)?;%0Alet+four+=+NonZero::new(4usize)?;%0Alet+max+=+NonZero::new(usize::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_mul-5\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_mul-5\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self * rhs &gt; usize::MAX</code>.</p>\n<h5 id=\"examples-111\"><a class=\"doc-anchor\" href=\"#examples-111\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4usize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2usize)?;%0Alet+four+=+NonZero::new(4usize)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_pow-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-5\" class=\"fn\">checked_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-112\"><a class=\"doc-anchor\" href=\"#examples-112\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(usize::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3usize)?;%0Alet+twenty_seven+=+NonZero::new(27usize)?;%0Alet+half_max+=+NonZero::new(usize::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_pow-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-5\" class=\"fn\">saturating_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;usize&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-113\"><a class=\"doc-anchor\" href=\"#examples-113\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(usize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3usize)?;%0Alet+twenty_seven+=+NonZero::new(27usize)?;%0Alet+max+=+NonZero::new(usize::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonZero%3Ci8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a><a href=\"#impl-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.BITS-6\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0\">1.67.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-6\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a> = 8u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to <a href=\"../primitive.i8.html#associatedconstant.BITS\" title=\"associated constant i8::BITS\"><code>i8::BITS</code></a>.</p>\n<h5 id=\"examples-114\"><a class=\"doc-anchor\" href=\"#examples-114\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i8&gt;::BITS, i8::BITS);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci8%3E::BITS,+i8::BITS);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-6\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-115\"><a class=\"doc-anchor\" href=\"#examples-115\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i8&gt;::new(-<span class=\"number\">1i8</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci8%3E::new(-1i8).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-6\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-116\"><a class=\"doc-anchor\" href=\"#examples-116\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i8&gt;::new(<span class=\"number\">0b0101000</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci8%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count_ones-6\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-6\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_zero_count_ones</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120287\">#120287</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-117\"><a class=\"doc-anchor\" href=\"#examples-117\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_zero_count_ones)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;i8&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i8&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Ci8%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Ci8%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MIN-6\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-6\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.i8.html#associatedconstant.MIN\" title=\"associated constant i8::MIN\"><code>i8::MIN</code></a>.</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-118\"><a class=\"doc-anchor\" href=\"#examples-118\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i8&gt;::MIN.get(), i8::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci8%3E::MIN.get(),+i8::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MAX-6\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-6\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.i8.html#associatedconstant.MAX\" title=\"associated constant i8::MAX\"><code>i8::MAX</code></a>.</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-119\"><a class=\"doc-anchor\" href=\"#examples-119\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i8&gt;::MAX.get(), i8::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci8%3E::MAX.get(),+i8::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self.\nSee <a href=\"../primitive.i8.html#method.abs\" title=\"method i8::abs\"><code>i8::abs</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i8)?;%0Alet+neg+=+NonZero::new(-1i8)?;%0A%0Aassert_eq!(pos,+pos.abs());%0Aassert_eq!(pos,+neg.abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_abs\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if\n<code>self == NonZero::&lt;i8&gt;::MIN</code>.\nThe result cannot be zero.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(pos), neg.checked_abs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, min.checked_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i8)?;%0Alet+neg+=+NonZero::new(-1i8)?;%0Alet+min+=+NonZero::new(i8::MIN)?;%0A%0Aassert_eq!(Some(pos),+neg.checked_abs());%0Aassert_eq!(None,+min.checked_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.overflowing_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_abs\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;, <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self,\nwith overflow information, see\n<a href=\"../primitive.i8.html#method.overflowing_abs\" title=\"method i8::overflowing_abs\"><code>i8::overflowing_abs</code></a>.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), pos.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), neg.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((min, <span class=\"bool-val\">true</span>), min.overflowing_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i8)?;%0Alet+neg+=+NonZero::new(-1i8)?;%0Alet+min+=+NonZero::new(i8::MIN)?;%0A%0Aassert_eq!((pos,+false),+pos.overflowing_abs());%0Aassert_eq!((pos,+false),+neg.overflowing_abs());%0Aassert_eq!((min,+true),+min.overflowing_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_abs\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating absolute value, see\n<a href=\"../primitive.i8.html#method.saturating_abs\" title=\"method i8::saturating_abs\"><code>i8::saturating_abs</code></a>.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus = NonZero::new(i8::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min_plus.saturating_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i8)?;%0Alet+neg+=+NonZero::new(-1i8)?;%0Alet+min+=+NonZero::new(i8::MIN)?;%0Alet+min_plus+=+NonZero::new(i8::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i8::MAX)?;%0A%0Aassert_eq!(pos,+pos.saturating_abs());%0Aassert_eq!(pos,+neg.saturating_abs());%0Aassert_eq!(max,+min.saturating_abs());%0Aassert_eq!(max,+min_plus.saturating_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_abs\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping absolute value, see\n<a href=\"../primitive.i8.html#method.wrapping_abs\" title=\"method i8::wrapping_abs\"><code>i8::wrapping_abs</code></a>.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(min, min.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(max, (-max).wrapping_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i8)?;%0Alet+neg+=+NonZero::new(-1i8)?;%0Alet+min+=+NonZero::new(i8::MIN)?;%0Alet+max+=+NonZero::new(i8::MAX)?;%0A%0Aassert_eq!(pos,+pos.wrapping_abs());%0Aassert_eq!(pos,+neg.wrapping_abs());%0Aassert_eq!(min,+min.wrapping_abs());%0Aassert_eq!(max,+(-max).wrapping_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unsigned_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.unsigned_abs\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self\nwithout any wrapping or panicking.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>u_pos = NonZero::new(<span class=\"number\">1u8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_pos = NonZero::new(<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_neg = NonZero::new(-<span class=\"number\">1i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>u_max = NonZero::new(u8::MAX / <span class=\"number\">2 </span>+ <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(u_pos, i_pos.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_pos, i_neg.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_max, i_min.unsigned_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+u_pos+=+NonZero::new(1u8)?;%0Alet+i_pos+=+NonZero::new(1i8)?;%0Alet+i_neg+=+NonZero::new(-1i8)?;%0Alet+i_min+=+NonZero::new(i8::MIN)?;%0Alet+u_max+=+NonZero::new(u8::MAX+/+2+%2B+1)?;%0A%0Aassert_eq!(u_pos,+i_pos.unsigned_abs());%0Aassert_eq!(u_pos,+i_neg.unsigned_abs());%0Aassert_eq!(u_max,+i_min.unsigned_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_positive\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_positive\" class=\"fn\">is_positive</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the\nnumber is negative.</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(pos_five.is_positive());\n<span class=\"macro\">assert!</span>(!neg_five.is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i8)?;%0Alet+neg_five+=+NonZero::new(-5i8)?;%0A%0Aassert!(pos_five.is_positive());%0Aassert!(!neg_five.is_positive());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_negative\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_negative\" class=\"fn\">is_negative</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the\nnumber is positive.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(neg_five.is_negative());\n<span class=\"macro\">assert!</span>(!pos_five.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i8)?;%0Alet+neg_five+=+NonZero::new(-5i8)?;%0A%0Aassert!(neg_five.is_negative());%0Aassert!(!pos_five.is_negative());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>,\nreturning <code>None</code> if <code>self == NonZero::&lt;i8&gt;::MIN</code>.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.checked_neg(), <span class=\"prelude-val\">Some</span>(neg_five));\n<span class=\"macro\">assert_eq!</span>(min.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i8)?;%0Alet+neg_five+=+NonZero::new(-5i8)?;%0Alet+min+=+NonZero::new(i8::MIN)?;%0A%0Aassert_eq!(pos_five.checked_neg(),+Some(neg_five));%0Aassert_eq!(min.checked_neg(),+None);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.overflowing_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;, <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>See <a href=\"../primitive.i8.html#method.overflowing_neg\" title=\"method i8::overflowing_neg\"><code>i8::overflowing_neg</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.overflowing_neg(), (neg_five, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(min.overflowing_neg(), (min, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i8)?;%0Alet+neg_five+=+NonZero::new(-5i8)?;%0Alet+min+=+NonZero::new(i8::MIN)?;%0A%0Aassert_eq!(pos_five.overflowing_neg(),+(neg_five,+false));%0Aassert_eq!(min.overflowing_neg(),+(min,+true));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_neg\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating negation. Computes <code>-self</code>,\nreturning <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i8&gt;::MAX</code></a>\nif <code>self == NonZero::&lt;i8&gt;::MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus_one = NonZero::new(i8::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.saturating_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.saturating_neg(), max);\n<span class=\"macro\">assert_eq!</span>(max.saturating_neg(), min_plus_one);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i8)?;%0Alet+neg_five+=+NonZero::new(-5i8)?;%0Alet+min+=+NonZero::new(i8::MIN)?;%0Alet+min_plus_one+=+NonZero::new(i8::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i8::MAX)?;%0A%0Aassert_eq!(pos_five.saturating_neg(),+neg_five);%0Aassert_eq!(min.saturating_neg(),+max);%0Aassert_eq!(max.saturating_neg(),+min_plus_one);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>See <a href=\"../primitive.i8.html#method.wrapping_neg\" title=\"method i8::wrapping_neg\"><code>i8::wrapping_neg</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i8::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.wrapping_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.wrapping_neg(), min);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i8)?;%0Alet+neg_five+=+NonZero::new(-5i8)?;%0Alet+min+=+NonZero::new(i8::MIN)?;%0A%0Aassert_eq!(pos_five.wrapping_neg(),+neg_five);%0Aassert_eq!(min.wrapping_neg(),+min);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_mul-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-6\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-120\"><a class=\"doc-anchor\" href=\"#examples-120\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i8)?;%0Alet+four+=+NonZero::new(4i8)?;%0Alet+max+=+NonZero::new(i8::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_mul-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-6\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i8&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-121\"><a class=\"doc-anchor\" href=\"#examples-121\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i8)?;%0Alet+four+=+NonZero::new(4i8)?;%0Alet+max+=+NonZero::new(i8::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_mul-6\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_mul-6\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self * rhs &gt; i8::MAX</code>, or <code>self * rhs &lt; i8::MIN</code>.</p>\n<h5 id=\"examples-122\"><a class=\"doc-anchor\" href=\"#examples-122\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i8</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i8)?;%0Alet+four+=+NonZero::new(4i8)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_pow-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-6\" class=\"fn\">checked_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-123\"><a class=\"doc-anchor\" href=\"#examples-123\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(i8::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i8)?;%0Alet+twenty_seven+=+NonZero::new(27i8)?;%0Alet+half_max+=+NonZero::new(i8::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_pow-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-6\" class=\"fn\">saturating_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MIN\" title=\"associated constant std::num::NonZero::MIN\"><code>NonZero::&lt;i8&gt;::MIN</code></a> or <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i8&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-124\"><a class=\"doc-anchor\" href=\"#examples-124\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i8</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i8::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i8)?;%0Alet+twenty_seven+=+NonZero::new(27i8)?;%0Alet+max+=+NonZero::new(i8::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonZero%3Ci16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a><a href=\"#impl-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.BITS-7\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0\">1.67.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-7\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a> = 16u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to <a href=\"../primitive.i16.html#associatedconstant.BITS\" title=\"associated constant i16::BITS\"><code>i16::BITS</code></a>.</p>\n<h5 id=\"examples-125\"><a class=\"doc-anchor\" href=\"#examples-125\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i16&gt;::BITS, i16::BITS);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci16%3E::BITS,+i16::BITS);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-7\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-126\"><a class=\"doc-anchor\" href=\"#examples-126\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i16&gt;::new(-<span class=\"number\">1i16</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci16%3E::new(-1i16).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-7\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-127\"><a class=\"doc-anchor\" href=\"#examples-127\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i16&gt;::new(<span class=\"number\">0b0101000</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci16%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count_ones-7\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-7\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_zero_count_ones</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120287\">#120287</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-128\"><a class=\"doc-anchor\" href=\"#examples-128\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_zero_count_ones)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;i16&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i16&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Ci16%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Ci16%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MIN-7\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-7\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.i16.html#associatedconstant.MIN\" title=\"associated constant i16::MIN\"><code>i16::MIN</code></a>.</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-129\"><a class=\"doc-anchor\" href=\"#examples-129\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i16&gt;::MIN.get(), i16::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci16%3E::MIN.get(),+i16::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MAX-7\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-7\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.i16.html#associatedconstant.MAX\" title=\"associated constant i16::MAX\"><code>i16::MAX</code></a>.</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-130\"><a class=\"doc-anchor\" href=\"#examples-130\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i16&gt;::MAX.get(), i16::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci16%3E::MAX.get(),+i16::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.abs-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs-1\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self.\nSee <a href=\"../primitive.i16.html#method.abs\" title=\"method i16::abs\"><code>i16::abs</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-12\"><a class=\"doc-anchor\" href=\"#example-12\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i16)?;%0Alet+neg+=+NonZero::new(-1i16)?;%0A%0Aassert_eq!(pos,+pos.abs());%0Aassert_eq!(pos,+neg.abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_abs-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_abs-1\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if\n<code>self == NonZero::&lt;i16&gt;::MIN</code>.\nThe result cannot be zero.</p>\n<h5 id=\"example-13\"><a class=\"doc-anchor\" href=\"#example-13\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(pos), neg.checked_abs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, min.checked_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i16)?;%0Alet+neg+=+NonZero::new(-1i16)?;%0Alet+min+=+NonZero::new(i16::MIN)?;%0A%0Aassert_eq!(Some(pos),+neg.checked_abs());%0Aassert_eq!(None,+min.checked_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.overflowing_abs-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_abs-1\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;, <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self,\nwith overflow information, see\n<a href=\"../primitive.i16.html#method.overflowing_abs\" title=\"method i16::overflowing_abs\"><code>i16::overflowing_abs</code></a>.</p>\n<h5 id=\"example-14\"><a class=\"doc-anchor\" href=\"#example-14\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), pos.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), neg.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((min, <span class=\"bool-val\">true</span>), min.overflowing_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i16)?;%0Alet+neg+=+NonZero::new(-1i16)?;%0Alet+min+=+NonZero::new(i16::MIN)?;%0A%0Aassert_eq!((pos,+false),+pos.overflowing_abs());%0Aassert_eq!((pos,+false),+neg.overflowing_abs());%0Aassert_eq!((min,+true),+min.overflowing_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_abs-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_abs-1\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating absolute value, see\n<a href=\"../primitive.i16.html#method.saturating_abs\" title=\"method i16::saturating_abs\"><code>i16::saturating_abs</code></a>.</p>\n<h5 id=\"example-15\"><a class=\"doc-anchor\" href=\"#example-15\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus = NonZero::new(i16::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min_plus.saturating_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i16)?;%0Alet+neg+=+NonZero::new(-1i16)?;%0Alet+min+=+NonZero::new(i16::MIN)?;%0Alet+min_plus+=+NonZero::new(i16::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i16::MAX)?;%0A%0Aassert_eq!(pos,+pos.saturating_abs());%0Aassert_eq!(pos,+neg.saturating_abs());%0Aassert_eq!(max,+min.saturating_abs());%0Aassert_eq!(max,+min_plus.saturating_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_abs-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_abs-1\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping absolute value, see\n<a href=\"../primitive.i16.html#method.wrapping_abs\" title=\"method i16::wrapping_abs\"><code>i16::wrapping_abs</code></a>.</p>\n<h5 id=\"example-16\"><a class=\"doc-anchor\" href=\"#example-16\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(min, min.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(max, (-max).wrapping_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i16)?;%0Alet+neg+=+NonZero::new(-1i16)?;%0Alet+min+=+NonZero::new(i16::MIN)?;%0Alet+max+=+NonZero::new(i16::MAX)?;%0A%0Aassert_eq!(pos,+pos.wrapping_abs());%0Aassert_eq!(pos,+neg.wrapping_abs());%0Aassert_eq!(min,+min.wrapping_abs());%0Aassert_eq!(max,+(-max).wrapping_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unsigned_abs-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.unsigned_abs-1\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self\nwithout any wrapping or panicking.</p>\n<h5 id=\"example-17\"><a class=\"doc-anchor\" href=\"#example-17\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>u_pos = NonZero::new(<span class=\"number\">1u16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_pos = NonZero::new(<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_neg = NonZero::new(-<span class=\"number\">1i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>u_max = NonZero::new(u16::MAX / <span class=\"number\">2 </span>+ <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(u_pos, i_pos.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_pos, i_neg.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_max, i_min.unsigned_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+u_pos+=+NonZero::new(1u16)?;%0Alet+i_pos+=+NonZero::new(1i16)?;%0Alet+i_neg+=+NonZero::new(-1i16)?;%0Alet+i_min+=+NonZero::new(i16::MIN)?;%0Alet+u_max+=+NonZero::new(u16::MAX+/+2+%2B+1)?;%0A%0Aassert_eq!(u_pos,+i_pos.unsigned_abs());%0Aassert_eq!(u_pos,+i_neg.unsigned_abs());%0Aassert_eq!(u_max,+i_min.unsigned_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_positive-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_positive-1\" class=\"fn\">is_positive</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the\nnumber is negative.</p>\n<h5 id=\"example-18\"><a class=\"doc-anchor\" href=\"#example-18\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(pos_five.is_positive());\n<span class=\"macro\">assert!</span>(!neg_five.is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i16)?;%0Alet+neg_five+=+NonZero::new(-5i16)?;%0A%0Aassert!(pos_five.is_positive());%0Aassert!(!neg_five.is_positive());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_negative-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_negative-1\" class=\"fn\">is_negative</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the\nnumber is positive.</p>\n<h5 id=\"example-19\"><a class=\"doc-anchor\" href=\"#example-19\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(neg_five.is_negative());\n<span class=\"macro\">assert!</span>(!pos_five.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i16)?;%0Alet+neg_five+=+NonZero::new(-5i16)?;%0A%0Aassert!(neg_five.is_negative());%0Aassert!(!pos_five.is_negative());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_neg-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-1\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>,\nreturning <code>None</code> if <code>self == NonZero::&lt;i16&gt;::MIN</code>.</p>\n<h5 id=\"example-20\"><a class=\"doc-anchor\" href=\"#example-20\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.checked_neg(), <span class=\"prelude-val\">Some</span>(neg_five));\n<span class=\"macro\">assert_eq!</span>(min.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i16)?;%0Alet+neg_five+=+NonZero::new(-5i16)?;%0Alet+min+=+NonZero::new(i16::MIN)?;%0A%0Aassert_eq!(pos_five.checked_neg(),+Some(neg_five));%0Aassert_eq!(min.checked_neg(),+None);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.overflowing_neg-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-1\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;, <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>See <a href=\"../primitive.i16.html#method.overflowing_neg\" title=\"method i16::overflowing_neg\"><code>i16::overflowing_neg</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-21\"><a class=\"doc-anchor\" href=\"#example-21\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.overflowing_neg(), (neg_five, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(min.overflowing_neg(), (min, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i16)?;%0Alet+neg_five+=+NonZero::new(-5i16)?;%0Alet+min+=+NonZero::new(i16::MIN)?;%0A%0Aassert_eq!(pos_five.overflowing_neg(),+(neg_five,+false));%0Aassert_eq!(min.overflowing_neg(),+(min,+true));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_neg-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_neg-1\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating negation. Computes <code>-self</code>,\nreturning <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i16&gt;::MAX</code></a>\nif <code>self == NonZero::&lt;i16&gt;::MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"example-22\"><a class=\"doc-anchor\" href=\"#example-22\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus_one = NonZero::new(i16::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.saturating_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.saturating_neg(), max);\n<span class=\"macro\">assert_eq!</span>(max.saturating_neg(), min_plus_one);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i16)?;%0Alet+neg_five+=+NonZero::new(-5i16)?;%0Alet+min+=+NonZero::new(i16::MIN)?;%0Alet+min_plus_one+=+NonZero::new(i16::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i16::MAX)?;%0A%0Aassert_eq!(pos_five.saturating_neg(),+neg_five);%0Aassert_eq!(min.saturating_neg(),+max);%0Aassert_eq!(max.saturating_neg(),+min_plus_one);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_neg-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-1\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>See <a href=\"../primitive.i16.html#method.wrapping_neg\" title=\"method i16::wrapping_neg\"><code>i16::wrapping_neg</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-23\"><a class=\"doc-anchor\" href=\"#example-23\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i16::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.wrapping_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.wrapping_neg(), min);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i16)?;%0Alet+neg_five+=+NonZero::new(-5i16)?;%0Alet+min+=+NonZero::new(i16::MIN)?;%0A%0Aassert_eq!(pos_five.wrapping_neg(),+neg_five);%0Aassert_eq!(min.wrapping_neg(),+min);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_mul-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-7\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-131\"><a class=\"doc-anchor\" href=\"#examples-131\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i16)?;%0Alet+four+=+NonZero::new(4i16)?;%0Alet+max+=+NonZero::new(i16::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_mul-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-7\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i16&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-132\"><a class=\"doc-anchor\" href=\"#examples-132\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i16)?;%0Alet+four+=+NonZero::new(4i16)?;%0Alet+max+=+NonZero::new(i16::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_mul-7\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_mul-7\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self * rhs &gt; i16::MAX</code>, or <code>self * rhs &lt; i16::MIN</code>.</p>\n<h5 id=\"examples-133\"><a class=\"doc-anchor\" href=\"#examples-133\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i16</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i16)?;%0Alet+four+=+NonZero::new(4i16)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_pow-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-7\" class=\"fn\">checked_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-134\"><a class=\"doc-anchor\" href=\"#examples-134\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(i16::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i16)?;%0Alet+twenty_seven+=+NonZero::new(27i16)?;%0Alet+half_max+=+NonZero::new(i16::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_pow-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-7\" class=\"fn\">saturating_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MIN\" title=\"associated constant std::num::NonZero::MIN\"><code>NonZero::&lt;i16&gt;::MIN</code></a> or <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i16&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-135\"><a class=\"doc-anchor\" href=\"#examples-135\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i16</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i16::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i16)?;%0Alet+twenty_seven+=+NonZero::new(27i16)?;%0Alet+max+=+NonZero::new(i16::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonZero%3Ci32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a><a href=\"#impl-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.BITS-8\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0\">1.67.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-8\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a> = 32u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to <a href=\"../primitive.i32.html#associatedconstant.BITS\" title=\"associated constant i32::BITS\"><code>i32::BITS</code></a>.</p>\n<h5 id=\"examples-136\"><a class=\"doc-anchor\" href=\"#examples-136\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i32&gt;::BITS, i32::BITS);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci32%3E::BITS,+i32::BITS);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-8\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-137\"><a class=\"doc-anchor\" href=\"#examples-137\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i32&gt;::new(-<span class=\"number\">1i32</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci32%3E::new(-1i32).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-8\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-138\"><a class=\"doc-anchor\" href=\"#examples-138\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i32&gt;::new(<span class=\"number\">0b0101000</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci32%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count_ones-8\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-8\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_zero_count_ones</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120287\">#120287</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-139\"><a class=\"doc-anchor\" href=\"#examples-139\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_zero_count_ones)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;i32&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i32&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Ci32%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Ci32%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MIN-8\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-8\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.i32.html#associatedconstant.MIN\" title=\"associated constant i32::MIN\"><code>i32::MIN</code></a>.</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-140\"><a class=\"doc-anchor\" href=\"#examples-140\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i32&gt;::MIN.get(), i32::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci32%3E::MIN.get(),+i32::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MAX-8\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-8\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.i32.html#associatedconstant.MAX\" title=\"associated constant i32::MAX\"><code>i32::MAX</code></a>.</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-141\"><a class=\"doc-anchor\" href=\"#examples-141\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i32&gt;::MAX.get(), i32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci32%3E::MAX.get(),+i32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.abs-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs-2\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self.\nSee <a href=\"../primitive.i32.html#method.abs\" title=\"method i32::abs\"><code>i32::abs</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-24\"><a class=\"doc-anchor\" href=\"#example-24\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i32)?;%0Alet+neg+=+NonZero::new(-1i32)?;%0A%0Aassert_eq!(pos,+pos.abs());%0Aassert_eq!(pos,+neg.abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_abs-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_abs-2\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if\n<code>self == NonZero::&lt;i32&gt;::MIN</code>.\nThe result cannot be zero.</p>\n<h5 id=\"example-25\"><a class=\"doc-anchor\" href=\"#example-25\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(pos), neg.checked_abs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, min.checked_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i32)?;%0Alet+neg+=+NonZero::new(-1i32)?;%0Alet+min+=+NonZero::new(i32::MIN)?;%0A%0Aassert_eq!(Some(pos),+neg.checked_abs());%0Aassert_eq!(None,+min.checked_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.overflowing_abs-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_abs-2\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;, <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self,\nwith overflow information, see\n<a href=\"../primitive.i32.html#method.overflowing_abs\" title=\"method i32::overflowing_abs\"><code>i32::overflowing_abs</code></a>.</p>\n<h5 id=\"example-26\"><a class=\"doc-anchor\" href=\"#example-26\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), pos.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), neg.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((min, <span class=\"bool-val\">true</span>), min.overflowing_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i32)?;%0Alet+neg+=+NonZero::new(-1i32)?;%0Alet+min+=+NonZero::new(i32::MIN)?;%0A%0Aassert_eq!((pos,+false),+pos.overflowing_abs());%0Aassert_eq!((pos,+false),+neg.overflowing_abs());%0Aassert_eq!((min,+true),+min.overflowing_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_abs-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_abs-2\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating absolute value, see\n<a href=\"../primitive.i32.html#method.saturating_abs\" title=\"method i32::saturating_abs\"><code>i32::saturating_abs</code></a>.</p>\n<h5 id=\"example-27\"><a class=\"doc-anchor\" href=\"#example-27\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus = NonZero::new(i32::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min_plus.saturating_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i32)?;%0Alet+neg+=+NonZero::new(-1i32)?;%0Alet+min+=+NonZero::new(i32::MIN)?;%0Alet+min_plus+=+NonZero::new(i32::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i32::MAX)?;%0A%0Aassert_eq!(pos,+pos.saturating_abs());%0Aassert_eq!(pos,+neg.saturating_abs());%0Aassert_eq!(max,+min.saturating_abs());%0Aassert_eq!(max,+min_plus.saturating_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_abs-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_abs-2\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping absolute value, see\n<a href=\"../primitive.i32.html#method.wrapping_abs\" title=\"method i32::wrapping_abs\"><code>i32::wrapping_abs</code></a>.</p>\n<h5 id=\"example-28\"><a class=\"doc-anchor\" href=\"#example-28\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(min, min.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(max, (-max).wrapping_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i32)?;%0Alet+neg+=+NonZero::new(-1i32)?;%0Alet+min+=+NonZero::new(i32::MIN)?;%0Alet+max+=+NonZero::new(i32::MAX)?;%0A%0Aassert_eq!(pos,+pos.wrapping_abs());%0Aassert_eq!(pos,+neg.wrapping_abs());%0Aassert_eq!(min,+min.wrapping_abs());%0Aassert_eq!(max,+(-max).wrapping_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unsigned_abs-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.unsigned_abs-2\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self\nwithout any wrapping or panicking.</p>\n<h5 id=\"example-29\"><a class=\"doc-anchor\" href=\"#example-29\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>u_pos = NonZero::new(<span class=\"number\">1u32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_pos = NonZero::new(<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_neg = NonZero::new(-<span class=\"number\">1i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>u_max = NonZero::new(u32::MAX / <span class=\"number\">2 </span>+ <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(u_pos, i_pos.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_pos, i_neg.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_max, i_min.unsigned_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+u_pos+=+NonZero::new(1u32)?;%0Alet+i_pos+=+NonZero::new(1i32)?;%0Alet+i_neg+=+NonZero::new(-1i32)?;%0Alet+i_min+=+NonZero::new(i32::MIN)?;%0Alet+u_max+=+NonZero::new(u32::MAX+/+2+%2B+1)?;%0A%0Aassert_eq!(u_pos,+i_pos.unsigned_abs());%0Aassert_eq!(u_pos,+i_neg.unsigned_abs());%0Aassert_eq!(u_max,+i_min.unsigned_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_positive-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_positive-2\" class=\"fn\">is_positive</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the\nnumber is negative.</p>\n<h5 id=\"example-30\"><a class=\"doc-anchor\" href=\"#example-30\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(pos_five.is_positive());\n<span class=\"macro\">assert!</span>(!neg_five.is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i32)?;%0Alet+neg_five+=+NonZero::new(-5i32)?;%0A%0Aassert!(pos_five.is_positive());%0Aassert!(!neg_five.is_positive());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_negative-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_negative-2\" class=\"fn\">is_negative</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the\nnumber is positive.</p>\n<h5 id=\"example-31\"><a class=\"doc-anchor\" href=\"#example-31\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(neg_five.is_negative());\n<span class=\"macro\">assert!</span>(!pos_five.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i32)?;%0Alet+neg_five+=+NonZero::new(-5i32)?;%0A%0Aassert!(neg_five.is_negative());%0Aassert!(!pos_five.is_negative());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_neg-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-2\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>,\nreturning <code>None</code> if <code>self == NonZero::&lt;i32&gt;::MIN</code>.</p>\n<h5 id=\"example-32\"><a class=\"doc-anchor\" href=\"#example-32\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.checked_neg(), <span class=\"prelude-val\">Some</span>(neg_five));\n<span class=\"macro\">assert_eq!</span>(min.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i32)?;%0Alet+neg_five+=+NonZero::new(-5i32)?;%0Alet+min+=+NonZero::new(i32::MIN)?;%0A%0Aassert_eq!(pos_five.checked_neg(),+Some(neg_five));%0Aassert_eq!(min.checked_neg(),+None);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.overflowing_neg-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-2\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;, <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>See <a href=\"../primitive.i32.html#method.overflowing_neg\" title=\"method i32::overflowing_neg\"><code>i32::overflowing_neg</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-33\"><a class=\"doc-anchor\" href=\"#example-33\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.overflowing_neg(), (neg_five, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(min.overflowing_neg(), (min, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i32)?;%0Alet+neg_five+=+NonZero::new(-5i32)?;%0Alet+min+=+NonZero::new(i32::MIN)?;%0A%0Aassert_eq!(pos_five.overflowing_neg(),+(neg_five,+false));%0Aassert_eq!(min.overflowing_neg(),+(min,+true));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_neg-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_neg-2\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating negation. Computes <code>-self</code>,\nreturning <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i32&gt;::MAX</code></a>\nif <code>self == NonZero::&lt;i32&gt;::MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"example-34\"><a class=\"doc-anchor\" href=\"#example-34\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus_one = NonZero::new(i32::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.saturating_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.saturating_neg(), max);\n<span class=\"macro\">assert_eq!</span>(max.saturating_neg(), min_plus_one);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i32)?;%0Alet+neg_five+=+NonZero::new(-5i32)?;%0Alet+min+=+NonZero::new(i32::MIN)?;%0Alet+min_plus_one+=+NonZero::new(i32::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i32::MAX)?;%0A%0Aassert_eq!(pos_five.saturating_neg(),+neg_five);%0Aassert_eq!(min.saturating_neg(),+max);%0Aassert_eq!(max.saturating_neg(),+min_plus_one);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_neg-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-2\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>See <a href=\"../primitive.i32.html#method.wrapping_neg\" title=\"method i32::wrapping_neg\"><code>i32::wrapping_neg</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-35\"><a class=\"doc-anchor\" href=\"#example-35\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i32::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.wrapping_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.wrapping_neg(), min);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i32)?;%0Alet+neg_five+=+NonZero::new(-5i32)?;%0Alet+min+=+NonZero::new(i32::MIN)?;%0A%0Aassert_eq!(pos_five.wrapping_neg(),+neg_five);%0Aassert_eq!(min.wrapping_neg(),+min);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_mul-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-8\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-142\"><a class=\"doc-anchor\" href=\"#examples-142\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i32)?;%0Alet+four+=+NonZero::new(4i32)?;%0Alet+max+=+NonZero::new(i32::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_mul-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-8\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i32&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-143\"><a class=\"doc-anchor\" href=\"#examples-143\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i32)?;%0Alet+four+=+NonZero::new(4i32)?;%0Alet+max+=+NonZero::new(i32::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_mul-8\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_mul-8\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self * rhs &gt; i32::MAX</code>, or <code>self * rhs &lt; i32::MIN</code>.</p>\n<h5 id=\"examples-144\"><a class=\"doc-anchor\" href=\"#examples-144\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i32</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i32)?;%0Alet+four+=+NonZero::new(4i32)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_pow-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-8\" class=\"fn\">checked_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-145\"><a class=\"doc-anchor\" href=\"#examples-145\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(i32::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i32)?;%0Alet+twenty_seven+=+NonZero::new(27i32)?;%0Alet+half_max+=+NonZero::new(i32::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_pow-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-8\" class=\"fn\">saturating_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MIN\" title=\"associated constant std::num::NonZero::MIN\"><code>NonZero::&lt;i32&gt;::MIN</code></a> or <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i32&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-146\"><a class=\"doc-anchor\" href=\"#examples-146\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i32</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i32::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i32)?;%0Alet+twenty_seven+=+NonZero::new(27i32)?;%0Alet+max+=+NonZero::new(i32::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonZero%3Ci64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a><a href=\"#impl-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.BITS-9\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0\">1.67.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-9\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a> = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to <a href=\"../primitive.i64.html#associatedconstant.BITS\" title=\"associated constant i64::BITS\"><code>i64::BITS</code></a>.</p>\n<h5 id=\"examples-147\"><a class=\"doc-anchor\" href=\"#examples-147\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i64&gt;::BITS, i64::BITS);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci64%3E::BITS,+i64::BITS);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-9\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-148\"><a class=\"doc-anchor\" href=\"#examples-148\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i64&gt;::new(-<span class=\"number\">1i64</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci64%3E::new(-1i64).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-9\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-149\"><a class=\"doc-anchor\" href=\"#examples-149\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i64&gt;::new(<span class=\"number\">0b0101000</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci64%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count_ones-9\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-9\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_zero_count_ones</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120287\">#120287</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-150\"><a class=\"doc-anchor\" href=\"#examples-150\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_zero_count_ones)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;i64&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i64&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Ci64%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Ci64%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MIN-9\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-9\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.i64.html#associatedconstant.MIN\" title=\"associated constant i64::MIN\"><code>i64::MIN</code></a>.</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-151\"><a class=\"doc-anchor\" href=\"#examples-151\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i64&gt;::MIN.get(), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci64%3E::MIN.get(),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MAX-9\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-9\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.i64.html#associatedconstant.MAX\" title=\"associated constant i64::MAX\"><code>i64::MAX</code></a>.</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-152\"><a class=\"doc-anchor\" href=\"#examples-152\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i64&gt;::MAX.get(), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci64%3E::MAX.get(),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.abs-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs-3\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self.\nSee <a href=\"../primitive.i64.html#method.abs\" title=\"method i64::abs\"><code>i64::abs</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-36\"><a class=\"doc-anchor\" href=\"#example-36\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0A%0Aassert_eq!(pos,+pos.abs());%0Aassert_eq!(pos,+neg.abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_abs-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_abs-3\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if\n<code>self == NonZero::&lt;i64&gt;::MIN</code>.\nThe result cannot be zero.</p>\n<h5 id=\"example-37\"><a class=\"doc-anchor\" href=\"#example-37\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(pos), neg.checked_abs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, min.checked_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!(Some(pos),+neg.checked_abs());%0Aassert_eq!(None,+min.checked_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.overflowing_abs-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_abs-3\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;, <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self,\nwith overflow information, see\n<a href=\"../primitive.i64.html#method.overflowing_abs\" title=\"method i64::overflowing_abs\"><code>i64::overflowing_abs</code></a>.</p>\n<h5 id=\"example-38\"><a class=\"doc-anchor\" href=\"#example-38\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), pos.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), neg.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((min, <span class=\"bool-val\">true</span>), min.overflowing_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!((pos,+false),+pos.overflowing_abs());%0Aassert_eq!((pos,+false),+neg.overflowing_abs());%0Aassert_eq!((min,+true),+min.overflowing_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_abs-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_abs-3\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating absolute value, see\n<a href=\"../primitive.i64.html#method.saturating_abs\" title=\"method i64::saturating_abs\"><code>i64::saturating_abs</code></a>.</p>\n<h5 id=\"example-39\"><a class=\"doc-anchor\" href=\"#example-39\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus = NonZero::new(i64::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min_plus.saturating_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0Alet+min_plus+=+NonZero::new(i64::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(pos,+pos.saturating_abs());%0Aassert_eq!(pos,+neg.saturating_abs());%0Aassert_eq!(max,+min.saturating_abs());%0Aassert_eq!(max,+min_plus.saturating_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_abs-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_abs-3\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping absolute value, see\n<a href=\"../primitive.i64.html#method.wrapping_abs\" title=\"method i64::wrapping_abs\"><code>i64::wrapping_abs</code></a>.</p>\n<h5 id=\"example-40\"><a class=\"doc-anchor\" href=\"#example-40\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(min, min.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(max, (-max).wrapping_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(pos,+pos.wrapping_abs());%0Aassert_eq!(pos,+neg.wrapping_abs());%0Aassert_eq!(min,+min.wrapping_abs());%0Aassert_eq!(max,+(-max).wrapping_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unsigned_abs-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.unsigned_abs-3\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self\nwithout any wrapping or panicking.</p>\n<h5 id=\"example-41\"><a class=\"doc-anchor\" href=\"#example-41\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>u_pos = NonZero::new(<span class=\"number\">1u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>u_max = NonZero::new(u64::MAX / <span class=\"number\">2 </span>+ <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(u_pos, i_pos.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_pos, i_neg.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_max, i_min.unsigned_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+u_pos+=+NonZero::new(1u64)?;%0Alet+i_pos+=+NonZero::new(1i64)?;%0Alet+i_neg+=+NonZero::new(-1i64)?;%0Alet+i_min+=+NonZero::new(i64::MIN)?;%0Alet+u_max+=+NonZero::new(u64::MAX+/+2+%2B+1)?;%0A%0Aassert_eq!(u_pos,+i_pos.unsigned_abs());%0Aassert_eq!(u_pos,+i_neg.unsigned_abs());%0Aassert_eq!(u_max,+i_min.unsigned_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_positive-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_positive-3\" class=\"fn\">is_positive</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the\nnumber is negative.</p>\n<h5 id=\"example-42\"><a class=\"doc-anchor\" href=\"#example-42\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(pos_five.is_positive());\n<span class=\"macro\">assert!</span>(!neg_five.is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0A%0Aassert!(pos_five.is_positive());%0Aassert!(!neg_five.is_positive());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_negative-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_negative-3\" class=\"fn\">is_negative</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the\nnumber is positive.</p>\n<h5 id=\"example-43\"><a class=\"doc-anchor\" href=\"#example-43\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(neg_five.is_negative());\n<span class=\"macro\">assert!</span>(!pos_five.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0A%0Aassert!(neg_five.is_negative());%0Aassert!(!pos_five.is_negative());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_neg-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-3\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>,\nreturning <code>None</code> if <code>self == NonZero::&lt;i64&gt;::MIN</code>.</p>\n<h5 id=\"example-44\"><a class=\"doc-anchor\" href=\"#example-44\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.checked_neg(), <span class=\"prelude-val\">Some</span>(neg_five));\n<span class=\"macro\">assert_eq!</span>(min.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!(pos_five.checked_neg(),+Some(neg_five));%0Aassert_eq!(min.checked_neg(),+None);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.overflowing_neg-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-3\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;, <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>See <a href=\"../primitive.i64.html#method.overflowing_neg\" title=\"method i64::overflowing_neg\"><code>i64::overflowing_neg</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-45\"><a class=\"doc-anchor\" href=\"#example-45\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.overflowing_neg(), (neg_five, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(min.overflowing_neg(), (min, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!(pos_five.overflowing_neg(),+(neg_five,+false));%0Aassert_eq!(min.overflowing_neg(),+(min,+true));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_neg-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_neg-3\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating negation. Computes <code>-self</code>,\nreturning <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i64&gt;::MAX</code></a>\nif <code>self == NonZero::&lt;i64&gt;::MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"example-46\"><a class=\"doc-anchor\" href=\"#example-46\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus_one = NonZero::new(i64::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.saturating_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.saturating_neg(), max);\n<span class=\"macro\">assert_eq!</span>(max.saturating_neg(), min_plus_one);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0Alet+min_plus_one+=+NonZero::new(i64::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(pos_five.saturating_neg(),+neg_five);%0Aassert_eq!(min.saturating_neg(),+max);%0Aassert_eq!(max.saturating_neg(),+min_plus_one);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_neg-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-3\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>See <a href=\"../primitive.i64.html#method.wrapping_neg\" title=\"method i64::wrapping_neg\"><code>i64::wrapping_neg</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-47\"><a class=\"doc-anchor\" href=\"#example-47\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.wrapping_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.wrapping_neg(), min);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!(pos_five.wrapping_neg(),+neg_five);%0Aassert_eq!(min.wrapping_neg(),+min);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_mul-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-9\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-153\"><a class=\"doc-anchor\" href=\"#examples-153\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i64)?;%0Alet+four+=+NonZero::new(4i64)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_mul-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-9\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i64&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-154\"><a class=\"doc-anchor\" href=\"#examples-154\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i64)?;%0Alet+four+=+NonZero::new(4i64)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_mul-9\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_mul-9\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self * rhs &gt; i64::MAX</code>, or <code>self * rhs &lt; i64::MIN</code>.</p>\n<h5 id=\"examples-155\"><a class=\"doc-anchor\" href=\"#examples-155\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i64)?;%0Alet+four+=+NonZero::new(4i64)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_pow-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-9\" class=\"fn\">checked_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-156\"><a class=\"doc-anchor\" href=\"#examples-156\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(i64::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i64)?;%0Alet+twenty_seven+=+NonZero::new(27i64)?;%0Alet+half_max+=+NonZero::new(i64::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_pow-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-9\" class=\"fn\">saturating_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MIN\" title=\"associated constant std::num::NonZero::MIN\"><code>NonZero::&lt;i64&gt;::MIN</code></a> or <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i64&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-157\"><a class=\"doc-anchor\" href=\"#examples-157\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i64)?;%0Alet+twenty_seven+=+NonZero::new(27i64)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonZero%3Ci128%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a><a href=\"#impl-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.BITS-10\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0\">1.67.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-10\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a> = 128u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to <a href=\"../primitive.i128.html#associatedconstant.BITS\" title=\"associated constant i128::BITS\"><code>i128::BITS</code></a>.</p>\n<h5 id=\"examples-158\"><a class=\"doc-anchor\" href=\"#examples-158\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i128&gt;::BITS, i128::BITS);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci128%3E::BITS,+i128::BITS);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-10\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-159\"><a class=\"doc-anchor\" href=\"#examples-159\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i128&gt;::new(-<span class=\"number\">1i128</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci128%3E::new(-1i128).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-10\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-160\"><a class=\"doc-anchor\" href=\"#examples-160\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i128&gt;::new(<span class=\"number\">0b0101000</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci128%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count_ones-10\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-10\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_zero_count_ones</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120287\">#120287</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-161\"><a class=\"doc-anchor\" href=\"#examples-161\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_zero_count_ones)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;i128&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i128&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Ci128%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Ci128%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MIN-10\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-10\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.i128.html#associatedconstant.MIN\" title=\"associated constant i128::MIN\"><code>i128::MIN</code></a>.</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-162\"><a class=\"doc-anchor\" href=\"#examples-162\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i128&gt;::MIN.get(), i128::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci128%3E::MIN.get(),+i128::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MAX-10\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-10\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.i128.html#associatedconstant.MAX\" title=\"associated constant i128::MAX\"><code>i128::MAX</code></a>.</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-163\"><a class=\"doc-anchor\" href=\"#examples-163\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i128&gt;::MAX.get(), i128::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci128%3E::MAX.get(),+i128::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.abs-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs-4\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self.\nSee <a href=\"../primitive.i128.html#method.abs\" title=\"method i128::abs\"><code>i128::abs</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-48\"><a class=\"doc-anchor\" href=\"#example-48\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i128)?;%0Alet+neg+=+NonZero::new(-1i128)?;%0A%0Aassert_eq!(pos,+pos.abs());%0Aassert_eq!(pos,+neg.abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_abs-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_abs-4\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if\n<code>self == NonZero::&lt;i128&gt;::MIN</code>.\nThe result cannot be zero.</p>\n<h5 id=\"example-49\"><a class=\"doc-anchor\" href=\"#example-49\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(pos), neg.checked_abs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, min.checked_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i128)?;%0Alet+neg+=+NonZero::new(-1i128)?;%0Alet+min+=+NonZero::new(i128::MIN)?;%0A%0Aassert_eq!(Some(pos),+neg.checked_abs());%0Aassert_eq!(None,+min.checked_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.overflowing_abs-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_abs-4\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;, <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self,\nwith overflow information, see\n<a href=\"../primitive.i128.html#method.overflowing_abs\" title=\"method i128::overflowing_abs\"><code>i128::overflowing_abs</code></a>.</p>\n<h5 id=\"example-50\"><a class=\"doc-anchor\" href=\"#example-50\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), pos.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), neg.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((min, <span class=\"bool-val\">true</span>), min.overflowing_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i128)?;%0Alet+neg+=+NonZero::new(-1i128)?;%0Alet+min+=+NonZero::new(i128::MIN)?;%0A%0Aassert_eq!((pos,+false),+pos.overflowing_abs());%0Aassert_eq!((pos,+false),+neg.overflowing_abs());%0Aassert_eq!((min,+true),+min.overflowing_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_abs-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_abs-4\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating absolute value, see\n<a href=\"../primitive.i128.html#method.saturating_abs\" title=\"method i128::saturating_abs\"><code>i128::saturating_abs</code></a>.</p>\n<h5 id=\"example-51\"><a class=\"doc-anchor\" href=\"#example-51\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus = NonZero::new(i128::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min_plus.saturating_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i128)?;%0Alet+neg+=+NonZero::new(-1i128)?;%0Alet+min+=+NonZero::new(i128::MIN)?;%0Alet+min_plus+=+NonZero::new(i128::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i128::MAX)?;%0A%0Aassert_eq!(pos,+pos.saturating_abs());%0Aassert_eq!(pos,+neg.saturating_abs());%0Aassert_eq!(max,+min.saturating_abs());%0Aassert_eq!(max,+min_plus.saturating_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_abs-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_abs-4\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping absolute value, see\n<a href=\"../primitive.i128.html#method.wrapping_abs\" title=\"method i128::wrapping_abs\"><code>i128::wrapping_abs</code></a>.</p>\n<h5 id=\"example-52\"><a class=\"doc-anchor\" href=\"#example-52\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(min, min.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(max, (-max).wrapping_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i128)?;%0Alet+neg+=+NonZero::new(-1i128)?;%0Alet+min+=+NonZero::new(i128::MIN)?;%0Alet+max+=+NonZero::new(i128::MAX)?;%0A%0Aassert_eq!(pos,+pos.wrapping_abs());%0Aassert_eq!(pos,+neg.wrapping_abs());%0Aassert_eq!(min,+min.wrapping_abs());%0Aassert_eq!(max,+(-max).wrapping_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unsigned_abs-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.unsigned_abs-4\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self\nwithout any wrapping or panicking.</p>\n<h5 id=\"example-53\"><a class=\"doc-anchor\" href=\"#example-53\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>u_pos = NonZero::new(<span class=\"number\">1u128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_pos = NonZero::new(<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_neg = NonZero::new(-<span class=\"number\">1i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>u_max = NonZero::new(u128::MAX / <span class=\"number\">2 </span>+ <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(u_pos, i_pos.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_pos, i_neg.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_max, i_min.unsigned_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+u_pos+=+NonZero::new(1u128)?;%0Alet+i_pos+=+NonZero::new(1i128)?;%0Alet+i_neg+=+NonZero::new(-1i128)?;%0Alet+i_min+=+NonZero::new(i128::MIN)?;%0Alet+u_max+=+NonZero::new(u128::MAX+/+2+%2B+1)?;%0A%0Aassert_eq!(u_pos,+i_pos.unsigned_abs());%0Aassert_eq!(u_pos,+i_neg.unsigned_abs());%0Aassert_eq!(u_max,+i_min.unsigned_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_positive-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_positive-4\" class=\"fn\">is_positive</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the\nnumber is negative.</p>\n<h5 id=\"example-54\"><a class=\"doc-anchor\" href=\"#example-54\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(pos_five.is_positive());\n<span class=\"macro\">assert!</span>(!neg_five.is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i128)?;%0Alet+neg_five+=+NonZero::new(-5i128)?;%0A%0Aassert!(pos_five.is_positive());%0Aassert!(!neg_five.is_positive());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_negative-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_negative-4\" class=\"fn\">is_negative</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the\nnumber is positive.</p>\n<h5 id=\"example-55\"><a class=\"doc-anchor\" href=\"#example-55\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(neg_five.is_negative());\n<span class=\"macro\">assert!</span>(!pos_five.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i128)?;%0Alet+neg_five+=+NonZero::new(-5i128)?;%0A%0Aassert!(neg_five.is_negative());%0Aassert!(!pos_five.is_negative());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_neg-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-4\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>,\nreturning <code>None</code> if <code>self == NonZero::&lt;i128&gt;::MIN</code>.</p>\n<h5 id=\"example-56\"><a class=\"doc-anchor\" href=\"#example-56\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.checked_neg(), <span class=\"prelude-val\">Some</span>(neg_five));\n<span class=\"macro\">assert_eq!</span>(min.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i128)?;%0Alet+neg_five+=+NonZero::new(-5i128)?;%0Alet+min+=+NonZero::new(i128::MIN)?;%0A%0Aassert_eq!(pos_five.checked_neg(),+Some(neg_five));%0Aassert_eq!(min.checked_neg(),+None);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.overflowing_neg-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-4\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;, <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>See <a href=\"../primitive.i128.html#method.overflowing_neg\" title=\"method i128::overflowing_neg\"><code>i128::overflowing_neg</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-57\"><a class=\"doc-anchor\" href=\"#example-57\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.overflowing_neg(), (neg_five, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(min.overflowing_neg(), (min, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i128)?;%0Alet+neg_five+=+NonZero::new(-5i128)?;%0Alet+min+=+NonZero::new(i128::MIN)?;%0A%0Aassert_eq!(pos_five.overflowing_neg(),+(neg_five,+false));%0Aassert_eq!(min.overflowing_neg(),+(min,+true));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_neg-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_neg-4\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating negation. Computes <code>-self</code>,\nreturning <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i128&gt;::MAX</code></a>\nif <code>self == NonZero::&lt;i128&gt;::MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"example-58\"><a class=\"doc-anchor\" href=\"#example-58\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus_one = NonZero::new(i128::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.saturating_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.saturating_neg(), max);\n<span class=\"macro\">assert_eq!</span>(max.saturating_neg(), min_plus_one);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i128)?;%0Alet+neg_five+=+NonZero::new(-5i128)?;%0Alet+min+=+NonZero::new(i128::MIN)?;%0Alet+min_plus_one+=+NonZero::new(i128::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i128::MAX)?;%0A%0Aassert_eq!(pos_five.saturating_neg(),+neg_five);%0Aassert_eq!(min.saturating_neg(),+max);%0Aassert_eq!(max.saturating_neg(),+min_plus_one);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_neg-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-4\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>See <a href=\"../primitive.i128.html#method.wrapping_neg\" title=\"method i128::wrapping_neg\"><code>i128::wrapping_neg</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-59\"><a class=\"doc-anchor\" href=\"#example-59\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i128::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.wrapping_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.wrapping_neg(), min);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i128)?;%0Alet+neg_five+=+NonZero::new(-5i128)?;%0Alet+min+=+NonZero::new(i128::MIN)?;%0A%0Aassert_eq!(pos_five.wrapping_neg(),+neg_five);%0Aassert_eq!(min.wrapping_neg(),+min);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_mul-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-10\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-164\"><a class=\"doc-anchor\" href=\"#examples-164\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i128)?;%0Alet+four+=+NonZero::new(4i128)?;%0Alet+max+=+NonZero::new(i128::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_mul-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-10\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i128&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-165\"><a class=\"doc-anchor\" href=\"#examples-165\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i128)?;%0Alet+four+=+NonZero::new(4i128)?;%0Alet+max+=+NonZero::new(i128::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_mul-10\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_mul-10\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self * rhs &gt; i128::MAX</code>, or <code>self * rhs &lt; i128::MIN</code>.</p>\n<h5 id=\"examples-166\"><a class=\"doc-anchor\" href=\"#examples-166\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i128</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i128)?;%0Alet+four+=+NonZero::new(4i128)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_pow-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-10\" class=\"fn\">checked_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-167\"><a class=\"doc-anchor\" href=\"#examples-167\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(i128::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i128)?;%0Alet+twenty_seven+=+NonZero::new(27i128)?;%0Alet+half_max+=+NonZero::new(i128::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_pow-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-10\" class=\"fn\">saturating_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MIN\" title=\"associated constant std::num::NonZero::MIN\"><code>NonZero::&lt;i128&gt;::MIN</code></a> or <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i128&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-168\"><a class=\"doc-anchor\" href=\"#examples-168\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i128</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i128::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i128)?;%0Alet+twenty_seven+=+NonZero::new(27i128)?;%0Alet+max+=+NonZero::new(i128::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonZero%3Cisize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a><a href=\"#impl-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.BITS-11\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0\">1.67.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-11\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a> = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to <a href=\"../primitive.isize.html#associatedconstant.BITS\" title=\"associated constant isize::BITS\"><code>isize::BITS</code></a>.</p>\n<h5 id=\"examples-169\"><a class=\"doc-anchor\" href=\"#examples-169\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;isize&gt;::BITS, isize::BITS);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cisize%3E::BITS,+isize::BITS);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-11\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-170\"><a class=\"doc-anchor\" href=\"#examples-170\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;isize&gt;::new(-<span class=\"number\">1isize</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cisize%3E::new(-1isize).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-11\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-171\"><a class=\"doc-anchor\" href=\"#examples-171\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;isize&gt;::new(<span class=\"number\">0b0101000</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Cisize%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count_ones-11\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-11\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_zero_count_ones</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120287\">#120287</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-172\"><a class=\"doc-anchor\" href=\"#examples-172\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_zero_count_ones)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;isize&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;isize&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Cisize%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Cisize%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MIN-11\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-11\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.isize.html#associatedconstant.MIN\" title=\"associated constant isize::MIN\"><code>isize::MIN</code></a>.</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-173\"><a class=\"doc-anchor\" href=\"#examples-173\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;isize&gt;::MIN.get(), isize::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cisize%3E::MIN.get(),+isize::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MAX-11\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-11\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../primitive.isize.html#associatedconstant.MAX\" title=\"associated constant isize::MAX\"><code>isize::MAX</code></a>.</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a “gap” at 0.</p>\n<h5 id=\"examples-174\"><a class=\"doc-anchor\" href=\"#examples-174\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;isize&gt;::MAX.get(), isize::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Cisize%3E::MAX.get(),+isize::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.abs-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs-5\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self.\nSee <a href=\"../primitive.isize.html#method.abs\" title=\"method isize::abs\"><code>isize::abs</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-60\"><a class=\"doc-anchor\" href=\"#example-60\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1isize)?;%0Alet+neg+=+NonZero::new(-1isize)?;%0A%0Aassert_eq!(pos,+pos.abs());%0Aassert_eq!(pos,+neg.abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_abs-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_abs-5\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if\n<code>self == NonZero::&lt;isize&gt;::MIN</code>.\nThe result cannot be zero.</p>\n<h5 id=\"example-61\"><a class=\"doc-anchor\" href=\"#example-61\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(pos), neg.checked_abs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, min.checked_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1isize)?;%0Alet+neg+=+NonZero::new(-1isize)?;%0Alet+min+=+NonZero::new(isize::MIN)?;%0A%0Aassert_eq!(Some(pos),+neg.checked_abs());%0Aassert_eq!(None,+min.checked_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.overflowing_abs-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_abs-5\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;, <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self,\nwith overflow information, see\n<a href=\"../primitive.isize.html#method.overflowing_abs\" title=\"method isize::overflowing_abs\"><code>isize::overflowing_abs</code></a>.</p>\n<h5 id=\"example-62\"><a class=\"doc-anchor\" href=\"#example-62\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), pos.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), neg.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((min, <span class=\"bool-val\">true</span>), min.overflowing_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1isize)?;%0Alet+neg+=+NonZero::new(-1isize)?;%0Alet+min+=+NonZero::new(isize::MIN)?;%0A%0Aassert_eq!((pos,+false),+pos.overflowing_abs());%0Aassert_eq!((pos,+false),+neg.overflowing_abs());%0Aassert_eq!((min,+true),+min.overflowing_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_abs-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_abs-5\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating absolute value, see\n<a href=\"../primitive.isize.html#method.saturating_abs\" title=\"method isize::saturating_abs\"><code>isize::saturating_abs</code></a>.</p>\n<h5 id=\"example-63\"><a class=\"doc-anchor\" href=\"#example-63\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus = NonZero::new(isize::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(isize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min_plus.saturating_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1isize)?;%0Alet+neg+=+NonZero::new(-1isize)?;%0Alet+min+=+NonZero::new(isize::MIN)?;%0Alet+min_plus+=+NonZero::new(isize::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(isize::MAX)?;%0A%0Aassert_eq!(pos,+pos.saturating_abs());%0Aassert_eq!(pos,+neg.saturating_abs());%0Aassert_eq!(max,+min.saturating_abs());%0Aassert_eq!(max,+min_plus.saturating_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_abs-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_abs-5\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping absolute value, see\n<a href=\"../primitive.isize.html#method.wrapping_abs\" title=\"method isize::wrapping_abs\"><code>isize::wrapping_abs</code></a>.</p>\n<h5 id=\"example-64\"><a class=\"doc-anchor\" href=\"#example-64\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(min, min.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(max, (-max).wrapping_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1isize)?;%0Alet+neg+=+NonZero::new(-1isize)?;%0Alet+min+=+NonZero::new(isize::MIN)?;%0Alet+max+=+NonZero::new(isize::MAX)?;%0A%0Aassert_eq!(pos,+pos.wrapping_abs());%0Aassert_eq!(pos,+neg.wrapping_abs());%0Aassert_eq!(min,+min.wrapping_abs());%0Aassert_eq!(max,+(-max).wrapping_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unsigned_abs-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.unsigned_abs-5\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self\nwithout any wrapping or panicking.</p>\n<h5 id=\"example-65\"><a class=\"doc-anchor\" href=\"#example-65\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>u_pos = NonZero::new(<span class=\"number\">1usize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_pos = NonZero::new(<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_neg = NonZero::new(-<span class=\"number\">1isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>u_max = NonZero::new(usize::MAX / <span class=\"number\">2 </span>+ <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(u_pos, i_pos.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_pos, i_neg.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_max, i_min.unsigned_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+u_pos+=+NonZero::new(1usize)?;%0Alet+i_pos+=+NonZero::new(1isize)?;%0Alet+i_neg+=+NonZero::new(-1isize)?;%0Alet+i_min+=+NonZero::new(isize::MIN)?;%0Alet+u_max+=+NonZero::new(usize::MAX+/+2+%2B+1)?;%0A%0Aassert_eq!(u_pos,+i_pos.unsigned_abs());%0Aassert_eq!(u_pos,+i_neg.unsigned_abs());%0Aassert_eq!(u_max,+i_min.unsigned_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_positive-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_positive-5\" class=\"fn\">is_positive</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the\nnumber is negative.</p>\n<h5 id=\"example-66\"><a class=\"doc-anchor\" href=\"#example-66\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(pos_five.is_positive());\n<span class=\"macro\">assert!</span>(!neg_five.is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5isize)?;%0Alet+neg_five+=+NonZero::new(-5isize)?;%0A%0Aassert!(pos_five.is_positive());%0Aassert!(!neg_five.is_positive());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_negative-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_negative-5\" class=\"fn\">is_negative</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the\nnumber is positive.</p>\n<h5 id=\"example-67\"><a class=\"doc-anchor\" href=\"#example-67\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(neg_five.is_negative());\n<span class=\"macro\">assert!</span>(!pos_five.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5isize)?;%0Alet+neg_five+=+NonZero::new(-5isize)?;%0A%0Aassert!(neg_five.is_negative());%0Aassert!(!pos_five.is_negative());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_neg-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-5\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>,\nreturning <code>None</code> if <code>self == NonZero::&lt;isize&gt;::MIN</code>.</p>\n<h5 id=\"example-68\"><a class=\"doc-anchor\" href=\"#example-68\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.checked_neg(), <span class=\"prelude-val\">Some</span>(neg_five));\n<span class=\"macro\">assert_eq!</span>(min.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5isize)?;%0Alet+neg_five+=+NonZero::new(-5isize)?;%0Alet+min+=+NonZero::new(isize::MIN)?;%0A%0Aassert_eq!(pos_five.checked_neg(),+Some(neg_five));%0Aassert_eq!(min.checked_neg(),+None);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.overflowing_neg-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-5\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;, <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>See <a href=\"../primitive.isize.html#method.overflowing_neg\" title=\"method isize::overflowing_neg\"><code>isize::overflowing_neg</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-69\"><a class=\"doc-anchor\" href=\"#example-69\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.overflowing_neg(), (neg_five, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(min.overflowing_neg(), (min, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5isize)?;%0Alet+neg_five+=+NonZero::new(-5isize)?;%0Alet+min+=+NonZero::new(isize::MIN)?;%0A%0Aassert_eq!(pos_five.overflowing_neg(),+(neg_five,+false));%0Aassert_eq!(min.overflowing_neg(),+(min,+true));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_neg-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_neg-5\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating negation. Computes <code>-self</code>,\nreturning <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;isize&gt;::MAX</code></a>\nif <code>self == NonZero::&lt;isize&gt;::MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"example-70\"><a class=\"doc-anchor\" href=\"#example-70\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus_one = NonZero::new(isize::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(isize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.saturating_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.saturating_neg(), max);\n<span class=\"macro\">assert_eq!</span>(max.saturating_neg(), min_plus_one);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5isize)?;%0Alet+neg_five+=+NonZero::new(-5isize)?;%0Alet+min+=+NonZero::new(isize::MIN)?;%0Alet+min_plus_one+=+NonZero::new(isize::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(isize::MAX)?;%0A%0Aassert_eq!(pos_five.saturating_neg(),+neg_five);%0Aassert_eq!(min.saturating_neg(),+max);%0Aassert_eq!(max.saturating_neg(),+min_plus_one);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_neg-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-5\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>See <a href=\"../primitive.isize.html#method.wrapping_neg\" title=\"method isize::wrapping_neg\"><code>isize::wrapping_neg</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-71\"><a class=\"doc-anchor\" href=\"#example-71\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(isize::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.wrapping_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.wrapping_neg(), min);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5isize)?;%0Alet+neg_five+=+NonZero::new(-5isize)?;%0Alet+min+=+NonZero::new(isize::MIN)?;%0A%0Aassert_eq!(pos_five.wrapping_neg(),+neg_five);%0Aassert_eq!(min.wrapping_neg(),+min);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_mul-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-11\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-175\"><a class=\"doc-anchor\" href=\"#examples-175\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(isize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2isize)?;%0Alet+four+=+NonZero::new(4isize)?;%0Alet+max+=+NonZero::new(isize::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_mul-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-11\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;isize&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-176\"><a class=\"doc-anchor\" href=\"#examples-176\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(isize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2isize)?;%0Alet+four+=+NonZero::new(4isize)?;%0Alet+max+=+NonZero::new(isize::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_mul-11\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.unchecked_mul-11\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self * rhs &gt; isize::MAX</code>, or <code>self * rhs &lt; isize::MIN</code>.</p>\n<h5 id=\"examples-177\"><a class=\"doc-anchor\" href=\"#examples-177\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4isize</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2isize)?;%0Alet+four+=+NonZero::new(4isize)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_pow-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-11\" class=\"fn\">checked_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-178\"><a class=\"doc-anchor\" href=\"#examples-178\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(isize::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3isize)?;%0Alet+twenty_seven+=+NonZero::new(27isize)?;%0Alet+half_max+=+NonZero::new(isize::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_pow-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-11\" class=\"fn\">saturating_pow</a>(self, other: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"struct.NonZero.html#associatedconstant.MIN\" title=\"associated constant std::num::NonZero::MIN\"><code>NonZero::&lt;isize&gt;::MIN</code></a> or <a href=\"struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;isize&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-179\"><a class=\"doc-anchor\" href=\"#examples-179\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27isize</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(isize::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3isize)?;%0Alet+twenty_seven+=+NonZero::new(27isize)?;%0Alet+max+=+NonZero::new(isize::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Binary-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#135\">source</a></span><a href=\"#impl-Binary-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#135\">source</a><a href=\"#method.fmt-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Binary.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Binary.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3CNonZero%3CT%3E%3E-for-T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#311-313\">source</a></span><a href=\"#impl-BitOr%3CNonZero%3CT%3E%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;&gt; for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;Output = T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-14\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-14\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#318\">source</a><a href=\"#method.bitor-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; &lt;T as <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3CT%3E-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#297-299\">source</a></span><a href=\"#impl-BitOr%3CT%3E-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;Output = T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-13\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-13\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#304\">source</a><a href=\"#method.bitor-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: T) -&gt; &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt; as <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#283-285\">source</a></span><a href=\"#impl-BitOr-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;Output = T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-12\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-12\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#290\">source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt; as <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOrAssign%3CT%3E-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#337-340\">source</a></span><a href=\"#impl-BitOrAssign%3CT%3E-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a>,\n    <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;: <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;T, Output = <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#343\">source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: T)</h4></section></summary><div class=\"docblock\">Performs the <code>|=</code> operation. <a href=\"../ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOrAssign-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#325-328\">source</a></span><a href=\"#impl-BitOrAssign-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a>,\n    <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;: <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;Output = <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#331\">source</a><a href=\"#method.bitor_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\">Performs the <code>|=</code> operation. <a href=\"../ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#161-163\">source</a></span><a href=\"#impl-Clone-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#166\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#133\">source</a></span><a href=\"#impl-Debug-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#133\">source</a><a href=\"#method.fmt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Display-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#134\">source</a></span><a href=\"#impl-Display-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#134\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div%3CNonZero%3Cu128%3E%3E-for-u128\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><a href=\"#impl-Div%3CNonZero%3Cu128%3E%3E-for-u128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a><a href=\"#method.div-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any fractional\npart of the exact result, and cannot panic.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-18\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-18\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div%3CNonZero%3Cu16%3E%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><a href=\"#impl-Div%3CNonZero%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a><a href=\"#method.div-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any fractional\npart of the exact result, and cannot panic.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-20\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-20\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div%3CNonZero%3Cu32%3E%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><a href=\"#impl-Div%3CNonZero%3Cu32%3E%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a><a href=\"#method.div-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any fractional\npart of the exact result, and cannot panic.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-16\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-16\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div%3CNonZero%3Cu64%3E%3E-for-u64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><a href=\"#impl-Div%3CNonZero%3Cu64%3E%3E-for-u64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a><a href=\"#method.div-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any fractional\npart of the exact result, and cannot panic.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-19\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-19\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div%3CNonZero%3Cu8%3E%3E-for-u8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><a href=\"#impl-Div%3CNonZero%3Cu8%3E%3E-for-u8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a><a href=\"#method.div-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any fractional\npart of the exact result, and cannot panic.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-17\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-17\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div%3CNonZero%3Cusize%3E%3E-for-usize\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><a href=\"#impl-Div%3CNonZero%3Cusize%3E%3E-for-usize\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any fractional\npart of the exact result, and cannot panic.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-15\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-15\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DivAssign%3CNonZero%3Cu128%3E%3E-for-u128\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><a href=\"#impl-DivAssign%3CNonZero%3Cu128%3E%3E-for-u128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a><a href=\"#method.div_assign-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any fractional\npart of the exact result, and cannot panic.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DivAssign%3CNonZero%3Cu16%3E%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><a href=\"#impl-DivAssign%3CNonZero%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div_assign-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a><a href=\"#method.div_assign-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any fractional\npart of the exact result, and cannot panic.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DivAssign%3CNonZero%3Cu32%3E%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><a href=\"#impl-DivAssign%3CNonZero%3Cu32%3E%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any fractional\npart of the exact result, and cannot panic.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DivAssign%3CNonZero%3Cu64%3E%3E-for-u64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><a href=\"#impl-DivAssign%3CNonZero%3Cu64%3E%3E-for-u64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div_assign-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a><a href=\"#method.div_assign-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any fractional\npart of the exact result, and cannot panic.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DivAssign%3CNonZero%3Cu8%3E%3E-for-u8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><a href=\"#impl-DivAssign%3CNonZero%3Cu8%3E%3E-for-u8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div_assign-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a><a href=\"#method.div_assign-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any fractional\npart of the exact result, and cannot panic.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DivAssign%3CNonZero%3Cusize%3E%3E-for-usize\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><a href=\"#impl-DivAssign%3CNonZero%3Cusize%3E%3E-for-usize\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a><a href=\"#method.div_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any fractional\npart of the exact result, and cannot panic.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CAlignment%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/alignment.rs.html#189\">source</a><a href=\"#impl-From%3CAlignment%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../ptr/struct.Alignment.html\" title=\"struct std::ptr::Alignment\">Alignment</a>&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/alignment.rs.html#191\">source</a><a href=\"#method.from-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(align: <a class=\"struct\" href=\"../ptr/struct.Alignment.html\" title=\"struct std::ptr::Alignment\">Alignment</a>) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3CT%3E%3E-for-T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#271-273\">source</a></span><a href=\"#impl-From%3CNonZero%3CT%3E%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;&gt; for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#276\">source</a><a href=\"#method.from-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; T</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#444\">source</a></span><a href=\"#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#444\">source</a><a href=\"#method.from-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#442\">source</a></span><a href=\"#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#442\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#443\">source</a></span><a href=\"#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#443\">source</a><a href=\"#method.from-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#445\">source</a></span><a href=\"#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#445\">source</a><a href=\"#method.from-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#447\">source</a></span><a href=\"#impl-From%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#447\">source</a><a href=\"#method.from-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#446\">source</a></span><a href=\"#impl-From%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#446\">source</a><a href=\"#method.from-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#448\">source</a></span><a href=\"#impl-From%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#448\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#440\">source</a></span><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#440\">source</a><a href=\"#method.from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#437\">source</a></span><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#437\">source</a><a href=\"#method.from-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#438\">source</a></span><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#438\">source</a><a href=\"#method.from-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#439\">source</a></span><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#439\">source</a><a href=\"#method.from-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#441\">source</a></span><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#441\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#458\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#458\">source</a><a href=\"#method.from-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#456\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#456\">source</a><a href=\"#method.from-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#457\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#457\">source</a><a href=\"#method.from-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#430\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#430\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#428\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#428\">source</a><a href=\"#method.from-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#429\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#429\">source</a><a href=\"#method.from-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#431\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#431\">source</a><a href=\"#method.from-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#460\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#460\">source</a><a href=\"#method.from-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#459\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#459\">source</a><a href=\"#method.from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#433\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#433\">source</a><a href=\"#method.from-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#432\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#432\">source</a><a href=\"#method.from-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#461\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#461\">source</a><a href=\"#method.from-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#434\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#434\">source</a><a href=\"#method.from-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#454\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#454\">source</a><a href=\"#method.from-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#451\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#451\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#452\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#452\">source</a><a href=\"#method.from-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#453\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#453\">source</a><a href=\"#method.from-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#455\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#455\">source</a><a href=\"#method.from-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#426\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#426\">source</a><a href=\"#method.from-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#423\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#423\">source</a><a href=\"#method.from-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#424\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#424\">source</a><a href=\"#method.from-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#425\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#425\">source</a><a href=\"#method.from-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#427\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#427\">source</a><a href=\"#method.from-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><a href=\"#impl-FromStr-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-11\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a><a href=\"#method.from_str-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt; as <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"../str/trait.FromStr.html#associatedtype.Err\" title=\"type std::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class=\"docblock\">Parses a string <code>s</code> to return a value of this type. <a href=\"../str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><a href=\"#impl-FromStr-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a><a href=\"#method.from_str-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; as <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"../str/trait.FromStr.html#associatedtype.Err\" title=\"type std::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class=\"docblock\">Parses a string <code>s</code> to return a value of this type. <a href=\"../str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><a href=\"#impl-FromStr-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a><a href=\"#method.from_str-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; as <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"../str/trait.FromStr.html#associatedtype.Err\" title=\"type std::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class=\"docblock\">Parses a string <code>s</code> to return a value of this type. <a href=\"../str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><a href=\"#impl-FromStr-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-6\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a><a href=\"#method.from_str-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; as <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"../str/trait.FromStr.html#associatedtype.Err\" title=\"type std::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class=\"docblock\">Parses a string <code>s</code> to return a value of this type. <a href=\"../str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><a href=\"#impl-FromStr-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; as <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"../str/trait.FromStr.html#associatedtype.Err\" title=\"type std::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class=\"docblock\">Parses a string <code>s</code> to return a value of this type. <a href=\"../str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><a href=\"#impl-FromStr-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-7\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a><a href=\"#method.from_str-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(\n    src: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; as <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"../str/trait.FromStr.html#associatedtype.Err\" title=\"type std::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class=\"docblock\">Parses a string <code>s</code> to return a value of this type. <a href=\"../str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><a href=\"#impl-FromStr-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a><a href=\"#method.from_str-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt; as <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"../str/trait.FromStr.html#associatedtype.Err\" title=\"type std::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class=\"docblock\">Parses a string <code>s</code> to return a value of this type. <a href=\"../str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><a href=\"#impl-FromStr-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-10\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a><a href=\"#method.from_str-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; as <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"../str/trait.FromStr.html#associatedtype.Err\" title=\"type std::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class=\"docblock\">Parses a string <code>s</code> to return a value of this type. <a href=\"../str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><a href=\"#impl-FromStr-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a><a href=\"#method.from_str-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; as <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"../str/trait.FromStr.html#associatedtype.Err\" title=\"type std::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class=\"docblock\">Parses a string <code>s</code> to return a value of this type. <a href=\"../str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><a href=\"#impl-FromStr-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a><a href=\"#method.from_str-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; as <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"../str/trait.FromStr.html#associatedtype.Err\" title=\"type std::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class=\"docblock\">Parses a string <code>s</code> to return a value of this type. <a href=\"../str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><a href=\"#impl-FromStr-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a><a href=\"#method.from_str-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"../str/trait.FromStr.html#associatedtype.Err\" title=\"type std::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class=\"docblock\">Parses a string <code>s</code> to return a value of this type. <a href=\"../str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><a href=\"#impl-FromStr-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a><a href=\"#method.from_str-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(\n    src: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"../str/trait.FromStr.html#associatedtype.Err\" title=\"type std::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class=\"docblock\">Parses a string <code>s</code> to return a value of this type. <a href=\"../str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#257-259\">source</a></span><a href=\"#impl-Hash-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#262-264\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-LowerHex-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#137\">source</a></span><a href=\"#impl-LowerHex-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#137\">source</a><a href=\"#method.fmt-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.LowerHex.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-%26NonZero%3Ci128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><a href=\"#impl-Neg-for-%26NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for &amp;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-10\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a><a href=\"#method.neg-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-%26NonZero%3Ci16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><a href=\"#impl-Neg-for-%26NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for &amp;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a><a href=\"#method.neg-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-%26NonZero%3Ci32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><a href=\"#impl-Neg-for-%26NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for &amp;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a><a href=\"#method.neg-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-%26NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><a href=\"#impl-Neg-for-%26NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for &amp;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-11\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a><a href=\"#method.neg-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-%26NonZero%3Ci8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><a href=\"#impl-Neg-for-%26NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for &amp;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a><a href=\"#method.neg-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-%26NonZero%3Cisize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><a href=\"#impl-Neg-for-%26NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for &amp;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-7\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a><a href=\"#method.neg-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a></span><a href=\"#impl-Neg-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1690-1694\">source</a><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a></span><a href=\"#impl-Neg-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1672-1676\">source</a><a href=\"#method.neg-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a></span><a href=\"#impl-Neg-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-6\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1678-1682\">source</a><a href=\"#method.neg-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><a href=\"#impl-Neg-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a><a href=\"#method.neg-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a></span><a href=\"#impl-Neg-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1666-1670\">source</a><a href=\"#method.neg-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a></span><a href=\"#impl-Neg-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1696-1700\">source</a><a href=\"#method.neg-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Octal-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#136\">source</a></span><a href=\"#impl-Octal-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#136\">source</a><a href=\"#method.fmt-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Octal.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Octal.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#228-230\">source</a></span><a href=\"#impl-Ord-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#233\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#238\">source</a><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#244\">source</a><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#250\">source</a><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;, max: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#175-177\">source</a></span><a href=\"#impl-PartialEq-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#180\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#185\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#197-199\">source</a></span><a href=\"#impl-PartialOrd-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#202\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#207\">source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#212\">source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#217\">source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#222\">source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem%3CNonZero%3Cu128%3E%3E-for-u128\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><a href=\"#impl-Rem%3CNonZero%3Cu128%3E%3E-for-u128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a><a href=\"#method.rem-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-25\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-25\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem%3CNonZero%3Cu16%3E%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><a href=\"#impl-Rem%3CNonZero%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a><a href=\"#method.rem-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-26\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-26\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem%3CNonZero%3Cu32%3E%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><a href=\"#impl-Rem%3CNonZero%3Cu32%3E%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a><a href=\"#method.rem-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-24\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-24\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem%3CNonZero%3Cu64%3E%3E-for-u64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><a href=\"#impl-Rem%3CNonZero%3Cu64%3E%3E-for-u64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-21\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-21\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem%3CNonZero%3Cu8%3E%3E-for-u8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><a href=\"#impl-Rem%3CNonZero%3Cu8%3E%3E-for-u8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a><a href=\"#method.rem-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-23\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-23\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem%3CNonZero%3Cusize%3E%3E-for-usize\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><a href=\"#impl-Rem%3CNonZero%3Cusize%3E%3E-for-usize\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a><a href=\"#method.rem-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-22\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-22\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RemAssign%3CNonZero%3Cu128%3E%3E-for-u128\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a></span><a href=\"#impl-RemAssign%3CNonZero%3Cu128%3E%3E-for-u128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1656-1659\">source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RemAssign%3CNonZero%3Cu16%3E%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a></span><a href=\"#impl-RemAssign%3CNonZero%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem_assign-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1641-1644\">source</a><a href=\"#method.rem_assign-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RemAssign%3CNonZero%3Cu32%3E%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a></span><a href=\"#impl-RemAssign%3CNonZero%3Cu32%3E%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1646-1649\">source</a><a href=\"#method.rem_assign-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RemAssign%3CNonZero%3Cu64%3E%3E-for-u64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a></span><a href=\"#impl-RemAssign%3CNonZero%3Cu64%3E%3E-for-u64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem_assign-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1651-1654\">source</a><a href=\"#method.rem_assign-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RemAssign%3CNonZero%3Cu8%3E%3E-for-u8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a></span><a href=\"#impl-RemAssign%3CNonZero%3Cu8%3E%3E-for-u8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem_assign-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1636-1639\">source</a><a href=\"#method.rem_assign-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RemAssign%3CNonZero%3Cusize%3E%3E-for-usize\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a></span><a href=\"#impl-RemAssign%3CNonZero%3Cusize%3E%3E-for-usize\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1661-1664\">source</a><a href=\"#method.rem_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525\">source</a><a href=\"#method.try_from-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-17\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-17\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-74\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525\">source</a><a href=\"#method.try_from-74\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-74\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-74\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-82\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525\">source</a><a href=\"#method.try_from-82\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-82\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-82\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-88\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525\">source</a><a href=\"#method.try_from-88\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-88\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-88\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525\">source</a><a href=\"#method.try_from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-91\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541\">source</a><a href=\"#method.try_from-91\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-91\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-91\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541\">source</a><a href=\"#method.try_from-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-14\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-14\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541\">source</a><a href=\"#method.try_from-45\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-45\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-45\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-65\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541\">source</a><a href=\"#method.try_from-65\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-65\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-65\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-61\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541\">source</a><a href=\"#method.try_from-61\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-61\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-61\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-78\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#541\">source</a><a href=\"#method.try_from-78\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-78\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-78\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#522\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#522\">source</a><a href=\"#method.try_from-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-7\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-73\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538\">source</a><a href=\"#method.try_from-73\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-73\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-73\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-75\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538\">source</a><a href=\"#method.try_from-75\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-75\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-75\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538\">source</a><a href=\"#method.try_from-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-22\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-22\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538\">source</a><a href=\"#method.try_from-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-33\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-33\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-52\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538\">source</a><a href=\"#method.try_from-52\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-52\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-52\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci16%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-72\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#538\">source</a><a href=\"#method.try_from-72\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-72\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-72\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#523\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#523\">source</a><a href=\"#method.try_from-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-26\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-26\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#523\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#523\">source</a><a href=\"#method.try_from-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-19\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-19\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#523\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-69\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#523\">source</a><a href=\"#method.try_from-69\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-69\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-69\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539\">source</a><a href=\"#method.try_from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539\">source</a><a href=\"#method.try_from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-6\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-89\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539\">source</a><a href=\"#method.try_from-89\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-89\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-89\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-53\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539\">source</a><a href=\"#method.try_from-53\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-53\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-53\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539\">source</a><a href=\"#method.try_from-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-23\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-23\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci32%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-95\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#539\">source</a><a href=\"#method.try_from-95\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-95\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-95\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#524\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-96\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#524\">source</a><a href=\"#method.try_from-96\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-96\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-96\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#524\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-86\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#524\">source</a><a href=\"#method.try_from-86\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-86\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-86\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#524\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#524\">source</a><a href=\"#method.try_from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#524\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#524\">source</a><a href=\"#method.try_from-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-37\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-37\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540\">source</a><a href=\"#method.try_from-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-27\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-27\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-77\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540\">source</a><a href=\"#method.try_from-77\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-77\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-77\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-80\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540\">source</a><a href=\"#method.try_from-80\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-80\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-80\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540\">source</a><a href=\"#method.try_from-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-31\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-31\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-94\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540\">source</a><a href=\"#method.try_from-94\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-94\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-94\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci64%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-58\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#540\">source</a><a href=\"#method.try_from-58\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-58\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-58\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-101\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537\">source</a><a href=\"#method.try_from-101\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-101\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-101\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537\">source</a><a href=\"#method.try_from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537\">source</a><a href=\"#method.try_from-64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-64\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-64\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537\">source</a><a href=\"#method.try_from-43\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-43\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-43\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537\">source</a><a href=\"#method.try_from-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-16\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-16\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci8%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-104\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#537\">source</a><a href=\"#method.try_from-104\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-104\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-104\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-90\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526\">source</a><a href=\"#method.try_from-90\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-90\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-90\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-97\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526\">source</a><a href=\"#method.try_from-97\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-97\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-97\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526\">source</a><a href=\"#method.try_from-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-87\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526\">source</a><a href=\"#method.try_from-87\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-87\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-87\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-79\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526\">source</a><a href=\"#method.try_from-79\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-79\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-79\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-93\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542\">source</a><a href=\"#method.try_from-93\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-93\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-93\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-99\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542\">source</a><a href=\"#method.try_from-99\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-99\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-99\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542\">source</a><a href=\"#method.try_from-42\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-42\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-42\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-108\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542\">source</a><a href=\"#method.try_from-108\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-108\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-108\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-70\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542\">source</a><a href=\"#method.try_from-70\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-70\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-70\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#542\">source</a><a href=\"#method.try_from-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-15\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-15\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-98\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533\">source</a><a href=\"#method.try_from-98\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-98\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-98\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-48\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533\">source</a><a href=\"#method.try_from-48\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-48\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-48\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533\">source</a><a href=\"#method.try_from-47\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-47\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-47\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-76\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533\">source</a><a href=\"#method.try_from-76\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-76\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-76\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-105\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533\">source</a><a href=\"#method.try_from-105\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-105\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-105\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-85\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533\">source</a><a href=\"#method.try_from-85\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-85\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-85\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518\">source</a><a href=\"#method.try_from-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-35\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-35\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-49\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518\">source</a><a href=\"#method.try_from-49\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-49\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-49\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-92\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518\">source</a><a href=\"#method.try_from-92\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-92\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-92\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-71\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518\">source</a><a href=\"#method.try_from-71\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-71\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-71\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#518\">source</a><a href=\"#method.try_from-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-25\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-25\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#530\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#530\">source</a><a href=\"#method.try_from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#530\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-57\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#530\">source</a><a href=\"#method.try_from-57\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-57\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-57\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#530\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-83\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#530\">source</a><a href=\"#method.try_from-83\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-83\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-83\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#515\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu16%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#515\">source</a><a href=\"#method.try_from-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-28\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-28\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#531\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#531\">source</a><a href=\"#method.try_from-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-13\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-13\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#531\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#531\">source</a><a href=\"#method.try_from-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-38\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-38\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#531\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-54\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#531\">source</a><a href=\"#method.try_from-54\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-54\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-54\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#531\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-109\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#531\">source</a><a href=\"#method.try_from-109\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-109\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-109\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#516\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-106\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#516\">source</a><a href=\"#method.try_from-106\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-106\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-106\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#516\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#516\">source</a><a href=\"#method.try_from-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-10\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#516\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu32%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#516\">source</a><a href=\"#method.try_from-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-40\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-40\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532\">source</a><a href=\"#method.try_from-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-41\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-41\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-62\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532\">source</a><a href=\"#method.try_from-62\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-62\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-62\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532\">source</a><a href=\"#method.try_from-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-84\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532\">source</a><a href=\"#method.try_from-84\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-84\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-84\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532\">source</a><a href=\"#method.try_from-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-29\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-29\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#517\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-51\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#517\">source</a><a href=\"#method.try_from-51\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-51\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-51\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#517\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#517\">source</a><a href=\"#method.try_from-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-34\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-34\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#517\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#517\">source</a><a href=\"#method.try_from-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-39\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-39\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#517\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-50\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#517\">source</a><a href=\"#method.try_from-50\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-50\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-50\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#529\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-68\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#529\">source</a><a href=\"#method.try_from-68\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-68\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-68\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-Alignment\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/alignment.rs.html#169\">source</a><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-Alignment\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"../ptr/struct.Alignment.html\" title=\"struct std::ptr::Alignment\">Alignment</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-20\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-20\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/alignment.rs.html#173\">source</a><a href=\"#method.try_from-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    align: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../ptr/struct.Alignment.html\" title=\"struct std::ptr::Alignment\">Alignment</a>, &lt;<a class=\"struct\" href=\"../ptr/struct.Alignment.html\" title=\"struct std::ptr::Alignment\">Alignment</a> as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534\">source</a><a href=\"#method.try_from-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-12\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-12\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-59\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534\">source</a><a href=\"#method.try_from-59\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-59\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-59\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534\">source</a><a href=\"#method.try_from-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-30\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-30\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-67\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534\">source</a><a href=\"#method.try_from-67\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-67\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-67\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-102\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534\">source</a><a href=\"#method.try_from-102\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-102\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-102\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-66\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519\">source</a><a href=\"#method.try_from-66\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-66\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-66\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519\">source</a><a href=\"#method.try_from-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-24\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-24\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519\">source</a><a href=\"#method.try_from-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-11\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-55\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519\">source</a><a href=\"#method.try_from-55\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-55\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-55\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-103\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#519\">source</a><a href=\"#method.try_from-103\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-103\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-103\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3Ci128%3E-for-NonZero%3Ci128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#492\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-NonZero%3Ci128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#492\">source</a><a href=\"#method.try_from-44\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <a href=\"../primitive.i128.html\" title=\"primitive i128\"><code>i128</code></a> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-44\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-44\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3Ci16%3E-for-NonZero%3Ci16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#489\">source</a></span><a href=\"#impl-TryFrom%3Ci16%3E-for-NonZero%3Ci16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#489\">source</a><a href=\"#method.try_from-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <a href=\"../primitive.i16.html\" title=\"primitive i16\"><code>i16</code></a> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-36\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-36\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3Ci32%3E-for-NonZero%3Ci32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#490\">source</a></span><a href=\"#impl-TryFrom%3Ci32%3E-for-NonZero%3Ci32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-100\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#490\">source</a><a href=\"#method.try_from-100\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <a href=\"../primitive.i32.html\" title=\"primitive i32\"><code>i32</code></a> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-100\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-100\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3Ci64%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#491\">source</a></span><a href=\"#impl-TryFrom%3Ci64%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#491\">source</a><a href=\"#method.try_from-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <a href=\"../primitive.i64.html\" title=\"primitive i64\"><code>i64</code></a> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-21\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-21\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3Ci8%3E-for-NonZero%3Ci8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#488\">source</a></span><a href=\"#impl-TryFrom%3Ci8%3E-for-NonZero%3Ci8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-63\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#488\">source</a><a href=\"#method.try_from-63\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <a href=\"../primitive.i8.html\" title=\"primitive i8\"><code>i8</code></a> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-63\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-63\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3Cisize%3E-for-NonZero%3Cisize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#493\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-NonZero%3Cisize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#493\">source</a><a href=\"#method.try_from-46\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <a href=\"../primitive.isize.html\" title=\"primitive isize\"><code>isize</code></a> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-46\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-46\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3Cu128%3E-for-NonZero%3Cu128%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#486\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-NonZero%3Cu128%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#486\">source</a><a href=\"#method.try_from-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <a href=\"../primitive.u128.html\" title=\"primitive u128\"><code>u128</code></a> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-18\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-18\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3Cu16%3E-for-NonZero%3Cu16%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#483\">source</a></span><a href=\"#impl-TryFrom%3Cu16%3E-for-NonZero%3Cu16%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-56\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#483\">source</a><a href=\"#method.try_from-56\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <a href=\"../primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-56\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-56\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3Cu32%3E-for-NonZero%3Cu32%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#484\">source</a></span><a href=\"#impl-TryFrom%3Cu32%3E-for-NonZero%3Cu32%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-60\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#484\">source</a><a href=\"#method.try_from-60\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <a href=\"../primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-60\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-60\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3Cu64%3E-for-NonZero%3Cu64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#485\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-NonZero%3Cu64%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-81\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#485\">source</a><a href=\"#method.try_from-81\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <a href=\"../primitive.u64.html\" title=\"primitive u64\"><code>u64</code></a> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-81\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-81\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3Cu8%3E-for-NonZero%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#482\">source</a></span><a href=\"#impl-TryFrom%3Cu8%3E-for-NonZero%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-107\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#482\">source</a><a href=\"#method.try_from-107\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <a href=\"../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-107\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-107\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3Cusize%3E-for-NonZero%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#487\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-NonZero%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#487\">source</a><a href=\"#method.try_from-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;, &lt;<a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <a href=\"../primitive.usize.html\" title=\"primitive usize\"><code>usize</code></a> \nto <code><a href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-32\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-32\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-UpperHex-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#138\">source</a></span><a href=\"#impl-UpperHex-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#138\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.UpperHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.UpperHex.html#tymethod.fmt\">Read more</a></div></details></div></details><section id=\"impl-Copy-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#172\">source</a></span><a href=\"#impl-Copy-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a>,</div></h3></section><section id=\"impl-Eq-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#194\">source</a></span><a href=\"#impl-Eq-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,</div></h3></section><section id=\"impl-Freeze-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#153\">source</a></span><a href=\"#impl-Freeze-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#154\">source</a></span><a href=\"#impl-RefUnwindSafe-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#155\">source</a></span><a href=\"#impl-Send-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-StructuralPartialEq-for-NonZero%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#191\">source</a><a href=\"#impl-StructuralPartialEq-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a>,</div></h3></section><section id=\"impl-Sync-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#156\">source</a></span><a href=\"#impl-Sync-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#157\">source</a></span><a href=\"#impl-Unpin-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#158\">source</a></span><a href=\"#impl-UnwindSafe-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToString-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2552\">source</a><a href=\"#impl-ToString-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../string/trait.ToString.html\" title=\"trait std::string::ToString\">ToString</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2558\">source</a><a href=\"#method.to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">default fn <a href=\"../string/trait.ToString.html#tymethod.to_string\" class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">Converts the given value to a <code>String</code>. <a href=\"../string/trait.ToString.html#tymethod.to_string\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-111\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-111\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-110\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from-110\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-110\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-110\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:44.649Z"
}