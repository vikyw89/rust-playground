{
	"title": "Additions to the prelude - The Rust Edition Guide",
	"url": "https://doc.rust-lang.org/stable/edition-guide/rust-2024/prelude.html",
	"markdown": "# Additions to the prelude - The Rust Edition Guide\n\nðŸš§ The 2024 Edition has not yet been released and hence this section is still \"under construction\". More information may be found in the tracking issue at [https://github.com/rust-lang/rust/issues/121042](https://github.com/rust-lang/rust/issues/121042).\n\n## [Summary](#summary)\n\n-   The [`Future`](../../std/future/trait.Future.html) and [`IntoFuture`](../../std/future/trait.IntoFuture.html) traits are now part of the prelude.\n-   This might make calls to trait methods ambiguous which could make some code fail to compile.\n-   `RustcEncodable` and `RustcDecodable` have been removed from the prelude.\n\n## [Details](#details)\n\nThe [prelude of the standard library](../../std/prelude/index.html) is the module containing everything that is automatically imported in every module. It contains commonly used items such as `Option`, `Vec`, `drop`, and `Clone`.\n\nThe Rust compiler prioritizes any manually imported items over those from the prelude, to make sure additions to the prelude will not break any existing code. For example, if you have a crate or module called `example` containing a `pub struct Option;`, then `use example::*;` will make `Option` unambiguously refer to the one from `example`; not the one from the standard library.\n\nHowever, adding a _trait_ to the prelude can break existing code in a subtle way. For example, a call to `x.poll()` which comes from a `MyPoller` trait might fail to compile if `std`'s `Future` is also imported, because the call to `poll` is now ambiguous and could come from either trait.\n\nAs a solution, Rust 2024 will use a new prelude. It's identical to the current one, except for the following changes:\n\n-   Added:\n    -   [`std::future::Future`](../../std/future/trait.Future.html)\n    -   [`std::future::IntoFuture`](../../std/future/trait.IntoFuture.html)\n-   Removed:\n    -   `RustcEncodable`\n    -   `RustcDecodable`\n\n### [`RustcEncodable` and `RustcDecodable` removal](#rustcencodable-and-rustcdecodable-removal)\n\n`RustcEncodable` and `RustcDecodable` are two undocumented derive macros that have been removed from the prelude. These were deprecated before Rust 1.0, but remained within the standard library prelude. The 2024 Edition has removed these from the prelude since they are not expected to be used.\n\nIf in the unlikely case there is a project still using these, it is recommended to switch to a serialization library, such as those found on [crates.io](https://crates.io/categories/encoding).\n\n## [Migration](#migration)\n\nðŸš§ The automatic migration for this has not yet been implemented.\n\n### [Migration needed](#migration-needed)\n\n#### [Conflicting trait methods](#conflicting-trait-methods)\n\nWhen two traits that are in scope have the same method name, it is ambiguous which trait method should be used. For example:\n\n```rust\ntrait MyPoller {\n    // This name is the same as the `poll` method on the `Future` trait from `std`.\n    fn poll(&self) {\n        println!(\"polling\");\n    }\n}\n\nimpl<T> MyPoller for T {}\n\nfn main() {\n    // Pin<&mut async {}> implements both `std::future::Future` and `MyPoller`.\n    // If both traits are in scope (as would be the case in Rust 2024),\n    // then it becomes ambiguous which `poll` method to call\n    core::pin::pin!(async {}).poll();\n}\n```\n\nWe can fix this by using fully qualified syntax:\n\n```rust\nfn main() {\n    // Now it is clear which trait method we're referring to\n    <_ as MyPoller>::poll(&core::pin::pin!(async {}));\n}\n```\n\n#### [`RustcEncodable` and `RustcDecodable`](#rustcencodable-and-rustcdecodable)\n\nIt is strongly recommended that you migrate to a different serialization library if you are still using these. However, these derive macros are still available in the standard library, they are just required to be imported from the older prelude now:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[allow(soft_unstable)]\nuse core::prelude::v1::{RustcDecodable, RustcEncodable};\n}\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Additions to the prelude - The Rust Edition Guide</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../editions/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> What are editions?</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../editions/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Creating a new project</a></li><li class=\"chapter-item expanded \"><a href=\"../editions/transitioning-an-existing-project-to-a-new-edition.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Transitioning an existing project to a new edition</a></li><li class=\"chapter-item expanded \"><a href=\"../editions/advanced-migrations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Advanced migrations</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../rust-2015/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Rust 2015</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Rust 2018</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../rust-2018/path-changes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Path and module system changes</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/trait-fn-parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Anonymous trait function parameters deprecated</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/new-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> New keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/tyvar-behind-raw-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Method dispatch for raw pointers to inference variables</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Cargo changes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Rust 2021</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../rust-2021/prelude.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> Additions to the prelude</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/default-cargo-resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Default Cargo feature resolver</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/IntoIterator-for-arrays.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> IntoIterator for arrays</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/disjoint-capture-in-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Disjoint capture in closures</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/panic-macro-consistency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Panic macro consistency</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/reserving-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.6.</strong> Reserving syntax</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/warnings-promoted-to-error.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.7.</strong> Warnings promoted to errors</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/or-patterns-macro-rules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.8.</strong> Or patterns in macro-rules</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/c-string-literals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.9.</strong> C-string literals</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Rust 2024 ðŸš§</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../rust-2024/prelude.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Additions to the prelude</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/unsafe-op-in-unsafe-fn.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> unsafe_op_in_unsafe_fn warning</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/rpit-lifetime-capture.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> RPIT lifetime capture</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/static-mut-reference.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.4.</strong> Disallow references to static mut</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/public-private-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.5.</strong> Public/private dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/cargo-remove-implicit-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.6.</strong> Cargo: Remove implicit features</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/cargo-table-key-names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.7.</strong> Cargo: Table and key name consistency</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/cargo-inherited-default-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.8.</strong> Cargo: Reject unused inherited default-features</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/rustfmt-overflow-delimited-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.9.</strong> Rustfmt: Combine all delimited exprs as last argument</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/gen-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.10.</strong> gen keyword</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Edition Guide</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/edition-guide\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/edition-guide/edit/master/src/rust-2024/prelude.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"additions-to-the-prelude\"><a class=\"header\" href=\"#additions-to-the-prelude\">Additions to the prelude</a></h1>\n<p>ðŸš§ The 2024 Edition has not yet been released and hence this section is still \"under construction\".\nMore information may be found in the tracking issue at <a href=\"https://github.com/rust-lang/rust/issues/121042\">https://github.com/rust-lang/rust/issues/121042</a>.</p>\n<h2 id=\"summary\"><a class=\"header\" href=\"#summary\">Summary</a></h2>\n<ul>\n<li>The <a href=\"../../std/future/trait.Future.html\"><code class=\"hljs\">Future</code></a> and <a href=\"../../std/future/trait.IntoFuture.html\"><code class=\"hljs\">IntoFuture</code></a> traits are now part of the prelude.</li>\n<li>This might make calls to trait methods ambiguous which could make some code fail to compile.</li>\n<li><code class=\"hljs\">RustcEncodable</code> and <code class=\"hljs\">RustcDecodable</code> have been removed from the prelude.</li>\n</ul>\n<h2 id=\"details\"><a class=\"header\" href=\"#details\">Details</a></h2>\n<p>The <a href=\"../../std/prelude/index.html\">prelude of the standard library</a> is the module containing everything that is automatically imported in every module.\nIt contains commonly used items such as <code class=\"hljs\">Option</code>, <code class=\"hljs\">Vec</code>, <code class=\"hljs\">drop</code>, and <code class=\"hljs\">Clone</code>.</p>\n<p>The Rust compiler prioritizes any manually imported items over those from the prelude,\nto make sure additions to the prelude will not break any existing code.\nFor example, if you have a crate or module called <code class=\"hljs\">example</code> containing a <code class=\"hljs\">pub struct Option;</code>,\nthen <code class=\"hljs\">use example::*;</code> will make <code class=\"hljs\">Option</code> unambiguously refer to the one from <code class=\"hljs\">example</code>;\nnot the one from the standard library.</p>\n<p>However, adding a <em>trait</em> to the prelude can break existing code in a subtle way.\nFor example, a call to <code class=\"hljs\">x.poll()</code> which comes from a <code class=\"hljs\">MyPoller</code> trait might fail to compile if <code class=\"hljs\">std</code>'s <code class=\"hljs\">Future</code> is also imported, because the call to <code class=\"hljs\">poll</code> is now ambiguous and could come from either trait.</p>\n<p>As a solution, Rust 2024 will use a new prelude.\nIt's identical to the current one, except for the following changes:</p>\n<ul>\n<li>Added:\n<ul>\n<li><a href=\"../../std/future/trait.Future.html\"><code class=\"hljs\">std::future::Future</code></a></li>\n<li><a href=\"../../std/future/trait.IntoFuture.html\"><code class=\"hljs\">std::future::IntoFuture</code></a></li>\n</ul>\n</li>\n<li>Removed:\n<ul>\n<li><code class=\"hljs\">RustcEncodable</code></li>\n<li><code class=\"hljs\">RustcDecodable</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"rustcencodable-and-rustcdecodable-removal\"><a class=\"header\" href=\"#rustcencodable-and-rustcdecodable-removal\"><code>RustcEncodable</code> and <code>RustcDecodable</code> removal</a></h3>\n<p><code class=\"hljs\">RustcEncodable</code> and <code class=\"hljs\">RustcDecodable</code> are two undocumented derive macros that have been removed from the prelude.\nThese were deprecated before Rust 1.0, but remained within the standard library prelude.\nThe 2024 Edition has removed these from the prelude since they are not expected to be used.</p>\n<p>If in the unlikely case there is a project still using these, it is recommended to switch to a serialization library, such as those found on <a href=\"https://crates.io/categories/encoding\">crates.io</a>.</p>\n<h2 id=\"migration\"><a class=\"header\" href=\"#migration\">Migration</a></h2>\n<p>ðŸš§ The automatic migration for this has not yet been implemented.</p>\n<h3 id=\"migration-needed\"><a class=\"header\" href=\"#migration-needed\">Migration needed</a></h3>\n<h4 id=\"conflicting-trait-methods\"><a class=\"header\" href=\"#conflicting-trait-methods\">Conflicting trait methods</a></h4>\n<p>When two traits that are in scope have the same method name, it is ambiguous which trait method should be used. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">MyPoller</span></span> {\n    <span class=\"hljs-comment\">// This name is the same as the `poll` method on the `Future` trait from `std`.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">poll</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"polling\"</span>);\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; MyPoller <span class=\"hljs-keyword\">for</span> T {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// Pin&lt;&amp;mut async {}&gt; implements both `std::future::Future` and `MyPoller`.</span>\n    <span class=\"hljs-comment\">// If both traits are in scope (as would be the case in Rust 2024),</span>\n    <span class=\"hljs-comment\">// then it becomes ambiguous which `poll` method to call</span>\n    core::pin::pin!(<span class=\"hljs-keyword\">async</span> {}).poll();\n}</code></pre></pre>\n<p>We can fix this by using fully qualified syntax:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// Now it is clear which trait method we're referring to</span>\n    &lt;_ <span class=\"hljs-keyword\">as</span> MyPoller&gt;::poll(&amp;core::pin::pin!(<span class=\"hljs-keyword\">async</span> {}));\n}</code></pre>\n<h4 id=\"rustcencodable-and-rustcdecodable\"><a class=\"header\" href=\"#rustcencodable-and-rustcdecodable\"><code>RustcEncodable</code> and <code>RustcDecodable</code></a></h4>\n<p>It is strongly recommended that you migrate to a different serialization library if you are still using these.\nHowever, these derive macros are still available in the standard library, they are just required to be imported from the older prelude now:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[allow(soft_unstable)]</span>\n<span class=\"hljs-keyword\">use</span> core::prelude::v1::{RustcDecodable, RustcEncodable};\n<span class=\"boring\">}</span></code></pre></pre>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../rust-2024/index.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../rust-2024/unsafe-op-in-unsafe-fn.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../rust-2024/index.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../rust-2024/unsafe-op-in-unsafe-fn.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:20:32.672Z"
}