{
	"title": "The Cargo Book",
	"url": "https://doc.rust-lang.org/cargo/print.html",
	"markdown": "# The Cargo Book\n\n![Cargo Logo](images/Cargo-Logo-Small.png)\n\nCargo is the [Rust](https://www.rust-lang.org/) [_package manager_](about:blank/appendix/glossary.html#package-manager \"\"package manager\" (glossary entry)\"). Cargo downloads your Rust [package](about:blank/appendix/glossary.html#package \"\"package\" (glossary entry)\")’s dependencies, compiles your packages, makes distributable packages, and uploads them to [crates.io](https://crates.io/), the Rust community’s [_package registry_](about:blank/appendix/glossary.html#package-registry \"\"package registry\" (glossary entry)\"). You can contribute to this book on [GitHub](https://github.com/rust-lang/cargo/tree/master/src/doc).\n\n## [Sections](#sections)\n\n**[Getting Started](getting-started/index.html)**\n\nTo get started with Cargo, install Cargo (and Rust) and set up your first [_crate_](about:blank/appendix/glossary.html#crate \"\"crate\" (glossary entry)\").\n\n**[Cargo Guide](guide/index.html)**\n\nThe guide will give you all you need to know about how to use Cargo to develop Rust packages.\n\n**[Cargo Reference](reference/index.html)**\n\nThe reference covers the details of various areas of Cargo.\n\n**[Cargo Commands](commands/index.html)**\n\nThe commands will let you interact with Cargo using its command-line interface.\n\n**[Frequently Asked Questions](faq.html)**\n\n**Appendices:**\n\n-   [Glossary](appendix/glossary.html)\n-   [Git Authentication](appendix/git-authentication.html)\n\n**Other Documentation:**\n\n-   [Changelog](https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md) — Detailed notes about changes in Cargo in each release.\n-   [Rust documentation website](https://doc.rust-lang.org/) — Links to official Rust documentation and tools.\n\n## [Getting Started](#getting-started)\n\nTo get started with Cargo, install Cargo (and Rust) and set up your first [_crate_](about:blank/appendix/glossary.html#crate \"\"crate\" (glossary entry)\").\n\n-   [Installation](getting-started/installation.html)\n-   [First steps with Cargo](getting-started/first-steps.html)\n\n## [Installation](#installation)\n\n## [Install Rust and Cargo](#install-rust-and-cargo)\n\nThe easiest way to get Cargo is to install the current stable release of [Rust](https://www.rust-lang.org/) by using [rustup](https://rustup.rs/). Installing Rust using `rustup` will also install `cargo`.\n\nOn Linux and macOS systems, this is done as follows:\n\n```console\ncurl https://sh.rustup.rs -sSf | sh\n\n```\n\nIt will download a script, and start the installation. If everything goes well, you’ll see this appear:\n\n```console\nRust is installed now. Great!\n\n```\n\nOn Windows, download and run [rustup-init.exe](https://win.rustup.rs/). It will start the installation in a console and present the above message on success.\n\nAfter this, you can use the `rustup` command to also install `beta` or `nightly` channels for Rust and Cargo.\n\nFor other installation options and information, visit the [install](https://www.rust-lang.org/tools/install) page of the Rust website.\n\n## [Build and Install Cargo from Source](#build-and-install-cargo-from-source)\n\nAlternatively, you can [build Cargo from source](https://github.com/rust-lang/cargo#compiling-from-source).\n\n## [First Steps with Cargo](#first-steps-with-cargo)\n\nThis section provides a quick sense for the `cargo` command line tool. We demonstrate its ability to generate a new [_**package**_](about:blank/appendix/glossary.html#package \"\"package\" (glossary entry)\") for us, its ability to compile the [_**crate**_](about:blank/appendix/glossary.html#crate \"\"crate\" (glossary entry)\") within the package, and its ability to run the resulting program.\n\nTo start a new package with Cargo, use `cargo new`:\n\n```console\n$ cargo new hello_world\n\n```\n\nCargo defaults to `--bin` to make a binary program. To make a library, we would pass `--lib`, instead.\n\nLet’s check out what Cargo has generated for us:\n\n```console\n$ cd hello_world\n$ tree .\n.\n├── Cargo.toml\n└── src\n    └── main.rs\n\n1 directory, 2 files\n\n```\n\nThis is all we need to get started. First, let’s check out `Cargo.toml`:\n\n```toml\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\n\n```\n\nThis is called a [_**manifest**_](about:blank/appendix/glossary.html#manifest \"\"manifest\" (glossary entry)\"), and it contains all of the metadata that Cargo needs to compile your package.\n\nHere’s what’s in `src/main.rs`:\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nCargo generated a “hello world” program for us, otherwise known as a [_**binary crate**_](about:blank/appendix/glossary.html#crate \"\"crate\" (glossary entry)\"). Let’s compile it:\n\n```console\n$ cargo build\n   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n\n```\n\nAnd then run it:\n\n```console\n$ ./target/debug/hello_world\nHello, world!\n\n```\n\nWe can also use `cargo run` to compile and then run it, all in one step:\n\n```console\n$ cargo run\n     Fresh hello_world v0.1.0 (file:///path/to/package/hello_world)\n   Running `target/hello_world`\nHello, world!\n\n```\n\n## [Going further](#going-further)\n\nFor more details on using Cargo, check out the [Cargo Guide](getting-started/../guide/index.html)\n\n## [Cargo Guide](#cargo-guide)\n\nThis guide will give you all that you need to know about how to use Cargo to develop Rust packages.\n\n-   [Why Cargo Exists](guide/why-cargo-exists.html)\n-   [Creating a New Package](guide/creating-a-new-project.html)\n-   [Working on an Existing Cargo Package](guide/working-on-an-existing-project.html)\n-   [Dependencies](guide/dependencies.html)\n-   [Package Layout](guide/project-layout.html)\n-   [Cargo.toml vs Cargo.lock](guide/cargo-toml-vs-cargo-lock.html)\n-   [Tests](guide/tests.html)\n-   [Continuous Integration](guide/continuous-integration.html)\n-   [Cargo Home](guide/cargo-home.html)\n-   [Build Cache](guide/build-cache.html)\n\n## [Why Cargo Exists](#why-cargo-exists)\n\n## [Preliminaries](#preliminaries)\n\nIn Rust, as you may know, a library or executable program is called a [_crate_](about:blank/appendix/glossary.html#crate \"\"crate\" (glossary entry)\"). Crates are compiled using the Rust compiler, `rustc`. When starting with Rust, the first source code most people encounter is that of the venerable “hello world” program, which they compile by invoking `rustc` directly:\n\n```console\n$ rustc hello.rs\n$ ./hello\nHello, world!\n\n```\n\nNote that the above command required that we specify the file name explicitly. If we were to directly use `rustc` to compile a different program, a different command line invocation would be required. If we needed to specify any specific compiler flags or include external dependencies, then the needed command would be even more specific (and elaborate).\n\nFurthermore, most non-trivial programs will likely have dependencies on external libraries, and will therefore also depend transitively on _their_ dependencies. Obtaining the correct versions of all the necessary dependencies and keeping them up to date would be laborious and error-prone if done by hand.\n\nRather than work only with crates and `rustc`, we can avoid the manual tedium involved with performing the above tasks by introducing a higher-level [“_package_”](about:blank/appendix/glossary.html#package \"\"package\" (glossary entry)\") abstraction and by using a [_package manager_](about:blank/appendix/glossary.html#package-manager \"\"package manager\" (glossary entry)\").\n\n## [Enter: Cargo](#enter-cargo)\n\n_Cargo_ is the Rust package manager. It is a tool that allows Rust [_packages_](about:blank/appendix/glossary.html#package \"\"package\" (glossary entry)\") to declare their various dependencies and ensure that you’ll always get a repeatable build.\n\nTo accomplish this goal, Cargo does four things:\n\n-   Introduces two metadata files with various bits of package information.\n-   Fetches and builds your package’s dependencies.\n-   Invokes `rustc` or another build tool with the correct parameters to build your package.\n-   Introduces conventions to make working with Rust packages easier.\n\nTo a large extent, Cargo normalizes the commands needed to build a given program or library; this is one aspect to the above mentioned conventions. As we show later, the same command can be used to build different [_artifacts_](about:blank/appendix/glossary.html#artifact \"\"artifact\" (glossary entry)\"), regardless of their names. Rather than invoke `rustc` directly, we can instead invoke something generic such as `cargo build` and let cargo worry about constructing the correct `rustc` invocation. Furthermore, Cargo will automatically fetch from a [_registry_](about:blank/appendix/glossary.html#registry \"\"registry\" (glossary entry)\") any dependencies we have defined for our artifact, and arrange for them to be incorporated into our build as needed.\n\nIt is only a slight exaggeration to say that once you know how to build one Cargo-based project, you know how to build _all_ of them.\n\n## [Creating a New Package](#creating-a-new-package)\n\nTo start a new [package](about:blank/appendix/glossary.html#package \"\"package\" (glossary entry)\") with Cargo, use `cargo new`:\n\n```console\n$ cargo new hello_world --bin\n\n```\n\nWe’re passing `--bin` because we’re making a binary program: if we were making a library, we’d pass `--lib`. This also initializes a new `git` repository by default. If you don’t want it to do that, pass `--vcs none`.\n\nLet’s check out what Cargo has generated for us:\n\n```console\n$ cd hello_world\n$ tree .\n.\n├── Cargo.toml\n└── src\n    └── main.rs\n\n1 directory, 2 files\n\n```\n\nLet’s take a closer look at `Cargo.toml`:\n\n```toml\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\n\n\n```\n\nThis is called a [_**manifest**_](about:blank/appendix/glossary.html#manifest \"\"manifest\" (glossary entry)\"), and it contains all of the metadata that Cargo needs to compile your package. This file is written in the [TOML](https://toml.io/) format (pronounced /tɑməl/).\n\nHere’s what’s in `src/main.rs`:\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nCargo generated a “hello world” program for us, otherwise known as a [_binary crate_](about:blank/appendix/glossary.html#crate \"\"crate\" (glossary entry)\"). Let’s compile it:\n\n```console\n$ cargo build\n   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n\n```\n\nAnd then run it:\n\n```console\n$ ./target/debug/hello_world\nHello, world!\n\n```\n\nWe can also use `cargo run` to compile and then run it, all in one step (You won’t see the `Compiling` line if you have not made any changes since you last compiled):\n\n```console\n$ cargo run\n   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n     Running `target/debug/hello_world`\nHello, world!\n\n```\n\nYou’ll now notice a new file, `Cargo.lock`. It contains information about our dependencies. Since we don’t have any yet, it’s not very interesting.\n\nOnce you’re ready for release, you can use `cargo build --release` to compile your files with optimizations turned on:\n\n```console\n$ cargo build --release\n   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n\n```\n\n`cargo build --release` puts the resulting binary in `target/release` instead of `target/debug`.\n\nCompiling in debug mode is the default for development. Compilation time is shorter since the compiler doesn’t do optimizations, but the code will run slower. Release mode takes longer to compile, but the code will run faster.\n\n## [Working on an Existing Cargo Package](#working-on-an-existing-cargo-package)\n\nIf you download an existing [package](about:blank/appendix/glossary.html#package \"\"package\" (glossary entry)\") that uses Cargo, it’s really easy to get going.\n\nFirst, get the package from somewhere. In this example, we’ll use `regex` cloned from its repository on GitHub:\n\n```console\n$ git clone https://github.com/rust-lang/regex.git\n$ cd regex\n\n```\n\nTo build, use `cargo build`:\n\n```console\n$ cargo build\n   Compiling regex v1.5.0 (file:///path/to/package/regex)\n\n```\n\nThis will fetch all of the dependencies and then build them, along with the package.\n\n## [Dependencies](#dependencies)\n\n[crates.io](https://crates.io/) is the Rust community’s central [_package registry_](about:blank/appendix/glossary.html#package-registry \"\"package-registry\" (glossary entry)\") that serves as a location to discover and download [packages](about:blank/appendix/glossary.html#package \"\"package\" (glossary entry)\"). `cargo` is configured to use it by default to find requested packages.\n\nTo depend on a library hosted on [crates.io](https://crates.io/), add it to your `Cargo.toml`.\n\n## [Adding a dependency](#adding-a-dependency)\n\nIf your `Cargo.toml` doesn’t already have a `[dependencies]` section, add that, then list the [crate](about:blank/appendix/glossary.html#crate \"\"crate\" (glossary entry)\") name and version that you would like to use. This example adds a dependency of the `time` crate:\n\n```toml\n[dependencies]\ntime = \"0.1.12\"\n\n```\n\nThe version string is a [SemVer](https://semver.org/) version requirement. The [specifying dependencies](guide/../reference/specifying-dependencies.html) docs have more information about the options you have here.\n\nIf we also wanted to add a dependency on the `regex` crate, we would not need to add `[dependencies]` for each crate listed. Here’s what your whole `Cargo.toml` file would look like with dependencies on the `time` and `regex` crates:\n\n```toml\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\ntime = \"0.1.12\"\nregex = \"0.1.41\"\n\n```\n\nRe-run `cargo build`, and Cargo will fetch the new dependencies and all of their dependencies, compile them all, and update the `Cargo.lock`:\n\n```console\n$ cargo build\n      Updating crates.io index\n   Downloading memchr v0.1.5\n   Downloading libc v0.1.10\n   Downloading regex-syntax v0.2.1\n   Downloading memchr v0.1.5\n   Downloading aho-corasick v0.3.0\n   Downloading regex v0.1.41\n     Compiling memchr v0.1.5\n     Compiling libc v0.1.10\n     Compiling regex-syntax v0.2.1\n     Compiling memchr v0.1.5\n     Compiling aho-corasick v0.3.0\n     Compiling regex v0.1.41\n     Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n\n```\n\nOur `Cargo.lock` contains the exact information about which revision of all of these dependencies we used.\n\nNow, if `regex` gets updated, we will still build with the same revision until we choose to `cargo update`.\n\nYou can now use the `regex` library in `main.rs`.\n\n```rust\nuse regex::Regex;\n\nfn main() {\n    let re = Regex::new(r\"^\\d{4}-\\d{2}-\\d{2}$\").unwrap();\n    println!(\"Did our date match? {}\", re.is_match(\"2014-01-01\"));\n}\n```\n\nRunning it will show:\n\n```console\n$ cargo run\n   Running `target/hello_world`\nDid our date match? true\n\n```\n\n## [Package Layout](#package-layout)\n\nCargo uses conventions for file placement to make it easy to dive into a new Cargo [package](about:blank/appendix/glossary.html#package \"\"package\" (glossary entry)\"):\n\n```text\n.\n├── Cargo.lock\n├── Cargo.toml\n├── src/\n│   ├── lib.rs\n│   ├── main.rs\n│   └── bin/\n│       ├── named-executable.rs\n│       ├── another-executable.rs\n│       └── multi-file-executable/\n│           ├── main.rs\n│           └── some_module.rs\n├── benches/\n│   ├── large-input.rs\n│   └── multi-file-bench/\n│       ├── main.rs\n│       └── bench_module.rs\n├── examples/\n│   ├── simple.rs\n│   └── multi-file-example/\n│       ├── main.rs\n│       └── ex_module.rs\n└── tests/\n    ├── some-integration-tests.rs\n    └── multi-file-test/\n        ├── main.rs\n        └── test_module.rs\n\n```\n\n-   `Cargo.toml` and `Cargo.lock` are stored in the root of your package (_package root_).\n-   Source code goes in the `src` directory.\n-   The default library file is `src/lib.rs`.\n-   The default executable file is `src/main.rs`.\n    -   Other executables can be placed in `src/bin/`.\n-   Benchmarks go in the `benches` directory.\n-   Examples go in the `examples` directory.\n-   Integration tests go in the `tests` directory.\n\nIf a binary, example, bench, or integration test consists of multiple source files, place a `main.rs` file along with the extra [_modules_](about:blank/appendix/glossary.html#module \"\"module\" (glossary entry)\") within a subdirectory of the `src/bin`, `examples`, `benches`, or `tests` directory. The name of the executable will be the directory name.\n\nYou can learn more about Rust’s module system in [the book](guide/../../book/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html).\n\nSee [Configuring a target](about:blank/reference/cargo-targets.html#configuring-a-target) for more details on manually configuring targets. See [Target auto-discovery](about:blank/reference/cargo-targets.html#target-auto-discovery) for more information on controlling how Cargo automatically infers target names.\n\n## [Cargo.toml vs Cargo.lock](#cargotoml-vs-cargolock)\n\n`Cargo.toml` and `Cargo.lock` serve two different purposes. Before we talk about them, here’s a summary:\n\n-   `Cargo.toml` is about describing your dependencies in a broad sense, and is written by you.\n-   `Cargo.lock` contains exact information about your dependencies. It is maintained by Cargo and should not be manually edited.\n\nWhen in doubt, check `Cargo.lock` into the version control system (e.g. Git). For a better understanding of why and what the alternatives might be, see [“Why have Cargo.lock in version control?” in the FAQ](about:blank/faq.html#why-have-cargolock-in-version-control). We recommend pairing this with [Verifying Latest Dependencies](about:blank/guide/continuous-integration.html#verifying-latest-dependencies)\n\nLet’s dig in a little bit more.\n\n`Cargo.toml` is a [**manifest**](about:blank/appendix/glossary.html#manifest \"\"manifest\" (glossary entry)\") file in which we can specify a bunch of different metadata about our package. For example, we can say that we depend on another package:\n\n```toml\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\n\n[dependencies]\nregex = { git = \"https://github.com/rust-lang/regex.git\" }\n\n```\n\nThis package has a single dependency, on the `regex` library. We’ve stated in this case that we’re relying on a particular Git repository that lives on GitHub. Since we haven’t specified any other information, Cargo assumes that we intend to use the latest commit on the default branch to build our package.\n\nSound good? Well, there’s one problem: If you build this package today, and then you send a copy to me, and I build this package tomorrow, something bad could happen. There could be more commits to `regex` in the meantime, and my build would include new commits while yours would not. Therefore, we would get different builds. This would be bad because we want reproducible builds.\n\nWe could fix this problem by defining a specific `rev` value in our `Cargo.toml`, so Cargo could know exactly which revision to use when building the package:\n\n```toml\n[dependencies]\nregex = { git = \"https://github.com/rust-lang/regex.git\", rev = \"9f9f693\" }\n\n```\n\nNow our builds will be the same. But there’s a big drawback: now we have to manually think about SHA-1s every time we want to update our library. This is both tedious and error prone.\n\nEnter the `Cargo.lock`. Because of its existence, we don’t need to manually keep track of the exact revisions: Cargo will do it for us. When we have a manifest like this:\n\n```toml\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\n\n[dependencies]\nregex = { git = \"https://github.com/rust-lang/regex.git\" }\n\n```\n\nCargo will take the latest commit and write that information out into our `Cargo.lock` when we build for the first time. That file will look like this:\n\n```toml\n[[package]]\nname = \"hello_world\"\nversion = \"0.1.0\"\ndependencies = [\n \"regex 1.5.0 (git+https://github.com/rust-lang/regex.git#9f9f693768c584971a4d53bc3c586c33ed3a6831)\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.5.0\"\nsource = \"git+https://github.com/rust-lang/regex.git#9f9f693768c584971a4d53bc3c586c33ed3a6831\"\n\n```\n\nYou can see that there’s a lot more information here, including the exact revision we used to build. Now when you give your package to someone else, they’ll use the exact same SHA, even though we didn’t specify it in our `Cargo.toml`.\n\nWhen we’re ready to opt in to a new version of the library, Cargo can re-calculate the dependencies and update things for us:\n\n```console\n$ cargo update         # updates all dependencies\n$ cargo update regex   # updates just “regex”\n\n```\n\nThis will write out a new `Cargo.lock` with the new version information. Note that the argument to `cargo update` is actually a [Package ID Specification](guide/../reference/pkgid-spec.html) and `regex` is just a short specification.\n\n## [Tests](#tests)\n\nCargo can run your tests with the `cargo test` command. Cargo looks for tests to run in two places: in each of your `src` files and any tests in `tests/`. Tests in your `src` files should be unit tests and [documentation tests](guide/../../rustdoc/write-documentation/documentation-tests.html). Tests in `tests/` should be integration-style tests. As such, you’ll need to import your crates into the files in `tests`.\n\nHere’s an example of running `cargo test` in our [package](about:blank/appendix/glossary.html#package \"\"package\" (glossary entry)\"), which currently has no tests:\n\n```console\n$ cargo test\n   Compiling regex v1.5.0 (https://github.com/rust-lang/regex.git#9f9f693)\n   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n     Running target/test/hello_world-9c2b65bbb79eabce\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n```\n\nIf our package had tests, we would see more output with the correct number of tests.\n\nYou can also run a specific test by passing a filter:\n\n```console\n$ cargo test foo\n\n```\n\nThis will run any test with `foo` in its name.\n\n`cargo test` runs additional checks as well. It will compile any examples you’ve included to ensure they still compile. It also runs documentation tests to ensure your code samples from documentation comments compile. Please see the [testing guide](guide/../../book/ch11-00-testing.html) in the Rust documentation for a general view of writing and organizing tests. See [Cargo Targets: Tests](about:blank/reference/cargo-targets.html#tests) to learn more about different styles of tests in Cargo.\n\n## [Continuous Integration](#continuous-integration)\n\n## [Getting Started](#getting-started-1)\n\nA basic CI will build and test your projects:\n\n### [GitHub Actions](#github-actions)\n\nTo test your package on GitHub Actions, here is a sample `.github/workflows/ci.yml` file:\n\n```yaml\nname: Cargo Build & Test\n\non:\n  push:\n  pull_request:\n\nenv: \n  CARGO_TERM_COLOR: always\n\njobs:\n  build_and_test:\n    name: Rust project - latest\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        toolchain:\n          - stable\n          - beta\n          - nightly\n    steps:\n      - uses: actions/checkout@v4\n      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}\n      - run: cargo build --verbose\n      - run: cargo test --verbose\n  \n\n```\n\nThis will test all three release channels (note a failure in any toolchain version will fail the entire job). You can also click `\"Actions\" > \"new workflow\"` in the GitHub UI and select Rust to add the [default configuration](https://github.com/actions/starter-workflows/blob/main/ci/rust.yml) to your repo. See [GitHub Actions documentation](https://docs.github.com/en/actions) for more information.\n\n### [GitLab CI](#gitlab-ci)\n\nTo test your package on GitLab CI, here is a sample `.gitlab-ci.yml` file:\n\n```yaml\nstages:\n  - build\n\nrust-latest:\n  stage: build\n  image: rust:latest\n  script:\n    - cargo build --verbose\n    - cargo test --verbose\n\nrust-nightly:\n  stage: build\n  image: rustlang/rust:nightly\n  script:\n    - cargo build --verbose\n    - cargo test --verbose\n  allow_failure: true\n\n```\n\nThis will test on the stable channel and nightly channel, but any breakage in nightly will not fail your overall build. Please see the [GitLab CI documentation](https://docs.gitlab.com/ce/ci/yaml/index.html) for more information.\n\n### [builds.sr.ht](#buildssrht)\n\nTo test your package on sr.ht, here is a sample `.build.yml` file. Be sure to change `<your repo>` and `<your project>` to the repo to clone and the directory where it was cloned.\n\n```yaml\nimage: archlinux\npackages:\n  - rustup\nsources:\n  - <your repo>\ntasks:\n  - setup: |\n      rustup toolchain install nightly stable\n      cd <your project>/\n      rustup run stable cargo fetch\n  - stable: |\n      rustup default stable\n      cd <your project>/\n      cargo build --verbose\n      cargo test --verbose\n  - nightly: |\n      rustup default nightly\n      cd <your project>/\n      cargo build --verbose ||:\n      cargo test --verbose  ||:\n  - docs: |\n      cd <your project>/\n      rustup run stable cargo doc --no-deps\n      rustup run nightly cargo doc --no-deps ||:\n\n```\n\nThis will test and build documentation on the stable channel and nightly channel, but any breakage in nightly will not fail your overall build. Please see the [builds.sr.ht documentation](https://man.sr.ht/builds.sr.ht/) for more information.\n\n### [CircleCI](#circleci)\n\nTo test your package on CircleCI, here is a sample `.circleci/config.yml` file:\n\n```yaml\nversion: 2.1\njobs:\n  build:\n    docker:\n      # check https://circleci.com/developer/images/image/cimg/rust#image-tags for latest\n      - image: cimg/rust:1.77.2\n    steps:\n      - checkout\n      - run: cargo test\n\n```\n\nTo run more complex pipelines, including flaky test detection, caching, and artifact management, please see [CircleCI Configuration Reference](https://circleci.com/docs/configuration-reference/).\n\n## [Verifying Latest Dependencies](#verifying-latest-dependencies)\n\nWhen [specifying dependencies](guide/../reference/specifying-dependencies.html) in `Cargo.toml`, they generally match a range of versions. Exhaustively testing all version combination would be unwieldy. Verifying the latest versions would at least test for users who run [`cargo add`](guide/../commands/cargo-add.html) or [`cargo install`](guide/../commands/cargo-install.html).\n\nWhen testing the latest versions some considerations are:\n\n-   Minimizing external factors affecting local development or CI\n-   Rate of new dependencies being published\n-   Level of risk a project is willing to accept\n-   CI costs, including indirect costs like if a CI service has a maximum for parallel runners, causing new jobs to be serialized when at the maximum.\n\nSome potential solutions include:\n\n-   [Not checking in the `Cargo.lock`](about:blank/faq.html#why-have-cargolock-in-version-control)\n    -   Depending on PR velocity, many versions may go untested\n    -   This comes at the cost of determinism\n-   Have a CI job verify the latest dependencies but mark it to “continue on failure”\n    -   Depending on the CI service, failures might not be obvious\n    -   Depending on PR velocity, may use more resources than necessary\n-   Have a scheduled CI job to verify latest dependencies\n    -   A hosted CI service may disable scheduled jobs for repositories that haven’t been touched in a while, affecting passively maintained packages\n    -   Depending on the CI service, notifications might not be routed to people who can act on the failure\n    -   If not balanced with dependency publish rate, may not test enough versions or may do redundant testing\n-   Regularly update dependencies through PRs, like with [Dependabot](https://docs.github.com/en/code-security/dependabot/working-with-dependabot) or [RenovateBot](https://renovatebot.com/)\n    -   Can isolate dependencies to their own PR or roll them up into a single PR\n    -   Only uses the resources necessary\n    -   Can configure the frequency to balance CI resources and coverage of dependency versions\n\nAn example CI job to verify latest dependencies, using GitHub Actions:\n\n```yaml\njobs:\n  latest_deps:\n    name: Latest Dependencies\n    runs-on: ubuntu-latest\n    continue-on-error: true\n    steps:\n      - uses: actions/checkout@v4\n      - run: rustup update stable && rustup default stable\n      - run: cargo update --verbose\n      - run: cargo build --verbose\n      - run: cargo test --verbose\n\n```\n\nFor projects with higher risks of per-platform or per-Rust version failures, more combinations may want to be tested.\n\n## [Verifying `rust-version`](#verifying-rust-version)\n\nWhen publishing packages that specify [`rust-version`](about:blank/reference/manifest.html#the-rust-version-field), it is important to verify the correctness of that field.\n\nSome third-party tools that can help with this include:\n\n-   [`cargo-msrv`](https://crates.io/crates/cargo-msrv)\n-   [`cargo-hack`](https://crates.io/crates/cargo-hack)\n\nAn example of one way to do this, using GitHub Actions:\n\n```yaml\njobs:\n  msrv:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: taiki-e/install-action@cargo-hack\n    - run: cargo hack check --rust-version --workspace --all-targets --ignore-private\n\n```\n\nThis tries to balance thoroughness with turnaround time:\n\n-   A single platform is used as most projects are platform-agnostic, trusting platform-specific dependencies to verify their behavior.\n-   `cargo check` is used as most issues contributors will run into are API availability and not behavior.\n-   Unpublished packages are skipped as this assumes only consumers of the verified project, through a registry, will care about `rust-version`.\n\n## [Cargo Home](#cargo-home)\n\nThe “Cargo home” functions as a download and source cache. When building a [crate](about:blank/appendix/glossary.html#crate \"\"crate\" (glossary entry)\"), Cargo stores downloaded build dependencies in the Cargo home. You can alter the location of the Cargo home by setting the `CARGO_HOME` [environmental variable](guide/../reference/environment-variables.html). The [home](https://crates.io/crates/home) crate provides an API for getting this location if you need this information inside your Rust crate. By default, the Cargo home is located in `$HOME/.cargo/`.\n\nPlease note that the internal structure of the Cargo home is not stabilized and may be subject to change at any time.\n\nThe Cargo home consists of following components:\n\n## [Files:](#files)\n\n-   `config.toml` Cargo’s global configuration file, see the [config entry in the reference](guide/../reference/config.html).\n    \n-   `credentials.toml` Private login credentials from [`cargo login`](guide/../commands/cargo-login.html) in order to log in to a [registry](about:blank/appendix/glossary.html#registry \"\"registry\" (glossary entry)\").\n    \n-   `.crates.toml`, `.crates2.json` These hidden files contain [package](about:blank/appendix/glossary.html#package \"\"package\" (glossary entry)\") information of crates installed via [`cargo install`](guide/../commands/cargo-install.html). Do NOT edit by hand!\n    \n\n## [Directories:](#directories)\n\n-   `bin` The bin directory contains executables of crates that were installed via [`cargo install`](guide/../commands/cargo-install.html) or [`rustup`](https://rust-lang.github.io/rustup/). To be able to make these binaries accessible, add the path of the directory to your `$PATH` environment variable.\n    \n-   `git` Git sources are stored here:\n    \n    -   `git/db` When a crate depends on a git repository, Cargo clones the repo as a bare repo into this directory and updates it if necessary.\n        \n    -   `git/checkouts` If a git source is used, the required commit of the repo is checked out from the bare repo inside `git/db` into this directory. This provides the compiler with the actual files contained in the repo of the commit specified for that dependency. Multiple checkouts of different commits of the same repo are possible.\n        \n-   `registry` Packages and metadata of crate registries (such as [crates.io](https://crates.io/)) are located here.\n    \n    -   `registry/index` The index is a bare git repository which contains the metadata (versions, dependencies etc) of all available crates of a registry.\n        \n    -   `registry/cache` Downloaded dependencies are stored in the cache. The crates are compressed gzip archives named with a `.crate` extension.\n        \n    -   `registry/src` If a downloaded `.crate` archive is required by a package, it is unpacked into `registry/src` folder where rustc will find the `.rs` files.\n        \n\n## [Caching the Cargo home in CI](#caching-the-cargo-home-in-ci)\n\nTo avoid redownloading all crate dependencies during continuous integration, you can cache the `$CARGO_HOME` directory. However, caching the entire directory is often inefficient as it will contain downloaded sources twice. If we depend on a crate such as `serde 1.0.92` and cache the entire `$CARGO_HOME` we would actually cache the sources twice, the `serde-1.0.92.crate` inside `registry/cache` and the extracted `.rs` files of serde inside `registry/src`. That can unnecessarily slow down the build as downloading, extracting, recompressing and reuploading the cache to the CI servers can take some time.\n\nIf you wish to cache binaries installed with [`cargo install`](guide/../commands/cargo-install.html), you need to cache the `bin/` folder and the `.crates.toml` and `.crates2.json` files.\n\nIt should be sufficient to cache the following files and directories across builds:\n\n-   `.crates.toml`\n-   `.crates2.json`\n-   `bin/`\n-   `registry/index/`\n-   `registry/cache/`\n-   `git/db/`\n\n## [Vendoring all dependencies of a project](#vendoring-all-dependencies-of-a-project)\n\nSee the [`cargo vendor`](guide/../commands/cargo-vendor.html) subcommand.\n\n## [Clearing the cache](#clearing-the-cache)\n\nIn theory, you can always remove any part of the cache and Cargo will do its best to restore sources if a crate needs them either by reextracting an archive or checking out a bare repo or by simply redownloading the sources from the web.\n\nAlternatively, the [cargo-cache](https://crates.io/crates/cargo-cache) crate provides a simple CLI tool to only clear selected parts of the cache or show sizes of its components in your command-line.\n\n## [Build cache](#build-cache)\n\nCargo stores the output of a build into the “target” directory. By default, this is the directory named `target` in the root of your [_workspace_](about:blank/appendix/glossary.html#workspace \"\"workspace\" (glossary entry)\"). To change the location, you can set the `CARGO_TARGET_DIR` [environment variable](guide/../reference/environment-variables.html), the [`build.target-dir`](about:blank/reference/config.html#buildtarget-dir) config value, or the `--target-dir` command-line flag.\n\nThe directory layout depends on whether or not you are using the `--target` flag to build for a specific platform. If `--target` is not specified, Cargo runs in a mode where it builds for the host architecture. The output goes into the root of the target directory, with each [profile](guide/../reference/profiles.html) stored in a separate subdirectory:\n\n| Directory | Description |\n| --- | --- |\n| `target/debug/` | Contains output for the `dev` profile. |\n| `target/release/` | Contains output for the `release` profile (with the `--release` option). |\n| `target/foo/` | Contains build output for the `foo` profile (with the `--profile=foo` option). |\n\nFor historical reasons, the `dev` and `test` profiles are stored in the `debug` directory, and the `release` and `bench` profiles are stored in the `release` directory. User-defined profiles are stored in a directory with the same name as the profile.\n\nWhen building for another target with `--target`, the output is placed in a directory with the name of the [target](about:blank/appendix/glossary.html#target \"\"target\" (glossary entry)\"):\n\n| Directory | Example |\n| --- | --- |\n| `target/<triple>/debug/` | `target/thumbv7em-none-eabihf/debug/` |\n| `target/<triple>/release/` | `target/thumbv7em-none-eabihf/release/` |\n\n> **Note**: When not using `--target`, this has a consequence that Cargo will share your dependencies with build scripts and proc macros. [`RUSTFLAGS`](about:blank/reference/config.html#buildrustflags) will be shared with every `rustc` invocation. With the `--target` flag, build scripts and proc macros are built separately (for the host architecture), and do not share `RUSTFLAGS`.\n\nWithin the profile directory (such as `debug` or `release`), artifacts are placed into the following directories:\n\nSome commands place their output in dedicated directories in the top level of the `target` directory:\n\nCargo also creates several other directories and files needed for the build process. Their layout is considered internal to Cargo, and is subject to change. Some of these directories are:\n\n| Directory | Description |\n| --- | --- |\n| `target/debug/deps/` | Dependencies and other artifacts. |\n| `target/debug/incremental/` | `rustc` [incremental output](about:blank/reference/profiles.html#incremental), a cache used to speed up subsequent builds. |\n| `target/debug/build/` | Output from [build scripts](guide/../reference/build-scripts.html). |\n\n## [Dep-info files](#dep-info-files)\n\nNext to each compiled artifact is a file called a “dep info” file with a `.d` suffix. This file is a Makefile-like syntax that indicates all of the file dependencies required to rebuild the artifact. These are intended to be used with external build systems so that they can detect if Cargo needs to be re-executed. The paths in the file are absolute by default. See the [`build.dep-info-basedir`](about:blank/reference/config.html#builddep-info-basedir) config option to use relative paths.\n\n```\n# Example dep-info file found in target/debug/foo.d\n/path/to/myproj/target/debug/foo: /path/to/myproj/src/lib.rs /path/to/myproj/src/main.rs\n\n```\n\nA third party tool, [sccache](https://github.com/mozilla/sccache), can be used to share built dependencies across different workspaces.\n\nTo setup `sccache`, install it with `cargo install sccache` and set `RUSTC_WRAPPER` environmental variable to `sccache` before invoking Cargo. If you use bash, it makes sense to add `export RUSTC_WRAPPER=sccache` to `.bashrc`. Alternatively, you can set [`build.rustc-wrapper`](about:blank/reference/config.html#buildrustc-wrapper) in the [Cargo configuration](guide/../reference/config.html). Refer to sccache documentation for more details.\n\n## [Cargo Reference](#cargo-reference)\n\nThe reference covers the details of various areas of Cargo.\n\n-   [Specifying Dependencies](reference/specifying-dependencies.html)\n    -   [Overriding Dependencies](reference/overriding-dependencies.html)\n-   [The Manifest Format](reference/manifest.html)\n    -   [Cargo Targets](reference/cargo-targets.html)\n-   [Workspaces](reference/workspaces.html)\n-   [Features](reference/features.html)\n    -   [Features Examples](reference/features-examples.html)\n-   [Profiles](reference/profiles.html)\n-   [Configuration](reference/config.html)\n-   [Environment Variables](reference/environment-variables.html)\n-   [Build Scripts](reference/build-scripts.html)\n    -   [Build Script Examples](reference/build-script-examples.html)\n-   [Publishing on crates.io](reference/publishing.html)\n-   [Package ID Specifications](reference/pkgid-spec.html)\n-   [Source Replacement](reference/source-replacement.html)\n-   [External Tools](reference/external-tools.html)\n-   [Registries](reference/registries.html)\n-   [Dependency Resolution](reference/resolver.html)\n-   [SemVer Compatibility](reference/semver.html)\n-   [Future incompat report](reference/future-incompat-report.html)\n-   [Reporting build timings](reference/timings.html)\n-   [Unstable Features](reference/unstable.html)\n\n## [Specifying Dependencies](#specifying-dependencies)\n\nYour crates can depend on other libraries from [crates.io](https://crates.io/) or other registries, `git` repositories, or subdirectories on your local file system. You can also temporarily override the location of a dependency — for example, to be able to test out a bug fix in the dependency that you are working on locally. You can have different dependencies for different platforms, and dependencies that are only used during development. Let’s take a look at how to do each of these.\n\n## [Specifying dependencies from crates.io](#specifying-dependencies-from-cratesio)\n\nCargo is configured to look for dependencies on [crates.io](https://crates.io/) by default. Only the name and a version string are required in this case. In [the cargo guide](reference/../guide/index.html), we specified a dependency on the `time` crate:\n\n```toml\n[dependencies]\ntime = \"0.1.12\"\n\n```\n\nThe string `\"0.1.12\"` is a version requirement. Although it looks like a specific _version_ of the `time` crate, it actually specifies a _range_ of versions and allows [SemVer](https://semver.org/) compatible updates. An update is allowed if the new version number does not modify the left-most non-zero number in the major, minor, patch grouping. In this case, if we ran `cargo update time`, cargo should update us to version `0.1.13` if it is the latest `0.1.z` release, but would not update us to `0.2.0`. If instead we had specified the version string as `1.0`, cargo should update to `1.1` if it is the latest `1.y` release, but not `2.0`. The version `0.0.x` is not considered compatible with any other version.\n\nHere are some more examples of version requirements and the versions that would be allowed with them:\n\n```notrust\n1.2.3  :=  >=1.2.3, <2.0.0\n1.2    :=  >=1.2.0, <2.0.0\n1      :=  >=1.0.0, <2.0.0\n0.2.3  :=  >=0.2.3, <0.3.0\n0.2    :=  >=0.2.0, <0.3.0\n0.0.3  :=  >=0.0.3, <0.0.4\n0.0    :=  >=0.0.0, <0.1.0\n0      :=  >=0.0.0, <1.0.0\n\n```\n\nThis compatibility convention is different from SemVer in the way it treats versions before 1.0.0. While SemVer says there is no compatibility before 1.0.0, Cargo considers `0.x.y` to be compatible with `0.x.z`, where `y ≥ z` and `x > 0`.\n\nIt is possible to further tweak the logic for selecting compatible versions using special operators as described in the [Version requirement syntax](about:blank/reference/specifying-dependencies.html#version-requirement-syntax) section.\n\nUse the default version requirement strategy, e.g. `log = \"1.2.3\"` where possible to maximize compatibility.\n\n## [Version requirement syntax](#version-requirement-syntax)\n\n### [Caret requirements](#caret-requirements)\n\n**Caret requirements** are the default version requirement strategy. This version strategy allows [SemVer](https://semver.org/) compatible updates. They are specified as version requirements with a leading caret (`^`).\n\n`^1.2.3` is an example of a caret requirement.\n\nLeaving off the caret is a simplified equivalent syntax to using caret requirements. While caret requirements are the default, it is recommended to use the simplified syntax when possible.\n\n`log = \"^1.2.3\"` is exactly equivalent to `log = \"1.2.3\"`.\n\n### [Tilde requirements](#tilde-requirements)\n\n**Tilde requirements** specify a minimal version with some ability to update. If you specify a major, minor, and patch version or only a major and minor version, only patch-level changes are allowed. If you only specify a major version, then minor- and patch-level changes are allowed.\n\n`~1.2.3` is an example of a tilde requirement.\n\n```notrust\n~1.2.3  := >=1.2.3, <1.3.0\n~1.2    := >=1.2.0, <1.3.0\n~1      := >=1.0.0, <2.0.0\n\n```\n\n### [Wildcard requirements](#wildcard-requirements)\n\n**Wildcard requirements** allow for any version where the wildcard is positioned.\n\n`*`, `1.*` and `1.2.*` are examples of wildcard requirements.\n\n```notrust\n*     := >=0.0.0\n1.*   := >=1.0.0, <2.0.0\n1.2.* := >=1.2.0, <1.3.0\n\n```\n\n> **Note**: [crates.io](https://crates.io/) does not allow bare `*` versions.\n\n### [Comparison requirements](#comparison-requirements)\n\n**Comparison requirements** allow manually specifying a version range or an exact version to depend on.\n\nHere are some examples of comparison requirements:\n\n```notrust\n>= 1.2.0\n> 1\n< 2\n= 1.2.3\n\n```\n\n### [Multiple version requirements](#multiple-version-requirements)\n\nAs shown in the examples above, multiple version requirements can be separated with a comma, e.g., `>= 1.2, < 1.5`.\n\n> **Recommendation:** When in doubt, use the default version requirement operator.\n> \n> In rare circumstances, a package with a “public dependency” (re-exports the dependency or interoperates with it in its public API) that is compatible with multiple semver-incompatible versions (e.g. only uses a simple type that hasn’t changed between releases, like an `Id`) may support users choosing which version of the “public dependency” to use. In this case, a version requirement like `\">=0.4, <2\"` may be of interest. _However_ users of the package will likely run into errors and need to manually select a version of the “public dependency” via `cargo update` if they also depend on it as Cargo might pick different versions of the “public dependency” when [resolving dependency versions](reference/resolver.html) (see [#10599](https://github.com/rust-lang/cargo/issues/10599)).\n> \n> Avoid constraining the upper bound of a version to be anything less than the next semver incompatible version (e.g. avoid `\">=2.0, <2.4\"`) as other packages in the dependency tree may require a newer version, leading to an unresolvable error (see [#9029](https://github.com/rust-lang/cargo/issues/9029)). Consider whether controlling the version in your [`Cargo.lock`](reference/../guide/cargo-toml-vs-cargo-lock.html) would be more appropriate.\n> \n> In some instances this won’t matter or the benefits might outweigh the cost, including:\n> \n> -   When no one else depends on your package e.g. it only has a `[[bin]]`\n> -   When depending on a pre-release package and wishing to avoid breaking changes then a fully specified `\"=1.2.3-alpha.3\"` might be warranted (see [#2222](https://github.com/rust-lang/cargo/issues/2222))\n> -   When a library re-exports a proc-macro but the proc-macro generates code that calls into the re-exporting library then a fully specified `=1.2.3` might be warranted to ensure the proc-macro isn’t newer than the re-exporting library and generating code that uses parts of the API that don’t exist within the current version\n\n## [Specifying dependencies from other registries](#specifying-dependencies-from-other-registries)\n\nTo specify a dependency from a registry other than [crates.io](https://crates.io/) set the `registry` key to the name of the registry to use:\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n\n```\n\nwhere `my-registry` is the registry name configured in `.cargo/config.toml` file. See the [registries documentation](reference/registries.html) for more information.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with dependencies on code published outside of [crates.io](https://crates.io/).\n\n## [Specifying dependencies from `git` repositories](#specifying-dependencies-from-git-repositories)\n\nTo depend on a library located in a `git` repository, the minimum information you need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nregex = { git = \"https://github.com/rust-lang/regex.git\" }\n\n```\n\nCargo fetches the `git` repository at that location and traverses the file tree to find `Cargo.toml` file for the requested crate anywhere inside the `git` repository. For example, `regex-lite` and `regex-syntax` are members of `rust-lang/regex` repo and can be referred to by the repo’s root URL (`https://github.com/rust-lang/regex.git`) regardless of where in the file tree they reside.\n\n```toml\nregex-lite   = { git = \"https://github.com/rust-lang/regex.git\" }\nregex-syntax = { git = \"https://github.com/rust-lang/regex.git\" }\n\n```\n\nThe above rule does not apply to [`path` dependencies](about:blank/reference/specifying-dependencies.html#specifying-path-dependencies).\n\n### [Choice of commit](#choice-of-commit)\n\nCargo assumes that we intend to use the latest commit on the default branch to build our package if we only specify the repo URL, as in the examples above.\n\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to be more specific about which commit to use. Here’s an example of using the latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nregex = { git = \"https://github.com/rust-lang/regex.git\", branch = \"next\" }\n\n```\n\nAnything that is not a branch or a tag falls under `rev` key. This can be a commit hash like `rev = \"4c59b707\"`, or a named reference exposed by the remote repository such as `rev = \"refs/pull/493/head\"`.\n\nWhat references are available for the `rev` key varies by where the repo is hosted.  \nGitHub exposes a reference to the most recent commit of every pull request as in the example above. Other git hosts may provide something equivalent under a different naming scheme.\n\n**More `git` dependency examples:**\n\n```toml\n# .git suffix can be omitted if the host accepts such URLs - both examples work the same\nregex = { git = \"https://github.com/rust-lang/regex\" }\nregex = { git = \"https://github.com/rust-lang/regex.git\" }\n\n# a commit with a particular tag\nregex = { git = \"https://github.com/rust-lang/regex.git\", tag = \"1.10.3\" }\n\n# a commit by its SHA1 hash\nregex = { git = \"https://github.com/rust-lang/regex.git\", rev = \"0c0990399270277832fbb5b91a1fa118e6f63dba\" }\n\n# HEAD commit of PR 493\nregex = { git = \"https://github.com/rust-lang/regex.git\", rev = \"refs/pull/493/head\" }\n\n# INVALID EXAMPLES\n\n# specifying the commit after # ignores the commit ID and generates a warning\nregex = { git = \"https://github.com/rust-lang/regex.git#4c59b70\" }\n\n# git and path cannot be used at the same time\nregex = { git = \"https://github.com/rust-lang/regex.git#4c59b70\", path = \"../regex\" }\n\n```\n\nCargo locks the commits of `git` dependencies in `Cargo.lock` file at the time of their addition and checks for updates only when you run `cargo update` command.\n\n### [The role of the `version` key](#the-role-of-the-version-key)\n\nThe `version` key always implies that the package is available in a registry, regardless of the presence of `git` or `path` keys.\n\nThe `version` key does _not_ affect which commit is used when Cargo retrieves the `git` dependency, but Cargo checks the version information in the dependency’s `Cargo.toml` file against the `version` key and raises an error if the check fails.\n\nIn this example, Cargo retrieves the HEAD commit of the branch called `next` from Git and checks if the crate’s version is compatible with `version = \"1.10.3\"`:\n\n```toml\n[dependencies]\nregex = { version = \"1.10.3\", git = \"https://github.com/rust-lang/regex.git\", branch = \"next\" }\n\n```\n\n`version`, `git`, and `path` keys are considered separate locations for resolving the dependency. See [Multiple locations](about:blank/reference/specifying-dependencies.html#multiple-locations) section below for detailed explanations.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with dependencies on code published outside of [crates.io](https://crates.io/) itself ([dev-dependencies](about:blank/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple locations](about:blank/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative for `git` and `path` dependencies.\n\n### [Accessing private Git repositories](#accessing-private-git-repositories)\n\nSee [Git Authentication](reference/../appendix/git-authentication.html) for help with Git authentication for private repos.\n\n## [Specifying path dependencies](#specifying-path-dependencies)\n\nOver time, our `hello_world` package from [the guide](reference/../guide/index.html) has grown significantly in size! It’s gotten to the point that we probably want to split out a separate crate for others to use. To do this Cargo supports **path dependencies** which are typically sub-crates that live within one repository. Let’s start by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and `src` folder are ready to be configured. To tell Cargo about this, open up `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found in the `hello_utils` folder, relative to the `Cargo.toml` file it’s written in.\n\nThe next `cargo build` will automatically build `hello_utils` and all of its dependencies.\n\n### [No local path traversal](#no-local-path-traversal)\n\nThe local paths must point to the exact folder with the dependency’s `Cargo.toml`. Unlike with `git` dependencies, Cargo does not traverse local paths. For example, if `regex-lite` and `regex-syntax` are members of a locally cloned `rust-lang/regex` repo, they have to be referred to by the full path:\n\n```toml\n# git key accepts the repo root URL and Cargo traverses the tree to find the crate\n[dependencies]\nregex-lite   = { git = \"https://github.com/rust-lang/regex.git\" }\nregex-syntax = { git = \"https://github.com/rust-lang/regex.git\" }\n\n# path key requires the member name to be included in the local path\n[dependencies]\nregex-lite   = { path = \"../regex/regex-lite\" }\nregex-syntax = { path = \"../regex/regex-syntax\" }\n\n```\n\n### [Local paths in published crates](#local-paths-in-published-crates)\n\nCrates that use dependencies specified with only a path are not permitted on [crates.io](https://crates.io/).\n\nIf we wanted to publish our `hello_world` crate, we would need to publish a version of `hello_utils` to [crates.io](https://crates.io/) as a separate crate and specify its version in the dependencies line of `hello_world`:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\", version = \"0.1.0\" }\n\n```\n\nThe use of `path` and `version` keys together is explained in the [Multiple locations](about:blank/reference/specifying-dependencies.html#multiple-locations) section.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with dependencies on code outside of [crates.io](https://crates.io/), except for [dev-dependencies](about:blank/reference/specifying-dependencies.html#development-dependencies). See the [Multiple locations](about:blank/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative for `git` and `path` dependencies.\n\n## [Multiple locations](#multiple-locations)\n\nIt is possible to specify both a registry version and a `git` or `path` location. The `git` or `path` dependency will be used locally (in which case the `version` is checked against the local copy), and when published to a registry like [crates.io](https://crates.io/), it will use the registry version. Other combinations are not allowed. Examples:\n\n```toml\n[dependencies]\n# Uses `my-bitflags` when used locally, and uses\n# version 1.0 from crates.io when published.\nbitflags = { path = \"my-bitflags\", version = \"1.0\" }\n\n# Uses the given git repo when used locally, and uses\n# version 1.0 from crates.io when published.\nsmallvec = { git = \"https://github.com/servo/rust-smallvec.git\", version = \"1.0\" }\n\n# N.B. that if a version doesn't match, Cargo will fail to compile!\n\n```\n\nOne example where this can be useful is when you have split up a library into multiple packages within the same workspace. You can then use `path` dependencies to point to the local packages within the workspace to use the local version during development, and then use the [crates.io](https://crates.io/) version once it is published. This is similar to specifying an [override](reference/overriding-dependencies.html), but only applies to this one dependency declaration.\n\n## [Platform specific dependencies](#platform-specific-dependencies)\n\nPlatform-specific dependencies take the same format, but are listed under a `target` section. Normally Rust-like [`#[cfg]` syntax](reference/../../reference/conditional-compilation.html) will be used to define these sections:\n\n```toml\n[target.'cfg(windows)'.dependencies]\nwinhttp = \"0.4.0\"\n\n[target.'cfg(unix)'.dependencies]\nopenssl = \"1.0.1\"\n\n[target.'cfg(target_arch = \"x86\")'.dependencies]\nnative-i686 = { path = \"native/i686\" }\n\n[target.'cfg(target_arch = \"x86_64\")'.dependencies]\nnative-x86_64 = { path = \"native/x86_64\" }\n\n```\n\nLike with Rust, the syntax here supports the `not`, `any`, and `all` operators to combine various cfg name/value pairs.\n\nIf you want to know which cfg targets are available on your platform, run `rustc --print=cfg` from the command line. If you want to know which `cfg` targets are available for another platform, such as 64-bit Windows, run `rustc --print=cfg --target=x86_64-pc-windows-msvc`.\n\nUnlike in your Rust source code, you cannot use `[target.'cfg(feature = \"fancy-feature\")'.dependencies]` to add dependencies based on optional features. Use [the `[features]` section](reference/features.html) instead:\n\n```toml\n[dependencies]\nfoo = { version = \"1.0\", optional = true }\nbar = { version = \"1.0\", optional = true }\n\n[features]\nfancy-feature = [\"foo\", \"bar\"]\n\n```\n\nThe same applies to `cfg(debug_assertions)`, `cfg(test)` and `cfg(proc_macro)`. These values will not work as expected and will always have the default value returned by `rustc --print=cfg`. There is currently no way to add dependencies based on these configuration values.\n\nIn addition to `#[cfg]` syntax, Cargo also supports listing out the full target the dependencies would apply to:\n\n```toml\n[target.x86_64-pc-windows-gnu.dependencies]\nwinhttp = \"0.4.0\"\n\n[target.i686-unknown-linux-gnu.dependencies]\nopenssl = \"1.0.1\"\n\n```\n\n### [Custom target specifications](#custom-target-specifications)\n\nIf you’re using a custom target specification (such as `--target foo/bar.json`), use the base filename without the `.json` extension:\n\n```toml\n[target.bar.dependencies]\nwinhttp = \"0.4.0\"\n\n[target.my-special-i686-platform.dependencies]\nopenssl = \"1.0.1\"\nnative = { path = \"native/i686\" }\n\n```\n\n> **Note**: Custom target specifications are not usable on the stable channel.\n\n## [Development dependencies](#development-dependencies)\n\nYou can add a `[dev-dependencies]` section to your `Cargo.toml` whose format is equivalent to `[dependencies]`:\n\n```toml\n[dev-dependencies]\ntempdir = \"0.3\"\n\n```\n\nDev-dependencies are not used when compiling a package for building, but are used for compiling tests, examples, and benchmarks.\n\nThese dependencies are _not_ propagated to other packages which depend on this package.\n\nYou can also have target-specific development dependencies by using `dev-dependencies` in the target section header instead of `dependencies`. For example:\n\n```toml\n[target.'cfg(unix)'.dev-dependencies]\nmio = \"0.0.1\"\n\n```\n\n> **Note**: When a package is published, only dev-dependencies that specify a `version` will be included in the published crate. For most use cases, dev-dependencies are not needed when published, though some users (like OS packagers) may want to run tests within a crate, so providing a `version` if possible can still be beneficial.\n\n## [Build dependencies](#build-dependencies)\n\nYou can depend on other Cargo-based crates for use in your build scripts. Dependencies are declared through the `build-dependencies` section of the manifest:\n\n```toml\n[build-dependencies]\ncc = \"1.0.3\"\n\n```\n\nYou can also have target-specific build dependencies by using `build-dependencies` in the target section header instead of `dependencies`. For example:\n\n```toml\n[target.'cfg(unix)'.build-dependencies]\ncc = \"1.0.3\"\n\n```\n\nIn this case, the dependency will only be built when the host platform matches the specified target.\n\nThe build script **does not** have access to the dependencies listed in the `dependencies` or `dev-dependencies` section. Build dependencies will likewise not be available to the package itself unless listed under the `dependencies` section as well. A package itself and its build script are built separately, so their dependencies need not coincide. Cargo is kept simpler and cleaner by using independent dependencies for independent purposes.\n\n## [Choosing features](#choosing-features)\n\nIf a package you depend on offers conditional features, you can specify which to use:\n\n```toml\n[dependencies.awesome]\nversion = \"1.3.5\"\ndefault-features = false # do not include the default features, and optionally\n                         # cherry-pick individual features\nfeatures = [\"secure-password\", \"civet\"]\n\n```\n\nMore information about features can be found in the [features chapter](about:blank/reference/features.html#dependency-features).\n\n## [Renaming dependencies in `Cargo.toml`](#renaming-dependencies-in-cargotoml)\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a dependency typically matches up to the name of the crate you import from in the code. For some projects, though, you may wish to reference the crate with a different name in the code regardless of how it’s published on crates.io. For example you may wish to:\n\n-   Avoid the need to `use foo as bar` in Rust source.\n-   Depend on multiple versions of a crate.\n-   Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section of which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project.git\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own `Cargo.toml`, so we’re explicitly using the `package` key to inform Cargo that we want the `foo` package even though we’re calling it something else locally. The `package` key, if not specified, defaults to the name of the dependency being requested.\n\nNote that if you have an optional dependency like:\n\n```toml\n[dependencies]\nbar = { version = \"0.1\", package = 'foo', optional = true }\n\n```\n\nyou’re depending on the crate `foo` from crates.io, but your crate has a `bar` feature instead of a `foo` feature. That is, names of features take after the name of the dependency, not the package name, when renamed.\n\nEnabling transitive dependencies works similarly, for example we could add the following to the above manifest:\n\n```toml\n[features]\nlog-debug = ['bar/log-debug'] # using 'foo/log-debug' would be an error!\n\n```\n\n## [Inheriting a dependency from a workspace](#inheriting-a-dependency-from-a-workspace)\n\nDependencies can be inherited from a workspace by specifying the dependency in the workspace’s [`[workspace.dependencies]`](about:blank/reference/workspaces.html#the-dependencies-table) table. After that, add it to the `[dependencies]` table with `workspace = true`.\n\nAlong with the `workspace` key, dependencies can also include these keys:\n\n-   [`optional`](about:blank/reference/features.html#optional-dependencies): Note that the`[workspace.dependencies]` table is not allowed to specify `optional`.\n-   [`features`](reference/features.html): These are additive with the features declared in the `[workspace.dependencies]`\n\nOther than `optional` and `features`, inherited dependencies cannot use any other dependency key (such as `version` or `default-features`).\n\nDependencies in the `[dependencies]`, `[dev-dependencies]`, `[build-dependencies]`, and `[target.\"...\".dependencies]` sections support the ability to reference the `[workspace.dependencies]` definition of dependencies.\n\n```toml\n[package]\nname = \"bar\"\nversion = \"0.2.0\"\n\n[dependencies]\nregex = { workspace = true, features = [\"unicode\"] }\n\n[build-dependencies]\ncc.workspace = true\n\n[dev-dependencies]\nrand = { workspace = true, optional = true }\n\n```\n\n## [Overriding Dependencies](#overriding-dependencies)\n\nThe desire to override a dependency can arise through a number of scenarios. Most of them, however, boil down to the ability to work with a crate before it’s been published to [crates.io](https://crates.io/). For example:\n\n-   A crate you’re working on is also used in a much larger application you’re working on, and you’d like to test a bug fix to the library inside of the larger application.\n-   An upstream crate you don’t work on has a new feature or a bug fix on the master branch of its git repository which you’d like to test out.\n-   You’re about to publish a new major version of your crate, but you’d like to do integration testing across an entire package to ensure the new major version works.\n-   You’ve submitted a fix to an upstream crate for a bug you found, but you’d like to immediately have your application start depending on the fixed version of the crate to avoid blocking on the bug fix getting merged.\n\nThese scenarios can be solved with the [`[patch]` manifest section](about:blank/reference/overriding-dependencies.html#the-patch-section).\n\nThis chapter walks through a few different use cases, and includes details on the different ways to override a dependency.\n\n-   Example use cases\n    -   [Testing a bugfix](about:blank/reference/overriding-dependencies.html#testing-a-bugfix)\n    -   [Working with an unpublished minor version](about:blank/reference/overriding-dependencies.html#working-with-an-unpublished-minor-version)\n        -   [Overriding repository URL](about:blank/reference/overriding-dependencies.html#overriding-repository-url)\n    -   [Prepublishing a breaking change](about:blank/reference/overriding-dependencies.html#prepublishing-a-breaking-change)\n    -   [Using `[patch]` with multiple versions](about:blank/reference/overriding-dependencies.html#using-patch-with-multiple-versions)\n-   Reference\n    -   [The `[patch]` section](about:blank/reference/overriding-dependencies.html#the-patch-section)\n    -   [The `[replace]` section](about:blank/reference/overriding-dependencies.html#the-replace-section)\n    -   [`paths` overrides](about:blank/reference/overriding-dependencies.html#paths-overrides)\n\n> **Note**: See also specifying a dependency with [multiple locations](about:blank/reference/specifying-dependencies.html#multiple-locations), which can be used to override the source for a single dependency declaration in a local package.\n\n## [Testing a bugfix](#testing-a-bugfix)\n\nLet’s say you’re working with the [`uuid` crate](https://crates.io/crates/uuid) but while you’re working on it you discover a bug. You are, however, quite enterprising so you decide to also try to fix the bug! Originally your manifest will look like:\n\n```toml\n[package]\nname = \"my-library\"\nversion = \"0.1.0\"\n\n[dependencies]\nuuid = \"1.0\"\n\n```\n\nFirst thing we’ll do is to clone the [`uuid` repository](https://github.com/uuid-rs/uuid) locally via:\n\n```console\n$ git clone https://github.com/uuid-rs/uuid.git\n\n```\n\nNext we’ll edit the manifest of `my-library` to contain:\n\n```toml\n[patch.crates-io]\nuuid = { path = \"../path/to/uuid\" }\n\n```\n\nHere we declare that we’re _patching_ the source `crates-io` with a new dependency. This will effectively add the local checked out version of `uuid` to the crates.io registry for our local package.\n\nNext up we need to ensure that our lock file is updated to use this new version of `uuid` so our package uses the locally checked out copy instead of one from crates.io. The way `[patch]` works is that it’ll load the dependency at `../path/to/uuid` and then whenever crates.io is queried for versions of `uuid` it’ll _also_ return the local version.\n\nThis means that the version number of the local checkout is significant and will affect whether the patch is used. Our manifest declared `uuid = \"1.0\"` which means we’ll only resolve to `>= 1.0.0, < 2.0.0`, and Cargo’s greedy resolution algorithm also means that we’ll resolve to the maximum version within that range. Typically this doesn’t matter as the version of the git repository will already be greater or match the maximum version published on crates.io, but it’s important to keep this in mind!\n\nIn any case, typically all you need to do now is:\n\n```console\n$ cargo build\n   Compiling uuid v1.0.0 (.../uuid)\n   Compiling my-library v0.1.0 (.../my-library)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n\n```\n\nAnd that’s it! You’re now building with the local version of `uuid` (note the path in parentheses in the build output). If you don’t see the local path version getting built then you may need to run `cargo update uuid --precise $version` where `$version` is the version of the locally checked out copy of `uuid`.\n\nOnce you’ve fixed the bug you originally found the next thing you’ll want to do is to likely submit that as a pull request to the `uuid` crate itself. Once you’ve done this then you can also update the `[patch]` section. The listing inside of `[patch]` is just like the `[dependencies]` section, so once your pull request is merged you could change your `path` dependency to:\n\n```toml\n[patch.crates-io]\nuuid = { git = 'https://github.com/uuid-rs/uuid.git' }\n\n```\n\n## [Working with an unpublished minor version](#working-with-an-unpublished-minor-version)\n\nLet’s now shift gears a bit from bug fixes to adding features. While working on `my-library` you discover that a whole new feature is needed in the `uuid` crate. You’ve implemented this feature, tested it locally above with `[patch]`, and submitted a pull request. Let’s go over how you continue to use and test it before it’s actually published.\n\nLet’s also say that the current version of `uuid` on crates.io is `1.0.0`, but since then the master branch of the git repository has updated to `1.0.1`. This branch includes your new feature you submitted previously. To use this repository we’ll edit our `Cargo.toml` to look like\n\n```toml\n[package]\nname = \"my-library\"\nversion = \"0.1.0\"\n\n[dependencies]\nuuid = \"1.0.1\"\n\n[patch.crates-io]\nuuid = { git = 'https://github.com/uuid-rs/uuid.git' }\n\n```\n\nNote that our local dependency on `uuid` has been updated to `1.0.1` as it’s what we’ll actually require once the crate is published. This version doesn’t exist on crates.io, though, so we provide it with the `[patch]` section of the manifest.\n\nNow when our library is built it’ll fetch `uuid` from the git repository and resolve to 1.0.1 inside the repository instead of trying to download a version from crates.io. Once 1.0.1 is published on crates.io the `[patch]` section can be deleted.\n\nIt’s also worth noting that `[patch]` applies _transitively_. Let’s say you use `my-library` in a larger package, such as:\n\n```toml\n[package]\nname = \"my-binary\"\nversion = \"0.1.0\"\n\n[dependencies]\nmy-library = { git = 'https://example.com/git/my-library' }\nuuid = \"1.0\"\n\n[patch.crates-io]\nuuid = { git = 'https://github.com/uuid-rs/uuid.git' }\n\n```\n\nRemember that `[patch]` is applicable _transitively_ but can only be defined at the _top level_ so we consumers of `my-library` have to repeat the `[patch]` section if necessary. Here, though, the new `uuid` crate applies to _both_ our dependency on `uuid` and the `my-library -> uuid` dependency. The `uuid` crate will be resolved to one version for this entire crate graph, 1.0.1, and it’ll be pulled from the git repository.\n\n### [Overriding repository URL](#overriding-repository-url)\n\nIn case the dependency you want to override isn’t loaded from `crates.io`, you’ll have to change a bit how you use `[patch]`. For example, if the dependency is a git dependency, you can override it to a local path with:\n\n```toml\n[patch.\"https://github.com/your/repository\"]\nmy-library = { path = \"../my-library/path\" }\n\n```\n\nAnd that’s it!\n\n## [Prepublishing a breaking change](#prepublishing-a-breaking-change)\n\nLet’s take a look at working with a new major version of a crate, typically accompanied with breaking changes. Sticking with our previous crates, this means that we’re going to be creating version 2.0.0 of the `uuid` crate. After we’ve submitted all changes upstream we can update our manifest for `my-library` to look like:\n\n```toml\n[dependencies]\nuuid = \"2.0\"\n\n[patch.crates-io]\nuuid = { git = \"https://github.com/uuid-rs/uuid.git\", branch = \"2.0.0\" }\n\n```\n\nAnd that’s it! Like with the previous example the 2.0.0 version doesn’t actually exist on crates.io but we can still put it in through a git dependency through the usage of the `[patch]` section. As a thought exercise let’s take another look at the `my-binary` manifest from above again as well:\n\n```toml\n[package]\nname = \"my-binary\"\nversion = \"0.1.0\"\n\n[dependencies]\nmy-library = { git = 'https://example.com/git/my-library' }\nuuid = \"1.0\"\n\n[patch.crates-io]\nuuid = { git = 'https://github.com/uuid-rs/uuid.git', branch = '2.0.0' }\n\n```\n\nNote that this will actually resolve to two versions of the `uuid` crate. The `my-binary` crate will continue to use the 1.x.y series of the `uuid` crate but the `my-library` crate will use the `2.0.0` version of `uuid`. This will allow you to gradually roll out breaking changes to a crate through a dependency graph without being forced to update everything all at once.\n\n## [Using `[patch]` with multiple versions](#using-patch-with-multiple-versions)\n\nYou can patch in multiple versions of the same crate with the `package` key used to rename dependencies. For example let’s say that the `serde` crate has a bugfix that we’d like to use to its `1.*` series but we’d also like to prototype using a `2.0.0` version of serde we have in our git repository. To configure this we’d do:\n\n```toml\n[patch.crates-io]\nserde = { git = 'https://github.com/serde-rs/serde.git' }\nserde2 = { git = 'https://github.com/example/serde.git', package = 'serde', branch = 'v2' }\n\n```\n\nThe first `serde = ...` directive indicates that serde `1.*` should be used from the git repository (pulling in the bugfix we need) and the second `serde2 = ...` directive indicates that the `serde` package should also be pulled from the `v2` branch of `https://github.com/example/serde`. We’re assuming here that `Cargo.toml` on that branch mentions version `2.0.0`.\n\nNote that when using the `package` key the `serde2` identifier here is actually ignored. We simply need a unique name which doesn’t conflict with other patched crates.\n\n## [The `[patch]` section](#the-patch-section)\n\nThe `[patch]` section of `Cargo.toml` can be used to override dependencies with other copies. The syntax is similar to the [`[dependencies]`](reference/specifying-dependencies.html) section:\n\n```toml\n[patch.crates-io]\nfoo = { git = 'https://github.com/example/foo.git' }\nbar = { path = 'my/local/bar' }\n\n[dependencies.baz]\ngit = 'https://github.com/example/baz.git'\n\n[patch.'https://github.com/example/baz']\nbaz = { git = 'https://github.com/example/patched-baz.git', branch = 'my-branch' }\n\n```\n\n> **Note**: The `[patch]` table can also be specified as a [configuration option](reference/config.html), such as in a `.cargo/config.toml` file or a CLI option like `--config 'patch.crates-io.rand.path=\"rand\"'`. This can be useful for local-only changes that you don’t want to commit, or temporarily testing a patch.\n\nThe `[patch]` table is made of dependency-like sub-tables. Each key after `[patch]` is a URL of the source that is being patched, or the name of a registry. The name `crates-io` may be used to override the default registry [crates.io](https://crates.io/). The first `[patch]` in the example above demonstrates overriding [crates.io](https://crates.io/), and the second `[patch]` demonstrates overriding a git source.\n\nEach entry in these tables is a normal dependency specification, the same as found in the `[dependencies]` section of the manifest. The dependencies listed in the `[patch]` section are resolved and used to patch the source at the URL specified. The above manifest snippet patches the `crates-io` source (e.g. crates.io itself) with the `foo` crate and `bar` crate. It also patches the `https://github.com/example/baz` source with a `my-branch` that comes from elsewhere.\n\nSources can be patched with versions of crates that do not exist, and they can also be patched with versions of crates that already exist. If a source is patched with a crate version that already exists in the source, then the source’s original crate is replaced.\n\nCargo only looks at the patch settings in the `Cargo.toml` manifest at the root of the workspace. Patch settings defined in dependencies will be ignored.\n\n## [The `[replace]` section](#the-replace-section)\n\n> **Note**: `[replace]` is deprecated. You should use the [`[patch]`](about:blank/reference/overriding-dependencies.html#the-patch-section) table instead.\n\nThis section of Cargo.toml can be used to override dependencies with other copies. The syntax is similar to the `[dependencies]` section:\n\n```toml\n[replace]\n\"foo:0.1.0\" = { git = 'https://github.com/example/foo.git' }\n\"bar:1.0.2\" = { path = 'my/local/bar' }\n\n```\n\nEach key in the `[replace]` table is a [package ID specification](reference/pkgid-spec.html), which allows arbitrarily choosing a node in the dependency graph to override (the 3-part version number is required). The value of each key is the same as the `[dependencies]` syntax for specifying dependencies, except that you can’t specify features. Note that when a crate is overridden the copy it’s overridden with must have both the same name and version, but it can come from a different source (e.g., git or a local path).\n\nCargo only looks at the replace settings in the `Cargo.toml` manifest at the root of the workspace. Replace settings defined in dependencies will be ignored.\n\n## [`paths` overrides](#paths-overrides)\n\nSometimes you’re only temporarily working on a crate and you don’t want to have to modify `Cargo.toml` like with the `[patch]` section above. For this use case Cargo offers a much more limited version of overrides called **path overrides**.\n\nPath overrides are specified through [`.cargo/config.toml`](reference/config.html) instead of `Cargo.toml`. Inside of `.cargo/config.toml` you’ll specify a key called `paths`:\n\n```toml\npaths = [\"/path/to/uuid\"]\n\n```\n\nThis array should be filled with directories that contain a `Cargo.toml`. In this instance, we’re just adding `uuid`, so it will be the only one that’s overridden. This path can be either absolute or relative to the directory that contains the `.cargo` folder.\n\nPath overrides are more restricted than the `[patch]` section, however, in that they cannot change the structure of the dependency graph. When a path replacement is used then the previous set of dependencies must all match exactly to the new `Cargo.toml` specification. For example this means that path overrides cannot be used to test out adding a dependency to a crate, instead `[patch]` must be used in that situation. As a result usage of a path override is typically isolated to quick bug fixes rather than larger changes.\n\n> **Note**: using a local configuration to override paths will only work for crates that have been published to [crates.io](https://crates.io/). You cannot use this feature to tell Cargo how to find local unpublished crates.\n\n## [The Manifest Format](#the-manifest-format)\n\nThe `Cargo.toml` file for each package is called its _manifest_. It is written in the [TOML](https://toml.io/) format. It contains metadata that is needed to compile the package. Checkout the `cargo locate-project` section for more detail on how cargo finds the manifest file.\n\nEvery manifest file consists of the following sections:\n\n-   [`cargo-features`](reference/unstable.html) — Unstable, nightly-only features.\n-   [`[package]`](about:blank/reference/manifest.html#the-package-section) — Defines a package.\n    -   [`name`](about:blank/reference/manifest.html#the-name-field) — The name of the package.\n    -   [`version`](about:blank/reference/manifest.html#the-version-field) — The version of the package.\n    -   [`authors`](about:blank/reference/manifest.html#the-authors-field) — The authors of the package.\n    -   [`edition`](about:blank/reference/manifest.html#the-edition-field) — The Rust edition.\n    -   [`rust-version`](about:blank/reference/manifest.html#the-rust-version-field) — The minimal supported Rust version.\n    -   [`description`](about:blank/reference/manifest.html#the-description-field) — A description of the package.\n    -   [`documentation`](about:blank/reference/manifest.html#the-documentation-field) — URL of the package documentation.\n    -   [`readme`](about:blank/reference/manifest.html#the-readme-field) — Path to the package’s README file.\n    -   [`homepage`](about:blank/reference/manifest.html#the-homepage-field) — URL of the package homepage.\n    -   [`repository`](about:blank/reference/manifest.html#the-repository-field) — URL of the package source repository.\n    -   [`license`](about:blank/reference/manifest.html#the-license-and-license-file-fields) — The package license.\n    -   [`license-file`](about:blank/reference/manifest.html#the-license-and-license-file-fields) — Path to the text of the license.\n    -   [`keywords`](about:blank/reference/manifest.html#the-keywords-field) — Keywords for the package.\n    -   [`categories`](about:blank/reference/manifest.html#the-categories-field) — Categories of the package.\n    -   [`workspace`](about:blank/reference/manifest.html#the-workspace-field) — Path to the workspace for the package.\n    -   [`build`](about:blank/reference/manifest.html#the-build-field) — Path to the package build script.\n    -   [`links`](about:blank/reference/manifest.html#the-links-field) — Name of the native library the package links with.\n    -   [`exclude`](about:blank/reference/manifest.html#the-exclude-and-include-fields) — Files to exclude when publishing.\n    -   [`include`](about:blank/reference/manifest.html#the-exclude-and-include-fields) — Files to include when publishing.\n    -   [`publish`](about:blank/reference/manifest.html#the-publish-field) — Can be used to prevent publishing the package.\n    -   [`metadata`](about:blank/reference/manifest.html#the-metadata-table) — Extra settings for external tools.\n    -   [`default-run`](about:blank/reference/manifest.html#the-default-run-field) — The default binary to run by [`cargo run`](reference/../commands/cargo-run.html).\n    -   [`autobins`](about:blank/reference/cargo-targets.html#target-auto-discovery) — Disables binary auto discovery.\n    -   [`autoexamples`](about:blank/reference/cargo-targets.html#target-auto-discovery) — Disables example auto discovery.\n    -   [`autotests`](about:blank/reference/cargo-targets.html#target-auto-discovery) — Disables test auto discovery.\n    -   [`autobenches`](about:blank/reference/cargo-targets.html#target-auto-discovery) — Disables bench auto discovery.\n    -   [`resolver`](about:blank/reference/resolver.html#resolver-versions) — Sets the dependency resolver to use.\n-   Target tables: (see [configuration](about:blank/reference/cargo-targets.html#configuring-a-target) for settings)\n    -   [`[lib]`](about:blank/reference/cargo-targets.html#library) — Library target settings.\n    -   [`[[bin]]`](about:blank/reference/cargo-targets.html#binaries) — Binary target settings.\n    -   [`[[example]]`](about:blank/reference/cargo-targets.html#examples) — Example target settings.\n    -   [`[[test]]`](about:blank/reference/cargo-targets.html#tests) — Test target settings.\n    -   [`[[bench]]`](about:blank/reference/cargo-targets.html#benchmarks) — Benchmark target settings.\n-   Dependency tables:\n    -   [`[dependencies]`](reference/specifying-dependencies.html) — Package library dependencies.\n    -   [`[dev-dependencies]`](about:blank/reference/specifying-dependencies.html#development-dependencies) — Dependencies for examples, tests, and benchmarks.\n    -   [`[build-dependencies]`](about:blank/reference/specifying-dependencies.html#build-dependencies) — Dependencies for build scripts.\n    -   [`[target]`](about:blank/reference/specifying-dependencies.html#platform-specific-dependencies) — Platform-specific dependencies.\n-   [`[badges]`](about:blank/reference/manifest.html#the-badges-section) — Badges to display on a registry.\n-   [`[features]`](reference/features.html) — Conditional compilation features.\n-   [`[lints]`](about:blank/reference/manifest.html#the-lints-section) — Configure linters for this package.\n-   [`[patch]`](about:blank/reference/overriding-dependencies.html#the-patch-section) — Override dependencies.\n-   [`[replace]`](about:blank/reference/overriding-dependencies.html#the-replace-section) — Override dependencies (deprecated).\n-   [`[profile]`](reference/profiles.html) — Compiler settings and optimizations.\n-   [`[workspace]`](reference/workspaces.html) — The workspace definition.\n\n## [The `[package]` section](#the-package-section)\n\nThe first section in a `Cargo.toml` is `[package]`.\n\n```toml\n[package]\nname = \"hello_world\" # the name of the package\nversion = \"0.1.0\"    # the current version, obeying semver\nauthors = [\"Alice <a@example.com>\", \"Bob <b@example.com>\"]\n\n```\n\nThe only field required by Cargo is [`name`](about:blank/reference/manifest.html#the-name-field). If publishing to a registry, the registry may require additional fields. See the notes below and [the publishing chapter](reference/publishing.html) for requirements for publishing to [crates.io](https://crates.io/).\n\n### [The `name` field](#the-name-field)\n\nThe package name is an identifier used to refer to the package. It is used when listed as a dependency in another package, and as the default name of inferred lib and bin targets.\n\nThe name must use only [alphanumeric](about:blank/std/primitive.char.html#method.is_alphanumeric) characters or `-` or `_`, and cannot be empty.\n\nNote that [`cargo new`](reference/../commands/cargo-new.html) and [`cargo init`](reference/../commands/cargo-init.html) impose some additional restrictions on the package name, such as enforcing that it is a valid Rust identifier and not a keyword. [crates.io](https://crates.io/) imposes even more restrictions, such as:\n\n-   Only ASCII characters are allowed.\n-   Do not use reserved names.\n-   Do not use special Windows names such as “nul”.\n-   Use a maximum of 64 characters of length.\n\n### [The `version` field](#the-version-field)\n\nCargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n-   Before you reach 1.0.0, anything goes, but if you make breaking changes, increment the minor version. In Rust, breaking changes include adding fields to structs or variants to enums.\n-   After 1.0.0, only make breaking changes when you increment the major version. Don’t break the build.\n-   After 1.0.0, don’t add any new public API (no new `pub` anything) in patch-level versions. Always increment the minor version if you add any new `pub` structs, traits, fields, types, functions, methods or anything else.\n-   Use version numbers with three numeric parts such as 1.0.0 rather than 1.0.\n\nSee the [Resolver](reference/resolver.html) chapter for more information on how Cargo uses versions to resolve dependencies, and for guidelines on setting your own version. See the [SemVer compatibility](reference/semver.html) chapter for more details on exactly what constitutes a breaking change.\n\nThis field is optional and defaults to `0.0.0`. The field is required for publishing packages.\n\nThe optional `authors` field lists in an array the people or organizations that are considered the “authors” of the package. The exact meaning is open to interpretation — it may list the original or primary authors, current maintainers, or owners of the package. An optional email address may be included within angled brackets at the end of each author entry.\n\n```toml\n[package]\n# ...\nauthors = [\"Graydon Hoare\", \"Fnu Lnu <no-reply@rust-lang.org>\"]\n\n```\n\nThis field is only surfaced in package metadata and in the `CARGO_PKG_AUTHORS` environment variable within `build.rs`. It is not displayed in the [crates.io](https://crates.io/) user interface.\n\n> **Warning**: Package manifests cannot be changed once published, so this field cannot be changed or removed in already-published versions of a package.\n\n### [The `edition` field](#the-edition-field)\n\nThe `edition` key is an optional key that affects which [Rust Edition](reference/../../edition-guide/index.html) your package is compiled with. Setting the `edition` key in `[package]` will affect all targets/crates in the package, including test suites, benchmarks, binaries, examples, etc.\n\n```toml\n[package]\n# ...\nedition = '2021'\n\n```\n\nMost manifests have the `edition` field filled in automatically by [`cargo new`](reference/../commands/cargo-new.html) with the latest stable edition. By default `cargo new` creates a manifest with the 2021 edition currently.\n\nIf the `edition` field is not present in `Cargo.toml`, then the 2015 edition is assumed for backwards compatibility. Note that all manifests created with [`cargo new`](reference/../commands/cargo-new.html) will not use this historical fallback because they will have `edition` explicitly specified to a newer value.\n\n### [The `rust-version` field](#the-rust-version-field)\n\nThe `rust-version` field is an optional key that tells cargo what version of the Rust language and compiler your package can be compiled with. If the currently selected version of the Rust compiler is older than the stated version, cargo will exit with an error, telling the user what version is required.\n\nThe first version of Cargo that supports this field was released with Rust 1.56.0. In older releases, the field will be ignored, and Cargo will display a warning.\n\n```toml\n[package]\n# ...\nrust-version = \"1.56\"\n\n```\n\nThe Rust version must be a bare version number with two or three components; it cannot include semver operators or pre-release identifiers. Compiler pre-release identifiers such as -nightly will be ignored while checking the Rust version. The `rust-version` must be equal to or newer than the version that first introduced the configured `edition`.\n\nThe `rust-version` may be ignored using the `--ignore-rust-version` option.\n\nSetting the `rust-version` key in `[package]` will affect all targets/crates in the package, including test suites, benchmarks, binaries, examples, etc.\n\nTo find the minimum `rust-version` compatible with your project, you can use third-party tools like [`cargo-msrv`](https://crates.io/crates/cargo-msrv).\n\nWhen used on packages that get published, we recommend [verifying the `rust-version`](about:blank/guide/continuous-integration.html#verifying-rust-version).\n\n### [The `description` field](#the-description-field)\n\nThe description is a short blurb about the package. [crates.io](https://crates.io/) will display this with your package. This should be plain text (not Markdown).\n\n```toml\n[package]\n# ...\ndescription = \"A short description of my package\"\n\n```\n\n> **Note**: [crates.io](https://crates.io/) requires the `description` to be set.\n\n### [The `documentation` field](#the-documentation-field)\n\nThe `documentation` field specifies a URL to a website hosting the crate’s documentation. If no URL is specified in the manifest file, [crates.io](https://crates.io/) will automatically link your crate to the corresponding [docs.rs](https://docs.rs/) page when the documentation has been built and is available (see [docs.rs queue](https://docs.rs/releases/queue)).\n\n```toml\n[package]\n# ...\ndocumentation = \"https://docs.rs/bitflags\"\n\n```\n\n### [The `readme` field](#the-readme-field)\n\nThe `readme` field should be the path to a file in the package root (relative to this `Cargo.toml`) that contains general information about the package. This file will be transferred to the registry when you publish. [crates.io](https://crates.io/) will interpret it as Markdown and render it on the crate’s page.\n\n```toml\n[package]\n# ...\nreadme = \"README.md\"\n\n```\n\nIf no value is specified for this field, and a file named `README.md`, `README.txt` or `README` exists in the package root, then the name of that file will be used. You can suppress this behavior by setting this field to `false`. If the field is set to `true`, a default value of `README.md` will be assumed.\n\n### [The `homepage` field](#the-homepage-field)\n\nThe `homepage` field should be a URL to a site that is the home page for your package.\n\n```toml\n[package]\n# ...\nhomepage = \"https://serde.rs\"\n\n```\n\nA value should only be set for `homepage` if there is a dedicated website for the crate other than the source repository or API documentation. Do not make `homepage` redundant with either the `documentation` or `repository` values.\n\n### [The `repository` field](#the-repository-field)\n\nThe `repository` field should be a URL to the source repository for your package.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo\"\n\n```\n\n### [The `license` and `license-file` fields](#the-license-and-license-file-fields)\n\nThe `license` field contains the name of the software license that the package is released under. The `license-file` field contains the path to a file containing the text of the license (relative to this `Cargo.toml`).\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.3 license expression](https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions/). The name must be a known license from the [SPDX license list 3.20](https://github.com/spdx/license-list-data/tree/v3.20). See the [SPDX site](https://spdx.org/) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple licenses.[1](#slash)\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates the user must comply with both licenses simultaneously. The `WITH` operator indicates a license with a special exception. Some examples:\n\n-   `MIT OR Apache-2.0`\n-   `LGPL-2.1-only AND MIT AND BSD-2-Clause`\n-   `GPL-2.0-or-later WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may be specified in lieu of the `license` field.\n\n```toml\n[package]\n# ...\nlicense-file = \"LICENSE.txt\"\n\n```\n\n> **Note**: [crates.io](https://crates.io/) requires either `license` or `license-file` to be set.\n\n### [The `keywords` field](#the-keywords-field)\n\nThe `keywords` field is an array of strings that describe this package. This can help when searching for the package on a registry, and you may choose any words that would help someone find this crate.\n\n```toml\n[package]\n# ...\nkeywords = [\"gamedev\", \"graphics\"]\n\n```\n\n> **Note**: [crates.io](https://crates.io/) allows a maximum of 5 keywords. Each keyword must be ASCII text, have at most 20 characters, start with an alphanumeric character, and only contain letters, numbers, `_`, `-` or `+`.\n\n### [The `categories` field](#the-categories-field)\n\nThe `categories` field is an array of strings of the categories this package belongs to.\n\n```toml\ncategories = [\"command-line-utilities\", \"development-tools::cargo-plugins\"]\n\n```\n\n> **Note**: [crates.io](https://crates.io/) has a maximum of 5 categories. Each category should match one of the strings available at [https://crates.io/category\\_slugs](https://crates.io/category_slugs), and must match exactly.\n\n### [The `workspace` field](#the-workspace-field)\n\nThe `workspace` field can be used to configure the workspace that this package will be a member of. If not specified this will be inferred as the first Cargo.toml with `[workspace]` upwards in the filesystem. Setting this is useful if the member is not inside a subdirectory of the workspace root.\n\n```toml\n[package]\n# ...\nworkspace = \"path/to/workspace/root\"\n\n```\n\nThis field cannot be specified if the manifest already has a `[workspace]` table defined. That is, a crate cannot both be a root crate in a workspace (contain `[workspace]`) and also be a member crate of another workspace (contain `package.workspace`).\n\nFor more information, see the [workspaces chapter](reference/workspaces.html).\n\n### [The `build` field](#the-build-field)\n\nThe `build` field specifies a file in the package root which is a [build script](reference/build-scripts.html) for building native code. More information can be found in the [build script guide](reference/build-scripts.html).\n\n```toml\n[package]\n# ...\nbuild = \"build.rs\"\n\n```\n\nThe default is `\"build.rs\"`, which loads the script from a file named `build.rs` in the root of the package. Use `build = \"custom_build_name.rs\"` to specify a path to a different file or `build = false` to disable automatic detection of the build script.\n\n### [The `links` field](#the-links-field)\n\nThe `links` field specifies the name of a native library that is being linked to. More information can be found in the [`links`](about:blank/reference/build-scripts.html#the-links-manifest-key) section of the build script guide.\n\nFor example, a crate that links a native library called “git2” (e.g. `libgit2.a` on Linux) may specify:\n\n```toml\n[package]\n# ...\nlinks = \"git2\"\n\n```\n\n### [The `exclude` and `include` fields](#the-exclude-and-include-fields)\n\nThe `exclude` and `include` fields can be used to explicitly specify which files are included when packaging a project to be [published](reference/publishing.html), and certain kinds of change tracking (described below). The patterns specified in the `exclude` field identify a set of files that are not included, and the patterns in `include` specify files that are explicitly included. You may run [`cargo package --list`](reference/../commands/cargo-package.html) to verify which files will be included in the package.\n\n```toml\n[package]\n# ...\nexclude = [\"/ci\", \"images/\", \".*\"]\n\n```\n\n```toml\n[package]\n# ...\ninclude = [\"/src\", \"COPYRIGHT\", \"/examples\", \"!/examples/big_example\"]\n\n```\n\nThe default if neither field is specified is to include all files from the root of the package, except for the exclusions listed below.\n\nIf `include` is not specified, then the following files will be excluded:\n\n-   If the package is not in a git repository, all “hidden” files starting with a dot will be skipped.\n-   If the package is in a git repository, any files that are ignored by the [gitignore](https://git-scm.com/docs/gitignore) rules of the repository and global git configuration will be skipped.\n\nRegardless of whether `exclude` or `include` is specified, the following files are always excluded:\n\n-   Any sub-packages will be skipped (any subdirectory that contains a `Cargo.toml` file).\n-   A directory named `target` in the root of the package will be skipped.\n\nThe following files are always included:\n\n-   The `Cargo.toml` file of the package itself is always included, it does not need to be listed in `include`.\n-   A minimized `Cargo.lock` is automatically included if the package contains a binary or example target, see [`cargo package`](reference/../commands/cargo-package.html) for more information.\n-   If a [`license-file`](about:blank/reference/manifest.html#the-license-and-license-file-fields) is specified, it is always included.\n\nThe options are mutually exclusive; setting `include` will override an `exclude`. If you need to have exclusions to a set of `include` files, use the `!` operator described below.\n\nThe patterns should be [gitignore](https://git-scm.com/docs/gitignore)\\-style patterns. Briefly:\n\n-   `foo` matches any file or directory with the name `foo` anywhere in the package. This is equivalent to the pattern `**/foo`.\n-   `/foo` matches any file or directory with the name `foo` only in the root of the package.\n-   `foo/` matches any _directory_ with the name `foo` anywhere in the package.\n-   Common glob patterns like `*`, `?`, and `[]` are supported:\n    -   `*` matches zero or more characters except `/`. For example, `*.html` matches any file or directory with the `.html` extension anywhere in the package.\n    -   `?` matches any character except `/`. For example, `foo?` matches `food`, but not `foo`.\n    -   `[]` allows for matching a range of characters. For example, `[ab]` matches either `a` or `b`. `[a-z]` matches letters a through z.\n-   `**/` prefix matches in any directory. For example, `**/foo/bar` matches the file or directory `bar` anywhere that is directly under directory `foo`.\n-   `/**` suffix matches everything inside. For example, `foo/**` matches all files inside directory `foo`, including all files in subdirectories below `foo`.\n-   `/**/` matches zero or more directories. For example, `a/**/b` matches `a/b`, `a/x/b`, `a/x/y/b`, and so on.\n-   `!` prefix negates a pattern. For example, a pattern of `src/*.rs` and `!foo.rs` would match all files with the `.rs` extension inside the `src` directory, except for any file named `foo.rs`.\n\nThe include/exclude list is also used for change tracking in some situations. For targets built with `rustdoc`, it is used to determine the list of files to track to determine if the target should be rebuilt. If the package has a [build script](reference/build-scripts.html) that does not emit any `rerun-if-*` directives, then the include/exclude list is used for tracking if the build script should be re-run if any of those files change.\n\n### [The `publish` field](#the-publish-field)\n\nThe `publish` field can be used to control which registries names the package may be published to:\n\n```toml\n[package]\n# ...\npublish = [\"some-registry-name\"]\n\n```\n\nTo prevent a package from being published to a registry (like crates.io) by mistake, for instance to keep a package private in a company, you can omit the [`version`](about:blank/reference/manifest.html#the-version-field) field. If you’d like to be more explicit, you can disable publishing:\n\n```toml\n[package]\n# ...\npublish = false\n\n```\n\nIf publish array contains a single registry, `cargo publish` command will use it when `--registry` flag is not specified.\n\n### [The `metadata` table](#the-metadata-table)\n\nCargo by default will warn about unused keys in `Cargo.toml` to assist in detecting typos and such. The `package.metadata` table, however, is completely ignored by Cargo and will not be warned about. This section can be used for tools which would like to store package configuration in `Cargo.toml`. For example:\n\n```toml\n[package]\nname = \"...\"\n# ...\n\n# Metadata used when generating an Android APK, for example.\n[package.metadata.android]\npackage-name = \"my-awesome-android-app\"\nassets = \"path/to/static\"\n\n```\n\nYou’ll need to look in the documentation for your tool to see how to use this field. For Rust Projects that use `package.metadata` tables, see:\n\n-   [docs.rs](https://docs.rs/about/metadata)\n\nThere is a similar table at the workspace level at [`workspace.metadata`](about:blank/reference/workspaces.html#the-metadata-table). While cargo does not specify a format for the content of either of these tables, it is suggested that external tools may wish to use them in a consistent fashion, such as referring to the data in `workspace.metadata` if data is missing from `package.metadata`, if that makes sense for the tool in question.\n\n### [The `default-run` field](#the-default-run-field)\n\nThe `default-run` field in the `[package]` section of the manifest can be used to specify a default binary picked by [`cargo run`](reference/../commands/cargo-run.html). For example, when there is both `src/bin/a.rs` and `src/bin/b.rs`:\n\n```toml\n[package]\ndefault-run = \"a\"\n\n```\n\n## [The `[lints]` section](#the-lints-section)\n\nOverride the default level of lints from different tools by assigning them to a new level in a table, for example:\n\n```toml\n[lints.rust]\nunsafe_code = \"forbid\"\n\n```\n\nThis is short-hand for:\n\n```toml\n[lints.rust]\nunsafe_code = { level = \"forbid\", priority = 0 }\n\n```\n\n`level` corresponds to the [lint levels](https://doc.rust-lang.org/rustc/lints/levels.html) in `rustc`:\n\n-   `forbid`\n-   `deny`\n-   `warn`\n-   `allow`\n\n`priority` is a signed integer that controls which lints or lint groups override other lint groups:\n\n-   lower (particularly negative) numbers have lower priority, being overridden by higher numbers, and show up first on the command-line to tools like `rustc`\n\nTo know which table under `[lints]` a particular lint belongs under, it is the part before `::` in the lint name. If there isn’t a `::`, then the tool is `rust`. For example a warning about `unsafe_code` would be `lints.rust.unsafe_code` but a lint about `clippy::enum_glob_use` would be `lints.clippy.enum_glob_use`.\n\nFor example:\n\n```toml\n[lints.rust]\nunsafe_code = \"forbid\"\n\n[lints.clippy]\nenum_glob_use = \"deny\"\n\n```\n\nGenerally, these will only affect local development of the current package. Cargo only applies these to the current package and not to dependencies. As for dependents, Cargo suppresses lints from non-path dependencies with features like [`--cap-lints`](about:blank/rustc/lints/levels.html#capping-lints).\n\n## [The `[badges]` section](#the-badges-section)\n\nThe `[badges]` section is for specifying status badges that can be displayed on a registry website when the package is published.\n\n> Note: [crates.io](https://crates.io/) previously displayed badges next to a crate on its website, but that functionality has been removed. Packages should place badges in its README file which will be displayed on [crates.io](https://crates.io/) (see [the `readme` field](about:blank/reference/manifest.html#the-readme-field)).\n\n```toml\n[badges]\n# The `maintenance` table indicates the status of the maintenance of\n# the crate. This may be used by a registry, but is currently not\n# used by crates.io. See https://github.com/rust-lang/crates.io/issues/2437\n# and https://github.com/rust-lang/crates.io/issues/2438 for more details.\n#\n# The `status` field is required. Available options are:\n# - `actively-developed`: New features are being added and bugs are being fixed.\n# - `passively-maintained`: There are no plans for new features, but the maintainer intends to\n#   respond to issues that get filed.\n# - `as-is`: The crate is feature complete, the maintainer does not intend to continue working on\n#   it or providing support, but it works for the purposes it was designed for.\n# - `experimental`: The author wants to share it with the community but is not intending to meet\n#   anyone's particular use case.\n# - `looking-for-maintainer`: The current maintainer would like to transfer the crate to someone\n#   else.\n# - `deprecated`: The maintainer does not recommend using this crate (the description of the crate\n#   can describe why, there could be a better solution available or there could be problems with\n#   the crate that the author does not want to fix).\n# - `none`: Displays no badge on crates.io, since the maintainer has not chosen to specify\n#   their intentions, potential crate users will need to investigate on their own.\nmaintenance = { status = \"...\" }\n\n```\n\n## [Dependency sections](#dependency-sections)\n\nSee the [specifying dependencies page](reference/specifying-dependencies.html) for information on the `[dependencies]`, `[dev-dependencies]`, `[build-dependencies]`, and target-specific `[target.*.dependencies]` sections.\n\n## [The `[profile.*]` sections](#the-profile-sections)\n\nThe `[profile]` tables provide a way to customize compiler settings such as optimizations and debug settings. See [the Profiles chapter](reference/profiles.html) for more detail.\n\n## [Cargo Targets](#cargo-targets)\n\nCargo packages consist of _targets_ which correspond to source files which can be compiled into a crate. Packages can have [library](about:blank/reference/cargo-targets.html#library), [binary](about:blank/reference/cargo-targets.html#binaries), [example](about:blank/reference/cargo-targets.html#examples), [test](about:blank/reference/cargo-targets.html#tests), and [benchmark](about:blank/reference/cargo-targets.html#benchmarks) targets. The list of targets can be configured in the `Cargo.toml` manifest, often [inferred automatically](about:blank/reference/cargo-targets.html#target-auto-discovery) by the [directory layout](reference/../guide/project-layout.html) of the source files.\n\nSee [Configuring a target](about:blank/reference/cargo-targets.html#configuring-a-target) below for details on configuring the settings for a target.\n\n## [Library](#library)\n\nThe library target defines a “library” that can be used and linked by other libraries and executables. The filename defaults to `src/lib.rs`, and the name of the library defaults to the name of the package, with any dashes replaced with underscores. A package can have only one library. The settings for the library can be [customized](about:blank/reference/cargo-targets.html#configuring-a-target) in the `[lib]` table in `Cargo.toml`.\n\n```toml\n# Example of customizing the library in Cargo.toml.\n[lib]\ncrate-type = [\"cdylib\"]\nbench = false\n\n```\n\n## [Binaries](#binaries)\n\nBinary targets are executable programs that can be run after being compiled. The default binary filename is `src/main.rs`, which defaults to the name of the package. Additional binaries are stored in the [`src/bin/` directory](reference/../guide/project-layout.html). The settings for each binary can be [customized](about:blank/reference/cargo-targets.html#configuring-a-target) in the `[[bin]]` tables in `Cargo.toml`.\n\nBinaries can use the public API of the package’s library. They are also linked with the [`[dependencies]`](reference/specifying-dependencies.html) defined in `Cargo.toml`.\n\nYou can run individual binaries with the [`cargo run`](reference/../commands/cargo-run.html) command with the `--bin <bin-name>` option. [`cargo install`](reference/../commands/cargo-install.html) can be used to copy the executable to a common location.\n\n```toml\n# Example of customizing binaries in Cargo.toml.\n[[bin]]\nname = \"cool-tool\"\ntest = false\nbench = false\n\n[[bin]]\nname = \"frobnicator\"\nrequired-features = [\"frobnicate\"]\n\n```\n\n## [Examples](#examples)\n\nFiles located under the [`examples` directory](reference/../guide/project-layout.html) are example uses of the functionality provided by the library. When compiled, they are placed in the [`target/debug/examples` directory](reference/../guide/build-cache.html).\n\nExamples can use the public API of the package’s library. They are also linked with the [`[dependencies]`](reference/specifying-dependencies.html) and [`[dev-dependencies]`](about:blank/reference/specifying-dependencies.html#development-dependencies) defined in `Cargo.toml`.\n\nBy default, examples are executable binaries (with a `main()` function). You can specify the [`crate-type` field](about:blank/reference/cargo-targets.html#the-crate-type-field) to make an example be compiled as a library:\n\n```toml\n[[example]]\nname = \"foo\"\ncrate-type = [\"staticlib\"]\n\n```\n\nYou can run individual executable examples with the [`cargo run`](reference/../commands/cargo-run.html) command with the `--example <example-name>` option. Library examples can be built with [`cargo build`](reference/../commands/cargo-build.html) with the `--example <example-name>` option. [`cargo install`](reference/../commands/cargo-install.html) with the `--example <example-name>` option can be used to copy executable binaries to a common location. Examples are compiled by [`cargo test`](reference/../commands/cargo-test.html) by default to protect them from bit-rotting. Set [the `test` field](about:blank/reference/cargo-targets.html#the-test-field) to `true` if you have `#[test]` functions in the example that you want to run with [`cargo test`](reference/../commands/cargo-test.html).\n\n## [Tests](#tests-1)\n\nThere are two styles of tests within a Cargo project:\n\n-   _Unit tests_ which are functions marked with the [`#[test]` attribute](about:blank/reference/attributes/testing.html#the-test-attribute) located within your library or binaries (or any target enabled with [the `test` field](about:blank/reference/cargo-targets.html#the-test-field)). These tests have access to private APIs located within the target they are defined in.\n-   _Integration tests_ which is a separate executable binary, also containing `#[test]` functions, which is linked with the project’s library and has access to its _public_ API.\n\nTests are run with the [`cargo test`](reference/../commands/cargo-test.html) command. By default, Cargo and `rustc` use the [libtest harness](reference/../../rustc/tests/index.html) which is responsible for collecting functions annotated with the [`#[test]` attribute](about:blank/reference/attributes/testing.html#the-test-attribute) and executing them in parallel, reporting the success and failure of each test. See [the `harness` field](about:blank/reference/cargo-targets.html#the-harness-field) if you want to use a different harness or test strategy.\n\n> **Note**: There is another special style of test in Cargo: [documentation tests](reference/../../rustdoc/documentation-tests.html). They are handled by `rustdoc` and have a slightly different execution model. For more information, please see [`cargo test`](about:blank/commands/cargo-test.html#documentation-tests).\n\n### [Integration tests](#integration-tests)\n\nFiles located under the [`tests` directory](reference/../guide/project-layout.html) are integration tests. When you run [`cargo test`](reference/../commands/cargo-test.html), Cargo will compile each of these files as a separate crate, and execute them.\n\nIntegration tests can use the public API of the package’s library. They are also linked with the [`[dependencies]`](reference/specifying-dependencies.html) and [`[dev-dependencies]`](about:blank/reference/specifying-dependencies.html#development-dependencies) defined in `Cargo.toml`.\n\nIf you want to share code among multiple integration tests, you can place it in a separate module such as `tests/common/mod.rs` and then put `mod common;` in each test to import it.\n\nEach integration test results in a separate executable binary, and [`cargo test`](reference/../commands/cargo-test.html) will run them serially. In some cases this can be inefficient, as it can take longer to compile, and may not make full use of multiple CPUs when running the tests. If you have a lot of integration tests, you may want to consider creating a single integration test, and split the tests into multiple modules. The libtest harness will automatically find all of the `#[test]` annotated functions and run them in parallel. You can pass module names to [`cargo test`](reference/../commands/cargo-test.html) to only run the tests within that module.\n\nBinary targets are automatically built if there is an integration test. This allows an integration test to execute the binary to exercise and test its behavior. The `CARGO_BIN_EXE_<name>` [environment variable](about:blank/reference/environment-variables.html#environment-variables-cargo-sets-for-crates) is set when the integration test is built so that it can use the [`env` macro](reference/../../std/macro.env.html) to locate the executable.\n\n## [Benchmarks](#benchmarks)\n\nBenchmarks provide a way to test the performance of your code using the [`cargo bench`](reference/../commands/cargo-bench.html) command. They follow the same structure as [tests](about:blank/reference/cargo-targets.html#tests), with each benchmark function annotated with the `#[bench]` attribute. Similarly to tests:\n\n-   Benchmarks are placed in the [`benches` directory](reference/../guide/project-layout.html).\n-   Benchmark functions defined in libraries and binaries have access to the _private_ API within the target they are defined in. Benchmarks in the `benches` directory may use the _public_ API.\n-   [The `bench` field](about:blank/reference/cargo-targets.html#the-bench-field) can be used to define which targets are benchmarked by default.\n-   [The `harness` field](about:blank/reference/cargo-targets.html#the-harness-field) can be used to disable the built-in harness.\n\n> **Note**: The [`#[bench]` attribute](reference/../../unstable-book/library-features/test.html) is currently unstable and only available on the [nightly channel](reference/../../book/appendix-07-nightly-rust.html). There are some packages available on [crates.io](https://crates.io/keywords/benchmark) that may help with running benchmarks on the stable channel, such as [Criterion](https://crates.io/crates/criterion).\n\n## [Configuring a target](#configuring-a-target)\n\nAll of the `[lib]`, `[[bin]]`, `[[example]]`, `[[test]]`, and `[[bench]]` sections in `Cargo.toml` support similar configuration for specifying how a target should be built. The double-bracket sections like `[[bin]]` are [array-of-table of TOML](https://toml.io/en/v1.0.0-rc.3#array-of-tables), which means you can write more than one `[[bin]]` section to make several executables in your crate. You can only specify one library, so `[lib]` is a normal TOML table.\n\nThe following is an overview of the TOML settings for each target, with each field described in detail below.\n\n```toml\n[lib]\nname = \"foo\"           # The name of the target.\npath = \"src/lib.rs\"    # The source file of the target.\ntest = true            # Is tested by default.\ndoctest = true         # Documentation examples are tested by default.\nbench = true           # Is benchmarked by default.\ndoc = true             # Is documented by default.\nplugin = false         # Used as a compiler plugin (deprecated).\nproc-macro = false     # Set to `true` for a proc-macro library.\nharness = true         # Use libtest harness.\nedition = \"2015\"       # The edition of the target.\ncrate-type = [\"lib\"]   # The crate types to generate.\nrequired-features = [] # Features required to build this target (N/A for lib).\n\n```\n\n### [The `name` field](#the-name-field-1)\n\nThe `name` field specifies the name of the target, which corresponds to the filename of the artifact that will be generated. For a library, this is the crate name that dependencies will use to reference it.\n\nFor the library target, this defaults to the name of the package , with any dashes replaced with underscores. For the default binary (`src/main.rs`), it also defaults to the name of the package, with no replacement for dashes. For [auto discovered](about:blank/reference/cargo-targets.html#target-auto-discovery) targets, it defaults to the directory or file name.\n\nThis is required for all targets except `[lib]`.\n\n### [The `path` field](#the-path-field)\n\nThe `path` field specifies where the source for the crate is located, relative to the `Cargo.toml` file.\n\nIf not specified, the [inferred path](about:blank/reference/cargo-targets.html#target-auto-discovery) is used based on the target name.\n\n### [The `test` field](#the-test-field)\n\nThe `test` field indicates whether or not the target is tested by default by [`cargo test`](reference/../commands/cargo-test.html). The default is `true` for lib, bins, and tests.\n\n> **Note**: Examples are built by [`cargo test`](reference/../commands/cargo-test.html) by default to ensure they continue to compile, but they are not _tested_ by default. Setting `test = true` for an example will also build it as a test and run any [`#[test]`](about:blank/reference/attributes/testing.html#the-test-attribute) functions defined in the example.\n\n### [The `doctest` field](#the-doctest-field)\n\nThe `doctest` field indicates whether or not [documentation examples](reference/../../rustdoc/documentation-tests.html) are tested by default by [`cargo test`](reference/../commands/cargo-test.html). This is only relevant for libraries, it has no effect on other sections. The default is `true` for the library.\n\n### [The `bench` field](#the-bench-field)\n\nThe `bench` field indicates whether or not the target is benchmarked by default by [`cargo bench`](reference/../commands/cargo-bench.html). The default is `true` for lib, bins, and benchmarks.\n\n### [The `doc` field](#the-doc-field)\n\nThe `doc` field indicates whether or not the target is included in the documentation generated by [`cargo doc`](reference/../commands/cargo-doc.html) by default. The default is `true` for libraries and binaries.\n\n> **Note**: The binary will be skipped if its name is the same as the lib target.\n\n### [The `plugin` field](#the-plugin-field)\n\nThis field is used for `rustc` plugins, which are being deprecated.\n\n### [The `proc-macro` field](#the-proc-macro-field)\n\nThe `proc-macro` field indicates that the library is a [procedural macro](reference/../../book/ch19-06-macros.html) ([reference](reference/../../reference/procedural-macros.html)). This is only valid for the `[lib]` target.\n\n### [The `harness` field](#the-harness-field)\n\nThe `harness` field indicates that the [`--test` flag](about:blank/rustc/command-line-arguments.html#option-test) will be passed to `rustc` which will automatically include the libtest library which is the driver for collecting and running tests marked with the [`#[test]` attribute](about:blank/reference/attributes/testing.html#the-test-attribute) or benchmarks with the `#[bench]` attribute. The default is `true` for all targets.\n\nIf set to `false`, then you are responsible for defining a `main()` function to run tests and benchmarks.\n\nTests have the [`cfg(test)` conditional expression](about:blank/reference/conditional-compilation.html#test) enabled whether or not the harness is enabled.\n\n### [The `edition` field](#the-edition-field-1)\n\nThe `edition` field defines the [Rust edition](reference/../../edition-guide/index.html) the target will use. If not specified, it defaults to the [`edition` field](about:blank/reference/manifest.html#the-edition-field) for the `[package]`. This field should usually not be set, and is only intended for advanced scenarios such as incrementally transitioning a large package to a new edition.\n\n### [The `crate-type` field](#the-crate-type-field)\n\nThe `crate-type` field defines the [crate types](reference/../../reference/linkage.html) that will be generated by the target. It is an array of strings, allowing you to specify multiple crate types for a single target. This can only be specified for libraries and examples. Binaries, tests, and benchmarks are always the “bin” crate type. The defaults are:\n\n| Target | Crate Type |\n| --- | --- |\n| Normal library | `\"lib\"` |\n| Proc-macro library | `\"proc-macro\"` |\n| Example | `\"bin\"` |\n\nThe available options are `bin`, `lib`, `rlib`, `dylib`, `cdylib`, `staticlib`, and `proc-macro`. You can read more about the different crate types in the [Rust Reference Manual](reference/../../reference/linkage.html).\n\n### [The `required-features` field](#the-required-features-field)\n\nThe `required-features` field specifies which [features](reference/features.html) the target needs in order to be built. If any of the required features are not enabled, the target will be skipped. This is only relevant for the `[[bin]]`, `[[bench]]`, `[[test]]`, and `[[example]]` sections, it has no effect on `[lib]`.\n\n```toml\n[features]\n# ...\npostgres = []\nsqlite = []\ntools = []\n\n[[bin]]\nname = \"my-pg-tool\"\nrequired-features = [\"postgres\", \"tools\"]\n\n```\n\n## [Target auto-discovery](#target-auto-discovery)\n\nBy default, Cargo automatically determines the targets to build based on the [layout of the files](reference/../guide/project-layout.html) on the filesystem. The target configuration tables, such as `[lib]`, `[[bin]]`, `[[test]]`, `[[bench]]`, or `[[example]]`, can be used to add additional targets that don’t follow the standard directory layout.\n\nThe automatic target discovery can be disabled so that only manually configured targets will be built. Setting the keys `autobins`, `autoexamples`, `autotests`, or `autobenches` to `false` in the `[package]` section will disable auto-discovery of the corresponding target type.\n\n```toml\n[package]\n# ...\nautobins = false\nautoexamples = false\nautotests = false\nautobenches = false\n\n```\n\nDisabling automatic discovery should only be needed for specialized situations. For example, if you have a library where you want a _module_ named `bin`, this would present a problem because Cargo would usually attempt to compile anything in the `bin` directory as an executable. Here is a sample layout of this scenario:\n\n```text\n├── Cargo.toml\n└── src\n    ├── lib.rs\n    └── bin\n        └── mod.rs\n\n```\n\nTo prevent Cargo from inferring `src/bin/mod.rs` as an executable, set `autobins = false` in `Cargo.toml` to disable auto-discovery:\n\n```toml\n[package]\n# …\nautobins = false\n\n```\n\n> **Note**: For packages with the 2015 edition, the default for auto-discovery is `false` if at least one target is manually defined in `Cargo.toml`. Beginning with the 2018 edition, the default is always `true`.\n\n## [Workspaces](#workspaces)\n\nA _workspace_ is a collection of one or more packages, called _workspace members_, that are managed together.\n\nThe key points of workspaces are:\n\n-   Common commands can run across all workspace members, like `cargo check --workspace`.\n-   All packages share a common [`Cargo.lock`](reference/../guide/cargo-toml-vs-cargo-lock.html) file which resides in the _workspace root_.\n-   All packages share a common [output directory](reference/../guide/build-cache.html), which defaults to a directory named `target` in the _workspace root_.\n-   Sharing package metadata, like with [`workspace.package`](about:blank/reference/workspaces.html#the-package-table).\n-   The [`[patch]`](about:blank/reference/overriding-dependencies.html#the-patch-section), [`[replace]`](about:blank/reference/overriding-dependencies.html#the-replace-section) and [`[profile.*]`](reference/profiles.html) sections in `Cargo.toml` are only recognized in the _root_ manifest, and ignored in member crates’ manifests.\n\nThe root `Cargo.toml` of a workspace supports the following sections:\n\n-   [`[workspace]`](about:blank/reference/workspaces.html#the-workspace-section) — Defines a workspace.\n    -   [`resolver`](about:blank/reference/resolver.html#resolver-versions) — Sets the dependency resolver to use.\n    -   [`members`](about:blank/reference/workspaces.html#the-members-and-exclude-fields) — Packages to include in the workspace.\n    -   [`exclude`](about:blank/reference/workspaces.html#the-members-and-exclude-fields) — Packages to exclude from the workspace.\n    -   [`default-members`](about:blank/reference/workspaces.html#the-default-members-field) — Packages to operate on when a specific package wasn’t selected.\n    -   [`package`](about:blank/reference/workspaces.html#the-package-table) — Keys for inheriting in packages.\n    -   [`dependencies`](about:blank/reference/workspaces.html#the-dependencies-table) — Keys for inheriting in package dependencies.\n    -   [`lints`](about:blank/reference/workspaces.html#the-lints-table) — Keys for inheriting in package lints.\n    -   [`metadata`](about:blank/reference/workspaces.html#the-metadata-table) — Extra settings for external tools.\n-   [`[patch]`](about:blank/reference/overriding-dependencies.html#the-patch-section) — Override dependencies.\n-   [`[replace]`](about:blank/reference/overriding-dependencies.html#the-replace-section) — Override dependencies (deprecated).\n-   [`[profile]`](reference/profiles.html) — Compiler settings and optimizations.\n\n## [The `[workspace]` section](#the-workspace-section)\n\nTo create a workspace, you add the `[workspace]` table to a `Cargo.toml`:\n\n```toml\n[workspace]\n# ...\n\n```\n\nAt minimum, a workspace has to have a member, either with a root package or as a virtual manifest.\n\n### [Root package](#root-package)\n\nIf the [`[workspace]` section](about:blank/reference/workspaces.html#the-workspace-section) is added to a `Cargo.toml` that already defines a `[package]`, the package is the _root package_ of the workspace. The _workspace root_ is the directory where the workspace’s `Cargo.toml` is located.\n\n```toml\n[workspace]\n\n[package]\nname = \"hello_world\" # the name of the package\nversion = \"0.1.0\"    # the current version, obeying semver\nauthors = [\"Alice <a@example.com>\", \"Bob <b@example.com>\"]\n\n```\n\n### [Virtual workspace](#virtual-workspace)\n\nAlternatively, a `Cargo.toml` file can be created with a `[workspace]` section but without a [`[package]` section](about:blank/reference/manifest.html#the-package-section). This is called a _virtual manifest_. This is typically useful when there isn’t a “primary” package, or you want to keep all the packages organized in separate directories.\n\n```toml\n# [PROJECT_DIR]/Cargo.toml\n[workspace]\nmembers = [\"hello_world\"]\nresolver = \"2\"\n\n```\n\n```toml\n# [PROJECT_DIR]/hello_world/Cargo.toml\n[package]\nname = \"hello_world\" # the name of the package\nversion = \"0.1.0\"    # the current version, obeying semver\nedition = \"2021\"     # the edition, will have no effect on a resolver used in the workspace\nauthors = [\"Alice <a@example.com>\", \"Bob <b@example.com>\"]\n\n```\n\nBy having a workspace without a root package,\n\n-   [`resolver`](about:blank/reference/resolver.html#resolver-versions) must be set explicitly in virtual workspaces as they have no [`package.edition`](about:blank/reference/manifest.html#the-edition-field) to infer it from [resolver version](about:blank/reference/resolver.html#resolver-versions).\n-   Commands run in the workspace root will run against all workspace members by default, see [`default-members`](about:blank/reference/workspaces.html#the-default-members-field).\n\n## [The `members` and `exclude` fields](#the-members-and-exclude-fields)\n\nThe `members` and `exclude` fields define which packages are members of the workspace:\n\n```toml\n[workspace]\nmembers = [\"member1\", \"path/to/member2\", \"crates/*\"]\nexclude = [\"crates/foo\", \"path/to/other\"]\n\n```\n\nAll [`path` dependencies](about:blank/reference/specifying-dependencies.html#specifying-path-dependencies) residing in the workspace directory automatically become members. Additional members can be listed with the `members` key, which should be an array of strings containing directories with `Cargo.toml` files.\n\nThe `members` list also supports [globs](https://docs.rs/glob/0.3.0/glob/struct.Pattern.html) to match multiple paths, using typical filename glob patterns like `*` and `?`.\n\nThe `exclude` key can be used to prevent paths from being included in a workspace. This can be useful if some path dependencies aren’t desired to be in the workspace at all, or using a glob pattern and you want to remove a directory.\n\nWhen inside a subdirectory within the workspace, Cargo will automatically search the parent directories for a `Cargo.toml` file with a `[workspace]` definition to determine which workspace to use. The [`package.workspace`](about:blank/reference/manifest.html#the-workspace-field) manifest key can be used in member crates to point at a workspace’s root to override this automatic search. The manual setting can be useful if the member is not inside a subdirectory of the workspace root.\n\n### [Package selection](#package-selection)\n\nIn a workspace, package-related Cargo commands like [`cargo build`](reference/../commands/cargo-build.html) can use the `-p` / `--package` or `--workspace` command-line flags to determine which packages to operate on. If neither of those flags are specified, Cargo will use the package in the current working directory. However, if the current directory is a workspace root, the [`default-members`](about:blank/reference/workspaces.html#the-default-members-field) will be used.\n\n## [The `default-members` field](#the-default-members-field)\n\nThe `default-members` field specifies paths of [members](about:blank/reference/workspaces.html#the-members-and-exclude-fields) to operate on when in the workspace root and the package selection flags are not used:\n\n```toml\n[workspace]\nmembers = [\"path/to/member1\", \"path/to/member2\", \"path/to/member3/*\"]\ndefault-members = [\"path/to/member2\", \"path/to/member3/foo\"]\n\n```\n\n> Note: when a [root package](about:blank/reference/workspaces.html#root-package) is present, you can only operate on it using `--package` and `--workspace` flags.\n\nWhen unspecified, the [root package](about:blank/reference/workspaces.html#root-package) will be used. In the case of a [virtual workspace](about:blank/reference/workspaces.html#virtual-workspace), all members will be used (as if `--workspace` were specified on the command-line).\n\n## [The `package` table](#the-package-table)\n\nThe `workspace.package` table is where you define keys that can be inherited by members of a workspace. These keys can be inherited by defining them in the member package with `{key}.workspace = true`.\n\nKeys that are supported:\n\n| `authors` | `categories` |\n| `description` | `documentation` |\n| `edition` | `exclude` |\n| `homepage` | `include` |\n| `keywords` | `license` |\n| `license-file` | `publish` |\n| `readme` | `repository` |\n| `rust-version` | `version` |\n\n-   `license-file` and `readme` are relative to the workspace root\n-   `include` and `exclude` are relative to your package root\n\nExample:\n\n```toml\n# [PROJECT_DIR]/Cargo.toml\n[workspace]\nmembers = [\"bar\"]\n\n[workspace.package]\nversion = \"1.2.3\"\nauthors = [\"Nice Folks\"]\ndescription = \"A short description of my package\"\ndocumentation = \"https://example.com/bar\"\n\n```\n\n```toml\n# [PROJECT_DIR]/bar/Cargo.toml\n[package]\nname = \"bar\"\nversion.workspace = true\nauthors.workspace = true\ndescription.workspace = true\ndocumentation.workspace = true\n\n```\n\n## [The `dependencies` table](#the-dependencies-table)\n\nThe `workspace.dependencies` table is where you define dependencies to be inherited by members of a workspace.\n\nSpecifying a workspace dependency is similar to [package dependencies](reference/specifying-dependencies.html) except:\n\n-   Dependencies from this table cannot be declared as `optional`\n-   [`features`](reference/features.html) declared in this table are additive with the `features` from `[dependencies]`\n\nYou can then [inherit the workspace dependency as a package dependency](about:blank/reference/specifying-dependencies.html#inheriting-a-dependency-from-a-workspace)\n\nExample:\n\n```toml\n# [PROJECT_DIR]/Cargo.toml\n[workspace]\nmembers = [\"bar\"]\n\n[workspace.dependencies]\ncc = \"1.0.73\"\nrand = \"0.8.5\"\nregex = { version = \"1.6.0\", default-features = false, features = [\"std\"] }\n\n```\n\n```toml\n# [PROJECT_DIR]/bar/Cargo.toml\n[package]\nname = \"bar\"\nversion = \"0.2.0\"\n\n[dependencies]\nregex = { workspace = true, features = [\"unicode\"] }\n\n[build-dependencies]\ncc.workspace = true\n\n[dev-dependencies]\nrand.workspace = true\n\n```\n\n## [The `lints` table](#the-lints-table)\n\nThe `workspace.lints` table is where you define lint configuration to be inherited by members of a workspace.\n\nSpecifying a workspace lint configuration is similar to [package lints](about:blank/reference/manifest.html#the-lints-section).\n\nExample:\n\n```toml\n# [PROJECT_DIR]/Cargo.toml\n[workspace]\nmembers = [\"crates/*\"]\n\n[workspace.lints.rust]\nunsafe_code = \"forbid\"\n\n```\n\n```toml\n# [PROJECT_DIR]/crates/bar/Cargo.toml\n[package]\nname = \"bar\"\nversion = \"0.1.0\"\n\n[lints]\nworkspace = true\n\n```\n\nThe `workspace.metadata` table is ignored by Cargo and will not be warned about. This section can be used for tools that would like to store workspace configuration in `Cargo.toml`. For example:\n\n```toml\n[workspace]\nmembers = [\"member1\", \"member2\"]\n\n[workspace.metadata.webcontents]\nroot = \"path/to/webproject\"\ntool = [\"npm\", \"run\", \"build\"]\n# ...\n\n```\n\nThere is a similar set of tables at the package level at [`package.metadata`](about:blank/reference/manifest.html#the-metadata-table). While cargo does not specify a format for the content of either of these tables, it is suggested that external tools may wish to use them in a consistent fashion, such as referring to the data in `workspace.metadata` if data is missing from `package.metadata`, if that makes sense for the tool in question.\n\n## [Features](#features)\n\nCargo “features” provide a mechanism to express [conditional compilation](reference/../../reference/conditional-compilation.html) and [optional dependencies](about:blank/reference/features.html#optional-dependencies). A package defines a set of named features in the `[features]` table of `Cargo.toml`, and each feature can either be enabled or disabled. Features for the package being built can be enabled on the command-line with flags such as `--features`. Features for dependencies can be enabled in the dependency declaration in `Cargo.toml`.\n\n> **Note**: New crates or versions published on crates.io are now limited to a maximum of 300 features. Exceptions are granted on a case-by-case basis. See this [blog post](https://blog.rust-lang.org/2023/10/26/broken-badges-and-23k-keywords.html) for details. Participation in solution discussions is encouraged via the crates.io Zulip stream.\n\nSee also the [Features Examples](reference/features-examples.html) chapter for some examples of how features can be used.\n\n## [The `[features]` section](#the-features-section)\n\nFeatures are defined in the `[features]` table in `Cargo.toml`. Each feature specifies an array of other features or optional dependencies that it enables. The following examples illustrate how features could be used for a 2D image processing library where support for different image formats can be optionally included:\n\n```toml\n[features]\n# Defines a feature named `webp` that does not enable any other features.\nwebp = []\n\n```\n\nWith this feature defined, [`cfg` expressions](reference/../../reference/conditional-compilation.html) can be used to conditionally include code to support the requested feature at compile time. For example, inside `lib.rs` of the package could include this:\n\n```rust\n#![allow(unused)]\nfn main() {\n// This conditionally includes a module which implements WEBP support.\n#[cfg(feature = \"webp\")]\npub mod webp;\n}\n```\n\nCargo sets features in the package using the `rustc` [`--cfg` flag](about:blank/rustc/command-line-arguments.html#option-cfg), and code can test for their presence with the [`cfg` attribute](about:blank/reference/conditional-compilation.html#the-cfg-attribute) or the [`cfg` macro](reference/../../std/macro.cfg.html).\n\nFeatures can list other features to enable. For example, the ICO image format can contain BMP and PNG images, so when it is enabled, it should make sure those other features are enabled, too:\n\n```toml\n[features]\nbmp = []\npng = []\nico = [\"bmp\", \"png\"]\nwebp = []\n\n```\n\nFeature names may include characters from the [Unicode XID standard](https://unicode.org/reports/tr31/) (which includes most letters), and additionally allows starting with `_` or digits `0` through `9`, and after the first character may also contain `-`, `+`, or `.`.\n\n> **Note**: [crates.io](https://crates.io/) imposes additional constraints on feature name syntax that they must only be [ASCII alphanumeric](about:blank/std/primitive.char.html#method.is_ascii_alphanumeric) characters or `_`, `-`, or `+`.\n\n## [The `default` feature](#the-default-feature)\n\nBy default, all features are disabled unless explicitly enabled. This can be changed by specifying the `default` feature:\n\n```toml\n[features]\ndefault = [\"ico\", \"webp\"]\nbmp = []\npng = []\nico = [\"bmp\", \"png\"]\nwebp = []\n\n```\n\nWhen the package is built, the `default` feature is enabled which in turn enables the listed features. This behavior can be changed by:\n\n-   The `--no-default-features` [command-line flag](about:blank/reference/features.html#command-line-feature-options) disables the default features of the package.\n-   The `default-features = false` option can be specified in a [dependency declaration](about:blank/reference/features.html#dependency-features).\n\n> **Note**: Be careful about choosing the default feature set. The default features are a convenience that make it easier to use a package without forcing the user to carefully select which features to enable for common use, but there are some drawbacks. Dependencies automatically enable default features unless `default-features = false` is specified. This can make it difficult to ensure that the default features are not enabled, especially for a dependency that appears multiple times in the dependency graph. Every package must ensure that `default-features = false` is specified to avoid enabling them.\n> \n> Another issue is that it can be a [SemVer incompatible change](about:blank/reference/features.html#semver-compatibility) to remove a feature from the default set, so you should be confident that you will keep those features.\n\n## [Optional dependencies](#optional-dependencies)\n\nDependencies can be marked “optional”, which means they will not be compiled by default. For example, let’s say that our 2D image processing library uses an external package to handle GIF images. This can be expressed like this:\n\n```toml\n[dependencies]\ngif = { version = \"0.11.1\", optional = true }\n\n```\n\nBy default, this optional dependency implicitly defines a feature that looks like this:\n\n```toml\n[features]\ngif = [\"dep:gif\"]\n\n```\n\nThis means that this dependency will only be included if the `gif` feature is enabled. The same `cfg(feature = \"gif\")` syntax can be used in the code, and the dependency can be enabled just like any feature such as `--features gif` (see [Command-line feature options](about:blank/reference/features.html#command-line-feature-options) below).\n\nIn some cases, you may not want to expose a feature that has the same name as the optional dependency. For example, perhaps the optional dependency is an internal detail, or you want to group multiple optional dependencies together, or you just want to use a better name. If you specify the optional dependency with the `dep:` prefix anywhere in the `[features]` table, that disables the implicit feature.\n\n> **Note**: The `dep:` syntax is only available starting with Rust 1.60. Previous versions can only use the implicit feature name.\n\nFor example, let’s say in order to support the AVIF image format, our library needs two other dependencies to be enabled:\n\n```toml\n[dependencies]\nravif = { version = \"0.6.3\", optional = true }\nrgb = { version = \"0.8.25\", optional = true }\n\n[features]\navif = [\"dep:ravif\", \"dep:rgb\"]\n\n```\n\nIn this example, the `avif` feature will enable the two listed dependencies. This also avoids creating the implicit `ravif` and `rgb` features, since we don’t want users to enable those individually as they are internal details to our crate.\n\n> **Note**: Another way to optionally include a dependency is to use [platform-specific dependencies](about:blank/reference/specifying-dependencies.html#platform-specific-dependencies). Instead of using features, these are conditional based on the target platform.\n\n## [Dependency features](#dependency-features)\n\nFeatures of dependencies can be enabled within the dependency declaration. The `features` key indicates which features to enable:\n\n```toml\n[dependencies]\n# Enables the `derive` feature of serde.\nserde = { version = \"1.0.118\", features = [\"derive\"] }\n\n```\n\nThe [`default` features](about:blank/reference/features.html#the-default-feature) can be disabled using `default-features = false`:\n\n```toml\n[dependencies]\nflate2 = { version = \"1.0.3\", default-features = false, features = [\"zlib\"] }\n\n```\n\n> **Note**: This may not ensure the default features are disabled. If another dependency includes `flate2` without specifying `default-features = false`, then the default features will be enabled. See [feature unification](about:blank/reference/features.html#feature-unification) below for more details.\n\nFeatures of dependencies can also be enabled in the `[features]` table. The syntax is `\"package-name/feature-name\"`. For example:\n\n```toml\n[dependencies]\njpeg-decoder = { version = \"0.1.20\", default-features = false }\n\n[features]\n# Enables parallel processing support by enabling the \"rayon\" feature of jpeg-decoder.\nparallel = [\"jpeg-decoder/rayon\"]\n\n```\n\nThe `\"package-name/feature-name\"` syntax will also enable `package-name` if it is an optional dependency. Often this is not what you want. You can add a `?` as in `\"package-name?/feature-name\"` which will only enable the given feature if something else enables the optional dependency.\n\n> **Note**: The `?` syntax is only available starting with Rust 1.60.\n\nFor example, let’s say we have added some serialization support to our library, and it requires enabling a corresponding feature in some optional dependencies. That can be done like this:\n\n```toml\n[dependencies]\nserde = { version = \"1.0.133\", optional = true }\nrgb = { version = \"0.8.25\", optional = true }\n\n[features]\nserde = [\"dep:serde\", \"rgb?/serde\"]\n\n```\n\nIn this example, enabling the `serde` feature will enable the serde dependency. It will also enable the `serde` feature for the `rgb` dependency, but only if something else has enabled the `rgb` dependency.\n\n## [Command-line feature options](#command-line-feature-options)\n\nThe following command-line flags can be used to control which features are enabled:\n\n-   `--features` _FEATURES_: Enables the listed features. Multiple features may be separated with commas or spaces. If using spaces, be sure to use quotes around all the features if running Cargo from a shell (such as `--features \"foo bar\"`). If building multiple packages in a [workspace](reference/workspaces.html), the `package-name/feature-name` syntax can be used to specify features for specific workspace members.\n    \n-   `--all-features`: Activates all features of all packages selected on the command-line.\n    \n-   `--no-default-features`: Does not activate the [`default` feature](about:blank/reference/features.html#the-default-feature) of the selected packages.\n    \n\n## [Feature unification](#feature-unification)\n\nFeatures are unique to the package that defines them. Enabling a feature on a package does not enable a feature of the same name on other packages.\n\nWhen a dependency is used by multiple packages, Cargo will use the union of all features enabled on that dependency when building it. This helps ensure that only a single copy of the dependency is used. See the [features section](about:blank/reference/resolver.html#features) of the resolver documentation for more details.\n\nFor example, let’s look at the [`winapi`](https://crates.io/crates/winapi) package which uses a [large number](https://github.com/retep998/winapi-rs/blob/0.3.9/Cargo.toml#L25-L431) of features. If your package depends on a package `foo` which enables the “fileapi” and “handleapi” features of `winapi`, and another dependency `bar` which enables the “std” and “winnt” features of `winapi`, then `winapi` will be built with all four of those features enabled.\n\n![winapi features example](reference/../images/winapi-features.svg)\n\nA consequence of this is that features should be _additive_. That is, enabling a feature should not disable functionality, and it should usually be safe to enable any combination of features. A feature should not introduce a [SemVer-incompatible change](about:blank/reference/features.html#semver-compatibility).\n\nFor example, if you want to optionally support [`no_std`](about:blank/reference/names/preludes.html#the-no_std-attribute) environments, **do not** use a `no_std` feature. Instead, use a `std` feature that _enables_ `std`. For example:\n\n```rust\n#![allow(unused)]\n#![no_std]\n\nfn main() {\n#[cfg(feature = \"std\")]\nextern crate std;\n\n#[cfg(feature = \"std\")]\npub fn function_that_requires_std() {\n    // ...\n}\n}\n```\n\n### [Mutually exclusive features](#mutually-exclusive-features)\n\nThere are rare cases where features may be mutually incompatible with one another. This should be avoided if at all possible, because it requires coordinating all uses of the package in the dependency graph to cooperate to avoid enabling them together. If it is not possible, consider adding a compile error to detect this scenario. For example:\n\n```rust\n#[cfg(all(feature = \"foo\", feature = \"bar\"))]\ncompile_error!(\"feature \\\"foo\\\" and feature \\\"bar\\\" cannot be enabled at the same time\");\n```\n\nInstead of using mutually exclusive features, consider some other options:\n\n-   Split the functionality into separate packages.\n-   When there is a conflict, [choose one feature over another](about:blank/reference/features-examples.html#feature-precedence). The [`cfg-if`](https://crates.io/crates/cfg-if) package can help with writing more complex `cfg` expressions.\n-   Architect the code to allow the features to be enabled concurrently, and use runtime options to control which is used. For example, use a config file, command-line argument, or environment variable to choose which behavior to enable.\n\n### [Inspecting resolved features](#inspecting-resolved-features)\n\nIn complex dependency graphs, it can sometimes be difficult to understand how different features get enabled on various packages. The [`cargo tree`](reference/../commands/cargo-tree.html) command offers several options to help inspect and visualize which features are enabled. Some options to try:\n\n-   `cargo tree -e features`: This will show features in the dependency graph. Each feature will appear showing which package enabled it.\n-   `cargo tree -f \"{p} {f}\"`: This is a more compact view that shows a comma-separated list of features enabled on each package.\n-   `cargo tree -e features -i foo`: This will invert the tree, showing how features flow into the given package “foo”. This can be useful because viewing the entire graph can be quite large and overwhelming. Use this when you are trying to figure out which features are enabled on a specific package and why. See the example at the bottom of the [`cargo tree`](reference/../commands/cargo-tree.html) page on how to read this.\n\n## [Feature resolver version 2](#feature-resolver-version-2)\n\nA different feature resolver can be specified with the `resolver` field in `Cargo.toml`, like this:\n\n```toml\n[package]\nname = \"my-package\"\nversion = \"1.0.0\"\nresolver = \"2\"\n\n```\n\nSee the [resolver versions](about:blank/reference/resolver.html#resolver-versions) section for more detail on specifying resolver versions.\n\nThe version `\"2\"` resolver avoids unifying features in a few situations where that unification can be unwanted. The exact situations are described in the [resolver chapter](about:blank/reference/resolver.html#feature-resolver-version-2), but in short, it avoids unifying in these situations:\n\n-   Features enabled on [platform-specific dependencies](about:blank/reference/specifying-dependencies.html#platform-specific-dependencies) for targets not currently being built are ignored.\n-   [Build-dependencies](about:blank/reference/specifying-dependencies.html#build-dependencies) and proc-macros do not share features with normal dependencies.\n-   [Dev-dependencies](about:blank/reference/specifying-dependencies.html#development-dependencies) do not activate features unless building a target that needs them (like tests or examples).\n\nAvoiding the unification is necessary for some situations. For example, if a build-dependency enables a `std` feature, and the same dependency is used as a normal dependency for a `no_std` environment, enabling `std` would break the build.\n\nHowever, one drawback is that this can increase build times because the dependency is built multiple times (each with different features). When using the version `\"2\"` resolver, it is recommended to check for dependencies that are built multiple times to reduce overall build time. If it is not _required_ to build those duplicated packages with separate features, consider adding features to the `features` list in the [dependency declaration](about:blank/reference/features.html#dependency-features) so that the duplicates end up with the same features (and thus Cargo will build it only once). You can detect these duplicate dependencies with the [`cargo tree --duplicates`](reference/../commands/cargo-tree.html) command. It will show which packages are built multiple times; look for any entries listed with the same version. See [Inspecting resolved features](about:blank/reference/features.html#inspecting-resolved-features) for more on fetching information on the resolved features. For build dependencies, this is not necessary if you are cross-compiling with the `--target` flag because build dependencies are always built separately from normal dependencies in that scenario.\n\n### [Resolver version 2 command-line flags](#resolver-version-2-command-line-flags)\n\nThe `resolver = \"2\"` setting also changes the behavior of the `--features` and `--no-default-features` [command-line options](about:blank/reference/features.html#command-line-feature-options).\n\nWith version `\"1\"`, you can only enable features for the package in the current working directory. For example, in a workspace with packages `foo` and `bar`, and you are in the directory for package `foo`, and ran the command `cargo build -p bar --features bar-feat`, this would fail because the `--features` flag only allowed enabling features on `foo`.\n\nWith `resolver = \"2\"`, the features flags allow enabling features for any of the packages selected on the command-line with `-p` and `--workspace` flags. For example:\n\n```sh\n# This command is allowed with resolver = \"2\", regardless of which directory\n# you are in.\ncargo build -p foo -p bar --features foo-feat,bar-feat\n\n# This explicit equivalent works with any resolver version:\ncargo build -p foo -p bar --features foo/foo-feat,bar/bar-feat\n\n```\n\nAdditionally, with `resolver = \"1\"`, the `--no-default-features` flag only disables the default feature for the package in the current directory. With version “2”, it will disable the default features for all workspace members.\n\n## [Build scripts](#build-scripts)\n\n[Build scripts](reference/build-scripts.html) can detect which features are enabled on the package by inspecting the `CARGO_FEATURE_<name>` environment variable, where `<name>` is the feature name converted to uppercase and `-` converted to `_`.\n\n## [Required features](#required-features)\n\nThe [`required-features` field](about:blank/reference/cargo-targets.html#the-required-features-field) can be used to disable specific [Cargo targets](reference/cargo-targets.html) if a feature is not enabled. See the linked documentation for more details.\n\n## [SemVer compatibility](#semver-compatibility)\n\nEnabling a feature should not introduce a SemVer-incompatible change. For example, the feature shouldn’t change an existing API in a way that could break existing uses. More details about what changes are compatible can be found in the [SemVer Compatibility chapter](reference/semver.html).\n\nCare should be taken when adding and removing feature definitions and optional dependencies, as these can sometimes be backwards-incompatible changes. More details can be found in the [Cargo section](about:blank/reference/semver.html#cargo) of the SemVer Compatibility chapter. In short, follow these rules:\n\n-   The following is usually safe to do in a minor release:\n    -   Add a [new feature](about:blank/reference/semver.html#cargo-feature-add) or [optional dependency](about:blank/reference/semver.html#cargo-dep-add).\n    -   [Change the features used on a dependency](about:blank/reference/semver.html#cargo-change-dep-feature).\n-   The following should usually **not** be done in a minor release:\n    -   [Remove a feature](about:blank/reference/semver.html#cargo-feature-remove) or [optional dependency](about:blank/reference/semver.html#cargo-remove-opt-dep).\n    -   [Moving existing public code behind a feature](about:blank/reference/semver.html#item-remove).\n    -   [Remove a feature from a feature list](about:blank/reference/semver.html#cargo-feature-remove-another).\n\nSee the links for caveats and examples.\n\n## [Feature documentation and discovery](#feature-documentation-and-discovery)\n\nYou are encouraged to document which features are available in your package. This can be done by adding [doc comments](reference/../../rustdoc/how-to-write-documentation.html) at the top of `lib.rs`. As an example, see the [regex crate source](https://github.com/rust-lang/regex/blob/1.4.2/src/lib.rs#L488-L583), which when rendered can be viewed on [docs.rs](https://docs.rs/regex/1.4.2/regex/#crate-features). If you have other documentation, such as a user guide, consider adding the documentation there (for example, see [serde.rs](https://serde.rs/feature-flags.html)). If you have a binary project, consider documenting the features in the README or other documentation for the project (for example, see [sccache](https://github.com/mozilla/sccache/blob/0.2.13/README.md#build-requirements)).\n\nClearly documenting the features can set expectations about features that are considered “unstable” or otherwise shouldn’t be used. For example, if there is an optional dependency, but you don’t want users to explicitly list that optional dependency as a feature, exclude it from the documented list.\n\nDocumentation published on [docs.rs](https://docs.rs/) can use metadata in `Cargo.toml` to control which features are enabled when the documentation is built. See [docs.rs metadata documentation](https://docs.rs/about/metadata) for more details.\n\n> **Note**: Rustdoc has experimental support for annotating the documentation to indicate which features are required to use certain APIs. See the [`doc_cfg`](reference/../../unstable-book/language-features/doc-cfg.html) documentation for more details. An example is the [`syn` documentation](https://docs.rs/syn/1.0.54/syn/#modules), where you can see colored boxes which note which features are required to use it.\n\n### [Discovering features](#discovering-features)\n\nWhen features are documented in the library API, this can make it easier for your users to discover which features are available and what they do. If the feature documentation for a package isn’t readily available, you can look at the `Cargo.toml` file, but sometimes it can be hard to track it down. The crate page on [crates.io](https://crates.io/) has a link to the source repository if available. Tools like [`cargo vendor`](reference/../commands/cargo-vendor.html) or [cargo-clone-crate](https://crates.io/crates/cargo-clone-crate) can be used to download the source and inspect it.\n\n## [Feature combinations](#feature-combinations)\n\nBecause features are a form of conditional compilation, they require an exponential number of configurations and test cases to be 100% covered. By default, tests, docs, and other tooling such as [Clippy](https://github.com/rust-lang/rust-clippy) will only run with the default set of features.\n\nWe encourage you to consider your strategy and tooling in regards to different feature combinations — Every project will have different requirements in conjunction with time, resources, and the cost-benefit of covering specific scenarios. Common configurations may be with / without default features, specific combinations of features, or all combinations of features.\n\n## [Features Examples](#features-examples)\n\nThe following illustrates some real-world examples of features in action.\n\n## [Minimizing build times and file sizes](#minimizing-build-times-and-file-sizes)\n\nSome packages use features so that if the features are not enabled, it reduces the size of the crate and reduces compile time. Some examples are:\n\n-   [`syn`](https://crates.io/crates/syn) is a popular crate for parsing Rust code. Since it is so popular, it is helpful to reduce compile times since it affects so many projects. It has a [clearly documented list](https://docs.rs/syn/1.0.54/syn/#optional-features) of features which can be used to minimize the amount of code it contains.\n-   [`regex`](https://crates.io/crates/regex) has a [several features](https://github.com/rust-lang/regex/blob/1.4.2/Cargo.toml#L33-L101) that are [well documented](https://docs.rs/regex/1.4.2/regex/#crate-features). Cutting out Unicode support can reduce the resulting file size as it can remove some large tables.\n-   [`winapi`](https://crates.io/crates/winapi) has [a large number](https://github.com/retep998/winapi-rs/blob/0.3.9/Cargo.toml#L25-L431) of features that limit which Windows API bindings it supports.\n-   [`web-sys`](https://crates.io/crates/web-sys) is another example similar to `winapi` that provides a [huge surface area](https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/crates/web-sys/Cargo.toml#L32-L1395) of API bindings that are limited by using features.\n\n## [Extending behavior](#extending-behavior)\n\nThe [`serde_json`](https://crates.io/crates/serde_json) package has a [`preserve_order` feature](https://github.com/serde-rs/json/blob/v1.0.60/Cargo.toml#L53-L56) which [changes the behavior](https://github.com/serde-rs/json/blob/v1.0.60/src/map.rs#L23-L26) of JSON maps to preserve the order that keys are inserted. Notice that it enables an optional dependency [`indexmap`](https://crates.io/crates/indexmap) to implement the new behavior.\n\nWhen changing behavior like this, be careful to make sure the changes are [SemVer compatible](about:blank/reference/features.html#semver-compatibility). That is, enabling the feature should not break code that usually builds with the feature off.\n\n## [`no_std` support](#no_std-support)\n\nSome packages want to support both [`no_std`](about:blank/reference/names/preludes.html#the-no_std-attribute) and `std` environments. This is useful for supporting embedded and resource-constrained platforms, but still allowing extended capabilities for platforms that support the full standard library.\n\nThe [`wasm-bindgen`](https://crates.io/crates/wasm-bindgen) package defines a [`std` feature](https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/Cargo.toml#L25) that is [enabled by default](https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/Cargo.toml#L23). At the top of the library, it [unconditionally enables the `no_std` attribute](https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/src/lib.rs#L8). This ensures that `std` and the [`std` prelude](reference/../../std/prelude/index.html) are not automatically in scope. Then, in various places in the code ([example1](https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/src/lib.rs#L270-L273), [example2](https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/src/lib.rs#L67-L75)), it uses `#[cfg(feature = \"std\")]` attributes to conditionally enable extra functionality that requires `std`.\n\n## [Re-exporting dependency features](#re-exporting-dependency-features)\n\nIt can be convenient to re-export the features from a dependency. This allows the user depending on the crate to control those features without needing to specify those dependencies directly. For example, [`regex`](https://crates.io/crates/regex) [re-exports the features](https://github.com/rust-lang/regex/blob/1.4.2/Cargo.toml#L65-L89) from the [`regex_syntax`](https://github.com/rust-lang/regex/blob/1.4.2/regex-syntax/Cargo.toml#L17-L32) package. Users of `regex` don’t need to know about the `regex_syntax` package, but they can still access the features it contains.\n\n## [Vendoring of C libraries](#vendoring-of-c-libraries)\n\nSome packages provide bindings to common C libraries (sometimes referred to as [“sys” crates](about:blank/reference/build-scripts.html#-sys-packages)). Sometimes these packages give you the choice to use the C library installed on the system, or to build it from source. For example, the [`openssl`](https://crates.io/crates/openssl) package has a [`vendored` feature](https://github.com/sfackler/rust-openssl/blob/openssl-v0.10.31/openssl/Cargo.toml#L19) which enables the corresponding `vendored` feature of [`openssl-sys`](https://crates.io/crates/openssl-sys). The `openssl-sys` build script has some [conditional logic](https://github.com/sfackler/rust-openssl/blob/openssl-v0.10.31/openssl-sys/build/main.rs#L47-L54) which causes it to build from a local copy of the OpenSSL source code instead of using the version from the system.\n\nThe [`curl-sys`](https://crates.io/crates/curl-sys) package is another example where the [`static-curl` feature](https://github.com/alexcrichton/curl-rust/blob/0.4.34/curl-sys/Cargo.toml#L49) causes it to build libcurl from source. Notice that it also has a [`force-system-lib-on-osx`](https://github.com/alexcrichton/curl-rust/blob/0.4.34/curl-sys/Cargo.toml#L52) feature which forces it [to use the system libcurl](https://github.com/alexcrichton/curl-rust/blob/0.4.34/curl-sys/build.rs#L15-L20), overriding the static-curl setting.\n\n## [Feature precedence](#feature-precedence)\n\nSome packages may have mutually-exclusive features. One option to handle this is to prefer one feature over another. The [`log`](https://crates.io/crates/log) package is an example. It has [several features](https://github.com/rust-lang/log/blob/0.4.11/Cargo.toml#L29-L42) for choosing the maximum logging level at compile-time described [here](https://docs.rs/log/0.4.11/log/#compile-time-filters). It uses [`cfg-if`](https://crates.io/crates/cfg-if) to [choose a precedence](https://github.com/rust-lang/log/blob/0.4.11/src/lib.rs#L1422-L1448). If multiple features are enabled, the higher “max” levels will be preferred over the lower levels.\n\n## [Proc-macro companion package](#proc-macro-companion-package)\n\nSome packages have a proc-macro that is intimately tied with it. However, not all users will need to use the proc-macro. By making the proc-macro an optional-dependency, this allows you to conveniently choose whether or not it is included. This is helpful, because sometimes the proc-macro version must stay in sync with the parent package, and you don’t want to force the users to have to specify both dependencies and keep them in sync.\n\nAn example is [`serde`](https://crates.io/crates/serde) which has a [`derive`](https://github.com/serde-rs/serde/blob/v1.0.118/serde/Cargo.toml#L34-L35) feature which enables the [`serde_derive`](https://crates.io/crates/serde_derive) proc-macro. The `serde_derive` crate is very tightly tied to `serde`, so it uses an [equals version requirement](https://github.com/serde-rs/serde/blob/v1.0.118/serde/Cargo.toml#L17) to ensure they stay in sync.\n\n## [Nightly-only features](#nightly-only-features)\n\nSome packages want to experiment with APIs or language features that are only available on the Rust [nightly channel](reference/../../book/appendix-07-nightly-rust.html). However, they may not want to require their users to also use the nightly channel. An example is [`wasm-bindgen`](https://crates.io/crates/wasm-bindgen) which has a [`nightly` feature](https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/Cargo.toml#L27) which enables an [extended API](https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/src/closure.rs#L257-L269) that uses the [`Unsize`](reference/../../std/marker/trait.Unsize.html) marker trait that is only available on the nightly channel at the time of this writing.\n\nNote that at the root of the crate it uses [`cfg_attr` to enable the nightly feature](https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/src/lib.rs#L11). Keep in mind that the [`feature` attribute](reference/../../unstable-book/index.html) is unrelated to Cargo features, and is used to opt-in to experimental language features.\n\nThe [`simd_support` feature](https://github.com/rust-random/rand/blob/0.7.3/Cargo.toml#L40) of the [`rand`](https://crates.io/crates/rand) package is another example, which relies on a dependency that only builds on the nightly channel.\n\n## [Experimental features](#experimental-features)\n\nSome packages have new functionality that they may want to experiment with, without having to commit to the stability of those APIs. The features are usually documented that they are experimental, and thus may change or break in the future, even during a minor release. An example is the [`async-std`](https://crates.io/crates/async-std) package, which has an [`unstable` feature](https://github.com/async-rs/async-std/blob/v1.8.0/Cargo.toml#L38-L42), which [gates new APIs](https://github.com/async-rs/async-std/blob/v1.8.0/src/macros.rs#L46) that people can opt-in to using, but may not be completely ready to be relied upon.\n\n## [Profiles](#profiles)\n\nProfiles provide a way to alter the compiler settings, influencing things like optimizations and debugging symbols.\n\nCargo has 4 built-in profiles: `dev`, `release`, `test`, and `bench`. The profile is automatically chosen based on which command is being run if a profile is not specified on the command-line. In addition to the built-in profiles, custom user-defined profiles can also be specified.\n\nProfile settings can be changed in [`Cargo.toml`](reference/manifest.html) with the `[profile]` table. Within each named profile, individual settings can be changed with key/value pairs like this:\n\n```toml\n[profile.dev]\nopt-level = 1               # Use slightly better optimizations.\noverflow-checks = false     # Disable integer overflow checks.\n\n```\n\nCargo only looks at the profile settings in the `Cargo.toml` manifest at the root of the workspace. Profile settings defined in dependencies will be ignored.\n\nAdditionally, profiles can be overridden from a [config](reference/config.html) definition. Specifying a profile in a config file or environment variable will override the settings from `Cargo.toml`.\n\n## [Profile settings](#profile-settings)\n\nThe following is a list of settings that can be controlled in a profile.\n\n### [opt-level](#opt-level)\n\nThe `opt-level` setting controls the [`-C opt-level` flag](about:blank/rustc/codegen-options/index.html#opt-level) which controls the level of optimization. Higher optimization levels may produce faster runtime code at the expense of longer compiler times. Higher levels may also change and rearrange the compiled code which may make it harder to use with a debugger.\n\nThe valid options are:\n\n-   `0`: no optimizations\n-   `1`: basic optimizations\n-   `2`: some optimizations\n-   `3`: all optimizations\n-   `\"s\"`: optimize for binary size\n-   `\"z\"`: optimize for binary size, but also turn off loop vectorization.\n\nIt is recommended to experiment with different levels to find the right balance for your project. There may be surprising results, such as level `3` being slower than `2`, or the `\"s\"` and `\"z\"` levels not being necessarily smaller. You may also want to reevaluate your settings over time as newer versions of `rustc` change optimization behavior.\n\nSee also [Profile Guided Optimization](reference/../../rustc/profile-guided-optimization.html) for more advanced optimization techniques.\n\n### [debug](#debug)\n\nThe `debug` setting controls the [`-C debuginfo` flag](about:blank/rustc/codegen-options/index.html#debuginfo) which controls the amount of debug information included in the compiled binary.\n\nThe valid options are:\n\n-   `0`, `false`, or `\"none\"`: no debug info at all, default for [`release`](about:blank/reference/profiles.html#release)\n-   `\"line-directives-only\"`: line info directives only. For the nvptx\\* targets this enables [profiling](https://reviews.llvm.org/D46061). For other use cases, `line-tables-only` is the better, more compatible choice.\n-   `\"line-tables-only\"`: line tables only. Generates the minimal amount of debug info for backtraces with filename/line number info, but not anything else, i.e. no variable or function parameter info.\n-   `1` or `\"limited\"`: debug info without type or variable-level information. Generates more detailed module-level info than `line-tables-only`.\n-   `2`, `true`, or `\"full\"`: full debug info, default for [`dev`](about:blank/reference/profiles.html#dev)\n\nFor more information on what each option does see `rustc`’s docs on [debuginfo](about:blank/rustc/codegen-options/index.html#debuginfo).\n\nYou may wish to also configure the [`split-debuginfo`](about:blank/reference/profiles.html#split-debuginfo) option depending on your needs as well.\n\n### [split-debuginfo](#split-debuginfo)\n\nThe `split-debuginfo` setting controls the [`-C split-debuginfo` flag](about:blank/rustc/codegen-options/index.html#split-debuginfo) which controls whether debug information, if generated, is either placed in the executable itself or adjacent to it.\n\nThis option is a string and acceptable values are the same as those the [compiler accepts](about:blank/rustc/codegen-options/index.html#split-debuginfo). The default value for this option is `unpacked` on macOS for profiles that have debug information otherwise enabled. Otherwise the default for this option is [documented with rustc](about:blank/rustc/codegen-options/index.html#split-debuginfo) and is platform-specific. Some options are only available on the [nightly channel](reference/../../book/appendix-07-nightly-rust.html). The Cargo default may change in the future once more testing has been performed, and support for DWARF is stabilized.\n\nBe aware that Cargo and rustc have different defaults for this option. This option exists to allow Cargo to experiment on different combinations of flags thus providing better debugging and developer experience.\n\n### [strip](#strip)\n\nThe `strip` option controls the [`-C strip` flag](about:blank/rustc/codegen-options/index.html#strip), which directs rustc to strip either symbols or debuginfo from a binary. This can be enabled like so:\n\n```toml\n[package]\n# ...\n\n[profile.release]\nstrip = \"debuginfo\"\n\n```\n\nPossible string values of `strip` are `\"none\"`, `\"debuginfo\"`, and `\"symbols\"`. The default is `\"none\"`.\n\nYou can also configure this option with the boolean values `true` or `false`. `strip = true` is equivalent to `strip = \"symbols\"`. `strip = false` is equivalent to `strip = \"none\"` and disables `strip` completely.\n\n### [debug-assertions](#debug-assertions)\n\nThe `debug-assertions` setting controls the [`-C debug-assertions` flag](about:blank/rustc/codegen-options/index.html#debug-assertions) which turns `cfg(debug_assertions)` [conditional compilation](about:blank/reference/conditional-compilation.html#debug_assertions) on or off. Debug assertions are intended to include runtime validation which is only available in debug/development builds. These may be things that are too expensive or otherwise undesirable in a release build. Debug assertions enables the [`debug_assert!` macro](reference/../../std/macro.debug_assert.html) in the standard library.\n\nThe valid options are:\n\n-   `true`: enabled\n-   `false`: disabled\n\n### [overflow-checks](#overflow-checks)\n\nThe `overflow-checks` setting controls the [`-C overflow-checks` flag](about:blank/rustc/codegen-options/index.html#overflow-checks) which controls the behavior of [runtime integer overflow](about:blank/reference/expressions/operator-expr.html#overflow). When overflow-checks are enabled, a panic will occur on overflow.\n\nThe valid options are:\n\n-   `true`: enabled\n-   `false`: disabled\n\n### [lto](#lto)\n\nThe `lto` setting controls `rustc`’s [`-C lto`](about:blank/rustc/codegen-options/index.html#lto), [`-C linker-plugin-lto`](about:blank/rustc/codegen-options/index.html#linker-plugin-lto), and [`-C embed-bitcode`](about:blank/rustc/codegen-options/index.html#embed-bitcode) options, which control LLVM’s [link time optimizations](https://llvm.org/docs/LinkTimeOptimization.html). LTO can produce better optimized code, using whole-program analysis, at the cost of longer linking time.\n\nThe valid options are:\n\n-   `false`: Performs “thin local LTO” which performs “thin” LTO on the local crate only across its [codegen units](about:blank/reference/profiles.html#codegen-units). No LTO is performed if codegen units is 1 or [opt-level](about:blank/reference/profiles.html#opt-level) is 0.\n-   `true` or `\"fat\"`: Performs “fat” LTO which attempts to perform optimizations across all crates within the dependency graph.\n-   `\"thin\"`: Performs [“thin” LTO](http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html). This is similar to “fat”, but takes substantially less time to run while still achieving performance gains similar to “fat”.\n-   `\"off\"`: Disables LTO.\n\nSee the [linker-plugin-lto chapter](reference/../../rustc/linker-plugin-lto.html) if you are interested in cross-language LTO. This is not yet supported natively in Cargo, but can be performed via `RUSTFLAGS`.\n\n### [panic](#panic)\n\nThe `panic` setting controls the [`-C panic` flag](about:blank/rustc/codegen-options/index.html#panic) which controls which panic strategy to use.\n\nThe valid options are:\n\n-   `\"unwind\"`: Unwind the stack upon panic.\n-   `\"abort\"`: Terminate the process upon panic.\n\nWhen set to `\"unwind\"`, the actual value depends on the default of the target platform. For example, the NVPTX platform does not support unwinding, so it always uses `\"abort\"`.\n\nTests, benchmarks, build scripts, and proc macros ignore the `panic` setting. The `rustc` test harness currently requires `unwind` behavior. See the [`panic-abort-tests`](about:blank/reference/unstable.html#panic-abort-tests) unstable flag which enables `abort` behavior.\n\nAdditionally, when using the `abort` strategy and building a test, all of the dependencies will also be forced to build with the `unwind` strategy.\n\n### [incremental](#incremental)\n\nThe `incremental` setting controls the [`-C incremental` flag](about:blank/rustc/codegen-options/index.html#incremental) which controls whether or not incremental compilation is enabled. Incremental compilation causes `rustc` to save additional information to disk which will be reused when recompiling the crate, improving re-compile times. The additional information is stored in the `target` directory.\n\nThe valid options are:\n\n-   `true`: enabled\n-   `false`: disabled\n\nIncremental compilation is only used for workspace members and “path” dependencies.\n\nThe incremental value can be overridden globally with the `CARGO_INCREMENTAL` [environment variable](reference/environment-variables.html) or the [`build.incremental`](about:blank/reference/config.html#buildincremental) config variable.\n\n### [codegen-units](#codegen-units)\n\nThe `codegen-units` setting controls the [`-C codegen-units` flag](about:blank/rustc/codegen-options/index.html#codegen-units) which controls how many “code generation units” a crate will be split into. More code generation units allows more of a crate to be processed in parallel possibly reducing compile time, but may produce slower code.\n\nThis option takes an integer greater than 0.\n\nThe default is 256 for [incremental](about:blank/reference/profiles.html#incremental) builds, and 16 for non-incremental builds.\n\n### [rpath](#rpath)\n\nThe `rpath` setting controls the [`-C rpath` flag](about:blank/rustc/codegen-options/index.html#rpath) which controls whether or not [`rpath`](https://en.wikipedia.org/wiki/Rpath) is enabled.\n\n## [Default profiles](#default-profiles)\n\n### [dev](#dev)\n\nThe `dev` profile is used for normal development and debugging. It is the default for build commands like [`cargo build`](reference/../commands/cargo-build.html), and is used for `cargo install --debug`.\n\nThe default settings for the `dev` profile are:\n\n```toml\n[profile.dev]\nopt-level = 0\ndebug = true\nsplit-debuginfo = '...'  # Platform-specific.\nstrip = \"none\"\ndebug-assertions = true\noverflow-checks = true\nlto = false\npanic = 'unwind'\nincremental = true\ncodegen-units = 256\nrpath = false\n\n```\n\n### [release](#release)\n\nThe `release` profile is intended for optimized artifacts used for releases and in production. This profile is used when the `--release` flag is used, and is the default for [`cargo install`](reference/../commands/cargo-install.html).\n\nThe default settings for the `release` profile are:\n\n```toml\n[profile.release]\nopt-level = 3\ndebug = false\nsplit-debuginfo = '...'  # Platform-specific.\nstrip = \"none\"\ndebug-assertions = false\noverflow-checks = false\nlto = false\npanic = 'unwind'\nincremental = false\ncodegen-units = 16\nrpath = false\n\n```\n\n### [test](#test)\n\nThe `test` profile is the default profile used by [`cargo test`](reference/../commands/cargo-test.html). The `test` profile inherits the settings from the [`dev`](about:blank/reference/profiles.html#dev) profile.\n\n### [bench](#bench)\n\nThe `bench` profile is the default profile used by [`cargo bench`](reference/../commands/cargo-bench.html). The `bench` profile inherits the settings from the [`release`](about:blank/reference/profiles.html#release) profile.\n\n### [Build Dependencies](#build-dependencies-1)\n\nTo compile quickly, all profiles, by default, do not optimize build dependencies (build scripts, proc macros, and their dependencies), and avoid computing debug info when a build dependency is not used as a runtime dependency. The default settings for build overrides are:\n\n```toml\n[profile.dev.build-override]\nopt-level = 0\ncodegen-units = 256\ndebug = false # when possible\n\n[profile.release.build-override]\nopt-level = 0\ncodegen-units = 256\n\n```\n\nHowever, if errors occur while running build dependencies, turning full debug info on will improve backtraces and debuggability when needed:\n\n```toml\ndebug = true\n\n```\n\nBuild dependencies otherwise inherit settings from the active profile in use, as described in [Profile selection](about:blank/reference/profiles.html#profile-selection).\n\n## [Custom profiles](#custom-profiles)\n\nIn addition to the built-in profiles, additional custom profiles can be defined. These may be useful for setting up multiple workflows and build modes. When defining a custom profile, you must specify the `inherits` key to specify which profile the custom profile inherits settings from when the setting is not specified.\n\nFor example, let’s say you want to compare a normal release build with a release build with [LTO](about:blank/reference/profiles.html#lto) optimizations, you can specify something like the following in `Cargo.toml`:\n\n```toml\n[profile.release-lto]\ninherits = \"release\"\nlto = true\n\n```\n\nThe `--profile` flag can then be used to choose this custom profile:\n\n```console\ncargo build --profile release-lto\n\n```\n\nThe output for each profile will be placed in a directory of the same name as the profile in the [`target` directory](reference/../guide/build-cache.html). As in the example above, the output would go into the `target/release-lto` directory.\n\n## [Profile selection](#profile-selection)\n\nThe profile used depends on the command, the command-line flags like `--release` or `--profile`, and the package (in the case of [overrides](about:blank/reference/profiles.html#overrides)). The default profile if none is specified is:\n\nYou can switch to a different profile using the `--profile=NAME` option which will used the given profile. The `--release` flag is equivalent to `--profile=release`.\n\nThe selected profile applies to all Cargo targets, including [library](about:blank/reference/cargo-targets.html#library), [binary](about:blank/reference/cargo-targets.html#binaries), [example](about:blank/reference/cargo-targets.html#examples), [test](about:blank/reference/cargo-targets.html#tests), and [benchmark](about:blank/reference/cargo-targets.html#benchmarks).\n\nThe profile for specific packages can be specified with [overrides](about:blank/reference/profiles.html#overrides), described below.\n\n## [Overrides](#overrides)\n\nProfile settings can be overridden for specific packages and build-time crates. To override the settings for a specific package, use the `package` table to change the settings for the named package:\n\n```toml\n# The `foo` package will use the -Copt-level=3 flag.\n[profile.dev.package.foo]\nopt-level = 3\n\n```\n\nThe package name is actually a [Package ID Spec](reference/pkgid-spec.html), so you can target individual versions of a package with syntax such as `[profile.dev.package.\"foo:2.1.0\"]`.\n\nTo override the settings for all dependencies (but not any workspace member), use the `\"*\"` package name:\n\n```toml\n# Set the default for dependencies.\n[profile.dev.package.\"*\"]\nopt-level = 2\n\n```\n\nTo override the settings for build scripts, proc macros, and their dependencies, use the `build-override` table:\n\n```toml\n# Set the settings for build scripts and proc-macros.\n[profile.dev.build-override]\nopt-level = 3\n\n```\n\n> Note: When a dependency is both a normal dependency and a build dependency, Cargo will try to only build it once when `--target` is not specified. When using `build-override`, the dependency may need to be built twice, once as a normal dependency and once with the overridden build settings. This may increase initial build times.\n\nThe precedence for which value is used is done in the following order (first match wins):\n\n1.  `[profile.dev.package.name]` — A named package.\n2.  `[profile.dev.package.\"*\"]` — For any non-workspace member.\n3.  `[profile.dev.build-override]` — Only for build scripts, proc macros, and their dependencies.\n4.  `[profile.dev]` — Settings in `Cargo.toml`.\n5.  Default values built-in to Cargo.\n\nOverrides cannot specify the `panic`, `lto`, or `rpath` settings.\n\n### [Overrides and generics](#overrides-and-generics)\n\nThe location where generic code is instantiated will influence the optimization settings used for that generic code. This can cause subtle interactions when using profile overrides to change the optimization level of a specific crate. If you attempt to raise the optimization level of a dependency which defines generic functions, those generic functions may not be optimized when used in your local crate. This is because the code may be generated in the crate where it is instantiated, and thus may use the optimization settings of that crate.\n\nFor example, [nalgebra](https://crates.io/crates/nalgebra) is a library which defines vectors and matrices making heavy use of generic parameters. If your local code defines concrete nalgebra types like `Vector4<f64>` and uses their methods, the corresponding nalgebra code will be instantiated and built within your crate. Thus, if you attempt to increase the optimization level of `nalgebra` using a profile override, it may not result in faster performance.\n\nFurther complicating the issue, `rustc` has some optimizations where it will attempt to share monomorphized generics between crates. If the opt-level is 2 or 3, then a crate will not use monomorphized generics from other crates, nor will it export locally defined monomorphized items to be shared with other crates. When experimenting with optimizing dependencies for development, consider trying opt-level 1, which will apply some optimizations while still allowing monomorphized items to be shared.\n\n## [Configuration](#configuration)\n\nThis document explains how Cargo’s configuration system works, as well as available keys or configuration. For configuration of a package through its manifest, see the [manifest format](reference/manifest.html).\n\n## [Hierarchical structure](#hierarchical-structure)\n\nCargo allows local configuration for a particular package as well as global configuration. It looks for configuration files in the current directory and all parent directories. If, for example, Cargo were invoked in `/projects/foo/bar/baz`, then the following configuration files would be probed for and unified in this order:\n\n-   `/projects/foo/bar/baz/.cargo/config.toml`\n-   `/projects/foo/bar/.cargo/config.toml`\n-   `/projects/foo/.cargo/config.toml`\n-   `/projects/.cargo/config.toml`\n-   `/.cargo/config.toml`\n-   `$CARGO_HOME/config.toml` which defaults to:\n    -   Windows: `%USERPROFILE%\\.cargo\\config.toml`\n    -   Unix: `$HOME/.cargo/config.toml`\n\nWith this structure, you can specify configuration per-package, and even possibly check it into version control. You can also specify personal defaults with a configuration file in your home directory.\n\nIf a key is specified in multiple config files, the values will get merged together. Numbers, strings, and booleans will use the value in the deeper config directory taking precedence over ancestor directories, where the home directory is the lowest priority. Arrays will be joined together with higher precedence items being placed later in the merged array.\n\nAt present, when being invoked from a workspace, Cargo does not read config files from crates within the workspace. i.e. if a workspace has two crates in it, named `/projects/foo/bar/baz/mylib` and `/projects/foo/bar/baz/mybin`, and there are Cargo configs at `/projects/foo/bar/baz/mylib/.cargo/config.toml` and `/projects/foo/bar/baz/mybin/.cargo/config.toml`, Cargo does not read those configuration files if it is invoked from the workspace root (`/projects/foo/bar/baz/`).\n\n> **Note:** Cargo also reads config files without the `.toml` extension, such as `.cargo/config`. Support for the `.toml` extension was added in version 1.39 and is the preferred form. If both files exist, Cargo will use the file without the extension.\n\n## [Configuration format](#configuration-format)\n\nConfiguration files are written in the [TOML format](https://toml.io/) (like the manifest), with simple key-value pairs inside of sections (tables). The following is a quick overview of all settings, with detailed descriptions found below.\n\n```toml\npaths = [\"/path/to/override\"] # path dependency overrides\n\n[alias]     # command aliases\nb = \"build\"\nc = \"check\"\nt = \"test\"\nr = \"run\"\nrr = \"run --release\"\nrecursive_example = \"rr --example recursions\"\nspace_example = [\"run\", \"--release\", \"--\", \"\\\"command list\\\"\"]\n\n[build]\njobs = 1                      # number of parallel jobs, defaults to # of CPUs\nrustc = \"rustc\"               # the rust compiler tool\nrustc-wrapper = \"…\"           # run this wrapper instead of `rustc`\nrustc-workspace-wrapper = \"…\" # run this wrapper instead of `rustc` for workspace members\nrustdoc = \"rustdoc\"           # the doc generator tool\ntarget = \"triple\"             # build for the target triple (ignored by `cargo install`)\ntarget-dir = \"target\"         # path of where to place all generated artifacts\nrustflags = [\"…\", \"…\"]        # custom flags to pass to all compiler invocations\nrustdocflags = [\"…\", \"…\"]     # custom flags to pass to rustdoc\nincremental = true            # whether or not to enable incremental compilation\ndep-info-basedir = \"…\"        # path for the base directory for targets in depfiles\n\n[doc]\nbrowser = \"chromium\"          # browser to use with `cargo doc --open`,\n                              # overrides the `BROWSER` environment variable\n\n[env]\n# Set ENV_VAR_NAME=value for any process run by Cargo\nENV_VAR_NAME = \"value\"\n# Set even if already present in environment\nENV_VAR_NAME_2 = { value = \"value\", force = true }\n# Value is relative to .cargo directory containing `config.toml`, make absolute\nENV_VAR_NAME_3 = { value = \"relative/path\", relative = true }\n\n[future-incompat-report]\nfrequency = 'always' # when to display a notification about a future incompat report\n\n[cargo-new]\nvcs = \"none\"              # VCS to use ('git', 'hg', 'pijul', 'fossil', 'none')\n\n[http]\ndebug = false               # HTTP debugging\nproxy = \"host:port\"         # HTTP proxy in libcurl format\nssl-version = \"tlsv1.3\"     # TLS version to use\nssl-version.max = \"tlsv1.3\" # maximum TLS version\nssl-version.min = \"tlsv1.1\" # minimum TLS version\ntimeout = 30                # timeout for each HTTP request, in seconds\nlow-speed-limit = 10        # network timeout threshold (bytes/sec)\ncainfo = \"cert.pem\"         # path to Certificate Authority (CA) bundle\ncheck-revoke = true         # check for SSL certificate revocation\nmultiplexing = true         # HTTP/2 multiplexing\nuser-agent = \"…\"            # the user-agent header\n\n[install]\nroot = \"/some/path\"         # `cargo install` destination directory\n\n[net]\nretry = 3                   # network retries\ngit-fetch-with-cli = true   # use the `git` executable for git operations\noffline = true              # do not access the network\n\n[net.ssh]\nknown-hosts = [\"...\"]       # known SSH host keys\n\n[patch.<registry>]\n# Same keys as for [patch] in Cargo.toml\n\n[profile.<name>]         # Modify profile settings via config.\ninherits = \"dev\"         # Inherits settings from [profile.dev].\nopt-level = 0            # Optimization level.\ndebug = true             # Include debug info.\nsplit-debuginfo = '...'  # Debug info splitting behavior.\nstrip = \"none\"           # Removes symbols or debuginfo.\ndebug-assertions = true  # Enables debug assertions.\noverflow-checks = true   # Enables runtime integer overflow checks.\nlto = false              # Sets link-time optimization.\npanic = 'unwind'         # The panic strategy.\nincremental = true       # Incremental compilation.\ncodegen-units = 16       # Number of code generation units.\nrpath = false            # Sets the rpath linking option.\n[profile.<name>.build-override]  # Overrides build-script settings.\n# Same keys for a normal profile.\n[profile.<name>.package.<name>]  # Override profile for a package.\n# Same keys for a normal profile (minus `panic`, `lto`, and `rpath`).\n\n[registries.<name>]  # registries other than crates.io\nindex = \"…\"          # URL of the registry index\ntoken = \"…\"          # authentication token for the registry\n\n[registry]\ndefault = \"…\"        # name of the default registry\ntoken = \"…\"          # authentication token for crates.io\n\n[source.<name>]      # source definition and replacement\nreplace-with = \"…\"   # replace this source with the given named source\ndirectory = \"…\"      # path to a directory source\nregistry = \"…\"       # URL to a registry source\nlocal-registry = \"…\" # path to a local registry source\ngit = \"…\"            # URL of a git repository source\nbranch = \"…\"         # branch name for the git repository\ntag = \"…\"            # tag name for the git repository\nrev = \"…\"            # revision for the git repository\n\n[target.<triple>]\nlinker = \"…\"              # linker to use\nrunner = \"…\"              # wrapper to run executables\nrustflags = [\"…\", \"…\"]    # custom flags for `rustc`\nrustdocflags = [\"…\", \"…\"] # custom flags for `rustdoc`\n\n[target.<cfg>]\nrunner = \"…\"            # wrapper to run executables\nrustflags = [\"…\", \"…\"]  # custom flags for `rustc`\n\n[target.<triple>.<links>] # `links` build script override\nrustc-link-lib = [\"foo\"]\nrustc-link-search = [\"/path/to/foo\"]\nrustc-flags = \"-L /some/path\"\nrustc-cfg = ['key=\"value\"']\nrustc-env = {key = \"value\"}\nrustc-cdylib-link-arg = [\"…\"]\nmetadata_key1 = \"value\"\nmetadata_key2 = \"value\"\n\n[term]\nquiet = false          # whether cargo output is quiet\nverbose = false        # whether cargo provides verbose output\ncolor = 'auto'         # whether cargo colorizes output\nhyperlinks = true      # whether cargo inserts links into output\nunicode = true         # whether cargo can render output using non-ASCII unicode characters\nprogress.when = 'auto' # whether cargo shows progress bar\nprogress.width = 80    # width of progress bar\n\n```\n\n## [Environment variables](#environment-variables)\n\nCargo can also be configured through environment variables in addition to the TOML configuration files. For each configuration key of the form `foo.bar` the environment variable `CARGO_FOO_BAR` can also be used to define the value. Keys are converted to uppercase, dots and dashes are converted to underscores. For example the `target.x86_64-unknown-linux-gnu.runner` key can also be defined by the `CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER` environment variable.\n\nEnvironment variables will take precedence over TOML configuration files. Currently only integer, boolean, string and some array values are supported to be defined by environment variables. [Descriptions below](about:blank/reference/config.html#configuration-keys) indicate which keys support environment variables and otherwise they are not supported due to [technical issues](https://github.com/rust-lang/cargo/issues/5416).\n\nIn addition to the system above, Cargo recognizes a few other specific [environment variables](reference/environment-variables.html).\n\n## [Command-line overrides](#command-line-overrides)\n\nCargo also accepts arbitrary configuration overrides through the `--config` command-line option. The argument should be in TOML syntax of `KEY=VALUE`:\n\n```console\ncargo --config net.git-fetch-with-cli=true fetch\n\n```\n\nThe `--config` option may be specified multiple times, in which case the values are merged in left-to-right order, using the same merging logic that is used when multiple configuration files apply. Configuration values specified this way take precedence over environment variables, which take precedence over configuration files.\n\nSome examples of what it looks like using Bourne shell syntax:\n\n```console\n# Most shells will require escaping.\ncargo --config http.proxy=\\\"http://example.com\\\" …\n\n# Spaces may be used.\ncargo --config \"net.git-fetch-with-cli = true\" …\n\n# TOML array example. Single quotes make it easier to read and write.\ncargo --config 'build.rustdocflags = [\"--html-in-header\", \"header.html\"]' …\n\n# Example of a complex TOML key.\ncargo --config \"target.'cfg(all(target_arch = \\\"arm\\\", target_os = \\\"none\\\"))'.runner = 'my-runner'\" …\n\n# Example of overriding a profile setting.\ncargo --config profile.dev.package.image.opt-level=3 …\n\n```\n\nThe `--config` option can also be used to pass paths to extra configuration files that Cargo should use for a specific invocation. Options from configuration files loaded this way follow the same precedence rules as other options specified directly with `--config`.\n\n## [Config-relative paths](#config-relative-paths)\n\nPaths in config files may be absolute, relative, or a bare name without any path separators. Paths for executables without a path separator will use the `PATH` environment variable to search for the executable. Paths for non-executables will be relative to where the config value is defined.\n\nIn particular, rules are:\n\n-   For environment variables, paths are relative to the current working directory.\n-   For config values loaded directly from the [`--config KEY=VALUE`](about:blank/reference/config.html#command-line-overrides) option, paths are relative to the current working directory.\n-   For config files, paths are relative to the parent directory of the directory where the config files were defined, no matter those files are from either the [hierarchical probing](about:blank/reference/config.html#hierarchical-structure) or the [`--config <path>`](about:blank/reference/config.html#command-line-overrides) option.\n\n> **Note:** To maintain consistency with existing `.cargo/config.toml` probing behavior, it is by design that a path in a config file passed via `--config <path>` is also relative to two levels up from the config file itself.\n> \n> To avoid unexpected results, the rule of thumb is putting your extra config files at the same level of discovered `.cargo/config.toml` in your project. For instance, given a project `/my/project`, it is recommended to put config files under `/my/project/.cargo` or a new directory at the same level, such as `/my/project/.config`.\n\n```toml\n# Relative path examples.\n\n[target.x86_64-unknown-linux-gnu]\nrunner = \"foo\"  # Searches `PATH` for `foo`.\n\n[source.vendored-sources]\n# Directory is relative to the parent where `.cargo/config.toml` is located.\n# For example, `/my/project/.cargo/config.toml` would result in `/my/project/vendor`.\ndirectory = \"vendor\"\n\n```\n\n## [Executable paths with arguments](#executable-paths-with-arguments)\n\nSome Cargo commands invoke external programs, which can be configured as a path and some number of arguments.\n\nThe value may be an array of strings like `['/path/to/program', 'somearg']` or a space-separated string like `'/path/to/program somearg'`. If the path to the executable contains a space, the list form must be used.\n\nIf Cargo is passing other arguments to the program such as a path to open or run, they will be passed after the last specified argument in the value of an option of this format. If the specified program does not have path separators, Cargo will search `PATH` for its executable.\n\n## [Credentials](#credentials)\n\nConfiguration values with sensitive information are stored in the `$CARGO_HOME/credentials.toml` file. This file is automatically created and updated by [`cargo login`](reference/../commands/cargo-login.html) and [`cargo logout`](reference/../commands/cargo-logout.html) when using the [`cargo:token`](about:blank/reference/registry-authentication.html#cargotoken) credential provider.\n\nTokens are used by some Cargo commands such as [`cargo publish`](reference/../commands/cargo-publish.html) for authenticating with remote registries. Care should be taken to protect the tokens and to keep them secret.\n\nIt follows the same format as Cargo config files.\n\n```toml\n[registry]\ntoken = \"…\"   # Access token for crates.io\n\n[registries.<name>]\ntoken = \"…\"   # Access token for the named registry\n\n```\n\nAs with most other config values, tokens may be specified with environment variables. The token for [crates.io](https://crates.io/) may be specified with the `CARGO_REGISTRY_TOKEN` environment variable. Tokens for other registries may be specified with environment variables of the form `CARGO_REGISTRIES_<name>_TOKEN` where `<name>` is the name of the registry in all capital letters.\n\n> **Note:** Cargo also reads and writes credential files without the `.toml` extension, such as `.cargo/credentials`. Support for the `.toml` extension was added in version 1.39. In version 1.68, Cargo writes to the file with the extension by default. However, for backward compatibility reason, when both files exist, Cargo will read and write the file without the extension.\n\n## [Configuration keys](#configuration-keys)\n\nThis section documents all configuration keys. The description for keys with variable parts are annotated with angled brackets like `target.<triple>` where the `<triple>` part can be any [target triple](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") like `target.x86_64-pc-windows-msvc`.\n\n### [`paths`](#paths)\n\n-   Type: array of strings (paths)\n-   Default: none\n-   Environment: not supported\n\nAn array of paths to local packages which are to be used as overrides for dependencies. For more information see the [Overriding Dependencies guide](about:blank/reference/overriding-dependencies.html#paths-overrides).\n\n### [`[alias]`](#alias)\n\n-   Type: string or array of strings\n-   Default: see below\n-   Environment: `CARGO_ALIAS_<name>`\n\nThe `[alias]` table defines CLI command aliases. For example, running `cargo b` is an alias for running `cargo build`. Each key in the table is the subcommand, and the value is the actual command to run. The value may be an array of strings, where the first element is the command and the following are arguments. It may also be a string, which will be split on spaces into subcommand and arguments. The following aliases are built-in to Cargo:\n\n```toml\n[alias]\nb = \"build\"\nc = \"check\"\nd = \"doc\"\nt = \"test\"\nr = \"run\"\nrm = \"remove\"\n\n```\n\nAliases are not allowed to redefine existing built-in commands.\n\nAliases are recursive:\n\n```toml\n[alias]\nrr = \"run --release\"\nrecursive_example = \"rr --example recursions\"\n\n```\n\n### [`[build]`](#build)\n\nThe `[build]` table controls build-time operations and compiler settings.\n\n#### [`build.jobs`](#buildjobs)\n\n-   Type: integer or string\n-   Default: number of logical CPUs\n-   Environment: `CARGO_BUILD_JOBS`\n\nSets the maximum number of compiler processes to run in parallel. If negative, it sets the maximum number of compiler processes to the number of logical CPUs plus provided value. Should not be 0. If a string `default` is provided, it sets the value back to defaults.\n\nCan be overridden with the `--jobs` CLI option.\n\n#### [`build.rustc`](#buildrustc)\n\n-   Type: string (program path)\n-   Default: “rustc”\n-   Environment: `CARGO_BUILD_RUSTC` or `RUSTC`\n\nSets the executable to use for `rustc`.\n\n#### [`build.rustc-wrapper`](#buildrustc-wrapper)\n\n-   Type: string (program path)\n-   Default: none\n-   Environment: `CARGO_BUILD_RUSTC_WRAPPER` or `RUSTC_WRAPPER`\n\nSets a wrapper to execute instead of `rustc`. The first argument passed to the wrapper is the path to the actual executable to use (i.e., `build.rustc`, if that is set, or `\"rustc\"` otherwise).\n\n#### [`build.rustc-workspace-wrapper`](#buildrustc-workspace-wrapper)\n\n-   Type: string (program path)\n-   Default: none\n-   Environment: `CARGO_BUILD_RUSTC_WORKSPACE_WRAPPER` or `RUSTC_WORKSPACE_WRAPPER`\n\nSets a wrapper to execute instead of `rustc`, for workspace members only. When building a single-package project without workspaces, that package is considered to be the workspace. The first argument passed to the wrapper is the path to the actual executable to use (i.e., `build.rustc`, if that is set, or `\"rustc\"` otherwise). It affects the filename hash so that artifacts produced by the wrapper are cached separately.\n\nIf both `rustc-wrapper` and `rustc-workspace-wrapper` are set, then they will be nested: the final invocation is `$RUSTC_WRAPPER $RUSTC_WORKSPACE_WRAPPER $RUSTC`.\n\n#### [`build.rustdoc`](#buildrustdoc)\n\n-   Type: string (program path)\n-   Default: “rustdoc”\n-   Environment: `CARGO_BUILD_RUSTDOC` or `RUSTDOC`\n\nSets the executable to use for `rustdoc`.\n\n#### [`build.target`](#buildtarget)\n\n-   Type: string or array of strings\n-   Default: host platform\n-   Environment: `CARGO_BUILD_TARGET`\n\nThe default [target platform triples](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") to compile to.\n\nThis allows passing either a string or an array of strings. Each string value is a target platform triple. The selected build targets will be built for each of the selected architectures.\n\nThe string value may also be a relative path to a `.json` target spec file.\n\nCan be overridden with the `--target` CLI option.\n\n```toml\n[build]\ntarget = [\"x86_64-unknown-linux-gnu\", \"i686-unknown-linux-gnu\"]\n\n```\n\n#### [`build.target-dir`](#buildtarget-dir)\n\n-   Type: string (path)\n-   Default: “target”\n-   Environment: `CARGO_BUILD_TARGET_DIR` or `CARGO_TARGET_DIR`\n\nThe path to where all compiler output is placed. The default if not specified is a directory named `target` located at the root of the workspace.\n\nCan be overridden with the `--target-dir` CLI option.\n\n#### [`build.rustflags`](#buildrustflags)\n\n-   Type: string or array of strings\n-   Default: none\n-   Environment: `CARGO_BUILD_RUSTFLAGS` or `CARGO_ENCODED_RUSTFLAGS` or `RUSTFLAGS`\n\nExtra command-line flags to pass to `rustc`. The value may be an array of strings or a space-separated string.\n\nThere are four mutually exclusive sources of extra flags. They are checked in order, with the first one being used:\n\n1.  `CARGO_ENCODED_RUSTFLAGS` environment variable.\n2.  `RUSTFLAGS` environment variable.\n3.  All matching `target.<triple>.rustflags` and `target.<cfg>.rustflags` config entries joined together.\n4.  `build.rustflags` config value.\n\nAdditional flags may also be passed with the [`cargo rustc`](reference/../commands/cargo-rustc.html) command.\n\nIf the `--target` flag (or [`build.target`](about:blank/reference/config.html#buildtarget)) is used, then the flags will only be passed to the compiler for the target. Things being built for the host, such as build scripts or proc macros, will not receive the args. Without `--target`, the flags will be passed to all compiler invocations (including build scripts and proc macros) because dependencies are shared. If you have args that you do not want to pass to build scripts or proc macros and are building for the host, pass `--target` with the [host triple](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\").\n\nIt is not recommended to pass in flags that Cargo itself usually manages. For example, the flags driven by [profiles](reference/profiles.html) are best handled by setting the appropriate profile setting.\n\n> **Caution**: Due to the low-level nature of passing flags directly to the compiler, this may cause a conflict with future versions of Cargo which may issue the same or similar flags on its own which may interfere with the flags you specify. This is an area where Cargo may not always be backwards compatible.\n\n#### [`build.rustdocflags`](#buildrustdocflags)\n\n-   Type: string or array of strings\n-   Default: none\n-   Environment: `CARGO_BUILD_RUSTDOCFLAGS` or `CARGO_ENCODED_RUSTDOCFLAGS` or `RUSTDOCFLAGS`\n\nExtra command-line flags to pass to `rustdoc`. The value may be an array of strings or a space-separated string.\n\nThere are four mutually exclusive sources of extra flags. They are checked in order, with the first one being used:\n\n1.  `CARGO_ENCODED_RUSTDOCFLAGS` environment variable.\n2.  `RUSTDOCFLAGS` environment variable.\n3.  All matching `target.<triple>.rustdocflags` config entries joined together.\n4.  `build.rustdocflags` config value.\n\nAdditional flags may also be passed with the [`cargo rustdoc`](reference/../commands/cargo-rustdoc.html) command.\n\n> **Caution**: Due to the low-level nature of passing flags directly to the compiler, this may cause a conflict with future versions of Cargo which may issue the same or similar flags on its own which may interfere with the flags you specify. This is an area where Cargo may not always be backwards compatible.\n\n#### [`build.incremental`](#buildincremental)\n\n-   Type: bool\n-   Default: from profile\n-   Environment: `CARGO_BUILD_INCREMENTAL` or `CARGO_INCREMENTAL`\n\nWhether or not to perform [incremental compilation](about:blank/reference/profiles.html#incremental). The default if not set is to use the value from the [profile](about:blank/reference/profiles.html#incremental). Otherwise this overrides the setting of all profiles.\n\nThe `CARGO_INCREMENTAL` environment variable can be set to `1` to force enable incremental compilation for all profiles, or `0` to disable it. This env var overrides the config setting.\n\n#### [`build.dep-info-basedir`](#builddep-info-basedir)\n\n-   Type: string (path)\n-   Default: none\n-   Environment: `CARGO_BUILD_DEP_INFO_BASEDIR`\n\nStrips the given path prefix from [dep info](about:blank/guide/build-cache.html#dep-info-files) file paths. This config setting is intended to convert absolute paths to relative paths for tools that require relative paths.\n\nThe setting itself is a config-relative path. So, for example, a value of `\".\"` would strip all paths starting with the parent directory of the `.cargo` directory.\n\n#### [`build.pipelining`](#buildpipelining)\n\nThis option is deprecated and unused. Cargo always has pipelining enabled.\n\n### [`[credential-alias]`](#credential-alias)\n\n-   Type: string or array of strings\n-   Default: empty\n-   Environment: `CARGO_CREDENTIAL_ALIAS_<name>`\n\nThe `[credential-alias]` table defines credential provider aliases. These aliases can be referenced as an element of the `registry.global-credential-providers` array, or as a credential provider for a specific registry under `registries.<NAME>.credential-provider`.\n\nIf specified as a string, the value will be split on spaces into path and arguments.\n\nFor example, to define an alias called `my-alias`:\n\n```toml\n[credential-alias]\nmy-alias = [\"/usr/bin/cargo-credential-example\", \"--argument\", \"value\", \"--flag\"]\n\n```\n\nSee [Registry Authentication](reference/registry-authentication.html) for more information.\n\n### [`[doc]`](#doc)\n\nThe `[doc]` table defines options for the [`cargo doc`](reference/../commands/cargo-doc.html) command.\n\n#### [`doc.browser`](#docbrowser)\n\n-   Type: string or array of strings ([program path with args](about:blank/reference/config.html#executable-paths-with-arguments))\n-   Default: `BROWSER` environment variable, or, if that is missing, opening the link in a system specific way\n\nThis option sets the browser to be used by [`cargo doc`](reference/../commands/cargo-doc.html), overriding the `BROWSER` environment variable when opening documentation with the `--open` option.\n\n### [`[cargo-new]`](#cargo-new)\n\nThe `[cargo-new]` table defines defaults for the [`cargo new`](reference/../commands/cargo-new.html) command.\n\n#### [`cargo-new.name`](#cargo-newname)\n\nThis option is deprecated and unused.\n\n#### [`cargo-new.email`](#cargo-newemail)\n\nThis option is deprecated and unused.\n\n#### [`cargo-new.vcs`](#cargo-newvcs)\n\n-   Type: string\n-   Default: “git” or “none”\n-   Environment: `CARGO_CARGO_NEW_VCS`\n\nSpecifies the source control system to use for initializing a new repository. Valid values are `git`, `hg` (for Mercurial), `pijul`, `fossil` or `none` to disable this behavior. Defaults to `git`, or `none` if already inside a VCS repository. Can be overridden with the `--vcs` CLI option.\n\n### [`[env]`](#env)\n\nThe `[env]` section allows you to set additional environment variables for build scripts, rustc invocations, `cargo run` and `cargo build`.\n\n```toml\n[env]\nOPENSSL_DIR = \"/opt/openssl\"\n\n```\n\nBy default, the variables specified will not override values that already exist in the environment. This behavior can be changed by setting the `force` flag.\n\nSetting the `relative` flag evaluates the value as a config-relative path that is relative to the parent directory of the `.cargo` directory that contains the `config.toml` file. The value of the environment variable will be the full absolute path.\n\n```toml\n[env]\nTMPDIR = { value = \"/home/tmp\", force = true }\nOPENSSL_DIR = { value = \"vendor/openssl\", relative = true }\n\n```\n\n### [`[future-incompat-report]`](#future-incompat-report)\n\nThe `[future-incompat-report]` table controls setting for [future incompat reporting](reference/future-incompat-report.html)\n\n#### [`future-incompat-report.frequency`](#future-incompat-reportfrequency)\n\n-   Type: string\n-   Default: “always”\n-   Environment: `CARGO_FUTURE_INCOMPAT_REPORT_FREQUENCY`\n\nControls how often we display a notification to the terminal when a future incompat report is available. Possible values:\n\n-   `always` (default): Always display a notification when a command (e.g. `cargo build`) produces a future incompat report\n-   `never`: Never display a notification\n\n### [`[http]`](#http)\n\nThe `[http]` table defines settings for HTTP behavior. This includes fetching crate dependencies and accessing remote git repositories.\n\n#### [`http.debug`](#httpdebug)\n\n-   Type: boolean\n-   Default: false\n-   Environment: `CARGO_HTTP_DEBUG`\n\nIf `true`, enables debugging of HTTP requests. The debug information can be seen by setting the `CARGO_LOG=network=debug` environment variable (or use `network=trace` for even more information).\n\nBe wary when posting logs from this output in a public location. The output may include headers with authentication tokens which you don’t want to leak! Be sure to review logs before posting them.\n\n#### [`http.proxy`](#httpproxy)\n\n-   Type: string\n-   Default: none\n-   Environment: `CARGO_HTTP_PROXY` or `HTTPS_PROXY` or `https_proxy` or `http_proxy`\n\nSets an HTTP and HTTPS proxy to use. The format is in [libcurl format](https://everything.curl.dev/transfers/conn/proxies#proxy-types) as in `[protocol://]host[:port]`. If not set, Cargo will also check the `http.proxy` setting in your global git configuration. If none of those are set, the `HTTPS_PROXY` or `https_proxy` environment variables set the proxy for HTTPS requests, and `http_proxy` sets it for HTTP requests.\n\n#### [`http.timeout`](#httptimeout)\n\n-   Type: integer\n-   Default: 30\n-   Environment: `CARGO_HTTP_TIMEOUT` or `HTTP_TIMEOUT`\n\nSets the timeout for each HTTP request, in seconds.\n\n#### [`http.cainfo`](#httpcainfo)\n\n-   Type: string (path)\n-   Default: none\n-   Environment: `CARGO_HTTP_CAINFO`\n\nPath to a Certificate Authority (CA) bundle file, used to verify TLS certificates. If not specified, Cargo attempts to use the system certificates.\n\n#### [`http.check-revoke`](#httpcheck-revoke)\n\n-   Type: boolean\n-   Default: true (Windows) false (all others)\n-   Environment: `CARGO_HTTP_CHECK_REVOKE`\n\nThis determines whether or not TLS certificate revocation checks should be performed. This only works on Windows.\n\n#### [`http.ssl-version`](#httpssl-version)\n\n-   Type: string or min/max table\n-   Default: none\n-   Environment: `CARGO_HTTP_SSL_VERSION`\n\nThis sets the minimum TLS version to use. It takes a string, with one of the possible values of “default”, “tlsv1”, “tlsv1.0”, “tlsv1.1”, “tlsv1.2”, or “tlsv1.3”.\n\nThis may alternatively take a table with two keys, `min` and `max`, which each take a string value of the same kind that specifies the minimum and maximum range of TLS versions to use.\n\nThe default is a minimum version of “tlsv1.0” and a max of the newest version supported on your platform, typically “tlsv1.3”.\n\n#### [`http.low-speed-limit`](#httplow-speed-limit)\n\n-   Type: integer\n-   Default: 10\n-   Environment: `CARGO_HTTP_LOW_SPEED_LIMIT`\n\nThis setting controls timeout behavior for slow connections. If the average transfer speed in bytes per second is below the given value for [`http.timeout`](about:blank/reference/config.html#httptimeout) seconds (default 30 seconds), then the connection is considered too slow and Cargo will abort and retry.\n\n#### [`http.multiplexing`](#httpmultiplexing)\n\n-   Type: boolean\n-   Default: true\n-   Environment: `CARGO_HTTP_MULTIPLEXING`\n\nWhen `true`, Cargo will attempt to use the HTTP2 protocol with multiplexing. This allows multiple requests to use the same connection, usually improving performance when fetching multiple files. If `false`, Cargo will use HTTP 1.1 without pipelining.\n\n#### [`http.user-agent`](#httpuser-agent)\n\n-   Type: string\n-   Default: Cargo’s version\n-   Environment: `CARGO_HTTP_USER_AGENT`\n\nSpecifies a custom user-agent header to use. The default if not specified is a string that includes Cargo’s version.\n\n### [`[install]`](#install)\n\nThe `[install]` table defines defaults for the [`cargo install`](reference/../commands/cargo-install.html) command.\n\n#### [`install.root`](#installroot)\n\n-   Type: string (path)\n-   Default: Cargo’s home directory\n-   Environment: `CARGO_INSTALL_ROOT`\n\nSets the path to the root directory for installing executables for [`cargo install`](reference/../commands/cargo-install.html). Executables go into a `bin` directory underneath the root.\n\nTo track information of installed executables, some extra files, such as `.crates.toml` and `.crates2.json`, are also created under this root.\n\nThe default if not specified is Cargo’s home directory (default `.cargo` in your home directory).\n\nCan be overridden with the `--root` command-line option.\n\n### [`[net]`](#net)\n\nThe `[net]` table controls networking configuration.\n\n#### [`net.retry`](#netretry)\n\n-   Type: integer\n-   Default: 3\n-   Environment: `CARGO_NET_RETRY`\n\nNumber of times to retry possibly spurious network errors.\n\n#### [`net.git-fetch-with-cli`](#netgit-fetch-with-cli)\n\n-   Type: boolean\n-   Default: false\n-   Environment: `CARGO_NET_GIT_FETCH_WITH_CLI`\n\nIf this is `true`, then Cargo will use the `git` executable to fetch registry indexes and git dependencies. If `false`, then it uses a built-in `git` library.\n\nSetting this to `true` can be helpful if you have special authentication requirements that Cargo does not support. See [Git Authentication](reference/../appendix/git-authentication.html) for more information about setting up git authentication.\n\n#### [`net.offline`](#netoffline)\n\n-   Type: boolean\n-   Default: false\n-   Environment: `CARGO_NET_OFFLINE`\n\nIf this is `true`, then Cargo will avoid accessing the network, and attempt to proceed with locally cached data. If `false`, Cargo will access the network as needed, and generate an error if it encounters a network error.\n\nCan be overridden with the `--offline` command-line option.\n\n#### [`net.ssh`](#netssh)\n\nThe `[net.ssh]` table contains settings for SSH connections.\n\n#### [`net.ssh.known-hosts`](#netsshknown-hosts)\n\n-   Type: array of strings\n-   Default: see description\n-   Environment: not supported\n\nThe `known-hosts` array contains a list of SSH host keys that should be accepted as valid when connecting to an SSH server (such as for SSH git dependencies). Each entry should be a string in a format similar to OpenSSH `known_hosts` files. Each string should start with one or more hostnames separated by commas, a space, the key type name, a space, and the base64-encoded key. For example:\n\n```toml\n[net.ssh]\nknown-hosts = [\n    \"example.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFO4Q5T0UV0SQevair9PFwoxY9dl4pQl3u5phoqJH3cF\"\n]\n\n```\n\nCargo will attempt to load known hosts keys from common locations supported in OpenSSH, and will join those with any listed in a Cargo configuration file. If any matching entry has the correct key, the connection will be allowed.\n\nCargo comes with the host keys for [github.com](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints) built-in. If those ever change, you can add the new keys to the config or known\\_hosts file.\n\nSee [Git Authentication](about:blank/appendix/git-authentication.html#ssh-known-hosts) for more details.\n\n### [`[patch]`](#patch)\n\nJust as you can override dependencies using [`[patch]` in `Cargo.toml`](about:blank/reference/overriding-dependencies.html#the-patch-section), you can override them in the cargo configuration file to apply those patches to any affected build. The format is identical to the one used in `Cargo.toml`.\n\nSince `.cargo/config.toml` files are not usually checked into source control, you should prefer patching using `Cargo.toml` where possible to ensure that other developers can compile your crate in their own environments. Patching through cargo configuration files is generally only appropriate when the patch section is automatically generated by an external build tool.\n\nIf a given dependency is patched both in a cargo configuration file and a `Cargo.toml` file, the patch in the configuration file is used. If multiple configuration files patch the same dependency, standard cargo configuration merging is used, which prefers the value defined closest to the current directory, with `$HOME/.cargo/config.toml` taking the lowest precedence.\n\nRelative `path` dependencies in such a `[patch]` section are resolved relative to the configuration file they appear in.\n\n### [`[profile]`](#profile)\n\nThe `[profile]` table can be used to globally change profile settings, and override settings specified in `Cargo.toml`. It has the same syntax and options as profiles specified in `Cargo.toml`. See the [Profiles chapter](reference/profiles.html) for details about the options.\n\n#### [`[profile.<name>.build-override]`](#profilenamebuild-override)\n\n-   Environment: `CARGO_PROFILE_<name>_BUILD_OVERRIDE_<key>`\n\nThe build-override table overrides settings for build scripts, proc macros, and their dependencies. It has the same keys as a normal profile. See the [overrides section](about:blank/reference/profiles.html#overrides) for more details.\n\n#### [`[profile.<name>.package.<name>]`](#profilenamepackagename)\n\n-   Environment: not supported\n\nThe package table overrides settings for specific packages. It has the same keys as a normal profile, minus the `panic`, `lto`, and `rpath` settings. See the [overrides section](about:blank/reference/profiles.html#overrides) for more details.\n\n#### [`profile.<name>.codegen-units`](#profilenamecodegen-units)\n\n-   Type: integer\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_CODEGEN_UNITS`\n\nSee [codegen-units](about:blank/reference/profiles.html#codegen-units).\n\n#### [`profile.<name>.debug`](#profilenamedebug)\n\n-   Type: integer or boolean\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_DEBUG`\n\nSee [debug](about:blank/reference/profiles.html#debug).\n\n#### [`profile.<name>.split-debuginfo`](#profilenamesplit-debuginfo)\n\n-   Type: string\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_SPLIT_DEBUGINFO`\n\nSee [split-debuginfo](about:blank/reference/profiles.html#split-debuginfo).\n\n#### [`profile.<name>.strip`](#profilenamestrip)\n\n-   Type: string or boolean\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_STRIP`\n\nSee [strip](about:blank/reference/profiles.html#strip).\n\n#### [`profile.<name>.debug-assertions`](#profilenamedebug-assertions)\n\n-   Type: boolean\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_DEBUG_ASSERTIONS`\n\nSee [debug-assertions](about:blank/reference/profiles.html#debug-assertions).\n\n#### [`profile.<name>.incremental`](#profilenameincremental)\n\n-   Type: boolean\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_INCREMENTAL`\n\nSee [incremental](about:blank/reference/profiles.html#incremental).\n\n#### [`profile.<name>.lto`](#profilenamelto)\n\n-   Type: string or boolean\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_LTO`\n\nSee [lto](about:blank/reference/profiles.html#lto).\n\n#### [`profile.<name>.overflow-checks`](#profilenameoverflow-checks)\n\n-   Type: boolean\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_OVERFLOW_CHECKS`\n\nSee [overflow-checks](about:blank/reference/profiles.html#overflow-checks).\n\n#### [`profile.<name>.opt-level`](#profilenameopt-level)\n\n-   Type: integer or string\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_OPT_LEVEL`\n\nSee [opt-level](about:blank/reference/profiles.html#opt-level).\n\n#### [`profile.<name>.panic`](#profilenamepanic)\n\n-   Type: string\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_PANIC`\n\nSee [panic](about:blank/reference/profiles.html#panic).\n\n#### [`profile.<name>.rpath`](#profilenamerpath)\n\n-   Type: boolean\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_RPATH`\n\nSee [rpath](about:blank/reference/profiles.html#rpath).\n\n#### [`profile.<name>.strip`](#profilenamestrip-1)\n\n-   Type: string\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_STRIP`\n\nSee [strip](about:blank/reference/profiles.html#strip).\n\n### [`[registries]`](#registries)\n\nThe `[registries]` table is used for specifying additional [registries](reference/registries.html). It consists of a sub-table for each named registry.\n\n#### [`registries.<name>.index`](#registriesnameindex)\n\n-   Type: string (url)\n-   Default: none\n-   Environment: `CARGO_REGISTRIES_<name>_INDEX`\n\nSpecifies the URL of the index for the registry.\n\n#### [`registries.<name>.token`](#registriesnametoken)\n\n-   Type: string\n-   Default: none\n-   Environment: `CARGO_REGISTRIES_<name>_TOKEN`\n\nSpecifies the authentication token for the given registry. This value should only appear in the [credentials](about:blank/reference/config.html#credentials) file. This is used for registry commands like [`cargo publish`](reference/../commands/cargo-publish.html) that require authentication.\n\nCan be overridden with the `--token` command-line option.\n\n#### [`registries.<name>.credential-provider`](#registriesnamecredential-provider)\n\n-   Type: string or array of path and arguments\n-   Default: none\n-   Environment: `CARGO_REGISTRIES_<name>_CREDENTIAL_PROVIDER`\n\nSpecifies the credential provider for the given registry. If not set, the providers in [`registry.global-credential-providers`](about:blank/reference/config.html#registryglobal-credential-providers) will be used.\n\nIf specified as a string, path and arguments will be split on spaces. For paths or arguments that contain spaces, use an array.\n\nIf the value exists in the [`[credential-alias]`](about:blank/reference/config.html#credential-alias) table, the alias will be used.\n\nSee [Registry Authentication](reference/registry-authentication.html) for more information.\n\n#### [`registries.crates-io.protocol`](#registriescrates-ioprotocol)\n\n-   Type: string\n-   Default: `sparse`\n-   Environment: `CARGO_REGISTRIES_CRATES_IO_PROTOCOL`\n\nSpecifies the protocol used to access crates.io. Allowed values are `git` or `sparse`.\n\n`git` causes Cargo to clone the entire index of all packages ever published to [crates.io](https://crates.io/) from [https://github.com/rust-lang/crates.io-index/](https://github.com/rust-lang/crates.io-index/). This can have performance implications due to the size of the index. `sparse` is a newer protocol which uses HTTPS to download only what is necessary from [https://index.crates.io/](https://index.crates.io/). This can result in a significant performance improvement for resolving new dependencies in most situations.\n\nMore information about registry protocols may be found in the [Registries chapter](reference/registries.html).\n\n### [`[registry]`](#registry)\n\nThe `[registry]` table controls the default registry used when one is not specified.\n\n#### [`registry.index`](#registryindex)\n\nThis value is no longer accepted and should not be used.\n\n#### [`registry.default`](#registrydefault)\n\n-   Type: string\n-   Default: `\"crates-io\"`\n-   Environment: `CARGO_REGISTRY_DEFAULT`\n\nThe name of the registry (from the [`registries` table](about:blank/reference/config.html#registries)) to use by default for registry commands like [`cargo publish`](reference/../commands/cargo-publish.html).\n\nCan be overridden with the `--registry` command-line option.\n\n#### [`registry.credential-provider`](#registrycredential-provider)\n\n-   Type: string or array of path and arguments\n-   Default: none\n-   Environment: `CARGO_REGISTRY_CREDENTIAL_PROVIDER`\n\nSpecifies the credential provider for [crates.io](https://crates.io/). If not set, the providers in [`registry.global-credential-providers`](about:blank/reference/config.html#registryglobal-credential-providers) will be used.\n\nIf specified as a string, path and arguments will be split on spaces. For paths or arguments that contain spaces, use an array.\n\nIf the value exists in the `[credential-alias]` table, the alias will be used.\n\nSee [Registry Authentication](reference/registry-authentication.html) for more information.\n\n#### [`registry.token`](#registrytoken)\n\n-   Type: string\n-   Default: none\n-   Environment: `CARGO_REGISTRY_TOKEN`\n\nSpecifies the authentication token for [crates.io](https://crates.io/). This value should only appear in the [credentials](about:blank/reference/config.html#credentials) file. This is used for registry commands like [`cargo publish`](reference/../commands/cargo-publish.html) that require authentication.\n\nCan be overridden with the `--token` command-line option.\n\n#### [`registry.global-credential-providers`](#registryglobal-credential-providers)\n\n-   Type: array\n-   Default: `[\"cargo:token\"]`\n-   Environment: `CARGO_REGISTRY_GLOBAL_CREDENTIAL_PROVIDERS`\n\nSpecifies the list of global credential providers. If credential provider is not set for a specific registry using `registries.<name>.credential-provider`, Cargo will use the credential providers in this list. Providers toward the end of the list have precedence.\n\nPath and arguments are split on spaces. If the path or arguments contains spaces, the credential provider should be defined in the [`[credential-alias]`](about:blank/reference/config.html#credential-alias) table and referenced here by its alias.\n\nSee [Registry Authentication](reference/registry-authentication.html) for more information.\n\n### [`[source]`](#source)\n\nThe `[source]` table defines the registry sources available. See [Source Replacement](reference/source-replacement.html) for more information. It consists of a sub-table for each named source. A source should only define one kind (directory, registry, local-registry, or git).\n\n#### [`source.<name>.replace-with`](#sourcenamereplace-with)\n\n-   Type: string\n-   Default: none\n-   Environment: not supported\n\nIf set, replace this source with the given named source or named registry.\n\n#### [`source.<name>.directory`](#sourcenamedirectory)\n\n-   Type: string (path)\n-   Default: none\n-   Environment: not supported\n\nSets the path to a directory to use as a directory source.\n\n#### [`source.<name>.registry`](#sourcenameregistry)\n\n-   Type: string (url)\n-   Default: none\n-   Environment: not supported\n\nSets the URL to use for a registry source.\n\n#### [`source.<name>.local-registry`](#sourcenamelocal-registry)\n\n-   Type: string (path)\n-   Default: none\n-   Environment: not supported\n\nSets the path to a directory to use as a local registry source.\n\n#### [`source.<name>.git`](#sourcenamegit)\n\n-   Type: string (url)\n-   Default: none\n-   Environment: not supported\n\nSets the URL to use for a git repository source.\n\n#### [`source.<name>.branch`](#sourcenamebranch)\n\n-   Type: string\n-   Default: none\n-   Environment: not supported\n\nSets the branch name to use for a git repository.\n\nIf none of `branch`, `tag`, or `rev` is set, defaults to the `master` branch.\n\n#### [`source.<name>.tag`](#sourcenametag)\n\n-   Type: string\n-   Default: none\n-   Environment: not supported\n\nSets the tag name to use for a git repository.\n\nIf none of `branch`, `tag`, or `rev` is set, defaults to the `master` branch.\n\n#### [`source.<name>.rev`](#sourcenamerev)\n\n-   Type: string\n-   Default: none\n-   Environment: not supported\n\nSets the [revision](https://git-scm.com/docs/gitrevisions) to use for a git repository.\n\nIf none of `branch`, `tag`, or `rev` is set, defaults to the `master` branch.\n\n### [`[target]`](#target)\n\nThe `[target]` table is used for specifying settings for specific platform targets. It consists of a sub-table which is either a [platform triple](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") or a [`cfg()` expression](reference/../../reference/conditional-compilation.html). The given values will be used if the target platform matches either the `<triple>` value or the `<cfg>` expression.\n\n```toml\n[target.thumbv7m-none-eabi]\nlinker = \"arm-none-eabi-gcc\"\nrunner = \"my-emulator\"\nrustflags = [\"…\", \"…\"]\n\n[target.'cfg(all(target_arch = \"arm\", target_os = \"none\"))']\nrunner = \"my-arm-wrapper\"\nrustflags = [\"…\", \"…\"]\n\n```\n\n`cfg` values come from those built-in to the compiler (run `rustc --print=cfg` to view), values set by [build scripts](reference/build-scripts.html), and extra `--cfg` flags passed to `rustc` (such as those defined in `RUSTFLAGS`). Do not try to match on `debug_assertions` or Cargo features like `feature=\"foo\"`.\n\nIf using a target spec JSON file, the [`<triple>`](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") value is the filename stem. For example `--target foo/bar.json` would match `[target.bar]`.\n\n#### [`target.<triple>.ar`](#targettriplear)\n\nThis option is deprecated and unused.\n\n#### [`target.<triple>.linker`](#targettriplelinker)\n\n-   Type: string (program path)\n-   Default: none\n-   Environment: `CARGO_TARGET_<triple>_LINKER`\n\nSpecifies the linker which is passed to `rustc` (via [`-C linker`](about:blank/rustc/codegen-options/index.html#linker)) when the [`<triple>`](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") is being compiled for. By default, the linker is not overridden.\n\n#### [`target.<cfg>.linker`](#targetcfglinker)\n\nThis is similar to the [target linker](about:blank/reference/config.html#targettriplelinker), but using a [`cfg()` expression](reference/../../reference/conditional-compilation.html). If both a [`<triple>`](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") and `<cfg>` runner match, the `<triple>` will take precedence. It is an error if more than one `<cfg>` runner matches the current target.\n\n#### [`target.<triple>.runner`](#targettriplerunner)\n\n-   Type: string or array of strings ([program path with args](about:blank/reference/config.html#executable-paths-with-arguments))\n-   Default: none\n-   Environment: `CARGO_TARGET_<triple>_RUNNER`\n\nIf a runner is provided, executables for the target [`<triple>`](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") will be executed by invoking the specified runner with the actual executable passed as an argument. This applies to [`cargo run`](reference/../commands/cargo-run.html), [`cargo test`](reference/../commands/cargo-test.html) and [`cargo bench`](reference/../commands/cargo-bench.html) commands. By default, compiled executables are executed directly.\n\n#### [`target.<cfg>.runner`](#targetcfgrunner)\n\nThis is similar to the [target runner](about:blank/reference/config.html#targettriplerunner), but using a [`cfg()` expression](reference/../../reference/conditional-compilation.html). If both a [`<triple>`](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") and `<cfg>` runner match, the `<triple>` will take precedence. It is an error if more than one `<cfg>` runner matches the current target.\n\n#### [`target.<triple>.rustflags`](#targettriplerustflags)\n\n-   Type: string or array of strings\n-   Default: none\n-   Environment: `CARGO_TARGET_<triple>_RUSTFLAGS`\n\nPasses a set of custom flags to the compiler for this [`<triple>`](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\"). The value may be an array of strings or a space-separated string.\n\nSee [`build.rustflags`](about:blank/reference/config.html#buildrustflags) for more details on the different ways to specific extra flags.\n\n#### [`target.<cfg>.rustflags`](#targetcfgrustflags)\n\nThis is similar to the [target rustflags](about:blank/reference/config.html#targettriplerustflags), but using a [`cfg()` expression](reference/../../reference/conditional-compilation.html). If several `<cfg>` and [`<triple>`](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") entries match the current target, the flags are joined together.\n\n#### [`target.<triple>.rustdocflags`](#targettriplerustdocflags)\n\n-   Type: string or array of strings\n-   Default: none\n-   Environment: `CARGO_TARGET_<triple>_RUSTDOCFLAGS`\n\nPasses a set of custom flags to the compiler for this [`<triple>`](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\"). The value may be an array of strings or a space-separated string.\n\nSee [`build.rustdocflags`](about:blank/reference/config.html#buildrustdocflags) for more details on the different ways to specific extra flags.\n\n#### [`target.<triple>.<links>`](#targettriplelinks)\n\nThe links sub-table provides a way to [override a build script](about:blank/reference/build-scripts.html#overriding-build-scripts). When specified, the build script for the given `links` library will not be run, and the given values will be used instead.\n\n```toml\n[target.x86_64-unknown-linux-gnu.foo]\nrustc-link-lib = [\"foo\"]\nrustc-link-search = [\"/path/to/foo\"]\nrustc-flags = \"-L /some/path\"\nrustc-cfg = ['key=\"value\"']\nrustc-env = {key = \"value\"}\nrustc-cdylib-link-arg = [\"…\"]\nmetadata_key1 = \"value\"\nmetadata_key2 = \"value\"\n\n```\n\n### [`[term]`](#term)\n\nThe `[term]` table controls terminal output and interaction.\n\n#### [`term.quiet`](#termquiet)\n\n-   Type: boolean\n-   Default: false\n-   Environment: `CARGO_TERM_QUIET`\n\nControls whether or not log messages are displayed by Cargo.\n\nSpecifying the `--quiet` flag will override and force quiet output. Specifying the `--verbose` flag will override and disable quiet output.\n\n#### [`term.verbose`](#termverbose)\n\n-   Type: boolean\n-   Default: false\n-   Environment: `CARGO_TERM_VERBOSE`\n\nControls whether or not extra detailed messages are displayed by Cargo.\n\nSpecifying the `--quiet` flag will override and disable verbose output. Specifying the `--verbose` flag will override and force verbose output.\n\n#### [`term.color`](#termcolor)\n\n-   Type: string\n-   Default: “auto”\n-   Environment: `CARGO_TERM_COLOR`\n\nControls whether or not colored output is used in the terminal. Possible values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nCan be overridden with the `--color` command-line option.\n\n#### [`term.hyperlinks`](#termhyperlinks)\n\n-   Type: bool\n-   Default: auto-detect\n-   Environment: `CARGO_TERM_HYPERLINKS`\n\nControls whether or not hyperlinks are used in the terminal.\n\n#### [`term.unicode`](#termunicode)\n\n-   Type: bool\n-   Default: auto-detect\n-   Environment: `CARGO_TERM_UNICODE`\n\nControl whether output can be rendered using non-ASCII unicode characters.\n\n#### [`term.progress.when`](#termprogresswhen)\n\n-   Type: string\n-   Default: “auto”\n-   Environment: `CARGO_TERM_PROGRESS_WHEN`\n\nControls whether or not progress bar is shown in the terminal. Possible values:\n\n-   `auto` (default): Intelligently guess whether to show progress bar.\n-   `always`: Always show progress bar.\n-   `never`: Never show progress bar.\n\n#### [`term.progress.width`](#termprogresswidth)\n\n-   Type: integer\n-   Default: none\n-   Environment: `CARGO_TERM_PROGRESS_WIDTH`\n\nSets the width for progress bar.\n\n## [Environment Variables](#environment-variables-1)\n\nCargo sets and reads a number of environment variables which your code can detect or override. Here is a list of the variables Cargo sets, organized by when it interacts with them:\n\n## [Environment variables Cargo reads](#environment-variables-cargo-reads)\n\nYou can override these environment variables to change Cargo’s behavior on your system:\n\n-   `CARGO_LOG` — Cargo uses the [`tracing`](https://docs.rs/tracing) crate to display debug log messages. The `CARGO_LOG` environment variable can be set to enable debug logging, with a value such as `trace`, `debug`, or `warn`. Usually it is only used during debugging. For more details refer to the [Debug logging](https://doc.crates.io/contrib/implementation/debugging.html#logging).\n-   `CARGO_HOME` — Cargo maintains a local cache of the registry index and of git checkouts of crates. By default these are stored under `$HOME/.cargo` (`%USERPROFILE%\\.cargo` on Windows), but this variable overrides the location of this directory. Once a crate is cached it is not removed by the clean command. For more details refer to the [guide](reference/../guide/cargo-home.html).\n-   `CARGO_TARGET_DIR` — Location of where to place all generated artifacts, relative to the current working directory. See [`build.target-dir`](about:blank/reference/config.html#buildtarget-dir) to set via config.\n-   `CARGO` — If set, Cargo will forward this value instead of setting it to its own auto-detected path when it builds crates and when it executes build scripts and external subcommands. This value is not directly executed by Cargo, and should always point at a command that behaves exactly like `cargo`, as that’s what users of the variable will be expecting.\n-   `RUSTC` — Instead of running `rustc`, Cargo will execute this specified compiler instead. See [`build.rustc`](about:blank/reference/config.html#buildrustc) to set via config.\n-   `RUSTC_WRAPPER` — Instead of simply running `rustc`, Cargo will execute this specified wrapper, passing as its command-line arguments the rustc invocation, with the first argument being the path to the actual rustc. Useful to set up a build cache tool such as `sccache`. See [`build.rustc-wrapper`](about:blank/reference/config.html#buildrustc-wrapper) to set via config. Setting this to the empty string overwrites the config and resets cargo to not use a wrapper.\n-   `RUSTC_WORKSPACE_WRAPPER` — Instead of simply running `rustc`, for workspace members Cargo will execute this specified wrapper, passing as its command-line arguments the rustc invocation, with the first argument being the path to the actual rustc. When building a single-package project without workspaces, that package is considered to be the workspace. It affects the filename hash so that artifacts produced by the wrapper are cached separately. See [`build.rustc-workspace-wrapper`](about:blank/reference/config.html#buildrustc-workspace-wrapper) to set via config. Setting this to the empty string overwrites the config and resets cargo to not use a wrapper for workspace members. If both `RUSTC_WRAPPER` and `RUSTC_WORKSPACE_WRAPPER` are set, then they will be nested: the final invocation is `$RUSTC_WRAPPER $RUSTC_WORKSPACE_WRAPPER $RUSTC`.\n-   `RUSTDOC` — Instead of running `rustdoc`, Cargo will execute this specified `rustdoc` instance instead. See [`build.rustdoc`](about:blank/reference/config.html#buildrustdoc) to set via config.\n-   `RUSTDOCFLAGS` — A space-separated list of custom flags to pass to all `rustdoc` invocations that Cargo performs. In contrast with [`cargo rustdoc`](reference/../commands/cargo-rustdoc.html), this is useful for passing a flag to _all_ `rustdoc` instances. See [`build.rustdocflags`](about:blank/reference/config.html#buildrustdocflags) for some more ways to set flags. This string is split by whitespace; for a more robust encoding of multiple arguments, see `CARGO_ENCODED_RUSTDOCFLAGS`.\n-   `CARGO_ENCODED_RUSTDOCFLAGS` — A list of custom flags separated by `0x1f` (ASCII Unit Separator) to pass to all `rustdoc` invocations that Cargo performs.\n-   `RUSTFLAGS` — A space-separated list of custom flags to pass to all compiler invocations that Cargo performs. In contrast with [`cargo rustc`](reference/../commands/cargo-rustc.html), this is useful for passing a flag to _all_ compiler instances. See [`build.rustflags`](about:blank/reference/config.html#buildrustflags) for some more ways to set flags. This string is split by whitespace; for a more robust encoding of multiple arguments, see `CARGO_ENCODED_RUSTFLAGS`.\n-   `CARGO_ENCODED_RUSTFLAGS` — A list of custom flags separated by `0x1f` (ASCII Unit Separator) to pass to all compiler invocations that Cargo performs.\n-   `CARGO_INCREMENTAL` — If this is set to 1 then Cargo will force [incremental compilation](about:blank/reference/profiles.html#incremental) to be enabled for the current compilation, and when set to 0 it will force disabling it. If this env var isn’t present then cargo’s defaults will otherwise be used. See also [`build.incremental`](about:blank/reference/config.html#buildincremental) config value.\n-   `CARGO_CACHE_RUSTC_INFO` — If this is set to 0 then Cargo will not try to cache compiler version information.\n-   `HTTPS_PROXY` or `https_proxy` or `http_proxy` — The HTTP proxy to use, see [`http.proxy`](about:blank/reference/config.html#httpproxy) for more detail.\n-   `HTTP_TIMEOUT` — The HTTP timeout in seconds, see [`http.timeout`](about:blank/reference/config.html#httptimeout) for more detail.\n-   `TERM` — If this is set to `dumb`, it disables the progress bar.\n-   `BROWSER` — The web browser to execute to open documentation with [`cargo doc`](reference/../commands/cargo-doc.html)’s’ `--open` flag, see [`doc.browser`](about:blank/reference/config.html#docbrowser) for more details.\n-   `RUSTFMT` — Instead of running `rustfmt`, [`cargo fmt`](https://github.com/rust-lang/rustfmt) will execute this specified `rustfmt` instance instead.\n\n### [Configuration environment variables](#configuration-environment-variables)\n\nCargo reads environment variables for some configuration values. See the [configuration chapter](about:blank/reference/config.html#environment-variables) for more details. In summary, the supported environment variables are:\n\n-   `CARGO_ALIAS_<name>` — Command aliases, see [`alias`](about:blank/reference/config.html#alias).\n-   `CARGO_BUILD_JOBS` — Number of parallel jobs, see [`build.jobs`](about:blank/reference/config.html#buildjobs).\n-   `CARGO_BUILD_RUSTC` — The `rustc` executable, see [`build.rustc`](about:blank/reference/config.html#buildrustc).\n-   `CARGO_BUILD_RUSTC_WRAPPER` — The `rustc` wrapper, see [`build.rustc-wrapper`](about:blank/reference/config.html#buildrustc-wrapper).\n-   `CARGO_BUILD_RUSTC_WORKSPACE_WRAPPER` — The `rustc` wrapper for workspace members only, see [`build.rustc-workspace-wrapper`](about:blank/reference/config.html#buildrustc-workspace-wrapper).\n-   `CARGO_BUILD_RUSTDOC` — The `rustdoc` executable, see [`build.rustdoc`](about:blank/reference/config.html#buildrustdoc).\n-   `CARGO_BUILD_TARGET` — The default target platform, see [`build.target`](about:blank/reference/config.html#buildtarget).\n-   `CARGO_BUILD_TARGET_DIR` — The default output directory, see [`build.target-dir`](about:blank/reference/config.html#buildtarget-dir).\n-   `CARGO_BUILD_RUSTFLAGS` — Extra `rustc` flags, see [`build.rustflags`](about:blank/reference/config.html#buildrustflags).\n-   `CARGO_BUILD_RUSTDOCFLAGS` — Extra `rustdoc` flags, see [`build.rustdocflags`](about:blank/reference/config.html#buildrustdocflags).\n-   `CARGO_BUILD_INCREMENTAL` — Incremental compilation, see [`build.incremental`](about:blank/reference/config.html#buildincremental).\n-   `CARGO_BUILD_DEP_INFO_BASEDIR` — Dep-info relative directory, see [`build.dep-info-basedir`](about:blank/reference/config.html#builddep-info-basedir).\n-   `CARGO_CARGO_NEW_VCS` — The default source control system with [`cargo new`](reference/../commands/cargo-new.html), see [`cargo-new.vcs`](about:blank/reference/config.html#cargo-newvcs).\n-   `CARGO_FUTURE_INCOMPAT_REPORT_FREQUENCY` — How often we should generate a future incompat report notification, see [`future-incompat-report.frequency`](about:blank/reference/config.html#future-incompat-reportfrequency).\n-   `CARGO_HTTP_DEBUG` — Enables HTTP debugging, see [`http.debug`](about:blank/reference/config.html#httpdebug).\n-   `CARGO_HTTP_PROXY` — Enables HTTP proxy, see [`http.proxy`](about:blank/reference/config.html#httpproxy).\n-   `CARGO_HTTP_TIMEOUT` — The HTTP timeout, see [`http.timeout`](about:blank/reference/config.html#httptimeout).\n-   `CARGO_HTTP_CAINFO` — The TLS certificate Certificate Authority file, see [`http.cainfo`](about:blank/reference/config.html#httpcainfo).\n-   `CARGO_HTTP_CHECK_REVOKE` — Disables TLS certificate revocation checks, see [`http.check-revoke`](about:blank/reference/config.html#httpcheck-revoke).\n-   `CARGO_HTTP_SSL_VERSION` — The TLS version to use, see [`http.ssl-version`](about:blank/reference/config.html#httpssl-version).\n-   `CARGO_HTTP_LOW_SPEED_LIMIT` — The HTTP low-speed limit, see [`http.low-speed-limit`](about:blank/reference/config.html#httplow-speed-limit).\n-   `CARGO_HTTP_MULTIPLEXING` — Whether HTTP/2 multiplexing is used, see [`http.multiplexing`](about:blank/reference/config.html#httpmultiplexing).\n-   `CARGO_HTTP_USER_AGENT` — The HTTP user-agent header, see [`http.user-agent`](about:blank/reference/config.html#httpuser-agent).\n-   `CARGO_INSTALL_ROOT` — The default directory for [`cargo install`](reference/../commands/cargo-install.html), see [`install.root`](about:blank/reference/config.html#installroot).\n-   `CARGO_NET_RETRY` — Number of times to retry network errors, see [`net.retry`](about:blank/reference/config.html#netretry).\n-   `CARGO_NET_GIT_FETCH_WITH_CLI` — Enables the use of the `git` executable to fetch, see [`net.git-fetch-with-cli`](about:blank/reference/config.html#netgit-fetch-with-cli).\n-   `CARGO_NET_OFFLINE` — Offline mode, see [`net.offline`](about:blank/reference/config.html#netoffline).\n-   `CARGO_PROFILE_<name>_BUILD_OVERRIDE_<key>` — Override build script profile, see [`profile.<name>.build-override`](about:blank/reference/config.html#profilenamebuild-override).\n-   `CARGO_PROFILE_<name>_CODEGEN_UNITS` — Set code generation units, see [`profile.<name>.codegen-units`](about:blank/reference/config.html#profilenamecodegen-units).\n-   `CARGO_PROFILE_<name>_DEBUG` — What kind of debug info to include, see [`profile.<name>.debug`](about:blank/reference/config.html#profilenamedebug).\n-   `CARGO_PROFILE_<name>_DEBUG_ASSERTIONS` — Enable/disable debug assertions, see [`profile.<name>.debug-assertions`](about:blank/reference/config.html#profilenamedebug-assertions).\n-   `CARGO_PROFILE_<name>_INCREMENTAL` — Enable/disable incremental compilation, see [`profile.<name>.incremental`](about:blank/reference/config.html#profilenameincremental).\n-   `CARGO_PROFILE_<name>_LTO` — Link-time optimization, see [`profile.<name>.lto`](about:blank/reference/config.html#profilenamelto).\n-   `CARGO_PROFILE_<name>_OVERFLOW_CHECKS` — Enable/disable overflow checks, see [`profile.<name>.overflow-checks`](about:blank/reference/config.html#profilenameoverflow-checks).\n-   `CARGO_PROFILE_<name>_OPT_LEVEL` — Set the optimization level, see [`profile.<name>.opt-level`](about:blank/reference/config.html#profilenameopt-level).\n-   `CARGO_PROFILE_<name>_PANIC` — The panic strategy to use, see [`profile.<name>.panic`](about:blank/reference/config.html#profilenamepanic).\n-   `CARGO_PROFILE_<name>_RPATH` — The rpath linking option, see [`profile.<name>.rpath`](about:blank/reference/config.html#profilenamerpath).\n-   `CARGO_PROFILE_<name>_SPLIT_DEBUGINFO` — Controls debug file output behavior, see [`profile.<name>.split-debuginfo`](about:blank/reference/config.html#profilenamesplit-debuginfo).\n-   `CARGO_PROFILE_<name>_STRIP` — Controls stripping of symbols and/or debuginfos, see [`profile.<name>.strip`](about:blank/reference/config.html#profilenamestrip).\n-   `CARGO_REGISTRIES_<name>_CREDENTIAL_PROVIDER` — Credential provider for a registry, see [`registries.<name>.credential-provider`](about:blank/reference/config.html#registriesnamecredential-provider).\n-   `CARGO_REGISTRIES_<name>_INDEX` — URL of a registry index, see [`registries.<name>.index`](about:blank/reference/config.html#registriesnameindex).\n-   `CARGO_REGISTRIES_<name>_TOKEN` — Authentication token of a registry, see [`registries.<name>.token`](about:blank/reference/config.html#registriesnametoken).\n-   `CARGO_REGISTRY_CREDENTIAL_PROVIDER` — Credential provider for [crates.io](https://crates.io/), see [`registry.credential-provider`](about:blank/reference/config.html#registrycredential-provider).\n-   `CARGO_REGISTRY_DEFAULT` — Default registry for the `--registry` flag, see [`registry.default`](about:blank/reference/config.html#registrydefault).\n-   `CARGO_REGISTRY_GLOBAL_CREDENTIAL_PROVIDERS` — Credential providers for registries that do not have a specific provider defined. See [`registry.global-credential-providers`](about:blank/reference/config.html#registryglobal-credential-providers).\n-   `CARGO_REGISTRY_TOKEN` — Authentication token for [crates.io](https://crates.io/), see [`registry.token`](about:blank/reference/config.html#registrytoken).\n-   `CARGO_TARGET_<triple>_LINKER` — The linker to use, see [`target.<triple>.linker`](about:blank/reference/config.html#targettriplelinker). The triple must be [converted to uppercase and underscores](about:blank/reference/config.html#environment-variables).\n-   `CARGO_TARGET_<triple>_RUNNER` — The executable runner, see [`target.<triple>.runner`](about:blank/reference/config.html#targettriplerunner).\n-   `CARGO_TARGET_<triple>_RUSTFLAGS` — Extra `rustc` flags for a target, see [`target.<triple>.rustflags`](about:blank/reference/config.html#targettriplerustflags).\n-   `CARGO_TERM_QUIET` — Quiet mode, see [`term.quiet`](about:blank/reference/config.html#termquiet).\n-   `CARGO_TERM_VERBOSE` — The default terminal verbosity, see [`term.verbose`](about:blank/reference/config.html#termverbose).\n-   `CARGO_TERM_COLOR` — The default color mode, see [`term.color`](about:blank/reference/config.html#termcolor).\n-   `CARGO_TERM_PROGRESS_WHEN` — The default progress bar showing mode, see [`term.progress.when`](about:blank/reference/config.html#termprogresswhen).\n-   `CARGO_TERM_PROGRESS_WIDTH` — The default progress bar width, see [`term.progress.width`](about:blank/reference/config.html#termprogresswidth).\n\n## [Environment variables Cargo sets for crates](#environment-variables-cargo-sets-for-crates)\n\nCargo exposes these environment variables to your crate when it is compiled. Note that this applies for running binaries with `cargo run` and `cargo test` as well. To get the value of any of these variables in a Rust program, do this:\n\n```rust\nlet version = env!(\"CARGO_PKG_VERSION\");\n```\n\n`version` will now contain the value of `CARGO_PKG_VERSION`.\n\nNote that if one of these values is not provided in the manifest, the corresponding environment variable is set to the empty string, `\"\"`.\n\n-   `CARGO` — Path to the `cargo` binary performing the build.\n-   `CARGO_MANIFEST_DIR` — The directory containing the manifest of your package.\n-   `CARGO_PKG_VERSION` — The full version of your package.\n-   `CARGO_PKG_VERSION_MAJOR` — The major version of your package.\n-   `CARGO_PKG_VERSION_MINOR` — The minor version of your package.\n-   `CARGO_PKG_VERSION_PATCH` — The patch version of your package.\n-   `CARGO_PKG_VERSION_PRE` — The pre-release version of your package.\n-   `CARGO_PKG_AUTHORS` — Colon separated list of authors from the manifest of your package.\n-   `CARGO_PKG_NAME` — The name of your package.\n-   `CARGO_PKG_DESCRIPTION` — The description from the manifest of your package.\n-   `CARGO_PKG_HOMEPAGE` — The home page from the manifest of your package.\n-   `CARGO_PKG_REPOSITORY` — The repository from the manifest of your package.\n-   `CARGO_PKG_LICENSE` — The license from the manifest of your package.\n-   `CARGO_PKG_LICENSE_FILE` — The license file from the manifest of your package.\n-   `CARGO_PKG_RUST_VERSION` — The Rust version from the manifest of your package. Note that this is the minimum Rust version supported by the package, not the current Rust version.\n-   `CARGO_PKG_README` — Path to the README file of your package.\n-   `CARGO_CRATE_NAME` — The name of the crate that is currently being compiled. It is the name of the [Cargo target](reference/cargo-targets.html) with `-` converted to `_`, such as the name of the library, binary, example, integration test, or benchmark.\n-   `CARGO_BIN_NAME` — The name of the binary that is currently being compiled. Only set for [binaries](about:blank/reference/cargo-targets.html#binaries) or binary [examples](about:blank/reference/cargo-targets.html#examples). This name does not include any file extension, such as `.exe`.\n-   `OUT_DIR` — If the package has a build script, this is set to the folder where the build script should place its output. See below for more information. (Only set during compilation.)\n-   `CARGO_BIN_EXE_<name>` — The absolute path to a binary target’s executable. This is only set when building an [integration test](about:blank/reference/cargo-targets.html#integration-tests) or benchmark. This may be used with the [`env` macro](reference/../../std/macro.env.html) to find the executable to run for testing purposes. The `<name>` is the name of the binary target, exactly as-is. For example, `CARGO_BIN_EXE_my-program` for a binary named `my-program`. Binaries are automatically built when the test is built, unless the binary has required features that are not enabled.\n-   `CARGO_PRIMARY_PACKAGE` — This environment variable will be set if the package being built is primary. Primary packages are the ones the user selected on the command-line, either with `-p` flags or the defaults based on the current directory and the default workspace members. This environment variable will not be set when building dependencies. This is only set when compiling the package (not when running binaries or tests).\n-   `CARGO_TARGET_TMPDIR` — Only set when building [integration test](about:blank/reference/cargo-targets.html#integration-tests) or benchmark code. This is a path to a directory inside the target directory where integration tests or benchmarks are free to put any data needed by the tests/benches. Cargo initially creates this directory but doesn’t manage its content in any way, this is the responsibility of the test code.\n-   `CARGO_RUSTC_CURRENT_DIR` — This is a path that `rustc` is invoked from **(nightly only)**.\n\n### [Dynamic library paths](#dynamic-library-paths)\n\nCargo also sets the dynamic library path when compiling and running binaries with commands like `cargo run` and `cargo test`. This helps with locating shared libraries that are part of the build process. The variable name depends on the platform:\n\n-   Windows: `PATH`\n-   macOS: `DYLD_FALLBACK_LIBRARY_PATH`\n-   Unix: `LD_LIBRARY_PATH`\n-   AIX: `LIBPATH`\n\nThe value is extended from the existing value when Cargo starts. macOS has special consideration where if `DYLD_FALLBACK_LIBRARY_PATH` is not already set, it will add the default `$HOME/lib:/usr/local/lib:/usr/lib`.\n\nCargo includes the following paths:\n\n-   Search paths included from any build script with the [`rustc-link-search` instruction](about:blank/reference/build-scripts.html#rustc-link-search). Paths outside of the `target` directory are removed. It is the responsibility of the user running Cargo to properly set the environment if additional libraries on the system are needed in the search path.\n-   The base output directory, such as `target/debug`, and the “deps” directory. This is mostly for legacy support of `rustc` compiler plugins.\n-   The rustc sysroot library path. This generally is not important to most users.\n\n## [Environment variables Cargo sets for build scripts](#environment-variables-cargo-sets-for-build-scripts)\n\nCargo sets several environment variables when build scripts are run. Because these variables are not yet set when the build script is compiled, the above example using `env!` won’t work and instead you’ll need to retrieve the values when the build script is run:\n\n```rust\nuse std::env;\nlet out_dir = env::var(\"OUT_DIR\").unwrap();\n```\n\n`out_dir` will now contain the value of `OUT_DIR`.\n\n-   `CARGO` — Path to the `cargo` binary performing the build.\n-   `CARGO_MANIFEST_DIR` — The directory containing the manifest for the package being built (the package containing the build script). Also note that this is the value of the current working directory of the build script when it starts.\n-   `CARGO_MANIFEST_LINKS` — the manifest `links` value.\n-   `CARGO_MAKEFLAGS` — Contains parameters needed for Cargo’s [jobserver](https://www.gnu.org/software/make/manual/html_node/Job-Slots.html) implementation to parallelize subprocesses. Rustc or cargo invocations from build.rs can already read `CARGO_MAKEFLAGS`, but GNU Make requires the flags to be specified either directly as arguments, or through the `MAKEFLAGS` environment variable. Currently Cargo doesn’t set the `MAKEFLAGS` variable, but it’s free for build scripts invoking GNU Make to set it to the contents of `CARGO_MAKEFLAGS`.\n-   `CARGO_FEATURE_<name>` — For each activated feature of the package being built, this environment variable will be present where `<name>` is the name of the feature uppercased and having `-` translated to `_`.\n-   `CARGO_CFG_<cfg>` — For each [configuration option](reference/../../reference/conditional-compilation.html) of the package being built, this environment variable will contain the value of the configuration, where `<cfg>` is the name of the configuration uppercased and having `-` translated to `_`. Boolean configurations are present if they are set, and not present otherwise. Configurations with multiple values are joined to a single variable with the values delimited by `,`. This includes values built-in to the compiler (which can be seen with `rustc --print=cfg`) and values set by build scripts and extra flags passed to `rustc` (such as those defined in `RUSTFLAGS`). Some examples of what these variables are:\n    \n    -   `CARGO_CFG_UNIX` — Set on [unix-like platforms](about:blank/reference/conditional-compilation.html#unix-and-windows).\n    -   `CARGO_CFG_WINDOWS` — Set on [windows-like platforms](about:blank/reference/conditional-compilation.html#unix-and-windows).\n    -   `CARGO_CFG_TARGET_FAMILY=unix` — The [target family](about:blank/reference/conditional-compilation.html#target_family).\n    -   `CARGO_CFG_TARGET_OS=macos` — The [target operating system](about:blank/reference/conditional-compilation.html#target_os).\n    -   `CARGO_CFG_TARGET_ARCH=x86_64` — The CPU [target architecture](about:blank/reference/conditional-compilation.html#target_arch).\n    -   `CARGO_CFG_TARGET_VENDOR=apple` — The [target vendor](about:blank/reference/conditional-compilation.html#target_vendor).\n    -   `CARGO_CFG_TARGET_ENV=gnu` — The [target environment](about:blank/reference/conditional-compilation.html#target_env) ABI.\n    -   `CARGO_CFG_TARGET_POINTER_WIDTH=64` — The CPU [pointer width](about:blank/reference/conditional-compilation.html#target_pointer_width).\n    -   `CARGO_CFG_TARGET_ENDIAN=little` — The CPU [target endianness](about:blank/reference/conditional-compilation.html#target_endian).\n    -   `CARGO_CFG_TARGET_FEATURE=mmx,sse` — List of CPU [target features](about:blank/reference/conditional-compilation.html#target_feature) enabled.\n    \n    > Note that different [target triples](about:blank/appendix/glossary.html#target) have different sets of `cfg` values, hence variables present in one target triple might not be available in the other.\n    \n-   `OUT_DIR` — the folder in which all output and intermediate artifacts should be placed. This folder is inside the build directory for the package being built, and it is unique for the package in question.\n-   `TARGET` — the target triple that is being compiled for. Native code should be compiled for this triple. See the [Target Triple](about:blank/appendix/glossary.html#target) description for more information.\n-   `HOST` — the host triple of the Rust compiler.\n-   `NUM_JOBS` — the parallelism specified as the top-level parallelism. This can be useful to pass a `-j` parameter to a system like `make`. Note that care should be taken when interpreting this environment variable. For historical purposes this is still provided but recent versions of Cargo, for example, do not need to run `make -j`, and instead can set the `MAKEFLAGS` env var to the content of `CARGO_MAKEFLAGS` to activate the use of Cargo’s GNU Make compatible [jobserver](https://www.gnu.org/software/make/manual/html_node/Job-Slots.html) for sub-make invocations.\n-   `OPT_LEVEL`, `DEBUG` — values of the corresponding variables for the profile currently being built.\n-   `PROFILE` — `release` for release builds, `debug` for other builds. This is determined based on if the [profile](reference/profiles.html) inherits from the [`dev`](about:blank/reference/profiles.html#dev) or [`release`](about:blank/reference/profiles.html#release) profile. Using this environment variable is not recommended. Using other environment variables like `OPT_LEVEL` provide a more correct view of the actual settings being used.\n-   `DEP_<name>_<key>` — For more information about this set of environment variables, see build script documentation about [`links`](about:blank/reference/build-scripts.html#the-links-manifest-key).\n-   `RUSTC`, `RUSTDOC` — the compiler and documentation generator that Cargo has resolved to use, passed to the build script so it might use it as well.\n-   `RUSTC_WRAPPER` — the `rustc` wrapper, if any, that Cargo is using. See [`build.rustc-wrapper`](about:blank/reference/config.html#buildrustc-wrapper).\n-   `RUSTC_WORKSPACE_WRAPPER` — the `rustc` wrapper, if any, that Cargo is using for workspace members. See [`build.rustc-workspace-wrapper`](about:blank/reference/config.html#buildrustc-workspace-wrapper).\n-   `RUSTC_LINKER` — The path to the linker binary that Cargo has resolved to use for the current target, if specified. The linker can be changed by editing `.cargo/config.toml`; see the documentation about [cargo configuration](reference/config.html) for more information.\n-   `CARGO_ENCODED_RUSTFLAGS` — extra flags that Cargo invokes `rustc` with, separated by a `0x1f` character (ASCII Unit Separator). See [`build.rustflags`](about:blank/reference/config.html#buildrustflags). Note that since Rust 1.55, `RUSTFLAGS` is removed from the environment; scripts should use `CARGO_ENCODED_RUSTFLAGS` instead.\n-   `CARGO_PKG_<var>` — The package information variables, with the same names and values as are [provided during crate building](about:blank/reference/environment-variables.html#environment-variables-cargo-sets-for-crates).\n\n## [Environment variables Cargo sets for 3rd party subcommands](#environment-variables-cargo-sets-for-3rd-party-subcommands)\n\nCargo exposes this environment variable to 3rd party subcommands (ie. programs named `cargo-foobar` placed in `$PATH`):\n\n-   `CARGO` — Path to the `cargo` binary performing the build.\n-   `CARGO_MAKEFLAGS` — Contains parameters needed for Cargo’s [jobserver](https://www.gnu.org/software/make/manual/html_node/Job-Slots.html) implementation to parallelize subprocesses. This is set only when Cargo detects the existence of a jobserver.\n\nFor extended information about your environment you may run `cargo metadata`.\n\n## [Build Scripts](#build-scripts-1)\n\nSome packages need to compile third-party non-Rust code, for example C libraries. Other packages need to link to C libraries which can either be located on the system or possibly need to be built from source. Others still need facilities for functionality such as code generation before building (think parser generators).\n\nCargo does not aim to replace other tools that are well-optimized for these tasks, but it does integrate with them with custom build scripts. Placing a file named `build.rs` in the root of a package will cause Cargo to compile that script and execute it just before building the package.\n\n```rust\n// Example custom build script.\nfn main() {\n    // Tell Cargo that if the given file changes, to rerun this build script.\n    println!(\"cargo::rerun-if-changed=src/hello.c\");\n    // Use the `cc` crate to build a C file and statically link it.\n    cc::Build::new()\n        .file(\"src/hello.c\")\n        .compile(\"hello\");\n}\n```\n\nSome example use cases of build scripts are:\n\n-   Building a bundled C library.\n-   Finding a C library on the host system.\n-   Generating a Rust module from a specification.\n-   Performing any platform-specific configuration needed for the crate.\n\nThe sections below describe how build scripts work, and the [examples chapter](reference/build-script-examples.html) shows a variety of examples on how to write scripts.\n\n> Note: The [`package.build` manifest key](about:blank/reference/manifest.html#the-build-field) can be used to change the name of the build script, or disable it entirely.\n\n## [Life Cycle of a Build Script](#life-cycle-of-a-build-script)\n\nJust before a package is built, Cargo will compile a build script into an executable (if it has not already been built). It will then run the script, which may perform any number of tasks. The script may communicate with Cargo by printing specially formatted commands prefixed with `cargo::` to stdout.\n\nThe build script will be rebuilt if any of its source files or dependencies change.\n\nBy default, Cargo will re-run the build script if any of the files in the package changes. Typically it is best to use the `rerun-if` commands, described in the [change detection](about:blank/reference/build-scripts.html#change-detection) section below, to narrow the focus of what triggers a build script to run again.\n\nOnce the build script successfully finishes executing, the rest of the package will be compiled. Scripts should exit with a non-zero exit code to halt the build if there is an error, in which case the build script’s output will be displayed on the terminal.\n\n## [Inputs to the Build Script](#inputs-to-the-build-script)\n\nWhen the build script is run, there are a number of inputs to the build script, all passed in the form of [environment variables](about:blank/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts).\n\nIn addition to environment variables, the build script’s current directory is the source directory of the build script’s package.\n\n## [Outputs of the Build Script](#outputs-of-the-build-script)\n\nBuild scripts may save any output files or intermediate artifacts in the directory specified in the [`OUT_DIR` environment variable](about:blank/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts). Scripts should not modify any files outside of that directory.\n\nBuild scripts communicate with Cargo by printing to stdout. Cargo will interpret each line that starts with `cargo::` as an instruction that will influence compilation of the package. All other lines are ignored.\n\n> **Note:** The old invocation prefix `cargo:` (one colon only) is deprecated and won’t get any new features. To migrate, use two-colons prefix `cargo::`, which was added in Rust 1.77. If you were using `cargo:KEY=VALUE` for arbitrary links manifest key-value pairs, it is encouraged to switch to `cargo::metadata=KEY=VALUE`. Stick to `cargo:` only if the support of Rust version older than 1.77 is required.\n\n> The order of `cargo::` instructions printed by the build script _may_ affect the order of arguments that `cargo` passes to `rustc`. In turn, the order of arguments passed to `rustc` may affect the order of arguments passed to the linker. Therefore, you will want to pay attention to the order of the build script’s instructions. For example, if object `foo` needs to link against library `bar`, you may want to make sure that library `bar`’s [`cargo::rustc-link-lib`](about:blank/reference/build-scripts.html#rustc-link-lib) instruction appears _after_ instructions to link object `foo`.\n\nThe output of the script is hidden from the terminal during normal compilation. If you would like to see the output directly in your terminal, invoke Cargo as “very verbose” with the `-vv` flag. This only happens when the build script is run. If Cargo determines nothing has changed, it will not re-run the script, see [change detection](about:blank/reference/build-scripts.html#change-detection) below for more.\n\nAll the lines printed to stdout by a build script are written to a file like `target/debug/build/<pkg>/output` (the precise location may depend on your configuration). The stderr output is also saved in that same directory.\n\nThe following is a summary of the instructions that Cargo recognizes, with each one detailed below.\n\n-   [`cargo::rerun-if-changed=PATH`](about:blank/reference/build-scripts.html#rerun-if-changed) — Tells Cargo when to re-run the script.\n-   [`cargo::rerun-if-env-changed=VAR`](about:blank/reference/build-scripts.html#rerun-if-env-changed) — Tells Cargo when to re-run the script.\n-   [`cargo::rustc-link-arg=FLAG`](about:blank/reference/build-scripts.html#rustc-link-arg) — Passes custom flags to a linker for benchmarks, binaries, `cdylib` crates, examples, and tests.\n-   [`cargo::rustc-link-arg-bin=BIN=FLAG`](about:blank/reference/build-scripts.html#rustc-link-arg-bin) — Passes custom flags to a linker for the binary `BIN`.\n-   [`cargo::rustc-link-arg-bins=FLAG`](about:blank/reference/build-scripts.html#rustc-link-arg-bins) — Passes custom flags to a linker for binaries.\n-   [`cargo::rustc-link-arg-tests=FLAG`](about:blank/reference/build-scripts.html#rustc-link-arg-tests) — Passes custom flags to a linker for tests.\n-   [`cargo::rustc-link-arg-examples=FLAG`](about:blank/reference/build-scripts.html#rustc-link-arg-examples) — Passes custom flags to a linker for examples.\n-   [`cargo::rustc-link-arg-benches=FLAG`](about:blank/reference/build-scripts.html#rustc-link-arg-benches) — Passes custom flags to a linker for benchmarks.\n-   [`cargo::rustc-link-lib=LIB`](about:blank/reference/build-scripts.html#rustc-link-lib) — Adds a library to link.\n-   [`cargo::rustc-link-search=[KIND=]PATH`](about:blank/reference/build-scripts.html#rustc-link-search) — Adds to the library search path.\n-   [`cargo::rustc-flags=FLAGS`](about:blank/reference/build-scripts.html#rustc-flags) — Passes certain flags to the compiler.\n-   [`cargo::rustc-cfg=KEY[=\"VALUE\"]`](about:blank/reference/build-scripts.html#rustc-cfg) — Enables compile-time `cfg` settings.\n-   [`cargo::rustc-check-cfg=CHECK_CFG`](about:blank/reference/build-scripts.html#rustc-check-cfg) – Register custom `cfg`s as expected for compile-time checking of configs.\n-   [`cargo::rustc-env=VAR=VALUE`](about:blank/reference/build-scripts.html#rustc-env) — Sets an environment variable.\n-   [`cargo::rustc-cdylib-link-arg=FLAG`](about:blank/reference/build-scripts.html#rustc-cdylib-link-arg) — Passes custom flags to a linker for cdylib crates.\n-   [`cargo::warning=MESSAGE`](about:blank/reference/build-scripts.html#cargo-warning) — Displays a warning on the terminal.\n-   [`cargo::metadata=KEY=VALUE`](about:blank/reference/build-scripts.html#the-links-manifest-key) — Metadata, used by `links` scripts.\n\n### [`cargo::rustc-link-arg=FLAG`](#rustc-link-arg)\n\nThe `rustc-link-arg` instruction tells Cargo to pass the [`-C link-arg=FLAG` option](about:blank/rustc/codegen-options/index.html#link-arg) to the compiler, but only when building supported targets (benchmarks, binaries, `cdylib` crates, examples, and tests). Its usage is highly platform specific. It is useful to set the shared library version or linker script.\n\n### [`cargo::rustc-link-arg-bin=BIN=FLAG`](#rustc-link-arg-bin)\n\nThe `rustc-link-arg-bin` instruction tells Cargo to pass the [`-C link-arg=FLAG` option](about:blank/rustc/codegen-options/index.html#link-arg) to the compiler, but only when building the binary target with name `BIN`. Its usage is highly platform specific. It is useful to set a linker script or other linker options.\n\n### [`cargo::rustc-link-arg-bins=FLAG`](#rustc-link-arg-bins)\n\nThe `rustc-link-arg-bins` instruction tells Cargo to pass the [`-C link-arg=FLAG` option](about:blank/rustc/codegen-options/index.html#link-arg) to the compiler, but only when building a binary target. Its usage is highly platform specific. It is useful to set a linker script or other linker options.\n\n### [`cargo::rustc-link-lib=LIB`](#rustc-link-lib)\n\nThe `rustc-link-lib` instruction tells Cargo to link the given library using the compiler’s [`-l` flag](about:blank/rustc/command-line-arguments.html#option-l-link-lib). This is typically used to link a native library using [FFI](reference/../../nomicon/ffi.html).\n\nThe `LIB` string is passed directly to rustc, so it supports any syntax that `-l` does.  \nCurrently the full supported syntax for `LIB` is `[KIND[:MODIFIERS]=]NAME[:RENAME]`.\n\nThe `-l` flag is only passed to the library target of the package, unless there is no library target, in which case it is passed to all targets. This is done because all other targets have an implicit dependency on the library target, and the given library to link should only be included once. This means that if a package has both a library and a binary target, the _library_ has access to the symbols from the given lib, and the binary should access them through the library target’s public API.\n\nThe optional `KIND` may be one of `dylib`, `static`, or `framework`. See the [rustc book](about:blank/rustc/command-line-arguments.html#option-l-link-lib) for more detail.\n\n### [`cargo::rustc-link-arg-tests=FLAG`](#rustc-link-arg-tests)\n\nThe `rustc-link-arg-tests` instruction tells Cargo to pass the [`-C link-arg=FLAG` option](about:blank/rustc/codegen-options/index.html#link-arg) to the compiler, but only when building a tests target.\n\n### [`cargo::rustc-link-arg-examples=FLAG`](#rustc-link-arg-examples)\n\nThe `rustc-link-arg-examples` instruction tells Cargo to pass the [`-C link-arg=FLAG` option](about:blank/rustc/codegen-options/index.html#link-arg) to the compiler, but only when building an examples target.\n\n### [`cargo::rustc-link-arg-benches=FLAG`](#rustc-link-arg-benches)\n\nThe `rustc-link-arg-benches` instruction tells Cargo to pass the [`-C link-arg=FLAG` option](about:blank/rustc/codegen-options/index.html#link-arg) to the compiler, but only when building a benchmark target.\n\n### [`cargo::rustc-link-search=[KIND=]PATH`](#rustc-link-search)\n\nThe `rustc-link-search` instruction tells Cargo to pass the [`-L` flag](about:blank/rustc/command-line-arguments.html#option-l-search-path) to the compiler to add a directory to the library search path.\n\nThe optional `KIND` may be one of `dependency`, `crate`, `native`, `framework`, or `all`. See the [rustc book](about:blank/rustc/command-line-arguments.html#option-l-search-path) for more detail.\n\nThese paths are also added to the [dynamic library search path environment variable](about:blank/reference/environment-variables.html#dynamic-library-paths) if they are within the `OUT_DIR`. Depending on this behavior is discouraged since this makes it difficult to use the resulting binary. In general, it is best to avoid creating dynamic libraries in a build script (using existing system libraries is fine).\n\n### [`cargo::rustc-flags=FLAGS`](#rustc-flags)\n\nThe `rustc-flags` instruction tells Cargo to pass the given space-separated flags to the compiler. This only allows the `-l` and `-L` flags, and is equivalent to using [`rustc-link-lib`](about:blank/reference/build-scripts.html#rustc-link-lib) and [`rustc-link-search`](about:blank/reference/build-scripts.html#rustc-link-search).\n\n### [`cargo::rustc-cfg=KEY[=\"VALUE\"]`](#rustc-cfg)\n\nThe `rustc-cfg` instruction tells Cargo to pass the given value to the [`--cfg` flag](about:blank/rustc/command-line-arguments.html#option-cfg) to the compiler. This may be used for compile-time detection of features to enable [conditional compilation](reference/../../reference/conditional-compilation.html). Custom cfgs must either be expected using the [`cargo::rustc-check-cfg`](about:blank/reference/build-scripts.html#rustc-check-cfg) instruction or usage will need to allow the [`unexpected_cfgs`](about:blank/rustc/lints/listing/warn-by-default.html#unexpected-cfgs) lint to avoid unexpected cfgs warnings.\n\nNote that this does _not_ affect Cargo’s dependency resolution. This cannot be used to enable an optional dependency, or enable other Cargo features.\n\nBe aware that [Cargo features](reference/features.html) use the form `feature=\"foo\"`. `cfg` values passed with this flag are not restricted to that form, and may provide just a single identifier, or any arbitrary key/value pair. For example, emitting `cargo::rustc-cfg=abc` will then allow code to use `#[cfg(abc)]` (note the lack of `feature=`). Or an arbitrary key/value pair may be used with an `=` symbol like `cargo::rustc-cfg=my_component=\"foo\"`. The key should be a Rust identifier, the value should be a string.\n\n### [`cargo::rustc-check-cfg=CHECK_CFG`](#rustc-check-cfg)\n\nAdd to the list of expected config names and values that is used when checking the _reachable_ cfg expressions with the [`unexpected_cfgs`](about:blank/rustc/lints/listing/warn-by-default.html#unexpected-cfgs) lint.\n\nThe syntax of `CHECK_CFG` mirrors the `rustc` [`--check-cfg` flag](about:blank/rustc/command-line-arguments.html#option-check-cfg), see [Checking conditional configurations](reference/../../rustc/check-cfg.html) for more details.\n\n> Note: `cargo:rustc-check-cfg` (single-colon) can be used if your MSRV is below Rust 1.77\n\nThe instruction can be used like this:\n\n```rust\n#![allow(unused)]\nfn main() {\n// build.rs\nprintln!(\"cargo::rustc-check-cfg=cfg(foo, values(\\\"bar\\\"))\");\nif foo_bar_condition {\n    println!(\"cargo::rustc-cfg=foo=\\\"bar\\\"\");\n}\n}\n```\n\nNote that all possible cfgs should be defined, regardless of which cfgs are currently enabled. This includes all possible values of a given cfg name.\n\nIt is recommended to group the `cargo::rustc-check-cfg` and [`cargo::rustc-cfg`](about:blank/rustc/command-line-arguments.html#option-cfg) instructions as closely as possible in order to avoid typos, missing check-cfg, stale cfgs…\n\nSee also the [conditional compilation](about:blank/reference/build-script-examples.html#conditional-compilation) example.\n\n### [`cargo::rustc-env=VAR=VALUE`](#rustc-env)\n\nThe `rustc-env` instruction tells Cargo to set the given environment variable when compiling the package. The value can be then retrieved by the [`env!` macro](reference/../../std/macro.env.html) in the compiled crate. This is useful for embedding additional metadata in crate’s code, such as the hash of git HEAD or the unique identifier of a continuous integration server.\n\nSee also the [environment variables automatically included by Cargo](about:blank/reference/environment-variables.html#environment-variables-cargo-sets-for-crates).\n\n> **Note**: These environment variables are also set when running an executable with `cargo run` or `cargo test`. However, this usage is discouraged since it ties the executable to Cargo’s execution environment. Normally, these environment variables should only be checked at compile-time with the `env!` macro.\n\n### [`cargo::rustc-cdylib-link-arg=FLAG`](#rustc-cdylib-link-arg)\n\nThe `rustc-cdylib-link-arg` instruction tells Cargo to pass the [`-C link-arg=FLAG` option](about:blank/rustc/codegen-options/index.html#link-arg) to the compiler, but only when building a `cdylib` library target. Its usage is highly platform specific. It is useful to set the shared library version or the runtime-path.\n\n### [`cargo::warning=MESSAGE`](#cargo-warning)\n\nThe `warning` instruction tells Cargo to display a warning after the build script has finished running. Warnings are only shown for `path` dependencies (that is, those you’re working on locally), so for example warnings printed out in [crates.io](https://crates.io/) crates are not emitted by default. The `-vv` “very verbose” flag may be used to have Cargo display warnings for all crates.\n\n## [Build Dependencies](#build-dependencies-2)\n\nBuild scripts are also allowed to have dependencies on other Cargo-based crates. Dependencies are declared through the `build-dependencies` section of the manifest.\n\n```toml\n[build-dependencies]\ncc = \"1.0.46\"\n\n```\n\nThe build script **does not** have access to the dependencies listed in the `dependencies` or `dev-dependencies` section (they’re not built yet!). Also, build dependencies are not available to the package itself unless also explicitly added in the `[dependencies]` table.\n\nIt is recommended to carefully consider each dependency you add, weighing against the impact on compile time, licensing, maintenance, etc. Cargo will attempt to reuse a dependency if it is shared between build dependencies and normal dependencies. However, this is not always possible, for example when cross-compiling, so keep that in consideration of the impact on compile time.\n\n## [Change Detection](#change-detection)\n\nWhen rebuilding a package, Cargo does not necessarily know if the build script needs to be run again. By default, it takes a conservative approach of always re-running the build script if any file within the package is changed (or the list of files controlled by the [`exclude` and `include` fields](about:blank/reference/manifest.html#the-exclude-and-include-fields)). For most cases, this is not a good choice, so it is recommended that every build script emit at least one of the `rerun-if` instructions (described below). If these are emitted, then Cargo will only re-run the script if the given value has changed. If Cargo is re-running the build scripts of your own crate or a dependency and you don’t know why, see [“Why is Cargo rebuilding my code?” in the FAQ](about:blank/faq.html#why-is-cargo-rebuilding-my-code).\n\n### [`cargo::rerun-if-changed=PATH`](#rerun-if-changed)\n\nThe `rerun-if-changed` instruction tells Cargo to re-run the build script if the file at the given path has changed. Currently, Cargo only uses the filesystem last-modified “mtime” timestamp to determine if the file has changed. It compares against an internal cached timestamp of when the build script last ran.\n\nIf the path points to a directory, it will scan the entire directory for any modifications.\n\nIf the build script inherently does not need to re-run under any circumstance, then emitting `cargo::rerun-if-changed=build.rs` is a simple way to prevent it from being re-run (otherwise, the default if no `rerun-if` instructions are emitted is to scan the entire package directory for changes). Cargo automatically handles whether or not the script itself needs to be recompiled, and of course the script will be re-run after it has been recompiled. Otherwise, specifying `build.rs` is redundant and unnecessary.\n\n### [`cargo::rerun-if-env-changed=NAME`](#rerun-if-env-changed)\n\nThe `rerun-if-env-changed` instruction tells Cargo to re-run the build script if the value of an environment variable of the given name has changed.\n\nNote that the environment variables here are intended for global environment variables like `CC` and such, it is not possible to use this for environment variables like `TARGET` that [Cargo sets for build scripts](about:blank/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts). The environment variables in use are those received by `cargo` invocations, not those received by the executable of the build script.\n\n## [The `links` Manifest Key](#the-links-manifest-key)\n\nThe `package.links` key may be set in the `Cargo.toml` manifest to declare that the package links with the given native library. The purpose of this manifest key is to give Cargo an understanding about the set of native dependencies that a package has, as well as providing a principled system of passing metadata between package build scripts.\n\n```toml\n[package]\n# ...\nlinks = \"foo\"\n\n```\n\nThis manifest states that the package links to the `libfoo` native library. When using the `links` key, the package must have a build script, and the build script should use the [`rustc-link-lib` instruction](about:blank/reference/build-scripts.html#rustc-link-lib) to link the library.\n\nPrimarily, Cargo requires that there is at most one package per `links` value. In other words, it is forbidden to have two packages link to the same native library. This helps prevent duplicate symbols between crates. Note, however, that there are [conventions in place](about:blank/reference/build-scripts.html#-sys-packages) to alleviate this.\n\nBuild scripts can generate an arbitrary set of metadata in the form of key-value pairs. This metadata is set with the `cargo::metadata=KEY=VALUE` instruction.\n\nThe metadata is passed to the build scripts of **dependent** packages. For example, if the package `bar` depends on `foo`, then if `foo` generates `key=value` as part of its build script metadata, then the build script of `bar` will have the environment variables `DEP_FOO_KEY=value`. See the [“Using another `sys` crate”](about:blank/reference/build-script-examples.html#using-another-sys-crate) for an example of how this can be used.\n\nNote that metadata is only passed to immediate dependents, not transitive dependents.\n\n## [`*-sys` Packages](#-sys-packages)\n\nSome Cargo packages that link to system libraries have a naming convention of having a `-sys` suffix. Any package named `foo-sys` should provide two major pieces of functionality:\n\n-   The library crate should link to the native library `libfoo`. This will often probe the current system for `libfoo` before resorting to building from source.\n-   The library crate should provide **declarations** for types and functions in `libfoo`, but **not** higher-level abstractions.\n\nThe set of `*-sys` packages provides a common set of dependencies for linking to native libraries. There are a number of benefits earned from having this convention of native-library-related packages:\n\n-   Common dependencies on `foo-sys` alleviates the rule about one package per value of `links`.\n-   Other `-sys` packages can take advantage of the `DEP_NAME_KEY=value` environment variables to better integrate with other packages. See the [“Using another `sys` crate”](about:blank/reference/build-script-examples.html#using-another-sys-crate) example.\n-   A common dependency allows centralizing logic on discovering `libfoo` itself (or building it from source).\n-   These dependencies are easily [overridable](about:blank/reference/build-scripts.html#overriding-build-scripts).\n\nIt is common to have a companion package without the `-sys` suffix that provides a safe, high-level abstractions on top of the sys package. For example, the [`git2` crate](https://crates.io/crates/git2) provides a high-level interface to the [`libgit2-sys` crate](https://crates.io/crates/libgit2-sys).\n\n## [Overriding Build Scripts](#overriding-build-scripts)\n\nIf a manifest contains a `links` key, then Cargo supports overriding the build script specified with a custom library. The purpose of this functionality is to prevent running the build script in question altogether and instead supply the metadata ahead of time.\n\nTo override a build script, place the following configuration in any acceptable [`config.toml`](reference/config.html) file.\n\n```toml\n[target.x86_64-unknown-linux-gnu.foo]\nrustc-link-lib = [\"foo\"]\nrustc-link-search = [\"/path/to/foo\"]\nrustc-flags = \"-L /some/path\"\nrustc-cfg = ['key=\"value\"']\nrustc-env = {key = \"value\"}\nrustc-cdylib-link-arg = [\"…\"]\nmetadata_key1 = \"value\"\nmetadata_key2 = \"value\"\n\n```\n\nWith this configuration, if a package declares that it links to `foo` then the build script will **not** be compiled or run, and the metadata specified will be used instead.\n\nThe `warning`, `rerun-if-changed`, and `rerun-if-env-changed` keys should not be used and will be ignored.\n\n## [Jobserver](#jobserver)\n\nCargo and `rustc` use the [jobserver protocol](http://make.mad-scientist.net/papers/jobserver-implementation/), developed for GNU make, to coordinate concurrency across processes. It is essentially a semaphore that controls the number of jobs running concurrently. The concurrency may be set with the `--jobs` flag, which defaults to the number of logical CPUs.\n\nEach build script inherits one job slot from Cargo, and should endeavor to only use one CPU while it runs. If the script wants to use more CPUs in parallel, it should use the [`jobserver` crate](https://crates.io/crates/jobserver) to coordinate with Cargo.\n\nAs an example, the [`cc` crate](https://crates.io/crates/cc) may enable the optional `parallel` feature which will use the jobserver protocol to attempt to build multiple C files at the same time.\n\n## [Build Script Examples](#build-script-examples)\n\nThe following sections illustrate some examples of writing build scripts.\n\nSome common build script functionality can be found via crates on [crates.io](https://crates.io/). Check out the [`build-dependencies` keyword](https://crates.io/keywords/build-dependencies) to see what is available. The following is a sample of some popular crates[1](#†):\n\n-   [`bindgen`](https://crates.io/crates/bindgen) — Automatically generate Rust FFI bindings to C libraries.\n-   [`cc`](https://crates.io/crates/cc) — Compiles C/C++/assembly.\n-   [`pkg-config`](https://crates.io/crates/pkg-config) — Detect system libraries using the `pkg-config` utility.\n-   [`cmake`](https://crates.io/crates/cmake) — Runs the `cmake` build tool to build a native library.\n-   [`autocfg`](https://crates.io/crates/autocfg), [`rustc_version`](https://crates.io/crates/rustc_version), [`version_check`](https://crates.io/crates/version_check) — These crates provide ways to implement conditional compilation based on the current `rustc` such as the version of the compiler.\n\n## [Code generation](#code-generation)\n\nSome Cargo packages need to have code generated just before they are compiled for various reasons. Here we’ll walk through a simple example which generates a library call as part of the build script.\n\nFirst, let’s take a look at the directory structure of this package:\n\n```text\n.\n├── Cargo.toml\n├── build.rs\n└── src\n    └── main.rs\n\n1 directory, 3 files\n\n```\n\nHere we can see that we have a `build.rs` build script and our binary in `main.rs`. This package has a basic manifest:\n\n```toml\n# Cargo.toml\n\n[package]\nname = \"hello-from-generated-code\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n```\n\nLet’s see what’s inside the build script:\n\n```rust\n// build.rs\n\nuse std::env;\nuse std::fs;\nuse std::path::Path;\n\nfn main() {\n    let out_dir = env::var_os(\"OUT_DIR\").unwrap();\n    let dest_path = Path::new(&out_dir).join(\"hello.rs\");\n    fs::write(\n        &dest_path,\n        \"pub fn message() -> &'static str {\n            \\\"Hello, World!\\\"\n        }\n        \"\n    ).unwrap();\n    println!(\"cargo::rerun-if-changed=build.rs\");\n}\n```\n\nThere’s a couple of points of note here:\n\n-   The script uses the `OUT_DIR` environment variable to discover where the output files should be located. It can use the process’ current working directory to find where the input files should be located, but in this case we don’t have any input files.\n-   In general, build scripts should not modify any files outside of `OUT_DIR`. It may seem fine on the first blush, but it does cause problems when you use such crate as a dependency, because there’s an _implicit_ invariant that sources in `.cargo/registry` should be immutable. `cargo` won’t allow such scripts when packaging.\n-   This script is relatively simple as it just writes out a small generated file. One could imagine that other more complex operations could take place such as generating a Rust module from a C header file or another language definition, for example.\n-   The [`rerun-if-changed` instruction](about:blank/reference/build-scripts.html#rerun-if-changed) tells Cargo that the build script only needs to re-run if the build script itself changes. Without this line, Cargo will automatically run the build script if any file in the package changes. If your code generation uses some input files, this is where you would print a list of each of those files.\n\nNext, let’s peek at the library itself:\n\n```rust\n// src/main.rs\n\ninclude!(concat!(env!(\"OUT_DIR\"), \"/hello.rs\"));\n\nfn main() {\n    println!(\"{}\", message());\n}\n```\n\nThis is where the real magic happens. The library is using the rustc-defined [`include!` macro](reference/../../std/macro.include.html) in combination with the [`concat!`](reference/../../std/macro.concat.html) and [`env!`](reference/../../std/macro.env.html) macros to include the generated file (`hello.rs`) into the crate’s compilation.\n\nUsing the structure shown here, crates can include any number of generated files from the build script itself.\n\n## [Building a native library](#building-a-native-library)\n\nSometimes it’s necessary to build some native C or C++ code as part of a package. This is another excellent use case of leveraging the build script to build a native library before the Rust crate itself. As an example, we’ll create a Rust library which calls into C to print “Hello, World!”.\n\nLike above, let’s first take a look at the package layout:\n\n```text\n.\n├── Cargo.toml\n├── build.rs\n└── src\n    ├── hello.c\n    └── main.rs\n\n1 directory, 4 files\n\n```\n\nPretty similar to before! Next, the manifest:\n\n```toml\n# Cargo.toml\n\n[package]\nname = \"hello-world-from-c\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n```\n\nFor now we’re not going to use any build dependencies, so let’s take a look at the build script now:\n\n```rust\n// build.rs\n\nuse std::process::Command;\nuse std::env;\nuse std::path::Path;\n\nfn main() {\n    let out_dir = env::var(\"OUT_DIR\").unwrap();\n\n    // Note that there are a number of downsides to this approach, the comments\n    // below detail how to improve the portability of these commands.\n    Command::new(\"gcc\").args(&[\"src/hello.c\", \"-c\", \"-fPIC\", \"-o\"])\n                       .arg(&format!(\"{}/hello.o\", out_dir))\n                       .status().unwrap();\n    Command::new(\"ar\").args(&[\"crus\", \"libhello.a\", \"hello.o\"])\n                      .current_dir(&Path::new(&out_dir))\n                      .status().unwrap();\n\n    println!(\"cargo::rustc-link-search=native={}\", out_dir);\n    println!(\"cargo::rustc-link-lib=static=hello\");\n    println!(\"cargo::rerun-if-changed=src/hello.c\");\n}\n```\n\nThis build script starts out by compiling our C file into an object file (by invoking `gcc`) and then converting this object file into a static library (by invoking `ar`). The final step is feedback to Cargo itself to say that our output was in `out_dir` and the compiler should link the crate to `libhello.a` statically via the `-l static=hello` flag.\n\nNote that there are a number of drawbacks to this hard-coded approach:\n\n-   The `gcc` command itself is not portable across platforms. For example it’s unlikely that Windows platforms have `gcc`, and not even all Unix platforms may have `gcc`. The `ar` command is also in a similar situation.\n-   These commands do not take cross-compilation into account. If we’re cross compiling for a platform such as Android it’s unlikely that `gcc` will produce an ARM executable.\n\nNot to fear, though, this is where a `build-dependencies` entry would help! The Cargo ecosystem has a number of packages to make this sort of task much easier, portable, and standardized. Let’s try the [`cc` crate](https://crates.io/crates/cc) from [crates.io](https://crates.io/). First, add it to the `build-dependencies` in `Cargo.toml`:\n\n```toml\n[build-dependencies]\ncc = \"1.0\"\n\n```\n\nAnd rewrite the build script to use this crate:\n\n```rust\n// build.rs\n\nfn main() {\n    cc::Build::new()\n        .file(\"src/hello.c\")\n        .compile(\"hello\");\n    println!(\"cargo::rerun-if-changed=src/hello.c\");\n}\n```\n\nThe [`cc` crate](https://crates.io/crates/cc) abstracts a range of build script requirements for C code:\n\n-   It invokes the appropriate compiler (MSVC for windows, `gcc` for MinGW, `cc` for Unix platforms, etc.).\n-   It takes the `TARGET` variable into account by passing appropriate flags to the compiler being used.\n-   Other environment variables, such as `OPT_LEVEL`, `DEBUG`, etc., are all handled automatically.\n-   The stdout output and `OUT_DIR` locations are also handled by the `cc` library.\n\nHere we can start to see some of the major benefits of farming as much functionality as possible out to common build dependencies rather than duplicating logic across all build scripts!\n\nBack to the case study though, let’s take a quick look at the contents of the `src` directory:\n\n```c\n// src/hello.c\n\n#include <stdio.h>\n\nvoid hello() {\n    printf(\"Hello, World!\\n\");\n}\n\n```\n\n```rust\n// src/main.rs\n\n// Note the lack of the `#[link]` attribute. We’re delegating the responsibility\n// of selecting what to link over to the build script rather than hard-coding\n// it in the source file.\nextern { fn hello(); }\n\nfn main() {\n    unsafe { hello(); }\n}\n```\n\nAnd there we go! This should complete our example of building some C code from a Cargo package using the build script itself. This also shows why using a build dependency can be crucial in many situations and even much more concise!\n\nWe’ve also seen a brief example of how a build script can use a crate as a dependency purely for the build process and not for the crate itself at runtime.\n\n## [Linking to system libraries](#linking-to-system-libraries)\n\nThis example demonstrates how to link a system library and how the build script is used to support this use case.\n\nQuite frequently a Rust crate wants to link to a native library provided on the system to bind its functionality or just use it as part of an implementation detail. This is quite a nuanced problem when it comes to performing this in a platform-agnostic fashion. It is best, if possible, to farm out as much of this as possible to make this as easy as possible for consumers.\n\nFor this example, we will be creating a binding to the system’s zlib library. This is a library that is commonly found on most Unix-like systems that provides data compression. This is already wrapped up in the [`libz-sys` crate](https://crates.io/crates/libz-sys), but for this example, we’ll do an extremely simplified version. Check out [the source code](https://github.com/rust-lang/libz-sys) for the full example.\n\nTo make it easy to find the location of the library, we will use the [`pkg-config` crate](https://crates.io/crates/pkg-config). This crate uses the system’s `pkg-config` utility to discover information about a library. It will automatically tell Cargo what is needed to link the library. This will likely only work on Unix-like systems with `pkg-config` installed. Let’s start by setting up the manifest:\n\n```toml\n# Cargo.toml\n\n[package]\nname = \"libz-sys\"\nversion = \"0.1.0\"\nedition = \"2021\"\nlinks = \"z\"\n\n[build-dependencies]\npkg-config = \"0.3.16\"\n\n```\n\nTake note that we included the `links` key in the `package` table. This tells Cargo that we are linking to the `libz` library. See [“Using another sys crate”](about:blank/reference/build-script-examples.html#using-another-sys-crate) for an example that will leverage this.\n\nThe build script is fairly simple:\n\n```rust\n// build.rs\n\nfn main() {\n    pkg_config::Config::new().probe(\"zlib\").unwrap();\n    println!(\"cargo::rerun-if-changed=build.rs\");\n}\n```\n\nLet’s round out the example with a basic FFI binding:\n\n```rust\n// src/lib.rs\n\nuse std::os::raw::{c_uint, c_ulong};\n\nextern \"C\" {\n    pub fn crc32(crc: c_ulong, buf: *const u8, len: c_uint) -> c_ulong;\n}\n\n#[test]\nfn test_crc32() {\n    let s = \"hello\";\n    unsafe {\n        assert_eq!(crc32(0, s.as_ptr(), s.len() as c_uint), 0x3610a686);\n    }\n}\n```\n\nRun `cargo build -vv` to see the output from the build script. On a system with `libz` already installed, it may look something like this:\n\n```text\n[libz-sys 0.1.0] cargo::rustc-link-search=native=/usr/lib\n[libz-sys 0.1.0] cargo::rustc-link-lib=z\n[libz-sys 0.1.0] cargo::rerun-if-changed=build.rs\n\n```\n\nNice! `pkg-config` did all the work of finding the library and telling Cargo where it is.\n\nIt is not unusual for packages to include the source for the library, and build it statically if it is not found on the system, or if a feature or environment variable is set. For example, the real [`libz-sys` crate](https://crates.io/crates/libz-sys) checks the environment variable `LIBZ_SYS_STATIC` or the `static` feature to build it from source instead of using the system library. Check out [the source](https://github.com/rust-lang/libz-sys) for a more complete example.\n\n## [Using another `sys` crate](#using-another-sys-crate)\n\nWhen using the `links` key, crates may set metadata that can be read by other crates that depend on it. This provides a mechanism to communicate information between crates. In this example, we’ll be creating a C library that makes use of zlib from the real [`libz-sys` crate](https://crates.io/crates/libz-sys).\n\nIf you have a C library that depends on zlib, you can leverage the [`libz-sys` crate](https://crates.io/crates/libz-sys) to automatically find it or build it. This is great for cross-platform support, such as Windows where zlib is not usually installed. `libz-sys` [sets the `include` metadata](https://github.com/rust-lang/libz-sys/blob/3c594e677c79584500da673f918c4d2101ac97a1/build.rs#L156) to tell other packages where to find the header files for zlib. Our build script can read that metadata with the `DEP_Z_INCLUDE` environment variable. Here’s an example:\n\n```toml\n# Cargo.toml\n\n[package]\nname = \"zuser\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nlibz-sys = \"1.0.25\"\n\n[build-dependencies]\ncc = \"1.0.46\"\n\n```\n\nHere we have included `libz-sys` which will ensure that there is only one `libz` used in the final library, and give us access to it from our build script:\n\n```rust\n// build.rs\n\nfn main() {\n    let mut cfg = cc::Build::new();\n    cfg.file(\"src/zuser.c\");\n    if let Some(include) = std::env::var_os(\"DEP_Z_INCLUDE\") {\n        cfg.include(include);\n    }\n    cfg.compile(\"zuser\");\n    println!(\"cargo::rerun-if-changed=src/zuser.c\");\n}\n```\n\nWith `libz-sys` doing all the heavy lifting, the C source code may now include the zlib header, and it should find the header, even on systems where it isn’t already installed.\n\n```c\n// src/zuser.c\n\n#include \"zlib.h\"\n\n// … rest of code that makes use of zlib.\n\n```\n\n## [Conditional compilation](#conditional-compilation)\n\nA build script may emit [`rustc-cfg` instructions](about:blank/reference/build-scripts.html#rustc-cfg) which can enable conditions that can be checked at compile time. In this example, we’ll take a look at how the [`openssl` crate](https://crates.io/crates/openssl) uses this to support multiple versions of the OpenSSL library.\n\nThe [`openssl-sys` crate](https://crates.io/crates/openssl-sys) implements building and linking the OpenSSL library. It supports multiple different implementations (like LibreSSL) and multiple versions. It makes use of the `links` key so that it may pass information to other build scripts. One of the things it passes is the `version_number` key, which is the version of OpenSSL that was detected. The code in the build script looks something [like this](https://github.com/sfackler/rust-openssl/blob/dc72a8e2c429e46c275e528b61a733a66e7877fc/openssl-sys/build/main.rs#L216):\n\n```rust\nprintln!(\"cargo::version_number={:x}\", openssl_version);\n```\n\nThis instruction causes the `DEP_OPENSSL_VERSION_NUMBER` environment variable to be set in any crates that directly depend on `openssl-sys`.\n\nThe `openssl` crate, which provides the higher-level interface, specifies `openssl-sys` as a dependency. The `openssl` build script can read the version information generated by the `openssl-sys` build script with the `DEP_OPENSSL_VERSION_NUMBER` environment variable. It uses this to generate some [`cfg` values](https://github.com/sfackler/rust-openssl/blob/dc72a8e2c429e46c275e528b61a733a66e7877fc/openssl/build.rs#L18-L36):\n\n```rust\n// (portion of build.rs)\n\nprintln!(\"cargo::rustc-check-cfg=cfg(ossl101,ossl102)\");\nprintln!(\"cargo::rustc-check-cfg=cfg(ossl110,ossl110g,ossl111)\");\n\nif let Ok(version) = env::var(\"DEP_OPENSSL_VERSION_NUMBER\") {\n    let version = u64::from_str_radix(&version, 16).unwrap();\n\n    if version >= 0x1_00_01_00_0 {\n        println!(\"cargo::rustc-cfg=ossl101\");\n    }\n    if version >= 0x1_00_02_00_0 {\n        println!(\"cargo::rustc-cfg=ossl102\");\n    }\n    if version >= 0x1_01_00_00_0 {\n        println!(\"cargo::rustc-cfg=ossl110\");\n    }\n    if version >= 0x1_01_00_07_0 {\n        println!(\"cargo::rustc-cfg=ossl110g\");\n    }\n    if version >= 0x1_01_01_00_0 {\n        println!(\"cargo::rustc-cfg=ossl111\");\n    }\n}\n```\n\nThese `cfg` values can then be used with the [`cfg` attribute](about:blank/reference/conditional-compilation.html#the-cfg-attribute) or the [`cfg` macro](reference/../../std/macro.cfg.html) to conditionally include code. For example, SHA3 support was added in OpenSSL 1.1.1, so it is [conditionally excluded](https://github.com/sfackler/rust-openssl/blob/dc72a8e2c429e46c275e528b61a733a66e7877fc/openssl/src/hash.rs#L67-L85) for older versions:\n\n```rust\n// (portion of openssl crate)\n\n#[cfg(ossl111)]\npub fn sha3_224() -> MessageDigest {\n    unsafe { MessageDigest(ffi::EVP_sha3_224()) }\n}\n```\n\nOf course, one should be careful when using this, since it makes the resulting binary even more dependent on the build environment. In this example, if the binary is distributed to another system, it may not have the exact same shared libraries, which could cause problems.\n\n## [Publishing on crates.io](#publishing-on-cratesio)\n\nOnce you’ve got a library that you’d like to share with the world, it’s time to publish it on [crates.io](https://crates.io/)! Publishing a crate is when a specific version is uploaded to be hosted on [crates.io](https://crates.io/).\n\nTake care when publishing a crate, because a publish is **permanent**. The version can never be overwritten, and the code cannot be deleted. There is no limit to the number of versions which can be published, however.\n\n## [Before your first publish](#before-your-first-publish)\n\nFirst things first, you’ll need an account on [crates.io](https://crates.io/) to acquire an API token. To do so, [visit the home page](https://crates.io/) and log in via a GitHub account (required for now). You will also need to provide and verify your email address on the [Account Settings](https://crates.io/settings/profile) page. Once that is done [create an API token](https://crates.io/settings/tokens), make sure you copy it. Once you leave the page you will not be able to see it again.\n\nThen run the [`cargo login`](reference/../commands/cargo-login.html) command.\n\n```console\n$ cargo login\n\n```\n\nThen at the prompt put in the token specified.\n\n```console\nplease paste the API Token found on https://crates.io/me below\nabcdefghijklmnopqrstuvwxyz012345\n\n```\n\nThis command will inform Cargo of your API token and store it locally in your `~/.cargo/credentials.toml`. Note that this token is a **secret** and should not be shared with anyone else. If it leaks for any reason, you should revoke it immediately.\n\n> **Note**: The [`cargo logout`](reference/../commands/cargo-logout.html) command can be used to remove the token from `credentials.toml`. This can be useful if you no longer need it stored on the local machine.\n\n## [Before publishing a new crate](#before-publishing-a-new-crate)\n\nKeep in mind that crate names on [crates.io](https://crates.io/) are allocated on a first-come-first-serve basis. Once a crate name is taken, it cannot be used for another crate.\n\nCheck out the [metadata you can specify](reference/manifest.html) in `Cargo.toml` to ensure your crate can be discovered more easily! Before publishing, make sure you have filled out the following fields:\n\n-   [`license` or `license-file`](about:blank/reference/manifest.html#the-license-and-license-file-fields)\n-   [`description`](about:blank/reference/manifest.html#the-description-field)\n-   [`homepage`](about:blank/reference/manifest.html#the-homepage-field)\n-   [`repository`](about:blank/reference/manifest.html#the-repository-field)\n-   [`readme`](about:blank/reference/manifest.html#the-readme-field)\n\nIt would also be a good idea to include some [`keywords`](about:blank/reference/manifest.html#the-keywords-field) and [`categories`](about:blank/reference/manifest.html#the-categories-field), though they are not required.\n\nIf you are publishing a library, you may also want to consult the [Rust API Guidelines](https://rust-lang.github.io/api-guidelines/).\n\n### [Packaging a crate](#packaging-a-crate)\n\nThe next step is to package up your crate and upload it to [crates.io](https://crates.io/). For this we’ll use the [`cargo publish`](reference/../commands/cargo-publish.html) subcommand. This command performs the following steps:\n\n1.  Perform some verification checks on your package.\n2.  Compress your source code into a `.crate` file.\n3.  Extract the `.crate` file into a temporary directory and verify that it compiles.\n4.  Upload the `.crate` file to [crates.io](https://crates.io/).\n5.  The registry will perform some additional checks on the uploaded package before adding it.\n\nIt is recommended that you first run `cargo publish --dry-run` (or [`cargo package`](reference/../commands/cargo-package.html) which is equivalent) to ensure there aren’t any warnings or errors before publishing. This will perform the first three steps listed above.\n\n```console\n$ cargo publish --dry-run\n\n```\n\nYou can inspect the generated `.crate` file in the `target/package` directory. [crates.io](https://crates.io/) currently has a 10MB size limit on the `.crate` file. You may want to check the size of the `.crate` file to ensure you didn’t accidentally package up large assets that are not required to build your package, such as test data, website documentation, or code generation. You can check which files are included with the following command:\n\n```console\n$ cargo package --list\n\n```\n\nCargo will automatically ignore files ignored by your version control system when packaging, but if you want to specify an extra set of files to ignore you can use the [`exclude` key](about:blank/reference/manifest.html#the-exclude-and-include-fields) in the manifest:\n\n```toml\n[package]\n# ...\nexclude = [\n    \"public/assets/*\",\n    \"videos/*\",\n]\n\n```\n\nIf you’d rather explicitly list the files to include, Cargo also supports an `include` key, which if set, overrides the `exclude` key:\n\n```toml\n[package]\n# ...\ninclude = [\n    \"**/*.rs\",\n    \"Cargo.toml\",\n]\n\n```\n\n## [Uploading the crate](#uploading-the-crate)\n\nWhen you are ready to publish, use the [`cargo publish`](reference/../commands/cargo-publish.html) command to upload to [crates.io](https://crates.io/):\n\n```console\n$ cargo publish\n\n```\n\nAnd that’s it, you’ve now published your first crate!\n\n## [Publishing a new version of an existing crate](#publishing-a-new-version-of-an-existing-crate)\n\nIn order to release a new version, change [the `version` value](about:blank/reference/manifest.html#the-version-field) specified in your `Cargo.toml` manifest. Keep in mind [the SemVer rules](reference/semver.html) which provide guidelines on what is a compatible change. Then run [`cargo publish`](reference/../commands/cargo-publish.html) as described above to upload the new version.\n\n> **Recommendation:** Consider the full release process and automate what you can.\n> \n> Each version should include:\n> \n> -   A changelog entry, preferably [manually curated](https://keepachangelog.com/en/1.0.0/) though a generated one is better than nothing\n> -   A [git tag](https://git-scm.com/book/en/v2/Git-Basics-Tagging) pointing to the published commit\n> \n> Examples of third-party tools that are representative of different workflows include (in alphabetical order):\n> \n> -   [cargo-release](https://crates.io/crates/cargo-release)\n> -   [cargo-smart-release](https://crates.io/crates/cargo-smart-release)\n> -   [release-plz](https://crates.io/crates/release-plz)\n> \n> For more, see [crates.io](https://crates.io/search?q=cargo%20release).\n\n## [Managing a crates.io-based crate](#managing-a-cratesio-based-crate)\n\nManagement of crates is primarily done through the command line `cargo` tool rather than the [crates.io](https://crates.io/) web interface. For this, there are a few subcommands to manage a crate.\n\n### [`cargo yank`](#cargo-yank)\n\nOccasions may arise where you publish a version of a crate that actually ends up being broken for one reason or another (syntax error, forgot to include a file, etc.). For situations such as this, Cargo supports a “yank” of a version of a crate.\n\n```console\n$ cargo yank --version 1.0.1\n$ cargo yank --version 1.0.1 --undo\n\n```\n\nA yank **does not** delete any code. This feature is not intended for deleting accidentally uploaded secrets, for example. If that happens, you must reset those secrets immediately.\n\nThe semantics of a yanked version are that no new dependencies can be created against that version, but all existing dependencies continue to work. One of the major goals of [crates.io](https://crates.io/) is to act as a permanent archive of crates that does not change over time, and allowing deletion of a version would go against this goal. Essentially a yank means that all packages with a `Cargo.lock` will not break, while any future `Cargo.lock` files generated will not list the yanked version.\n\n### [`cargo owner`](#cargo-owner)\n\nA crate is often developed by more than one person, or the primary maintainer may change over time! The owner of a crate is the only person allowed to publish new versions of the crate, but an owner may designate additional owners.\n\n```console\n$ cargo owner --add github-handle\n$ cargo owner --remove github-handle\n$ cargo owner --add github:rust-lang:owners\n$ cargo owner --remove github:rust-lang:owners\n\n```\n\nThe owner IDs given to these commands must be GitHub user names or GitHub teams.\n\nIf a user name is given to `--add`, that user is invited as a “named” owner, with full rights to the crate. In addition to being able to publish or yank versions of the crate, they have the ability to add or remove owners, _including_ the owner that made _them_ an owner. Needless to say, you shouldn’t make people you don’t fully trust into a named owner. In order to become a named owner, a user must have logged into [crates.io](https://crates.io/) previously.\n\nIf a team name is given to `--add`, that team is invited as a “team” owner, with restricted right to the crate. While they have permission to publish or yank versions of the crate, they _do not_ have the ability to add or remove owners. In addition to being more convenient for managing groups of owners, teams are just a bit more secure against owners becoming malicious.\n\nThe syntax for teams is currently `github:org:team` (see examples above). In order to invite a team as an owner one must be a member of that team. No such restriction applies to removing a team as an owner.\n\n## [GitHub permissions](#github-permissions)\n\nTeam membership is not something GitHub provides simple public access to, and it is likely for you to encounter the following message when working with them:\n\n> It looks like you don’t have permission to query a necessary property from GitHub to complete this request. You may need to re-authenticate on [crates.io](https://crates.io/) to grant permission to read GitHub org memberships.\n\nThis is basically a catch-all for “you tried to query a team, and one of the five levels of membership access control denied this”. That is not an exaggeration. GitHub’s support for team access control is Enterprise Grade.\n\nThe most likely cause of this is simply that you last logged in before this feature was added. We originally requested _no_ permissions from GitHub when authenticating users, because we didn’t actually ever use the user’s token for anything other than logging them in. However to query team membership on your behalf, we now require [the `read:org` scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nYou are free to deny us this scope, and everything that worked before teams were introduced will keep working. However you will never be able to add a team as an owner, or publish a crate as a team owner. If you ever attempt to do this, you will get the error above. You may also see this error if you ever try to publish a crate that you don’t own at all, but otherwise happens to have a team.\n\nIf you ever change your mind, or just aren’t sure if [crates.io](https://crates.io/) has sufficient permission, you can always go to [https://crates.io/](https://crates.io/) and re-authenticate, which will prompt you for permission if [crates.io](https://crates.io/) doesn’t have all the scopes it would like to.\n\nAn additional barrier to querying GitHub is that the organization may be actively denying third party access. To check this, you can go to:\n\n```text\nhttps://github.com/organizations/:org/settings/oauth_application_policy\n\n```\n\nwhere `:org` is the name of the organization (e.g., `rust-lang`). You may see something like:\n\n![Organization Access Control](reference/../images/org-level-acl.png)\n\nWhere you may choose to explicitly remove [crates.io](https://crates.io/) from your organization’s blacklist, or simply press the “Remove Restrictions” button to allow all third party applications to access this data.\n\nAlternatively, when [crates.io](https://crates.io/) requested the `read:org` scope, you could have explicitly whitelisted [crates.io](https://crates.io/) querying the org in question by pressing the “Grant Access” button next to its name:\n\n![Authentication Access Control](reference/../images/auth-level-acl.png)\n\n### [Troubleshooting GitHub team access errors](#troubleshooting-github-team-access-errors)\n\nWhen trying to add a GitHub team as crate owner, you may see an error like:\n\n```text\nerror: failed to invite owners to crate <crate_name>: api errors (status 200 OK): could not find the github team org/repo\n\n```\n\nIn that case, you should go to [the GitHub Application settings page](https://github.com/settings/applications) and check if crates.io is listed in the `Authorized OAuth Apps` tab. If it isn’t, you should go to [https://crates.io/](https://crates.io/) and authorize it. Then go back to the Application Settings page on GitHub, click on the crates.io application in the list, and make sure you or your organization is listed in the “Organization access” list with a green check mark. If there’s a button labeled `Grant` or `Request`, you should grant the access or request the org owner to do so.\n\n## [Package ID Specifications](#package-id-specifications)\n\n## [Package ID specifications](#package-id-specifications-1)\n\nSubcommands of Cargo frequently need to refer to a particular package within a dependency graph for various operations like updating, cleaning, building, etc. To solve this problem, Cargo supports _Package ID Specifications_. A specification is a string which is used to uniquely refer to one package within a graph of packages.\n\nThe specification may be fully qualified, such as `https://github.com/rust-lang/crates.io-index#regex@1.4.3` or it may be abbreviated, such as `regex`. The abbreviated form may be used as long as it uniquely identifies a single package in the dependency graph. If there is ambiguity, additional qualifiers can be added to make it unique. For example, if there are two versions of the `regex` package in the graph, then it can be qualified with a version to make it unique, such as `regex@1.4.3`.\n\n### [Specification grammar](#specification-grammar)\n\nThe formal grammar for a Package Id Specification is:\n\n```notrust\nspec := pkgname |\n        [ kind \"+\" ] proto \"://\" hostname-and-path [ \"?\" query] [ \"#\" ( pkgname | semver ) ]\nquery = ( \"branch\" | \"tag\" | \"rev\" ) \"=\" ref\npkgname := name [ (\"@\" | \":\" ) semver ]\nsemver := digits [ \".\" digits [ \".\" digits [ \"-\" prerelease ] [ \"+\" build ]]]\n\nkind = \"registry\" | \"git\" | \"file\"\nproto := \"http\" | \"git\" | ...\n\n```\n\nHere, brackets indicate that the contents are optional.\n\nThe URL form can be used for git dependencies, or to differentiate packages that come from different sources such as different registries.\n\n### [Example specifications](#example-specifications)\n\nThe following are references to the `regex` package on `crates.io`:\n\n| Spec | Name | Version |\n| --- | --- | --- |\n| `regex` | `regex` | `*` |\n| `regex@1.4` | `regex` | `1.4.*` |\n| `regex@1.4.3` | `regex` | `1.4.3` |\n| `https://github.com/rust-lang/crates.io-index#regex` | `regex` | `*` |\n| `https://github.com/rust-lang/crates.io-index#regex@1.4.3` | `regex` | `1.4.3` |\n| `registry+https://github.com/rust-lang/crates.io-index#regex@1.4.3` | `regex` | `1.4.3` |\n\nThe following are some examples of specs for several different git dependencies:\n\n| Spec | Name | Version |\n| --- | --- | --- |\n| `https://github.com/rust-lang/cargo#0.52.0` | `cargo` | `0.52.0` |\n| `https://github.com/rust-lang/cargo#cargo-platform@0.1.2` | `cargo-platform` | `0.1.2` |\n| `ssh://git@github.com/rust-lang/regex.git#regex@1.4.3` | `regex` | `1.4.3` |\n| `git+ssh://git@github.com/rust-lang/regex.git#regex@1.4.3` | `regex` | `1.4.3` |\n| `git+ssh://git@github.com/rust-lang/regex.git?branch=dev#regex@1.4.3` | `regex` | `1.4.3` |\n\nLocal packages on the filesystem can use `file://` URLs to reference them:\n\n| Spec | Name | Version |\n| --- | --- | --- |\n| `file:///path/to/my/project/foo` | `foo` | `*` |\n| `file:///path/to/my/project/foo#1.1.8` | `foo` | `1.1.8` |\n| `path+file:///path/to/my/project/foo#1.1.8` | `foo` | `1.1.8` |\n\n### [Brevity of specifications](#brevity-of-specifications)\n\nThe goal of this is to enable both succinct and exhaustive syntaxes for referring to packages in a dependency graph. Ambiguous references may refer to one or more packages. Most commands generate an error if more than one package could be referred to with the same specification.\n\n## [Source Replacement](#source-replacement)\n\nThis document is about replacing the crate index. You can read about overriding dependencies in the [overriding dependencies](reference/overriding-dependencies.html) section of this documentation.\n\nA _source_ is a provider that contains crates that may be included as dependencies for a package. Cargo supports the ability to **replace one source with another** to express strategies such as:\n\n-   Vendoring — custom sources can be defined which represent crates on the local filesystem. These sources are subsets of the source that they’re replacing and can be checked into packages if necessary.\n    \n-   Mirroring — sources can be replaced with an equivalent version which acts as a cache for crates.io itself.\n    \n\nCargo has a core assumption about source replacement that the source code is exactly the same from both sources. Note that this also means that a replacement source is not allowed to have crates which are not present in the original source.\n\nAs a consequence, source replacement is not appropriate for situations such as patching a dependency or a private registry. Cargo supports patching dependencies through the usage of [the `[patch]` key](reference/overriding-dependencies.html), and private registry support is described in [the Registries chapter](reference/registries.html).\n\nWhen using source replacement, running commands like `cargo publish` that need to contact the registry require passing the `--registry` option. This helps avoid any ambiguity about which registry to contact, and will use the authentication token for the specified registry.\n\n## [Configuration](#configuration-1)\n\nConfiguration of replacement sources is done through [`.cargo/config.toml`](reference/config.html) and the full set of available keys are:\n\n```toml\n# The `source` table is where all keys related to source-replacement\n# are stored.\n[source]\n\n# Under the `source` table are a number of other tables whose keys are a\n# name for the relevant source. For example this section defines a new\n# source, called `my-vendor-source`, which comes from a directory\n# located at `vendor` relative to the directory containing this `.cargo/config.toml`\n# file\n[source.my-vendor-source]\ndirectory = \"vendor\"\n\n# The crates.io default source for crates is available under the name\n# \"crates-io\", and here we use the `replace-with` key to indicate that it's\n# replaced with our source above.\n#\n# The `replace-with` key can also reference an alternative registry name\n# defined in the `[registries]` table.\n[source.crates-io]\nreplace-with = \"my-vendor-source\"\n\n# Each source has its own table where the key is the name of the source\n[source.the-source-name]\n\n# Indicate that `the-source-name` will be replaced with `another-source`,\n# defined elsewhere\nreplace-with = \"another-source\"\n\n# Several kinds of sources can be specified (described in more detail below):\nregistry = \"https://example.com/path/to/index\"\nlocal-registry = \"path/to/registry\"\ndirectory = \"path/to/vendor\"\n\n# Git sources can optionally specify a branch/tag/rev as well\ngit = \"https://example.com/path/to/repo\"\n# branch = \"master\"\n# tag = \"v1.0.1\"\n# rev = \"313f44e8\"\n\n```\n\n## [Registry Sources](#registry-sources)\n\nA “registry source” is one that is the same as crates.io itself. That is, it has an index served in a git repository which matches the format of the [crates.io index](https://github.com/rust-lang/crates.io-index). That repository then has configuration indicating where to download crates from.\n\nCurrently there is not an already-available project for setting up a mirror of crates.io. Stay tuned though!\n\n## [Local Registry Sources](#local-registry-sources)\n\nA “local registry source” is intended to be a subset of another registry source, but available on the local filesystem (aka vendoring). Local registries are downloaded ahead of time, typically sync’d with a `Cargo.lock`, and are made up of a set of `*.crate` files and an index like the normal registry is.\n\nThe primary way to manage and create local registry sources is through the [`cargo-local-registry`](https://crates.io/crates/cargo-local-registry) subcommand, [available on crates.io](https://crates.io/crates/cargo-local-registry) and can be installed with `cargo install cargo-local-registry`.\n\nLocal registries are contained within one directory and contain a number of `*.crate` files downloaded from crates.io as well as an `index` directory with the same format as the crates.io-index project (populated with just entries for the crates that are present).\n\n## [Directory Sources](#directory-sources)\n\nA “directory source” is similar to a local registry source where it contains a number of crates available on the local filesystem, suitable for vendoring dependencies. Directory sources are primarily managed by the `cargo vendor` subcommand.\n\nDirectory sources are distinct from local registries though in that they contain the unpacked version of `*.crate` files, making it more suitable in some situations to check everything into source control. A directory source is just a directory containing a number of other directories which contain the source code for crates (the unpacked version of `*.crate` files). Currently no restriction is placed on the name of each directory.\n\nEach crate in a directory source also has an associated metadata file indicating the checksum of each file in the crate to protect against accidental modifications.\n\nOne of the goals of Cargo is simple integration with third-party tools, like IDEs and other build systems. To make integration easier, Cargo has several facilities:\n\n-   a [`cargo metadata`](reference/../commands/cargo-metadata.html) command, which outputs package structure and dependencies information in JSON,\n    \n-   a `--message-format` flag, which outputs information about a particular build, and\n    \n-   support for custom subcommands.\n    \n\n## [Information about package structure](#information-about-package-structure)\n\nYou can use [`cargo metadata`](reference/../commands/cargo-metadata.html) command to get information about package structure and dependencies. See the [`cargo metadata`](reference/../commands/cargo-metadata.html) documentation for details on the format of the output.\n\nThe format is stable and versioned. When calling `cargo metadata`, you should pass `--format-version` flag explicitly to avoid forward incompatibility hazard.\n\nIf you are using Rust, the [cargo\\_metadata](https://crates.io/crates/cargo_metadata) crate can be used to parse the output.\n\n## [JSON messages](#json-messages)\n\nWhen passing `--message-format=json`, Cargo will output the following information during the build:\n\n-   compiler errors and warnings,\n    \n-   produced artifacts,\n    \n-   results of the build scripts (for example, native dependencies).\n    \n\nThe output goes to stdout in the JSON object per line format. The `reason` field distinguishes different kinds of messages. The `package_id` field is a unique identifier for referring to the package, and as the `--package` argument to many commands. The syntax grammar can be found in chapter [Package ID Specifications](reference/./pkgid-spec.html).\n\nThe `--message-format` option can also take additional formatting values which alter the way the JSON messages are computed and rendered. See the description of the `--message-format` option in the [build command documentation](reference/../commands/cargo-build.html) for more details.\n\nIf you are using Rust, the [cargo\\_metadata](https://crates.io/crates/cargo_metadata) crate can be used to parse these messages.\n\n### [Compiler messages](#compiler-messages)\n\nThe “compiler-message” message includes output from the compiler, such as warnings and errors. See the [rustc JSON chapter](reference/../../rustc/json.html) for details on `rustc`’s message format, which is embedded in the following structure:\n\n```javascript\n{\n    /* The \"reason\" indicates the kind of message. */\n    \"reason\": \"compiler-message\",\n    /* The Package ID, a unique identifier for referring to the package. */\n    \"package_id\": \"file:///path/to/my-package#0.1.0\",\n    /* Absolute path to the package manifest. */\n    \"manifest_path\": \"/path/to/my-package/Cargo.toml\",\n    /* The Cargo target (lib, bin, example, etc.) that generated the message. */\n    \"target\": {\n        /* Array of target kinds.\n           - lib targets list the `crate-type` values from the\n             manifest such as \"lib\", \"rlib\", \"dylib\",\n             \"proc-macro\", etc. (default [\"lib\"])\n           - binary is [\"bin\"]\n           - example is [\"example\"]\n           - integration test is [\"test\"]\n           - benchmark is [\"bench\"]\n           - build script is [\"custom-build\"]\n        */\n        \"kind\": [\n            \"lib\"\n        ],\n        /* Array of crate types.\n           - lib and example libraries list the `crate-type` values\n             from the manifest such as \"lib\", \"rlib\", \"dylib\",\n             \"proc-macro\", etc. (default [\"lib\"])\n           - all other target kinds are [\"bin\"]\n        */\n        \"crate_types\": [\n            \"lib\"\n        ],\n        /* The name of the target.\n           For lib targets, dashes will be replaced with underscores.\n        */\n        \"name\": \"my_package\",\n        /* Absolute path to the root source file of the target. */\n        \"src_path\": \"/path/to/my-package/src/lib.rs\",\n        /* The Rust edition of the target.\n           Defaults to the package edition.\n        */\n        \"edition\": \"2018\",\n        /* Array of required features.\n           This property is not included if no required features are set.\n        */\n        \"required-features\": [\"feat1\"],\n        /* Whether the target should be documented by `cargo doc`. */\n        \"doc\": true,\n        /* Whether or not this target has doc tests enabled, and\n           the target is compatible with doc testing.\n        */\n        \"doctest\": true\n        /* Whether or not this target should be built and run with `--test`\n        */\n        \"test\": true\n    },\n    /* The message emitted by the compiler.\n\n    See https://doc.rust-lang.org/rustc/json.html for details.\n    */\n    \"message\": {\n        /* ... */\n    }\n}\n\n```\n\n### [Artifact messages](#artifact-messages)\n\nFor every compilation step, a “compiler-artifact” message is emitted with the following structure:\n\n```javascript\n{\n    /* The \"reason\" indicates the kind of message. */\n    \"reason\": \"compiler-artifact\",\n    /* The Package ID, a unique identifier for referring to the package. */\n    \"package_id\": \"file:///path/to/my-package#0.1.0\",\n    /* Absolute path to the package manifest. */\n    \"manifest_path\": \"/path/to/my-package/Cargo.toml\",\n    /* The Cargo target (lib, bin, example, etc.) that generated the artifacts.\n       See the definition above for `compiler-message` for details.\n    */\n    \"target\": {\n        \"kind\": [\n            \"lib\"\n        ],\n        \"crate_types\": [\n            \"lib\"\n        ],\n        \"name\": \"my_package\",\n        \"src_path\": \"/path/to/my-package/src/lib.rs\",\n        \"edition\": \"2018\",\n        \"doc\": true,\n        \"doctest\": true,\n        \"test\": true\n    },\n    /* The profile indicates which compiler settings were used. */\n    \"profile\": {\n        /* The optimization level. */\n        \"opt_level\": \"0\",\n        /* The debug level, an integer of 0, 1, or 2, or a string\n           \"line-directives-only\" or \"line-tables-only\". If `null`, it implies\n           rustc's default of 0.\n        */\n        \"debuginfo\": 2,\n        /* Whether or not debug assertions are enabled. */\n        \"debug_assertions\": true,\n        /* Whether or not overflow checks are enabled. */\n        \"overflow_checks\": true,\n        /* Whether or not the `--test` flag is used. */\n        \"test\": false\n    },\n    /* Array of features enabled. */\n    \"features\": [\"feat1\", \"feat2\"],\n    /* Array of files generated by this step. */\n    \"filenames\": [\n        \"/path/to/my-package/target/debug/libmy_package.rlib\",\n        \"/path/to/my-package/target/debug/deps/libmy_package-be9f3faac0a26ef0.rmeta\"\n    ],\n    /* A string of the path to the executable that was created, or null if\n       this step did not generate an executable.\n    */\n    \"executable\": null,\n    /* Whether or not this step was actually executed.\n       When `true`, this means that the pre-existing artifacts were\n       up-to-date, and `rustc` was not executed. When `false`, this means that\n       `rustc` was run to generate the artifacts.\n    */\n    \"fresh\": true\n}\n\n\n```\n\n### [Build script output](#build-script-output)\n\nThe “build-script-executed” message includes the parsed output of a build script. Note that this is emitted even if the build script is not run; it will display the previously cached value. More details about build script output may be found in [the chapter on build scripts](reference/build-scripts.html).\n\n```javascript\n{\n    /* The \"reason\" indicates the kind of message. */\n    \"reason\": \"build-script-executed\",\n    /* The Package ID, a unique identifier for referring to the package. */\n    \"package_id\": \"file:///path/to/my-package#0.1.0\",\n    /* Array of libraries to link, as indicated by the `cargo::rustc-link-lib`\n       instruction. Note that this may include a \"KIND=\" prefix in the string\n       where KIND is the library kind.\n    */\n    \"linked_libs\": [\"foo\", \"static=bar\"],\n    /* Array of paths to include in the library search path, as indicated by\n       the `cargo::rustc-link-search` instruction. Note that this may include a\n       \"KIND=\" prefix in the string where KIND is the library kind.\n    */\n    \"linked_paths\": [\"/some/path\", \"native=/another/path\"],\n    /* Array of cfg values to enable, as indicated by the `cargo::rustc-cfg`\n       instruction.\n    */\n    \"cfgs\": [\"cfg1\", \"cfg2=\\\"string\\\"\"],\n    /* Array of [KEY, VALUE] arrays of environment variables to set, as\n       indicated by the `cargo::rustc-env` instruction.\n    */\n    \"env\": [\n        [\"SOME_KEY\", \"some value\"],\n        [\"ANOTHER_KEY\", \"another value\"]\n    ],\n    /* An absolute path which is used as a value of `OUT_DIR` environmental\n       variable when compiling current package.\n    */\n    \"out_dir\": \"/some/path/in/target/dir\"\n}\n\n```\n\n### [Build finished](#build-finished)\n\nThe “build-finished” message is emitted at the end of the build.\n\n```javascript\n{\n    /* The \"reason\" indicates the kind of message. */\n    \"reason\": \"build-finished\",\n    /* Whether or not the build finished successfully. */\n    \"success\": true,\n}\n\n```\n\nThis message can be helpful for tools to know when to stop reading JSON messages. Commands such as `cargo test` or `cargo run` can produce additional output after the build has finished. This message lets a tool know that Cargo will not produce additional JSON messages, but there may be additional output that may be generated afterwards (such as the output generated by the program executed by `cargo run`).\n\n> Note: There is experimental nightly-only support for JSON output for tests, so additional test-specific JSON messages may begin arriving after the “build-finished” message if that is enabled.\n\n## [Custom subcommands](#custom-subcommands)\n\nCargo is designed to be extensible with new subcommands without having to modify Cargo itself. This is achieved by translating a cargo invocation of the form cargo `(?<command>[^ ]+)` into an invocation of an external tool `cargo-${command}`. The external tool must be present in one of the user’s `$PATH` directories.\n\n> **Note**: Cargo defaults to prioritizing external tools in `$CARGO_HOME/bin` over `$PATH`. Users can override this precedence by adding `$CARGO_HOME/bin` to `$PATH`.\n\nWhen Cargo invokes a custom subcommand, the first argument to the subcommand will be the filename of the custom subcommand, as usual. The second argument will be the subcommand name itself. For example, the second argument would be `${command}` when invoking `cargo-${command}`. Any additional arguments on the command line will be forwarded unchanged.\n\nCargo can also display the help output of a custom subcommand with `cargo help ${command}`. Cargo assumes that the subcommand will print a help message if its third argument is `--help`. So, `cargo help ${command}` would invoke `cargo-${command} ${command} --help`.\n\nCustom subcommands may use the `CARGO` environment variable to call back to Cargo. Alternatively, it can link to `cargo` crate as a library, but this approach has drawbacks:\n\n-   Cargo as a library is unstable: the API may change without deprecation\n-   versions of the linked Cargo library may be different from the Cargo binary\n\nInstead, it is encouraged to use the CLI interface to drive Cargo. The [`cargo metadata`](reference/../commands/cargo-metadata.html) command can be used to obtain information about the current project (the [`cargo_metadata`](https://crates.io/crates/cargo_metadata) crate provides a Rust interface to this command).\n\n## [Registries](#registries-1)\n\nCargo installs crates and fetches dependencies from a “registry”. The default registry is [crates.io](https://crates.io/). A registry contains an “index” which contains a searchable list of available crates. A registry may also provide a web API to support publishing new crates directly from Cargo.\n\n> Note: If you are interested in mirroring or vendoring an existing registry, take a look at [Source Replacement](reference/source-replacement.html).\n\nIf you are implementing a registry server, see [Running a Registry](reference/running-a-registry.html) for more details about the protocol between Cargo and a registry.\n\nIf you’re using a registry that requires authentication, see [Registry Authentication](reference/registry-authentication.html). If you are implementing a credential provider, see [Credential Provider Protocol](reference/credential-provider-protocol.html) for details.\n\n## [Using an Alternate Registry](#using-an-alternate-registry)\n\nTo use a registry other than [crates.io](https://crates.io/), the name and index URL of the registry must be added to a [`.cargo/config.toml` file](reference/config.html). The `registries` table has a key for each registry, for example:\n\n```toml\n[registries]\nmy-registry = { index = \"https://my-intranet:8080/git/index\" }\n\n```\n\nThe `index` key should be a URL to a git repository with the registry’s index or a Cargo sparse registry URL with the `sparse+` prefix.\n\nA crate can then depend on a crate from another registry by specifying the `registry` key and a value of the registry’s name in that dependency’s entry in `Cargo.toml`:\n\n```toml\n# Sample Cargo.toml\n[package]\nname = \"my-project\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nother-crate = { version = \"1.0\", registry = \"my-registry\" }\n\n```\n\nAs with most config values, the index may be specified with an environment variable instead of a config file. For example, setting the following environment variable will accomplish the same thing as defining a config file:\n\n```ignore\nCARGO_REGISTRIES_MY_REGISTRY_INDEX=https://my-intranet:8080/git/index\n\n```\n\n> Note: [crates.io](https://crates.io/) does not accept packages that depend on crates from other registries.\n\n## [Publishing to an Alternate Registry](#publishing-to-an-alternate-registry)\n\nIf the registry supports web API access, then packages can be published directly to the registry from Cargo. Several of Cargo’s commands such as [`cargo publish`](reference/../commands/cargo-publish.html) take a `--registry` command-line flag to indicate which registry to use. For example, to publish the package in the current directory:\n\n1.  `cargo login --registry=my-registry`\n    \n    This only needs to be done once. You must enter the secret API token retrieved from the registry’s website. Alternatively the token may be passed directly to the `publish` command with the `--token` command-line flag or an environment variable with the name of the registry such as `CARGO_REGISTRIES_MY_REGISTRY_TOKEN`.\n    \n2.  `cargo publish --registry=my-registry`\n    \n\nInstead of always passing the `--registry` command-line option, the default registry may be set in [`.cargo/config.toml`](reference/config.html) with the `registry.default` key. For example:\n\n```toml\n[registry]\ndefault = \"my-registry\"\n\n```\n\nSetting the `package.publish` key in the `Cargo.toml` manifest restricts which registries the package is allowed to be published to. This is useful to prevent accidentally publishing a closed-source package to [crates.io](https://crates.io/). The value may be a list of registry names, for example:\n\n```toml\n[package]\n# ...\npublish = [\"my-registry\"]\n\n```\n\nThe `publish` value may also be `false` to restrict all publishing, which is the same as an empty list.\n\nThe authentication information saved by [`cargo login`](reference/../commands/cargo-login.html) is stored in the `credentials.toml` file in the Cargo home directory (default `$HOME/.cargo`). It has a separate table for each registry, for example:\n\n```toml\n[registries.my-registry]\ntoken = \"854DvwSlUwEHtIo3kWy6x7UCPKHfzCmy\"\n\n```\n\n## [Registry Protocols](#registry-protocols)\n\nCargo supports two remote registry protocols: `git` and `sparse`. If the registry index URL starts with `sparse+`, Cargo uses the sparse protocol. Otherwise Cargo uses the `git` protocol.\n\nThe `git` protocol stores index metadata in a git repository and requires Cargo to clone the entire repo.\n\nThe `sparse` protocol fetches individual metadata files using plain HTTP requests. Since Cargo only downloads the metadata for relevant crates, the `sparse` protocol can save significant time and bandwidth.\n\nThe [crates.io](https://crates.io/) registry supports both protocols. The protocol for crates.io is controlled via the [`registries.crates-io.protocol`](about:blank/reference/config.html#registriescrates-ioprotocol) config key.\n\n## [Registry Authentication](#registry-authentication)\n\nCargo authenticates to registries with credential providers. These credential providers are external executables or built-in providers that Cargo uses to store and retrieve credentials.\n\nUsing alternative registries with authentication _requires_ a credential provider to be configured to avoid unknowingly storing unencrypted credentials on disk. For historical reasons, public (non-authenticated) registries do not require credential provider configuration, and the `cargo:token` provider is used if no providers are configured.\n\nCargo also includes platform-specific providers that use the operating system to securely store tokens. The `cargo:token` provider is also included which stores credentials in unencrypted plain text in the [credentials](about:blank/reference/config.html#credentials) file.\n\n## [Recommended configuration](#recommended-configuration)\n\nIt’s recommended to configure a global credential provider list in `$CARGO_HOME/config.toml` which defaults to:\n\n-   Windows: `%USERPROFILE%\\.cargo\\config.toml`\n-   Unix: `~/.cargo/config.toml`\n\nThis recommended configuration uses the operating system provider, with a fallback to `cargo:token` to look in Cargo’s [credentials](about:blank/reference/config.html#credentials) file or environment variables:\n\n```toml\n# ~/.cargo/config.toml\n[registry]\nglobal-credential-providers = [\"cargo:token\", \"cargo:libsecret\", \"cargo:macos-keychain\", \"cargo:wincred\"]\n\n```\n\n_Note that later entries have higher precedence. See [`registry.global-credential-providers`](about:blank/reference/config.html#registryglobal-credential-providers) for more details._\n\nSome private registries may also recommend a registry-specific credential-provider. Check your registry’s documentation to see if this is the case.\n\n## [Built-in providers](#built-in-providers)\n\nCargo includes several built-in credential providers. The available built-in providers may change in future Cargo releases (though there are currently no plans to do so).\n\n### [`cargo:token`](#cargotoken)\n\nUses Cargo’s [credentials](about:blank/reference/config.html#credentials) file to store tokens unencrypted in plain text. When retrieving tokens, checks the `CARGO_REGISTRIES_<NAME>_TOKEN` environment variable. If this credential provider is not listed, then the `*_TOKEN` environment variables will not work.\n\n### [`cargo:wincred`](#cargowincred)\n\nUses the Windows Credential Manager to store tokens.\n\nThe credentials are stored as `cargo-registry:<index-url>` in the Credential Manager under “Windows Credentials”.\n\n### [`cargo:macos-keychain`](#cargomacos-keychain)\n\nUses the macOS Keychain to store tokens.\n\nThe Keychain Access app can be used to view stored tokens.\n\n### [`cargo:libsecret`](#cargolibsecret)\n\nUses [libsecret](https://wiki.gnome.org/Projects/Libsecret) to store tokens.\n\nAny password manager with libsecret support can be used to view stored tokens. The following are a few examples (non-exhaustive):\n\n-   [GNOME Keyring](https://wiki.gnome.org/Projects/GnomeKeyring)\n-   [KDE Wallet Manager](https://apps.kde.org/kwalletmanager5/) (since KDE Frameworks 5.97.0)\n-   [KeePassXC](https://keepassxc.org/) (since 2.5.0)\n\n### [`cargo:token-from-stdout <command> <args>`](#cargotoken-from-stdout-command-args)\n\nLaunch a subprocess that returns a token on stdout. Newlines will be trimmed.\n\n-   The process inherits the user’s stdin and stderr.\n-   It should exit 0 on success, and nonzero on error.\n-   [`cargo login`](reference/../commands/cargo-login.html) and [`cargo logout`](reference/../commands/cargo-logout.html) are not supported and return an error if used.\n\nThe following environment variables will be provided to the executed command:\n\n-   `CARGO` — Path to the `cargo` binary executing the command.\n-   `CARGO_REGISTRY_INDEX_URL` — The URL of the registry index.\n-   `CARGO_REGISTRY_NAME_OPT` — Optional name of the registry. Should not be used as a lookup key.\n\nArguments will be passed on to the subcommand.\n\n## [Credential plugins](#credential-plugins)\n\nFor credential provider plugins that follow Cargo’s [credential provider protocol](reference/credential-provider-protocol.html), the configuration value should be a string with the path to the executable (or the executable name if on the `PATH`).\n\nFor example, to install [cargo-credential-1password](https://crates.io/crates/cargo-credential-1password) from crates.io do the following:\n\nInstall the provider with `cargo install cargo-credential-1password`\n\nIn the config, add to (or create) `registry.global-credential-providers`:\n\n```toml\n[registry]\nglobal-credential-providers = [\"cargo:token\", \"cargo-credential-1password --account my.1password.com\"]\n\n```\n\nThe values in `global-credential-providers` are split on spaces into path and command-line arguments. To define a global credential provider where the path or arguments contain spaces, use the [`[credential-alias]` table](about:blank/reference/config.html#credential-alias).\n\n## [Credential Provider Protocol](#credential-provider-protocol)\n\nThis document describes information for building a Cargo credential provider. For information on setting up or using a credential provider, see [Registry Authentication](reference/registry-authentication.html).\n\nWhen using an external credential provider, Cargo communicates with the credential provider using stdin/stdout messages passed as single lines of JSON.\n\nCargo will always execute the credential provider with the `--cargo-plugin` argument. This enables a credential provider executable to have additional functionality beyond what Cargo needs. Additional arguments are included in the JSON via the `args` field.\n\n## [JSON messages](#json-messages-1)\n\nThe JSON messages in this document have newlines added for readability. Actual messages must not contain newlines.\n\n### [Credential hello](#credential-hello)\n\n-   Sent by: credential provider\n-   Purpose: used to identify the supported protocols on process startup\n\n```javascript\n{\n    \"v\":[1]\n}\n\n```\n\nRequests sent by Cargo will include a `v` field set to one of the versions listed here. If Cargo does not support any of the versions offered by the credential provider, it will issue an error and shut down the credential process.\n\n### [Registry information](#registry-information)\n\n-   Sent by: Cargo Not a message by itself. Included in all messages sent by Cargo as the `registry` field.\n\n```javascript\n{\n    // Index URL of the registry\n    \"index-url\":\"https://github.com/rust-lang/crates.io-index\",\n    // Name of the registry in configuration (optional)\n    \"name\": \"crates-io\",\n    // HTTP headers received from attempting to access an authenticated registry (optional)\n    \"headers\": [\"WWW-Authenticate: cargo\"]\n}\n\n```\n\n### [Login request](#login-request)\n\n-   Sent by: Cargo\n-   Purpose: collect and store credentials\n\n```javascript\n{\n    // Protocol version\n    \"v\":1,\n    // Action to perform: login\n    \"kind\":\"login\",\n    // Registry information (see Registry information)\n    \"registry\":{\"index-url\":\"sparse+https://registry-url/index/\", \"name\": \"my-registry\"},\n    // User-specified token from stdin or command line (optional)\n    \"token\": \"<the token value>\",\n    // URL that the user could visit to get a token (optional)\n    \"login-url\": \"http://registry-url/login\",\n    // Additional command-line args (optional)\n    \"args\":[]\n}\n\n```\n\nIf the `token` field is set, then the credential provider should use the token provided. If the `token` is not set, then the credential provider should prompt the user for a token.\n\nIn addition to the arguments that may be passed to the credential provider in configuration, `cargo login` also supports passing additional command line args via `cargo login -- <additional args>`. These additional arguments will be included in the `args` field after any args from Cargo configuration.\n\n### [Read request](#read-request)\n\n-   Sent by: Cargo\n-   Purpose: Get the credential for reading crate information\n\n```javascript\n{\n    // Protocol version\n    \"v\":1,\n    // Request kind: get credentials\n    \"kind\":\"get\",\n    // Action to perform: read crate information\n    \"operation\":\"read\",\n    // Registry information (see Registry information)\n    \"registry\":{\"index-url\":\"sparse+https://registry-url/index/\", \"name\": \"my-registry\"},\n    // Additional command-line args (optional)\n    \"args\":[]\n}\n\n```\n\n### [Publish request](#publish-request)\n\n-   Sent by: Cargo\n-   Purpose: Get the credential for publishing a crate\n\n```javascript\n{\n    // Protocol version\n    \"v\":1,\n    // Request kind: get credentials\n    \"kind\":\"get\",\n    // Action to perform: publish crate\n    \"operation\":\"publish\",\n    // Crate name\n    \"name\":\"sample\",\n    // Crate version\n    \"vers\":\"0.1.0\",\n    // Crate checksum\n    \"cksum\":\"...\",\n    // Registry information (see Registry information)\n    \"registry\":{\"index-url\":\"sparse+https://registry-url/index/\", \"name\": \"my-registry\"},\n    // Additional command-line args (optional)\n    \"args\":[]\n}\n\n```\n\n### [Get success response](#get-success-response)\n\n-   Sent by: credential provider\n-   Purpose: Gives the credential to Cargo\n\n```javascript\n{\"Ok\":{\n    // Response kind: this was a get request\n    \"kind\":\"get\",\n    // Token to send to the registry\n    \"token\":\"...\",\n    // Cache control. Can be one of the following:\n    // * \"never\": do not cache\n    // * \"session\": cache for the current cargo session\n    // * \"expires\": cache for the current cargo session until expiration\n    \"cache\":\"expires\",\n    // Unix timestamp (only for \"cache\": \"expires\")\n    \"expiration\":1693942857,\n    // Is the token operation independent?\n    \"operation_independent\":true\n}}\n\n```\n\nThe `token` will be sent to the registry as the value of the `Authorization` HTTP header.\n\n`operation_independent` indicates whether the token can be cached across different operations (such as publishing or fetching). In general, this should be `true` unless the provider wants to generate tokens that are scoped to specific operations.\n\n### [Login success response](#login-success-response)\n\n-   Sent by: credential provider\n-   Purpose: Indicates the login was successful\n\n```javascript\n{\"Ok\":{\n    // Response kind: this was a login request\n    \"kind\":\"login\"\n}}\n\n```\n\n### [Logout success response](#logout-success-response)\n\n-   Sent by: credential provider\n-   Purpose: Indicates the logout was successful\n\n```javascript\n{\"Ok\":{\n    // Response kind: this was a logout request\n    \"kind\":\"logout\"\n}}\n\n```\n\n### [Failure response (URL not supported)](#failure-response-url-not-supported)\n\n-   Sent by: credential provider\n-   Purpose: Gives error information to Cargo\n\n```javascript\n{\"Err\":{\n    \"kind\":\"url-not-supported\"\n}}\n\n```\n\nSent if the credential provider is designed to only handle specific registry URLs and the given URL is not supported. Cargo will attempt another provider if available.\n\n### [Failure response (not found)](#failure-response-not-found)\n\n-   Sent by: credential provider\n-   Purpose: Gives error information to Cargo\n\n```javascript\n{\"Err\":{\n    // Error: The credential could not be found in the provider.\n    \"kind\":\"not-found\"\n}}\n\n```\n\nSent if the credential could not be found. This is expected for `get` requests where the credential is not available, or `logout` requests where there is nothing found to erase.\n\n### [Failure response (operation not supported)](#failure-response-operation-not-supported)\n\n-   Sent by: credential provider\n-   Purpose: Gives error information to Cargo\n\n```javascript\n{\"Err\":{\n    // Error: The credential could not be found in the provider.\n    \"kind\":\"operation-not-supported\"\n}}\n\n```\n\nSent if the credential provider does not support the requested operation. If a provider only supports `get` and a `login` is requested, the provider should respond with this error.\n\n### [Failure response (other)](#failure-response-other)\n\n-   Sent by: credential provider\n-   Purpose: Gives error information to Cargo\n\n```javascript\n{\"Err\":{\n    // Error: something else has failed\n    \"kind\":\"other\",\n    // Error message string to be displayed\n    \"message\": \"free form string error message\",\n    // Detailed cause chain for the error (optional)\n    \"caused-by\": [\"cause 1\", \"cause 2\"]\n}}\n\n```\n\n## [Example communication to request a token for reading:](#example-communication-to-request-a-token-for-reading)\n\n1.  Cargo spawns the credential process, capturing stdin and stdout.\n2.  Credential process sends the Hello message to Cargo\n    ```javascript\n    { \"v\": [1] }\n    \n    ```\n    \n3.  Cargo sends the CredentialRequest message to the credential process (newlines added for readability).\n    ```javascript\n    {\n        \"v\": 1,\n        \"kind\": \"get\",\n        \"operation\": \"read\",\n        \"registry\":{\"index-url\":\"sparse+https://registry-url/index/\"}\n    }\n    \n    ```\n    \n4.  Credential process sends the CredentialResponse to Cargo (newlines added for readability).\n    ```javascript\n    {\n        \"token\": \"...\",\n        \"cache\": \"session\",\n        \"operation_independent\": true\n    }\n    \n    ```\n    \n5.  Cargo closes the stdin pipe to the credential provider and it exits.\n6.  Cargo uses the token for the remainder of the session (until Cargo exits) when interacting with this registry.\n\n## [Running a Registry](#running-a-registry)\n\nA minimal registry can be implemented by having a git repository that contains an index, and a server that contains the compressed `.crate` files created by [`cargo package`](reference/../commands/cargo-package.html). Users won’t be able to use Cargo to publish to it, but this may be sufficient for closed environments. The index format is described in [Registry Index](reference/registry-index.html).\n\nA full-featured registry that supports publishing will additionally need to have a web API service that conforms to the API used by Cargo. The web API is described in [Registry Web API](reference/registry-web-api.html).\n\nCommercial and community projects are available for building and running a registry. See [https://github.com/rust-lang/cargo/wiki/Third-party-registries](https://github.com/rust-lang/cargo/wiki/Third-party-registries) for a list of what is available.\n\n## [Index Format](#index-format)\n\nThe following defines the format of the index. New features are occasionally added, which are only understood starting with the version of Cargo that introduced them. Older versions of Cargo may not be able to use packages that make use of new features. However, the format for older packages should not change, so older versions of Cargo should be able to use them.\n\n## [Index Configuration](#index-configuration)\n\nThe root of the index contains a file named `config.json` which contains JSON information used by Cargo for accessing the registry. This is an example of what the [crates.io](https://crates.io/) config file looks like:\n\n```javascript\n{\n    \"dl\": \"https://crates.io/api/v1/crates\",\n    \"api\": \"https://crates.io\"\n}\n\n```\n\nThe keys are:\n\n-   `dl`: This is the URL for downloading crates listed in the index. The value may have the following markers which will be replaced with their corresponding value:\n    \n    -   `{crate}`: The name of crate.\n    -   `{version}`: The crate version.\n    -   `{prefix}`: A directory prefix computed from the crate name. For example, a crate named `cargo` has a prefix of `ca/rg`. See below for details.\n    -   `{lowerprefix}`: Lowercase variant of `{prefix}`.\n    -   `{sha256-checksum}`: The crate’s sha256 checksum.\n    \n    If none of the markers are present, then the value `/{crate}/{version}/download` is appended to the end.\n    \n-   `api`: This is the base URL for the web API. This key is optional, but if it is not specified, commands such as [`cargo publish`](reference/../commands/cargo-publish.html) will not work. The web API is described below.\n    \n-   `auth-required`: indicates whether this is a private registry that requires all operations to be authenticated including API requests, crate downloads and sparse index updates.\n    \n\n## [Download Endpoint](#download-endpoint)\n\nThe download endpoint should send the `.crate` file for the requested package. Cargo supports https, http, and file URLs, HTTP redirects, HTTP1 and HTTP2. The exact specifics of TLS support depend on the platform that Cargo is running on, the version of Cargo, and how it was compiled.\n\nIf `auth-required: true` is set in `config.json`, the `Authorization` header will be included with http(s) download requests.\n\n## [Index files](#index-files)\n\nThe rest of the index repository contains one file for each package, where the filename is the name of the package in lowercase. Each version of the package has a separate line in the file. The files are organized in a tier of directories:\n\n-   Packages with 1 character names are placed in a directory named `1`.\n-   Packages with 2 character names are placed in a directory named `2`.\n-   Packages with 3 character names are placed in the directory `3/{first-character}` where `{first-character}` is the first character of the package name.\n-   All other packages are stored in directories named `{first-two}/{second-two}` where the top directory is the first two characters of the package name, and the next subdirectory is the third and fourth characters of the package name. For example, `cargo` would be stored in a file named `ca/rg/cargo`.\n\n> Note: Although the index filenames are in lowercase, the fields that contain package names in `Cargo.toml` and the index JSON data are case-sensitive and may contain upper and lower case characters.\n\nThe directory name above is calculated based on the package name converted to lowercase; it is represented by the marker `{lowerprefix}`. When the original package name is used without case conversion, the resulting directory name is represented by the marker `{prefix}`. For example, the package `MyCrate` would have a `{prefix}` of `My/Cr` and a `{lowerprefix}` of `my/cr`. In general, using `{prefix}` is recommended over `{lowerprefix}`, but there are pros and cons to each choice. Using `{prefix}` on case-insensitive filesystems results in (harmless-but-inelegant) directory aliasing. For example, `crate` and `CrateTwo` have `{prefix}` values of `cr/at` and `Cr/at`; these are distinct on Unix machines but alias to the same directory on Windows. Using directories with normalized case avoids aliasing, but on case-sensitive filesystems it’s harder to support older versions of Cargo that lack `{prefix}`/`{lowerprefix}`. For example, nginx rewrite rules can easily construct `{prefix}` but can’t perform case-conversion to construct `{lowerprefix}`.\n\n## [Name restrictions](#name-restrictions)\n\nRegistries should consider enforcing limitations on package names added to their index. Cargo itself allows names with any [alphanumeric](about:blank/std/primitive.char.html#method.is_alphanumeric), `-`, or `_` characters. [crates.io](https://crates.io/) imposes its own limitations, including the following:\n\n-   Only allows ASCII characters.\n-   Only alphanumeric, `-`, and `_` characters.\n-   First character must be alphabetic.\n-   Case-insensitive collision detection.\n-   Prevent differences of `-` vs `_`.\n-   Under a specific length (max 64).\n-   Rejects reserved names, such as Windows special filenames like “nul”.\n\nRegistries should consider incorporating similar restrictions, and consider the security implications, such as [IDN homograph attacks](https://en.wikipedia.org/wiki/IDN_homograph_attack) and other concerns in [UTR36](https://www.unicode.org/reports/tr36/) and [UTS39](https://www.unicode.org/reports/tr39/).\n\n## [Version uniqueness](#version-uniqueness)\n\nIndexes _must_ ensure that each version only appears once for each package. This includes ignoring SemVer build metadata. For example, the index must _not_ contain two entries with a version `1.0.7` and `1.0.7+extra`.\n\n## [JSON schema](#json-schema)\n\nEach line in a package file contains a JSON object that describes a published version of the package. The following is a pretty-printed example with comments explaining the format of the entry.\n\n```javascript\n{\n    // The name of the package.\n    // This must only contain alphanumeric, `-`, or `_` characters.\n    \"name\": \"foo\",\n    // The version of the package this row is describing.\n    // This must be a valid version number according to the Semantic\n    // Versioning 2.0.0 spec at https://semver.org/.\n    \"vers\": \"0.1.0\",\n    // Array of direct dependencies of the package.\n    \"deps\": [\n        {\n            // Name of the dependency.\n            // If the dependency is renamed from the original package name,\n            // this is the new name. The original package name is stored in\n            // the `package` field.\n            \"name\": \"rand\",\n            // The SemVer requirement for this dependency.\n            // This must be a valid version requirement defined at\n            // https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html.\n            \"req\": \"^0.6\",\n            // Array of features (as strings) enabled for this dependency.\n            \"features\": [\"i128_support\"],\n            // Boolean of whether or not this is an optional dependency.\n            \"optional\": false,\n            // Boolean of whether or not default features are enabled.\n            \"default_features\": true,\n            // The target platform for the dependency.\n            // null if not a target dependency.\n            // Otherwise, a string such as \"cfg(windows)\".\n            \"target\": null,\n            // The dependency kind.\n            // \"dev\", \"build\", or \"normal\".\n            // Note: this is a required field, but a small number of entries\n            // exist in the crates.io index with either a missing or null\n            // `kind` field due to implementation bugs.\n            \"kind\": \"normal\",\n            // The URL of the index of the registry where this dependency is\n            // from as a string. If not specified or null, it is assumed the\n            // dependency is in the current registry.\n            \"registry\": null,\n            // If the dependency is renamed, this is a string of the actual\n            // package name. If not specified or null, this dependency is not\n            // renamed.\n            \"package\": null,\n        }\n    ],\n    // A SHA256 checksum of the `.crate` file.\n    \"cksum\": \"d867001db0e2b6e0496f9fac96930e2d42233ecd3ca0413e0753d4c7695d289c\",\n    // Set of features defined for the package.\n    // Each feature maps to an array of features or dependencies it enables.\n    \"features\": {\n        \"extras\": [\"rand/simd_support\"]\n    },\n    // Boolean of whether or not this version has been yanked.\n    \"yanked\": false,\n    // The `links` string value from the package's manifest, or null if not\n    // specified. This field is optional and defaults to null.\n    \"links\": null,\n    // An unsigned 32-bit integer value indicating the schema version of this\n    // entry.\n    //\n    // If this not specified, it should be interpreted as the default of 1.\n    //\n    // Cargo (starting with version 1.51) will ignore versions it does not\n    // recognize. This provides a method to safely introduce changes to index\n    // entries and allow older versions of cargo to ignore newer entries it\n    // doesn't understand. Versions older than 1.51 ignore this field, and\n    // thus may misinterpret the meaning of the index entry.\n    //\n    // The current values are:\n    //\n    // * 1: The schema as documented here, not including newer additions.\n    //      This is honored in Rust version 1.51 and newer.\n    // * 2: The addition of the `features2` field.\n    //      This is honored in Rust version 1.60 and newer.\n    \"v\": 2,\n    // This optional field contains features with new, extended syntax.\n    // Specifically, namespaced features (`dep:`) and weak dependencies\n    // (`pkg?/feat`).\n    //\n    // This is separated from `features` because versions older than 1.19\n    // will fail to load due to not being able to parse the new syntax, even\n    // with a `Cargo.lock` file.\n    //\n    // Cargo will merge any values listed here with the \"features\" field.\n    //\n    // If this field is included, the \"v\" field should be set to at least 2.\n    //\n    // Registries are not required to use this field for extended feature\n    // syntax, they are allowed to include those in the \"features\" field.\n    // Using this is only necessary if the registry wants to support cargo\n    // versions older than 1.19, which in practice is only crates.io since\n    // those older versions do not support other registries.\n    \"features2\": {\n        \"serde\": [\"dep:serde\", \"chrono?/serde\"]\n    }\n    // The minimal supported Rust version (optional)\n    // This must be a valid version requirement without an operator (e.g. no `=`)\n    \"rust_version\": \"1.60\"\n}\n\n```\n\nThe JSON objects should not be modified after they are added except for the `yanked` field whose value may change at any time.\n\n> **Note**: The index JSON format has subtle differences from the JSON format of the [Publish API](about:blank/reference/registry-web-api.html#publish) and [`cargo metadata`](reference/../commands/cargo-metadata.html). If you are using one of those as a source to generate index entries, you are encouraged to carefully inspect the documentation differences between them.\n> \n> For the [Publish API](about:blank/reference/registry-web-api.html#publish), the differences are:\n> \n> -   `deps`\n>     -   `name` — When the dependency is [renamed](about:blank/reference/specifying-dependencies.html#renaming-dependencies-in-cargotoml) in `Cargo.toml`, the publish API puts the original package name in the `name` field and the aliased name in the `explicit_name_in_toml` field. The index places the aliased name in the `name` field, and the original package name in the `package` field.\n>     -   `req` — The Publish API field is called `version_req`.\n> -   `cksum` — The publish API does not specify the checksum, it must be computed by the registry before adding to the index.\n> -   `features` — Some features may be placed in the `features2` field. Note: This is only a legacy requirement for [crates.io](https://crates.io/); other registries should not need to bother with modifying the features map. The `v` field indicates the presence of the `features2` field.\n> -   The publish API includes several other fields, such as `description` and `readme`, which don’t appear in the index. These are intended to make it easier for a registry to obtain the metadata about the crate to display on a website without needing to extract and parse the `.crate` file. This additional information is typically added to a database on the registry server.\n> -   Although `rust_version` is included here, [crates.io](https://crates.io/) will ignore this field and instead read it from the `Cargo.toml` contained in the `.crate` file.\n> \n> For [`cargo metadata`](reference/../commands/cargo-metadata.html), the differences are:\n> \n> -   `vers` — The `cargo metadata` field is called `version`.\n> -   `deps`\n>     -   `name` — When the dependency is [renamed](about:blank/reference/specifying-dependencies.html#renaming-dependencies-in-cargotoml) in `Cargo.toml`, `cargo metadata` puts the original package name in the `name` field and the aliased name in the `rename` field. The index places the aliased name in the `name` field, and the original package name in the `package` field.\n>     -   `default_features` — The `cargo metadata` field is called `uses_default_features`.\n>     -   `registry` — `cargo metadata` uses a value of `null` to indicate that the dependency comes from [crates.io](https://crates.io/). The index uses a value of `null` to indicate that the dependency comes from the same registry as the index. When creating an index entry, a registry other than [crates.io](https://crates.io/) should translate a value of `null` to be `https://github.com/rust-lang/crates.io-index` and translate a URL that matches the current index to be `null`.\n>     -   `cargo metadata` includes some extra fields, such as `source` and `path`.\n> -   The index includes additional fields such as `yanked`, `cksum`, and `v`.\n\n## [Index Protocols](#index-protocols)\n\nCargo supports two remote registry protocols: `git` and `sparse`. The `git` protocol stores index files in a git repository and the `sparse` protocol fetches individual files over HTTP.\n\n### [Git Protocol](#git-protocol)\n\nThe git protocol has no protocol prefix in the index url. For example the git index URL for [crates.io](https://crates.io/) is `https://github.com/rust-lang/crates.io-index`.\n\nCargo caches the git repository on disk so that it can efficiently incrementally fetch updates.\n\n### [Sparse Protocol](#sparse-protocol)\n\nThe sparse protocol uses the `sparse+` protocol prefix in the registry URL. For example, the sparse index URL for [crates.io](https://crates.io/) is `sparse+https://index.crates.io/`.\n\nThe sparse protocol downloads each index file using an individual HTTP request. Since this results in a large number of small HTTP requests, performance is significantly improved with a server that supports pipelining and HTTP/2.\n\n#### [Sparse authentication](#sparse-authentication)\n\nCargo will attempt to fetch the `config.json` file before fetching any other files. If the server responds with an HTTP 401, then Cargo will assume that the registry requires authentication and re-attempt the request for `config.json` with the authentication token included.\n\nOn authentication failure (or a missing authentication token) the server may include a `www-authenticate` header with a `Cargo login_url=\"<URL>\"` challenge to indicate where the user can go to get a token.\n\nRegistries that require authentication must set `auth-required: true` in `config.json`.\n\n#### [Caching](#caching)\n\nCargo caches the crate metadata files, and captures the `ETag` or `Last-Modified` HTTP header from the server for each entry. When refreshing crate metadata, Cargo sends the `If-None-Match` or `If-Modified-Since` header to allow the server to respond with HTTP 304 “Not Modified” if the local cache is valid, saving time and bandwidth. If both `ETag` and `Last-Modified` headers are present, Cargo uses the `ETag` only.\n\n#### [Cache Invalidation](#cache-invalidation)\n\nIf a registry is using some kind of CDN or proxy which caches access to the index files, then it is recommended that registries implement some form of cache invalidation when the files are updated. If these caches are not updated, then users may not be able to access new crates until the cache is cleared.\n\n#### [Nonexistent Crates](#nonexistent-crates)\n\nFor crates that do not exist, the registry should respond with a 404 “Not Found”, 410 “Gone” or 451 “Unavailable For Legal Reasons” code.\n\n#### [Sparse Limitations](#sparse-limitations)\n\nSince the URL of the registry is stored in the lockfile, it’s not recommended to offer a registry with both protocols. Discussion about a transition plan is ongoing in issue [#10964](https://github.com/rust-lang/cargo/issues/10964). The [crates.io](https://crates.io/) registry is an exception, since Cargo internally substitutes the equivalent git URL when the sparse protocol is used.\n\nIf a registry does offer both protocols, it’s currently recommended to choose one protocol as the canonical protocol and use [source replacement](reference/../reference/source-replacement.html) for the other protocol.\n\n## [Web API](#web-api)\n\nA registry may host a web API at the location defined in `config.json` to support any of the actions listed below.\n\nCargo includes the `Authorization` header for requests that require authentication. The header value is the API token. The server should respond with a 403 response code if the token is not valid. Users are expected to visit the registry’s website to obtain a token, and Cargo can store the token using the [`cargo login`](reference/../commands/cargo-login.html) command, or by passing the token on the command-line.\n\nResponses use a 2xx response code for success. Errors should use an appropriate response code, such as 404. Failure responses should have a JSON object with the following structure:\n\n```javascript\n{\n    // Array of errors to display to the user.\n    \"errors\": [\n        {\n            // The error message as a string.\n            \"detail\": \"error message text\"\n        }\n    ]\n}\n\n```\n\nIf the response has this structure Cargo will display the detailed message to the user, even if the response code is 200. If the response code indicates an error and the content does not have this structure, Cargo will display to the user a message intended to help debugging the server error. A server returning an `errors` object allows a registry to provide a more detailed or user-centric error message.\n\nFor backwards compatibility, servers should ignore any unexpected query parameters or JSON fields. If a JSON field is missing, it should be assumed to be null. The endpoints are versioned with the `v1` component of the path, and Cargo is responsible for handling backwards compatibility fallbacks should any be required in the future.\n\nCargo sets the following headers for all requests:\n\n-   `Content-Type`: `application/json` (for requests with a body payload)\n-   `Accept`: `application/json`\n-   `User-Agent`: The Cargo version such as `cargo/1.32.0 (8610973aa 2019-01-02)`. This may be modified by the user in a configuration value. Added in 1.29.\n\n## [Publish](#publish)\n\n-   Endpoint: `/api/v1/crates/new`\n-   Method: PUT\n-   Authorization: Included\n\nThe publish endpoint is used to publish a new version of a crate. The server should validate the crate, make it available for download, and add it to the index.\n\nIt is not required for the index to be updated before the successful response is sent. After a successful response, Cargo will poll the index for a short period of time to identify that the new crate has been added. If the crate does not appear in the index after a short period of time, then Cargo will display a warning letting the user know that the new crate is not yet available.\n\nThe body of the data sent by Cargo is:\n\n-   32-bit unsigned little-endian integer of the length of JSON data.\n-   Metadata of the package as a JSON object.\n-   32-bit unsigned little-endian integer of the length of the `.crate` file.\n-   The `.crate` file.\n\nThe following is a commented example of the JSON object. Some notes of some restrictions imposed by [crates.io](https://crates.io/) are included only to illustrate some suggestions on types of validation that may be done, and should not be considered as an exhaustive list of restrictions [crates.io](https://crates.io/) imposes.\n\n```javascript\n{\n    // The name of the package.\n    \"name\": \"foo\",\n    // The version of the package being published.\n    \"vers\": \"0.1.0\",\n    // Array of direct dependencies of the package.\n    \"deps\": [\n        {\n            // Name of the dependency.\n            // If the dependency is renamed from the original package name,\n            // this is the original name. The new package name is stored in\n            // the `explicit_name_in_toml` field.\n            \"name\": \"rand\",\n            // The semver requirement for this dependency.\n            \"version_req\": \"^0.6\",\n            // Array of features (as strings) enabled for this dependency.\n            \"features\": [\"i128_support\"],\n            // Boolean of whether or not this is an optional dependency.\n            \"optional\": false,\n            // Boolean of whether or not default features are enabled.\n            \"default_features\": true,\n            // The target platform for the dependency.\n            // null if not a target dependency.\n            // Otherwise, a string such as \"cfg(windows)\".\n            \"target\": null,\n            // The dependency kind.\n            // \"dev\", \"build\", or \"normal\".\n            \"kind\": \"normal\",\n            // The URL of the index of the registry where this dependency is\n            // from as a string. If not specified or null, it is assumed the\n            // dependency is in the current registry.\n            \"registry\": null,\n            // If the dependency is renamed, this is a string of the new\n            // package name. If not specified or null, this dependency is not\n            // renamed.\n            \"explicit_name_in_toml\": null,\n        }\n    ],\n    // Set of features defined for the package.\n    // Each feature maps to an array of features or dependencies it enables.\n    // Cargo does not impose limitations on feature names, but crates.io\n    // requires alphanumeric ASCII, `_` or `-` characters.\n    \"features\": {\n        \"extras\": [\"rand/simd_support\"]\n    },\n    // List of strings of the authors.\n    // May be empty.\n    \"authors\": [\"Alice <a@example.com>\"],\n    // Description field from the manifest.\n    // May be null. crates.io requires at least some content.\n    \"description\": null,\n    // String of the URL to the website for this package's documentation.\n    // May be null.\n    \"documentation\": null,\n    // String of the URL to the website for this package's home page.\n    // May be null.\n    \"homepage\": null,\n    // String of the content of the README file.\n    // May be null.\n    \"readme\": null,\n    // String of a relative path to a README file in the crate.\n    // May be null.\n    \"readme_file\": null,\n    // Array of strings of keywords for the package.\n    \"keywords\": [],\n    // Array of strings of categories for the package.\n    \"categories\": [],\n    // String of the license for the package.\n    // May be null. crates.io requires either `license` or `license_file` to be set.\n    \"license\": null,\n    // String of a relative path to a license file in the crate.\n    // May be null.\n    \"license_file\": null,\n    // String of the URL to the website for the source repository of this package.\n    // May be null.\n    \"repository\": null,\n    // Optional object of \"status\" badges. Each value is an object of\n    // arbitrary string to string mappings.\n    // crates.io has special interpretation of the format of the badges.\n    \"badges\": {\n        \"travis-ci\": {\n            \"branch\": \"master\",\n            \"repository\": \"rust-lang/cargo\"\n        }\n    },\n    // The `links` string value from the package's manifest, or null if not\n    // specified. This field is optional and defaults to null.\n    \"links\": null,\n    // The minimal supported Rust version (optional)\n    // This must be a valid version requirement without an operator (e.g. no `=`)\n    \"rust_version\": null\n}\n\n```\n\nA successful response includes the JSON object:\n\n```javascript\n{\n    // Optional object of warnings to display to the user.\n    \"warnings\": {\n        // Array of strings of categories that are invalid and ignored.\n        \"invalid_categories\": [],\n        // Array of strings of badge names that are invalid and ignored.\n        \"invalid_badges\": [],\n        // Array of strings of arbitrary warnings to display to the user.\n        \"other\": []\n    }\n}\n\n```\n\n## [Yank](#yank)\n\n-   Endpoint: `/api/v1/crates/{crate_name}/{version}/yank`\n-   Method: DELETE\n-   Authorization: Included\n\nThe yank endpoint will set the `yank` field of the given version of a crate to `true` in the index.\n\nA successful response includes the JSON object:\n\n```javascript\n{\n    // Indicates the yank succeeded, always true.\n    \"ok\": true,\n}\n\n```\n\n## [Unyank](#unyank)\n\n-   Endpoint: `/api/v1/crates/{crate_name}/{version}/unyank`\n-   Method: PUT\n-   Authorization: Included\n\nThe unyank endpoint will set the `yank` field of the given version of a crate to `false` in the index.\n\nA successful response includes the JSON object:\n\n```javascript\n{\n    // Indicates the unyank succeeded, always true.\n    \"ok\": true,\n}\n\n```\n\n## [Owners](#owners)\n\nCargo does not have an inherent notion of users and owners, but it does provide the `owner` command to assist managing who has authorization to control a crate. It is up to the registry to decide exactly how users and owners are handled. See the [publishing documentation](about:blank/reference/publishing.html#cargo-owner) for a description of how [crates.io](https://crates.io/) handles owners via GitHub users and teams.\n\n### [Owners: List](#owners-list)\n\n-   Endpoint: `/api/v1/crates/{crate_name}/owners`\n-   Method: GET\n-   Authorization: Included\n\nThe owners endpoint returns a list of owners of the crate.\n\nA successful response includes the JSON object:\n\n```javascript\n{\n    // Array of owners of the crate.\n    \"users\": [\n        {\n            // Unique unsigned 32-bit integer of the owner.\n            \"id\": 70,\n            // The unique username of the owner.\n            \"login\": \"github:rust-lang:core\",\n            // Name of the owner.\n            // This is optional and may be null.\n            \"name\": \"Core\",\n        }\n    ]\n}\n\n```\n\n### [Owners: Add](#owners-add)\n\n-   Endpoint: `/api/v1/crates/{crate_name}/owners`\n-   Method: PUT\n-   Authorization: Included\n\nA PUT request will send a request to the registry to add a new owner to a crate. It is up to the registry how to handle the request. For example, [crates.io](https://crates.io/) sends an invite to the user that they must accept before being added.\n\nThe request should include the following JSON object:\n\n```javascript\n{\n    // Array of `login` strings of owners to add.\n    \"users\": [\"login_name\"]\n}\n\n```\n\nA successful response includes the JSON object:\n\n```javascript\n{\n    // Indicates the add succeeded, always true.\n    \"ok\": true,\n    // A string to be displayed to the user.\n    \"msg\": \"user ehuss has been invited to be an owner of crate cargo\"\n}\n\n```\n\n### [Owners: Remove](#owners-remove)\n\n-   Endpoint: `/api/v1/crates/{crate_name}/owners`\n-   Method: DELETE\n-   Authorization: Included\n\nA DELETE request will remove an owner from a crate. The request should include the following JSON object:\n\n```javascript\n{\n    // Array of `login` strings of owners to remove.\n    \"users\": [\"login_name\"]\n}\n\n```\n\nA successful response includes the JSON object:\n\n```javascript\n{\n    // Indicates the remove succeeded, always true.\n    \"ok\": true\n    // A string to be displayed to the user. Currently ignored by cargo.\n    \"msg\": \"owners successfully removed\",\n}\n\n```\n\n## [Search](#search)\n\n-   Endpoint: `/api/v1/crates`\n-   Method: GET\n-   Query Parameters:\n    -   `q`: The search query string.\n    -   `per_page`: Number of results, default 10, max 100.\n\nThe search request will perform a search for crates, using criteria defined on the server.\n\nA successful response includes the JSON object:\n\n```javascript\n{\n    // Array of results.\n    \"crates\": [\n        {\n            // Name of the crate.\n            \"name\": \"rand\",\n            // The highest version available.\n            \"max_version\": \"0.6.1\",\n            // Textual description of the crate.\n            \"description\": \"Random number generators and other randomness functionality.\\n\",\n        }\n    ],\n    \"meta\": {\n        // Total number of results available on the server.\n        \"total\": 119\n    }\n}\n\n```\n\n## [Login](#login)\n\n-   Endpoint: `/me`\n\nThe “login” endpoint is not an actual API request. It exists solely for the [`cargo login`](reference/../commands/cargo-login.html) command to display a URL to instruct a user to visit in a web browser to log in and retrieve an API token.\n\n## [Dependency Resolution](#dependency-resolution)\n\nOne of Cargo’s primary tasks is to determine the versions of dependencies to use based on the version requirements specified in each package. This process is called “dependency resolution” and is performed by the “resolver”. The result of the resolution is stored in the `Cargo.lock` file which “locks” the dependencies to specific versions, and keeps them fixed over time.\n\nThe resolver attempts to unify common dependencies while considering possibly conflicting requirements. It turns out, however, that in many cases there is no single “best” dependency resolution, and so the resolver must use heuristics to choose a preferred solution. The sections below provide some details on how requirements are handled, and how to work with the resolver.\n\nSee the chapter [Specifying Dependencies](reference/specifying-dependencies.html) for more details about how dependency requirements are specified.\n\nThe [`cargo tree`](reference/../commands/cargo-tree.html) command can be used to visualize the result of the resolver.\n\n## [SemVer compatibility](#semver-compatibility-1)\n\nCargo uses [SemVer](https://semver.org/) for specifying version numbers. This establishes a common convention for what is compatible between different versions of a package. See the [SemVer Compatibility](reference/semver.html) chapter for guidance on what is considered a “compatible” change. This notion of “compatibility” is important because Cargo assumes it should be safe to update a dependency within a compatibility range without breaking the build.\n\nVersions are considered compatible if their left-most non-zero major/minor/patch component is the same. For example, `1.0.3` and `1.1.0` are considered compatible, and thus it should be safe to update from the older release to the newer one. However, an update from `1.1.0` to `2.0.0` would not be allowed to be made automatically. This convention also applies to versions with leading zeros. For example, `0.1.0` and `0.1.2` are compatible, but `0.1.0` and `0.2.0` are not. Similarly, `0.0.1` and `0.0.2` are not compatible.\n\nAs a quick refresher, the [_version requirement_ syntax](reference/specifying-dependencies.html) Cargo uses for dependencies is:\n\n| Requirement | Example | Equivalence | Description |\n| --- | --- | --- | --- |\n| Caret | `1.2.3` or `^1.2.3` | `>=1.2.3, <2.0.0` | Any SemVer-compatible version of at least the given value. |\n| Tilde | `~1.2` | `>=1.2.0, <1.3.0` | Minimum version, with restricted compatibility range. |\n| Wildcard | `1.*` | `>=1.0.0, <2.0.0` | Any version in the `*` position. |\n| Equals | `=1.2.3` | `=1.2.3` | Exactly the specified version only. |\n| Comparison | `>1.1` | `>=1.2.0` | Naive numeric comparison of specified digits. |\n| Compound | `>=1.2, <1.5` | `>=1.2.0, <1.5.0` | Multiple requirements that must be simultaneously satisfied. |\n\nWhen multiple packages specify a dependency for a common package, the resolver attempts to ensure that they use the same version of that common package, as long as they are within a SemVer compatibility range. It also attempts to use the greatest version currently available within that compatibility range. For example, if there are two packages in the resolve graph with the following requirements:\n\n```toml\n# Package A\n[dependencies]\nbitflags = \"1.0\"\n\n# Package B\n[dependencies]\nbitflags = \"1.1\"\n\n```\n\nIf at the time the `Cargo.lock` file is generated, the greatest version of `bitflags` is `1.2.1`, then both packages will use `1.2.1` because it is the greatest within the compatibility range. If `2.0.0` is published, it will still use `1.2.1` because `2.0.0` is considered incompatible.\n\nIf multiple packages have a common dependency with semver-incompatible versions, then Cargo will allow this, but will build two separate copies of the dependency. For example:\n\n```toml\n# Package A\n[dependencies]\nrand = \"0.7\"\n\n# Package B\n[dependencies]\nrand = \"0.6\"\n\n```\n\nThe above will result in Package A using the greatest `0.7` release (`0.7.3` at the time of this writing) and Package B will use the greatest `0.6` release (`0.6.5` for example). This can lead to potential problems, see the [Version-incompatibility hazards](about:blank/reference/resolver.html#version-incompatibility-hazards) section for more details.\n\nMultiple versions within the same compatibility range are not allowed and will result in a resolver error if it is constrained to two different versions within a compatibility range. For example, if there are two packages in the resolve graph with the following requirements:\n\n```toml\n# Package A\n[dependencies]\nlog = \"=0.4.11\"\n\n# Package B\n[dependencies]\nlog = \"=0.4.8\"\n\n```\n\nThe above will fail because it is not allowed to have two separate copies of the `0.4` release of the `log` package.\n\n### [Version-incompatibility hazards](#version-incompatibility-hazards)\n\nWhen multiple versions of a crate appear in the resolve graph, this can cause problems when types from those crates are exposed by the crates using them. This is because the types and items are considered different by the Rust compiler, even if they have the same name. Libraries should take care when publishing a SemVer-incompatible version (for example, publishing `2.0.0` after `1.0.0` has been in use), particularly for libraries that are widely used.\n\nThe “[semver trick](https://github.com/dtolnay/semver-trick)” is a workaround for this problem of publishing a breaking change while retaining compatibility with older versions. The linked page goes into detail about what the problem is and how to address it. In short, when a library wants to publish a SemVer-breaking release, publish the new release, and also publish a point release of the previous version that reexports the types from the newer version.\n\nThese incompatibilities usually manifest as a compile-time error, but sometimes they will only appear as a runtime misbehavior. For example, let’s say there is a common library named `foo` that ends up appearing with both version `1.0.0` and `2.0.0` in the resolve graph. If [`downcast_ref`](about:blank/std/any/trait.Any.html#method.downcast_ref) is used on a object created by a library using version `1.0.0`, and the code calling `downcast_ref` is downcasting to a type from version `2.0.0`, the downcast will fail at runtime.\n\nIt is important to make sure that if you have multiple versions of a library that you are properly using them, especially if it is ever possible for the types from different versions to be used together. The [`cargo tree -d`](reference/../commands/cargo-tree.html) command can be used to identify duplicate versions and where they come from. Similarly, it is important to consider the impact on the ecosystem if you publish a SemVer-incompatible version of a popular library.\n\n### [Pre-releases](#pre-releases)\n\nSemVer has the concept of “pre-releases” with a dash in the version, such as `1.0.0-alpha`, or `1.0.0-beta`. Cargo will avoid automatically using pre-releases unless explicitly asked. For example, if `1.0.0-alpha` of package `foo` is published, then a requirement of `foo = \"1.0\"` will _not_ match, and will return an error. The pre-release must be specified, such as `foo = \"1.0.0-alpha\"`. Similarly [`cargo install`](reference/../commands/cargo-install.html) will avoid pre-releases unless explicitly asked to install one.\n\nCargo allows “newer” pre-releases to be used automatically. For example, if `1.0.0-beta` is published, then a requirement `foo = \"1.0.0-alpha\"` will allow updating to the `beta` version. Note that this only works on the same release version, `foo = \"1.0.0-alpha\"` will not allow updating to `foo = \"1.0.1-alpha\"` or `foo = \"1.0.1-beta\"`.\n\nCargo will also upgrade automatically to semver-compatible released versions from prereleases. The requirement `foo = \"1.0.0-alpha\"` will allow updating to `foo = \"1.0.0\"` as well as `foo = \"1.2.0\"`.\n\nBeware that pre-release versions can be unstable, and as such care should be taken when using them. Some projects may choose to publish breaking changes between pre-release versions. It is recommended to not use pre-release dependencies in a library if your library is not also a pre-release. Care should also be taken when updating your `Cargo.lock`, and be prepared if a pre-release update causes issues.\n\nThe pre-release tag may be separated with periods to distinguish separate components. Numeric components will use numeric comparison. For example, `1.0.0-alpha.4` will use numeric comparison for the `4` component. That means that if `1.0.0-alpha.11` is published, that will be chosen as the greatest release. Non-numeric components are compared lexicographically.\n\n### [Version metadata](#version-metadata)\n\nSemVer has the concept of “version metadata” with a plus in the version, such as `1.0.0+21AF26D3`. This metadata is usually ignored, and should not be used in a version requirement. You should never publish multiple versions that differ only in the metadata tag.\n\n## [Other constraints](#other-constraints)\n\nVersion requirements aren’t the only constraint that the resolver considers when selecting and unifying dependencies. The following sections cover some of the other constraints that can affect resolution.\n\n### [Features](#features-1)\n\nFor the purpose of generating `Cargo.lock`, the resolver builds the dependency graph as-if all [features](reference/features.html) of all [workspace](reference/workspaces.html) members are enabled. This ensures that any optional dependencies are available and properly resolved with the rest of the graph when features are added or removed with the [`--features` command-line flag](about:blank/reference/features.html#command-line-feature-options). The resolver runs a second time to determine the actual features used when _compiling_ a crate, based on the features selected on the command-line.\n\nDependencies are resolved with the union of all features enabled on them. For example, if one package depends on the [`im`](https://crates.io/crates/im) package with the [`serde` dependency](https://github.com/bodil/im-rs/blob/v15.0.0/Cargo.toml#L46) enabled and another package depends on it with the [`rayon` dependency](https://github.com/bodil/im-rs/blob/v15.0.0/Cargo.toml#L47) enabled, then `im` will be built with both features enabled, and the `serde` and `rayon` crates will be included in the resolve graph. If no packages depend on `im` with those features, then those optional dependencies will be ignored, and they will not affect resolution.\n\nWhen building multiple packages in a workspace (such as with `--workspace` or multiple `-p` flags), the features of the dependencies of all of those packages are unified. If you have a circumstance where you want to avoid that unification for different workspace members, you will need to build them via separate `cargo` invocations.\n\nThe resolver will skip over versions of packages that are missing required features. For example, if a package depends on version `^1` of [`regex`](https://crates.io/crates/regex) with the [`perf` feature](https://github.com/rust-lang/regex/blob/1.3.0/Cargo.toml#L56), then the oldest version it can select is `1.3.0`, because versions prior to that did not contain the `perf` feature. Similarly, if a feature is removed from a new release, then packages that require that feature will be stuck on the older releases that contain that feature. It is discouraged to remove features in a SemVer-compatible release. Beware that optional dependencies also define an implicit feature, so removing an optional dependency or making it non-optional can cause problems, see [removing an optional dependency](about:blank/reference/semver.html#cargo-remove-opt-dep).\n\n#### [Feature resolver version 2](#feature-resolver-version-2-1)\n\nWhen `resolver = \"2\"` is specified in `Cargo.toml` (see [resolver versions](about:blank/reference/resolver.html#resolver-versions) below), a different feature resolver is used which uses a different algorithm for unifying features. The version `\"1\"` resolver will unify features for a package no matter where it is specified. The version `\"2\"` resolver will avoid unifying features in the following situations:\n\n-   Features for target-specific dependencies are not enabled if the target is not currently being built. For example:\n    \n    ```toml\n    [dependencies.common]\n    version = \"1.0\"\n    features = [\"f1\"]\n    \n    [target.'cfg(windows)'.dependencies.common]\n    version = \"1.0\"\n    features = [\"f2\"]\n    \n    ```\n    \n    When building this example for a non-Windows platform, the `f2` feature will _not_ be enabled.\n    \n-   Features enabled on [build-dependencies](about:blank/reference/specifying-dependencies.html#build-dependencies) or proc-macros will not be unified when those same dependencies are used as a normal dependency. For example:\n    \n    ```toml\n    [dependencies]\n    log = \"0.4\"\n    \n    [build-dependencies]\n    log = {version = \"0.4\", features=['std']}\n    \n    ```\n    \n    When building the build script, the `log` crate will be built with the `std` feature. When building the library of your package, it will not enable the feature.\n    \n-   Features enabled on [dev-dependencies](about:blank/reference/specifying-dependencies.html#development-dependencies) will not be unified when those same dependencies are used as a normal dependency, unless those dev-dependencies are currently being built. For example:\n    \n    ```toml\n    [dependencies]\n    serde = {version = \"1.0\", default-features = false}\n    \n    [dev-dependencies]\n    serde = {version = \"1.0\", features = [\"std\"]}\n    \n    ```\n    \n    In this example, the library will normally link against `serde` without the `std` feature. However, when built as a test or example, it will include the `std` feature. For example, `cargo test` or `cargo build --all-targets` will unify these features. Note that dev-dependencies in dependencies are always ignored, this is only relevant for the top-level package or workspace members.\n    \n\n### [`links`](#links)\n\nThe [`links` field](about:blank/reference/manifest.html#the-links-field) is used to ensure only one copy of a native library is linked into a binary. The resolver will attempt to find a graph where there is only one instance of each `links` name. If it is unable to find a graph that satisfies that constraint, it will return an error.\n\nFor example, it is an error if one package depends on [`libgit2-sys`](https://crates.io/crates/libgit2-sys) version `0.11` and another depends on `0.12`, because Cargo is unable to unify those, but they both link to the `git2` native library. Due to this requirement, it is encouraged to be very careful when making SemVer-incompatible releases with the `links` field if your library is in common use.\n\n### [Yanked versions](#yanked-versions)\n\n[Yanked releases](about:blank/reference/publishing.html#cargo-yank) are those that are marked that they should not be used. When the resolver is building the graph, it will ignore all yanked releases unless they already exist in the `Cargo.lock` file or are explicitly requested by the [`--precise`](about:blank/commands/cargo-update.html#option-cargo-update---precise) flag of `cargo update` (nightly only).\n\n## [Dependency updates](#dependency-updates)\n\nDependency resolution is automatically performed by all Cargo commands that need to know about the dependency graph. For example, [`cargo build`](reference/../commands/cargo-build.html) will run the resolver to discover all the dependencies to build. After the first time it runs, the result is stored in the `Cargo.lock` file. Subsequent commands will run the resolver, keeping dependencies locked to the versions in `Cargo.lock` _if it can_.\n\nIf the dependency list in `Cargo.toml` has been modified, for example changing the version of a dependency from `1.0` to `2.0`, then the resolver will select a new version for that dependency that matches the new requirements. If that new dependency introduces new requirements, those new requirements may also trigger additional updates. The `Cargo.lock` file will be updated with the new result. The `--locked` or `--frozen` flags can be used to change this behavior to prevent automatic updates when requirements change, and return an error instead.\n\n[`cargo update`](reference/../commands/cargo-update.html) can be used to update the entries in `Cargo.lock` when new versions are published. Without any options, it will attempt to update all packages in the lock file. The `-p` flag can be used to target the update for a specific package, and other flags such as `--recursive` or `--precise` can be used to control how versions are selected.\n\n## [Overrides](#overrides-1)\n\nCargo has several mechanisms to override dependencies within the graph. The [Overriding Dependencies](reference/overriding-dependencies.html) chapter goes into detail on how to use overrides. The overrides appear as an overlay to a registry, replacing the patched version with the new entry. Otherwise, resolution is performed like normal.\n\n## [Dependency kinds](#dependency-kinds)\n\nThere are three kinds of dependencies in a package: normal, [build](about:blank/reference/specifying-dependencies.html#build-dependencies), and [dev](about:blank/reference/specifying-dependencies.html#development-dependencies). For the most part these are all treated the same from the perspective of the resolver. One difference is that dev-dependencies for non-workspace members are always ignored, and do not influence resolution.\n\n[Platform-specific dependencies](about:blank/reference/specifying-dependencies.html#platform-specific-dependencies) with the `[target]` table are resolved as-if all platforms are enabled. In other words, the resolver ignores the platform or `cfg` expression.\n\n### [dev-dependency cycles](#dev-dependency-cycles)\n\nUsually the resolver does not allow cycles in the graph, but it does allow them for [dev-dependencies](about:blank/reference/specifying-dependencies.html#development-dependencies). For example, project “foo” has a dev-dependency on “bar”, which has a normal dependency on “foo” (usually as a “path” dependency). This is allowed because there isn’t really a cycle from the perspective of the build artifacts. In this example, the “foo” library is built (which does not need “bar” because “bar” is only used for tests), and then “bar” can be built depending on “foo”, then the “foo” tests can be built linking to “bar”.\n\nBeware that this can lead to confusing errors. In the case of building library unit tests, there are actually two copies of the library linked into the final test binary: the one that was linked with “bar”, and the one built that contains the unit tests. Similar to the issues highlighted in the [Version-incompatibility hazards](about:blank/reference/resolver.html#version-incompatibility-hazards) section, the types between the two are not compatible. Be careful when exposing types of “foo” from “bar” in this situation, since the “foo” unit tests won’t treat them the same as the local types.\n\nIf possible, try to split your package into multiple packages and restructure it so that it remains strictly acyclic.\n\n## [Resolver versions](#resolver-versions)\n\nA different feature resolver algorithm can be used by specifying the resolver version in `Cargo.toml` like this:\n\n```toml\n[package]\nname = \"my-package\"\nversion = \"1.0.0\"\nresolver = \"2\"\n\n```\n\nThe version `\"1\"` resolver is the original resolver that shipped with Cargo up to version 1.50. The default is `\"2\"` if the root package specifies [`edition = \"2021\"`](about:blank/reference/manifest.html#the-edition-field) or a newer edition. Otherwise the default is `\"1\"`.\n\nThe version `\"2\"` resolver introduces changes in [feature unification](about:blank/reference/resolver.html#features). See the [features chapter](about:blank/reference/features.html#feature-resolver-version-2) for more details.\n\nThe resolver is a global option that affects the entire workspace. The `resolver` version in dependencies is ignored, only the value in the top-level package will be used. If using a [virtual workspace](about:blank/reference/workspaces.html#virtual-workspace), the version should be specified in the `[workspace]` table, for example:\n\n```toml\n[workspace]\nmembers = [\"member1\", \"member2\"]\nresolver = \"2\"\n\n```\n\n## [Recommendations](#recommendations)\n\nThe following are some recommendations for setting the version within your package, and for specifying dependency requirements. These are general guidelines that should apply to common situations, but of course some situations may require specifying unusual requirements.\n\n-   Follow the [SemVer guidelines](reference/semver.html) when deciding how to update your version number, and whether or not you will need to make a SemVer-incompatible version change.\n    \n-   Use caret requirements for dependencies, such as `\"1.2.3\"`, for most situations. This ensures that the resolver can be maximally flexible in choosing a version while maintaining build compatibility.\n    \n    -   Specify all three components with the version you are currently using. This helps set the minimum version that will be used, and ensures that other users won’t end up with an older version of the dependency that might be missing something that your package requires.\n    -   Avoid `*` requirements, as they are not allowed on [crates.io](https://crates.io/), and they can pull in SemVer-breaking changes during a normal `cargo update`.\n    -   Avoid overly broad version requirements. For example, `>=2.0.0` can pull in any SemVer-incompatible version, like version `5.0.0`, which can result in broken builds in the future.\n    -   Avoid overly narrow version requirements if possible. For example, if you specify a tilde requirement like `bar=\"~1.3\"`, and another package specifies a requirement of `bar=\"1.4\"`, this will fail to resolve, even though minor releases should be compatible.\n-   Try to keep the dependency versions up-to-date with the actual minimum versions that your library requires. For example, if you have a requirement of `bar=\"1.0.12\"`, and then in a future release you start using new features added in the `1.1.0` release of “bar”, update your dependency requirement to `bar=\"1.1.0\"`.\n    \n    If you fail to do this, it may not be immediately obvious because Cargo can opportunistically choose the newest version when you run a blanket `cargo update`. However, if another user depends on your library, and runs `cargo update your-library`, it will _not_ automatically update “bar” if it is locked in their `Cargo.lock`. It will only update “bar” in that situation if the dependency declaration is also updated. Failure to do so can cause confusing build errors for the user using `cargo update your-library`.\n    \n-   If two packages are tightly coupled, then an `=` dependency requirement may help ensure that they stay in sync. For example, a library with a companion proc-macro library will sometimes make assumptions between the two libraries that won’t work well if the two are out of sync (and it is never expected to use the two libraries independently). The parent library can use an `=` requirement on the proc-macro, and re-export the macros for easy access.\n    \n-   `0.0.x` versions can be used for packages that are permanently unstable.\n    \n\nIn general, the stricter you make the dependency requirements, the more likely it will be for the resolver to fail. Conversely, if you use requirements that are too loose, it may be possible for new versions to be published that will break the build.\n\n## [Troubleshooting](#troubleshooting)\n\nThe following illustrates some problems you may experience, and some possible solutions.\n\n### [Why was a dependency included?](#why-was-a-dependency-included)\n\nSay you see dependency `rand` in the `cargo check` output but don’t think its needed and want to understand why its being pulled in.\n\nYou can run\n\n```console\n$ cargo tree --workspace --target all --all-features --invert rand\nrand v0.8.5\n└── ...\n\nrand v0.8.5\n└── ...\n\n```\n\n### [Why was that feature on this dependency enabled?](#why-was-that-feature-on-this-dependency-enabled)\n\nYou might identify that it was an activated feature that caused `rand` to show up. **To figure out which package activated the feature, you can add the `--edges features`**\n\n```console\n$ cargo tree --workspace --target all --all-features --edges features --invert rand\nrand v0.8.5\n└── ...\n\nrand v0.8.5\n└── ...\n\n```\n\n### [Unexpected dependency duplication](#unexpected-dependency-duplication)\n\nYou see multiple instances of `rand` when you run\n\n```console\n$ cargo tree --workspace --target all --all-features --duplicates\nrand v0.7.3\n└── ...\n\nrand v0.8.5\n└── ...\n\n```\n\nThe resolver algorithm has converged on a solution that includes two copies of a dependency when one would suffice. For example:\n\n```toml\n# Package A\n[dependencies]\nrand = \"0.7\"\n\n# Package B\n[dependencies]\nrand = \">=0.6\"  # note: open requirements such as this are discouraged\n\n```\n\nIn this example, Cargo may build two copies of the `rand` crate, even though a single copy at version `0.7.3` would meet all requirements. This is because the resolver’s algorithm favors building the latest available version of `rand` for Package B, which is `0.8.5` at the time of this writing, and that is incompatible with Package A’s specification. The resolver’s algorithm does not currently attempt to “deduplicate” in this situation.\n\nThe use of open-ended version requirements like `>=0.6` is discouraged in Cargo. But, if you run into this situation, the [`cargo update`](reference/../commands/cargo-update.html) command with the `--precise` flag can be used to manually remove such duplications.\n\n### [Why wasn’t a newer version selected?](#why-wasnt-a-newer-version-selected)\n\nSay you noticed that the latest version of a dependency wasn’t selected when you ran:\n\n```console\n$ cargo update\n\n```\n\nYou can enable some extra logging to see why this happened:\n\n```console\n$ env CARGO_LOG=cargo::core::resolver=trace cargo update\n\n```\n\n**Note:** Cargo log targets and levels may change over time.\n\n### [SemVer-breaking patch release breaks the build](#semver-breaking-patch-release-breaks-the-build)\n\nSometimes a project may inadvertently publish a point release with a SemVer-breaking change. When users update with `cargo update`, they will pick up this new release, and then their build may break. In this situation, it is recommended that the project should [yank](about:blank/reference/publishing.html#cargo-yank) the release, and either remove the SemVer-breaking change, or publish it as a new SemVer-major version increase.\n\nIf the change happened in a third-party project, if possible try to (politely!) work with the project to resolve the issue.\n\nWhile waiting for the release to be yanked, some workarounds depend on the circumstances:\n\n-   If your project is the end product (such as a binary executable), just avoid updating the offending package in `Cargo.lock`. This can be done with the `--precise` flag in [`cargo update`](reference/../commands/cargo-update.html).\n-   If you publish a binary on [crates.io](https://crates.io/), then you can temporarily add an `=` requirement to force the dependency to a specific good version.\n    -   Binary projects can alternatively recommend users to use the `--locked` flag with [`cargo install`](reference/../commands/cargo-install.html) to use the original `Cargo.lock` that contains the known good version.\n-   Libraries may also consider publishing a temporary new release with stricter requirements that avoid the troublesome dependency. You may want to consider using range requirements (instead of `=`) to avoid overly-strict requirements that may conflict with other packages using the same dependency. Once the problem has been resolved, you can publish another point release that relaxes the dependency back to a caret requirement.\n-   If it looks like the third-party project is unable or unwilling to yank the release, then one option is to update your code to be compatible with the changes, and update the dependency requirement to set the minimum version to the new release. You will also need to consider if this is a SemVer-breaking change of your own library, for example if it exposes types from the dependency.\n\n## [SemVer Compatibility](#semver-compatibility-2)\n\nThis chapter provides details on what is conventionally considered a compatible or breaking SemVer change for new releases of a package. See the [SemVer compatibility](about:blank/reference/resolver.html#semver-compatibility) section for details on what SemVer is, and how Cargo uses it to ensure compatibility of libraries.\n\nThese are only _guidelines_, and not necessarily hard-and-fast rules that all projects will obey. The [Change categories](about:blank/reference/semver.html#change-categories) section details how this guide classifies the level and severity of a change. Most of this guide focuses on changes that will cause `cargo` and `rustc` to fail to build something that previously worked. Almost every change carries some risk that it will negatively affect the runtime behavior, and for those cases it is usually a judgment call by the project maintainers whether or not it is a SemVer-incompatible change.\n\n## [Change categories](#change-categories)\n\nAll of the policies listed below are categorized by the level of change:\n\n-   **Major change**: a change that requires a major SemVer bump.\n-   **Minor change**: a change that requires only a minor SemVer bump.\n-   **Possibly-breaking change**: a change that some projects may consider major and others consider minor.\n\nThe “Possibly-breaking” category covers changes that have the _potential_ to break during an update, but may not necessarily cause a breakage. The impact of these changes should be considered carefully. The exact nature will depend on the change and the principles of the project maintainers.\n\nSome projects may choose to only bump the patch number on a minor change. It is encouraged to follow the SemVer spec, and only apply bug fixes in patch releases. However, a bug fix may require an API change that is marked as a “minor change”, and shouldn’t affect compatibility. This guide does not take a stance on how each individual “minor change” should be treated, as the difference between minor and patch changes are conventions that depend on the nature of the change.\n\nSome changes are marked as “minor”, even though they carry the potential risk of breaking a build. This is for situations where the potential is extremely low, and the potentially breaking code is unlikely to be written in idiomatic Rust, or is specifically discouraged from use.\n\nThis guide uses the terms “major” and “minor” assuming this relates to a “1.0.0” release or later. Initial development releases starting with “0.y.z” can treat changes in “y” as a major release, and “z” as a minor release. “0.0.z” releases are always major changes. This is because Cargo uses the convention that only changes in the left-most non-zero component are considered incompatible.\n\n-   API compatibility\n    -   Items\n        -   [Major: renaming/moving/removing any public items](about:blank/reference/semver.html#item-remove)\n        -   [Minor: adding new public items](about:blank/reference/semver.html#item-new)\n    -   Types\n        -   [Major: Changing the alignment, layout, or size of a well-defined type](about:blank/reference/semver.html#type-layout)\n    -   Structs\n        -   [Major: adding a private struct field when all current fields are public](about:blank/reference/semver.html#struct-add-private-field-when-public)\n        -   [Major: adding a public field when no private field exists](about:blank/reference/semver.html#struct-add-public-field-when-no-private)\n        -   [Minor: adding or removing private fields when at least one already exists](about:blank/reference/semver.html#struct-private-fields-with-private)\n        -   [Minor: going from a tuple struct with all private fields (with at least one field) to a normal struct, or vice versa](about:blank/reference/semver.html#struct-tuple-normal-with-private)\n    -   Enums\n        -   [Major: adding new enum variants (without `non_exhaustive`)](about:blank/reference/semver.html#enum-variant-new)\n        -   [Major: adding new fields to an enum variant](about:blank/reference/semver.html#enum-fields-new)\n    -   Traits\n        -   [Major: adding a non-defaulted trait item](about:blank/reference/semver.html#trait-new-item-no-default)\n        -   [Major: any change to trait item signatures](about:blank/reference/semver.html#trait-item-signature)\n        -   [Possibly-breaking: adding a defaulted trait item](about:blank/reference/semver.html#trait-new-default-item)\n        -   [Major: adding a trait item that makes the trait non-object safe](about:blank/reference/semver.html#trait-object-safety)\n        -   [Major: adding a type parameter without a default](about:blank/reference/semver.html#trait-new-parameter-no-default)\n        -   [Minor: adding a defaulted trait type parameter](about:blank/reference/semver.html#trait-new-parameter-default)\n    -   Implementations\n        -   [Possibly-breaking change: adding any inherent items](about:blank/reference/semver.html#impl-item-new)\n    -   Generics\n        -   [Major: tightening generic bounds](about:blank/reference/semver.html#generic-bounds-tighten)\n        -   [Minor: loosening generic bounds](about:blank/reference/semver.html#generic-bounds-loosen)\n        -   [Minor: adding defaulted type parameters](about:blank/reference/semver.html#generic-new-default)\n        -   [Minor: generalizing a type to use generics (with identical types)](about:blank/reference/semver.html#generic-generalize-identical)\n        -   [Major: generalizing a type to use generics (with possibly different types)](about:blank/reference/semver.html#generic-generalize-different)\n        -   [Minor: changing a generic type to a more generic type](about:blank/reference/semver.html#generic-more-generic)\n    -   Functions\n        -   [Major: adding/removing function parameters](about:blank/reference/semver.html#fn-change-arity)\n        -   [Possibly-breaking: introducing a new function type parameter](about:blank/reference/semver.html#fn-generic-new)\n        -   [Minor: generalizing a function to use generics (supporting original type)](about:blank/reference/semver.html#fn-generalize-compatible)\n        -   [Major: generalizing a function to use generics with type mismatch](about:blank/reference/semver.html#fn-generalize-mismatch)\n        -   [Minor: making an `unsafe` function safe](about:blank/reference/semver.html#fn-unsafe-safe)\n    -   Attributes\n        -   [Major: switching from `no_std` support to requiring `std`](about:blank/reference/semver.html#attr-no-std-to-std)\n        -   [Major: adding `non_exhaustive` to an existing enum, variant, or struct with no private fields](about:blank/reference/semver.html#attr-adding-non-exhaustive)\n-   Tooling and environment compatibility\n    -   [Possibly-breaking: changing the minimum version of Rust required](about:blank/reference/semver.html#env-new-rust)\n    -   [Possibly-breaking: changing the platform and environment requirements](about:blank/reference/semver.html#env-change-requirements)\n    -   [Minor: introducing new lints](about:blank/reference/semver.html#new-lints)\n    -   Cargo\n        -   [Minor: adding a new Cargo feature](about:blank/reference/semver.html#cargo-feature-add)\n        -   [Major: removing a Cargo feature](about:blank/reference/semver.html#cargo-feature-remove)\n        -   [Major: removing a feature from a feature list if that changes functionality or public items](about:blank/reference/semver.html#cargo-feature-remove-another)\n        -   [Possibly-breaking: removing an optional dependency](about:blank/reference/semver.html#cargo-remove-opt-dep)\n        -   [Minor: changing dependency features](about:blank/reference/semver.html#cargo-change-dep-feature)\n        -   [Minor: adding dependencies](about:blank/reference/semver.html#cargo-dep-add)\n-   [Application compatibility](about:blank/reference/semver.html#application-compatibility)\n\n## [API compatibility](#api-compatibility)\n\nAll of the examples below contain three parts: the original code, the code after it has been modified, and an example usage of the code that could appear in another project. In a minor change, the example usage should successfully build with both the before and after versions.\n\n### [Major: renaming/moving/removing any public items](#item-remove)\n\nThe absence of a publicly exposed [item](reference/../../reference/items.html) will cause any uses of that item to fail to compile.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub fn foo() {}\n\n///////////////////////////////////////////////////////////\n// After\n// ... item has been removed\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nfn main() {\n    updated_crate::foo(); // Error: cannot find function `foo`\n}\n```\n\nThis includes adding any sort of [`cfg` attribute](about:blank/reference/conditional-compilation.html#the-cfg-attribute) which can change which items or behavior is available based on [conditional compilation](reference/../../reference/conditional-compilation.html).\n\nMitigating strategies:\n\n-   Mark items to be removed as [deprecated](about:blank/reference/attributes/diagnostics.html#the-deprecated-attribute), and then remove them at a later date in a SemVer-breaking release.\n-   Mark renamed items as [deprecated](about:blank/reference/attributes/diagnostics.html#the-deprecated-attribute), and use a [`pub use`](reference/../../reference/items/use-declarations.html) item to re-export to the old name.\n\n### [Minor: adding new public items](#item-new)\n\nAdding new, public [items](reference/../../reference/items.html) is a minor change.\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n// ... absence of item\n\n///////////////////////////////////////////////////////////\n// After\npub fn foo() {}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\n// `foo` is not used since it didn't previously exist.\n```\n\nNote that in some rare cases this can be a **breaking change** due to glob imports. For example, if you add a new trait, and a project has used a glob import that brings that trait into scope, and the new trait introduces an associated item that conflicts with any types it is implemented on, this can cause a compile-time error due to the ambiguity. Example:\n\n```rust\n// Breaking change example\n\n///////////////////////////////////////////////////////////\n// Before\n// ... absence of trait\n\n///////////////////////////////////////////////////////////\n// After\npub trait NewTrait {\n    fn foo(&self) {}\n}\n\nimpl NewTrait for i32 {}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::*;\n\npub trait LocalTrait {\n    fn foo(&self) {}\n}\n\nimpl LocalTrait for i32 {}\n\nfn main() {\n    123i32.foo(); // Error:  multiple applicable items in scope\n}\n```\n\nThis is not considered a major change because conventionally glob imports are a known forwards-compatibility hazard. Glob imports of items from external crates should be avoided.\n\n### [Major: Changing the alignment, layout, or size of a well-defined type](#type-layout)\n\nIt is a breaking change to change the alignment, layout, or size of a type that was previously well-defined.\n\nIn general, types that use the [the default representation](about:blank/reference/type-layout.html#the-default-representation) do not have a well-defined alignment, layout, or size. The compiler is free to alter the alignment, layout, or size, so code should not make any assumptions about it.\n\n> **Note**: It may be possible for external crates to break if they make assumptions about the alignment, layout, or size of a type even if it is not well-defined. This is not considered a SemVer breaking change since those assumptions should not be made.\n\nSome examples of changes that are not a breaking change are (assuming no other rules in this guide are violated):\n\n-   Adding, removing, reordering, or changing fields of a default representation struct, union, or enum in such a way that the change follows the other rules in this guide (for example, using `non_exhaustive` to allow those changes, or changes to private fields that are already private). See [struct-add-private-field-when-public](about:blank/reference/semver.html#struct-add-private-field-when-public), [struct-add-public-field-when-no-private](about:blank/reference/semver.html#struct-add-public-field-when-no-private), [struct-private-fields-with-private](about:blank/reference/semver.html#struct-private-fields-with-private), [enum-fields-new](about:blank/reference/semver.html#enum-fields-new).\n-   Adding variants to a default representation enum, if the enum uses `non_exhaustive`. This may change the alignment or size of the enumeration, but those are not well-defined. See [enum-variant-new](about:blank/reference/semver.html#enum-variant-new).\n-   Adding, removing, reordering, or changing private fields of a `repr(C)` struct, union, or enum, following the other rules in this guide (for example, using `non_exhaustive`, or adding private fields when other private fields already exist). See [repr-c-private-change](about:blank/reference/semver.html#repr-c-private-change).\n-   Adding variants to a `repr(C)` enum, if the enum uses `non_exhaustive`. See [repr-c-enum-variant-new](about:blank/reference/semver.html#repr-c-enum-variant-new).\n-   Adding `repr(C)` to a default representation struct, union, or enum. See [repr-c-add](about:blank/reference/semver.html#repr-c-add).\n-   Adding `repr(<int>)` [primitive representation](about:blank/reference/type-layout.html#primitive-representations) to an enum. See [repr-int-enum-add](about:blank/reference/semver.html#repr-int-enum-add).\n-   Adding `repr(transparent)` to a default representation struct or enum. See [repr-transparent-add](about:blank/reference/semver.html#repr-transparent-add).\n\nTypes that use the [`repr` attribute](about:blank/reference/type-layout.html#representations) can be said to have an alignment and layout that is defined in some way that code may make some assumptions about that may break as a result of changing that type.\n\nIn some cases, types with a `repr` attribute may not have an alignment, layout, or size that is well-defined. In these cases, it may be safe to make changes to the types, though care should be exercised. For example, types with private fields that do not otherwise document their alignment, layout, or size guarantees cannot be relied upon by external crates since the public API does not fully define the alignment, layout, or size of the type.\n\nA common example where a type with _private_ fields is well-defined is a type with a single private field with a generic type, using `repr(transparent)`, and the prose of the documentation discusses that it is transparent to the generic type. For example, see [`UnsafeCell`](about:blank/std/cell/struct.UnsafeCell.html#memory-layout).\n\nSome examples of breaking changes are:\n\n-   Adding `repr(packed)` to a struct or union. See [repr-packed-add](about:blank/reference/semver.html#repr-packed-add).\n-   Adding `repr(align)` to a struct, union, or enum. See [repr-align-add](about:blank/reference/semver.html#repr-align-add).\n-   Removing `repr(packed)` from a struct or union. See [repr-packed-remove](about:blank/reference/semver.html#repr-packed-remove).\n-   Changing the value N of `repr(packed(N))` if that changes the alignment or layout. See [repr-packed-n-change](about:blank/reference/semver.html#repr-packed-n-change).\n-   Changing the value N of `repr(align(N))` if that changes the alignment. See [repr-align-n-change](about:blank/reference/semver.html#repr-align-n-change).\n-   Removing `repr(align)` from a struct, union, or enum. See [repr-align-remove](about:blank/reference/semver.html#repr-align-remove).\n-   Changing the order of public fields of a `repr(C)` type. See [repr-c-shuffle](about:blank/reference/semver.html#repr-c-shuffle).\n-   Removing `repr(C)` from a struct, union, or enum. See [repr-c-remove](about:blank/reference/semver.html#repr-c-remove).\n-   Removing `repr(<int>)` from an enum. See [repr-int-enum-remove](about:blank/reference/semver.html#repr-int-enum-remove).\n-   Changing the primitive representation of a `repr(<int>)` enum. See [repr-int-enum-change](about:blank/reference/semver.html#repr-int-enum-change).\n-   Removing `repr(transparent)` from a struct or enum. See [repr-transparent-remove](about:blank/reference/semver.html#repr-transparent-remove).\n\n#### [Minor: `repr(C)` add, remove, or change a private field](#repr-c-private-change)\n\nIt is usually safe to add, remove, or change a private field of a `repr(C)` struct, union, or enum, assuming it follows the other guidelines in this guide (see [struct-add-private-field-when-public](about:blank/reference/semver.html#struct-add-private-field-when-public), [struct-add-public-field-when-no-private](about:blank/reference/semver.html#struct-add-public-field-when-no-private), [struct-private-fields-with-private](about:blank/reference/semver.html#struct-private-fields-with-private), [enum-fields-new](about:blank/reference/semver.html#enum-fields-new)).\n\nFor example, adding private fields can only be done if there are already other private fields, or it is `non_exhaustive`. Public fields may be added if there are private fields, or it is `non_exhaustive`, and the addition does not alter the layout of the other fields.\n\nHowever, this may change the size and alignment of the type. Care should be taken if the size or alignment changes. Code should not make assumptions about the size or alignment of types with private fields or `non_exhaustive` unless it has a documented size or alignment.\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[derive(Default)]\n#[repr(C)]\npub struct Example {\n    pub f1: i32,\n    f2: i32, // a private field\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[derive(Default)]\n#[repr(C)]\npub struct Example {\n    pub f1: i32,\n    f2: i32,\n    f3: i32, // a new field\n}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nfn main() {\n    // NOTE: Users should not make assumptions about the size or alignment\n    // since they are not documented.\n    let f = updated_crate::Example::default();\n}\n```\n\n#### [Minor: `repr(C)` add enum variant](#repr-c-enum-variant-new)\n\nIt is usually safe to add variants to a `repr(C)` enum, if the enum uses `non_exhaustive`. See [enum-variant-new](about:blank/reference/semver.html#enum-variant-new) for more discussion.\n\nNote that this may be a breaking change since it changes the size and alignment of the type. See [repr-c-private-change](about:blank/reference/semver.html#repr-c-private-change) for similar concerns.\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[repr(C)]\n#[non_exhaustive]\npub enum Example {\n    Variant1 { f1: i16 },\n    Variant2 { f1: i32 },\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[repr(C)]\n#[non_exhaustive]\npub enum Example {\n    Variant1 { f1: i16 },\n    Variant2 { f1: i32 },\n    Variant3 { f1: i64 }, // added\n}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nfn main() {\n    // NOTE: Users should not make assumptions about the size or alignment\n    // since they are not specified. For example, this raised the size from 8\n    // to 16 bytes.\n    let f = updated_crate::Example::Variant2 { f1: 123 };\n}\n```\n\n#### [Minor: Adding `repr(C)` to a default representation](#repr-c-add)\n\nIt is safe to add `repr(C)` to a struct, union, or enum with [the default representation](about:blank/reference/type-layout.html#the-default-representation). This is safe because users should not make assumptions about the alignment, layout, or size of types with with the default representation.\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Example {\n    pub f1: i32,\n    pub f2: i16,\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[repr(C)] // added\npub struct Example {\n    pub f1: i32,\n    pub f2: i16,\n}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nfn main() {\n    let f = updated_crate::Example { f1: 123, f2: 456 };\n}\n```\n\n#### [Minor: Adding `repr(<int>)` to an enum](#repr-int-enum-add)\n\nIt is safe to add `repr(<int>)` [primitive representation](about:blank/reference/type-layout.html#primitive-representations) to an enum with [the default representation](about:blank/reference/type-layout.html#the-default-representation). This is safe because users should not make assumptions about the alignment, layout, or size of an enum with the default representation.\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub enum E {\n    Variant1,\n    Variant2(i32),\n    Variant3 { f1: f64 },\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[repr(i32)] // added\npub enum E {\n    Variant1,\n    Variant2(i32),\n    Variant3 { f1: f64 },\n}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nfn main() {\n    let x = updated_crate::E::Variant3 { f1: 1.23 };\n}\n```\n\n#### [Minor: Adding `repr(transparent)` to a default representation struct or enum](#repr-transparent-add)\n\nIt is safe to add `repr(transparent)` to a struct or enum with [the default representation](about:blank/reference/type-layout.html#the-default-representation). This is safe because users should not make assumptions about the alignment, layout, or size of a struct or enum with the default representation.\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[derive(Default)]\npub struct Example<T>(T);\n\n///////////////////////////////////////////////////////////\n// After\n#[derive(Default)]\n#[repr(transparent)] // added\npub struct Example<T>(T);\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nfn main() {\n    let x = updated_crate::Example::<i32>::default();\n}\n```\n\n#### [Major: Adding `repr(packed)` to a struct or union](#repr-packed-add)\n\nIt is a breaking change to add `repr(packed)` to a struct or union. Making a type `repr(packed)` makes changes that can break code, such as being invalid to take a reference to a field, or causing truncation of disjoint closure captures.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Example {\n    pub f1: u8,\n    pub f2: u16,\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[repr(packed)] // added\npub struct Example {\n    pub f1: u8,\n    pub f2: u16,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nfn main() {\n    let f = updated_crate::Example { f1: 1, f2: 2 };\n    let x = &f.f2; // Error: reference to packed field is unaligned\n}\n```\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Example(pub i32, pub i32);\n\n///////////////////////////////////////////////////////////\n// After\n#[repr(packed)]\npub struct Example(pub i32, pub i32);\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nfn main() {\n    let mut f = updated_crate::Example(123, 456);\n    let c = || {\n        // Without repr(packed), the closure precisely captures `&f.0`.\n        // With repr(packed), the closure captures `&f` to avoid undefined behavior.\n        let a = f.0;\n    };\n    f.1 = 789; // Error: cannot assign to `f.1` because it is borrowed\n    c();\n}\n```\n\n#### [Major: Adding `repr(align)` to a struct, union, or enum](#repr-align-add)\n\nIt is a breaking change to add `repr(align)` to a struct, union, or enum. Making a type `repr(align)` would break any use of that type in a `repr(packed)` type because that combination is not allowed.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Aligned {\n    pub a: i32,\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[repr(align(8))] // added\npub struct Aligned {\n    pub a: i32,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Aligned;\n\n#[repr(packed)]\npub struct Packed { // Error: packed type cannot transitively contain a `#[repr(align)]` type\n    f1: Aligned,\n}\n\nfn main() {\n    let p = Packed {\n        f1: Aligned { a: 123 },\n    };\n}\n```\n\n#### [Major: Removing `repr(packed)` from a struct or union](#repr-packed-remove)\n\nIt is a breaking change to remove `repr(packed)` from a struct or union. This may change the alignment or layout that extern crates are relying on.\n\nIf any fields are public, then removing `repr(packed)` may change the way disjoint closure captures work. In some cases, this can cause code to break, similar to those outlined in the [edition guide](reference/../../edition-guide/rust-2021/disjoint-capture-in-closures.html).\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[repr(C, packed)]\npub struct Packed {\n    pub a: u8,\n    pub b: u16,\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[repr(C)] // removed packed\npub struct Packed {\n    pub a: u8,\n    pub b: u16,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Packed;\n\nfn main() {\n    let p = Packed { a: 1, b: 2 };\n    // Some assumption about the size of the type.\n    // Without `packed`, this fails since the size is 4.\n    const _: () = assert!(std::mem::size_of::<Packed>() == 3); // Error: evaluation of constant value failed\n}\n```\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[repr(C, packed)]\npub struct Packed {\n    pub a: *mut i32,\n    pub b: i32,\n}\nunsafe impl Send for Packed {}\n\n///////////////////////////////////////////////////////////\n// After\n#[repr(C)] // removed packed\npub struct Packed {\n    pub a: *mut i32,\n    pub b: i32,\n}\nunsafe impl Send for Packed {}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Packed;\n\nfn main() {\n    let mut x = 123;\n\n    let p = Packed {\n        a: &mut x as *mut i32,\n        b: 456,\n    };\n\n    // When the structure was packed, the closure captures `p` which is Send.\n    // When `packed` is removed, this ends up capturing `p.a` which is not Send.\n    std::thread::spawn(move || unsafe {\n        *(p.a) += 1; // Error: cannot be sent between threads safely\n    });\n}\n```\n\n#### [Major: Changing the value N of `repr(packed(N))` if that changes the alignment or layout](#repr-packed-n-change)\n\nIt is a breaking change to change the value of N of `repr(packed(N))` if that changes the alignment or layout. This may change the alignment or layout that external crates are relying on.\n\nIf the value `N` is lowered below the alignment of a public field, then that would break any code that attempts to take a reference of that field.\n\nNote that some changes to `N` may not change the alignment or layout, for example increasing it when the current value is already equal to the natural alignment of the type.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[repr(packed(4))]\npub struct Packed {\n    pub a: u8,\n    pub b: u32,\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[repr(packed(2))] // changed to 2\npub struct Packed {\n    pub a: u8,\n    pub b: u32,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Packed;\n\nfn main() {\n    let p = Packed { a: 1, b: 2 };\n    let x = &p.b; // Error: reference to packed field is unaligned\n}\n```\n\n#### [Major: Changing the value N of `repr(align(N))` if that changes the alignment](#repr-align-n-change)\n\nIt is a breaking change to change the value `N` of `repr(align(N))` if that changes the alignment. This may change the alignment that external crates are relying on.\n\nThis change should be safe to make if the type is not well-defined as discussed in [type layout](about:blank/reference/semver.html#type-layout) (such as having any private fields and having an undocumented alignment or layout).\n\nNote that some changes to `N` may not change the alignment or layout, for example decreasing it when the current value is already equal to or less than the natural alignment of the type.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[repr(align(8))]\npub struct Packed {\n    pub a: u8,\n    pub b: u32,\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[repr(align(4))] // changed to 4\npub struct Packed {\n    pub a: u8,\n    pub b: u32,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Packed;\n\nfn main() {\n    let p = Packed { a: 1, b: 2 };\n    // Some assumption about the size of the type.\n    // The alignment has changed from 8 to 4.\n    const _: () = assert!(std::mem::align_of::<Packed>() == 8); // Error: evaluation of constant value failed\n}\n```\n\n#### [Major: Removing `repr(align)` from a struct, union, or enum](#repr-align-remove)\n\nIt is a breaking change to remove `repr(align)` from a struct, union, or enum, if their layout was well-defined. This may change the alignment or layout that external crates are relying on.\n\nThis change should be safe to make if the type is not well-defined as discussed in [type layout](about:blank/reference/semver.html#type-layout) (such as having any private fields and having an undocumented alignment).\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[repr(C, align(8))]\npub struct Packed {\n    pub a: u8,\n    pub b: u32,\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[repr(C)] // removed align\npub struct Packed {\n    pub a: u8,\n    pub b: u32,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Packed;\n\nfn main() {\n    let p = Packed { a: 1, b: 2 };\n    // Some assumption about the size of the type.\n    // The alignment has changed from 8 to 4.\n    const _: () = assert!(std::mem::align_of::<Packed>() == 8); // Error: evaluation of constant value failed\n}\n```\n\n#### [Major: Changing the order of public fields of a `repr(C)` type](#repr-c-shuffle)\n\nIt is a breaking change to change the order of public fields of a `repr(C)` type. External crates may be relying on the specific ordering of the fields.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[repr(C)]\npub struct SpecificLayout {\n    pub a: u8,\n    pub b: u32,\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[repr(C)]\npub struct SpecificLayout {\n    pub b: u32, // changed order\n    pub a: u8,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::SpecificLayout;\n\nextern \"C\" {\n    // This C function is assuming a specific layout defined in a C header.\n    fn c_fn_get_b(x: &SpecificLayout) -> u32;\n}\n\nfn main() {\n    let p = SpecificLayout { a: 1, b: 2 };\n    unsafe { assert_eq!(c_fn_get_b(&p), 2) } // Error: value not equal to 2\n}\n\nmod cdep {\n    // This simulates what would normally be something included from a build script.\n    // This definition would be in a C header.\n    #[repr(C)]\n    pub struct SpecificLayout {\n        pub a: u8,\n        pub b: u32,\n    }\n\n    #[no_mangle]\n    pub fn c_fn_get_b(x: &SpecificLayout) -> u32 {\n        x.b\n    }\n}\n```\n\n#### [Major: Removing `repr(C)` from a struct, union, or enum](#repr-c-remove)\n\nIt is a breaking change to remove `repr(C)` from a struct, union, or enum. External crates may be relying on the specific layout of the type.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[repr(C)]\npub struct SpecificLayout {\n    pub a: u8,\n    pub b: u32,\n}\n\n///////////////////////////////////////////////////////////\n// After\n// removed repr(C)\npub struct SpecificLayout {\n    pub a: u8,\n    pub b: u32,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::SpecificLayout;\n\nextern \"C\" {\n    // This C function is assuming a specific layout defined in a C header.\n    fn c_fn_get_b(x: &SpecificLayout) -> u32; // Error: is not FFI-safe\n}\n\nfn main() {\n    let p = SpecificLayout { a: 1, b: 2 };\n    unsafe { assert_eq!(c_fn_get_b(&p), 2) }\n}\n\nmod cdep {\n    // This simulates what would normally be something included from a build script.\n    // This definition would be in a C header.\n    #[repr(C)]\n    pub struct SpecificLayout {\n        pub a: u8,\n        pub b: u32,\n    }\n\n    #[no_mangle]\n    pub fn c_fn_get_b(x: &SpecificLayout) -> u32 {\n        x.b\n    }\n}\n```\n\n#### [Major: Removing `repr(<int>)` from an enum](#repr-int-enum-remove)\n\nIt is a breaking change to remove `repr(<int>)` from an enum. External crates may be assuming that the discriminant is a specific size. For example, [`std::mem::transmute`](reference/../../std/mem/fn.transmute.html) of an enum may fail.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[repr(u16)]\npub enum Example {\n    Variant1,\n    Variant2,\n    Variant3,\n}\n\n///////////////////////////////////////////////////////////\n// After\n// removed repr(u16)\npub enum Example {\n    Variant1,\n    Variant2,\n    Variant3,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\n\nfn main() {\n    let e = updated_crate::Example::Variant2;\n    let i: u16 = unsafe { std::mem::transmute(e) }; // Error: cannot transmute between types of different sizes\n}\n```\n\n#### [Major: Changing the primitive representation of a `repr(<int>)` enum](#repr-int-enum-change)\n\nIt is a breaking change to change the primitive representation of a `repr(<int>)` enum. External crates may be assuming that the discriminant is a specific size. For example, [`std::mem::transmute`](reference/../../std/mem/fn.transmute.html) of an enum may fail.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[repr(u16)]\npub enum Example {\n    Variant1,\n    Variant2,\n    Variant3,\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[repr(u8)] // changed repr size\npub enum Example {\n    Variant1,\n    Variant2,\n    Variant3,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\n\nfn main() {\n    let e = updated_crate::Example::Variant2;\n    let i: u16 = unsafe { std::mem::transmute(e) }; // Error: cannot transmute between types of different sizes\n}\n```\n\n#### [Major: Removing `repr(transparent)` from a struct or enum](#repr-transparent-remove)\n\nIt is a breaking change to remove `repr(transparent)` from a struct or enum. External crates may be relying on the type having the alignment, layout, or size of the transparent field.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[repr(transparent)]\npub struct Transparent<T>(T);\n\n///////////////////////////////////////////////////////////\n// After\n// removed repr\npub struct Transparent<T>(T);\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\n#![deny(improper_ctypes)]\nuse updated_crate::Transparent;\n\nextern \"C\" {\n    fn c_fn() -> Transparent<f64>; // Error: is not FFI-safe\n}\n\nfn main() {}\n```\n\n### [Major: adding a private struct field when all current fields are public](#struct-add-private-field-when-public)\n\nWhen a private field is added to a struct that previously had all public fields, this will break any code that attempts to construct it with a [struct literal](reference/../../reference/expressions/struct-expr.html).\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo {\n    pub f1: i32,\n}\n\n///////////////////////////////////////////////////////////\n// After\npub struct Foo {\n    pub f1: i32,\n    f2: i32,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nfn main() {\n    let x = updated_crate::Foo { f1: 123 }; // Error: cannot construct `Foo`\n}\n```\n\nMitigation strategies:\n\n-   Do not add new fields to all-public field structs.\n-   Mark structs as [`#[non_exhaustive]`](about:blank/reference/attributes/type_system.html#the-non_exhaustive-attribute) when first introducing a struct to prevent users from using struct literal syntax, and instead provide a constructor method and/or [Default](reference/../../std/default/trait.Default.html) implementation.\n\n### [Major: adding a public field when no private field exists](#struct-add-public-field-when-no-private)\n\nWhen a public field is added to a struct that has all public fields, this will break any code that attempts to construct it with a [struct literal](reference/../../reference/expressions/struct-expr.html).\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo {\n    pub f1: i32,\n}\n\n///////////////////////////////////////////////////////////\n// After\npub struct Foo {\n    pub f1: i32,\n    pub f2: i32,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nfn main() {\n    let x = updated_crate::Foo { f1: 123 }; // Error: missing field `f2`\n}\n```\n\nMitigation strategies:\n\n-   Do not add new new fields to all-public field structs.\n-   Mark structs as [`#[non_exhaustive]`](about:blank/reference/attributes/type_system.html#the-non_exhaustive-attribute) when first introducing a struct to prevent users from using struct literal syntax, and instead provide a constructor method and/or [Default](reference/../../std/default/trait.Default.html) implementation.\n\n### [Minor: adding or removing private fields when at least one already exists](#struct-private-fields-with-private)\n\nIt is safe to add or remove private fields from a struct when the struct already has at least one private field.\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[derive(Default)]\npub struct Foo {\n    f1: i32,\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[derive(Default)]\npub struct Foo {\n    f2: f64,\n}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nfn main() {\n    // Cannot access private fields.\n    let x = updated_crate::Foo::default();\n}\n```\n\nThis is safe because existing code cannot use a [struct literal](reference/../../reference/expressions/struct-expr.html) to construct it, nor exhaustively match its contents.\n\nNote that for tuple structs, this is a **major change** if the tuple contains public fields, and the addition or removal of a private field changes the index of any public field.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[derive(Default)]\npub struct Foo(pub i32, i32);\n\n///////////////////////////////////////////////////////////\n// After\n#[derive(Default)]\npub struct Foo(f64, pub i32, i32);\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nfn main() {\n    let x = updated_crate::Foo::default();\n    let y = x.0; // Error: is private\n}\n```\n\n### [Minor: going from a tuple struct with all private fields (with at least one field) to a normal struct, or vice versa](#struct-tuple-normal-with-private)\n\nChanging a tuple struct to a normal struct (or vice-versa) is safe if all fields are private.\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[derive(Default)]\npub struct Foo(i32);\n\n///////////////////////////////////////////////////////////\n// After\n#[derive(Default)]\npub struct Foo {\n    f1: i32,\n}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nfn main() {\n    // Cannot access private fields.\n    let x = updated_crate::Foo::default();\n}\n```\n\nThis is safe because existing code cannot use a [struct literal](reference/../../reference/expressions/struct-expr.html) to construct it, nor match its contents.\n\n### [Major: adding new enum variants (without `non_exhaustive`)](#enum-variant-new)\n\nIt is a breaking change to add a new enum variant if the enum does not use the [`#[non_exhaustive]`](about:blank/reference/attributes/type_system.html#the-non_exhaustive-attribute) attribute.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub enum E {\n    Variant1,\n}\n\n///////////////////////////////////////////////////////////\n// After\npub enum E {\n    Variant1,\n    Variant2,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nfn main() {\n    use updated_crate::E;\n    let x = E::Variant1;\n    match x { // Error: `E::Variant2` not covered\n        E::Variant1 => {}\n    }\n}\n```\n\nMitigation strategies:\n\n-   When introducing the enum, mark it as [`#[non_exhaustive]`](about:blank/reference/attributes/type_system.html#the-non_exhaustive-attribute) to force users to use [wildcard patterns](about:blank/reference/patterns.html#wildcard-pattern) to catch new variants.\n\n### [Major: adding new fields to an enum variant](#enum-fields-new)\n\nIt is a breaking change to add new fields to an enum variant because all fields are public, and constructors and matching will fail to compile.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub enum E {\n    Variant1 { f1: i32 },\n}\n\n///////////////////////////////////////////////////////////\n// After\npub enum E {\n    Variant1 { f1: i32, f2: i32 },\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nfn main() {\n    use updated_crate::E;\n    let x = E::Variant1 { f1: 1 }; // Error: missing f2\n    match x {\n        E::Variant1 { f1 } => {} // Error: missing f2\n    }\n}\n```\n\nMitigation strategies:\n\n-   When introducing the enum, mark the variant as [`non_exhaustive`](about:blank/reference/attributes/type_system.html#the-non_exhaustive-attribute) so that it cannot be constructed or matched without wildcards.\n    ```rust\n    pub enum E {\n        #[non_exhaustive]\n        Variant1{f1: i32}\n    }\n    ```\n    \n-   When introducing the enum, use an explicit struct as a value, where you can have control over the field visibility.\n    ```rust\n    pub struct Foo {\n       f1: i32,\n       f2: i32,\n    }\n    pub enum E {\n        Variant1(Foo)\n    }\n    ```\n    \n\n### [Major: adding a non-defaulted trait item](#trait-new-item-no-default)\n\nIt is a breaking change to add a non-defaulted item to a trait. This will break any implementors of the trait.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub trait Trait {}\n\n///////////////////////////////////////////////////////////\n// After\npub trait Trait {\n    fn foo(&self);\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Trait;\nstruct Foo;\n\nimpl Trait for Foo {}  // Error: not all trait items implemented\n```\n\nMitigation strategies:\n\n-   Always provide a default implementation or value for new associated trait items.\n-   When introducing the trait, use the [sealed trait](https://rust-lang.github.io/api-guidelines/future-proofing.html#sealed-traits-protect-against-downstream-implementations-c-sealed) technique to prevent users outside of the crate from implementing the trait.\n\n### [Major: any change to trait item signatures](#trait-item-signature)\n\nIt is a breaking change to make any change to a trait item signature. This can break external implementors of the trait.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub trait Trait {\n    fn f(&self, x: i32) {}\n}\n\n///////////////////////////////////////////////////////////\n// After\npub trait Trait {\n    // For sealed traits or normal functions, this would be a minor change\n    // because generalizing with generics strictly expands the possible uses.\n    // But in this case, trait implementations must use the same signature.\n    fn f<V>(&self, x: V) {}\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Trait;\nstruct Foo;\n\nimpl Trait for Foo {\n    fn f(&self, x: i32) {}  // Error: trait declaration has 1 type parameter\n}\n```\n\nMitigation strategies:\n\n-   Introduce new items with default implementations to cover the new functionality instead of modifying existing items.\n-   When introducing the trait, use the [sealed trait](https://rust-lang.github.io/api-guidelines/future-proofing.html#sealed-traits-protect-against-downstream-implementations-c-sealed) technique to prevent users outside of the crate from implementing the trait.\n\n### [Possibly-breaking: adding a defaulted trait item](#trait-new-default-item)\n\nIt is usually safe to add a defaulted trait item. However, this can sometimes cause a compile error. For example, this can introduce an ambiguity if a method of the same name exists in another trait.\n\n```rust\n// Breaking change example\n\n///////////////////////////////////////////////////////////\n// Before\npub trait Trait {}\n\n///////////////////////////////////////////////////////////\n// After\npub trait Trait {\n    fn foo(&self) {}\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Trait;\nstruct Foo;\n\ntrait LocalTrait {\n    fn foo(&self) {}\n}\n\nimpl Trait for Foo {}\nimpl LocalTrait for Foo {}\n\nfn main() {\n    let x = Foo;\n    x.foo(); // Error: multiple applicable items in scope\n}\n```\n\nNote that this ambiguity does _not_ exist for name collisions on [inherent implementations](about:blank/reference/items/implementations.html#inherent-implementations), as they take priority over trait items.\n\nSee [trait-object-safety](about:blank/reference/semver.html#trait-object-safety) for a special case to consider when adding trait items.\n\nMitigation strategies:\n\n-   Some projects may deem this acceptable breakage, particularly if the new item name is unlikely to collide with any existing code. Choose names carefully to help avoid these collisions. Additionally, it may be acceptable to require downstream users to add [disambiguation syntax](about:blank/reference/expressions/call-expr.html#disambiguating-function-calls) to select the correct function when updating the dependency.\n\n### [Major: adding a trait item that makes the trait non-object safe](#trait-object-safety)\n\nIt is a breaking change to add a trait item that changes the trait to not be [object safe](about:blank/reference/items/traits.html#object-safety).\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub trait Trait {}\n\n///////////////////////////////////////////////////////////\n// After\npub trait Trait {\n    // An associated const makes the trait not object-safe.\n    const CONST: i32 = 123;\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Trait;\nstruct Foo;\n\nimpl Trait for Foo {}\n\nfn main() {\n    let obj: Box<dyn Trait> = Box::new(Foo); // Error: cannot be made into an object\n}\n```\n\nIt is safe to do the converse (making a non-object safe trait into a safe one).\n\n### [Major: adding a type parameter without a default](#trait-new-parameter-no-default)\n\nIt is a breaking change to add a type parameter without a default to a trait.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub trait Trait {}\n\n///////////////////////////////////////////////////////////\n// After\npub trait Trait<T> {}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Trait;\nstruct Foo;\n\nimpl Trait for Foo {}  // Error: missing generics\n```\n\nMitigating strategies:\n\n-   See [adding a defaulted trait type parameter](about:blank/reference/semver.html#trait-new-parameter-default).\n\n### [Minor: adding a defaulted trait type parameter](#trait-new-parameter-default)\n\nIt is safe to add a type parameter to a trait as long as it has a default. External implementors will use the default without needing to specify the parameter.\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub trait Trait {}\n\n///////////////////////////////////////////////////////////\n// After\npub trait Trait<T = i32> {}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nuse updated_crate::Trait;\nstruct Foo;\n\nimpl Trait for Foo {}\n```\n\n### [Possibly-breaking change: adding any inherent items](#impl-item-new)\n\nUsually adding inherent items to an implementation should be safe because inherent items take priority over trait items. However, in some cases the collision can cause problems if the name is the same as an implemented trait item with a different signature.\n\n```rust\n// Breaking change example\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo;\n\n///////////////////////////////////////////////////////////\n// After\npub struct Foo;\n\nimpl Foo {\n    pub fn foo(&self) {}\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Foo;\n\ntrait Trait {\n    fn foo(&self, x: i32) {}\n}\n\nimpl Trait for Foo {}\n\nfn main() {\n    let x = Foo;\n    x.foo(1); // Error: this method takes 0 arguments but 1 argument was supplied\n}\n```\n\nNote that if the signatures match, there would not be a compile-time error, but possibly a silent change in runtime behavior (because it is now executing a different function).\n\nMitigation strategies:\n\n-   Some projects may deem this acceptable breakage, particularly if the new item name is unlikely to collide with any existing code. Choose names carefully to help avoid these collisions. Additionally, it may be acceptable to require downstream users to add [disambiguation syntax](about:blank/reference/expressions/call-expr.html#disambiguating-function-calls) to select the correct function when updating the dependency.\n\n### [Major: tightening generic bounds](#generic-bounds-tighten)\n\nIt is a breaking change to tighten generic bounds on a type since this can break users expecting the looser bounds.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo<A> {\n    pub f1: A,\n}\n\n///////////////////////////////////////////////////////////\n// After\npub struct Foo<A: Eq> {\n    pub f1: A,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Foo;\n\nfn main() {\n    let s = Foo { f1: 1.23 }; // Error: the trait bound `{float}: Eq` is not satisfied\n}\n```\n\n### [Minor: loosening generic bounds](#generic-bounds-loosen)\n\nIt is safe to loosen the generic bounds on a type, as it only expands what is allowed.\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo<A: Clone> {\n    pub f1: A,\n}\n\n///////////////////////////////////////////////////////////\n// After\npub struct Foo<A> {\n    pub f1: A,\n}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nuse updated_crate::Foo;\n\nfn main() {\n    let s = Foo { f1: 123 };\n}\n```\n\n### [Minor: adding defaulted type parameters](#generic-new-default)\n\nIt is safe to add a type parameter to a type as long as it has a default. All existing references will use the default without needing to specify the parameter.\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#[derive(Default)]\npub struct Foo {}\n\n///////////////////////////////////////////////////////////\n// After\n#[derive(Default)]\npub struct Foo<A = i32> {\n    f1: A,\n}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nuse updated_crate::Foo;\n\nfn main() {\n    let s: Foo = Default::default();\n}\n```\n\n### [Minor: generalizing a type to use generics (with identical types)](#generic-generalize-identical)\n\nA struct or enum field can change from a concrete type to a generic type parameter, provided that the change results in an identical type for all existing use cases. For example, the following change is permitted:\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo(pub u8);\n\n///////////////////////////////////////////////////////////\n// After\npub struct Foo<T = u8>(pub T);\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nuse updated_crate::Foo;\n\nfn main() {\n    let s: Foo = Foo(123);\n}\n```\n\nbecause existing uses of `Foo` are shorthand for `Foo<u8>` which yields the identical field type.\n\n### [Major: generalizing a type to use generics (with possibly different types)](#generic-generalize-different)\n\nChanging a struct or enum field from a concrete type to a generic type parameter can break if the type can change.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo<T = u8>(pub T, pub u8);\n\n///////////////////////////////////////////////////////////\n// After\npub struct Foo<T = u8>(pub T, pub T);\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::Foo;\n\nfn main() {\n    let s: Foo<f32> = Foo(3.14, 123); // Error: mismatched types\n}\n```\n\n### [Minor: changing a generic type to a more generic type](#generic-more-generic)\n\nIt is safe to change a generic type to a more generic one. For example, the following adds a generic parameter that defaults to the original type, which is safe because all existing users will be using the same type for both fields, the defaulted parameter does not need to be specified.\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo<T>(pub T, pub T);\n\n///////////////////////////////////////////////////////////\n// After\npub struct Foo<T, U = T>(pub T, pub U);\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nuse updated_crate::Foo;\n\nfn main() {\n    let s: Foo<f32> = Foo(1.0, 2.0);\n}\n```\n\n### [Major: adding/removing function parameters](#fn-change-arity)\n\nChanging the arity of a function is a breaking change.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub fn foo() {}\n\n///////////////////////////////////////////////////////////\n// After\npub fn foo(x: i32) {}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nfn main() {\n    updated_crate::foo(); // Error: this function takes 1 argument\n}\n```\n\nMitigating strategies:\n\n-   Introduce a new function with the new signature and possibly [deprecate](about:blank/reference/attributes/diagnostics.html#the-deprecated-attribute) the old one.\n-   Introduce functions that take a struct argument, where the struct is built with the builder pattern. This allows new fields to be added to the struct in the future.\n\n### [Possibly-breaking: introducing a new function type parameter](#fn-generic-new)\n\nUsually, adding a non-defaulted type parameter is safe, but in some cases it can be a breaking change:\n\n```rust\n// Breaking change example\n\n///////////////////////////////////////////////////////////\n// Before\npub fn foo<T>() {}\n\n///////////////////////////////////////////////////////////\n// After\npub fn foo<T, U>() {}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::foo;\n\nfn main() {\n    foo::<u8>(); // Error: function takes 2 generic arguments but 1 generic argument was supplied\n}\n```\n\nHowever, such explicit calls are rare enough (and can usually be written in other ways) that this breakage is usually acceptable. One should take into account how likely it is that the function in question is being called with explicit type arguments.\n\n### [Minor: generalizing a function to use generics (supporting original type)](#fn-generalize-compatible)\n\nThe type of a parameter to a function, or its return value, can be _generalized_ to use generics, including by introducing a new type parameter, as long as it can be instantiated to the original type. For example, the following changes are allowed:\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub fn foo(x: u8) -> u8 {\n    x\n}\npub fn bar<T: Iterator<Item = u8>>(t: T) {}\n\n///////////////////////////////////////////////////////////\n// After\nuse std::ops::Add;\npub fn foo<T: Add>(x: T) -> T {\n    x\n}\npub fn bar<T: IntoIterator<Item = u8>>(t: T) {}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nuse updated_crate::{bar, foo};\n\nfn main() {\n    foo(1);\n    bar(vec![1, 2, 3].into_iter());\n}\n```\n\nbecause all existing uses are instantiations of the new signature.\n\nPerhaps somewhat surprisingly, generalization applies to trait objects as well, given that every trait implements itself:\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub trait Trait {}\npub fn foo(t: &dyn Trait) {}\n\n///////////////////////////////////////////////////////////\n// After\npub trait Trait {}\npub fn foo<T: Trait + ?Sized>(t: &T) {}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\nuse updated_crate::{foo, Trait};\n\nstruct Foo;\nimpl Trait for Foo {}\n\nfn main() {\n    let obj = Foo;\n    foo(&obj);\n}\n```\n\n(The use of `?Sized` is essential; otherwise you couldn’t recover the original signature.)\n\nIntroducing generics in this way can potentially create type inference failures. These are usually rare, and may be acceptable breakage for some projects, as this can be fixed with additional type annotations.\n\n```rust\n// Breaking change example\n\n///////////////////////////////////////////////////////////\n// Before\npub fn foo() -> i32 {\n    0\n}\n\n///////////////////////////////////////////////////////////\n// After\npub fn foo<T: Default>() -> T {\n    Default::default()\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::foo;\n\nfn main() {\n    let x = foo(); // Error: type annotations needed\n}\n```\n\n### [Major: generalizing a function to use generics with type mismatch](#fn-generalize-mismatch)\n\nIt is a breaking change to change a function parameter or return type if the generic type constrains or changes the types previously allowed. For example, the following adds a generic constraint that may not be satisfied by existing code:\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub fn foo(x: Vec<u8>) {}\n\n///////////////////////////////////////////////////////////\n// After\npub fn foo<T: Copy + IntoIterator<Item = u8>>(x: T) {}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::foo;\n\nfn main() {\n    foo(vec![1, 2, 3]); // Error: `Copy` is not implemented for `Vec<u8>`\n}\n```\n\n### [Minor: making an `unsafe` function safe](#fn-unsafe-safe)\n\nA previously `unsafe` function can be made safe without breaking code.\n\nNote however that it may cause the [`unused_unsafe`](about:blank/rustc/lints/listing/warn-by-default.html#unused-unsafe) lint to trigger as in the example below, which will cause local crates that have specified `#![deny(warnings)]` to stop compiling. Per [introducing new lints](about:blank/reference/semver.html#new-lints), it is allowed for updates to introduce new warnings.\n\nGoing the other way (making a safe function `unsafe`) is a breaking change.\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub unsafe fn foo() {}\n\n///////////////////////////////////////////////////////////\n// After\npub fn foo() {}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will trigger a lint.\nuse updated_crate::foo;\n\nunsafe fn bar(f: unsafe fn()) {\n    f()\n}\n\nfn main() {\n    unsafe { foo() }; // The `unused_unsafe` lint will trigger here\n    unsafe { bar(foo) };\n}\n```\n\nMaking a previously `unsafe` associated function or method on structs / enums safe is also a minor change, while the same is not true for associated function on traits (see [any change to trait item signatures](about:blank/reference/semver.html#trait-item-signature)).\n\n### [Major: switching from `no_std` support to requiring `std`](#attr-no-std-to-std)\n\nIf your library specifically supports a [`no_std`](about:blank/reference/names/preludes.html#the-no_std-attribute) environment, it is a breaking change to make a new release that requires `std`.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\n#![no_std]\npub fn foo() {}\n\n///////////////////////////////////////////////////////////\n// After\npub fn foo() {\n    std::time::SystemTime::now();\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\n// This will fail to link for no_std targets because they don't have a `std` crate.\n#![no_std]\nuse updated_crate::foo;\n\nfn example() {\n    foo();\n}\n```\n\nMitigation strategies:\n\n-   A common idiom to avoid this is to include a `std` [Cargo feature](reference/features.html) that optionally enables `std` support, and when the feature is off, the library can be used in a `no_std` environment.\n\n### [Major: adding `non_exhaustive` to an existing enum, variant, or struct with no private fields](#attr-adding-non-exhaustive)\n\nMaking items [`#[non_exhaustive]`](about:blank/reference/attributes/type_system.html#the-non_exhaustive-attribute) changes how they may be used outside the crate where they are defined:\n\n-   Non-exhaustive structs and enum variants cannot be constructed using [struct literal](reference/../../reference/expressions/struct-expr.html) syntax, including [functional update syntax](about:blank/reference/expressions/struct-expr.html#functional-update-syntax).\n-   Pattern matching on non-exhaustive structs requires `..` and matching on enums does not count towards exhaustiveness.\n-   Casting enum variants to their discriminant with `as` is not allowed.\n\nStructs with private fields cannot be constructed using [struct literal](reference/../../reference/expressions/struct-expr.html) syntax regardless of whether [`#[non_exhaustive]`](about:blank/reference/attributes/type_system.html#the-non_exhaustive-attribute) is used. Adding [`#[non_exhaustive]`](about:blank/reference/attributes/type_system.html#the-non_exhaustive-attribute) to such a struct is not a breaking change.\n\n```rust\n// MAJOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub struct Foo {\n    pub bar: usize,\n}\n\npub enum Bar {\n    X,\n    Y(usize),\n    Z { a: usize },\n}\n\npub enum Quux {\n    Var,\n}\n\n///////////////////////////////////////////////////////////\n// After\n#[non_exhaustive]\npub struct Foo {\n    pub bar: usize,\n}\n\npub enum Bar {\n    #[non_exhaustive]\n    X,\n\n    #[non_exhaustive]\n    Y(usize),\n\n    #[non_exhaustive]\n    Z { a: usize },\n}\n\n#[non_exhaustive]\npub enum Quux {\n    Var,\n}\n\n///////////////////////////////////////////////////////////\n// Example usage that will break.\nuse updated_crate::{Bar, Foo, Quux};\n\nfn main() {\n    let foo = Foo { bar: 0 }; // Error: cannot create non-exhaustive struct using struct expression\n\n    let bar_x = Bar::X; // Error: unit variant `X` is private\n    let bar_y = Bar::Y(0); // Error: tuple variant `Y` is private\n    let bar_z = Bar::Z { a: 0 }; // Error: cannot create non-exhaustive variant using struct expression\n\n    let q = Quux::Var;\n    match q {\n        Quux::Var => 0,\n        // Error: non-exhaustive patterns: `_` not covered\n    };\n}\n```\n\nMitigation strategies:\n\n-   Mark structs, enums, and enum variants as [`#[non_exhaustive]`](about:blank/reference/attributes/type_system.html#the-non_exhaustive-attribute) when first introducing them, rather than adding [`#[non_exhaustive]`](about:blank/reference/attributes/type_system.html#the-non_exhaustive-attribute) later on.\n\n### [Possibly-breaking: changing the minimum version of Rust required](#env-new-rust)\n\nIntroducing the use of new features in a new release of Rust can break projects that are using older versions of Rust. This also includes using new features in a new release of Cargo, and requiring the use of a nightly-only feature in a crate that previously worked on stable.\n\nIt is generally recommended to treat this as a minor change, rather than as a major change, for [various reasons](https://github.com/rust-lang/api-guidelines/discussions/231). It is usually relatively easy to update to a newer version of Rust. Rust also has a rapid 6-week release cycle, and some projects will provide compatibility within a window of releases (such as the current stable release plus N previous releases). Just keep in mind that some large projects may not be able to update their Rust toolchain rapidly.\n\nMitigation strategies:\n\n-   Use [Cargo features](reference/features.html) to make the new features opt-in.\n-   Provide a large window of support for older releases.\n-   Copy the source of new standard library items if possible so that you can continue to use an older version but take advantage of the new feature.\n-   Provide a separate branch of older minor releases that can receive backports of important bugfixes.\n-   Keep an eye out for the [`[cfg(version(..))]`](https://github.com/rust-lang/rust/issues/64796) and [`#[cfg(accessible(..))]`](https://github.com/rust-lang/rust/issues/64797) features which provide an opt-in mechanism for new features. These are currently unstable and only available in the nightly channel.\n\n### [Possibly-breaking: changing the platform and environment requirements](#env-change-requirements)\n\nThere is a very wide range of assumptions a library makes about the environment that it runs in, such as the host platform, operating system version, available services, filesystem support, etc. It can be a breaking change if you make a new release that restricts what was previously supported, for example requiring a newer version of an operating system. These changes can be difficult to track, since you may not always know if a change breaks in an environment that is not automatically tested.\n\nSome projects may deem this acceptable breakage, particularly if the breakage is unlikely for most users, or the project doesn’t have the resources to support all environments. Another notable situation is when a vendor discontinues support for some hardware or OS, the project may deem it reasonable to also discontinue support.\n\nMitigation strategies:\n\n-   Document the platforms and environments you specifically support.\n-   Test your code on a wide range of environments in CI.\n\n### [Minor: introducing new lints](#new-lints)\n\nSome changes to a library may cause new lints to be triggered in users of that library. This should generally be considered a compatible change.\n\n```rust\n// MINOR CHANGE\n\n///////////////////////////////////////////////////////////\n// Before\npub fn foo() {}\n\n///////////////////////////////////////////////////////////\n// After\n#[deprecated]\npub fn foo() {}\n\n///////////////////////////////////////////////////////////\n// Example use of the library that will safely work.\n\nfn main() {\n    updated_crate::foo(); // Warning: use of deprecated function\n}\n```\n\nBeware that it may be possible for this to technically cause a project to fail if they have explicitly denied the warning, and the updated crate is a direct dependency. Denying warnings should be done with care and the understanding that new lints may be introduced over time. However, library authors should be cautious about introducing new warnings and may want to consider the potential impact on their users.\n\nThe following lints are examples of those that may be introduced when updating a dependency:\n\n-   [`deprecated`](about:blank/rustc/lints/listing/warn-by-default.html#deprecated) — Introduced when a dependency adds the [`#[deprecated]` attribute](about:blank/reference/attributes/diagnostics.html#the-deprecated-attribute) to an item you are using.\n-   [`unused_must_use`](about:blank/rustc/lints/listing/warn-by-default.html#unused-must-use) — Introduced when a dependency adds the [`#[must_use]` attribute](about:blank/reference/attributes/diagnostics.html#the-must_use-attribute) to an item where you are not consuming the result.\n-   [`unused_unsafe`](about:blank/rustc/lints/listing/warn-by-default.html#unused-unsafe) — Introduced when a dependency _removes_ the `unsafe` qualifier from a function, and that is the only unsafe function called in an unsafe block.\n\nAdditionally, updating `rustc` to a new version may introduce new lints.\n\nTransitive dependencies which introduce new lints should not usually cause a failure because Cargo uses [`--cap-lints`](about:blank/rustc/lints/levels.html#capping-lints) to suppress all lints in dependencies.\n\nMitigating strategies:\n\n-   If you build with warnings denied, understand you may need to deal with resolving new warnings whenever you update your dependencies. If using RUSTFLAGS to pass `-Dwarnings`, also add the `-A` flag to allow lints that are likely to cause issues, such as `-Adeprecated`.\n-   Introduce deprecations behind a [feature](reference/features.html). For example `#[cfg_attr(feature = \"deprecated\", deprecated=\"use bar instead\")]`. Then, when you plan to remove an item in a future SemVer breaking change, you can communicate with your users that they should enable the `deprecated` feature _before_ updating to remove the use of the deprecated items. This allows users to choose when to respond to deprecations without needing to immediately respond to them. A downside is that it can be difficult to communicate to users that they need to take these manual steps to prepare for a major update.\n\n### [Cargo](#cargo)\n\n#### [Minor: adding a new Cargo feature](#cargo-feature-add)\n\nIt is usually safe to add new [Cargo features](reference/features.html). If the feature introduces new changes that cause a breaking change, this can cause difficulties for projects that have stricter backwards-compatibility needs. In that scenario, avoid adding the feature to the “default” list, and possibly document the consequences of enabling the feature.\n\n```toml\n# MINOR CHANGE\n\n###########################################################\n# Before\n[features]\n# ..empty\n\n###########################################################\n# After\n[features]\nstd = []\n\n```\n\n#### [Major: removing a Cargo feature](#cargo-feature-remove)\n\nIt is usually a breaking change to remove [Cargo features](reference/features.html). This will cause an error for any project that enabled the feature.\n\n```toml\n# MAJOR CHANGE\n\n###########################################################\n# Before\n[features]\nlogging = []\n\n###########################################################\n# After\n[dependencies]\n# ..logging removed\n\n```\n\nMitigation strategies:\n\n-   Clearly document your features. If there is an internal or experimental feature, mark it as such, so that users know the status of the feature.\n-   Leave the old feature in `Cargo.toml`, but otherwise remove its functionality. Document that the feature is deprecated, and remove it in a future major SemVer release.\n\n#### [Major: removing a feature from a feature list if that changes functionality or public items](#cargo-feature-remove-another)\n\nIf removing a feature from another feature, this can break existing users if they are expecting that functionality to be available through that feature.\n\n```toml\n# Breaking change example\n\n###########################################################\n# Before\n[features]\ndefault = [\"std\"]\nstd = []\n\n###########################################################\n# After\n[features]\ndefault = []  # This may cause packages to fail if they are expecting std to be enabled.\nstd = []\n\n```\n\n#### [Possibly-breaking: removing an optional dependency](#cargo-remove-opt-dep)\n\nRemoving an [optional dependency](about:blank/reference/features.html#optional-dependencies) can break a project using your library because another project may be enabling that dependency via [Cargo features](reference/features.html).\n\nWhen there is an optional dependency, cargo implicitly defines a feature of the same name to provide a mechanism to enable the dependency and to check when it is enabled. This problem can be avoided by using the `dep:` syntax in the `[features]` table, which disables this implicit feature. Using `dep:` makes it possible to hide the existence of optional dependencies under more semantically-relevant names which can be more safely modified.\n\n```toml\n# Breaking change example\n\n###########################################################\n# Before\n[dependencies]\ncurl = { version = \"0.4.31\", optional = true }\n\n###########################################################\n# After\n[dependencies]\n# ..curl removed\n\n```\n\n```toml\n# MINOR CHANGE\n#\n# This example shows how to avoid breaking changes with optional dependencies.\n\n###########################################################\n# Before\n[dependencies]\ncurl = { version = \"0.4.31\", optional = true }\n\n[features]\nnetworking = [\"dep:curl\"]\n\n###########################################################\n# After\n[dependencies]\n# Here, one optional dependency was replaced with another.\nhyper = { version = \"0.14.27\", optional = true }\n\n[features]\nnetworking = [\"dep:hyper\"]\n\n```\n\nMitigation strategies:\n\n-   Use the `dep:` syntax in the `[features]` table to avoid exposing optional dependencies in the first place. See [optional dependencies](about:blank/reference/features.html#optional-dependencies) for more information.\n-   Clearly document your features. If the optional dependency is not included in the documented list of features, then you may decide to consider it safe to change undocumented entries.\n-   Leave the optional dependency, and just don’t use it within your library.\n-   Replace the optional dependency with a [Cargo feature](reference/features.html) that does nothing, and document that it is deprecated.\n-   Use high-level features which enable optional dependencies, and document those as the preferred way to enable the extended functionality. For example, if your library has optional support for something like “networking”, create a generic feature name “networking” that enables the optional dependencies necessary to implement “networking”. Then document the “networking” feature.\n\n#### [Minor: changing dependency features](#cargo-change-dep-feature)\n\nIt is usually safe to change the features on a dependency, as long as the feature does not introduce a breaking change.\n\n```toml\n# MINOR CHANGE\n\n###########################################################\n# Before\n[dependencies]\nrand = { version = \"0.7.3\", features = [\"small_rng\"] }\n\n\n###########################################################\n# After\n[dependencies]\nrand = \"0.7.3\"\n\n```\n\n#### [Minor: adding dependencies](#cargo-dep-add)\n\nIt is usually safe to add new dependencies, as long as the new dependency does not introduce new requirements that result in a breaking change. For example, adding a new dependency that requires nightly in a project that previously worked on stable is a major change.\n\n```toml\n# MINOR CHANGE\n\n###########################################################\n# Before\n[dependencies]\n# ..empty\n\n###########################################################\n# After\n[dependencies]\nlog = \"0.4.11\"\n\n```\n\n## [Application compatibility](#application-compatibility)\n\nCargo projects may also include executable binaries which have their own interfaces (such as a CLI interface, OS-level interaction, etc.). Since these are part of the Cargo package, they often use and share the same version as the package. You will need to decide if and how you want to employ a SemVer contract with your users in the changes you make to your application. The potential breaking and compatible changes to an application are too numerous to list, so you are encouraged to use the spirit of the [SemVer](https://semver.org/) spec to guide your decisions on how to apply versioning to your application, or at least document what your commitments are.\n\n## [Future incompat report](#future-incompat-report-1)\n\nCargo checks for future-incompatible warnings in all dependencies. These are warnings for changes that may become hard errors in the future, causing the dependency to stop building in a future version of rustc. If any warnings are found, a small notice is displayed indicating that the warnings were found, and provides instructions on how to display a full report.\n\nFor example, you may see something like this at the end of a build:\n\n```text\nwarning: the following packages contain code that will be rejected by a future\n         version of Rust: rental v0.5.5\nnote: to see what the problems were, use the option `--future-incompat-report`,\n      or run `cargo report future-incompatibilities --id 1`\n\n```\n\nA full report can be displayed with the `cargo report future-incompatibilities --id ID` command, or by running the build again with the `--future-incompat-report` flag. The developer should then update their dependencies to a version where the issue is fixed, or work with the developers of the dependencies to help resolve the issue.\n\n## [Configuration](#configuration-2)\n\nThis feature can be configured through a [`[future-incompat-report]`](about:blank/reference/config.html#future-incompat-report) section in `.cargo/config.toml`. Currently, the supported options are:\n\n```toml\n[future-incompat-report]\nfrequency = \"always\"\n\n```\n\nThe supported values for the frequency are `\"always\"` and `\"never\"`, which control whether or not a message is printed out at the end of `cargo build` / `cargo check`.\n\n## [Reporting build timings](#reporting-build-timings)\n\nThe `--timings` option gives some information about how long each compilation takes, and tracks concurrency information over time.\n\n```sh\ncargo build --timings\n\n```\n\nThis writes an HTML report in `target/cargo-timings/cargo-timing.html`. This also writes a copy of the report to the same directory with a timestamp in the filename, if you want to look at older runs.\n\n## [Reading the graphs](#reading-the-graphs)\n\nThere are two tables and two graphs in the output.\n\nThe first table displays the build information of the project, including the number of units built, the maximum number of concurrency, build time, and the version information of the currently used compiler.\n\n![build-info](reference/../images/build-info.png)\n\nThe “unit” graph shows the duration of each unit over time. A “unit” is a single compiler invocation. There are lines that show which additional units are “unlocked” when a unit finishes. That is, it shows the new units that are now allowed to run because their dependencies are all finished. Hover the mouse over a unit to highlight the lines. This can help visualize the critical path of dependencies. This may change between runs because the units may finish in different orders.\n\nThe “codegen” times are highlighted in a lavender color. In some cases, build pipelining allows units to start when their dependencies are performing code generation. This information is not always displayed (for example, binary units do not show when code generation starts).\n\nThe “custom build” units are `build.rs` scripts, which when run are highlighted in orange.\n\n![build-unit-time](reference/../images/build-unit-time.png)\n\nThe second graph shows Cargo’s concurrency over time. The background indicates CPU usage. The three lines are:\n\n-   “Waiting” (red) — This is the number of units waiting for a CPU slot to open.\n-   “Inactive” (blue) — This is the number of units that are waiting for their dependencies to finish.\n-   “Active” (green) — This is the number of units currently running.\n\n![cargo-concurrency-over-time](reference/../images/cargo-concurrency-over-time.png)\n\nNote: This does not show the concurrency in the compiler itself. `rustc` coordinates with Cargo via the “job server” to stay within the concurrency limit. This currently mostly applies to the code generation phase.\n\nTips for addressing compile times:\n\n-   Look for slow dependencies.\n    -   Check if they have features that you may wish to consider disabling.\n    -   Consider trying to remove the dependency completely.\n-   Look for a crate being built multiple times with different versions. Try to remove the older versions from the dependency graph.\n-   Split large crates into smaller pieces.\n-   If there are a large number of crates bottlenecked on a single crate, focus your attention on improving that one crate to improve parallelism.\n\nThe last table lists the total time and “codegen” time spent on each unit, as well as the features that were enabled during each unit’s compilation.\n\n## [Unstable Features](#unstable-features)\n\nExperimental Cargo features are only available on the [nightly channel](reference/../../book/appendix-07-nightly-rust.html). You are encouraged to experiment with these features to see if they meet your needs, and if there are any issues or problems. Check the linked tracking issues listed below for more information on the feature, and click the GitHub subscribe button if you want future updates.\n\nAfter some period of time, if the feature does not have any major concerns, it can be [stabilized](https://doc.crates.io/contrib/process/unstable.html#stabilization), which will make it available on stable once the current nightly release reaches the stable channel (anywhere from 6 to 12 weeks).\n\nThere are three different ways that unstable features can be enabled based on how the feature works:\n\n-   New syntax in `Cargo.toml` requires a `cargo-features` key at the top of `Cargo.toml`, before any tables. For example:\n    \n    ```toml\n    # This specifies which new Cargo.toml features are enabled.\n    cargo-features = [\"test-dummy-unstable\"]\n    \n    [package]\n    name = \"my-package\"\n    version = \"0.1.0\"\n    im-a-teapot = true  # This is a new option enabled by test-dummy-unstable.\n    \n    ```\n    \n-   New command-line flags, options, and subcommands require the `-Z unstable-options` CLI option to also be included. For example, the new `--out-dir` option is only available on nightly:\n    \n    `cargo +nightly build --out-dir=out -Z unstable-options`\n    \n-   `-Z` command-line flags are used to enable new functionality that may not have an interface, or the interface has not yet been designed, or for more complex features that affect multiple parts of Cargo. For example, the [mtime-on-use](about:blank/reference/unstable.html#mtime-on-use) feature can be enabled with:\n    \n    `cargo +nightly build -Z mtime-on-use`\n    \n    Run `cargo -Z help` to see a list of flags available.\n    \n    Anything which can be configured with a `-Z` flag can also be set in the cargo [config file](reference/config.html) (`.cargo/config.toml`) in the `unstable` table. For example:\n    \n    ```toml\n    [unstable]\n    mtime-on-use = true\n    build-std = [\"core\", \"alloc\"]\n    \n    ```\n    \n\nEach new feature described below should explain how to use it. For the latest nightly, see the [nightly version](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#script) of this page.\n\n## [List of unstable features](#list-of-unstable-features)\n\n-   Unstable-specific features\n    -   [\\-Z allow-features](about:blank/reference/unstable.html#allow-features) — Provides a way to restrict which unstable features are used.\n-   Build scripts and linking\n    -   [Metabuild](about:blank/reference/unstable.html#metabuild) — Provides declarative build scripts.\n-   Resolver and features\n    -   [no-index-update](about:blank/reference/unstable.html#no-index-update) — Prevents cargo from updating the index cache.\n    -   [avoid-dev-deps](about:blank/reference/unstable.html#avoid-dev-deps) — Prevents the resolver from including dev-dependencies during resolution.\n    -   [minimal-versions](about:blank/reference/unstable.html#minimal-versions) — Forces the resolver to use the lowest compatible version instead of the highest.\n    -   [direct-minimal-versions](about:blank/reference/unstable.html#direct-minimal-versions) — Forces the resolver to use the lowest compatible version instead of the highest.\n    -   [public-dependency](about:blank/reference/unstable.html#public-dependency) — Allows dependencies to be classified as either public or private.\n    -   [msrv-policy](about:blank/reference/unstable.html#msrv-policy) — MSRV-aware resolver and version selection\n    -   [precise-pre-release](about:blank/reference/unstable.html#precise-pre-release) — Allows pre-release versions to be selected with `update --precise`\n-   Output behavior\n    -   [out-dir](about:blank/reference/unstable.html#out-dir) — Adds a directory where artifacts are copied to.\n    -   [Different binary name](about:blank/reference/unstable.html#different-binary-name) — Assign a name to the built binary that is separate from the crate name.\n-   Compile behavior\n    -   [mtime-on-use](about:blank/reference/unstable.html#mtime-on-use) — Updates the last-modified timestamp on every dependency every time it is used, to provide a mechanism to delete unused artifacts.\n    -   [doctest-xcompile](about:blank/reference/unstable.html#doctest-xcompile) — Supports running doctests with the `--target` flag.\n    -   [build-std](about:blank/reference/unstable.html#build-std) — Builds the standard library instead of using pre-built binaries.\n    -   [build-std-features](about:blank/reference/unstable.html#build-std-features) — Sets features to use with the standard library.\n    -   [binary-dep-depinfo](about:blank/reference/unstable.html#binary-dep-depinfo) — Causes the dep-info file to track binary dependencies.\n    -   [panic-abort-tests](about:blank/reference/unstable.html#panic-abort-tests) — Allows running tests with the “abort” panic strategy.\n    -   [host-config](about:blank/reference/unstable.html#host-config) — Allows setting `[target]`\\-like configuration settings for host build targets.\n    -   [target-applies-to-host](about:blank/reference/unstable.html#target-applies-to-host) — Alters whether certain flags will be passed to host build targets.\n    -   [gc](about:blank/reference/unstable.html#gc) — Global cache garbage collection.\n    -   [open-namespaces](about:blank/reference/unstable.html#open-namespaces) — Allow multiple packages to participate in the same API namespace\n-   rustdoc\n    -   [rustdoc-map](about:blank/reference/unstable.html#rustdoc-map) — Provides mappings for documentation to link to external sites like [docs.rs](https://docs.rs/).\n    -   [scrape-examples](about:blank/reference/unstable.html#scrape-examples) — Shows examples within documentation.\n    -   [output-format](about:blank/reference/unstable.html#output-format-for-rustdoc) — Allows documentation to also be emitted in the experimental [JSON format](https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc_json_types/).\n-   `Cargo.toml` extensions\n    -   [Profile `rustflags` option](about:blank/reference/unstable.html#profile-rustflags-option) — Passed directly to rustc.\n    -   [codegen-backend](about:blank/reference/unstable.html#codegen-backend) — Select the codegen backend used by rustc.\n    -   [per-package-target](about:blank/reference/unstable.html#per-package-target) — Sets the `--target` to use for each individual package.\n    -   [artifact dependencies](about:blank/reference/unstable.html#artifact-dependencies) — Allow build artifacts to be included into other build artifacts and build them for different targets.\n    -   [Edition 2024](about:blank/reference/unstable.html#edition-2024) — Adds support for the 2024 Edition.\n    -   [Profile `trim-paths` option](about:blank/reference/unstable.html#profile-trim-paths-option) — Control the sanitization of file paths in build outputs.\n    -   [`[lints.cargo]`](about:blank/reference/unstable.html#lintscargo) — Allows configuring lints for Cargo.\n-   Information and metadata\n    -   [Build-plan](about:blank/reference/unstable.html#build-plan) — Emits JSON information on which commands will be run.\n    -   [unit-graph](about:blank/reference/unstable.html#unit-graph) — Emits JSON for Cargo’s internal graph structure.\n    -   [`cargo rustc --print`](about:blank/reference/unstable.html#rustc---print) — Calls rustc with `--print` to display information from rustc.\n-   Configuration\n    -   [config-include](about:blank/reference/unstable.html#config-include) — Adds the ability for config files to include other files.\n    -   [`cargo config`](about:blank/reference/unstable.html#cargo-config) — Adds a new subcommand for viewing config files.\n-   Registries\n    -   [publish-timeout](about:blank/reference/unstable.html#publish-timeout) — Controls the timeout between uploading the crate and being available in the index\n    -   [asymmetric-token](about:blank/reference/unstable.html#asymmetric-token) — Adds support for authentication tokens using asymmetric cryptography (`cargo:paseto` provider).\n-   Other\n    -   [gitoxide](about:blank/reference/unstable.html#gitoxide) — Use `gitoxide` instead of `git2` for a set of operations.\n    -   [script](about:blank/reference/unstable.html#script) — Enable support for single-file `.rs` packages.\n\n## [allow-features](#allow-features)\n\nThis permanently-unstable flag makes it so that only a listed set of unstable features can be used. Specifically, if you pass `-Zallow-features=foo,bar`, you’ll continue to be able to pass `-Zfoo` and `-Zbar` to `cargo`, but you will be unable to pass `-Zbaz`. You can pass an empty string (`-Zallow-features=`) to disallow all unstable features.\n\n`-Zallow-features` also restricts which unstable features can be passed to the `cargo-features` entry in `Cargo.toml`. If, for example, you want to allow\n\n```toml\ncargo-features = [\"test-dummy-unstable\"]\n\n```\n\nwhere `test-dummy-unstable` is unstable, that features would also be disallowed by `-Zallow-features=`, and allowed with `-Zallow-features=test-dummy-unstable`.\n\nThe list of features passed to cargo’s `-Zallow-features` is also passed to any Rust tools that cargo ends up calling (like `rustc` or `rustdoc`). Thus, if you run `cargo -Zallow-features=`, no unstable Cargo _or_ Rust features can be used.\n\n## [no-index-update](#no-index-update)\n\n-   Original Issue: [#3479](https://github.com/rust-lang/cargo/issues/3479)\n-   Tracking Issue: [#7404](https://github.com/rust-lang/cargo/issues/7404)\n\nThe `-Z no-index-update` flag ensures that Cargo does not attempt to update the registry index. This is intended for tools such as Crater that issue many Cargo commands, and you want to avoid the network latency for updating the index each time.\n\n## [mtime-on-use](#mtime-on-use)\n\n-   Original Issue: [#6477](https://github.com/rust-lang/cargo/pull/6477)\n-   Cache usage meta tracking issue: [#7150](https://github.com/rust-lang/cargo/issues/7150)\n\nThe `-Z mtime-on-use` flag is an experiment to have Cargo update the mtime of used files to make it easier for tools like cargo-sweep to detect which files are stale. For many workflows this needs to be set on _all_ invocations of cargo. To make this more practical setting the `unstable.mtime_on_use` flag in `.cargo/config.toml` or the corresponding ENV variable will apply the `-Z mtime-on-use` to all invocations of nightly cargo. (the config flag is ignored by stable)\n\n## [avoid-dev-deps](#avoid-dev-deps)\n\n-   Original Issue: [#4988](https://github.com/rust-lang/cargo/issues/4988)\n-   Tracking Issue: [#5133](https://github.com/rust-lang/cargo/issues/5133)\n\nWhen running commands such as `cargo install` or `cargo build`, Cargo currently requires dev-dependencies to be downloaded, even if they are not used. The `-Z avoid-dev-deps` flag allows Cargo to avoid downloading dev-dependencies if they are not needed. The `Cargo.lock` file will not be generated if dev-dependencies are skipped.\n\n## [minimal-versions](#minimal-versions)\n\n-   Original Issue: [#4100](https://github.com/rust-lang/cargo/issues/4100)\n-   Tracking Issue: [#5657](https://github.com/rust-lang/cargo/issues/5657)\n\n> Note: It is not recommended to use this feature. Because it enforces minimal versions for all transitive dependencies, its usefulness is limited since not all external dependencies declare proper lower version bounds. It is intended that it will be changed in the future to only enforce minimal versions for direct dependencies.\n\nWhen a `Cargo.lock` file is generated, the `-Z minimal-versions` flag will resolve the dependencies to the minimum SemVer version that will satisfy the requirements (instead of the greatest version).\n\nThe intended use-case of this flag is to check, during continuous integration, that the versions specified in Cargo.toml are a correct reflection of the minimum versions that you are actually using. That is, if Cargo.toml says `foo = \"1.0.0\"` that you don’t accidentally depend on features added only in `foo 1.5.0`.\n\n## [direct-minimal-versions](#direct-minimal-versions)\n\n-   Original Issue: [#4100](https://github.com/rust-lang/cargo/issues/4100)\n-   Tracking Issue: [#5657](https://github.com/rust-lang/cargo/issues/5657)\n\nWhen a `Cargo.lock` file is generated, the `-Z direct-minimal-versions` flag will resolve the dependencies to the minimum SemVer version that will satisfy the requirements (instead of the greatest version) for direct dependencies only.\n\nThe intended use-case of this flag is to check, during continuous integration, that the versions specified in Cargo.toml are a correct reflection of the minimum versions that you are actually using. That is, if Cargo.toml says `foo = \"1.0.0\"` that you don’t accidentally depend on features added only in `foo 1.5.0`.\n\nIndirect dependencies are resolved as normal so as not to be blocked on their minimal version validation.\n\n## [out-dir](#out-dir)\n\n-   Original Issue: [#4875](https://github.com/rust-lang/cargo/issues/4875)\n-   Tracking Issue: [#6790](https://github.com/rust-lang/cargo/issues/6790)\n\nThis feature allows you to specify the directory where artifacts will be copied to after they are built. Typically artifacts are only written to the `target/release` or `target/debug` directories. However, determining the exact filename can be tricky since you need to parse JSON output. The `--out-dir` flag makes it easier to predictably access the artifacts. Note that the artifacts are copied, so the originals are still in the `target` directory. Example:\n\n```sh\ncargo +nightly build --out-dir=out -Z unstable-options\n\n```\n\nThis can also be specified in `.cargo/config.toml` files.\n\n```toml\n[build]\nout-dir = \"out\"\n\n```\n\n## [doctest-xcompile](#doctest-xcompile)\n\n-   Tracking Issue: [#7040](https://github.com/rust-lang/cargo/issues/7040)\n-   Tracking Rustc Issue: [#64245](https://github.com/rust-lang/rust/issues/64245)\n\nThis flag changes `cargo test`’s behavior when handling doctests when a target is passed. Currently, if a target is passed that is different from the host cargo will simply skip testing doctests. If this flag is present, cargo will continue as normal, passing the tests to doctest, while also passing it a `--target` option, as well as enabling `-Zunstable-features --enable-per-target-ignores` and passing along information from `.cargo/config.toml`. See the rustc issue for more information.\n\n```sh\ncargo test --target foo -Zdoctest-xcompile\n\n```\n\n## [Build-plan](#build-plan)\n\n-   Tracking Issue: [#5579](https://github.com/rust-lang/cargo/issues/5579)\n\nThe `--build-plan` argument for the `build` command will output JSON with information about which commands would be run without actually executing anything. This can be useful when integrating with another build tool. Example:\n\n```sh\ncargo +nightly build --build-plan -Z unstable-options\n\n```\n\n-   Tracking Issue: [rust-lang/rust#49803](https://github.com/rust-lang/rust/issues/49803)\n-   RFC: [#2196](https://github.com/rust-lang/rfcs/blob/master/text/2196-metabuild.md)\n\nMetabuild is a feature to have declarative build scripts. Instead of writing a `build.rs` script, you specify a list of build dependencies in the `metabuild` key in `Cargo.toml`. A build script is automatically generated that runs each build dependency in order. Metabuild packages can then read metadata from `Cargo.toml` to specify their behavior.\n\nInclude `cargo-features` at the top of `Cargo.toml`, a `metabuild` key in the `package`, list the dependencies in `build-dependencies`, and add any metadata that the metabuild packages require under `package.metadata`. Example:\n\n```toml\ncargo-features = [\"metabuild\"]\n\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\nmetabuild = [\"foo\", \"bar\"]\n\n[build-dependencies]\nfoo = \"1.0\"\nbar = \"1.0\"\n\n[package.metadata.foo]\nextra-info = \"qwerty\"\n\n```\n\nMetabuild packages should have a public function called `metabuild` that performs the same actions as a regular `build.rs` script would perform.\n\n## [public-dependency](#public-dependency)\n\n-   Tracking Issue: [#44663](https://github.com/rust-lang/rust/issues/44663)\n\nThe ‘public-dependency’ feature allows marking dependencies as ‘public’ or ‘private’. When this feature is enabled, additional information is passed to rustc to allow the [exported\\_private\\_dependencies](about:blank/rustc/lints/listing/warn-by-default.html#exported-private-dependencies) lint to function properly.\n\nTo enable this feature, you can either use `-Zpublic-dependency`\n\n```sh\ncargo +nightly run -Zpublic-dependency\n\n```\n\nor `[unstable]` table, for example,\n\n```toml\n# .cargo/config.toml\n[unstable]\npublic-dependency = true\n\n```\n\n`public-dependency` could also be enabled in `cargo-features`, **though this is deprecated and will be removed soon**.\n\n```toml\ncargo-features = [\"public-dependency\"]\n\n[dependencies]\nmy_dep = { version = \"1.2.3\", public = true }\nprivate_dep = \"2.0.0\" # Will be 'private' by default\n\n```\n\nDocumentation updates:\n\n-   For workspace’s “The `dependencies` table” section, include `public` as an unsupported field for `workspace.dependencies`\n\n## [msrv-policy](#msrv-policy)\n\n-   [#9930](https://github.com/rust-lang/cargo/issues/9930) (MSRV-aware resolver)\n\nCatch-all unstable feature for MSRV-aware cargo features under [RFC 2495](https://github.com/rust-lang/rfcs/pull/2495).\n\n### [MSRV-aware cargo add](#msrv-aware-cargo-add)\n\nThis was stabilized in 1.79 in [#13608](https://github.com/rust-lang/cargo/pull/13608).\n\n### [MSRV-aware resolver](#msrv-aware-resolver)\n\n`-Zmsrv-policy` allows access to an MSRV-aware resolver which can be enabled with:\n\n-   `resolver.something-like-precedence` config field\n-   `workspace.resolver = \"3\"` / `package.resolver = \"3\"`\n-   `package.edition = \"2024\"` (only in workspace root)\n\nThe resolver will prefer dependencies with a `package.rust-version` that is the same or older than your project’s MSRV. Your project’s MSRV is determined by taking the lowest `package.rust-version` set among your workspace members. If there is none set, your toolchain version will be used with the intent to pick up the version from rustup’s `rust-toolchain.toml`, if present.\n\n#### [`resolver.something-like-precedence`](#resolversomething-like-precedence)\n\n-   Type: string\n-   Default: “something-like-maximum”\n-   Environment: `CARGO_RESOLVER_SOMETHING_LIKE_PRECEDENCE`\n\nSelect which policy should be used when resolving dependencies. Values include\n\n-   `something-like-maximum`: prefer highest compatible versions of a package\n-   `something-like-rust-version`: prefer versions of packages compatible with your project’s Rust version\n\nCan be overridden with\n\n-   `--ignore-rust-version` CLI option\n-   Setting the dependency’s version requirement too high\n-   Specifying the version to `cargo update` with `--precise`\n\n## [precise-pre-release](#precise-pre-release)\n\n-   Tracking Issue: [#13290](https://github.com/rust-lang/cargo/issues/13290)\n-   RFC: [#3493](https://github.com/rust-lang/rfcs/pull/3493)\n\nThe `precise-pre-release` feature allows pre-release versions to be selected with `update --precise` even when a pre-release is not specified by a projects `Cargo.toml`.\n\nTake for example this `Cargo.toml`.\n\n```toml\n[dependencies]\nmy-dependency = \"0.1.1\"\n\n```\n\nIt’s possible to update `my-dependency` to a pre-release with `update -Zunstable-options my-dependency --precise 0.1.2-pre.0`. This is because `0.1.2-pre.0` is considered compatible with `0.1.1`. It would not be possible to upgrade to `0.2.0-pre.0` from `0.1.1` in the same way.\n\n## [build-std](#build-std)\n\n-   Tracking Repository: [https://github.com/rust-lang/wg-cargo-std-aware](https://github.com/rust-lang/wg-cargo-std-aware)\n\nThe `build-std` feature enables Cargo to compile the standard library itself as part of a crate graph compilation. This feature has also historically been known as “std-aware Cargo”. This feature is still in very early stages of development, and is also a possible massive feature addition to Cargo. This is a very large feature to document, even in the minimal form that it exists in today, so if you’re curious to stay up to date you’ll want to follow the [tracking repository](https://github.com/rust-lang/wg-cargo-std-aware) and its set of issues.\n\nThe functionality implemented today is behind a flag called `-Z build-std`. This flag indicates that Cargo should compile the standard library from source code using the same profile as the main build itself. Note that for this to work you need to have the source code for the standard library available, and at this time the only supported method of doing so is to add the `rust-src` rust rustup component:\n\n```console\n$ rustup component add rust-src --toolchain nightly\n\n```\n\nIt is also required today that the `-Z build-std` flag is combined with the `--target` flag. Note that you’re not forced to do a cross compilation, you’re just forced to pass `--target` in one form or another.\n\nUsage looks like:\n\n```console\n$ cargo new foo\n$ cd foo\n$ cargo +nightly run -Z build-std --target x86_64-unknown-linux-gnu\n   Compiling core v0.0.0 (...)\n   ...\n   Compiling foo v0.1.0 (...)\n    Finished dev [unoptimized + debuginfo] target(s) in 21.00s\n     Running `target/x86_64-unknown-linux-gnu/debug/foo`\nHello, world!\n\n```\n\nHere we recompiled the standard library in debug mode with debug assertions (like `src/main.rs` is compiled) and everything was linked together at the end.\n\nUsing `-Z build-std` will implicitly compile the stable crates `core`, `std`, `alloc`, and `proc_macro`. If you’re using `cargo test` it will also compile the `test` crate. If you’re working with an environment which does not support some of these crates, then you can pass an argument to `-Zbuild-std` as well:\n\n```console\n$ cargo +nightly build -Z build-std=core,alloc\n\n```\n\nThe value here is a comma-separated list of standard library crates to build.\n\n### [Requirements](#requirements)\n\nAs a summary, a list of requirements today to use `-Z build-std` are:\n\n-   You must install libstd’s source code through `rustup component add rust-src`\n-   You must pass `--target`\n-   You must use both a nightly Cargo and a nightly rustc\n-   The `-Z build-std` flag must be passed to all `cargo` invocations.\n\n### [Reporting bugs and helping out](#reporting-bugs-and-helping-out)\n\nThe `-Z build-std` feature is in the very early stages of development! This feature for Cargo has an extremely long history and is very large in scope, and this is just the beginning. If you’d like to report bugs please either report them to:\n\n-   Cargo — [https://github.com/rust-lang/cargo/issues/new](https://github.com/rust-lang/cargo/issues/new) — for implementation bugs\n-   The tracking repository — [https://github.com/rust-lang/wg-cargo-std-aware/issues/new](https://github.com/rust-lang/wg-cargo-std-aware/issues/new) — for larger design questions.\n\nAlso if you’d like to see a feature that’s not yet implemented and/or if something doesn’t quite work the way you’d like it to, feel free to check out the [issue tracker](https://github.com/rust-lang/wg-cargo-std-aware/issues) of the tracking repository, and if it’s not there please file a new issue!\n\n## [build-std-features](#build-std-features)\n\n-   Tracking Repository: [https://github.com/rust-lang/wg-cargo-std-aware](https://github.com/rust-lang/wg-cargo-std-aware)\n\nThis flag is a sibling to the `-Zbuild-std` feature flag. This will configure the features enabled for the standard library itself when building the standard library. The default enabled features, at this time, are `backtrace` and `panic-unwind`. This flag expects a comma-separated list and, if provided, will override the default list of features enabled.\n\n## [binary-dep-depinfo](#binary-dep-depinfo)\n\n-   Tracking rustc issue: [#63012](https://github.com/rust-lang/rust/issues/63012)\n\nThe `-Z binary-dep-depinfo` flag causes Cargo to forward the same flag to `rustc` which will then cause `rustc` to include the paths of all binary dependencies in the “dep info” file (with the `.d` extension). Cargo then uses that information for change-detection (if any binary dependency changes, then the crate will be rebuilt). The primary use case is for building the compiler itself, which has implicit dependencies on the standard library that would otherwise be untracked for change-detection.\n\n## [panic-abort-tests](#panic-abort-tests)\n\n-   Tracking Issue: [#67650](https://github.com/rust-lang/rust/issues/67650)\n-   Original Pull Request: [#7460](https://github.com/rust-lang/cargo/pull/7460)\n\nThe `-Z panic-abort-tests` flag will enable nightly support to compile test harness crates with `-Cpanic=abort`. Without this flag Cargo will compile tests, and everything they depend on, with `-Cpanic=unwind` because it’s the only way `test`\\-the-crate knows how to operate. As of [rust-lang/rust#64158](https://github.com/rust-lang/rust/pull/64158), however, the `test` crate supports `-C panic=abort` with a test-per-process, and can help avoid compiling crate graphs multiple times.\n\nIt’s currently unclear how this feature will be stabilized in Cargo, but we’d like to stabilize it somehow!\n\n## [config-include](#config-include)\n\n-   Tracking Issue: [#7723](https://github.com/rust-lang/cargo/issues/7723)\n\nThis feature requires the `-Zconfig-include` command-line option.\n\nThe `include` key in a config file can be used to load another config file. It takes a string for a path to another file relative to the config file, or an array of config file paths. Only path ending with `.toml` is accepted.\n\n```toml\n# a path ending with `.toml`\ninclude = \"path/to/mordor.toml\"\n\n# or an array of paths\ninclude = [\"frodo.toml\", \"samwise.toml\"]\n\n```\n\nUnlike other config values, the merge behavior of the `include` key is different. When a config file contains an `include` key:\n\n1.  The config values are first loaded from the `include` path.\n    -   If the value of the `include` key is an array of paths, the config values are loaded and merged from left to right for each path.\n    -   Recurse this step if the config values from the `include` path also contain an `include` key.\n2.  Then, the config file’s own values are merged on top of the config from the `include` path.\n\n## [target-applies-to-host](#target-applies-to-host)\n\n-   Original Pull Request: [#9322](https://github.com/rust-lang/cargo/pull/9322)\n-   Tracking Issue: [#9453](https://github.com/rust-lang/cargo/issues/9453)\n\nHistorically, Cargo’s behavior for whether the `linker` and `rustflags` configuration options from environment variables and [`[target]`](about:blank/reference/config.html#target) are respected for build scripts, plugins, and other artifacts that are _always_ built for the host platform has been somewhat inconsistent. When `--target` is _not_ passed, Cargo respects the same `linker` and `rustflags` for build scripts as for all other compile artifacts. When `--target` _is_ passed, however, Cargo respects `linker` from [`[target.<host triple>]`](about:blank/reference/config.html#targettriplelinker), and does not pick up any `rustflags` configuration. This dual behavior is confusing, but also makes it difficult to correctly configure builds where the host triple and the [target triple](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") happen to be the same, but artifacts intended to run on the build host should still be configured differently.\n\n`-Ztarget-applies-to-host` enables the top-level `target-applies-to-host` setting in Cargo configuration files which allows users to opt into different (and more consistent) behavior for these properties. When `target-applies-to-host` is unset, or set to `true`, in the configuration file, the existing Cargo behavior is preserved (though see `-Zhost-config`, which changes that default). When it is set to `false`, no options from `[target.<host triple>]`, `RUSTFLAGS`, or `[build]` are respected for host artifacts regardless of whether `--target` is passed to Cargo. To customize artifacts intended to be run on the host, use `[host]` ([`host-config`](about:blank/reference/unstable.html#host-config)).\n\nIn the future, `target-applies-to-host` may end up defaulting to `false` to provide more sane and consistent default behavior.\n\n```toml\n# config.toml\ntarget-applies-to-host = false\n\n```\n\n```console\ncargo +nightly -Ztarget-applies-to-host build --target x86_64-unknown-linux-gnu\n\n```\n\n## [host-config](#host-config)\n\n-   Original Pull Request: [#9322](https://github.com/rust-lang/cargo/pull/9322)\n-   Tracking Issue: [#9452](https://github.com/rust-lang/cargo/issues/9452)\n\nThe `host` key in a config file can be used pass flags to host build targets such as build scripts that must run on the host system instead of the target system when cross compiling. It supports both generic and host arch specific tables. Matching host arch tables take precedence over generic host tables.\n\nIt requires the `-Zhost-config` and `-Ztarget-applies-to-host` command-line options to be set, and that `target-applies-to-host = false` is set in the Cargo configuration file.\n\n```toml\n# config.toml\n[host]\nlinker = \"/path/to/host/linker\"\n[host.x86_64-unknown-linux-gnu]\nlinker = \"/path/to/host/arch/linker\"\nrustflags = [\"-Clink-arg=--verbose\"]\n[target.x86_64-unknown-linux-gnu]\nlinker = \"/path/to/target/linker\"\n\n```\n\nThe generic `host` table above will be entirely ignored when building on a `x86_64-unknown-linux-gnu` host as the `host.x86_64-unknown-linux-gnu` table takes precedence.\n\nSetting `-Zhost-config` changes the default for `target-applies-to-host` to `false` from `true`.\n\n```console\ncargo +nightly -Ztarget-applies-to-host -Zhost-config build --target x86_64-unknown-linux-gnu\n\n```\n\n## [unit-graph](#unit-graph)\n\n-   Tracking Issue: [#8002](https://github.com/rust-lang/cargo/issues/8002)\n\nThe `--unit-graph` flag can be passed to any build command (`build`, `check`, `run`, `test`, `bench`, `doc`, etc.) to emit a JSON object to stdout which represents Cargo’s internal unit graph. Nothing is actually built, and the command returns immediately after printing. Each “unit” corresponds to an execution of the compiler. These objects also include which unit each unit depends on.\n\n```\ncargo +nightly build --unit-graph -Z unstable-options\n\n```\n\nThis structure provides a more complete view of the dependency relationship as Cargo sees it. In particular, the “features” field supports the new feature resolver where a dependency can be built multiple times with different features. `cargo metadata` fundamentally cannot represent the relationship of features between different dependency kinds, and features now depend on which command is run and which packages and targets are selected. Additionally it can provide details about intra-package dependencies like build scripts or tests.\n\nThe following is a description of the JSON structure:\n\n```javascript\n{\n  /* Version of the JSON output structure. If any backwards incompatible\n     changes are made, this value will be increased.\n  */\n  \"version\": 1,\n  /* Array of all build units. */\n  \"units\": [\n    {\n      /* An opaque string which indicates the package.\n         Information about the package can be obtained from `cargo metadata`.\n      */\n      \"pkg_id\": \"my-package 0.1.0 (path+file:///path/to/my-package)\",\n      /* The Cargo target. See the `cargo metadata` documentation for more\n         information about these fields.\n         https://doc.rust-lang.org/cargo/commands/cargo-metadata.html\n      */\n      \"target\": {\n        \"kind\": [\"lib\"],\n        \"crate_types\": [\"lib\"],\n        \"name\": \"my_package\",\n        \"src_path\": \"/path/to/my-package/src/lib.rs\",\n        \"edition\": \"2018\",\n        \"test\": true,\n        \"doctest\": true\n      },\n      /* The profile settings for this unit.\n         These values may not match the profile defined in the manifest.\n         Units can use modified profile settings. For example, the \"panic\"\n         setting can be overridden for tests to force it to \"unwind\".\n      */\n      \"profile\": {\n        /* The profile name these settings are derived from. */\n        \"name\": \"dev\",\n        /* The optimization level as a string. */\n        \"opt_level\": \"0\",\n        /* The LTO setting as a string. */\n        \"lto\": \"false\",\n        /* The codegen units as an integer.\n           `null` if it should use the compiler's default.\n        */\n        \"codegen_units\": null,\n        /* The debug information level as an integer.\n           `null` if it should use the compiler's default (0).\n        */\n        \"debuginfo\": 2,\n        /* Whether or not debug-assertions are enabled. */\n        \"debug_assertions\": true,\n        /* Whether or not overflow-checks are enabled. */\n        \"overflow_checks\": true,\n        /* Whether or not rpath is enabled. */\n        \"rpath\": false,\n        /* Whether or not incremental is enabled. */\n        \"incremental\": true,\n        /* The panic strategy, \"unwind\" or \"abort\". */\n        \"panic\": \"unwind\"\n      },\n      /* Which platform this target is being built for.\n         A value of `null` indicates it is for the host.\n         Otherwise it is a string of the target triple (such as\n         \"x86_64-unknown-linux-gnu\").\n      */\n      \"platform\": null,\n      /* The \"mode\" for this unit. Valid values:\n\n         * \"test\" --- Build using `rustc` as a test.\n         * \"build\" --- Build using `rustc`.\n         * \"check\" --- Build using `rustc` in \"check\" mode.\n         * \"doc\" --- Build using `rustdoc`.\n         * \"doctest\" --- Test using `rustdoc`.\n         * \"run-custom-build\" --- Represents the execution of a build script.\n      */\n      \"mode\": \"build\",\n      /* Array of features enabled on this unit as strings. */\n      \"features\": [\"somefeat\"],\n      /* Whether or not this is a standard-library unit,\n         part of the unstable build-std feature.\n         If not set, treat as `false`.\n      */\n      \"is_std\": false,\n      /* Array of dependencies of this unit. */\n      \"dependencies\": [\n        {\n          /* Index in the \"units\" array for the dependency. */\n          \"index\": 1,\n          /* The name that this dependency will be referred as. */\n          \"extern_crate_name\": \"unicode_xid\",\n          /* Whether or not this dependency is \"public\",\n             part of the unstable public-dependency feature.\n             If not set, the public-dependency feature is not enabled.\n          */\n          \"public\": false,\n          /* Whether or not this dependency is injected into the prelude,\n             currently used by the build-std feature.\n             If not set, treat as `false`.\n          */\n          \"noprelude\": false\n        }\n      ]\n    },\n    // ...\n  ],\n  /* Array of indices in the \"units\" array that are the \"roots\" of the\n     dependency graph.\n  */\n  \"roots\": [0],\n}\n\n```\n\n## [Profile `rustflags` option](#profile-rustflags-option)\n\n-   Original Issue: [rust-lang/cargo#7878](https://github.com/rust-lang/cargo/issues/7878)\n-   Tracking Issue: [rust-lang/cargo#10271](https://github.com/rust-lang/cargo/issues/10271)\n\nThis feature provides a new option in the `[profile]` section to specify flags that are passed directly to rustc. This can be enabled like so:\n\n```toml\ncargo-features = [\"profile-rustflags\"]\n\n[package]\n# ...\n\n[profile.release]\nrustflags = [ \"-C\", \"...\" ]\n\n```\n\nTo set this in a profile in Cargo configuration, you need to use either `-Z profile-rustflags` or `[unstable]` table to enable it. For example,\n\n```toml\n# .cargo/config.toml\n[unstable]\nprofile-rustflags = true\n\n[profile.release]\nrustflags = [ \"-C\", \"...\" ]\n\n```\n\n## [rustdoc-map](#rustdoc-map)\n\n-   Tracking Issue: [#8296](https://github.com/rust-lang/cargo/issues/8296)\n\nThis feature adds configuration settings that are passed to `rustdoc` so that it can generate links to dependencies whose documentation is hosted elsewhere when the dependency is not documented. First, add this to `.cargo/config`:\n\n```toml\n[doc.extern-map.registries]\ncrates-io = \"https://docs.rs/\"\n\n```\n\nThen, when building documentation, use the following flags to cause links to dependencies to link to [docs.rs](https://docs.rs/):\n\n```\ncargo +nightly doc --no-deps -Zrustdoc-map\n\n```\n\nThe `registries` table contains a mapping of registry name to the URL to link to. The URL may have the markers `{pkg_name}` and `{version}` which will get replaced with the corresponding values. If neither are specified, then Cargo defaults to appending `{pkg_name}/{version}/` to the end of the URL.\n\nAnother config setting is available to redirect standard library links. By default, rustdoc creates links to [https://doc.rust-lang.org/nightly/](https://doc.rust-lang.org/nightly/). To change this behavior, use the `doc.extern-map.std` setting:\n\n```toml\n[doc.extern-map]\nstd = \"local\"\n\n```\n\nA value of `\"local\"` means to link to the documentation found in the `rustc` sysroot. If you are using rustup, this documentation can be installed with `rustup component add rust-docs`.\n\nThe default value is `\"remote\"`.\n\nThe value may also take a URL for a custom location.\n\n## [per-package-target](#per-package-target)\n\n-   Tracking Issue: [#9406](https://github.com/rust-lang/cargo/pull/9406)\n-   Original Pull Request: [#9030](https://github.com/rust-lang/cargo/pull/9030)\n-   Original Issue: [#7004](https://github.com/rust-lang/cargo/pull/7004)\n\nThe `per-package-target` feature adds two keys to the manifest: `package.default-target` and `package.forced-target`. The first makes the package be compiled by default (ie. when no `--target` argument is passed) for some target. The second one makes the package always be compiled for the target.\n\nExample:\n\n```toml\n[package]\nforced-target = \"wasm32-unknown-unknown\"\n\n```\n\nIn this example, the crate is always built for `wasm32-unknown-unknown`, for instance because it is going to be used as a plugin for a main program that runs on the host (or provided on the command line) target.\n\n## [artifact-dependencies](#artifact-dependencies)\n\n-   Tracking Issue: [#9096](https://github.com/rust-lang/cargo/pull/9096)\n-   Original Pull Request: [#9992](https://github.com/rust-lang/cargo/pull/9992)\n\nArtifact dependencies allow Cargo packages to depend on `bin`, `cdylib`, and `staticlib` crates, and use the artifacts built by those crates at compile time.\n\nRun `cargo` with `-Z bindeps` to enable this functionality.\n\n### [artifact-dependencies: Dependency declarations](#artifact-dependencies-dependency-declarations)\n\nArtifact-dependencies adds the following keys to a dependency declaration in `Cargo.toml`:\n\n-   `artifact` — This specifies the [Cargo Target](reference/cargo-targets.html) to build. Normally without this field, Cargo will only build the `[lib]` target from a dependency. This field allows specifying which target will be built, and made available as a binary at build time:\n    \n    -   `\"bin\"` — Compiled executable binaries, corresponding to all of the `[[bin]]` sections in the dependency’s manifest.\n    -   `\"bin:<bin-name>\"` — Compiled executable binary, corresponding to a specific binary target specified by the given `<bin-name>`.\n    -   `\"cdylib\"` — A C-compatible dynamic library, corresponding to a `[lib]` section with `crate-type = [\"cdylib\"]` in the dependency’s manifest.\n    -   `\"staticlib\"` — A C-compatible static library, corresponding to a `[lib]` section with `crate-type = [\"staticlib\"]` in the dependency’s manifest.\n    \n    The `artifact` value can be a string, or it can be an array of strings to specify multiple targets.\n    \n    Example:\n    \n    ```toml\n    [dependencies]\n    bar = { version = \"1.0\", artifact = \"staticlib\" }\n    zoo = { version = \"1.0\", artifact = [\"bin:cat\", \"bin:dog\"]}\n    \n    ```\n    \n-   `lib` — This is a Boolean value which indicates whether or not to also build the dependency’s library as a normal Rust `lib` dependency. This field can only be specified when `artifact` is specified.\n    \n    The default for this field is `false` when `artifact` is specified. If this is set to `true`, then the dependency’s `[lib]` target will also be built for the platform target the declaring package is being built for. This allows the package to use the dependency from Rust code like a normal dependency in addition to an artifact dependency.\n    \n    Example:\n    \n    ```toml\n    [dependencies]\n    bar = { version = \"1.0\", artifact = \"bin\", lib = true }\n    \n    ```\n    \n-   `target` — The platform target to build the dependency for. This field can only be specified when `artifact` is specified.\n    \n    The default if this is not specified depends on the dependency kind. For build dependencies, it will be built for the host target. For all other dependencies, it will be built for the same targets the declaring package is built for.\n    \n    For a build dependency, this can also take the special value of `\"target\"` which means to build the dependency for the same targets that the package is being built for.\n    \n    ```toml\n    [build-dependencies]\n    bar = { version = \"1.0\", artifact = \"cdylib\", target = \"wasm32-unknown-unknown\"}\n    same-target = { version = \"1.0\", artifact = \"bin\", target = \"target\" }\n    \n    ```\n    \n\n### [artifact-dependencies: Environment variables](#artifact-dependencies-environment-variables)\n\nAfter building an artifact dependency, Cargo provides the following environment variables that you can use to access the artifact:\n\n-   `CARGO_<ARTIFACT-TYPE>_DIR_<DEP>` — This is the directory containing all the artifacts from the dependency.\n    \n    `<ARTIFACT-TYPE>` is the `artifact` specified for the dependency (uppercased as in `CDYLIB`, `STATICLIB`, or `BIN`) and `<DEP>` is the name of the dependency. As with other Cargo environment variables, dependency names are converted to uppercase, with dashes replaced by underscores.\n    \n    If your manifest renames the dependency, `<DEP>` corresponds to the name you specify, not the original package name.\n    \n-   `CARGO_<ARTIFACT-TYPE>_FILE_<DEP>_<NAME>` — This is the full path to the artifact.\n    \n    `<ARTIFACT-TYPE>` is the `artifact` specified for the dependency (uppercased as above), `<DEP>` is the name of the dependency (transformed as above), and `<NAME>` is the name of the artifact from the dependency.\n    \n    Note that `<NAME>` is not modified in any way from the `name` specified in the crate supplying the artifact, or the crate name if not specified; for instance, it may be in lowercase, or contain dashes.\n    \n    For convenience, if the artifact name matches the original package name, cargo additionally supplies a copy of this variable with the `_<NAME>` suffix omitted. For instance, if the `cmake` crate supplies a binary named `cmake`, Cargo supplies both `CARGO_BIN_FILE_CMAKE` and `CARGO_BIN_FILE_CMAKE_cmake`.\n    \n\nFor each kind of dependency, these variables are supplied to the same part of the build process that has access to that kind of dependency:\n\n-   For build-dependencies, these variables are supplied to the `build.rs` script, and can be accessed using [`std::env::var_os`](https://doc.rust-lang.org/std/env/fn.var_os.html). (As with any OS file path, these may or may not be valid UTF-8.)\n-   For normal dependencies, these variables are supplied during the compilation of the crate, and can be accessed using the [`env!`](https://doc.rust-lang.org/std/macro.env.html) macro.\n-   For dev-dependencies, these variables are supplied during the compilation of examples, tests, and benchmarks, and can be accessed using the [`env!`](https://doc.rust-lang.org/std/macro.env.html) macro.\n\n### [artifact-dependencies: Examples](#artifact-dependencies-examples)\n\n#### [Example: use a binary executable from a build script](#example-use-a-binary-executable-from-a-build-script)\n\nIn the `Cargo.toml` file, you can specify a dependency on a binary to make available for a build script:\n\n```toml\n[build-dependencies]\nsome-build-tool = { version = \"1.0\", artifact = \"bin\" }\n\n```\n\nThen inside the build script, the binary can be executed at build time:\n\n```rust\nfn main() {\n    let build_tool = std::env::var_os(\"CARGO_BIN_FILE_SOME_BUILD_TOOL\").unwrap();\n    let status = std::process::Command::new(build_tool)\n        .arg(\"do-stuff\")\n        .status()\n        .unwrap();\n    if !status.success() {\n        eprintln!(\"failed!\");\n        std::process::exit(1);\n    }\n}\n```\n\n#### [Example: use _cdylib_ artifact in build script](#example-use-cdylib-artifact-in-build-script)\n\nThe `Cargo.toml` in the consuming package, building the `bar` library as `cdylib` for a specific build target…\n\n```toml\n[build-dependencies]\nbar = { artifact = \"cdylib\", version = \"1.0\", target = \"wasm32-unknown-unknown\" }\n\n```\n\n…along with the build script in `build.rs`.\n\n```rust\nfn main() {\n    wasm::run_file(std::env::var(\"CARGO_CDYLIB_FILE_BAR\").unwrap());\n}\n```\n\n#### [Example: use _binary_ artifact and its library in a binary](#example-use-binary-artifact-and-its-library-in-a-binary)\n\nThe `Cargo.toml` in the consuming package, building the `bar` binary for inclusion as artifact while making it available as library as well…\n\n```toml\n[dependencies]\nbar = { artifact = \"bin\", version = \"1.0\", lib = true }\n\n```\n\n…along with the executable using `main.rs`.\n\n```rust\nfn main() {\n    bar::init();\n    command::run(env!(\"CARGO_BIN_FILE_BAR\"));\n}\n```\n\n## [publish-timeout](#publish-timeout)\n\n-   Tracking Issue: [11222](https://github.com/rust-lang/cargo/issues/11222)\n\nThe `publish.timeout` key in a config file can be used to control how long `cargo publish` waits between posting a package to the registry and it being available in the local index.\n\nA timeout of `0` prevents any checks from occurring. The current default is `60` seconds.\n\nIt requires the `-Zpublish-timeout` command-line options to be set.\n\n```toml\n# config.toml\n[publish]\ntimeout = 300  # in seconds\n\n```\n\n## [asymmetric-token](#asymmetric-token)\n\n-   Tracking Issue: [10519](https://github.com/rust-lang/cargo/issues/10519)\n-   RFC: [#3231](https://github.com/rust-lang/rfcs/pull/3231)\n\nThe `-Z asymmetric-token` flag enables the `cargo:paseto` credential provider which allows Cargo to authenticate to registries without sending secrets over the network.\n\nIn [`config.toml`](reference/config.html) and `credentials.toml` files there is a field called `private-key`, which is a private key formatted in the secret [subset of `PASERK`](https://github.com/paseto-standard/paserk/blob/master/types/secret.md) and is used to sign asymmetric tokens\n\nA keypair can be generated with `cargo login --generate-keypair` which will:\n\n-   generate a public/private keypair in the currently recommended fashion.\n-   save the private key in `credentials.toml`.\n-   print the public key in [PASERK public](https://github.com/paseto-standard/paserk/blob/master/types/public.md) format.\n\nIt is recommended that the `private-key` be saved in `credentials.toml`. It is also supported in `config.toml`, primarily so that it can be set using the associated environment variable, which is the recommended way to provide it in CI contexts. This setup is what we have for the `token` field for setting a secret token.\n\nThere is also an optional field called `private-key-subject` which is a string chosen by the registry. This string will be included as part of an asymmetric token and should not be secret. It is intended for the rare use cases like “cryptographic proof that the central CA server authorized this action”. Cargo requires it to be non-whitespace printable ASCII. Registries that need non-ASCII data should base64 encode it.\n\nBoth fields can be set with `cargo login --registry=name --private-key --private-key-subject=\"subject\"` which will prompt you to put in the key value.\n\nA registry can have at most one of `private-key` or `token` set.\n\nAll PASETOs will include `iat`, the current time in ISO 8601 format. Cargo will include the following where appropriate:\n\n-   `sub` an optional, non-secret string chosen by the registry that is expected to be claimed with every request. The value will be the `private-key-subject` from the `config.toml` file.\n-   `mutation` if present, indicates that this request is a mutating operation (or a read-only operation if not present), must be one of the strings `publish`, `yank`, or `unyank`.\n    -   `name` name of the crate related to this request.\n    -   `vers` version string of the crate related to this request.\n    -   `cksum` the SHA256 hash of the crate contents, as a string of 64 lowercase hexadecimal digits, must be present only when `mutation` is equal to `publish`\n-   `challenge` the challenge string received from a 401/403 from this server this session. Registries that issue challenges must track which challenges have been issued/used and never accept a given challenge more than once within the same validity period (avoiding the need to track every challenge ever issued).\n\nThe “footer” (which is part of the signature) will be a JSON string in UTF-8 and include:\n\n-   `url` the RFC 3986 compliant URL where cargo got the config.json file,\n    -   If this is a registry with an HTTP index, then this is the base URL that all index queries are relative to.\n    -   If this is a registry with a GIT index, it is the URL Cargo used to clone the index.\n-   `kid` the identifier of the private key used to sign the request, using the [PASERK IDs](https://github.com/paseto-standard/paserk/blob/master/operations/ID.md) standard.\n\nPASETO includes the message that was signed, so the server does not have to reconstruct the exact string from the request in order to check the signature. The server does need to check that the signature is valid for the string in the PASETO and that the contents of that string matches the request. If a claim should be expected for the request but is missing in the PASETO then the request must be rejected.\n\n## [`cargo config`](#cargo-config)\n\n-   Original Issue: [#2362](https://github.com/rust-lang/cargo/issues/2362)\n-   Tracking Issue: [#9301](https://github.com/rust-lang/cargo/issues/9301)\n\nThe `cargo config` subcommand provides a way to display the configuration files that cargo loads. It currently includes the `get` subcommand which can take an optional config value to display.\n\n```console\ncargo +nightly -Zunstable-options config get build.rustflags\n\n```\n\nIf no config value is included, it will display all config values. See the `--help` output for more options available.\n\n## [rustc `--print`](#rustc---print)\n\n-   Tracking Issue: [#9357](https://github.com/rust-lang/cargo/issues/9357)\n\n`cargo rustc --print=VAL` forwards the `--print` flag to `rustc` in order to extract information from `rustc`. This runs `rustc` with the corresponding [`--print`](https://doc.rust-lang.org/rustc/command-line-arguments.html#--print-print-compiler-information) flag, and then immediately exits without compiling. Exposing this as a cargo flag allows cargo to inject the correct target and RUSTFLAGS based on the current configuration.\n\nThe primary use case is to run `cargo rustc --print=cfg` to get config values for the appropriate target and influenced by any other RUSTFLAGS.\n\n## [Different binary name](#different-binary-name)\n\n-   Tracking Issue: [#9778](https://github.com/rust-lang/cargo/issues/9778)\n-   PR: [#9627](https://github.com/rust-lang/cargo/pull/9627)\n\nThe `different-binary-name` feature allows setting the filename of the binary without having to obey the restrictions placed on crate names. For example, the crate name must use only `alphanumeric` characters or `-` or `_`, and cannot be empty.\n\nThe `filename` parameter should **not** include the binary extension, `cargo` will figure out the appropriate extension and use that for the binary on its own.\n\nThe `filename` parameter is only available in the `[[bin]]` section of the manifest.\n\n```toml\ncargo-features = [\"different-binary-name\"]\n\n[package]\nname =  \"foo\"\nversion = \"0.0.1\"\n\n[[bin]]\nname = \"foo\"\nfilename = \"007bar\"\npath = \"src/main.rs\"\n\n```\n\n## [scrape-examples](#scrape-examples)\n\n-   RFC: [#3123](https://github.com/rust-lang/rfcs/pull/3123)\n-   Tracking Issue: [#9910](https://github.com/rust-lang/cargo/issues/9910)\n\nThe `-Z rustdoc-scrape-examples` flag tells Rustdoc to search crates in the current workspace for calls to functions. Those call-sites are then included as documentation. You can use the flag like this:\n\n```\ncargo doc -Z unstable-options -Z rustdoc-scrape-examples\n\n```\n\nBy default, Cargo will scrape examples from the example targets of packages being documented. You can individually enable or disable targets from being scraped with the `doc-scrape-examples` flag, such as:\n\n```toml\n# Enable scraping examples from a library\n[lib]\ndoc-scrape-examples = true\n\n# Disable scraping examples from an example target\n[[example]]\nname = \"my-example\"\ndoc-scrape-examples = false\n\n```\n\n**Note on tests:** enabling `doc-scrape-examples` on test targets will not currently have any effect. Scraping examples from tests is a work-in-progress.\n\n**Note on dev-dependencies:** documenting a library does not normally require the crate’s dev-dependencies. However, example targets require dev-deps. For backwards compatibility, `-Z rustdoc-scrape-examples` will _not_ introduce a dev-deps requirement for `cargo doc`. Therefore examples will _not_ be scraped from example targets under the following conditions:\n\n1.  No target being documented requires dev-deps, AND\n2.  At least one crate with targets being documented has dev-deps, AND\n3.  The `doc-scrape-examples` parameter is unset or false for all `[[example]]` targets.\n\nIf you want examples to be scraped from example targets, then you must not satisfy one of the above conditions. For example, you can set `doc-scrape-examples` to true for one example target, and that signals to Cargo that you are ok with dev-deps being build for `cargo doc`.\n\n## [output-format for rustdoc](#output-format-for-rustdoc)\n\n-   Tracking Issue: [#13283](https://github.com/rust-lang/cargo/issues/13283)\n\nThis flag determines the output format of `cargo rustdoc`, accepting `html` or `json`, providing tools with a way to lean on [rustdoc’s experimental JSON format](https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc_json_types/).\n\nYou can use the flag like this:\n\n```\ncargo rustdoc -Z unstable-options --output-format json\n\n```\n\n## [codegen-backend](#codegen-backend)\n\nThe `codegen-backend` feature makes it possible to select the codegen backend used by rustc using a profile.\n\nExample:\n\n```toml\n[package]\nname = \"foo\"\n\n[dependencies]\nserde = \"1.0.117\"\n\n[profile.dev.package.foo]\ncodegen-backend = \"cranelift\"\n\n```\n\nTo set this in a profile in Cargo configuration, you need to use either `-Z codegen-backend` or `[unstable]` table to enable it. For example,\n\n```toml\n# .cargo/config.toml\n[unstable]\ncodegen-backend = true\n\n[profile.dev.package.foo]\ncodegen-backend = \"cranelift\"\n\n```\n\n## [gitoxide](#gitoxide)\n\n-   Tracking Issue: [#11813](https://github.com/rust-lang/cargo/issues/11813)\n\nWith the ‘gitoxide’ unstable feature, all or the specified git operations will be performed by the `gitoxide` crate instead of `git2`.\n\nWhile `-Zgitoxide` enables all currently implemented features, one can individually select git operations to run with `gitoxide` with the `-Zgitoxide=operation[,operationN]` syntax.\n\nValid operations are the following:\n\n-   `fetch` - All fetches are done with `gitoxide`, which includes git dependencies as well as the crates index.\n-   `checkout` _(planned)_ - checkout the worktree, with support for filters and submodules.\n\n## [git](#git)\n\n-   Tracking Issue: [#13285](https://github.com/rust-lang/cargo/issues/13285)\n\nWith the ‘git’ unstable feature, both `gitoxide` and `git2` will perform shallow fetches of the crate index and git dependencies.\n\nWhile `-Zgit` enables all currently implemented features, one can individually select when to perform shallow fetches with the `-Zgit=operation[,operationN]` syntax.\n\nValid operations are the following:\n\n-   `shallow-index` - perform a shallow clone of the index.\n-   `shallow-deps` - perform a shallow clone of git dependencies.\n\n**Details on shallow clones**\n\n-   To enable shallow clones, add `-Zgit=shallow-deps` for fetching git dependencies or `-Zgit=shallow-index` for fetching registry index.\n-   Shallow-cloned and shallow-checked-out git repositories reside at their own `-shallow` suffixed directories, i.e,\n    -   `~/.cargo/registry/index/*-shallow`\n    -   `~/.cargo/git/db/*-shallow`\n    -   `~/.cargo/git/checkouts/*-shallow`\n-   When the unstable feature is on, fetching/cloning a git repository is always a shallow fetch. This roughly equals to `git fetch --depth 1` everywhere.\n-   Even with the presence of `Cargo.lock` or specifying a commit `{ rev = \"…\" }`, gitoxide and libgit2 are still smart enough to shallow fetch without unshallowing the existing repository.\n\n## [script](#script)\n\n-   Tracking Issue: [#12207](https://github.com/rust-lang/cargo/issues/12207)\n\nCargo can directly run `.rs` files as:\n\n```console\n$ cargo +nightly -Zscript file.rs\n\n```\n\nwhere `file.rs` can be as simple as:\n\n```rust\nfn main() {}\n```\n\nA user may optionally specify a manifest in a `cargo` code fence in a module-level comment, like:\n\n```rust\n#!/usr/bin/env -S cargo +nightly -Zscript\n---cargo\n[dependencies]\nclap = { version = \"4.2\", features = [\"derive\"] }\n---\n\nuse clap::Parser;\n\n#[derive(Parser, Debug)]\n#[clap(version)]\nstruct Args {\n    #[clap(short, long, help = \"Path to config\")]\n    config: Option<std::path::PathBuf>,\n}\n\nfn main() {\n    let args = Args::parse();\n    println!(\"{:?}\", args);\n}\n```\n\n### [Single-file packages](#single-file-packages)\n\nIn addition to today’s multi-file packages (`Cargo.toml` file with other `.rs` files), we are adding the concept of single-file packages which may contain an embedded manifest. There is no required distinguishment for a single-file `.rs` package from any other `.rs` file.\n\nSingle-file packages may be selected via `--manifest-path`, like `cargo test --manifest-path foo.rs`. Unlike `Cargo.toml`, these files cannot be auto-discovered.\n\nA single-file package may contain an embedded manifest. An embedded manifest is stored using `TOML` in rust “frontmatter”, a markdown code-fence with `cargo` at the start of the infostring at the top of the file.\n\nInferred / defaulted manifest fields:\n\n-   `package.name = <slugified file stem>`\n-   `package.edition = <current>` to avoid always having to add an embedded manifest at the cost of potentially breaking scripts on rust upgrades\n    -   Warn when `edition` is unspecified to raise awareness of this\n\nDisallowed manifest fields:\n\n-   `[workspace]`, `[lib]`, `[[bin]]`, `[[example]]`, `[[test]]`, `[[bench]]`\n-   `package.workspace`, `package.build`, `package.links`, `package.autobins`, `package.autoexamples`, `package.autotests`, `package.autobenches`\n\nThe default `CARGO_TARGET_DIR` for single-file packages is at `$CARGO_HOME/target/<hash>`:\n\n-   Avoid conflicts from multiple single-file packages being in the same directory\n-   Avoid problems with the single-file package’s parent directory being read-only\n-   Avoid cluttering the user’s directory\n\nThe lockfile for single-file packages will be placed in `CARGO_TARGET_DIR`. In the future, when workspaces are supported, that will allow a user to have a persistent lockfile.\n\n### [Manifest-commands](#manifest-commands)\n\nYou may pass a manifest directly to the `cargo` command, without a subcommand, like `foo/Cargo.toml` or a single-file package like `foo.rs`. This is mostly intended for being put in `#!` lines.\n\nThe precedence for how to interpret `cargo <subcommand>` is\n\n1.  Built-in xor single-file packages\n2.  Aliases\n3.  External subcommands\n\nA parameter is identified as a manifest-command if it has one of:\n\n-   Path separators\n-   A `.rs` extension\n-   The file name is `Cargo.toml`\n\nDifferences between `cargo run --manifest-path <path>` and `cargo <path>`\n\n-   `cargo <path>` runs with the config for `<path>` and not the current dir, more like `cargo install --path <path>`\n-   `cargo <path>` is at a verbosity level below the normal default. Pass `-v` to get normal output.\n\n### [Documentation Updates](#documentation-updates)\n\n## [Edition 2024](#edition-2024)\n\n-   Tracking Issue: (none created yet)\n-   RFC: [rust-lang/rfcs#3501](https://github.com/rust-lang/rfcs/pull/3501)\n\nSupport for the 2024 [edition](reference/../../edition-guide/index.html) can be enabled by adding the `edition2024` unstable feature to the top of `Cargo.toml`:\n\n```toml\ncargo-features = [\"edition2024\"]\n\n[package]\nname = \"my-package\"\nversion = \"0.1.0\"\nedition = \"2024\"\n\n```\n\nIf you want to transition an existing project from a previous edition, then `cargo fix --edition` can be used on the nightly channel. After running `cargo fix`, you can switch the edition to 2024 as illustrated above.\n\nThis feature is very unstable, and is only intended for early testing and experimentation. Future nightly releases may introduce changes for the 2024 edition that may break your build.\n\n## [Profile `trim-paths` option](#profile-trim-paths-option)\n\n-   Tracking Issue: [rust-lang/cargo#12137](https://github.com/rust-lang/cargo/issues/12137)\n-   Tracking Rustc Issue: [rust-lang/rust#111540](https://github.com/rust-lang/rust/issues/111540)\n\nThis adds a new profile setting to control how paths are sanitized in the resulting binary. This can be enabled like so:\n\n```toml\ncargo-features = [\"trim-paths\"]\n\n[package]\n# ...\n\n[profile.release]\ntrim-paths = [\"diagnostics\", \"object\"]\n\n```\n\nTo set this in a profile in Cargo configuration, you need to use either `-Z trim-paths` or `[unstable]` table to enable it. For example,\n\n```toml\n# .cargo/config.toml\n[unstable]\ntrim-paths = true\n\n[profile.release]\ntrim-paths = [\"diagnostics\", \"object\"]\n\n```\n\n### [Documentation updates](#documentation-updates-1)\n\n#### [trim-paths](#trim-paths)\n\n_as a new [“Profiles settings” entry](about:blank/reference/profiles.html#profile-settings)_\n\n`trim-paths` is a profile setting which enables and controls the sanitization of file paths in build outputs. It takes the following values:\n\n-   `\"none\"` and `false` — disable path sanitization\n-   `\"macro\"` — sanitize paths in the expansion of `std::file!()` macro. This is where paths in embedded panic messages come from\n-   `\"diagnostics\"` — sanitize paths in printed compiler diagnostics\n-   `\"object\"` — sanitize paths in compiled executables or libraries\n-   `\"all\"` and `true` — sanitize paths in all possible locations\n\nIt also takes an array with the combinations of `\"macro\"`, `\"diagnostics\"`, and `\"object\"`.\n\nIt is defaulted to `none` for the `dev` profile, and `object` for the `release` profile. You can manually override it by specifying this option in `Cargo.toml`:\n\n```toml\n[profile.dev]\ntrim-paths = \"all\"\n\n[profile.release]\ntrim-paths = [\"object\", \"diagnostics\"]\n\n```\n\nThe default `release` profile setting (`object`) sanitizes only the paths in emitted executable or library files. It always affects paths from macros such as panic messages, and in debug information only if they will be embedded together with the binary (the default on platforms with ELF binaries, such as Linux and windows-gnu), but will not touch them if they are in separate files (the default on Windows MSVC and macOS). But the paths to these separate files are sanitized.\n\nIf `trim-paths` is not `none` or `false`, then the following paths are sanitized if they appear in a selected scope:\n\n1.  Path to the source files of the standard and core library (sysroot) will begin with `/rustc/[rustc commit hash]`, e.g. `/home/username/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs` -> `/rustc/fe72845f7bb6a77b9e671e6a4f32fe714962cec4/library/core/src/result.rs`\n2.  Path to the current package will be stripped, relatively to the current workspace root, e.g. `/home/username/crate/src/lib.rs` -> `src/lib.rs`.\n3.  Path to dependency packages will be replaced with `[package name]-[version]`. E.g. `/home/username/deps/foo/src/lib.rs` -> `foo-0.1.0/src/lib.rs`\n\nWhen a path to the source files of the standard and core library is _not_ in scope for sanitization, the emitted path will depend on if `rust-src` component is present. If it is, then some paths will point to the copy of the source files on your file system; if it isn’t, then they will show up as `/rustc/[rustc commit hash]/library/...` (just like when it is selected for sanitization). Paths to all other source files will not be affected.\n\nThis will not affect any hard-coded paths in the source code, such as in strings.\n\n#### [Environment variable](#environment-variable)\n\n_as a new entry of [“Environment variables Cargo sets for build scripts”](about:blank/reference/environment-variables.html#environment-variables-cargo-sets-for-crates)_\n\n-   `CARGO_TRIM_PATHS` — The value of `trim-paths` profile option. `false`, `\"none\"`, and empty arrays would be converted to `none`. `true` and `\"all\"` become `all`. Values in a non-empty array would be joined into a comma-separated list. If the build script introduces absolute paths to built artifacts (such as by invoking a compiler), the user may request them to be sanitized in different types of artifacts. Common paths requiring sanitization include `OUT_DIR` and `CARGO_MANIFEST_DIR`, plus any other introduced by the build script, such as include directories.\n\n## [gc](#gc)\n\n-   Tracking Issue: [#12633](https://github.com/rust-lang/cargo/issues/12633)\n\nThe `-Zgc` flag enables garbage-collection within cargo’s global cache within the cargo home directory. This includes downloaded dependencies such as compressed `.crate` files, extracted `src` directories, registry index caches, and git dependencies. When `-Zgc` is present, cargo will track the last time any index and dependency was used, and then uses those timestamps to manually or automatically delete cache entries that have not been used for a while.\n\n```sh\ncargo build -Zgc\n\n```\n\n### [Automatic garbage collection](#automatic-garbage-collection)\n\nAutomatic deletion happens on commands that are already doing a significant amount of work, such as all of the build commands (`cargo build`, `cargo test`, `cargo check`, etc.), and `cargo fetch`. The deletion happens just after resolution and packages have been downloaded. Automatic deletion is only done once per day (see `gc.auto.frequency` to configure). Automatic deletion is disabled if cargo is offline such as with `--offline` or `--frozen` to avoid deleting artifacts that may need to be used if you are offline for a long period of time.\n\n#### [Automatic gc configuration](#automatic-gc-configuration)\n\nThe automatic gc behavior can be specified via a cargo configuration setting. The settings available are:\n\n```toml\n# Example config.toml file.\n\n# This table defines the behavior for automatic garbage collection.\n[gc.auto]\n# The maximum frequency that automatic garbage collection happens.\n# Can be \"never\" to disable automatic-gc, or \"always\" to run on every command.\nfrequency = \"1 day\"\n# Anything older than this duration will be deleted in the source cache.\nmax-src-age = \"1 month\"\n# Anything older than this duration will be deleted in the compressed crate cache.\nmax-crate-age = \"3 months\"\n# Any index older than this duration will be deleted from the index cache.\nmax-index-age = \"3 months\"\n# Any git checkout older than this duration will be deleted from the checkout cache.\nmax-git-co-age = \"1 month\"\n# Any git clone older than this duration will be deleted from the git cache.\nmax-git-db-age = \"3 months\"\n\n```\n\n### [Manual garbage collection with `cargo clean`](#manual-garbage-collection-with-cargo-clean)\n\nManual deletion can be done with the `cargo clean gc` command. Deletion of cache contents can be performed by passing one of the cache options:\n\n-   `--max-src-age=DURATION` — Deletes source cache files that have not been used since the given age.\n-   `--max-crate-age=DURATION` — Deletes crate cache files that have not been used since the given age.\n-   `--max-index-age=DURATION` — Deletes registry indexes that have not been used since then given age (including their `.crate` and `src` files).\n-   `--max-git-co-age=DURATION` — Deletes git dependency checkouts that have not been used since then given age.\n-   `--max-git-db-age=DURATION` — Deletes git dependency clones that have not been used since then given age.\n-   `--max-download-age=DURATION` — Deletes any downloaded cache data that has not been used since then given age.\n-   `--max-src-size=SIZE` — Deletes the oldest source cache files until the cache is under the given size.\n-   `--max-crate-size=SIZE` — Deletes the oldest crate cache files until the cache is under the given size.\n-   `--max-git-size=SIZE` — Deletes the oldest git dependency caches until the cache is under the given size.\n-   `--max-download-size=SIZE` — Deletes the oldest downloaded cache data until the cache is under the given size.\n\nA DURATION is specified in the form “N seconds/minutes/days/weeks/months” where N is an integer.\n\nA SIZE is specified in the form “N _suffix_” where _suffix_ is B, kB, MB, GB, kiB, MiB, or GiB, and N is an integer or floating point number. If no suffix is specified, the number is the number of bytes.\n\n```sh\ncargo clean gc\ncargo clean gc --max-download-age=1week\ncargo clean gc --max-git-size=0 --max-download-size=100MB\n\n```\n\n## [open-namespaces](#open-namespaces)\n\n-   Tracking Issue: [#13576](https://github.com/rust-lang/cargo/issues/13576)\n\nAllow multiple packages to participate in the same API namespace\n\nThis can be enabled like so:\n\n```toml\ncargo-features = [\"open-namespaces\"]\n\n[package]\n# ...\n\n```\n\n## [`[lints.cargo]`](#lintscargo)\n\n-   Tracking Issue: [#12235](https://github.com/rust-lang/cargo/issues/12235)\n\nA new `lints` tool table for `cargo` that can be used to configure lints emitted by `cargo` itself when `-Zcargo-lints` is used\n\n```toml\n[lints.cargo]\nimplicit-features = \"warn\"\n\n```\n\nThis will work with [RFC 2906 `workspace-deduplicate`](https://rust-lang.github.io/rfcs/2906-cargo-workspace-deduplicate.html):\n\n```toml\n[workspace.lints.cargo]\nimplicit-features = \"warn\"\n\n[lints]\nworkspace = true\n\n```\n\n## [Stabilized and removed features](#stabilized-and-removed-features)\n\n## [Compile progress](#compile-progress)\n\nThe compile-progress feature has been stabilized in the 1.30 release. Progress bars are now enabled by default. See [`term.progress`](about:blank/reference/config.html#termprogresswhen) for more information about controlling this feature.\n\n## [Edition](#edition)\n\nSpecifying the `edition` in `Cargo.toml` has been stabilized in the 1.31 release. See [the edition field](about:blank/reference/manifest.html#the-edition-field) for more information about specifying this field.\n\n## [rename-dependency](#rename-dependency)\n\nSpecifying renamed dependencies in `Cargo.toml` has been stabilized in the 1.31 release. See [renaming dependencies](about:blank/reference/specifying-dependencies.html#renaming-dependencies-in-cargotoml) for more information about renaming dependencies.\n\n## [Alternate Registries](#alternate-registries)\n\nSupport for alternate registries has been stabilized in the 1.34 release. See the [Registries chapter](reference/registries.html) for more information about alternate registries.\n\n## [Offline Mode](#offline-mode)\n\nThe offline feature has been stabilized in the 1.36 release. See the [`--offline` flag](about:blank/commands/cargo.html#option-cargo---offline) for more information on using the offline mode.\n\n## [publish-lockfile](#publish-lockfile)\n\nThe `publish-lockfile` feature has been removed in the 1.37 release. The `Cargo.lock` file is always included when a package is published if the package contains a binary target. `cargo install` requires the `--locked` flag to use the `Cargo.lock` file. See [`cargo package`](reference/../commands/cargo-package.html) and [`cargo install`](reference/../commands/cargo-install.html) for more information.\n\n## [default-run](#default-run)\n\nThe `default-run` feature has been stabilized in the 1.37 release. See [the `default-run` field](about:blank/reference/manifest.html#the-default-run-field) for more information about specifying the default target to run.\n\n## [cache-messages](#cache-messages)\n\nCompiler message caching has been stabilized in the 1.40 release. Compiler warnings are now cached by default and will be replayed automatically when re-running Cargo.\n\n## [install-upgrade](#install-upgrade)\n\nThe `install-upgrade` feature has been stabilized in the 1.41 release. [`cargo install`](reference/../commands/cargo-install.html) will now automatically upgrade packages if they appear to be out-of-date. See the [`cargo install`](reference/../commands/cargo-install.html) documentation for more information.\n\n## [Profile Overrides](#profile-overrides)\n\nProfile overrides have been stabilized in the 1.41 release. See [Profile Overrides](about:blank/reference/profiles.html#overrides) for more information on using overrides.\n\n## [Config Profiles](#config-profiles)\n\nSpecifying profiles in Cargo config files and environment variables has been stabilized in the 1.43 release. See the [config `[profile]` table](about:blank/reference/config.html#profile) for more information about specifying [profiles](reference/profiles.html) in config files.\n\n## [crate-versions](#crate-versions)\n\nThe `-Z crate-versions` flag has been stabilized in the 1.47 release. The crate version is now automatically included in the [`cargo doc`](reference/../commands/cargo-doc.html) documentation sidebar.\n\n## [Features](#features-2)\n\nThe `-Z features` flag has been stabilized in the 1.51 release. See [feature resolver version 2](about:blank/reference/features.html#feature-resolver-version-2) for more information on using the new feature resolver.\n\n## [package-features](#package-features)\n\nThe `-Z package-features` flag has been stabilized in the 1.51 release. See the [resolver version 2 command-line flags](about:blank/reference/features.html#resolver-version-2-command-line-flags) for more information on using the features CLI options.\n\n## [Resolver](#resolver)\n\nThe `resolver` feature in `Cargo.toml` has been stabilized in the 1.51 release. See the [resolver versions](about:blank/reference/resolver.html#resolver-versions) for more information about specifying resolvers.\n\nThe `extra-link-arg` feature to specify additional linker arguments in build scripts has been stabilized in the 1.56 release. See the [build script documentation](about:blank/reference/build-scripts.html#outputs-of-the-build-script) for more information on specifying extra linker arguments.\n\n## [configurable-env](#configurable-env)\n\nThe `configurable-env` feature to specify environment variables in Cargo configuration has been stabilized in the 1.56 release. See the [config documentation](about:blank/reference/config.html#env) for more information about configuring environment variables.\n\n## [rust-version](#rust-version)\n\nThe `rust-version` field in `Cargo.toml` has been stabilized in the 1.56 release. See the [rust-version field](about:blank/reference/manifest.html#the-rust-version-field) for more information on using the `rust-version` field and the `--ignore-rust-version` option.\n\n## [patch-in-config](#patch-in-config)\n\nThe `-Z patch-in-config` flag, and the corresponding support for `[patch]` section in Cargo configuration files has been stabilized in the 1.56 release. See the [patch field](about:blank/reference/config.html#patch) for more information.\n\n## [edition 2021](#edition-2021)\n\nThe 2021 edition has been stabilized in the 1.56 release. See the [`edition` field](about:blank/reference/manifest.html#the-edition-field) for more information on setting the edition. See [`cargo fix --edition`](reference/../commands/cargo-fix.html) and [The Edition Guide](reference/../../edition-guide/index.html) for more information on migrating existing projects.\n\n## [Custom named profiles](#custom-named-profiles)\n\nCustom named profiles have been stabilized in the 1.57 release. See the [profiles chapter](about:blank/reference/profiles.html#custom-profiles) for more information.\n\n## [Profile `strip` option](#profile-strip-option)\n\nThe profile `strip` option has been stabilized in the 1.59 release. See the [profiles chapter](about:blank/reference/profiles.html#strip) for more information.\n\n## [Future incompat report](#future-incompat-report-2)\n\nSupport for generating a future-incompat report has been stabilized in the 1.59 release. See the [future incompat report chapter](reference/future-incompat-report.html) for more information.\n\n## [Namespaced features](#namespaced-features)\n\nNamespaced features has been stabilized in the 1.60 release. See the [Features chapter](about:blank/reference/features.html#optional-dependencies) for more information.\n\n## [Weak dependency features](#weak-dependency-features)\n\nWeak dependency features has been stabilized in the 1.60 release. See the [Features chapter](about:blank/reference/features.html#dependency-features) for more information.\n\n## [timings](#timings)\n\nThe `-Ztimings` option has been stabilized as `--timings` in the 1.60 release. (`--timings=html` and the machine-readable `--timings=json` output remain unstable and require `-Zunstable-options`.)\n\n## [config-cli](#config-cli)\n\nThe `--config` CLI option has been stabilized in the 1.63 release. See the [config documentation](about:blank/reference/config.html#command-line-overrides) for more information.\n\n## [multitarget](#multitarget)\n\nThe `-Z multitarget` option has been stabilized in the 1.64 release. See [`build.target`](about:blank/reference/config.html#buildtarget) for more information about setting the default [target platform triples](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\").\n\n## [crate-type](#crate-type)\n\nThe `--crate-type` flag for `cargo rustc` has been stabilized in the 1.64 release. See the [`cargo rustc` documentation](reference/../commands/cargo-rustc.html) for more information.\n\n## [Workspace Inheritance](#workspace-inheritance)\n\nWorkspace Inheritance has been stabilized in the 1.64 release. See [workspace.package](about:blank/reference/workspaces.html#the-package-table), [workspace.dependencies](about:blank/reference/workspaces.html#the-dependencies-table), and [inheriting-a-dependency-from-a-workspace](about:blank/reference/specifying-dependencies.html#inheriting-a-dependency-from-a-workspace) for more information.\n\n## [terminal-width](#terminal-width)\n\nThe `-Z terminal-width` option has been stabilized in the 1.68 release. The terminal width is always passed to the compiler when running from a terminal where Cargo can automatically detect the width.\n\n## [sparse-registry](#sparse-registry)\n\nSparse registry support has been stabilized in the 1.68 release. See [Registry Protocols](about:blank/reference/registries.html#registry-protocols) for more information.\n\n### [`cargo logout`](#cargo-logout)\n\nThe [`cargo logout`](reference/../commands/cargo-logout.html) command has been stabilized in the 1.70 release.\n\n## [`doctest-in-workspace`](#doctest-in-workspace)\n\nThe `-Z doctest-in-workspace` option for `cargo test` has been stabilized and enabled by default in the 1.72 release. See the [`cargo test` documentation](about:blank/commands/cargo-test.html#working-directory-of-tests) for more information about the working directory for compiling and running tests.\n\n## [keep-going](#keep-going)\n\nThe `--keep-going` option has been stabilized in the 1.74 release. See the [`--keep-going` flag](about:blank/commands/cargo-build.html#option-cargo-build---keep-going) in `cargo build` as an example for more details.\n\n## [`[lints]`](#lints)\n\n[`[lints]`](about:blank/reference/manifest.html#the-lints-section) (enabled via `-Zlints`) has been stabilized in the 1.74 release.\n\n## [credential-process](#credential-process)\n\nThe `-Z credential-process` feature has been stabilized in the 1.74 release.\n\nSee [Registry Authentication](reference/registry-authentication.html) documentation for details.\n\n## [registry-auth](#registry-auth)\n\nThe `-Z registry-auth` feature has been stabilized in the 1.74 release with the additional requirement that a credential-provider is configured.\n\nSee [Registry Authentication](reference/registry-authentication.html) documentation for details.\n\n## [check-cfg](#check-cfg)\n\nThe `-Z check-cfg` feature has been stabilized in the 1.80 release by making it the default behavior.\n\nSee the [build script documentation](about:blank/reference/build-scripts.html#rustc-check-cfg) for informations about specifying custom cfgs.\n\n## [Cargo Commands](#cargo-commands)\n\n-   [General Commands](commands/general-commands.html)\n-   [Build Commands](commands/build-commands.html)\n-   [Manifest Commands](commands/manifest-commands.html)\n-   [Package Commands](commands/package-commands.html)\n-   [Publishing Commands](commands/publishing-commands.html)\n\n## [General Commands](#general-commands)\n\n-   [cargo](commands/cargo.html)\n-   [cargo help](commands/cargo-help.html)\n-   [cargo version](commands/cargo-version.html)\n\n## [cargo(1)](#cargo1)\n\n## [NAME](#name)\n\ncargo — The Rust package manager\n\n## [SYNOPSIS](#synopsis)\n\n`cargo` \\[_options_\\] _command_ \\[_args_\\]  \n`cargo` \\[_options_\\] `--version`  \n`cargo` \\[_options_\\] `--list`  \n`cargo` \\[_options_\\] `--help`  \n`cargo` \\[_options_\\] `--explain` _code_\n\n## [DESCRIPTION](#description)\n\nThis program is a package manager and build tool for the Rust language, available at [https://rust-lang.org](https://rust-lang.org/).\n\n## [COMMANDS](#commands)\n\n### [Build Commands](#build-commands)\n\n[cargo-bench(1)](commands/cargo-bench.html)  \n    Execute benchmarks of a package.\n\n[cargo-build(1)](commands/cargo-build.html)  \n    Compile a package.\n\n[cargo-check(1)](commands/cargo-check.html)  \n    Check a local package and all of its dependencies for errors.\n\n[cargo-clean(1)](commands/cargo-clean.html)  \n    Remove artifacts that Cargo has generated in the past.\n\n[cargo-doc(1)](commands/cargo-doc.html)  \n    Build a package’s documentation.\n\n[cargo-fetch(1)](commands/cargo-fetch.html)  \n    Fetch dependencies of a package from the network.\n\n[cargo-fix(1)](commands/cargo-fix.html)  \n    Automatically fix lint warnings reported by rustc.\n\n[cargo-run(1)](commands/cargo-run.html)  \n    Run a binary or example of the local package.\n\n[cargo-rustc(1)](commands/cargo-rustc.html)  \n    Compile a package, and pass extra options to the compiler.\n\n[cargo-rustdoc(1)](commands/cargo-rustdoc.html)  \n    Build a package’s documentation, using specified custom flags.\n\n[cargo-test(1)](commands/cargo-test.html)  \n    Execute unit and integration tests of a package.\n\n### [Manifest Commands](#manifest-commands-1)\n\n[cargo-generate-lockfile(1)](commands/cargo-generate-lockfile.html)  \n    Generate `Cargo.lock` for a project.\n\n[cargo-locate-project(1)](commands/cargo-locate-project.html)  \n    Print a JSON representation of a `Cargo.toml` file’s location.\n\n[cargo-metadata(1)](commands/cargo-metadata.html)  \n    Output the resolved dependencies of a package in machine-readable format.\n\n[cargo-pkgid(1)](commands/cargo-pkgid.html)  \n    Print a fully qualified package specification.\n\n[cargo-tree(1)](commands/cargo-tree.html)  \n    Display a tree visualization of a dependency graph.\n\n[cargo-update(1)](commands/cargo-update.html)  \n    Update dependencies as recorded in the local lock file.\n\n[cargo-vendor(1)](commands/cargo-vendor.html)  \n    Vendor all dependencies locally.\n\n[cargo-verify-project(1)](commands/cargo-verify-project.html)  \n    Check correctness of crate manifest.\n\n### [Package Commands](#package-commands)\n\n[cargo-init(1)](commands/cargo-init.html)  \n    Create a new Cargo package in an existing directory.\n\n[cargo-install(1)](commands/cargo-install.html)  \n    Build and install a Rust binary.\n\n[cargo-new(1)](commands/cargo-new.html)  \n    Create a new Cargo package.\n\n[cargo-search(1)](commands/cargo-search.html)  \n    Search packages in crates.io.\n\n[cargo-uninstall(1)](commands/cargo-uninstall.html)  \n    Remove a Rust binary.\n\n### [Publishing Commands](#publishing-commands)\n\n[cargo-login(1)](commands/cargo-login.html)  \n    Save an API token from the registry locally.\n\n[cargo-logout(1)](commands/cargo-logout.html)  \n    Remove an API token from the registry locally.\n\n[cargo-owner(1)](commands/cargo-owner.html)  \n    Manage the owners of a crate on the registry.\n\n[cargo-package(1)](commands/cargo-package.html)  \n    Assemble the local package into a distributable tarball.\n\n[cargo-publish(1)](commands/cargo-publish.html)  \n    Upload a package to the registry.\n\n[cargo-yank(1)](commands/cargo-yank.html)  \n    Remove a pushed crate from the index.\n\n### [General Commands](#general-commands-1)\n\n[cargo-help(1)](commands/cargo-help.html)  \n    Display help information about Cargo.\n\n[cargo-version(1)](commands/cargo-version.html)  \n    Show version information.\n\n## [OPTIONS](#options)\n\n### [Special Options](#special-options)\n\n[](about:blank/commands/cargo.html#option-cargo--V)`-V`\n\n[](about:blank/commands/cargo.html#option-cargo---version)`--version`\n\nPrint version info and exit. If used with `--verbose`, prints extra information.\n\n[](about:blank/commands/cargo.html#option-cargo---list)`--list`\n\nList all installed Cargo subcommands. If used with `--verbose`, prints extra information.\n\n[](about:blank/commands/cargo.html#option-cargo---explain)`--explain` _code_\n\nRun `rustc --explain CODE` which will print out a detailed explanation of an error message (for example, `E0004`).\n\n### [Display Options](#display-options)\n\n[](about:blank/commands/cargo.html#option-cargo--v)`-v`\n\n[](about:blank/commands/cargo.html#option-cargo---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo.html#option-cargo--q)`-q`\n\n[](about:blank/commands/cargo.html#option-cargo---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo.html#option-cargo---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Manifest Options](#manifest-options)\n\n[](about:blank/commands/cargo.html#option-cargo---frozen)`--frozen`\n\n[](about:blank/commands/cargo.html#option-cargo---locked)`--locked`\n\nEither of these flags requires that the `Cargo.lock` file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The `--frozen` flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the `Cargo.lock` file is up-to-date (such as a CI build) or want to avoid network access.\n\n[](about:blank/commands/cargo.html#option-cargo---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n### [Common Options](#common-options)\n\n[](about:blank/commands/cargo.html#option-cargo-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo.html#option-cargo---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo.html#option-cargo--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo.html#option-cargo--h)`-h`\n\n[](about:blank/commands/cargo.html#option-cargo---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo.html#option-cargo--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [FILES](#files-1)\n\n`~/.cargo/`  \n    Default location for Cargo’s “home” directory where it stores various files. The location can be changed with the `CARGO_HOME` environment variable.\n\n`$CARGO_HOME/bin/`  \n    Binaries installed by [cargo-install(1)](commands/cargo-install.html) will be located here. If using [rustup](https://rust-lang.github.io/rustup/), executables distributed with Rust are also located here.\n\n`$CARGO_HOME/config.toml`  \n    The global configuration file. See [the reference](commands/../reference/config.html) for more information about configuration files.\n\n`.cargo/config.toml`  \n    Cargo automatically searches for a file named `.cargo/config.toml` in the current directory, and all parent directories. These configuration files will be merged with the global configuration file.\n\n`$CARGO_HOME/credentials.toml`  \n    Private authentication information for logging in to a registry.\n\n`$CARGO_HOME/registry/`  \n    This directory contains cached downloads of the registry index and any downloaded dependencies.\n\n`$CARGO_HOME/git/`  \n    This directory contains cached downloads of git dependencies.\n\nPlease note that the internal structure of the `$CARGO_HOME` directory is not stable yet and may be subject to change.\n\n## [EXAMPLES](#examples-1)\n\n1.  Build a local package and all of its dependencies:\n    \n    ```\n    cargo build\n    \n    ```\n    \n2.  Build a package with optimizations:\n    \n    ```\n    cargo build --release\n    \n    ```\n    \n3.  Run tests for a cross-compiled target:\n    \n    ```\n    cargo test --target i686-unknown-linux-gnu\n    \n    ```\n    \n4.  Create a new package that builds an executable:\n    \n    ```\n    cargo new foobar\n    \n    ```\n    \n5.  Create a package in the current directory:\n    \n    ```\n    mkdir foo && cd foo\n    cargo init .\n    \n    ```\n    \n6.  Learn about a command’s options and usage:\n    \n    ```\n    cargo help clean\n    \n    ```\n    \n\n## [BUGS](#bugs)\n\nSee [https://github.com/rust-lang/cargo/issues](https://github.com/rust-lang/cargo/issues) for issues.\n\n## [SEE ALSO](#see-also)\n\n[rustc(1)](https://doc.rust-lang.org/rustc/index.html), [rustdoc(1)](https://doc.rust-lang.org/rustdoc/index.html)\n\n## [cargo-help(1)](#cargo-help1)\n\n## [NAME](#name-1)\n\ncargo-help — Get help for a Cargo command\n\n## [SYNOPSIS](#synopsis-1)\n\n`cargo help` \\[_subcommand_\\]\n\n## [DESCRIPTION](#description-1)\n\nPrints a help message for the given command.\n\n## [EXAMPLES](#examples-2)\n\n1.  Get help for a command:\n    \n    ```\n    cargo help build\n    \n    ```\n    \n2.  Help is also available with the `--help` flag:\n    \n    ```\n    cargo build --help\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-1)\n\n[cargo(1)](commands/cargo.html)\n\n## [cargo-version(1)](#cargo-version1)\n\n## [NAME](#name-2)\n\ncargo-version — Show version information\n\n## [SYNOPSIS](#synopsis-2)\n\n`cargo version` \\[_options_\\]\n\n## [DESCRIPTION](#description-2)\n\nDisplays the version of Cargo.\n\n## [OPTIONS](#options-1)\n\n[](about:blank/commands/cargo-version.html#option-cargo-version--v)`-v`\n\n[](about:blank/commands/cargo-version.html#option-cargo-version---verbose)`--verbose`\n\nDisplay additional version information.\n\n## [EXAMPLES](#examples-3)\n\n1.  Display the version:\n    \n    ```\n    cargo version\n    \n    ```\n    \n2.  The version is also available via flags:\n    \n    ```\n    cargo --version\n    cargo -V\n    \n    ```\n    \n3.  Display extra version information:\n    \n    ```\n    cargo -Vv\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-2)\n\n[cargo(1)](commands/cargo.html)\n\n## [Build Commands](#build-commands-1)\n\n-   [cargo bench](commands/cargo-bench.html)\n-   [cargo build](commands/cargo-build.html)\n-   [cargo check](commands/cargo-check.html)\n-   [cargo clean](commands/cargo-clean.html)\n-   [cargo doc](commands/cargo-doc.html)\n-   [cargo fetch](commands/cargo-fetch.html)\n-   [cargo fix](commands/cargo-fix.html)\n-   [cargo run](commands/cargo-run.html)\n-   [cargo rustc](commands/cargo-rustc.html)\n-   [cargo rustdoc](commands/cargo-rustdoc.html)\n-   [cargo test](commands/cargo-test.html)\n-   [cargo report](commands/cargo-report.html)\n\n## [cargo-bench(1)](#cargo-bench1)\n\n## [NAME](#name-3)\n\ncargo-bench — Execute benchmarks of a package\n\n## [SYNOPSIS](#synopsis-3)\n\n`cargo bench` \\[_options_\\] \\[_benchname_\\] \\[`--` _bench-options_\\]\n\n## [DESCRIPTION](#description-3)\n\nCompile and execute benchmarks.\n\nThe benchmark filtering argument _benchname_ and all the arguments following the two dashes (`--`) are passed to the benchmark binaries and thus to _libtest_ (rustc’s built in unit-test and micro-benchmarking framework). If you are passing arguments to both Cargo and the binary, the ones after `--` go to the binary, the ones before go to Cargo. For details about libtest’s arguments see the output of `cargo bench -- --help` and check out the rustc book’s chapter on how tests work at [https://doc.rust-lang.org/rustc/tests/index.html](https://doc.rust-lang.org/rustc/tests/index.html).\n\nAs an example, this will run only the benchmark named `foo` (and skip other similarly named benchmarks like `foobar`):\n\n```\ncargo bench -- foo --exact\n\n```\n\nBenchmarks are built with the `--test` option to `rustc` which creates a special executable by linking your code with libtest. The executable automatically runs all functions annotated with the `#[bench]` attribute. Cargo passes the `--bench` flag to the test harness to tell it to run only benchmarks, regardless of whether the harness is libtest or a custom harness.\n\nThe libtest harness may be disabled by setting `harness = false` in the target manifest settings, in which case your code will need to provide its own `main` function to handle running benchmarks.\n\n> **Note**: The [`#[bench]` attribute](https://doc.rust-lang.org/nightly/unstable-book/library-features/test.html) is currently unstable and only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html). There are some packages available on [crates.io](https://crates.io/keywords/benchmark) that may help with running benchmarks on the stable channel, such as [Criterion](https://crates.io/crates/criterion).\n\nBy default, `cargo bench` uses the [`bench` profile](about:blank/reference/profiles.html#bench), which enables optimizations and disables debugging information. If you need to debug a benchmark, you can use the `--profile=dev` command-line option to switch to the dev profile. You can then run the debug-enabled benchmark within a debugger.\n\n### [Working directory of benchmarks](#working-directory-of-benchmarks)\n\nThe working directory of every benchmark is set to the root directory of the package the benchmark belongs to. Setting the working directory of benchmarks to the package’s root directory makes it possible for benchmarks to reliably access the package’s files using relative paths, regardless from where `cargo bench` was executed from.\n\n## [OPTIONS](#options-2)\n\n### [Benchmark Options](#benchmark-options)\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---no-run)`--no-run`\n\nCompile, but don’t run benchmarks.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---no-fail-fast)`--no-fail-fast`\n\nRun all benchmarks regardless of failure. Without this flag, Cargo will exit after the first executable fails. The Rust test harness will run all benchmarks within the executable to completion, this flag only applies to the executable as a whole.\n\n### [Package Selection](#package-selection-1)\n\nBy default, when no package selection options are given, the packages selected depend on the selected manifest file (based on the current working directory if `--manifest-path` is not given). If the manifest is the root of a workspace then the workspaces default members are selected, otherwise only the package defined by the manifest will be selected.\n\nThe default members of a workspace can be set explicitly with the `workspace.default-members` key in the root manifest. If this is not set, a virtual workspace will include all workspace members (equivalent to passing `--workspace`), and a non-virtual workspace will include only the root crate itself.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench--p)`-p` _spec_…\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---package)`--package` _spec_…\n\nBenchmark only the specified packages. See [cargo-pkgid(1)](commands/cargo-pkgid.html) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---workspace)`--workspace`\n\nBenchmark all members in the workspace.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---all)`--all`\n\nDeprecated alias for `--workspace`.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---exclude)`--exclude` _SPEC_…\n\nExclude the specified packages. Must be used in conjunction with the `--workspace` flag. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n### [Target Selection](#target-selection)\n\nWhen no target selection options are given, `cargo bench` will build the following targets of the selected packages:\n\n-   lib — used to link with binaries and benchmarks\n-   bins (only if benchmark targets are built and required features are available)\n-   lib as a benchmark\n-   bins as benchmarks\n-   benchmark targets\n\nThe default behavior can be changed by setting the `bench` flag for the target in the manifest settings. Setting examples to `bench = true` will build and run the example as a benchmark, replacing the example’s `main` function with the libtest harness.\n\nSetting targets to `bench = false` will stop them from being bencharmked by default. Target selection options that take a target by name (such as `--example foo`) ignore the `bench` flag and will always benchmark the given target.\n\nSee [Configuring a target](about:blank/reference/cargo-targets.html#configuring-a-target) for more information on per-target settings.\n\nBinary targets are automatically built if there is an integration test or benchmark being selected to benchmark. This allows an integration test to execute the binary to exercise and test its behavior. The `CARGO_BIN_EXE_<name>` [environment variable](about:blank/reference/environment-variables.html#environment-variables-cargo-sets-for-crates) is set when the integration test is built so that it can use the [`env` macro](https://doc.rust-lang.org/std/macro.env.html) to locate the executable.\n\nPassing target selection flags will benchmark only the specified targets.\n\nNote that `--bin`, `--example`, `--test` and `--bench` flags also support common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each glob pattern.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---lib)`--lib`\n\nBenchmark the package’s library.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---bin)`--bin` _name_…\n\nBenchmark the specified binary. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---bins)`--bins`\n\nBenchmark all binary targets.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---example)`--example` _name_…\n\nBenchmark the specified example. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---examples)`--examples`\n\nBenchmark all example targets.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---test)`--test` _name_…\n\nBenchmark the specified integration test. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---tests)`--tests`\n\nBenchmark all targets in test mode that have the `test = true` manifest flag set. By default this includes the library and binaries built as unittests, and integration tests. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a unittest, and once as a dependency for binaries, integration tests, etc.). Targets may be enabled or disabled by setting the `test` flag in the manifest settings for the target.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---bench)`--bench` _name_…\n\nBenchmark the specified benchmark. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---benches)`--benches`\n\nBenchmark all targets in benchmark mode that have the `bench = true` manifest flag set. By default this includes the library and binaries built as benchmarks, and bench targets. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a benchmark, and once as a dependency for binaries, benchmarks, etc.). Targets may be enabled or disabled by setting the `bench` flag in the manifest settings for the target.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---all-targets)`--all-targets`\n\nBenchmark all targets. This is equivalent to specifying `--lib --bins --tests --benches --examples`.\n\n### [Feature Selection](#feature-selection)\n\nThe feature flags allow you to control which features are enabled. When no feature options are given, the `default` feature is activated for every selected package.\n\nSee [the features documentation](about:blank/reference/features.html#command-line-feature-options) for more details.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench--F)`-F` _features_\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---features)`--features` _features_\n\nSpace or comma separated list of features to activate. Features of workspace members may be enabled with `package-name/feature-name` syntax. This flag may be specified multiple times, which enables all specified features.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---all-features)`--all-features`\n\nActivate all available features of all selected packages.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---no-default-features)`--no-default-features`\n\nDo not activate the `default` feature of the selected packages.\n\n### [Compilation Options](#compilation-options)\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---target)`--target` _triple_\n\nBenchmark for the given architecture. The default is the host architecture. The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a list of supported targets. This flag may be specified multiple times.\n\nThis may also be specified with the `build.target` [config value](commands/../reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the [build cache](commands/../guide/build-cache.html) documentation for more details.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---profile)`--profile` _name_\n\nBenchmark with the given profile. See [the reference](commands/../reference/profiles.html) for more details on profiles.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---timings=fmts)`--timings=`_fmts_\n\nOutput information how long each compilation takes, and track concurrency information over time. Accepts an optional comma-separated list of output formats; `--timings` without an argument will default to `--timings=html`. Specifying an output format (rather than the default) is unstable and requires `-Zunstable-options`. Valid output formats:\n\n-   `html` (unstable, requires `-Zunstable-options`): Write a human-readable file `cargo-timing.html` to the `target/cargo-timings` directory with a report of the compilation. Also write a report to the same directory with a timestamp in the filename if you want to look at older runs. HTML output is suitable for human consumption only, and does not provide machine-readable timing data.\n-   `json` (unstable, requires `-Zunstable-options`): Emit machine-readable JSON information about timing information.\n\n### [Output Options](#output-options)\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---target-dir)`--target-dir` _directory_\n\nDirectory for all generated artifacts and intermediate files. May also be specified with the `CARGO_TARGET_DIR` environment variable, or the `build.target-dir` [config value](commands/../reference/config.html). Defaults to `target` in the root of the workspace.\n\n### [Display Options](#display-options-1)\n\nBy default the Rust test harness hides output from benchmark execution to keep results readable. Benchmark output can be recovered (e.g., for debugging) by passing `--nocapture` to the benchmark binaries:\n\n```\ncargo bench -- --nocapture\n\n```\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench--v)`-v`\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench--q)`-q`\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---message-format)`--message-format` _fmt_\n\nThe output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n-   `human` (default): Display in a human-readable text format. Conflicts with `short` and `json`.\n-   `short`: Emit shorter, human-readable text messages. Conflicts with `human` and `json`.\n-   `json`: Emit JSON messages to stdout. See [the reference](about:blank/reference/external-tools.html#json-messages) for more details. Conflicts with `human` and `short`.\n-   `json-diagnostic-short`: Ensure the `rendered` field of JSON messages contains the “short” rendering from rustc. Cannot be used with `human` or `short`.\n-   `json-diagnostic-rendered-ansi`: Ensure the `rendered` field of JSON messages contains embedded ANSI color codes for respecting rustc’s default color scheme. Cannot be used with `human` or `short`.\n-   `json-render-diagnostics`: Instruct Cargo to not include rustc diagnostics in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with `human` or `short`.\n\n### [Manifest Options](#manifest-options-1)\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---ignore-rust-version)`--ignore-rust-version`\n\nIgnore `rust-version` specification in packages.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-1)\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench--h)`-h`\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n### [Miscellaneous Options](#miscellaneous-options)\n\nThe `--jobs` argument affects the building of the benchmark executable but does not affect how many threads are used when running the benchmarks. The Rust test harness runs benchmarks serially in a single thread.\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench--j)`-j` _N_\n\n[](about:blank/commands/cargo-bench.html#option-cargo-bench---jobs)`--jobs` _N_\n\nNumber of parallel jobs to run. May also be specified with the `build.jobs` [config value](commands/../reference/config.html). Defaults to the number of logical CPUs. If negative, it sets the maximum number of parallel jobs to the number of logical CPUs plus provided value. If a string `default` is provided, it sets the value back to defaults. Should not be 0.\n\nWhile `cargo bench` involves compilation, it does not provide a `--keep-going` flag. Use `--no-fail-fast` to run as many benchmarks as possible without stopping at the first failure. To “compile” as many benchmarks as possible, use `--benches` to build benchmark binaries separately. For example:\n\n```\ncargo build --benches --release --keep-going\ncargo bench --no-fail-fast\n\n```\n\n## [ENVIRONMENT](#environment-1)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-1)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-4)\n\n1.  Build and execute all the benchmarks of the current package:\n    \n    ```\n    cargo bench\n    \n    ```\n    \n2.  Run only a specific benchmark within a specific benchmark target:\n    \n    ```\n    cargo bench --bench bench_name -- modname::some_benchmark\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-3)\n\n[cargo(1)](commands/cargo.html), [cargo-test(1)](commands/cargo-test.html)\n\n## [cargo-build(1)](#cargo-build1)\n\n## [NAME](#name-4)\n\ncargo-build — Compile the current package\n\n## [SYNOPSIS](#synopsis-4)\n\n`cargo build` \\[_options_\\]\n\n## [DESCRIPTION](#description-4)\n\nCompile local packages and all of their dependencies.\n\n## [OPTIONS](#options-3)\n\n### [Package Selection](#package-selection-2)\n\nBy default, when no package selection options are given, the packages selected depend on the selected manifest file (based on the current working directory if `--manifest-path` is not given). If the manifest is the root of a workspace then the workspaces default members are selected, otherwise only the package defined by the manifest will be selected.\n\nThe default members of a workspace can be set explicitly with the `workspace.default-members` key in the root manifest. If this is not set, a virtual workspace will include all workspace members (equivalent to passing `--workspace`), and a non-virtual workspace will include only the root crate itself.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build--p)`-p` _spec_…\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---package)`--package` _spec_…\n\nBuild only the specified packages. See [cargo-pkgid(1)](commands/cargo-pkgid.html) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---workspace)`--workspace`\n\nBuild all members in the workspace.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---all)`--all`\n\nDeprecated alias for `--workspace`.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---exclude)`--exclude` _SPEC_…\n\nExclude the specified packages. Must be used in conjunction with the `--workspace` flag. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n### [Target Selection](#target-selection-1)\n\nWhen no target selection options are given, `cargo build` will build all binary and library targets of the selected packages. Binaries are skipped if they have `required-features` that are missing.\n\nBinary targets are automatically built if there is an integration test or benchmark being selected to build. This allows an integration test to execute the binary to exercise and test its behavior. The `CARGO_BIN_EXE_<name>` [environment variable](about:blank/reference/environment-variables.html#environment-variables-cargo-sets-for-crates) is set when the integration test is built so that it can use the [`env` macro](https://doc.rust-lang.org/std/macro.env.html) to locate the executable.\n\nPassing target selection flags will build only the specified targets.\n\nNote that `--bin`, `--example`, `--test` and `--bench` flags also support common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each glob pattern.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---lib)`--lib`\n\nBuild the package’s library.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---bin)`--bin` _name_…\n\nBuild the specified binary. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---bins)`--bins`\n\nBuild all binary targets.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---example)`--example` _name_…\n\nBuild the specified example. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---examples)`--examples`\n\nBuild all example targets.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---test)`--test` _name_…\n\nBuild the specified integration test. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---tests)`--tests`\n\nBuild all targets in test mode that have the `test = true` manifest flag set. By default this includes the library and binaries built as unittests, and integration tests. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a unittest, and once as a dependency for binaries, integration tests, etc.). Targets may be enabled or disabled by setting the `test` flag in the manifest settings for the target.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---bench)`--bench` _name_…\n\nBuild the specified benchmark. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---benches)`--benches`\n\nBuild all targets in benchmark mode that have the `bench = true` manifest flag set. By default this includes the library and binaries built as benchmarks, and bench targets. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a benchmark, and once as a dependency for binaries, benchmarks, etc.). Targets may be enabled or disabled by setting the `bench` flag in the manifest settings for the target.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---all-targets)`--all-targets`\n\nBuild all targets. This is equivalent to specifying `--lib --bins --tests --benches --examples`.\n\n### [Feature Selection](#feature-selection-1)\n\nThe feature flags allow you to control which features are enabled. When no feature options are given, the `default` feature is activated for every selected package.\n\nSee [the features documentation](about:blank/reference/features.html#command-line-feature-options) for more details.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build--F)`-F` _features_\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---features)`--features` _features_\n\nSpace or comma separated list of features to activate. Features of workspace members may be enabled with `package-name/feature-name` syntax. This flag may be specified multiple times, which enables all specified features.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---all-features)`--all-features`\n\nActivate all available features of all selected packages.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---no-default-features)`--no-default-features`\n\nDo not activate the `default` feature of the selected packages.\n\n### [Compilation Options](#compilation-options-1)\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---target)`--target` _triple_\n\nBuild for the given architecture. The default is the host architecture. The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a list of supported targets. This flag may be specified multiple times.\n\nThis may also be specified with the `build.target` [config value](commands/../reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the [build cache](commands/../guide/build-cache.html) documentation for more details.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build--r)`-r`\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---release)`--release`\n\nBuild optimized artifacts with the `release` profile. See also the `--profile` option for choosing a specific profile by name.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---profile)`--profile` _name_\n\nBuild with the given profile. See [the reference](commands/../reference/profiles.html) for more details on profiles.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---timings=fmts)`--timings=`_fmts_\n\nOutput information how long each compilation takes, and track concurrency information over time. Accepts an optional comma-separated list of output formats; `--timings` without an argument will default to `--timings=html`. Specifying an output format (rather than the default) is unstable and requires `-Zunstable-options`. Valid output formats:\n\n-   `html` (unstable, requires `-Zunstable-options`): Write a human-readable file `cargo-timing.html` to the `target/cargo-timings` directory with a report of the compilation. Also write a report to the same directory with a timestamp in the filename if you want to look at older runs. HTML output is suitable for human consumption only, and does not provide machine-readable timing data.\n-   `json` (unstable, requires `-Zunstable-options`): Emit machine-readable JSON information about timing information.\n\n### [Output Options](#output-options-1)\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---target-dir)`--target-dir` _directory_\n\nDirectory for all generated artifacts and intermediate files. May also be specified with the `CARGO_TARGET_DIR` environment variable, or the `build.target-dir` [config value](commands/../reference/config.html). Defaults to `target` in the root of the workspace.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---out-dir)`--out-dir` _directory_\n\nCopy final artifacts to this directory.\n\nThis option is unstable and available only on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable. See [https://github.com/rust-lang/cargo/issues/6790](https://github.com/rust-lang/cargo/issues/6790) for more information.\n\n### [Display Options](#display-options-2)\n\n[](about:blank/commands/cargo-build.html#option-cargo-build--v)`-v`\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-build.html#option-cargo-build--q)`-q`\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---message-format)`--message-format` _fmt_\n\nThe output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n-   `human` (default): Display in a human-readable text format. Conflicts with `short` and `json`.\n-   `short`: Emit shorter, human-readable text messages. Conflicts with `human` and `json`.\n-   `json`: Emit JSON messages to stdout. See [the reference](about:blank/reference/external-tools.html#json-messages) for more details. Conflicts with `human` and `short`.\n-   `json-diagnostic-short`: Ensure the `rendered` field of JSON messages contains the “short” rendering from rustc. Cannot be used with `human` or `short`.\n-   `json-diagnostic-rendered-ansi`: Ensure the `rendered` field of JSON messages contains embedded ANSI color codes for respecting rustc’s default color scheme. Cannot be used with `human` or `short`.\n-   `json-render-diagnostics`: Instruct Cargo to not include rustc diagnostics in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with `human` or `short`.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---build-plan)`--build-plan`\n\nOutputs a series of JSON messages to stdout that indicate the commands to run the build.\n\nThis option is unstable and available only on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable. See [https://github.com/rust-lang/cargo/issues/5579](https://github.com/rust-lang/cargo/issues/5579) for more information.\n\n### [Manifest Options](#manifest-options-2)\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---ignore-rust-version)`--ignore-rust-version`\n\nIgnore `rust-version` specification in packages.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-2)\n\n[](about:blank/commands/cargo-build.html#option-cargo-build-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-build.html#option-cargo-build--h)`-h`\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n### [Miscellaneous Options](#miscellaneous-options-1)\n\n[](about:blank/commands/cargo-build.html#option-cargo-build--j)`-j` _N_\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---jobs)`--jobs` _N_\n\nNumber of parallel jobs to run. May also be specified with the `build.jobs` [config value](commands/../reference/config.html). Defaults to the number of logical CPUs. If negative, it sets the maximum number of parallel jobs to the number of logical CPUs plus provided value. If a string `default` is provided, it sets the value back to defaults. Should not be 0.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---keep-going)`--keep-going`\n\nBuild as many crates in the dependency graph as possible, rather than aborting the build on the first one that fails to build.\n\nFor example if the current package depends on dependencies `fails` and `works`, one of which fails to build, `cargo build -j1` may or may not build the one that succeeds (depending on which one of the two builds Cargo picked to run first), whereas `cargo build -j1 --keep-going` would definitely run both builds, even if the one run first fails.\n\n[](about:blank/commands/cargo-build.html#option-cargo-build---future-incompat-report)`--future-incompat-report`\n\nDisplays a future-incompat report for any future-incompatible warnings produced during execution of this command\n\nSee [cargo-report(1)](commands/cargo-report.html)\n\n## [ENVIRONMENT](#environment-2)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-2)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-5)\n\n1.  Build the local package and all of its dependencies:\n    \n    ```\n    cargo build\n    \n    ```\n    \n2.  Build with optimizations:\n    \n    ```\n    cargo build --release\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-4)\n\n[cargo(1)](commands/cargo.html), [cargo-rustc(1)](commands/cargo-rustc.html)\n\n## [cargo-check(1)](#cargo-check1)\n\n## [NAME](#name-5)\n\ncargo-check — Check the current package\n\n## [SYNOPSIS](#synopsis-5)\n\n`cargo check` \\[_options_\\]\n\n## [DESCRIPTION](#description-5)\n\nCheck a local package and all of its dependencies for errors. This will essentially compile the packages without performing the final step of code generation, which is faster than running `cargo build`. The compiler will save metadata files to disk so that future runs will reuse them if the source has not been modified. Some diagnostics and errors are only emitted during code generation, so they inherently won’t be reported with `cargo check`.\n\n## [OPTIONS](#options-4)\n\n### [Package Selection](#package-selection-3)\n\nBy default, when no package selection options are given, the packages selected depend on the selected manifest file (based on the current working directory if `--manifest-path` is not given). If the manifest is the root of a workspace then the workspaces default members are selected, otherwise only the package defined by the manifest will be selected.\n\nThe default members of a workspace can be set explicitly with the `workspace.default-members` key in the root manifest. If this is not set, a virtual workspace will include all workspace members (equivalent to passing `--workspace`), and a non-virtual workspace will include only the root crate itself.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check--p)`-p` _spec_…\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---package)`--package` _spec_…\n\nCheck only the specified packages. See [cargo-pkgid(1)](commands/cargo-pkgid.html) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---workspace)`--workspace`\n\nCheck all members in the workspace.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---all)`--all`\n\nDeprecated alias for `--workspace`.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---exclude)`--exclude` _SPEC_…\n\nExclude the specified packages. Must be used in conjunction with the `--workspace` flag. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n### [Target Selection](#target-selection-2)\n\nWhen no target selection options are given, `cargo check` will check all binary and library targets of the selected packages. Binaries are skipped if they have `required-features` that are missing.\n\nPassing target selection flags will check only the specified targets.\n\nNote that `--bin`, `--example`, `--test` and `--bench` flags also support common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each glob pattern.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---lib)`--lib`\n\nCheck the package’s library.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---bin)`--bin` _name_…\n\nCheck the specified binary. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---bins)`--bins`\n\nCheck all binary targets.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---example)`--example` _name_…\n\nCheck the specified example. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---examples)`--examples`\n\nCheck all example targets.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---test)`--test` _name_…\n\nCheck the specified integration test. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---tests)`--tests`\n\nCheck all targets in test mode that have the `test = true` manifest flag set. By default this includes the library and binaries built as unittests, and integration tests. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a unittest, and once as a dependency for binaries, integration tests, etc.). Targets may be enabled or disabled by setting the `test` flag in the manifest settings for the target.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---bench)`--bench` _name_…\n\nCheck the specified benchmark. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---benches)`--benches`\n\nCheck all targets in benchmark mode that have the `bench = true` manifest flag set. By default this includes the library and binaries built as benchmarks, and bench targets. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a benchmark, and once as a dependency for binaries, benchmarks, etc.). Targets may be enabled or disabled by setting the `bench` flag in the manifest settings for the target.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---all-targets)`--all-targets`\n\nCheck all targets. This is equivalent to specifying `--lib --bins --tests --benches --examples`.\n\n### [Feature Selection](#feature-selection-2)\n\nThe feature flags allow you to control which features are enabled. When no feature options are given, the `default` feature is activated for every selected package.\n\nSee [the features documentation](about:blank/reference/features.html#command-line-feature-options) for more details.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check--F)`-F` _features_\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---features)`--features` _features_\n\nSpace or comma separated list of features to activate. Features of workspace members may be enabled with `package-name/feature-name` syntax. This flag may be specified multiple times, which enables all specified features.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---all-features)`--all-features`\n\nActivate all available features of all selected packages.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---no-default-features)`--no-default-features`\n\nDo not activate the `default` feature of the selected packages.\n\n### [Compilation Options](#compilation-options-2)\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---target)`--target` _triple_\n\nCheck for the given architecture. The default is the host architecture. The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a list of supported targets. This flag may be specified multiple times.\n\nThis may also be specified with the `build.target` [config value](commands/../reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the [build cache](commands/../guide/build-cache.html) documentation for more details.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check--r)`-r`\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---release)`--release`\n\nCheck optimized artifacts with the `release` profile. See also the `--profile` option for choosing a specific profile by name.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---profile)`--profile` _name_\n\nCheck with the given profile.\n\nAs a special case, specifying the `test` profile will also enable checking in test mode which will enable checking tests and enable the `test` cfg option. See [rustc tests](https://doc.rust-lang.org/rustc/tests/index.html) for more detail.\n\nSee [the reference](commands/../reference/profiles.html) for more details on profiles.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---timings=fmts)`--timings=`_fmts_\n\nOutput information how long each compilation takes, and track concurrency information over time. Accepts an optional comma-separated list of output formats; `--timings` without an argument will default to `--timings=html`. Specifying an output format (rather than the default) is unstable and requires `-Zunstable-options`. Valid output formats:\n\n-   `html` (unstable, requires `-Zunstable-options`): Write a human-readable file `cargo-timing.html` to the `target/cargo-timings` directory with a report of the compilation. Also write a report to the same directory with a timestamp in the filename if you want to look at older runs. HTML output is suitable for human consumption only, and does not provide machine-readable timing data.\n-   `json` (unstable, requires `-Zunstable-options`): Emit machine-readable JSON information about timing information.\n\n### [Output Options](#output-options-2)\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---target-dir)`--target-dir` _directory_\n\nDirectory for all generated artifacts and intermediate files. May also be specified with the `CARGO_TARGET_DIR` environment variable, or the `build.target-dir` [config value](commands/../reference/config.html). Defaults to `target` in the root of the workspace.\n\n### [Display Options](#display-options-3)\n\n[](about:blank/commands/cargo-check.html#option-cargo-check--v)`-v`\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-check.html#option-cargo-check--q)`-q`\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---message-format)`--message-format` _fmt_\n\nThe output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n-   `human` (default): Display in a human-readable text format. Conflicts with `short` and `json`.\n-   `short`: Emit shorter, human-readable text messages. Conflicts with `human` and `json`.\n-   `json`: Emit JSON messages to stdout. See [the reference](about:blank/reference/external-tools.html#json-messages) for more details. Conflicts with `human` and `short`.\n-   `json-diagnostic-short`: Ensure the `rendered` field of JSON messages contains the “short” rendering from rustc. Cannot be used with `human` or `short`.\n-   `json-diagnostic-rendered-ansi`: Ensure the `rendered` field of JSON messages contains embedded ANSI color codes for respecting rustc’s default color scheme. Cannot be used with `human` or `short`.\n-   `json-render-diagnostics`: Instruct Cargo to not include rustc diagnostics in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with `human` or `short`.\n\n### [Manifest Options](#manifest-options-3)\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---ignore-rust-version)`--ignore-rust-version`\n\nIgnore `rust-version` specification in packages.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-3)\n\n[](about:blank/commands/cargo-check.html#option-cargo-check-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-check.html#option-cargo-check--h)`-h`\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n### [Miscellaneous Options](#miscellaneous-options-2)\n\n[](about:blank/commands/cargo-check.html#option-cargo-check--j)`-j` _N_\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---jobs)`--jobs` _N_\n\nNumber of parallel jobs to run. May also be specified with the `build.jobs` [config value](commands/../reference/config.html). Defaults to the number of logical CPUs. If negative, it sets the maximum number of parallel jobs to the number of logical CPUs plus provided value. If a string `default` is provided, it sets the value back to defaults. Should not be 0.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---keep-going)`--keep-going`\n\nBuild as many crates in the dependency graph as possible, rather than aborting the build on the first one that fails to build.\n\nFor example if the current package depends on dependencies `fails` and `works`, one of which fails to build, `cargo check -j1` may or may not build the one that succeeds (depending on which one of the two builds Cargo picked to run first), whereas `cargo check -j1 --keep-going` would definitely run both builds, even if the one run first fails.\n\n[](about:blank/commands/cargo-check.html#option-cargo-check---future-incompat-report)`--future-incompat-report`\n\nDisplays a future-incompat report for any future-incompatible warnings produced during execution of this command\n\nSee [cargo-report(1)](commands/cargo-report.html)\n\n## [ENVIRONMENT](#environment-3)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-3)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-6)\n\n1.  Check the local package for errors:\n    \n    ```\n    cargo check\n    \n    ```\n    \n2.  Check all targets, including unit tests:\n    \n    ```\n    cargo check --all-targets --profile=test\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-5)\n\n[cargo(1)](commands/cargo.html), [cargo-build(1)](commands/cargo-build.html)\n\n## [cargo-clean(1)](#cargo-clean1)\n\n## [NAME](#name-6)\n\ncargo-clean — Remove generated artifacts\n\n## [SYNOPSIS](#synopsis-6)\n\n`cargo clean` \\[_options_\\]\n\n## [DESCRIPTION](#description-6)\n\nRemove artifacts from the target directory that Cargo has generated in the past.\n\nWith no options, `cargo clean` will delete the entire target directory.\n\n## [OPTIONS](#options-5)\n\n### [Package Selection](#package-selection-4)\n\nWhen no packages are selected, all packages and all dependencies in the workspace are cleaned.\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean--p)`-p` _spec_…\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean---package)`--package` _spec_…\n\nClean only the specified packages. This flag may be specified multiple times. See [cargo-pkgid(1)](commands/cargo-pkgid.html) for the SPEC format.\n\n### [Clean Options](#clean-options)\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean---dry-run)`--dry-run`\n\nDisplays a summary of what would be deleted without deleting anything. Use with `--verbose` to display the actual files that would be deleted.\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean---doc)`--doc`\n\nThis option will cause `cargo clean` to remove only the `doc` directory in the target directory.\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean---release)`--release`\n\nRemove all artifacts in the `release` directory.\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean---profile)`--profile` _name_\n\nRemove all artifacts in the directory with the given profile name.\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean---target-dir)`--target-dir` _directory_\n\nDirectory for all generated artifacts and intermediate files. May also be specified with the `CARGO_TARGET_DIR` environment variable, or the `build.target-dir` [config value](commands/../reference/config.html). Defaults to `target` in the root of the workspace.\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean---target)`--target` _triple_\n\nClean for the given architecture. The default is the host architecture. The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a list of supported targets. This flag may be specified multiple times.\n\nThis may also be specified with the `build.target` [config value](commands/../reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the [build cache](commands/../guide/build-cache.html) documentation for more details.\n\n### [Display Options](#display-options-4)\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean--v)`-v`\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean--q)`-q`\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Manifest Options](#manifest-options-4)\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-4)\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean--h)`-h`\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-clean.html#option-cargo-clean--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-4)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-4)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-7)\n\n1.  Remove the entire target directory:\n    \n    ```\n    cargo clean\n    \n    ```\n    \n2.  Remove only the release artifacts:\n    \n    ```\n    cargo clean --release\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-6)\n\n[cargo(1)](commands/cargo.html), [cargo-build(1)](commands/cargo-build.html)\n\n## [cargo-doc(1)](#cargo-doc1)\n\n## [NAME](#name-7)\n\ncargo-doc — Build a package’s documentation\n\n## [SYNOPSIS](#synopsis-7)\n\n`cargo doc` \\[_options_\\]\n\n## [DESCRIPTION](#description-7)\n\nBuild the documentation for the local package and all dependencies. The output is placed in `target/doc` in rustdoc’s usual format.\n\n## [OPTIONS](#options-6)\n\n### [Documentation Options](#documentation-options)\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---open)`--open`\n\nOpen the docs in a browser after building them. This will use your default browser unless you define another one in the `BROWSER` environment variable or use the [`doc.browser`](about:blank/reference/config.html#docbrowser) configuration option.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---no-deps)`--no-deps`\n\nDo not build documentation for dependencies.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---document-private-items)`--document-private-items`\n\nInclude non-public items in the documentation. This will be enabled by default if documenting a binary target.\n\n### [Package Selection](#package-selection-5)\n\nBy default, when no package selection options are given, the packages selected depend on the selected manifest file (based on the current working directory if `--manifest-path` is not given). If the manifest is the root of a workspace then the workspaces default members are selected, otherwise only the package defined by the manifest will be selected.\n\nThe default members of a workspace can be set explicitly with the `workspace.default-members` key in the root manifest. If this is not set, a virtual workspace will include all workspace members (equivalent to passing `--workspace`), and a non-virtual workspace will include only the root crate itself.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc--p)`-p` _spec_…\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---package)`--package` _spec_…\n\nDocument only the specified packages. See [cargo-pkgid(1)](commands/cargo-pkgid.html) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---workspace)`--workspace`\n\nDocument all members in the workspace.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---all)`--all`\n\nDeprecated alias for `--workspace`.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---exclude)`--exclude` _SPEC_…\n\nExclude the specified packages. Must be used in conjunction with the `--workspace` flag. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n### [Target Selection](#target-selection-3)\n\nWhen no target selection options are given, `cargo doc` will document all binary and library targets of the selected package. The binary will be skipped if its name is the same as the lib target. Binaries are skipped if they have `required-features` that are missing.\n\nThe default behavior can be changed by setting `doc = false` for the target in the manifest settings. Using target selection options will ignore the `doc` flag and will always document the given target.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---lib)`--lib`\n\nDocument the package’s library.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---bin)`--bin` _name_…\n\nDocument the specified binary. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---bins)`--bins`\n\nDocument all binary targets.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---example)`--example` _name_…\n\nDocument the specified example. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---examples)`--examples`\n\nDocument all example targets.\n\n### [Feature Selection](#feature-selection-3)\n\nThe feature flags allow you to control which features are enabled. When no feature options are given, the `default` feature is activated for every selected package.\n\nSee [the features documentation](about:blank/reference/features.html#command-line-feature-options) for more details.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc--F)`-F` _features_\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---features)`--features` _features_\n\nSpace or comma separated list of features to activate. Features of workspace members may be enabled with `package-name/feature-name` syntax. This flag may be specified multiple times, which enables all specified features.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---all-features)`--all-features`\n\nActivate all available features of all selected packages.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---no-default-features)`--no-default-features`\n\nDo not activate the `default` feature of the selected packages.\n\n### [Compilation Options](#compilation-options-3)\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---target)`--target` _triple_\n\nDocument for the given architecture. The default is the host architecture. The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a list of supported targets. This flag may be specified multiple times.\n\nThis may also be specified with the `build.target` [config value](commands/../reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the [build cache](commands/../guide/build-cache.html) documentation for more details.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc--r)`-r`\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---release)`--release`\n\nDocument optimized artifacts with the `release` profile. See also the `--profile` option for choosing a specific profile by name.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---profile)`--profile` _name_\n\nDocument with the given profile. See [the reference](commands/../reference/profiles.html) for more details on profiles.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---timings=fmts)`--timings=`_fmts_\n\nOutput information how long each compilation takes, and track concurrency information over time. Accepts an optional comma-separated list of output formats; `--timings` without an argument will default to `--timings=html`. Specifying an output format (rather than the default) is unstable and requires `-Zunstable-options`. Valid output formats:\n\n-   `html` (unstable, requires `-Zunstable-options`): Write a human-readable file `cargo-timing.html` to the `target/cargo-timings` directory with a report of the compilation. Also write a report to the same directory with a timestamp in the filename if you want to look at older runs. HTML output is suitable for human consumption only, and does not provide machine-readable timing data.\n-   `json` (unstable, requires `-Zunstable-options`): Emit machine-readable JSON information about timing information.\n\n### [Output Options](#output-options-3)\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---target-dir)`--target-dir` _directory_\n\nDirectory for all generated artifacts and intermediate files. May also be specified with the `CARGO_TARGET_DIR` environment variable, or the `build.target-dir` [config value](commands/../reference/config.html). Defaults to `target` in the root of the workspace.\n\n### [Display Options](#display-options-5)\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc--v)`-v`\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc--q)`-q`\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---message-format)`--message-format` _fmt_\n\nThe output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n-   `human` (default): Display in a human-readable text format. Conflicts with `short` and `json`.\n-   `short`: Emit shorter, human-readable text messages. Conflicts with `human` and `json`.\n-   `json`: Emit JSON messages to stdout. See [the reference](about:blank/reference/external-tools.html#json-messages) for more details. Conflicts with `human` and `short`.\n-   `json-diagnostic-short`: Ensure the `rendered` field of JSON messages contains the “short” rendering from rustc. Cannot be used with `human` or `short`.\n-   `json-diagnostic-rendered-ansi`: Ensure the `rendered` field of JSON messages contains embedded ANSI color codes for respecting rustc’s default color scheme. Cannot be used with `human` or `short`.\n-   `json-render-diagnostics`: Instruct Cargo to not include rustc diagnostics in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with `human` or `short`.\n\n### [Manifest Options](#manifest-options-5)\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---ignore-rust-version)`--ignore-rust-version`\n\nIgnore `rust-version` specification in packages.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-5)\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc--h)`-h`\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n### [Miscellaneous Options](#miscellaneous-options-3)\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc--j)`-j` _N_\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---jobs)`--jobs` _N_\n\nNumber of parallel jobs to run. May also be specified with the `build.jobs` [config value](commands/../reference/config.html). Defaults to the number of logical CPUs. If negative, it sets the maximum number of parallel jobs to the number of logical CPUs plus provided value. If a string `default` is provided, it sets the value back to defaults. Should not be 0.\n\n[](about:blank/commands/cargo-doc.html#option-cargo-doc---keep-going)`--keep-going`\n\nBuild as many crates in the dependency graph as possible, rather than aborting the build on the first one that fails to build.\n\nFor example if the current package depends on dependencies `fails` and `works`, one of which fails to build, `cargo doc -j1` may or may not build the one that succeeds (depending on which one of the two builds Cargo picked to run first), whereas `cargo doc -j1 --keep-going` would definitely run both builds, even if the one run first fails.\n\n## [ENVIRONMENT](#environment-5)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-5)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-8)\n\n1.  Build the local package documentation and its dependencies and output to `target/doc`.\n    \n    ```\n    cargo doc\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-7)\n\n[cargo(1)](commands/cargo.html), [cargo-rustdoc(1)](commands/cargo-rustdoc.html), [rustdoc(1)](https://doc.rust-lang.org/rustdoc/index.html)\n\n## [cargo-fetch(1)](#cargo-fetch1)\n\n## [NAME](#name-8)\n\ncargo-fetch — Fetch dependencies of a package from the network\n\n## [SYNOPSIS](#synopsis-8)\n\n`cargo fetch` \\[_options_\\]\n\n## [DESCRIPTION](#description-8)\n\nIf a `Cargo.lock` file is available, this command will ensure that all of the git dependencies and/or registry dependencies are downloaded and locally available. Subsequent Cargo commands will be able to run offline after a `cargo fetch` unless the lock file changes.\n\nIf the lock file is not available, then this command will generate the lock file before fetching the dependencies.\n\nIf `--target` is not specified, then all target dependencies are fetched.\n\nSee also the [cargo-prefetch](https://crates.io/crates/cargo-prefetch) plugin which adds a command to download popular crates. This may be useful if you plan to use Cargo without a network with the `--offline` flag.\n\n## [OPTIONS](#options-7)\n\n### [Fetch options](#fetch-options)\n\n[](about:blank/commands/cargo-fetch.html#option-cargo-fetch---target)`--target` _triple_\n\nFetch for the given architecture. The default is all architectures. The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a list of supported targets. This flag may be specified multiple times.\n\nThis may also be specified with the `build.target` [config value](commands/../reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the [build cache](commands/../guide/build-cache.html) documentation for more details.\n\n### [Display Options](#display-options-6)\n\n[](about:blank/commands/cargo-fetch.html#option-cargo-fetch--v)`-v`\n\n[](about:blank/commands/cargo-fetch.html#option-cargo-fetch---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-fetch.html#option-cargo-fetch--q)`-q`\n\n[](about:blank/commands/cargo-fetch.html#option-cargo-fetch---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-fetch.html#option-cargo-fetch---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Manifest Options](#manifest-options-6)\n\n[](about:blank/commands/cargo-fetch.html#option-cargo-fetch---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-fetch.html#option-cargo-fetch---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-fetch.html#option-cargo-fetch---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-fetch.html#option-cargo-fetch---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-6)\n\n[](about:blank/commands/cargo-fetch.html#option-cargo-fetch-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-fetch.html#option-cargo-fetch---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-fetch.html#option-cargo-fetch--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-fetch.html#option-cargo-fetch--h)`-h`\n\n[](about:blank/commands/cargo-fetch.html#option-cargo-fetch---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-fetch.html#option-cargo-fetch--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-6)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-6)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-9)\n\n1.  Fetch all dependencies:\n    \n    ```\n    cargo fetch\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-8)\n\n[cargo(1)](commands/cargo.html), [cargo-update(1)](commands/cargo-update.html), [cargo-generate-lockfile(1)](commands/cargo-generate-lockfile.html)\n\n## [cargo-fix(1)](#cargo-fix1)\n\n## [NAME](#name-9)\n\ncargo-fix — Automatically fix lint warnings reported by rustc\n\n## [SYNOPSIS](#synopsis-9)\n\n`cargo fix` \\[_options_\\]\n\n## [DESCRIPTION](#description-9)\n\nThis Cargo subcommand will automatically take rustc’s suggestions from diagnostics like warnings and apply them to your source code. This is intended to help automate tasks that rustc itself already knows how to tell you to fix!\n\nExecuting `cargo fix` will under the hood execute [cargo-check(1)](commands/cargo-check.html). Any warnings applicable to your crate will be automatically fixed (if possible) and all remaining warnings will be displayed when the check process is finished. For example if you’d like to apply all fixes to the current package, you can run:\n\n```\ncargo fix\n\n```\n\nwhich behaves the same as `cargo check --all-targets`.\n\n`cargo fix` is only capable of fixing code that is normally compiled with `cargo check`. If code is conditionally enabled with optional features, you will need to enable those features for that code to be analyzed:\n\n```\ncargo fix --features foo\n\n```\n\nSimilarly, other `cfg` expressions like platform-specific code will need to pass `--target` to fix code for the given target.\n\n```\ncargo fix --target x86_64-pc-windows-gnu\n\n```\n\nIf you encounter any problems with `cargo fix` or otherwise have any questions or feature requests please don’t hesitate to file an issue at [https://github.com/rust-lang/cargo](https://github.com/rust-lang/cargo).\n\n### [Edition migration](#edition-migration)\n\nThe `cargo fix` subcommand can also be used to migrate a package from one [edition](https://doc.rust-lang.org/edition-guide/editions/transitioning-an-existing-project-to-a-new-edition.html) to the next. The general procedure is:\n\n1.  Run `cargo fix --edition`. Consider also using the `--all-features` flag if your project has multiple features. You may also want to run `cargo fix --edition` multiple times with different `--target` flags if your project has platform-specific code gated by `cfg` attributes.\n2.  Modify `Cargo.toml` to set the [edition field](about:blank/reference/manifest.html#the-edition-field) to the new edition.\n3.  Run your project tests to verify that everything still works. If new warnings are issued, you may want to consider running `cargo fix` again (without the `--edition` flag) to apply any suggestions given by the compiler.\n\nAnd hopefully that’s it! Just keep in mind of the caveats mentioned above that `cargo fix` cannot update code for inactive features or `cfg` expressions. Also, in some rare cases the compiler is unable to automatically migrate all code to the new edition, and this may require manual changes after building with the new edition.\n\n## [OPTIONS](#options-8)\n\n### [Fix options](#fix-options)\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---broken-code)`--broken-code`\n\nFix code even if it already has compiler errors. This is useful if `cargo fix` fails to apply the changes. It will apply the changes and leave the broken code in the working directory for you to inspect and manually fix.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---edition)`--edition`\n\nApply changes that will update the code to the next edition. This will not update the edition in the `Cargo.toml` manifest, which must be updated manually after `cargo fix --edition` has finished.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---edition-idioms)`--edition-idioms`\n\nApply suggestions that will update code to the preferred style for the current edition.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---allow-no-vcs)`--allow-no-vcs`\n\nFix code even if a VCS was not detected.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---allow-dirty)`--allow-dirty`\n\nFix code even if the working directory has changes.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---allow-staged)`--allow-staged`\n\nFix code even if the working directory has staged changes.\n\n### [Package Selection](#package-selection-6)\n\nBy default, when no package selection options are given, the packages selected depend on the selected manifest file (based on the current working directory if `--manifest-path` is not given). If the manifest is the root of a workspace then the workspaces default members are selected, otherwise only the package defined by the manifest will be selected.\n\nThe default members of a workspace can be set explicitly with the `workspace.default-members` key in the root manifest. If this is not set, a virtual workspace will include all workspace members (equivalent to passing `--workspace`), and a non-virtual workspace will include only the root crate itself.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix--p)`-p` _spec_…\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---package)`--package` _spec_…\n\nFix only the specified packages. See [cargo-pkgid(1)](commands/cargo-pkgid.html) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---workspace)`--workspace`\n\nFix all members in the workspace.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---all)`--all`\n\nDeprecated alias for `--workspace`.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---exclude)`--exclude` _SPEC_…\n\nExclude the specified packages. Must be used in conjunction with the `--workspace` flag. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n### [Target Selection](#target-selection-4)\n\nWhen no target selection options are given, `cargo fix` will fix all targets (`--all-targets` implied). Binaries are skipped if they have `required-features` that are missing.\n\nPassing target selection flags will fix only the specified targets.\n\nNote that `--bin`, `--example`, `--test` and `--bench` flags also support common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each glob pattern.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---lib)`--lib`\n\nFix the package’s library.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---bin)`--bin` _name_…\n\nFix the specified binary. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---bins)`--bins`\n\nFix all binary targets.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---example)`--example` _name_…\n\nFix the specified example. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---examples)`--examples`\n\nFix all example targets.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---test)`--test` _name_…\n\nFix the specified integration test. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---tests)`--tests`\n\nFix all targets in test mode that have the `test = true` manifest flag set. By default this includes the library and binaries built as unittests, and integration tests. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a unittest, and once as a dependency for binaries, integration tests, etc.). Targets may be enabled or disabled by setting the `test` flag in the manifest settings for the target.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---bench)`--bench` _name_…\n\nFix the specified benchmark. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---benches)`--benches`\n\nFix all targets in benchmark mode that have the `bench = true` manifest flag set. By default this includes the library and binaries built as benchmarks, and bench targets. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a benchmark, and once as a dependency for binaries, benchmarks, etc.). Targets may be enabled or disabled by setting the `bench` flag in the manifest settings for the target.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---all-targets)`--all-targets`\n\nFix all targets. This is equivalent to specifying `--lib --bins --tests --benches --examples`.\n\n### [Feature Selection](#feature-selection-4)\n\nThe feature flags allow you to control which features are enabled. When no feature options are given, the `default` feature is activated for every selected package.\n\nSee [the features documentation](about:blank/reference/features.html#command-line-feature-options) for more details.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix--F)`-F` _features_\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---features)`--features` _features_\n\nSpace or comma separated list of features to activate. Features of workspace members may be enabled with `package-name/feature-name` syntax. This flag may be specified multiple times, which enables all specified features.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---all-features)`--all-features`\n\nActivate all available features of all selected packages.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---no-default-features)`--no-default-features`\n\nDo not activate the `default` feature of the selected packages.\n\n### [Compilation Options](#compilation-options-4)\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---target)`--target` _triple_\n\nFix for the given architecture. The default is the host architecture. The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a list of supported targets. This flag may be specified multiple times.\n\nThis may also be specified with the `build.target` [config value](commands/../reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the [build cache](commands/../guide/build-cache.html) documentation for more details.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix--r)`-r`\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---release)`--release`\n\nFix optimized artifacts with the `release` profile. See also the `--profile` option for choosing a specific profile by name.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---profile)`--profile` _name_\n\nFix with the given profile.\n\nAs a special case, specifying the `test` profile will also enable checking in test mode which will enable checking tests and enable the `test` cfg option. See [rustc tests](https://doc.rust-lang.org/rustc/tests/index.html) for more detail.\n\nSee [the reference](commands/../reference/profiles.html) for more details on profiles.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---timings=fmts)`--timings=`_fmts_\n\nOutput information how long each compilation takes, and track concurrency information over time. Accepts an optional comma-separated list of output formats; `--timings` without an argument will default to `--timings=html`. Specifying an output format (rather than the default) is unstable and requires `-Zunstable-options`. Valid output formats:\n\n-   `html` (unstable, requires `-Zunstable-options`): Write a human-readable file `cargo-timing.html` to the `target/cargo-timings` directory with a report of the compilation. Also write a report to the same directory with a timestamp in the filename if you want to look at older runs. HTML output is suitable for human consumption only, and does not provide machine-readable timing data.\n-   `json` (unstable, requires `-Zunstable-options`): Emit machine-readable JSON information about timing information.\n\n### [Output Options](#output-options-4)\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---target-dir)`--target-dir` _directory_\n\nDirectory for all generated artifacts and intermediate files. May also be specified with the `CARGO_TARGET_DIR` environment variable, or the `build.target-dir` [config value](commands/../reference/config.html). Defaults to `target` in the root of the workspace.\n\n### [Display Options](#display-options-7)\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix--v)`-v`\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix--q)`-q`\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---message-format)`--message-format` _fmt_\n\nThe output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n-   `human` (default): Display in a human-readable text format. Conflicts with `short` and `json`.\n-   `short`: Emit shorter, human-readable text messages. Conflicts with `human` and `json`.\n-   `json`: Emit JSON messages to stdout. See [the reference](about:blank/reference/external-tools.html#json-messages) for more details. Conflicts with `human` and `short`.\n-   `json-diagnostic-short`: Ensure the `rendered` field of JSON messages contains the “short” rendering from rustc. Cannot be used with `human` or `short`.\n-   `json-diagnostic-rendered-ansi`: Ensure the `rendered` field of JSON messages contains embedded ANSI color codes for respecting rustc’s default color scheme. Cannot be used with `human` or `short`.\n-   `json-render-diagnostics`: Instruct Cargo to not include rustc diagnostics in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with `human` or `short`.\n\n### [Manifest Options](#manifest-options-7)\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---ignore-rust-version)`--ignore-rust-version`\n\nIgnore `rust-version` specification in packages.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-7)\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix--h)`-h`\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n### [Miscellaneous Options](#miscellaneous-options-4)\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix--j)`-j` _N_\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---jobs)`--jobs` _N_\n\nNumber of parallel jobs to run. May also be specified with the `build.jobs` [config value](commands/../reference/config.html). Defaults to the number of logical CPUs. If negative, it sets the maximum number of parallel jobs to the number of logical CPUs plus provided value. If a string `default` is provided, it sets the value back to defaults. Should not be 0.\n\n[](about:blank/commands/cargo-fix.html#option-cargo-fix---keep-going)`--keep-going`\n\nBuild as many crates in the dependency graph as possible, rather than aborting the build on the first one that fails to build.\n\nFor example if the current package depends on dependencies `fails` and `works`, one of which fails to build, `cargo fix -j1` may or may not build the one that succeeds (depending on which one of the two builds Cargo picked to run first), whereas `cargo fix -j1 --keep-going` would definitely run both builds, even if the one run first fails.\n\n## [ENVIRONMENT](#environment-7)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-7)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-10)\n\n1.  Apply compiler suggestions to the local package:\n    \n    ```\n    cargo fix\n    \n    ```\n    \n2.  Update a package to prepare it for the next edition:\n    \n    ```\n    cargo fix --edition\n    \n    ```\n    \n3.  Apply suggested idioms for the current edition:\n    \n    ```\n    cargo fix --edition-idioms\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-9)\n\n[cargo(1)](commands/cargo.html), [cargo-check(1)](commands/cargo-check.html)\n\n## [cargo-run(1)](#cargo-run1)\n\n## [NAME](#name-10)\n\ncargo-run — Run the current package\n\n## [SYNOPSIS](#synopsis-10)\n\n`cargo run` \\[_options_\\] \\[`--` _args_\\]\n\n## [DESCRIPTION](#description-10)\n\nRun a binary or example of the local package.\n\nAll the arguments following the two dashes (`--`) are passed to the binary to run. If you’re passing arguments to both Cargo and the binary, the ones after `--` go to the binary, the ones before go to Cargo.\n\nUnlike [cargo-test(1)](commands/cargo-test.html) and [cargo-bench(1)](commands/cargo-bench.html), `cargo run` sets the working directory of the binary executed to the current working directory, same as if it was executed in the shell directly.\n\n## [OPTIONS](#options-9)\n\n### [Package Selection](#package-selection-7)\n\nBy default, the package in the current working directory is selected. The `-p` flag can be used to choose a different package in a workspace.\n\n[](about:blank/commands/cargo-run.html#option-cargo-run--p)`-p` _spec_\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---package)`--package` _spec_\n\nThe package to run. See [cargo-pkgid(1)](commands/cargo-pkgid.html) for the SPEC format.\n\n### [Target Selection](#target-selection-5)\n\nWhen no target selection options are given, `cargo run` will run the binary target. If there are multiple binary targets, you must pass a target flag to choose one. Or, the `default-run` field may be specified in the `[package]` section of `Cargo.toml` to choose the name of the binary to run by default.\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---bin)`--bin` _name_\n\nRun the specified binary.\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---example)`--example` _name_\n\nRun the specified example.\n\n### [Feature Selection](#feature-selection-5)\n\nThe feature flags allow you to control which features are enabled. When no feature options are given, the `default` feature is activated for every selected package.\n\nSee [the features documentation](about:blank/reference/features.html#command-line-feature-options) for more details.\n\n[](about:blank/commands/cargo-run.html#option-cargo-run--F)`-F` _features_\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---features)`--features` _features_\n\nSpace or comma separated list of features to activate. Features of workspace members may be enabled with `package-name/feature-name` syntax. This flag may be specified multiple times, which enables all specified features.\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---all-features)`--all-features`\n\nActivate all available features of all selected packages.\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---no-default-features)`--no-default-features`\n\nDo not activate the `default` feature of the selected packages.\n\n### [Compilation Options](#compilation-options-5)\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---target)`--target` _triple_\n\nRun for the given architecture. The default is the host architecture. The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a list of supported targets.\n\nThis may also be specified with the `build.target` [config value](commands/../reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the [build cache](commands/../guide/build-cache.html) documentation for more details.\n\n[](about:blank/commands/cargo-run.html#option-cargo-run--r)`-r`\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---release)`--release`\n\nRun optimized artifacts with the `release` profile. See also the `--profile` option for choosing a specific profile by name.\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---profile)`--profile` _name_\n\nRun with the given profile. See [the reference](commands/../reference/profiles.html) for more details on profiles.\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---timings=fmts)`--timings=`_fmts_\n\nOutput information how long each compilation takes, and track concurrency information over time. Accepts an optional comma-separated list of output formats; `--timings` without an argument will default to `--timings=html`. Specifying an output format (rather than the default) is unstable and requires `-Zunstable-options`. Valid output formats:\n\n-   `html` (unstable, requires `-Zunstable-options`): Write a human-readable file `cargo-timing.html` to the `target/cargo-timings` directory with a report of the compilation. Also write a report to the same directory with a timestamp in the filename if you want to look at older runs. HTML output is suitable for human consumption only, and does not provide machine-readable timing data.\n-   `json` (unstable, requires `-Zunstable-options`): Emit machine-readable JSON information about timing information.\n\n### [Output Options](#output-options-5)\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---target-dir)`--target-dir` _directory_\n\nDirectory for all generated artifacts and intermediate files. May also be specified with the `CARGO_TARGET_DIR` environment variable, or the `build.target-dir` [config value](commands/../reference/config.html). Defaults to `target` in the root of the workspace.\n\n### [Display Options](#display-options-8)\n\n[](about:blank/commands/cargo-run.html#option-cargo-run--v)`-v`\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-run.html#option-cargo-run--q)`-q`\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---message-format)`--message-format` _fmt_\n\nThe output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n-   `human` (default): Display in a human-readable text format. Conflicts with `short` and `json`.\n-   `short`: Emit shorter, human-readable text messages. Conflicts with `human` and `json`.\n-   `json`: Emit JSON messages to stdout. See [the reference](about:blank/reference/external-tools.html#json-messages) for more details. Conflicts with `human` and `short`.\n-   `json-diagnostic-short`: Ensure the `rendered` field of JSON messages contains the “short” rendering from rustc. Cannot be used with `human` or `short`.\n-   `json-diagnostic-rendered-ansi`: Ensure the `rendered` field of JSON messages contains embedded ANSI color codes for respecting rustc’s default color scheme. Cannot be used with `human` or `short`.\n-   `json-render-diagnostics`: Instruct Cargo to not include rustc diagnostics in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with `human` or `short`.\n\n### [Manifest Options](#manifest-options-8)\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---ignore-rust-version)`--ignore-rust-version`\n\nIgnore `rust-version` specification in packages.\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-8)\n\n[](about:blank/commands/cargo-run.html#option-cargo-run-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-run.html#option-cargo-run--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-run.html#option-cargo-run--h)`-h`\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-run.html#option-cargo-run--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n### [Miscellaneous Options](#miscellaneous-options-5)\n\n[](about:blank/commands/cargo-run.html#option-cargo-run--j)`-j` _N_\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---jobs)`--jobs` _N_\n\nNumber of parallel jobs to run. May also be specified with the `build.jobs` [config value](commands/../reference/config.html). Defaults to the number of logical CPUs. If negative, it sets the maximum number of parallel jobs to the number of logical CPUs plus provided value. If a string `default` is provided, it sets the value back to defaults. Should not be 0.\n\n[](about:blank/commands/cargo-run.html#option-cargo-run---keep-going)`--keep-going`\n\nBuild as many crates in the dependency graph as possible, rather than aborting the build on the first one that fails to build.\n\nFor example if the current package depends on dependencies `fails` and `works`, one of which fails to build, `cargo run -j1` may or may not build the one that succeeds (depending on which one of the two builds Cargo picked to run first), whereas `cargo run -j1 --keep-going` would definitely run both builds, even if the one run first fails.\n\n## [ENVIRONMENT](#environment-8)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-8)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-11)\n\n1.  Build the local package and run its main target (assuming only one binary):\n    \n    ```\n    cargo run\n    \n    ```\n    \n2.  Run an example with extra arguments:\n    \n    ```\n    cargo run --example exname -- --exoption exarg1 exarg2\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-10)\n\n[cargo(1)](commands/cargo.html), [cargo-build(1)](commands/cargo-build.html)\n\n## [cargo-rustc(1)](#cargo-rustc1)\n\n## [NAME](#name-11)\n\ncargo-rustc — Compile the current package, and pass extra options to the compiler\n\n## [SYNOPSIS](#synopsis-11)\n\n`cargo rustc` \\[_options_\\] \\[`--` _args_\\]\n\n## [DESCRIPTION](#description-11)\n\nThe specified target for the current package (or package specified by `-p` if provided) will be compiled along with all of its dependencies. The specified _args_ will all be passed to the final compiler invocation, not any of the dependencies. Note that the compiler will still unconditionally receive arguments such as `-L`, `--extern`, and `--crate-type`, and the specified _args_ will simply be added to the compiler invocation.\n\nSee [https://doc.rust-lang.org/rustc/index.html](https://doc.rust-lang.org/rustc/index.html) for documentation on rustc flags.\n\nThis command requires that only one target is being compiled when additional arguments are provided. If more than one target is available for the current package the filters of `--lib`, `--bin`, etc, must be used to select which target is compiled.\n\nTo pass flags to all compiler processes spawned by Cargo, use the `RUSTFLAGS` [environment variable](commands/../reference/environment-variables.html) or the `build.rustflags` [config value](commands/../reference/config.html).\n\n## [OPTIONS](#options-10)\n\n### [Package Selection](#package-selection-8)\n\nBy default, the package in the current working directory is selected. The `-p` flag can be used to choose a different package in a workspace.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc--p)`-p` _spec_\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---package)`--package` _spec_\n\nThe package to build. See [cargo-pkgid(1)](commands/cargo-pkgid.html) for the SPEC format.\n\n### [Target Selection](#target-selection-6)\n\nWhen no target selection options are given, `cargo rustc` will build all binary and library targets of the selected package.\n\nBinary targets are automatically built if there is an integration test or benchmark being selected to build. This allows an integration test to execute the binary to exercise and test its behavior. The `CARGO_BIN_EXE_<name>` [environment variable](about:blank/reference/environment-variables.html#environment-variables-cargo-sets-for-crates) is set when the integration test is built so that it can use the [`env` macro](https://doc.rust-lang.org/std/macro.env.html) to locate the executable.\n\nPassing target selection flags will build only the specified targets.\n\nNote that `--bin`, `--example`, `--test` and `--bench` flags also support common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each glob pattern.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---lib)`--lib`\n\nBuild the package’s library.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---bin)`--bin` _name_…\n\nBuild the specified binary. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---bins)`--bins`\n\nBuild all binary targets.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---example)`--example` _name_…\n\nBuild the specified example. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---examples)`--examples`\n\nBuild all example targets.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---test)`--test` _name_…\n\nBuild the specified integration test. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---tests)`--tests`\n\nBuild all targets in test mode that have the `test = true` manifest flag set. By default this includes the library and binaries built as unittests, and integration tests. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a unittest, and once as a dependency for binaries, integration tests, etc.). Targets may be enabled or disabled by setting the `test` flag in the manifest settings for the target.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---bench)`--bench` _name_…\n\nBuild the specified benchmark. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---benches)`--benches`\n\nBuild all targets in benchmark mode that have the `bench = true` manifest flag set. By default this includes the library and binaries built as benchmarks, and bench targets. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a benchmark, and once as a dependency for binaries, benchmarks, etc.). Targets may be enabled or disabled by setting the `bench` flag in the manifest settings for the target.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---all-targets)`--all-targets`\n\nBuild all targets. This is equivalent to specifying `--lib --bins --tests --benches --examples`.\n\n### [Feature Selection](#feature-selection-6)\n\nThe feature flags allow you to control which features are enabled. When no feature options are given, the `default` feature is activated for every selected package.\n\nSee [the features documentation](about:blank/reference/features.html#command-line-feature-options) for more details.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc--F)`-F` _features_\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---features)`--features` _features_\n\nSpace or comma separated list of features to activate. Features of workspace members may be enabled with `package-name/feature-name` syntax. This flag may be specified multiple times, which enables all specified features.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---all-features)`--all-features`\n\nActivate all available features of all selected packages.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---no-default-features)`--no-default-features`\n\nDo not activate the `default` feature of the selected packages.\n\n### [Compilation Options](#compilation-options-6)\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---target)`--target` _triple_\n\nBuild for the given architecture. The default is the host architecture. The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a list of supported targets. This flag may be specified multiple times.\n\nThis may also be specified with the `build.target` [config value](commands/../reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the [build cache](commands/../guide/build-cache.html) documentation for more details.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc--r)`-r`\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---release)`--release`\n\nBuild optimized artifacts with the `release` profile. See also the `--profile` option for choosing a specific profile by name.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---profile)`--profile` _name_\n\nBuild with the given profile.\n\nThe `rustc` subcommand will treat the following named profiles with special behaviors:\n\n-   `check` — Builds in the same way as the [cargo-check(1)](commands/cargo-check.html) command with the `dev` profile.\n-   `test` — Builds in the same way as the [cargo-test(1)](commands/cargo-test.html) command, enabling building in test mode which will enable tests and enable the `test` cfg option. See [rustc tests](https://doc.rust-lang.org/rustc/tests/index.html) for more detail.\n-   `bench` — Builds in the same was as the [cargo-bench(1)](commands/cargo-bench.html) command, similar to the `test` profile.\n\nSee [the reference](commands/../reference/profiles.html) for more details on profiles.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---timings=fmts)`--timings=`_fmts_\n\nOutput information how long each compilation takes, and track concurrency information over time. Accepts an optional comma-separated list of output formats; `--timings` without an argument will default to `--timings=html`. Specifying an output format (rather than the default) is unstable and requires `-Zunstable-options`. Valid output formats:\n\n-   `html` (unstable, requires `-Zunstable-options`): Write a human-readable file `cargo-timing.html` to the `target/cargo-timings` directory with a report of the compilation. Also write a report to the same directory with a timestamp in the filename if you want to look at older runs. HTML output is suitable for human consumption only, and does not provide machine-readable timing data.\n-   `json` (unstable, requires `-Zunstable-options`): Emit machine-readable JSON information about timing information.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---crate-type)`--crate-type` _crate-type_\n\nBuild for the given crate type. This flag accepts a comma-separated list of 1 or more crate types, of which the allowed values are the same as `crate-type` field in the manifest for configuring a Cargo target. See [`crate-type` field](about:blank/reference/cargo-targets.html#the-crate-type-field) for possible values.\n\nIf the manifest contains a list, and `--crate-type` is provided, the command-line argument value will override what is in the manifest.\n\nThis flag only works when building a `lib` or `example` library target.\n\n### [Output Options](#output-options-6)\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---target-dir)`--target-dir` _directory_\n\nDirectory for all generated artifacts and intermediate files. May also be specified with the `CARGO_TARGET_DIR` environment variable, or the `build.target-dir` [config value](commands/../reference/config.html). Defaults to `target` in the root of the workspace.\n\n### [Display Options](#display-options-9)\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc--v)`-v`\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc--q)`-q`\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---message-format)`--message-format` _fmt_\n\nThe output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n-   `human` (default): Display in a human-readable text format. Conflicts with `short` and `json`.\n-   `short`: Emit shorter, human-readable text messages. Conflicts with `human` and `json`.\n-   `json`: Emit JSON messages to stdout. See [the reference](about:blank/reference/external-tools.html#json-messages) for more details. Conflicts with `human` and `short`.\n-   `json-diagnostic-short`: Ensure the `rendered` field of JSON messages contains the “short” rendering from rustc. Cannot be used with `human` or `short`.\n-   `json-diagnostic-rendered-ansi`: Ensure the `rendered` field of JSON messages contains embedded ANSI color codes for respecting rustc’s default color scheme. Cannot be used with `human` or `short`.\n-   `json-render-diagnostics`: Instruct Cargo to not include rustc diagnostics in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with `human` or `short`.\n\n### [Manifest Options](#manifest-options-9)\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---ignore-rust-version)`--ignore-rust-version`\n\nIgnore `rust-version` specification in packages.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-9)\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc--h)`-h`\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n### [Miscellaneous Options](#miscellaneous-options-6)\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc--j)`-j` _N_\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---jobs)`--jobs` _N_\n\nNumber of parallel jobs to run. May also be specified with the `build.jobs` [config value](commands/../reference/config.html). Defaults to the number of logical CPUs. If negative, it sets the maximum number of parallel jobs to the number of logical CPUs plus provided value. If a string `default` is provided, it sets the value back to defaults. Should not be 0.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---keep-going)`--keep-going`\n\nBuild as many crates in the dependency graph as possible, rather than aborting the build on the first one that fails to build.\n\nFor example if the current package depends on dependencies `fails` and `works`, one of which fails to build, `cargo rustc -j1` may or may not build the one that succeeds (depending on which one of the two builds Cargo picked to run first), whereas `cargo rustc -j1 --keep-going` would definitely run both builds, even if the one run first fails.\n\n[](about:blank/commands/cargo-rustc.html#option-cargo-rustc---future-incompat-report)`--future-incompat-report`\n\nDisplays a future-incompat report for any future-incompatible warnings produced during execution of this command\n\nSee [cargo-report(1)](commands/cargo-report.html)\n\n## [ENVIRONMENT](#environment-9)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-9)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-12)\n\n1.  Check if your package (not including dependencies) uses unsafe code:\n    \n    ```\n    cargo rustc --lib -- -D unsafe-code\n    \n    ```\n    \n2.  Try an experimental flag on the nightly compiler, such as this which prints the size of every type:\n    \n    ```\n    cargo rustc --lib -- -Z print-type-sizes\n    \n    ```\n    \n3.  Override `crate-type` field in Cargo.toml with command-line option:\n    \n    ```\n    cargo rustc --lib --crate-type lib,cdylib\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-11)\n\n[cargo(1)](commands/cargo.html), [cargo-build(1)](commands/cargo-build.html), [rustc(1)](https://doc.rust-lang.org/rustc/index.html)\n\n## [cargo-rustdoc(1)](#cargo-rustdoc1)\n\n## [NAME](#name-12)\n\ncargo-rustdoc — Build a package’s documentation, using specified custom flags\n\n## [SYNOPSIS](#synopsis-12)\n\n`cargo rustdoc` \\[_options_\\] \\[`--` _args_\\]\n\n## [DESCRIPTION](#description-12)\n\nThe specified target for the current package (or package specified by `-p` if provided) will be documented with the specified _args_ being passed to the final rustdoc invocation. Dependencies will not be documented as part of this command. Note that rustdoc will still unconditionally receive arguments such as `-L`, `--extern`, and `--crate-type`, and the specified _args_ will simply be added to the rustdoc invocation.\n\nSee [https://doc.rust-lang.org/rustdoc/index.html](https://doc.rust-lang.org/rustdoc/index.html) for documentation on rustdoc flags.\n\nThis command requires that only one target is being compiled when additional arguments are provided. If more than one target is available for the current package the filters of `--lib`, `--bin`, etc, must be used to select which target is compiled.\n\nTo pass flags to all rustdoc processes spawned by Cargo, use the `RUSTDOCFLAGS` [environment variable](commands/../reference/environment-variables.html) or the `build.rustdocflags` [config value](commands/../reference/config.html).\n\n## [OPTIONS](#options-11)\n\n### [Documentation Options](#documentation-options-1)\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---open)`--open`\n\nOpen the docs in a browser after building them. This will use your default browser unless you define another one in the `BROWSER` environment variable or use the [`doc.browser`](about:blank/reference/config.html#docbrowser) configuration option.\n\n### [Package Selection](#package-selection-9)\n\nBy default, the package in the current working directory is selected. The `-p` flag can be used to choose a different package in a workspace.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc--p)`-p` _spec_\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---package)`--package` _spec_\n\nThe package to document. See [cargo-pkgid(1)](commands/cargo-pkgid.html) for the SPEC format.\n\n### [Target Selection](#target-selection-7)\n\nWhen no target selection options are given, `cargo rustdoc` will document all binary and library targets of the selected package. The binary will be skipped if its name is the same as the lib target. Binaries are skipped if they have `required-features` that are missing.\n\nPassing target selection flags will document only the specified targets.\n\nNote that `--bin`, `--example`, `--test` and `--bench` flags also support common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each glob pattern.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---lib)`--lib`\n\nDocument the package’s library.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---bin)`--bin` _name_…\n\nDocument the specified binary. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---bins)`--bins`\n\nDocument all binary targets.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---example)`--example` _name_…\n\nDocument the specified example. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---examples)`--examples`\n\nDocument all example targets.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---test)`--test` _name_…\n\nDocument the specified integration test. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---tests)`--tests`\n\nDocument all targets in test mode that have the `test = true` manifest flag set. By default this includes the library and binaries built as unittests, and integration tests. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a unittest, and once as a dependency for binaries, integration tests, etc.). Targets may be enabled or disabled by setting the `test` flag in the manifest settings for the target.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---bench)`--bench` _name_…\n\nDocument the specified benchmark. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---benches)`--benches`\n\nDocument all targets in benchmark mode that have the `bench = true` manifest flag set. By default this includes the library and binaries built as benchmarks, and bench targets. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a benchmark, and once as a dependency for binaries, benchmarks, etc.). Targets may be enabled or disabled by setting the `bench` flag in the manifest settings for the target.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---all-targets)`--all-targets`\n\nDocument all targets. This is equivalent to specifying `--lib --bins --tests --benches --examples`.\n\n### [Feature Selection](#feature-selection-7)\n\nThe feature flags allow you to control which features are enabled. When no feature options are given, the `default` feature is activated for every selected package.\n\nSee [the features documentation](about:blank/reference/features.html#command-line-feature-options) for more details.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc--F)`-F` _features_\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---features)`--features` _features_\n\nSpace or comma separated list of features to activate. Features of workspace members may be enabled with `package-name/feature-name` syntax. This flag may be specified multiple times, which enables all specified features.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---all-features)`--all-features`\n\nActivate all available features of all selected packages.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---no-default-features)`--no-default-features`\n\nDo not activate the `default` feature of the selected packages.\n\n### [Compilation Options](#compilation-options-7)\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---target)`--target` _triple_\n\nDocument for the given architecture. The default is the host architecture. The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a list of supported targets. This flag may be specified multiple times.\n\nThis may also be specified with the `build.target` [config value](commands/../reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the [build cache](commands/../guide/build-cache.html) documentation for more details.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc--r)`-r`\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---release)`--release`\n\nDocument optimized artifacts with the `release` profile. See also the `--profile` option for choosing a specific profile by name.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---profile)`--profile` _name_\n\nDocument with the given profile. See [the reference](commands/../reference/profiles.html) for more details on profiles.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---timings=fmts)`--timings=`_fmts_\n\nOutput information how long each compilation takes, and track concurrency information over time. Accepts an optional comma-separated list of output formats; `--timings` without an argument will default to `--timings=html`. Specifying an output format (rather than the default) is unstable and requires `-Zunstable-options`. Valid output formats:\n\n-   `html` (unstable, requires `-Zunstable-options`): Write a human-readable file `cargo-timing.html` to the `target/cargo-timings` directory with a report of the compilation. Also write a report to the same directory with a timestamp in the filename if you want to look at older runs. HTML output is suitable for human consumption only, and does not provide machine-readable timing data.\n-   `json` (unstable, requires `-Zunstable-options`): Emit machine-readable JSON information about timing information.\n\n### [Output Options](#output-options-7)\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---target-dir)`--target-dir` _directory_\n\nDirectory for all generated artifacts and intermediate files. May also be specified with the `CARGO_TARGET_DIR` environment variable, or the `build.target-dir` [config value](commands/../reference/config.html). Defaults to `target` in the root of the workspace.\n\n### [Display Options](#display-options-10)\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc--v)`-v`\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc--q)`-q`\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---message-format)`--message-format` _fmt_\n\nThe output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n-   `human` (default): Display in a human-readable text format. Conflicts with `short` and `json`.\n-   `short`: Emit shorter, human-readable text messages. Conflicts with `human` and `json`.\n-   `json`: Emit JSON messages to stdout. See [the reference](about:blank/reference/external-tools.html#json-messages) for more details. Conflicts with `human` and `short`.\n-   `json-diagnostic-short`: Ensure the `rendered` field of JSON messages contains the “short” rendering from rustc. Cannot be used with `human` or `short`.\n-   `json-diagnostic-rendered-ansi`: Ensure the `rendered` field of JSON messages contains embedded ANSI color codes for respecting rustc’s default color scheme. Cannot be used with `human` or `short`.\n-   `json-render-diagnostics`: Instruct Cargo to not include rustc diagnostics in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with `human` or `short`.\n\n### [Manifest Options](#manifest-options-10)\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---ignore-rust-version)`--ignore-rust-version`\n\nIgnore `rust-version` specification in packages.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-10)\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc--h)`-h`\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n### [Miscellaneous Options](#miscellaneous-options-7)\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc--j)`-j` _N_\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---jobs)`--jobs` _N_\n\nNumber of parallel jobs to run. May also be specified with the `build.jobs` [config value](commands/../reference/config.html). Defaults to the number of logical CPUs. If negative, it sets the maximum number of parallel jobs to the number of logical CPUs plus provided value. If a string `default` is provided, it sets the value back to defaults. Should not be 0.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---keep-going)`--keep-going`\n\nBuild as many crates in the dependency graph as possible, rather than aborting the build on the first one that fails to build.\n\nFor example if the current package depends on dependencies `fails` and `works`, one of which fails to build, `cargo rustdoc -j1` may or may not build the one that succeeds (depending on which one of the two builds Cargo picked to run first), whereas `cargo rustdoc -j1 --keep-going` would definitely run both builds, even if the one run first fails.\n\n[](about:blank/commands/cargo-rustdoc.html#option-cargo-rustdoc---output-format)`--output-format`\n\nThe output type for the documentation emitted. Valid values:\n\n-   `html` (default): Emit the documentation in HTML format.\n-   `json`: Emit the documentation in the [experimental JSON format](https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc_json_types).\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable.\n\n## [ENVIRONMENT](#environment-10)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-10)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-13)\n\n1.  Build documentation with custom CSS included from a given file:\n    \n    ```\n    cargo rustdoc --lib -- --extend-css extra.css\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-12)\n\n[cargo(1)](commands/cargo.html), [cargo-doc(1)](commands/cargo-doc.html), [rustdoc(1)](https://doc.rust-lang.org/rustdoc/index.html)\n\n## [cargo-test(1)](#cargo-test1)\n\n## [NAME](#name-13)\n\ncargo-test — Execute unit and integration tests of a package\n\n## [SYNOPSIS](#synopsis-13)\n\n`cargo test` \\[_options_\\] \\[_testname_\\] \\[`--` _test-options_\\]\n\n## [DESCRIPTION](#description-13)\n\nCompile and execute unit, integration, and documentation tests.\n\nThe test filtering argument `TESTNAME` and all the arguments following the two dashes (`--`) are passed to the test binaries and thus to _libtest_ (rustc’s built in unit-test and micro-benchmarking framework). If you’re passing arguments to both Cargo and the binary, the ones after `--` go to the binary, the ones before go to Cargo. For details about libtest’s arguments see the output of `cargo test -- --help` and check out the rustc book’s chapter on how tests work at [https://doc.rust-lang.org/rustc/tests/index.html](https://doc.rust-lang.org/rustc/tests/index.html).\n\nAs an example, this will filter for tests with `foo` in their name and run them on 3 threads in parallel:\n\n```\ncargo test foo -- --test-threads 3\n\n```\n\nTests are built with the `--test` option to `rustc` which creates a special executable by linking your code with libtest. The executable automatically runs all functions annotated with the `#[test]` attribute in multiple threads. `#[bench]` annotated functions will also be run with one iteration to verify that they are functional.\n\nIf the package contains multiple test targets, each target compiles to a special executable as aforementioned, and then is run serially.\n\nThe libtest harness may be disabled by setting `harness = false` in the target manifest settings, in which case your code will need to provide its own `main` function to handle running tests.\n\n### [Documentation tests](#documentation-tests)\n\nDocumentation tests are also run by default, which is handled by `rustdoc`. It extracts code samples from documentation comments of the library target, and then executes them.\n\nDifferent from normal test targets, each code block compiles to a doctest executable on the fly with `rustc`. These executables run in parallel in separate processes. The compilation of a code block is in fact a part of test function controlled by libtest, so some options such as `--jobs` might not take effect. Note that this execution model of doctests is not guaranteed and may change in the future; beware of depending on it.\n\nSee the [rustdoc book](https://doc.rust-lang.org/rustdoc/) for more information on writing doc tests.\n\n### [Working directory of tests](#working-directory-of-tests)\n\nThe working directory when running each unit and integration test is set to the root directory of the package the test belongs to. Setting the working directory of tests to the package’s root directory makes it possible for tests to reliably access the package’s files using relative paths, regardless from where `cargo test` was executed from.\n\nFor documentation tests, the working directory when invoking `rustdoc` is set to the workspace root directory, and is also the directory `rustdoc` uses as the compilation directory of each documentation test. The working directory when running each documentation test is set to the root directory of the package the test belongs to, and is controlled via `rustdoc`’s `--test-run-directory` option.\n\n## [OPTIONS](#options-12)\n\n### [Test Options](#test-options)\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---no-run)`--no-run`\n\nCompile, but don’t run tests.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---no-fail-fast)`--no-fail-fast`\n\nRun all tests regardless of failure. Without this flag, Cargo will exit after the first executable fails. The Rust test harness will run all tests within the executable to completion, this flag only applies to the executable as a whole.\n\n### [Package Selection](#package-selection-10)\n\nBy default, when no package selection options are given, the packages selected depend on the selected manifest file (based on the current working directory if `--manifest-path` is not given). If the manifest is the root of a workspace then the workspaces default members are selected, otherwise only the package defined by the manifest will be selected.\n\nThe default members of a workspace can be set explicitly with the `workspace.default-members` key in the root manifest. If this is not set, a virtual workspace will include all workspace members (equivalent to passing `--workspace`), and a non-virtual workspace will include only the root crate itself.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test--p)`-p` _spec_…\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---package)`--package` _spec_…\n\nTest only the specified packages. See [cargo-pkgid(1)](commands/cargo-pkgid.html) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---workspace)`--workspace`\n\nTest all members in the workspace.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---all)`--all`\n\nDeprecated alias for `--workspace`.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---exclude)`--exclude` _SPEC_…\n\nExclude the specified packages. Must be used in conjunction with the `--workspace` flag. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n### [Target Selection](#target-selection-8)\n\nWhen no target selection options are given, `cargo test` will build the following targets of the selected packages:\n\n-   lib — used to link with binaries, examples, integration tests, and doc tests\n-   bins (only if integration tests are built and required features are available)\n-   examples — to ensure they compile\n-   lib as a unit test\n-   bins as unit tests\n-   integration tests\n-   doc tests for the lib target\n\nThe default behavior can be changed by setting the `test` flag for the target in the manifest settings. Setting examples to `test = true` will build and run the example as a test, replacing the example’s `main` function with the libtest harness. If you don’t want the `main` function replaced, also include `harness = false`, in which case the example will be built and executed as-is.\n\nSetting targets to `test = false` will stop them from being tested by default. Target selection options that take a target by name (such as `--example foo`) ignore the `test` flag and will always test the given target.\n\nDoc tests for libraries may be disabled by setting `doctest = false` for the library in the manifest.\n\nSee [Configuring a target](about:blank/reference/cargo-targets.html#configuring-a-target) for more information on per-target settings.\n\nBinary targets are automatically built if there is an integration test or benchmark being selected to test. This allows an integration test to execute the binary to exercise and test its behavior. The `CARGO_BIN_EXE_<name>` [environment variable](about:blank/reference/environment-variables.html#environment-variables-cargo-sets-for-crates) is set when the integration test is built so that it can use the [`env` macro](https://doc.rust-lang.org/std/macro.env.html) to locate the executable.\n\nPassing target selection flags will test only the specified targets.\n\nNote that `--bin`, `--example`, `--test` and `--bench` flags also support common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each glob pattern.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---lib)`--lib`\n\nTest the package’s library.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---bin)`--bin` _name_…\n\nTest the specified binary. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---bins)`--bins`\n\nTest all binary targets.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---example)`--example` _name_…\n\nTest the specified example. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---examples)`--examples`\n\nTest all example targets.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---test)`--test` _name_…\n\nTest the specified integration test. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---tests)`--tests`\n\nTest all targets in test mode that have the `test = true` manifest flag set. By default this includes the library and binaries built as unittests, and integration tests. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a unittest, and once as a dependency for binaries, integration tests, etc.). Targets may be enabled or disabled by setting the `test` flag in the manifest settings for the target.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---bench)`--bench` _name_…\n\nTest the specified benchmark. This flag may be specified multiple times and supports common Unix glob patterns.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---benches)`--benches`\n\nTest all targets in benchmark mode that have the `bench = true` manifest flag set. By default this includes the library and binaries built as benchmarks, and bench targets. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a benchmark, and once as a dependency for binaries, benchmarks, etc.). Targets may be enabled or disabled by setting the `bench` flag in the manifest settings for the target.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---all-targets)`--all-targets`\n\nTest all targets. This is equivalent to specifying `--lib --bins --tests --benches --examples`.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---doc)`--doc`\n\nTest only the library’s documentation. This cannot be mixed with other target options.\n\n### [Feature Selection](#feature-selection-8)\n\nThe feature flags allow you to control which features are enabled. When no feature options are given, the `default` feature is activated for every selected package.\n\nSee [the features documentation](about:blank/reference/features.html#command-line-feature-options) for more details.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test--F)`-F` _features_\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---features)`--features` _features_\n\nSpace or comma separated list of features to activate. Features of workspace members may be enabled with `package-name/feature-name` syntax. This flag may be specified multiple times, which enables all specified features.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---all-features)`--all-features`\n\nActivate all available features of all selected packages.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---no-default-features)`--no-default-features`\n\nDo not activate the `default` feature of the selected packages.\n\n### [Compilation Options](#compilation-options-8)\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---target)`--target` _triple_\n\nTest for the given architecture. The default is the host architecture. The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a list of supported targets. This flag may be specified multiple times.\n\nThis may also be specified with the `build.target` [config value](commands/../reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the [build cache](commands/../guide/build-cache.html) documentation for more details.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test--r)`-r`\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---release)`--release`\n\nTest optimized artifacts with the `release` profile. See also the `--profile` option for choosing a specific profile by name.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---profile)`--profile` _name_\n\nTest with the given profile. See [the reference](commands/../reference/profiles.html) for more details on profiles.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---timings=fmts)`--timings=`_fmts_\n\nOutput information how long each compilation takes, and track concurrency information over time. Accepts an optional comma-separated list of output formats; `--timings` without an argument will default to `--timings=html`. Specifying an output format (rather than the default) is unstable and requires `-Zunstable-options`. Valid output formats:\n\n-   `html` (unstable, requires `-Zunstable-options`): Write a human-readable file `cargo-timing.html` to the `target/cargo-timings` directory with a report of the compilation. Also write a report to the same directory with a timestamp in the filename if you want to look at older runs. HTML output is suitable for human consumption only, and does not provide machine-readable timing data.\n-   `json` (unstable, requires `-Zunstable-options`): Emit machine-readable JSON information about timing information.\n\n### [Output Options](#output-options-8)\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---target-dir)`--target-dir` _directory_\n\nDirectory for all generated artifacts and intermediate files. May also be specified with the `CARGO_TARGET_DIR` environment variable, or the `build.target-dir` [config value](commands/../reference/config.html). Defaults to `target` in the root of the workspace.\n\n### [Display Options](#display-options-11)\n\nBy default the Rust test harness hides output from test execution to keep results readable. Test output can be recovered (e.g., for debugging) by passing `--nocapture` to the test binaries:\n\n```\ncargo test -- --nocapture\n\n```\n\n[](about:blank/commands/cargo-test.html#option-cargo-test--v)`-v`\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-test.html#option-cargo-test--q)`-q`\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---message-format)`--message-format` _fmt_\n\nThe output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n-   `human` (default): Display in a human-readable text format. Conflicts with `short` and `json`.\n-   `short`: Emit shorter, human-readable text messages. Conflicts with `human` and `json`.\n-   `json`: Emit JSON messages to stdout. See [the reference](about:blank/reference/external-tools.html#json-messages) for more details. Conflicts with `human` and `short`.\n-   `json-diagnostic-short`: Ensure the `rendered` field of JSON messages contains the “short” rendering from rustc. Cannot be used with `human` or `short`.\n-   `json-diagnostic-rendered-ansi`: Ensure the `rendered` field of JSON messages contains embedded ANSI color codes for respecting rustc’s default color scheme. Cannot be used with `human` or `short`.\n-   `json-render-diagnostics`: Instruct Cargo to not include rustc diagnostics in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with `human` or `short`.\n\n### [Manifest Options](#manifest-options-11)\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---ignore-rust-version)`--ignore-rust-version`\n\nIgnore `rust-version` specification in packages.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-11)\n\n[](about:blank/commands/cargo-test.html#option-cargo-test-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-test.html#option-cargo-test--h)`-h`\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n### [Miscellaneous Options](#miscellaneous-options-8)\n\nThe `--jobs` argument affects the building of the test executable but does not affect how many threads are used when running the tests. The Rust test harness includes an option to control the number of threads used:\n\n```\ncargo test -j 2 -- --test-threads=2\n\n```\n\n[](about:blank/commands/cargo-test.html#option-cargo-test--j)`-j` _N_\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---jobs)`--jobs` _N_\n\nNumber of parallel jobs to run. May also be specified with the `build.jobs` [config value](commands/../reference/config.html). Defaults to the number of logical CPUs. If negative, it sets the maximum number of parallel jobs to the number of logical CPUs plus provided value. If a string `default` is provided, it sets the value back to defaults. Should not be 0.\n\n[](about:blank/commands/cargo-test.html#option-cargo-test---future-incompat-report)`--future-incompat-report`\n\nDisplays a future-incompat report for any future-incompatible warnings produced during execution of this command\n\nSee [cargo-report(1)](commands/cargo-report.html)\n\nWhile `cargo test` involves compilation, it does not provide a `--keep-going` flag. Use `--no-fail-fast` to run as many tests as possible without stopping at the first failure. To “compile” as many tests as possible, use `--tests` to build test binaries separately. For example:\n\n```\ncargo build --tests --keep-going\ncargo test --tests --no-fail-fast\n\n```\n\n## [ENVIRONMENT](#environment-11)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-11)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-14)\n\n1.  Execute all the unit and integration tests of the current package:\n    \n    ```\n    cargo test\n    \n    ```\n    \n2.  Run only tests whose names match against a filter string:\n    \n    ```\n    cargo test name_filter\n    \n    ```\n    \n3.  Run only a specific test within a specific integration test:\n    \n    ```\n    cargo test --test int_test_name -- modname::test_name\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-13)\n\n[cargo(1)](commands/cargo.html), [cargo-bench(1)](commands/cargo-bench.html), [types of tests](about:blank/reference/cargo-targets.html#tests), [how to write tests](https://doc.rust-lang.org/rustc/tests/index.html)\n\n## [cargo-report(1)](#cargo-report1)\n\n## [NAME](#name-14)\n\ncargo-report — Generate and display various kinds of reports\n\n## [SYNOPSIS](#synopsis-14)\n\n`cargo report` _type_ \\[_options_\\]\n\n### [DESCRIPTION](#description-14)\n\nDisplays a report of the given _type_ — currently, only `future-incompat` is supported\n\n## [OPTIONS](#options-13)\n\n[](about:blank/commands/cargo-report.html#option-cargo-report---id)`--id` _id_\n\nShow the report with the specified Cargo-generated id\n\n[](about:blank/commands/cargo-report.html#option-cargo-report--p)`-p` _spec_…\n\n[](about:blank/commands/cargo-report.html#option-cargo-report---package)`--package` _spec_…\n\nOnly display a report for the specified package\n\n## [EXAMPLES](#examples-15)\n\n1.  Display the latest future-incompat report:\n    \n    ```\n    cargo report future-incompat\n    \n    ```\n    \n2.  Display the latest future-incompat report for a specific package:\n    \n    ```\n    cargo report future-incompat --package my-dep:0.0.1\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-14)\n\n[Future incompat report](commands/../reference/future-incompat-report.html)\n\n[cargo(1)](commands/cargo.html)\n\n## [Manifest Commands](#manifest-commands-2)\n\n-   [cargo add](commands/cargo-add.html)\n-   [cargo generate-lockfile](commands/cargo-generate-lockfile.html)\n-   [cargo locate-project](commands/cargo-locate-project.html)\n-   [cargo metadata](commands/cargo-metadata.html)\n-   [cargo pkgid](commands/cargo-pkgid.html)\n-   [cargo remove](commands/cargo-remove.html)\n-   [cargo tree](commands/cargo-tree.html)\n-   [cargo update](commands/cargo-update.html)\n-   [cargo vendor](commands/cargo-vendor.html)\n-   [cargo verify-project](commands/cargo-verify-project.html)\n\n## [cargo-add(1)](#cargo-add1)\n\n## [NAME](#name-15)\n\ncargo-add — Add dependencies to a Cargo.toml manifest file\n\n## [SYNOPSIS](#synopsis-15)\n\n`cargo add` \\[_options_\\] _crate_…  \n`cargo add` \\[_options_\\] `--path` _path_  \n`cargo add` \\[_options_\\] `--git` _url_ \\[_crate_…\\]\n\n## [DESCRIPTION](#description-15)\n\nThis command can add or modify dependencies.\n\nThe source for the dependency can be specified with:\n\n-   _crate_`@`_version_: Fetch from a registry with a version constraint of “_version_”\n-   `--path` _path_: Fetch from the specified _path_\n-   `--git` _url_: Pull from a git repo at _url_\n\nIf no source is specified, then a best effort will be made to select one, including:\n\n-   Existing dependencies in other tables (like `dev-dependencies`)\n-   Workspace members\n-   Latest release in the registry\n\nWhen you add a package that is already present, the existing entry will be updated with the flags specified.\n\nUpon successful invocation, the enabled (`+`) and disabled (`-`) [features](commands/../reference/features.html) of the specified dependency will be listed in the command’s output.\n\n## [OPTIONS](#options-14)\n\n### [Source options](#source-options)\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---git)`--git` _url_\n\n[Git URL to add the specified crate from](about:blank/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories).\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---branch)`--branch` _branch_\n\nBranch to use when adding from git.\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---tag)`--tag` _tag_\n\nTag to use when adding from git.\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---rev)`--rev` _sha_\n\nSpecific commit to use when adding from git.\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---path)`--path` _path_\n\n[Filesystem path](about:blank/reference/specifying-dependencies.html#specifying-path-dependencies) to local crate to add.\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---registry)`--registry` _registry_\n\nName of the registry to use. Registry names are defined in [Cargo config files](commands/../reference/config.html). If not specified, the default registry is used, which is defined by the `registry.default` config key which defaults to `crates-io`.\n\n### [Section options](#section-options)\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---dev)`--dev`\n\nAdd as a [development dependency](about:blank/reference/specifying-dependencies.html#development-dependencies).\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---build)`--build`\n\nAdd as a [build dependency](about:blank/reference/specifying-dependencies.html#build-dependencies).\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---target)`--target` _target_\n\nAdd as a dependency to the [given target platform](about:blank/reference/specifying-dependencies.html#platform-specific-dependencies).\n\nTo avoid unexpected shell expansions, you may use quotes around each target, e.g., `--target 'cfg(unix)'`.\n\n### [Dependency options](#dependency-options)\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---dry-run)`--dry-run`\n\nDon’t actually write the manifest\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---rename)`--rename` _name_\n\n[Rename](about:blank/reference/specifying-dependencies.html#renaming-dependencies-in-cargotoml) the dependency.\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---optional)`--optional`\n\nMark the dependency as [optional](about:blank/reference/features.html#optional-dependencies).\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---no-optional)`--no-optional`\n\nMark the dependency as [required](about:blank/reference/features.html#optional-dependencies).\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---public)`--public`\n\nMark the dependency as public.\n\nThe dependency can be referenced in your library’s public API.\n\n[Unstable (nightly-only)](about:blank/reference/unstable.html#public-dependency)\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---no-public)`--no-public`\n\nMark the dependency as private.\n\nWhile you can use the crate in your implementation, it cannot be referenced in your public API.\n\n[Unstable (nightly-only)](about:blank/reference/unstable.html#public-dependency)\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---no-default-features)`--no-default-features`\n\nDisable the [default features](about:blank/reference/features.html#dependency-features).\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---default-features)`--default-features`\n\nRe-enable the [default features](about:blank/reference/features.html#dependency-features).\n\n[](about:blank/commands/cargo-add.html#option-cargo-add--F)`-F` _features_\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---features)`--features` _features_\n\nSpace or comma separated list of [features to activate](about:blank/reference/features.html#dependency-features). When adding multiple crates, the features for a specific crate may be enabled with `package-name/feature-name` syntax. This flag may be specified multiple times, which enables all specified features.\n\n### [Display Options](#display-options-12)\n\n[](about:blank/commands/cargo-add.html#option-cargo-add--v)`-v`\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-add.html#option-cargo-add--q)`-q`\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Manifest Options](#manifest-options-12)\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-add.html#option-cargo-add--p)`-p` _spec_\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---package)`--package` _spec_\n\nAdd dependencies to only the specified package.\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---ignore-rust-version)`--ignore-rust-version`\n\nIgnore `rust-version` specification in packages.\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-12)\n\n[](about:blank/commands/cargo-add.html#option-cargo-add-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-add.html#option-cargo-add--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-add.html#option-cargo-add--h)`-h`\n\n[](about:blank/commands/cargo-add.html#option-cargo-add---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-add.html#option-cargo-add--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-12)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-12)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-16)\n\n1.  Add `regex` as a dependency\n    \n    ```\n    cargo add regex\n    \n    ```\n    \n2.  Add `trybuild` as a dev-dependency\n    \n    ```\n    cargo add --dev trybuild\n    \n    ```\n    \n3.  Add an older version of `nom` as a dependency\n    \n    ```\n    cargo add nom@5\n    \n    ```\n    \n4.  Add support for serializing data structures to json with `derive`s\n    \n    ```\n    cargo add serde serde_json -F serde/derive\n    \n    ```\n    \n5.  Add `windows` as a platform specific dependency on `cfg(windows)`\n    \n    ```\n    cargo add windows --target 'cfg(windows)'\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-15)\n\n[cargo(1)](commands/cargo.html), [cargo-remove(1)](commands/cargo-remove.html)\n\n## [cargo-generate-lockfile(1)](#cargo-generate-lockfile1)\n\n## [NAME](#name-16)\n\ncargo-generate-lockfile — Generate the lockfile for a package\n\n## [SYNOPSIS](#synopsis-16)\n\n`cargo generate-lockfile` \\[_options_\\]\n\n## [DESCRIPTION](#description-16)\n\nThis command will create the `Cargo.lock` lockfile for the current package or workspace. If the lockfile already exists, it will be rebuilt with the latest available version of every package.\n\nSee also [cargo-update(1)](commands/cargo-update.html) which is also capable of creating a `Cargo.lock` lockfile and has more options for controlling update behavior.\n\n## [OPTIONS](#options-15)\n\n### [Display Options](#display-options-13)\n\n[](about:blank/commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile--v)`-v`\n\n[](about:blank/commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile--q)`-q`\n\n[](about:blank/commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Manifest Options](#manifest-options-13)\n\n[](about:blank/commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---ignore-rust-version)`--ignore-rust-version`\n\nIgnore `rust-version` specification in packages.\n\n[](about:blank/commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-13)\n\n[](about:blank/commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile--h)`-h`\n\n[](about:blank/commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-13)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-13)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-17)\n\n1.  Create or update the lockfile for the current package or workspace:\n    \n    ```\n    cargo generate-lockfile\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-16)\n\n[cargo(1)](commands/cargo.html), [cargo-update(1)](commands/cargo-update.html)\n\n## [cargo-locate-project(1)](#cargo-locate-project1)\n\n## [NAME](#name-17)\n\ncargo-locate-project — Print a JSON representation of a Cargo.toml file’s location\n\n## [SYNOPSIS](#synopsis-17)\n\n`cargo locate-project` \\[_options_\\]\n\n## [DESCRIPTION](#description-17)\n\nThis command will print a JSON object to stdout with the full path to the manifest. The manifest is found by searching upward for a file named `Cargo.toml` starting from the current working directory.\n\nIf the project happens to be a part of a workspace, the manifest of the project, rather than the workspace root, is output. This can be overridden by the `--workspace` flag. The root workspace is found by traversing further upward or by using the field `package.workspace` after locating the manifest of a workspace member.\n\n## [OPTIONS](#options-16)\n\n[](about:blank/commands/cargo-locate-project.html#option-cargo-locate-project---workspace)`--workspace`\n\nLocate the `Cargo.toml` at the root of the workspace, as opposed to the current workspace member.\n\n### [Display Options](#display-options-14)\n\n[](about:blank/commands/cargo-locate-project.html#option-cargo-locate-project---message-format)`--message-format` _fmt_\n\nThe representation in which to print the project location. Valid values:\n\n-   `json` (default): JSON object with the path under the key “root”.\n-   `plain`: Just the path.\n\n[](about:blank/commands/cargo-locate-project.html#option-cargo-locate-project--v)`-v`\n\n[](about:blank/commands/cargo-locate-project.html#option-cargo-locate-project---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-locate-project.html#option-cargo-locate-project--q)`-q`\n\n[](about:blank/commands/cargo-locate-project.html#option-cargo-locate-project---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-locate-project.html#option-cargo-locate-project---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Manifest Options](#manifest-options-14)\n\n[](about:blank/commands/cargo-locate-project.html#option-cargo-locate-project---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n### [Common Options](#common-options-14)\n\n[](about:blank/commands/cargo-locate-project.html#option-cargo-locate-project-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-locate-project.html#option-cargo-locate-project---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-locate-project.html#option-cargo-locate-project--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-locate-project.html#option-cargo-locate-project--h)`-h`\n\n[](about:blank/commands/cargo-locate-project.html#option-cargo-locate-project---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-locate-project.html#option-cargo-locate-project--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-14)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-14)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-18)\n\n1.  Display the path to the manifest based on the current directory:\n    \n    ```\n    cargo locate-project\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-17)\n\n[cargo(1)](commands/cargo.html), [cargo-metadata(1)](commands/cargo-metadata.html)\n\n## [NAME](#name-18)\n\ncargo-metadata — Machine-readable metadata about the current package\n\n## [SYNOPSIS](#synopsis-18)\n\n`cargo metadata` \\[_options_\\]\n\n## [DESCRIPTION](#description-18)\n\nOutput JSON to stdout containing information about the workspace members and resolved dependencies of the current package.\n\nThe format of the output is subject to change in futures versions of Cargo. It is recommended to include the `--format-version` flag to future-proof your code to ensure the output is in the format you are expecting. For more on the expectations, see [“Compatibility”](about:blank/commands/cargo-metadata.html#compatibility).\n\nSee the [cargo\\_metadata crate](https://crates.io/crates/cargo_metadata) for a Rust API for reading the metadata.\n\n## [OUTPUT FORMAT](#output-format)\n\n### [Compatibility](#compatibility)\n\nWithin the same output format version, the compatibility is maintained, except some scenarios. The following is a non-exhaustive list of changes that are not considersed as incompatible:\n\n-   **Adding new fields** — New fields will be added when needed. Reserving this helps Cargo evolve without bumping the format version too often.\n-   **Adding new values for enum-like fields** — Same as adding new fields. It keeps metadata evolving without stagnation.\n-   **Changing opaque representations** — The inner representations of some fields are implementation details. For example, fields related to “Source ID” are treated as opaque identifiers to differentiate packages or sources. Consumers shouldn’t rely on those representations unless specified.\n\n### [JSON format](#json-format)\n\nThe JSON output has the following format:\n\n```javascript\n{\n    /* Array of all packages in the workspace.\n       It also includes all feature-enabled dependencies unless --no-deps is used.\n    */\n    \"packages\": [\n        {\n            /* The name of the package. */\n            \"name\": \"my-package\",\n            /* The version of the package. */\n            \"version\": \"0.1.0\",\n            /* The Package ID for referring to the\n               package within the document and as the `--package` argument to many commands\n            */\n            \"id\": \"file:///path/to/my-package#0.1.0\",\n            /* The license value from the manifest, or null. */\n            \"license\": \"MIT/Apache-2.0\",\n            /* The license-file value from the manifest, or null. */\n            \"license_file\": \"LICENSE\",\n            /* The description value from the manifest, or null. */\n            \"description\": \"Package description.\",\n            /* The source ID of the package, an \"opaque\" identifier representing\n               where a package is retrieved from. See \"Compatibility\" above for\n               the stability guarantee.\n\n               This is null for path dependencies and workspace members.\n\n               For other dependencies, it is a string with the format:\n               - \"registry+URL\" for registry-based dependencies.\n                 Example: \"registry+https://github.com/rust-lang/crates.io-index\"\n               - \"git+URL\" for git-based dependencies.\n                 Example: \"git+https://github.com/rust-lang/cargo?rev=5e85ba14aaa20f8133863373404cb0af69eeef2c#5e85ba14aaa20f8133863373404cb0af69eeef2c\"\n               - \"sparse+URL\" for dependencies from a sparse registry\n                 Example: \"sparse+https://my-sparse-registry.org\"\n\n               The value after the `+` is not explicitly defined, and may change\n               between versions of Cargo and may not directly correlate to other\n               things, such as registry definitions in a config file. New source\n               kinds may be added in the future which will have different `+`\n               prefixed identifiers.\n            */\n            \"source\": null,\n            /* Array of dependencies declared in the package's manifest. */\n            \"dependencies\": [\n                {\n                    /* The name of the dependency. */\n                    \"name\": \"bitflags\",\n                    /* The source ID of the dependency. May be null, see\n                       description for the package source.\n                    */\n                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n                    /* The version requirement for the dependency.\n                       Dependencies without a version requirement have a value of \"*\".\n                    */\n                    \"req\": \"^1.0\",\n                    /* The dependency kind.\n                       \"dev\", \"build\", or null for a normal dependency.\n                    */\n                    \"kind\": null,\n                    /* If the dependency is renamed, this is the new name for\n                       the dependency as a string.  null if it is not renamed.\n                    */\n                    \"rename\": null,\n                    /* Boolean of whether or not this is an optional dependency. */\n                    \"optional\": false,\n                    /* Boolean of whether or not default features are enabled. */\n                    \"uses_default_features\": true,\n                    /* Array of features enabled. */\n                    \"features\": [],\n                    /* The target platform for the dependency.\n                       null if not a target dependency.\n                    */\n                    \"target\": \"cfg(windows)\",\n                    /* The file system path for a local path dependency.\n                       not present if not a path dependency.\n                    */\n                    \"path\": \"/path/to/dep\",\n                    /* A string of the URL of the registry this dependency is from.\n                       If not specified or null, the dependency is from the default\n                       registry (crates.io).\n                    */\n                    \"registry\": null\n                }\n            ],\n            /* Array of Cargo targets. */\n            \"targets\": [\n                {\n                    /* Array of target kinds.\n                       - lib targets list the `crate-type` values from the\n                         manifest such as \"lib\", \"rlib\", \"dylib\",\n                         \"proc-macro\", etc. (default [\"lib\"])\n                       - binary is [\"bin\"]\n                       - example is [\"example\"]\n                       - integration test is [\"test\"]\n                       - benchmark is [\"bench\"]\n                       - build script is [\"custom-build\"]\n                    */\n                    \"kind\": [\n                        \"bin\"\n                    ],\n                    /* Array of crate types.\n                       - lib and example libraries list the `crate-type` values\n                         from the manifest such as \"lib\", \"rlib\", \"dylib\",\n                         \"proc-macro\", etc. (default [\"lib\"])\n                       - all other target kinds are [\"bin\"]\n                    */\n                    \"crate_types\": [\n                        \"bin\"\n                    ],\n                    /* The name of the target.\n                       For lib targets, dashes will be replaced with underscores.\n                    */\n                    \"name\": \"my-package\",\n                    /* Absolute path to the root source file of the target. */\n                    \"src_path\": \"/path/to/my-package/src/main.rs\",\n                    /* The Rust edition of the target.\n                       Defaults to the package edition.\n                    */\n                    \"edition\": \"2018\",\n                    /* Array of required features.\n                       This property is not included if no required features are set.\n                    */\n                    \"required-features\": [\"feat1\"],\n                    /* Whether the target should be documented by `cargo doc`. */\n                    \"doc\": true,\n                    /* Whether or not this target has doc tests enabled, and\n                       the target is compatible with doc testing.\n                    */\n                    \"doctest\": false,\n                    /* Whether or not this target should be built and run with `--test`\n                    */\n                    \"test\": true\n                }\n            ],\n            /* Set of features defined for the package.\n               Each feature maps to an array of features or dependencies it\n               enables.\n            */\n            \"features\": {\n                \"default\": [\n                    \"feat1\"\n                ],\n                \"feat1\": [],\n                \"feat2\": []\n            },\n            /* Absolute path to this package's manifest. */\n            \"manifest_path\": \"/path/to/my-package/Cargo.toml\",\n            /* Package metadata.\n               This is null if no metadata is specified.\n            */\n            \"metadata\": {\n                \"docs\": {\n                    \"rs\": {\n                        \"all-features\": true\n                    }\n                }\n            },\n            /* List of registries to which this package may be published.\n               Publishing is unrestricted if null, and forbidden if an empty array. */\n            \"publish\": [\n                \"crates-io\"\n            ],\n            /* Array of authors from the manifest.\n               Empty array if no authors specified.\n            */\n            \"authors\": [\n                \"Jane Doe <user@example.com>\"\n            ],\n            /* Array of categories from the manifest. */\n            \"categories\": [\n                \"command-line-utilities\"\n            ],\n            /* Optional string that is the default binary picked by cargo run. */\n            \"default_run\": null,\n            /* Optional string that is the minimum supported rust version */\n            \"rust_version\": \"1.56\",\n            /* Array of keywords from the manifest. */\n            \"keywords\": [\n                \"cli\"\n            ],\n            /* The readme value from the manifest or null if not specified. */\n            \"readme\": \"README.md\",\n            /* The repository value from the manifest or null if not specified. */\n            \"repository\": \"https://github.com/rust-lang/cargo\",\n            /* The homepage value from the manifest or null if not specified. */\n            \"homepage\": \"https://rust-lang.org\",\n            /* The documentation value from the manifest or null if not specified. */\n            \"documentation\": \"https://doc.rust-lang.org/stable/std\",\n            /* The default edition of the package.\n               Note that individual targets may have different editions.\n            */\n            \"edition\": \"2018\",\n            /* Optional string that is the name of a native library the package\n               is linking to.\n            */\n            \"links\": null,\n        }\n    ],\n    /* Array of members of the workspace.\n       Each entry is the Package ID for the package.\n    */\n    \"workspace_members\": [\n        \"file:///path/to/my-package#0.1.0\",\n    ],\n    /* Array of default members of the workspace.\n       Each entry is the Package ID for the package.\n    */\n    \"workspace_default_members\": [\n        \"file:///path/to/my-package#0.1.0\",\n    ],\n    // The resolved dependency graph for the entire workspace. The enabled\n    // features are based on the enabled features for the \"current\" package.\n    // Inactivated optional dependencies are not listed.\n    //\n    // This is null if --no-deps is specified.\n    //\n    // By default, this includes all dependencies for all target platforms.\n    // The `--filter-platform` flag may be used to narrow to a specific\n    // target triple.\n    \"resolve\": {\n        /* Array of nodes within the dependency graph.\n           Each node is a package.\n        */\n        \"nodes\": [\n            {\n                /* The Package ID of this node. */\n                \"id\": \"file:///path/to/my-package#0.1.0\",\n                /* The dependencies of this package, an array of Package IDs. */\n                \"dependencies\": [\n                    \"https://github.com/rust-lang/crates.io-index#bitflags@1.0.4\"\n                ],\n                /* The dependencies of this package. This is an alternative to\n                   \"dependencies\" which contains additional information. In\n                   particular, this handles renamed dependencies.\n                */\n                \"deps\": [\n                    {\n                        /* The name of the dependency's library target.\n                           If this is a renamed dependency, this is the new\n                           name.\n                        */\n                        \"name\": \"bitflags\",\n                        /* The Package ID of the dependency. */\n                        \"pkg\": \"https://github.com/rust-lang/crates.io-index#bitflags@1.0.4\"\n                        /* Array of dependency kinds. Added in Cargo 1.40. */\n                        \"dep_kinds\": [\n                            {\n                                /* The dependency kind.\n                                   \"dev\", \"build\", or null for a normal dependency.\n                                */\n                                \"kind\": null,\n                                /* The target platform for the dependency.\n                                   null if not a target dependency.\n                                */\n                                \"target\": \"cfg(windows)\"\n                            }\n                        ]\n                    }\n                ],\n                /* Array of features enabled on this package. */\n                \"features\": [\n                    \"default\"\n                ]\n            }\n        ],\n        /* The root package of the workspace.\n           This is null if this is a virtual workspace. Otherwise it is\n           the Package ID of the root package.\n        */\n        \"root\": \"file:///path/to/my-package#0.1.0\",\n    },\n    /* The absolute path to the build directory where Cargo places its output. */\n    \"target_directory\": \"/path/to/my-package/target\",\n    /* The version of the schema for this metadata structure.\n       This will be changed if incompatible changes are ever made.\n    */\n    \"version\": 1,\n    /* The absolute path to the root of the workspace. */\n    \"workspace_root\": \"/path/to/my-package\"\n    /* Workspace metadata.\n       This is null if no metadata is specified. */\n    \"metadata\": {\n        \"docs\": {\n            \"rs\": {\n                \"all-features\": true\n            }\n        }\n    }\n}\n\n```\n\nNotes:\n\n-   For `\"id\"` field syntax, see [Package ID Specifications](commands/../reference/pkgid-spec.html) in the reference.\n\n## [OPTIONS](#options-17)\n\n### [Output Options](#output-options-9)\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata---no-deps)`--no-deps`\n\nOutput information only about the workspace members and don’t fetch dependencies.\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata---format-version)`--format-version` _version_\n\nSpecify the version of the output format to use. Currently `1` is the only possible value.\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata---filter-platform)`--filter-platform` _triple_\n\nThis filters the `resolve` output to only include dependencies for the given [target triple](about:blank/appendix/glossary.html#target). Without this flag, the resolve includes all targets.\n\nNote that the dependencies listed in the “packages” array still includes all dependencies. Each package definition is intended to be an unaltered reproduction of the information within `Cargo.toml`.\n\n### [Feature Selection](#feature-selection-9)\n\nThe feature flags allow you to control which features are enabled. When no feature options are given, the `default` feature is activated for every selected package.\n\nSee [the features documentation](about:blank/reference/features.html#command-line-feature-options) for more details.\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata--F)`-F` _features_\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata---features)`--features` _features_\n\nSpace or comma separated list of features to activate. Features of workspace members may be enabled with `package-name/feature-name` syntax. This flag may be specified multiple times, which enables all specified features.\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata---all-features)`--all-features`\n\nActivate all available features of all selected packages.\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata---no-default-features)`--no-default-features`\n\nDo not activate the `default` feature of the selected packages.\n\n### [Display Options](#display-options-15)\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata--v)`-v`\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata--q)`-q`\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Manifest Options](#manifest-options-15)\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-15)\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata--h)`-h`\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-metadata.html#option-cargo-metadata--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-15)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-15)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-19)\n\n1.  Output JSON about the current package:\n    \n    ```\n    cargo metadata --format-version=1\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-18)\n\n[cargo(1)](commands/cargo.html), [cargo-pkgid(1)](commands/cargo-pkgid.html), [Package ID Specifications](commands/../reference/pkgid-spec.html), [JSON messages](about:blank/reference/external-tools.html#json-messages)\n\n## [cargo-pkgid(1)](#cargo-pkgid1)\n\n## [NAME](#name-19)\n\ncargo-pkgid — Print a fully qualified package specification\n\n## [SYNOPSIS](#synopsis-19)\n\n`cargo pkgid` \\[_options_\\] \\[_spec_\\]\n\n## [DESCRIPTION](#description-19)\n\nGiven a _spec_ argument, print out the fully qualified package ID specifier for a package or dependency in the current workspace. This command will generate an error if _spec_ is ambiguous as to which package it refers to in the dependency graph. If no _spec_ is given, then the specifier for the local package is printed.\n\nThis command requires that a lockfile is available and dependencies have been fetched.\n\nA package specifier consists of a name, version, and source URL. You are allowed to use partial specifiers to succinctly match a specific package as long as it matches only one package. This specifier is also used by other parts in Cargo, such as [cargo-metadata(1)](commands/cargo-metadata.html) and [JSON messages](about:blank/reference/external-tools.html#json-messages) emitted by Cargo.\n\nThe format of a _spec_ can be one of the following:\n\n| SPEC Structure | Example SPEC |\n| --- | --- |\n| _name_ | `bitflags` |\n| _name_`@`_version_ | `bitflags@1.0.4` |\n| _url_ | `https://github.com/rust-lang/cargo` |\n| _url_`#`_version_ | `https://github.com/rust-lang/cargo#0.33.0` |\n| _url_`#`_name_ | `https://github.com/rust-lang/crates.io-index#bitflags` |\n| _url_`#`_name_`@`_version_ | `https://github.com/rust-lang/cargo#crates-io@0.21.0` |\n\nThe specification grammar can be found in chapter [Package ID Specifications](commands/../reference/pkgid-spec.html).\n\n## [OPTIONS](#options-18)\n\n### [Package Selection](#package-selection-11)\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid--p)`-p` _spec_\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid---package)`--package` _spec_\n\nGet the package ID for the given package instead of the current package.\n\n### [Display Options](#display-options-16)\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid--v)`-v`\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid--q)`-q`\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Manifest Options](#manifest-options-16)\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-16)\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid--h)`-h`\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-pkgid.html#option-cargo-pkgid--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-16)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-16)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-20)\n\n1.  Retrieve package specification for `foo` package:\n    \n    ```\n    cargo pkgid foo\n    \n    ```\n    \n2.  Retrieve package specification for version 1.0.0 of `foo`:\n    \n    ```\n    cargo pkgid foo@1.0.0\n    \n    ```\n    \n3.  Retrieve package specification for `foo` from crates.io:\n    \n    ```\n    cargo pkgid https://github.com/rust-lang/crates.io-index#foo\n    \n    ```\n    \n4.  Retrieve package specification for `foo` from a local package:\n    \n    ```\n    cargo pkgid file:///path/to/local/package#foo\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-19)\n\n[cargo(1)](commands/cargo.html), [cargo-generate-lockfile(1)](commands/cargo-generate-lockfile.html), [cargo-metadata(1)](commands/cargo-metadata.html), [Package ID Specifications](commands/../reference/pkgid-spec.html), [JSON messages](about:blank/reference/external-tools.html#json-messages)\n\n## [cargo-remove(1)](#cargo-remove1)\n\n## [NAME](#name-20)\n\ncargo-remove — Remove dependencies from a Cargo.toml manifest file\n\n## [SYNOPSIS](#synopsis-20)\n\n`cargo remove` \\[_options_\\] _dependency_…\n\n## [DESCRIPTION](#description-20)\n\nRemove one or more dependencies from a `Cargo.toml` manifest.\n\n## [OPTIONS](#options-19)\n\n### [Section options](#section-options-1)\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove---dev)`--dev`\n\nRemove as a [development dependency](about:blank/reference/specifying-dependencies.html#development-dependencies).\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove---build)`--build`\n\nRemove as a [build dependency](about:blank/reference/specifying-dependencies.html#build-dependencies).\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove---target)`--target` _target_\n\nRemove as a dependency to the [given target platform](about:blank/reference/specifying-dependencies.html#platform-specific-dependencies).\n\nTo avoid unexpected shell expansions, you may use quotes around each target, e.g., `--target 'cfg(unix)'`.\n\n### [Miscellaneous Options](#miscellaneous-options-9)\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove---dry-run)`--dry-run`\n\nDon’t actually write to the manifest.\n\n### [Display Options](#display-options-17)\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove--v)`-v`\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove--q)`-q`\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Manifest Options](#manifest-options-17)\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Package Selection](#package-selection-12)\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove--p)`-p` _spec_…\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove---package)`--package` _spec_…\n\nPackage to remove from.\n\n### [Common Options](#common-options-17)\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove--h)`-h`\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-remove.html#option-cargo-remove--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-17)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-17)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-21)\n\n1.  Remove `regex` as a dependency\n    \n    ```\n    cargo remove regex\n    \n    ```\n    \n2.  Remove `trybuild` as a dev-dependency\n    \n    ```\n    cargo remove --dev trybuild\n    \n    ```\n    \n3.  Remove `nom` from the `x86_64-pc-windows-gnu` dependencies table\n    \n    ```\n    cargo remove --target x86_64-pc-windows-gnu nom\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-20)\n\n[cargo(1)](commands/cargo.html), [cargo-add(1)](commands/cargo-add.html)\n\n## [cargo-tree(1)](#cargo-tree1)\n\n## [NAME](#name-21)\n\ncargo-tree — Display a tree visualization of a dependency graph\n\n## [SYNOPSIS](#synopsis-21)\n\n`cargo tree` \\[_options_\\]\n\n## [DESCRIPTION](#description-21)\n\nThis command will display a tree of dependencies to the terminal. An example of a simple project that depends on the “rand” package:\n\n```\nmyproject v0.1.0 (/myproject)\n└── rand v0.7.3\n    ├── getrandom v0.1.14\n    │   ├── cfg-if v0.1.10\n    │   └── libc v0.2.68\n    ├── libc v0.2.68 (*)\n    ├── rand_chacha v0.2.2\n    │   ├── ppv-lite86 v0.2.6\n    │   └── rand_core v0.5.1\n    │       └── getrandom v0.1.14 (*)\n    └── rand_core v0.5.1 (*)\n[build-dependencies]\n└── cc v1.0.50\n\n```\n\nPackages marked with `(*)` have been “de-duplicated”. The dependencies for the package have already been shown elsewhere in the graph, and so are not repeated. Use the `--no-dedupe` option to repeat the duplicates.\n\nThe `-e` flag can be used to select the dependency kinds to display. The “features” kind changes the output to display the features enabled by each dependency. For example, `cargo tree -e features`:\n\n```\nmyproject v0.1.0 (/myproject)\n└── log feature \"serde\"\n    └── log v0.4.8\n        ├── serde v1.0.106\n        └── cfg-if feature \"default\"\n            └── cfg-if v0.1.10\n\n```\n\nIn this tree, `myproject` depends on `log` with the `serde` feature. `log` in turn depends on `cfg-if` with “default” features. When using `-e features` it can be helpful to use `-i` flag to show how the features flow into a package. See the examples below for more detail.\n\n### [Feature Unification](#feature-unification-1)\n\nThis command shows a graph much closer to a feature-unified graph Cargo will build, rather than what you list in `Cargo.toml`. For instance, if you specify the same dependency in both `[dependencies]` and `[dev-dependencies]` but with different features on. This command may merge all features and show a `(*)` on one of the dependency to indicate the duplicate.\n\nAs a result, for a mostly equivalent overview of what `cargo build` does, `cargo tree -e normal,build` is pretty close; for a mostly equivalent overview of what `cargo test` does, `cargo tree` is pretty close. However, it doesn’t guarantee the exact equivalence to what Cargo is going to build, since a compilation is complex and depends on lots of different factors.\n\nTo learn more about feature unification, check out this [dedicated section](about:blank/reference/features.html#feature-unification).\n\n## [OPTIONS](#options-20)\n\n### [Tree Options](#tree-options)\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree--i)`-i` _spec_\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---invert)`--invert` _spec_\n\nShow the reverse dependencies for the given package. This flag will invert the tree and display the packages that depend on the given package.\n\nNote that in a workspace, by default it will only display the package’s reverse dependencies inside the tree of the workspace member in the current directory. The `--workspace` flag can be used to extend it so that it will show the package’s reverse dependencies across the entire workspace. The `-p` flag can be used to display the package’s reverse dependencies only with the subtree of the package given to `-p`.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---prune)`--prune` _spec_\n\nPrune the given package from the display of the dependency tree.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---depth)`--depth` _depth_\n\nMaximum display depth of the dependency tree. A depth of 1 displays the direct dependencies, for example.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---no-dedupe)`--no-dedupe`\n\nDo not de-duplicate repeated dependencies. Usually, when a package has already displayed its dependencies, further occurrences will not re-display its dependencies, and will include a `(*)` to indicate it has already been shown. This flag will cause those duplicates to be repeated.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree--d)`-d`\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---duplicates)`--duplicates`\n\nShow only dependencies which come in multiple versions (implies `--invert`). When used with the `-p` flag, only shows duplicates within the subtree of the given package.\n\nIt can be beneficial for build times and executable sizes to avoid building that same package multiple times. This flag can help identify the offending packages. You can then investigate if the package that depends on the duplicate with the older version can be updated to the newer version so that only one instance is built.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree--e)`-e` _kinds_\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---edges)`--edges` _kinds_\n\nThe dependency kinds to display. Takes a comma separated list of values:\n\n-   `all` — Show all edge kinds.\n-   `normal` — Show normal dependencies.\n-   `build` — Show build dependencies.\n-   `dev` — Show development dependencies.\n-   `features` — Show features enabled by each dependency. If this is the only kind given, then it will automatically include the other dependency kinds.\n-   `no-normal` — Do not include normal dependencies.\n-   `no-build` — Do not include build dependencies.\n-   `no-dev` — Do not include development dependencies.\n-   `no-proc-macro` — Do not include procedural macro dependencies.\n\nThe `normal`, `build`, `dev`, and `all` dependency kinds cannot be mixed with `no-normal`, `no-build`, or `no-dev` dependency kinds.\n\nThe default is `normal,build,dev`.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---target)`--target` _triple_\n\nFilter dependencies matching the given [target triple](about:blank/appendix/glossary.html#target). The default is the host platform. Use the value `all` to include _all_ targets.\n\n### [Tree Formatting Options](#tree-formatting-options)\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---charset)`--charset` _charset_\n\nChooses the character set to use for the tree. Valid values are “utf8” or “ascii”. When unspecified, cargo will auto-select a value.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree--f)`-f` _format_\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---format)`--format` _format_\n\nSet the format string for each package. The default is “{p}”.\n\nThis is an arbitrary string which will be used to display each package. The following strings will be replaced with the corresponding value:\n\n-   `{p}` — The package name.\n-   `{l}` — The package license.\n-   `{r}` — The package repository URL.\n-   `{f}` — Comma-separated list of package features that are enabled.\n-   `{lib}` — The name, as used in a `use` statement, of the package’s library.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---prefix)`--prefix` _prefix_\n\nSets how each line is displayed. The _prefix_ value can be one of:\n\n-   `indent` (default) — Shows each line indented as a tree.\n-   `depth` — Show as a list, with the numeric depth printed before each entry.\n-   `none` — Show as a flat list.\n\n### [Package Selection](#package-selection-13)\n\nBy default, when no package selection options are given, the packages selected depend on the selected manifest file (based on the current working directory if `--manifest-path` is not given). If the manifest is the root of a workspace then the workspaces default members are selected, otherwise only the package defined by the manifest will be selected.\n\nThe default members of a workspace can be set explicitly with the `workspace.default-members` key in the root manifest. If this is not set, a virtual workspace will include all workspace members (equivalent to passing `--workspace`), and a non-virtual workspace will include only the root crate itself.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree--p)`-p` _spec_…\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---package)`--package` _spec_…\n\nDisplay only the specified packages. See [cargo-pkgid(1)](commands/cargo-pkgid.html) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---workspace)`--workspace`\n\nDisplay all members in the workspace.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---exclude)`--exclude` _SPEC_…\n\nExclude the specified packages. Must be used in conjunction with the `--workspace` flag. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n### [Manifest Options](#manifest-options-18)\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Feature Selection](#feature-selection-10)\n\nThe feature flags allow you to control which features are enabled. When no feature options are given, the `default` feature is activated for every selected package.\n\nSee [the features documentation](about:blank/reference/features.html#command-line-feature-options) for more details.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree--F)`-F` _features_\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---features)`--features` _features_\n\nSpace or comma separated list of features to activate. Features of workspace members may be enabled with `package-name/feature-name` syntax. This flag may be specified multiple times, which enables all specified features.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---all-features)`--all-features`\n\nActivate all available features of all selected packages.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---no-default-features)`--no-default-features`\n\nDo not activate the `default` feature of the selected packages.\n\n### [Display Options](#display-options-18)\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree--v)`-v`\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree--q)`-q`\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Common Options](#common-options-18)\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree--h)`-h`\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-tree.html#option-cargo-tree--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-18)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-18)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-22)\n\n1.  Display the tree for the package in the current directory:\n    \n    ```\n    cargo tree\n    \n    ```\n    \n2.  Display all the packages that depend on the `syn` package:\n    \n    ```\n    cargo tree -i syn\n    \n    ```\n    \n3.  Show the features enabled on each package:\n    \n    ```\n    cargo tree --format \"{p} {f}\"\n    \n    ```\n    \n4.  Show all packages that are built multiple times. This can happen if multiple semver-incompatible versions appear in the tree (like 1.0.0 and 2.0.0).\n    \n    ```\n    cargo tree -d\n    \n    ```\n    \n5.  Explain why features are enabled for the `syn` package:\n    \n    ```\n    cargo tree -e features -i syn\n    \n    ```\n    \n    The `-e features` flag is used to show features. The `-i` flag is used to invert the graph so that it displays the packages that depend on `syn`. An example of what this would display:\n    \n    ```\n    syn v1.0.17\n    ├── syn feature \"clone-impls\"\n    │   └── syn feature \"default\"\n    │       └── rustversion v1.0.2\n    │           └── rustversion feature \"default\"\n    │               └── myproject v0.1.0 (/myproject)\n    │                   └── myproject feature \"default\" (command-line)\n    ├── syn feature \"default\" (*)\n    ├── syn feature \"derive\"\n    │   └── syn feature \"default\" (*)\n    ├── syn feature \"full\"\n    │   └── rustversion v1.0.2 (*)\n    ├── syn feature \"parsing\"\n    │   └── syn feature \"default\" (*)\n    ├── syn feature \"printing\"\n    │   └── syn feature \"default\" (*)\n    ├── syn feature \"proc-macro\"\n    │   └── syn feature \"default\" (*)\n    └── syn feature \"quote\"\n        ├── syn feature \"printing\" (*)\n        └── syn feature \"proc-macro\" (*)\n    \n    ```\n    \n    To read this graph, you can follow the chain for each feature from the root to see why it is included. For example, the “full” feature is added by the `rustversion` crate which is included from `myproject` (with the default features), and `myproject` is the package selected on the command-line. All of the other `syn` features are added by the “default” feature (“quote” is added by “printing” and “proc-macro”, both of which are default features).\n    \n    If you’re having difficulty cross-referencing the de-duplicated `(*)` entries, try with the `--no-dedupe` flag to get the full output.\n    \n\n## [SEE ALSO](#see-also-21)\n\n[cargo(1)](commands/cargo.html), [cargo-metadata(1)](commands/cargo-metadata.html)\n\n## [cargo-update(1)](#cargo-update1)\n\n## [NAME](#name-22)\n\ncargo-update — Update dependencies as recorded in the local lock file\n\n## [SYNOPSIS](#synopsis-22)\n\n`cargo update` \\[_options_\\] _spec_\n\n## [DESCRIPTION](#description-22)\n\nThis command will update dependencies in the `Cargo.lock` file to the latest version. If the `Cargo.lock` file does not exist, it will be created with the latest available versions.\n\n## [OPTIONS](#options-21)\n\n### [Update Options](#update-options)\n\n[](about:blank/commands/cargo-update.html#option-cargo-update-spec%E2%80%A6)_spec_…\n\nUpdate only the specified packages. This flag may be specified multiple times. See [cargo-pkgid(1)](commands/cargo-pkgid.html) for the SPEC format.\n\nIf packages are specified with _spec_, then a conservative update of the lockfile will be performed. This means that only the dependency specified by SPEC will be updated. Its transitive dependencies will be updated only if SPEC cannot be updated without updating dependencies. All other dependencies will remain locked at their currently recorded versions.\n\nIf _spec_ is not specified, all dependencies are updated.\n\n[](about:blank/commands/cargo-update.html#option-cargo-update---recursive)`--recursive`\n\nWhen used with _spec_, dependencies of _spec_ are forced to update as well. Cannot be used with `--precise`.\n\n[](about:blank/commands/cargo-update.html#option-cargo-update---precise)`--precise` _precise_\n\nWhen used with _spec_, allows you to specify a specific version number to set the package to. If the package comes from a git repository, this can be a git revision (such as a SHA hash or tag).\n\nWhile not recommended, you can specify a yanked version of a package. When possible, try other non-yanked SemVer-compatible versions or seek help from the maintainers of the package.\n\nA compatible `pre-release` version can also be specified even when the version requirement in `Cargo.toml` doesn’t contain any pre-release identifier (nightly only).\n\n[](about:blank/commands/cargo-update.html#option-cargo-update--w)`-w`\n\n[](about:blank/commands/cargo-update.html#option-cargo-update---workspace)`--workspace`\n\nAttempt to update only packages defined in the workspace. Other packages are updated only if they don’t already exist in the lockfile. This option is useful for updating `Cargo.lock` after you’ve changed version numbers in `Cargo.toml`.\n\n[](about:blank/commands/cargo-update.html#option-cargo-update---dry-run)`--dry-run`\n\nDisplays what would be updated, but doesn’t actually write the lockfile.\n\n### [Display Options](#display-options-19)\n\n[](about:blank/commands/cargo-update.html#option-cargo-update--v)`-v`\n\n[](about:blank/commands/cargo-update.html#option-cargo-update---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-update.html#option-cargo-update--q)`-q`\n\n[](about:blank/commands/cargo-update.html#option-cargo-update---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-update.html#option-cargo-update---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Manifest Options](#manifest-options-19)\n\n[](about:blank/commands/cargo-update.html#option-cargo-update---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-update.html#option-cargo-update---ignore-rust-version)`--ignore-rust-version`\n\nIgnore `rust-version` specification in packages.\n\n[](about:blank/commands/cargo-update.html#option-cargo-update---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-update.html#option-cargo-update---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-update.html#option-cargo-update---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-19)\n\n[](about:blank/commands/cargo-update.html#option-cargo-update-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-update.html#option-cargo-update---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-update.html#option-cargo-update--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-update.html#option-cargo-update--h)`-h`\n\n[](about:blank/commands/cargo-update.html#option-cargo-update---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-update.html#option-cargo-update--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-19)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-19)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-23)\n\n1.  Update all dependencies in the lockfile:\n    \n    ```\n    cargo update\n    \n    ```\n    \n2.  Update only specific dependencies:\n    \n    ```\n    cargo update foo bar\n    \n    ```\n    \n3.  Set a specific dependency to a specific version:\n    \n    ```\n    cargo update foo --precise 1.2.3\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-22)\n\n[cargo(1)](commands/cargo.html), [cargo-generate-lockfile(1)](commands/cargo-generate-lockfile.html)\n\n## [cargo-vendor(1)](#cargo-vendor1)\n\n## [NAME](#name-23)\n\ncargo-vendor — Vendor all dependencies locally\n\n## [SYNOPSIS](#synopsis-23)\n\n`cargo vendor` \\[_options_\\] \\[_path_\\]\n\n## [DESCRIPTION](#description-23)\n\nThis cargo subcommand will vendor all crates.io and git dependencies for a project into the specified directory at `<path>`. After this command completes the vendor directory specified by `<path>` will contain all remote sources from dependencies specified. Additional manifests beyond the default one can be specified with the `-s` option.\n\nThe configuration necessary to use the vendored sources would be printed to stdout after `cargo vendor` completes the vendoring process. You will need to add or redirect it to your Cargo configuration file, which is usually `.cargo/config.toml` locally for the current package.\n\nCargo treats vendored sources as read-only as it does to registry and git sources. If you intend to modify a crate from a remote source, use `[patch]` or a `path` dependency pointing to a local copy of that crate. Cargo will then correctly handle the crate on incremental rebuilds, as it knowns that it is no longer a read-only dependency.\n\n## [OPTIONS](#options-22)\n\n### [Vendor Options](#vendor-options)\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor--s)`-s` _manifest_\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor---sync)`--sync` _manifest_\n\nSpecify an extra `Cargo.toml` manifest to workspaces which should also be vendored and synced to the output. May be specified multiple times.\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor---no-delete)`--no-delete`\n\nDon’t delete the “vendor” directory when vendoring, but rather keep all existing contents of the vendor directory\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor---respect-source-config)`--respect-source-config`\n\nInstead of ignoring `[source]` configuration by default in `.cargo/config.toml` read it and use it when downloading crates from crates.io, for example\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor---versioned-dirs)`--versioned-dirs`\n\nNormally versions are only added to disambiguate multiple versions of the same package. This option causes all directories in the “vendor” directory to be versioned, which makes it easier to track the history of vendored packages over time, and can help with the performance of re-vendoring when only a subset of the packages have changed.\n\n### [Manifest Options](#manifest-options-20)\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Display Options](#display-options-20)\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor--v)`-v`\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor--q)`-q`\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Common Options](#common-options-20)\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor--h)`-h`\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-vendor.html#option-cargo-vendor--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-20)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-20)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-24)\n\n1.  Vendor all dependencies into a local “vendor” folder\n    \n    ```\n    cargo vendor\n    \n    ```\n    \n2.  Vendor all dependencies into a local “third-party/vendor” folder\n    \n    ```\n    cargo vendor third-party/vendor\n    \n    ```\n    \n3.  Vendor the current workspace as well as another to “vendor”\n    \n    ```\n    cargo vendor -s ../path/to/Cargo.toml\n    \n    ```\n    \n4.  Vendor and redirect the necessary vendor configs to a config file.\n    \n    ```\n    cargo vendor > path/to/my/cargo/config.toml\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-23)\n\n[cargo(1)](commands/cargo.html)\n\n## [cargo-verify-project(1)](#cargo-verify-project1)\n\n## [NAME](#name-24)\n\ncargo-verify-project — Check correctness of crate manifest\n\n## [SYNOPSIS](#synopsis-24)\n\n`cargo verify-project` \\[_options_\\]\n\n## [DESCRIPTION](#description-24)\n\nThis command will parse the local manifest and check its validity. It emits a JSON object with the result. A successful validation will display:\n\n```\n{\"success\":\"true\"}\n\n```\n\nAn invalid workspace will display:\n\n```\n{\"invalid\":\"human-readable error message\"}\n\n```\n\n## [OPTIONS](#options-23)\n\n### [Display Options](#display-options-21)\n\n[](about:blank/commands/cargo-verify-project.html#option-cargo-verify-project--v)`-v`\n\n[](about:blank/commands/cargo-verify-project.html#option-cargo-verify-project---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-verify-project.html#option-cargo-verify-project--q)`-q`\n\n[](about:blank/commands/cargo-verify-project.html#option-cargo-verify-project---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-verify-project.html#option-cargo-verify-project---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Manifest Options](#manifest-options-21)\n\n[](about:blank/commands/cargo-verify-project.html#option-cargo-verify-project---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-verify-project.html#option-cargo-verify-project---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-verify-project.html#option-cargo-verify-project---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-verify-project.html#option-cargo-verify-project---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Common Options](#common-options-21)\n\n[](about:blank/commands/cargo-verify-project.html#option-cargo-verify-project-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-verify-project.html#option-cargo-verify-project---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-verify-project.html#option-cargo-verify-project--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-verify-project.html#option-cargo-verify-project--h)`-h`\n\n[](about:blank/commands/cargo-verify-project.html#option-cargo-verify-project---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-verify-project.html#option-cargo-verify-project--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-21)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-21)\n\n-   `0`: The workspace is OK.\n-   `1`: The workspace is invalid.\n\n## [EXAMPLES](#examples-25)\n\n1.  Check the current workspace for errors:\n    \n    ```\n    cargo verify-project\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-24)\n\n[cargo(1)](commands/cargo.html), [cargo-package(1)](commands/cargo-package.html)\n\n## [Package Commands](#package-commands-1)\n\n-   [cargo init](commands/cargo-init.html)\n-   [cargo install](commands/cargo-install.html)\n-   [cargo new](commands/cargo-new.html)\n-   [cargo search](commands/cargo-search.html)\n-   [cargo uninstall](commands/cargo-uninstall.html)\n\n## [cargo-init(1)](#cargo-init1)\n\n## [NAME](#name-25)\n\ncargo-init — Create a new Cargo package in an existing directory\n\n## [SYNOPSIS](#synopsis-25)\n\n`cargo init` \\[_options_\\] \\[_path_\\]\n\n## [DESCRIPTION](#description-25)\n\nThis command will create a new Cargo manifest in the current directory. Give a path as an argument to create in the given directory.\n\nIf there are typically-named Rust source files already in the directory, those will be used. If not, then a sample `src/main.rs` file will be created, or `src/lib.rs` if `--lib` is passed.\n\nIf the directory is not already in a VCS repository, then a new repository is created (see `--vcs` below).\n\nSee [cargo-new(1)](commands/cargo-new.html) for a similar command which will create a new package in a new directory.\n\n## [OPTIONS](#options-24)\n\n### [Init Options](#init-options)\n\n[](about:blank/commands/cargo-init.html#option-cargo-init---bin)`--bin`\n\nCreate a package with a binary target (`src/main.rs`). This is the default behavior.\n\n[](about:blank/commands/cargo-init.html#option-cargo-init---lib)`--lib`\n\nCreate a package with a library target (`src/lib.rs`).\n\n[](about:blank/commands/cargo-init.html#option-cargo-init---edition)`--edition` _edition_\n\nSpecify the Rust edition to use. Default is 2021. Possible values: 2015, 2018, 2021, 2024\n\n[](about:blank/commands/cargo-init.html#option-cargo-init---name)`--name` _name_\n\nSet the package name. Defaults to the directory name.\n\n[](about:blank/commands/cargo-init.html#option-cargo-init---vcs)`--vcs` _vcs_\n\nInitialize a new VCS repository for the given version control system (git, hg, pijul, or fossil) or do not initialize any version control at all (none). If not specified, defaults to `git` or the configuration value `cargo-new.vcs`, or `none` if already inside a VCS repository.\n\n[](about:blank/commands/cargo-init.html#option-cargo-init---registry)`--registry` _registry_\n\nThis sets the `publish` field in `Cargo.toml` to the given registry name which will restrict publishing only to that registry.\n\nRegistry names are defined in [Cargo config files](commands/../reference/config.html). If not specified, the default registry defined by the `registry.default` config key is used. If the default registry is not set and `--registry` is not used, the `publish` field will not be set which means that publishing will not be restricted.\n\n### [Display Options](#display-options-22)\n\n[](about:blank/commands/cargo-init.html#option-cargo-init--v)`-v`\n\n[](about:blank/commands/cargo-init.html#option-cargo-init---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-init.html#option-cargo-init--q)`-q`\n\n[](about:blank/commands/cargo-init.html#option-cargo-init---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-init.html#option-cargo-init---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Common Options](#common-options-22)\n\n[](about:blank/commands/cargo-init.html#option-cargo-init-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-init.html#option-cargo-init---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-init.html#option-cargo-init--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-init.html#option-cargo-init--h)`-h`\n\n[](about:blank/commands/cargo-init.html#option-cargo-init---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-init.html#option-cargo-init--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-22)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-22)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-26)\n\n1.  Create a binary Cargo package in the current directory:\n    \n    ```\n    cargo init\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-25)\n\n[cargo(1)](commands/cargo.html), [cargo-new(1)](commands/cargo-new.html)\n\n## [cargo-install(1)](#cargo-install1)\n\n## [NAME](#name-26)\n\ncargo-install — Build and install a Rust binary\n\n## [SYNOPSIS](#synopsis-26)\n\n`cargo install` \\[_options_\\] _crate_\\[@_version_\\]…  \n`cargo install` \\[_options_\\] `--path` _path_  \n`cargo install` \\[_options_\\] `--git` _url_ \\[_crate_…\\]  \n`cargo install` \\[_options_\\] `--list`\n\n## [DESCRIPTION](#description-26)\n\nThis command manages Cargo’s local set of installed binary crates. Only packages which have executable `[[bin]]` or `[[example]]` targets can be installed, and all executables are installed into the installation root’s `bin` folder. By default only binaries, not examples, are installed.\n\nThe installation root is determined, in order of precedence:\n\n-   `--root` option\n-   `CARGO_INSTALL_ROOT` environment variable\n-   `install.root` Cargo [config value](commands/../reference/config.html)\n-   `CARGO_HOME` environment variable\n-   `$HOME/.cargo`\n\nThere are multiple sources from which a crate can be installed. The default source location is crates.io but the `--git`, `--path`, and `--registry` flags can change this source. If the source contains more than one package (such as crates.io or a git repository with multiple crates) the _crate_ argument is required to indicate which crate should be installed.\n\nCrates from crates.io can optionally specify the version they wish to install via the `--version` flags, and similarly packages from git repositories can optionally specify the branch, tag, or revision that should be installed. If a crate has multiple binaries, the `--bin` argument can selectively install only one of them, and if you’d rather install examples the `--example` argument can be used as well.\n\nIf the package is already installed, Cargo will reinstall it if the installed version does not appear to be up-to-date. If any of the following values change, then Cargo will reinstall the package:\n\n-   The package version and source.\n-   The set of binary names installed.\n-   The chosen features.\n-   The profile (`--profile`).\n-   The target (`--target`).\n\nInstalling with `--path` will always build and install, unless there are conflicting binaries from another package. The `--force` flag may be used to force Cargo to always reinstall the package.\n\nIf the source is crates.io or `--git` then by default the crate will be built in a temporary target directory. To avoid this, the target directory can be specified by setting the `CARGO_TARGET_DIR` environment variable to a relative path. In particular, this can be useful for caching build artifacts on continuous integration systems.\n\n### [Dealing with the Lockfile](#dealing-with-the-lockfile)\n\nBy default, the `Cargo.lock` file that is included with the package will be ignored. This means that Cargo will recompute which versions of dependencies to use, possibly using newer versions that have been released since the package was published. The `--locked` flag can be used to force Cargo to use the packaged `Cargo.lock` file if it is available. This may be useful for ensuring reproducible builds, to use the exact same set of dependencies that were available when the package was published. It may also be useful if a newer version of a dependency is published that no longer builds on your system, or has other problems. The downside to using `--locked` is that you will not receive any fixes or updates to any dependency. Note that Cargo did not start publishing `Cargo.lock` files until version 1.37, which means packages published with prior versions will not have a `Cargo.lock` file available.\n\n### [Configuration Discovery](#configuration-discovery)\n\nThis command operates on system or user level, not project level. This means that the local [configuration discovery](about:blank/reference/config.html#hierarchical-structure) is ignored. Instead, the configuration discovery begins at `$CARGO_HOME/config.toml`. If the package is installed with `--path $PATH`, the local configuration will be used, beginning discovery at `$PATH/.cargo/config.toml`.\n\n## [OPTIONS](#options-25)\n\n### [Install Options](#install-options)\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---vers)`--vers` _version_\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---version)`--version` _version_\n\nSpecify a version to install. This may be a [version requirement](commands/../reference/specifying-dependencies.html), like `~1.2`, to have Cargo select the newest version from the given requirement. If the version does not have a requirement operator (such as `^` or `~`), then it must be in the form _MAJOR.MINOR.PATCH_, and will install exactly that version; it is _not_ treated as a caret requirement like Cargo dependencies are.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---git)`--git` _url_\n\nGit URL to install the specified crate from.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---branch)`--branch` _branch_\n\nBranch to use when installing from git.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---tag)`--tag` _tag_\n\nTag to use when installing from git.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---rev)`--rev` _sha_\n\nSpecific commit to use when installing from git.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---path)`--path` _path_\n\nFilesystem path to local crate to install from.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---list)`--list`\n\nList all installed packages and their versions.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install--f)`-f`\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---force)`--force`\n\nForce overwriting existing crates or binaries. This can be used if a package has installed a binary with the same name as another package. This is also useful if something has changed on the system that you want to rebuild with, such as a newer version of `rustc`.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---no-track)`--no-track`\n\nBy default, Cargo keeps track of the installed packages with a metadata file stored in the installation root directory. This flag tells Cargo not to use or create that file. With this flag, Cargo will refuse to overwrite any existing files unless the `--force` flag is used. This also disables Cargo’s ability to protect against multiple concurrent invocations of Cargo installing at the same time.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---bin)`--bin` _name_…\n\nInstall only the specified binary.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---bins)`--bins`\n\nInstall all binaries. This is the default behavior.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---example)`--example` _name_…\n\nInstall only the specified example.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---examples)`--examples`\n\nInstall all examples.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---root)`--root` _dir_\n\nDirectory to install packages into.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---registry)`--registry` _registry_\n\nName of the registry to use. Registry names are defined in [Cargo config files](commands/../reference/config.html). If not specified, the default registry is used, which is defined by the `registry.default` config key which defaults to `crates-io`.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---index)`--index` _index_\n\nThe URL of the registry index to use.\n\n### [Feature Selection](#feature-selection-11)\n\nThe feature flags allow you to control which features are enabled. When no feature options are given, the `default` feature is activated for every selected package.\n\nSee [the features documentation](about:blank/reference/features.html#command-line-feature-options) for more details.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install--F)`-F` _features_\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---features)`--features` _features_\n\nSpace or comma separated list of features to activate. Features of workspace members may be enabled with `package-name/feature-name` syntax. This flag may be specified multiple times, which enables all specified features.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---all-features)`--all-features`\n\nActivate all available features of all selected packages.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---no-default-features)`--no-default-features`\n\nDo not activate the `default` feature of the selected packages.\n\n### [Compilation Options](#compilation-options-9)\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---target)`--target` _triple_\n\nInstall for the given architecture. The default is the host architecture. The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a list of supported targets.\n\nThis may also be specified with the `build.target` [config value](commands/../reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the [build cache](commands/../guide/build-cache.html) documentation for more details.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---target-dir)`--target-dir` _directory_\n\nDirectory for all generated artifacts and intermediate files. May also be specified with the `CARGO_TARGET_DIR` environment variable, or the `build.target-dir` [config value](commands/../reference/config.html). Defaults to a new temporary folder located in the temporary directory of the platform.\n\nWhen using `--path`, by default it will use `target` directory in the workspace of the local crate unless `--target-dir` is specified.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---debug)`--debug`\n\nBuild with the `dev` profile instead of the `release` profile. See also the `--profile` option for choosing a specific profile by name.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---profile)`--profile` _name_\n\nInstall with the given profile. See [the reference](commands/../reference/profiles.html) for more details on profiles.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---timings=fmts)`--timings=`_fmts_\n\nOutput information how long each compilation takes, and track concurrency information over time. Accepts an optional comma-separated list of output formats; `--timings` without an argument will default to `--timings=html`. Specifying an output format (rather than the default) is unstable and requires `-Zunstable-options`. Valid output formats:\n\n-   `html` (unstable, requires `-Zunstable-options`): Write a human-readable file `cargo-timing.html` to the `target/cargo-timings` directory with a report of the compilation. Also write a report to the same directory with a timestamp in the filename if you want to look at older runs. HTML output is suitable for human consumption only, and does not provide machine-readable timing data.\n-   `json` (unstable, requires `-Zunstable-options`): Emit machine-readable JSON information about timing information.\n\n### [Manifest Options](#manifest-options-22)\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---ignore-rust-version)`--ignore-rust-version`\n\nIgnore `rust-version` specification in packages.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Miscellaneous Options](#miscellaneous-options-10)\n\n[](about:blank/commands/cargo-install.html#option-cargo-install--j)`-j` _N_\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---jobs)`--jobs` _N_\n\nNumber of parallel jobs to run. May also be specified with the `build.jobs` [config value](commands/../reference/config.html). Defaults to the number of logical CPUs. If negative, it sets the maximum number of parallel jobs to the number of logical CPUs plus provided value. If a string `default` is provided, it sets the value back to defaults. Should not be 0.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---keep-going)`--keep-going`\n\nBuild as many crates in the dependency graph as possible, rather than aborting the build on the first one that fails to build.\n\nFor example if the current package depends on dependencies `fails` and `works`, one of which fails to build, `cargo install -j1` may or may not build the one that succeeds (depending on which one of the two builds Cargo picked to run first), whereas `cargo install -j1 --keep-going` would definitely run both builds, even if the one run first fails.\n\n### [Display Options](#display-options-23)\n\n[](about:blank/commands/cargo-install.html#option-cargo-install--v)`-v`\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-install.html#option-cargo-install--q)`-q`\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---message-format)`--message-format` _fmt_\n\nThe output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n-   `human` (default): Display in a human-readable text format. Conflicts with `short` and `json`.\n-   `short`: Emit shorter, human-readable text messages. Conflicts with `human` and `json`.\n-   `json`: Emit JSON messages to stdout. See [the reference](about:blank/reference/external-tools.html#json-messages) for more details. Conflicts with `human` and `short`.\n-   `json-diagnostic-short`: Ensure the `rendered` field of JSON messages contains the “short” rendering from rustc. Cannot be used with `human` or `short`.\n-   `json-diagnostic-rendered-ansi`: Ensure the `rendered` field of JSON messages contains embedded ANSI color codes for respecting rustc’s default color scheme. Cannot be used with `human` or `short`.\n-   `json-render-diagnostics`: Instruct Cargo to not include rustc diagnostics in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with `human` or `short`.\n\n### [Common Options](#common-options-23)\n\n[](about:blank/commands/cargo-install.html#option-cargo-install-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-install.html#option-cargo-install--h)`-h`\n\n[](about:blank/commands/cargo-install.html#option-cargo-install---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-install.html#option-cargo-install--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-23)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-23)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-27)\n\n1.  Install or upgrade a package from crates.io:\n    \n    ```\n    cargo install ripgrep\n    \n    ```\n    \n2.  Install or reinstall the package in the current directory:\n    \n    ```\n    cargo install --path .\n    \n    ```\n    \n3.  View the list of installed packages:\n    \n    ```\n    cargo install --list\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-26)\n\n[cargo(1)](commands/cargo.html), [cargo-uninstall(1)](commands/cargo-uninstall.html), [cargo-search(1)](commands/cargo-search.html), [cargo-publish(1)](commands/cargo-publish.html)\n\n## [cargo-new(1)](#cargo-new1)\n\n## [NAME](#name-27)\n\ncargo-new — Create a new Cargo package\n\n## [SYNOPSIS](#synopsis-27)\n\n`cargo new` \\[_options_\\] _path_\n\n## [DESCRIPTION](#description-27)\n\nThis command will create a new Cargo package in the given directory. This includes a simple template with a `Cargo.toml` manifest, sample source file, and a VCS ignore file. If the directory is not already in a VCS repository, then a new repository is created (see `--vcs` below).\n\nSee [cargo-init(1)](commands/cargo-init.html) for a similar command which will create a new manifest in an existing directory.\n\n## [OPTIONS](#options-26)\n\n### [New Options](#new-options)\n\n[](about:blank/commands/cargo-new.html#option-cargo-new---bin)`--bin`\n\nCreate a package with a binary target (`src/main.rs`). This is the default behavior.\n\n[](about:blank/commands/cargo-new.html#option-cargo-new---lib)`--lib`\n\nCreate a package with a library target (`src/lib.rs`).\n\n[](about:blank/commands/cargo-new.html#option-cargo-new---edition)`--edition` _edition_\n\nSpecify the Rust edition to use. Default is 2021. Possible values: 2015, 2018, 2021, 2024\n\n[](about:blank/commands/cargo-new.html#option-cargo-new---name)`--name` _name_\n\nSet the package name. Defaults to the directory name.\n\n[](about:blank/commands/cargo-new.html#option-cargo-new---vcs)`--vcs` _vcs_\n\nInitialize a new VCS repository for the given version control system (git, hg, pijul, or fossil) or do not initialize any version control at all (none). If not specified, defaults to `git` or the configuration value `cargo-new.vcs`, or `none` if already inside a VCS repository.\n\n[](about:blank/commands/cargo-new.html#option-cargo-new---registry)`--registry` _registry_\n\nThis sets the `publish` field in `Cargo.toml` to the given registry name which will restrict publishing only to that registry.\n\nRegistry names are defined in [Cargo config files](commands/../reference/config.html). If not specified, the default registry defined by the `registry.default` config key is used. If the default registry is not set and `--registry` is not used, the `publish` field will not be set which means that publishing will not be restricted.\n\n### [Display Options](#display-options-24)\n\n[](about:blank/commands/cargo-new.html#option-cargo-new--v)`-v`\n\n[](about:blank/commands/cargo-new.html#option-cargo-new---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-new.html#option-cargo-new--q)`-q`\n\n[](about:blank/commands/cargo-new.html#option-cargo-new---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-new.html#option-cargo-new---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Common Options](#common-options-24)\n\n[](about:blank/commands/cargo-new.html#option-cargo-new-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-new.html#option-cargo-new---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-new.html#option-cargo-new--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-new.html#option-cargo-new--h)`-h`\n\n[](about:blank/commands/cargo-new.html#option-cargo-new---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-new.html#option-cargo-new--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-24)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-24)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-28)\n\n1.  Create a binary Cargo package in the given directory:\n    \n    ```\n    cargo new foo\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-27)\n\n[cargo(1)](commands/cargo.html), [cargo-init(1)](commands/cargo-init.html)\n\n## [cargo-search(1)](#cargo-search1)\n\n## [NAME](#name-28)\n\ncargo-search — Search packages in the registry. Default registry is crates.io\n\n## [SYNOPSIS](#synopsis-28)\n\n`cargo search` \\[_options_\\] \\[_query_…\\]\n\n## [DESCRIPTION](#description-28)\n\nThis performs a textual search for crates on [https://crates.io](https://crates.io/). The matching crates will be displayed along with their description in TOML format suitable for copying into a `Cargo.toml` manifest.\n\n## [OPTIONS](#options-27)\n\n### [Search Options](#search-options)\n\n[](about:blank/commands/cargo-search.html#option-cargo-search---limit)`--limit` _limit_\n\nLimit the number of results (default: 10, max: 100).\n\n[](about:blank/commands/cargo-search.html#option-cargo-search---index)`--index` _index_\n\nThe URL of the registry index to use.\n\n[](about:blank/commands/cargo-search.html#option-cargo-search---registry)`--registry` _registry_\n\nName of the registry to use. Registry names are defined in [Cargo config files](commands/../reference/config.html). If not specified, the default registry is used, which is defined by the `registry.default` config key which defaults to `crates-io`.\n\n### [Display Options](#display-options-25)\n\n[](about:blank/commands/cargo-search.html#option-cargo-search--v)`-v`\n\n[](about:blank/commands/cargo-search.html#option-cargo-search---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-search.html#option-cargo-search--q)`-q`\n\n[](about:blank/commands/cargo-search.html#option-cargo-search---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-search.html#option-cargo-search---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Common Options](#common-options-25)\n\n[](about:blank/commands/cargo-search.html#option-cargo-search-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-search.html#option-cargo-search---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-search.html#option-cargo-search--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-search.html#option-cargo-search--h)`-h`\n\n[](about:blank/commands/cargo-search.html#option-cargo-search---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-search.html#option-cargo-search--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-25)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-25)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-29)\n\n1.  Search for a package from crates.io:\n    \n    ```\n    cargo search serde\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-28)\n\n[cargo(1)](commands/cargo.html), [cargo-install(1)](commands/cargo-install.html), [cargo-publish(1)](commands/cargo-publish.html)\n\n## [cargo-uninstall(1)](#cargo-uninstall1)\n\n## [NAME](#name-29)\n\ncargo-uninstall — Remove a Rust binary\n\n## [SYNOPSIS](#synopsis-29)\n\n`cargo uninstall` \\[_options_\\] \\[_spec_…\\]\n\n## [DESCRIPTION](#description-29)\n\nThis command removes a package installed with [cargo-install(1)](commands/cargo-install.html). The _spec_ argument is a package ID specification of the package to remove (see [cargo-pkgid(1)](commands/cargo-pkgid.html)).\n\nBy default all binaries are removed for a crate but the `--bin` and `--example` flags can be used to only remove particular binaries.\n\nThe installation root is determined, in order of precedence:\n\n-   `--root` option\n-   `CARGO_INSTALL_ROOT` environment variable\n-   `install.root` Cargo [config value](commands/../reference/config.html)\n-   `CARGO_HOME` environment variable\n-   `$HOME/.cargo`\n\n## [OPTIONS](#options-28)\n\n### [Install Options](#install-options-1)\n\n[](about:blank/commands/cargo-uninstall.html#option-cargo-uninstall--p)`-p`\n\n[](about:blank/commands/cargo-uninstall.html#option-cargo-uninstall---package)`--package` _spec_…\n\nPackage to uninstall.\n\n[](about:blank/commands/cargo-uninstall.html#option-cargo-uninstall---bin)`--bin` _name_…\n\nOnly uninstall the binary _name_.\n\n[](about:blank/commands/cargo-uninstall.html#option-cargo-uninstall---root)`--root` _dir_\n\nDirectory to uninstall packages from.\n\n### [Display Options](#display-options-26)\n\n[](about:blank/commands/cargo-uninstall.html#option-cargo-uninstall--v)`-v`\n\n[](about:blank/commands/cargo-uninstall.html#option-cargo-uninstall---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-uninstall.html#option-cargo-uninstall--q)`-q`\n\n[](about:blank/commands/cargo-uninstall.html#option-cargo-uninstall---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-uninstall.html#option-cargo-uninstall---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Common Options](#common-options-26)\n\n[](about:blank/commands/cargo-uninstall.html#option-cargo-uninstall-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-uninstall.html#option-cargo-uninstall---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-uninstall.html#option-cargo-uninstall--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-uninstall.html#option-cargo-uninstall--h)`-h`\n\n[](about:blank/commands/cargo-uninstall.html#option-cargo-uninstall---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-uninstall.html#option-cargo-uninstall--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-26)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-26)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-30)\n\n1.  Uninstall a previously installed package.\n    \n    ```\n    cargo uninstall ripgrep\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-29)\n\n[cargo(1)](commands/cargo.html), [cargo-install(1)](commands/cargo-install.html)\n\n## [Publishing Commands](#publishing-commands-1)\n\n-   [cargo login](commands/cargo-login.html)\n-   [cargo logout](commands/cargo-logout.html)\n-   [cargo owner](commands/cargo-owner.html)\n-   [cargo package](commands/cargo-package.html)\n-   [cargo publish](commands/cargo-publish.html)\n-   [cargo yank](commands/cargo-yank.html)\n\n## [cargo-login(1)](#cargo-login1)\n\n## [NAME](#name-30)\n\ncargo-login — Log in to a registry\n\n## [SYNOPSIS](#synopsis-30)\n\n`cargo login` \\[_options_\\] \\[_token_\\] \\[`--` _args_\\]\n\n## [DESCRIPTION](#description-30)\n\nThis command will run a credential provider to save a token so that commands that require authentication, such as [cargo-publish(1)](commands/cargo-publish.html), will be automatically authenticated.\n\nAll the arguments following the two dashes (`--`) are passed to the credential provider.\n\nFor the default `cargo:token` credential provider, the token is saved in `$CARGO_HOME/credentials.toml`. `CARGO_HOME` defaults to `.cargo` in your home directory.\n\nIf a registry has a credential-provider specified, it will be used. Otherwise, the providers from the config value `registry.global-credential-providers` will be attempted, starting from the end of the list.\n\nIf the _token_ argument is not specified, it will be read from stdin.\n\nThe API token for crates.io may be retrieved from [https://crates.io/me](https://crates.io/me).\n\nTake care to keep the token secret, it should not be shared with anyone else.\n\n## [OPTIONS](#options-29)\n\n### [Login Options](#login-options)\n\n[](about:blank/commands/cargo-login.html#option-cargo-login---registry)`--registry` _registry_\n\nName of the registry to use. Registry names are defined in [Cargo config files](commands/../reference/config.html). If not specified, the default registry is used, which is defined by the `registry.default` config key which defaults to `crates-io`.\n\n### [Display Options](#display-options-27)\n\n[](about:blank/commands/cargo-login.html#option-cargo-login--v)`-v`\n\n[](about:blank/commands/cargo-login.html#option-cargo-login---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-login.html#option-cargo-login--q)`-q`\n\n[](about:blank/commands/cargo-login.html#option-cargo-login---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-login.html#option-cargo-login---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Common Options](#common-options-27)\n\n[](about:blank/commands/cargo-login.html#option-cargo-login-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-login.html#option-cargo-login---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-login.html#option-cargo-login--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-login.html#option-cargo-login--h)`-h`\n\n[](about:blank/commands/cargo-login.html#option-cargo-login---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-login.html#option-cargo-login--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-27)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-27)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-31)\n\n1.  Save the token for the default registry:\n    \n    ```\n    cargo login\n    \n    ```\n    \n2.  Save the token for a specific registry:\n    \n    ```\n    cargo login --registry my-registry\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-30)\n\n[cargo(1)](commands/cargo.html), [cargo-logout(1)](commands/cargo-logout.html), [cargo-publish(1)](commands/cargo-publish.html)\n\n## [cargo-logout(1)](#cargo-logout1)\n\n## [NAME](#name-31)\n\ncargo-logout — Remove an API token from the registry locally\n\n## [SYNOPSIS](#synopsis-31)\n\n`cargo logout` \\[_options_\\]\n\n## [DESCRIPTION](#description-31)\n\nThis command will run a credential provider to remove a saved token.\n\nFor the default `cargo:token` credential provider, credentials are stored in `$CARGO_HOME/credentials.toml` where `$CARGO_HOME` defaults to `.cargo` in your home directory.\n\nIf a registry has a credential-provider specified, it will be used. Otherwise, the providers from the config value `registry.global-credential-providers` will be attempted, starting from the end of the list.\n\nIf `--registry` is not specified, then the credentials for the default registry will be removed (configured by [`registry.default`](about:blank/reference/config.html#registrydefault), which defaults to [https://crates.io/](https://crates.io/)).\n\nThis will not revoke the token on the server. If you need to revoke the token, visit the registry website and follow its instructions (see [https://crates.io/me](https://crates.io/me) to revoke the token for [https://crates.io/](https://crates.io/)).\n\n## [OPTIONS](#options-30)\n\n### [Logout Options](#logout-options)\n\n[](about:blank/commands/cargo-logout.html#option-cargo-logout---registry)`--registry` _registry_\n\nName of the registry to use. Registry names are defined in [Cargo config files](commands/../reference/config.html). If not specified, the default registry is used, which is defined by the `registry.default` config key which defaults to `crates-io`.\n\n### [Display Options](#display-options-28)\n\n[](about:blank/commands/cargo-logout.html#option-cargo-logout--v)`-v`\n\n[](about:blank/commands/cargo-logout.html#option-cargo-logout---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-logout.html#option-cargo-logout--q)`-q`\n\n[](about:blank/commands/cargo-logout.html#option-cargo-logout---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-logout.html#option-cargo-logout---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Common Options](#common-options-28)\n\n[](about:blank/commands/cargo-logout.html#option-cargo-logout-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-logout.html#option-cargo-logout---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-logout.html#option-cargo-logout--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-logout.html#option-cargo-logout--h)`-h`\n\n[](about:blank/commands/cargo-logout.html#option-cargo-logout---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-logout.html#option-cargo-logout--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-28)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-28)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-32)\n\n1.  Remove the default registry token:\n    \n    ```\n    cargo logout\n    \n    ```\n    \n2.  Remove the token for a specific registry:\n    \n    ```\n    cargo logout --registry my-registry\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-31)\n\n[cargo(1)](commands/cargo.html), [cargo-login(1)](commands/cargo-login.html)\n\n## [cargo-owner(1)](#cargo-owner1)\n\n## [NAME](#name-32)\n\ncargo-owner — Manage the owners of a crate on the registry\n\n## [SYNOPSIS](#synopsis-32)\n\n`cargo owner` \\[_options_\\] `--add` _login_ \\[_crate_\\]  \n`cargo owner` \\[_options_\\] `--remove` _login_ \\[_crate_\\]  \n`cargo owner` \\[_options_\\] `--list` \\[_crate_\\]\n\n## [DESCRIPTION](#description-32)\n\nThis command will modify the owners for a crate on the registry. Owners of a crate can upload new versions and yank old versions. Non-team owners can also modify the set of owners, so take care!\n\nThis command requires you to be authenticated with either the `--token` option or using [cargo-login(1)](commands/cargo-login.html).\n\nIf the crate name is not specified, it will use the package name from the current directory.\n\nSee [the reference](about:blank/reference/publishing.html#cargo-owner) for more information about owners and publishing.\n\n## [OPTIONS](#options-31)\n\n### [Owner Options](#owner-options)\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner--a)`-a`\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner---add)`--add` _login_…\n\nInvite the given user or team as an owner.\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner--r)`-r`\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner---remove)`--remove` _login_…\n\nRemove the given user or team as an owner.\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner--l)`-l`\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner---list)`--list`\n\nList owners of a crate.\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner---token)`--token` _token_\n\nAPI token to use when authenticating. This overrides the token stored in the credentials file (which is created by [cargo-login(1)](commands/cargo-login.html)).\n\n[Cargo config](commands/../reference/config.html) environment variables can be used to override the tokens stored in the credentials file. The token for crates.io may be specified with the `CARGO_REGISTRY_TOKEN` environment variable. Tokens for other registries may be specified with environment variables of the form `CARGO_REGISTRIES_NAME_TOKEN` where `NAME` is the name of the registry in all capital letters.\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner---index)`--index` _index_\n\nThe URL of the registry index to use.\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner---registry)`--registry` _registry_\n\nName of the registry to use. Registry names are defined in [Cargo config files](commands/../reference/config.html). If not specified, the default registry is used, which is defined by the `registry.default` config key which defaults to `crates-io`.\n\n### [Display Options](#display-options-29)\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner--v)`-v`\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner--q)`-q`\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Common Options](#common-options-29)\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner--h)`-h`\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-owner.html#option-cargo-owner--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-29)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-29)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-33)\n\n1.  List owners of a package:\n    \n    ```\n    cargo owner --list foo\n    \n    ```\n    \n2.  Invite an owner to a package:\n    \n    ```\n    cargo owner --add username foo\n    \n    ```\n    \n3.  Remove an owner from a package:\n    \n    ```\n    cargo owner --remove username foo\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-32)\n\n[cargo(1)](commands/cargo.html), [cargo-login(1)](commands/cargo-login.html), [cargo-publish(1)](commands/cargo-publish.html)\n\n## [cargo-package(1)](#cargo-package1)\n\n## [NAME](#name-33)\n\ncargo-package — Assemble the local package into a distributable tarball\n\n## [SYNOPSIS](#synopsis-33)\n\n`cargo package` \\[_options_\\]\n\n## [DESCRIPTION](#description-33)\n\nThis command will create a distributable, compressed `.crate` file with the source code of the package in the current directory. The resulting file will be stored in the `target/package` directory. This performs the following steps:\n\n1.  Load and check the current workspace, performing some basic checks.\n    -   Path dependencies are not allowed unless they have a version key. Cargo will ignore the path key for dependencies in published packages. `dev-dependencies` do not have this restriction.\n2.  Create the compressed `.crate` file.\n    -   The original `Cargo.toml` file is rewritten and normalized.\n    -   `[patch]`, `[replace]`, and `[workspace]` sections are removed from the manifest.\n    -   `Cargo.lock` is automatically included if the package contains an executable binary or example target. [cargo-install(1)](commands/cargo-install.html) will use the packaged lock file if the `--locked` flag is used.\n    -   A `.cargo_vcs_info.json` file is included that contains information about the current VCS checkout hash if available (not included with `--allow-dirty`).\n3.  Extract the `.crate` file and build it to verify it can build.\n    -   This will rebuild your package from scratch to ensure that it can be built from a pristine state. The `--no-verify` flag can be used to skip this step.\n4.  Check that build scripts did not modify any source files.\n\nThe list of files included can be controlled with the `include` and `exclude` fields in the manifest.\n\nSee [the reference](commands/../reference/publishing.html) for more details about packaging and publishing.\n\n### [.cargo\\_vcs\\_info.json format](#cargo_vcs_infojson-format)\n\nWill generate a `.cargo_vcs_info.json` in the following format\n\n```javascript\n{\n \"git\": {\n   \"sha1\": \"aac20b6e7e543e6dd4118b246c77225e3a3a1302\"\n },\n \"path_in_vcs\": \"\"\n}\n\n```\n\n`path_in_vcs` will be set to a repo-relative path for packages in subdirectories of the version control repository.\n\nThe compatibility of this file is maintained under the same policy as the JSON output of [cargo-metadata(1)](commands/cargo-metadata.html).\n\nNote that this file provides a best-effort snapshot of the VCS information. However, the provenance of the package is not verified. There is no guarantee that the source code in the tarball matches the VCS information.\n\n## [OPTIONS](#options-32)\n\n### [Package Options](#package-options)\n\n[](about:blank/commands/cargo-package.html#option-cargo-package--l)`-l`\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---list)`--list`\n\nPrint files included in a package without making one.\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---no-verify)`--no-verify`\n\nDon’t verify the contents by building them.\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---no-metadata)`--no-metadata`\n\nIgnore warnings about a lack of human-usable metadata (such as the description or the license).\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---allow-dirty)`--allow-dirty`\n\nAllow working directories with uncommitted VCS changes to be packaged.\n\n### [Package Selection](#package-selection-14)\n\nBy default, when no package selection options are given, the packages selected depend on the selected manifest file (based on the current working directory if `--manifest-path` is not given). If the manifest is the root of a workspace then the workspaces default members are selected, otherwise only the package defined by the manifest will be selected.\n\nThe default members of a workspace can be set explicitly with the `workspace.default-members` key in the root manifest. If this is not set, a virtual workspace will include all workspace members (equivalent to passing `--workspace`), and a non-virtual workspace will include only the root crate itself.\n\n[](about:blank/commands/cargo-package.html#option-cargo-package--p)`-p` _spec_…\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---package)`--package` _spec_…\n\nPackage only the specified packages. See [cargo-pkgid(1)](commands/cargo-pkgid.html) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---workspace)`--workspace`\n\nPackage all members in the workspace.\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---exclude)`--exclude` _SPEC_…\n\nExclude the specified packages. Must be used in conjunction with the `--workspace` flag. This flag may be specified multiple times and supports common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern.\n\n### [Compilation Options](#compilation-options-10)\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---target)`--target` _triple_\n\nPackage for the given architecture. The default is the host architecture. The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a list of supported targets. This flag may be specified multiple times.\n\nThis may also be specified with the `build.target` [config value](commands/../reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the [build cache](commands/../guide/build-cache.html) documentation for more details.\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---target-dir)`--target-dir` _directory_\n\nDirectory for all generated artifacts and intermediate files. May also be specified with the `CARGO_TARGET_DIR` environment variable, or the `build.target-dir` [config value](commands/../reference/config.html). Defaults to `target` in the root of the workspace.\n\n### [Feature Selection](#feature-selection-12)\n\nThe feature flags allow you to control which features are enabled. When no feature options are given, the `default` feature is activated for every selected package.\n\nSee [the features documentation](about:blank/reference/features.html#command-line-feature-options) for more details.\n\n[](about:blank/commands/cargo-package.html#option-cargo-package--F)`-F` _features_\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---features)`--features` _features_\n\nSpace or comma separated list of features to activate. Features of workspace members may be enabled with `package-name/feature-name` syntax. This flag may be specified multiple times, which enables all specified features.\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---all-features)`--all-features`\n\nActivate all available features of all selected packages.\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---no-default-features)`--no-default-features`\n\nDo not activate the `default` feature of the selected packages.\n\n### [Manifest Options](#manifest-options-23)\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Miscellaneous Options](#miscellaneous-options-11)\n\n[](about:blank/commands/cargo-package.html#option-cargo-package--j)`-j` _N_\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---jobs)`--jobs` _N_\n\nNumber of parallel jobs to run. May also be specified with the `build.jobs` [config value](commands/../reference/config.html). Defaults to the number of logical CPUs. If negative, it sets the maximum number of parallel jobs to the number of logical CPUs plus provided value. If a string `default` is provided, it sets the value back to defaults. Should not be 0.\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---keep-going)`--keep-going`\n\nBuild as many crates in the dependency graph as possible, rather than aborting the build on the first one that fails to build.\n\nFor example if the current package depends on dependencies `fails` and `works`, one of which fails to build, `cargo package -j1` may or may not build the one that succeeds (depending on which one of the two builds Cargo picked to run first), whereas `cargo package -j1 --keep-going` would definitely run both builds, even if the one run first fails.\n\n### [Display Options](#display-options-30)\n\n[](about:blank/commands/cargo-package.html#option-cargo-package--v)`-v`\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-package.html#option-cargo-package--q)`-q`\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Common Options](#common-options-30)\n\n[](about:blank/commands/cargo-package.html#option-cargo-package-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-package.html#option-cargo-package--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-package.html#option-cargo-package--h)`-h`\n\n[](about:blank/commands/cargo-package.html#option-cargo-package---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-package.html#option-cargo-package--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-30)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-30)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-34)\n\n1.  Create a compressed `.crate` file of the current package:\n    \n    ```\n    cargo package\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-33)\n\n[cargo(1)](commands/cargo.html), [cargo-publish(1)](commands/cargo-publish.html)\n\n## [cargo-publish(1)](#cargo-publish1)\n\n## [NAME](#name-34)\n\ncargo-publish — Upload a package to the registry\n\n## [SYNOPSIS](#synopsis-34)\n\n`cargo publish` \\[_options_\\]\n\n## [DESCRIPTION](#description-34)\n\nThis command will create a distributable, compressed `.crate` file with the source code of the package in the current directory and upload it to a registry. The default registry is [https://crates.io](https://crates.io/). This performs the following steps:\n\n1.  Performs a few checks, including:\n    -   Checks the `package.publish` key in the manifest for restrictions on which registries you are allowed to publish to.\n2.  Create a `.crate` file by following the steps in [cargo-package(1)](commands/cargo-package.html).\n3.  Upload the crate to the registry. The server will perform additional checks on the crate.\n4.  The client will poll waiting for the package to appear in the index, and may timeout. In that case, you will need to check for completion manually. This timeout does not affect the upload.\n\nThis command requires you to be authenticated with either the `--token` option or using [cargo-login(1)](commands/cargo-login.html).\n\nSee [the reference](commands/../reference/publishing.html) for more details about packaging and publishing.\n\n## [OPTIONS](#options-33)\n\n### [Publish Options](#publish-options)\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---dry-run)`--dry-run`\n\nPerform all checks without uploading.\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---token)`--token` _token_\n\nAPI token to use when authenticating. This overrides the token stored in the credentials file (which is created by [cargo-login(1)](commands/cargo-login.html)).\n\n[Cargo config](commands/../reference/config.html) environment variables can be used to override the tokens stored in the credentials file. The token for crates.io may be specified with the `CARGO_REGISTRY_TOKEN` environment variable. Tokens for other registries may be specified with environment variables of the form `CARGO_REGISTRIES_NAME_TOKEN` where `NAME` is the name of the registry in all capital letters.\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---no-verify)`--no-verify`\n\nDon’t verify the contents by building them.\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---allow-dirty)`--allow-dirty`\n\nAllow working directories with uncommitted VCS changes to be packaged.\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---index)`--index` _index_\n\nThe URL of the registry index to use.\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---registry)`--registry` _registry_\n\nName of the registry to publish to. Registry names are defined in [Cargo config files](commands/../reference/config.html). If not specified, and there is a [`package.publish`](about:blank/reference/manifest.html#the-publish-field) field in `Cargo.toml` with a single registry, then it will publish to that registry. Otherwise it will use the default registry, which is defined by the [`registry.default`](about:blank/reference/config.html#registrydefault) config key which defaults to `crates-io`.\n\n### [Package Selection](#package-selection-15)\n\nBy default, the package in the current working directory is selected. The `-p` flag can be used to choose a different package in a workspace.\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish--p)`-p` _spec_\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---package)`--package` _spec_\n\nThe package to publish. See [cargo-pkgid(1)](commands/cargo-pkgid.html) for the SPEC format.\n\n### [Compilation Options](#compilation-options-11)\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---target)`--target` _triple_\n\nPublish for the given architecture. The default is the host architecture. The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>`. Run `rustc --print target-list` for a list of supported targets. This flag may be specified multiple times.\n\nThis may also be specified with the `build.target` [config value](commands/../reference/config.html).\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the [build cache](commands/../guide/build-cache.html) documentation for more details.\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---target-dir)`--target-dir` _directory_\n\nDirectory for all generated artifacts and intermediate files. May also be specified with the `CARGO_TARGET_DIR` environment variable, or the `build.target-dir` [config value](commands/../reference/config.html). Defaults to `target` in the root of the workspace.\n\n### [Feature Selection](#feature-selection-13)\n\nThe feature flags allow you to control which features are enabled. When no feature options are given, the `default` feature is activated for every selected package.\n\nSee [the features documentation](about:blank/reference/features.html#command-line-feature-options) for more details.\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish--F)`-F` _features_\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---features)`--features` _features_\n\nSpace or comma separated list of features to activate. Features of workspace members may be enabled with `package-name/feature-name` syntax. This flag may be specified multiple times, which enables all specified features.\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---all-features)`--all-features`\n\nActivate all available features of all selected packages.\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---no-default-features)`--no-default-features`\n\nDo not activate the `default` feature of the selected packages.\n\n### [Manifest Options](#manifest-options-24)\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---manifest-path)`--manifest-path` _path_\n\nPath to the `Cargo.toml` file. By default, Cargo searches for the `Cargo.toml` file in the current directory or any parent directory.\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---locked)`--locked`\n\nAsserts that the exact same dependencies and versions are used as when the existing `Cargo.lock` file was originally generated. Cargo will exit with an error when either of the following scenarios arises:\n\n-   The lock file is missing.\n-   Cargo attempted to change the lock file due to a different dependency resolution.\n\nIt may be used in environments where deterministic builds are desired, such as in CI pipelines.\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---offline)`--offline`\n\nPrevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the [cargo-fetch(1)](commands/cargo-fetch.html) command to download dependencies before going offline.\n\nMay also be specified with the `net.offline` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---frozen)`--frozen`\n\nEquivalent to specifying both `--locked` and `--offline`.\n\n### [Miscellaneous Options](#miscellaneous-options-12)\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish--j)`-j` _N_\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---jobs)`--jobs` _N_\n\nNumber of parallel jobs to run. May also be specified with the `build.jobs` [config value](commands/../reference/config.html). Defaults to the number of logical CPUs. If negative, it sets the maximum number of parallel jobs to the number of logical CPUs plus provided value. If a string `default` is provided, it sets the value back to defaults. Should not be 0.\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---keep-going)`--keep-going`\n\nBuild as many crates in the dependency graph as possible, rather than aborting the build on the first one that fails to build.\n\nFor example if the current package depends on dependencies `fails` and `works`, one of which fails to build, `cargo publish -j1` may or may not build the one that succeeds (depending on which one of the two builds Cargo picked to run first), whereas `cargo publish -j1 --keep-going` would definitely run both builds, even if the one run first fails.\n\n### [Display Options](#display-options-31)\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish--v)`-v`\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish--q)`-q`\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Common Options](#common-options-31)\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish--h)`-h`\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-publish.html#option-cargo-publish--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-31)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-31)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-35)\n\n1.  Publish the current package:\n    \n    ```\n    cargo publish\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-34)\n\n[cargo(1)](commands/cargo.html), [cargo-package(1)](commands/cargo-package.html), [cargo-login(1)](commands/cargo-login.html)\n\n## [cargo-yank(1)](#cargo-yank1)\n\n## [NAME](#name-35)\n\ncargo-yank — Remove a pushed crate from the index\n\n## [SYNOPSIS](#synopsis-35)\n\n`cargo yank` \\[_options_\\] _crate_@_version_  \n`cargo yank` \\[_options_\\] `--version` _version_ \\[_crate_\\]\n\n## [DESCRIPTION](#description-35)\n\nThe yank command removes a previously published crate’s version from the server’s index. This command does not delete any data, and the crate will still be available for download via the registry’s download link.\n\nCargo will not use a yanked version for any new project or checkout without a pre-existing lockfile, and will generate an error if there are no longer any compatible versions for your crate.\n\nThis command requires you to be authenticated with either the `--token` option or using [cargo-login(1)](commands/cargo-login.html).\n\nIf the crate name is not specified, it will use the package name from the current directory.\n\n### [How yank works](#how-yank-works)\n\nFor example, the `foo` crate published version `1.5.0` and another crate `bar` declared a dependency on version `foo = \"1.5\"`. Now `foo` releases a new, but not semver compatible, version `2.0.0`, and finds a critical issue with `1.5.0`. If `1.5.0` is yanked, no new project or checkout without an existing lockfile will be able to use crate `bar` as it relies on `1.5`.\n\nIn this case, the maintainers of `foo` should first publish a semver compatible version such as `1.5.1` prior to yanking `1.5.0` so that `bar` and all projects that depend on `bar` will continue to work.\n\nAs another example, consider a crate `bar` with published versions `1.5.0`, `1.5.1`, `1.5.2`, `2.0.0` and `3.0.0`. The following table identifies the versions cargo could use in the absence of a lockfile for different SemVer requirements, following a given release being yanked:\n\n| Yanked Version / SemVer requirement | `bar = \"1.5.0\"` | `bar = \"=1.5.0\"` | `bar = \"2.0.0\"` |\n| --- | --- | --- | --- |\n| `1.5.0` | Use either `1.5.1` or `1.5.2` | **Return Error** | Use `2.0.0` |\n| `1.5.1` | Use either `1.5.0` or `1.5.2` | Use `1.5.0` | Use `2.0.0` |\n| `2.0.0` | Use either `1.5.0`, `1.5.1` or `1.5.2` | Use `1.5.0` | **Return Error** |\n\n### [When to yank](#when-to-yank)\n\nCrates should only be yanked in exceptional circumstances, for example, an accidental publish, an unintentional SemVer breakages, or a significantly broken and unusable crate. In the case of security vulnerabilities, [RustSec](https://rustsec.org/) is typically a less disruptive mechanism to inform users and encourage them to upgrade, and avoids the possibility of significant downstream disruption irrespective of susceptibility to the vulnerability in question.\n\nA common workflow is to yank a crate having already published a semver compatible version, to reduce the probability of preventing dependent crates from compiling.\n\nWhen addressing copyright, licensing, or personal data issues with a published crate, simply yanking it may not suffice. In such cases, contact the maintainers of the registry you used. For crates.io, refer to their [policies](https://crates.io/policies) and contact them at [help@crates.io](mailto:commands/help@crates.io).\n\nIf credentials have been leaked, the recommended course of action is to revoke them immediately. Once a crate has been published, it is impossible to determine if the leaked credentials have been copied. Yanking the crate only prevents new users from downloading it, but cannot stop those who have already downloaded it from keeping or even spreading the leaked credentials.\n\n## [OPTIONS](#options-34)\n\n### [Yank Options](#yank-options)\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank---vers)`--vers` _version_\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank---version)`--version` _version_\n\nThe version to yank or un-yank.\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank---undo)`--undo`\n\nUndo a yank, putting a version back into the index.\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank---token)`--token` _token_\n\nAPI token to use when authenticating. This overrides the token stored in the credentials file (which is created by [cargo-login(1)](commands/cargo-login.html)).\n\n[Cargo config](commands/../reference/config.html) environment variables can be used to override the tokens stored in the credentials file. The token for crates.io may be specified with the `CARGO_REGISTRY_TOKEN` environment variable. Tokens for other registries may be specified with environment variables of the form `CARGO_REGISTRIES_NAME_TOKEN` where `NAME` is the name of the registry in all capital letters.\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank---index)`--index` _index_\n\nThe URL of the registry index to use.\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank---registry)`--registry` _registry_\n\nName of the registry to use. Registry names are defined in [Cargo config files](commands/../reference/config.html). If not specified, the default registry is used, which is defined by the `registry.default` config key which defaults to `crates-io`.\n\n### [Display Options](#display-options-32)\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank--v)`-v`\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank---verbose)`--verbose`\n\nUse verbose output. May be specified twice for “very verbose” output which includes extra output such as dependency warnings and build script output. May also be specified with the `term.verbose` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank--q)`-q`\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank---quiet)`--quiet`\n\nDo not print cargo log messages. May also be specified with the `term.quiet` [config value](commands/../reference/config.html).\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank---color)`--color` _when_\n\nControl when colored output is used. Valid values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nMay also be specified with the `term.color` [config value](commands/../reference/config.html).\n\n### [Common Options](#common-options-32)\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank-+toolchain)`+`_toolchain_\n\nIf Cargo has been installed with rustup, and the first argument to `cargo` begins with `+`, it will be interpreted as a rustup toolchain name (such as `+stable` or `+nightly`). See the [rustup documentation](https://rust-lang.github.io/rustup/overrides.html) for more information about how toolchain overrides work.\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank---config)`--config` _KEY=VALUE_ or _PATH_\n\nOverrides a Cargo configuration value. The argument should be in TOML syntax of `KEY=VALUE`, or provided as a path to an extra configuration file. This flag may be specified multiple times. See the [command-line overrides section](about:blank/reference/config.html#command-line-overrides) for more information.\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank--C)`-C` _PATH_\n\nChanges the current working directory before executing any specified operations. This affects things like where cargo looks by default for the project manifest (`Cargo.toml`), as well as the directories searched for discovering `.cargo/config.toml`, for example. This option must appear before the command name, for example `cargo -C path/to/my-project build`.\n\nThis option is only available on the [nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html) and requires the `-Z unstable-options` flag to enable (see [#10098](https://github.com/rust-lang/cargo/issues/10098)).\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank--h)`-h`\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank---help)`--help`\n\nPrints help information.\n\n[](about:blank/commands/cargo-yank.html#option-cargo-yank--Z)`-Z` _flag_\n\nUnstable (nightly-only) flags to Cargo. Run `cargo -Z help` for details.\n\n## [ENVIRONMENT](#environment-32)\n\nSee [the reference](commands/../reference/environment-variables.html) for details on environment variables that Cargo reads.\n\n## [EXIT STATUS](#exit-status-32)\n\n-   `0`: Cargo succeeded.\n-   `101`: Cargo failed to complete.\n\n## [EXAMPLES](#examples-36)\n\n1.  Yank a crate from the index:\n    \n    ```\n    cargo yank foo@1.0.7\n    \n    ```\n    \n\n## [SEE ALSO](#see-also-35)\n\n[cargo(1)](commands/cargo.html), [cargo-login(1)](commands/cargo-login.html), [cargo-publish(1)](commands/cargo-publish.html)\n\n## [Frequently Asked Questions](#frequently-asked-questions)\n\n## [Is the plan to use GitHub as a package repository?](#is-the-plan-to-use-github-as-a-package-repository)\n\nNo. The plan for Cargo is to use [crates.io](https://crates.io/), like npm or Rubygems do with [npmjs.com](https://www.npmjs.com/) and [rubygems.org](https://rubygems.org/).\n\nWe plan to support git repositories as a source of packages forever, because they can be used for early development and temporary patches, even when people use the registry as the primary source of packages.\n\n## [Why build crates.io rather than use GitHub as a registry?](#why-build-cratesio-rather-than-use-github-as-a-registry)\n\nWe think that it’s very important to support multiple ways to download packages, including downloading from GitHub and copying packages into your package itself.\n\nThat said, we think that [crates.io](https://crates.io/) offers a number of important benefits, and will likely become the primary way that people download packages in Cargo.\n\nFor precedent, both Node.js’s [npm](https://www.npmjs.com/) and Ruby’s [bundler](https://bundler.io/) support both a central registry model as well as a Git-based model, and most packages are downloaded through the registry in those ecosystems, with an important minority of packages making use of git-based packages.\n\nSome of the advantages that make a central registry popular in other languages include:\n\n-   **Discoverability**. A central registry provides an easy place to look for existing packages. Combined with tagging, this also makes it possible for a registry to provide ecosystem-wide information, such as a list of the most popular or most-depended-on packages.\n-   **Speed**. A central registry makes it possible to easily fetch just the metadata for packages quickly and efficiently, and then to efficiently download just the published package, and not other bloat that happens to exist in the repository. This adds up to a significant improvement in the speed of dependency resolution and fetching. As dependency graphs scale up, downloading all of the git repositories bogs down fast. Also remember that not everybody has a high-speed, low-latency Internet connection.\n\n## [Will Cargo work with C code (or other languages)?](#will-cargo-work-with-c-code-or-other-languages)\n\nYes!\n\nCargo handles compiling Rust code, but we know that many Rust packages link against C code. We also know that there are decades of tooling built up around compiling languages other than Rust.\n\nOur solution: Cargo allows a package to [specify a script](reference/build-scripts.html) (written in Rust) to run before invoking `rustc`. Rust is leveraged to implement platform-specific configuration and refactor out common build functionality among packages.\n\n## [Can Cargo be used inside of `make` (or `ninja`, or …)](#can-cargo-be-used-inside-of-make-or-ninja-or-)\n\nIndeed. While we intend Cargo to be useful as a standalone way to compile Rust packages at the top-level, we know that some people will want to invoke Cargo from other build tools.\n\nWe have designed Cargo to work well in those contexts, paying attention to things like error codes and machine-readable output modes. We still have some work to do on those fronts, but using Cargo in the context of conventional scripts is something we designed for from the beginning and will continue to prioritize.\n\n## [Does Cargo handle multi-platform packages or cross-compilation?](#does-cargo-handle-multi-platform-packages-or-cross-compilation)\n\nRust itself provides facilities for configuring sections of code based on the platform. Cargo also supports [platform-specific dependencies](about:blank/reference/specifying-dependencies.html#platform-specific-dependencies), and we plan to support more per-platform configuration in `Cargo.toml` in the future.\n\nIn the longer-term, we’re looking at ways to conveniently cross-compile packages using Cargo.\n\n## [Does Cargo support environments, like `production` or `test`?](#does-cargo-support-environments-like-production-or-test)\n\nWe support environments through the use of [profiles](reference/profiles.html) to support:\n\n-   environment-specific flags (like `-g --opt-level=0` for development and `--opt-level=3` for production).\n-   environment-specific dependencies (like `hamcrest` for test assertions).\n-   environment-specific `#[cfg]`\n-   a `cargo test` command\n\n## [Does Cargo work on Windows?](#does-cargo-work-on-windows)\n\nYes!\n\nAll commits to Cargo are required to pass the local test suite on Windows. If you encounter an issue while running on Windows, we consider it a bug, so [please file an issue](https://github.com/rust-lang/cargo/issues).\n\n## [Why have `Cargo.lock` in version control?](#why-have-cargolock-in-version-control)\n\nWhile [`cargo new`](commands/cargo-new.html) defaults to tracking `Cargo.lock` in version control, whether you do is dependent on the needs of your package.\n\nThe purpose of a `Cargo.lock` lockfile is to describe the state of the world at the time of a successful build. Cargo uses the lockfile to provide deterministic builds at different times and on different systems, by ensuring that the exact same dependencies and versions are used as when the `Cargo.lock` file was originally generated.\n\nDeterministic builds help with\n\n-   Running `git bisect` to find the root cause of a bug\n-   Ensuring CI only fails due to new commits and not external factors\n-   Reducing confusion when contributors see different behavior as compared to other contributors or CI\n\nHaving this snapshot of dependencies can also help when projects need to be verified against consistent versions of dependencies, like when\n\n-   Verifying a minimum-supported Rust version (MSRV) that is less than the latest version of a dependency supports\n-   Verifying human readable output which won’t have compatibility guarantees (e.g. snapshot testing error messages to ensure they are “understandable”, a metric too fuzzy to automate)\n\nHowever, this determinism can give a false sense of security because `Cargo.lock` does not affect the consumers of your package, only `Cargo.toml` does that. For example:\n\n-   [`cargo install`](commands/cargo-install.html) will select the latest dependencies unless `--locked` is passed in.\n-   New dependencies, like those added with [`cargo add`](commands/cargo-add.html), will be locked to the latest version\n\nThe lockfile can also be a source of merge conflicts.\n\nFor strategies to verify newer versions of dependencies via CI, see [Verifying Latest Dependencies](about:blank/guide/continuous-integration.html#verifying-latest-dependencies).\n\n## [Can libraries use `*` as a version for their dependencies?](#can-libraries-use--as-a-version-for-their-dependencies)\n\n**As of January 22nd, 2016, [crates.io](https://crates.io/) rejects all packages (not just libraries) with wildcard dependency constraints.**\n\nWhile libraries _can_, strictly speaking, they should not. A version requirement of `*` says “This will work with every version ever”, which is never going to be true. Libraries should always specify the range that they do work with, even if it’s something as general as “every 1.x.y version”.\n\n## [Why `Cargo.toml`?](#why-cargotoml)\n\nAs one of the most frequent interactions with Cargo, the question of why the configuration file is named `Cargo.toml` arises from time to time. The leading capital-`C` was chosen to ensure that the manifest was grouped with other similar configuration files in directory listings. Sorting files often puts capital letters before lowercase letters, ensuring files like `Makefile` and `Cargo.toml` are placed together. The trailing `.toml` was chosen to emphasize the fact that the file is in the [TOML configuration format](https://toml.io/).\n\nCargo does not allow other names such as `cargo.toml` or `Cargofile` to emphasize the ease of how a Cargo repository can be identified. An option of many possible names has historically led to confusion where one case was handled but others were accidentally forgotten.\n\n## [How can Cargo work offline?](#how-can-cargo-work-offline)\n\nCargo is often used in situations with limited or no network access such as airplanes, CI environments, or embedded in large production deployments. Users are often surprised when Cargo attempts to fetch resources from the network, and hence the request for Cargo to work offline comes up frequently.\n\nCargo, at its heart, will not attempt to access the network unless told to do so. That is, if no crates come from crates.io, a git repository, or some other network location, Cargo will never attempt to make a network connection. As a result, if Cargo attempts to touch the network, then it’s because it needs to fetch a required resource.\n\nCargo is also quite aggressive about caching information to minimize the amount of network activity. It will guarantee, for example, that if `cargo build` (or an equivalent) is run to completion then the next `cargo build` is guaranteed to not touch the network so long as `Cargo.toml` has not been modified in the meantime. This avoidance of the network boils down to a `Cargo.lock` existing and a populated cache of the crates reflected in the lock file. If either of these components are missing, then they’re required for the build to succeed and must be fetched remotely.\n\nAs of Rust 1.11.0, Cargo understands a new flag, `--frozen`, which is an assertion that it shouldn’t touch the network. When passed, Cargo will immediately return an error if it would otherwise attempt a network request. The error should include contextual information about why the network request is being made in the first place to help debug as well. Note that this flag _does not change the behavior of Cargo_, it simply asserts that Cargo shouldn’t touch the network as a previous command has been run to ensure that network activity shouldn’t be necessary.\n\nThe `--offline` flag was added in Rust 1.36.0. This flag tells Cargo to not access the network, and try to proceed with available cached data if possible. You can use [`cargo fetch`](commands/cargo-fetch.html) in one project to download dependencies before going offline, and then use those same dependencies in another project with the `--offline` flag (or [configuration value](about:blank/reference/config.html#netoffline)).\n\nFor more information about vendoring, see documentation on [source replacement](reference/source-replacement.html).\n\n## [Why is Cargo rebuilding my code?](#why-is-cargo-rebuilding-my-code)\n\nCargo is responsible for incrementally compiling crates in your project. This means that if you type `cargo build` twice the second one shouldn’t rebuild your crates.io dependencies, for example. Nevertheless bugs arise and Cargo can sometimes rebuild code when you’re not expecting it!\n\nWe’ve long [wanted to provide better diagnostics about this](https://github.com/rust-lang/cargo/issues/2904) but unfortunately haven’t been able to make progress on that issue in quite some time. In the meantime, however, you can debug a rebuild at least a little by setting the `CARGO_LOG` environment variable:\n\n```sh\n$ CARGO_LOG=cargo::core::compiler::fingerprint=info cargo build\n\n```\n\nThis will cause Cargo to print out a lot of information about diagnostics and rebuilding. This can often contain clues as to why your project is getting rebuilt, although you’ll often need to connect some dots yourself since this output isn’t super easy to read just yet. Note that the `CARGO_LOG` needs to be set for the command that rebuilds when you think it should not. Unfortunately Cargo has no way right now of after-the-fact debugging “why was that rebuilt?”\n\nSome issues we’ve seen historically which can cause crates to get rebuilt are:\n\n-   A build script prints `cargo::rerun-if-changed=foo` where `foo` is a file that doesn’t exist and nothing generates it. In this case Cargo will keep running the build script thinking it will generate the file but nothing ever does. The fix is to avoid printing `rerun-if-changed` in this scenario.\n    \n-   Two successive Cargo builds may differ in the set of features enabled for some dependencies. For example if the first build command builds the whole workspace and the second command builds only one crate, this may cause a dependency on crates.io to have a different set of features enabled, causing it and everything that depends on it to get rebuilt. There’s unfortunately not really a great fix for this, although if possible it’s best to have the set of features enabled on a crate constant regardless of what you’re building in your workspace.\n    \n-   Some filesystems exhibit unusual behavior around timestamps. Cargo primarily uses timestamps on files to govern whether rebuilding needs to happen, but if you’re using a nonstandard filesystem it may be affecting the timestamps somehow (e.g. truncating them, causing them to drift, etc). In this scenario, feel free to open an issue and we can see if we can accommodate the filesystem somehow.\n    \n-   A concurrent build process is either deleting artifacts or modifying files. Sometimes you might have a background process that either tries to build or check your project. These background processes might surprisingly delete some build artifacts or touch files (or maybe just by accident), which can cause rebuilds to look spurious! The best fix here would be to wrangle the background process to avoid clashing with your work.\n    \n\nIf after trying to debug your issue, however, you’re still running into problems then feel free to [open an issue](https://github.com/rust-lang/cargo/issues/new)!\n\n## [What does “version conflict” mean and how to resolve it?](#what-does-version-conflict-mean-and-how-to-resolve-it)\n\n> failed to select a version for `x` which could resolve this conflict\n\nHave you seen the error message above?\n\nThis is one of the most annoying error message for Cargo users. There are several situations may lead us to a version conflict. Below we’ll walk through possible causes and provide diagnostic techniques to help you out there:\n\n-   The project and its dependencies use [links](https://doc.rust-lang.org/cargo/reference/resolver.html#links) to repeatedly link the local library. Cargo forbids linking two packages with the same native library, so even with multiple layers of dependencies it is not allowed. In this case, the error message will prompt: `Only one package in the dependency graph may specify the same links value`, you may need to manually check and delete duplicate link values. The community also have [conventions in place](https://doc.rust-lang.org/cargo/reference/build-scripts.html#-sys-packages) to alleviate this.\n    \n-   When depending on different crates in the project, if these crates use the same dependent library, but the version used is restricted, making it impossible to determine the correct version, it will also cause conflicts. The error message will prompt: `all possible versions conflict with previously selected packages`. You may need to modify the version requirements to make them consistent.\n    \n-   If there are multiple versions of dependencies in the project, when using [`direct-minimal-versions`](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#direct-minimal-versions), the minimum version requirements cannot be met, which will cause conflicts. You may need to modify version requirements of your direct dependencies to meet the minimum SemVer version accordingly.\n    \n-   If the dependent crate does not have the features you choose, it will also cause conflicts. At this time, you need to check the dependent version and its features.\n    \n-   Conflicts may occur when merging branches or PRs, if there are non-trivial conflicts, you can reset all “yours” changes, fix all other conflicts in the branch, and then run some cargo command (like `cargo tree` or `cargo check`), which should re-update the lockfile with your own local changes. If you previously ran some `cargo update` commands in your branch, you can re-run them that this time. The community has been looking to resolve merge conflicts with `Cargo.lock` and `Cargo.toml` using a [custom merge tool](https://github.com/rust-lang/cargo/issues/1818).\n    \n\n## [Glossary](#glossary)\n\n## [Artifact](#artifact)\n\nAn _artifact_ is the file or set of files created as a result of the compilation process. This includes linkable libraries, executable binaries, and generated documentation.\n\n## [Cargo](#cargo-1)\n\n_Cargo_ is the Rust [_package manager_](about:blank/appendix/glossary.html#package-manager), and the primary topic of this book.\n\n## [Cargo.lock](#cargolock)\n\nSee [_lock file_](about:blank/appendix/glossary.html#lock-file).\n\n## [Cargo.toml](#cargotoml)\n\nSee [_manifest_](about:blank/appendix/glossary.html#manifest).\n\n## [Crate](#crate)\n\nA Rust _crate_ is either a library or an executable program, referred to as either a _library crate_ or a _binary crate_, respectively.\n\nEvery [target](about:blank/appendix/glossary.html#target) defined for a Cargo [package](about:blank/appendix/glossary.html#package) is a _crate_.\n\nLoosely, the term _crate_ may refer to either the source code of the target or to the compiled artifact that the target produces. It may also refer to a compressed package fetched from a [registry](about:blank/appendix/glossary.html#registry).\n\nThe source code for a given crate may be subdivided into [_modules_](about:blank/appendix/glossary.html#module).\n\n## [Edition](#edition-1)\n\nA _Rust edition_ is a developmental landmark of the Rust language. The [edition of a package](about:blank/reference/manifest.html#the-edition-field) is specified in the `Cargo.toml` [manifest](about:blank/appendix/glossary.html#manifest), and individual targets can specify which edition they use. See the [Edition Guide](appendix/../../edition-guide/index.html) for more information.\n\n## [Feature](#feature)\n\nThe meaning of _feature_ depends on the context:\n\n-   A [_feature_](appendix/../reference/features.html) is a named flag which allows for conditional compilation. A feature can refer to an optional dependency, or an arbitrary name defined in a `Cargo.toml` [manifest](about:blank/appendix/glossary.html#manifest) that can be checked within source code.\n    \n-   Cargo has [_unstable feature flags_](appendix/../reference/unstable.html) which can be used to enable experimental behavior of Cargo itself.\n    \n-   The Rust compiler and Rustdoc have their own unstable feature flags (see [The Unstable Book](https://doc.rust-lang.org/nightly/unstable-book/index.html) and [The Rustdoc Book](https://doc.rust-lang.org/nightly/rustdoc/unstable-features.html)).\n    \n-   CPU targets have [_target features_](about:blank/reference/attributes/codegen.html#the-target_feature-attribute) which specify capabilities of a CPU.\n    \n\n## [Index](#index)\n\nThe _index_ is the searchable list of [_crates_](about:blank/appendix/glossary.html#crate) in a [_registry_](about:blank/appendix/glossary.html#registry).\n\n## [Lock file](#lock-file)\n\nThe `Cargo.lock` _lock file_ is a file that captures the exact version of every dependency used in a [_workspace_](about:blank/appendix/glossary.html#workspace) or [_package_](about:blank/appendix/glossary.html#package). It is automatically generated by Cargo. See [Cargo.toml vs Cargo.lock](appendix/../guide/cargo-toml-vs-cargo-lock.html).\n\n## [Manifest](#manifest)\n\nA [_manifest_](appendix/../reference/manifest.html) is a description of a [package](about:blank/appendix/glossary.html#package) or a [workspace](about:blank/appendix/glossary.html#workspace) in a file named `Cargo.toml`.\n\nA [_virtual manifest_](appendix/../reference/workspaces.html) is a `Cargo.toml` file that only describes a workspace, and does not include a package.\n\n## [Member](#member)\n\nA _member_ is a [_package_](about:blank/appendix/glossary.html#package) that belongs to a [_workspace_](about:blank/appendix/glossary.html#workspace).\n\n## [Module](#module)\n\nRust’s module system is used to organize code into logical units called _modules_, which provide isolated namespaces within the code.\n\nThe source code for a given [crate](about:blank/appendix/glossary.html#crate) may be subdivided into one or more separate modules. This is usually done to organize the code into areas of related functionality or to control the visible scope (public/private) of symbols within the source (structs, functions, and so on).\n\nA [`Cargo.toml`](about:blank/appendix/glossary.html#manifest) file is primarily concerned with the [package](about:blank/appendix/glossary.html#package) it defines, its crates, and the packages of the crates on which they depend. Nevertheless, you will see the term “module” often when working with Rust, so you should understand its relationship to a given crate.\n\n## [Package](#package)\n\nA _package_ is a collection of source files and a `Cargo.toml` [_manifest_](about:blank/appendix/glossary.html#manifest) file which describes the package. A package has a name and version which is used for specifying dependencies between packages.\n\nA package contains multiple [_targets_](about:blank/appendix/glossary.html#target), each of which is a [_crate_](about:blank/appendix/glossary.html#crate). The `Cargo.toml` file describes the type of the crates (binary or library) within the package, along with some metadata about each one — how each is to be built, what their direct dependencies are, etc., as described throughout this book.\n\nThe _package root_ is the directory where the package’s `Cargo.toml` manifest is located. (Compare with [_workspace root_](about:blank/appendix/glossary.html#workspace).)\n\nThe [_package ID specification_](appendix/../reference/pkgid-spec.html), or _SPEC_, is a string used to uniquely reference a specific version of a package from a specific source.\n\nSmall to medium sized Rust projects will only need a single package, though it is common for them to have multiple crates.\n\nLarger projects may involve multiple packages, in which case Cargo [_workspaces_](about:blank/appendix/glossary.html#workspace) can be used to manage common dependencies and other related metadata between the packages.\n\n## [Package manager](#package-manager)\n\nBroadly speaking, a _package manager_ is a program (or collection of related programs) in a software ecosystem that automates the process of obtaining, installing, and upgrading artifacts. Within a programming language ecosystem, a package manager is a developer-focused tool whose primary functionality is to download library artifacts and their dependencies from some central repository; this capability is often combined with the ability to perform software builds (by invoking the language-specific compiler).\n\n[_Cargo_](about:blank/appendix/glossary.html#cargo) is the package manager within the Rust ecosystem. Cargo downloads your Rust [package](about:blank/appendix/glossary.html#package)’s dependencies ([_artifacts_](about:blank/appendix/glossary.html#artifact) known as [_crates_](about:blank/appendix/glossary.html#crate)), compiles your packages, makes distributable packages, and (optionally) uploads them to [crates.io](https://crates.io/), the Rust community’s [_package registry_](about:blank/appendix/glossary.html#registry).\n\n## [Package registry](#package-registry)\n\nSee [_registry_](about:blank/appendix/glossary.html#registry).\n\n## [Project](#project)\n\nAnother name for a [package](about:blank/appendix/glossary.html#package).\n\n## [Registry](#registry-1)\n\nA _registry_ is a service that contains a collection of downloadable [_crates_](about:blank/appendix/glossary.html#crate) that can be installed or used as dependencies for a [_package_](about:blank/appendix/glossary.html#package). The default registry in the Rust ecosystem is [crates.io](https://crates.io/). The registry has an [_index_](about:blank/appendix/glossary.html#index) which contains a list of all crates, and tells Cargo how to download the crates that are needed.\n\n## [Source](#source-1)\n\nA _source_ is a provider that contains [_crates_](about:blank/appendix/glossary.html#crate) that may be included as dependencies for a [_package_](about:blank/appendix/glossary.html#package). There are several kinds of sources:\n\n-   **Registry source** — See [registry](about:blank/appendix/glossary.html#registry).\n-   **Local registry source** — A set of crates stored as compressed files on the filesystem. See [Local Registry Sources](about:blank/reference/source-replacement.html#local-registry-sources).\n-   **Directory source** — A set of crates stored as uncompressed files on the filesystem. See [Directory Sources](about:blank/reference/source-replacement.html#directory-sources).\n-   **Path source** — An individual package located on the filesystem (such as a [path dependency](about:blank/reference/specifying-dependencies.html#specifying-path-dependencies)) or a set of multiple packages (such as [path overrides](about:blank/reference/overriding-dependencies.html#paths-overrides)).\n-   **Git source** — Packages located in a git repository (such as a [git dependency](about:blank/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories) or [git source](appendix/../reference/source-replacement.html)).\n\nSee [Source Replacement](appendix/../reference/source-replacement.html) for more information.\n\n## [Spec](#spec)\n\nSee [package ID specification](about:blank/appendix/glossary.html#package).\n\n## [Target](#target-1)\n\nThe meaning of the term _target_ depends on the context:\n\n-   **Cargo Target** — Cargo [_packages_](about:blank/appendix/glossary.html#package) consist of _targets_ which correspond to [_artifacts_](about:blank/appendix/glossary.html#artifact) that will be produced. Packages can have library, binary, example, test, and benchmark targets. The [list of targets](about:blank/reference/cargo-targets.html#configuring-a-target) are configured in the `Cargo.toml` [_manifest_](about:blank/appendix/glossary.html#manifest), often inferred automatically by the [directory layout](appendix/../guide/project-layout.html) of the source files.\n    \n-   **Target Directory** — Cargo places all built artifacts and intermediate files in the _target_ directory. By default this is a directory named `target` at the [_workspace_](about:blank/appendix/glossary.html#workspace) root, or the package root if not using a workspace. The directory may be changed with the `--target-dir` command-line option, the `CARGO_TARGET_DIR` [environment variable](appendix/../reference/environment-variables.html), or the `build.target-dir` [config option](appendix/../reference/config.html).\n    \n-   **Target Architecture** — The OS and machine architecture for the built artifacts are typically referred to as a _target_.\n    \n-   **Target Triple** — A triple is a specific format for specifying a target architecture. Triples may be referred to as a _target triple_ which is the architecture for the artifact produced, and the _host triple_ which is the architecture that the compiler is running on. The target triple can be specified with the `--target` command-line option or the `build.target` [config option](appendix/../reference/config.html). The general format of the triple is `<arch><sub>-<vendor>-<sys>-<abi>` where:\n    \n    -   `arch` = The base CPU architecture, for example `x86_64`, `i686`, `arm`, `thumb`, `mips`, etc.\n    -   `sub` = The CPU sub-architecture, for example `arm` has `v7`, `v7s`, `v5te`, etc.\n    -   `vendor` = The vendor, for example `unknown`, `apple`, `pc`, `nvidia`, etc.\n    -   `sys` = The system name, for example `linux`, `windows`, `darwin`, etc. `none` is typically used for bare-metal without an OS.\n    -   `abi` = The ABI, for example `gnu`, `android`, `eabi`, etc.\n    \n    Some parameters may be omitted. Run `rustc --print target-list` for a list of supported targets.\n    \n\n## [Test Targets](#test-targets)\n\nCargo _test targets_ generate binaries which help verify proper operation and correctness of code. There are two types of test artifacts:\n\n-   **Unit test** — A _unit test_ is an executable binary compiled directly from a library or a binary target. It contains the entire contents of the library or binary code, and runs `#[test]` annotated functions, intended to verify individual units of code.\n-   **Integration test target** — An [_integration test target_](about:blank/reference/cargo-targets.html#integration-tests) is an executable binary compiled from a _test target_ which is a distinct [_crate_](about:blank/appendix/glossary.html#crate) whose source is located in the `tests` directory or specified by the [`[[test]]` table](about:blank/reference/cargo-targets.html#configuring-a-target) in the `Cargo.toml` [_manifest_](about:blank/appendix/glossary.html#manifest). It is intended to only test the public API of a library, or execute a binary to verify its operation.\n\n## [Workspace](#workspace)\n\nA [_workspace_](appendix/../reference/workspaces.html) is a collection of one or more [_packages_](about:blank/appendix/glossary.html#package) that share common dependency resolution (with a shared `Cargo.lock` [_lock file_](about:blank/appendix/glossary.html#lock-file)), output directory, and various settings such as profiles.\n\nA [_virtual workspace_](appendix/../reference/workspaces.html) is a workspace where the root `Cargo.toml` [_manifest_](about:blank/appendix/glossary.html#manifest) does not define a package, and only lists the workspace [_members_](about:blank/appendix/glossary.html#member).\n\nThe _workspace root_ is the directory where the workspace’s `Cargo.toml` manifest is located. (Compare with [_package root_](about:blank/appendix/glossary.html#package).)\n\n## [Git Authentication](#git-authentication)\n\nCargo supports some forms of authentication when using git dependencies and registries. This appendix contains some information for setting up git authentication in a way that works with Cargo.\n\nIf you need other authentication methods, the [`net.git-fetch-with-cli`](about:blank/reference/config.html#netgit-fetch-with-cli) config value can be set to cause Cargo to execute the `git` executable to handle fetching remote repositories instead of using the built-in support. This can be enabled with the `CARGO_NET_GIT_FETCH_WITH_CLI=true` environment variable.\n\n## [HTTPS authentication](#https-authentication)\n\nHTTPS authentication requires the [`credential.helper`](https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage) mechanism. There are multiple credential helpers, and you specify the one you want to use in your global git configuration file.\n\n```ini\n# ~/.gitconfig\n\n[credential]\nhelper = store\n\n```\n\nCargo does not ask for passwords, so for most helpers you will need to give the helper the initial username/password before running Cargo. One way to do this is to run `git clone` of the private git repo and enter the username/password.\n\n> **Tip:**  \n> macOS users may want to consider using the osxkeychain helper.  \n> Windows users may want to consider using the [GCM](https://github.com/microsoft/Git-Credential-Manager-Core/) helper.\n\n> **Note:** Windows users will need to make sure that the `sh` shell is available in your `PATH`. This typically is available with the Git for Windows installation.\n\n## [SSH authentication](#ssh-authentication)\n\nSSH authentication requires `ssh-agent` to be running to acquire the SSH key. Make sure the appropriate environment variables are set up (`SSH_AUTH_SOCK` on most Unix-like systems), and that the correct keys are added (with `ssh-add`).\n\nWindows can use Pageant (part of [PuTTY](https://www.chiark.greenend.org.uk/~sgtatham/putty/)) or `ssh-agent`. To use `ssh-agent`, Cargo needs to use the OpenSSH that is distributed as part of Windows, as Cargo does not support the simulated Unix-domain sockets used by MinGW or Cygwin. More information about installing with Windows can be found at the [Microsoft installation documentation](https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse) and the page on [key management](https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_keymanagement) has instructions on how to start `ssh-agent` and to add keys.\n\n> **Note:** Cargo does not support git’s shorthand SSH URLs like `git@example.com:user/repo.git`. Use a full SSH URL like `ssh://git@example.com/user/repo.git`.\n\n> **Note:** SSH configuration files (like OpenSSH’s `~/.ssh/config`) are not used by Cargo’s built-in SSH library. More advanced requirements should use [`net.git-fetch-with-cli`](about:blank/reference/config.html#netgit-fetch-with-cli).\n\n### [SSH Known Hosts](#ssh-known-hosts)\n\nWhen connecting to an SSH host, Cargo must verify the identity of the host using “known hosts”, which are a list of host keys. Cargo can look for these known hosts in OpenSSH-style `known_hosts` files located in their standard locations (`.ssh/known_hosts` in your home directory, or `/etc/ssh/ssh_known_hosts` on Unix-like platforms or `%PROGRAMDATA%\\ssh\\ssh_known_hosts` on Windows). More information about these files can be found in the [sshd man page](https://man.openbsd.org/sshd#SSH_KNOWN_HOSTS_FILE_FORMAT). Alternatively, keys may be configured in a Cargo configuration file with [`net.ssh.known-hosts`](about:blank/reference/config.html#netsshknown-hosts).\n\nWhen connecting to an SSH host before the known hosts has been configured, Cargo will display an error message instructing you how to add the host key. This also includes a “fingerprint”, which is a smaller hash of the host key, which should be easier to visually verify. The server administrator can get the fingerprint by running `ssh-keygen` against the public key (for example, `ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub`). Well-known sites may publish their fingerprints on the web; for example GitHub posts theirs at [https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints).\n\nCargo comes with the host keys for [github.com](https://github.com/) built-in. If those ever change, you can add the new keys to the config or known\\_hosts file.\n\n> **Note:** Cargo doesn’t support the `@cert-authority` or `@revoked` markers in `known_hosts` files. To make use of this functionality, use [`net.git-fetch-with-cli`](about:blank/reference/config.html#netgit-fetch-with-cli). This is also a good tip if Cargo’s SSH client isn’t behaving the way you expect it to.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>The Cargo Book</title>\n        <meta name=\"robots\" content=\"noindex\">\n\n\n        <!-- Custom HTML head -->\n        <style>\n            dd {\n                margin-bottom: 1em;\n            }\n        </style>\n\n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"index.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"getting-started/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"getting-started/installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"getting-started/first-steps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> First Steps with Cargo</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"guide/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Cargo Guide</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"guide/why-cargo-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Why Cargo Exists</a></li><li class=\"chapter-item expanded \"><a href=\"guide/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Creating a New Package</a></li><li class=\"chapter-item expanded \"><a href=\"guide/working-on-an-existing-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Working on an Existing Package</a></li><li class=\"chapter-item expanded \"><a href=\"guide/dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"guide/project-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Package Layout</a></li><li class=\"chapter-item expanded \"><a href=\"guide/cargo-toml-vs-cargo-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Cargo.toml vs Cargo.lock</a></li><li class=\"chapter-item expanded \"><a href=\"guide/tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"guide/continuous-integration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> Continuous Integration</a></li><li class=\"chapter-item expanded \"><a href=\"guide/cargo-home.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> Cargo Home</a></li><li class=\"chapter-item expanded \"><a href=\"guide/build-cache.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> Build Cache</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"reference/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Cargo Reference</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"reference/specifying-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Specifying Dependencies</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"reference/overriding-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.1.</strong> Overriding Dependencies</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"reference/manifest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> The Manifest Format</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"reference/cargo-targets.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.1.</strong> Cargo Targets</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"reference/workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"reference/features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"reference/features-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.1.</strong> Features Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"reference/profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"reference/config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Configuration</a></li><li class=\"chapter-item expanded \"><a href=\"reference/environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"reference/build-scripts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Build Scripts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"reference/build-script-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.1.</strong> Build Script Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"reference/publishing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Publishing on crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"reference/pkgid-spec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> Package ID Specifications</a></li><li class=\"chapter-item expanded \"><a href=\"reference/source-replacement.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Source Replacement</a></li><li class=\"chapter-item expanded \"><a href=\"reference/external-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> External Tools</a></li><li class=\"chapter-item expanded \"><a href=\"reference/registries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> Registries</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"reference/registry-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.</strong> Registry Authentication</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"reference/credential-provider-protocol.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.1.</strong> Credential Provider Protocol</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"reference/running-a-registry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.</strong> Running a Registry</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"reference/registry-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.1.</strong> Registry Index</a></li><li class=\"chapter-item expanded \"><a href=\"reference/registry-web-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.2.</strong> Registry Web API</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"reference/resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> Dependency Resolution</a></li><li class=\"chapter-item expanded \"><a href=\"reference/semver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> SemVer Compatibility</a></li><li class=\"chapter-item expanded \"><a href=\"reference/future-incompat-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> Future incompat report</a></li><li class=\"chapter-item expanded \"><a href=\"reference/timings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> Reporting build timings</a></li><li class=\"chapter-item expanded \"><a href=\"reference/unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> Unstable Features</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"commands/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Cargo Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"commands/general-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> General Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"commands/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.1.</strong> cargo</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-help.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.2.</strong> cargo help</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.3.</strong> cargo version</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"commands/build-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Build Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"commands/cargo-bench.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.1.</strong> cargo bench</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-build.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.2.</strong> cargo build</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-check.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.3.</strong> cargo check</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-clean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.4.</strong> cargo clean</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-doc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.5.</strong> cargo doc</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-fetch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.6.</strong> cargo fetch</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-fix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.7.</strong> cargo fix</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-run.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.8.</strong> cargo run</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.9.</strong> cargo rustc</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.10.</strong> cargo rustdoc</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.11.</strong> cargo test</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.12.</strong> cargo report</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"commands/manifest-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Manifest Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"commands/cargo-add.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> cargo add</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-generate-lockfile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> cargo generate-lockfile</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-locate-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> cargo locate-project</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.4.</strong> cargo metadata</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-pkgid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.5.</strong> cargo pkgid</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.6.</strong> cargo remove</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.7.</strong> cargo tree</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.8.</strong> cargo update</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-vendor.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.9.</strong> cargo vendor</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-verify-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.10.</strong> cargo verify-project</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"commands/package-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Package Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"commands/cargo-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.1.</strong> cargo init</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-install.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.2.</strong> cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.3.</strong> cargo new</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.4.</strong> cargo search</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-uninstall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.5.</strong> cargo uninstall</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"commands/publishing-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Publishing Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"commands/cargo-login.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.1.</strong> cargo login</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-logout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.2.</strong> cargo logout</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-owner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.3.</strong> cargo owner</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-package.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.4.</strong> cargo package</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-publish.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.5.</strong> cargo publish</a></li><li class=\"chapter-item expanded \"><a href=\"commands/cargo-yank.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.6.</strong> cargo yank</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"faq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> FAQ</a></li><li class=\"chapter-item expanded \"><a href=\"appendix/glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Appendix: Glossary</a></li><li class=\"chapter-item expanded \"><a href=\"appendix/git-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Appendix: Git Authentication</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Cargo Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc/src\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"the-cargo-book\"><a class=\"header\" href=\"#the-cargo-book\">The Cargo Book</a></h1>\n<p><img src=\"images/Cargo-Logo-Small.png\" alt=\"Cargo Logo\"></p>\n<p>Cargo is the <a href=\"https://www.rust-lang.org/\">Rust</a> <a href=\"./appendix/glossary.html#package-manager\" title=\"&quot;package manager&quot; (glossary entry)\"><em>package manager</em></a>. Cargo downloads your Rust <a href=\"./appendix/glossary.html#package\" title=\"&quot;package&quot; (glossary entry)\">package</a>’s\ndependencies, compiles your packages, makes distributable packages, and uploads them to\n<a href=\"https://crates.io/\">crates.io</a>, the Rust community’s <a href=\"./appendix/glossary.html#package-registry\" title=\"&quot;package registry&quot; (glossary entry)\"><em>package registry</em></a>. You can contribute\nto this book on <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc\">GitHub</a>.</p>\n<h2 id=\"sections\"><a class=\"header\" href=\"#sections\">Sections</a></h2>\n<p><strong><a href=\"getting-started/index.html\">Getting Started</a></strong></p>\n<p>To get started with Cargo, install Cargo (and Rust) and set up your first\n<a href=\"./appendix/glossary.html#crate\" title=\"&quot;crate&quot; (glossary entry)\"><em>crate</em></a>.</p>\n<p><strong><a href=\"guide/index.html\">Cargo Guide</a></strong></p>\n<p>The guide will give you all you need to know about how to use Cargo to develop\nRust packages.</p>\n<p><strong><a href=\"reference/index.html\">Cargo Reference</a></strong></p>\n<p>The reference covers the details of various areas of Cargo.</p>\n<p><strong><a href=\"commands/index.html\">Cargo Commands</a></strong></p>\n<p>The commands will let you interact with Cargo using its command-line interface.</p>\n<p><strong><a href=\"faq.html\">Frequently Asked Questions</a></strong></p>\n<p><strong>Appendices:</strong></p>\n<ul>\n<li><a href=\"appendix/glossary.html\">Glossary</a></li>\n<li><a href=\"appendix/git-authentication.html\">Git Authentication</a></li>\n</ul>\n<p><strong>Other Documentation:</strong></p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md\">Changelog</a>\n— Detailed notes about changes in Cargo in each release.</li>\n<li><a href=\"https://doc.rust-lang.org/\">Rust documentation website</a> — Links to official\nRust documentation and tools.</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"getting-started\"><a class=\"header\" href=\"#getting-started\">Getting Started</a></h1>\n<p>To get started with Cargo, install Cargo (and Rust) and set up your first\n<a href=\"getting-started/../appendix/glossary.html#crate\" title=\"&quot;crate&quot; (glossary entry)\"><em>crate</em></a>.</p>\n<ul>\n<li><a href=\"getting-started/installation.html\">Installation</a></li>\n<li><a href=\"getting-started/first-steps.html\">First steps with Cargo</a></li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"installation\"><a class=\"header\" href=\"#installation\">Installation</a></h1>\n<h2 id=\"install-rust-and-cargo\"><a class=\"header\" href=\"#install-rust-and-cargo\">Install Rust and Cargo</a></h2>\n<p>The easiest way to get Cargo is to install the current stable release of <a href=\"https://www.rust-lang.org/\">Rust</a>\nby using <a href=\"https://rustup.rs/\">rustup</a>. Installing Rust using <code class=\"hljs\">rustup</code> will also install <code class=\"hljs\">cargo</code>.</p>\n<p>On Linux and macOS systems, this is done as follows:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">curl https://sh.rustup.rs -sSf | sh\n</code></pre>\n<p>It will download a script, and start the installation. If everything goes well,\nyou’ll see this appear:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">Rust is installed now. Great!\n</code></pre>\n<p>On Windows, download and run <a href=\"https://win.rustup.rs/\">rustup-init.exe</a>. It will start the installation\nin a console and present the above message on success.</p>\n<p>After this, you can use the <code class=\"hljs\">rustup</code> command to also install <code class=\"hljs\">beta</code> or <code class=\"hljs\">nightly</code>\nchannels for Rust and Cargo.</p>\n<p>For other installation options and information, visit the\n<a href=\"https://www.rust-lang.org/tools/install\">install</a> page of the Rust website.</p>\n<h2 id=\"build-and-install-cargo-from-source\"><a class=\"header\" href=\"#build-and-install-cargo-from-source\">Build and Install Cargo from Source</a></h2>\n<p>Alternatively, you can <a href=\"https://github.com/rust-lang/cargo#compiling-from-source\">build Cargo from source</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"first-steps-with-cargo\"><a class=\"header\" href=\"#first-steps-with-cargo\">First Steps with Cargo</a></h1>\n<p>This section provides a quick sense for the <code class=\"hljs\">cargo</code> command line tool. We\ndemonstrate its ability to generate a new <a href=\"getting-started/../appendix/glossary.html#package\" title=\"&quot;package&quot; (glossary entry)\"><em><strong>package</strong></em></a> for us,\nits ability to compile the <a href=\"getting-started/../appendix/glossary.html#crate\" title=\"&quot;crate&quot; (glossary entry)\"><em><strong>crate</strong></em></a> within the package, and\nits ability to run the resulting program.</p>\n<p>To start a new package with Cargo, use <code class=\"hljs\">cargo new</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new hello_world</span>\n</code></pre>\n<p>Cargo defaults to <code class=\"hljs\">--bin</code> to make a binary program. To make a library, we\nwould pass <code class=\"hljs\">--lib</code>, instead.</p>\n<p>Let’s check out what Cargo has generated for us:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> hello_world</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> tree .</span>\n.\n├── Cargo.toml\n└── src\n    └── main.rs\n\n1 directory, 2 files\n</code></pre>\n<p>This is all we need to get started. First, let’s check out <code class=\"hljs\">Cargo.toml</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"hello_world\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2021\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n</code></pre>\n<p>This is called a <a href=\"getting-started/../appendix/glossary.html#manifest\" title=\"&quot;manifest&quot; (glossary entry)\"><em><strong>manifest</strong></em></a>, and it contains all of the\nmetadata that Cargo needs to compile your package.</p>\n<p>Here’s what’s in <code class=\"hljs\">src/main.rs</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, world!\"</span>);\n}</code></pre></pre>\n<p>Cargo generated a “hello world” program for us, otherwise known as a\n<a href=\"getting-started/../appendix/glossary.html#crate\" title=\"&quot;crate&quot; (glossary entry)\"><em><strong>binary crate</strong></em></a>. Let’s compile it:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n</code></pre>\n<p>And then run it:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> ./target/debug/hello_world</span>\nHello, world!\n</code></pre>\n<p>We can also use <code class=\"hljs\">cargo run</code> to compile and then run it, all in one step:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n     Fresh hello_world v0.1.0 (file:///path/to/package/hello_world)\n   Running `target/hello_world`\nHello, world!\n</code></pre>\n<h2 id=\"going-further\"><a class=\"header\" href=\"#going-further\">Going further</a></h2>\n<p>For more details on using Cargo, check out the <a href=\"getting-started/../guide/index.html\">Cargo Guide</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-guide\"><a class=\"header\" href=\"#cargo-guide\">Cargo Guide</a></h1>\n<p>This guide will give you all that you need to know about how to use Cargo to\ndevelop Rust packages.</p>\n<ul>\n<li><a href=\"guide/why-cargo-exists.html\">Why Cargo Exists</a></li>\n<li><a href=\"guide/creating-a-new-project.html\">Creating a New Package</a></li>\n<li><a href=\"guide/working-on-an-existing-project.html\">Working on an Existing Cargo Package</a></li>\n<li><a href=\"guide/dependencies.html\">Dependencies</a></li>\n<li><a href=\"guide/project-layout.html\">Package Layout</a></li>\n<li><a href=\"guide/cargo-toml-vs-cargo-lock.html\">Cargo.toml vs Cargo.lock</a></li>\n<li><a href=\"guide/tests.html\">Tests</a></li>\n<li><a href=\"guide/continuous-integration.html\">Continuous Integration</a></li>\n<li><a href=\"guide/cargo-home.html\">Cargo Home</a></li>\n<li><a href=\"guide/build-cache.html\">Build Cache</a></li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"why-cargo-exists\"><a class=\"header\" href=\"#why-cargo-exists\">Why Cargo Exists</a></h1>\n<h2 id=\"preliminaries\"><a class=\"header\" href=\"#preliminaries\">Preliminaries</a></h2>\n<p>In Rust, as you may know, a library or executable program is called a\n<a href=\"guide/../appendix/glossary.html#crate\" title=\"&quot;crate&quot; (glossary entry)\"><em>crate</em></a>. Crates are compiled using the Rust compiler,\n<code class=\"hljs\">rustc</code>. When starting with Rust, the first source code most people encounter\nis that of the venerable “hello world” program, which they compile by invoking\n<code class=\"hljs\">rustc</code> directly:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustc hello.rs</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ./hello</span>\nHello, world!\n</code></pre>\n<p>Note that the above command required that we specify the file name\nexplicitly. If we were to directly use <code class=\"hljs\">rustc</code> to compile a different program,\na different command line invocation would be required. If we needed to specify\nany specific compiler flags or include external dependencies, then the\nneeded command would be even more specific (and elaborate).</p>\n<p>Furthermore, most non-trivial programs will likely have dependencies on\nexternal libraries, and will therefore also depend transitively on <em>their</em>\ndependencies. Obtaining the correct versions of all the necessary dependencies\nand keeping them up to date would be laborious and error-prone if done by\nhand.</p>\n<p>Rather than work only with crates and <code class=\"hljs\">rustc</code>, we can avoid the manual tedium\ninvolved with performing the above tasks by introducing a higher-level\n<a href=\"guide/../appendix/glossary.html#package\" title=\"&quot;package&quot; (glossary entry)\">“<em>package</em>”</a> abstraction and by using a\n<a href=\"guide/../appendix/glossary.html#package-manager\" title=\"&quot;package manager&quot; (glossary entry)\"><em>package manager</em></a>.</p>\n<h2 id=\"enter-cargo\"><a class=\"header\" href=\"#enter-cargo\">Enter: Cargo</a></h2>\n<p><em>Cargo</em> is the Rust package manager. It is a tool that allows Rust\n<a href=\"guide/../appendix/glossary.html#package\" title=\"&quot;package&quot; (glossary entry)\"><em>packages</em></a> to declare their various dependencies and ensure\nthat you’ll always get a repeatable build.</p>\n<p>To accomplish this goal, Cargo does four things:</p>\n<ul>\n<li>Introduces two metadata files with various bits of package information.</li>\n<li>Fetches and builds your package’s dependencies.</li>\n<li>Invokes <code class=\"hljs\">rustc</code> or another build tool with the correct parameters to build\nyour package.</li>\n<li>Introduces conventions to make working with Rust packages easier.</li>\n</ul>\n<p>To a large extent, Cargo normalizes the commands needed to build a given\nprogram or library; this is one aspect to the above mentioned conventions. As\nwe show later, the same command can be used to build different\n<a href=\"guide/../appendix/glossary.html#artifact\" title=\"&quot;artifact&quot; (glossary entry)\"><em>artifacts</em></a>, regardless of their names. Rather than invoke\n<code class=\"hljs\">rustc</code> directly, we can instead invoke something generic such as <code class=\"hljs\">cargo build</code> and let cargo worry about constructing the correct <code class=\"hljs\">rustc</code>\ninvocation. Furthermore, Cargo will automatically fetch from a\n<a href=\"guide/../appendix/glossary.html#registry\" title=\"&quot;registry&quot; (glossary entry)\"><em>registry</em></a> any dependencies we have defined for our artifact,\nand arrange for them to be incorporated into our build as needed.</p>\n<p>It is only a slight exaggeration to say that once you know how to build one\nCargo-based project, you know how to build <em>all</em> of them.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"creating-a-new-package\"><a class=\"header\" href=\"#creating-a-new-package\">Creating a New Package</a></h1>\n<p>To start a new <a href=\"guide/../appendix/glossary.html#package\" title=\"&quot;package&quot; (glossary entry)\">package</a> with Cargo, use <code class=\"hljs\">cargo new</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new hello_world --bin</span>\n</code></pre>\n<p>We’re passing <code class=\"hljs\">--bin</code> because we’re making a binary program: if we\nwere making a library, we’d pass <code class=\"hljs\">--lib</code>. This also initializes a new <code class=\"hljs\">git</code>\nrepository by default. If you don’t want it to do that, pass <code class=\"hljs\">--vcs none</code>.</p>\n<p>Let’s check out what Cargo has generated for us:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> hello_world</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> tree .</span>\n.\n├── Cargo.toml\n└── src\n    └── main.rs\n\n1 directory, 2 files\n</code></pre>\n<p>Let’s take a closer look at <code class=\"hljs\">Cargo.toml</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"hello_world\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2021\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n\n</code></pre>\n<p>This is called a <a href=\"guide/../appendix/glossary.html#manifest\" title=\"&quot;manifest&quot; (glossary entry)\"><em><strong>manifest</strong></em></a>, and it contains all of the\nmetadata that Cargo needs to compile your package. This file is written in the\n<a href=\"https://toml.io/\">TOML</a> format (pronounced /tɑməl/).</p>\n<p>Here’s what’s in <code class=\"hljs\">src/main.rs</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, world!\"</span>);\n}</code></pre></pre>\n<p>Cargo generated a “hello world” program for us, otherwise known as a\n<a href=\"guide/../appendix/glossary.html#crate\" title=\"&quot;crate&quot; (glossary entry)\"><em>binary crate</em></a>. Let’s compile it:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n</code></pre>\n<p>And then run it:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> ./target/debug/hello_world</span>\nHello, world!\n</code></pre>\n<p>We can also use <code class=\"hljs\">cargo run</code> to compile and then run it, all in one step (You\nwon’t see the <code class=\"hljs\">Compiling</code> line if you have not made any changes since you last\ncompiled):</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n     Running `target/debug/hello_world`\nHello, world!\n</code></pre>\n<p>You’ll now notice a new file, <code class=\"hljs\">Cargo.lock</code>. It contains information about our\ndependencies. Since we don’t have any yet, it’s not very interesting.</p>\n<p>Once you’re ready for release, you can use <code class=\"hljs\">cargo build --release</code> to compile\nyour files with optimizations turned on:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build --release</span>\n   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n</code></pre>\n<p><code class=\"hljs\">cargo build --release</code> puts the resulting binary in <code class=\"hljs\">target/release</code> instead of\n<code class=\"hljs\">target/debug</code>.</p>\n<p>Compiling in debug mode is the default for development. Compilation time is\nshorter since the compiler doesn’t do optimizations, but the code will run\nslower. Release mode takes longer to compile, but the code will run faster.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"working-on-an-existing-cargo-package\"><a class=\"header\" href=\"#working-on-an-existing-cargo-package\">Working on an Existing Cargo Package</a></h1>\n<p>If you download an existing <a href=\"guide/../appendix/glossary.html#package\" title=\"&quot;package&quot; (glossary entry)\">package</a> that uses Cargo, it’s\nreally easy to get going.</p>\n<p>First, get the package from somewhere. In this example, we’ll use <code class=\"hljs\">regex</code>\ncloned from its repository on GitHub:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git <span class=\"hljs-built_in\">clone</span> https://github.com/rust-lang/regex.git</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> regex</span>\n</code></pre>\n<p>To build, use <code class=\"hljs\">cargo build</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling regex v1.5.0 (file:///path/to/package/regex)\n</code></pre>\n<p>This will fetch all of the dependencies and then build them, along with the\npackage.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"dependencies\"><a class=\"header\" href=\"#dependencies\">Dependencies</a></h1>\n<p><a href=\"https://crates.io/\">crates.io</a> is the Rust community’s central <a href=\"guide/../appendix/glossary.html#package-registry\" title=\"&quot;package-registry&quot; (glossary entry)\"><em>package registry</em></a>\nthat serves as a location to discover and download\n<a href=\"guide/../appendix/glossary.html#package\" title=\"&quot;package&quot; (glossary entry)\">packages</a>. <code class=\"hljs\">cargo</code> is configured to use it by default to find\nrequested packages.</p>\n<p>To depend on a library hosted on <a href=\"https://crates.io/\">crates.io</a>, add it to your <code class=\"hljs\">Cargo.toml</code>.</p>\n<h2 id=\"adding-a-dependency\"><a class=\"header\" href=\"#adding-a-dependency\">Adding a dependency</a></h2>\n<p>If your <code class=\"hljs\">Cargo.toml</code> doesn’t already have a <code class=\"hljs\">[dependencies]</code> section, add\nthat, then list the <a href=\"guide/../appendix/glossary.html#crate\" title=\"&quot;crate&quot; (glossary entry)\">crate</a> name and version that you would like to\nuse. This example adds a dependency of the <code class=\"hljs\">time</code> crate:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">time</span> = <span class=\"hljs-string\">\"0.1.12\"</span>\n</code></pre>\n<p>The version string is a <a href=\"https://semver.org\">SemVer</a> version requirement. The <a href=\"guide/../reference/specifying-dependencies.html\">specifying\ndependencies</a> docs have more information about\nthe options you have here.</p>\n<p>If we also wanted to add a dependency on the <code class=\"hljs\">regex</code> crate, we would not need\nto add <code class=\"hljs\">[dependencies]</code> for each crate listed. Here’s what your whole\n<code class=\"hljs\">Cargo.toml</code> file would look like with dependencies on the <code class=\"hljs\">time</code> and <code class=\"hljs\">regex</code>\ncrates:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"hello_world\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2021\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">time</span> = <span class=\"hljs-string\">\"0.1.12\"</span>\n<span class=\"hljs-attr\">regex</span> = <span class=\"hljs-string\">\"0.1.41\"</span>\n</code></pre>\n<p>Re-run <code class=\"hljs\">cargo build</code>, and Cargo will fetch the new dependencies and all of\ntheir dependencies, compile them all, and update the <code class=\"hljs\">Cargo.lock</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n      Updating crates.io index\n   Downloading memchr v0.1.5\n   Downloading libc v0.1.10\n   Downloading regex-syntax v0.2.1\n   Downloading memchr v0.1.5\n   Downloading aho-corasick v0.3.0\n   Downloading regex v0.1.41\n     Compiling memchr v0.1.5\n     Compiling libc v0.1.10\n     Compiling regex-syntax v0.2.1\n     Compiling memchr v0.1.5\n     Compiling aho-corasick v0.3.0\n     Compiling regex v0.1.41\n     Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n</code></pre>\n<p>Our <code class=\"hljs\">Cargo.lock</code> contains the exact information about which revision of all of\nthese dependencies we used.</p>\n<p>Now, if <code class=\"hljs\">regex</code> gets updated, we will still build with the same revision until\nwe choose to <code class=\"hljs\">cargo update</code>.</p>\n<p>You can now use the <code class=\"hljs\">regex</code> library in <code class=\"hljs\">main.rs</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> regex::Regex;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> re = Regex::new(<span class=\"hljs-string\">r\"^\\d{4}-\\d{2}-\\d{2}$\"</span>).unwrap();\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Did our date match? {}\"</span>, re.is_match(<span class=\"hljs-string\">\"2014-01-01\"</span>));\n}</code></pre>\n<p>Running it will show:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Running `target/hello_world`\nDid our date match? true\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"package-layout\"><a class=\"header\" href=\"#package-layout\">Package Layout</a></h1>\n<p>Cargo uses conventions for file placement to make it easy to dive into a new\nCargo <a href=\"guide/../appendix/glossary.html#package\" title=\"&quot;package&quot; (glossary entry)\">package</a>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">.\n├── Cargo.lock\n├── Cargo.toml\n├── src/\n│&nbsp;&nbsp; ├── lib.rs\n│&nbsp;&nbsp; ├── main.rs\n│&nbsp;&nbsp; └── bin/\n│       ├── named-executable.rs\n│&nbsp;&nbsp;  &nbsp;&nbsp; ├── another-executable.rs\n│&nbsp;&nbsp;  &nbsp;&nbsp; └── multi-file-executable/\n│&nbsp;&nbsp;  &nbsp;&nbsp;     ├── main.rs\n│&nbsp;&nbsp;  &nbsp;&nbsp;     └── some_module.rs\n├── benches/\n│&nbsp;&nbsp; ├── large-input.rs\n│&nbsp;&nbsp; └── multi-file-bench/\n│&nbsp;&nbsp;     ├── main.rs\n│&nbsp;&nbsp;     └── bench_module.rs\n├── examples/\n│&nbsp;&nbsp; ├── simple.rs\n│&nbsp;&nbsp; └── multi-file-example/\n│&nbsp;&nbsp;     ├── main.rs\n│&nbsp;&nbsp;     └── ex_module.rs\n└── tests/\n    ├── some-integration-tests.rs\n    └── multi-file-test/\n        ├── main.rs\n        └── test_module.rs\n</code></pre>\n<ul>\n<li><code class=\"hljs\">Cargo.toml</code> and <code class=\"hljs\">Cargo.lock</code> are stored in the root of your package (<em>package\nroot</em>).</li>\n<li>Source code goes in the <code class=\"hljs\">src</code> directory.</li>\n<li>The default library file is <code class=\"hljs\">src/lib.rs</code>.</li>\n<li>The default executable file is <code class=\"hljs\">src/main.rs</code>.\n<ul>\n<li>Other executables can be placed in <code class=\"hljs\">src/bin/</code>.</li>\n</ul>\n</li>\n<li>Benchmarks go in the <code class=\"hljs\">benches</code> directory.</li>\n<li>Examples go in the <code class=\"hljs\">examples</code> directory.</li>\n<li>Integration tests go in the <code class=\"hljs\">tests</code> directory.</li>\n</ul>\n<p>If a binary, example, bench, or integration test consists of multiple source\nfiles, place a <code class=\"hljs\">main.rs</code> file along with the extra <a href=\"guide/../appendix/glossary.html#module\" title=\"&quot;module&quot; (glossary entry)\"><em>modules</em></a>\nwithin a subdirectory of the <code class=\"hljs\">src/bin</code>, <code class=\"hljs\">examples</code>, <code class=\"hljs\">benches</code>, or <code class=\"hljs\">tests</code>\ndirectory. The name of the executable will be the directory name.</p>\n<p>You can learn more about Rust’s module system in <a href=\"guide/../../book/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\">the book</a>.</p>\n<p>See <a href=\"guide/../reference/cargo-targets.html#configuring-a-target\">Configuring a target</a> for more details on manually configuring targets.\nSee <a href=\"guide/../reference/cargo-targets.html#target-auto-discovery\">Target auto-discovery</a> for more information on controlling how Cargo\nautomatically infers target names.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargotoml-vs-cargolock\"><a class=\"header\" href=\"#cargotoml-vs-cargolock\">Cargo.toml vs Cargo.lock</a></h1>\n<p><code class=\"hljs\">Cargo.toml</code> and <code class=\"hljs\">Cargo.lock</code> serve two different purposes. Before we talk\nabout them, here’s a summary:</p>\n<ul>\n<li><code class=\"hljs\">Cargo.toml</code> is about describing your dependencies in a broad sense, and is\nwritten by you.</li>\n<li><code class=\"hljs\">Cargo.lock</code> contains exact information about your dependencies. It is\nmaintained by Cargo and should not be manually edited.</li>\n</ul>\n<p>When in doubt, check <code class=\"hljs\">Cargo.lock</code> into the version control system (e.g. Git).\nFor a better understanding of why and what the alternatives might be, see\n<a href=\"guide/../faq.html#why-have-cargolock-in-version-control\">“Why have Cargo.lock in version control?” in the FAQ</a>.\nWe recommend pairing this with\n<a href=\"guide/continuous-integration.html#verifying-latest-dependencies\">Verifying Latest Dependencies</a></p>\n<p>Let’s dig in a little bit more.</p>\n<p><code class=\"hljs\">Cargo.toml</code> is a <a href=\"guide/../appendix/glossary.html#manifest\" title=\"&quot;manifest&quot; (glossary entry)\"><strong>manifest</strong></a> file in which we can specify a\nbunch of different metadata about our package. For example, we can say that we\ndepend on another package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"hello_world\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span> }\n</code></pre>\n<p>This package has a single dependency, on the <code class=\"hljs\">regex</code> library. We’ve stated in\nthis case that we’re relying on a particular Git repository that lives on\nGitHub. Since we haven’t specified any other information, Cargo assumes that\nwe intend to use the latest commit on the default branch to build our package.</p>\n<p>Sound good? Well, there’s one problem: If you build this package today, and\nthen you send a copy to me, and I build this package tomorrow, something bad\ncould happen. There could be more commits to <code class=\"hljs\">regex</code> in the meantime, and my\nbuild would include new commits while yours would not. Therefore, we would\nget different builds. This would be bad because we want reproducible builds.</p>\n<p>We could fix this problem by defining a specific <code class=\"hljs\">rev</code> value in our <code class=\"hljs\">Cargo.toml</code>,\nso Cargo could know exactly which revision to use when building the package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span>, rev = <span class=\"hljs-string\">\"9f9f693\"</span> }\n</code></pre>\n<p>Now our builds will be the same. But there’s a big drawback: now we have to\nmanually think about SHA-1s every time we want to update our library. This is\nboth tedious and error prone.</p>\n<p>Enter the <code class=\"hljs\">Cargo.lock</code>. Because of its existence, we don’t need to manually\nkeep track of the exact revisions: Cargo will do it for us. When we have a\nmanifest like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"hello_world\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span> }\n</code></pre>\n<p>Cargo will take the latest commit and write that information out into our\n<code class=\"hljs\">Cargo.lock</code> when we build for the first time. That file will look like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[[package]]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"hello_world\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">dependencies</span> = [\n <span class=\"hljs-string\">\"regex 1.5.0 (git+https://github.com/rust-lang/regex.git#9f9f693768c584971a4d53bc3c586c33ed3a6831)\"</span>,\n]\n\n<span class=\"hljs-section\">[[package]]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"regex\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"1.5.0\"</span>\n<span class=\"hljs-attr\">source</span> = <span class=\"hljs-string\">\"git+https://github.com/rust-lang/regex.git#9f9f693768c584971a4d53bc3c586c33ed3a6831\"</span>\n</code></pre>\n<p>You can see that there’s a lot more information here, including the exact\nrevision we used to build. Now when you give your package to someone else,\nthey’ll use the exact same SHA, even though we didn’t specify it in our\n<code class=\"hljs\">Cargo.toml</code>.</p>\n<p>When we’re ready to opt in to a new version of the library, Cargo can\nre-calculate the dependencies and update things for us:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo update         <span class=\"hljs-comment\"># updates all dependencies</span></span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo update regex   <span class=\"hljs-comment\"># updates just “regex”</span></span>\n</code></pre>\n<p>This will write out a new <code class=\"hljs\">Cargo.lock</code> with the new version information. Note\nthat the argument to <code class=\"hljs\">cargo update</code> is actually a\n<a href=\"guide/../reference/pkgid-spec.html\">Package ID Specification</a> and <code class=\"hljs\">regex</code> is just a\nshort specification.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"tests\"><a class=\"header\" href=\"#tests\">Tests</a></h1>\n<p>Cargo can run your tests with the <code class=\"hljs\">cargo test</code> command. Cargo looks for tests\nto run in two places: in each of your <code class=\"hljs\">src</code> files and any tests in <code class=\"hljs\">tests/</code>.\nTests in your <code class=\"hljs\">src</code> files should be unit tests and <a href=\"guide/../../rustdoc/write-documentation/documentation-tests.html\">documentation tests</a>.\nTests in <code class=\"hljs\">tests/</code> should be integration-style tests. As such, you’ll need to\nimport your crates into the files in <code class=\"hljs\">tests</code>.</p>\n<p>Here’s an example of running <code class=\"hljs\">cargo test</code> in our <a href=\"guide/../appendix/glossary.html#package\" title=\"&quot;package&quot; (glossary entry)\">package</a>, which\ncurrently has no tests:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling regex v1.5.0 (https://github.com/rust-lang/regex.git#9f9f693)\n   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n     Running target/test/hello_world-9c2b65bbb79eabce\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n</code></pre>\n<p>If our package had tests, we would see more output with the correct number of\ntests.</p>\n<p>You can also run a specific test by passing a filter:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span> foo</span>\n</code></pre>\n<p>This will run any test with <code class=\"hljs\">foo</code> in its name.</p>\n<p><code class=\"hljs\">cargo test</code> runs additional checks as well. It will compile any examples\nyou’ve included to ensure they still compile. It also runs documentation\ntests to ensure your code samples from documentation comments compile.\nPlease see the <a href=\"guide/../../book/ch11-00-testing.html\">testing guide</a> in the Rust documentation for a general\nview of writing and organizing tests. See <a href=\"guide/../reference/cargo-targets.html#tests\">Cargo Targets: Tests</a> to learn more\nabout different styles of tests in Cargo.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"continuous-integration\"><a class=\"header\" href=\"#continuous-integration\">Continuous Integration</a></h1>\n<h2 id=\"getting-started-1\"><a class=\"header\" href=\"#getting-started-1\">Getting Started</a></h2>\n<p>A basic CI will build and test your projects:</p>\n<h3 id=\"github-actions\"><a class=\"header\" href=\"#github-actions\">GitHub Actions</a></h3>\n<p>To test your package on GitHub Actions, here is a sample <code class=\"hljs\">.github/workflows/ci.yml</code> file:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-yaml hljs\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Cargo</span> <span class=\"hljs-string\">Build</span> <span class=\"hljs-string\">&amp;</span> <span class=\"hljs-string\">Test</span>\n\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">push:</span>\n  <span class=\"hljs-attr\">pull_request:</span>\n\n<span class=\"hljs-attr\">env:</span> \n  <span class=\"hljs-attr\">CARGO_TERM_COLOR:</span> <span class=\"hljs-string\">always</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">build_and_test:</span>\n    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Rust</span> <span class=\"hljs-string\">project</span> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">latest</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n    <span class=\"hljs-attr\">strategy:</span>\n      <span class=\"hljs-attr\">matrix:</span>\n        <span class=\"hljs-attr\">toolchain:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">stable</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">beta</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">nightly</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v4</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">rustup</span> <span class=\"hljs-string\">update</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.toolchain</span> <span class=\"hljs-string\">}}</span> <span class=\"hljs-string\">&amp;&amp;</span> <span class=\"hljs-string\">rustup</span> <span class=\"hljs-string\">default</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.toolchain</span> <span class=\"hljs-string\">}}</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">cargo</span> <span class=\"hljs-string\">build</span> <span class=\"hljs-string\">--verbose</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">cargo</span> <span class=\"hljs-string\">test</span> <span class=\"hljs-string\">--verbose</span>\n  \n</code></pre>\n<p>This will test all three release channels (note a failure in any toolchain version will fail the entire job). You can also click <code class=\"hljs\">\"Actions\" &gt; \"new workflow\"</code> in the GitHub UI and select Rust to add the <a href=\"https://github.com/actions/starter-workflows/blob/main/ci/rust.yml\">default configuration</a> to your repo. See <a href=\"https://docs.github.com/en/actions\">GitHub Actions documentation</a> for more information.</p>\n<h3 id=\"gitlab-ci\"><a class=\"header\" href=\"#gitlab-ci\">GitLab CI</a></h3>\n<p>To test your package on GitLab CI, here is a sample <code class=\"hljs\">.gitlab-ci.yml</code> file:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-yaml hljs\"><span class=\"hljs-attr\">stages:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">build</span>\n\n<span class=\"hljs-attr\">rust-latest:</span>\n  <span class=\"hljs-attr\">stage:</span> <span class=\"hljs-string\">build</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">rust:latest</span>\n  <span class=\"hljs-attr\">script:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cargo</span> <span class=\"hljs-string\">build</span> <span class=\"hljs-string\">--verbose</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cargo</span> <span class=\"hljs-string\">test</span> <span class=\"hljs-string\">--verbose</span>\n\n<span class=\"hljs-attr\">rust-nightly:</span>\n  <span class=\"hljs-attr\">stage:</span> <span class=\"hljs-string\">build</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">rustlang/rust:nightly</span>\n  <span class=\"hljs-attr\">script:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cargo</span> <span class=\"hljs-string\">build</span> <span class=\"hljs-string\">--verbose</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cargo</span> <span class=\"hljs-string\">test</span> <span class=\"hljs-string\">--verbose</span>\n  <span class=\"hljs-attr\">allow_failure:</span> <span class=\"hljs-literal\">true</span>\n</code></pre>\n<p>This will test on the stable channel and nightly channel, but any\nbreakage in nightly will not fail your overall build. Please see the\n<a href=\"https://docs.gitlab.com/ce/ci/yaml/index.html\">GitLab CI documentation</a> for more\ninformation.</p>\n<h3 id=\"buildssrht\"><a class=\"header\" href=\"#buildssrht\">builds.sr.ht</a></h3>\n<p>To test your package on sr.ht, here is a sample <code class=\"hljs\">.build.yml</code> file.\nBe sure to change <code class=\"hljs\">&lt;your repo&gt;</code> and <code class=\"hljs\">&lt;your project&gt;</code> to the repo to clone and\nthe directory where it was cloned.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-yaml hljs\"><span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">archlinux</span>\n<span class=\"hljs-attr\">packages:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">rustup</span>\n<span class=\"hljs-attr\">sources:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&lt;your</span> <span class=\"hljs-string\">repo&gt;</span>\n<span class=\"hljs-attr\">tasks:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">setup:</span> <span class=\"hljs-string\">|\n      rustup toolchain install nightly stable\n      cd &lt;your project&gt;/\n      rustup run stable cargo fetch\n</span>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">stable:</span> <span class=\"hljs-string\">|\n      rustup default stable\n      cd &lt;your project&gt;/\n      cargo build --verbose\n      cargo test --verbose\n</span>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">nightly:</span> <span class=\"hljs-string\">|\n      rustup default nightly\n      cd &lt;your project&gt;/\n      cargo build --verbose ||:\n      cargo test --verbose  ||:\n</span>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">docs:</span> <span class=\"hljs-string\">|\n      cd &lt;your project&gt;/\n      rustup run stable cargo doc --no-deps\n      rustup run nightly cargo doc --no-deps ||:\n</span></code></pre>\n<p>This will test and build documentation on the stable channel and nightly\nchannel, but any breakage in nightly will not fail your overall build. Please\nsee the <a href=\"https://man.sr.ht/builds.sr.ht/\">builds.sr.ht documentation</a> for more\ninformation.</p>\n<h3 id=\"circleci\"><a class=\"header\" href=\"#circleci\">CircleCI</a></h3>\n<p>To test your package on CircleCI, here is a sample <code class=\"hljs\">.circleci/config.yml</code> file:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-yaml hljs\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">2.1</span>\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">build:</span>\n    <span class=\"hljs-attr\">docker:</span>\n      <span class=\"hljs-comment\"># check https://circleci.com/developer/images/image/cimg/rust#image-tags for latest</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">cimg/rust:1.77.2</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">checkout</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">cargo</span> <span class=\"hljs-string\">test</span>\n</code></pre>\n<p>To run more complex pipelines, including flaky test detection, caching, and artifact management, please see <a href=\"https://circleci.com/docs/configuration-reference/\">CircleCI Configuration Reference</a>.</p>\n<h2 id=\"verifying-latest-dependencies\"><a class=\"header\" href=\"#verifying-latest-dependencies\">Verifying Latest Dependencies</a></h2>\n<p>When <a href=\"guide/../reference/specifying-dependencies.html\">specifying dependencies</a> in\n<code class=\"hljs\">Cargo.toml</code>, they generally match a range of versions.\nExhaustively testing all version combination would be unwieldy.\nVerifying the latest versions would at least test for users who run <a href=\"guide/../commands/cargo-add.html\"><code class=\"hljs\">cargo add</code></a> or <a href=\"guide/../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a>.</p>\n<p>When testing the latest versions some considerations are:</p>\n<ul>\n<li>Minimizing external factors affecting local development or CI</li>\n<li>Rate of new dependencies being published</li>\n<li>Level of risk a project is willing to accept</li>\n<li>CI costs, including indirect costs like if a CI service has a maximum for\nparallel runners, causing new jobs to be serialized when at the maximum.</li>\n</ul>\n<p>Some potential solutions include:</p>\n<ul>\n<li><a href=\"guide/../faq.html#why-have-cargolock-in-version-control\">Not checking in the <code class=\"hljs\">Cargo.lock</code></a>\n<ul>\n<li>Depending on PR velocity, many versions may go untested</li>\n<li>This comes at the cost of determinism</li>\n</ul>\n</li>\n<li>Have a CI job verify the latest dependencies but mark it to “continue on failure”\n<ul>\n<li>Depending on the CI service, failures might not be obvious</li>\n<li>Depending on PR velocity, may use more resources than necessary</li>\n</ul>\n</li>\n<li>Have a scheduled CI job to verify latest dependencies\n<ul>\n<li>A hosted CI service may disable scheduled jobs for repositories that\nhaven’t been touched in a while, affecting passively maintained packages</li>\n<li>Depending on the CI service, notifications might not be routed to people\nwho can act on the failure</li>\n<li>If not balanced with dependency publish rate, may not test enough versions\nor may do redundant testing</li>\n</ul>\n</li>\n<li>Regularly update dependencies through PRs, like with <a href=\"https://docs.github.com/en/code-security/dependabot/working-with-dependabot\">Dependabot</a> or <a href=\"https://renovatebot.com/\">RenovateBot</a>\n<ul>\n<li>Can isolate dependencies to their own PR or roll them up into a single PR</li>\n<li>Only uses the resources necessary</li>\n<li>Can configure the frequency to balance CI resources and coverage of dependency versions</li>\n</ul>\n</li>\n</ul>\n<p>An example CI job to verify latest dependencies, using GitHub Actions:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-yaml hljs\"><span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">latest_deps:</span>\n    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Latest</span> <span class=\"hljs-string\">Dependencies</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n    <span class=\"hljs-attr\">continue-on-error:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v4</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">rustup</span> <span class=\"hljs-string\">update</span> <span class=\"hljs-string\">stable</span> <span class=\"hljs-string\">&amp;&amp;</span> <span class=\"hljs-string\">rustup</span> <span class=\"hljs-string\">default</span> <span class=\"hljs-string\">stable</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">cargo</span> <span class=\"hljs-string\">update</span> <span class=\"hljs-string\">--verbose</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">cargo</span> <span class=\"hljs-string\">build</span> <span class=\"hljs-string\">--verbose</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">cargo</span> <span class=\"hljs-string\">test</span> <span class=\"hljs-string\">--verbose</span>\n</code></pre>\n<p>For projects with higher risks of per-platform or per-Rust version failures,\nmore combinations may want to be tested.</p>\n<h2 id=\"verifying-rust-version\"><a class=\"header\" href=\"#verifying-rust-version\">Verifying <code>rust-version</code></a></h2>\n<p>When publishing packages that specify <a href=\"guide/../reference/manifest.html#the-rust-version-field\"><code class=\"hljs\">rust-version</code></a>,\nit is important to verify the correctness of that field.</p>\n<p>Some third-party tools that can help with this include:</p>\n<ul>\n<li><a href=\"https://crates.io/crates/cargo-msrv\"><code class=\"hljs\">cargo-msrv</code></a></li>\n<li><a href=\"https://crates.io/crates/cargo-hack\"><code class=\"hljs\">cargo-hack</code></a></li>\n</ul>\n<p>An example of one way to do this, using GitHub Actions:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-yaml hljs\"><span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">msrv:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n    <span class=\"hljs-attr\">steps:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v4</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">taiki-e/install-action@cargo-hack</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">cargo</span> <span class=\"hljs-string\">hack</span> <span class=\"hljs-string\">check</span> <span class=\"hljs-string\">--rust-version</span> <span class=\"hljs-string\">--workspace</span> <span class=\"hljs-string\">--all-targets</span> <span class=\"hljs-string\">--ignore-private</span>\n</code></pre>\n<p>This tries to balance thoroughness with turnaround time:</p>\n<ul>\n<li>A single platform is used as most projects are platform-agnostic, trusting platform-specific dependencies to verify their behavior.</li>\n<li><code class=\"hljs\">cargo check</code> is used as most issues contributors will run into are API availability and not behavior.</li>\n<li>Unpublished packages are skipped as this assumes only consumers of the verified project, through a registry, will care about <code class=\"hljs\">rust-version</code>.</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-home\"><a class=\"header\" href=\"#cargo-home\">Cargo Home</a></h1>\n<p>The “Cargo home” functions as a download and source cache.\nWhen building a <a href=\"guide/../appendix/glossary.html#crate\" title=\"&quot;crate&quot; (glossary entry)\">crate</a>, Cargo stores downloaded build dependencies in the Cargo home.\nYou can alter the location of the Cargo home by setting the <code class=\"hljs\">CARGO_HOME</code> <a href=\"guide/../reference/environment-variables.html\">environmental variable</a>.\nThe <a href=\"https://crates.io/crates/home\">home</a> crate provides an API for getting this location if you need this information inside your Rust crate.\nBy default, the Cargo home is located in <code class=\"hljs\">$HOME/.cargo/</code>.</p>\n<p>Please note that the internal structure of the Cargo home is not stabilized and may be subject to change at any time.</p>\n<p>The Cargo home consists of following components:</p>\n<h2 id=\"files\"><a class=\"header\" href=\"#files\">Files:</a></h2>\n<ul>\n<li>\n<p><code class=\"hljs\">config.toml</code>\nCargo’s global configuration file, see the <a href=\"guide/../reference/config.html\">config entry in the reference</a>.</p>\n</li>\n<li>\n<p><code class=\"hljs\">credentials.toml</code>\nPrivate login credentials from <a href=\"guide/../commands/cargo-login.html\"><code class=\"hljs\">cargo login</code></a> in order to log in to a <a href=\"guide/../appendix/glossary.html#registry\" title=\"&quot;registry&quot; (glossary entry)\">registry</a>.</p>\n</li>\n<li>\n<p><code class=\"hljs\">.crates.toml</code>, <code class=\"hljs\">.crates2.json</code>\nThese hidden files contain <a href=\"guide/../appendix/glossary.html#package\" title=\"&quot;package&quot; (glossary entry)\">package</a> information of crates installed via <a href=\"guide/../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a>. Do NOT edit by hand!</p>\n</li>\n</ul>\n<h2 id=\"directories\"><a class=\"header\" href=\"#directories\">Directories:</a></h2>\n<ul>\n<li>\n<p><code class=\"hljs\">bin</code>\nThe bin directory contains executables of crates that were installed via <a href=\"guide/../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> or <a href=\"https://rust-lang.github.io/rustup/\"><code class=\"hljs\">rustup</code></a>.\nTo be able to make these binaries accessible, add the path of the directory to your <code class=\"hljs\">$PATH</code> environment variable.</p>\n</li>\n<li>\n<p><code class=\"hljs\">git</code>\nGit sources are stored here:</p>\n<ul>\n<li>\n<p><code class=\"hljs\">git/db</code>\nWhen a crate depends on a git repository, Cargo clones the repo as a bare repo into this directory and updates it if necessary.</p>\n</li>\n<li>\n<p><code class=\"hljs\">git/checkouts</code>\nIf a git source is used, the required commit of the repo is checked out from the bare repo inside <code class=\"hljs\">git/db</code> into this directory.\nThis provides the compiler with the actual files contained in the repo of the commit specified for that dependency.\nMultiple checkouts of different commits of the same repo are possible.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"hljs\">registry</code>\nPackages and metadata of crate registries (such as <a href=\"https://crates.io/\">crates.io</a>) are located here.</p>\n<ul>\n<li>\n<p><code class=\"hljs\">registry/index</code>\nThe index is a bare git repository which contains the metadata (versions, dependencies etc) of all available crates of a registry.</p>\n</li>\n<li>\n<p><code class=\"hljs\">registry/cache</code>\nDownloaded dependencies are stored in the cache. The crates are compressed gzip archives named with a <code class=\"hljs\">.crate</code> extension.</p>\n</li>\n<li>\n<p><code class=\"hljs\">registry/src</code>\nIf a downloaded <code class=\"hljs\">.crate</code> archive is required by a package, it is unpacked into <code class=\"hljs\">registry/src</code> folder where rustc will find the <code class=\"hljs\">.rs</code> files.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"caching-the-cargo-home-in-ci\"><a class=\"header\" href=\"#caching-the-cargo-home-in-ci\">Caching the Cargo home in CI</a></h2>\n<p>To avoid redownloading all crate dependencies during continuous integration, you can cache the <code class=\"hljs\">$CARGO_HOME</code> directory.\nHowever, caching the entire directory is often inefficient as it will contain downloaded sources twice.\nIf we depend on a crate such as <code class=\"hljs\">serde 1.0.92</code> and cache the entire <code class=\"hljs\">$CARGO_HOME</code> we would actually cache the sources twice, the <code class=\"hljs\">serde-1.0.92.crate</code> inside <code class=\"hljs\">registry/cache</code> and the extracted <code class=\"hljs\">.rs</code> files of serde inside <code class=\"hljs\">registry/src</code>.\nThat can unnecessarily slow down the build as downloading, extracting, recompressing and reuploading the cache to the CI servers can take some time.</p>\n<p>If you wish to cache binaries installed with <a href=\"guide/../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a>, you need to cache the <code class=\"hljs\">bin/</code> folder and the <code class=\"hljs\">.crates.toml</code> and <code class=\"hljs\">.crates2.json</code> files.</p>\n<p>It should be sufficient to cache the following files and directories across builds:</p>\n<ul>\n<li><code class=\"hljs\">.crates.toml</code></li>\n<li><code class=\"hljs\">.crates2.json</code></li>\n<li><code class=\"hljs\">bin/</code></li>\n<li><code class=\"hljs\">registry/index/</code></li>\n<li><code class=\"hljs\">registry/cache/</code></li>\n<li><code class=\"hljs\">git/db/</code></li>\n</ul>\n<h2 id=\"vendoring-all-dependencies-of-a-project\"><a class=\"header\" href=\"#vendoring-all-dependencies-of-a-project\">Vendoring all dependencies of a project</a></h2>\n<p>See the <a href=\"guide/../commands/cargo-vendor.html\"><code class=\"hljs\">cargo vendor</code></a> subcommand.</p>\n<h2 id=\"clearing-the-cache\"><a class=\"header\" href=\"#clearing-the-cache\">Clearing the cache</a></h2>\n<p>In theory, you can always remove any part of the cache and Cargo will do its best to restore sources if a crate needs them either by reextracting an archive or checking out a bare repo or by simply redownloading the sources from the web.</p>\n<p>Alternatively, the <a href=\"https://crates.io/crates/cargo-cache\">cargo-cache</a> crate provides a simple CLI tool to only clear selected parts of the cache or show sizes of its components in your command-line.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"build-cache\"><a class=\"header\" href=\"#build-cache\">Build cache</a></h1>\n<p>Cargo stores the output of a build into the “target” directory. By default,\nthis is the directory named <code class=\"hljs\">target</code> in the root of your\n<a href=\"guide/../appendix/glossary.html#workspace\" title=\"&quot;workspace&quot; (glossary entry)\"><em>workspace</em></a>. To change the location, you can set the\n<code class=\"hljs\">CARGO_TARGET_DIR</code> <a href=\"guide/../reference/environment-variables.html\">environment variable</a>, the <a href=\"guide/../reference/config.html#buildtarget-dir\"><code class=\"hljs\">build.target-dir</code></a> config\nvalue, or the <code class=\"hljs\">--target-dir</code> command-line flag.</p>\n<p>The directory layout depends on whether or not you are using the <code class=\"hljs\">--target</code>\nflag to build for a specific platform. If <code class=\"hljs\">--target</code> is not specified, Cargo\nruns in a mode where it builds for the host architecture. The output goes into\nthe root of the target directory, with each <a href=\"guide/../reference/profiles.html\">profile</a> stored in a separate\nsubdirectory:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Directory</th><th>Description</th></tr></thead><tbody>\n<tr><td><code style=\"white-space: nowrap\" class=\"hljs\">target/debug/</code></td><td>Contains output for the <code class=\"hljs\">dev</code> profile.</td></tr>\n<tr><td><code style=\"white-space: nowrap\" class=\"hljs\">target/release/</code></td><td>Contains output for the <code class=\"hljs\">release</code> profile (with the <code class=\"hljs\">--release</code> option).</td></tr>\n<tr><td><code style=\"white-space: nowrap\" class=\"hljs\">target/foo/</code></td><td>Contains build output for the <code class=\"hljs\">foo</code> profile (with the <code class=\"hljs\">--profile=foo</code> option).</td></tr>\n</tbody></table>\n</div>\n<p>For historical reasons, the <code class=\"hljs\">dev</code> and <code class=\"hljs\">test</code> profiles are stored in the\n<code class=\"hljs\">debug</code> directory, and the <code class=\"hljs\">release</code> and <code class=\"hljs\">bench</code> profiles are stored in the\n<code class=\"hljs\">release</code> directory. User-defined profiles are stored in a directory with the\nsame name as the profile.</p>\n<p>When building for another target with <code class=\"hljs\">--target</code>, the output is placed in a\ndirectory with the name of the <a href=\"guide/../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary entry)\">target</a>:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Directory</th><th>Example</th></tr></thead><tbody>\n<tr><td><code style=\"white-space: nowrap\" class=\"hljs\">target/&lt;triple&gt;/debug/</code></td><td><code style=\"white-space: nowrap\" class=\"hljs\">target/thumbv7em-none-eabihf/debug/</code></td></tr>\n<tr><td><code style=\"white-space: nowrap\" class=\"hljs\">target/&lt;triple&gt;/release/</code></td><td><code style=\"white-space: nowrap\" class=\"hljs\">target/thumbv7em-none-eabihf/release/</code></td></tr>\n</tbody></table>\n</div>\n<blockquote>\n<p><strong>Note</strong>: When not using <code class=\"hljs\">--target</code>, this has a consequence that Cargo will\nshare your dependencies with build scripts and proc macros. <a href=\"guide/../reference/config.html#buildrustflags\"><code class=\"hljs\">RUSTFLAGS</code></a>\nwill be shared with every <code class=\"hljs\">rustc</code> invocation. With the <code class=\"hljs\">--target</code> flag,\nbuild scripts and proc macros are built separately (for the host\narchitecture), and do not share <code class=\"hljs\">RUSTFLAGS</code>.</p>\n</blockquote>\n<p>Within the profile directory (such as <code class=\"hljs\">debug</code> or <code class=\"hljs\">release</code>), artifacts are\nplaced into the following directories:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Directory</th><th>Description</th></tr></thead><tbody>\n<tr><td><code style=\"white-space: nowrap\" class=\"hljs\">target/debug/</code></td><td>Contains the output of the package being built (the <a href=\"guide/../reference/cargo-targets.html#binaries\">binary executables</a> and <a href=\"guide/../reference/cargo-targets.html#library\">library targets</a>).</td></tr>\n<tr><td><code style=\"white-space: nowrap\" class=\"hljs\">target/debug/examples/</code></td><td>Contains <a href=\"guide/../reference/cargo-targets.html#examples\">example targets</a>.</td></tr>\n</tbody></table>\n</div>\n<p>Some commands place their output in dedicated directories in the top level of\nthe <code class=\"hljs\">target</code> directory:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Directory</th><th>Description</th></tr></thead><tbody>\n<tr><td><code style=\"white-space: nowrap\" class=\"hljs\">target/doc/</code></td><td>Contains rustdoc documentation (<a href=\"guide/../commands/cargo-doc.html\"><code class=\"hljs\">cargo doc</code></a>).</td></tr>\n<tr><td><code style=\"white-space: nowrap\" class=\"hljs\">target/package/</code></td><td>Contains the output of the <a href=\"guide/../commands/cargo-package.html\"><code class=\"hljs\">cargo package</code></a> and <a href=\"guide/../commands/cargo-publish.html\"><code class=\"hljs\">cargo publish</code></a> commands.</td></tr>\n</tbody></table>\n</div>\n<p>Cargo also creates several other directories and files needed for the build\nprocess. Their layout is considered internal to Cargo, and is subject to\nchange. Some of these directories are:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Directory</th><th>Description</th></tr></thead><tbody>\n<tr><td><code style=\"white-space: nowrap\" class=\"hljs\">target/debug/deps/</code></td><td>Dependencies and other artifacts.</td></tr>\n<tr><td><code style=\"white-space: nowrap\" class=\"hljs\">target/debug/incremental/</code></td><td><code class=\"hljs\">rustc</code> <a href=\"guide/../reference/profiles.html#incremental\">incremental output</a>, a cache used to speed up subsequent builds.</td></tr>\n<tr><td><code style=\"white-space: nowrap\" class=\"hljs\">target/debug/build/</code></td><td>Output from <a href=\"guide/../reference/build-scripts.html\">build scripts</a>.</td></tr>\n</tbody></table>\n</div>\n<h2 id=\"dep-info-files\"><a class=\"header\" href=\"#dep-info-files\">Dep-info files</a></h2>\n<p>Next to each compiled artifact is a file called a “dep info” file with a <code class=\"hljs\">.d</code>\nsuffix. This file is a Makefile-like syntax that indicates all of the file\ndependencies required to rebuild the artifact. These are intended to be used\nwith external build systems so that they can detect if Cargo needs to be\nre-executed. The paths in the file are absolute by default. See the\n<a href=\"guide/../reference/config.html#builddep-info-basedir\"><code class=\"hljs\">build.dep-info-basedir</code></a> config option to use relative paths.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-Makefile hljs\"><span class=\"hljs-comment\"># Example dep-info file found in target/debug/foo.d</span>\n<span class=\"hljs-section\">/path/to/myproj/target/debug/foo: /path/to/myproj/src/lib.rs /path/to/myproj/src/main.rs</span>\n</code></pre>\n<h2 id=\"shared-cache\"><a class=\"header\" href=\"#shared-cache\">Shared cache</a></h2>\n<p>A third party tool, <a href=\"https://github.com/mozilla/sccache\">sccache</a>, can be used to share built dependencies across\ndifferent workspaces.</p>\n<p>To setup <code class=\"hljs\">sccache</code>, install it with <code class=\"hljs\">cargo install sccache</code> and set\n<code class=\"hljs\">RUSTC_WRAPPER</code> environmental variable to <code class=\"hljs\">sccache</code> before invoking Cargo. If\nyou use bash, it makes sense to add <code class=\"hljs\">export RUSTC_WRAPPER=sccache</code> to\n<code class=\"hljs\">.bashrc</code>. Alternatively, you can set <a href=\"guide/../reference/config.html#buildrustc-wrapper\"><code class=\"hljs\">build.rustc-wrapper</code></a> in the <a href=\"guide/../reference/config.html\">Cargo\nconfiguration</a>. Refer to sccache documentation for more details.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-reference\"><a class=\"header\" href=\"#cargo-reference\">Cargo Reference</a></h1>\n<p>The reference covers the details of various areas of Cargo.</p>\n<ul>\n<li><a href=\"reference/specifying-dependencies.html\">Specifying Dependencies</a>\n<ul>\n<li><a href=\"reference/overriding-dependencies.html\">Overriding Dependencies</a></li>\n</ul>\n</li>\n<li><a href=\"reference/manifest.html\">The Manifest Format</a>\n<ul>\n<li><a href=\"reference/cargo-targets.html\">Cargo Targets</a></li>\n</ul>\n</li>\n<li><a href=\"reference/workspaces.html\">Workspaces</a></li>\n<li><a href=\"reference/features.html\">Features</a>\n<ul>\n<li><a href=\"reference/features-examples.html\">Features Examples</a></li>\n</ul>\n</li>\n<li><a href=\"reference/profiles.html\">Profiles</a></li>\n<li><a href=\"reference/config.html\">Configuration</a></li>\n<li><a href=\"reference/environment-variables.html\">Environment Variables</a></li>\n<li><a href=\"reference/build-scripts.html\">Build Scripts</a>\n<ul>\n<li><a href=\"reference/build-script-examples.html\">Build Script Examples</a></li>\n</ul>\n</li>\n<li><a href=\"reference/publishing.html\">Publishing on crates.io</a></li>\n<li><a href=\"reference/pkgid-spec.html\">Package ID Specifications</a></li>\n<li><a href=\"reference/source-replacement.html\">Source Replacement</a></li>\n<li><a href=\"reference/external-tools.html\">External Tools</a></li>\n<li><a href=\"reference/registries.html\">Registries</a></li>\n<li><a href=\"reference/resolver.html\">Dependency Resolution</a></li>\n<li><a href=\"reference/semver.html\">SemVer Compatibility</a></li>\n<li><a href=\"reference/future-incompat-report.html\">Future incompat report</a></li>\n<li><a href=\"reference/timings.html\">Reporting build timings</a></li>\n<li><a href=\"reference/unstable.html\">Unstable Features</a></li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"specifying-dependencies\"><a class=\"header\" href=\"#specifying-dependencies\">Specifying Dependencies</a></h1>\n<p>Your crates can depend on other libraries from <a href=\"https://crates.io/\">crates.io</a> or other\nregistries, <code class=\"hljs\">git</code> repositories, or subdirectories on your local file system.\nYou can also temporarily override the location of a dependency — for example,\nto be able to test out a bug fix in the dependency that you are working on\nlocally. You can have different dependencies for different platforms, and\ndependencies that are only used during development. Let’s take a look at how\nto do each of these.</p>\n<h2 id=\"specifying-dependencies-from-cratesio\"><a class=\"header\" href=\"#specifying-dependencies-from-cratesio\">Specifying dependencies from crates.io</a></h2>\n<p>Cargo is configured to look for dependencies on <a href=\"https://crates.io/\">crates.io</a> by default. Only\nthe name and a version string are required in this case. In <a href=\"reference/../guide/index.html\">the cargo\nguide</a>, we specified a dependency on the <code class=\"hljs\">time</code> crate:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">time</span> = <span class=\"hljs-string\">\"0.1.12\"</span>\n</code></pre>\n<p>The string <code class=\"hljs\">\"0.1.12\"</code> is a version requirement. Although it looks like a\nspecific <em>version</em> of the <code class=\"hljs\">time</code> crate, it actually specifies a <em>range</em> of\nversions and allows <a href=\"https://semver.org\">SemVer</a> compatible updates. An update is allowed if the new\nversion number does not modify the left-most non-zero number in the major, minor,\npatch grouping. In this case, if we ran <code class=\"hljs\">cargo update time</code>, cargo should\nupdate us to version <code class=\"hljs\">0.1.13</code> if it is the latest <code class=\"hljs\">0.1.z</code> release, but would not\nupdate us to <code class=\"hljs\">0.2.0</code>. If instead we had specified the version string as <code class=\"hljs\">1.0</code>,\ncargo should update to <code class=\"hljs\">1.1</code> if it is the latest <code class=\"hljs\">1.y</code> release, but not <code class=\"hljs\">2.0</code>.\nThe version <code class=\"hljs\">0.0.x</code> is not considered compatible with any other version.</p>\n<p>Here are some more examples of version requirements and the versions that would\nbe allowed with them:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-notrust hljs\">1.2.3  :=  &gt;=1.2.3, &lt;2.0.0\n1.2    :=  &gt;=1.2.0, &lt;2.0.0\n1      :=  &gt;=1.0.0, &lt;2.0.0\n0.2.3  :=  &gt;=0.2.3, &lt;0.3.0\n0.2    :=  &gt;=0.2.0, &lt;0.3.0\n0.0.3  :=  &gt;=0.0.3, &lt;0.0.4\n0.0    :=  &gt;=0.0.0, &lt;0.1.0\n0      :=  &gt;=0.0.0, &lt;1.0.0\n</code></pre>\n<p>This compatibility convention is different from SemVer in the way it treats\nversions before 1.0.0. While SemVer says there is no compatibility before\n1.0.0, Cargo considers <code class=\"hljs\">0.x.y</code> to be compatible with <code class=\"hljs\">0.x.z</code>, where <code class=\"hljs\">y ≥ z</code>\nand <code class=\"hljs\">x &gt; 0</code>.</p>\n<p>It is possible to further tweak the logic for selecting compatible versions\nusing special operators as described in the <a href=\"reference/specifying-dependencies.html#version-requirement-syntax\">Version requirement syntax</a> section.</p>\n<p>Use the default version requirement strategy, e.g. <code class=\"hljs\">log = \"1.2.3\"</code> where possible to maximize compatibility.</p>\n<h2 id=\"version-requirement-syntax\"><a class=\"header\" href=\"#version-requirement-syntax\">Version requirement syntax</a></h2>\n<h3 id=\"caret-requirements\"><a class=\"header\" href=\"#caret-requirements\">Caret requirements</a></h3>\n<p><strong>Caret requirements</strong> are the default version requirement strategy.\nThis version strategy allows <a href=\"https://semver.org\">SemVer</a> compatible updates.\nThey are specified as version requirements with a leading caret (<code class=\"hljs\">^</code>).</p>\n<p><code class=\"hljs\">^1.2.3</code> is an example of a caret requirement.</p>\n<p>Leaving off the caret is a simplified equivalent syntax to using caret requirements.\nWhile caret requirements are the default, it is recommended to use the\nsimplified syntax when possible.</p>\n<p><code class=\"hljs\">log = \"^1.2.3\"</code> is exactly equivalent to <code class=\"hljs\">log = \"1.2.3\"</code>.</p>\n<h3 id=\"tilde-requirements\"><a class=\"header\" href=\"#tilde-requirements\">Tilde requirements</a></h3>\n<p><strong>Tilde requirements</strong> specify a minimal version with some ability to update.\nIf you specify a major, minor, and patch version or only a major and minor\nversion, only patch-level changes are allowed. If you only specify a major\nversion, then minor- and patch-level changes are allowed.</p>\n<p><code class=\"hljs\">~1.2.3</code> is an example of a tilde requirement.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-notrust hljs\">~1.2.3  := &gt;=1.2.3, &lt;1.3.0\n~1.2    := &gt;=1.2.0, &lt;1.3.0\n~1      := &gt;=1.0.0, &lt;2.0.0\n</code></pre>\n<h3 id=\"wildcard-requirements\"><a class=\"header\" href=\"#wildcard-requirements\">Wildcard requirements</a></h3>\n<p><strong>Wildcard requirements</strong> allow for any version where the wildcard is\npositioned.</p>\n<p><code class=\"hljs\">*</code>, <code class=\"hljs\">1.*</code> and <code class=\"hljs\">1.2.*</code> are examples of wildcard requirements.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-notrust hljs\">*     := &gt;=0.0.0\n1.*   := &gt;=1.0.0, &lt;2.0.0\n1.2.* := &gt;=1.2.0, &lt;1.3.0\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> does not allow bare <code class=\"hljs\">*</code> versions.</p>\n</blockquote>\n<h3 id=\"comparison-requirements\"><a class=\"header\" href=\"#comparison-requirements\">Comparison requirements</a></h3>\n<p><strong>Comparison requirements</strong> allow manually specifying a version range or an\nexact version to depend on.</p>\n<p>Here are some examples of comparison requirements:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-notrust hljs\">&gt;= 1.2.0\n&gt; 1\n&lt; 2\n= 1.2.3\n</code></pre>\n<p><span id=\"multiple-requirements\"></span></p>\n<h3 id=\"multiple-version-requirements\"><a class=\"header\" href=\"#multiple-version-requirements\">Multiple version requirements</a></h3>\n<p>As shown in the examples above, multiple version requirements can be\nseparated with a comma, e.g., <code class=\"hljs\">&gt;= 1.2, &lt; 1.5</code>.</p>\n<blockquote>\n<p><strong>Recommendation:</strong> When in doubt, use the default version requirement operator.</p>\n<p>In rare circumstances, a package with a “public dependency”\n(re-exports the dependency or interoperates with it in its public API)\nthat is compatible with multiple semver-incompatible versions\n(e.g. only uses a simple type that hasn’t changed between releases, like an <code class=\"hljs\">Id</code>)\nmay support users choosing which version of the “public dependency” to use.\nIn this case, a version requirement like <code class=\"hljs\">\"&gt;=0.4, &lt;2\"</code> may be of interest.\n<em>However</em> users of the package will likely run into errors and need to\nmanually select a version of the “public dependency” via <code class=\"hljs\">cargo update</code> if\nthey also depend on it as Cargo might pick different versions of the “public\ndependency” when <a href=\"reference/resolver.html\">resolving dependency versions</a>  (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10599\">#10599</a>).</p>\n<p>Avoid constraining the upper bound of a version to be anything less than the\nnext semver incompatible version\n(e.g. avoid <code class=\"hljs\">\"&gt;=2.0, &lt;2.4\"</code>) as other packages in the dependency tree may\nrequire a newer version, leading to an unresolvable error (see <a href=\"https://github.com/rust-lang/cargo/issues/9029\">#9029</a>).\nConsider whether controlling the version in your <a href=\"reference/../guide/cargo-toml-vs-cargo-lock.html\"><code class=\"hljs\">Cargo.lock</code></a> would be more\nappropriate.</p>\n<p>In some instances this won’t matter or the benefits might outweigh the cost, including:</p>\n<ul>\n<li>When no one else depends on your package e.g. it only has a <code class=\"hljs\">[[bin]]</code></li>\n<li>When depending on a pre-release package and wishing to avoid breaking\nchanges then a fully specified <code class=\"hljs\">\"=1.2.3-alpha.3\"</code> might be warranted (see\n<a href=\"https://github.com/rust-lang/cargo/issues/2222\">#2222</a>)</li>\n<li>When a library re-exports a proc-macro but the proc-macro generates code that\ncalls into the re-exporting library then a fully specified <code class=\"hljs\">=1.2.3</code> might be\nwarranted to ensure the proc-macro isn’t newer than the re-exporting library\nand generating code that uses parts of the API that don’t exist within the\ncurrent version</li>\n</ul>\n</blockquote>\n<h2 id=\"specifying-dependencies-from-other-registries\"><a class=\"header\" href=\"#specifying-dependencies-from-other-registries\">Specifying dependencies from other registries</a></h2>\n<p>To specify a dependency from a registry other than <a href=\"https://crates.io/\">crates.io</a> set the <code class=\"hljs\">registry</code> key\nto the name of the registry to use:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">some-crate</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, registry = <span class=\"hljs-string\">\"my-registry\"</span> }\n</code></pre>\n<p>where <code class=\"hljs\">my-registry</code> is the registry name configured in <code class=\"hljs\">.cargo/config.toml</code> file.\nSee the <a href=\"reference/registries.html\">registries documentation</a> for more information.</p>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> does not allow packages to be published with\ndependencies on code published outside of <a href=\"https://crates.io/\">crates.io</a>.</p>\n</blockquote>\n<h2 id=\"specifying-dependencies-from-git-repositories\"><a class=\"header\" href=\"#specifying-dependencies-from-git-repositories\">Specifying dependencies from <code>git</code> repositories</a></h2>\n<p>To depend on a library located in a <code class=\"hljs\">git</code> repository, the minimum information\nyou need to specify is the location of the repository with the <code class=\"hljs\">git</code> key:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span> }\n</code></pre>\n<p>Cargo fetches the <code class=\"hljs\">git</code> repository at that location and traverses the file tree to find\n<code class=\"hljs\">Cargo.toml</code> file for the requested crate anywhere inside the <code class=\"hljs\">git</code> repository.\nFor example, <code class=\"hljs\">regex-lite</code> and <code class=\"hljs\">regex-syntax</code> are members of <code class=\"hljs\">rust-lang/regex</code> repo\nand can be referred to by the repo’s root URL (<code class=\"hljs\">https://github.com/rust-lang/regex.git</code>)\nregardless of where in the file tree they reside.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">regex-lite</span>   = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span> }\n<span class=\"hljs-attr\">regex-syntax</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span> }\n</code></pre>\n<p>The above rule does not apply to <a href=\"reference/specifying-dependencies.html#specifying-path-dependencies\"><code class=\"hljs\">path</code> dependencies</a>.</p>\n<h3 id=\"choice-of-commit\"><a class=\"header\" href=\"#choice-of-commit\">Choice of commit</a></h3>\n<p>Cargo assumes that we intend to use the latest commit on the default branch to build\nour package if we only specify the repo URL, as in the examples above.</p>\n<p>You can combine the <code class=\"hljs\">git</code> key with the <code class=\"hljs\">rev</code>, <code class=\"hljs\">tag</code>, or <code class=\"hljs\">branch</code> keys to be more specific about\nwhich commit to use. Here’s an example of using the latest commit on a branch named <code class=\"hljs\">next</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span>, branch = <span class=\"hljs-string\">\"next\"</span> }\n</code></pre>\n<p>Anything that is not a branch or a tag falls under <code class=\"hljs\">rev</code> key. This can be a commit\nhash like <code class=\"hljs\">rev = \"4c59b707\"</code>, or a named reference exposed by the remote\nrepository such as <code class=\"hljs\">rev = \"refs/pull/493/head\"</code>.</p>\n<p>What references are available for the <code class=\"hljs\">rev</code> key varies by where the repo is hosted.<br>\nGitHub exposes a reference to the most recent commit of every pull request as in the example above.\nOther git hosts may provide something equivalent under a different naming scheme.</p>\n<p><strong>More <code class=\"hljs\">git</code> dependency examples:</strong></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># .git suffix can be omitted if the host accepts such URLs - both examples work the same</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex\"</span> }\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span> }\n\n<span class=\"hljs-comment\"># a commit with a particular tag</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span>, tag = <span class=\"hljs-string\">\"1.10.3\"</span> }\n\n<span class=\"hljs-comment\"># a commit by its SHA1 hash</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span>, rev = <span class=\"hljs-string\">\"0c0990399270277832fbb5b91a1fa118e6f63dba\"</span> }\n\n<span class=\"hljs-comment\"># HEAD commit of PR 493</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span>, rev = <span class=\"hljs-string\">\"refs/pull/493/head\"</span> }\n\n<span class=\"hljs-comment\"># INVALID EXAMPLES</span>\n\n<span class=\"hljs-comment\"># specifying the commit after # ignores the commit ID and generates a warning</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git#4c59b70\"</span> }\n\n<span class=\"hljs-comment\"># git and path cannot be used at the same time</span>\n<span class=\"hljs-attr\">regex</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git#4c59b70\"</span>, path = <span class=\"hljs-string\">\"../regex\"</span> }\n</code></pre>\n<p>Cargo locks the commits of <code class=\"hljs\">git</code> dependencies in <code class=\"hljs\">Cargo.lock</code> file at the time of their addition\nand checks for updates only when you run <code class=\"hljs\">cargo update</code> command.</p>\n<h3 id=\"the-role-of-the-version-key\"><a class=\"header\" href=\"#the-role-of-the-version-key\">The role of the <code>version</code> key</a></h3>\n<p>The <code class=\"hljs\">version</code> key always implies that the package is available in a registry,\nregardless of the presence of <code class=\"hljs\">git</code> or <code class=\"hljs\">path</code> keys.</p>\n<p>The <code class=\"hljs\">version</code> key does <em>not</em> affect which commit is used when Cargo retrieves the <code class=\"hljs\">git</code> dependency,\nbut Cargo checks the version information in the dependency’s <code class=\"hljs\">Cargo.toml</code> file\nagainst the <code class=\"hljs\">version</code> key and raises an error if the check fails.</p>\n<p>In this example, Cargo retrieves the HEAD commit of the branch called <code class=\"hljs\">next</code> from Git and checks if the crate’s version\nis compatible with <code class=\"hljs\">version = \"1.10.3\"</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">regex</span> = { version = <span class=\"hljs-string\">\"1.10.3\"</span>, git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span>, branch = <span class=\"hljs-string\">\"next\"</span> }\n</code></pre>\n<p><code class=\"hljs\">version</code>, <code class=\"hljs\">git</code>, and <code class=\"hljs\">path</code> keys are considered separate locations for resolving the dependency.\nSee <a href=\"reference/specifying-dependencies.html#multiple-locations\">Multiple locations</a> section below for detailed explanations.</p>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> does not allow packages to be published with\ndependencies on code published outside of <a href=\"https://crates.io/\">crates.io</a> itself\n(<a href=\"reference/specifying-dependencies.html#development-dependencies\">dev-dependencies</a> are ignored). See the <a href=\"reference/specifying-dependencies.html#multiple-locations\">Multiple\nlocations</a> section for a fallback alternative for <code class=\"hljs\">git</code>\nand <code class=\"hljs\">path</code> dependencies.</p>\n</blockquote>\n<h3 id=\"accessing-private-git-repositories\"><a class=\"header\" href=\"#accessing-private-git-repositories\">Accessing private Git repositories</a></h3>\n<p>See <a href=\"reference/../appendix/git-authentication.html\">Git Authentication</a> for help with Git authentication for private repos.</p>\n<h2 id=\"specifying-path-dependencies\"><a class=\"header\" href=\"#specifying-path-dependencies\">Specifying path dependencies</a></h2>\n<p>Over time, our <code class=\"hljs\">hello_world</code> package from <a href=\"reference/../guide/index.html\">the guide</a> has\ngrown significantly in size! It’s gotten to the point that we probably want to\nsplit out a separate crate for others to use. To do this Cargo supports <strong>path\ndependencies</strong> which are typically sub-crates that live within one repository.\nLet’s start by making a new crate inside of our <code class=\"hljs\">hello_world</code> package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> inside of hello_world/</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new hello_utils</span>\n</code></pre>\n<p>This will create a new folder <code class=\"hljs\">hello_utils</code> inside of which a <code class=\"hljs\">Cargo.toml</code> and\n<code class=\"hljs\">src</code> folder are ready to be configured. To tell Cargo about this, open\nup <code class=\"hljs\">hello_world/Cargo.toml</code> and add <code class=\"hljs\">hello_utils</code> to your dependencies:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">hello_utils</span> = { path = <span class=\"hljs-string\">\"hello_utils\"</span> }\n</code></pre>\n<p>This tells Cargo that we depend on a crate called <code class=\"hljs\">hello_utils</code> which is found\nin the <code class=\"hljs\">hello_utils</code> folder, relative to the <code class=\"hljs\">Cargo.toml</code> file it’s written in.</p>\n<p>The next <code class=\"hljs\">cargo build</code> will automatically build <code class=\"hljs\">hello_utils</code> and\nall of its dependencies.</p>\n<h3 id=\"no-local-path-traversal\"><a class=\"header\" href=\"#no-local-path-traversal\">No local path traversal</a></h3>\n<p>The local paths must point to the exact folder with the dependency’s <code class=\"hljs\">Cargo.toml</code>.\nUnlike with <code class=\"hljs\">git</code> dependencies, Cargo does not traverse local paths.\nFor example, if <code class=\"hljs\">regex-lite</code> and <code class=\"hljs\">regex-syntax</code> are members of a\nlocally cloned <code class=\"hljs\">rust-lang/regex</code> repo, they have to be referred to by the full path:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># git key accepts the repo root URL and Cargo traverses the tree to find the crate</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">regex-lite</span>   = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span> }\n<span class=\"hljs-attr\">regex-syntax</span> = { git = <span class=\"hljs-string\">\"https://github.com/rust-lang/regex.git\"</span> }\n\n<span class=\"hljs-comment\"># path key requires the member name to be included in the local path</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">regex-lite</span>   = { path = <span class=\"hljs-string\">\"../regex/regex-lite\"</span> }\n<span class=\"hljs-attr\">regex-syntax</span> = { path = <span class=\"hljs-string\">\"../regex/regex-syntax\"</span> }\n</code></pre>\n<h3 id=\"local-paths-in-published-crates\"><a class=\"header\" href=\"#local-paths-in-published-crates\">Local paths in published crates</a></h3>\n<p>Crates that use dependencies specified with only a path are not\npermitted on <a href=\"https://crates.io/\">crates.io</a>.</p>\n<p>If we wanted to publish our <code class=\"hljs\">hello_world</code> crate,\nwe would need to publish a version of <code class=\"hljs\">hello_utils</code> to <a href=\"https://crates.io/\">crates.io</a> as a separate crate\nand specify its version in the dependencies line of <code class=\"hljs\">hello_world</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">hello_utils</span> = { path = <span class=\"hljs-string\">\"hello_utils\"</span>, version = <span class=\"hljs-string\">\"0.1.0\"</span> }\n</code></pre>\n<p>The use of <code class=\"hljs\">path</code> and <code class=\"hljs\">version</code> keys together is explained in the <a href=\"reference/specifying-dependencies.html#multiple-locations\">Multiple locations</a> section.</p>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> does not allow packages to be published with\ndependencies on code outside of <a href=\"https://crates.io/\">crates.io</a>, except for <a href=\"reference/specifying-dependencies.html#development-dependencies\">dev-dependencies</a>.\nSee the <a href=\"reference/specifying-dependencies.html#multiple-locations\">Multiple locations</a> section\nfor a fallback alternative for <code class=\"hljs\">git</code> and <code class=\"hljs\">path</code> dependencies.</p>\n</blockquote>\n<h2 id=\"multiple-locations\"><a class=\"header\" href=\"#multiple-locations\">Multiple locations</a></h2>\n<p>It is possible to specify both a registry version and a <code class=\"hljs\">git</code> or <code class=\"hljs\">path</code>\nlocation. The <code class=\"hljs\">git</code> or <code class=\"hljs\">path</code> dependency will be used locally (in which case\nthe <code class=\"hljs\">version</code> is checked against the local copy), and when published to a\nregistry like <a href=\"https://crates.io/\">crates.io</a>, it will use the registry version. Other\ncombinations are not allowed. Examples:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-comment\"># Uses `my-bitflags` when used locally, and uses</span>\n<span class=\"hljs-comment\"># version 1.0 from crates.io when published.</span>\n<span class=\"hljs-attr\">bitflags</span> = { path = <span class=\"hljs-string\">\"my-bitflags\"</span>, version = <span class=\"hljs-string\">\"1.0\"</span> }\n\n<span class=\"hljs-comment\"># Uses the given git repo when used locally, and uses</span>\n<span class=\"hljs-comment\"># version 1.0 from crates.io when published.</span>\n<span class=\"hljs-attr\">smallvec</span> = { git = <span class=\"hljs-string\">\"https://github.com/servo/rust-smallvec.git\"</span>, version = <span class=\"hljs-string\">\"1.0\"</span> }\n\n<span class=\"hljs-comment\"># N.B. that if a version doesn't match, Cargo will fail to compile!</span>\n</code></pre>\n<p>One example where this can be useful is when you have split up a library into\nmultiple packages within the same workspace. You can then use <code class=\"hljs\">path</code>\ndependencies to point to the local packages within the workspace to use the\nlocal version during development, and then use the <a href=\"https://crates.io/\">crates.io</a> version once it\nis published. This is similar to specifying an\n<a href=\"reference/overriding-dependencies.html\">override</a>, but only applies to this one\ndependency declaration.</p>\n<h2 id=\"platform-specific-dependencies\"><a class=\"header\" href=\"#platform-specific-dependencies\">Platform specific dependencies</a></h2>\n<p>Platform-specific dependencies take the same format, but are listed under a\n<code class=\"hljs\">target</code> section. Normally Rust-like <a href=\"reference/../../reference/conditional-compilation.html\"><code class=\"hljs\">#[cfg]</code>\nsyntax</a> will be used to define\nthese sections:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[target.'cfg(windows)'.dependencies]</span>\n<span class=\"hljs-attr\">winhttp</span> = <span class=\"hljs-string\">\"0.4.0\"</span>\n\n<span class=\"hljs-section\">[target.'cfg(unix)'.dependencies]</span>\n<span class=\"hljs-attr\">openssl</span> = <span class=\"hljs-string\">\"1.0.1\"</span>\n\n<span class=\"hljs-section\">[target.'cfg(target_arch = \"x86\")'.dependencies]</span>\n<span class=\"hljs-attr\">native-i686</span> = { path = <span class=\"hljs-string\">\"native/i686\"</span> }\n\n<span class=\"hljs-section\">[target.'cfg(target_arch = \"x86_64\")'.dependencies]</span>\n<span class=\"hljs-attr\">native-x86_64</span> = { path = <span class=\"hljs-string\">\"native/x86_64\"</span> }\n</code></pre>\n<p>Like with Rust, the syntax here supports the <code class=\"hljs\">not</code>, <code class=\"hljs\">any</code>, and <code class=\"hljs\">all</code> operators\nto combine various cfg name/value pairs.</p>\n<p>If you want to know which cfg targets are available on your platform, run\n<code class=\"hljs\">rustc --print=cfg</code> from the command line. If you want to know which <code class=\"hljs\">cfg</code>\ntargets are available for another platform, such as 64-bit Windows,\nrun <code class=\"hljs\">rustc --print=cfg --target=x86_64-pc-windows-msvc</code>.</p>\n<p>Unlike in your Rust source code, you cannot use\n<code class=\"hljs\">[target.'cfg(feature = \"fancy-feature\")'.dependencies]</code> to add dependencies\nbased on optional features. Use <a href=\"reference/features.html\">the <code class=\"hljs\">[features]</code> section</a>\ninstead:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">foo</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n<span class=\"hljs-attr\">bar</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n\n<span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">fancy-feature</span> = [<span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-string\">\"bar\"</span>]\n</code></pre>\n<p>The same applies to <code class=\"hljs\">cfg(debug_assertions)</code>, <code class=\"hljs\">cfg(test)</code> and <code class=\"hljs\">cfg(proc_macro)</code>.\nThese values will not work as expected and will always have the default value\nreturned by <code class=\"hljs\">rustc --print=cfg</code>.\nThere is currently no way to add dependencies based on these configuration values.</p>\n<p>In addition to <code class=\"hljs\">#[cfg]</code> syntax, Cargo also supports listing out the full target\nthe dependencies would apply to:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[target.x86_64-pc-windows-gnu.dependencies]</span>\n<span class=\"hljs-attr\">winhttp</span> = <span class=\"hljs-string\">\"0.4.0\"</span>\n\n<span class=\"hljs-section\">[target.i686-unknown-linux-gnu.dependencies]</span>\n<span class=\"hljs-attr\">openssl</span> = <span class=\"hljs-string\">\"1.0.1\"</span>\n</code></pre>\n<h3 id=\"custom-target-specifications\"><a class=\"header\" href=\"#custom-target-specifications\">Custom target specifications</a></h3>\n<p>If you’re using a custom target specification (such as <code class=\"hljs\">--target foo/bar.json</code>), use the base filename without the <code class=\"hljs\">.json</code> extension:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[target.bar.dependencies]</span>\n<span class=\"hljs-attr\">winhttp</span> = <span class=\"hljs-string\">\"0.4.0\"</span>\n\n<span class=\"hljs-section\">[target.my-special-i686-platform.dependencies]</span>\n<span class=\"hljs-attr\">openssl</span> = <span class=\"hljs-string\">\"1.0.1\"</span>\n<span class=\"hljs-attr\">native</span> = { path = <span class=\"hljs-string\">\"native/i686\"</span> }\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: Custom target specifications are not usable on the stable channel.</p>\n</blockquote>\n<h2 id=\"development-dependencies\"><a class=\"header\" href=\"#development-dependencies\">Development dependencies</a></h2>\n<p>You can add a <code class=\"hljs\">[dev-dependencies]</code> section to your <code class=\"hljs\">Cargo.toml</code> whose format\nis equivalent to <code class=\"hljs\">[dependencies]</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dev-dependencies]</span>\n<span class=\"hljs-attr\">tempdir</span> = <span class=\"hljs-string\">\"0.3\"</span>\n</code></pre>\n<p>Dev-dependencies are not used when compiling\na package for building, but are used for compiling tests, examples, and\nbenchmarks.</p>\n<p>These dependencies are <em>not</em> propagated to other packages which depend on this\npackage.</p>\n<p>You can also have target-specific development dependencies by using\n<code class=\"hljs\">dev-dependencies</code> in the target section header instead of <code class=\"hljs\">dependencies</code>. For\nexample:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[target.'cfg(unix)'.dev-dependencies]</span>\n<span class=\"hljs-attr\">mio</span> = <span class=\"hljs-string\">\"0.0.1\"</span>\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: When a package is published, only dev-dependencies that specify a\n<code class=\"hljs\">version</code> will be included in the published crate. For most use cases,\ndev-dependencies are not needed when published, though some users (like OS\npackagers) may want to run tests within a crate, so providing a <code class=\"hljs\">version</code> if\npossible can still be beneficial.</p>\n</blockquote>\n<h2 id=\"build-dependencies\"><a class=\"header\" href=\"#build-dependencies\">Build dependencies</a></h2>\n<p>You can depend on other Cargo-based crates for use in your build scripts.\nDependencies are declared through the <code class=\"hljs\">build-dependencies</code> section of the\nmanifest:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">cc</span> = <span class=\"hljs-string\">\"1.0.3\"</span>\n</code></pre>\n<p>You can also have target-specific build dependencies by using\n<code class=\"hljs\">build-dependencies</code> in the target section header instead of <code class=\"hljs\">dependencies</code>. For\nexample:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[target.'cfg(unix)'.build-dependencies]</span>\n<span class=\"hljs-attr\">cc</span> = <span class=\"hljs-string\">\"1.0.3\"</span>\n</code></pre>\n<p>In this case, the dependency will only be built when the host platform matches the\nspecified target.</p>\n<p>The build script <strong>does not</strong> have access to the dependencies listed\nin the <code class=\"hljs\">dependencies</code> or <code class=\"hljs\">dev-dependencies</code> section. Build\ndependencies will likewise not be available to the package itself\nunless listed under the <code class=\"hljs\">dependencies</code> section as well. A package\nitself and its build script are built separately, so their\ndependencies need not coincide. Cargo is kept simpler and cleaner by\nusing independent dependencies for independent purposes.</p>\n<h2 id=\"choosing-features\"><a class=\"header\" href=\"#choosing-features\">Choosing features</a></h2>\n<p>If a package you depend on offers conditional features, you can\nspecify which to use:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies.awesome]</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"1.3.5\"</span>\n<span class=\"hljs-attr\">default-features</span> = <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># do not include the default features, and optionally</span>\n                         <span class=\"hljs-comment\"># cherry-pick individual features</span>\n<span class=\"hljs-attr\">features</span> = [<span class=\"hljs-string\">\"secure-password\"</span>, <span class=\"hljs-string\">\"civet\"</span>]\n</code></pre>\n<p>More information about features can be found in the <a href=\"reference/features.html#dependency-features\">features\nchapter</a>.</p>\n<h2 id=\"renaming-dependencies-in-cargotoml\"><a class=\"header\" href=\"#renaming-dependencies-in-cargotoml\">Renaming dependencies in <code>Cargo.toml</code></a></h2>\n<p>When writing a <code class=\"hljs\">[dependencies]</code> section in <code class=\"hljs\">Cargo.toml</code> the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it’s published on crates.io. For\nexample you may wish to:</p>\n<ul>\n<li>Avoid the need to  <code class=\"hljs\">use foo as bar</code> in Rust source.</li>\n<li>Depend on multiple versions of a crate.</li>\n<li>Depend on crates with the same name from different registries.</li>\n</ul>\n<p>To support this Cargo supports a <code class=\"hljs\">package</code> key in the <code class=\"hljs\">[dependencies]</code> section\nof which package should be depended on:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"mypackage\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.0.1\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">foo</span> = <span class=\"hljs-string\">\"0.1\"</span>\n<span class=\"hljs-attr\">bar</span> = { git = <span class=\"hljs-string\">\"https://github.com/example/project.git\"</span>, package = <span class=\"hljs-string\">\"foo\"</span> }\n<span class=\"hljs-attr\">baz</span> = { version = <span class=\"hljs-string\">\"0.1\"</span>, registry = <span class=\"hljs-string\">\"custom\"</span>, package = <span class=\"hljs-string\">\"foo\"</span> }\n</code></pre>\n<p>In this example, three crates are now available in your Rust code:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> foo; <span class=\"hljs-comment\">// crates.io</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> bar; <span class=\"hljs-comment\">// git repository</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> baz; <span class=\"hljs-comment\">// registry `custom`</span></code></pre>\n<p>All three of these crates have the package name of <code class=\"hljs\">foo</code> in their own\n<code class=\"hljs\">Cargo.toml</code>, so we’re explicitly using the <code class=\"hljs\">package</code> key to inform Cargo that\nwe want the <code class=\"hljs\">foo</code> package even though we’re calling it something else locally.\nThe <code class=\"hljs\">package</code> key, if not specified, defaults to the name of the dependency\nbeing requested.</p>\n<p>Note that if you have an optional dependency like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">bar</span> = { version = <span class=\"hljs-string\">\"0.1\"</span>, package = <span class=\"hljs-string\">'foo'</span>, optional = <span class=\"hljs-literal\">true</span> }\n</code></pre>\n<p>you’re depending on the crate <code class=\"hljs\">foo</code> from crates.io, but your crate has a <code class=\"hljs\">bar</code>\nfeature instead of a <code class=\"hljs\">foo</code> feature. That is, names of features take after the\nname of the dependency, not the package name, when renamed.</p>\n<p>Enabling transitive dependencies works similarly, for example we could add the\nfollowing to the above manifest:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">log-debug</span> = [<span class=\"hljs-string\">'bar/log-debug'</span>] <span class=\"hljs-comment\"># using 'foo/log-debug' would be an error!</span>\n</code></pre>\n<h2 id=\"inheriting-a-dependency-from-a-workspace\"><a class=\"header\" href=\"#inheriting-a-dependency-from-a-workspace\">Inheriting a dependency from a workspace</a></h2>\n<p>Dependencies can be inherited from a workspace by specifying the\ndependency in the workspace’s <a href=\"reference/workspaces.html#the-dependencies-table\"><code class=\"hljs\">[workspace.dependencies]</code></a> table.\nAfter that, add it to the <code class=\"hljs\">[dependencies]</code> table with <code class=\"hljs\">workspace = true</code>.</p>\n<p>Along with the <code class=\"hljs\">workspace</code> key, dependencies can also include these keys:</p>\n<ul>\n<li><a href=\"reference/features.html#optional-dependencies\"><code class=\"hljs\">optional</code></a>: Note that the<code class=\"hljs\">[workspace.dependencies]</code> table is not allowed to specify <code class=\"hljs\">optional</code>.</li>\n<li><a href=\"reference/features.html\"><code class=\"hljs\">features</code></a>: These are additive with the features declared in the <code class=\"hljs\">[workspace.dependencies]</code></li>\n</ul>\n<p>Other than <code class=\"hljs\">optional</code> and <code class=\"hljs\">features</code>, inherited dependencies cannot use any other\ndependency key (such as <code class=\"hljs\">version</code> or <code class=\"hljs\">default-features</code>).</p>\n<p>Dependencies in the <code class=\"hljs\">[dependencies]</code>, <code class=\"hljs\">[dev-dependencies]</code>, <code class=\"hljs\">[build-dependencies]</code>, and\n<code class=\"hljs\">[target.\"...\".dependencies]</code> sections support the ability to reference the\n<code class=\"hljs\">[workspace.dependencies]</code> definition of dependencies.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"bar\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.2.0\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">regex</span> = { workspace = <span class=\"hljs-literal\">true</span>, features = [<span class=\"hljs-string\">\"unicode\"</span>] }\n\n<span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">cc.workspace</span> = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-section\">[dev-dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = { workspace = <span class=\"hljs-literal\">true</span>, optional = <span class=\"hljs-literal\">true</span> }\n</code></pre>\n<script>\n(function() {\n    var fragments = {\n        \"#overriding-dependencies\": \"overriding-dependencies.html\",\n        \"#testing-a-bugfix\": \"overriding-dependencies.html#testing-a-bugfix\",\n        \"#working-with-an-unpublished-minor-version\": \"overriding-dependencies.html#working-with-an-unpublished-minor-version\",\n        \"#overriding-repository-url\": \"overriding-dependencies.html#overriding-repository-url\",\n        \"#prepublishing-a-breaking-change\": \"overriding-dependencies.html#prepublishing-a-breaking-change\",\n        \"#overriding-with-local-dependencies\": \"overriding-dependencies.html#paths-overrides\",\n    };\n    var target = fragments[window.location.hash];\n    if (target) {\n        var url = window.location.toString();\n        var base = url.substring(0, url.lastIndexOf('/'));\n        window.location.replace(base + \"/\" + target);\n    }\n})();\n</script>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"overriding-dependencies\"><a class=\"header\" href=\"#overriding-dependencies\">Overriding Dependencies</a></h1>\n<p>The desire to override a dependency can arise through a number of scenarios.\nMost of them, however, boil down to the ability to work with a crate before\nit’s been published to <a href=\"https://crates.io/\">crates.io</a>. For example:</p>\n<ul>\n<li>A crate you’re working on is also used in a much larger application you’re\nworking on, and you’d like to test a bug fix to the library inside of the\nlarger application.</li>\n<li>An upstream crate you don’t work on has a new feature or a bug fix on the\nmaster branch of its git repository which you’d like to test out.</li>\n<li>You’re about to publish a new major version of your crate, but you’d like to\ndo integration testing across an entire package to ensure the new major\nversion works.</li>\n<li>You’ve submitted a fix to an upstream crate for a bug you found, but you’d\nlike to immediately have your application start depending on the fixed\nversion of the crate to avoid blocking on the bug fix getting merged.</li>\n</ul>\n<p>These scenarios can be solved with the <a href=\"reference/overriding-dependencies.html#the-patch-section\"><code class=\"hljs\">[patch]</code> manifest\nsection</a>.</p>\n<p>This chapter walks through a few different use cases, and includes details\non the different ways to override a dependency.</p>\n<ul>\n<li>Example use cases\n<ul>\n<li><a href=\"reference/overriding-dependencies.html#testing-a-bugfix\">Testing a bugfix</a></li>\n<li><a href=\"reference/overriding-dependencies.html#working-with-an-unpublished-minor-version\">Working with an unpublished minor version</a>\n<ul>\n<li><a href=\"reference/overriding-dependencies.html#overriding-repository-url\">Overriding repository URL</a></li>\n</ul>\n</li>\n<li><a href=\"reference/overriding-dependencies.html#prepublishing-a-breaking-change\">Prepublishing a breaking change</a></li>\n<li><a href=\"reference/overriding-dependencies.html#using-patch-with-multiple-versions\">Using <code class=\"hljs\">[patch]</code> with multiple versions</a></li>\n</ul>\n</li>\n<li>Reference\n<ul>\n<li><a href=\"reference/overriding-dependencies.html#the-patch-section\">The <code class=\"hljs\">[patch]</code> section</a></li>\n<li><a href=\"reference/overriding-dependencies.html#the-replace-section\">The <code class=\"hljs\">[replace]</code> section</a></li>\n<li><a href=\"reference/overriding-dependencies.html#paths-overrides\"><code class=\"hljs\">paths</code> overrides</a></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: See also specifying a dependency with <a href=\"reference/specifying-dependencies.html#multiple-locations\">multiple locations</a>, which\ncan be used to override the source for a single dependency declaration in a\nlocal package.</p>\n</blockquote>\n<h2 id=\"testing-a-bugfix\"><a class=\"header\" href=\"#testing-a-bugfix\">Testing a bugfix</a></h2>\n<p>Let’s say you’re working with the <a href=\"https://crates.io/crates/uuid\"><code class=\"hljs\">uuid</code> crate</a> but while you’re working on it\nyou discover a bug. You are, however, quite enterprising so you decide to also\ntry to fix the bug! Originally your manifest will look like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-library\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">uuid</span> = <span class=\"hljs-string\">\"1.0\"</span>\n</code></pre>\n<p>First thing we’ll do is to clone the <a href=\"https://github.com/uuid-rs/uuid\"><code class=\"hljs\">uuid</code> repository</a>\nlocally via:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git <span class=\"hljs-built_in\">clone</span> https://github.com/uuid-rs/uuid.git</span>\n</code></pre>\n<p>Next we’ll edit the manifest of <code class=\"hljs\">my-library</code> to contain:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[patch.crates-io]</span>\n<span class=\"hljs-attr\">uuid</span> = { path = <span class=\"hljs-string\">\"../path/to/uuid\"</span> }\n</code></pre>\n<p>Here we declare that we’re <em>patching</em> the source <code class=\"hljs\">crates-io</code> with a new\ndependency. This will effectively add the local checked out version of <code class=\"hljs\">uuid</code> to\nthe crates.io registry for our local package.</p>\n<p>Next up we need to ensure that our lock file is updated to use this new version\nof <code class=\"hljs\">uuid</code> so our package uses the locally checked out copy instead of one from\ncrates.io. The way <code class=\"hljs\">[patch]</code> works is that it’ll load the dependency at\n<code class=\"hljs\">../path/to/uuid</code> and then whenever crates.io is queried for versions of <code class=\"hljs\">uuid</code>\nit’ll <em>also</em> return the local version.</p>\n<p>This means that the version number of the local checkout is significant and will\naffect whether the patch is used. Our manifest declared <code class=\"hljs\">uuid = \"1.0\"</code> which\nmeans we’ll only resolve to <code class=\"hljs\">&gt;= 1.0.0, &lt; 2.0.0</code>, and Cargo’s greedy resolution\nalgorithm also means that we’ll resolve to the maximum version within that\nrange. Typically this doesn’t matter as the version of the git repository will\nalready be greater or match the maximum version published on crates.io, but it’s\nimportant to keep this in mind!</p>\n<p>In any case, typically all you need to do now is:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling uuid v1.0.0 (.../uuid)\n   Compiling my-library v0.1.0 (.../my-library)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n</code></pre>\n<p>And that’s it! You’re now building with the local version of <code class=\"hljs\">uuid</code> (note the\npath in parentheses in the build output). If you don’t see the local path version getting\nbuilt then you may need to run <code class=\"hljs\">cargo update uuid --precise $version</code> where\n<code class=\"hljs\">$version</code> is the version of the locally checked out copy of <code class=\"hljs\">uuid</code>.</p>\n<p>Once you’ve fixed the bug you originally found the next thing you’ll want to do\nis to likely submit that as a pull request to the <code class=\"hljs\">uuid</code> crate itself. Once\nyou’ve done this then you can also update the <code class=\"hljs\">[patch]</code> section. The listing\ninside of <code class=\"hljs\">[patch]</code> is just like the <code class=\"hljs\">[dependencies]</code> section, so once your pull\nrequest is merged you could change your <code class=\"hljs\">path</code> dependency to:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[patch.crates-io]</span>\n<span class=\"hljs-attr\">uuid</span> = { git = <span class=\"hljs-string\">'https://github.com/uuid-rs/uuid.git'</span> }\n</code></pre>\n<h2 id=\"working-with-an-unpublished-minor-version\"><a class=\"header\" href=\"#working-with-an-unpublished-minor-version\">Working with an unpublished minor version</a></h2>\n<p>Let’s now shift gears a bit from bug fixes to adding features. While working on\n<code class=\"hljs\">my-library</code> you discover that a whole new feature is needed in the <code class=\"hljs\">uuid</code>\ncrate. You’ve implemented this feature, tested it locally above with <code class=\"hljs\">[patch]</code>,\nand submitted a pull request. Let’s go over how you continue to use and test it\nbefore it’s actually published.</p>\n<p>Let’s also say that the current version of <code class=\"hljs\">uuid</code> on crates.io is <code class=\"hljs\">1.0.0</code>, but\nsince then the master branch of the git repository has updated to <code class=\"hljs\">1.0.1</code>. This\nbranch includes your new feature you submitted previously. To use this\nrepository we’ll edit our <code class=\"hljs\">Cargo.toml</code> to look like</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-library\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">uuid</span> = <span class=\"hljs-string\">\"1.0.1\"</span>\n\n<span class=\"hljs-section\">[patch.crates-io]</span>\n<span class=\"hljs-attr\">uuid</span> = { git = <span class=\"hljs-string\">'https://github.com/uuid-rs/uuid.git'</span> }\n</code></pre>\n<p>Note that our local dependency on <code class=\"hljs\">uuid</code> has been updated to <code class=\"hljs\">1.0.1</code> as it’s\nwhat we’ll actually require once the crate is published. This version doesn’t\nexist on crates.io, though, so we provide it with the <code class=\"hljs\">[patch]</code> section of the\nmanifest.</p>\n<p>Now when our library is built it’ll fetch <code class=\"hljs\">uuid</code> from the git repository and\nresolve to 1.0.1 inside the repository instead of trying to download a version\nfrom crates.io. Once 1.0.1 is published on crates.io the <code class=\"hljs\">[patch]</code> section can\nbe deleted.</p>\n<p>It’s also worth noting that <code class=\"hljs\">[patch]</code> applies <em>transitively</em>. Let’s say you use\n<code class=\"hljs\">my-library</code> in a larger package, such as:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-binary\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">my-library</span> = { git = <span class=\"hljs-string\">'https://example.com/git/my-library'</span> }\n<span class=\"hljs-attr\">uuid</span> = <span class=\"hljs-string\">\"1.0\"</span>\n\n<span class=\"hljs-section\">[patch.crates-io]</span>\n<span class=\"hljs-attr\">uuid</span> = { git = <span class=\"hljs-string\">'https://github.com/uuid-rs/uuid.git'</span> }\n</code></pre>\n<p>Remember that <code class=\"hljs\">[patch]</code> is applicable <em>transitively</em> but can only be defined at\nthe <em>top level</em> so we consumers of <code class=\"hljs\">my-library</code> have to repeat the <code class=\"hljs\">[patch]</code> section\nif necessary. Here, though, the new <code class=\"hljs\">uuid</code> crate applies to <em>both</em> our dependency on\n<code class=\"hljs\">uuid</code> and the <code class=\"hljs\">my-library -&gt; uuid</code> dependency. The <code class=\"hljs\">uuid</code> crate will be resolved to\none version for this entire crate graph, 1.0.1, and it’ll be pulled from the git\nrepository.</p>\n<h3 id=\"overriding-repository-url\"><a class=\"header\" href=\"#overriding-repository-url\">Overriding repository URL</a></h3>\n<p>In case the dependency you want to override isn’t loaded from <code class=\"hljs\">crates.io</code>,\nyou’ll have to change a bit how you use <code class=\"hljs\">[patch]</code>. For example, if the\ndependency is a git dependency, you can override it to a local path with:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[patch.\"https://github.com/your/repository\"]</span>\n<span class=\"hljs-attr\">my-library</span> = { path = <span class=\"hljs-string\">\"../my-library/path\"</span> }\n</code></pre>\n<p>And that’s it!</p>\n<h2 id=\"prepublishing-a-breaking-change\"><a class=\"header\" href=\"#prepublishing-a-breaking-change\">Prepublishing a breaking change</a></h2>\n<p>Let’s take a look at working with a new major version of a crate, typically\naccompanied with breaking changes. Sticking with our previous crates, this\nmeans that we’re going to be creating version 2.0.0 of the <code class=\"hljs\">uuid</code> crate. After\nwe’ve submitted all changes upstream we can update our manifest for\n<code class=\"hljs\">my-library</code> to look like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">uuid</span> = <span class=\"hljs-string\">\"2.0\"</span>\n\n<span class=\"hljs-section\">[patch.crates-io]</span>\n<span class=\"hljs-attr\">uuid</span> = { git = <span class=\"hljs-string\">\"https://github.com/uuid-rs/uuid.git\"</span>, branch = <span class=\"hljs-string\">\"2.0.0\"</span> }\n</code></pre>\n<p>And that’s it! Like with the previous example the 2.0.0 version doesn’t actually\nexist on crates.io but we can still put it in through a git dependency through\nthe usage of the <code class=\"hljs\">[patch]</code> section. As a thought exercise let’s take another\nlook at the <code class=\"hljs\">my-binary</code> manifest from above again as well:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-binary\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">my-library</span> = { git = <span class=\"hljs-string\">'https://example.com/git/my-library'</span> }\n<span class=\"hljs-attr\">uuid</span> = <span class=\"hljs-string\">\"1.0\"</span>\n\n<span class=\"hljs-section\">[patch.crates-io]</span>\n<span class=\"hljs-attr\">uuid</span> = { git = <span class=\"hljs-string\">'https://github.com/uuid-rs/uuid.git'</span>, branch = <span class=\"hljs-string\">'2.0.0'</span> }\n</code></pre>\n<p>Note that this will actually resolve to two versions of the <code class=\"hljs\">uuid</code> crate. The\n<code class=\"hljs\">my-binary</code> crate will continue to use the 1.x.y series of the <code class=\"hljs\">uuid</code> crate but\nthe <code class=\"hljs\">my-library</code> crate will use the <code class=\"hljs\">2.0.0</code> version of <code class=\"hljs\">uuid</code>. This will allow you\nto gradually roll out breaking changes to a crate through a dependency graph\nwithout being forced to update everything all at once.</p>\n<h2 id=\"using-patch-with-multiple-versions\"><a class=\"header\" href=\"#using-patch-with-multiple-versions\">Using <code>[patch]</code> with multiple versions</a></h2>\n<p>You can patch in multiple versions of the same crate with the <code class=\"hljs\">package</code> key\nused to rename dependencies. For example let’s say that the <code class=\"hljs\">serde</code> crate has\na bugfix that we’d like to use to its <code class=\"hljs\">1.*</code> series but we’d also like to\nprototype using a <code class=\"hljs\">2.0.0</code> version of serde we have in our git repository. To\nconfigure this we’d do:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[patch.crates-io]</span>\n<span class=\"hljs-attr\">serde</span> = { git = <span class=\"hljs-string\">'https://github.com/serde-rs/serde.git'</span> }\n<span class=\"hljs-attr\">serde2</span> = { git = <span class=\"hljs-string\">'https://github.com/example/serde.git'</span>, package = <span class=\"hljs-string\">'serde'</span>, branch = <span class=\"hljs-string\">'v2'</span> }\n</code></pre>\n<p>The first <code class=\"hljs\">serde = ...</code> directive indicates that serde <code class=\"hljs\">1.*</code> should be used\nfrom the git repository (pulling in the bugfix we need) and the second <code class=\"hljs\">serde2 = ...</code> directive indicates that the <code class=\"hljs\">serde</code> package should also be pulled from\nthe <code class=\"hljs\">v2</code> branch of <code class=\"hljs\">https://github.com/example/serde</code>. We’re assuming here\nthat <code class=\"hljs\">Cargo.toml</code> on that branch mentions version <code class=\"hljs\">2.0.0</code>.</p>\n<p>Note that when using the <code class=\"hljs\">package</code> key the <code class=\"hljs\">serde2</code> identifier here is actually\nignored. We simply need a unique name which doesn’t conflict with other patched\ncrates.</p>\n<h2 id=\"the-patch-section\"><a class=\"header\" href=\"#the-patch-section\">The <code>[patch]</code> section</a></h2>\n<p>The <code class=\"hljs\">[patch]</code> section of <code class=\"hljs\">Cargo.toml</code> can be used to override dependencies\nwith other copies. The syntax is similar to the\n<a href=\"reference/specifying-dependencies.html\"><code class=\"hljs\">[dependencies]</code></a> section:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[patch.crates-io]</span>\n<span class=\"hljs-attr\">foo</span> = { git = <span class=\"hljs-string\">'https://github.com/example/foo.git'</span> }\n<span class=\"hljs-attr\">bar</span> = { path = <span class=\"hljs-string\">'my/local/bar'</span> }\n\n<span class=\"hljs-section\">[dependencies.baz]</span>\n<span class=\"hljs-attr\">git</span> = <span class=\"hljs-string\">'https://github.com/example/baz.git'</span>\n\n<span class=\"hljs-section\">[patch.'https://github.com/example/baz']</span>\n<span class=\"hljs-attr\">baz</span> = { git = <span class=\"hljs-string\">'https://github.com/example/patched-baz.git'</span>, branch = <span class=\"hljs-string\">'my-branch'</span> }\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: The <code class=\"hljs\">[patch]</code> table can also be specified as a <a href=\"reference/config.html\">configuration\noption</a>, such as in a <code class=\"hljs\">.cargo/config.toml</code> file or a CLI option\nlike <code class=\"hljs\">--config 'patch.crates-io.rand.path=\"rand\"'</code>. This can be useful for\nlocal-only changes that you don’t want to commit, or temporarily testing a\npatch.</p>\n</blockquote>\n<p>The <code class=\"hljs\">[patch]</code> table is made of dependency-like sub-tables. Each key after\n<code class=\"hljs\">[patch]</code> is a URL of the source that is being patched, or the name of a\nregistry. The name <code class=\"hljs\">crates-io</code> may be used to override the default registry\n<a href=\"https://crates.io/\">crates.io</a>. The first <code class=\"hljs\">[patch]</code> in the example above demonstrates overriding\n<a href=\"https://crates.io/\">crates.io</a>, and the second <code class=\"hljs\">[patch]</code> demonstrates overriding a git source.</p>\n<p>Each entry in these tables is a normal dependency specification, the same as\nfound in the <code class=\"hljs\">[dependencies]</code> section of the manifest. The dependencies listed\nin the <code class=\"hljs\">[patch]</code> section are resolved and used to patch the source at the\nURL specified. The above manifest snippet patches the <code class=\"hljs\">crates-io</code> source (e.g.\ncrates.io itself) with the <code class=\"hljs\">foo</code> crate and <code class=\"hljs\">bar</code> crate. It also\npatches the <code class=\"hljs\">https://github.com/example/baz</code> source with a <code class=\"hljs\">my-branch</code> that\ncomes from elsewhere.</p>\n<p>Sources can be patched with versions of crates that do not exist, and they can\nalso be patched with versions of crates that already exist. If a source is\npatched with a crate version that already exists in the source, then the\nsource’s original crate is replaced.</p>\n<p>Cargo only looks at the patch settings in the <code class=\"hljs\">Cargo.toml</code> manifest at the\nroot of the workspace. Patch settings defined in dependencies will be\nignored.</p>\n<h2 id=\"the-replace-section\"><a class=\"header\" href=\"#the-replace-section\">The <code>[replace]</code> section</a></h2>\n<blockquote>\n<p><strong>Note</strong>: <code class=\"hljs\">[replace]</code> is deprecated. You should use the\n<a href=\"reference/overriding-dependencies.html#the-patch-section\"><code class=\"hljs\">[patch]</code></a> table instead.</p>\n</blockquote>\n<p>This section of Cargo.toml can be used to override dependencies with other\ncopies. The syntax is similar to the <code class=\"hljs\">[dependencies]</code> section:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[replace]</span>\n<span class=\"hljs-attr\">\"foo:0.1.0\"</span> = { git = <span class=\"hljs-string\">'https://github.com/example/foo.git'</span> }\n<span class=\"hljs-attr\">\"bar:1.0.2\"</span> = { path = <span class=\"hljs-string\">'my/local/bar'</span> }\n</code></pre>\n<p>Each key in the <code class=\"hljs\">[replace]</code> table is a <a href=\"reference/pkgid-spec.html\">package ID\nspecification</a>, which allows arbitrarily choosing a node in the\ndependency graph to override (the 3-part version number is required). The\nvalue of each key is the same as the <code class=\"hljs\">[dependencies]</code> syntax for specifying\ndependencies, except that you can’t specify features. Note that when a crate\nis overridden the copy it’s overridden with must have both the same name and\nversion, but it can come from a different source (e.g., git or a local path).</p>\n<p>Cargo only looks at the replace settings in the <code class=\"hljs\">Cargo.toml</code> manifest at the\nroot of the workspace. Replace settings defined in dependencies will be\nignored.</p>\n<h2 id=\"paths-overrides\"><a class=\"header\" href=\"#paths-overrides\"><code>paths</code> overrides</a></h2>\n<p>Sometimes you’re only temporarily working on a crate and you don’t want to have\nto modify <code class=\"hljs\">Cargo.toml</code> like with the <code class=\"hljs\">[patch]</code> section above. For this use\ncase Cargo offers a much more limited version of overrides called <strong>path\noverrides</strong>.</p>\n<p>Path overrides are specified through <a href=\"reference/config.html\"><code class=\"hljs\">.cargo/config.toml</code></a> instead of\n<code class=\"hljs\">Cargo.toml</code>. Inside of <code class=\"hljs\">.cargo/config.toml</code> you’ll specify a key called <code class=\"hljs\">paths</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">paths</span> = [<span class=\"hljs-string\">\"/path/to/uuid\"</span>]\n</code></pre>\n<p>This array should be filled with directories that contain a <code class=\"hljs\">Cargo.toml</code>. In\nthis instance, we’re just adding <code class=\"hljs\">uuid</code>, so it will be the only one that’s\noverridden. This path can be either absolute or relative to the directory that\ncontains the <code class=\"hljs\">.cargo</code> folder.</p>\n<p>Path overrides are more restricted than the <code class=\"hljs\">[patch]</code> section, however, in\nthat they cannot change the structure of the dependency graph. When a\npath replacement is used then the previous set of dependencies\nmust all match exactly to the new <code class=\"hljs\">Cargo.toml</code> specification. For example this\nmeans that path overrides cannot be used to test out adding a dependency to a\ncrate, instead <code class=\"hljs\">[patch]</code> must be used in that situation. As a result usage of a\npath override is typically isolated to quick bug fixes rather than larger\nchanges.</p>\n<blockquote>\n<p><strong>Note</strong>: using a local configuration to override paths will only work for\ncrates that have been published to <a href=\"https://crates.io/\">crates.io</a>. You cannot use this feature\nto tell Cargo how to find local unpublished crates.</p>\n</blockquote>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"the-manifest-format\"><a class=\"header\" href=\"#the-manifest-format\">The Manifest Format</a></h1>\n<p>The <code class=\"hljs\">Cargo.toml</code> file for each package is called its <em>manifest</em>. It is written\nin the <a href=\"https://toml.io/\">TOML</a> format. It contains metadata that is needed to compile the package. Checkout\nthe <code class=\"hljs\">cargo locate-project</code> section for more detail on how cargo finds the manifest file.</p>\n<p>Every manifest file consists of the following sections:</p>\n<ul>\n<li><a href=\"reference/unstable.html\"><code class=\"hljs\">cargo-features</code></a> — Unstable, nightly-only features.</li>\n<li><a href=\"reference/manifest.html#the-package-section\"><code class=\"hljs\">[package]</code></a> — Defines a package.\n<ul>\n<li><a href=\"reference/manifest.html#the-name-field\"><code class=\"hljs\">name</code></a> — The name of the package.</li>\n<li><a href=\"reference/manifest.html#the-version-field\"><code class=\"hljs\">version</code></a> — The version of the package.</li>\n<li><a href=\"reference/manifest.html#the-authors-field\"><code class=\"hljs\">authors</code></a> — The authors of the package.</li>\n<li><a href=\"reference/manifest.html#the-edition-field\"><code class=\"hljs\">edition</code></a> — The Rust edition.</li>\n<li><a href=\"reference/manifest.html#the-rust-version-field\"><code class=\"hljs\">rust-version</code></a> — The minimal supported Rust version.</li>\n<li><a href=\"reference/manifest.html#the-description-field\"><code class=\"hljs\">description</code></a> — A description of the package.</li>\n<li><a href=\"reference/manifest.html#the-documentation-field\"><code class=\"hljs\">documentation</code></a> — URL of the package documentation.</li>\n<li><a href=\"reference/manifest.html#the-readme-field\"><code class=\"hljs\">readme</code></a> — Path to the package’s README file.</li>\n<li><a href=\"reference/manifest.html#the-homepage-field\"><code class=\"hljs\">homepage</code></a> — URL of the package homepage.</li>\n<li><a href=\"reference/manifest.html#the-repository-field\"><code class=\"hljs\">repository</code></a> — URL of the package source repository.</li>\n<li><a href=\"reference/manifest.html#the-license-and-license-file-fields\"><code class=\"hljs\">license</code></a> — The package license.</li>\n<li><a href=\"reference/manifest.html#the-license-and-license-file-fields\"><code class=\"hljs\">license-file</code></a> — Path to the text of the license.</li>\n<li><a href=\"reference/manifest.html#the-keywords-field\"><code class=\"hljs\">keywords</code></a> — Keywords for the package.</li>\n<li><a href=\"reference/manifest.html#the-categories-field\"><code class=\"hljs\">categories</code></a> — Categories of the package.</li>\n<li><a href=\"reference/manifest.html#the-workspace-field\"><code class=\"hljs\">workspace</code></a> — Path to the workspace for the package.</li>\n<li><a href=\"reference/manifest.html#the-build-field\"><code class=\"hljs\">build</code></a> — Path to the package build script.</li>\n<li><a href=\"reference/manifest.html#the-links-field\"><code class=\"hljs\">links</code></a> — Name of the native library the package links with.</li>\n<li><a href=\"reference/manifest.html#the-exclude-and-include-fields\"><code class=\"hljs\">exclude</code></a> — Files to exclude when publishing.</li>\n<li><a href=\"reference/manifest.html#the-exclude-and-include-fields\"><code class=\"hljs\">include</code></a> — Files to include when publishing.</li>\n<li><a href=\"reference/manifest.html#the-publish-field\"><code class=\"hljs\">publish</code></a> — Can be used to prevent publishing the package.</li>\n<li><a href=\"reference/manifest.html#the-metadata-table\"><code class=\"hljs\">metadata</code></a> — Extra settings for external tools.</li>\n<li><a href=\"reference/manifest.html#the-default-run-field\"><code class=\"hljs\">default-run</code></a> — The default binary to run by <a href=\"reference/../commands/cargo-run.html\"><code class=\"hljs\">cargo run</code></a>.</li>\n<li><a href=\"reference/cargo-targets.html#target-auto-discovery\"><code class=\"hljs\">autobins</code></a> — Disables binary auto discovery.</li>\n<li><a href=\"reference/cargo-targets.html#target-auto-discovery\"><code class=\"hljs\">autoexamples</code></a> — Disables example auto discovery.</li>\n<li><a href=\"reference/cargo-targets.html#target-auto-discovery\"><code class=\"hljs\">autotests</code></a> — Disables test auto discovery.</li>\n<li><a href=\"reference/cargo-targets.html#target-auto-discovery\"><code class=\"hljs\">autobenches</code></a> — Disables bench auto discovery.</li>\n<li><a href=\"reference/resolver.html#resolver-versions\"><code class=\"hljs\">resolver</code></a> — Sets the dependency resolver to use.</li>\n</ul>\n</li>\n<li>Target tables: (see <a href=\"reference/cargo-targets.html#configuring-a-target\">configuration</a> for settings)\n<ul>\n<li><a href=\"reference/cargo-targets.html#library\"><code class=\"hljs\">[lib]</code></a> — Library target settings.</li>\n<li><a href=\"reference/cargo-targets.html#binaries\"><code class=\"hljs\">[[bin]]</code></a> — Binary target settings.</li>\n<li><a href=\"reference/cargo-targets.html#examples\"><code class=\"hljs\">[[example]]</code></a> — Example target settings.</li>\n<li><a href=\"reference/cargo-targets.html#tests\"><code class=\"hljs\">[[test]]</code></a> — Test target settings.</li>\n<li><a href=\"reference/cargo-targets.html#benchmarks\"><code class=\"hljs\">[[bench]]</code></a> — Benchmark target settings.</li>\n</ul>\n</li>\n<li>Dependency tables:\n<ul>\n<li><a href=\"reference/specifying-dependencies.html\"><code class=\"hljs\">[dependencies]</code></a> — Package library dependencies.</li>\n<li><a href=\"reference/specifying-dependencies.html#development-dependencies\"><code class=\"hljs\">[dev-dependencies]</code></a> — Dependencies for examples, tests, and benchmarks.</li>\n<li><a href=\"reference/specifying-dependencies.html#build-dependencies\"><code class=\"hljs\">[build-dependencies]</code></a> — Dependencies for build scripts.</li>\n<li><a href=\"reference/specifying-dependencies.html#platform-specific-dependencies\"><code class=\"hljs\">[target]</code></a> — Platform-specific dependencies.</li>\n</ul>\n</li>\n<li><a href=\"reference/manifest.html#the-badges-section\"><code class=\"hljs\">[badges]</code></a> — Badges to display on a registry.</li>\n<li><a href=\"reference/features.html\"><code class=\"hljs\">[features]</code></a> — Conditional compilation features.</li>\n<li><a href=\"reference/manifest.html#the-lints-section\"><code class=\"hljs\">[lints]</code></a> — Configure linters for this package.</li>\n<li><a href=\"reference/overriding-dependencies.html#the-patch-section\"><code class=\"hljs\">[patch]</code></a> — Override dependencies.</li>\n<li><a href=\"reference/overriding-dependencies.html#the-replace-section\"><code class=\"hljs\">[replace]</code></a> — Override dependencies (deprecated).</li>\n<li><a href=\"reference/profiles.html\"><code class=\"hljs\">[profile]</code></a> — Compiler settings and optimizations.</li>\n<li><a href=\"reference/workspaces.html\"><code class=\"hljs\">[workspace]</code></a> — The workspace definition.</li>\n</ul>\n<h2 id=\"the-package-section\"><a class=\"header\" href=\"#the-package-section\">The <code>[package]</code> section</a></h2>\n<p>The first section in a <code class=\"hljs\">Cargo.toml</code> is <code class=\"hljs\">[package]</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"hello_world\"</span> <span class=\"hljs-comment\"># the name of the package</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>    <span class=\"hljs-comment\"># the current version, obeying semver</span>\n<span class=\"hljs-attr\">authors</span> = [<span class=\"hljs-string\">\"Alice &lt;a@example.com&gt;\"</span>, <span class=\"hljs-string\">\"Bob &lt;b@example.com&gt;\"</span>]\n</code></pre>\n<p>The only field required by Cargo is <a href=\"reference/manifest.html#the-name-field\"><code class=\"hljs\">name</code></a>. If publishing to\na registry, the registry may require additional fields. See the notes below and\n<a href=\"reference/publishing.html\">the publishing chapter</a> for requirements for publishing to\n<a href=\"https://crates.io/\">crates.io</a>.</p>\n<h3 id=\"the-name-field\"><a class=\"header\" href=\"#the-name-field\">The <code>name</code> field</a></h3>\n<p>The package name is an identifier used to refer to the package. It is used\nwhen listed as a dependency in another package, and as the default name of\ninferred lib and bin targets.</p>\n<p>The name must use only <a href=\"reference/../../std/primitive.char.html#method.is_alphanumeric\">alphanumeric</a> characters or <code class=\"hljs\">-</code> or <code class=\"hljs\">_</code>, and cannot be empty.</p>\n<p>Note that <a href=\"reference/../commands/cargo-new.html\"><code class=\"hljs\">cargo new</code></a> and <a href=\"reference/../commands/cargo-init.html\"><code class=\"hljs\">cargo init</code></a> impose some additional restrictions on\nthe package name, such as enforcing that it is a valid Rust identifier and not\na keyword. <a href=\"https://crates.io/\">crates.io</a> imposes even more restrictions, such as:</p>\n<ul>\n<li>Only ASCII characters are allowed.</li>\n<li>Do not use reserved names.</li>\n<li>Do not use special Windows names such as “nul”.</li>\n<li>Use a maximum of 64 characters of length.</li>\n</ul>\n<h3 id=\"the-version-field\"><a class=\"header\" href=\"#the-version-field\">The <code>version</code> field</a></h3>\n<p>Cargo bakes in the concept of <a href=\"https://semver.org/\">Semantic\nVersioning</a>, so make sure you follow some basic rules:</p>\n<ul>\n<li>Before you reach 1.0.0, anything goes, but if you make breaking changes,\nincrement the minor version. In Rust, breaking changes include adding fields to\nstructs or variants to enums.</li>\n<li>After 1.0.0, only make breaking changes when you increment the major version.\nDon’t break the build.</li>\n<li>After 1.0.0, don’t add any new public API (no new <code class=\"hljs\">pub</code> anything) in patch-level\nversions. Always increment the minor version if you add any new <code class=\"hljs\">pub</code> structs,\ntraits, fields, types, functions, methods or anything else.</li>\n<li>Use version numbers with three numeric parts such as 1.0.0 rather than 1.0.</li>\n</ul>\n<p>See the <a href=\"reference/resolver.html\">Resolver</a> chapter for more information on how Cargo uses versions to\nresolve dependencies, and for guidelines on setting your own version. See the\n<a href=\"reference/semver.html\">SemVer compatibility</a> chapter for more details on exactly what constitutes a\nbreaking change.</p>\n<p>This field is optional and defaults to <code class=\"hljs\">0.0.0</code>.  The field is required for publishing packages.</p>\n<h3 id=\"the-authors-field\"><a class=\"header\" href=\"#the-authors-field\">The <code>authors</code> field</a></h3>\n<p>The optional <code class=\"hljs\">authors</code> field lists in an array the people or organizations that are considered\nthe “authors” of the package. The exact meaning is open to interpretation — it\nmay list the original or primary authors, current maintainers, or owners of the\npackage. An optional email address may be included within angled brackets at\nthe end of each author entry.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">authors</span> = [<span class=\"hljs-string\">\"Graydon Hoare\"</span>, <span class=\"hljs-string\">\"Fnu Lnu &lt;no-reply@rust-lang.org&gt;\"</span>]\n</code></pre>\n<p>This field is only surfaced in package metadata and in the <code class=\"hljs\">CARGO_PKG_AUTHORS</code>\nenvironment variable within <code class=\"hljs\">build.rs</code>. It is not displayed in the <a href=\"https://crates.io/\">crates.io</a>\nuser interface.</p>\n<blockquote>\n<p><strong>Warning</strong>: Package manifests cannot be changed once published, so this\nfield cannot be changed or removed in already-published versions of a\npackage.</p>\n</blockquote>\n<h3 id=\"the-edition-field\"><a class=\"header\" href=\"#the-edition-field\">The <code>edition</code> field</a></h3>\n<p>The <code class=\"hljs\">edition</code> key is an optional key that affects which <a href=\"reference/../../edition-guide/index.html\">Rust Edition</a> your package\nis compiled with. Setting the <code class=\"hljs\">edition</code> key in <code class=\"hljs\">[package]</code> will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">'2021'</span>\n</code></pre>\n<p>Most manifests have the <code class=\"hljs\">edition</code> field filled in automatically by <a href=\"reference/../commands/cargo-new.html\"><code class=\"hljs\">cargo new</code></a>\nwith the latest stable edition. By default <code class=\"hljs\">cargo new</code> creates a manifest with\nthe 2021 edition currently.</p>\n<p>If the <code class=\"hljs\">edition</code> field is not present in <code class=\"hljs\">Cargo.toml</code>, then the 2015 edition is\nassumed for backwards compatibility. Note that all manifests\ncreated with <a href=\"reference/../commands/cargo-new.html\"><code class=\"hljs\">cargo new</code></a> will not use this historical fallback because they\nwill have <code class=\"hljs\">edition</code> explicitly specified to a newer value.</p>\n<h3 id=\"the-rust-version-field\"><a class=\"header\" href=\"#the-rust-version-field\">The <code>rust-version</code> field</a></h3>\n<p>The <code class=\"hljs\">rust-version</code> field is an optional key that tells cargo what version of the\nRust language and compiler your package can be compiled with. If the currently\nselected version of the Rust compiler is older than the stated version, cargo\nwill exit with an error, telling the user what version is required.</p>\n<p>The first version of Cargo that supports this field was released with Rust 1.56.0.\nIn older releases, the field will be ignored, and Cargo will display a warning.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">rust-version</span> = <span class=\"hljs-string\">\"1.56\"</span>\n</code></pre>\n<p>The Rust version must be a bare version number with two or three components; it\ncannot include semver operators or pre-release identifiers. Compiler pre-release\nidentifiers such as -nightly will be ignored while checking the Rust version.\nThe <code class=\"hljs\">rust-version</code> must be equal to or newer than the version that first\nintroduced the configured <code class=\"hljs\">edition</code>.</p>\n<p>The <code class=\"hljs\">rust-version</code> may be ignored using the <code class=\"hljs\">--ignore-rust-version</code> option.</p>\n<p>Setting the <code class=\"hljs\">rust-version</code> key in <code class=\"hljs\">[package]</code> will affect all targets/crates in\nthe package, including test suites, benchmarks, binaries, examples, etc.</p>\n<p>To find the minimum <code class=\"hljs\">rust-version</code> compatible with your project, you can use third-party tools like <a href=\"https://crates.io/crates/cargo-msrv\"><code class=\"hljs\">cargo-msrv</code></a>.</p>\n<p>When used on packages that get published, we recommend <a href=\"reference/../guide/continuous-integration.html#verifying-rust-version\">verifying the <code class=\"hljs\">rust-version</code></a>.</p>\n<h3 id=\"the-description-field\"><a class=\"header\" href=\"#the-description-field\">The <code>description</code> field</a></h3>\n<p>The description is a short blurb about the package. <a href=\"https://crates.io/\">crates.io</a> will display\nthis with your package. This should be plain text (not Markdown).</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">description</span> = <span class=\"hljs-string\">\"A short description of my package\"</span>\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> requires the <code class=\"hljs\">description</code> to be set.</p>\n</blockquote>\n<h3 id=\"the-documentation-field\"><a class=\"header\" href=\"#the-documentation-field\">The <code>documentation</code> field</a></h3>\n<p>The <code class=\"hljs\">documentation</code> field specifies a URL to a website hosting the crate’s\ndocumentation. If no URL is specified in the manifest file, <a href=\"https://crates.io/\">crates.io</a> will\nautomatically link your crate to the corresponding <a href=\"https://docs.rs/\">docs.rs</a> page when the\ndocumentation has been built and is available (see <a href=\"https://docs.rs/releases/queue\">docs.rs queue</a>).</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">documentation</span> = <span class=\"hljs-string\">\"https://docs.rs/bitflags\"</span>\n</code></pre>\n<h3 id=\"the-readme-field\"><a class=\"header\" href=\"#the-readme-field\">The <code>readme</code> field</a></h3>\n<p>The <code class=\"hljs\">readme</code> field should be the path to a file in the package root (relative\nto this <code class=\"hljs\">Cargo.toml</code>) that contains general information about the package.\nThis file will be transferred to the registry when you publish. <a href=\"https://crates.io/\">crates.io</a>\nwill interpret it as Markdown and render it on the crate’s page.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">readme</span> = <span class=\"hljs-string\">\"README.md\"</span>\n</code></pre>\n<p>If no value is specified for this field, and a file named <code class=\"hljs\">README.md</code>,\n<code class=\"hljs\">README.txt</code> or <code class=\"hljs\">README</code> exists in the package root, then the name of that\nfile will be used. You can suppress this behavior by setting this field to\n<code class=\"hljs\">false</code>. If the field is set to <code class=\"hljs\">true</code>, a default value of <code class=\"hljs\">README.md</code> will\nbe assumed.</p>\n<h3 id=\"the-homepage-field\"><a class=\"header\" href=\"#the-homepage-field\">The <code>homepage</code> field</a></h3>\n<p>The <code class=\"hljs\">homepage</code> field should be a URL to a site that is the home page for your\npackage.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">homepage</span> = <span class=\"hljs-string\">\"https://serde.rs\"</span>\n</code></pre>\n<p>A value should only be set for <code class=\"hljs\">homepage</code> if there is a dedicated website for\nthe crate other than the source repository or API documentation. Do not make\n<code class=\"hljs\">homepage</code> redundant with either the <code class=\"hljs\">documentation</code> or <code class=\"hljs\">repository</code> values.</p>\n<h3 id=\"the-repository-field\"><a class=\"header\" href=\"#the-repository-field\">The <code>repository</code> field</a></h3>\n<p>The <code class=\"hljs\">repository</code> field should be a URL to the source repository for your\npackage.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">repository</span> = <span class=\"hljs-string\">\"https://github.com/rust-lang/cargo\"</span>\n</code></pre>\n<h3 id=\"the-license-and-license-file-fields\"><a class=\"header\" href=\"#the-license-and-license-file-fields\">The <code>license</code> and <code>license-file</code> fields</a></h3>\n<p>The <code class=\"hljs\">license</code> field contains the name of the software license that the package\nis released under. The <code class=\"hljs\">license-file</code> field contains the path to a file\ncontaining the text of the license (relative to this <code class=\"hljs\">Cargo.toml</code>).</p>\n<p><a href=\"https://crates.io/\">crates.io</a> interprets the <code class=\"hljs\">license</code> field as an <a href=\"https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions/\">SPDX 2.3 license\nexpression</a>. The name must be a known license\nfrom the <a href=\"https://github.com/spdx/license-list-data/tree/v3.20\">SPDX license list 3.20</a>. See the <a href=\"https://spdx.org\">SPDX site</a>\nfor more information.</p>\n<p>SPDX license expressions support AND and OR operators to combine multiple\nlicenses.<sup class=\"footnote-reference\"><a href=\"#slash\">1</a></sup></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">license</span> = <span class=\"hljs-string\">\"MIT OR Apache-2.0\"</span>\n</code></pre>\n<p>Using <code class=\"hljs\">OR</code> indicates the user may choose either license. Using <code class=\"hljs\">AND</code> indicates\nthe user must comply with both licenses simultaneously. The <code class=\"hljs\">WITH</code> operator\nindicates a license with a special exception. Some examples:</p>\n<ul>\n<li><code class=\"hljs\">MIT OR Apache-2.0</code></li>\n<li><code class=\"hljs\">LGPL-2.1-only AND MIT AND BSD-2-Clause</code></li>\n<li><code class=\"hljs\">GPL-2.0-or-later WITH Bison-exception-2.2</code></li>\n</ul>\n<p>If a package is using a nonstandard license, then the <code class=\"hljs\">license-file</code> field may\nbe specified in lieu of the <code class=\"hljs\">license</code> field.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">license-file</span> = <span class=\"hljs-string\">\"LICENSE.txt\"</span>\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> requires either <code class=\"hljs\">license</code> or <code class=\"hljs\">license-file</code> to be set.</p>\n</blockquote>\n<div class=\"footnote-definition\" id=\"slash\"><sup class=\"footnote-definition-label\">1</sup>\n<p>Previously multiple licenses could be separated with a <code class=\"hljs\">/</code>, but that\nusage is deprecated.</p>\n</div>\n<h3 id=\"the-keywords-field\"><a class=\"header\" href=\"#the-keywords-field\">The <code>keywords</code> field</a></h3>\n<p>The <code class=\"hljs\">keywords</code> field is an array of strings that describe this package. This\ncan help when searching for the package on a registry, and you may choose any\nwords that would help someone find this crate.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">keywords</span> = [<span class=\"hljs-string\">\"gamedev\"</span>, <span class=\"hljs-string\">\"graphics\"</span>]\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> allows a maximum of 5 keywords. Each keyword must be\nASCII text, have at most 20 characters, start with an alphanumeric character,\nand only contain letters, numbers, <code class=\"hljs\">_</code>, <code class=\"hljs\">-</code> or <code class=\"hljs\">+</code>.</p>\n</blockquote>\n<h3 id=\"the-categories-field\"><a class=\"header\" href=\"#the-categories-field\">The <code>categories</code> field</a></h3>\n<p>The <code class=\"hljs\">categories</code> field is an array of strings of the categories this package\nbelongs to.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">categories</span> = [<span class=\"hljs-string\">\"command-line-utilities\"</span>, <span class=\"hljs-string\">\"development-tools::cargo-plugins\"</span>]\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> has a maximum of 5 categories. Each category should\nmatch one of the strings available at <a href=\"https://crates.io/category_slugs\">https://crates.io/category_slugs</a>, and\nmust match exactly.</p>\n</blockquote>\n<h3 id=\"the-workspace-field\"><a class=\"header\" href=\"#the-workspace-field\">The <code>workspace</code> field</a></h3>\n<p>The <code class=\"hljs\">workspace</code> field can be used to configure the workspace that this package\nwill be a member of. If not specified this will be inferred as the first\nCargo.toml with <code class=\"hljs\">[workspace]</code> upwards in the filesystem. Setting this is\nuseful if the member is not inside a subdirectory of the workspace root.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">workspace</span> = <span class=\"hljs-string\">\"path/to/workspace/root\"</span>\n</code></pre>\n<p>This field cannot be specified if the manifest already has a <code class=\"hljs\">[workspace]</code>\ntable defined. That is, a crate cannot both be a root crate in a workspace\n(contain <code class=\"hljs\">[workspace]</code>) and also be a member crate of another workspace\n(contain <code class=\"hljs\">package.workspace</code>).</p>\n<p>For more information, see the <a href=\"reference/workspaces.html\">workspaces chapter</a>.</p>\n<h3 id=\"the-build-field\"><a class=\"header\" href=\"#the-build-field\">The <code>build</code> field</a></h3>\n<p>The <code class=\"hljs\">build</code> field specifies a file in the package root which is a <a href=\"reference/build-scripts.html\">build\nscript</a> for building native code. More information can be found in the <a href=\"reference/build-scripts.html\">build\nscript guide</a>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">build</span> = <span class=\"hljs-string\">\"build.rs\"</span>\n</code></pre>\n<p>The default is <code class=\"hljs\">\"build.rs\"</code>, which loads the script from a file named\n<code class=\"hljs\">build.rs</code> in the root of the package. Use <code class=\"hljs\">build = \"custom_build_name.rs\"</code> to\nspecify a path to a different file or <code class=\"hljs\">build = false</code> to disable automatic\ndetection of the build script.</p>\n<h3 id=\"the-links-field\"><a class=\"header\" href=\"#the-links-field\">The <code>links</code> field</a></h3>\n<p>The <code class=\"hljs\">links</code> field specifies the name of a native library that is being linked\nto. More information can be found in the <a href=\"reference/build-scripts.html#the-links-manifest-key\"><code class=\"hljs\">links</code></a> section of the build\nscript guide.</p>\n<p>For example, a crate that links a native library called “git2” (e.g. <code class=\"hljs\">libgit2.a</code>\non Linux) may specify:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">links</span> = <span class=\"hljs-string\">\"git2\"</span>\n</code></pre>\n<h3 id=\"the-exclude-and-include-fields\"><a class=\"header\" href=\"#the-exclude-and-include-fields\">The <code>exclude</code> and <code>include</code> fields</a></h3>\n<p>The <code class=\"hljs\">exclude</code> and <code class=\"hljs\">include</code> fields can be used to explicitly specify which\nfiles are included when packaging a project to be <a href=\"reference/publishing.html\">published</a>,\nand certain kinds of change tracking (described below).\nThe patterns specified in the <code class=\"hljs\">exclude</code> field identify a set of files that are\nnot included, and the patterns in <code class=\"hljs\">include</code> specify files that are explicitly\nincluded.\nYou may run <a href=\"reference/../commands/cargo-package.html\"><code class=\"hljs\">cargo package --list</code></a> to verify which files will\nbe included in the package.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">exclude</span> = [<span class=\"hljs-string\">\"/ci\"</span>, <span class=\"hljs-string\">\"images/\"</span>, <span class=\"hljs-string\">\".*\"</span>]\n</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">include</span> = [<span class=\"hljs-string\">\"/src\"</span>, <span class=\"hljs-string\">\"COPYRIGHT\"</span>, <span class=\"hljs-string\">\"/examples\"</span>, <span class=\"hljs-string\">\"!/examples/big_example\"</span>]\n</code></pre>\n<p>The default if neither field is specified is to include all files from the\nroot of the package, except for the exclusions listed below.</p>\n<p>If <code class=\"hljs\">include</code> is not specified, then the following files will be excluded:</p>\n<ul>\n<li>If the package is not in a git repository, all “hidden” files starting with\na dot will be skipped.</li>\n<li>If the package is in a git repository, any files that are ignored by the\n<a href=\"https://git-scm.com/docs/gitignore\">gitignore</a> rules of the repository and global git configuration will be\nskipped.</li>\n</ul>\n<p>Regardless of whether <code class=\"hljs\">exclude</code> or <code class=\"hljs\">include</code> is specified, the following files\nare always excluded:</p>\n<ul>\n<li>Any sub-packages will be skipped (any subdirectory that contains a\n<code class=\"hljs\">Cargo.toml</code> file).</li>\n<li>A directory named <code class=\"hljs\">target</code> in the root of the package will be skipped.</li>\n</ul>\n<p>The following files are always included:</p>\n<ul>\n<li>The <code class=\"hljs\">Cargo.toml</code> file of the package itself is always included, it does not\nneed to be listed in <code class=\"hljs\">include</code>.</li>\n<li>A minimized <code class=\"hljs\">Cargo.lock</code> is automatically included if the package contains a\nbinary or example target, see <a href=\"reference/../commands/cargo-package.html\"><code class=\"hljs\">cargo package</code></a> for more information.</li>\n<li>If a <a href=\"reference/manifest.html#the-license-and-license-file-fields\"><code class=\"hljs\">license-file</code></a> is specified, it\nis always included.</li>\n</ul>\n<p>The options are mutually exclusive; setting <code class=\"hljs\">include</code> will override an\n<code class=\"hljs\">exclude</code>. If you need to have exclusions to a set of <code class=\"hljs\">include</code> files, use the\n<code class=\"hljs\">!</code> operator described below.</p>\n<p>The patterns should be <a href=\"https://git-scm.com/docs/gitignore\">gitignore</a>-style patterns. Briefly:</p>\n<ul>\n<li><code class=\"hljs\">foo</code> matches any file or directory with the name <code class=\"hljs\">foo</code> anywhere in the\npackage. This is equivalent to the pattern <code class=\"hljs\">**/foo</code>.</li>\n<li><code class=\"hljs\">/foo</code> matches any file or directory with the name <code class=\"hljs\">foo</code> only in the root of\nthe package.</li>\n<li><code class=\"hljs\">foo/</code> matches any <em>directory</em> with the name <code class=\"hljs\">foo</code> anywhere in the package.</li>\n<li>Common glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code>, and <code class=\"hljs\">[]</code> are supported:\n<ul>\n<li><code class=\"hljs\">*</code> matches zero or more characters except <code class=\"hljs\">/</code>.  For example, <code class=\"hljs\">*.html</code>\nmatches any file or directory with the <code class=\"hljs\">.html</code> extension anywhere in the\npackage.</li>\n<li><code class=\"hljs\">?</code> matches any character except <code class=\"hljs\">/</code>. For example, <code class=\"hljs\">foo?</code> matches <code class=\"hljs\">food</code>,\nbut not <code class=\"hljs\">foo</code>.</li>\n<li><code class=\"hljs\">[]</code> allows for matching a range of characters. For example, <code class=\"hljs\">[ab]</code>\nmatches either <code class=\"hljs\">a</code> or <code class=\"hljs\">b</code>. <code class=\"hljs\">[a-z]</code> matches letters a through z.</li>\n</ul>\n</li>\n<li><code class=\"hljs\">**/</code> prefix matches in any directory. For example, <code class=\"hljs\">**/foo/bar</code> matches the\nfile or directory <code class=\"hljs\">bar</code> anywhere that is directly under directory <code class=\"hljs\">foo</code>.</li>\n<li><code class=\"hljs\">/**</code> suffix matches everything inside. For example, <code class=\"hljs\">foo/**</code> matches all\nfiles inside directory <code class=\"hljs\">foo</code>, including all files in subdirectories below\n<code class=\"hljs\">foo</code>.</li>\n<li><code class=\"hljs\">/**/</code> matches zero or more directories. For example, <code class=\"hljs\">a/**/b</code> matches\n<code class=\"hljs\">a/b</code>, <code class=\"hljs\">a/x/b</code>, <code class=\"hljs\">a/x/y/b</code>, and so on.</li>\n<li><code class=\"hljs\">!</code> prefix negates a pattern. For example, a pattern of <code class=\"hljs\">src/*.rs</code> and\n<code class=\"hljs\">!foo.rs</code> would match all files with the <code class=\"hljs\">.rs</code> extension inside the <code class=\"hljs\">src</code>\ndirectory, except for any file named <code class=\"hljs\">foo.rs</code>.</li>\n</ul>\n<p>The include/exclude list is also used for change tracking in some situations.\nFor targets built with <code class=\"hljs\">rustdoc</code>, it is used to determine the list of files to\ntrack to determine if the target should be rebuilt. If the package has a\n<a href=\"reference/build-scripts.html\">build script</a> that does not emit any <code class=\"hljs\">rerun-if-*</code> directives, then the\ninclude/exclude list is used for tracking if the build script should be re-run\nif any of those files change.</p>\n<h3 id=\"the-publish-field\"><a class=\"header\" href=\"#the-publish-field\">The <code>publish</code> field</a></h3>\n<p>The <code class=\"hljs\">publish</code> field can be used to control which registries names the package\nmay be published to:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">publish</span> = [<span class=\"hljs-string\">\"some-registry-name\"</span>]\n</code></pre>\n<p>To prevent a package from being published to a registry (like crates.io) by mistake,\nfor instance to keep a package private in a company,\nyou can omit the <a href=\"reference/manifest.html#the-version-field\"><code class=\"hljs\">version</code></a> field.\nIf you’d like to be more explicit, you can disable publishing:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">publish</span> = <span class=\"hljs-literal\">false</span>\n</code></pre>\n<p>If publish array contains a single registry, <code class=\"hljs\">cargo publish</code> command will use\nit when <code class=\"hljs\">--registry</code> flag is not specified.</p>\n<h3 id=\"the-metadata-table\"><a class=\"header\" href=\"#the-metadata-table\">The <code>metadata</code> table</a></h3>\n<p>Cargo by default will warn about unused keys in <code class=\"hljs\">Cargo.toml</code> to assist in\ndetecting typos and such. The <code class=\"hljs\">package.metadata</code> table, however, is completely\nignored by Cargo and will not be warned about. This section can be used for\ntools which would like to store package configuration in <code class=\"hljs\">Cargo.toml</code>. For\nexample:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"...\"</span>\n<span class=\"hljs-comment\"># ...</span>\n\n<span class=\"hljs-comment\"># Metadata used when generating an Android APK, for example.</span>\n<span class=\"hljs-section\">[package.metadata.android]</span>\n<span class=\"hljs-attr\">package-name</span> = <span class=\"hljs-string\">\"my-awesome-android-app\"</span>\n<span class=\"hljs-attr\">assets</span> = <span class=\"hljs-string\">\"path/to/static\"</span>\n</code></pre>\n<p>You’ll need to look in the documentation for your tool to see how to use this field.\nFor Rust Projects that use <code class=\"hljs\">package.metadata</code> tables, see:</p>\n<ul>\n<li><a href=\"https://docs.rs/about/metadata\">docs.rs</a></li>\n</ul>\n<p>There is a similar table at the workspace level at\n<a href=\"reference/workspaces.html#the-metadata-table\"><code class=\"hljs\">workspace.metadata</code></a>. While cargo does not specify a\nformat for the content of either of these tables, it is suggested that\nexternal tools may wish to use them in a consistent fashion, such as referring\nto the data in <code class=\"hljs\">workspace.metadata</code> if data is missing from <code class=\"hljs\">package.metadata</code>,\nif that makes sense for the tool in question.</p>\n<h3 id=\"the-default-run-field\"><a class=\"header\" href=\"#the-default-run-field\">The <code>default-run</code> field</a></h3>\n<p>The <code class=\"hljs\">default-run</code> field in the <code class=\"hljs\">[package]</code> section of the manifest can be used\nto specify a default binary picked by <a href=\"reference/../commands/cargo-run.html\"><code class=\"hljs\">cargo run</code></a>. For example, when there is\nboth <code class=\"hljs\">src/bin/a.rs</code> and <code class=\"hljs\">src/bin/b.rs</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">default-run</span> = <span class=\"hljs-string\">\"a\"</span>\n</code></pre>\n<h2 id=\"the-lints-section\"><a class=\"header\" href=\"#the-lints-section\">The <code>[lints]</code> section</a></h2>\n<p>Override the default level of lints from different tools by assigning them to a new level in a\ntable, for example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[lints.rust]</span>\n<span class=\"hljs-attr\">unsafe_code</span> = <span class=\"hljs-string\">\"forbid\"</span>\n</code></pre>\n<p>This is short-hand for:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[lints.rust]</span>\n<span class=\"hljs-attr\">unsafe_code</span> = { level = <span class=\"hljs-string\">\"forbid\"</span>, priority = <span class=\"hljs-number\">0</span> }\n</code></pre>\n<p><code class=\"hljs\">level</code> corresponds to the <a href=\"https://doc.rust-lang.org/rustc/lints/levels.html\">lint levels</a> in <code class=\"hljs\">rustc</code>:</p>\n<ul>\n<li><code class=\"hljs\">forbid</code></li>\n<li><code class=\"hljs\">deny</code></li>\n<li><code class=\"hljs\">warn</code></li>\n<li><code class=\"hljs\">allow</code></li>\n</ul>\n<p><code class=\"hljs\">priority</code> is a signed integer that controls which lints or lint groups override other lint groups:</p>\n<ul>\n<li>lower (particularly negative) numbers have lower priority, being overridden\nby higher numbers, and show up first on the command-line to tools like\n<code class=\"hljs\">rustc</code></li>\n</ul>\n<p>To know which table under <code class=\"hljs\">[lints]</code> a particular lint belongs under, it is the part before <code class=\"hljs\">::</code> in the lint\nname.  If there isn’t a <code class=\"hljs\">::</code>, then the tool is <code class=\"hljs\">rust</code>.  For example a warning\nabout <code class=\"hljs\">unsafe_code</code> would be <code class=\"hljs\">lints.rust.unsafe_code</code> but a lint about\n<code class=\"hljs\">clippy::enum_glob_use</code> would be <code class=\"hljs\">lints.clippy.enum_glob_use</code>.</p>\n<p>For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[lints.rust]</span>\n<span class=\"hljs-attr\">unsafe_code</span> = <span class=\"hljs-string\">\"forbid\"</span>\n\n<span class=\"hljs-section\">[lints.clippy]</span>\n<span class=\"hljs-attr\">enum_glob_use</span> = <span class=\"hljs-string\">\"deny\"</span>\n</code></pre>\n<p>Generally, these will only affect local development of the current package.\nCargo only applies these to the current package and not to dependencies.\nAs for dependents, Cargo suppresses lints from non-path dependencies with features like\n<a href=\"reference/../../rustc/lints/levels.html#capping-lints\"><code class=\"hljs\">--cap-lints</code></a>.</p>\n<h2 id=\"the-badges-section\"><a class=\"header\" href=\"#the-badges-section\">The <code>[badges]</code> section</a></h2>\n<p>The <code class=\"hljs\">[badges]</code> section is for specifying status badges that can be displayed\non a registry website when the package is published.</p>\n<blockquote>\n<p>Note: <a href=\"https://crates.io/\">crates.io</a> previously displayed badges next to a crate on its\nwebsite, but that functionality has been removed. Packages should place\nbadges in its README file which will be displayed on <a href=\"https://crates.io/\">crates.io</a> (see <a href=\"reference/manifest.html#the-readme-field\">the\n<code class=\"hljs\">readme</code> field</a>).</p>\n</blockquote>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[badges]</span>\n<span class=\"hljs-comment\"># The `maintenance` table indicates the status of the maintenance of</span>\n<span class=\"hljs-comment\"># the crate. This may be used by a registry, but is currently not</span>\n<span class=\"hljs-comment\"># used by crates.io. See https://github.com/rust-lang/crates.io/issues/2437</span>\n<span class=\"hljs-comment\"># and https://github.com/rust-lang/crates.io/issues/2438 for more details.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># The `status` field is required. Available options are:</span>\n<span class=\"hljs-comment\"># - `actively-developed`: New features are being added and bugs are being fixed.</span>\n<span class=\"hljs-comment\"># - `passively-maintained`: There are no plans for new features, but the maintainer intends to</span>\n<span class=\"hljs-comment\">#   respond to issues that get filed.</span>\n<span class=\"hljs-comment\"># - `as-is`: The crate is feature complete, the maintainer does not intend to continue working on</span>\n<span class=\"hljs-comment\">#   it or providing support, but it works for the purposes it was designed for.</span>\n<span class=\"hljs-comment\"># - `experimental`: The author wants to share it with the community but is not intending to meet</span>\n<span class=\"hljs-comment\">#   anyone's particular use case.</span>\n<span class=\"hljs-comment\"># - `looking-for-maintainer`: The current maintainer would like to transfer the crate to someone</span>\n<span class=\"hljs-comment\">#   else.</span>\n<span class=\"hljs-comment\"># - `deprecated`: The maintainer does not recommend using this crate (the description of the crate</span>\n<span class=\"hljs-comment\">#   can describe why, there could be a better solution available or there could be problems with</span>\n<span class=\"hljs-comment\">#   the crate that the author does not want to fix).</span>\n<span class=\"hljs-comment\"># - `none`: Displays no badge on crates.io, since the maintainer has not chosen to specify</span>\n<span class=\"hljs-comment\">#   their intentions, potential crate users will need to investigate on their own.</span>\n<span class=\"hljs-attr\">maintenance</span> = { status = <span class=\"hljs-string\">\"...\"</span> }\n</code></pre>\n<h2 id=\"dependency-sections\"><a class=\"header\" href=\"#dependency-sections\">Dependency sections</a></h2>\n<p>See the <a href=\"reference/specifying-dependencies.html\">specifying dependencies page</a> for\ninformation on the <code class=\"hljs\">[dependencies]</code>, <code class=\"hljs\">[dev-dependencies]</code>,\n<code class=\"hljs\">[build-dependencies]</code>, and target-specific <code class=\"hljs\">[target.*.dependencies]</code> sections.</p>\n<h2 id=\"the-profile-sections\"><a class=\"header\" href=\"#the-profile-sections\">The <code>[profile.*]</code> sections</a></h2>\n<p>The <code class=\"hljs\">[profile]</code> tables provide a way to customize compiler settings such as\noptimizations and debug settings. See <a href=\"reference/profiles.html\">the Profiles chapter</a> for\nmore detail.</p>\n<script>\n(function() {\n    var fragments = {\n        \"#the-project-layout\": \"../guide/project-layout.html\",\n        \"#examples\": \"cargo-targets.html#examples\",\n        \"#tests\": \"cargo-targets.html#tests\",\n        \"#integration-tests\": \"cargo-targets.html#integration-tests\",\n        \"#configuring-a-target\": \"cargo-targets.html#configuring-a-target\",\n        \"#target-auto-discovery\": \"cargo-targets.html#target-auto-discovery\",\n        \"#the-required-features-field-optional\": \"cargo-targets.html#the-required-features-field\",\n        \"#building-dynamic-or-static-libraries\": \"cargo-targets.html#the-crate-type-field\",\n        \"#the-workspace-section\": \"workspaces.html#the-workspace-section\",\n        \"#virtual-workspace\": \"workspaces.html\",\n        \"#package-selection\": \"workspaces.html#package-selection\",\n        \"#the-features-section\": \"features.html#the-features-section\",\n        \"#rules\": \"features.html\",\n        \"#usage-in-end-products\": \"features.html\",\n        \"#usage-in-packages\": \"features.html\",\n        \"#the-patch-section\": \"overriding-dependencies.html#the-patch-section\",\n        \"#using-patch-with-multiple-versions\": \"overriding-dependencies.html#using-patch-with-multiple-versions\",\n        \"#the-replace-section\": \"overriding-dependencies.html#the-replace-section\",\n        \"#package-metadata\": \"manifest.html#the-package-section\",\n        \"#the-authors-field-optional\": \"manifest.html#the-authors-field\",\n        \"#the-edition-field-optional\": \"manifest.html#the-edition-field\",\n        \"#the-documentation-field-optional\": \"manifest.html#the-documentation-field\",\n        \"#the-workspace--field-optional\": \"manifest.html#the-workspace-field\",\n        \"#package-build\": \"manifest.html#the-build-field\",\n        \"#the-build-field-optional\": \"manifest.html#the-build-field\",\n        \"#the-links-field-optional\": \"manifest.html#the-links-field\",\n        \"#the-exclude-and-include-fields-optional\": \"manifest.html#the-exclude-and-include-fields\",\n        \"#the-publish--field-optional\": \"manifest.html#the-publish-field\",\n        \"#the-metadata-table-optional\": \"manifest.html#the-metadata-table\",\n    };\n    var target = fragments[window.location.hash];\n    if (target) {\n        var url = window.location.toString();\n        var base = url.substring(0, url.lastIndexOf('/'));\n        window.location.replace(base + \"/\" + target);\n    }\n})();\n</script>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-targets\"><a class=\"header\" href=\"#cargo-targets\">Cargo Targets</a></h1>\n<p>Cargo packages consist of <em>targets</em> which correspond to source files which can\nbe compiled into a crate. Packages can have <a href=\"reference/cargo-targets.html#library\">library</a>,\n<a href=\"reference/cargo-targets.html#binaries\">binary</a>, <a href=\"reference/cargo-targets.html#examples\">example</a>, <a href=\"reference/cargo-targets.html#tests\">test</a>, and\n<a href=\"reference/cargo-targets.html#benchmarks\">benchmark</a> targets. The list of targets can be configured in the\n<code class=\"hljs\">Cargo.toml</code> manifest, often <a href=\"reference/cargo-targets.html#target-auto-discovery\">inferred automatically</a>\nby the <a href=\"reference/../guide/project-layout.html\">directory layout</a> of the source files.</p>\n<p>See <a href=\"reference/cargo-targets.html#configuring-a-target\">Configuring a target</a> below for details on\nconfiguring the settings for a target.</p>\n<h2 id=\"library\"><a class=\"header\" href=\"#library\">Library</a></h2>\n<p>The library target defines a “library” that can be used and linked by other\nlibraries and executables. The filename defaults to <code class=\"hljs\">src/lib.rs</code>, and the name\nof the library defaults to the name of the package, with any dashes replaced\nwith underscores. A package can have only one library. The settings for the\nlibrary can be <a href=\"reference/cargo-targets.html#configuring-a-target\">customized</a> in the <code class=\"hljs\">[lib]</code> table in <code class=\"hljs\">Cargo.toml</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Example of customizing the library in Cargo.toml.</span>\n<span class=\"hljs-section\">[lib]</span>\n<span class=\"hljs-attr\">crate-type</span> = [<span class=\"hljs-string\">\"cdylib\"</span>]\n<span class=\"hljs-attr\">bench</span> = <span class=\"hljs-literal\">false</span>\n</code></pre>\n<h2 id=\"binaries\"><a class=\"header\" href=\"#binaries\">Binaries</a></h2>\n<p>Binary targets are executable programs that can be run after being compiled.\nThe default binary filename is <code class=\"hljs\">src/main.rs</code>, which defaults to the name of\nthe package. Additional binaries are stored in the <a href=\"reference/../guide/project-layout.html\"><code class=\"hljs\">src/bin/</code>\ndirectory</a>. The settings for each binary can be <a href=\"reference/cargo-targets.html#configuring-a-target\">customized</a>\nin the <code class=\"hljs\">[[bin]]</code> tables in <code class=\"hljs\">Cargo.toml</code>.</p>\n<p>Binaries can use the public API of the package’s library. They are also linked\nwith the <a href=\"reference/specifying-dependencies.html\"><code class=\"hljs\">[dependencies]</code></a> defined in <code class=\"hljs\">Cargo.toml</code>.</p>\n<p>You can run individual binaries with the <a href=\"reference/../commands/cargo-run.html\"><code class=\"hljs\">cargo run</code></a> command with the <code class=\"hljs\">--bin &lt;bin-name&gt;</code> option. <a href=\"reference/../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> can be used to copy the executable to a\ncommon location.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Example of customizing binaries in Cargo.toml.</span>\n<span class=\"hljs-section\">[[bin]]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"cool-tool\"</span>\n<span class=\"hljs-attr\">test</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">bench</span> = <span class=\"hljs-literal\">false</span>\n\n<span class=\"hljs-section\">[[bin]]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"frobnicator\"</span>\n<span class=\"hljs-attr\">required-features</span> = [<span class=\"hljs-string\">\"frobnicate\"</span>]\n</code></pre>\n<h2 id=\"examples\"><a class=\"header\" href=\"#examples\">Examples</a></h2>\n<p>Files located under the <a href=\"reference/../guide/project-layout.html\"><code class=\"hljs\">examples</code> directory</a> are example\nuses of the functionality provided by the library. When compiled, they are\nplaced in the <a href=\"reference/../guide/build-cache.html\"><code class=\"hljs\">target/debug/examples</code> directory</a>.</p>\n<p>Examples can use the public API of the package’s library. They are also linked\nwith the <a href=\"reference/specifying-dependencies.html\"><code class=\"hljs\">[dependencies]</code></a> and\n<a href=\"reference/specifying-dependencies.html#development-dependencies\"><code class=\"hljs\">[dev-dependencies]</code></a> defined in <code class=\"hljs\">Cargo.toml</code>.</p>\n<p>By default, examples are executable binaries (with a <code class=\"hljs\">main()</code> function). You\ncan specify the <a href=\"reference/cargo-targets.html#the-crate-type-field\"><code class=\"hljs\">crate-type</code> field</a> to make an example\nbe compiled as a library:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[[example]]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"foo\"</span>\n<span class=\"hljs-attr\">crate-type</span> = [<span class=\"hljs-string\">\"staticlib\"</span>]\n</code></pre>\n<p>You can run individual executable examples with the <a href=\"reference/../commands/cargo-run.html\"><code class=\"hljs\">cargo run</code></a> command with\nthe <code class=\"hljs\">--example &lt;example-name&gt;</code> option. Library examples can be built with\n<a href=\"reference/../commands/cargo-build.html\"><code class=\"hljs\">cargo build</code></a> with the <code class=\"hljs\">--example &lt;example-name&gt;</code> option. <a href=\"reference/../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a>\nwith the <code class=\"hljs\">--example &lt;example-name&gt;</code> option can be used to copy executable\nbinaries to a common location. Examples are compiled by <a href=\"reference/../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a> by\ndefault to protect them from bit-rotting. Set <a href=\"reference/cargo-targets.html#the-test-field\">the <code class=\"hljs\">test</code>\nfield</a> to <code class=\"hljs\">true</code> if you have <code class=\"hljs\">#[test]</code> functions in the\nexample that you want to run with <a href=\"reference/../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a>.</p>\n<h2 id=\"tests-1\"><a class=\"header\" href=\"#tests-1\">Tests</a></h2>\n<p>There are two styles of tests within a Cargo project:</p>\n<ul>\n<li><em>Unit tests</em> which are functions marked with the <a href=\"reference/../../reference/attributes/testing.html#the-test-attribute\"><code class=\"hljs\">#[test]</code>\nattribute</a> located within your library or binaries (or any\ntarget enabled with <a href=\"reference/cargo-targets.html#the-test-field\">the <code class=\"hljs\">test</code> field</a>). These tests have\naccess to private APIs located within the target they are defined in.</li>\n<li><em>Integration tests</em> which is a separate executable binary, also containing\n<code class=\"hljs\">#[test]</code> functions, which is linked with the project’s library and has\naccess to its <em>public</em> API.</li>\n</ul>\n<p>Tests are run with the <a href=\"reference/../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a> command. By default, Cargo and <code class=\"hljs\">rustc</code>\nuse the <a href=\"reference/../../rustc/tests/index.html\">libtest harness</a> which is responsible for collecting functions\nannotated with the <a href=\"reference/../../reference/attributes/testing.html#the-test-attribute\"><code class=\"hljs\">#[test]</code> attribute</a> and executing them in\nparallel, reporting the success and failure of each test. See <a href=\"reference/cargo-targets.html#the-harness-field\">the <code class=\"hljs\">harness</code>\nfield</a> if you want to use a different harness or test\nstrategy.</p>\n<blockquote>\n<p><strong>Note</strong>: There is another special style of test in Cargo:\n<a href=\"reference/../../rustdoc/documentation-tests.html\">documentation tests</a>.\nThey are handled by <code class=\"hljs\">rustdoc</code> and have a slightly different execution model.\nFor more information, please see <a href=\"reference/../commands/cargo-test.html#documentation-tests\"><code class=\"hljs\">cargo test</code></a>.</p>\n</blockquote>\n<h3 id=\"integration-tests\"><a class=\"header\" href=\"#integration-tests\">Integration tests</a></h3>\n<p>Files located under the <a href=\"reference/../guide/project-layout.html\"><code class=\"hljs\">tests</code> directory</a> are integration\ntests. When you run <a href=\"reference/../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a>, Cargo will compile each of these files as\na separate crate, and execute them.</p>\n<p>Integration tests can use the public API of the package’s library. They are\nalso linked with the <a href=\"reference/specifying-dependencies.html\"><code class=\"hljs\">[dependencies]</code></a> and\n<a href=\"reference/specifying-dependencies.html#development-dependencies\"><code class=\"hljs\">[dev-dependencies]</code></a> defined in <code class=\"hljs\">Cargo.toml</code>.</p>\n<p>If you want to share code among multiple integration tests, you can place it\nin a separate module such as <code class=\"hljs\">tests/common/mod.rs</code> and then put <code class=\"hljs\">mod common;</code>\nin each test to import it.</p>\n<p>Each integration test results in a separate executable binary, and <a href=\"reference/../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a> will run them serially. In some cases this can be inefficient, as it\ncan take longer to compile, and may not make full use of multiple CPUs when\nrunning the tests. If you have a lot of integration tests, you may want to\nconsider creating a single integration test, and split the tests into multiple\nmodules. The libtest harness will automatically find all of the <code class=\"hljs\">#[test]</code>\nannotated functions and run them in parallel. You can pass module names to\n<a href=\"reference/../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a> to only run the tests within that module.</p>\n<p>Binary targets are automatically built if there is an integration test. This\nallows an integration test to execute the binary to exercise and test its\nbehavior. The <code class=\"hljs\">CARGO_BIN_EXE_&lt;name&gt;</code> <a href=\"reference/environment-variables.html#environment-variables-cargo-sets-for-crates\">environment variable</a> is set when the\nintegration test is built so that it can use the <a href=\"reference/../../std/macro.env.html\"><code class=\"hljs\">env</code> macro</a> to locate the\nexecutable.</p>\n<h2 id=\"benchmarks\"><a class=\"header\" href=\"#benchmarks\">Benchmarks</a></h2>\n<p>Benchmarks provide a way to test the performance of your code using the\n<a href=\"reference/../commands/cargo-bench.html\"><code class=\"hljs\">cargo bench</code></a> command. They follow the same structure as <a href=\"reference/cargo-targets.html#tests\">tests</a>,\nwith each benchmark function annotated with the <code class=\"hljs\">#[bench]</code> attribute.\nSimilarly to tests:</p>\n<ul>\n<li>Benchmarks are placed in the <a href=\"reference/../guide/project-layout.html\"><code class=\"hljs\">benches</code> directory</a>.</li>\n<li>Benchmark functions defined in libraries and binaries have access to the\n<em>private</em> API within the target they are defined in. Benchmarks in the\n<code class=\"hljs\">benches</code> directory may use the <em>public</em> API.</li>\n<li><a href=\"reference/cargo-targets.html#the-bench-field\">The <code class=\"hljs\">bench</code> field</a> can be used to define which targets\nare benchmarked by default.</li>\n<li><a href=\"reference/cargo-targets.html#the-harness-field\">The <code class=\"hljs\">harness</code> field</a> can be used to disable the\nbuilt-in harness.</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: The <a href=\"reference/../../unstable-book/library-features/test.html\"><code class=\"hljs\">#[bench]</code>\nattribute</a> is currently\nunstable and only available on the <a href=\"reference/../../book/appendix-07-nightly-rust.html\">nightly channel</a>. There are some\npackages available on <a href=\"https://crates.io/keywords/benchmark\">crates.io</a> that\nmay help with running benchmarks on the stable channel, such as\n<a href=\"https://crates.io/crates/criterion\">Criterion</a>.</p>\n</blockquote>\n<h2 id=\"configuring-a-target\"><a class=\"header\" href=\"#configuring-a-target\">Configuring a target</a></h2>\n<p>All of the  <code class=\"hljs\">[lib]</code>, <code class=\"hljs\">[[bin]]</code>, <code class=\"hljs\">[[example]]</code>, <code class=\"hljs\">[[test]]</code>, and <code class=\"hljs\">[[bench]]</code>\nsections in <code class=\"hljs\">Cargo.toml</code> support similar configuration for specifying how a\ntarget should be built. The double-bracket sections like <code class=\"hljs\">[[bin]]</code> are\n<a href=\"https://toml.io/en/v1.0.0-rc.3#array-of-tables\">array-of-table of TOML</a>,\nwhich means you can write more than one <code class=\"hljs\">[[bin]]</code> section to make several\nexecutables in your crate. You can only specify one library, so <code class=\"hljs\">[lib]</code> is a\nnormal TOML table.</p>\n<p>The following is an overview of the TOML settings for each target, with each\nfield described in detail below.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[lib]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"foo\"</span>           <span class=\"hljs-comment\"># The name of the target.</span>\n<span class=\"hljs-attr\">path</span> = <span class=\"hljs-string\">\"src/lib.rs\"</span>    <span class=\"hljs-comment\"># The source file of the target.</span>\n<span class=\"hljs-attr\">test</span> = <span class=\"hljs-literal\">true</span>            <span class=\"hljs-comment\"># Is tested by default.</span>\n<span class=\"hljs-attr\">doctest</span> = <span class=\"hljs-literal\">true</span>         <span class=\"hljs-comment\"># Documentation examples are tested by default.</span>\n<span class=\"hljs-attr\">bench</span> = <span class=\"hljs-literal\">true</span>           <span class=\"hljs-comment\"># Is benchmarked by default.</span>\n<span class=\"hljs-attr\">doc</span> = <span class=\"hljs-literal\">true</span>             <span class=\"hljs-comment\"># Is documented by default.</span>\n<span class=\"hljs-attr\">plugin</span> = <span class=\"hljs-literal\">false</span>         <span class=\"hljs-comment\"># Used as a compiler plugin (deprecated).</span>\n<span class=\"hljs-attr\">proc-macro</span> = <span class=\"hljs-literal\">false</span>     <span class=\"hljs-comment\"># Set to `true` for a proc-macro library.</span>\n<span class=\"hljs-attr\">harness</span> = <span class=\"hljs-literal\">true</span>         <span class=\"hljs-comment\"># Use libtest harness.</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2015\"</span>       <span class=\"hljs-comment\"># The edition of the target.</span>\n<span class=\"hljs-attr\">crate-type</span> = [<span class=\"hljs-string\">\"lib\"</span>]   <span class=\"hljs-comment\"># The crate types to generate.</span>\n<span class=\"hljs-attr\">required-features</span> = [] <span class=\"hljs-comment\"># Features required to build this target (N/A for lib).</span>\n</code></pre>\n<h3 id=\"the-name-field-1\"><a class=\"header\" href=\"#the-name-field-1\">The <code>name</code> field</a></h3>\n<p>The <code class=\"hljs\">name</code> field specifies the name of the target, which corresponds to the\nfilename of the artifact that will be generated. For a library, this is the\ncrate name that dependencies will use to reference it.</p>\n<p>For the library target, this defaults to the name of the package , with any\ndashes replaced with underscores. For the default binary (<code class=\"hljs\">src/main.rs</code>),\nit also defaults to the name of the package, with no replacement for dashes.\nFor <a href=\"reference/cargo-targets.html#target-auto-discovery\">auto discovered</a> targets, it defaults to the\ndirectory or file name.</p>\n<p>This is required for all targets except <code class=\"hljs\">[lib]</code>.</p>\n<h3 id=\"the-path-field\"><a class=\"header\" href=\"#the-path-field\">The <code>path</code> field</a></h3>\n<p>The <code class=\"hljs\">path</code> field specifies where the source for the crate is located, relative\nto the <code class=\"hljs\">Cargo.toml</code> file.</p>\n<p>If not specified, the <a href=\"reference/cargo-targets.html#target-auto-discovery\">inferred path</a> is used based on\nthe target name.</p>\n<h3 id=\"the-test-field\"><a class=\"header\" href=\"#the-test-field\">The <code>test</code> field</a></h3>\n<p>The <code class=\"hljs\">test</code> field indicates whether or not the target is tested by default by\n<a href=\"reference/../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a>. The default is <code class=\"hljs\">true</code> for lib, bins, and tests.</p>\n<blockquote>\n<p><strong>Note</strong>: Examples are built by <a href=\"reference/../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a> by default to ensure they\ncontinue to compile, but they are not <em>tested</em> by default. Setting <code class=\"hljs\">test = true</code> for an example will also build it as a test and run any\n<a href=\"reference/../../reference/attributes/testing.html#the-test-attribute\"><code class=\"hljs\">#[test]</code></a> functions defined in the example.</p>\n</blockquote>\n<h3 id=\"the-doctest-field\"><a class=\"header\" href=\"#the-doctest-field\">The <code>doctest</code> field</a></h3>\n<p>The <code class=\"hljs\">doctest</code> field indicates whether or not <a href=\"reference/../../rustdoc/documentation-tests.html\">documentation examples</a> are\ntested by default by <a href=\"reference/../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a>. This is only relevant for libraries, it\nhas no effect on other sections. The default is <code class=\"hljs\">true</code> for the library.</p>\n<h3 id=\"the-bench-field\"><a class=\"header\" href=\"#the-bench-field\">The <code>bench</code> field</a></h3>\n<p>The <code class=\"hljs\">bench</code> field indicates whether or not the target is benchmarked by\ndefault by <a href=\"reference/../commands/cargo-bench.html\"><code class=\"hljs\">cargo bench</code></a>. The default is <code class=\"hljs\">true</code> for lib, bins, and\nbenchmarks.</p>\n<h3 id=\"the-doc-field\"><a class=\"header\" href=\"#the-doc-field\">The <code>doc</code> field</a></h3>\n<p>The <code class=\"hljs\">doc</code> field indicates whether or not the target is included in the\ndocumentation generated by <a href=\"reference/../commands/cargo-doc.html\"><code class=\"hljs\">cargo doc</code></a> by default. The default is <code class=\"hljs\">true</code> for\nlibraries and binaries.</p>\n<blockquote>\n<p><strong>Note</strong>: The binary will be skipped if its name is the same as the lib\ntarget.</p>\n</blockquote>\n<h3 id=\"the-plugin-field\"><a class=\"header\" href=\"#the-plugin-field\">The <code>plugin</code> field</a></h3>\n<p>This field is used for <code class=\"hljs\">rustc</code> plugins, which are being deprecated.</p>\n<h3 id=\"the-proc-macro-field\"><a class=\"header\" href=\"#the-proc-macro-field\">The <code>proc-macro</code> field</a></h3>\n<p>The <code class=\"hljs\">proc-macro</code> field indicates that the library is a <a href=\"reference/../../book/ch19-06-macros.html\">procedural macro</a>\n(<a href=\"reference/../../reference/procedural-macros.html\">reference</a>). This is only valid for the <code class=\"hljs\">[lib]</code>\ntarget.</p>\n<h3 id=\"the-harness-field\"><a class=\"header\" href=\"#the-harness-field\">The <code>harness</code> field</a></h3>\n<p>The <code class=\"hljs\">harness</code> field indicates that the <a href=\"reference/../../rustc/command-line-arguments.html#option-test\"><code class=\"hljs\">--test</code> flag</a> will be passed to\n<code class=\"hljs\">rustc</code> which will automatically include the libtest library which is the\ndriver for collecting and running tests marked with the <a href=\"reference/../../reference/attributes/testing.html#the-test-attribute\"><code class=\"hljs\">#[test]</code>\nattribute</a> or benchmarks with the <code class=\"hljs\">#[bench]</code> attribute. The\ndefault is <code class=\"hljs\">true</code> for all targets.</p>\n<p>If set to <code class=\"hljs\">false</code>, then you are responsible for defining a <code class=\"hljs\">main()</code> function\nto run tests and benchmarks.</p>\n<p>Tests have the <a href=\"reference/../../reference/conditional-compilation.html#test\"><code class=\"hljs\">cfg(test)</code> conditional expression</a> enabled whether\nor not the harness is enabled.</p>\n<h3 id=\"the-edition-field-1\"><a class=\"header\" href=\"#the-edition-field-1\">The <code>edition</code> field</a></h3>\n<p>The <code class=\"hljs\">edition</code> field defines the <a href=\"reference/../../edition-guide/index.html\">Rust edition</a> the target will use. If not\nspecified, it defaults to the <a href=\"reference/manifest.html#the-edition-field\"><code class=\"hljs\">edition</code> field</a> for the\n<code class=\"hljs\">[package]</code>. This field should usually not be set, and is only intended for\nadvanced scenarios such as incrementally transitioning a large package to a\nnew edition.</p>\n<h3 id=\"the-crate-type-field\"><a class=\"header\" href=\"#the-crate-type-field\">The <code>crate-type</code> field</a></h3>\n<p>The <code class=\"hljs\">crate-type</code> field defines the <a href=\"reference/../../reference/linkage.html\">crate types</a> that will be generated by the\ntarget. It is an array of strings, allowing you to specify multiple crate\ntypes for a single target. This can only be specified for libraries and\nexamples. Binaries, tests, and benchmarks are always the “bin” crate type. The\ndefaults are:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Target</th><th>Crate Type</th></tr></thead><tbody>\n<tr><td>Normal library</td><td><code class=\"hljs\">\"lib\"</code></td></tr>\n<tr><td>Proc-macro library</td><td><code class=\"hljs\">\"proc-macro\"</code></td></tr>\n<tr><td>Example</td><td><code class=\"hljs\">\"bin\"</code></td></tr>\n</tbody></table>\n</div>\n<p>The available options are <code class=\"hljs\">bin</code>, <code class=\"hljs\">lib</code>, <code class=\"hljs\">rlib</code>, <code class=\"hljs\">dylib</code>, <code class=\"hljs\">cdylib</code>,\n<code class=\"hljs\">staticlib</code>, and <code class=\"hljs\">proc-macro</code>. You can read more about the different crate\ntypes in the <a href=\"reference/../../reference/linkage.html\">Rust Reference Manual</a>.</p>\n<h3 id=\"the-required-features-field\"><a class=\"header\" href=\"#the-required-features-field\">The <code>required-features</code> field</a></h3>\n<p>The <code class=\"hljs\">required-features</code> field specifies which <a href=\"reference/features.html\">features</a> the target needs in\norder to be built. If any of the required features are not enabled, the\ntarget will be skipped. This is only relevant for the <code class=\"hljs\">[[bin]]</code>, <code class=\"hljs\">[[bench]]</code>,\n<code class=\"hljs\">[[test]]</code>, and <code class=\"hljs\">[[example]]</code> sections, it has no effect on <code class=\"hljs\">[lib]</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">postgres</span> = []\n<span class=\"hljs-attr\">sqlite</span> = []\n<span class=\"hljs-attr\">tools</span> = []\n\n<span class=\"hljs-section\">[[bin]]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-pg-tool\"</span>\n<span class=\"hljs-attr\">required-features</span> = [<span class=\"hljs-string\">\"postgres\"</span>, <span class=\"hljs-string\">\"tools\"</span>]\n</code></pre>\n<h2 id=\"target-auto-discovery\"><a class=\"header\" href=\"#target-auto-discovery\">Target auto-discovery</a></h2>\n<p>By default, Cargo automatically determines the targets to build based on the\n<a href=\"reference/../guide/project-layout.html\">layout of the files</a> on the filesystem. The target\nconfiguration tables, such as <code class=\"hljs\">[lib]</code>, <code class=\"hljs\">[[bin]]</code>, <code class=\"hljs\">[[test]]</code>, <code class=\"hljs\">[[bench]]</code>, or\n<code class=\"hljs\">[[example]]</code>, can be used to add additional targets that don’t follow the\nstandard directory layout.</p>\n<p>The automatic target discovery can be disabled so that only manually\nconfigured targets will be built. Setting the keys <code class=\"hljs\">autobins</code>, <code class=\"hljs\">autoexamples</code>,\n<code class=\"hljs\">autotests</code>, or <code class=\"hljs\">autobenches</code> to <code class=\"hljs\">false</code> in the <code class=\"hljs\">[package]</code> section will\ndisable auto-discovery of the corresponding target type.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">autobins</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">autoexamples</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">autotests</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">autobenches</span> = <span class=\"hljs-literal\">false</span>\n</code></pre>\n<p>Disabling automatic discovery should only be needed for specialized\nsituations. For example, if you have a library where you want a <em>module</em> named\n<code class=\"hljs\">bin</code>, this would present a problem because Cargo would usually attempt to\ncompile anything in the <code class=\"hljs\">bin</code> directory as an executable. Here is a sample\nlayout of this scenario:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">├── Cargo.toml\n└── src\n &nbsp;&nbsp; ├── lib.rs\n &nbsp;&nbsp; └── bin\n &nbsp;&nbsp;  &nbsp;&nbsp; └── mod.rs\n</code></pre>\n<p>To prevent Cargo from inferring <code class=\"hljs\">src/bin/mod.rs</code> as an executable, set\n<code class=\"hljs\">autobins = false</code> in <code class=\"hljs\">Cargo.toml</code> to disable auto-discovery:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># …</span>\n<span class=\"hljs-attr\">autobins</span> = <span class=\"hljs-literal\">false</span>\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: For packages with the 2015 edition, the default for auto-discovery\nis <code class=\"hljs\">false</code> if at least one target is manually defined in <code class=\"hljs\">Cargo.toml</code>.\nBeginning with the 2018 edition, the default is always <code class=\"hljs\">true</code>.</p>\n</blockquote>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"workspaces\"><a class=\"header\" href=\"#workspaces\">Workspaces</a></h1>\n<p>A <em>workspace</em> is a collection of one or more packages, called <em>workspace\nmembers</em>, that are managed together.</p>\n<p>The key points of workspaces are:</p>\n<ul>\n<li>Common commands can run across all workspace members, like <code class=\"hljs\">cargo check --workspace</code>.</li>\n<li>All packages share a common <a href=\"reference/../guide/cargo-toml-vs-cargo-lock.html\"><code class=\"hljs\">Cargo.lock</code></a> file which resides in the\n<em>workspace root</em>.</li>\n<li>All packages share a common <a href=\"reference/../guide/build-cache.html\">output directory</a>, which defaults to a\ndirectory named <code class=\"hljs\">target</code> in the <em>workspace root</em>.</li>\n<li>Sharing package metadata, like with <a href=\"reference/workspaces.html#the-package-table\"><code class=\"hljs\">workspace.package</code></a>.</li>\n<li>The <a href=\"reference/overriding-dependencies.html#the-patch-section\"><code class=\"hljs\">[patch]</code></a>, <a href=\"reference/overriding-dependencies.html#the-replace-section\"><code class=\"hljs\">[replace]</code></a> and <a href=\"reference/profiles.html\"><code class=\"hljs\">[profile.*]</code></a>\nsections in <code class=\"hljs\">Cargo.toml</code> are only recognized in the <em>root</em> manifest, and\nignored in member crates’ manifests.</li>\n</ul>\n<p>The root <code class=\"hljs\">Cargo.toml</code> of a workspace supports the following sections:</p>\n<ul>\n<li><a href=\"reference/workspaces.html#the-workspace-section\"><code class=\"hljs\">[workspace]</code></a> — Defines a workspace.\n<ul>\n<li><a href=\"reference/resolver.html#resolver-versions\"><code class=\"hljs\">resolver</code></a> — Sets the dependency resolver to use.</li>\n<li><a href=\"reference/workspaces.html#the-members-and-exclude-fields\"><code class=\"hljs\">members</code></a> — Packages to include in the workspace.</li>\n<li><a href=\"reference/workspaces.html#the-members-and-exclude-fields\"><code class=\"hljs\">exclude</code></a> — Packages to exclude from the workspace.</li>\n<li><a href=\"reference/workspaces.html#the-default-members-field\"><code class=\"hljs\">default-members</code></a> — Packages to operate on when a specific package wasn’t selected.</li>\n<li><a href=\"reference/workspaces.html#the-package-table\"><code class=\"hljs\">package</code></a> — Keys for inheriting in packages.</li>\n<li><a href=\"reference/workspaces.html#the-dependencies-table\"><code class=\"hljs\">dependencies</code></a> — Keys for inheriting in package dependencies.</li>\n<li><a href=\"reference/workspaces.html#the-lints-table\"><code class=\"hljs\">lints</code></a> — Keys for inheriting in package lints.</li>\n<li><a href=\"reference/workspaces.html#the-metadata-table\"><code class=\"hljs\">metadata</code></a> — Extra settings for external tools.</li>\n</ul>\n</li>\n<li><a href=\"reference/overriding-dependencies.html#the-patch-section\"><code class=\"hljs\">[patch]</code></a> — Override dependencies.</li>\n<li><a href=\"reference/overriding-dependencies.html#the-replace-section\"><code class=\"hljs\">[replace]</code></a> — Override dependencies (deprecated).</li>\n<li><a href=\"reference/profiles.html\"><code class=\"hljs\">[profile]</code></a> — Compiler settings and optimizations.</li>\n</ul>\n<h2 id=\"the-workspace-section\"><a class=\"header\" href=\"#the-workspace-section\">The <code>[workspace]</code> section</a></h2>\n<p>To create a workspace, you add the <code class=\"hljs\">[workspace]</code> table to a <code class=\"hljs\">Cargo.toml</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[workspace]</span>\n<span class=\"hljs-comment\"># ...</span>\n</code></pre>\n<p>At minimum, a workspace has to have a member, either with a root package or as\na virtual manifest.</p>\n<h3 id=\"root-package\"><a class=\"header\" href=\"#root-package\">Root package</a></h3>\n<p>If the <a href=\"reference/workspaces.html#the-workspace-section\"><code class=\"hljs\">[workspace]</code> section</a> is added to a\n<code class=\"hljs\">Cargo.toml</code> that already defines a <code class=\"hljs\">[package]</code>, the package is\nthe <em>root package</em> of the workspace. The <em>workspace root</em> is the directory\nwhere the workspace’s <code class=\"hljs\">Cargo.toml</code> is located.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[workspace]</span>\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"hello_world\"</span> <span class=\"hljs-comment\"># the name of the package</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>    <span class=\"hljs-comment\"># the current version, obeying semver</span>\n<span class=\"hljs-attr\">authors</span> = [<span class=\"hljs-string\">\"Alice &lt;a@example.com&gt;\"</span>, <span class=\"hljs-string\">\"Bob &lt;b@example.com&gt;\"</span>]\n</code></pre>\n<h3 id=\"virtual-workspace\"><a class=\"header\" href=\"#virtual-workspace\">Virtual workspace</a></h3>\n<p>Alternatively, a <code class=\"hljs\">Cargo.toml</code> file can be created with a <code class=\"hljs\">[workspace]</code> section\nbut without a <a href=\"reference/manifest.html#the-package-section\"><code class=\"hljs\">[package]</code> section</a>. This is called a <em>virtual\nmanifest</em>. This is typically useful when there isn’t a “primary” package, or\nyou want to keep all the packages organized in separate directories.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># [PROJECT_DIR]/Cargo.toml</span>\n<span class=\"hljs-section\">[workspace]</span>\n<span class=\"hljs-attr\">members</span> = [<span class=\"hljs-string\">\"hello_world\"</span>]\n<span class=\"hljs-attr\">resolver</span> = <span class=\"hljs-string\">\"2\"</span>\n</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># [PROJECT_DIR]/hello_world/Cargo.toml</span>\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"hello_world\"</span> <span class=\"hljs-comment\"># the name of the package</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>    <span class=\"hljs-comment\"># the current version, obeying semver</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2021\"</span>     <span class=\"hljs-comment\"># the edition, will have no effect on a resolver used in the workspace</span>\n<span class=\"hljs-attr\">authors</span> = [<span class=\"hljs-string\">\"Alice &lt;a@example.com&gt;\"</span>, <span class=\"hljs-string\">\"Bob &lt;b@example.com&gt;\"</span>]\n</code></pre>\n<p>By having a workspace without a root package,</p>\n<ul>\n<li><a href=\"reference/resolver.html#resolver-versions\"><code class=\"hljs\">resolver</code></a> must be\nset explicitly in virtual workspaces as they have no\n<a href=\"reference/manifest.html#the-edition-field\"><code class=\"hljs\">package.edition</code></a> to infer it from\n<a href=\"reference/resolver.html#resolver-versions\">resolver version</a>.</li>\n<li>Commands run in the workspace root will run against all workspace\nmembers by default, see <a href=\"reference/workspaces.html#the-default-members-field\"><code class=\"hljs\">default-members</code></a>.</li>\n</ul>\n<h2 id=\"the-members-and-exclude-fields\"><a class=\"header\" href=\"#the-members-and-exclude-fields\">The <code>members</code> and <code>exclude</code> fields</a></h2>\n<p>The <code class=\"hljs\">members</code> and <code class=\"hljs\">exclude</code> fields define which packages are members of\nthe workspace:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[workspace]</span>\n<span class=\"hljs-attr\">members</span> = [<span class=\"hljs-string\">\"member1\"</span>, <span class=\"hljs-string\">\"path/to/member2\"</span>, <span class=\"hljs-string\">\"crates/*\"</span>]\n<span class=\"hljs-attr\">exclude</span> = [<span class=\"hljs-string\">\"crates/foo\"</span>, <span class=\"hljs-string\">\"path/to/other\"</span>]\n</code></pre>\n<p>All <a href=\"reference/specifying-dependencies.html#specifying-path-dependencies\"><code class=\"hljs\">path</code> dependencies</a> residing in the workspace directory automatically\nbecome members. Additional members can be listed with the <code class=\"hljs\">members</code> key, which\nshould be an array of strings containing directories with <code class=\"hljs\">Cargo.toml</code> files.</p>\n<p>The <code class=\"hljs\">members</code> list also supports <a href=\"https://docs.rs/glob/0.3.0/glob/struct.Pattern.html\">globs</a> to match multiple paths, using\ntypical filename glob patterns like <code class=\"hljs\">*</code> and <code class=\"hljs\">?</code>.</p>\n<p>The <code class=\"hljs\">exclude</code> key can be used to prevent paths from being included in a\nworkspace. This can be useful if some path dependencies aren’t desired to be\nin the workspace at all, or using a glob pattern and you want to remove a\ndirectory.</p>\n<p>When inside a subdirectory within the workspace, Cargo will automatically\nsearch the parent directories for a <code class=\"hljs\">Cargo.toml</code> file with a <code class=\"hljs\">[workspace]</code>\ndefinition to determine which workspace to use. The <a href=\"reference/manifest.html#the-workspace-field\"><code class=\"hljs\">package.workspace</code></a>\nmanifest key can be used in member crates to point at a workspace’s root to\noverride this automatic search. The manual setting can be useful if the member\nis not inside a subdirectory of the workspace root.</p>\n<h3 id=\"package-selection\"><a class=\"header\" href=\"#package-selection\">Package selection</a></h3>\n<p>In a workspace, package-related Cargo commands like <a href=\"reference/../commands/cargo-build.html\"><code class=\"hljs\">cargo build</code></a> can use\nthe <code class=\"hljs\">-p</code> / <code class=\"hljs\">--package</code> or <code class=\"hljs\">--workspace</code> command-line flags to determine which\npackages to operate on. If neither of those flags are specified, Cargo will\nuse the package in the current working directory. However, if the current directory is\na workspace root, the <a href=\"reference/workspaces.html#the-default-members-field\"><code class=\"hljs\">default-members</code></a> will be used.</p>\n<h2 id=\"the-default-members-field\"><a class=\"header\" href=\"#the-default-members-field\">The <code>default-members</code> field</a></h2>\n<p>The <code class=\"hljs\">default-members</code> field specifies paths of <a href=\"reference/workspaces.html#the-members-and-exclude-fields\">members</a> to\noperate on when in the workspace root and the package selection flags are not\nused:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[workspace]</span>\n<span class=\"hljs-attr\">members</span> = [<span class=\"hljs-string\">\"path/to/member1\"</span>, <span class=\"hljs-string\">\"path/to/member2\"</span>, <span class=\"hljs-string\">\"path/to/member3/*\"</span>]\n<span class=\"hljs-attr\">default-members</span> = [<span class=\"hljs-string\">\"path/to/member2\"</span>, <span class=\"hljs-string\">\"path/to/member3/foo\"</span>]\n</code></pre>\n<blockquote>\n<p>Note: when a <a href=\"reference/workspaces.html#root-package\">root package</a> is present,\nyou can only operate on it using <code class=\"hljs\">--package</code> and <code class=\"hljs\">--workspace</code> flags.</p>\n</blockquote>\n<p>When unspecified, the <a href=\"reference/workspaces.html#root-package\">root package</a> will be used.\nIn the case of a <a href=\"reference/workspaces.html#virtual-workspace\">virtual workspace</a>, all members will be used\n(as if <code class=\"hljs\">--workspace</code> were specified on the command-line).</p>\n<h2 id=\"the-package-table\"><a class=\"header\" href=\"#the-package-table\">The <code>package</code> table</a></h2>\n<p>The <code class=\"hljs\">workspace.package</code> table is where you define keys that can be\ninherited by members of a workspace. These keys can be inherited by\ndefining them in the member package with <code class=\"hljs\">{key}.workspace = true</code>.</p>\n<p>Keys that are supported:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th></th><th></th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">authors</code></td><td><code class=\"hljs\">categories</code></td></tr>\n<tr><td><code class=\"hljs\">description</code></td><td><code class=\"hljs\">documentation</code></td></tr>\n<tr><td><code class=\"hljs\">edition</code></td><td><code class=\"hljs\">exclude</code></td></tr>\n<tr><td><code class=\"hljs\">homepage</code></td><td><code class=\"hljs\">include</code></td></tr>\n<tr><td><code class=\"hljs\">keywords</code></td><td><code class=\"hljs\">license</code></td></tr>\n<tr><td><code class=\"hljs\">license-file</code></td><td><code class=\"hljs\">publish</code></td></tr>\n<tr><td><code class=\"hljs\">readme</code></td><td><code class=\"hljs\">repository</code></td></tr>\n<tr><td><code class=\"hljs\">rust-version</code></td><td><code class=\"hljs\">version</code></td></tr>\n</tbody></table>\n</div>\n<ul>\n<li><code class=\"hljs\">license-file</code> and <code class=\"hljs\">readme</code> are relative to the workspace root</li>\n<li><code class=\"hljs\">include</code> and <code class=\"hljs\">exclude</code> are relative to your package root</li>\n</ul>\n<p>Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># [PROJECT_DIR]/Cargo.toml</span>\n<span class=\"hljs-section\">[workspace]</span>\n<span class=\"hljs-attr\">members</span> = [<span class=\"hljs-string\">\"bar\"</span>]\n\n<span class=\"hljs-section\">[workspace.package]</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"1.2.3\"</span>\n<span class=\"hljs-attr\">authors</span> = [<span class=\"hljs-string\">\"Nice Folks\"</span>]\n<span class=\"hljs-attr\">description</span> = <span class=\"hljs-string\">\"A short description of my package\"</span>\n<span class=\"hljs-attr\">documentation</span> = <span class=\"hljs-string\">\"https://example.com/bar\"</span>\n</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># [PROJECT_DIR]/bar/Cargo.toml</span>\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"bar\"</span>\n<span class=\"hljs-attr\">version.workspace</span> = <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">authors.workspace</span> = <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">description.workspace</span> = <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">documentation.workspace</span> = <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h2 id=\"the-dependencies-table\"><a class=\"header\" href=\"#the-dependencies-table\">The <code>dependencies</code> table</a></h2>\n<p>The <code class=\"hljs\">workspace.dependencies</code> table is where you define dependencies to be\ninherited by members of a workspace.</p>\n<p>Specifying a workspace dependency is similar to <a href=\"reference/specifying-dependencies.html\">package dependencies</a> except:</p>\n<ul>\n<li>Dependencies from this table cannot be declared as <code class=\"hljs\">optional</code></li>\n<li><a href=\"reference/features.html\"><code class=\"hljs\">features</code></a> declared in this table are additive with the <code class=\"hljs\">features</code> from <code class=\"hljs\">[dependencies]</code></li>\n</ul>\n<p>You can then <a href=\"reference/specifying-dependencies.html#inheriting-a-dependency-from-a-workspace\">inherit the workspace dependency as a package dependency</a></p>\n<p>Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># [PROJECT_DIR]/Cargo.toml</span>\n<span class=\"hljs-section\">[workspace]</span>\n<span class=\"hljs-attr\">members</span> = [<span class=\"hljs-string\">\"bar\"</span>]\n\n<span class=\"hljs-section\">[workspace.dependencies]</span>\n<span class=\"hljs-attr\">cc</span> = <span class=\"hljs-string\">\"1.0.73\"</span>\n<span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"0.8.5\"</span>\n<span class=\"hljs-attr\">regex</span> = { version = <span class=\"hljs-string\">\"1.6.0\"</span>, default-features = <span class=\"hljs-literal\">false</span>, features = [<span class=\"hljs-string\">\"std\"</span>] }\n</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># [PROJECT_DIR]/bar/Cargo.toml</span>\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"bar\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.2.0\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">regex</span> = { workspace = <span class=\"hljs-literal\">true</span>, features = [<span class=\"hljs-string\">\"unicode\"</span>] }\n\n<span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">cc.workspace</span> = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-section\">[dev-dependencies]</span>\n<span class=\"hljs-attr\">rand.workspace</span> = <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h2 id=\"the-lints-table\"><a class=\"header\" href=\"#the-lints-table\">The <code>lints</code> table</a></h2>\n<p>The <code class=\"hljs\">workspace.lints</code> table is where you define lint configuration to be inherited by members of a workspace.</p>\n<p>Specifying a workspace lint configuration is similar to <a href=\"reference/manifest.html#the-lints-section\">package lints</a>.</p>\n<p>Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># [PROJECT_DIR]/Cargo.toml</span>\n<span class=\"hljs-section\">[workspace]</span>\n<span class=\"hljs-attr\">members</span> = [<span class=\"hljs-string\">\"crates/*\"</span>]\n\n<span class=\"hljs-section\">[workspace.lints.rust]</span>\n<span class=\"hljs-attr\">unsafe_code</span> = <span class=\"hljs-string\">\"forbid\"</span>\n</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># [PROJECT_DIR]/crates/bar/Cargo.toml</span>\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"bar\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n\n<span class=\"hljs-section\">[lints]</span>\n<span class=\"hljs-attr\">workspace</span> = <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h2 id=\"the-metadata-table-1\"><a class=\"header\" href=\"#the-metadata-table-1\">The <code>metadata</code> table</a></h2>\n<p>The <code class=\"hljs\">workspace.metadata</code> table is ignored by Cargo and will not be warned\nabout. This section can be used for tools that would like to store workspace\nconfiguration in <code class=\"hljs\">Cargo.toml</code>. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[workspace]</span>\n<span class=\"hljs-attr\">members</span> = [<span class=\"hljs-string\">\"member1\"</span>, <span class=\"hljs-string\">\"member2\"</span>]\n\n<span class=\"hljs-section\">[workspace.metadata.webcontents]</span>\n<span class=\"hljs-attr\">root</span> = <span class=\"hljs-string\">\"path/to/webproject\"</span>\n<span class=\"hljs-attr\">tool</span> = [<span class=\"hljs-string\">\"npm\"</span>, <span class=\"hljs-string\">\"run\"</span>, <span class=\"hljs-string\">\"build\"</span>]\n<span class=\"hljs-comment\"># ...</span>\n</code></pre>\n<p>There is a similar set of tables at the package level at\n<a href=\"reference/manifest.html#the-metadata-table\"><code class=\"hljs\">package.metadata</code></a>. While cargo does not specify a\nformat for the content of either of these tables, it is suggested that\nexternal tools may wish to use them in a consistent fashion, such as referring\nto the data in <code class=\"hljs\">workspace.metadata</code> if data is missing from <code class=\"hljs\">package.metadata</code>,\nif that makes sense for the tool in question.</p>\n<script>\n(function() {\n    var fragments = {\n        \"#virtual-manifest\": \"workspaces.html#virtual-workspace\",\n    };\n    var target = fragments[window.location.hash];\n    if (target) {\n        var url = window.location.toString();\n        var base = url.substring(0, url.lastIndexOf('/'));\n        window.location.replace(base + \"/\" + target);\n    }\n})();\n</script>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"features\"><a class=\"header\" href=\"#features\">Features</a></h1>\n<p>Cargo “features” provide a mechanism to express <a href=\"reference/../../reference/conditional-compilation.html\">conditional compilation</a> and\n<a href=\"reference/features.html#optional-dependencies\">optional dependencies</a>. A package defines a set of\nnamed features in the <code class=\"hljs\">[features]</code> table of <code class=\"hljs\">Cargo.toml</code>, and each feature can\neither be enabled or disabled. Features for the package being built can be\nenabled on the command-line with flags such as <code class=\"hljs\">--features</code>. Features for\ndependencies can be enabled in the dependency declaration in <code class=\"hljs\">Cargo.toml</code>.</p>\n<blockquote>\n<p><strong>Note</strong>: New crates or versions published on crates.io are now limited to\na maximum of 300 features. Exceptions are granted on a case-by-case basis.\nSee this <a href=\"https://blog.rust-lang.org/2023/10/26/broken-badges-and-23k-keywords.html\">blog post</a> for details. Participation in solution discussions is\nencouraged via the crates.io Zulip stream.</p>\n</blockquote>\n<p>See also the <a href=\"reference/features-examples.html\">Features Examples</a> chapter for some examples of how features can\nbe used.</p>\n<h2 id=\"the-features-section\"><a class=\"header\" href=\"#the-features-section\">The <code>[features]</code> section</a></h2>\n<p>Features are defined in the <code class=\"hljs\">[features]</code> table in <code class=\"hljs\">Cargo.toml</code>. Each feature\nspecifies an array of other features or optional dependencies that it enables.\nThe following examples illustrate how features could be used for a 2D image\nprocessing library where support for different image formats can be optionally\nincluded:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-comment\"># Defines a feature named `webp` that does not enable any other features.</span>\n<span class=\"hljs-attr\">webp</span> = []\n</code></pre>\n<p>With this feature defined, <a href=\"reference/../../reference/conditional-compilation.html\"><code class=\"hljs\">cfg</code> expressions</a> can be used to conditionally\ninclude code to support the requested feature at compile time. For example,\ninside <code class=\"hljs\">lib.rs</code> of the package could include this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// This conditionally includes a module which implements WEBP support.</span>\n<span class=\"hljs-meta\">#[cfg(feature = <span class=\"hljs-meta-string\">\"webp\"</span>)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> webp;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Cargo sets features in the package using the <code class=\"hljs\">rustc</code> <a href=\"reference/../../rustc/command-line-arguments.html#option-cfg\"><code class=\"hljs\">--cfg</code> flag</a>, and code\ncan test for their presence with the <a href=\"reference/../../reference/conditional-compilation.html#the-cfg-attribute\"><code class=\"hljs\">cfg</code> attribute</a> or the <a href=\"reference/../../std/macro.cfg.html\"><code class=\"hljs\">cfg</code> macro</a>.</p>\n<p>Features can list other features to enable. For example, the ICO image format\ncan contain BMP and PNG images, so when it is enabled, it should make sure\nthose other features are enabled, too:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">bmp</span> = []\n<span class=\"hljs-attr\">png</span> = []\n<span class=\"hljs-attr\">ico</span> = [<span class=\"hljs-string\">\"bmp\"</span>, <span class=\"hljs-string\">\"png\"</span>]\n<span class=\"hljs-attr\">webp</span> = []\n</code></pre>\n<p>Feature names may include characters from the <a href=\"https://unicode.org/reports/tr31/\">Unicode XID standard</a> (which\nincludes most letters), and additionally allows starting with <code class=\"hljs\">_</code> or digits\n<code class=\"hljs\">0</code> through <code class=\"hljs\">9</code>, and after the first character may also contain <code class=\"hljs\">-</code>, <code class=\"hljs\">+</code>, or\n<code class=\"hljs\">.</code>.</p>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> imposes additional constraints on feature name syntax\nthat they must only be <a href=\"reference/../../std/primitive.char.html#method.is_ascii_alphanumeric\">ASCII alphanumeric</a> characters or <code class=\"hljs\">_</code>, <code class=\"hljs\">-</code>, or <code class=\"hljs\">+</code>.</p>\n</blockquote>\n<h2 id=\"the-default-feature\"><a class=\"header\" href=\"#the-default-feature\">The <code>default</code> feature</a></h2>\n<p>By default, all features are disabled unless explicitly enabled. This can be\nchanged by specifying the <code class=\"hljs\">default</code> feature:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">default</span> = [<span class=\"hljs-string\">\"ico\"</span>, <span class=\"hljs-string\">\"webp\"</span>]\n<span class=\"hljs-attr\">bmp</span> = []\n<span class=\"hljs-attr\">png</span> = []\n<span class=\"hljs-attr\">ico</span> = [<span class=\"hljs-string\">\"bmp\"</span>, <span class=\"hljs-string\">\"png\"</span>]\n<span class=\"hljs-attr\">webp</span> = []\n</code></pre>\n<p>When the package is built, the <code class=\"hljs\">default</code> feature is enabled which in turn\nenables the listed features. This behavior can be changed by:</p>\n<ul>\n<li>The <code class=\"hljs\">--no-default-features</code> <a href=\"reference/features.html#command-line-feature-options\">command-line\nflag</a> disables the default features of the\npackage.</li>\n<li>The <code class=\"hljs\">default-features = false</code> option can be specified in a <a href=\"reference/features.html#dependency-features\">dependency\ndeclaration</a>.</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: Be careful about choosing the default feature set. The default\nfeatures are a convenience that make it easier to use a package without\nforcing the user to carefully select which features to enable for common\nuse, but there are some drawbacks. Dependencies automatically enable default\nfeatures unless <code class=\"hljs\">default-features = false</code> is specified. This can make it\ndifficult to ensure that the default features are not enabled, especially\nfor a dependency that appears multiple times in the dependency graph. Every\npackage must ensure that <code class=\"hljs\">default-features = false</code> is specified to avoid\nenabling them.</p>\n<p>Another issue is that it can be a <a href=\"reference/features.html#semver-compatibility\">SemVer incompatible\nchange</a> to remove a feature from the default set, so\nyou should be confident that you will keep those features.</p>\n</blockquote>\n<h2 id=\"optional-dependencies\"><a class=\"header\" href=\"#optional-dependencies\">Optional dependencies</a></h2>\n<p>Dependencies can be marked “optional”, which means they will not be compiled\nby default. For example, let’s say that our 2D image processing library uses\nan external package to handle GIF images. This can be expressed like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">gif</span> = { version = <span class=\"hljs-string\">\"0.11.1\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n</code></pre>\n<p>By default, this optional dependency implicitly defines a feature that looks\nlike this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">gif</span> = [<span class=\"hljs-string\">\"dep:gif\"</span>]\n</code></pre>\n<p>This means that this dependency will only be included if the <code class=\"hljs\">gif</code>\nfeature is enabled.\nThe same <code class=\"hljs\">cfg(feature = \"gif\")</code> syntax can be used in the code, and the\ndependency can be enabled just like any feature such as <code class=\"hljs\">--features gif</code> (see\n<a href=\"reference/features.html#command-line-feature-options\">Command-line feature options</a> below).</p>\n<p>In some cases, you may not want to expose a feature that has the same name\nas the optional dependency.\nFor example, perhaps the optional dependency is an internal detail, or you\nwant to group multiple optional dependencies together, or you just want to use\na better name.\nIf you specify the optional dependency with the <code class=\"hljs\">dep:</code> prefix anywhere\nin the <code class=\"hljs\">[features]</code> table, that disables the implicit feature.</p>\n<blockquote>\n<p><strong>Note</strong>: The <code class=\"hljs\">dep:</code> syntax is only available starting with Rust 1.60.\nPrevious versions can only use the implicit feature name.</p>\n</blockquote>\n<p>For example, let’s say in order to support the AVIF image format, our library\nneeds two other dependencies to be enabled:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">ravif</span> = { version = <span class=\"hljs-string\">\"0.6.3\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n<span class=\"hljs-attr\">rgb</span> = { version = <span class=\"hljs-string\">\"0.8.25\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n\n<span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">avif</span> = [<span class=\"hljs-string\">\"dep:ravif\"</span>, <span class=\"hljs-string\">\"dep:rgb\"</span>]\n</code></pre>\n<p>In this example, the <code class=\"hljs\">avif</code> feature will enable the two listed dependencies.\nThis also avoids creating the implicit <code class=\"hljs\">ravif</code> and <code class=\"hljs\">rgb</code> features, since we\ndon’t want users to enable those individually as they are internal details to\nour crate.</p>\n<blockquote>\n<p><strong>Note</strong>: Another way to optionally include a dependency is to use\n<a href=\"reference/specifying-dependencies.html#platform-specific-dependencies\">platform-specific dependencies</a>. Instead of using features, these are\nconditional based on the target platform.</p>\n</blockquote>\n<h2 id=\"dependency-features\"><a class=\"header\" href=\"#dependency-features\">Dependency features</a></h2>\n<p>Features of dependencies can be enabled within the dependency declaration. The\n<code class=\"hljs\">features</code> key indicates which features to enable:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-comment\"># Enables the `derive` feature of serde.</span>\n<span class=\"hljs-attr\">serde</span> = { version = <span class=\"hljs-string\">\"1.0.118\"</span>, features = [<span class=\"hljs-string\">\"derive\"</span>] }\n</code></pre>\n<p>The <a href=\"reference/features.html#the-default-feature\"><code class=\"hljs\">default</code> features</a> can be disabled using\n<code class=\"hljs\">default-features = false</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">flate2</span> = { version = <span class=\"hljs-string\">\"1.0.3\"</span>, default-features = <span class=\"hljs-literal\">false</span>, features = [<span class=\"hljs-string\">\"zlib\"</span>] }\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: This may not ensure the default features are disabled. If another\ndependency includes <code class=\"hljs\">flate2</code> without specifying <code class=\"hljs\">default-features = false</code>,\nthen the default features will be enabled. See <a href=\"reference/features.html#feature-unification\">feature\nunification</a> below for more details.</p>\n</blockquote>\n<p>Features of dependencies can also be enabled in the <code class=\"hljs\">[features]</code> table. The\nsyntax is <code class=\"hljs\">\"package-name/feature-name\"</code>. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">jpeg-decoder</span> = { version = <span class=\"hljs-string\">\"0.1.20\"</span>, default-features = <span class=\"hljs-literal\">false</span> }\n\n<span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-comment\"># Enables parallel processing support by enabling the \"rayon\" feature of jpeg-decoder.</span>\n<span class=\"hljs-attr\">parallel</span> = [<span class=\"hljs-string\">\"jpeg-decoder/rayon\"</span>]\n</code></pre>\n<p>The <code class=\"hljs\">\"package-name/feature-name\"</code> syntax will also enable <code class=\"hljs\">package-name</code>\nif it is an optional dependency. Often this is not what you want.\nYou can add a <code class=\"hljs\">?</code> as in <code class=\"hljs\">\"package-name?/feature-name\"</code> which will only enable\nthe given feature if something else enables the optional dependency.</p>\n<blockquote>\n<p><strong>Note</strong>: The <code class=\"hljs\">?</code> syntax is only available starting with Rust 1.60.</p>\n</blockquote>\n<p>For example, let’s say we have added some serialization support to our\nlibrary, and it requires enabling a corresponding feature in some optional\ndependencies.\nThat can be done like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">serde</span> = { version = <span class=\"hljs-string\">\"1.0.133\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n<span class=\"hljs-attr\">rgb</span> = { version = <span class=\"hljs-string\">\"0.8.25\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n\n<span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">serde</span> = [<span class=\"hljs-string\">\"dep:serde\"</span>, <span class=\"hljs-string\">\"rgb?/serde\"</span>]\n</code></pre>\n<p>In this example, enabling the <code class=\"hljs\">serde</code> feature will enable the serde\ndependency.\nIt will also enable the <code class=\"hljs\">serde</code> feature for the <code class=\"hljs\">rgb</code> dependency, but only if\nsomething else has enabled the <code class=\"hljs\">rgb</code> dependency.</p>\n<h2 id=\"command-line-feature-options\"><a class=\"header\" href=\"#command-line-feature-options\">Command-line feature options</a></h2>\n<p>The following command-line flags can be used to control which features are\nenabled:</p>\n<ul>\n<li>\n<p><code class=\"hljs\">--features</code> <em>FEATURES</em>: Enables the listed features. Multiple features may\nbe separated with commas or spaces. If using spaces, be sure to use quotes\naround all the features if running Cargo from a shell (such as <code class=\"hljs\">--features \"foo bar\"</code>). If building multiple packages in a <a href=\"reference/workspaces.html\">workspace</a>, the\n<code class=\"hljs\">package-name/feature-name</code> syntax can be used to specify features for\nspecific workspace members.</p>\n</li>\n<li>\n<p><code class=\"hljs\">--all-features</code>: Activates all features of all packages selected on the\ncommand-line.</p>\n</li>\n<li>\n<p><code class=\"hljs\">--no-default-features</code>: Does not activate the <a href=\"reference/features.html#the-default-feature\"><code class=\"hljs\">default</code>\nfeature</a> of the selected packages.</p>\n</li>\n</ul>\n<h2 id=\"feature-unification\"><a class=\"header\" href=\"#feature-unification\">Feature unification</a></h2>\n<p>Features are unique to the package that defines them. Enabling a feature on a\npackage does not enable a feature of the same name on other packages.</p>\n<p>When a dependency is used by multiple packages, Cargo will use the union of\nall features enabled on that dependency when building it. This helps ensure\nthat only a single copy of the dependency is used. See the <a href=\"reference/resolver.html#features\">features section</a>\nof the resolver documentation for more details.</p>\n<p>For example, let’s look at the <a href=\"https://crates.io/crates/winapi\"><code class=\"hljs\">winapi</code></a> package which uses a <a href=\"https://github.com/retep998/winapi-rs/blob/0.3.9/Cargo.toml#L25-L431\">large\nnumber</a> of features. If your package depends on a package\n<code class=\"hljs\">foo</code> which enables the “fileapi” and “handleapi” features of <code class=\"hljs\">winapi</code>, and\nanother dependency <code class=\"hljs\">bar</code> which enables the “std” and “winnt” features of\n<code class=\"hljs\">winapi</code>, then <code class=\"hljs\">winapi</code> will be built with all four of those features enabled.</p>\n<p><img src=\"reference/../images/winapi-features.svg\" alt=\"winapi features example\"></p>\n<p>A consequence of this is that features should be <em>additive</em>. That is, enabling\na feature should not disable functionality, and it should usually be safe to\nenable any combination of features. A feature should not introduce a\n<a href=\"reference/features.html#semver-compatibility\">SemVer-incompatible change</a>.</p>\n<p>For example, if you want to optionally support <a href=\"reference/../../reference/names/preludes.html#the-no_std-attribute\"><code class=\"hljs\">no_std</code></a> environments, <strong>do\nnot</strong> use a <code class=\"hljs\">no_std</code> feature. Instead, use a <code class=\"hljs\">std</code> feature that <em>enables</em>\n<code class=\"hljs\">std</code>. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![no_std]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[cfg(feature = <span class=\"hljs-meta-string\">\"std\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> std;\n\n<span class=\"hljs-meta\">#[cfg(feature = <span class=\"hljs-meta-string\">\"std\"</span>)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">function_that_requires_std</span></span>() {\n    <span class=\"hljs-comment\">// ...</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"mutually-exclusive-features\"><a class=\"header\" href=\"#mutually-exclusive-features\">Mutually exclusive features</a></h3>\n<p>There are rare cases where features may be mutually incompatible with one\nanother. This should be avoided if at all possible, because it requires\ncoordinating all uses of the package in the dependency graph to cooperate to\navoid enabling them together. If it is not possible, consider adding a compile\nerror to detect this scenario. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[cfg(all(feature = <span class=\"hljs-meta-string\">\"foo\"</span>, feature = <span class=\"hljs-meta-string\">\"bar\"</span>))]</span>\ncompile_error!(<span class=\"hljs-string\">\"feature \\\"foo\\\" and feature \\\"bar\\\" cannot be enabled at the same time\"</span>);</code></pre>\n<p>Instead of using mutually exclusive features, consider some other options:</p>\n<ul>\n<li>Split the functionality into separate packages.</li>\n<li>When there is a conflict, <a href=\"reference/features-examples.html#feature-precedence\">choose one feature over\nanother</a>. The <a href=\"https://crates.io/crates/cfg-if\"><code class=\"hljs\">cfg-if</code></a> package can help with writing\nmore complex <code class=\"hljs\">cfg</code> expressions.</li>\n<li>Architect the code to allow the features to be enabled concurrently, and use\nruntime options to control which is used. For example, use a config file,\ncommand-line argument, or environment variable to choose which behavior to\nenable.</li>\n</ul>\n<h3 id=\"inspecting-resolved-features\"><a class=\"header\" href=\"#inspecting-resolved-features\">Inspecting resolved features</a></h3>\n<p>In complex dependency graphs, it can sometimes be difficult to understand how\ndifferent features get enabled on various packages. The <a href=\"reference/../commands/cargo-tree.html\"><code class=\"hljs\">cargo tree</code></a> command\noffers several options to help inspect and visualize which features are\nenabled. Some options to try:</p>\n<ul>\n<li><code class=\"hljs\">cargo tree -e features</code>: This will show features in the dependency graph.\nEach feature will appear showing which package enabled it.</li>\n<li><code class=\"hljs\">cargo tree -f \"{p} {f}\"</code>: This is a more compact view that shows a\ncomma-separated list of features enabled on each package.</li>\n<li><code class=\"hljs\">cargo tree -e features -i foo</code>: This will invert the tree, showing how\nfeatures flow into the given package “foo”. This can be useful because\nviewing the entire graph can be quite large and overwhelming. Use this when\nyou are trying to figure out which features are enabled on a specific\npackage and why. See the example at the bottom of the <a href=\"reference/../commands/cargo-tree.html\"><code class=\"hljs\">cargo tree</code></a> page on\nhow to read this.</li>\n</ul>\n<h2 id=\"feature-resolver-version-2\"><a class=\"header\" href=\"#feature-resolver-version-2\">Feature resolver version 2</a></h2>\n<p>A different feature resolver can be specified with the <code class=\"hljs\">resolver</code> field in\n<code class=\"hljs\">Cargo.toml</code>, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-package\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"1.0.0\"</span>\n<span class=\"hljs-attr\">resolver</span> = <span class=\"hljs-string\">\"2\"</span>\n</code></pre>\n<p>See the <a href=\"reference/resolver.html#resolver-versions\">resolver versions</a> section for more detail on specifying resolver\nversions.</p>\n<p>The version <code class=\"hljs\">\"2\"</code> resolver avoids unifying features in a few situations where\nthat unification can be unwanted. The exact situations are described in the\n<a href=\"reference/resolver.html#feature-resolver-version-2\">resolver chapter</a>, but in short, it avoids unifying in these\nsituations:</p>\n<ul>\n<li>Features enabled on <a href=\"reference/specifying-dependencies.html#platform-specific-dependencies\">platform-specific dependencies</a> for targets not\ncurrently being built are ignored.</li>\n<li><a href=\"reference/specifying-dependencies.html#build-dependencies\">Build-dependencies</a> and proc-macros do not share features with normal\ndependencies.</li>\n<li><a href=\"reference/specifying-dependencies.html#development-dependencies\">Dev-dependencies</a> do not activate features unless building a target that\nneeds them (like tests or examples).</li>\n</ul>\n<p>Avoiding the unification is necessary for some situations. For example, if a\nbuild-dependency enables a <code class=\"hljs\">std</code> feature, and the same dependency is used as a\nnormal dependency for a <code class=\"hljs\">no_std</code> environment, enabling <code class=\"hljs\">std</code> would break the\nbuild.</p>\n<p>However, one drawback is that this can increase build times because the\ndependency is built multiple times (each with different features). When using\nthe version <code class=\"hljs\">\"2\"</code> resolver, it is recommended to check for dependencies that\nare built multiple times to reduce overall build time. If it is not <em>required</em>\nto build those duplicated packages with separate features, consider adding\nfeatures to the <code class=\"hljs\">features</code> list in the <a href=\"reference/features.html#dependency-features\">dependency\ndeclaration</a> so that the duplicates end up with the same\nfeatures (and thus Cargo will build it only once). You can detect these\nduplicate dependencies with the <a href=\"reference/../commands/cargo-tree.html\"><code class=\"hljs\">cargo tree --duplicates</code></a>\ncommand. It will show which packages are built multiple times; look for any\nentries listed with the same version. See <a href=\"reference/features.html#inspecting-resolved-features\">Inspecting resolved\nfeatures</a> for more on fetching information on\nthe resolved features. For build dependencies, this is not necessary if you\nare cross-compiling with the <code class=\"hljs\">--target</code> flag because build dependencies are\nalways built separately from normal dependencies in that scenario.</p>\n<h3 id=\"resolver-version-2-command-line-flags\"><a class=\"header\" href=\"#resolver-version-2-command-line-flags\">Resolver version 2 command-line flags</a></h3>\n<p>The <code class=\"hljs\">resolver = \"2\"</code> setting also changes the behavior of the <code class=\"hljs\">--features</code> and\n<code class=\"hljs\">--no-default-features</code> <a href=\"reference/features.html#command-line-feature-options\">command-line options</a>.</p>\n<p>With version <code class=\"hljs\">\"1\"</code>, you can only enable features for the package in the\ncurrent working directory. For example, in a workspace with packages <code class=\"hljs\">foo</code> and\n<code class=\"hljs\">bar</code>, and you are in the directory for package <code class=\"hljs\">foo</code>, and ran the command\n<code class=\"hljs\">cargo build -p bar --features bar-feat</code>, this would fail because the\n<code class=\"hljs\">--features</code> flag only allowed enabling features on <code class=\"hljs\">foo</code>.</p>\n<p>With <code class=\"hljs\">resolver = \"2\"</code>, the features flags allow enabling features for any of\nthe packages selected on the command-line with <code class=\"hljs\">-p</code> and <code class=\"hljs\">--workspace</code> flags.\nFor example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\"><span class=\"hljs-comment\"># This command is allowed with resolver = \"2\", regardless of which directory</span>\n<span class=\"hljs-comment\"># you are in.</span>\ncargo build -p foo -p bar --features foo-feat,bar-feat\n\n<span class=\"hljs-comment\"># This explicit equivalent works with any resolver version:</span>\ncargo build -p foo -p bar --features foo/foo-feat,bar/bar-feat\n</code></pre>\n<p>Additionally, with <code class=\"hljs\">resolver = \"1\"</code>, the <code class=\"hljs\">--no-default-features</code> flag only\ndisables the default feature for the package in the current directory. With\nversion “2”, it will disable the default features for all workspace members.</p>\n<h2 id=\"build-scripts\"><a class=\"header\" href=\"#build-scripts\">Build scripts</a></h2>\n<p><a href=\"reference/build-scripts.html\">Build scripts</a> can detect which features are enabled on the package by\ninspecting the <code class=\"hljs\">CARGO_FEATURE_&lt;name&gt;</code> environment variable, where <code class=\"hljs\">&lt;name&gt;</code> is\nthe feature name converted to uppercase and <code class=\"hljs\">-</code> converted to <code class=\"hljs\">_</code>.</p>\n<h2 id=\"required-features\"><a class=\"header\" href=\"#required-features\">Required features</a></h2>\n<p>The <a href=\"reference/cargo-targets.html#the-required-features-field\"><code class=\"hljs\">required-features</code> field</a> can be used to disable specific <a href=\"reference/cargo-targets.html\">Cargo\ntargets</a> if a feature is not enabled. See the linked documentation for more\ndetails.</p>\n<h2 id=\"semver-compatibility\"><a class=\"header\" href=\"#semver-compatibility\">SemVer compatibility</a></h2>\n<p>Enabling a feature should not introduce a SemVer-incompatible change. For\nexample, the feature shouldn’t change an existing API in a way that could\nbreak existing uses. More details about what changes are compatible can be\nfound in the <a href=\"reference/semver.html\">SemVer Compatibility chapter</a>.</p>\n<p>Care should be taken when adding and removing feature definitions and optional\ndependencies, as these can sometimes be backwards-incompatible changes. More\ndetails can be found in the <a href=\"reference/semver.html#cargo\">Cargo section</a> of the SemVer\nCompatibility chapter. In short, follow these rules:</p>\n<ul>\n<li>The following is usually safe to do in a minor release:\n<ul>\n<li>Add a <a href=\"reference/semver.html#cargo-feature-add\">new feature</a> or <a href=\"reference/semver.html#cargo-dep-add\">optional dependency</a>.</li>\n<li><a href=\"reference/semver.html#cargo-change-dep-feature\">Change the features used on a dependency</a>.</li>\n</ul>\n</li>\n<li>The following should usually <strong>not</strong> be done in a minor release:\n<ul>\n<li><a href=\"reference/semver.html#cargo-feature-remove\">Remove a feature</a> or <a href=\"reference/semver.html#cargo-remove-opt-dep\">optional dependency</a>.</li>\n<li><a href=\"reference/semver.html#item-remove\">Moving existing public code behind a feature</a>.</li>\n<li><a href=\"reference/semver.html#cargo-feature-remove-another\">Remove a feature from a feature list</a>.</li>\n</ul>\n</li>\n</ul>\n<p>See the links for caveats and examples.</p>\n<h2 id=\"feature-documentation-and-discovery\"><a class=\"header\" href=\"#feature-documentation-and-discovery\">Feature documentation and discovery</a></h2>\n<p>You are encouraged to document which features are available in your package.\nThis can be done by adding <a href=\"reference/../../rustdoc/how-to-write-documentation.html\">doc comments</a> at the top of <code class=\"hljs\">lib.rs</code>. As an\nexample, see the <a href=\"https://github.com/rust-lang/regex/blob/1.4.2/src/lib.rs#L488-L583\">regex crate source</a>, which when rendered can be viewed on\n<a href=\"https://docs.rs/regex/1.4.2/regex/#crate-features\">docs.rs</a>. If you have other documentation, such as a user\nguide, consider adding the documentation there (for example, see <a href=\"https://serde.rs/feature-flags.html\">serde.rs</a>).\nIf you have a binary project, consider documenting the features in the README\nor other documentation for the project (for example, see <a href=\"https://github.com/mozilla/sccache/blob/0.2.13/README.md#build-requirements\">sccache</a>).</p>\n<p>Clearly documenting the features can set expectations about features that are\nconsidered “unstable” or otherwise shouldn’t be used. For example, if there is\nan optional dependency, but you don’t want users to explicitly list that\noptional dependency as a feature, exclude it from the documented list.</p>\n<p>Documentation published on <a href=\"https://docs.rs/\">docs.rs</a> can use metadata in <code class=\"hljs\">Cargo.toml</code> to\ncontrol which features are enabled when the documentation is built. See\n<a href=\"https://docs.rs/about/metadata\">docs.rs metadata documentation</a> for more details.</p>\n<blockquote>\n<p><strong>Note</strong>: Rustdoc has experimental support for annotating the documentation\nto indicate which features are required to use certain APIs. See the\n<a href=\"reference/../../unstable-book/language-features/doc-cfg.html\"><code class=\"hljs\">doc_cfg</code></a> documentation for more details. An example is the <a href=\"https://docs.rs/syn/1.0.54/syn/#modules\"><code class=\"hljs\">syn</code>\ndocumentation</a>, where you can see colored boxes which note which features\nare required to use it.</p>\n</blockquote>\n<h3 id=\"discovering-features\"><a class=\"header\" href=\"#discovering-features\">Discovering features</a></h3>\n<p>When features are documented in the library API, this can make it easier for\nyour users to discover which features are available and what they do. If the\nfeature documentation for a package isn’t readily available, you can look at\nthe <code class=\"hljs\">Cargo.toml</code> file, but sometimes it can be hard to track it down. The\ncrate page on <a href=\"https://crates.io/\">crates.io</a> has a link to the source repository if available.\nTools like <a href=\"reference/../commands/cargo-vendor.html\"><code class=\"hljs\">cargo vendor</code></a> or <a href=\"https://crates.io/crates/cargo-clone-crate\">cargo-clone-crate</a> can be used to download the\nsource and inspect it.</p>\n<h2 id=\"feature-combinations\"><a class=\"header\" href=\"#feature-combinations\">Feature combinations</a></h2>\n<p>Because features are a form of conditional compilation, they require an exponential number of configurations and test cases to be 100% covered. By default, tests, docs, and other tooling such as <a href=\"https://github.com/rust-lang/rust-clippy\">Clippy</a> will only run with the default set of features.</p>\n<p>We encourage you to consider your strategy and tooling in regards to different feature combinations — Every project will have different requirements in conjunction with time, resources, and the cost-benefit of covering specific scenarios. Common configurations may be with / without default features, specific combinations of features, or all combinations of features.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"features-examples\"><a class=\"header\" href=\"#features-examples\">Features Examples</a></h1>\n<p>The following illustrates some real-world examples of features in action.</p>\n<h2 id=\"minimizing-build-times-and-file-sizes\"><a class=\"header\" href=\"#minimizing-build-times-and-file-sizes\">Minimizing build times and file sizes</a></h2>\n<p>Some packages use features so that if the features are not enabled, it reduces\nthe size of the crate and reduces compile time. Some examples are:</p>\n<ul>\n<li><a href=\"https://crates.io/crates/syn\"><code class=\"hljs\">syn</code></a> is a popular crate for parsing Rust code. Since it is so popular, it\nis helpful to reduce compile times since it affects so many projects. It has\na <a href=\"https://docs.rs/syn/1.0.54/syn/#optional-features\">clearly documented list</a> of features which can be used to\nminimize the amount of code it contains.</li>\n<li><a href=\"https://crates.io/crates/regex\"><code class=\"hljs\">regex</code></a> has a <a href=\"https://github.com/rust-lang/regex/blob/1.4.2/Cargo.toml#L33-L101\">several features</a> that are <a href=\"https://docs.rs/regex/1.4.2/regex/#crate-features\">well\ndocumented</a>. Cutting out Unicode support can reduce the\nresulting file size as it can remove some large tables.</li>\n<li><a href=\"https://crates.io/crates/winapi\"><code class=\"hljs\">winapi</code></a> has <a href=\"https://github.com/retep998/winapi-rs/blob/0.3.9/Cargo.toml#L25-L431\">a large number</a> of features that\nlimit which Windows API bindings it supports.</li>\n<li><a href=\"https://crates.io/crates/web-sys\"><code class=\"hljs\">web-sys</code></a> is another example similar to <code class=\"hljs\">winapi</code> that provides a <a href=\"https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/crates/web-sys/Cargo.toml#L32-L1395\">huge\nsurface area</a> of API bindings that are limited by using\nfeatures.</li>\n</ul>\n<h2 id=\"extending-behavior\"><a class=\"header\" href=\"#extending-behavior\">Extending behavior</a></h2>\n<p>The <a href=\"https://crates.io/crates/serde_json\"><code class=\"hljs\">serde_json</code></a> package has a <a href=\"https://github.com/serde-rs/json/blob/v1.0.60/Cargo.toml#L53-L56\"><code class=\"hljs\">preserve_order</code> feature</a>\nwhich <a href=\"https://github.com/serde-rs/json/blob/v1.0.60/src/map.rs#L23-L26\">changes the behavior</a> of JSON maps to preserve the\norder that keys are inserted. Notice that it enables an optional dependency\n<a href=\"https://crates.io/crates/indexmap\"><code class=\"hljs\">indexmap</code></a> to implement the new behavior.</p>\n<p>When changing behavior like this, be careful to make sure the changes are\n<a href=\"reference/features.html#semver-compatibility\">SemVer compatible</a>. That is, enabling the feature should not break code that\nusually builds with the feature off.</p>\n<h2 id=\"no_std-support\"><a class=\"header\" href=\"#no_std-support\"><code>no_std</code> support</a></h2>\n<p>Some packages want to support both <a href=\"reference/../../reference/names/preludes.html#the-no_std-attribute\"><code class=\"hljs\">no_std</code></a> and <code class=\"hljs\">std</code> environments. This is\nuseful for supporting embedded and resource-constrained platforms, but still\nallowing extended capabilities for platforms that support the full standard\nlibrary.</p>\n<p>The <a href=\"https://crates.io/crates/wasm-bindgen\"><code class=\"hljs\">wasm-bindgen</code></a> package defines a <a href=\"https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/Cargo.toml#L25\"><code class=\"hljs\">std</code> feature</a> that\nis <a href=\"https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/Cargo.toml#L23\">enabled by default</a>. At the top of the library, it\n<a href=\"https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/src/lib.rs#L8\">unconditionally enables the <code class=\"hljs\">no_std</code> attribute</a>. This\nensures that <code class=\"hljs\">std</code> and the <a href=\"reference/../../std/prelude/index.html\"><code class=\"hljs\">std</code> prelude</a> are not automatically in scope.\nThen, in various places in the code (<a href=\"https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/src/lib.rs#L270-L273\">example1</a>,\n<a href=\"https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/src/lib.rs#L67-L75\">example2</a>), it uses <code class=\"hljs\">#[cfg(feature = \"std\")]</code> attributes\nto conditionally enable extra functionality that requires <code class=\"hljs\">std</code>.</p>\n<h2 id=\"re-exporting-dependency-features\"><a class=\"header\" href=\"#re-exporting-dependency-features\">Re-exporting dependency features</a></h2>\n<p>It can be convenient to re-export the features from a dependency. This allows\nthe user depending on the crate to control those features without needing to\nspecify those dependencies directly. For example, <a href=\"https://crates.io/crates/regex\"><code class=\"hljs\">regex</code></a> <a href=\"https://github.com/rust-lang/regex/blob/1.4.2/Cargo.toml#L65-L89\">re-exports the\nfeatures</a> from the <a href=\"https://github.com/rust-lang/regex/blob/1.4.2/regex-syntax/Cargo.toml#L17-L32\"><code class=\"hljs\">regex_syntax</code></a>\npackage. Users of <code class=\"hljs\">regex</code> don’t need to know about the <code class=\"hljs\">regex_syntax</code> package,\nbut they can still access the features it contains.</p>\n<h2 id=\"vendoring-of-c-libraries\"><a class=\"header\" href=\"#vendoring-of-c-libraries\">Vendoring of C libraries</a></h2>\n<p>Some packages provide bindings to common C libraries (sometimes referred to as\n<a href=\"reference/build-scripts.html#-sys-packages\">“sys” crates</a>). Sometimes these packages give you the choice to use the\nC library installed on the system, or to build it from source. For example,\nthe <a href=\"https://crates.io/crates/openssl\"><code class=\"hljs\">openssl</code></a> package has a <a href=\"https://github.com/sfackler/rust-openssl/blob/openssl-v0.10.31/openssl/Cargo.toml#L19\"><code class=\"hljs\">vendored</code> feature</a> which\nenables the corresponding <code class=\"hljs\">vendored</code> feature of <a href=\"https://crates.io/crates/openssl-sys\"><code class=\"hljs\">openssl-sys</code></a>. The\n<code class=\"hljs\">openssl-sys</code> build script has some <a href=\"https://github.com/sfackler/rust-openssl/blob/openssl-v0.10.31/openssl-sys/build/main.rs#L47-L54\">conditional logic</a> which\ncauses it to build from a local copy of the OpenSSL source code instead of\nusing the version from the system.</p>\n<p>The <a href=\"https://crates.io/crates/curl-sys\"><code class=\"hljs\">curl-sys</code></a> package is another example where the <a href=\"https://github.com/alexcrichton/curl-rust/blob/0.4.34/curl-sys/Cargo.toml#L49\"><code class=\"hljs\">static-curl</code>\nfeature</a> causes it to build libcurl from source. Notice that\nit also has a <a href=\"https://github.com/alexcrichton/curl-rust/blob/0.4.34/curl-sys/Cargo.toml#L52\"><code class=\"hljs\">force-system-lib-on-osx</code></a> feature which forces\nit <a href=\"https://github.com/alexcrichton/curl-rust/blob/0.4.34/curl-sys/build.rs#L15-L20\">to use the system libcurl</a>, overriding the\nstatic-curl setting.</p>\n<h2 id=\"feature-precedence\"><a class=\"header\" href=\"#feature-precedence\">Feature precedence</a></h2>\n<p>Some packages may have mutually-exclusive features. One option to handle this\nis to prefer one feature over another. The <a href=\"https://crates.io/crates/log\"><code class=\"hljs\">log</code></a> package is an example. It\nhas <a href=\"https://github.com/rust-lang/log/blob/0.4.11/Cargo.toml#L29-L42\">several features</a> for choosing the maximum logging level at\ncompile-time described <a href=\"https://docs.rs/log/0.4.11/log/#compile-time-filters\">here</a>. It uses <a href=\"https://crates.io/crates/cfg-if\"><code class=\"hljs\">cfg-if</code></a> to <a href=\"https://github.com/rust-lang/log/blob/0.4.11/src/lib.rs#L1422-L1448\">choose a\nprecedence</a>. If multiple features are enabled, the higher “max”\nlevels will be preferred over the lower levels.</p>\n<h2 id=\"proc-macro-companion-package\"><a class=\"header\" href=\"#proc-macro-companion-package\">Proc-macro companion package</a></h2>\n<p>Some packages have a proc-macro that is intimately tied with it. However, not\nall users will need to use the proc-macro. By making the proc-macro an\noptional-dependency, this allows you to conveniently choose whether or not it\nis included. This is helpful, because sometimes the proc-macro version must\nstay in sync with the parent package, and you don’t want to force the users to\nhave to specify both dependencies and keep them in sync.</p>\n<p>An example is <a href=\"https://crates.io/crates/serde\"><code class=\"hljs\">serde</code></a> which has a <a href=\"https://github.com/serde-rs/serde/blob/v1.0.118/serde/Cargo.toml#L34-L35\"><code class=\"hljs\">derive</code></a> feature which\nenables the <a href=\"https://crates.io/crates/serde_derive\"><code class=\"hljs\">serde_derive</code></a> proc-macro. The <code class=\"hljs\">serde_derive</code> crate is very\ntightly tied to <code class=\"hljs\">serde</code>, so it uses an <a href=\"https://github.com/serde-rs/serde/blob/v1.0.118/serde/Cargo.toml#L17\">equals version\nrequirement</a> to ensure they stay in sync.</p>\n<h2 id=\"nightly-only-features\"><a class=\"header\" href=\"#nightly-only-features\">Nightly-only features</a></h2>\n<p>Some packages want to experiment with APIs or language features that are only\navailable on the Rust <a href=\"reference/../../book/appendix-07-nightly-rust.html\">nightly channel</a>. However, they may not want to require\ntheir users to also use the nightly channel. An example is <a href=\"https://crates.io/crates/wasm-bindgen\"><code class=\"hljs\">wasm-bindgen</code></a>\nwhich has a <a href=\"https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/Cargo.toml#L27\"><code class=\"hljs\">nightly</code> feature</a> which enables an\n<a href=\"https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/src/closure.rs#L257-L269\">extended API</a> that uses the <a href=\"reference/../../std/marker/trait.Unsize.html\"><code class=\"hljs\">Unsize</code></a> marker trait that\nis only available on the nightly channel at the time of this writing.</p>\n<p>Note that at the root of the crate it uses <a href=\"https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/src/lib.rs#L11\"><code class=\"hljs\">cfg_attr</code> to enable the nightly\nfeature</a>. Keep in mind that the <a href=\"reference/../../unstable-book/index.html\"><code class=\"hljs\">feature</code> attribute</a>\nis unrelated to Cargo features, and is used to opt-in to experimental language\nfeatures.</p>\n<p>The <a href=\"https://github.com/rust-random/rand/blob/0.7.3/Cargo.toml#L40\"><code class=\"hljs\">simd_support</code> feature</a> of the <a href=\"https://crates.io/crates/rand\"><code class=\"hljs\">rand</code></a> package is another example,\nwhich relies on a dependency that only builds on the nightly channel.</p>\n<h2 id=\"experimental-features\"><a class=\"header\" href=\"#experimental-features\">Experimental features</a></h2>\n<p>Some packages have new functionality that they may want to experiment with,\nwithout having to commit to the stability of those APIs. The features are\nusually documented that they are experimental, and thus may change or break in\nthe future, even during a minor release. An example is the <a href=\"https://crates.io/crates/async-std\"><code class=\"hljs\">async-std</code></a>\npackage, which has an <a href=\"https://github.com/async-rs/async-std/blob/v1.8.0/Cargo.toml#L38-L42\"><code class=\"hljs\">unstable</code> feature</a>, which <a href=\"https://github.com/async-rs/async-std/blob/v1.8.0/src/macros.rs#L46\">gates\nnew APIs</a> that people can opt-in to using, but may not be\ncompletely ready to be relied upon.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"profiles\"><a class=\"header\" href=\"#profiles\">Profiles</a></h1>\n<p>Profiles provide a way to alter the compiler settings, influencing things like\noptimizations and debugging symbols.</p>\n<p>Cargo has 4 built-in profiles: <code class=\"hljs\">dev</code>, <code class=\"hljs\">release</code>, <code class=\"hljs\">test</code>, and <code class=\"hljs\">bench</code>. The\nprofile is automatically chosen based on which command is being run if a\nprofile is not specified on the command-line. In addition to the built-in\nprofiles, custom user-defined profiles can also be specified.</p>\n<p>Profile settings can be changed in <a href=\"reference/manifest.html\"><code class=\"hljs\">Cargo.toml</code></a> with the\n<code class=\"hljs\">[profile]</code> table. Within each named profile, individual settings can be changed\nwith key/value pairs like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[profile.dev]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">1</span>               <span class=\"hljs-comment\"># Use slightly better optimizations.</span>\n<span class=\"hljs-attr\">overflow-checks</span> = <span class=\"hljs-literal\">false</span>     <span class=\"hljs-comment\"># Disable integer overflow checks.</span>\n</code></pre>\n<p>Cargo only looks at the profile settings in the <code class=\"hljs\">Cargo.toml</code> manifest at the\nroot of the workspace. Profile settings defined in dependencies will be\nignored.</p>\n<p>Additionally, profiles can be overridden from a <a href=\"reference/config.html\">config</a> definition.\nSpecifying a profile in a config file or environment variable will override\nthe settings from <code class=\"hljs\">Cargo.toml</code>.</p>\n<h2 id=\"profile-settings\"><a class=\"header\" href=\"#profile-settings\">Profile settings</a></h2>\n<p>The following is a list of settings that can be controlled in a profile.</p>\n<h3 id=\"opt-level\"><a class=\"header\" href=\"#opt-level\">opt-level</a></h3>\n<p>The <code class=\"hljs\">opt-level</code> setting controls the <a href=\"reference/../../rustc/codegen-options/index.html#opt-level\"><code class=\"hljs\">-C opt-level</code> flag</a> which controls the level\nof optimization. Higher optimization levels may produce faster runtime code at\nthe expense of longer compiler times. Higher levels may also change and\nrearrange the compiled code which may make it harder to use with a debugger.</p>\n<p>The valid options are:</p>\n<ul>\n<li><code class=\"hljs\">0</code>: no optimizations</li>\n<li><code class=\"hljs\">1</code>: basic optimizations</li>\n<li><code class=\"hljs\">2</code>: some optimizations</li>\n<li><code class=\"hljs\">3</code>: all optimizations</li>\n<li><code class=\"hljs\">\"s\"</code>: optimize for binary size</li>\n<li><code class=\"hljs\">\"z\"</code>: optimize for binary size, but also turn off loop vectorization.</li>\n</ul>\n<p>It is recommended to experiment with different levels to find the right\nbalance for your project. There may be surprising results, such as level <code class=\"hljs\">3</code>\nbeing slower than <code class=\"hljs\">2</code>, or the <code class=\"hljs\">\"s\"</code> and <code class=\"hljs\">\"z\"</code> levels not being necessarily\nsmaller. You may also want to reevaluate your settings over time as newer\nversions of <code class=\"hljs\">rustc</code> change optimization behavior.</p>\n<p>See also <a href=\"reference/../../rustc/profile-guided-optimization.html\">Profile Guided Optimization</a> for more advanced optimization\ntechniques.</p>\n<h3 id=\"debug\"><a class=\"header\" href=\"#debug\">debug</a></h3>\n<p>The <code class=\"hljs\">debug</code> setting controls the <a href=\"reference/../../rustc/codegen-options/index.html#debuginfo\"><code class=\"hljs\">-C debuginfo</code> flag</a> which controls the\namount of debug information included in the compiled binary.</p>\n<p>The valid options are:</p>\n<ul>\n<li><code class=\"hljs\">0</code>, <code class=\"hljs\">false</code>, or <code class=\"hljs\">\"none\"</code>: no debug info at all, default for <a href=\"reference/profiles.html#release\"><code class=\"hljs\">release</code></a></li>\n<li><code class=\"hljs\">\"line-directives-only\"</code>: line info directives only. For the nvptx* targets this enables <a href=\"https://reviews.llvm.org/D46061\">profiling</a>. For other use cases, <code class=\"hljs\">line-tables-only</code> is the better, more compatible choice.</li>\n<li><code class=\"hljs\">\"line-tables-only\"</code>: line tables only. Generates the minimal amount of debug info for backtraces with filename/line number info, but not anything else, i.e. no variable or function parameter info.</li>\n<li><code class=\"hljs\">1</code> or <code class=\"hljs\">\"limited\"</code>: debug info without type or variable-level information. Generates more detailed module-level info than <code class=\"hljs\">line-tables-only</code>.</li>\n<li><code class=\"hljs\">2</code>, <code class=\"hljs\">true</code>, or <code class=\"hljs\">\"full\"</code>: full debug info, default for <a href=\"reference/profiles.html#dev\"><code class=\"hljs\">dev</code></a></li>\n</ul>\n<p>For more information on what each option does see <code class=\"hljs\">rustc</code>’s docs on <a href=\"reference/../../rustc/codegen-options/index.html#debuginfo\">debuginfo</a>.</p>\n<p>You may wish to also configure the <a href=\"reference/profiles.html#split-debuginfo\"><code class=\"hljs\">split-debuginfo</code></a> option\ndepending on your needs as well.</p>\n<h3 id=\"split-debuginfo\"><a class=\"header\" href=\"#split-debuginfo\">split-debuginfo</a></h3>\n<p>The <code class=\"hljs\">split-debuginfo</code> setting controls the <a href=\"reference/../../rustc/codegen-options/index.html#split-debuginfo\"><code class=\"hljs\">-C split-debuginfo</code> flag</a> which\ncontrols whether debug information, if generated, is either placed in the\nexecutable itself or adjacent to it.</p>\n<p>This option is a string and acceptable values are the same as those the\n<a href=\"reference/../../rustc/codegen-options/index.html#split-debuginfo\">compiler accepts</a>. The default value for this option\nis <code class=\"hljs\">unpacked</code> on macOS for profiles that have debug information otherwise\nenabled. Otherwise the default for this option is <a href=\"reference/../../rustc/codegen-options/index.html#split-debuginfo\">documented with rustc</a> and is platform-specific. Some options are only\navailable on the <a href=\"reference/../../book/appendix-07-nightly-rust.html\">nightly channel</a>. The Cargo default may change in the future\nonce more testing has been performed, and support for DWARF is stabilized.</p>\n<p>Be aware that Cargo and rustc have different defaults for this option. This\noption exists to allow Cargo to experiment on different combinations of flags\nthus providing better debugging and developer experience.</p>\n<h3 id=\"strip\"><a class=\"header\" href=\"#strip\">strip</a></h3>\n<p>The <code class=\"hljs\">strip</code> option controls the <a href=\"reference/../../rustc/codegen-options/index.html#strip\"><code class=\"hljs\">-C strip</code> flag</a>, which directs rustc to\nstrip either symbols or debuginfo from a binary. This can be enabled like so:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n\n<span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">strip</span> = <span class=\"hljs-string\">\"debuginfo\"</span>\n</code></pre>\n<p>Possible string values of <code class=\"hljs\">strip</code> are <code class=\"hljs\">\"none\"</code>, <code class=\"hljs\">\"debuginfo\"</code>, and <code class=\"hljs\">\"symbols\"</code>.\nThe default is <code class=\"hljs\">\"none\"</code>.</p>\n<p>You can also configure this option with the boolean values <code class=\"hljs\">true</code> or <code class=\"hljs\">false</code>.\n<code class=\"hljs\">strip = true</code> is equivalent to <code class=\"hljs\">strip = \"symbols\"</code>. <code class=\"hljs\">strip = false</code> is\nequivalent to <code class=\"hljs\">strip = \"none\"</code> and disables <code class=\"hljs\">strip</code> completely.</p>\n<h3 id=\"debug-assertions\"><a class=\"header\" href=\"#debug-assertions\">debug-assertions</a></h3>\n<p>The <code class=\"hljs\">debug-assertions</code> setting controls the <a href=\"reference/../../rustc/codegen-options/index.html#debug-assertions\"><code class=\"hljs\">-C debug-assertions</code> flag</a> which\nturns <code class=\"hljs\">cfg(debug_assertions)</code> <a href=\"reference/../../reference/conditional-compilation.html#debug_assertions\">conditional compilation</a> on or off. Debug\nassertions are intended to include runtime validation which is only available\nin debug/development builds. These may be things that are too expensive or\notherwise undesirable in a release build. Debug assertions enables the\n<a href=\"reference/../../std/macro.debug_assert.html\"><code class=\"hljs\">debug_assert!</code> macro</a> in the standard library.</p>\n<p>The valid options are:</p>\n<ul>\n<li><code class=\"hljs\">true</code>: enabled</li>\n<li><code class=\"hljs\">false</code>: disabled</li>\n</ul>\n<h3 id=\"overflow-checks\"><a class=\"header\" href=\"#overflow-checks\">overflow-checks</a></h3>\n<p>The <code class=\"hljs\">overflow-checks</code> setting controls the <a href=\"reference/../../rustc/codegen-options/index.html#overflow-checks\"><code class=\"hljs\">-C overflow-checks</code> flag</a> which\ncontrols the behavior of <a href=\"reference/../../reference/expressions/operator-expr.html#overflow\">runtime integer overflow</a>. When overflow-checks are\nenabled, a panic will occur on overflow.</p>\n<p>The valid options are:</p>\n<ul>\n<li><code class=\"hljs\">true</code>: enabled</li>\n<li><code class=\"hljs\">false</code>: disabled</li>\n</ul>\n<h3 id=\"lto\"><a class=\"header\" href=\"#lto\">lto</a></h3>\n<p>The <code class=\"hljs\">lto</code> setting controls <code class=\"hljs\">rustc</code>’s <a href=\"reference/../../rustc/codegen-options/index.html#lto\"><code class=\"hljs\">-C lto</code></a>, <a href=\"reference/../../rustc/codegen-options/index.html#linker-plugin-lto\"><code class=\"hljs\">-C linker-plugin-lto</code></a>, and\n<a href=\"reference/../../rustc/codegen-options/index.html#embed-bitcode\"><code class=\"hljs\">-C embed-bitcode</code></a> options, which control LLVM’s <a href=\"https://llvm.org/docs/LinkTimeOptimization.html\">link time optimizations</a>.\nLTO can produce better optimized code, using whole-program analysis, at the cost\nof longer linking time.</p>\n<p>The valid options are:</p>\n<ul>\n<li><code class=\"hljs\">false</code>: Performs “thin local LTO” which performs “thin” LTO on the local\ncrate only across its <a href=\"reference/profiles.html#codegen-units\">codegen units</a>. No LTO is performed\nif codegen units is 1 or <a href=\"reference/profiles.html#opt-level\">opt-level</a> is 0.</li>\n<li><code class=\"hljs\">true</code> or <code class=\"hljs\">\"fat\"</code>: Performs “fat” LTO which attempts to perform\noptimizations across all crates within the dependency graph.</li>\n<li><code class=\"hljs\">\"thin\"</code>: Performs <a href=\"http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html\">“thin” LTO</a>. This is similar to “fat”, but takes\nsubstantially less time to run while still achieving performance gains\nsimilar to “fat”.</li>\n<li><code class=\"hljs\">\"off\"</code>: Disables LTO.</li>\n</ul>\n<p>See the <a href=\"reference/../../rustc/linker-plugin-lto.html\">linker-plugin-lto chapter</a> if you are interested in cross-language LTO.\nThis is not yet supported natively in Cargo, but can be performed via\n<code class=\"hljs\">RUSTFLAGS</code>.</p>\n<h3 id=\"panic\"><a class=\"header\" href=\"#panic\">panic</a></h3>\n<p>The <code class=\"hljs\">panic</code> setting controls the <a href=\"reference/../../rustc/codegen-options/index.html#panic\"><code class=\"hljs\">-C panic</code> flag</a> which controls which panic\nstrategy to use.</p>\n<p>The valid options are:</p>\n<ul>\n<li><code class=\"hljs\">\"unwind\"</code>: Unwind the stack upon panic.</li>\n<li><code class=\"hljs\">\"abort\"</code>: Terminate the process upon panic.</li>\n</ul>\n<p>When set to <code class=\"hljs\">\"unwind\"</code>, the actual value depends on the default of the target\nplatform. For example, the NVPTX platform does not support unwinding, so it\nalways uses <code class=\"hljs\">\"abort\"</code>.</p>\n<p>Tests, benchmarks, build scripts, and proc macros ignore the <code class=\"hljs\">panic</code> setting.\nThe <code class=\"hljs\">rustc</code> test harness currently requires <code class=\"hljs\">unwind</code> behavior. See the\n<a href=\"reference/unstable.html#panic-abort-tests\"><code class=\"hljs\">panic-abort-tests</code></a> unstable flag which enables <code class=\"hljs\">abort</code> behavior.</p>\n<p>Additionally, when using the <code class=\"hljs\">abort</code> strategy and building a test, all of the\ndependencies will also be forced to build with the <code class=\"hljs\">unwind</code> strategy.</p>\n<h3 id=\"incremental\"><a class=\"header\" href=\"#incremental\">incremental</a></h3>\n<p>The <code class=\"hljs\">incremental</code> setting controls the <a href=\"reference/../../rustc/codegen-options/index.html#incremental\"><code class=\"hljs\">-C incremental</code> flag</a> which controls\nwhether or not incremental compilation is enabled. Incremental compilation\ncauses <code class=\"hljs\">rustc</code> to save additional information to disk which will be reused\nwhen recompiling the crate, improving re-compile times. The additional\ninformation is stored in the <code class=\"hljs\">target</code> directory.</p>\n<p>The valid options are:</p>\n<ul>\n<li><code class=\"hljs\">true</code>: enabled</li>\n<li><code class=\"hljs\">false</code>: disabled</li>\n</ul>\n<p>Incremental compilation is only used for workspace members and “path”\ndependencies.</p>\n<p>The incremental value can be overridden globally with the <code class=\"hljs\">CARGO_INCREMENTAL</code>\n<a href=\"reference/environment-variables.html\">environment variable</a> or the <a href=\"reference/config.html#buildincremental\"><code class=\"hljs\">build.incremental</code></a> config variable.</p>\n<h3 id=\"codegen-units\"><a class=\"header\" href=\"#codegen-units\">codegen-units</a></h3>\n<p>The <code class=\"hljs\">codegen-units</code> setting controls the <a href=\"reference/../../rustc/codegen-options/index.html#codegen-units\"><code class=\"hljs\">-C codegen-units</code> flag</a> which\ncontrols how many “code generation units” a crate will be split into. More\ncode generation units allows more of a crate to be processed in parallel\npossibly reducing compile time, but may produce slower code.</p>\n<p>This option takes an integer greater than 0.</p>\n<p>The default is 256 for <a href=\"reference/profiles.html#incremental\">incremental</a> builds, and 16 for\nnon-incremental builds.</p>\n<h3 id=\"rpath\"><a class=\"header\" href=\"#rpath\">rpath</a></h3>\n<p>The <code class=\"hljs\">rpath</code> setting controls the <a href=\"reference/../../rustc/codegen-options/index.html#rpath\"><code class=\"hljs\">-C rpath</code> flag</a> which controls\nwhether or not <a href=\"https://en.wikipedia.org/wiki/Rpath\"><code class=\"hljs\">rpath</code></a> is enabled.</p>\n<h2 id=\"default-profiles\"><a class=\"header\" href=\"#default-profiles\">Default profiles</a></h2>\n<h3 id=\"dev\"><a class=\"header\" href=\"#dev\">dev</a></h3>\n<p>The <code class=\"hljs\">dev</code> profile is used for normal development and debugging. It is the\ndefault for build commands like <a href=\"reference/../commands/cargo-build.html\"><code class=\"hljs\">cargo build</code></a>, and is used for <code class=\"hljs\">cargo install --debug</code>.</p>\n<p>The default settings for the <code class=\"hljs\">dev</code> profile are:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[profile.dev]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">debug</span> = <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">split-debuginfo</span> = <span class=\"hljs-string\">'...'</span>  <span class=\"hljs-comment\"># Platform-specific.</span>\n<span class=\"hljs-attr\">strip</span> = <span class=\"hljs-string\">\"none\"</span>\n<span class=\"hljs-attr\">debug-assertions</span> = <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">overflow-checks</span> = <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">lto</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">panic</span> = <span class=\"hljs-string\">'unwind'</span>\n<span class=\"hljs-attr\">incremental</span> = <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">codegen-units</span> = <span class=\"hljs-number\">256</span>\n<span class=\"hljs-attr\">rpath</span> = <span class=\"hljs-literal\">false</span>\n</code></pre>\n<h3 id=\"release\"><a class=\"header\" href=\"#release\">release</a></h3>\n<p>The <code class=\"hljs\">release</code> profile is intended for optimized artifacts used for releases\nand in production. This profile is used when the <code class=\"hljs\">--release</code> flag is used, and\nis the default for <a href=\"reference/../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a>.</p>\n<p>The default settings for the <code class=\"hljs\">release</code> profile are:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attr\">debug</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">split-debuginfo</span> = <span class=\"hljs-string\">'...'</span>  <span class=\"hljs-comment\"># Platform-specific.</span>\n<span class=\"hljs-attr\">strip</span> = <span class=\"hljs-string\">\"none\"</span>\n<span class=\"hljs-attr\">debug-assertions</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">overflow-checks</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">lto</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">panic</span> = <span class=\"hljs-string\">'unwind'</span>\n<span class=\"hljs-attr\">incremental</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">codegen-units</span> = <span class=\"hljs-number\">16</span>\n<span class=\"hljs-attr\">rpath</span> = <span class=\"hljs-literal\">false</span>\n</code></pre>\n<h3 id=\"test\"><a class=\"header\" href=\"#test\">test</a></h3>\n<p>The <code class=\"hljs\">test</code> profile is the default profile used by <a href=\"reference/../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a>.\nThe <code class=\"hljs\">test</code> profile inherits the settings from the <a href=\"reference/profiles.html#dev\"><code class=\"hljs\">dev</code></a> profile.</p>\n<h3 id=\"bench\"><a class=\"header\" href=\"#bench\">bench</a></h3>\n<p>The <code class=\"hljs\">bench</code> profile is the default profile used by <a href=\"reference/../commands/cargo-bench.html\"><code class=\"hljs\">cargo bench</code></a>.\nThe <code class=\"hljs\">bench</code> profile inherits the settings from the <a href=\"reference/profiles.html#release\"><code class=\"hljs\">release</code></a> profile.</p>\n<h3 id=\"build-dependencies-1\"><a class=\"header\" href=\"#build-dependencies-1\">Build Dependencies</a></h3>\n<p>To compile quickly, all profiles, by default, do not optimize build\ndependencies (build scripts, proc macros, and their dependencies), and avoid\ncomputing debug info when a build dependency is not used as a runtime\ndependency. The default settings for build overrides are:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[profile.dev.build-override]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">codegen-units</span> = <span class=\"hljs-number\">256</span>\n<span class=\"hljs-attr\">debug</span> = <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># when possible</span>\n\n<span class=\"hljs-section\">[profile.release.build-override]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">codegen-units</span> = <span class=\"hljs-number\">256</span>\n</code></pre>\n<p>However, if errors occur while running build dependencies, turning full debug\ninfo on will improve backtraces and debuggability when needed:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">debug</span> = <span class=\"hljs-literal\">true</span>\n</code></pre>\n<p>Build dependencies otherwise inherit settings from the active profile in use, as\ndescribed in <a href=\"reference/profiles.html#profile-selection\">Profile selection</a>.</p>\n<h2 id=\"custom-profiles\"><a class=\"header\" href=\"#custom-profiles\">Custom profiles</a></h2>\n<p>In addition to the built-in profiles, additional custom profiles can be\ndefined. These may be useful for setting up multiple workflows and build\nmodes. When defining a custom profile, you must specify the <code class=\"hljs\">inherits</code> key to\nspecify which profile the custom profile inherits settings from when the\nsetting is not specified.</p>\n<p>For example, let’s say you want to compare a normal release build with a\nrelease build with <a href=\"reference/profiles.html#lto\">LTO</a> optimizations, you can specify something like\nthe following in <code class=\"hljs\">Cargo.toml</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[profile.release-lto]</span>\n<span class=\"hljs-attr\">inherits</span> = <span class=\"hljs-string\">\"release\"</span>\n<span class=\"hljs-attr\">lto</span> = <span class=\"hljs-literal\">true</span>\n</code></pre>\n<p>The <code class=\"hljs\">--profile</code> flag can then be used to choose this custom profile:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">cargo build --profile release-lto\n</code></pre>\n<p>The output for each profile will be placed in a directory of the same name\nas the profile in the <a href=\"reference/../guide/build-cache.html\"><code class=\"hljs\">target</code> directory</a>. As in the example above, the\noutput would go into the <code class=\"hljs\">target/release-lto</code> directory.</p>\n<h2 id=\"profile-selection\"><a class=\"header\" href=\"#profile-selection\">Profile selection</a></h2>\n<p>The profile used depends on the command, the command-line flags like\n<code class=\"hljs\">--release</code> or <code class=\"hljs\">--profile</code>, and the package (in the case of\n<a href=\"reference/profiles.html#overrides\">overrides</a>). The default profile if none is specified is:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Command</th><th>Default Profile</th></tr></thead><tbody>\n<tr><td><a href=\"reference/../commands/cargo-run.html\"><code class=\"hljs\">cargo run</code></a>, <a href=\"reference/../commands/cargo-build.html\"><code class=\"hljs\">cargo build</code></a>,<br><a href=\"reference/../commands/cargo-check.html\"><code class=\"hljs\">cargo check</code></a>, <a href=\"reference/../commands/cargo-rustc.html\"><code class=\"hljs\">cargo rustc</code></a></td><td><a href=\"reference/profiles.html#dev\"><code class=\"hljs\">dev</code> profile</a></td></tr>\n<tr><td><a href=\"reference/../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a></td><td><a href=\"reference/profiles.html#test\"><code class=\"hljs\">test</code> profile</a></td></tr>\n<tr><td><a href=\"reference/../commands/cargo-bench.html\"><code class=\"hljs\">cargo bench</code></a></td><td><a href=\"reference/profiles.html#bench\"><code class=\"hljs\">bench</code> profile</a></td></tr>\n<tr><td><a href=\"reference/../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a></td><td><a href=\"reference/profiles.html#release\"><code class=\"hljs\">release</code> profile</a></td></tr>\n</tbody></table>\n</div>\n<p>You can switch to a different profile using the <code class=\"hljs\">--profile=NAME</code> option which will used the given profile.\nThe <code class=\"hljs\">--release</code> flag is equivalent to <code class=\"hljs\">--profile=release</code>.</p>\n<p>The selected profile applies to all Cargo targets,\nincluding <a href=\"reference/./cargo-targets.html#library\">library</a>,\n<a href=\"reference/./cargo-targets.html#binaries\">binary</a>,\n<a href=\"reference/./cargo-targets.html#examples\">example</a>,\n<a href=\"reference/./cargo-targets.html#tests\">test</a>,\nand <a href=\"reference/./cargo-targets.html#benchmarks\">benchmark</a>.</p>\n<p>The profile for specific packages can be specified with\n<a href=\"reference/profiles.html#overrides\">overrides</a>, described below.</p>\n<h2 id=\"overrides\"><a class=\"header\" href=\"#overrides\">Overrides</a></h2>\n<p>Profile settings can be overridden for specific packages and build-time\ncrates. To override the settings for a specific package, use the <code class=\"hljs\">package</code>\ntable to change the settings for the named package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># The `foo` package will use the -Copt-level=3 flag.</span>\n<span class=\"hljs-section\">[profile.dev.package.foo]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>The package name is actually a <a href=\"reference/pkgid-spec.html\">Package ID Spec</a>, so you can\ntarget individual versions of a package with syntax such as\n<code class=\"hljs\">[profile.dev.package.\"foo:2.1.0\"]</code>.</p>\n<p>To override the settings for all dependencies (but not any workspace member),\nuse the <code class=\"hljs\">\"*\"</code> package name:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Set the default for dependencies.</span>\n<span class=\"hljs-section\">[profile.dev.package.\"*\"]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>To override the settings for build scripts, proc macros, and their\ndependencies, use the <code class=\"hljs\">build-override</code> table:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Set the settings for build scripts and proc-macros.</span>\n<span class=\"hljs-section\">[profile.dev.build-override]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">3</span>\n</code></pre>\n<blockquote>\n<p>Note: When a dependency is both a normal dependency and a build dependency,\nCargo will try to only build it once when <code class=\"hljs\">--target</code> is not specified. When\nusing <code class=\"hljs\">build-override</code>, the dependency may need to be built twice, once as a\nnormal dependency and once with the overridden build settings. This may\nincrease initial build times.</p>\n</blockquote>\n<p>The precedence for which value is used is done in the following order (first\nmatch wins):</p>\n<ol>\n<li><code class=\"hljs\">[profile.dev.package.name]</code> — A named package.</li>\n<li><code class=\"hljs\">[profile.dev.package.\"*\"]</code> — For any non-workspace member.</li>\n<li><code class=\"hljs\">[profile.dev.build-override]</code> — Only for build scripts, proc macros, and\ntheir dependencies.</li>\n<li><code class=\"hljs\">[profile.dev]</code> — Settings in <code class=\"hljs\">Cargo.toml</code>.</li>\n<li>Default values built-in to Cargo.</li>\n</ol>\n<p>Overrides cannot specify the <code class=\"hljs\">panic</code>, <code class=\"hljs\">lto</code>, or <code class=\"hljs\">rpath</code> settings.</p>\n<h3 id=\"overrides-and-generics\"><a class=\"header\" href=\"#overrides-and-generics\">Overrides and generics</a></h3>\n<p>The location where generic code is instantiated will influence the\noptimization settings used for that generic code. This can cause subtle\ninteractions when using profile overrides to change the optimization level of\na specific crate. If you attempt to raise the optimization level of a\ndependency which defines generic functions, those generic functions may not be\noptimized when used in your local crate. This is because the code may be\ngenerated in the crate where it is instantiated, and thus may use the\noptimization settings of that crate.</p>\n<p>For example, <a href=\"https://crates.io/crates/nalgebra\">nalgebra</a> is a library which defines vectors and matrices making\nheavy use of generic parameters. If your local code defines concrete nalgebra\ntypes like <code class=\"hljs\">Vector4&lt;f64&gt;</code> and uses their methods, the corresponding nalgebra\ncode will be instantiated and built within your crate. Thus, if you attempt to\nincrease the optimization level of <code class=\"hljs\">nalgebra</code> using a profile override, it may\nnot result in faster performance.</p>\n<p>Further complicating the issue, <code class=\"hljs\">rustc</code> has some optimizations where it will\nattempt to share monomorphized generics between crates. If the opt-level is 2\nor 3, then a crate will not use monomorphized generics from other crates, nor\nwill it export locally defined monomorphized items to be shared with other\ncrates. When experimenting with optimizing dependencies for development,\nconsider trying opt-level 1, which will apply some optimizations while still\nallowing monomorphized items to be shared.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h1>\n<p>This document explains how Cargo’s configuration system works, as well as\navailable keys or configuration. For configuration of a package through its\nmanifest, see the <a href=\"reference/manifest.html\">manifest format</a>.</p>\n<h2 id=\"hierarchical-structure\"><a class=\"header\" href=\"#hierarchical-structure\">Hierarchical structure</a></h2>\n<p>Cargo allows local configuration for a particular package as well as global\nconfiguration. It looks for configuration files in the current directory and\nall parent directories. If, for example, Cargo were invoked in\n<code class=\"hljs\">/projects/foo/bar/baz</code>, then the following configuration files would be\nprobed for and unified in this order:</p>\n<ul>\n<li><code class=\"hljs\">/projects/foo/bar/baz/.cargo/config.toml</code></li>\n<li><code class=\"hljs\">/projects/foo/bar/.cargo/config.toml</code></li>\n<li><code class=\"hljs\">/projects/foo/.cargo/config.toml</code></li>\n<li><code class=\"hljs\">/projects/.cargo/config.toml</code></li>\n<li><code class=\"hljs\">/.cargo/config.toml</code></li>\n<li><code class=\"hljs\">$CARGO_HOME/config.toml</code> which defaults to:\n<ul>\n<li>Windows: <code class=\"hljs\">%USERPROFILE%\\.cargo\\config.toml</code></li>\n<li>Unix: <code class=\"hljs\">$HOME/.cargo/config.toml</code></li>\n</ul>\n</li>\n</ul>\n<p>With this structure, you can specify configuration per-package, and even\npossibly check it into version control. You can also specify personal defaults\nwith a configuration file in your home directory.</p>\n<p>If a key is specified in multiple config files, the values will get merged\ntogether. Numbers, strings, and booleans will use the value in the deeper\nconfig directory taking precedence over ancestor directories, where the\nhome directory is the lowest priority. Arrays will be joined together\nwith higher precedence items being placed later in the merged array.</p>\n<p>At present, when being invoked from a workspace, Cargo does not read config\nfiles from crates within the workspace. i.e. if a workspace has two crates in\nit, named <code class=\"hljs\">/projects/foo/bar/baz/mylib</code> and <code class=\"hljs\">/projects/foo/bar/baz/mybin</code>, and\nthere are Cargo configs at <code class=\"hljs\">/projects/foo/bar/baz/mylib/.cargo/config.toml</code>\nand <code class=\"hljs\">/projects/foo/bar/baz/mybin/.cargo/config.toml</code>, Cargo does not read\nthose configuration files if it is invoked from the workspace root\n(<code class=\"hljs\">/projects/foo/bar/baz/</code>).</p>\n<blockquote>\n<p><strong>Note:</strong> Cargo also reads config files without the <code class=\"hljs\">.toml</code> extension, such as\n<code class=\"hljs\">.cargo/config</code>. Support for the <code class=\"hljs\">.toml</code> extension was added in version 1.39\nand is the preferred form. If both files exist, Cargo will use the file\nwithout the extension.</p>\n</blockquote>\n<h2 id=\"configuration-format\"><a class=\"header\" href=\"#configuration-format\">Configuration format</a></h2>\n<p>Configuration files are written in the <a href=\"https://toml.io/\">TOML format</a> (like the\nmanifest), with simple key-value pairs inside of sections (tables). The\nfollowing is a quick overview of all settings, with detailed descriptions\nfound below.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">paths</span> = [<span class=\"hljs-string\">\"/path/to/override\"</span>] <span class=\"hljs-comment\"># path dependency overrides</span>\n\n<span class=\"hljs-section\">[alias]</span>     <span class=\"hljs-comment\"># command aliases</span>\n<span class=\"hljs-attr\">b</span> = <span class=\"hljs-string\">\"build\"</span>\n<span class=\"hljs-attr\">c</span> = <span class=\"hljs-string\">\"check\"</span>\n<span class=\"hljs-attr\">t</span> = <span class=\"hljs-string\">\"test\"</span>\n<span class=\"hljs-attr\">r</span> = <span class=\"hljs-string\">\"run\"</span>\n<span class=\"hljs-attr\">rr</span> = <span class=\"hljs-string\">\"run --release\"</span>\n<span class=\"hljs-attr\">recursive_example</span> = <span class=\"hljs-string\">\"rr --example recursions\"</span>\n<span class=\"hljs-attr\">space_example</span> = [<span class=\"hljs-string\">\"run\"</span>, <span class=\"hljs-string\">\"--release\"</span>, <span class=\"hljs-string\">\"--\"</span>, <span class=\"hljs-string\">\"\\\"command list\\\"\"</span>]\n\n<span class=\"hljs-section\">[build]</span>\n<span class=\"hljs-attr\">jobs</span> = <span class=\"hljs-number\">1</span>                      <span class=\"hljs-comment\"># number of parallel jobs, defaults to # of CPUs</span>\n<span class=\"hljs-attr\">rustc</span> = <span class=\"hljs-string\">\"rustc\"</span>               <span class=\"hljs-comment\"># the rust compiler tool</span>\n<span class=\"hljs-attr\">rustc-wrapper</span> = <span class=\"hljs-string\">\"…\"</span>           <span class=\"hljs-comment\"># run this wrapper instead of `rustc`</span>\n<span class=\"hljs-attr\">rustc-workspace-wrapper</span> = <span class=\"hljs-string\">\"…\"</span> <span class=\"hljs-comment\"># run this wrapper instead of `rustc` for workspace members</span>\n<span class=\"hljs-attr\">rustdoc</span> = <span class=\"hljs-string\">\"rustdoc\"</span>           <span class=\"hljs-comment\"># the doc generator tool</span>\n<span class=\"hljs-attr\">target</span> = <span class=\"hljs-string\">\"triple\"</span>             <span class=\"hljs-comment\"># build for the target triple (ignored by `cargo install`)</span>\n<span class=\"hljs-attr\">target-dir</span> = <span class=\"hljs-string\">\"target\"</span>         <span class=\"hljs-comment\"># path of where to place all generated artifacts</span>\n<span class=\"hljs-attr\">rustflags</span> = [<span class=\"hljs-string\">\"…\"</span>, <span class=\"hljs-string\">\"…\"</span>]        <span class=\"hljs-comment\"># custom flags to pass to all compiler invocations</span>\n<span class=\"hljs-attr\">rustdocflags</span> = [<span class=\"hljs-string\">\"…\"</span>, <span class=\"hljs-string\">\"…\"</span>]     <span class=\"hljs-comment\"># custom flags to pass to rustdoc</span>\n<span class=\"hljs-attr\">incremental</span> = <span class=\"hljs-literal\">true</span>            <span class=\"hljs-comment\"># whether or not to enable incremental compilation</span>\n<span class=\"hljs-attr\">dep-info-basedir</span> = <span class=\"hljs-string\">\"…\"</span>        <span class=\"hljs-comment\"># path for the base directory for targets in depfiles</span>\n\n<span class=\"hljs-section\">[doc]</span>\n<span class=\"hljs-attr\">browser</span> = <span class=\"hljs-string\">\"chromium\"</span>          <span class=\"hljs-comment\"># browser to use with `cargo doc --open`,</span>\n                              <span class=\"hljs-comment\"># overrides the `BROWSER` environment variable</span>\n\n<span class=\"hljs-section\">[env]</span>\n<span class=\"hljs-comment\"># Set ENV_VAR_NAME=value for any process run by Cargo</span>\n<span class=\"hljs-attr\">ENV_VAR_NAME</span> = <span class=\"hljs-string\">\"value\"</span>\n<span class=\"hljs-comment\"># Set even if already present in environment</span>\n<span class=\"hljs-attr\">ENV_VAR_NAME_2</span> = { value = <span class=\"hljs-string\">\"value\"</span>, force = <span class=\"hljs-literal\">true</span> }\n<span class=\"hljs-comment\"># Value is relative to .cargo directory containing `config.toml`, make absolute</span>\n<span class=\"hljs-attr\">ENV_VAR_NAME_3</span> = { value = <span class=\"hljs-string\">\"relative/path\"</span>, relative = <span class=\"hljs-literal\">true</span> }\n\n<span class=\"hljs-section\">[future-incompat-report]</span>\n<span class=\"hljs-attr\">frequency</span> = <span class=\"hljs-string\">'always'</span> <span class=\"hljs-comment\"># when to display a notification about a future incompat report</span>\n\n<span class=\"hljs-section\">[cargo-new]</span>\n<span class=\"hljs-attr\">vcs</span> = <span class=\"hljs-string\">\"none\"</span>              <span class=\"hljs-comment\"># VCS to use ('git', 'hg', 'pijul', 'fossil', 'none')</span>\n\n<span class=\"hljs-section\">[http]</span>\n<span class=\"hljs-attr\">debug</span> = <span class=\"hljs-literal\">false</span>               <span class=\"hljs-comment\"># HTTP debugging</span>\n<span class=\"hljs-attr\">proxy</span> = <span class=\"hljs-string\">\"host:port\"</span>         <span class=\"hljs-comment\"># HTTP proxy in libcurl format</span>\n<span class=\"hljs-attr\">ssl-version</span> = <span class=\"hljs-string\">\"tlsv1.3\"</span>     <span class=\"hljs-comment\"># TLS version to use</span>\n<span class=\"hljs-attr\">ssl-version.max</span> = <span class=\"hljs-string\">\"tlsv1.3\"</span> <span class=\"hljs-comment\"># maximum TLS version</span>\n<span class=\"hljs-attr\">ssl-version.min</span> = <span class=\"hljs-string\">\"tlsv1.1\"</span> <span class=\"hljs-comment\"># minimum TLS version</span>\n<span class=\"hljs-attr\">timeout</span> = <span class=\"hljs-number\">30</span>                <span class=\"hljs-comment\"># timeout for each HTTP request, in seconds</span>\n<span class=\"hljs-attr\">low-speed-limit</span> = <span class=\"hljs-number\">10</span>        <span class=\"hljs-comment\"># network timeout threshold (bytes/sec)</span>\n<span class=\"hljs-attr\">cainfo</span> = <span class=\"hljs-string\">\"cert.pem\"</span>         <span class=\"hljs-comment\"># path to Certificate Authority (CA) bundle</span>\n<span class=\"hljs-attr\">check-revoke</span> = <span class=\"hljs-literal\">true</span>         <span class=\"hljs-comment\"># check for SSL certificate revocation</span>\n<span class=\"hljs-attr\">multiplexing</span> = <span class=\"hljs-literal\">true</span>         <span class=\"hljs-comment\"># HTTP/2 multiplexing</span>\n<span class=\"hljs-attr\">user-agent</span> = <span class=\"hljs-string\">\"…\"</span>            <span class=\"hljs-comment\"># the user-agent header</span>\n\n<span class=\"hljs-section\">[install]</span>\n<span class=\"hljs-attr\">root</span> = <span class=\"hljs-string\">\"/some/path\"</span>         <span class=\"hljs-comment\"># `cargo install` destination directory</span>\n\n<span class=\"hljs-section\">[net]</span>\n<span class=\"hljs-attr\">retry</span> = <span class=\"hljs-number\">3</span>                   <span class=\"hljs-comment\"># network retries</span>\n<span class=\"hljs-attr\">git-fetch-with-cli</span> = <span class=\"hljs-literal\">true</span>   <span class=\"hljs-comment\"># use the `git` executable for git operations</span>\n<span class=\"hljs-attr\">offline</span> = <span class=\"hljs-literal\">true</span>              <span class=\"hljs-comment\"># do not access the network</span>\n\n<span class=\"hljs-section\">[net.ssh]</span>\n<span class=\"hljs-attr\">known-hosts</span> = [<span class=\"hljs-string\">\"...\"</span>]       <span class=\"hljs-comment\"># known SSH host keys</span>\n\n<span class=\"hljs-section\">[patch.&lt;registry&gt;]</span>\n<span class=\"hljs-comment\"># Same keys as for [patch] in Cargo.toml</span>\n\n<span class=\"hljs-section\">[profile.&lt;name&gt;]</span>         <span class=\"hljs-comment\"># Modify profile settings via config.</span>\n<span class=\"hljs-attr\">inherits</span> = <span class=\"hljs-string\">\"dev\"</span>         <span class=\"hljs-comment\"># Inherits settings from [profile.dev].</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">0</span>            <span class=\"hljs-comment\"># Optimization level.</span>\n<span class=\"hljs-attr\">debug</span> = <span class=\"hljs-literal\">true</span>             <span class=\"hljs-comment\"># Include debug info.</span>\n<span class=\"hljs-attr\">split-debuginfo</span> = <span class=\"hljs-string\">'...'</span>  <span class=\"hljs-comment\"># Debug info splitting behavior.</span>\n<span class=\"hljs-attr\">strip</span> = <span class=\"hljs-string\">\"none\"</span>           <span class=\"hljs-comment\"># Removes symbols or debuginfo.</span>\n<span class=\"hljs-attr\">debug-assertions</span> = <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\"># Enables debug assertions.</span>\n<span class=\"hljs-attr\">overflow-checks</span> = <span class=\"hljs-literal\">true</span>   <span class=\"hljs-comment\"># Enables runtime integer overflow checks.</span>\n<span class=\"hljs-attr\">lto</span> = <span class=\"hljs-literal\">false</span>              <span class=\"hljs-comment\"># Sets link-time optimization.</span>\n<span class=\"hljs-attr\">panic</span> = <span class=\"hljs-string\">'unwind'</span>         <span class=\"hljs-comment\"># The panic strategy.</span>\n<span class=\"hljs-attr\">incremental</span> = <span class=\"hljs-literal\">true</span>       <span class=\"hljs-comment\"># Incremental compilation.</span>\n<span class=\"hljs-attr\">codegen-units</span> = <span class=\"hljs-number\">16</span>       <span class=\"hljs-comment\"># Number of code generation units.</span>\n<span class=\"hljs-attr\">rpath</span> = <span class=\"hljs-literal\">false</span>            <span class=\"hljs-comment\"># Sets the rpath linking option.</span>\n<span class=\"hljs-section\">[profile.&lt;name&gt;.build-override]</span>  <span class=\"hljs-comment\"># Overrides build-script settings.</span>\n<span class=\"hljs-comment\"># Same keys for a normal profile.</span>\n<span class=\"hljs-section\">[profile.&lt;name&gt;.package.&lt;name&gt;]</span>  <span class=\"hljs-comment\"># Override profile for a package.</span>\n<span class=\"hljs-comment\"># Same keys for a normal profile (minus `panic`, `lto`, and `rpath`).</span>\n\n<span class=\"hljs-section\">[registries.&lt;name&gt;]</span>  <span class=\"hljs-comment\"># registries other than crates.io</span>\n<span class=\"hljs-attr\">index</span> = <span class=\"hljs-string\">\"…\"</span>          <span class=\"hljs-comment\"># URL of the registry index</span>\n<span class=\"hljs-attr\">token</span> = <span class=\"hljs-string\">\"…\"</span>          <span class=\"hljs-comment\"># authentication token for the registry</span>\n\n<span class=\"hljs-section\">[registry]</span>\n<span class=\"hljs-attr\">default</span> = <span class=\"hljs-string\">\"…\"</span>        <span class=\"hljs-comment\"># name of the default registry</span>\n<span class=\"hljs-attr\">token</span> = <span class=\"hljs-string\">\"…\"</span>          <span class=\"hljs-comment\"># authentication token for crates.io</span>\n\n<span class=\"hljs-section\">[source.&lt;name&gt;]</span>      <span class=\"hljs-comment\"># source definition and replacement</span>\n<span class=\"hljs-attr\">replace-with</span> = <span class=\"hljs-string\">\"…\"</span>   <span class=\"hljs-comment\"># replace this source with the given named source</span>\n<span class=\"hljs-attr\">directory</span> = <span class=\"hljs-string\">\"…\"</span>      <span class=\"hljs-comment\"># path to a directory source</span>\n<span class=\"hljs-attr\">registry</span> = <span class=\"hljs-string\">\"…\"</span>       <span class=\"hljs-comment\"># URL to a registry source</span>\n<span class=\"hljs-attr\">local-registry</span> = <span class=\"hljs-string\">\"…\"</span> <span class=\"hljs-comment\"># path to a local registry source</span>\n<span class=\"hljs-attr\">git</span> = <span class=\"hljs-string\">\"…\"</span>            <span class=\"hljs-comment\"># URL of a git repository source</span>\n<span class=\"hljs-attr\">branch</span> = <span class=\"hljs-string\">\"…\"</span>         <span class=\"hljs-comment\"># branch name for the git repository</span>\n<span class=\"hljs-attr\">tag</span> = <span class=\"hljs-string\">\"…\"</span>            <span class=\"hljs-comment\"># tag name for the git repository</span>\n<span class=\"hljs-attr\">rev</span> = <span class=\"hljs-string\">\"…\"</span>            <span class=\"hljs-comment\"># revision for the git repository</span>\n\n<span class=\"hljs-section\">[target.&lt;triple&gt;]</span>\n<span class=\"hljs-attr\">linker</span> = <span class=\"hljs-string\">\"…\"</span>              <span class=\"hljs-comment\"># linker to use</span>\n<span class=\"hljs-attr\">runner</span> = <span class=\"hljs-string\">\"…\"</span>              <span class=\"hljs-comment\"># wrapper to run executables</span>\n<span class=\"hljs-attr\">rustflags</span> = [<span class=\"hljs-string\">\"…\"</span>, <span class=\"hljs-string\">\"…\"</span>]    <span class=\"hljs-comment\"># custom flags for `rustc`</span>\n<span class=\"hljs-attr\">rustdocflags</span> = [<span class=\"hljs-string\">\"…\"</span>, <span class=\"hljs-string\">\"…\"</span>] <span class=\"hljs-comment\"># custom flags for `rustdoc`</span>\n\n<span class=\"hljs-section\">[target.&lt;cfg&gt;]</span>\n<span class=\"hljs-attr\">runner</span> = <span class=\"hljs-string\">\"…\"</span>            <span class=\"hljs-comment\"># wrapper to run executables</span>\n<span class=\"hljs-attr\">rustflags</span> = [<span class=\"hljs-string\">\"…\"</span>, <span class=\"hljs-string\">\"…\"</span>]  <span class=\"hljs-comment\"># custom flags for `rustc`</span>\n\n<span class=\"hljs-section\">[target.&lt;triple&gt;.&lt;links&gt;]</span> <span class=\"hljs-comment\"># `links` build script override</span>\n<span class=\"hljs-attr\">rustc-link-lib</span> = [<span class=\"hljs-string\">\"foo\"</span>]\n<span class=\"hljs-attr\">rustc-link-search</span> = [<span class=\"hljs-string\">\"/path/to/foo\"</span>]\n<span class=\"hljs-attr\">rustc-flags</span> = <span class=\"hljs-string\">\"-L /some/path\"</span>\n<span class=\"hljs-attr\">rustc-cfg</span> = [<span class=\"hljs-string\">'key=\"value\"'</span>]\n<span class=\"hljs-attr\">rustc-env</span> = {key = <span class=\"hljs-string\">\"value\"</span>}\n<span class=\"hljs-attr\">rustc-cdylib-link-arg</span> = [<span class=\"hljs-string\">\"…\"</span>]\n<span class=\"hljs-attr\">metadata_key1</span> = <span class=\"hljs-string\">\"value\"</span>\n<span class=\"hljs-attr\">metadata_key2</span> = <span class=\"hljs-string\">\"value\"</span>\n\n<span class=\"hljs-section\">[term]</span>\n<span class=\"hljs-attr\">quiet</span> = <span class=\"hljs-literal\">false</span>          <span class=\"hljs-comment\"># whether cargo output is quiet</span>\n<span class=\"hljs-attr\">verbose</span> = <span class=\"hljs-literal\">false</span>        <span class=\"hljs-comment\"># whether cargo provides verbose output</span>\n<span class=\"hljs-attr\">color</span> = <span class=\"hljs-string\">'auto'</span>         <span class=\"hljs-comment\"># whether cargo colorizes output</span>\n<span class=\"hljs-attr\">hyperlinks</span> = <span class=\"hljs-literal\">true</span>      <span class=\"hljs-comment\"># whether cargo inserts links into output</span>\n<span class=\"hljs-attr\">unicode</span> = <span class=\"hljs-literal\">true</span>         <span class=\"hljs-comment\"># whether cargo can render output using non-ASCII unicode characters</span>\n<span class=\"hljs-attr\">progress.when</span> = <span class=\"hljs-string\">'auto'</span> <span class=\"hljs-comment\"># whether cargo shows progress bar</span>\n<span class=\"hljs-attr\">progress.width</span> = <span class=\"hljs-number\">80</span>    <span class=\"hljs-comment\"># width of progress bar</span>\n</code></pre>\n<h2 id=\"environment-variables\"><a class=\"header\" href=\"#environment-variables\">Environment variables</a></h2>\n<p>Cargo can also be configured through environment variables in addition to the\nTOML configuration files. For each configuration key of the form <code class=\"hljs\">foo.bar</code> the\nenvironment variable <code class=\"hljs\">CARGO_FOO_BAR</code> can also be used to define the value.\nKeys are converted to uppercase, dots and dashes are converted to underscores.\nFor example the <code class=\"hljs\">target.x86_64-unknown-linux-gnu.runner</code> key can also be\ndefined by the <code class=\"hljs\">CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER</code> environment\nvariable.</p>\n<p>Environment variables will take precedence over TOML configuration files.\nCurrently only integer, boolean, string and some array values are supported to\nbe defined by environment variables. <a href=\"reference/config.html#configuration-keys\">Descriptions below</a>\nindicate which keys support environment variables and otherwise they are not\nsupported due to <a href=\"https://github.com/rust-lang/cargo/issues/5416\">technical issues</a>.</p>\n<p>In addition to the system above, Cargo recognizes a few other specific\n<a href=\"reference/environment-variables.html\">environment variables</a>.</p>\n<h2 id=\"command-line-overrides\"><a class=\"header\" href=\"#command-line-overrides\">Command-line overrides</a></h2>\n<p>Cargo also accepts arbitrary configuration overrides through the\n<code class=\"hljs\">--config</code> command-line option. The argument should be in TOML syntax of\n<code class=\"hljs\">KEY=VALUE</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">cargo --config net.git-fetch-with-cli=true fetch\n</code></pre>\n<p>The <code class=\"hljs\">--config</code> option may be specified multiple times, in which case the\nvalues are merged in left-to-right order, using the same merging logic\nthat is used when multiple configuration files apply. Configuration\nvalues specified this way take precedence over environment variables,\nwhich take precedence over configuration files.</p>\n<p>Some examples of what it looks like using Bourne shell syntax:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> Most shells will require escaping.</span>\ncargo --config http.proxy=\\\"http://example.com\\\" …\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Spaces may be used.</span>\ncargo --config \"net.git-fetch-with-cli = true\" …\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> TOML array example. Single quotes make it easier to <span class=\"hljs-built_in\">read</span> and write.</span>\ncargo --config 'build.rustdocflags = [\"--html-in-header\", \"header.html\"]' …\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Example of a complex TOML key.</span>\ncargo --config \"target.'cfg(all(target_arch = \\\"arm\\\", target_os = \\\"none\\\"))'.runner = 'my-runner'\" …\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Example of overriding a profile setting.</span>\ncargo --config profile.dev.package.image.opt-level=3 …\n</code></pre>\n<p>The <code class=\"hljs\">--config</code> option can also be used to pass paths to extra\nconfiguration files that Cargo should use for a specific invocation.\nOptions from configuration files loaded this way follow the same\nprecedence rules as other options specified directly with <code class=\"hljs\">--config</code>.</p>\n<h2 id=\"config-relative-paths\"><a class=\"header\" href=\"#config-relative-paths\">Config-relative paths</a></h2>\n<p>Paths in config files may be absolute, relative, or a bare name without any path separators.\nPaths for executables without a path separator will use the <code class=\"hljs\">PATH</code> environment variable to search for the executable.\nPaths for non-executables will be relative to where the config value is defined.</p>\n<p>In particular, rules are:</p>\n<ul>\n<li>For environment variables, paths are relative to the current working directory.</li>\n<li>For config values loaded directly from the <a href=\"reference/config.html#command-line-overrides\"><code class=\"hljs\">--config KEY=VALUE</code></a> option,\npaths are relative to the current working directory.</li>\n<li>For config files, paths are relative to the parent directory of the directory where the config files were defined,\nno matter those files are from either the <a href=\"reference/config.html#hierarchical-structure\">hierarchical probing</a>\nor the <a href=\"reference/config.html#command-line-overrides\"><code class=\"hljs\">--config &lt;path&gt;</code></a> option.</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> To maintain consistency with existing <code class=\"hljs\">.cargo/config.toml</code> probing behavior,\nit is by design that a path in a config file passed via <code class=\"hljs\">--config &lt;path&gt;</code>\nis also relative to two levels up from the config file itself.</p>\n<p>To avoid unexpected results, the rule of thumb is putting your extra config files\nat the same level of discovered <code class=\"hljs\">.cargo/config.toml</code> in your project.\nFor instance, given a project <code class=\"hljs\">/my/project</code>,\nit is recommended to put config files under <code class=\"hljs\">/my/project/.cargo</code>\nor a new directory at the same level, such as <code class=\"hljs\">/my/project/.config</code>.</p>\n</blockquote>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Relative path examples.</span>\n\n<span class=\"hljs-section\">[target.x86_64-unknown-linux-gnu]</span>\n<span class=\"hljs-attr\">runner</span> = <span class=\"hljs-string\">\"foo\"</span>  <span class=\"hljs-comment\"># Searches `PATH` for `foo`.</span>\n\n<span class=\"hljs-section\">[source.vendored-sources]</span>\n<span class=\"hljs-comment\"># Directory is relative to the parent where `.cargo/config.toml` is located.</span>\n<span class=\"hljs-comment\"># For example, `/my/project/.cargo/config.toml` would result in `/my/project/vendor`.</span>\n<span class=\"hljs-attr\">directory</span> = <span class=\"hljs-string\">\"vendor\"</span>\n</code></pre>\n<h2 id=\"executable-paths-with-arguments\"><a class=\"header\" href=\"#executable-paths-with-arguments\">Executable paths with arguments</a></h2>\n<p>Some Cargo commands invoke external programs, which can be configured as a path\nand some number of arguments.</p>\n<p>The value may be an array of strings like <code class=\"hljs\">['/path/to/program', 'somearg']</code> or\na space-separated string like <code class=\"hljs\">'/path/to/program somearg'</code>. If the path to the\nexecutable contains a space, the list form must be used.</p>\n<p>If Cargo is passing other arguments to the program such as a path to open or\nrun, they will be passed after the last specified argument in the value of an\noption of this format. If the specified program does not have path separators,\nCargo will search <code class=\"hljs\">PATH</code> for its executable.</p>\n<h2 id=\"credentials\"><a class=\"header\" href=\"#credentials\">Credentials</a></h2>\n<p>Configuration values with sensitive information are stored in the\n<code class=\"hljs\">$CARGO_HOME/credentials.toml</code> file. This file is automatically created and updated\nby <a href=\"reference/../commands/cargo-login.html\"><code class=\"hljs\">cargo login</code></a> and <a href=\"reference/../commands/cargo-logout.html\"><code class=\"hljs\">cargo logout</code></a> when using the <a href=\"reference/registry-authentication.html#cargotoken\"><code class=\"hljs\">cargo:token</code></a> credential provider.</p>\n<p>Tokens are used by some Cargo commands such as <a href=\"reference/../commands/cargo-publish.html\"><code class=\"hljs\">cargo publish</code></a> for\nauthenticating with remote registries. Care should be taken to protect the\ntokens and to keep them secret.</p>\n<p>It follows the same format as Cargo config files.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[registry]</span>\n<span class=\"hljs-attr\">token</span> = <span class=\"hljs-string\">\"…\"</span>   <span class=\"hljs-comment\"># Access token for crates.io</span>\n\n<span class=\"hljs-section\">[registries.&lt;name&gt;]</span>\n<span class=\"hljs-attr\">token</span> = <span class=\"hljs-string\">\"…\"</span>   <span class=\"hljs-comment\"># Access token for the named registry</span>\n</code></pre>\n<p>As with most other config values, tokens may be specified with environment\nvariables. The token for <a href=\"https://crates.io/\">crates.io</a> may be specified with the\n<code class=\"hljs\">CARGO_REGISTRY_TOKEN</code> environment variable. Tokens for other registries may\nbe specified with environment variables of the form\n<code class=\"hljs\">CARGO_REGISTRIES_&lt;name&gt;_TOKEN</code> where <code class=\"hljs\">&lt;name&gt;</code> is the name of the registry in\nall capital letters.</p>\n<blockquote>\n<p><strong>Note:</strong> Cargo also reads and writes credential files without the <code class=\"hljs\">.toml</code>\nextension, such as <code class=\"hljs\">.cargo/credentials</code>. Support for the <code class=\"hljs\">.toml</code> extension\nwas added in version 1.39. In version 1.68, Cargo writes to the file with the\nextension by default. However, for backward compatibility reason, when both\nfiles exist, Cargo will read and write the file without the extension.</p>\n</blockquote>\n<h2 id=\"configuration-keys\"><a class=\"header\" href=\"#configuration-keys\">Configuration keys</a></h2>\n<p>This section documents all configuration keys. The description for keys with\nvariable parts are annotated with angled brackets like <code class=\"hljs\">target.&lt;triple&gt;</code> where\nthe <code class=\"hljs\">&lt;triple&gt;</code> part can be any <a href=\"reference/../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\">target triple</a> like\n<code class=\"hljs\">target.x86_64-pc-windows-msvc</code>.</p>\n<h3 id=\"paths\"><a class=\"header\" href=\"#paths\"><code>paths</code></a></h3>\n<ul>\n<li>Type: array of strings (paths)</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>An array of paths to local packages which are to be used as overrides for\ndependencies. For more information see the <a href=\"reference/overriding-dependencies.html#paths-overrides\">Overriding Dependencies\nguide</a>.</p>\n<h3 id=\"alias\"><a class=\"header\" href=\"#alias\"><code>[alias]</code></a></h3>\n<ul>\n<li>Type: string or array of strings</li>\n<li>Default: see below</li>\n<li>Environment: <code class=\"hljs\">CARGO_ALIAS_&lt;name&gt;</code></li>\n</ul>\n<p>The <code class=\"hljs\">[alias]</code> table defines CLI command aliases. For example, running <code class=\"hljs\">cargo b</code> is an alias for running <code class=\"hljs\">cargo build</code>. Each key in the table is the\nsubcommand, and the value is the actual command to run. The value may be an\narray of strings, where the first element is the command and the following are\narguments. It may also be a string, which will be split on spaces into\nsubcommand and arguments. The following aliases are built-in to Cargo:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[alias]</span>\n<span class=\"hljs-attr\">b</span> = <span class=\"hljs-string\">\"build\"</span>\n<span class=\"hljs-attr\">c</span> = <span class=\"hljs-string\">\"check\"</span>\n<span class=\"hljs-attr\">d</span> = <span class=\"hljs-string\">\"doc\"</span>\n<span class=\"hljs-attr\">t</span> = <span class=\"hljs-string\">\"test\"</span>\n<span class=\"hljs-attr\">r</span> = <span class=\"hljs-string\">\"run\"</span>\n<span class=\"hljs-attr\">rm</span> = <span class=\"hljs-string\">\"remove\"</span>\n</code></pre>\n<p>Aliases are not allowed to redefine existing built-in commands.</p>\n<p>Aliases are recursive:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[alias]</span>\n<span class=\"hljs-attr\">rr</span> = <span class=\"hljs-string\">\"run --release\"</span>\n<span class=\"hljs-attr\">recursive_example</span> = <span class=\"hljs-string\">\"rr --example recursions\"</span>\n</code></pre>\n<h3 id=\"build\"><a class=\"header\" href=\"#build\"><code>[build]</code></a></h3>\n<p>The <code class=\"hljs\">[build]</code> table controls build-time operations and compiler settings.</p>\n<h4 id=\"buildjobs\"><a class=\"header\" href=\"#buildjobs\"><code>build.jobs</code></a></h4>\n<ul>\n<li>Type: integer or string</li>\n<li>Default: number of logical CPUs</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_JOBS</code></li>\n</ul>\n<p>Sets the maximum number of compiler processes to run in parallel. If negative,\nit sets the maximum number of compiler processes to the number of logical CPUs\nplus provided value. Should not be 0. If a string <code class=\"hljs\">default</code> is provided, it sets\nthe value back to defaults.</p>\n<p>Can be overridden with the <code class=\"hljs\">--jobs</code> CLI option.</p>\n<h4 id=\"buildrustc\"><a class=\"header\" href=\"#buildrustc\"><code>build.rustc</code></a></h4>\n<ul>\n<li>Type: string (program path)</li>\n<li>Default: “rustc”</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_RUSTC</code> or <code class=\"hljs\">RUSTC</code></li>\n</ul>\n<p>Sets the executable to use for <code class=\"hljs\">rustc</code>.</p>\n<h4 id=\"buildrustc-wrapper\"><a class=\"header\" href=\"#buildrustc-wrapper\"><code>build.rustc-wrapper</code></a></h4>\n<ul>\n<li>Type: string (program path)</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_RUSTC_WRAPPER</code> or <code class=\"hljs\">RUSTC_WRAPPER</code></li>\n</ul>\n<p>Sets a wrapper to execute instead of <code class=\"hljs\">rustc</code>. The first argument passed to the\nwrapper is the path to the actual executable to use\n(i.e., <code class=\"hljs\">build.rustc</code>, if that is set, or <code class=\"hljs\">\"rustc\"</code> otherwise).</p>\n<h4 id=\"buildrustc-workspace-wrapper\"><a class=\"header\" href=\"#buildrustc-workspace-wrapper\"><code>build.rustc-workspace-wrapper</code></a></h4>\n<ul>\n<li>Type: string (program path)</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_RUSTC_WORKSPACE_WRAPPER</code> or <code class=\"hljs\">RUSTC_WORKSPACE_WRAPPER</code></li>\n</ul>\n<p>Sets a wrapper to execute instead of <code class=\"hljs\">rustc</code>, for workspace members only. When building a\nsingle-package project without workspaces, that package is considered to be the workspace. The first\nargument passed to the wrapper is the path to the actual executable to use (i.e., <code class=\"hljs\">build.rustc</code>, if\nthat is set, or <code class=\"hljs\">\"rustc\"</code> otherwise). It affects the filename hash so that artifacts produced by the\nwrapper are cached separately.</p>\n<p>If both <code class=\"hljs\">rustc-wrapper</code> and <code class=\"hljs\">rustc-workspace-wrapper</code> are set, then they will be nested:\nthe final invocation is <code class=\"hljs\">$RUSTC_WRAPPER $RUSTC_WORKSPACE_WRAPPER $RUSTC</code>.</p>\n<h4 id=\"buildrustdoc\"><a class=\"header\" href=\"#buildrustdoc\"><code>build.rustdoc</code></a></h4>\n<ul>\n<li>Type: string (program path)</li>\n<li>Default: “rustdoc”</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_RUSTDOC</code> or <code class=\"hljs\">RUSTDOC</code></li>\n</ul>\n<p>Sets the executable to use for <code class=\"hljs\">rustdoc</code>.</p>\n<h4 id=\"buildtarget\"><a class=\"header\" href=\"#buildtarget\"><code>build.target</code></a></h4>\n<ul>\n<li>Type: string or array of strings</li>\n<li>Default: host platform</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_TARGET</code></li>\n</ul>\n<p>The default <a href=\"reference/../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\">target platform triples</a> to compile to.</p>\n<p>This allows passing either a string or an array of strings. Each string value\nis a target platform triple. The selected build targets will be built for each\nof the selected architectures.</p>\n<p>The string value may also be a relative path to a <code class=\"hljs\">.json</code> target spec file.</p>\n<p>Can be overridden with the <code class=\"hljs\">--target</code> CLI option.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[build]</span>\n<span class=\"hljs-attr\">target</span> = [<span class=\"hljs-string\">\"x86_64-unknown-linux-gnu\"</span>, <span class=\"hljs-string\">\"i686-unknown-linux-gnu\"</span>]\n</code></pre>\n<h4 id=\"buildtarget-dir\"><a class=\"header\" href=\"#buildtarget-dir\"><code>build.target-dir</code></a></h4>\n<ul>\n<li>Type: string (path)</li>\n<li>Default: “target”</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_TARGET_DIR</code> or <code class=\"hljs\">CARGO_TARGET_DIR</code></li>\n</ul>\n<p>The path to where all compiler output is placed. The default if not specified\nis a directory named <code class=\"hljs\">target</code> located at the root of the workspace.</p>\n<p>Can be overridden with the <code class=\"hljs\">--target-dir</code> CLI option.</p>\n<h4 id=\"buildrustflags\"><a class=\"header\" href=\"#buildrustflags\"><code>build.rustflags</code></a></h4>\n<ul>\n<li>Type: string or array of strings</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_RUSTFLAGS</code> or <code class=\"hljs\">CARGO_ENCODED_RUSTFLAGS</code> or <code class=\"hljs\">RUSTFLAGS</code></li>\n</ul>\n<p>Extra command-line flags to pass to <code class=\"hljs\">rustc</code>. The value may be an array of\nstrings or a space-separated string.</p>\n<p>There are four mutually exclusive sources of extra flags. They are checked in\norder, with the first one being used:</p>\n<ol>\n<li><code class=\"hljs\">CARGO_ENCODED_RUSTFLAGS</code> environment variable.</li>\n<li><code class=\"hljs\">RUSTFLAGS</code> environment variable.</li>\n<li>All matching <code class=\"hljs\">target.&lt;triple&gt;.rustflags</code> and <code class=\"hljs\">target.&lt;cfg&gt;.rustflags</code>\nconfig entries joined together.</li>\n<li><code class=\"hljs\">build.rustflags</code> config value.</li>\n</ol>\n<p>Additional flags may also be passed with the <a href=\"reference/../commands/cargo-rustc.html\"><code class=\"hljs\">cargo rustc</code></a> command.</p>\n<p>If the <code class=\"hljs\">--target</code> flag (or <a href=\"reference/config.html#buildtarget\"><code class=\"hljs\">build.target</code></a>) is used, then the\nflags will only be passed to the compiler for the target. Things being built\nfor the host, such as build scripts or proc macros, will not receive the args.\nWithout <code class=\"hljs\">--target</code>, the flags will be passed to all compiler invocations\n(including build scripts and proc macros) because dependencies are shared. If\nyou have args that you do not want to pass to build scripts or proc macros and\nare building for the host, pass <code class=\"hljs\">--target</code> with the <a href=\"reference/../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\">host triple</a>.</p>\n<p>It is not recommended to pass in flags that Cargo itself usually manages. For\nexample, the flags driven by <a href=\"reference/profiles.html\">profiles</a> are best handled by setting the\nappropriate profile setting.</p>\n<blockquote>\n<p><strong>Caution</strong>: Due to the low-level nature of passing flags directly to the\ncompiler, this may cause a conflict with future versions of Cargo which may\nissue the same or similar flags on its own which may interfere with the\nflags you specify. This is an area where Cargo may not always be backwards\ncompatible.</p>\n</blockquote>\n<h4 id=\"buildrustdocflags\"><a class=\"header\" href=\"#buildrustdocflags\"><code>build.rustdocflags</code></a></h4>\n<ul>\n<li>Type: string or array of strings</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_RUSTDOCFLAGS</code> or <code class=\"hljs\">CARGO_ENCODED_RUSTDOCFLAGS</code> or <code class=\"hljs\">RUSTDOCFLAGS</code></li>\n</ul>\n<p>Extra command-line flags to pass to <code class=\"hljs\">rustdoc</code>. The value may be an array of\nstrings or a space-separated string.</p>\n<p>There are four mutually exclusive sources of extra flags. They are checked in\norder, with the first one being used:</p>\n<ol>\n<li><code class=\"hljs\">CARGO_ENCODED_RUSTDOCFLAGS</code> environment variable.</li>\n<li><code class=\"hljs\">RUSTDOCFLAGS</code> environment variable.</li>\n<li>All matching <code class=\"hljs\">target.&lt;triple&gt;.rustdocflags</code> config entries joined together.</li>\n<li><code class=\"hljs\">build.rustdocflags</code> config value.</li>\n</ol>\n<p>Additional flags may also be passed with the <a href=\"reference/../commands/cargo-rustdoc.html\"><code class=\"hljs\">cargo rustdoc</code></a> command.</p>\n<blockquote>\n<p><strong>Caution</strong>: Due to the low-level nature of passing flags directly to the\ncompiler, this may cause a conflict with future versions of Cargo which may\nissue the same or similar flags on its own which may interfere with the\nflags you specify. This is an area where Cargo may not always be backwards\ncompatible.</p>\n</blockquote>\n<h4 id=\"buildincremental\"><a class=\"header\" href=\"#buildincremental\"><code>build.incremental</code></a></h4>\n<ul>\n<li>Type: bool</li>\n<li>Default: from profile</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_INCREMENTAL</code> or <code class=\"hljs\">CARGO_INCREMENTAL</code></li>\n</ul>\n<p>Whether or not to perform <a href=\"reference/profiles.html#incremental\">incremental compilation</a>. The default if not set is\nto use the value from the <a href=\"reference/profiles.html#incremental\">profile</a>. Otherwise this overrides the setting of\nall profiles.</p>\n<p>The <code class=\"hljs\">CARGO_INCREMENTAL</code> environment variable can be set to <code class=\"hljs\">1</code> to force enable\nincremental compilation for all profiles, or <code class=\"hljs\">0</code> to disable it. This env var\noverrides the config setting.</p>\n<h4 id=\"builddep-info-basedir\"><a class=\"header\" href=\"#builddep-info-basedir\"><code>build.dep-info-basedir</code></a></h4>\n<ul>\n<li>Type: string (path)</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_DEP_INFO_BASEDIR</code></li>\n</ul>\n<p>Strips the given path prefix from <a href=\"reference/../guide/build-cache.html#dep-info-files\">dep\ninfo</a> file paths. This config setting\nis intended to convert absolute paths to relative paths for tools that require\nrelative paths.</p>\n<p>The setting itself is a config-relative path. So, for example, a value of\n<code class=\"hljs\">\".\"</code> would strip all paths starting with the parent directory of the <code class=\"hljs\">.cargo</code>\ndirectory.</p>\n<h4 id=\"buildpipelining\"><a class=\"header\" href=\"#buildpipelining\"><code>build.pipelining</code></a></h4>\n<p>This option is deprecated and unused. Cargo always has pipelining enabled.</p>\n<h3 id=\"credential-alias\"><a class=\"header\" href=\"#credential-alias\"><code>[credential-alias]</code></a></h3>\n<ul>\n<li>Type: string or array of strings</li>\n<li>Default: empty</li>\n<li>Environment: <code class=\"hljs\">CARGO_CREDENTIAL_ALIAS_&lt;name&gt;</code></li>\n</ul>\n<p>The <code class=\"hljs\">[credential-alias]</code> table defines credential provider aliases.\nThese aliases can be referenced as an element of the <code class=\"hljs\">registry.global-credential-providers</code>\narray, or as a credential provider for a specific registry\nunder <code class=\"hljs\">registries.&lt;NAME&gt;.credential-provider</code>.</p>\n<p>If specified as a string, the value will be split on spaces into path and arguments.</p>\n<p>For example, to define an alias called <code class=\"hljs\">my-alias</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[credential-alias]</span>\n<span class=\"hljs-attr\">my-alias</span> = [<span class=\"hljs-string\">\"/usr/bin/cargo-credential-example\"</span>, <span class=\"hljs-string\">\"--argument\"</span>, <span class=\"hljs-string\">\"value\"</span>, <span class=\"hljs-string\">\"--flag\"</span>]\n</code></pre>\n<p>See <a href=\"reference/registry-authentication.html\">Registry Authentication</a> for more information.</p>\n<h3 id=\"doc\"><a class=\"header\" href=\"#doc\"><code>[doc]</code></a></h3>\n<p>The <code class=\"hljs\">[doc]</code> table defines options for the <a href=\"reference/../commands/cargo-doc.html\"><code class=\"hljs\">cargo doc</code></a> command.</p>\n<h4 id=\"docbrowser\"><a class=\"header\" href=\"#docbrowser\"><code>doc.browser</code></a></h4>\n<ul>\n<li>Type: string or array of strings (<a href=\"reference/config.html#executable-paths-with-arguments\">program path with args</a>)</li>\n<li>Default: <code class=\"hljs\">BROWSER</code> environment variable, or, if that is missing,\nopening the link in a system specific way</li>\n</ul>\n<p>This option sets the browser to be used by <a href=\"reference/../commands/cargo-doc.html\"><code class=\"hljs\">cargo doc</code></a>, overriding the\n<code class=\"hljs\">BROWSER</code> environment variable when opening documentation with the <code class=\"hljs\">--open</code>\noption.</p>\n<h3 id=\"cargo-new\"><a class=\"header\" href=\"#cargo-new\"><code>[cargo-new]</code></a></h3>\n<p>The <code class=\"hljs\">[cargo-new]</code> table defines defaults for the <a href=\"reference/../commands/cargo-new.html\"><code class=\"hljs\">cargo new</code></a> command.</p>\n<h4 id=\"cargo-newname\"><a class=\"header\" href=\"#cargo-newname\"><code>cargo-new.name</code></a></h4>\n<p>This option is deprecated and unused.</p>\n<h4 id=\"cargo-newemail\"><a class=\"header\" href=\"#cargo-newemail\"><code>cargo-new.email</code></a></h4>\n<p>This option is deprecated and unused.</p>\n<h4 id=\"cargo-newvcs\"><a class=\"header\" href=\"#cargo-newvcs\"><code>cargo-new.vcs</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: “git” or “none”</li>\n<li>Environment: <code class=\"hljs\">CARGO_CARGO_NEW_VCS</code></li>\n</ul>\n<p>Specifies the source control system to use for initializing a new repository.\nValid values are <code class=\"hljs\">git</code>, <code class=\"hljs\">hg</code> (for Mercurial), <code class=\"hljs\">pijul</code>, <code class=\"hljs\">fossil</code> or <code class=\"hljs\">none</code> to\ndisable this behavior. Defaults to <code class=\"hljs\">git</code>, or <code class=\"hljs\">none</code> if already inside a VCS\nrepository. Can be overridden with the <code class=\"hljs\">--vcs</code> CLI option.</p>\n<h3 id=\"env\"><a class=\"header\" href=\"#env\"><code>[env]</code></a></h3>\n<p>The <code class=\"hljs\">[env]</code> section allows you to set additional environment variables for\nbuild scripts, rustc invocations, <code class=\"hljs\">cargo run</code> and <code class=\"hljs\">cargo build</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[env]</span>\n<span class=\"hljs-attr\">OPENSSL_DIR</span> = <span class=\"hljs-string\">\"/opt/openssl\"</span>\n</code></pre>\n<p>By default, the variables specified will not override values that already exist\nin the environment. This behavior can be changed by setting the <code class=\"hljs\">force</code> flag.</p>\n<p>Setting the <code class=\"hljs\">relative</code> flag evaluates the value as a config-relative path that\nis relative to the parent directory of the <code class=\"hljs\">.cargo</code> directory that contains the\n<code class=\"hljs\">config.toml</code> file. The value of the environment variable will be the full\nabsolute path.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[env]</span>\n<span class=\"hljs-attr\">TMPDIR</span> = { value = <span class=\"hljs-string\">\"/home/tmp\"</span>, force = <span class=\"hljs-literal\">true</span> }\n<span class=\"hljs-attr\">OPENSSL_DIR</span> = { value = <span class=\"hljs-string\">\"vendor/openssl\"</span>, relative = <span class=\"hljs-literal\">true</span> }\n</code></pre>\n<h3 id=\"future-incompat-report\"><a class=\"header\" href=\"#future-incompat-report\"><code>[future-incompat-report]</code></a></h3>\n<p>The <code class=\"hljs\">[future-incompat-report]</code> table controls setting for <a href=\"reference/future-incompat-report.html\">future incompat reporting</a></p>\n<h4 id=\"future-incompat-reportfrequency\"><a class=\"header\" href=\"#future-incompat-reportfrequency\"><code>future-incompat-report.frequency</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: “always”</li>\n<li>Environment: <code class=\"hljs\">CARGO_FUTURE_INCOMPAT_REPORT_FREQUENCY</code></li>\n</ul>\n<p>Controls how often we display a notification to the terminal when a future incompat report is available. Possible values:</p>\n<ul>\n<li><code class=\"hljs\">always</code> (default): Always display a notification when a command (e.g. <code class=\"hljs\">cargo build</code>) produces a future incompat report</li>\n<li><code class=\"hljs\">never</code>: Never display a notification</li>\n</ul>\n<h3 id=\"http\"><a class=\"header\" href=\"#http\"><code>[http]</code></a></h3>\n<p>The <code class=\"hljs\">[http]</code> table defines settings for HTTP behavior. This includes fetching\ncrate dependencies and accessing remote git repositories.</p>\n<h4 id=\"httpdebug\"><a class=\"header\" href=\"#httpdebug\"><code>http.debug</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_DEBUG</code></li>\n</ul>\n<p>If <code class=\"hljs\">true</code>, enables debugging of HTTP requests. The debug information can be\nseen by setting the <code class=\"hljs\">CARGO_LOG=network=debug</code> environment\nvariable (or use <code class=\"hljs\">network=trace</code> for even more information).</p>\n<p>Be wary when posting logs from this output in a public location. The output\nmay include headers with authentication tokens which you don’t want to leak!\nBe sure to review logs before posting them.</p>\n<h4 id=\"httpproxy\"><a class=\"header\" href=\"#httpproxy\"><code>http.proxy</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_PROXY</code> or <code class=\"hljs\">HTTPS_PROXY</code> or <code class=\"hljs\">https_proxy</code> or <code class=\"hljs\">http_proxy</code></li>\n</ul>\n<p>Sets an HTTP and HTTPS proxy to use. The format is in <a href=\"https://everything.curl.dev/transfers/conn/proxies#proxy-types\">libcurl format</a> as in\n<code class=\"hljs\">[protocol://]host[:port]</code>. If not set, Cargo will also check the <code class=\"hljs\">http.proxy</code>\nsetting in your global git configuration. If none of those are set, the\n<code class=\"hljs\">HTTPS_PROXY</code> or <code class=\"hljs\">https_proxy</code> environment variables set the proxy for HTTPS\nrequests, and <code class=\"hljs\">http_proxy</code> sets it for HTTP requests.</p>\n<h4 id=\"httptimeout\"><a class=\"header\" href=\"#httptimeout\"><code>http.timeout</code></a></h4>\n<ul>\n<li>Type: integer</li>\n<li>Default: 30</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_TIMEOUT</code> or <code class=\"hljs\">HTTP_TIMEOUT</code></li>\n</ul>\n<p>Sets the timeout for each HTTP request, in seconds.</p>\n<h4 id=\"httpcainfo\"><a class=\"header\" href=\"#httpcainfo\"><code>http.cainfo</code></a></h4>\n<ul>\n<li>Type: string (path)</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_CAINFO</code></li>\n</ul>\n<p>Path to a Certificate Authority (CA) bundle file, used to verify TLS\ncertificates. If not specified, Cargo attempts to use the system certificates.</p>\n<h4 id=\"httpcheck-revoke\"><a class=\"header\" href=\"#httpcheck-revoke\"><code>http.check-revoke</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: true (Windows) false (all others)</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_CHECK_REVOKE</code></li>\n</ul>\n<p>This determines whether or not TLS certificate revocation checks should be\nperformed. This only works on Windows.</p>\n<h4 id=\"httpssl-version\"><a class=\"header\" href=\"#httpssl-version\"><code>http.ssl-version</code></a></h4>\n<ul>\n<li>Type: string or min/max table</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_SSL_VERSION</code></li>\n</ul>\n<p>This sets the minimum TLS version to use. It takes a string, with one of the\npossible values of “default”, “tlsv1”, “tlsv1.0”, “tlsv1.1”, “tlsv1.2”, or\n“tlsv1.3”.</p>\n<p>This may alternatively take a table with two keys, <code class=\"hljs\">min</code> and <code class=\"hljs\">max</code>, which each\ntake a string value of the same kind that specifies the minimum and maximum\nrange of TLS versions to use.</p>\n<p>The default is a minimum version of “tlsv1.0” and a max of the newest version\nsupported on your platform, typically “tlsv1.3”.</p>\n<h4 id=\"httplow-speed-limit\"><a class=\"header\" href=\"#httplow-speed-limit\"><code>http.low-speed-limit</code></a></h4>\n<ul>\n<li>Type: integer</li>\n<li>Default: 10</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_LOW_SPEED_LIMIT</code></li>\n</ul>\n<p>This setting controls timeout behavior for slow connections. If the average\ntransfer speed in bytes per second is below the given value for\n<a href=\"reference/config.html#httptimeout\"><code class=\"hljs\">http.timeout</code></a> seconds (default 30 seconds), then the\nconnection is considered too slow and Cargo will abort and retry.</p>\n<h4 id=\"httpmultiplexing\"><a class=\"header\" href=\"#httpmultiplexing\"><code>http.multiplexing</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: true</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_MULTIPLEXING</code></li>\n</ul>\n<p>When <code class=\"hljs\">true</code>, Cargo will attempt to use the HTTP2 protocol with multiplexing.\nThis allows multiple requests to use the same connection, usually improving\nperformance when fetching multiple files. If <code class=\"hljs\">false</code>, Cargo will use HTTP 1.1\nwithout pipelining.</p>\n<h4 id=\"httpuser-agent\"><a class=\"header\" href=\"#httpuser-agent\"><code>http.user-agent</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: Cargo’s version</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_USER_AGENT</code></li>\n</ul>\n<p>Specifies a custom user-agent header to use. The default if not specified is a\nstring that includes Cargo’s version.</p>\n<h3 id=\"install\"><a class=\"header\" href=\"#install\"><code>[install]</code></a></h3>\n<p>The <code class=\"hljs\">[install]</code> table defines defaults for the <a href=\"reference/../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> command.</p>\n<h4 id=\"installroot\"><a class=\"header\" href=\"#installroot\"><code>install.root</code></a></h4>\n<ul>\n<li>Type: string (path)</li>\n<li>Default: Cargo’s home directory</li>\n<li>Environment: <code class=\"hljs\">CARGO_INSTALL_ROOT</code></li>\n</ul>\n<p>Sets the path to the root directory for installing executables for <a href=\"reference/../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a>. Executables go into a <code class=\"hljs\">bin</code> directory underneath the root.</p>\n<p>To track information of installed executables, some extra files, such as\n<code class=\"hljs\">.crates.toml</code> and <code class=\"hljs\">.crates2.json</code>, are also created under this root.</p>\n<p>The default if not specified is Cargo’s home directory (default <code class=\"hljs\">.cargo</code> in\nyour home directory).</p>\n<p>Can be overridden with the <code class=\"hljs\">--root</code> command-line option.</p>\n<h3 id=\"net\"><a class=\"header\" href=\"#net\"><code>[net]</code></a></h3>\n<p>The <code class=\"hljs\">[net]</code> table controls networking configuration.</p>\n<h4 id=\"netretry\"><a class=\"header\" href=\"#netretry\"><code>net.retry</code></a></h4>\n<ul>\n<li>Type: integer</li>\n<li>Default: 3</li>\n<li>Environment: <code class=\"hljs\">CARGO_NET_RETRY</code></li>\n</ul>\n<p>Number of times to retry possibly spurious network errors.</p>\n<h4 id=\"netgit-fetch-with-cli\"><a class=\"header\" href=\"#netgit-fetch-with-cli\"><code>net.git-fetch-with-cli</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code class=\"hljs\">CARGO_NET_GIT_FETCH_WITH_CLI</code></li>\n</ul>\n<p>If this is <code class=\"hljs\">true</code>, then Cargo will use the <code class=\"hljs\">git</code> executable to fetch registry\nindexes and git dependencies. If <code class=\"hljs\">false</code>, then it uses a built-in <code class=\"hljs\">git</code>\nlibrary.</p>\n<p>Setting this to <code class=\"hljs\">true</code> can be helpful if you have special authentication\nrequirements that Cargo does not support. See <a href=\"reference/../appendix/git-authentication.html\">Git\nAuthentication</a> for more information about\nsetting up git authentication.</p>\n<h4 id=\"netoffline\"><a class=\"header\" href=\"#netoffline\"><code>net.offline</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code class=\"hljs\">CARGO_NET_OFFLINE</code></li>\n</ul>\n<p>If this is <code class=\"hljs\">true</code>, then Cargo will avoid accessing the network, and attempt to\nproceed with locally cached data. If <code class=\"hljs\">false</code>, Cargo will access the network as\nneeded, and generate an error if it encounters a network error.</p>\n<p>Can be overridden with the <code class=\"hljs\">--offline</code> command-line option.</p>\n<h4 id=\"netssh\"><a class=\"header\" href=\"#netssh\"><code>net.ssh</code></a></h4>\n<p>The <code class=\"hljs\">[net.ssh]</code> table contains settings for SSH connections.</p>\n<h4 id=\"netsshknown-hosts\"><a class=\"header\" href=\"#netsshknown-hosts\"><code>net.ssh.known-hosts</code></a></h4>\n<ul>\n<li>Type: array of strings</li>\n<li>Default: see description</li>\n<li>Environment: not supported</li>\n</ul>\n<p>The <code class=\"hljs\">known-hosts</code> array contains a list of SSH host keys that should be\naccepted as valid when connecting to an SSH server (such as for SSH git\ndependencies). Each entry should be a string in a format similar to OpenSSH\n<code class=\"hljs\">known_hosts</code> files. Each string should start with one or more hostnames\nseparated by commas, a space, the key type name, a space, and the\nbase64-encoded key. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[net.ssh]</span>\n<span class=\"hljs-attr\">known-hosts</span> = [\n    <span class=\"hljs-string\">\"example.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFO4Q5T0UV0SQevair9PFwoxY9dl4pQl3u5phoqJH3cF\"</span>\n]\n</code></pre>\n<p>Cargo will attempt to load known hosts keys from common locations supported in\nOpenSSH, and will join those with any listed in a Cargo configuration file.\nIf any matching entry has the correct key, the connection will be allowed.</p>\n<p>Cargo comes with the host keys for <a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints\">github.com</a> built-in. If\nthose ever change, you can add the new keys to the config or known_hosts file.</p>\n<p>See <a href=\"reference/../appendix/git-authentication.html#ssh-known-hosts\">Git Authentication</a>\nfor more details.</p>\n<h3 id=\"patch\"><a class=\"header\" href=\"#patch\"><code>[patch]</code></a></h3>\n<p>Just as you can override dependencies using <a href=\"reference/overriding-dependencies.html#the-patch-section\"><code class=\"hljs\">[patch]</code> in\n<code class=\"hljs\">Cargo.toml</code></a>, you can\noverride them in the cargo configuration file to apply those patches to\nany affected build. The format is identical to the one used in\n<code class=\"hljs\">Cargo.toml</code>.</p>\n<p>Since <code class=\"hljs\">.cargo/config.toml</code> files are not usually checked into source\ncontrol, you should prefer patching using <code class=\"hljs\">Cargo.toml</code> where possible to\nensure that other developers can compile your crate in their own\nenvironments. Patching through cargo configuration files is generally\nonly appropriate when the patch section is automatically generated by an\nexternal build tool.</p>\n<p>If a given dependency is patched both in a cargo configuration file and\na <code class=\"hljs\">Cargo.toml</code> file, the patch in the configuration file is used. If\nmultiple configuration files patch the same dependency, standard cargo\nconfiguration merging is used, which prefers the value defined closest\nto the current directory, with <code class=\"hljs\">$HOME/.cargo/config.toml</code> taking the\nlowest precedence.</p>\n<p>Relative <code class=\"hljs\">path</code> dependencies in such a <code class=\"hljs\">[patch]</code> section are resolved\nrelative to the configuration file they appear in.</p>\n<h3 id=\"profile\"><a class=\"header\" href=\"#profile\"><code>[profile]</code></a></h3>\n<p>The <code class=\"hljs\">[profile]</code> table can be used to globally change profile settings, and\noverride settings specified in <code class=\"hljs\">Cargo.toml</code>. It has the same syntax and\noptions as profiles specified in <code class=\"hljs\">Cargo.toml</code>. See the <a href=\"reference/profiles.html\">Profiles chapter</a> for\ndetails about the options.</p>\n<h4 id=\"profilenamebuild-override\"><a class=\"header\" href=\"#profilenamebuild-override\"><code>[profile.&lt;name&gt;.build-override]</code></a></h4>\n<ul>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_BUILD_OVERRIDE_&lt;key&gt;</code></li>\n</ul>\n<p>The build-override table overrides settings for build scripts, proc macros,\nand their dependencies. It has the same keys as a normal profile. See the\n<a href=\"reference/profiles.html#overrides\">overrides section</a> for more details.</p>\n<h4 id=\"profilenamepackagename\"><a class=\"header\" href=\"#profilenamepackagename\"><code>[profile.&lt;name&gt;.package.&lt;name&gt;]</code></a></h4>\n<ul>\n<li>Environment: not supported</li>\n</ul>\n<p>The package table overrides settings for specific packages. It has the same\nkeys as a normal profile, minus the <code class=\"hljs\">panic</code>, <code class=\"hljs\">lto</code>, and <code class=\"hljs\">rpath</code> settings. See\nthe <a href=\"reference/profiles.html#overrides\">overrides section</a> for more details.</p>\n<h4 id=\"profilenamecodegen-units\"><a class=\"header\" href=\"#profilenamecodegen-units\"><code>profile.&lt;name&gt;.codegen-units</code></a></h4>\n<ul>\n<li>Type: integer</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_CODEGEN_UNITS</code></li>\n</ul>\n<p>See <a href=\"reference/profiles.html#codegen-units\">codegen-units</a>.</p>\n<h4 id=\"profilenamedebug\"><a class=\"header\" href=\"#profilenamedebug\"><code>profile.&lt;name&gt;.debug</code></a></h4>\n<ul>\n<li>Type: integer or boolean</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_DEBUG</code></li>\n</ul>\n<p>See <a href=\"reference/profiles.html#debug\">debug</a>.</p>\n<h4 id=\"profilenamesplit-debuginfo\"><a class=\"header\" href=\"#profilenamesplit-debuginfo\"><code>profile.&lt;name&gt;.split-debuginfo</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_SPLIT_DEBUGINFO</code></li>\n</ul>\n<p>See <a href=\"reference/profiles.html#split-debuginfo\">split-debuginfo</a>.</p>\n<h4 id=\"profilenamestrip\"><a class=\"header\" href=\"#profilenamestrip\"><code>profile.&lt;name&gt;.strip</code></a></h4>\n<ul>\n<li>Type: string or boolean</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_STRIP</code></li>\n</ul>\n<p>See <a href=\"reference/profiles.html#strip\">strip</a>.</p>\n<h4 id=\"profilenamedebug-assertions\"><a class=\"header\" href=\"#profilenamedebug-assertions\"><code>profile.&lt;name&gt;.debug-assertions</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_DEBUG_ASSERTIONS</code></li>\n</ul>\n<p>See <a href=\"reference/profiles.html#debug-assertions\">debug-assertions</a>.</p>\n<h4 id=\"profilenameincremental\"><a class=\"header\" href=\"#profilenameincremental\"><code>profile.&lt;name&gt;.incremental</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_INCREMENTAL</code></li>\n</ul>\n<p>See <a href=\"reference/profiles.html#incremental\">incremental</a>.</p>\n<h4 id=\"profilenamelto\"><a class=\"header\" href=\"#profilenamelto\"><code>profile.&lt;name&gt;.lto</code></a></h4>\n<ul>\n<li>Type: string or boolean</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_LTO</code></li>\n</ul>\n<p>See <a href=\"reference/profiles.html#lto\">lto</a>.</p>\n<h4 id=\"profilenameoverflow-checks\"><a class=\"header\" href=\"#profilenameoverflow-checks\"><code>profile.&lt;name&gt;.overflow-checks</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_OVERFLOW_CHECKS</code></li>\n</ul>\n<p>See <a href=\"reference/profiles.html#overflow-checks\">overflow-checks</a>.</p>\n<h4 id=\"profilenameopt-level\"><a class=\"header\" href=\"#profilenameopt-level\"><code>profile.&lt;name&gt;.opt-level</code></a></h4>\n<ul>\n<li>Type: integer or string</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_OPT_LEVEL</code></li>\n</ul>\n<p>See <a href=\"reference/profiles.html#opt-level\">opt-level</a>.</p>\n<h4 id=\"profilenamepanic\"><a class=\"header\" href=\"#profilenamepanic\"><code>profile.&lt;name&gt;.panic</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_PANIC</code></li>\n</ul>\n<p>See <a href=\"reference/profiles.html#panic\">panic</a>.</p>\n<h4 id=\"profilenamerpath\"><a class=\"header\" href=\"#profilenamerpath\"><code>profile.&lt;name&gt;.rpath</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_RPATH</code></li>\n</ul>\n<p>See <a href=\"reference/profiles.html#rpath\">rpath</a>.</p>\n<h4 id=\"profilenamestrip-1\"><a class=\"header\" href=\"#profilenamestrip-1\"><code>profile.&lt;name&gt;.strip</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_STRIP</code></li>\n</ul>\n<p>See <a href=\"reference/profiles.html#strip\">strip</a>.</p>\n<h3 id=\"registries\"><a class=\"header\" href=\"#registries\"><code>[registries]</code></a></h3>\n<p>The <code class=\"hljs\">[registries]</code> table is used for specifying additional <a href=\"reference/registries.html\">registries</a>. It\nconsists of a sub-table for each named registry.</p>\n<h4 id=\"registriesnameindex\"><a class=\"header\" href=\"#registriesnameindex\"><code>registries.&lt;name&gt;.index</code></a></h4>\n<ul>\n<li>Type: string (url)</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_REGISTRIES_&lt;name&gt;_INDEX</code></li>\n</ul>\n<p>Specifies the URL of the index for the registry.</p>\n<h4 id=\"registriesnametoken\"><a class=\"header\" href=\"#registriesnametoken\"><code>registries.&lt;name&gt;.token</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_REGISTRIES_&lt;name&gt;_TOKEN</code></li>\n</ul>\n<p>Specifies the authentication token for the given registry. This value should\nonly appear in the <a href=\"reference/config.html#credentials\">credentials</a> file. This is used for registry\ncommands like <a href=\"reference/../commands/cargo-publish.html\"><code class=\"hljs\">cargo publish</code></a> that require authentication.</p>\n<p>Can be overridden with the <code class=\"hljs\">--token</code> command-line option.</p>\n<h4 id=\"registriesnamecredential-provider\"><a class=\"header\" href=\"#registriesnamecredential-provider\"><code>registries.&lt;name&gt;.credential-provider</code></a></h4>\n<ul>\n<li>Type: string or array of path and arguments</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_REGISTRIES_&lt;name&gt;_CREDENTIAL_PROVIDER</code></li>\n</ul>\n<p>Specifies the credential provider for the given registry. If not set, the\nproviders in <a href=\"reference/config.html#registryglobal-credential-providers\"><code class=\"hljs\">registry.global-credential-providers</code></a>\nwill be used.</p>\n<p>If specified as a string, path and arguments will be split on spaces. For\npaths or arguments that contain spaces, use an array.</p>\n<p>If the value exists in the <a href=\"reference/config.html#credential-alias\"><code class=\"hljs\">[credential-alias]</code></a> table, the alias will be used.</p>\n<p>See <a href=\"reference/registry-authentication.html\">Registry Authentication</a> for more information.</p>\n<h4 id=\"registriescrates-ioprotocol\"><a class=\"header\" href=\"#registriescrates-ioprotocol\"><code>registries.crates-io.protocol</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: <code class=\"hljs\">sparse</code></li>\n<li>Environment: <code class=\"hljs\">CARGO_REGISTRIES_CRATES_IO_PROTOCOL</code></li>\n</ul>\n<p>Specifies the protocol used to access crates.io. Allowed values are <code class=\"hljs\">git</code> or <code class=\"hljs\">sparse</code>.</p>\n<p><code class=\"hljs\">git</code> causes Cargo to clone the entire index of all packages ever published to <a href=\"https://crates.io/\">crates.io</a> from <a href=\"https://github.com/rust-lang/crates.io-index/\">https://github.com/rust-lang/crates.io-index/</a>.\nThis can have performance implications due to the size of the index.\n<code class=\"hljs\">sparse</code> is a newer protocol which uses HTTPS to download only what is necessary from <a href=\"https://index.crates.io/\">https://index.crates.io/</a>.\nThis can result in a significant performance improvement for resolving new dependencies in most situations.</p>\n<p>More information about registry protocols may be found in the <a href=\"reference/registries.html\">Registries chapter</a>.</p>\n<h3 id=\"registry\"><a class=\"header\" href=\"#registry\"><code>[registry]</code></a></h3>\n<p>The <code class=\"hljs\">[registry]</code> table controls the default registry used when one is not\nspecified.</p>\n<h4 id=\"registryindex\"><a class=\"header\" href=\"#registryindex\"><code>registry.index</code></a></h4>\n<p>This value is no longer accepted and should not be used.</p>\n<h4 id=\"registrydefault\"><a class=\"header\" href=\"#registrydefault\"><code>registry.default</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: <code class=\"hljs\">\"crates-io\"</code></li>\n<li>Environment: <code class=\"hljs\">CARGO_REGISTRY_DEFAULT</code></li>\n</ul>\n<p>The name of the registry (from the <a href=\"reference/config.html#registries\"><code class=\"hljs\">registries</code> table</a>) to use\nby default for registry commands like <a href=\"reference/../commands/cargo-publish.html\"><code class=\"hljs\">cargo publish</code></a>.</p>\n<p>Can be overridden with the <code class=\"hljs\">--registry</code> command-line option.</p>\n<h4 id=\"registrycredential-provider\"><a class=\"header\" href=\"#registrycredential-provider\"><code>registry.credential-provider</code></a></h4>\n<ul>\n<li>Type: string or array of path and arguments</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_REGISTRY_CREDENTIAL_PROVIDER</code></li>\n</ul>\n<p>Specifies the credential provider for <a href=\"https://crates.io/\">crates.io</a>. If not set, the\nproviders in <a href=\"reference/config.html#registryglobal-credential-providers\"><code class=\"hljs\">registry.global-credential-providers</code></a>\nwill be used.</p>\n<p>If specified as a string, path and arguments will be split on spaces. For\npaths or arguments that contain spaces, use an array.</p>\n<p>If the value exists in the <code class=\"hljs\">[credential-alias]</code> table, the alias will be used.</p>\n<p>See <a href=\"reference/registry-authentication.html\">Registry Authentication</a> for more information.</p>\n<h4 id=\"registrytoken\"><a class=\"header\" href=\"#registrytoken\"><code>registry.token</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_REGISTRY_TOKEN</code></li>\n</ul>\n<p>Specifies the authentication token for <a href=\"https://crates.io/\">crates.io</a>. This value should only\nappear in the <a href=\"reference/config.html#credentials\">credentials</a> file. This is used for registry\ncommands like <a href=\"reference/../commands/cargo-publish.html\"><code class=\"hljs\">cargo publish</code></a> that require authentication.</p>\n<p>Can be overridden with the <code class=\"hljs\">--token</code> command-line option.</p>\n<h4 id=\"registryglobal-credential-providers\"><a class=\"header\" href=\"#registryglobal-credential-providers\"><code>registry.global-credential-providers</code></a></h4>\n<ul>\n<li>Type: array</li>\n<li>Default: <code class=\"hljs\">[\"cargo:token\"]</code></li>\n<li>Environment: <code class=\"hljs\">CARGO_REGISTRY_GLOBAL_CREDENTIAL_PROVIDERS</code></li>\n</ul>\n<p>Specifies the list of global credential providers. If credential provider is not set\nfor a specific registry using <code class=\"hljs\">registries.&lt;name&gt;.credential-provider</code>, Cargo will use\nthe credential providers in this list. Providers toward the end of the list have precedence.</p>\n<p>Path and arguments are split on spaces. If the path or arguments contains spaces, the credential\nprovider should be defined in the <a href=\"reference/config.html#credential-alias\"><code class=\"hljs\">[credential-alias]</code></a> table and\nreferenced here by its alias.</p>\n<p>See <a href=\"reference/registry-authentication.html\">Registry Authentication</a> for more information.</p>\n<h3 id=\"source\"><a class=\"header\" href=\"#source\"><code>[source]</code></a></h3>\n<p>The <code class=\"hljs\">[source]</code> table defines the registry sources available. See <a href=\"reference/source-replacement.html\">Source\nReplacement</a> for more information. It consists of a sub-table for each named\nsource. A source should only define one kind (directory, registry,\nlocal-registry, or git).</p>\n<h4 id=\"sourcenamereplace-with\"><a class=\"header\" href=\"#sourcenamereplace-with\"><code>source.&lt;name&gt;.replace-with</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>If set, replace this source with the given named source or named registry.</p>\n<h4 id=\"sourcenamedirectory\"><a class=\"header\" href=\"#sourcenamedirectory\"><code>source.&lt;name&gt;.directory</code></a></h4>\n<ul>\n<li>Type: string (path)</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>Sets the path to a directory to use as a directory source.</p>\n<h4 id=\"sourcenameregistry\"><a class=\"header\" href=\"#sourcenameregistry\"><code>source.&lt;name&gt;.registry</code></a></h4>\n<ul>\n<li>Type: string (url)</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>Sets the URL to use for a registry source.</p>\n<h4 id=\"sourcenamelocal-registry\"><a class=\"header\" href=\"#sourcenamelocal-registry\"><code>source.&lt;name&gt;.local-registry</code></a></h4>\n<ul>\n<li>Type: string (path)</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>Sets the path to a directory to use as a local registry source.</p>\n<h4 id=\"sourcenamegit\"><a class=\"header\" href=\"#sourcenamegit\"><code>source.&lt;name&gt;.git</code></a></h4>\n<ul>\n<li>Type: string (url)</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>Sets the URL to use for a git repository source.</p>\n<h4 id=\"sourcenamebranch\"><a class=\"header\" href=\"#sourcenamebranch\"><code>source.&lt;name&gt;.branch</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>Sets the branch name to use for a git repository.</p>\n<p>If none of <code class=\"hljs\">branch</code>, <code class=\"hljs\">tag</code>, or <code class=\"hljs\">rev</code> is set, defaults to the <code class=\"hljs\">master</code> branch.</p>\n<h4 id=\"sourcenametag\"><a class=\"header\" href=\"#sourcenametag\"><code>source.&lt;name&gt;.tag</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>Sets the tag name to use for a git repository.</p>\n<p>If none of <code class=\"hljs\">branch</code>, <code class=\"hljs\">tag</code>, or <code class=\"hljs\">rev</code> is set, defaults to the <code class=\"hljs\">master</code> branch.</p>\n<h4 id=\"sourcenamerev\"><a class=\"header\" href=\"#sourcenamerev\"><code>source.&lt;name&gt;.rev</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>Sets the <a href=\"https://git-scm.com/docs/gitrevisions\">revision</a> to use for a git repository.</p>\n<p>If none of <code class=\"hljs\">branch</code>, <code class=\"hljs\">tag</code>, or <code class=\"hljs\">rev</code> is set, defaults to the <code class=\"hljs\">master</code> branch.</p>\n<h3 id=\"target\"><a class=\"header\" href=\"#target\"><code>[target]</code></a></h3>\n<p>The <code class=\"hljs\">[target]</code> table is used for specifying settings for specific platform\ntargets. It consists of a sub-table which is either a <a href=\"reference/../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\">platform triple</a>\nor a <a href=\"reference/../../reference/conditional-compilation.html\"><code class=\"hljs\">cfg()</code> expression</a>. The given values will be used if the target platform\nmatches either the <code class=\"hljs\">&lt;triple&gt;</code> value or the <code class=\"hljs\">&lt;cfg&gt;</code> expression.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[target.thumbv7m-none-eabi]</span>\n<span class=\"hljs-attr\">linker</span> = <span class=\"hljs-string\">\"arm-none-eabi-gcc\"</span>\n<span class=\"hljs-attr\">runner</span> = <span class=\"hljs-string\">\"my-emulator\"</span>\n<span class=\"hljs-attr\">rustflags</span> = [<span class=\"hljs-string\">\"…\"</span>, <span class=\"hljs-string\">\"…\"</span>]\n\n<span class=\"hljs-section\">[target.'cfg(all(target_arch = \"arm\", target_os = \"none\"))']</span>\n<span class=\"hljs-attr\">runner</span> = <span class=\"hljs-string\">\"my-arm-wrapper\"</span>\n<span class=\"hljs-attr\">rustflags</span> = [<span class=\"hljs-string\">\"…\"</span>, <span class=\"hljs-string\">\"…\"</span>]\n</code></pre>\n<p><code class=\"hljs\">cfg</code> values come from those built-in to the compiler (run <code class=\"hljs\">rustc --print=cfg</code>\nto view), values set by <a href=\"reference/build-scripts.html\">build scripts</a>, and extra <code class=\"hljs\">--cfg</code> flags passed to\n<code class=\"hljs\">rustc</code> (such as those defined in <code class=\"hljs\">RUSTFLAGS</code>). Do not try to match on\n<code class=\"hljs\">debug_assertions</code> or Cargo features like <code class=\"hljs\">feature=\"foo\"</code>.</p>\n<p>If using a target spec JSON file, the <a href=\"reference/../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\"><code class=\"hljs\">&lt;triple&gt;</code></a> value is the filename stem.\nFor example <code class=\"hljs\">--target foo/bar.json</code> would match <code class=\"hljs\">[target.bar]</code>.</p>\n<h4 id=\"targettriplear\"><a class=\"header\" href=\"#targettriplear\"><code>target.&lt;triple&gt;.ar</code></a></h4>\n<p>This option is deprecated and unused.</p>\n<h4 id=\"targettriplelinker\"><a class=\"header\" href=\"#targettriplelinker\"><code>target.&lt;triple&gt;.linker</code></a></h4>\n<ul>\n<li>Type: string (program path)</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_TARGET_&lt;triple&gt;_LINKER</code></li>\n</ul>\n<p>Specifies the linker which is passed to <code class=\"hljs\">rustc</code> (via <a href=\"reference/../../rustc/codegen-options/index.html#linker\"><code class=\"hljs\">-C linker</code></a>) when the\n<a href=\"reference/../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\"><code class=\"hljs\">&lt;triple&gt;</code></a> is being compiled for. By default, the linker is not overridden.</p>\n<h4 id=\"targetcfglinker\"><a class=\"header\" href=\"#targetcfglinker\"><code>target.&lt;cfg&gt;.linker</code></a></h4>\n<p>This is similar to the <a href=\"reference/config.html#targettriplelinker\">target linker</a>, but using\na <a href=\"reference/../../reference/conditional-compilation.html\"><code class=\"hljs\">cfg()</code> expression</a>. If both a <a href=\"reference/../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\"><code class=\"hljs\">&lt;triple&gt;</code></a> and <code class=\"hljs\">&lt;cfg&gt;</code> runner match,\nthe <code class=\"hljs\">&lt;triple&gt;</code> will take precedence. It is an error if more than one\n<code class=\"hljs\">&lt;cfg&gt;</code> runner matches the current target.</p>\n<h4 id=\"targettriplerunner\"><a class=\"header\" href=\"#targettriplerunner\"><code>target.&lt;triple&gt;.runner</code></a></h4>\n<ul>\n<li>Type: string or array of strings (<a href=\"reference/config.html#executable-paths-with-arguments\">program path with args</a>)</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_TARGET_&lt;triple&gt;_RUNNER</code></li>\n</ul>\n<p>If a runner is provided, executables for the target <a href=\"reference/../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\"><code class=\"hljs\">&lt;triple&gt;</code></a> will be\nexecuted by invoking the specified runner with the actual executable passed as\nan argument. This applies to <a href=\"reference/../commands/cargo-run.html\"><code class=\"hljs\">cargo run</code></a>, <a href=\"reference/../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a> and <a href=\"reference/../commands/cargo-bench.html\"><code class=\"hljs\">cargo bench</code></a>\ncommands. By default, compiled executables are executed directly.</p>\n<h4 id=\"targetcfgrunner\"><a class=\"header\" href=\"#targetcfgrunner\"><code>target.&lt;cfg&gt;.runner</code></a></h4>\n<p>This is similar to the <a href=\"reference/config.html#targettriplerunner\">target runner</a>, but using\na <a href=\"reference/../../reference/conditional-compilation.html\"><code class=\"hljs\">cfg()</code> expression</a>. If both a <a href=\"reference/../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\"><code class=\"hljs\">&lt;triple&gt;</code></a> and <code class=\"hljs\">&lt;cfg&gt;</code> runner match,\nthe <code class=\"hljs\">&lt;triple&gt;</code> will take precedence. It is an error if more than one\n<code class=\"hljs\">&lt;cfg&gt;</code> runner matches the current target.</p>\n<h4 id=\"targettriplerustflags\"><a class=\"header\" href=\"#targettriplerustflags\"><code>target.&lt;triple&gt;.rustflags</code></a></h4>\n<ul>\n<li>Type: string or array of strings</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_TARGET_&lt;triple&gt;_RUSTFLAGS</code></li>\n</ul>\n<p>Passes a set of custom flags to the compiler for this <a href=\"reference/../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\"><code class=\"hljs\">&lt;triple&gt;</code></a>.\nThe value may be an array of strings or a space-separated string.</p>\n<p>See <a href=\"reference/config.html#buildrustflags\"><code class=\"hljs\">build.rustflags</code></a> for more details on the different\nways to specific extra flags.</p>\n<h4 id=\"targetcfgrustflags\"><a class=\"header\" href=\"#targetcfgrustflags\"><code>target.&lt;cfg&gt;.rustflags</code></a></h4>\n<p>This is similar to the <a href=\"reference/config.html#targettriplerustflags\">target rustflags</a>, but\nusing a <a href=\"reference/../../reference/conditional-compilation.html\"><code class=\"hljs\">cfg()</code> expression</a>. If several <code class=\"hljs\">&lt;cfg&gt;</code> and <a href=\"reference/../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\"><code class=\"hljs\">&lt;triple&gt;</code></a> entries\nmatch the current target, the flags are joined together.</p>\n<h4 id=\"targettriplerustdocflags\"><a class=\"header\" href=\"#targettriplerustdocflags\"><code>target.&lt;triple&gt;.rustdocflags</code></a></h4>\n<ul>\n<li>Type: string or array of strings</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_TARGET_&lt;triple&gt;_RUSTDOCFLAGS</code></li>\n</ul>\n<p>Passes a set of custom flags to the compiler for this <a href=\"reference/../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\"><code class=\"hljs\">&lt;triple&gt;</code></a>.\nThe value may be an array of strings or a space-separated string.</p>\n<p>See <a href=\"reference/config.html#buildrustdocflags\"><code class=\"hljs\">build.rustdocflags</code></a> for more details on the different\nways to specific extra flags.</p>\n<h4 id=\"targettriplelinks\"><a class=\"header\" href=\"#targettriplelinks\"><code>target.&lt;triple&gt;.&lt;links&gt;</code></a></h4>\n<p>The links sub-table provides a way to <a href=\"reference/build-scripts.html#overriding-build-scripts\">override a build script</a>. When\nspecified, the build script for the given <code class=\"hljs\">links</code> library will not be\nrun, and the given values will be used instead.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[target.x86_64-unknown-linux-gnu.foo]</span>\n<span class=\"hljs-attr\">rustc-link-lib</span> = [<span class=\"hljs-string\">\"foo\"</span>]\n<span class=\"hljs-attr\">rustc-link-search</span> = [<span class=\"hljs-string\">\"/path/to/foo\"</span>]\n<span class=\"hljs-attr\">rustc-flags</span> = <span class=\"hljs-string\">\"-L /some/path\"</span>\n<span class=\"hljs-attr\">rustc-cfg</span> = [<span class=\"hljs-string\">'key=\"value\"'</span>]\n<span class=\"hljs-attr\">rustc-env</span> = {key = <span class=\"hljs-string\">\"value\"</span>}\n<span class=\"hljs-attr\">rustc-cdylib-link-arg</span> = [<span class=\"hljs-string\">\"…\"</span>]\n<span class=\"hljs-attr\">metadata_key1</span> = <span class=\"hljs-string\">\"value\"</span>\n<span class=\"hljs-attr\">metadata_key2</span> = <span class=\"hljs-string\">\"value\"</span>\n</code></pre>\n<h3 id=\"term\"><a class=\"header\" href=\"#term\"><code>[term]</code></a></h3>\n<p>The <code class=\"hljs\">[term]</code> table controls terminal output and interaction.</p>\n<h4 id=\"termquiet\"><a class=\"header\" href=\"#termquiet\"><code>term.quiet</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code class=\"hljs\">CARGO_TERM_QUIET</code></li>\n</ul>\n<p>Controls whether or not log messages are displayed by Cargo.</p>\n<p>Specifying the <code class=\"hljs\">--quiet</code> flag will override and force quiet output.\nSpecifying the <code class=\"hljs\">--verbose</code> flag will override and disable quiet output.</p>\n<h4 id=\"termverbose\"><a class=\"header\" href=\"#termverbose\"><code>term.verbose</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code class=\"hljs\">CARGO_TERM_VERBOSE</code></li>\n</ul>\n<p>Controls whether or not extra detailed messages are displayed by Cargo.</p>\n<p>Specifying the <code class=\"hljs\">--quiet</code> flag will override and disable verbose output.\nSpecifying the <code class=\"hljs\">--verbose</code> flag will override and force verbose output.</p>\n<h4 id=\"termcolor\"><a class=\"header\" href=\"#termcolor\"><code>term.color</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: “auto”</li>\n<li>Environment: <code class=\"hljs\">CARGO_TERM_COLOR</code></li>\n</ul>\n<p>Controls whether or not colored output is used in the terminal. Possible values:</p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>Can be overridden with the <code class=\"hljs\">--color</code> command-line option.</p>\n<h4 id=\"termhyperlinks\"><a class=\"header\" href=\"#termhyperlinks\"><code>term.hyperlinks</code></a></h4>\n<ul>\n<li>Type: bool</li>\n<li>Default: auto-detect</li>\n<li>Environment: <code class=\"hljs\">CARGO_TERM_HYPERLINKS</code></li>\n</ul>\n<p>Controls whether or not hyperlinks are used in the terminal.</p>\n<h4 id=\"termunicode\"><a class=\"header\" href=\"#termunicode\"><code>term.unicode</code></a></h4>\n<ul>\n<li>Type: bool</li>\n<li>Default: auto-detect</li>\n<li>Environment: <code class=\"hljs\">CARGO_TERM_UNICODE</code></li>\n</ul>\n<p>Control whether output can be rendered using non-ASCII unicode characters.</p>\n<h4 id=\"termprogresswhen\"><a class=\"header\" href=\"#termprogresswhen\"><code>term.progress.when</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: “auto”</li>\n<li>Environment: <code class=\"hljs\">CARGO_TERM_PROGRESS_WHEN</code></li>\n</ul>\n<p>Controls whether or not progress bar is shown in the terminal. Possible values:</p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Intelligently guess whether to show progress bar.</li>\n<li><code class=\"hljs\">always</code>: Always show progress bar.</li>\n<li><code class=\"hljs\">never</code>: Never show progress bar.</li>\n</ul>\n<h4 id=\"termprogresswidth\"><a class=\"header\" href=\"#termprogresswidth\"><code>term.progress.width</code></a></h4>\n<ul>\n<li>Type: integer</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_TERM_PROGRESS_WIDTH</code></li>\n</ul>\n<p>Sets the width for progress bar.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"environment-variables-1\"><a class=\"header\" href=\"#environment-variables-1\">Environment Variables</a></h1>\n<p>Cargo sets and reads a number of environment variables which your code can detect\nor override. Here is a list of the variables Cargo sets, organized by when it interacts\nwith them:</p>\n<h2 id=\"environment-variables-cargo-reads\"><a class=\"header\" href=\"#environment-variables-cargo-reads\">Environment variables Cargo reads</a></h2>\n<p>You can override these environment variables to change Cargo’s behavior on your\nsystem:</p>\n<ul>\n<li><code class=\"hljs\">CARGO_LOG</code> — Cargo uses the <a href=\"https://docs.rs/tracing\"><code class=\"hljs\">tracing</code></a> crate to display debug log messages.\nThe <code class=\"hljs\">CARGO_LOG</code> environment variable can be set to enable debug logging,\nwith a value such as <code class=\"hljs\">trace</code>, <code class=\"hljs\">debug</code>, or <code class=\"hljs\">warn</code>.\nUsually it is only used during debugging. For more details refer to the\n<a href=\"https://doc.crates.io/contrib/implementation/debugging.html#logging\">Debug logging</a>.</li>\n<li><code class=\"hljs\">CARGO_HOME</code> — Cargo maintains a local cache of the registry index and of\ngit checkouts of crates. By default these are stored under <code class=\"hljs\">$HOME/.cargo</code>\n(<code class=\"hljs\">%USERPROFILE%\\.cargo</code> on Windows), but this variable overrides the\nlocation of this directory. Once a crate is cached it is not removed by the\nclean command.\nFor more details refer to the <a href=\"reference/../guide/cargo-home.html\">guide</a>.</li>\n<li><code class=\"hljs\">CARGO_TARGET_DIR</code> — Location of where to place all generated artifacts,\nrelative to the current working directory. See <a href=\"reference/config.html#buildtarget-dir\"><code class=\"hljs\">build.target-dir</code></a> to set\nvia config.</li>\n<li><code class=\"hljs\">CARGO</code> — If set, Cargo will forward this value instead of setting it\nto its own auto-detected path when it builds crates and when it\nexecutes build scripts and external subcommands. This value is not\ndirectly executed by Cargo, and should always point at a command that\nbehaves exactly like <code class=\"hljs\">cargo</code>, as that’s what users of the variable\nwill be expecting.</li>\n<li><code class=\"hljs\">RUSTC</code> — Instead of running <code class=\"hljs\">rustc</code>, Cargo will execute this specified\ncompiler instead. See <a href=\"reference/config.html#buildrustc\"><code class=\"hljs\">build.rustc</code></a> to set via config.</li>\n<li><code class=\"hljs\">RUSTC_WRAPPER</code> — Instead of simply running <code class=\"hljs\">rustc</code>, Cargo will execute this\nspecified wrapper, passing as its command-line arguments the rustc\ninvocation, with the first argument being the path to the actual rustc.\nUseful to set up a build cache tool such as <code class=\"hljs\">sccache</code>. See\n<a href=\"reference/config.html#buildrustc-wrapper\"><code class=\"hljs\">build.rustc-wrapper</code></a> to set via config. Setting this to the empty string\noverwrites the config and resets cargo to not use a wrapper.</li>\n<li><code class=\"hljs\">RUSTC_WORKSPACE_WRAPPER</code> — Instead of simply running <code class=\"hljs\">rustc</code>, for workspace members Cargo will\nexecute this specified wrapper, passing as its command-line arguments the rustc invocation, with\nthe first argument being the path to the actual rustc. When building a single-package project\nwithout workspaces, that package is considered to be the workspace. It affects the filename hash\nso that artifacts produced by the wrapper are cached separately. See\n<a href=\"reference/config.html#buildrustc-workspace-wrapper\"><code class=\"hljs\">build.rustc-workspace-wrapper</code></a> to set via config. Setting this to the empty string overwrites\nthe config and resets cargo to not use a wrapper for workspace members. If both <code class=\"hljs\">RUSTC_WRAPPER</code>\nand <code class=\"hljs\">RUSTC_WORKSPACE_WRAPPER</code> are set, then they will be nested: the final invocation is\n<code class=\"hljs\">$RUSTC_WRAPPER $RUSTC_WORKSPACE_WRAPPER $RUSTC</code>.</li>\n<li><code class=\"hljs\">RUSTDOC</code> — Instead of running <code class=\"hljs\">rustdoc</code>, Cargo will execute this specified\n<code class=\"hljs\">rustdoc</code> instance instead. See <a href=\"reference/config.html#buildrustdoc\"><code class=\"hljs\">build.rustdoc</code></a> to set via config.</li>\n<li><code class=\"hljs\">RUSTDOCFLAGS</code> — A space-separated list of custom flags to pass to all <code class=\"hljs\">rustdoc</code>\ninvocations that Cargo performs. In contrast with <a href=\"reference/../commands/cargo-rustdoc.html\"><code class=\"hljs\">cargo rustdoc</code></a>, this is\nuseful for passing a flag to <em>all</em> <code class=\"hljs\">rustdoc</code> instances. See\n<a href=\"reference/config.html#buildrustdocflags\"><code class=\"hljs\">build.rustdocflags</code></a> for some more ways to set flags. This string is\nsplit by whitespace; for a more robust encoding of multiple arguments,\nsee <code class=\"hljs\">CARGO_ENCODED_RUSTDOCFLAGS</code>.</li>\n<li><code class=\"hljs\">CARGO_ENCODED_RUSTDOCFLAGS</code> —  A list of custom flags separated by <code class=\"hljs\">0x1f</code>\n(ASCII Unit Separator) to pass to all <code class=\"hljs\">rustdoc</code> invocations that Cargo performs.</li>\n<li><code class=\"hljs\">RUSTFLAGS</code> — A space-separated list of custom flags to pass to all compiler\ninvocations that Cargo performs. In contrast with <a href=\"reference/../commands/cargo-rustc.html\"><code class=\"hljs\">cargo rustc</code></a>, this is\nuseful for passing a flag to <em>all</em> compiler instances. See\n<a href=\"reference/config.html#buildrustflags\"><code class=\"hljs\">build.rustflags</code></a> for some more ways to set flags. This string is\nsplit by whitespace; for a more robust encoding of multiple arguments,\nsee <code class=\"hljs\">CARGO_ENCODED_RUSTFLAGS</code>.</li>\n<li><code class=\"hljs\">CARGO_ENCODED_RUSTFLAGS</code> — A list of custom flags separated by <code class=\"hljs\">0x1f</code>\n(ASCII Unit Separator) to pass to all compiler invocations that Cargo performs.</li>\n<li><code class=\"hljs\">CARGO_INCREMENTAL</code> — If this is set to 1 then Cargo will force <a href=\"reference/profiles.html#incremental\">incremental\ncompilation</a> to be enabled for the current compilation, and when set to 0 it\nwill force disabling it. If this env var isn’t present then cargo’s defaults\nwill otherwise be used. See also <a href=\"reference/config.html#buildincremental\"><code class=\"hljs\">build.incremental</code></a> config value.</li>\n<li><code class=\"hljs\">CARGO_CACHE_RUSTC_INFO</code> — If this is set to 0 then Cargo will not try to cache\ncompiler version information.</li>\n<li><code class=\"hljs\">HTTPS_PROXY</code> or <code class=\"hljs\">https_proxy</code> or <code class=\"hljs\">http_proxy</code> — The HTTP proxy to use, see\n<a href=\"reference/config.html#httpproxy\"><code class=\"hljs\">http.proxy</code></a> for more detail.</li>\n<li><code class=\"hljs\">HTTP_TIMEOUT</code> — The HTTP timeout in seconds, see <a href=\"reference/config.html#httptimeout\"><code class=\"hljs\">http.timeout</code></a> for more\ndetail.</li>\n<li><code class=\"hljs\">TERM</code> — If this is set to <code class=\"hljs\">dumb</code>, it disables the progress bar.</li>\n<li><code class=\"hljs\">BROWSER</code> — The web browser to execute to open documentation with <a href=\"reference/../commands/cargo-doc.html\"><code class=\"hljs\">cargo doc</code></a>’s’ <code class=\"hljs\">--open</code> flag, see <a href=\"reference/config.html#docbrowser\"><code class=\"hljs\">doc.browser</code></a> for more details.</li>\n<li><code class=\"hljs\">RUSTFMT</code> — Instead of running <code class=\"hljs\">rustfmt</code>,\n<a href=\"https://github.com/rust-lang/rustfmt\"><code class=\"hljs\">cargo fmt</code></a> will execute this specified\n<code class=\"hljs\">rustfmt</code> instance instead.</li>\n</ul>\n<h3 id=\"configuration-environment-variables\"><a class=\"header\" href=\"#configuration-environment-variables\">Configuration environment variables</a></h3>\n<p>Cargo reads environment variables for some configuration values.\nSee the <a href=\"reference/config.html#environment-variables\">configuration chapter</a> for more details.\nIn summary, the supported environment variables are:</p>\n<ul>\n<li><code class=\"hljs\">CARGO_ALIAS_&lt;name&gt;</code> — Command aliases, see <a href=\"reference/config.html#alias\"><code class=\"hljs\">alias</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_JOBS</code> — Number of parallel jobs, see <a href=\"reference/config.html#buildjobs\"><code class=\"hljs\">build.jobs</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_RUSTC</code> — The <code class=\"hljs\">rustc</code> executable, see <a href=\"reference/config.html#buildrustc\"><code class=\"hljs\">build.rustc</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_RUSTC_WRAPPER</code> — The <code class=\"hljs\">rustc</code> wrapper, see <a href=\"reference/config.html#buildrustc-wrapper\"><code class=\"hljs\">build.rustc-wrapper</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_RUSTC_WORKSPACE_WRAPPER</code> — The <code class=\"hljs\">rustc</code> wrapper for workspace members only, see <a href=\"reference/config.html#buildrustc-workspace-wrapper\"><code class=\"hljs\">build.rustc-workspace-wrapper</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_RUSTDOC</code> — The <code class=\"hljs\">rustdoc</code> executable, see <a href=\"reference/config.html#buildrustdoc\"><code class=\"hljs\">build.rustdoc</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_TARGET</code> — The default target platform, see <a href=\"reference/config.html#buildtarget\"><code class=\"hljs\">build.target</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_TARGET_DIR</code> — The default output directory, see <a href=\"reference/config.html#buildtarget-dir\"><code class=\"hljs\">build.target-dir</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_RUSTFLAGS</code> — Extra <code class=\"hljs\">rustc</code> flags, see <a href=\"reference/config.html#buildrustflags\"><code class=\"hljs\">build.rustflags</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_RUSTDOCFLAGS</code> — Extra <code class=\"hljs\">rustdoc</code> flags, see <a href=\"reference/config.html#buildrustdocflags\"><code class=\"hljs\">build.rustdocflags</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_INCREMENTAL</code> — Incremental compilation, see <a href=\"reference/config.html#buildincremental\"><code class=\"hljs\">build.incremental</code></a>.</li>\n<li><code class=\"hljs\">CARGO_BUILD_DEP_INFO_BASEDIR</code> — Dep-info relative directory, see <a href=\"reference/config.html#builddep-info-basedir\"><code class=\"hljs\">build.dep-info-basedir</code></a>.</li>\n<li><code class=\"hljs\">CARGO_CARGO_NEW_VCS</code> — The default source control system with <a href=\"reference/../commands/cargo-new.html\"><code class=\"hljs\">cargo new</code></a>, see <a href=\"reference/config.html#cargo-newvcs\"><code class=\"hljs\">cargo-new.vcs</code></a>.</li>\n<li><code class=\"hljs\">CARGO_FUTURE_INCOMPAT_REPORT_FREQUENCY</code> — How often we should generate a future incompat report notification, see <a href=\"reference/config.html#future-incompat-reportfrequency\"><code class=\"hljs\">future-incompat-report.frequency</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_DEBUG</code> — Enables HTTP debugging, see <a href=\"reference/config.html#httpdebug\"><code class=\"hljs\">http.debug</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_PROXY</code> — Enables HTTP proxy, see <a href=\"reference/config.html#httpproxy\"><code class=\"hljs\">http.proxy</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_TIMEOUT</code> — The HTTP timeout, see <a href=\"reference/config.html#httptimeout\"><code class=\"hljs\">http.timeout</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_CAINFO</code> — The TLS certificate Certificate Authority file, see <a href=\"reference/config.html#httpcainfo\"><code class=\"hljs\">http.cainfo</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_CHECK_REVOKE</code> — Disables TLS certificate revocation checks, see <a href=\"reference/config.html#httpcheck-revoke\"><code class=\"hljs\">http.check-revoke</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_SSL_VERSION</code> — The TLS version to use, see <a href=\"reference/config.html#httpssl-version\"><code class=\"hljs\">http.ssl-version</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_LOW_SPEED_LIMIT</code> — The HTTP low-speed limit, see <a href=\"reference/config.html#httplow-speed-limit\"><code class=\"hljs\">http.low-speed-limit</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_MULTIPLEXING</code> — Whether HTTP/2 multiplexing is used, see <a href=\"reference/config.html#httpmultiplexing\"><code class=\"hljs\">http.multiplexing</code></a>.</li>\n<li><code class=\"hljs\">CARGO_HTTP_USER_AGENT</code> — The HTTP user-agent header, see <a href=\"reference/config.html#httpuser-agent\"><code class=\"hljs\">http.user-agent</code></a>.</li>\n<li><code class=\"hljs\">CARGO_INSTALL_ROOT</code> — The default directory for <a href=\"reference/../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a>, see <a href=\"reference/config.html#installroot\"><code class=\"hljs\">install.root</code></a>.</li>\n<li><code class=\"hljs\">CARGO_NET_RETRY</code> — Number of times to retry network errors, see <a href=\"reference/config.html#netretry\"><code class=\"hljs\">net.retry</code></a>.</li>\n<li><code class=\"hljs\">CARGO_NET_GIT_FETCH_WITH_CLI</code> — Enables the use of the <code class=\"hljs\">git</code> executable to fetch, see <a href=\"reference/config.html#netgit-fetch-with-cli\"><code class=\"hljs\">net.git-fetch-with-cli</code></a>.</li>\n<li><code class=\"hljs\">CARGO_NET_OFFLINE</code> — Offline mode, see <a href=\"reference/config.html#netoffline\"><code class=\"hljs\">net.offline</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_BUILD_OVERRIDE_&lt;key&gt;</code> — Override build script profile, see <a href=\"reference/config.html#profilenamebuild-override\"><code class=\"hljs\">profile.&lt;name&gt;.build-override</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_CODEGEN_UNITS</code> — Set code generation units, see <a href=\"reference/config.html#profilenamecodegen-units\"><code class=\"hljs\">profile.&lt;name&gt;.codegen-units</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_DEBUG</code> — What kind of debug info to include, see <a href=\"reference/config.html#profilenamedebug\"><code class=\"hljs\">profile.&lt;name&gt;.debug</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_DEBUG_ASSERTIONS</code> — Enable/disable debug assertions, see <a href=\"reference/config.html#profilenamedebug-assertions\"><code class=\"hljs\">profile.&lt;name&gt;.debug-assertions</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_INCREMENTAL</code> — Enable/disable incremental compilation, see <a href=\"reference/config.html#profilenameincremental\"><code class=\"hljs\">profile.&lt;name&gt;.incremental</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_LTO</code> — Link-time optimization, see <a href=\"reference/config.html#profilenamelto\"><code class=\"hljs\">profile.&lt;name&gt;.lto</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_OVERFLOW_CHECKS</code> — Enable/disable overflow checks, see <a href=\"reference/config.html#profilenameoverflow-checks\"><code class=\"hljs\">profile.&lt;name&gt;.overflow-checks</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_OPT_LEVEL</code> — Set the optimization level, see <a href=\"reference/config.html#profilenameopt-level\"><code class=\"hljs\">profile.&lt;name&gt;.opt-level</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_PANIC</code> — The panic strategy to use, see <a href=\"reference/config.html#profilenamepanic\"><code class=\"hljs\">profile.&lt;name&gt;.panic</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_RPATH</code> — The rpath linking option, see <a href=\"reference/config.html#profilenamerpath\"><code class=\"hljs\">profile.&lt;name&gt;.rpath</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_SPLIT_DEBUGINFO</code> — Controls debug file output behavior, see <a href=\"reference/config.html#profilenamesplit-debuginfo\"><code class=\"hljs\">profile.&lt;name&gt;.split-debuginfo</code></a>.</li>\n<li><code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_STRIP</code> — Controls stripping of symbols and/or debuginfos, see <a href=\"reference/config.html#profilenamestrip\"><code class=\"hljs\">profile.&lt;name&gt;.strip</code></a>.</li>\n<li><code class=\"hljs\">CARGO_REGISTRIES_&lt;name&gt;_CREDENTIAL_PROVIDER</code> — Credential provider for a registry, see <a href=\"reference/config.html#registriesnamecredential-provider\"><code class=\"hljs\">registries.&lt;name&gt;.credential-provider</code></a>.</li>\n<li><code class=\"hljs\">CARGO_REGISTRIES_&lt;name&gt;_INDEX</code> — URL of a registry index, see <a href=\"reference/config.html#registriesnameindex\"><code class=\"hljs\">registries.&lt;name&gt;.index</code></a>.</li>\n<li><code class=\"hljs\">CARGO_REGISTRIES_&lt;name&gt;_TOKEN</code> — Authentication token of a registry, see <a href=\"reference/config.html#registriesnametoken\"><code class=\"hljs\">registries.&lt;name&gt;.token</code></a>.</li>\n<li><code class=\"hljs\">CARGO_REGISTRY_CREDENTIAL_PROVIDER</code> — Credential provider for <a href=\"https://crates.io/\">crates.io</a>, see <a href=\"reference/config.html#registrycredential-provider\"><code class=\"hljs\">registry.credential-provider</code></a>.</li>\n<li><code class=\"hljs\">CARGO_REGISTRY_DEFAULT</code> — Default registry for the <code class=\"hljs\">--registry</code> flag, see <a href=\"reference/config.html#registrydefault\"><code class=\"hljs\">registry.default</code></a>.</li>\n<li><code class=\"hljs\">CARGO_REGISTRY_GLOBAL_CREDENTIAL_PROVIDERS</code> — Credential providers for registries that do not have a specific provider defined. See <a href=\"reference/config.html#registryglobal-credential-providers\"><code class=\"hljs\">registry.global-credential-providers</code></a>.</li>\n<li><code class=\"hljs\">CARGO_REGISTRY_TOKEN</code> — Authentication token for <a href=\"https://crates.io/\">crates.io</a>, see <a href=\"reference/config.html#registrytoken\"><code class=\"hljs\">registry.token</code></a>.</li>\n<li><code class=\"hljs\">CARGO_TARGET_&lt;triple&gt;_LINKER</code> — The linker to use, see <a href=\"reference/config.html#targettriplelinker\"><code class=\"hljs\">target.&lt;triple&gt;.linker</code></a>. The triple must be <a href=\"reference/config.html#environment-variables\">converted to uppercase and underscores</a>.</li>\n<li><code class=\"hljs\">CARGO_TARGET_&lt;triple&gt;_RUNNER</code> — The executable runner, see <a href=\"reference/config.html#targettriplerunner\"><code class=\"hljs\">target.&lt;triple&gt;.runner</code></a>.</li>\n<li><code class=\"hljs\">CARGO_TARGET_&lt;triple&gt;_RUSTFLAGS</code> — Extra <code class=\"hljs\">rustc</code> flags for a target, see <a href=\"reference/config.html#targettriplerustflags\"><code class=\"hljs\">target.&lt;triple&gt;.rustflags</code></a>.</li>\n<li><code class=\"hljs\">CARGO_TERM_QUIET</code> — Quiet mode, see <a href=\"reference/config.html#termquiet\"><code class=\"hljs\">term.quiet</code></a>.</li>\n<li><code class=\"hljs\">CARGO_TERM_VERBOSE</code> — The default terminal verbosity, see <a href=\"reference/config.html#termverbose\"><code class=\"hljs\">term.verbose</code></a>.</li>\n<li><code class=\"hljs\">CARGO_TERM_COLOR</code> — The default color mode, see <a href=\"reference/config.html#termcolor\"><code class=\"hljs\">term.color</code></a>.</li>\n<li><code class=\"hljs\">CARGO_TERM_PROGRESS_WHEN</code> — The default progress bar showing mode, see <a href=\"reference/config.html#termprogresswhen\"><code class=\"hljs\">term.progress.when</code></a>.</li>\n<li><code class=\"hljs\">CARGO_TERM_PROGRESS_WIDTH</code> — The default progress bar width, see <a href=\"reference/config.html#termprogresswidth\"><code class=\"hljs\">term.progress.width</code></a>.</li>\n</ul>\n<h2 id=\"environment-variables-cargo-sets-for-crates\"><a class=\"header\" href=\"#environment-variables-cargo-sets-for-crates\">Environment variables Cargo sets for crates</a></h2>\n<p>Cargo exposes these environment variables to your crate when it is compiled.\nNote that this applies for running binaries with <code class=\"hljs\">cargo run</code> and <code class=\"hljs\">cargo test</code>\nas well. To get the value of any of these variables in a Rust program, do\nthis:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> version = <span class=\"hljs-built_in\">env!</span>(<span class=\"hljs-string\">\"CARGO_PKG_VERSION\"</span>);</code></pre>\n<p><code class=\"hljs\">version</code> will now contain the value of <code class=\"hljs\">CARGO_PKG_VERSION</code>.</p>\n<p>Note that if one of these values is not provided in the manifest, the\ncorresponding environment variable is set to the empty string, <code class=\"hljs\">\"\"</code>.</p>\n<ul>\n<li><code class=\"hljs\">CARGO</code> — Path to the <code class=\"hljs\">cargo</code> binary performing the build.</li>\n<li><code class=\"hljs\">CARGO_MANIFEST_DIR</code> — The directory containing the manifest of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_VERSION</code> — The full version of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_VERSION_MAJOR</code> — The major version of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_VERSION_MINOR</code> — The minor version of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_VERSION_PATCH</code> — The patch version of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_VERSION_PRE</code> — The pre-release version of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_AUTHORS</code> — Colon separated list of authors from the manifest of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_NAME</code> — The name of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_DESCRIPTION</code> — The description from the manifest of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_HOMEPAGE</code> — The home page from the manifest of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_REPOSITORY</code> — The repository from the manifest of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_LICENSE</code> — The license from the manifest of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_LICENSE_FILE</code> — The license file from the manifest of your package.</li>\n<li><code class=\"hljs\">CARGO_PKG_RUST_VERSION</code> — The Rust version from the manifest of your package.\nNote that this is the minimum Rust version supported by the package, not the\ncurrent Rust version.</li>\n<li><code class=\"hljs\">CARGO_PKG_README</code> — Path to the README file of your package.</li>\n<li><code class=\"hljs\">CARGO_CRATE_NAME</code> — The name of the crate that is currently being compiled. It is the name of the <a href=\"reference/cargo-targets.html\">Cargo target</a> with <code class=\"hljs\">-</code> converted to <code class=\"hljs\">_</code>, such as the name of the library, binary, example, integration test, or benchmark.</li>\n<li><code class=\"hljs\">CARGO_BIN_NAME</code> — The name of the binary that is currently being compiled.\nOnly set for <a href=\"reference/cargo-targets.html#binaries\">binaries</a> or binary <a href=\"reference/cargo-targets.html#examples\">examples</a>. This name does not include any\nfile extension, such as <code class=\"hljs\">.exe</code>.</li>\n<li><code class=\"hljs\">OUT_DIR</code> — If the package has a build script, this is set to the folder\nwhere the build script should place its output. See below for more information.\n(Only set during compilation.)</li>\n<li><code class=\"hljs\">CARGO_BIN_EXE_&lt;name&gt;</code> — The absolute path to a binary target’s executable.\nThis is only set when building an <a href=\"reference/cargo-targets.html#integration-tests\">integration test</a> or benchmark. This may\nbe used with the <a href=\"reference/../../std/macro.env.html\"><code class=\"hljs\">env</code> macro</a> to find the executable to run for testing\npurposes. The <code class=\"hljs\">&lt;name&gt;</code> is the name of the binary target, exactly as-is. For\nexample, <code class=\"hljs\">CARGO_BIN_EXE_my-program</code> for a binary named <code class=\"hljs\">my-program</code>.\nBinaries are automatically built when the test is built, unless the binary\nhas required features that are not enabled.</li>\n<li><code class=\"hljs\">CARGO_PRIMARY_PACKAGE</code> — This environment variable will be set if the\npackage being built is primary. Primary packages are the ones the user\nselected on the command-line, either with <code class=\"hljs\">-p</code> flags or the defaults based\non the current directory and the default workspace members. This environment\nvariable will not be set when building dependencies. This is only set when\ncompiling the package (not when running binaries or tests).</li>\n<li><code class=\"hljs\">CARGO_TARGET_TMPDIR</code> — Only set when building <a href=\"reference/cargo-targets.html#integration-tests\">integration test</a> or benchmark code.\nThis is a path to a directory inside the target directory\nwhere integration tests or benchmarks are free to put any data needed by\nthe tests/benches. Cargo initially creates this directory but doesn’t\nmanage its content in any way, this is the responsibility of the test code.</li>\n<li><code class=\"hljs\">CARGO_RUSTC_CURRENT_DIR</code> — This is a path that <code class=\"hljs\">rustc</code> is invoked from <strong>(nightly only)</strong>.</li>\n</ul>\n<h3 id=\"dynamic-library-paths\"><a class=\"header\" href=\"#dynamic-library-paths\">Dynamic library paths</a></h3>\n<p>Cargo also sets the dynamic library path when compiling and running binaries\nwith commands like <code class=\"hljs\">cargo run</code> and <code class=\"hljs\">cargo test</code>. This helps with locating\nshared libraries that are part of the build process. The variable name depends\non the platform:</p>\n<ul>\n<li>Windows: <code class=\"hljs\">PATH</code></li>\n<li>macOS: <code class=\"hljs\">DYLD_FALLBACK_LIBRARY_PATH</code></li>\n<li>Unix: <code class=\"hljs\">LD_LIBRARY_PATH</code></li>\n<li>AIX: <code class=\"hljs\">LIBPATH</code></li>\n</ul>\n<p>The value is extended from the existing value when Cargo starts. macOS has\nspecial consideration where if <code class=\"hljs\">DYLD_FALLBACK_LIBRARY_PATH</code> is not already\nset, it will add the default <code class=\"hljs\">$HOME/lib:/usr/local/lib:/usr/lib</code>.</p>\n<p>Cargo includes the following paths:</p>\n<ul>\n<li>Search paths included from any build script with the <a href=\"reference/build-scripts.html#rustc-link-search\"><code class=\"hljs\">rustc-link-search</code>\ninstruction</a>. Paths outside of the\n<code class=\"hljs\">target</code> directory are removed. It is the responsibility of the user running\nCargo to properly set the environment if additional libraries on the system\nare needed in the search path.</li>\n<li>The base output directory, such as <code class=\"hljs\">target/debug</code>, and the “deps” directory.\nThis is mostly for legacy support of <code class=\"hljs\">rustc</code> compiler plugins.</li>\n<li>The rustc sysroot library path. This generally is not important to most\nusers.</li>\n</ul>\n<h2 id=\"environment-variables-cargo-sets-for-build-scripts\"><a class=\"header\" href=\"#environment-variables-cargo-sets-for-build-scripts\">Environment variables Cargo sets for build scripts</a></h2>\n<p>Cargo sets several environment variables when build scripts are run. Because these variables\nare not yet set when the build script is compiled, the above example using <code class=\"hljs\">env!</code> won’t work\nand instead you’ll need to retrieve the values when the build script is run:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::env;\n<span class=\"hljs-keyword\">let</span> out_dir = env::var(<span class=\"hljs-string\">\"OUT_DIR\"</span>).unwrap();</code></pre>\n<p><code class=\"hljs\">out_dir</code> will now contain the value of <code class=\"hljs\">OUT_DIR</code>.</p>\n<ul>\n<li><code class=\"hljs\">CARGO</code> — Path to the <code class=\"hljs\">cargo</code> binary performing the build.</li>\n<li><code class=\"hljs\">CARGO_MANIFEST_DIR</code> — The directory containing the manifest for the package\nbeing built (the package containing the build script). Also note that this is\nthe value of the current working directory of the build script when it starts.</li>\n<li><code class=\"hljs\">CARGO_MANIFEST_LINKS</code> — the manifest <code class=\"hljs\">links</code> value.</li>\n<li><code class=\"hljs\">CARGO_MAKEFLAGS</code> — Contains parameters needed for Cargo’s <a href=\"https://www.gnu.org/software/make/manual/html_node/Job-Slots.html\">jobserver</a>\nimplementation to parallelize subprocesses. Rustc or cargo invocations from\nbuild.rs can already read <code class=\"hljs\">CARGO_MAKEFLAGS</code>, but GNU Make requires the flags\nto be specified either directly as arguments, or through the <code class=\"hljs\">MAKEFLAGS</code>\nenvironment variable. Currently Cargo doesn’t set the <code class=\"hljs\">MAKEFLAGS</code> variable,\nbut it’s free for build scripts invoking GNU Make to set it to the contents\nof <code class=\"hljs\">CARGO_MAKEFLAGS</code>.</li>\n<li><code class=\"hljs\">CARGO_FEATURE_&lt;name&gt;</code> — For each activated feature of the package being built,\nthis environment variable will be present where <code class=\"hljs\">&lt;name&gt;</code> is the name of the\nfeature uppercased and having <code class=\"hljs\">-</code> translated to <code class=\"hljs\">_</code>.</li>\n<li><code class=\"hljs\">CARGO_CFG_&lt;cfg&gt;</code> — For each <a href=\"reference/../../reference/conditional-compilation.html\">configuration option</a> of the\npackage being built, this environment variable will contain the value of the\nconfiguration, where <code class=\"hljs\">&lt;cfg&gt;</code> is the name of the configuration uppercased and\nhaving <code class=\"hljs\">-</code> translated to <code class=\"hljs\">_</code>. Boolean configurations are present if they are\nset, and not present otherwise. Configurations with multiple values are\njoined to a single variable with the values delimited by <code class=\"hljs\">,</code>. This includes\nvalues built-in to the compiler (which can be seen with <code class=\"hljs\">rustc --print=cfg</code>)\nand values set by build scripts and extra flags passed to <code class=\"hljs\">rustc</code> (such as\nthose defined in <code class=\"hljs\">RUSTFLAGS</code>). Some examples of what these variables are:\n<ul>\n<li><code class=\"hljs\">CARGO_CFG_UNIX</code> — Set on <a href=\"reference/../../reference/conditional-compilation.html#unix-and-windows\">unix-like platforms</a>.</li>\n<li><code class=\"hljs\">CARGO_CFG_WINDOWS</code> — Set on <a href=\"reference/../../reference/conditional-compilation.html#unix-and-windows\">windows-like platforms</a>.</li>\n<li><code class=\"hljs\">CARGO_CFG_TARGET_FAMILY=unix</code> — The <a href=\"reference/../../reference/conditional-compilation.html#target_family\">target family</a>.</li>\n<li><code class=\"hljs\">CARGO_CFG_TARGET_OS=macos</code> — The <a href=\"reference/../../reference/conditional-compilation.html#target_os\">target operating system</a>.</li>\n<li><code class=\"hljs\">CARGO_CFG_TARGET_ARCH=x86_64</code> — The CPU <a href=\"reference/../../reference/conditional-compilation.html#target_arch\">target architecture</a>.</li>\n<li><code class=\"hljs\">CARGO_CFG_TARGET_VENDOR=apple</code> — The <a href=\"reference/../../reference/conditional-compilation.html#target_vendor\">target vendor</a>.</li>\n<li><code class=\"hljs\">CARGO_CFG_TARGET_ENV=gnu</code> — The <a href=\"reference/../../reference/conditional-compilation.html#target_env\">target environment</a> ABI.</li>\n<li><code class=\"hljs\">CARGO_CFG_TARGET_POINTER_WIDTH=64</code> — The CPU <a href=\"reference/../../reference/conditional-compilation.html#target_pointer_width\">pointer width</a>.</li>\n<li><code class=\"hljs\">CARGO_CFG_TARGET_ENDIAN=little</code> — The CPU <a href=\"reference/../../reference/conditional-compilation.html#target_endian\">target endianness</a>.</li>\n<li><code class=\"hljs\">CARGO_CFG_TARGET_FEATURE=mmx,sse</code> — List of CPU <a href=\"reference/../../reference/conditional-compilation.html#target_feature\">target features</a> enabled.</li>\n</ul>\n<blockquote>\n<p>Note that different <a href=\"reference/../appendix/glossary.html#target\">target triples</a> have different sets of <code class=\"hljs\">cfg</code> values,\nhence variables present in one target triple might not be available in the other.</p>\n</blockquote>\n</li>\n<li><code class=\"hljs\">OUT_DIR</code> — the folder in which all output and intermediate artifacts should\nbe placed. This folder is inside the build directory for the package being built,\nand it is unique for the package in question.</li>\n<li><code class=\"hljs\">TARGET</code> — the target triple that is being compiled for. Native code should be\ncompiled for this triple. See the <a href=\"reference/../appendix/glossary.html#target\">Target Triple</a> description for more information.</li>\n<li><code class=\"hljs\">HOST</code> — the host triple of the Rust compiler.</li>\n<li><code class=\"hljs\">NUM_JOBS</code> — the parallelism specified as the top-level parallelism. This can\nbe useful to pass a <code class=\"hljs\">-j</code> parameter to a system like <code class=\"hljs\">make</code>. Note that care\nshould be taken when interpreting this environment variable. For historical\npurposes this is still provided but recent versions of Cargo, for example, do\nnot need to run <code class=\"hljs\">make -j</code>, and instead can set the <code class=\"hljs\">MAKEFLAGS</code> env var to the\ncontent of <code class=\"hljs\">CARGO_MAKEFLAGS</code> to activate the use of Cargo’s GNU Make compatible\n<a href=\"https://www.gnu.org/software/make/manual/html_node/Job-Slots.html\">jobserver</a> for sub-make invocations.</li>\n<li><code class=\"hljs\">OPT_LEVEL</code>, <code class=\"hljs\">DEBUG</code> — values of the corresponding variables for the profile currently being built.</li>\n<li><code class=\"hljs\">PROFILE</code> — <code class=\"hljs\">release</code> for release builds, <code class=\"hljs\">debug</code> for other builds. This is\ndetermined based on if the <a href=\"reference/profiles.html\">profile</a> inherits from the <a href=\"reference/profiles.html#dev\"><code class=\"hljs\">dev</code></a> or\n<a href=\"reference/profiles.html#release\"><code class=\"hljs\">release</code></a> profile. Using this environment variable is not recommended.\nUsing other environment variables like <code class=\"hljs\">OPT_LEVEL</code> provide a more correct\nview of the actual settings being used.</li>\n<li><code class=\"hljs\">DEP_&lt;name&gt;_&lt;key&gt;</code> — For more information about this set of environment variables,\nsee build script documentation about <a href=\"reference/build-scripts.html#the-links-manifest-key\"><code class=\"hljs\">links</code></a>.</li>\n<li><code class=\"hljs\">RUSTC</code>, <code class=\"hljs\">RUSTDOC</code> — the compiler and documentation generator that Cargo has\nresolved to use, passed to the build script so it might use it as well.</li>\n<li><code class=\"hljs\">RUSTC_WRAPPER</code> — the <code class=\"hljs\">rustc</code> wrapper, if any, that Cargo is using. See <a href=\"reference/config.html#buildrustc-wrapper\"><code class=\"hljs\">build.rustc-wrapper</code></a>.</li>\n<li><code class=\"hljs\">RUSTC_WORKSPACE_WRAPPER</code> — the <code class=\"hljs\">rustc</code> wrapper, if any, that Cargo is using\nfor workspace members. See <a href=\"reference/config.html#buildrustc-workspace-wrapper\"><code class=\"hljs\">build.rustc-workspace-wrapper</code></a>.</li>\n<li><code class=\"hljs\">RUSTC_LINKER</code> — The path to the linker binary that Cargo has resolved to use\nfor the current target, if specified. The linker can be changed by editing\n<code class=\"hljs\">.cargo/config.toml</code>; see the documentation about <a href=\"reference/config.html\">cargo configuration</a>\nfor more information.</li>\n<li><code class=\"hljs\">CARGO_ENCODED_RUSTFLAGS</code> — extra flags that Cargo invokes <code class=\"hljs\">rustc</code> with,\nseparated by a <code class=\"hljs\">0x1f</code> character (ASCII Unit Separator). See\n<a href=\"reference/config.html#buildrustflags\"><code class=\"hljs\">build.rustflags</code></a>. Note that since Rust 1.55, <code class=\"hljs\">RUSTFLAGS</code> is removed from\nthe environment; scripts should use <code class=\"hljs\">CARGO_ENCODED_RUSTFLAGS</code> instead.</li>\n<li><code class=\"hljs\">CARGO_PKG_&lt;var&gt;</code> — The package information variables, with the same names and values as are <a href=\"reference/environment-variables.html#environment-variables-cargo-sets-for-crates\">provided during crate building</a>.</li>\n</ul>\n<h2 id=\"environment-variables-cargo-sets-for-3rd-party-subcommands\"><a class=\"header\" href=\"#environment-variables-cargo-sets-for-3rd-party-subcommands\">Environment variables Cargo sets for 3rd party subcommands</a></h2>\n<p>Cargo exposes this environment variable to 3rd party subcommands\n(ie. programs named <code class=\"hljs\">cargo-foobar</code> placed in <code class=\"hljs\">$PATH</code>):</p>\n<ul>\n<li><code class=\"hljs\">CARGO</code> — Path to the <code class=\"hljs\">cargo</code> binary performing the build.</li>\n<li><code class=\"hljs\">CARGO_MAKEFLAGS</code> — Contains parameters needed for Cargo’s <a href=\"https://www.gnu.org/software/make/manual/html_node/Job-Slots.html\">jobserver</a>\nimplementation to parallelize subprocesses.\nThis is set only when Cargo detects the existence of a jobserver.</li>\n</ul>\n<p>For extended information about your environment you may run <code class=\"hljs\">cargo metadata</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"build-scripts-1\"><a class=\"header\" href=\"#build-scripts-1\">Build Scripts</a></h1>\n<p>Some packages need to compile third-party non-Rust code, for example C\nlibraries. Other packages need to link to C libraries which can either be\nlocated on the system or possibly need to be built from source. Others still\nneed facilities for functionality such as code generation before building (think\nparser generators).</p>\n<p>Cargo does not aim to replace other tools that are well-optimized for these\ntasks, but it does integrate with them with custom build scripts. Placing a\nfile named <code class=\"hljs\">build.rs</code> in the root of a package will cause Cargo to compile\nthat script and execute it just before building the package.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// Example custom build script.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// Tell Cargo that if the given file changes, to rerun this build script.</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rerun-if-changed=src/hello.c\"</span>);\n    <span class=\"hljs-comment\">// Use the `cc` crate to build a C file and statically link it.</span>\n    cc::Build::new()\n        .file(<span class=\"hljs-string\">\"src/hello.c\"</span>)\n        .compile(<span class=\"hljs-string\">\"hello\"</span>);\n}</code></pre>\n<p>Some example use cases of build scripts are:</p>\n<ul>\n<li>Building a bundled C library.</li>\n<li>Finding a C library on the host system.</li>\n<li>Generating a Rust module from a specification.</li>\n<li>Performing any platform-specific configuration needed for the crate.</li>\n</ul>\n<p>The sections below describe how build scripts work, and the <a href=\"reference/build-script-examples.html\">examples\nchapter</a> shows a variety of examples on how to write\nscripts.</p>\n<blockquote>\n<p>Note: The <a href=\"reference/manifest.html#the-build-field\"><code class=\"hljs\">package.build</code> manifest key</a> can be\nused to change the name of the build script, or disable it entirely.</p>\n</blockquote>\n<h2 id=\"life-cycle-of-a-build-script\"><a class=\"header\" href=\"#life-cycle-of-a-build-script\">Life Cycle of a Build Script</a></h2>\n<p>Just before a package is built, Cargo will compile a build script into an\nexecutable (if it has not already been built). It will then run the script,\nwhich may perform any number of tasks. The script may communicate with Cargo\nby printing specially formatted commands prefixed with <code class=\"hljs\">cargo::</code> to stdout.</p>\n<p>The build script will be rebuilt if any of its source files or dependencies\nchange.</p>\n<p>By default, Cargo will re-run the build script if any of the files in the\npackage changes. Typically it is best to use the <code class=\"hljs\">rerun-if</code> commands,\ndescribed in the <a href=\"reference/build-scripts.html#change-detection\">change detection</a> section below, to\nnarrow the focus of what triggers a build script to run again.</p>\n<p>Once the build script successfully finishes executing, the rest of the package\nwill be compiled. Scripts should exit with a non-zero exit code to halt the\nbuild if there is an error, in which case the build script’s output will be\ndisplayed on the terminal.</p>\n<h2 id=\"inputs-to-the-build-script\"><a class=\"header\" href=\"#inputs-to-the-build-script\">Inputs to the Build Script</a></h2>\n<p>When the build script is run, there are a number of inputs to the build script,\nall passed in the form of <a href=\"reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts\">environment variables</a>.</p>\n<p>In addition to environment variables, the build script’s current directory is\nthe source directory of the build script’s package.</p>\n<h2 id=\"outputs-of-the-build-script\"><a class=\"header\" href=\"#outputs-of-the-build-script\">Outputs of the Build Script</a></h2>\n<p>Build scripts may save any output files or intermediate artifacts in the\ndirectory specified in the <a href=\"reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts\"><code class=\"hljs\">OUT_DIR</code> environment variable</a>. Scripts\nshould not modify any files outside of that directory.</p>\n<p>Build scripts communicate with Cargo by printing to stdout. Cargo will\ninterpret each line that starts with <code class=\"hljs\">cargo::</code> as an instruction that will\ninfluence compilation of the package. All other lines are ignored.</p>\n<blockquote>\n<p><strong>Note:</strong> The old invocation prefix <code class=\"hljs\">cargo:</code> (one colon only) is deprecated\nand won’t get any new features. To migrate, use two-colons prefix <code class=\"hljs\">cargo::</code>,\nwhich was added in Rust 1.77. If you were using <code class=\"hljs\">cargo:KEY=VALUE</code> for\narbitrary links manifest key-value pairs, it is encouraged to switch to\n<code class=\"hljs\">cargo::metadata=KEY=VALUE</code>. Stick to <code class=\"hljs\">cargo:</code> only if the support of Rust\nversion older than 1.77 is required.</p>\n</blockquote>\n<blockquote>\n<p>The order of <code class=\"hljs\">cargo::</code> instructions printed by the build script <em>may</em>\naffect the order of arguments that <code class=\"hljs\">cargo</code> passes to <code class=\"hljs\">rustc</code>. In turn, the\norder of arguments passed to <code class=\"hljs\">rustc</code> may affect the order of arguments passed\nto the linker. Therefore, you will want to pay attention to the order of the\nbuild script’s instructions. For example, if object <code class=\"hljs\">foo</code> needs to link against\nlibrary <code class=\"hljs\">bar</code>, you may want to make sure that library <code class=\"hljs\">bar</code>’s\n<a href=\"reference/build-scripts.html#rustc-link-lib\"><code class=\"hljs\">cargo::rustc-link-lib</code></a> instruction appears <em>after</em>\ninstructions to link object <code class=\"hljs\">foo</code>.</p>\n</blockquote>\n<p>The output of the script is hidden from the terminal during normal\ncompilation. If you would like to see the output directly in your terminal,\ninvoke Cargo as “very verbose” with the <code class=\"hljs\">-vv</code> flag. This only happens when the\nbuild script is run. If Cargo determines nothing has changed, it will not\nre-run the script, see <a href=\"reference/build-scripts.html#change-detection\">change detection</a> below for more.</p>\n<p>All the lines printed to stdout by a build script are written to a file like\n<code class=\"hljs\">target/debug/build/&lt;pkg&gt;/output</code> (the precise location may depend on your\nconfiguration). The stderr output is also saved in that same directory.</p>\n<p>The following is a summary of the instructions that Cargo recognizes, with each\none detailed below.</p>\n<ul>\n<li><a href=\"reference/build-scripts.html#rerun-if-changed\"><code class=\"hljs\">cargo::rerun-if-changed=PATH</code></a> — Tells Cargo when to\nre-run the script.</li>\n<li><a href=\"reference/build-scripts.html#rerun-if-env-changed\"><code class=\"hljs\">cargo::rerun-if-env-changed=VAR</code></a> — Tells Cargo when\nto re-run the script.</li>\n<li><a href=\"reference/build-scripts.html#rustc-link-arg\"><code class=\"hljs\">cargo::rustc-link-arg=FLAG</code></a> — Passes custom flags to a\nlinker for benchmarks, binaries, <code class=\"hljs\">cdylib</code> crates, examples, and tests.</li>\n<li><a href=\"reference/build-scripts.html#rustc-link-arg-bin\"><code class=\"hljs\">cargo::rustc-link-arg-bin=BIN=FLAG</code></a> — Passes custom\nflags to a linker for the binary <code class=\"hljs\">BIN</code>.</li>\n<li><a href=\"reference/build-scripts.html#rustc-link-arg-bins\"><code class=\"hljs\">cargo::rustc-link-arg-bins=FLAG</code></a> — Passes custom\nflags to a linker for binaries.</li>\n<li><a href=\"reference/build-scripts.html#rustc-link-arg-tests\"><code class=\"hljs\">cargo::rustc-link-arg-tests=FLAG</code></a> — Passes custom\nflags to a linker for tests.</li>\n<li><a href=\"reference/build-scripts.html#rustc-link-arg-examples\"><code class=\"hljs\">cargo::rustc-link-arg-examples=FLAG</code></a> — Passes custom\nflags to a linker for examples.</li>\n<li><a href=\"reference/build-scripts.html#rustc-link-arg-benches\"><code class=\"hljs\">cargo::rustc-link-arg-benches=FLAG</code></a> — Passes custom\nflags to a linker for benchmarks.</li>\n<li><a href=\"reference/build-scripts.html#rustc-link-lib\"><code class=\"hljs\">cargo::rustc-link-lib=LIB</code></a> — Adds a library to\nlink.</li>\n<li><a href=\"reference/build-scripts.html#rustc-link-search\"><code class=\"hljs\">cargo::rustc-link-search=[KIND=]PATH</code></a> — Adds to the\nlibrary search path.</li>\n<li><a href=\"reference/build-scripts.html#rustc-flags\"><code class=\"hljs\">cargo::rustc-flags=FLAGS</code></a> — Passes certain flags to the\ncompiler.</li>\n<li><a href=\"reference/build-scripts.html#rustc-cfg\"><code class=\"hljs\">cargo::rustc-cfg=KEY[=\"VALUE\"]</code></a> — Enables compile-time <code class=\"hljs\">cfg</code>\nsettings.</li>\n<li><a href=\"reference/build-scripts.html#rustc-check-cfg\"><code class=\"hljs\">cargo::rustc-check-cfg=CHECK_CFG</code></a> – Register custom <code class=\"hljs\">cfg</code>s as\nexpected for compile-time checking of configs.</li>\n<li><a href=\"reference/build-scripts.html#rustc-env\"><code class=\"hljs\">cargo::rustc-env=VAR=VALUE</code></a> — Sets an environment variable.</li>\n<li><a href=\"reference/build-scripts.html#rustc-cdylib-link-arg\"><code class=\"hljs\">cargo::rustc-cdylib-link-arg=FLAG</code></a> — Passes custom\nflags to a linker for cdylib crates.</li>\n<li><a href=\"reference/build-scripts.html#cargo-warning\"><code class=\"hljs\">cargo::warning=MESSAGE</code></a> — Displays a warning on the\nterminal.</li>\n<li><a href=\"reference/build-scripts.html#the-links-manifest-key\"><code class=\"hljs\">cargo::metadata=KEY=VALUE</code></a> — Metadata, used by <code class=\"hljs\">links</code>\nscripts.</li>\n</ul>\n<h3 id=\"rustc-link-arg\"><a class=\"header\" href=\"#rustc-link-arg\"><code>cargo::rustc-link-arg=FLAG</code></a></h3>\n<p>The <code class=\"hljs\">rustc-link-arg</code> instruction tells Cargo to pass the <a href=\"reference/../../rustc/codegen-options/index.html#link-arg\"><code class=\"hljs\">-C link-arg=FLAG</code>\noption</a> to the compiler, but only when building supported targets\n(benchmarks, binaries, <code class=\"hljs\">cdylib</code> crates, examples, and tests). Its usage is\nhighly platform specific. It is useful to set the shared library version or\nlinker script.</p>\n<h3 id=\"rustc-link-arg-bin\"><a class=\"header\" href=\"#rustc-link-arg-bin\"><code>cargo::rustc-link-arg-bin=BIN=FLAG</code></a></h3>\n<p>The <code class=\"hljs\">rustc-link-arg-bin</code> instruction tells Cargo to pass the <a href=\"reference/../../rustc/codegen-options/index.html#link-arg\"><code class=\"hljs\">-C link-arg=FLAG</code> option</a> to the compiler, but only when building\nthe binary target with name <code class=\"hljs\">BIN</code>. Its usage is highly platform specific. It is useful\nto set a linker script or other linker options.</p>\n<h3 id=\"rustc-link-arg-bins\"><a class=\"header\" href=\"#rustc-link-arg-bins\"><code>cargo::rustc-link-arg-bins=FLAG</code></a></h3>\n<p>The <code class=\"hljs\">rustc-link-arg-bins</code> instruction tells Cargo to pass the <a href=\"reference/../../rustc/codegen-options/index.html#link-arg\"><code class=\"hljs\">-C link-arg=FLAG</code> option</a> to the compiler, but only when building a\nbinary target. Its usage is highly platform specific. It is useful\nto set a linker script or other linker options.</p>\n<h3 id=\"rustc-link-lib\"><a class=\"header\" href=\"#rustc-link-lib\"><code>cargo::rustc-link-lib=LIB</code></a></h3>\n<p>The <code class=\"hljs\">rustc-link-lib</code> instruction tells Cargo to link the given library using\nthe compiler’s <a href=\"reference/../../rustc/command-line-arguments.html#option-l-link-lib\"><code class=\"hljs\">-l</code> flag</a>. This is typically used to link a\nnative library using <a href=\"reference/../../nomicon/ffi.html\">FFI</a>.</p>\n<p>The <code class=\"hljs\">LIB</code> string is passed directly to rustc, so it supports any syntax that\n<code class=\"hljs\">-l</code> does. <br>\nCurrently the full supported syntax for <code class=\"hljs\">LIB</code> is <code class=\"hljs\">[KIND[:MODIFIERS]=]NAME[:RENAME]</code>.</p>\n<p>The <code class=\"hljs\">-l</code> flag is only passed to the library target of the package, unless\nthere is no library target, in which case it is passed to all targets. This is\ndone because all other targets have an implicit dependency on the library\ntarget, and the given library to link should only be included once. This means\nthat if a package has both a library and a binary target, the <em>library</em> has\naccess to the symbols from the given lib, and the binary should access them\nthrough the library target’s public API.</p>\n<p>The optional <code class=\"hljs\">KIND</code> may be one of <code class=\"hljs\">dylib</code>, <code class=\"hljs\">static</code>, or <code class=\"hljs\">framework</code>. See the\n<a href=\"reference/../../rustc/command-line-arguments.html#option-l-link-lib\">rustc book</a> for more detail.</p>\n<h3 id=\"rustc-link-arg-tests\"><a class=\"header\" href=\"#rustc-link-arg-tests\"><code>cargo::rustc-link-arg-tests=FLAG</code></a></h3>\n<p>The <code class=\"hljs\">rustc-link-arg-tests</code> instruction tells Cargo to pass the <a href=\"reference/../../rustc/codegen-options/index.html#link-arg\"><code class=\"hljs\">-C link-arg=FLAG</code> option</a> to the compiler, but only when building a\ntests target.</p>\n<h3 id=\"rustc-link-arg-examples\"><a class=\"header\" href=\"#rustc-link-arg-examples\"><code>cargo::rustc-link-arg-examples=FLAG</code></a></h3>\n<p>The <code class=\"hljs\">rustc-link-arg-examples</code> instruction tells Cargo to pass the <a href=\"reference/../../rustc/codegen-options/index.html#link-arg\"><code class=\"hljs\">-C link-arg=FLAG</code> option</a> to the compiler, but only when building an examples\ntarget.</p>\n<h3 id=\"rustc-link-arg-benches\"><a class=\"header\" href=\"#rustc-link-arg-benches\"><code>cargo::rustc-link-arg-benches=FLAG</code></a></h3>\n<p>The <code class=\"hljs\">rustc-link-arg-benches</code> instruction tells Cargo to pass the <a href=\"reference/../../rustc/codegen-options/index.html#link-arg\"><code class=\"hljs\">-C link-arg=FLAG</code> option</a> to the compiler, but only when building a benchmark\ntarget.</p>\n<h3 id=\"rustc-link-search\"><a class=\"header\" href=\"#rustc-link-search\"><code>cargo::rustc-link-search=[KIND=]PATH</code></a></h3>\n<p>The <code class=\"hljs\">rustc-link-search</code> instruction tells Cargo to pass the <a href=\"reference/../../rustc/command-line-arguments.html#option-l-search-path\"><code class=\"hljs\">-L</code>\nflag</a> to the compiler to add a directory to the library search\npath.</p>\n<p>The optional <code class=\"hljs\">KIND</code> may be one of <code class=\"hljs\">dependency</code>, <code class=\"hljs\">crate</code>, <code class=\"hljs\">native</code>,\n<code class=\"hljs\">framework</code>, or <code class=\"hljs\">all</code>. See the <a href=\"reference/../../rustc/command-line-arguments.html#option-l-search-path\">rustc book</a> for more detail.</p>\n<p>These paths are also added to the <a href=\"reference/environment-variables.html#dynamic-library-paths\">dynamic library search path environment\nvariable</a> if they are within\nthe <code class=\"hljs\">OUT_DIR</code>. Depending on this behavior is discouraged since this makes it\ndifficult to use the resulting binary. In general, it is best to avoid\ncreating dynamic libraries in a build script (using existing system libraries\nis fine).</p>\n<h3 id=\"rustc-flags\"><a class=\"header\" href=\"#rustc-flags\"><code>cargo::rustc-flags=FLAGS</code></a></h3>\n<p>The <code class=\"hljs\">rustc-flags</code> instruction tells Cargo to pass the given space-separated\nflags to the compiler. This only allows the <code class=\"hljs\">-l</code> and <code class=\"hljs\">-L</code> flags, and is\nequivalent to using <a href=\"reference/build-scripts.html#rustc-link-lib\"><code class=\"hljs\">rustc-link-lib</code></a> and\n<a href=\"reference/build-scripts.html#rustc-link-search\"><code class=\"hljs\">rustc-link-search</code></a>.</p>\n<h3 id=\"rustc-cfg\"><a class=\"header\" href=\"#rustc-cfg\"><code>cargo::rustc-cfg=KEY[=\"VALUE\"]</code></a></h3>\n<p>The <code class=\"hljs\">rustc-cfg</code> instruction tells Cargo to pass the given value to the\n<a href=\"reference/../../rustc/command-line-arguments.html#option-cfg\"><code class=\"hljs\">--cfg</code> flag</a> to the compiler. This may be used for compile-time\ndetection of features to enable <a href=\"reference/../../reference/conditional-compilation.html\">conditional compilation</a>. Custom cfgs\nmust either be expected using the <a href=\"reference/build-scripts.html#rustc-check-cfg\"><code class=\"hljs\">cargo::rustc-check-cfg</code></a>\ninstruction or usage will need to allow the <a href=\"reference/../../rustc/lints/listing/warn-by-default.html#unexpected-cfgs\"><code class=\"hljs\">unexpected_cfgs</code></a>\nlint to avoid unexpected cfgs warnings.</p>\n<p>Note that this does <em>not</em> affect Cargo’s dependency resolution. This cannot be\nused to enable an optional dependency, or enable other Cargo features.</p>\n<p>Be aware that <a href=\"reference/features.html\">Cargo features</a> use the form <code class=\"hljs\">feature=\"foo\"</code>. <code class=\"hljs\">cfg</code> values\npassed with this flag are not restricted to that form, and may provide just a\nsingle identifier, or any arbitrary key/value pair. For example, emitting\n<code class=\"hljs\">cargo::rustc-cfg=abc</code> will then allow code to use <code class=\"hljs\">#[cfg(abc)]</code> (note the lack\nof <code class=\"hljs\">feature=</code>). Or an arbitrary key/value pair may be used with an <code class=\"hljs\">=</code> symbol\nlike <code class=\"hljs\">cargo::rustc-cfg=my_component=\"foo\"</code>. The key should be a Rust\nidentifier, the value should be a string.</p>\n<h3 id=\"rustc-check-cfg\"><a class=\"header\" href=\"#rustc-check-cfg\"><code>cargo::rustc-check-cfg=CHECK_CFG</code></a></h3>\n<p>Add to the list of expected config names and values that is used when checking\nthe <em>reachable</em> cfg expressions with the <a href=\"reference/../../rustc/lints/listing/warn-by-default.html#unexpected-cfgs\"><code class=\"hljs\">unexpected_cfgs</code></a> lint.</p>\n<p>The syntax of <code class=\"hljs\">CHECK_CFG</code> mirrors the <code class=\"hljs\">rustc</code> <a href=\"reference/../../rustc/command-line-arguments.html#option-check-cfg\"><code class=\"hljs\">--check-cfg</code> flag</a>, see\n<a href=\"reference/../../rustc/check-cfg.html\">Checking conditional configurations</a> for more details.</p>\n<blockquote>\n<p>Note: <code class=\"hljs\">cargo:rustc-check-cfg</code> (single-colon) can be used if your MSRV is below Rust 1.77</p>\n</blockquote>\n<p>The instruction can be used like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// build.rs</span>\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rustc-check-cfg=cfg(foo, values(\\\"bar\\\"))\"</span>);\n<span class=\"hljs-keyword\">if</span> foo_bar_condition {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rustc-cfg=foo=\\\"bar\\\"\"</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Note that all possible cfgs should be defined, regardless of which cfgs are\ncurrently enabled. This includes all possible values of a given cfg name.</p>\n<p>It is recommended to group the <code class=\"hljs\">cargo::rustc-check-cfg</code> and\n<a href=\"reference/../../rustc/command-line-arguments.html#option-cfg\"><code class=\"hljs\">cargo::rustc-cfg</code></a> instructions as closely as possible in order to\navoid typos, missing check-cfg, stale cfgs…</p>\n<p>See also the\n<a href=\"reference/build-script-examples.html#conditional-compilation\">conditional compilation</a> example.</p>\n<h3 id=\"rustc-env\"><a class=\"header\" href=\"#rustc-env\"><code>cargo::rustc-env=VAR=VALUE</code></a></h3>\n<p>The <code class=\"hljs\">rustc-env</code> instruction tells Cargo to set the given environment variable\nwhen compiling the package. The value can be then retrieved by the <a href=\"reference/../../std/macro.env.html\"><code class=\"hljs\">env!</code>\nmacro</a> in the compiled crate. This is useful for embedding\nadditional metadata in crate’s code, such as the hash of git HEAD or the\nunique identifier of a continuous integration server.</p>\n<p>See also the <a href=\"reference/environment-variables.html#environment-variables-cargo-sets-for-crates\">environment variables automatically included by\nCargo</a>.</p>\n<blockquote>\n<p><strong>Note</strong>: These environment variables are also set when running an\nexecutable with <code class=\"hljs\">cargo run</code> or <code class=\"hljs\">cargo test</code>. However, this usage is\ndiscouraged since it ties the executable to Cargo’s execution environment.\nNormally, these environment variables should only be checked at compile-time\nwith the <code class=\"hljs\">env!</code> macro.</p>\n</blockquote>\n<h3 id=\"rustc-cdylib-link-arg\"><a class=\"header\" href=\"#rustc-cdylib-link-arg\"><code>cargo::rustc-cdylib-link-arg=FLAG</code></a></h3>\n<p>The <code class=\"hljs\">rustc-cdylib-link-arg</code> instruction tells Cargo to pass the <a href=\"reference/../../rustc/codegen-options/index.html#link-arg\"><code class=\"hljs\">-C link-arg=FLAG</code> option</a> to the compiler, but only when building a\n<code class=\"hljs\">cdylib</code> library target. Its usage is highly platform specific. It is useful\nto set the shared library version or the runtime-path.</p>\n<h3 id=\"cargo-warning\"><a class=\"header\" href=\"#cargo-warning\"><code>cargo::warning=MESSAGE</code></a></h3>\n<p>The <code class=\"hljs\">warning</code> instruction tells Cargo to display a warning after the build\nscript has finished running. Warnings are only shown for <code class=\"hljs\">path</code> dependencies\n(that is, those you’re working on locally), so for example warnings printed\nout in <a href=\"https://crates.io/\">crates.io</a> crates are not emitted by default. The <code class=\"hljs\">-vv</code> “very verbose”\nflag may be used to have Cargo display warnings for all crates.</p>\n<h2 id=\"build-dependencies-2\"><a class=\"header\" href=\"#build-dependencies-2\">Build Dependencies</a></h2>\n<p>Build scripts are also allowed to have dependencies on other Cargo-based crates.\nDependencies are declared through the <code class=\"hljs\">build-dependencies</code> section of the\nmanifest.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">cc</span> = <span class=\"hljs-string\">\"1.0.46\"</span>\n</code></pre>\n<p>The build script <strong>does not</strong> have access to the dependencies listed in the\n<code class=\"hljs\">dependencies</code> or <code class=\"hljs\">dev-dependencies</code> section (they’re not built yet!). Also,\nbuild dependencies are not available to the package itself unless also\nexplicitly added in the <code class=\"hljs\">[dependencies]</code> table.</p>\n<p>It is recommended to carefully consider each dependency you add, weighing\nagainst the impact on compile time, licensing, maintenance, etc. Cargo will\nattempt to reuse a dependency if it is shared between build dependencies and\nnormal dependencies. However, this is not always possible, for example when\ncross-compiling, so keep that in consideration of the impact on compile time.</p>\n<h2 id=\"change-detection\"><a class=\"header\" href=\"#change-detection\">Change Detection</a></h2>\n<p>When rebuilding a package, Cargo does not necessarily know if the build script\nneeds to be run again. By default, it takes a conservative approach of always\nre-running the build script if any file within the package is changed (or the\nlist of files controlled by the <a href=\"reference/manifest.html#the-exclude-and-include-fields\"><code class=\"hljs\">exclude</code> and <code class=\"hljs\">include</code> fields</a>). For most\ncases, this is not a good choice, so it is recommended that every build script\nemit at least one of the <code class=\"hljs\">rerun-if</code> instructions (described below). If these\nare emitted, then Cargo will only re-run the script if the given value has\nchanged. If Cargo is re-running the build scripts of your own crate or a\ndependency and you don’t know why, see <a href=\"reference/../faq.html#why-is-cargo-rebuilding-my-code\">“Why is Cargo rebuilding my code?” in the\nFAQ</a>.</p>\n<h3 id=\"rerun-if-changed\"><a class=\"header\" href=\"#rerun-if-changed\"><code>cargo::rerun-if-changed=PATH</code></a></h3>\n<p>The <code class=\"hljs\">rerun-if-changed</code> instruction tells Cargo to re-run the build script if\nthe file at the given path has changed. Currently, Cargo only uses the\nfilesystem last-modified “mtime” timestamp to determine if the file has\nchanged. It compares against an internal cached timestamp of when the build\nscript last ran.</p>\n<p>If the path points to a directory, it will scan the entire directory for\nany modifications.</p>\n<p>If the build script inherently does not need to re-run under any circumstance,\nthen emitting <code class=\"hljs\">cargo::rerun-if-changed=build.rs</code> is a simple way to prevent it\nfrom being re-run (otherwise, the default if no <code class=\"hljs\">rerun-if</code> instructions are\nemitted is to scan the entire package directory for changes). Cargo\nautomatically handles whether or not the script itself needs to be recompiled,\nand of course the script will be re-run after it has been recompiled.\nOtherwise, specifying <code class=\"hljs\">build.rs</code> is redundant and unnecessary.</p>\n<h3 id=\"rerun-if-env-changed\"><a class=\"header\" href=\"#rerun-if-env-changed\"><code>cargo::rerun-if-env-changed=NAME</code></a></h3>\n<p>The <code class=\"hljs\">rerun-if-env-changed</code> instruction tells Cargo to re-run the build script\nif the value of an environment variable of the given name has changed.</p>\n<p>Note that the environment variables here are intended for global environment\nvariables like <code class=\"hljs\">CC</code> and such, it is not possible to use this for environment\nvariables like <code class=\"hljs\">TARGET</code> that <a href=\"reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts\">Cargo sets for build scripts</a>. The\nenvironment variables in use are those received by <code class=\"hljs\">cargo</code> invocations, not\nthose received by the executable of the build script.</p>\n<h2 id=\"the-links-manifest-key\"><a class=\"header\" href=\"#the-links-manifest-key\">The <code>links</code> Manifest Key</a></h2>\n<p>The <code class=\"hljs\">package.links</code> key may be set in the <code class=\"hljs\">Cargo.toml</code> manifest to declare\nthat the package links with the given native library. The purpose of this\nmanifest key is to give Cargo an understanding about the set of native\ndependencies that a package has, as well as providing a principled system of\npassing metadata between package build scripts.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">links</span> = <span class=\"hljs-string\">\"foo\"</span>\n</code></pre>\n<p>This manifest states that the package links to the <code class=\"hljs\">libfoo</code> native library.\nWhen using the <code class=\"hljs\">links</code> key, the package must have a build script, and the\nbuild script should use the <a href=\"reference/build-scripts.html#rustc-link-lib\"><code class=\"hljs\">rustc-link-lib</code> instruction</a> to\nlink the library.</p>\n<p>Primarily, Cargo requires that there is at most one package per <code class=\"hljs\">links</code> value.\nIn other words, it is forbidden to have two packages link to the same native\nlibrary. This helps prevent duplicate symbols between crates. Note, however,\nthat there are <a href=\"reference/build-scripts.html#-sys-packages\">conventions in place</a> to alleviate this.</p>\n<p>Build scripts can generate an arbitrary set of metadata in the form of\nkey-value pairs. This metadata is set with the <code class=\"hljs\">cargo::metadata=KEY=VALUE</code>\ninstruction.</p>\n<p>The metadata is passed to the build scripts of <strong>dependent</strong> packages. For\nexample, if the package <code class=\"hljs\">bar</code> depends on <code class=\"hljs\">foo</code>, then if <code class=\"hljs\">foo</code> generates\n<code class=\"hljs\">key=value</code> as part of its build script metadata, then the build script of\n<code class=\"hljs\">bar</code> will have the environment variables <code class=\"hljs\">DEP_FOO_KEY=value</code>. See the <a href=\"reference/build-script-examples.html#using-another-sys-crate\">“Using\nanother <code class=\"hljs\">sys</code> crate”</a> for an example of how this can be\nused.</p>\n<p>Note that metadata is only passed to immediate dependents, not transitive\ndependents.</p>\n<h2 id=\"-sys-packages\"><a class=\"header\" href=\"#-sys-packages\"><code>*-sys</code> Packages</a></h2>\n<p>Some Cargo packages that link to system libraries have a naming convention of\nhaving a <code class=\"hljs\">-sys</code> suffix. Any package named <code class=\"hljs\">foo-sys</code> should provide two major\npieces of functionality:</p>\n<ul>\n<li>The library crate should link to the native library <code class=\"hljs\">libfoo</code>. This will often\nprobe the current system for <code class=\"hljs\">libfoo</code> before resorting to building from\nsource.</li>\n<li>The library crate should provide <strong>declarations</strong> for types and functions in\n<code class=\"hljs\">libfoo</code>, but <strong>not</strong> higher-level abstractions.</li>\n</ul>\n<p>The set of <code class=\"hljs\">*-sys</code> packages provides a common set of dependencies for linking\nto native libraries. There are a number of benefits earned from having this\nconvention of native-library-related packages:</p>\n<ul>\n<li>Common dependencies on <code class=\"hljs\">foo-sys</code> alleviates the rule about one package per\nvalue of <code class=\"hljs\">links</code>.</li>\n<li>Other <code class=\"hljs\">-sys</code> packages can take advantage of the <code class=\"hljs\">DEP_NAME_KEY=value</code>\nenvironment variables to better integrate with other packages. See the\n<a href=\"reference/build-script-examples.html#using-another-sys-crate\">“Using another <code class=\"hljs\">sys</code> crate”</a> example.</li>\n<li>A common dependency allows centralizing logic on discovering <code class=\"hljs\">libfoo</code> itself\n(or building it from source).</li>\n<li>These dependencies are easily <a href=\"reference/build-scripts.html#overriding-build-scripts\">overridable</a>.</li>\n</ul>\n<p>It is common to have a companion package without the <code class=\"hljs\">-sys</code> suffix that\nprovides a safe, high-level abstractions on top of the sys package. For\nexample, the <a href=\"https://crates.io/crates/git2\"><code class=\"hljs\">git2</code> crate</a> provides a high-level interface to the\n<a href=\"https://crates.io/crates/libgit2-sys\"><code class=\"hljs\">libgit2-sys</code> crate</a>.</p>\n<h2 id=\"overriding-build-scripts\"><a class=\"header\" href=\"#overriding-build-scripts\">Overriding Build Scripts</a></h2>\n<p>If a manifest contains a <code class=\"hljs\">links</code> key, then Cargo supports overriding the build\nscript specified with a custom library. The purpose of this functionality is to\nprevent running the build script in question altogether and instead supply the\nmetadata ahead of time.</p>\n<p>To override a build script, place the following configuration in any acceptable <a href=\"reference/config.html\"><code class=\"hljs\">config.toml</code></a> file.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[target.x86_64-unknown-linux-gnu.foo]</span>\n<span class=\"hljs-attr\">rustc-link-lib</span> = [<span class=\"hljs-string\">\"foo\"</span>]\n<span class=\"hljs-attr\">rustc-link-search</span> = [<span class=\"hljs-string\">\"/path/to/foo\"</span>]\n<span class=\"hljs-attr\">rustc-flags</span> = <span class=\"hljs-string\">\"-L /some/path\"</span>\n<span class=\"hljs-attr\">rustc-cfg</span> = [<span class=\"hljs-string\">'key=\"value\"'</span>]\n<span class=\"hljs-attr\">rustc-env</span> = {key = <span class=\"hljs-string\">\"value\"</span>}\n<span class=\"hljs-attr\">rustc-cdylib-link-arg</span> = [<span class=\"hljs-string\">\"…\"</span>]\n<span class=\"hljs-attr\">metadata_key1</span> = <span class=\"hljs-string\">\"value\"</span>\n<span class=\"hljs-attr\">metadata_key2</span> = <span class=\"hljs-string\">\"value\"</span>\n</code></pre>\n<p>With this configuration, if a package declares that it links to <code class=\"hljs\">foo</code> then the\nbuild script will <strong>not</strong> be compiled or run, and the metadata specified will\nbe used instead.</p>\n<p>The <code class=\"hljs\">warning</code>, <code class=\"hljs\">rerun-if-changed</code>, and <code class=\"hljs\">rerun-if-env-changed</code> keys should not\nbe used and will be ignored.</p>\n<h2 id=\"jobserver\"><a class=\"header\" href=\"#jobserver\">Jobserver</a></h2>\n<p>Cargo and <code class=\"hljs\">rustc</code> use the <a href=\"http://make.mad-scientist.net/papers/jobserver-implementation/\">jobserver protocol</a>, developed for GNU make, to\ncoordinate concurrency across processes. It is essentially a semaphore that\ncontrols the number of jobs running concurrently. The concurrency may be set\nwith the <code class=\"hljs\">--jobs</code> flag, which defaults to the number of logical CPUs.</p>\n<p>Each build script inherits one job slot from Cargo, and should endeavor to\nonly use one CPU while it runs. If the script wants to use more CPUs in\nparallel, it should use the <a href=\"https://crates.io/crates/jobserver\"><code class=\"hljs\">jobserver</code> crate</a> to coordinate with Cargo.</p>\n<p>As an example, the <a href=\"https://crates.io/crates/cc\"><code class=\"hljs\">cc</code> crate</a> may enable the optional <code class=\"hljs\">parallel</code> feature\nwhich will use the jobserver protocol to attempt to build multiple C files\nat the same time.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"build-script-examples\"><a class=\"header\" href=\"#build-script-examples\">Build Script Examples</a></h1>\n<p>The following sections illustrate some examples of writing build scripts.</p>\n<p>Some common build script functionality can be found via crates on <a href=\"https://crates.io/\">crates.io</a>.\nCheck out the <a href=\"https://crates.io/keywords/build-dependencies\"><code class=\"hljs\">build-dependencies</code>\nkeyword</a> to see what is\navailable. The following is a sample of some popular crates<sup class=\"footnote-reference\"><a href=\"#†\">1</a></sup>:</p>\n<ul>\n<li><a href=\"https://crates.io/crates/bindgen\"><code class=\"hljs\">bindgen</code></a> — Automatically generate Rust\nFFI bindings to C libraries.</li>\n<li><a href=\"https://crates.io/crates/cc\"><code class=\"hljs\">cc</code></a> — Compiles C/C++/assembly.</li>\n<li><a href=\"https://crates.io/crates/pkg-config\"><code class=\"hljs\">pkg-config</code></a> — Detect system\nlibraries using the <code class=\"hljs\">pkg-config</code> utility.</li>\n<li><a href=\"https://crates.io/crates/cmake\"><code class=\"hljs\">cmake</code></a> — Runs the <code class=\"hljs\">cmake</code> build tool to build a native library.</li>\n<li><a href=\"https://crates.io/crates/autocfg\"><code class=\"hljs\">autocfg</code></a>,\n<a href=\"https://crates.io/crates/rustc_version\"><code class=\"hljs\">rustc_version</code></a>,\n<a href=\"https://crates.io/crates/version_check\"><code class=\"hljs\">version_check</code></a> — These crates\nprovide ways to implement conditional compilation based on the current\n<code class=\"hljs\">rustc</code> such as the version of the compiler.</li>\n</ul>\n<div class=\"footnote-definition\" id=\"†\"><sup class=\"footnote-definition-label\">1</sup>\n<p>This list is not an endorsement. Evaluate your dependencies to see which\nis right for your project.</p>\n</div>\n<h2 id=\"code-generation\"><a class=\"header\" href=\"#code-generation\">Code generation</a></h2>\n<p>Some Cargo packages need to have code generated just before they are compiled\nfor various reasons. Here we’ll walk through a simple example which generates a\nlibrary call as part of the build script.</p>\n<p>First, let’s take a look at the directory structure of this package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">.\n├── Cargo.toml\n├── build.rs\n└── src\n    └── main.rs\n\n1 directory, 3 files\n</code></pre>\n<p>Here we can see that we have a <code class=\"hljs\">build.rs</code> build script and our binary in\n<code class=\"hljs\">main.rs</code>. This package has a basic manifest:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Cargo.toml</span>\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"hello-from-generated-code\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2021\"</span>\n</code></pre>\n<p>Let’s see what’s inside the build script:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust no_run hljs\"><span class=\"hljs-comment\">// build.rs</span>\n\n<span class=\"hljs-keyword\">use</span> std::env;\n<span class=\"hljs-keyword\">use</span> std::fs;\n<span class=\"hljs-keyword\">use</span> std::path::Path;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> out_dir = env::var_os(<span class=\"hljs-string\">\"OUT_DIR\"</span>).unwrap();\n    <span class=\"hljs-keyword\">let</span> dest_path = Path::new(&amp;out_dir).join(<span class=\"hljs-string\">\"hello.rs\"</span>);\n    fs::write(\n        &amp;dest_path,\n        <span class=\"hljs-string\">\"pub fn message() -&gt; &amp;'static str {\n            \\\"Hello, World!\\\"\n        }\n        \"</span>\n    ).unwrap();\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rerun-if-changed=build.rs\"</span>);\n}</code></pre></pre>\n<p>There’s a couple of points of note here:</p>\n<ul>\n<li>The script uses the <code class=\"hljs\">OUT_DIR</code> environment variable to discover where the\noutput files should be located. It can use the process’ current working\ndirectory to find where the input files should be located, but in this case we\ndon’t have any input files.</li>\n<li>In general, build scripts should not modify any files outside of <code class=\"hljs\">OUT_DIR</code>.\nIt may seem fine on the first blush, but it does cause problems when you use\nsuch crate as a dependency, because there’s an <em>implicit</em> invariant that\nsources in <code class=\"hljs\">.cargo/registry</code> should be immutable. <code class=\"hljs\">cargo</code> won’t allow such\nscripts when packaging.</li>\n<li>This script is relatively simple as it just writes out a small generated file.\nOne could imagine that other more complex operations could take place such as\ngenerating a Rust module from a C header file or another language definition,\nfor example.</li>\n<li>The <a href=\"reference/build-scripts.html#rerun-if-changed\"><code class=\"hljs\">rerun-if-changed</code> instruction</a>\ntells Cargo that the build script only needs to re-run if the build script\nitself changes. Without this line, Cargo will automatically run the build\nscript if any file in the package changes. If your code generation uses some\ninput files, this is where you would print a list of each of those files.</li>\n</ul>\n<p>Next, let’s peek at the library itself:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// src/main.rs</span>\n\ninclude!(<span class=\"hljs-built_in\">concat!</span>(<span class=\"hljs-built_in\">env!</span>(<span class=\"hljs-string\">\"OUT_DIR\"</span>), <span class=\"hljs-string\">\"/hello.rs\"</span>));\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, message());\n}</code></pre>\n<p>This is where the real magic happens. The library is using the rustc-defined\n<a href=\"reference/../../std/macro.include.html\"><code class=\"hljs\">include!</code> macro</a> in combination with the\n<a href=\"reference/../../std/macro.concat.html\"><code class=\"hljs\">concat!</code></a> and <a href=\"reference/../../std/macro.env.html\"><code class=\"hljs\">env!</code></a> macros to include the\ngenerated file (<code class=\"hljs\">hello.rs</code>) into the crate’s compilation.</p>\n<p>Using the structure shown here, crates can include any number of generated files\nfrom the build script itself.</p>\n<h2 id=\"building-a-native-library\"><a class=\"header\" href=\"#building-a-native-library\">Building a native library</a></h2>\n<p>Sometimes it’s necessary to build some native C or C++ code as part of a\npackage. This is another excellent use case of leveraging the build script to\nbuild a native library before the Rust crate itself. As an example, we’ll create\na Rust library which calls into C to print “Hello, World!”.</p>\n<p>Like above, let’s first take a look at the package layout:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">.\n├── Cargo.toml\n├── build.rs\n└── src\n    ├── hello.c\n    └── main.rs\n\n1 directory, 4 files\n</code></pre>\n<p>Pretty similar to before! Next, the manifest:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Cargo.toml</span>\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"hello-world-from-c\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2021\"</span>\n</code></pre>\n<p>For now we’re not going to use any build dependencies, so let’s take a look at\nthe build script now:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust no_run hljs\"><span class=\"hljs-comment\">// build.rs</span>\n\n<span class=\"hljs-keyword\">use</span> std::process::Command;\n<span class=\"hljs-keyword\">use</span> std::env;\n<span class=\"hljs-keyword\">use</span> std::path::Path;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> out_dir = env::var(<span class=\"hljs-string\">\"OUT_DIR\"</span>).unwrap();\n\n    <span class=\"hljs-comment\">// Note that there are a number of downsides to this approach, the comments</span>\n    <span class=\"hljs-comment\">// below detail how to improve the portability of these commands.</span>\n    Command::new(<span class=\"hljs-string\">\"gcc\"</span>).args(&amp;[<span class=\"hljs-string\">\"src/hello.c\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"-fPIC\"</span>, <span class=\"hljs-string\">\"-o\"</span>])\n                       .arg(&amp;<span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}/hello.o\"</span>, out_dir))\n                       .status().unwrap();\n    Command::new(<span class=\"hljs-string\">\"ar\"</span>).args(&amp;[<span class=\"hljs-string\">\"crus\"</span>, <span class=\"hljs-string\">\"libhello.a\"</span>, <span class=\"hljs-string\">\"hello.o\"</span>])\n                      .current_dir(&amp;Path::new(&amp;out_dir))\n                      .status().unwrap();\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rustc-link-search=native={}\"</span>, out_dir);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rustc-link-lib=static=hello\"</span>);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rerun-if-changed=src/hello.c\"</span>);\n}</code></pre></pre>\n<p>This build script starts out by compiling our C file into an object file (by\ninvoking <code class=\"hljs\">gcc</code>) and then converting this object file into a static library (by\ninvoking <code class=\"hljs\">ar</code>). The final step is feedback to Cargo itself to say that our\noutput was in <code class=\"hljs\">out_dir</code> and the compiler should link the crate to <code class=\"hljs\">libhello.a</code>\nstatically via the <code class=\"hljs\">-l static=hello</code> flag.</p>\n<p>Note that there are a number of drawbacks to this hard-coded approach:</p>\n<ul>\n<li>The <code class=\"hljs\">gcc</code> command itself is not portable across platforms. For example it’s\nunlikely that Windows platforms have <code class=\"hljs\">gcc</code>, and not even all Unix platforms\nmay have <code class=\"hljs\">gcc</code>. The <code class=\"hljs\">ar</code> command is also in a similar situation.</li>\n<li>These commands do not take cross-compilation into account. If we’re cross\ncompiling for a platform such as Android it’s unlikely that <code class=\"hljs\">gcc</code> will produce\nan ARM executable.</li>\n</ul>\n<p>Not to fear, though, this is where a <code class=\"hljs\">build-dependencies</code> entry would help!\nThe Cargo ecosystem has a number of packages to make this sort of task much\neasier, portable, and standardized. Let’s try the <a href=\"https://crates.io/crates/cc\"><code class=\"hljs\">cc</code>\ncrate</a> from <a href=\"https://crates.io/\">crates.io</a>. First, add it to the\n<code class=\"hljs\">build-dependencies</code> in <code class=\"hljs\">Cargo.toml</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">cc</span> = <span class=\"hljs-string\">\"1.0\"</span>\n</code></pre>\n<p>And rewrite the build script to use this crate:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// build.rs</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    cc::Build::new()\n        .file(<span class=\"hljs-string\">\"src/hello.c\"</span>)\n        .compile(<span class=\"hljs-string\">\"hello\"</span>);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rerun-if-changed=src/hello.c\"</span>);\n}</code></pre>\n<p>The <a href=\"https://crates.io/crates/cc\"><code class=\"hljs\">cc</code> crate</a> abstracts a range of build script requirements for C code:</p>\n<ul>\n<li>It invokes the appropriate compiler (MSVC for windows, <code class=\"hljs\">gcc</code> for MinGW, <code class=\"hljs\">cc</code>\nfor Unix platforms, etc.).</li>\n<li>It takes the <code class=\"hljs\">TARGET</code> variable into account by passing appropriate flags to\nthe compiler being used.</li>\n<li>Other environment variables, such as <code class=\"hljs\">OPT_LEVEL</code>, <code class=\"hljs\">DEBUG</code>, etc., are all\nhandled automatically.</li>\n<li>The stdout output and <code class=\"hljs\">OUT_DIR</code> locations are also handled by the <code class=\"hljs\">cc</code>\nlibrary.</li>\n</ul>\n<p>Here we can start to see some of the major benefits of farming as much\nfunctionality as possible out to common build dependencies rather than\nduplicating logic across all build scripts!</p>\n<p>Back to the case study though, let’s take a quick look at the contents of the\n<code class=\"hljs\">src</code> directory:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-c hljs\"><span class=\"hljs-comment\">// src/hello.c</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">hello</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Hello, World!\\n\"</span>);\n}\n</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// src/main.rs</span>\n\n<span class=\"hljs-comment\">// Note the lack of the `#[link]` attribute. We’re delegating the responsibility</span>\n<span class=\"hljs-comment\">// of selecting what to link over to the build script rather than hard-coding</span>\n<span class=\"hljs-comment\">// it in the source file.</span>\n<span class=\"hljs-keyword\">extern</span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">hello</span></span>(); }\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">unsafe</span> { hello(); }\n}</code></pre>\n<p>And there we go! This should complete our example of building some C code from a\nCargo package using the build script itself. This also shows why using a build\ndependency can be crucial in many situations and even much more concise!</p>\n<p>We’ve also seen a brief example of how a build script can use a crate as a\ndependency purely for the build process and not for the crate itself at runtime.</p>\n<h2 id=\"linking-to-system-libraries\"><a class=\"header\" href=\"#linking-to-system-libraries\">Linking to system libraries</a></h2>\n<p>This example demonstrates how to link a system library and how the build\nscript is used to support this use case.</p>\n<p>Quite frequently a Rust crate wants to link to a native library provided on\nthe system to bind its functionality or just use it as part of an\nimplementation detail. This is quite a nuanced problem when it comes to\nperforming this in a platform-agnostic fashion. It is best, if possible, to\nfarm out as much of this as possible to make this as easy as possible for\nconsumers.</p>\n<p>For this example, we will be creating a binding to the system’s zlib library.\nThis is a library that is commonly found on most Unix-like systems that\nprovides data compression. This is already wrapped up in the <a href=\"https://crates.io/crates/libz-sys\"><code class=\"hljs\">libz-sys</code>\ncrate</a>, but for this example, we’ll do an extremely simplified version. Check\nout <a href=\"https://github.com/rust-lang/libz-sys\">the source code</a> for the full example.</p>\n<p>To make it easy to find the location of the library, we will use the\n<a href=\"https://crates.io/crates/pkg-config\"><code class=\"hljs\">pkg-config</code> crate</a>. This crate uses the system’s <code class=\"hljs\">pkg-config</code> utility to\ndiscover information about a library. It will automatically tell Cargo what is\nneeded to link the library. This will likely only work on Unix-like systems\nwith <code class=\"hljs\">pkg-config</code> installed. Let’s start by setting up the manifest:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Cargo.toml</span>\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"libz-sys\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2021\"</span>\n<span class=\"hljs-attr\">links</span> = <span class=\"hljs-string\">\"z\"</span>\n\n<span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">pkg-config</span> = <span class=\"hljs-string\">\"0.3.16\"</span>\n</code></pre>\n<p>Take note that we included the <code class=\"hljs\">links</code> key in the <code class=\"hljs\">package</code> table. This tells\nCargo that we are linking to the <code class=\"hljs\">libz</code> library. See <a href=\"reference/build-script-examples.html#using-another-sys-crate\">“Using another sys\ncrate”</a> for an example that will leverage this.</p>\n<p>The build script is fairly simple:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// build.rs</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    pkg_config::Config::new().probe(<span class=\"hljs-string\">\"zlib\"</span>).unwrap();\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rerun-if-changed=build.rs\"</span>);\n}</code></pre>\n<p>Let’s round out the example with a basic FFI binding:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// src/lib.rs</span>\n\n<span class=\"hljs-keyword\">use</span> std::os::raw::{c_uint, c_ulong};\n\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">crc32</span></span>(crc: c_ulong, buf: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>, len: c_uint) -&gt; c_ulong;\n}\n\n<span class=\"hljs-meta\">#[test]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">test_crc32</span></span>() {\n    <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-string\">\"hello\"</span>;\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-built_in\">assert_eq!</span>(crc32(<span class=\"hljs-number\">0</span>, s.as_ptr(), s.len() <span class=\"hljs-keyword\">as</span> c_uint), <span class=\"hljs-number\">0x3610a686</span>);\n    }\n}</code></pre>\n<p>Run <code class=\"hljs\">cargo build -vv</code> to see the output from the build script. On a system\nwith <code class=\"hljs\">libz</code> already installed, it may look something like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">[libz-sys 0.1.0] cargo::rustc-link-search=native=/usr/lib\n[libz-sys 0.1.0] cargo::rustc-link-lib=z\n[libz-sys 0.1.0] cargo::rerun-if-changed=build.rs\n</code></pre>\n<p>Nice! <code class=\"hljs\">pkg-config</code> did all the work of finding the library and telling Cargo\nwhere it is.</p>\n<p>It is not unusual for packages to include the source for the library, and\nbuild it statically if it is not found on the system, or if a feature or\nenvironment variable is set. For example, the real <a href=\"https://crates.io/crates/libz-sys\"><code class=\"hljs\">libz-sys</code> crate</a> checks the\nenvironment variable <code class=\"hljs\">LIBZ_SYS_STATIC</code> or the <code class=\"hljs\">static</code> feature to build it\nfrom source instead of using the system library. Check out <a href=\"https://github.com/rust-lang/libz-sys\">the\nsource</a> for a more complete example.</p>\n<h2 id=\"using-another-sys-crate\"><a class=\"header\" href=\"#using-another-sys-crate\">Using another <code>sys</code> crate</a></h2>\n<p>When using the <code class=\"hljs\">links</code> key, crates may set metadata that can be read by other\ncrates that depend on it. This provides a mechanism to communicate information\nbetween crates. In this example, we’ll be creating a C library that makes use\nof zlib from the real <a href=\"https://crates.io/crates/libz-sys\"><code class=\"hljs\">libz-sys</code> crate</a>.</p>\n<p>If you have a C library that depends on zlib, you can leverage the <a href=\"https://crates.io/crates/libz-sys\"><code class=\"hljs\">libz-sys</code>\ncrate</a> to automatically find it or build it. This is great for cross-platform\nsupport, such as Windows where zlib is not usually installed. <code class=\"hljs\">libz-sys</code> <a href=\"https://github.com/rust-lang/libz-sys/blob/3c594e677c79584500da673f918c4d2101ac97a1/build.rs#L156\">sets\nthe <code class=\"hljs\">include</code>\nmetadata</a>\nto tell other packages where to find the header files for zlib. Our build\nscript can read that metadata with the <code class=\"hljs\">DEP_Z_INCLUDE</code> environment variable.\nHere’s an example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Cargo.toml</span>\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"zuser\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2021\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">libz-sys</span> = <span class=\"hljs-string\">\"1.0.25\"</span>\n\n<span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">cc</span> = <span class=\"hljs-string\">\"1.0.46\"</span>\n</code></pre>\n<p>Here we have included <code class=\"hljs\">libz-sys</code> which will ensure that there is only one\n<code class=\"hljs\">libz</code> used in the final library, and give us access to it from our build\nscript:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// build.rs</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> cfg = cc::Build::new();\n    cfg.file(<span class=\"hljs-string\">\"src/zuser.c\"</span>);\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(include) = std::env::var_os(<span class=\"hljs-string\">\"DEP_Z_INCLUDE\"</span>) {\n        cfg.include(include);\n    }\n    cfg.compile(<span class=\"hljs-string\">\"zuser\"</span>);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rerun-if-changed=src/zuser.c\"</span>);\n}</code></pre>\n<p>With <code class=\"hljs\">libz-sys</code> doing all the heavy lifting, the C source code may now include\nthe zlib header, and it should find the header, even on systems where it isn’t\nalready installed.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-c hljs\"><span class=\"hljs-comment\">// src/zuser.c</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"zlib.h\"</span></span>\n\n<span class=\"hljs-comment\">// … rest of code that makes use of zlib.</span>\n</code></pre>\n<h2 id=\"conditional-compilation\"><a class=\"header\" href=\"#conditional-compilation\">Conditional compilation</a></h2>\n<p>A build script may emit <a href=\"reference/build-scripts.html#rustc-cfg\"><code class=\"hljs\">rustc-cfg</code> instructions</a> which can enable conditions\nthat can be checked at compile time. In this example, we’ll take a look at how\nthe <a href=\"https://crates.io/crates/openssl\"><code class=\"hljs\">openssl</code> crate</a> uses this to support multiple versions of the OpenSSL\nlibrary.</p>\n<p>The <a href=\"https://crates.io/crates/openssl-sys\"><code class=\"hljs\">openssl-sys</code> crate</a> implements building and linking the OpenSSL library.\nIt supports multiple different implementations (like LibreSSL) and multiple\nversions. It makes use of the <code class=\"hljs\">links</code> key so that it may pass information to\nother build scripts. One of the things it passes is the <code class=\"hljs\">version_number</code> key,\nwhich is the version of OpenSSL that was detected. The code in the build\nscript looks something <a href=\"https://github.com/sfackler/rust-openssl/blob/dc72a8e2c429e46c275e528b61a733a66e7877fc/openssl-sys/build/main.rs#L216\">like\nthis</a>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::version_number={:x}\"</span>, openssl_version);</code></pre>\n<p>This instruction causes the <code class=\"hljs\">DEP_OPENSSL_VERSION_NUMBER</code> environment variable\nto be set in any crates that directly depend on <code class=\"hljs\">openssl-sys</code>.</p>\n<p>The <code class=\"hljs\">openssl</code> crate, which provides the higher-level interface, specifies\n<code class=\"hljs\">openssl-sys</code> as a dependency. The <code class=\"hljs\">openssl</code> build script can read the\nversion information generated by the <code class=\"hljs\">openssl-sys</code> build script with the\n<code class=\"hljs\">DEP_OPENSSL_VERSION_NUMBER</code> environment variable. It uses this to generate\nsome <a href=\"https://github.com/sfackler/rust-openssl/blob/dc72a8e2c429e46c275e528b61a733a66e7877fc/openssl/build.rs#L18-L36\"><code class=\"hljs\">cfg</code>\nvalues</a>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// (portion of build.rs)</span>\n\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rustc-check-cfg=cfg(ossl101,ossl102)\"</span>);\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rustc-check-cfg=cfg(ossl110,ossl110g,ossl111)\"</span>);\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Ok</span>(version) = env::var(<span class=\"hljs-string\">\"DEP_OPENSSL_VERSION_NUMBER\"</span>) {\n    <span class=\"hljs-keyword\">let</span> version = <span class=\"hljs-built_in\">u64</span>::from_str_radix(&amp;version, <span class=\"hljs-number\">16</span>).unwrap();\n\n    <span class=\"hljs-keyword\">if</span> version &gt;= <span class=\"hljs-number\">0x1_00_01_00_0</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rustc-cfg=ossl101\"</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> version &gt;= <span class=\"hljs-number\">0x1_00_02_00_0</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rustc-cfg=ossl102\"</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> version &gt;= <span class=\"hljs-number\">0x1_01_00_00_0</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rustc-cfg=ossl110\"</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> version &gt;= <span class=\"hljs-number\">0x1_01_00_07_0</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rustc-cfg=ossl110g\"</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> version &gt;= <span class=\"hljs-number\">0x1_01_01_00_0</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rustc-cfg=ossl111\"</span>);\n    }\n}</code></pre>\n<p>These <code class=\"hljs\">cfg</code> values can then be used with the <a href=\"reference/../../reference/conditional-compilation.html#the-cfg-attribute\"><code class=\"hljs\">cfg</code> attribute</a> or the <a href=\"reference/../../std/macro.cfg.html\"><code class=\"hljs\">cfg</code>\nmacro</a> to conditionally include code. For example, SHA3 support was added in\nOpenSSL 1.1.1, so it is <a href=\"https://github.com/sfackler/rust-openssl/blob/dc72a8e2c429e46c275e528b61a733a66e7877fc/openssl/src/hash.rs#L67-L85\">conditionally\nexcluded</a>\nfor older versions:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// (portion of openssl crate)</span>\n\n<span class=\"hljs-meta\">#[cfg(ossl111)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">sha3_224</span></span>() -&gt; MessageDigest {\n    <span class=\"hljs-keyword\">unsafe</span> { MessageDigest(ffi::EVP_sha3_224()) }\n}</code></pre>\n<p>Of course, one should be careful when using this, since it makes the resulting\nbinary even more dependent on the build environment. In this example, if the\nbinary is distributed to another system, it may not have the exact same shared\nlibraries, which could cause problems.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"publishing-on-cratesio\"><a class=\"header\" href=\"#publishing-on-cratesio\">Publishing on crates.io</a></h1>\n<p>Once you’ve got a library that you’d like to share with the world, it’s time to\npublish it on <a href=\"https://crates.io/\">crates.io</a>! Publishing a crate is when a specific\nversion is uploaded to be hosted on <a href=\"https://crates.io/\">crates.io</a>.</p>\n<p>Take care when publishing a crate, because a publish is <strong>permanent</strong>. The\nversion can never be overwritten, and the code cannot be deleted. There is no\nlimit to the number of versions which can be published, however.</p>\n<h2 id=\"before-your-first-publish\"><a class=\"header\" href=\"#before-your-first-publish\">Before your first publish</a></h2>\n<p>First things first, you’ll need an account on <a href=\"https://crates.io/\">crates.io</a> to acquire\nan API token. To do so, <a href=\"https://crates.io/\">visit the home page</a> and log in via a GitHub\naccount (required for now). You will also need to provide and verify your email\naddress on the <a href=\"https://crates.io/settings/profile\">Account Settings</a> page. Once\nthat is done <a href=\"https://crates.io/settings/tokens\">create an API token</a>, make sure\nyou copy it. Once you leave the page you will not be able to see it again.</p>\n<p>Then run the <a href=\"reference/../commands/cargo-login.html\"><code class=\"hljs\">cargo login</code></a> command.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo login</span>\n</code></pre>\n<p>Then at the prompt put in the token specified.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">please paste the API Token found on https://crates.io/me below\nabcdefghijklmnopqrstuvwxyz012345\n</code></pre>\n<p>This command will inform Cargo of your API token and store it locally in your\n<code class=\"hljs\">~/.cargo/credentials.toml</code>. Note that this token is a <strong>secret</strong> and should not be\nshared with anyone else. If it leaks for any reason, you should revoke it\nimmediately.</p>\n<blockquote>\n<p><strong>Note</strong>: The <a href=\"reference/../commands/cargo-logout.html\"><code class=\"hljs\">cargo logout</code></a> command can be used to remove the token from\n<code class=\"hljs\">credentials.toml</code>. This can be useful if you no longer need it stored on\nthe local machine.</p>\n</blockquote>\n<h2 id=\"before-publishing-a-new-crate\"><a class=\"header\" href=\"#before-publishing-a-new-crate\">Before publishing a new crate</a></h2>\n<p>Keep in mind that crate names on <a href=\"https://crates.io/\">crates.io</a> are allocated on a first-come-first-serve\nbasis. Once a crate name is taken, it cannot be used for another crate.</p>\n<p>Check out the <a href=\"reference/manifest.html\">metadata you can specify</a> in <code class=\"hljs\">Cargo.toml</code> to\nensure your crate can be discovered more easily! Before publishing, make sure\nyou have filled out the following fields:</p>\n<ul>\n<li><a href=\"reference/manifest.html#the-license-and-license-file-fields\"><code class=\"hljs\">license</code> or <code class=\"hljs\">license-file</code></a></li>\n<li><a href=\"reference/manifest.html#the-description-field\"><code class=\"hljs\">description</code></a></li>\n<li><a href=\"reference/manifest.html#the-homepage-field\"><code class=\"hljs\">homepage</code></a></li>\n<li><a href=\"reference/manifest.html#the-repository-field\"><code class=\"hljs\">repository</code></a></li>\n<li><a href=\"reference/manifest.html#the-readme-field\"><code class=\"hljs\">readme</code></a></li>\n</ul>\n<p>It would also be a good idea to include some <a href=\"reference/manifest.html#the-keywords-field\"><code class=\"hljs\">keywords</code></a> and <a href=\"reference/manifest.html#the-categories-field\"><code class=\"hljs\">categories</code></a>,\nthough they are not required.</p>\n<p>If you are publishing a library, you may also want to consult the <a href=\"https://rust-lang.github.io/api-guidelines/\">Rust API\nGuidelines</a>.</p>\n<h3 id=\"packaging-a-crate\"><a class=\"header\" href=\"#packaging-a-crate\">Packaging a crate</a></h3>\n<p>The next step is to package up your crate and upload it to <a href=\"https://crates.io/\">crates.io</a>. For\nthis we’ll use the <a href=\"reference/../commands/cargo-publish.html\"><code class=\"hljs\">cargo publish</code></a> subcommand. This command performs the following\nsteps:</p>\n<ol>\n<li>Perform some verification checks on your package.</li>\n<li>Compress your source code into a <code class=\"hljs\">.crate</code> file.</li>\n<li>Extract the <code class=\"hljs\">.crate</code> file into a temporary directory and verify that it\ncompiles.</li>\n<li>Upload the <code class=\"hljs\">.crate</code> file to <a href=\"https://crates.io/\">crates.io</a>.</li>\n<li>The registry will perform some additional checks on the uploaded package\nbefore adding it.</li>\n</ol>\n<p>It is recommended that you first run <code class=\"hljs\">cargo publish --dry-run</code> (or <a href=\"reference/../commands/cargo-package.html\"><code class=\"hljs\">cargo package</code></a> which is equivalent) to ensure there aren’t any warnings or errors\nbefore publishing. This will perform the first three steps listed above.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo publish --dry-run</span>\n</code></pre>\n<p>You can inspect the generated <code class=\"hljs\">.crate</code> file in the <code class=\"hljs\">target/package</code> directory.\n<a href=\"https://crates.io/\">crates.io</a> currently has a 10MB size limit on the <code class=\"hljs\">.crate</code> file. You may want\nto check the size of the <code class=\"hljs\">.crate</code> file to ensure you didn’t accidentally\npackage up large assets that are not required to build your package, such as\ntest data, website documentation, or code generation. You can check which\nfiles are included with the following command:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo package --list</span>\n</code></pre>\n<p>Cargo will automatically ignore files ignored by your version control system\nwhen packaging, but if you want to specify an extra set of files to ignore you\ncan use the <a href=\"reference/manifest.html#the-exclude-and-include-fields\"><code class=\"hljs\">exclude</code> key</a> in the\nmanifest:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">exclude</span> = [\n    <span class=\"hljs-string\">\"public/assets/*\"</span>,\n    <span class=\"hljs-string\">\"videos/*\"</span>,\n]\n</code></pre>\n<p>If you’d rather explicitly list the files to include, Cargo also supports an\n<code class=\"hljs\">include</code> key, which if set, overrides the <code class=\"hljs\">exclude</code> key:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">include</span> = [\n    <span class=\"hljs-string\">\"**/*.rs\"</span>,\n    <span class=\"hljs-string\">\"Cargo.toml\"</span>,\n]\n</code></pre>\n<h2 id=\"uploading-the-crate\"><a class=\"header\" href=\"#uploading-the-crate\">Uploading the crate</a></h2>\n<p>When you are ready to publish, use the <a href=\"reference/../commands/cargo-publish.html\"><code class=\"hljs\">cargo publish</code></a> command\nto upload to <a href=\"https://crates.io/\">crates.io</a>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo publish</span>\n</code></pre>\n<p>And that’s it, you’ve now published your first crate!</p>\n<h2 id=\"publishing-a-new-version-of-an-existing-crate\"><a class=\"header\" href=\"#publishing-a-new-version-of-an-existing-crate\">Publishing a new version of an existing crate</a></h2>\n<p>In order to release a new version, change <a href=\"reference/manifest.html#the-version-field\">the <code class=\"hljs\">version</code> value</a> specified in your <code class=\"hljs\">Cargo.toml</code> manifest.\nKeep in mind <a href=\"reference/semver.html\">the SemVer rules</a> which provide guidelines on what is a compatible change.\nThen run <a href=\"reference/../commands/cargo-publish.html\"><code class=\"hljs\">cargo publish</code></a> as described above to upload the new version.</p>\n<blockquote>\n<p><strong>Recommendation:</strong> Consider the full release process and automate what you can.</p>\n<p>Each version should include:</p>\n<ul>\n<li>A changelog entry, preferably <a href=\"https://keepachangelog.com/en/1.0.0/\">manually curated</a> though a generated one is better than nothing</li>\n<li>A <a href=\"https://git-scm.com/book/en/v2/Git-Basics-Tagging\">git tag</a> pointing to the published commit</li>\n</ul>\n<p>Examples of third-party tools that are representative of different workflows include (in alphabetical order):</p>\n<ul>\n<li><a href=\"https://crates.io/crates/cargo-release\">cargo-release</a></li>\n<li><a href=\"https://crates.io/crates/cargo-smart-release\">cargo-smart-release</a></li>\n<li><a href=\"https://crates.io/crates/release-plz\">release-plz</a></li>\n</ul>\n<p>For more, see <a href=\"https://crates.io/search?q=cargo%20release\">crates.io</a>.</p>\n</blockquote>\n<h2 id=\"managing-a-cratesio-based-crate\"><a class=\"header\" href=\"#managing-a-cratesio-based-crate\">Managing a crates.io-based crate</a></h2>\n<p>Management of crates is primarily done through the command line <code class=\"hljs\">cargo</code> tool\nrather than the <a href=\"https://crates.io/\">crates.io</a> web interface. For this, there are a few subcommands\nto manage a crate.</p>\n<h3 id=\"cargo-yank\"><a class=\"header\" href=\"#cargo-yank\"><code>cargo yank</code></a></h3>\n<p>Occasions may arise where you publish a version of a crate that actually ends up\nbeing broken for one reason or another (syntax error, forgot to include a file,\netc.). For situations such as this, Cargo supports a “yank” of a version of a\ncrate.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo yank --version 1.0.1</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo yank --version 1.0.1 --undo</span>\n</code></pre>\n<p>A yank <strong>does not</strong> delete any code. This feature is not intended for deleting\naccidentally uploaded secrets, for example. If that happens, you must reset\nthose secrets immediately.</p>\n<p>The semantics of a yanked version are that no new dependencies can be created\nagainst that version, but all existing dependencies continue to work. One of the\nmajor goals of <a href=\"https://crates.io/\">crates.io</a> is to act as a permanent archive of crates that does\nnot change over time, and allowing deletion of a version would go against this\ngoal. Essentially a yank means that all packages with a <code class=\"hljs\">Cargo.lock</code> will not\nbreak, while any future <code class=\"hljs\">Cargo.lock</code> files generated will not list the yanked\nversion.</p>\n<h3 id=\"cargo-owner\"><a class=\"header\" href=\"#cargo-owner\"><code>cargo owner</code></a></h3>\n<p>A crate is often developed by more than one person, or the primary maintainer\nmay change over time! The owner of a crate is the only person allowed to publish\nnew versions of the crate, but an owner may designate additional owners.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo owner --add github-handle</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo owner --remove github-handle</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo owner --add github:rust-lang:owners</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo owner --remove github:rust-lang:owners</span>\n</code></pre>\n<p>The owner IDs given to these commands must be GitHub user names or GitHub teams.</p>\n<p>If a user name is given to <code class=\"hljs\">--add</code>, that user is invited as a “named” owner, with\nfull rights to the crate. In addition to being able to publish or yank versions\nof the crate, they have the ability to add or remove owners, <em>including</em> the\nowner that made <em>them</em> an owner. Needless to say, you shouldn’t make people you\ndon’t fully trust into a named owner. In order to become a named owner, a user\nmust have logged into <a href=\"https://crates.io/\">crates.io</a> previously.</p>\n<p>If a team name is given to <code class=\"hljs\">--add</code>, that team is invited as a “team” owner, with\nrestricted right to the crate. While they have permission to publish or yank\nversions of the crate, they <em>do not</em> have the ability to add or remove owners.\nIn addition to being more convenient for managing groups of owners, teams are\njust a bit more secure against owners becoming malicious.</p>\n<p>The syntax for teams is currently <code class=\"hljs\">github:org:team</code> (see examples above).\nIn order to invite a team as an owner one must be a member of that team. No\nsuch restriction applies to removing a team as an owner.</p>\n<h2 id=\"github-permissions\"><a class=\"header\" href=\"#github-permissions\">GitHub permissions</a></h2>\n<p>Team membership is not something GitHub provides simple public access to, and it\nis likely for you to encounter the following message when working with them:</p>\n<blockquote>\n<p>It looks like you don’t have permission to query a necessary property from\nGitHub to complete this request. You may need to re-authenticate on <a href=\"https://crates.io/\">crates.io</a>\nto grant permission to read GitHub org memberships.</p>\n</blockquote>\n<p>This is basically a catch-all for “you tried to query a team, and one of the\nfive levels of membership access control denied this”. That is not an\nexaggeration. GitHub’s support for team access control is Enterprise Grade.</p>\n<p>The most likely cause of this is simply that you last logged in before this\nfeature was added. We originally requested <em>no</em> permissions from GitHub when\nauthenticating users, because we didn’t actually ever use the user’s token for\nanything other than logging them in. However to query team membership on your\nbehalf, we now require <a href=\"https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">the <code class=\"hljs\">read:org</code> scope</a>.</p>\n<p>You are free to deny us this scope, and everything that worked before teams\nwere introduced will keep working. However you will never be able to add a team\nas an owner, or publish a crate as a team owner. If you ever attempt to do this,\nyou will get the error above. You may also see this error if you ever try to\npublish a crate that you don’t own at all, but otherwise happens to have a team.</p>\n<p>If you ever change your mind, or just aren’t sure if <a href=\"https://crates.io/\">crates.io</a> has sufficient\npermission, you can always go to <a href=\"https://crates.io/\">https://crates.io/</a> and re-authenticate,\nwhich will prompt you for permission if <a href=\"https://crates.io/\">crates.io</a> doesn’t have all the scopes\nit would like to.</p>\n<p>An additional barrier to querying GitHub is that the organization may be\nactively denying third party access. To check this, you can go to:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">https://github.com/organizations/:org/settings/oauth_application_policy\n</code></pre>\n<p>where <code class=\"hljs\">:org</code> is the name of the organization (e.g., <code class=\"hljs\">rust-lang</code>). You may see\nsomething like:</p>\n<p><img src=\"reference/../images/org-level-acl.png\" alt=\"Organization Access Control\"></p>\n<p>Where you may choose to explicitly remove <a href=\"https://crates.io/\">crates.io</a> from your organization’s\nblacklist, or simply press the “Remove Restrictions” button to allow all third\nparty applications to access this data.</p>\n<p>Alternatively, when <a href=\"https://crates.io/\">crates.io</a> requested the <code class=\"hljs\">read:org</code> scope, you could have\nexplicitly whitelisted <a href=\"https://crates.io/\">crates.io</a> querying the org in question by pressing\nthe “Grant Access” button next to its name:</p>\n<p><img src=\"reference/../images/auth-level-acl.png\" alt=\"Authentication Access Control\"></p>\n<h3 id=\"troubleshooting-github-team-access-errors\"><a class=\"header\" href=\"#troubleshooting-github-team-access-errors\">Troubleshooting GitHub team access errors</a></h3>\n<p>When trying to add a GitHub team as crate owner, you may see an error like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error: failed to invite owners to crate &lt;crate_name&gt;: api errors (status 200 OK): could not find the github team org/repo\n</code></pre>\n<p>In that case, you should go to <a href=\"https://github.com/settings/applications\">the GitHub Application settings page</a> and\ncheck if crates.io is listed in the <code class=\"hljs\">Authorized OAuth Apps</code> tab.\nIf it isn’t, you should go to <a href=\"https://crates.io/\">https://crates.io/</a> and authorize it.\nThen go back to the Application Settings page on GitHub, click on the\ncrates.io application in the list, and make sure you or your organization is\nlisted in the “Organization access” list with a green check mark. If there’s\na button labeled <code class=\"hljs\">Grant</code> or <code class=\"hljs\">Request</code>, you should grant the access or\nrequest the org owner to do so.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"package-id-specifications\"><a class=\"header\" href=\"#package-id-specifications\">Package ID Specifications</a></h1>\n<h2 id=\"package-id-specifications-1\"><a class=\"header\" href=\"#package-id-specifications-1\">Package ID specifications</a></h2>\n<p>Subcommands of Cargo frequently need to refer to a particular package within a\ndependency graph for various operations like updating, cleaning, building, etc.\nTo solve this problem, Cargo supports <em>Package ID Specifications</em>. A specification\nis a string which is used to uniquely refer to one package within a graph of\npackages.</p>\n<p>The specification may be fully qualified, such as\n<code class=\"hljs\">https://github.com/rust-lang/crates.io-index#regex@1.4.3</code> or it may be\nabbreviated, such as <code class=\"hljs\">regex</code>. The abbreviated form may be used as long as it\nuniquely identifies a single package in the dependency graph. If there is\nambiguity, additional qualifiers can be added to make it unique. For example,\nif there are two versions of the <code class=\"hljs\">regex</code> package in the graph, then it can be\nqualified with a version to make it unique, such as <code class=\"hljs\">regex@1.4.3</code>.</p>\n<h3 id=\"specification-grammar\"><a class=\"header\" href=\"#specification-grammar\">Specification grammar</a></h3>\n<p>The formal grammar for a Package Id Specification is:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-notrust hljs\">spec := pkgname |\n        [ kind \"+\" ] proto \"://\" hostname-and-path [ \"?\" query] [ \"#\" ( pkgname | semver ) ]\nquery = ( \"branch\" | \"tag\" | \"rev\" ) \"=\" ref\npkgname := name [ (\"@\" | \":\" ) semver ]\nsemver := digits [ \".\" digits [ \".\" digits [ \"-\" prerelease ] [ \"+\" build ]]]\n\nkind = \"registry\" | \"git\" | \"file\"\nproto := \"http\" | \"git\" | ...\n</code></pre>\n<p>Here, brackets indicate that the contents are optional.</p>\n<p>The URL form can be used for git dependencies, or to differentiate packages\nthat come from different sources such as different registries.</p>\n<h3 id=\"example-specifications\"><a class=\"header\" href=\"#example-specifications\">Example specifications</a></h3>\n<p>The following are references to the <code class=\"hljs\">regex</code> package on <code class=\"hljs\">crates.io</code>:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th style=\"text-align: left\">Spec</th><th style=\"text-align: center\">Name</th><th style=\"text-align: center\">Version</th></tr></thead><tbody>\n<tr><td style=\"text-align: left\"><code class=\"hljs\">regex</code></td><td style=\"text-align: center\"><code class=\"hljs\">regex</code></td><td style=\"text-align: center\"><code class=\"hljs\">*</code></td></tr>\n<tr><td style=\"text-align: left\"><code class=\"hljs\">regex@1.4</code></td><td style=\"text-align: center\"><code class=\"hljs\">regex</code></td><td style=\"text-align: center\"><code class=\"hljs\">1.4.*</code></td></tr>\n<tr><td style=\"text-align: left\"><code class=\"hljs\">regex@1.4.3</code></td><td style=\"text-align: center\"><code class=\"hljs\">regex</code></td><td style=\"text-align: center\"><code class=\"hljs\">1.4.3</code></td></tr>\n<tr><td style=\"text-align: left\"><code class=\"hljs\">https://github.com/rust-lang/crates.io-index#regex</code></td><td style=\"text-align: center\"><code class=\"hljs\">regex</code></td><td style=\"text-align: center\"><code class=\"hljs\">*</code></td></tr>\n<tr><td style=\"text-align: left\"><code class=\"hljs\">https://github.com/rust-lang/crates.io-index#regex@1.4.3</code></td><td style=\"text-align: center\"><code class=\"hljs\">regex</code></td><td style=\"text-align: center\"><code class=\"hljs\">1.4.3</code></td></tr>\n<tr><td style=\"text-align: left\"><code class=\"hljs\">registry+https://github.com/rust-lang/crates.io-index#regex@1.4.3</code></td><td style=\"text-align: center\"><code class=\"hljs\">regex</code></td><td style=\"text-align: center\"><code class=\"hljs\">1.4.3</code></td></tr>\n</tbody></table>\n</div>\n<p>The following are some examples of specs for several different git dependencies:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th style=\"text-align: left\">Spec</th><th style=\"text-align: center\">Name</th><th style=\"text-align: center\">Version</th></tr></thead><tbody>\n<tr><td style=\"text-align: left\"><code class=\"hljs\">https://github.com/rust-lang/cargo#0.52.0</code></td><td style=\"text-align: center\"><code class=\"hljs\">cargo</code></td><td style=\"text-align: center\"><code class=\"hljs\">0.52.0</code></td></tr>\n<tr><td style=\"text-align: left\"><code class=\"hljs\">https://github.com/rust-lang/cargo#cargo-platform@0.1.2</code></td><td style=\"text-align: center\"><nobr><code class=\"hljs\">cargo-platform</code></nobr></td><td style=\"text-align: center\"><code class=\"hljs\">0.1.2</code></td></tr>\n<tr><td style=\"text-align: left\"><code class=\"hljs\">ssh://git@github.com/rust-lang/regex.git#regex@1.4.3</code></td><td style=\"text-align: center\"><code class=\"hljs\">regex</code></td><td style=\"text-align: center\"><code class=\"hljs\">1.4.3</code></td></tr>\n<tr><td style=\"text-align: left\"><code class=\"hljs\">git+ssh://git@github.com/rust-lang/regex.git#regex@1.4.3</code></td><td style=\"text-align: center\"><code class=\"hljs\">regex</code></td><td style=\"text-align: center\"><code class=\"hljs\">1.4.3</code></td></tr>\n<tr><td style=\"text-align: left\"><code class=\"hljs\">git+ssh://git@github.com/rust-lang/regex.git?branch=dev#regex@1.4.3</code></td><td style=\"text-align: center\"><code class=\"hljs\">regex</code></td><td style=\"text-align: center\"><code class=\"hljs\">1.4.3</code></td></tr>\n</tbody></table>\n</div>\n<p>Local packages on the filesystem can use <code class=\"hljs\">file://</code> URLs to reference them:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th style=\"text-align: left\">Spec</th><th style=\"text-align: center\">Name</th><th style=\"text-align: center\">Version</th></tr></thead><tbody>\n<tr><td style=\"text-align: left\"><code class=\"hljs\">file:///path/to/my/project/foo</code></td><td style=\"text-align: center\"><code class=\"hljs\">foo</code></td><td style=\"text-align: center\"><code class=\"hljs\">*</code></td></tr>\n<tr><td style=\"text-align: left\"><code class=\"hljs\">file:///path/to/my/project/foo#1.1.8</code></td><td style=\"text-align: center\"><code class=\"hljs\">foo</code></td><td style=\"text-align: center\"><code class=\"hljs\">1.1.8</code></td></tr>\n<tr><td style=\"text-align: left\"><code class=\"hljs\">path+file:///path/to/my/project/foo#1.1.8</code></td><td style=\"text-align: center\"><code class=\"hljs\">foo</code></td><td style=\"text-align: center\"><code class=\"hljs\">1.1.8</code></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"brevity-of-specifications\"><a class=\"header\" href=\"#brevity-of-specifications\">Brevity of specifications</a></h3>\n<p>The goal of this is to enable both succinct and exhaustive syntaxes for\nreferring to packages in a dependency graph. Ambiguous references may refer to\none or more packages. Most commands generate an error if more than one package\ncould be referred to with the same specification.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"source-replacement\"><a class=\"header\" href=\"#source-replacement\">Source Replacement</a></h1>\n<p>This document is about replacing the crate index. You can read about overriding\ndependencies in the <a href=\"reference/overriding-dependencies.html\">overriding dependencies</a> section of this\ndocumentation.</p>\n<p>A <em>source</em> is a provider that contains crates that may be included as\ndependencies for a package. Cargo supports the ability to <strong>replace one source\nwith another</strong> to express strategies such as:</p>\n<ul>\n<li>\n<p>Vendoring — custom sources can be defined which represent crates on the local\nfilesystem. These sources are subsets of the source that they’re replacing and\ncan be checked into packages if necessary.</p>\n</li>\n<li>\n<p>Mirroring — sources can be replaced with an equivalent version which acts as a\ncache for crates.io itself.</p>\n</li>\n</ul>\n<p>Cargo has a core assumption about source replacement that the source code is\nexactly the same from both sources. Note that this also means that\na replacement source is not allowed to have crates which are not present in the\noriginal source.</p>\n<p>As a consequence, source replacement is not appropriate for situations such as\npatching a dependency or a private registry. Cargo supports patching\ndependencies through the usage of <a href=\"reference/overriding-dependencies.html\">the <code class=\"hljs\">[patch]</code> key</a>, and private registry support is described in <a href=\"reference/registries.html\">the Registries\nchapter</a>.</p>\n<p>When using source replacement, running commands like <code class=\"hljs\">cargo publish</code> that need to\ncontact the registry require passing the <code class=\"hljs\">--registry</code> option. This helps avoid\nany ambiguity about which registry to contact, and will use the authentication\ntoken for the specified registry.</p>\n<h2 id=\"configuration-1\"><a class=\"header\" href=\"#configuration-1\">Configuration</a></h2>\n<p>Configuration of replacement sources is done through <a href=\"reference/config.html\"><code class=\"hljs\">.cargo/config.toml</code></a>\nand the full set of available keys are:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># The `source` table is where all keys related to source-replacement</span>\n<span class=\"hljs-comment\"># are stored.</span>\n<span class=\"hljs-section\">[source]</span>\n\n<span class=\"hljs-comment\"># Under the `source` table are a number of other tables whose keys are a</span>\n<span class=\"hljs-comment\"># name for the relevant source. For example this section defines a new</span>\n<span class=\"hljs-comment\"># source, called `my-vendor-source`, which comes from a directory</span>\n<span class=\"hljs-comment\"># located at `vendor` relative to the directory containing this `.cargo/config.toml`</span>\n<span class=\"hljs-comment\"># file</span>\n<span class=\"hljs-section\">[source.my-vendor-source]</span>\n<span class=\"hljs-attr\">directory</span> = <span class=\"hljs-string\">\"vendor\"</span>\n\n<span class=\"hljs-comment\"># The crates.io default source for crates is available under the name</span>\n<span class=\"hljs-comment\"># \"crates-io\", and here we use the `replace-with` key to indicate that it's</span>\n<span class=\"hljs-comment\"># replaced with our source above.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># The `replace-with` key can also reference an alternative registry name</span>\n<span class=\"hljs-comment\"># defined in the `[registries]` table.</span>\n<span class=\"hljs-section\">[source.crates-io]</span>\n<span class=\"hljs-attr\">replace-with</span> = <span class=\"hljs-string\">\"my-vendor-source\"</span>\n\n<span class=\"hljs-comment\"># Each source has its own table where the key is the name of the source</span>\n<span class=\"hljs-section\">[source.the-source-name]</span>\n\n<span class=\"hljs-comment\"># Indicate that `the-source-name` will be replaced with `another-source`,</span>\n<span class=\"hljs-comment\"># defined elsewhere</span>\n<span class=\"hljs-attr\">replace-with</span> = <span class=\"hljs-string\">\"another-source\"</span>\n\n<span class=\"hljs-comment\"># Several kinds of sources can be specified (described in more detail below):</span>\n<span class=\"hljs-attr\">registry</span> = <span class=\"hljs-string\">\"https://example.com/path/to/index\"</span>\n<span class=\"hljs-attr\">local-registry</span> = <span class=\"hljs-string\">\"path/to/registry\"</span>\n<span class=\"hljs-attr\">directory</span> = <span class=\"hljs-string\">\"path/to/vendor\"</span>\n\n<span class=\"hljs-comment\"># Git sources can optionally specify a branch/tag/rev as well</span>\n<span class=\"hljs-attr\">git</span> = <span class=\"hljs-string\">\"https://example.com/path/to/repo\"</span>\n<span class=\"hljs-comment\"># branch = \"master\"</span>\n<span class=\"hljs-comment\"># tag = \"v1.0.1\"</span>\n<span class=\"hljs-comment\"># rev = \"313f44e8\"</span>\n</code></pre>\n<h2 id=\"registry-sources\"><a class=\"header\" href=\"#registry-sources\">Registry Sources</a></h2>\n<p>A “registry source” is one that is the same as crates.io itself. That is, it has\nan index served in a git repository which matches the format of the\n<a href=\"https://github.com/rust-lang/crates.io-index\">crates.io index</a>. That repository\nthen has configuration indicating where to download crates from.</p>\n<p>Currently there is not an already-available project for setting up a mirror of\ncrates.io. Stay tuned though!</p>\n<h2 id=\"local-registry-sources\"><a class=\"header\" href=\"#local-registry-sources\">Local Registry Sources</a></h2>\n<p>A “local registry source” is intended to be a subset of another registry\nsource, but available on the local filesystem (aka vendoring). Local registries\nare downloaded ahead of time, typically sync’d with a <code class=\"hljs\">Cargo.lock</code>, and are\nmade up of a set of <code class=\"hljs\">*.crate</code> files and an index like the normal registry is.</p>\n<p>The primary way to manage and create local registry sources is through the\n<a href=\"https://crates.io/crates/cargo-local-registry\"><code class=\"hljs\">cargo-local-registry</code></a> subcommand,\n<a href=\"https://crates.io/crates/cargo-local-registry\">available on crates.io</a> and can be installed with\n<code class=\"hljs\">cargo install cargo-local-registry</code>.</p>\n<p>Local registries are contained within one directory and contain a number of\n<code class=\"hljs\">*.crate</code> files downloaded from crates.io as well as an <code class=\"hljs\">index</code> directory with\nthe same format as the crates.io-index project (populated with just entries for\nthe crates that are present).</p>\n<h2 id=\"directory-sources\"><a class=\"header\" href=\"#directory-sources\">Directory Sources</a></h2>\n<p>A “directory source” is similar to a local registry source where it contains a\nnumber of crates available on the local filesystem, suitable for vendoring\ndependencies. Directory sources are primarily managed by the <code class=\"hljs\">cargo vendor</code>\nsubcommand.</p>\n<p>Directory sources are distinct from local registries though in that they contain\nthe unpacked version of <code class=\"hljs\">*.crate</code> files, making it more suitable in some\nsituations to check everything into source control. A directory source is just a\ndirectory containing a number of other directories which contain the source code\nfor crates (the unpacked version of <code class=\"hljs\">*.crate</code> files). Currently no restriction\nis placed on the name of each directory.</p>\n<p>Each crate in a directory source also has an associated metadata file indicating\nthe checksum of each file in the crate to protect against accidental\nmodifications.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"external-tools\"><a class=\"header\" href=\"#external-tools\">External tools</a></h1>\n<p>One of the goals of Cargo is simple integration with third-party tools, like\nIDEs and other build systems. To make integration easier, Cargo has several\nfacilities:</p>\n<ul>\n<li>\n<p>a <a href=\"reference/../commands/cargo-metadata.html\"><code class=\"hljs\">cargo metadata</code></a> command, which outputs package structure and dependencies\ninformation in JSON,</p>\n</li>\n<li>\n<p>a <code class=\"hljs\">--message-format</code> flag, which outputs information about a particular build,\nand</p>\n</li>\n<li>\n<p>support for custom subcommands.</p>\n</li>\n</ul>\n<h2 id=\"information-about-package-structure\"><a class=\"header\" href=\"#information-about-package-structure\">Information about package structure</a></h2>\n<p>You can use <a href=\"reference/../commands/cargo-metadata.html\"><code class=\"hljs\">cargo metadata</code></a> command to get information about package\nstructure and dependencies. See the <a href=\"reference/../commands/cargo-metadata.html\"><code class=\"hljs\">cargo metadata</code></a> documentation\nfor details on the format of the output.</p>\n<p>The format is stable and versioned. When calling <code class=\"hljs\">cargo metadata</code>, you should\npass <code class=\"hljs\">--format-version</code> flag explicitly to avoid forward incompatibility\nhazard.</p>\n<p>If you are using Rust, the <a href=\"https://crates.io/crates/cargo_metadata\">cargo_metadata</a> crate can be used to parse the\noutput.</p>\n<h2 id=\"json-messages\"><a class=\"header\" href=\"#json-messages\">JSON messages</a></h2>\n<p>When passing <code class=\"hljs\">--message-format=json</code>, Cargo will output the following\ninformation during the build:</p>\n<ul>\n<li>\n<p>compiler errors and warnings,</p>\n</li>\n<li>\n<p>produced artifacts,</p>\n</li>\n<li>\n<p>results of the build scripts (for example, native dependencies).</p>\n</li>\n</ul>\n<p>The output goes to stdout in the JSON object per line format. The <code class=\"hljs\">reason</code> field\ndistinguishes different kinds of messages.\nThe <code class=\"hljs\">package_id</code> field is a unique identifier for referring to the package, and\nas the <code class=\"hljs\">--package</code> argument to many commands. The syntax grammar can be found in\nchapter <a href=\"reference/./pkgid-spec.html\">Package ID Specifications</a>.</p>\n<p>The <code class=\"hljs\">--message-format</code> option can also take additional formatting values which\nalter the way the JSON messages are computed and rendered. See the description\nof the <code class=\"hljs\">--message-format</code> option in the <a href=\"reference/../commands/cargo-build.html\">build command documentation</a> for more\ndetails.</p>\n<p>If you are using Rust, the <a href=\"https://crates.io/crates/cargo_metadata\">cargo_metadata</a> crate can be used to parse these\nmessages.</p>\n<h3 id=\"compiler-messages\"><a class=\"header\" href=\"#compiler-messages\">Compiler messages</a></h3>\n<p>The “compiler-message” message includes output from the compiler, such as\nwarnings and errors. See the <a href=\"reference/../../rustc/json.html\">rustc JSON chapter</a> for\ndetails on <code class=\"hljs\">rustc</code>’s message format, which is embedded in the following\nstructure:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">/* The \"reason\" indicates the kind of message. */</span>\n    <span class=\"hljs-string\">\"reason\"</span>: <span class=\"hljs-string\">\"compiler-message\"</span>,\n    <span class=\"hljs-comment\">/* The Package ID, a unique identifier for referring to the package. */</span>\n    <span class=\"hljs-string\">\"package_id\"</span>: <span class=\"hljs-string\">\"file:///path/to/my-package#0.1.0\"</span>,\n    <span class=\"hljs-comment\">/* Absolute path to the package manifest. */</span>\n    <span class=\"hljs-string\">\"manifest_path\"</span>: <span class=\"hljs-string\">\"/path/to/my-package/Cargo.toml\"</span>,\n    <span class=\"hljs-comment\">/* The Cargo target (lib, bin, example, etc.) that generated the message. */</span>\n    <span class=\"hljs-string\">\"target\"</span>: {\n        <span class=\"hljs-comment\">/* Array of target kinds.\n           - lib targets list the `crate-type` values from the\n             manifest such as \"lib\", \"rlib\", \"dylib\",\n             \"proc-macro\", etc. (default [\"lib\"])\n           - binary is [\"bin\"]\n           - example is [\"example\"]\n           - integration test is [\"test\"]\n           - benchmark is [\"bench\"]\n           - build script is [\"custom-build\"]\n        */</span>\n        <span class=\"hljs-string\">\"kind\"</span>: [\n            <span class=\"hljs-string\">\"lib\"</span>\n        ],\n        <span class=\"hljs-comment\">/* Array of crate types.\n           - lib and example libraries list the `crate-type` values\n             from the manifest such as \"lib\", \"rlib\", \"dylib\",\n             \"proc-macro\", etc. (default [\"lib\"])\n           - all other target kinds are [\"bin\"]\n        */</span>\n        <span class=\"hljs-string\">\"crate_types\"</span>: [\n            <span class=\"hljs-string\">\"lib\"</span>\n        ],\n        <span class=\"hljs-comment\">/* The name of the target.\n           For lib targets, dashes will be replaced with underscores.\n        */</span>\n        <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"my_package\"</span>,\n        <span class=\"hljs-comment\">/* Absolute path to the root source file of the target. */</span>\n        <span class=\"hljs-string\">\"src_path\"</span>: <span class=\"hljs-string\">\"/path/to/my-package/src/lib.rs\"</span>,\n        <span class=\"hljs-comment\">/* The Rust edition of the target.\n           Defaults to the package edition.\n        */</span>\n        <span class=\"hljs-string\">\"edition\"</span>: <span class=\"hljs-string\">\"2018\"</span>,\n        <span class=\"hljs-comment\">/* Array of required features.\n           This property is not included if no required features are set.\n        */</span>\n        <span class=\"hljs-string\">\"required-features\"</span>: [<span class=\"hljs-string\">\"feat1\"</span>],\n        <span class=\"hljs-comment\">/* Whether the target should be documented by `cargo doc`. */</span>\n        <span class=\"hljs-string\">\"doc\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">/* Whether or not this target has doc tests enabled, and\n           the target is compatible with doc testing.\n        */</span>\n        <span class=\"hljs-string\">\"doctest\"</span>: <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-comment\">/* Whether or not this target should be built and run with `--test`\n        */</span>\n        <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-literal\">true</span>\n    },\n    <span class=\"hljs-comment\">/* The message emitted by the compiler.\n\n    See https://doc.rust-lang.org/rustc/json.html for details.\n    */</span>\n    <span class=\"hljs-string\">\"message\"</span>: {\n        <span class=\"hljs-comment\">/* ... */</span>\n    }\n}\n</code></pre>\n<h3 id=\"artifact-messages\"><a class=\"header\" href=\"#artifact-messages\">Artifact messages</a></h3>\n<p>For every compilation step, a “compiler-artifact” message is emitted with the\nfollowing structure:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">/* The \"reason\" indicates the kind of message. */</span>\n    <span class=\"hljs-string\">\"reason\"</span>: <span class=\"hljs-string\">\"compiler-artifact\"</span>,\n    <span class=\"hljs-comment\">/* The Package ID, a unique identifier for referring to the package. */</span>\n    <span class=\"hljs-string\">\"package_id\"</span>: <span class=\"hljs-string\">\"file:///path/to/my-package#0.1.0\"</span>,\n    <span class=\"hljs-comment\">/* Absolute path to the package manifest. */</span>\n    <span class=\"hljs-string\">\"manifest_path\"</span>: <span class=\"hljs-string\">\"/path/to/my-package/Cargo.toml\"</span>,\n    <span class=\"hljs-comment\">/* The Cargo target (lib, bin, example, etc.) that generated the artifacts.\n       See the definition above for `compiler-message` for details.\n    */</span>\n    <span class=\"hljs-string\">\"target\"</span>: {\n        <span class=\"hljs-string\">\"kind\"</span>: [\n            <span class=\"hljs-string\">\"lib\"</span>\n        ],\n        <span class=\"hljs-string\">\"crate_types\"</span>: [\n            <span class=\"hljs-string\">\"lib\"</span>\n        ],\n        <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"my_package\"</span>,\n        <span class=\"hljs-string\">\"src_path\"</span>: <span class=\"hljs-string\">\"/path/to/my-package/src/lib.rs\"</span>,\n        <span class=\"hljs-string\">\"edition\"</span>: <span class=\"hljs-string\">\"2018\"</span>,\n        <span class=\"hljs-string\">\"doc\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-string\">\"doctest\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-literal\">true</span>\n    },\n    <span class=\"hljs-comment\">/* The profile indicates which compiler settings were used. */</span>\n    <span class=\"hljs-string\">\"profile\"</span>: {\n        <span class=\"hljs-comment\">/* The optimization level. */</span>\n        <span class=\"hljs-string\">\"opt_level\"</span>: <span class=\"hljs-string\">\"0\"</span>,\n        <span class=\"hljs-comment\">/* The debug level, an integer of 0, 1, or 2, or a string\n           \"line-directives-only\" or \"line-tables-only\". If `null`, it implies\n           rustc's default of 0.\n        */</span>\n        <span class=\"hljs-string\">\"debuginfo\"</span>: <span class=\"hljs-number\">2</span>,\n        <span class=\"hljs-comment\">/* Whether or not debug assertions are enabled. */</span>\n        <span class=\"hljs-string\">\"debug_assertions\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">/* Whether or not overflow checks are enabled. */</span>\n        <span class=\"hljs-string\">\"overflow_checks\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">/* Whether or not the `--test` flag is used. */</span>\n        <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-literal\">false</span>\n    },\n    <span class=\"hljs-comment\">/* Array of features enabled. */</span>\n    <span class=\"hljs-string\">\"features\"</span>: [<span class=\"hljs-string\">\"feat1\"</span>, <span class=\"hljs-string\">\"feat2\"</span>],\n    <span class=\"hljs-comment\">/* Array of files generated by this step. */</span>\n    <span class=\"hljs-string\">\"filenames\"</span>: [\n        <span class=\"hljs-string\">\"/path/to/my-package/target/debug/libmy_package.rlib\"</span>,\n        <span class=\"hljs-string\">\"/path/to/my-package/target/debug/deps/libmy_package-be9f3faac0a26ef0.rmeta\"</span>\n    ],\n    <span class=\"hljs-comment\">/* A string of the path to the executable that was created, or null if\n       this step did not generate an executable.\n    */</span>\n    <span class=\"hljs-string\">\"executable\"</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">/* Whether or not this step was actually executed.\n       When `true`, this means that the pre-existing artifacts were\n       up-to-date, and `rustc` was not executed. When `false`, this means that\n       `rustc` was run to generate the artifacts.\n    */</span>\n    <span class=\"hljs-string\">\"fresh\"</span>: <span class=\"hljs-literal\">true</span>\n}\n\n</code></pre>\n<h3 id=\"build-script-output\"><a class=\"header\" href=\"#build-script-output\">Build script output</a></h3>\n<p>The “build-script-executed” message includes the parsed output of a build\nscript. Note that this is emitted even if the build script is not run; it will\ndisplay the previously cached value. More details about build script output\nmay be found in <a href=\"reference/build-scripts.html\">the chapter on build scripts</a>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">/* The \"reason\" indicates the kind of message. */</span>\n    <span class=\"hljs-string\">\"reason\"</span>: <span class=\"hljs-string\">\"build-script-executed\"</span>,\n    <span class=\"hljs-comment\">/* The Package ID, a unique identifier for referring to the package. */</span>\n    <span class=\"hljs-string\">\"package_id\"</span>: <span class=\"hljs-string\">\"file:///path/to/my-package#0.1.0\"</span>,\n    <span class=\"hljs-comment\">/* Array of libraries to link, as indicated by the `cargo::rustc-link-lib`\n       instruction. Note that this may include a \"KIND=\" prefix in the string\n       where KIND is the library kind.\n    */</span>\n    <span class=\"hljs-string\">\"linked_libs\"</span>: [<span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-string\">\"static=bar\"</span>],\n    <span class=\"hljs-comment\">/* Array of paths to include in the library search path, as indicated by\n       the `cargo::rustc-link-search` instruction. Note that this may include a\n       \"KIND=\" prefix in the string where KIND is the library kind.\n    */</span>\n    <span class=\"hljs-string\">\"linked_paths\"</span>: [<span class=\"hljs-string\">\"/some/path\"</span>, <span class=\"hljs-string\">\"native=/another/path\"</span>],\n    <span class=\"hljs-comment\">/* Array of cfg values to enable, as indicated by the `cargo::rustc-cfg`\n       instruction.\n    */</span>\n    <span class=\"hljs-string\">\"cfgs\"</span>: [<span class=\"hljs-string\">\"cfg1\"</span>, <span class=\"hljs-string\">\"cfg2=\\\"string\\\"\"</span>],\n    <span class=\"hljs-comment\">/* Array of [KEY, VALUE] arrays of environment variables to set, as\n       indicated by the `cargo::rustc-env` instruction.\n    */</span>\n    <span class=\"hljs-string\">\"env\"</span>: [\n        [<span class=\"hljs-string\">\"SOME_KEY\"</span>, <span class=\"hljs-string\">\"some value\"</span>],\n        [<span class=\"hljs-string\">\"ANOTHER_KEY\"</span>, <span class=\"hljs-string\">\"another value\"</span>]\n    ],\n    <span class=\"hljs-comment\">/* An absolute path which is used as a value of `OUT_DIR` environmental\n       variable when compiling current package.\n    */</span>\n    <span class=\"hljs-string\">\"out_dir\"</span>: <span class=\"hljs-string\">\"/some/path/in/target/dir\"</span>\n}\n</code></pre>\n<h3 id=\"build-finished\"><a class=\"header\" href=\"#build-finished\">Build finished</a></h3>\n<p>The “build-finished” message is emitted at the end of the build.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">/* The \"reason\" indicates the kind of message. */</span>\n    <span class=\"hljs-string\">\"reason\"</span>: <span class=\"hljs-string\">\"build-finished\"</span>,\n    <span class=\"hljs-comment\">/* Whether or not the build finished successfully. */</span>\n    <span class=\"hljs-string\">\"success\"</span>: <span class=\"hljs-literal\">true</span>,\n}\n</code></pre>\n<p>This message can be helpful for tools to know when to stop reading JSON\nmessages. Commands such as <code class=\"hljs\">cargo test</code> or <code class=\"hljs\">cargo run</code> can produce additional\noutput after the build has finished. This message lets a tool know that Cargo\nwill not produce additional JSON messages, but there may be additional output\nthat may be generated afterwards (such as the output generated by the program\nexecuted by <code class=\"hljs\">cargo run</code>).</p>\n<blockquote>\n<p>Note: There is experimental nightly-only support for JSON output for tests,\nso additional test-specific JSON messages may begin arriving after the\n“build-finished” message if that is enabled.</p>\n</blockquote>\n<h2 id=\"custom-subcommands\"><a class=\"header\" href=\"#custom-subcommands\">Custom subcommands</a></h2>\n<p>Cargo is designed to be extensible with new subcommands without having to modify\nCargo itself. This is achieved by translating a cargo invocation of the form\ncargo <code class=\"hljs\">(?&lt;command&gt;[^ ]+)</code> into an invocation of an external tool\n<code class=\"hljs\">cargo-${command}</code>. The external tool must be present in one of the user’s\n<code class=\"hljs\">$PATH</code> directories.</p>\n<blockquote>\n<p><strong>Note</strong>: Cargo defaults to prioritizing external tools in <code class=\"hljs\">$CARGO_HOME/bin</code>\nover <code class=\"hljs\">$PATH</code>. Users can override this precedence by adding <code class=\"hljs\">$CARGO_HOME/bin</code>\nto <code class=\"hljs\">$PATH</code>.</p>\n</blockquote>\n<p>When Cargo invokes a custom subcommand, the first argument to the subcommand\nwill be the filename of the custom subcommand, as usual. The second argument\nwill be the subcommand name itself. For example, the second argument would be\n<code class=\"hljs\">${command}</code> when invoking <code class=\"hljs\">cargo-${command}</code>. Any additional arguments on the\ncommand line will be forwarded unchanged.</p>\n<p>Cargo can also display the help output of a custom subcommand with <code class=\"hljs\">cargo help ${command}</code>. Cargo assumes that the subcommand will print a help message if its\nthird argument is <code class=\"hljs\">--help</code>. So, <code class=\"hljs\">cargo help ${command}</code> would invoke\n<code class=\"hljs\">cargo-${command} ${command} --help</code>.</p>\n<p>Custom subcommands may use the <code class=\"hljs\">CARGO</code> environment variable to call back to\nCargo. Alternatively, it can link to <code class=\"hljs\">cargo</code> crate as a library, but this\napproach has drawbacks:</p>\n<ul>\n<li>Cargo as a library is unstable: the  API may change without deprecation</li>\n<li>versions of the linked Cargo library may be different from the Cargo binary</li>\n</ul>\n<p>Instead, it is encouraged to use the CLI interface to drive Cargo. The <a href=\"reference/../commands/cargo-metadata.html\"><code class=\"hljs\">cargo metadata</code></a> command can be used to obtain information about the current project\n(the <a href=\"https://crates.io/crates/cargo_metadata\"><code class=\"hljs\">cargo_metadata</code></a> crate provides a Rust interface to this command).</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"registries-1\"><a class=\"header\" href=\"#registries-1\">Registries</a></h1>\n<p>Cargo installs crates and fetches dependencies from a “registry”. The default\nregistry is <a href=\"https://crates.io/\">crates.io</a>. A registry contains an “index” which contains a\nsearchable list of available crates. A registry may also provide a web API to\nsupport publishing new crates directly from Cargo.</p>\n<blockquote>\n<p>Note: If you are interested in mirroring or vendoring an existing registry,\ntake a look at <a href=\"reference/source-replacement.html\">Source Replacement</a>.</p>\n</blockquote>\n<p>If you are implementing a registry server, see <a href=\"reference/running-a-registry.html\">Running a Registry</a> for more\ndetails about the protocol between Cargo and a registry.</p>\n<p>If you’re using a registry that requires authentication, see <a href=\"reference/registry-authentication.html\">Registry Authentication</a>.\nIf you are implementing a credential provider, see <a href=\"reference/credential-provider-protocol.html\">Credential Provider Protocol</a>\nfor details.</p>\n<h2 id=\"using-an-alternate-registry\"><a class=\"header\" href=\"#using-an-alternate-registry\">Using an Alternate Registry</a></h2>\n<p>To use a registry other than <a href=\"https://crates.io/\">crates.io</a>, the name and index URL of the\nregistry must be added to a <a href=\"reference/config.html\"><code class=\"hljs\">.cargo/config.toml</code> file</a>. The <code class=\"hljs\">registries</code>\ntable has a key for each registry, for example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[registries]</span>\n<span class=\"hljs-attr\">my-registry</span> = { index = <span class=\"hljs-string\">\"https://my-intranet:8080/git/index\"</span> }\n</code></pre>\n<p>The <code class=\"hljs\">index</code> key should be a URL to a git repository with the registry’s index or a\nCargo sparse registry URL with the <code class=\"hljs\">sparse+</code> prefix.</p>\n<p>A crate can then depend on a crate from another registry by specifying the\n<code class=\"hljs\">registry</code> key and a value of the registry’s name in that dependency’s entry\nin <code class=\"hljs\">Cargo.toml</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Sample Cargo.toml</span>\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-project\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2021\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">other-crate</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, registry = <span class=\"hljs-string\">\"my-registry\"</span> }\n</code></pre>\n<p>As with most config values, the index may be specified with an environment\nvariable instead of a config file. For example, setting the following\nenvironment variable will accomplish the same thing as defining a config file:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-ignore hljs\">CARGO_REGISTRIES_MY_REGISTRY_INDEX=https://my-intranet:8080/git/index\n</code></pre>\n<blockquote>\n<p>Note: <a href=\"https://crates.io/\">crates.io</a> does not accept packages that depend on crates from other\nregistries.</p>\n</blockquote>\n<h2 id=\"publishing-to-an-alternate-registry\"><a class=\"header\" href=\"#publishing-to-an-alternate-registry\">Publishing to an Alternate Registry</a></h2>\n<p>If the registry supports web API access, then packages can be published\ndirectly to the registry from Cargo. Several of Cargo’s commands such as\n<a href=\"reference/../commands/cargo-publish.html\"><code class=\"hljs\">cargo publish</code></a> take a <code class=\"hljs\">--registry</code> command-line flag to indicate which\nregistry to use. For example, to publish the package in the current directory:</p>\n<ol>\n<li>\n<p><code class=\"hljs\">cargo login --registry=my-registry</code></p>\n<p>This only needs to be done once. You must enter the secret API token\nretrieved from the registry’s website. Alternatively the token may be\npassed directly to the <code class=\"hljs\">publish</code> command with the <code class=\"hljs\">--token</code> command-line\nflag or an environment variable with the name of the registry such as\n<code class=\"hljs\">CARGO_REGISTRIES_MY_REGISTRY_TOKEN</code>.</p>\n</li>\n<li>\n<p><code class=\"hljs\">cargo publish --registry=my-registry</code></p>\n</li>\n</ol>\n<p>Instead of always passing the <code class=\"hljs\">--registry</code> command-line option, the default\nregistry may be set in <a href=\"reference/config.html\"><code class=\"hljs\">.cargo/config.toml</code></a> with the <code class=\"hljs\">registry.default</code>\nkey. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[registry]</span>\n<span class=\"hljs-attr\">default</span> = <span class=\"hljs-string\">\"my-registry\"</span>\n</code></pre>\n<p>Setting the <code class=\"hljs\">package.publish</code> key in the <code class=\"hljs\">Cargo.toml</code> manifest restricts which\nregistries the package is allowed to be published to. This is useful to\nprevent accidentally publishing a closed-source package to <a href=\"https://crates.io/\">crates.io</a>. The\nvalue may be a list of registry names, for example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">publish</span> = [<span class=\"hljs-string\">\"my-registry\"</span>]\n</code></pre>\n<p>The <code class=\"hljs\">publish</code> value may also be <code class=\"hljs\">false</code> to restrict all publishing, which is\nthe same as an empty list.</p>\n<p>The authentication information saved by <a href=\"reference/../commands/cargo-login.html\"><code class=\"hljs\">cargo login</code></a> is stored in the\n<code class=\"hljs\">credentials.toml</code> file in the Cargo home directory (default <code class=\"hljs\">$HOME/.cargo</code>). It\nhas a separate table for each registry, for example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[registries.my-registry]</span>\n<span class=\"hljs-attr\">token</span> = <span class=\"hljs-string\">\"854DvwSlUwEHtIo3kWy6x7UCPKHfzCmy\"</span>\n</code></pre>\n<h2 id=\"registry-protocols\"><a class=\"header\" href=\"#registry-protocols\">Registry Protocols</a></h2>\n<p>Cargo supports two remote registry protocols: <code class=\"hljs\">git</code> and <code class=\"hljs\">sparse</code>. If the registry\nindex URL starts with <code class=\"hljs\">sparse+</code>, Cargo uses the sparse protocol. Otherwise\nCargo uses the <code class=\"hljs\">git</code> protocol.</p>\n<p>The <code class=\"hljs\">git</code> protocol stores index metadata in a git repository and requires Cargo to clone\nthe entire repo.</p>\n<p>The <code class=\"hljs\">sparse</code> protocol fetches individual metadata files using plain HTTP requests.\nSince Cargo only downloads the metadata for relevant crates, the <code class=\"hljs\">sparse</code> protocol can\nsave significant time and bandwidth.</p>\n<p>The <a href=\"https://crates.io/\">crates.io</a> registry supports both protocols. The protocol for crates.io is\ncontrolled via the <a href=\"reference/config.html#registriescrates-ioprotocol\"><code class=\"hljs\">registries.crates-io.protocol</code></a> config key.</p>\n<script>\n(function() {\n    var fragments = {\n        \"#running-a-registry\": \"running-a-registry.html\",\n        \"#index-format\": \"registry-index.html\",\n        \"#web-api\": \"registry-web-api.html\",\n        \"#publish\": \"registry-web-api.html#publish\",\n        \"#yank\": \"registry-web-api.html#yank\",\n        \"#unyank\": \"registry-web-api.html#unyank\",\n        \"#owners\": \"registry-web-api.html#owners\",\n        \"#owners-list\": \"registry-web-api.html#owners-list\",\n        \"#owners-add\": \"registry-web-api.html#owners-add\",\n        \"#owners-remove\": \"registry-web-api.html#owners-remove\",\n        \"#search\": \"registry-web-api.html#search\",\n        \"#login\": \"registry-web-api.html#login\",\n    };\n    var target = fragments[window.location.hash];\n    if (target) {\n        var url = window.location.toString();\n        var base = url.substring(0, url.lastIndexOf('/'));\n        window.location.replace(base + \"/\" + target);\n    }\n})();\n</script>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"registry-authentication\"><a class=\"header\" href=\"#registry-authentication\">Registry Authentication</a></h1>\n<p>Cargo authenticates to registries with credential providers. These\ncredential providers are external executables or built-in providers that Cargo\nuses to store and retrieve credentials.</p>\n<p>Using alternative registries with authentication <em>requires</em> a credential provider to be configured\nto avoid unknowingly storing unencrypted credentials on disk. For historical reasons, public\n(non-authenticated) registries do not require credential provider configuration, and the <code class=\"hljs\">cargo:token</code>\nprovider is used if no providers are configured.</p>\n<p>Cargo also includes platform-specific providers that use the operating system to securely store\ntokens. The <code class=\"hljs\">cargo:token</code> provider is also included which stores credentials in unencrypted plain\ntext in the <a href=\"reference/config.html#credentials\">credentials</a> file.</p>\n<h2 id=\"recommended-configuration\"><a class=\"header\" href=\"#recommended-configuration\">Recommended configuration</a></h2>\n<p>It’s recommended to configure a global credential provider list in <code class=\"hljs\">$CARGO_HOME/config.toml</code>\nwhich defaults to:</p>\n<ul>\n<li>Windows: <code class=\"hljs\">%USERPROFILE%\\.cargo\\config.toml</code></li>\n<li>Unix: <code class=\"hljs\">~/.cargo/config.toml</code></li>\n</ul>\n<p>This recommended configuration uses the operating system provider, with a fallback to <code class=\"hljs\">cargo:token</code>\nto look in Cargo’s <a href=\"reference/config.html#credentials\">credentials</a> file or environment variables:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># ~/.cargo/config.toml</span>\n<span class=\"hljs-section\">[registry]</span>\n<span class=\"hljs-attr\">global-credential-providers</span> = [<span class=\"hljs-string\">\"cargo:token\"</span>, <span class=\"hljs-string\">\"cargo:libsecret\"</span>, <span class=\"hljs-string\">\"cargo:macos-keychain\"</span>, <span class=\"hljs-string\">\"cargo:wincred\"</span>]\n</code></pre>\n<p><em>Note that later entries have higher precedence.\nSee <a href=\"reference/config.html#registryglobal-credential-providers\"><code class=\"hljs\">registry.global-credential-providers</code></a>\nfor more details.</em></p>\n<p>Some private registries may also recommend a registry-specific credential-provider. Check your\nregistry’s documentation to see if this is the case.</p>\n<h2 id=\"built-in-providers\"><a class=\"header\" href=\"#built-in-providers\">Built-in providers</a></h2>\n<p>Cargo includes several built-in credential providers. The available built-in providers\nmay change in future Cargo releases (though there are currently no plans to do so).</p>\n<h3 id=\"cargotoken\"><a class=\"header\" href=\"#cargotoken\"><code>cargo:token</code></a></h3>\n<p>Uses Cargo’s <a href=\"reference/config.html#credentials\">credentials</a> file to store tokens unencrypted in plain text.\nWhen retrieving tokens, checks the <code class=\"hljs\">CARGO_REGISTRIES_&lt;NAME&gt;_TOKEN</code> environment variable.\nIf this credential provider is not listed, then the <code class=\"hljs\">*_TOKEN</code> environment variables will not work.</p>\n<h3 id=\"cargowincred\"><a class=\"header\" href=\"#cargowincred\"><code>cargo:wincred</code></a></h3>\n<p>Uses the Windows Credential Manager to store tokens.</p>\n<p>The credentials are stored as <code class=\"hljs\">cargo-registry:&lt;index-url&gt;</code> in the Credential Manager\nunder “Windows Credentials”.</p>\n<h3 id=\"cargomacos-keychain\"><a class=\"header\" href=\"#cargomacos-keychain\"><code>cargo:macos-keychain</code></a></h3>\n<p>Uses the macOS Keychain to store tokens.</p>\n<p>The Keychain Access app can be used to view stored tokens.</p>\n<h3 id=\"cargolibsecret\"><a class=\"header\" href=\"#cargolibsecret\"><code>cargo:libsecret</code></a></h3>\n<p>Uses <a href=\"https://wiki.gnome.org/Projects/Libsecret\">libsecret</a> to store tokens.</p>\n<p>Any password manager with libsecret support can be used to view stored tokens.\nThe following are a few examples (non-exhaustive):</p>\n<ul>\n<li><a href=\"https://wiki.gnome.org/Projects/GnomeKeyring\">GNOME Keyring</a></li>\n<li><a href=\"https://apps.kde.org/kwalletmanager5/\">KDE Wallet Manager</a> (since KDE Frameworks 5.97.0)</li>\n<li><a href=\"https://keepassxc.org/\">KeePassXC</a> (since 2.5.0)</li>\n</ul>\n<h3 id=\"cargotoken-from-stdout-command-args\"><a class=\"header\" href=\"#cargotoken-from-stdout-command-args\"><code>cargo:token-from-stdout &lt;command&gt; &lt;args&gt;</code></a></h3>\n<p>Launch a subprocess that returns a token on stdout. Newlines will be trimmed.</p>\n<ul>\n<li>The process inherits the user’s stdin and stderr.</li>\n<li>It should exit 0 on success, and nonzero on error.</li>\n<li><a href=\"reference/../commands/cargo-login.html\"><code class=\"hljs\">cargo login</code></a> and <a href=\"reference/../commands/cargo-logout.html\"><code class=\"hljs\">cargo logout</code></a> are not supported and return an error if used.</li>\n</ul>\n<p>The following environment variables will be provided to the executed command:</p>\n<ul>\n<li><code class=\"hljs\">CARGO</code> — Path to the <code class=\"hljs\">cargo</code> binary executing the command.</li>\n<li><code class=\"hljs\">CARGO_REGISTRY_INDEX_URL</code> — The URL of the registry index.</li>\n<li><code class=\"hljs\">CARGO_REGISTRY_NAME_OPT</code> — Optional name of the registry. Should not be used as a lookup key.</li>\n</ul>\n<p>Arguments will be passed on to the subcommand.</p>\n<h2 id=\"credential-plugins\"><a class=\"header\" href=\"#credential-plugins\">Credential plugins</a></h2>\n<p>For credential provider plugins that follow Cargo’s <a href=\"reference/credential-provider-protocol.html\">credential provider protocol</a>,\nthe configuration value should be a string with the path to the executable (or the executable name if on the <code class=\"hljs\">PATH</code>).</p>\n<p>For example, to install <a href=\"https://crates.io/crates/cargo-credential-1password\">cargo-credential-1password</a>\nfrom crates.io do the following:</p>\n<p>Install the provider with <code class=\"hljs\">cargo install cargo-credential-1password</code></p>\n<p>In the config, add to (or create) <code class=\"hljs\">registry.global-credential-providers</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[registry]</span>\n<span class=\"hljs-attr\">global-credential-providers</span> = [<span class=\"hljs-string\">\"cargo:token\"</span>, <span class=\"hljs-string\">\"cargo-credential-1password --account my.1password.com\"</span>]\n</code></pre>\n<p>The values in <code class=\"hljs\">global-credential-providers</code> are split on spaces into path and command-line arguments. To\ndefine a global credential provider where the path or arguments contain spaces, use\nthe <a href=\"reference/config.html#credential-alias\"><code class=\"hljs\">[credential-alias]</code> table</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"credential-provider-protocol\"><a class=\"header\" href=\"#credential-provider-protocol\">Credential Provider Protocol</a></h1>\n<p>This document describes information for building a Cargo credential provider. For information on\nsetting up or using a credential provider, see <a href=\"reference/registry-authentication.html\">Registry Authentication</a>.</p>\n<p>When using an external credential provider, Cargo communicates with the credential\nprovider using stdin/stdout messages passed as single lines of JSON.</p>\n<p>Cargo will always execute the credential provider with the <code class=\"hljs\">--cargo-plugin</code> argument.\nThis enables a credential provider executable to have additional functionality beyond\nwhat Cargo needs. Additional arguments are included in the JSON via the <code class=\"hljs\">args</code> field.</p>\n<h2 id=\"json-messages-1\"><a class=\"header\" href=\"#json-messages-1\">JSON messages</a></h2>\n<p>The JSON messages in this document have newlines added for readability.\nActual messages must not contain newlines.</p>\n<h3 id=\"credential-hello\"><a class=\"header\" href=\"#credential-hello\">Credential hello</a></h3>\n<ul>\n<li>Sent by: credential provider</li>\n<li>Purpose: used to identify the supported protocols on process startup</li>\n</ul>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-string\">\"v\"</span>:[<span class=\"hljs-number\">1</span>]\n}\n</code></pre>\n<p>Requests sent by Cargo will include a <code class=\"hljs\">v</code> field set to one of the versions listed here.\nIf Cargo does not support any of the versions offered by the credential provider, it will issue an\nerror and shut down the credential process.</p>\n<h3 id=\"registry-information\"><a class=\"header\" href=\"#registry-information\">Registry information</a></h3>\n<ul>\n<li>Sent by: Cargo\nNot a message by itself. Included in all messages sent by Cargo as the <code class=\"hljs\">registry</code> field.</li>\n</ul>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">// Index URL of the registry</span>\n    <span class=\"hljs-string\">\"index-url\"</span>:<span class=\"hljs-string\">\"https://github.com/rust-lang/crates.io-index\"</span>,\n    <span class=\"hljs-comment\">// Name of the registry in configuration (optional)</span>\n    <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"crates-io\"</span>,\n    <span class=\"hljs-comment\">// HTTP headers received from attempting to access an authenticated registry (optional)</span>\n    <span class=\"hljs-string\">\"headers\"</span>: [<span class=\"hljs-string\">\"WWW-Authenticate: cargo\"</span>]\n}\n</code></pre>\n<h3 id=\"login-request\"><a class=\"header\" href=\"#login-request\">Login request</a></h3>\n<ul>\n<li>Sent by: Cargo</li>\n<li>Purpose: collect and store credentials</li>\n</ul>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">// Protocol version</span>\n    <span class=\"hljs-string\">\"v\"</span>:<span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-comment\">// Action to perform: login</span>\n    <span class=\"hljs-string\">\"kind\"</span>:<span class=\"hljs-string\">\"login\"</span>,\n    <span class=\"hljs-comment\">// Registry information (see Registry information)</span>\n    <span class=\"hljs-string\">\"registry\"</span>:{<span class=\"hljs-string\">\"index-url\"</span>:<span class=\"hljs-string\">\"sparse+https://registry-url/index/\"</span>, <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"my-registry\"</span>},\n    <span class=\"hljs-comment\">// User-specified token from stdin or command line (optional)</span>\n    <span class=\"hljs-string\">\"token\"</span>: <span class=\"hljs-string\">\"&lt;the token value&gt;\"</span>,\n    <span class=\"hljs-comment\">// URL that the user could visit to get a token (optional)</span>\n    <span class=\"hljs-string\">\"login-url\"</span>: <span class=\"hljs-string\">\"http://registry-url/login\"</span>,\n    <span class=\"hljs-comment\">// Additional command-line args (optional)</span>\n    <span class=\"hljs-string\">\"args\"</span>:[]\n}\n</code></pre>\n<p>If the <code class=\"hljs\">token</code> field is set, then the credential provider should use the token provided. If\nthe <code class=\"hljs\">token</code> is not set, then the credential provider should prompt the user for a token.</p>\n<p>In addition to the arguments that may be passed to the credential provider in\nconfiguration, <code class=\"hljs\">cargo login</code> also supports passing additional command line args\nvia <code class=\"hljs\">cargo login -- &lt;additional args&gt;</code>. These additional arguments will be included\nin the <code class=\"hljs\">args</code> field after any args from Cargo configuration.</p>\n<h3 id=\"read-request\"><a class=\"header\" href=\"#read-request\">Read request</a></h3>\n<ul>\n<li>Sent by: Cargo</li>\n<li>Purpose: Get the credential for reading crate information</li>\n</ul>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">// Protocol version</span>\n    <span class=\"hljs-string\">\"v\"</span>:<span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-comment\">// Request kind: get credentials</span>\n    <span class=\"hljs-string\">\"kind\"</span>:<span class=\"hljs-string\">\"get\"</span>,\n    <span class=\"hljs-comment\">// Action to perform: read crate information</span>\n    <span class=\"hljs-string\">\"operation\"</span>:<span class=\"hljs-string\">\"read\"</span>,\n    <span class=\"hljs-comment\">// Registry information (see Registry information)</span>\n    <span class=\"hljs-string\">\"registry\"</span>:{<span class=\"hljs-string\">\"index-url\"</span>:<span class=\"hljs-string\">\"sparse+https://registry-url/index/\"</span>, <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"my-registry\"</span>},\n    <span class=\"hljs-comment\">// Additional command-line args (optional)</span>\n    <span class=\"hljs-string\">\"args\"</span>:[]\n}\n</code></pre>\n<h3 id=\"publish-request\"><a class=\"header\" href=\"#publish-request\">Publish request</a></h3>\n<ul>\n<li>Sent by: Cargo</li>\n<li>Purpose: Get the credential for publishing a crate</li>\n</ul>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">// Protocol version</span>\n    <span class=\"hljs-string\">\"v\"</span>:<span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-comment\">// Request kind: get credentials</span>\n    <span class=\"hljs-string\">\"kind\"</span>:<span class=\"hljs-string\">\"get\"</span>,\n    <span class=\"hljs-comment\">// Action to perform: publish crate</span>\n    <span class=\"hljs-string\">\"operation\"</span>:<span class=\"hljs-string\">\"publish\"</span>,\n    <span class=\"hljs-comment\">// Crate name</span>\n    <span class=\"hljs-string\">\"name\"</span>:<span class=\"hljs-string\">\"sample\"</span>,\n    <span class=\"hljs-comment\">// Crate version</span>\n    <span class=\"hljs-string\">\"vers\"</span>:<span class=\"hljs-string\">\"0.1.0\"</span>,\n    <span class=\"hljs-comment\">// Crate checksum</span>\n    <span class=\"hljs-string\">\"cksum\"</span>:<span class=\"hljs-string\">\"...\"</span>,\n    <span class=\"hljs-comment\">// Registry information (see Registry information)</span>\n    <span class=\"hljs-string\">\"registry\"</span>:{<span class=\"hljs-string\">\"index-url\"</span>:<span class=\"hljs-string\">\"sparse+https://registry-url/index/\"</span>, <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"my-registry\"</span>},\n    <span class=\"hljs-comment\">// Additional command-line args (optional)</span>\n    <span class=\"hljs-string\">\"args\"</span>:[]\n}\n</code></pre>\n<h3 id=\"get-success-response\"><a class=\"header\" href=\"#get-success-response\">Get success response</a></h3>\n<ul>\n<li>Sent by: credential provider</li>\n<li>Purpose: Gives the credential to Cargo</li>\n</ul>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{<span class=\"hljs-string\">\"Ok\"</span>:{\n    <span class=\"hljs-comment\">// Response kind: this was a get request</span>\n    <span class=\"hljs-string\">\"kind\"</span>:<span class=\"hljs-string\">\"get\"</span>,\n    <span class=\"hljs-comment\">// Token to send to the registry</span>\n    <span class=\"hljs-string\">\"token\"</span>:<span class=\"hljs-string\">\"...\"</span>,\n    <span class=\"hljs-comment\">// Cache control. Can be one of the following:</span>\n    <span class=\"hljs-comment\">// * \"never\": do not cache</span>\n    <span class=\"hljs-comment\">// * \"session\": cache for the current cargo session</span>\n    <span class=\"hljs-comment\">// * \"expires\": cache for the current cargo session until expiration</span>\n    <span class=\"hljs-string\">\"cache\"</span>:<span class=\"hljs-string\">\"expires\"</span>,\n    <span class=\"hljs-comment\">// Unix timestamp (only for \"cache\": \"expires\")</span>\n    <span class=\"hljs-string\">\"expiration\"</span>:<span class=\"hljs-number\">1693942857</span>,\n    <span class=\"hljs-comment\">// Is the token operation independent?</span>\n    <span class=\"hljs-string\">\"operation_independent\"</span>:<span class=\"hljs-literal\">true</span>\n}}\n</code></pre>\n<p>The <code class=\"hljs\">token</code> will be sent to the registry as the value of the <code class=\"hljs\">Authorization</code> HTTP header.</p>\n<p><code class=\"hljs\">operation_independent</code> indicates whether the token can be cached across different\noperations (such as publishing or fetching). In general, this should be <code class=\"hljs\">true</code> unless\nthe provider wants to generate tokens that are scoped to specific operations.</p>\n<h3 id=\"login-success-response\"><a class=\"header\" href=\"#login-success-response\">Login success response</a></h3>\n<ul>\n<li>Sent by: credential provider</li>\n<li>Purpose: Indicates the login was successful</li>\n</ul>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{<span class=\"hljs-string\">\"Ok\"</span>:{\n    <span class=\"hljs-comment\">// Response kind: this was a login request</span>\n    <span class=\"hljs-string\">\"kind\"</span>:<span class=\"hljs-string\">\"login\"</span>\n}}\n</code></pre>\n<h3 id=\"logout-success-response\"><a class=\"header\" href=\"#logout-success-response\">Logout success response</a></h3>\n<ul>\n<li>Sent by: credential provider</li>\n<li>Purpose: Indicates the logout was successful</li>\n</ul>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{<span class=\"hljs-string\">\"Ok\"</span>:{\n    <span class=\"hljs-comment\">// Response kind: this was a logout request</span>\n    <span class=\"hljs-string\">\"kind\"</span>:<span class=\"hljs-string\">\"logout\"</span>\n}}\n</code></pre>\n<h3 id=\"failure-response-url-not-supported\"><a class=\"header\" href=\"#failure-response-url-not-supported\">Failure response (URL not supported)</a></h3>\n<ul>\n<li>Sent by: credential provider</li>\n<li>Purpose: Gives error information to Cargo</li>\n</ul>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{<span class=\"hljs-string\">\"Err\"</span>:{\n    <span class=\"hljs-string\">\"kind\"</span>:<span class=\"hljs-string\">\"url-not-supported\"</span>\n}}\n</code></pre>\n<p>Sent if the credential provider is designed\nto only handle specific registry URLs and the given URL\nis not supported. Cargo will attempt another provider if\navailable.</p>\n<h3 id=\"failure-response-not-found\"><a class=\"header\" href=\"#failure-response-not-found\">Failure response (not found)</a></h3>\n<ul>\n<li>Sent by: credential provider</li>\n<li>Purpose: Gives error information to Cargo</li>\n</ul>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{<span class=\"hljs-string\">\"Err\"</span>:{\n    <span class=\"hljs-comment\">// Error: The credential could not be found in the provider.</span>\n    <span class=\"hljs-string\">\"kind\"</span>:<span class=\"hljs-string\">\"not-found\"</span>\n}}\n</code></pre>\n<p>Sent if the credential could not be found. This is expected for\n<code class=\"hljs\">get</code> requests where the credential is not available, or <code class=\"hljs\">logout</code>\nrequests where there is nothing found to erase.</p>\n<h3 id=\"failure-response-operation-not-supported\"><a class=\"header\" href=\"#failure-response-operation-not-supported\">Failure response (operation not supported)</a></h3>\n<ul>\n<li>Sent by: credential provider</li>\n<li>Purpose: Gives error information to Cargo</li>\n</ul>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{<span class=\"hljs-string\">\"Err\"</span>:{\n    <span class=\"hljs-comment\">// Error: The credential could not be found in the provider.</span>\n    <span class=\"hljs-string\">\"kind\"</span>:<span class=\"hljs-string\">\"operation-not-supported\"</span>\n}}\n</code></pre>\n<p>Sent if the credential provider does not support the requested operation.\nIf a provider only supports <code class=\"hljs\">get</code> and a <code class=\"hljs\">login</code> is requested, the\nprovider should respond with this error.</p>\n<h3 id=\"failure-response-other\"><a class=\"header\" href=\"#failure-response-other\">Failure response (other)</a></h3>\n<ul>\n<li>Sent by: credential provider</li>\n<li>Purpose: Gives error information to Cargo</li>\n</ul>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{<span class=\"hljs-string\">\"Err\"</span>:{\n    <span class=\"hljs-comment\">// Error: something else has failed</span>\n    <span class=\"hljs-string\">\"kind\"</span>:<span class=\"hljs-string\">\"other\"</span>,\n    <span class=\"hljs-comment\">// Error message string to be displayed</span>\n    <span class=\"hljs-string\">\"message\"</span>: <span class=\"hljs-string\">\"free form string error message\"</span>,\n    <span class=\"hljs-comment\">// Detailed cause chain for the error (optional)</span>\n    <span class=\"hljs-string\">\"caused-by\"</span>: [<span class=\"hljs-string\">\"cause 1\"</span>, <span class=\"hljs-string\">\"cause 2\"</span>]\n}}\n</code></pre>\n<h2 id=\"example-communication-to-request-a-token-for-reading\"><a class=\"header\" href=\"#example-communication-to-request-a-token-for-reading\">Example communication to request a token for reading:</a></h2>\n<ol>\n<li>Cargo spawns the credential process, capturing stdin and stdout.</li>\n<li>Credential process sends the Hello message to Cargo\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{ <span class=\"hljs-string\">\"v\"</span>: [<span class=\"hljs-number\">1</span>] }\n</code></pre>\n</li>\n<li>Cargo sends the CredentialRequest message to the credential process (newlines added for readability).\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-string\">\"v\"</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-string\">\"kind\"</span>: <span class=\"hljs-string\">\"get\"</span>,\n    <span class=\"hljs-string\">\"operation\"</span>: <span class=\"hljs-string\">\"read\"</span>,\n    <span class=\"hljs-string\">\"registry\"</span>:{<span class=\"hljs-string\">\"index-url\"</span>:<span class=\"hljs-string\">\"sparse+https://registry-url/index/\"</span>}\n}\n</code></pre>\n</li>\n<li>Credential process sends the CredentialResponse to Cargo (newlines added for readability).\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-string\">\"token\"</span>: <span class=\"hljs-string\">\"...\"</span>,\n    <span class=\"hljs-string\">\"cache\"</span>: <span class=\"hljs-string\">\"session\"</span>,\n    <span class=\"hljs-string\">\"operation_independent\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n</li>\n<li>Cargo closes the stdin pipe to the credential provider and it exits.</li>\n<li>Cargo uses the token for the remainder of the session (until Cargo exits) when interacting with this registry.</li>\n</ol>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"running-a-registry\"><a class=\"header\" href=\"#running-a-registry\">Running a Registry</a></h1>\n<p>A minimal registry can be implemented by having a git repository that contains\nan index, and a server that contains the compressed <code class=\"hljs\">.crate</code> files created by\n<a href=\"reference/../commands/cargo-package.html\"><code class=\"hljs\">cargo package</code></a>. Users won’t be able to use Cargo to publish to it, but this\nmay be sufficient for closed environments. The index format is described in\n<a href=\"reference/registry-index.html\">Registry Index</a>.</p>\n<p>A full-featured registry that supports publishing will additionally need to\nhave a web API service that conforms to the API used by Cargo. The web API is\ndescribed in <a href=\"reference/registry-web-api.html\">Registry Web API</a>.</p>\n<p>Commercial and community projects are available for building and running a\nregistry. See <a href=\"https://github.com/rust-lang/cargo/wiki/Third-party-registries\">https://github.com/rust-lang/cargo/wiki/Third-party-registries</a>\nfor a list of what is available.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"index-format\"><a class=\"header\" href=\"#index-format\">Index Format</a></h1>\n<p>The following defines the format of the index. New features are occasionally\nadded, which are only understood starting with the version of Cargo that\nintroduced them. Older versions of Cargo may not be able to use packages that\nmake use of new features. However, the format for older packages should not\nchange, so older versions of Cargo should be able to use them.</p>\n<h2 id=\"index-configuration\"><a class=\"header\" href=\"#index-configuration\">Index Configuration</a></h2>\n<p>The root of the index contains a file named <code class=\"hljs\">config.json</code> which contains JSON\ninformation used by Cargo for accessing the registry. This is an example of\nwhat the <a href=\"https://crates.io/\">crates.io</a> config file looks like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-string\">\"dl\"</span>: <span class=\"hljs-string\">\"https://crates.io/api/v1/crates\"</span>,\n    <span class=\"hljs-string\">\"api\"</span>: <span class=\"hljs-string\">\"https://crates.io\"</span>\n}\n</code></pre>\n<p>The keys are:</p>\n<ul>\n<li>\n<p><code class=\"hljs\">dl</code>: This is the URL for downloading crates listed in the index. The value\nmay have the following markers which will be replaced with their\ncorresponding value:</p>\n<ul>\n<li><code class=\"hljs\">{crate}</code>: The name of crate.</li>\n<li><code class=\"hljs\">{version}</code>: The crate version.</li>\n<li><code class=\"hljs\">{prefix}</code>: A directory prefix computed from the crate name. For example,\na crate named <code class=\"hljs\">cargo</code> has a prefix of <code class=\"hljs\">ca/rg</code>. See below for details.</li>\n<li><code class=\"hljs\">{lowerprefix}</code>: Lowercase variant of <code class=\"hljs\">{prefix}</code>.</li>\n<li><code class=\"hljs\">{sha256-checksum}</code>: The crate’s sha256 checksum.</li>\n</ul>\n<p>If none of the markers are present, then the value\n<code class=\"hljs\">/{crate}/{version}/download</code> is appended to the end.</p>\n</li>\n<li>\n<p><code class=\"hljs\">api</code>: This is the base URL for the web API. This key is optional, but if it\nis not specified, commands such as <a href=\"reference/../commands/cargo-publish.html\"><code class=\"hljs\">cargo publish</code></a> will not work. The web\nAPI is described below.</p>\n</li>\n<li>\n<p><code class=\"hljs\">auth-required</code>: indicates whether this is a private registry that requires\nall operations to be authenticated including API requests, crate downloads\nand sparse index updates.</p>\n</li>\n</ul>\n<h2 id=\"download-endpoint\"><a class=\"header\" href=\"#download-endpoint\">Download Endpoint</a></h2>\n<p>The download endpoint should send the <code class=\"hljs\">.crate</code> file for the requested package.\nCargo supports https, http, and file URLs, HTTP redirects, HTTP1 and HTTP2.\nThe exact specifics of TLS support depend on the platform that Cargo is\nrunning on, the version of Cargo, and how it was compiled.</p>\n<p>If <code class=\"hljs\">auth-required: true</code> is set in <code class=\"hljs\">config.json</code>, the <code class=\"hljs\">Authorization</code> header\nwill be included with http(s) download requests.</p>\n<h2 id=\"index-files\"><a class=\"header\" href=\"#index-files\">Index files</a></h2>\n<p>The rest of the index repository contains one file for each package, where the\nfilename is the name of the package in lowercase. Each version of the package\nhas a separate line in the file. The files are organized in a tier of\ndirectories:</p>\n<ul>\n<li>Packages with 1 character names are placed in a directory named <code class=\"hljs\">1</code>.</li>\n<li>Packages with 2 character names are placed in a directory named <code class=\"hljs\">2</code>.</li>\n<li>Packages with 3 character names are placed in the directory\n<code class=\"hljs\">3/{first-character}</code> where <code class=\"hljs\">{first-character}</code> is the first character of\nthe package name.</li>\n<li>All other packages are stored in directories named\n<code class=\"hljs\">{first-two}/{second-two}</code> where the top directory is the first two\ncharacters of the package name, and the next subdirectory is the third and\nfourth characters of the package name. For example, <code class=\"hljs\">cargo</code> would be stored\nin a file named <code class=\"hljs\">ca/rg/cargo</code>.</li>\n</ul>\n<blockquote>\n<p>Note: Although the index filenames are in lowercase, the fields that contain\npackage names in <code class=\"hljs\">Cargo.toml</code> and the index JSON data are case-sensitive and\nmay contain upper and lower case characters.</p>\n</blockquote>\n<p>The directory name above is calculated based on the package name converted to\nlowercase; it is represented by the marker <code class=\"hljs\">{lowerprefix}</code>.  When the original\npackage name is used without case conversion, the resulting directory name is\nrepresented by the marker <code class=\"hljs\">{prefix}</code>.  For example, the package <code class=\"hljs\">MyCrate</code> would\nhave a <code class=\"hljs\">{prefix}</code> of <code class=\"hljs\">My/Cr</code> and a <code class=\"hljs\">{lowerprefix}</code> of <code class=\"hljs\">my/cr</code>.  In general,\nusing <code class=\"hljs\">{prefix}</code> is recommended over <code class=\"hljs\">{lowerprefix}</code>, but there are pros and\ncons to each choice.  Using <code class=\"hljs\">{prefix}</code> on case-insensitive filesystems results\nin (harmless-but-inelegant) directory aliasing.  For example, <code class=\"hljs\">crate</code> and\n<code class=\"hljs\">CrateTwo</code> have <code class=\"hljs\">{prefix}</code> values of <code class=\"hljs\">cr/at</code> and <code class=\"hljs\">Cr/at</code>; these are distinct on\nUnix machines but alias to the same directory on Windows.  Using directories\nwith normalized case avoids aliasing, but on case-sensitive filesystems it’s\nharder to support older versions of Cargo that lack <code class=\"hljs\">{prefix}</code>/<code class=\"hljs\">{lowerprefix}</code>.\nFor example, nginx rewrite rules can easily construct <code class=\"hljs\">{prefix}</code> but can’t\nperform case-conversion to construct <code class=\"hljs\">{lowerprefix}</code>.</p>\n<h2 id=\"name-restrictions\"><a class=\"header\" href=\"#name-restrictions\">Name restrictions</a></h2>\n<p>Registries should consider enforcing limitations on package names added to\ntheir index. Cargo itself allows names with any <a href=\"reference/../../std/primitive.char.html#method.is_alphanumeric\">alphanumeric</a>, <code class=\"hljs\">-</code>, or <code class=\"hljs\">_</code>\ncharacters. <a href=\"https://crates.io/\">crates.io</a> imposes its own limitations, including the following:</p>\n<ul>\n<li>Only allows ASCII characters.</li>\n<li>Only alphanumeric, <code class=\"hljs\">-</code>, and <code class=\"hljs\">_</code> characters.</li>\n<li>First character must be alphabetic.</li>\n<li>Case-insensitive collision detection.</li>\n<li>Prevent differences of <code class=\"hljs\">-</code> vs <code class=\"hljs\">_</code>.</li>\n<li>Under a specific length (max 64).</li>\n<li>Rejects reserved names, such as Windows special filenames like “nul”.</li>\n</ul>\n<p>Registries should consider incorporating similar restrictions, and consider\nthe security implications, such as <a href=\"https://en.wikipedia.org/wiki/IDN_homograph_attack\">IDN homograph\nattacks</a> and other\nconcerns in <a href=\"https://www.unicode.org/reports/tr36/\">UTR36</a> and\n<a href=\"https://www.unicode.org/reports/tr39/\">UTS39</a>.</p>\n<h2 id=\"version-uniqueness\"><a class=\"header\" href=\"#version-uniqueness\">Version uniqueness</a></h2>\n<p>Indexes <em>must</em> ensure that each version only appears once for each package.\nThis includes ignoring SemVer build metadata.\nFor example, the index must <em>not</em> contain two entries with a version <code class=\"hljs\">1.0.7</code> and <code class=\"hljs\">1.0.7+extra</code>.</p>\n<h2 id=\"json-schema\"><a class=\"header\" href=\"#json-schema\">JSON schema</a></h2>\n<p>Each line in a package file contains a JSON object that describes a published\nversion of the package. The following is a pretty-printed example with comments\nexplaining the format of the entry.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">// The name of the package.</span>\n    <span class=\"hljs-comment\">// This must only contain alphanumeric, `-`, or `_` characters.</span>\n    <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"foo\"</span>,\n    <span class=\"hljs-comment\">// The version of the package this row is describing.</span>\n    <span class=\"hljs-comment\">// This must be a valid version number according to the Semantic</span>\n    <span class=\"hljs-comment\">// Versioning 2.0.0 spec at https://semver.org/.</span>\n    <span class=\"hljs-string\">\"vers\"</span>: <span class=\"hljs-string\">\"0.1.0\"</span>,\n    <span class=\"hljs-comment\">// Array of direct dependencies of the package.</span>\n    <span class=\"hljs-string\">\"deps\"</span>: [\n        {\n            <span class=\"hljs-comment\">// Name of the dependency.</span>\n            <span class=\"hljs-comment\">// If the dependency is renamed from the original package name,</span>\n            <span class=\"hljs-comment\">// this is the new name. The original package name is stored in</span>\n            <span class=\"hljs-comment\">// the `package` field.</span>\n            <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"rand\"</span>,\n            <span class=\"hljs-comment\">// The SemVer requirement for this dependency.</span>\n            <span class=\"hljs-comment\">// This must be a valid version requirement defined at</span>\n            <span class=\"hljs-comment\">// https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html.</span>\n            <span class=\"hljs-string\">\"req\"</span>: <span class=\"hljs-string\">\"^0.6\"</span>,\n            <span class=\"hljs-comment\">// Array of features (as strings) enabled for this dependency.</span>\n            <span class=\"hljs-string\">\"features\"</span>: [<span class=\"hljs-string\">\"i128_support\"</span>],\n            <span class=\"hljs-comment\">// Boolean of whether or not this is an optional dependency.</span>\n            <span class=\"hljs-string\">\"optional\"</span>: <span class=\"hljs-literal\">false</span>,\n            <span class=\"hljs-comment\">// Boolean of whether or not default features are enabled.</span>\n            <span class=\"hljs-string\">\"default_features\"</span>: <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-comment\">// The target platform for the dependency.</span>\n            <span class=\"hljs-comment\">// null if not a target dependency.</span>\n            <span class=\"hljs-comment\">// Otherwise, a string such as \"cfg(windows)\".</span>\n            <span class=\"hljs-string\">\"target\"</span>: <span class=\"hljs-literal\">null</span>,\n            <span class=\"hljs-comment\">// The dependency kind.</span>\n            <span class=\"hljs-comment\">// \"dev\", \"build\", or \"normal\".</span>\n            <span class=\"hljs-comment\">// Note: this is a required field, but a small number of entries</span>\n            <span class=\"hljs-comment\">// exist in the crates.io index with either a missing or null</span>\n            <span class=\"hljs-comment\">// `kind` field due to implementation bugs.</span>\n            <span class=\"hljs-string\">\"kind\"</span>: <span class=\"hljs-string\">\"normal\"</span>,\n            <span class=\"hljs-comment\">// The URL of the index of the registry where this dependency is</span>\n            <span class=\"hljs-comment\">// from as a string. If not specified or null, it is assumed the</span>\n            <span class=\"hljs-comment\">// dependency is in the current registry.</span>\n            <span class=\"hljs-string\">\"registry\"</span>: <span class=\"hljs-literal\">null</span>,\n            <span class=\"hljs-comment\">// If the dependency is renamed, this is a string of the actual</span>\n            <span class=\"hljs-comment\">// package name. If not specified or null, this dependency is not</span>\n            <span class=\"hljs-comment\">// renamed.</span>\n            <span class=\"hljs-string\">\"package\"</span>: <span class=\"hljs-literal\">null</span>,\n        }\n    ],\n    <span class=\"hljs-comment\">// A SHA256 checksum of the `.crate` file.</span>\n    <span class=\"hljs-string\">\"cksum\"</span>: <span class=\"hljs-string\">\"d867001db0e2b6e0496f9fac96930e2d42233ecd3ca0413e0753d4c7695d289c\"</span>,\n    <span class=\"hljs-comment\">// Set of features defined for the package.</span>\n    <span class=\"hljs-comment\">// Each feature maps to an array of features or dependencies it enables.</span>\n    <span class=\"hljs-string\">\"features\"</span>: {\n        <span class=\"hljs-string\">\"extras\"</span>: [<span class=\"hljs-string\">\"rand/simd_support\"</span>]\n    },\n    <span class=\"hljs-comment\">// Boolean of whether or not this version has been yanked.</span>\n    <span class=\"hljs-string\">\"yanked\"</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-comment\">// The `links` string value from the package's manifest, or null if not</span>\n    <span class=\"hljs-comment\">// specified. This field is optional and defaults to null.</span>\n    <span class=\"hljs-string\">\"links\"</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// An unsigned 32-bit integer value indicating the schema version of this</span>\n    <span class=\"hljs-comment\">// entry.</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// If this not specified, it should be interpreted as the default of 1.</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// Cargo (starting with version 1.51) will ignore versions it does not</span>\n    <span class=\"hljs-comment\">// recognize. This provides a method to safely introduce changes to index</span>\n    <span class=\"hljs-comment\">// entries and allow older versions of cargo to ignore newer entries it</span>\n    <span class=\"hljs-comment\">// doesn't understand. Versions older than 1.51 ignore this field, and</span>\n    <span class=\"hljs-comment\">// thus may misinterpret the meaning of the index entry.</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// The current values are:</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// * 1: The schema as documented here, not including newer additions.</span>\n    <span class=\"hljs-comment\">//      This is honored in Rust version 1.51 and newer.</span>\n    <span class=\"hljs-comment\">// * 2: The addition of the `features2` field.</span>\n    <span class=\"hljs-comment\">//      This is honored in Rust version 1.60 and newer.</span>\n    <span class=\"hljs-string\">\"v\"</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-comment\">// This optional field contains features with new, extended syntax.</span>\n    <span class=\"hljs-comment\">// Specifically, namespaced features (`dep:`) and weak dependencies</span>\n    <span class=\"hljs-comment\">// (`pkg?/feat`).</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// This is separated from `features` because versions older than 1.19</span>\n    <span class=\"hljs-comment\">// will fail to load due to not being able to parse the new syntax, even</span>\n    <span class=\"hljs-comment\">// with a `Cargo.lock` file.</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// Cargo will merge any values listed here with the \"features\" field.</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// If this field is included, the \"v\" field should be set to at least 2.</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// Registries are not required to use this field for extended feature</span>\n    <span class=\"hljs-comment\">// syntax, they are allowed to include those in the \"features\" field.</span>\n    <span class=\"hljs-comment\">// Using this is only necessary if the registry wants to support cargo</span>\n    <span class=\"hljs-comment\">// versions older than 1.19, which in practice is only crates.io since</span>\n    <span class=\"hljs-comment\">// those older versions do not support other registries.</span>\n    <span class=\"hljs-string\">\"features2\"</span>: {\n        <span class=\"hljs-string\">\"serde\"</span>: [<span class=\"hljs-string\">\"dep:serde\"</span>, <span class=\"hljs-string\">\"chrono?/serde\"</span>]\n    }\n    <span class=\"hljs-comment\">// The minimal supported Rust version (optional)</span>\n    <span class=\"hljs-comment\">// This must be a valid version requirement without an operator (e.g. no `=`)</span>\n    <span class=\"hljs-string\">\"rust_version\"</span>: <span class=\"hljs-string\">\"1.60\"</span>\n}\n</code></pre>\n<p>The JSON objects should not be modified after they are added except for the\n<code class=\"hljs\">yanked</code> field whose value may change at any time.</p>\n<blockquote>\n<p><strong>Note</strong>: The index JSON format has subtle differences from the JSON format of the <a href=\"reference/registry-web-api.html#publish\">Publish API</a> and <a href=\"reference/../commands/cargo-metadata.html\"><code class=\"hljs\">cargo metadata</code></a>.\nIf you are using one of those as a source to generate index entries, you are encouraged to carefully inspect the documentation differences between them.</p>\n<p>For the <a href=\"reference/registry-web-api.html#publish\">Publish API</a>, the differences are:</p>\n<ul>\n<li><code class=\"hljs\">deps</code>\n<ul>\n<li><code class=\"hljs\">name</code> — When the dependency is <a href=\"reference/specifying-dependencies.html#renaming-dependencies-in-cargotoml\">renamed</a> in <code class=\"hljs\">Cargo.toml</code>, the publish API puts the original package name in the <code class=\"hljs\">name</code> field and the aliased name in the <code class=\"hljs\">explicit_name_in_toml</code> field.\nThe index places the aliased name in the <code class=\"hljs\">name</code> field, and the original package name in the <code class=\"hljs\">package</code> field.</li>\n<li><code class=\"hljs\">req</code> — The Publish API field is called <code class=\"hljs\">version_req</code>.</li>\n</ul>\n</li>\n<li><code class=\"hljs\">cksum</code> — The publish API does not specify the checksum, it must be computed by the registry before adding to the index.</li>\n<li><code class=\"hljs\">features</code> — Some features may be placed in the <code class=\"hljs\">features2</code> field.\nNote: This is only a legacy requirement for <a href=\"https://crates.io/\">crates.io</a>; other registries should not need to bother with modifying the features map.\nThe <code class=\"hljs\">v</code> field indicates the presence of the <code class=\"hljs\">features2</code> field.</li>\n<li>The publish API includes several other fields, such as <code class=\"hljs\">description</code> and <code class=\"hljs\">readme</code>, which don’t appear in the index.\nThese are intended to make it easier for a registry to obtain the metadata about the crate to display on a website without needing to extract and parse the <code class=\"hljs\">.crate</code> file.\nThis additional information is typically added to a database on the registry server.</li>\n<li>Although <code class=\"hljs\">rust_version</code> is included here, <a href=\"https://crates.io/\">crates.io</a> will ignore this field\nand instead read it from the <code class=\"hljs\">Cargo.toml</code> contained in the <code class=\"hljs\">.crate</code> file.</li>\n</ul>\n<p>For <a href=\"reference/../commands/cargo-metadata.html\"><code class=\"hljs\">cargo metadata</code></a>, the differences are:</p>\n<ul>\n<li><code class=\"hljs\">vers</code> — The <code class=\"hljs\">cargo metadata</code> field is called <code class=\"hljs\">version</code>.</li>\n<li><code class=\"hljs\">deps</code>\n<ul>\n<li><code class=\"hljs\">name</code> — When the dependency is <a href=\"reference/specifying-dependencies.html#renaming-dependencies-in-cargotoml\">renamed</a> in <code class=\"hljs\">Cargo.toml</code>, <code class=\"hljs\">cargo metadata</code> puts the original package name in the <code class=\"hljs\">name</code> field and the aliased name in the <code class=\"hljs\">rename</code> field.\nThe index places the aliased name in the <code class=\"hljs\">name</code> field, and the original package name in the <code class=\"hljs\">package</code> field.</li>\n<li><code class=\"hljs\">default_features</code> — The <code class=\"hljs\">cargo metadata</code> field is called <code class=\"hljs\">uses_default_features</code>.</li>\n<li><code class=\"hljs\">registry</code> — <code class=\"hljs\">cargo metadata</code> uses a value of <code class=\"hljs\">null</code> to indicate that the dependency comes from <a href=\"https://crates.io/\">crates.io</a>.\nThe index uses a value of <code class=\"hljs\">null</code> to indicate that the dependency comes from the same registry as the index.\nWhen creating an index entry, a registry other than <a href=\"https://crates.io/\">crates.io</a> should translate a value of <code class=\"hljs\">null</code> to be <code class=\"hljs\">https://github.com/rust-lang/crates.io-index</code> and translate a URL that matches the current index to be <code class=\"hljs\">null</code>.</li>\n<li><code class=\"hljs\">cargo metadata</code> includes some extra fields, such as <code class=\"hljs\">source</code> and <code class=\"hljs\">path</code>.</li>\n</ul>\n</li>\n<li>The index includes additional fields such as <code class=\"hljs\">yanked</code>, <code class=\"hljs\">cksum</code>, and <code class=\"hljs\">v</code>.</li>\n</ul>\n</blockquote>\n<h2 id=\"index-protocols\"><a class=\"header\" href=\"#index-protocols\">Index Protocols</a></h2>\n<p>Cargo supports two remote registry protocols: <code class=\"hljs\">git</code> and <code class=\"hljs\">sparse</code>. The <code class=\"hljs\">git</code> protocol\nstores index files in a git repository and the <code class=\"hljs\">sparse</code> protocol fetches individual\nfiles over HTTP.</p>\n<h3 id=\"git-protocol\"><a class=\"header\" href=\"#git-protocol\">Git Protocol</a></h3>\n<p>The git protocol has no protocol prefix in the index url. For example the git index URL\nfor <a href=\"https://crates.io/\">crates.io</a> is <code class=\"hljs\">https://github.com/rust-lang/crates.io-index</code>.</p>\n<p>Cargo caches the git repository on disk so that it can efficiently incrementally fetch\nupdates.</p>\n<h3 id=\"sparse-protocol\"><a class=\"header\" href=\"#sparse-protocol\">Sparse Protocol</a></h3>\n<p>The sparse protocol uses the <code class=\"hljs\">sparse+</code> protocol prefix in the registry URL. For example,\nthe sparse index URL for <a href=\"https://crates.io/\">crates.io</a> is <code class=\"hljs\">sparse+https://index.crates.io/</code>.</p>\n<p>The sparse protocol downloads each index file using an individual HTTP request. Since\nthis results in a large number of small HTTP requests, performance is significantly\nimproved with a server that supports pipelining and HTTP/2.</p>\n<h4 id=\"sparse-authentication\"><a class=\"header\" href=\"#sparse-authentication\">Sparse authentication</a></h4>\n<p>Cargo will attempt to fetch the <code class=\"hljs\">config.json</code> file before\nfetching any other files. If the server responds with an HTTP 401, then Cargo will assume\nthat the registry requires authentication and re-attempt the request for <code class=\"hljs\">config.json</code>\nwith the authentication token included.</p>\n<p>On authentication failure (or a missing authentication token) the server may include a\n<code class=\"hljs\">www-authenticate</code> header with a <code class=\"hljs\">Cargo login_url=\"&lt;URL&gt;\"</code> challenge to indicate where the user\ncan go to get a token.</p>\n<p>Registries that require authentication must set <code class=\"hljs\">auth-required: true</code> in <code class=\"hljs\">config.json</code>.</p>\n<h4 id=\"caching\"><a class=\"header\" href=\"#caching\">Caching</a></h4>\n<p>Cargo caches the crate metadata files, and captures the <code class=\"hljs\">ETag</code> or <code class=\"hljs\">Last-Modified</code>\nHTTP header from the server for each entry. When refreshing crate metadata, Cargo\nsends the <code class=\"hljs\">If-None-Match</code> or <code class=\"hljs\">If-Modified-Since</code> header to allow the server to respond\nwith HTTP 304 “Not Modified” if the local cache is valid, saving time and bandwidth.\nIf both <code class=\"hljs\">ETag</code> and <code class=\"hljs\">Last-Modified</code> headers are present, Cargo uses the <code class=\"hljs\">ETag</code> only.</p>\n<h4 id=\"cache-invalidation\"><a class=\"header\" href=\"#cache-invalidation\">Cache Invalidation</a></h4>\n<p>If a registry is using some kind of CDN or proxy which caches access to the index files,\nthen it is recommended that registries implement some form of cache invalidation when\nthe files are updated. If these caches are not updated, then users may not be able to\naccess new crates until the cache is cleared.</p>\n<h4 id=\"nonexistent-crates\"><a class=\"header\" href=\"#nonexistent-crates\">Nonexistent Crates</a></h4>\n<p>For crates that do not exist, the registry should respond with a 404 “Not Found”, 410 “Gone”\nor 451 “Unavailable For Legal Reasons” code.</p>\n<h4 id=\"sparse-limitations\"><a class=\"header\" href=\"#sparse-limitations\">Sparse Limitations</a></h4>\n<p>Since the URL of the registry is stored in the lockfile, it’s not recommended to offer\na registry with both protocols. Discussion about a transition plan is ongoing in issue\n<a href=\"https://github.com/rust-lang/cargo/issues/10964\">#10964</a>. The <a href=\"https://crates.io/\">crates.io</a> registry is an exception, since Cargo internally substitutes\nthe equivalent git URL when the sparse protocol is used.</p>\n<p>If a registry does offer both protocols, it’s currently recommended to choose one protocol\nas the canonical protocol and use <a href=\"reference/../reference/source-replacement.html\">source replacement</a> for the other protocol.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"web-api\"><a class=\"header\" href=\"#web-api\">Web API</a></h1>\n<p>A registry may host a web API at the location defined in <code class=\"hljs\">config.json</code> to\nsupport any of the actions listed below.</p>\n<p>Cargo includes the <code class=\"hljs\">Authorization</code> header for requests that require\nauthentication. The header value is the API token. The server should respond\nwith a 403 response code if the token is not valid. Users are expected to\nvisit the registry’s website to obtain a token, and Cargo can store the token\nusing the <a href=\"reference/../commands/cargo-login.html\"><code class=\"hljs\">cargo login</code></a> command, or by passing the token on the\ncommand-line.</p>\n<p>Responses use a 2xx response code for success.\nErrors should use an appropriate response code, such as 404.\nFailure\nresponses should have a JSON object with the following structure:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">// Array of errors to display to the user.</span>\n    <span class=\"hljs-string\">\"errors\"</span>: [\n        {\n            <span class=\"hljs-comment\">// The error message as a string.</span>\n            <span class=\"hljs-string\">\"detail\"</span>: <span class=\"hljs-string\">\"error message text\"</span>\n        }\n    ]\n}\n</code></pre>\n<p>If the response has this structure Cargo will display the detailed message to the user, even if the response code is 200.\nIf the response code indicates an error and the content does not have this structure, Cargo will display to the user a\nmessage intended to help debugging the server error. A server returning an <code class=\"hljs\">errors</code> object allows a registry to provide a more\ndetailed or user-centric error message.</p>\n<p>For backwards compatibility, servers should ignore any unexpected query\nparameters or JSON fields. If a JSON field is missing, it should be assumed to\nbe null. The endpoints are versioned with the <code class=\"hljs\">v1</code> component of the path, and\nCargo is responsible for handling backwards compatibility fallbacks should any\nbe required in the future.</p>\n<p>Cargo sets the following headers for all requests:</p>\n<ul>\n<li><code class=\"hljs\">Content-Type</code>: <code class=\"hljs\">application/json</code> (for requests with a body payload)</li>\n<li><code class=\"hljs\">Accept</code>: <code class=\"hljs\">application/json</code></li>\n<li><code class=\"hljs\">User-Agent</code>: The Cargo version such as <code class=\"hljs\">cargo/1.32.0 (8610973aa 2019-01-02)</code>. This may be modified by the user in a configuration value.\nAdded in 1.29.</li>\n</ul>\n<h2 id=\"publish\"><a class=\"header\" href=\"#publish\">Publish</a></h2>\n<ul>\n<li>Endpoint: <code class=\"hljs\">/api/v1/crates/new</code></li>\n<li>Method: PUT</li>\n<li>Authorization: Included</li>\n</ul>\n<p>The publish endpoint is used to publish a new version of a crate. The server\nshould validate the crate, make it available for download, and add it to the\nindex.</p>\n<p>It is not required for the index to be updated before the successful response is sent.\nAfter a successful response, Cargo will poll the index for a short period of time to identify that the new crate has been added.\nIf the crate does not appear in the index after a short period of time, then Cargo will display a warning letting the user know that the new crate is not yet available.</p>\n<p>The body of the data sent by Cargo is:</p>\n<ul>\n<li>32-bit unsigned little-endian integer of the length of JSON data.</li>\n<li>Metadata of the package as a JSON object.</li>\n<li>32-bit unsigned little-endian integer of the length of the <code class=\"hljs\">.crate</code> file.</li>\n<li>The <code class=\"hljs\">.crate</code> file.</li>\n</ul>\n<p>The following is a commented example of the JSON object. Some notes of some\nrestrictions imposed by <a href=\"https://crates.io/\">crates.io</a> are included only to illustrate some\nsuggestions on types of validation that may be done, and should not be\nconsidered as an exhaustive list of restrictions <a href=\"https://crates.io/\">crates.io</a> imposes.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">// The name of the package.</span>\n    <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"foo\"</span>,\n    <span class=\"hljs-comment\">// The version of the package being published.</span>\n    <span class=\"hljs-string\">\"vers\"</span>: <span class=\"hljs-string\">\"0.1.0\"</span>,\n    <span class=\"hljs-comment\">// Array of direct dependencies of the package.</span>\n    <span class=\"hljs-string\">\"deps\"</span>: [\n        {\n            <span class=\"hljs-comment\">// Name of the dependency.</span>\n            <span class=\"hljs-comment\">// If the dependency is renamed from the original package name,</span>\n            <span class=\"hljs-comment\">// this is the original name. The new package name is stored in</span>\n            <span class=\"hljs-comment\">// the `explicit_name_in_toml` field.</span>\n            <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"rand\"</span>,\n            <span class=\"hljs-comment\">// The semver requirement for this dependency.</span>\n            <span class=\"hljs-string\">\"version_req\"</span>: <span class=\"hljs-string\">\"^0.6\"</span>,\n            <span class=\"hljs-comment\">// Array of features (as strings) enabled for this dependency.</span>\n            <span class=\"hljs-string\">\"features\"</span>: [<span class=\"hljs-string\">\"i128_support\"</span>],\n            <span class=\"hljs-comment\">// Boolean of whether or not this is an optional dependency.</span>\n            <span class=\"hljs-string\">\"optional\"</span>: <span class=\"hljs-literal\">false</span>,\n            <span class=\"hljs-comment\">// Boolean of whether or not default features are enabled.</span>\n            <span class=\"hljs-string\">\"default_features\"</span>: <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-comment\">// The target platform for the dependency.</span>\n            <span class=\"hljs-comment\">// null if not a target dependency.</span>\n            <span class=\"hljs-comment\">// Otherwise, a string such as \"cfg(windows)\".</span>\n            <span class=\"hljs-string\">\"target\"</span>: <span class=\"hljs-literal\">null</span>,\n            <span class=\"hljs-comment\">// The dependency kind.</span>\n            <span class=\"hljs-comment\">// \"dev\", \"build\", or \"normal\".</span>\n            <span class=\"hljs-string\">\"kind\"</span>: <span class=\"hljs-string\">\"normal\"</span>,\n            <span class=\"hljs-comment\">// The URL of the index of the registry where this dependency is</span>\n            <span class=\"hljs-comment\">// from as a string. If not specified or null, it is assumed the</span>\n            <span class=\"hljs-comment\">// dependency is in the current registry.</span>\n            <span class=\"hljs-string\">\"registry\"</span>: <span class=\"hljs-literal\">null</span>,\n            <span class=\"hljs-comment\">// If the dependency is renamed, this is a string of the new</span>\n            <span class=\"hljs-comment\">// package name. If not specified or null, this dependency is not</span>\n            <span class=\"hljs-comment\">// renamed.</span>\n            <span class=\"hljs-string\">\"explicit_name_in_toml\"</span>: <span class=\"hljs-literal\">null</span>,\n        }\n    ],\n    <span class=\"hljs-comment\">// Set of features defined for the package.</span>\n    <span class=\"hljs-comment\">// Each feature maps to an array of features or dependencies it enables.</span>\n    <span class=\"hljs-comment\">// Cargo does not impose limitations on feature names, but crates.io</span>\n    <span class=\"hljs-comment\">// requires alphanumeric ASCII, `_` or `-` characters.</span>\n    <span class=\"hljs-string\">\"features\"</span>: {\n        <span class=\"hljs-string\">\"extras\"</span>: [<span class=\"hljs-string\">\"rand/simd_support\"</span>]\n    },\n    <span class=\"hljs-comment\">// List of strings of the authors.</span>\n    <span class=\"hljs-comment\">// May be empty.</span>\n    <span class=\"hljs-string\">\"authors\"</span>: [<span class=\"hljs-string\">\"Alice &lt;a@example.com&gt;\"</span>],\n    <span class=\"hljs-comment\">// Description field from the manifest.</span>\n    <span class=\"hljs-comment\">// May be null. crates.io requires at least some content.</span>\n    <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// String of the URL to the website for this package's documentation.</span>\n    <span class=\"hljs-comment\">// May be null.</span>\n    <span class=\"hljs-string\">\"documentation\"</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// String of the URL to the website for this package's home page.</span>\n    <span class=\"hljs-comment\">// May be null.</span>\n    <span class=\"hljs-string\">\"homepage\"</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// String of the content of the README file.</span>\n    <span class=\"hljs-comment\">// May be null.</span>\n    <span class=\"hljs-string\">\"readme\"</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// String of a relative path to a README file in the crate.</span>\n    <span class=\"hljs-comment\">// May be null.</span>\n    <span class=\"hljs-string\">\"readme_file\"</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// Array of strings of keywords for the package.</span>\n    <span class=\"hljs-string\">\"keywords\"</span>: [],\n    <span class=\"hljs-comment\">// Array of strings of categories for the package.</span>\n    <span class=\"hljs-string\">\"categories\"</span>: [],\n    <span class=\"hljs-comment\">// String of the license for the package.</span>\n    <span class=\"hljs-comment\">// May be null. crates.io requires either `license` or `license_file` to be set.</span>\n    <span class=\"hljs-string\">\"license\"</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// String of a relative path to a license file in the crate.</span>\n    <span class=\"hljs-comment\">// May be null.</span>\n    <span class=\"hljs-string\">\"license_file\"</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// String of the URL to the website for the source repository of this package.</span>\n    <span class=\"hljs-comment\">// May be null.</span>\n    <span class=\"hljs-string\">\"repository\"</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// Optional object of \"status\" badges. Each value is an object of</span>\n    <span class=\"hljs-comment\">// arbitrary string to string mappings.</span>\n    <span class=\"hljs-comment\">// crates.io has special interpretation of the format of the badges.</span>\n    <span class=\"hljs-string\">\"badges\"</span>: {\n        <span class=\"hljs-string\">\"travis-ci\"</span>: {\n            <span class=\"hljs-string\">\"branch\"</span>: <span class=\"hljs-string\">\"master\"</span>,\n            <span class=\"hljs-string\">\"repository\"</span>: <span class=\"hljs-string\">\"rust-lang/cargo\"</span>\n        }\n    },\n    <span class=\"hljs-comment\">// The `links` string value from the package's manifest, or null if not</span>\n    <span class=\"hljs-comment\">// specified. This field is optional and defaults to null.</span>\n    <span class=\"hljs-string\">\"links\"</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// The minimal supported Rust version (optional)</span>\n    <span class=\"hljs-comment\">// This must be a valid version requirement without an operator (e.g. no `=`)</span>\n    <span class=\"hljs-string\">\"rust_version\"</span>: <span class=\"hljs-literal\">null</span>\n}\n</code></pre>\n<p>A successful response includes the JSON object:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">// Optional object of warnings to display to the user.</span>\n    <span class=\"hljs-string\">\"warnings\"</span>: {\n        <span class=\"hljs-comment\">// Array of strings of categories that are invalid and ignored.</span>\n        <span class=\"hljs-string\">\"invalid_categories\"</span>: [],\n        <span class=\"hljs-comment\">// Array of strings of badge names that are invalid and ignored.</span>\n        <span class=\"hljs-string\">\"invalid_badges\"</span>: [],\n        <span class=\"hljs-comment\">// Array of strings of arbitrary warnings to display to the user.</span>\n        <span class=\"hljs-string\">\"other\"</span>: []\n    }\n}\n</code></pre>\n<h2 id=\"yank\"><a class=\"header\" href=\"#yank\">Yank</a></h2>\n<ul>\n<li>Endpoint: <code class=\"hljs\">/api/v1/crates/{crate_name}/{version}/yank</code></li>\n<li>Method: DELETE</li>\n<li>Authorization: Included</li>\n</ul>\n<p>The yank endpoint will set the <code class=\"hljs\">yank</code> field of the given version of a crate to\n<code class=\"hljs\">true</code> in the index.</p>\n<p>A successful response includes the JSON object:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">// Indicates the yank succeeded, always true.</span>\n    <span class=\"hljs-string\">\"ok\"</span>: <span class=\"hljs-literal\">true</span>,\n}\n</code></pre>\n<h2 id=\"unyank\"><a class=\"header\" href=\"#unyank\">Unyank</a></h2>\n<ul>\n<li>Endpoint: <code class=\"hljs\">/api/v1/crates/{crate_name}/{version}/unyank</code></li>\n<li>Method: PUT</li>\n<li>Authorization: Included</li>\n</ul>\n<p>The unyank endpoint will set the <code class=\"hljs\">yank</code> field of the given version of a crate\nto <code class=\"hljs\">false</code> in the index.</p>\n<p>A successful response includes the JSON object:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">// Indicates the unyank succeeded, always true.</span>\n    <span class=\"hljs-string\">\"ok\"</span>: <span class=\"hljs-literal\">true</span>,\n}\n</code></pre>\n<h2 id=\"owners\"><a class=\"header\" href=\"#owners\">Owners</a></h2>\n<p>Cargo does not have an inherent notion of users and owners, but it does\nprovide the <code class=\"hljs\">owner</code> command to assist managing who has authorization to\ncontrol a crate. It is up to the registry to decide exactly how users and\nowners are handled. See the <a href=\"reference/publishing.html#cargo-owner\">publishing documentation</a> for a description of\nhow <a href=\"https://crates.io/\">crates.io</a> handles owners via GitHub users and teams.</p>\n<h3 id=\"owners-list\"><a class=\"header\" href=\"#owners-list\">Owners: List</a></h3>\n<ul>\n<li>Endpoint: <code class=\"hljs\">/api/v1/crates/{crate_name}/owners</code></li>\n<li>Method: GET</li>\n<li>Authorization: Included</li>\n</ul>\n<p>The owners endpoint returns a list of owners of the crate.</p>\n<p>A successful response includes the JSON object:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">// Array of owners of the crate.</span>\n    <span class=\"hljs-string\">\"users\"</span>: [\n        {\n            <span class=\"hljs-comment\">// Unique unsigned 32-bit integer of the owner.</span>\n            <span class=\"hljs-string\">\"id\"</span>: <span class=\"hljs-number\">70</span>,\n            <span class=\"hljs-comment\">// The unique username of the owner.</span>\n            <span class=\"hljs-string\">\"login\"</span>: <span class=\"hljs-string\">\"github:rust-lang:core\"</span>,\n            <span class=\"hljs-comment\">// Name of the owner.</span>\n            <span class=\"hljs-comment\">// This is optional and may be null.</span>\n            <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Core\"</span>,\n        }\n    ]\n}\n</code></pre>\n<h3 id=\"owners-add\"><a class=\"header\" href=\"#owners-add\">Owners: Add</a></h3>\n<ul>\n<li>Endpoint: <code class=\"hljs\">/api/v1/crates/{crate_name}/owners</code></li>\n<li>Method: PUT</li>\n<li>Authorization: Included</li>\n</ul>\n<p>A PUT request will send a request to the registry to add a new owner to a\ncrate. It is up to the registry how to handle the request. For example,\n<a href=\"https://crates.io/\">crates.io</a> sends an invite to the user that they must accept before being\nadded.</p>\n<p>The request should include the following JSON object:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">// Array of `login` strings of owners to add.</span>\n    <span class=\"hljs-string\">\"users\"</span>: [<span class=\"hljs-string\">\"login_name\"</span>]\n}\n</code></pre>\n<p>A successful response includes the JSON object:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">// Indicates the add succeeded, always true.</span>\n    <span class=\"hljs-string\">\"ok\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-comment\">// A string to be displayed to the user.</span>\n    <span class=\"hljs-string\">\"msg\"</span>: <span class=\"hljs-string\">\"user ehuss has been invited to be an owner of crate cargo\"</span>\n}\n</code></pre>\n<h3 id=\"owners-remove\"><a class=\"header\" href=\"#owners-remove\">Owners: Remove</a></h3>\n<ul>\n<li>Endpoint: <code class=\"hljs\">/api/v1/crates/{crate_name}/owners</code></li>\n<li>Method: DELETE</li>\n<li>Authorization: Included</li>\n</ul>\n<p>A DELETE request will remove an owner from a crate. The request should include\nthe following JSON object:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">// Array of `login` strings of owners to remove.</span>\n    <span class=\"hljs-string\">\"users\"</span>: [<span class=\"hljs-string\">\"login_name\"</span>]\n}\n</code></pre>\n<p>A successful response includes the JSON object:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">// Indicates the remove succeeded, always true.</span>\n    <span class=\"hljs-string\">\"ok\"</span>: <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-comment\">// A string to be displayed to the user. Currently ignored by cargo.</span>\n    <span class=\"hljs-string\">\"msg\"</span>: <span class=\"hljs-string\">\"owners successfully removed\"</span>,\n}\n</code></pre>\n<h2 id=\"search\"><a class=\"header\" href=\"#search\">Search</a></h2>\n<ul>\n<li>Endpoint: <code class=\"hljs\">/api/v1/crates</code></li>\n<li>Method: GET</li>\n<li>Query Parameters:\n<ul>\n<li><code class=\"hljs\">q</code>: The search query string.</li>\n<li><code class=\"hljs\">per_page</code>: Number of results, default 10, max 100.</li>\n</ul>\n</li>\n</ul>\n<p>The search request will perform a search for crates, using criteria defined on\nthe server.</p>\n<p>A successful response includes the JSON object:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">// Array of results.</span>\n    <span class=\"hljs-string\">\"crates\"</span>: [\n        {\n            <span class=\"hljs-comment\">// Name of the crate.</span>\n            <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"rand\"</span>,\n            <span class=\"hljs-comment\">// The highest version available.</span>\n            <span class=\"hljs-string\">\"max_version\"</span>: <span class=\"hljs-string\">\"0.6.1\"</span>,\n            <span class=\"hljs-comment\">// Textual description of the crate.</span>\n            <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Random number generators and other randomness functionality.\\n\"</span>,\n        }\n    ],\n    <span class=\"hljs-string\">\"meta\"</span>: {\n        <span class=\"hljs-comment\">// Total number of results available on the server.</span>\n        <span class=\"hljs-string\">\"total\"</span>: <span class=\"hljs-number\">119</span>\n    }\n}\n</code></pre>\n<h2 id=\"login\"><a class=\"header\" href=\"#login\">Login</a></h2>\n<ul>\n<li>Endpoint: <code class=\"hljs\">/me</code></li>\n</ul>\n<p>The “login” endpoint is not an actual API request. It exists solely for the\n<a href=\"reference/../commands/cargo-login.html\"><code class=\"hljs\">cargo login</code></a> command to display a URL to instruct a user to visit in a web\nbrowser to log in and retrieve an API token.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"dependency-resolution\"><a class=\"header\" href=\"#dependency-resolution\">Dependency Resolution</a></h1>\n<p>One of Cargo’s primary tasks is to determine the versions of dependencies to\nuse based on the version requirements specified in each package. This process\nis called “dependency resolution” and is performed by the “resolver”. The\nresult of the resolution is stored in the <code class=\"hljs\">Cargo.lock</code> file which “locks” the\ndependencies to specific versions, and keeps them fixed over time.</p>\n<p>The resolver attempts to unify common dependencies while considering possibly\nconflicting requirements. It turns out, however, that in many cases there is no\nsingle “best” dependency resolution, and so the resolver must use heuristics to\nchoose a preferred solution. The sections below provide some details on how\nrequirements are handled, and how to work with the resolver.</p>\n<p>See the chapter <a href=\"reference/specifying-dependencies.html\">Specifying Dependencies</a> for more details about how\ndependency requirements are specified.</p>\n<p>The <a href=\"reference/../commands/cargo-tree.html\"><code class=\"hljs\">cargo tree</code></a> command can be used to visualize the result of the\nresolver.</p>\n<h2 id=\"semver-compatibility-1\"><a class=\"header\" href=\"#semver-compatibility-1\">SemVer compatibility</a></h2>\n<p>Cargo uses <a href=\"https://semver.org/\">SemVer</a> for specifying version numbers. This establishes a common\nconvention for what is compatible between different versions of a package. See\nthe <a href=\"reference/semver.html\">SemVer Compatibility</a> chapter for guidance on what is considered a\n“compatible” change. This notion of “compatibility” is important because Cargo\nassumes it should be safe to update a dependency within a compatibility range\nwithout breaking the build.</p>\n<p>Versions are considered compatible if their left-most non-zero\nmajor/minor/patch component is the same. For example, <code class=\"hljs\">1.0.3</code> and <code class=\"hljs\">1.1.0</code> are\nconsidered compatible, and thus it should be safe to update from the older\nrelease to the newer one. However, an update from <code class=\"hljs\">1.1.0</code> to <code class=\"hljs\">2.0.0</code> would not\nbe allowed to be made automatically. This convention also applies to versions\nwith leading zeros. For example, <code class=\"hljs\">0.1.0</code> and <code class=\"hljs\">0.1.2</code> are compatible, but\n<code class=\"hljs\">0.1.0</code> and <code class=\"hljs\">0.2.0</code> are not. Similarly, <code class=\"hljs\">0.0.1</code> and <code class=\"hljs\">0.0.2</code> are not\ncompatible.</p>\n<p>As a quick refresher, the\n<a href=\"reference/specifying-dependencies.html\"><em>version requirement</em> syntax</a> Cargo uses for\ndependencies is:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Requirement</th><th>Example</th><th>Equivalence</th><th>Description</th></tr></thead><tbody>\n<tr><td>Caret</td><td><code class=\"hljs\">1.2.3</code> or <code class=\"hljs\">^1.2.3</code></td><td><code class=\"hljs\">&gt;=1.2.3,&nbsp;&lt;2.0.0</code></td><td>Any SemVer-compatible version of at least the given value.</td></tr>\n<tr><td>Tilde</td><td><code class=\"hljs\">~1.2</code></td><td><code class=\"hljs\">&gt;=1.2.0,&nbsp;&lt;1.3.0</code></td><td>Minimum version, with restricted compatibility range.</td></tr>\n<tr><td>Wildcard</td><td><code class=\"hljs\">1.*</code></td><td><code class=\"hljs\">&gt;=1.0.0,&nbsp;&lt;2.0.0</code></td><td>Any version in the <code class=\"hljs\">*</code> position.</td></tr>\n<tr><td>Equals</td><td><code class=\"hljs\">=1.2.3</code></td><td><code class=\"hljs\">=1.2.3</code></td><td>Exactly the specified version only.</td></tr>\n<tr><td>Comparison</td><td><code class=\"hljs\">&gt;1.1</code></td><td><code class=\"hljs\">&gt;=1.2.0</code></td><td>Naive numeric comparison of specified digits.</td></tr>\n<tr><td>Compound</td><td><code class=\"hljs\">&gt;=1.2,&nbsp;&lt;1.5</code></td><td><code class=\"hljs\">&gt;=1.2.0,&nbsp;&lt;1.5.0</code></td><td>Multiple requirements that must be simultaneously satisfied.</td></tr>\n</tbody></table>\n</div>\n<p>When multiple packages specify a dependency for a common package, the resolver\nattempts to ensure that they use the same version of that common package, as\nlong as they are within a SemVer compatibility range. It also attempts to use\nthe greatest version currently available within that compatibility range. For\nexample, if there are two packages in the resolve graph with the following\nrequirements:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Package A</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">bitflags</span> = <span class=\"hljs-string\">\"1.0\"</span>\n\n<span class=\"hljs-comment\"># Package B</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">bitflags</span> = <span class=\"hljs-string\">\"1.1\"</span>\n</code></pre>\n<p>If at the time the <code class=\"hljs\">Cargo.lock</code> file is generated, the greatest version of\n<code class=\"hljs\">bitflags</code> is <code class=\"hljs\">1.2.1</code>, then both packages will use <code class=\"hljs\">1.2.1</code> because it is the\ngreatest within the compatibility range. If <code class=\"hljs\">2.0.0</code> is published, it will\nstill use <code class=\"hljs\">1.2.1</code> because <code class=\"hljs\">2.0.0</code> is considered incompatible.</p>\n<p>If multiple packages have a common dependency with semver-incompatible\nversions, then Cargo will allow this, but will build two separate copies of\nthe dependency. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Package A</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"0.7\"</span>\n\n<span class=\"hljs-comment\"># Package B</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"0.6\"</span>\n</code></pre>\n<p>The above will result in Package A using the greatest <code class=\"hljs\">0.7</code> release (<code class=\"hljs\">0.7.3</code>\nat the time of this writing) and Package B will use the greatest <code class=\"hljs\">0.6</code> release\n(<code class=\"hljs\">0.6.5</code> for example). This can lead to potential problems, see the\n<a href=\"reference/resolver.html#version-incompatibility-hazards\">Version-incompatibility hazards</a> section for more details.</p>\n<p>Multiple versions within the same compatibility range are not allowed and will\nresult in a resolver error if it is constrained to two different versions\nwithin a compatibility range. For example, if there are two packages in the\nresolve graph with the following requirements:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Package A</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">log</span> = <span class=\"hljs-string\">\"=0.4.11\"</span>\n\n<span class=\"hljs-comment\"># Package B</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">log</span> = <span class=\"hljs-string\">\"=0.4.8\"</span>\n</code></pre>\n<p>The above will fail because it is not allowed to have two separate copies of\nthe <code class=\"hljs\">0.4</code> release of the <code class=\"hljs\">log</code> package.</p>\n<h3 id=\"version-incompatibility-hazards\"><a class=\"header\" href=\"#version-incompatibility-hazards\">Version-incompatibility hazards</a></h3>\n<p>When multiple versions of a crate appear in the resolve graph, this can cause\nproblems when types from those crates are exposed by the crates using them.\nThis is because the types and items are considered different by the Rust\ncompiler, even if they have the same name. Libraries should take care when\npublishing a SemVer-incompatible version (for example, publishing <code class=\"hljs\">2.0.0</code>\nafter <code class=\"hljs\">1.0.0</code> has been in use), particularly for libraries that are widely\nused.</p>\n<p>The “<a href=\"https://github.com/dtolnay/semver-trick\">semver trick</a>” is a workaround for this problem of publishing a breaking\nchange while retaining compatibility with older versions. The linked page goes\ninto detail about what the problem is and how to address it. In short, when a\nlibrary wants to publish a SemVer-breaking release, publish the new release,\nand also publish a point release of the previous version that reexports the\ntypes from the newer version.</p>\n<p>These incompatibilities usually manifest as a compile-time error, but\nsometimes they will only appear as a runtime misbehavior. For example, let’s\nsay there is a common library named <code class=\"hljs\">foo</code> that ends up appearing with both\nversion <code class=\"hljs\">1.0.0</code> and <code class=\"hljs\">2.0.0</code> in the resolve graph. If <a href=\"reference/../../std/any/trait.Any.html#method.downcast_ref\"><code class=\"hljs\">downcast_ref</code></a> is used\non a object created by a library using version <code class=\"hljs\">1.0.0</code>, and the code calling\n<code class=\"hljs\">downcast_ref</code> is downcasting to a type from version <code class=\"hljs\">2.0.0</code>, the downcast\nwill fail at runtime.</p>\n<p>It is important to make sure that if you have multiple versions of a library\nthat you are properly using them, especially if it is ever possible for the\ntypes from different versions to be used together. The <a href=\"reference/../commands/cargo-tree.html\"><code class=\"hljs\">cargo tree -d</code></a> command can be used to identify duplicate versions and\nwhere they come from. Similarly, it is important to consider the impact on the\necosystem if you publish a SemVer-incompatible version of a popular library.</p>\n<h3 id=\"pre-releases\"><a class=\"header\" href=\"#pre-releases\">Pre-releases</a></h3>\n<p>SemVer has the concept of “pre-releases” with a dash in the version, such as\n<code class=\"hljs\">1.0.0-alpha</code>, or <code class=\"hljs\">1.0.0-beta</code>. Cargo will avoid automatically using\npre-releases unless explicitly asked. For example, if <code class=\"hljs\">1.0.0-alpha</code> of package\n<code class=\"hljs\">foo</code> is published, then a requirement of <code class=\"hljs\">foo = \"1.0\"</code> will <em>not</em> match, and\nwill return an error. The pre-release must be specified, such as <code class=\"hljs\">foo = \"1.0.0-alpha\"</code>. Similarly <a href=\"reference/../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> will avoid pre-releases unless\nexplicitly asked to install one.</p>\n<p>Cargo allows “newer” pre-releases to be used automatically. For example, if\n<code class=\"hljs\">1.0.0-beta</code> is published, then a requirement <code class=\"hljs\">foo = \"1.0.0-alpha\"</code> will allow\nupdating to the <code class=\"hljs\">beta</code> version. Note that this only works on the same release\nversion, <code class=\"hljs\">foo = \"1.0.0-alpha\"</code> will not allow updating to <code class=\"hljs\">foo = \"1.0.1-alpha\"</code>\nor <code class=\"hljs\">foo = \"1.0.1-beta\"</code>.</p>\n<p>Cargo will also upgrade automatically to semver-compatible released versions\nfrom prereleases. The requirement <code class=\"hljs\">foo = \"1.0.0-alpha\"</code> will allow updating to\n<code class=\"hljs\">foo = \"1.0.0\"</code> as well as <code class=\"hljs\">foo = \"1.2.0\"</code>.</p>\n<p>Beware that pre-release versions can be unstable, and as such care should be\ntaken when using them. Some projects may choose to publish breaking changes\nbetween pre-release versions. It is recommended to not use pre-release\ndependencies in a library if your library is not also a pre-release. Care\nshould also be taken when updating your <code class=\"hljs\">Cargo.lock</code>, and be prepared if a\npre-release update causes issues.</p>\n<p>The pre-release tag may be separated with periods to distinguish separate\ncomponents. Numeric components will use numeric comparison. For example,\n<code class=\"hljs\">1.0.0-alpha.4</code> will use numeric comparison for the <code class=\"hljs\">4</code> component. That means\nthat if <code class=\"hljs\">1.0.0-alpha.11</code> is published, that will be chosen as the greatest\nrelease. Non-numeric components are compared lexicographically.</p>\n<h3 id=\"version-metadata\"><a class=\"header\" href=\"#version-metadata\">Version metadata</a></h3>\n<p>SemVer has the concept of “version metadata” with a plus in the version, such\nas <code class=\"hljs\">1.0.0+21AF26D3</code>. This metadata is usually ignored, and should not be used\nin a version requirement. You should never publish multiple versions that\ndiffer only in the metadata tag.</p>\n<h2 id=\"other-constraints\"><a class=\"header\" href=\"#other-constraints\">Other constraints</a></h2>\n<p>Version requirements aren’t the only constraint that the resolver considers\nwhen selecting and unifying dependencies. The following sections cover some of\nthe other constraints that can affect resolution.</p>\n<h3 id=\"features-1\"><a class=\"header\" href=\"#features-1\">Features</a></h3>\n<p>For the purpose of generating <code class=\"hljs\">Cargo.lock</code>, the resolver builds the dependency\ngraph as-if all <a href=\"reference/features.html\">features</a> of all <a href=\"reference/workspaces.html\">workspace</a> members are enabled. This\nensures that any optional dependencies are available and properly resolved\nwith the rest of the graph when features are added or removed with the\n<a href=\"reference/features.html#command-line-feature-options\"><code class=\"hljs\">--features</code> command-line flag</a>.\nThe resolver runs a second time to determine the actual features used when\n<em>compiling</em> a crate, based on the features selected on the command-line.</p>\n<p>Dependencies are resolved with the union of all features enabled on them. For\nexample, if one package depends on the <a href=\"https://crates.io/crates/im\"><code class=\"hljs\">im</code></a> package with the <a href=\"https://github.com/bodil/im-rs/blob/v15.0.0/Cargo.toml#L46\"><code class=\"hljs\">serde</code>\ndependency</a> enabled and another package depends on it with the <a href=\"https://github.com/bodil/im-rs/blob/v15.0.0/Cargo.toml#L47\"><code class=\"hljs\">rayon</code>\ndependency</a> enabled, then <code class=\"hljs\">im</code> will be built with both features enabled, and\nthe <code class=\"hljs\">serde</code> and <code class=\"hljs\">rayon</code> crates will be included in the resolve graph. If no\npackages depend on <code class=\"hljs\">im</code> with those features, then those optional dependencies\nwill be ignored, and they will not affect resolution.</p>\n<p>When building multiple packages in a workspace (such as with <code class=\"hljs\">--workspace</code> or\nmultiple <code class=\"hljs\">-p</code> flags), the features of the dependencies of all of those\npackages are unified. If you have a circumstance where you want to avoid that\nunification for different workspace members, you will need to build them via\nseparate <code class=\"hljs\">cargo</code> invocations.</p>\n<p>The resolver will skip over versions of packages that are missing required\nfeatures. For example, if a package depends on version <code class=\"hljs\">^1</code> of <a href=\"https://crates.io/crates/regex\"><code class=\"hljs\">regex</code></a> with\nthe <a href=\"https://github.com/rust-lang/regex/blob/1.3.0/Cargo.toml#L56\"><code class=\"hljs\">perf</code> feature</a>, then the oldest version it can select is <code class=\"hljs\">1.3.0</code>,\nbecause versions prior to that did not contain the <code class=\"hljs\">perf</code> feature. Similarly,\nif a feature is removed from a new release, then packages that require that\nfeature will be stuck on the older releases that contain that feature. It is\ndiscouraged to remove features in a SemVer-compatible release. Beware that\noptional dependencies also define an implicit feature, so removing an optional\ndependency or making it non-optional can cause problems, see <a href=\"reference/semver.html#cargo-remove-opt-dep\">removing an\noptional dependency</a>.</p>\n<h4 id=\"feature-resolver-version-2-1\"><a class=\"header\" href=\"#feature-resolver-version-2-1\">Feature resolver version 2</a></h4>\n<p>When <code class=\"hljs\">resolver = \"2\"</code> is specified in <code class=\"hljs\">Cargo.toml</code> (see <a href=\"reference/resolver.html#resolver-versions\">resolver\nversions</a> below), a different feature resolver is used\nwhich uses a different algorithm for unifying features. The version <code class=\"hljs\">\"1\"</code>\nresolver will unify features for a package no matter where it is specified.\nThe version <code class=\"hljs\">\"2\"</code> resolver will avoid unifying features in the following\nsituations:</p>\n<ul>\n<li>\n<p>Features for target-specific dependencies are not enabled if the target is\nnot currently being built. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies.common]</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"1.0\"</span>\n<span class=\"hljs-attr\">features</span> = [<span class=\"hljs-string\">\"f1\"</span>]\n\n<span class=\"hljs-section\">[target.'cfg(windows)'.dependencies.common]</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"1.0\"</span>\n<span class=\"hljs-attr\">features</span> = [<span class=\"hljs-string\">\"f2\"</span>]\n</code></pre>\n<p>When building this example for a non-Windows platform, the <code class=\"hljs\">f2</code> feature will\n<em>not</em> be enabled.</p>\n</li>\n<li>\n<p>Features enabled on <a href=\"reference/specifying-dependencies.html#build-dependencies\">build-dependencies</a> or proc-macros will not be unified\nwhen those same dependencies are used as a normal dependency. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">log</span> = <span class=\"hljs-string\">\"0.4\"</span>\n\n<span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">log</span> = {version = <span class=\"hljs-string\">\"0.4\"</span>, features=[<span class=\"hljs-string\">'std'</span>]}\n</code></pre>\n<p>When building the build script, the <code class=\"hljs\">log</code> crate will be built with the <code class=\"hljs\">std</code>\nfeature. When building the library of your package, it will not enable the\nfeature.</p>\n</li>\n<li>\n<p>Features enabled on <a href=\"reference/specifying-dependencies.html#development-dependencies\">dev-dependencies</a> will not be unified when those same\ndependencies are used as a normal dependency, unless those dev-dependencies\nare currently being built. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">serde</span> = {version = <span class=\"hljs-string\">\"1.0\"</span>, default-features = <span class=\"hljs-literal\">false</span>}\n\n<span class=\"hljs-section\">[dev-dependencies]</span>\n<span class=\"hljs-attr\">serde</span> = {version = <span class=\"hljs-string\">\"1.0\"</span>, features = [<span class=\"hljs-string\">\"std\"</span>]}\n</code></pre>\n<p>In this example, the library will normally link against <code class=\"hljs\">serde</code> without the\n<code class=\"hljs\">std</code> feature. However, when built as a test or example, it will include the\n<code class=\"hljs\">std</code> feature. For example, <code class=\"hljs\">cargo test</code> or <code class=\"hljs\">cargo build --all-targets</code> will\nunify these features. Note that dev-dependencies in dependencies are always\nignored, this is only relevant for the top-level package or workspace\nmembers.</p>\n</li>\n</ul>\n<h3 id=\"links\"><a class=\"header\" href=\"#links\"><code>links</code></a></h3>\n<p>The <a href=\"reference/manifest.html#the-links-field\"><code class=\"hljs\">links</code> field</a> is used to ensure only one copy of a native library is\nlinked into a binary. The resolver will attempt to find a graph where there is\nonly one instance of each <code class=\"hljs\">links</code> name. If it is unable to find a graph that\nsatisfies that constraint, it will return an error.</p>\n<p>For example, it is an error if one package depends on <a href=\"https://crates.io/crates/libgit2-sys\"><code class=\"hljs\">libgit2-sys</code></a> version\n<code class=\"hljs\">0.11</code> and another depends on <code class=\"hljs\">0.12</code>, because Cargo is unable to unify those,\nbut they both link to the <code class=\"hljs\">git2</code> native library. Due to this requirement, it\nis encouraged to be very careful when making SemVer-incompatible releases with\nthe <code class=\"hljs\">links</code> field if your library is in common use.</p>\n<h3 id=\"yanked-versions\"><a class=\"header\" href=\"#yanked-versions\">Yanked versions</a></h3>\n<p><a href=\"reference/publishing.html#cargo-yank\">Yanked releases</a> are those that are marked that they should not be\nused. When the resolver is building the graph, it will ignore all yanked\nreleases unless they already exist in the <code class=\"hljs\">Cargo.lock</code> file or are explicitly\nrequested by the <a href=\"reference/../commands/cargo-update.html#option-cargo-update---precise\"><code class=\"hljs\">--precise</code></a> flag of <code class=\"hljs\">cargo update</code> (nightly only).</p>\n<h2 id=\"dependency-updates\"><a class=\"header\" href=\"#dependency-updates\">Dependency updates</a></h2>\n<p>Dependency resolution is automatically performed by all Cargo commands that\nneed to know about the dependency graph. For example, <a href=\"reference/../commands/cargo-build.html\"><code class=\"hljs\">cargo build</code></a> will run\nthe resolver to discover all the dependencies to build. After the first time\nit runs, the result is stored in the <code class=\"hljs\">Cargo.lock</code> file. Subsequent commands\nwill run the resolver, keeping dependencies locked to the versions in\n<code class=\"hljs\">Cargo.lock</code> <em>if it can</em>.</p>\n<p>If the dependency list in <code class=\"hljs\">Cargo.toml</code> has been modified, for example changing\nthe version of a dependency from <code class=\"hljs\">1.0</code> to <code class=\"hljs\">2.0</code>, then the resolver will select\na new version for that dependency that matches the new requirements. If that\nnew dependency introduces new requirements, those new requirements may also\ntrigger additional updates. The <code class=\"hljs\">Cargo.lock</code> file will be updated with the new\nresult. The <code class=\"hljs\">--locked</code> or <code class=\"hljs\">--frozen</code> flags can be used to change this behavior\nto prevent automatic updates when requirements change, and return an error\ninstead.</p>\n<p><a href=\"reference/../commands/cargo-update.html\"><code class=\"hljs\">cargo update</code></a> can be used to update the entries in <code class=\"hljs\">Cargo.lock</code> when new\nversions are published. Without any options, it will attempt to update all\npackages in the lock file. The <code class=\"hljs\">-p</code> flag can be used to target the update for\na specific package, and other flags such as <code class=\"hljs\">--recursive</code> or <code class=\"hljs\">--precise</code> can\nbe used to control how versions are selected.</p>\n<h2 id=\"overrides-1\"><a class=\"header\" href=\"#overrides-1\">Overrides</a></h2>\n<p>Cargo has several mechanisms to override dependencies within the graph. The\n<a href=\"reference/overriding-dependencies.html\">Overriding Dependencies</a> chapter goes into detail on how to use overrides.\nThe overrides appear as an overlay to a registry, replacing the patched\nversion with the new entry. Otherwise, resolution is performed like normal.</p>\n<h2 id=\"dependency-kinds\"><a class=\"header\" href=\"#dependency-kinds\">Dependency kinds</a></h2>\n<p>There are three kinds of dependencies in a package: normal, <a href=\"reference/specifying-dependencies.html#build-dependencies\">build</a>, and\n<a href=\"reference/specifying-dependencies.html#development-dependencies\">dev</a>. For the most part these are all treated the same from\nthe perspective of the resolver. One difference is that dev-dependencies for\nnon-workspace members are always ignored, and do not influence resolution.</p>\n<p><a href=\"reference/specifying-dependencies.html#platform-specific-dependencies\">Platform-specific dependencies</a> with the <code class=\"hljs\">[target]</code> table are resolved as-if\nall platforms are enabled. In other words, the resolver ignores the platform\nor <code class=\"hljs\">cfg</code> expression.</p>\n<h3 id=\"dev-dependency-cycles\"><a class=\"header\" href=\"#dev-dependency-cycles\">dev-dependency cycles</a></h3>\n<p>Usually the resolver does not allow cycles in the graph, but it does allow\nthem for <a href=\"reference/specifying-dependencies.html#development-dependencies\">dev-dependencies</a>. For example, project “foo” has a dev-dependency\non “bar”, which has a normal dependency on “foo” (usually as a “path”\ndependency). This is allowed because there isn’t really a cycle from the\nperspective of the build artifacts. In this example, the “foo” library is\nbuilt (which does not need “bar” because “bar” is only used for tests), and\nthen “bar” can be built depending on “foo”, then the “foo” tests can be built\nlinking to “bar”.</p>\n<p>Beware that this can lead to confusing errors. In the case of building library\nunit tests, there are actually two copies of the library linked into the final\ntest binary: the one that was linked with “bar”, and the one built that\ncontains the unit tests. Similar to the issues highlighted in the\n<a href=\"reference/resolver.html#version-incompatibility-hazards\">Version-incompatibility hazards</a> section, the types between the two are not\ncompatible. Be careful when exposing types of “foo” from “bar” in this\nsituation, since the “foo” unit tests won’t treat them the same as the local\ntypes.</p>\n<p>If possible, try to split your package into multiple packages and restructure\nit so that it remains strictly acyclic.</p>\n<h2 id=\"resolver-versions\"><a class=\"header\" href=\"#resolver-versions\">Resolver versions</a></h2>\n<p>A different feature resolver algorithm can be used by specifying the resolver\nversion in <code class=\"hljs\">Cargo.toml</code> like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-package\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"1.0.0\"</span>\n<span class=\"hljs-attr\">resolver</span> = <span class=\"hljs-string\">\"2\"</span>\n</code></pre>\n<p>The version <code class=\"hljs\">\"1\"</code> resolver is the original resolver that shipped with Cargo up to version 1.50.\nThe default is <code class=\"hljs\">\"2\"</code> if the root package specifies <a href=\"reference/manifest.html#the-edition-field\"><code class=\"hljs\">edition = \"2021\"</code></a> or a newer edition.\nOtherwise the default is <code class=\"hljs\">\"1\"</code>.</p>\n<p>The version <code class=\"hljs\">\"2\"</code> resolver introduces changes in <a href=\"reference/resolver.html#features\">feature\nunification</a>. See the <a href=\"reference/features.html#feature-resolver-version-2\">features chapter</a> for more\ndetails.</p>\n<p>The resolver is a global option that affects the entire workspace. The\n<code class=\"hljs\">resolver</code> version in dependencies is ignored, only the value in the top-level\npackage will be used. If using a <a href=\"reference/workspaces.html#virtual-workspace\">virtual workspace</a>, the version should be\nspecified in the <code class=\"hljs\">[workspace]</code> table, for example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[workspace]</span>\n<span class=\"hljs-attr\">members</span> = [<span class=\"hljs-string\">\"member1\"</span>, <span class=\"hljs-string\">\"member2\"</span>]\n<span class=\"hljs-attr\">resolver</span> = <span class=\"hljs-string\">\"2\"</span>\n</code></pre>\n<h2 id=\"recommendations\"><a class=\"header\" href=\"#recommendations\">Recommendations</a></h2>\n<p>The following are some recommendations for setting the version within your\npackage, and for specifying dependency requirements. These are general\nguidelines that should apply to common situations, but of course some\nsituations may require specifying unusual requirements.</p>\n<ul>\n<li>\n<p>Follow the <a href=\"reference/semver.html\">SemVer guidelines</a> when deciding how to update your version\nnumber, and whether or not you will need to make a SemVer-incompatible\nversion change.</p>\n</li>\n<li>\n<p>Use caret requirements for dependencies, such as <code class=\"hljs\">\"1.2.3\"</code>, for most\nsituations. This ensures that the resolver can be maximally flexible in\nchoosing a version while maintaining build compatibility.</p>\n<ul>\n<li>Specify all three components with the version you are currently using.\nThis helps set the minimum version that will be used, and ensures that\nother users won’t end up with an older version of the dependency that\nmight be missing something that your package requires.</li>\n<li>Avoid <code class=\"hljs\">*</code> requirements, as they are not allowed on <a href=\"https://crates.io/\">crates.io</a>, and they\ncan pull in SemVer-breaking changes during a normal <code class=\"hljs\">cargo update</code>.</li>\n<li>Avoid overly broad version requirements. For example, <code class=\"hljs\">&gt;=2.0.0</code> can pull\nin any SemVer-incompatible version, like version <code class=\"hljs\">5.0.0</code>, which can result\nin broken builds in the future.</li>\n<li>Avoid overly narrow version requirements if possible. For example, if you\nspecify a tilde requirement like <code class=\"hljs\">bar=\"~1.3\"</code>, and another package\nspecifies a requirement of <code class=\"hljs\">bar=\"1.4\"</code>, this will fail to resolve, even\nthough minor releases should be compatible.</li>\n</ul>\n</li>\n<li>\n<p>Try to keep the dependency versions up-to-date with the actual minimum\nversions that your library requires. For example, if you have a requirement\nof <code class=\"hljs\">bar=\"1.0.12\"</code>, and then in a future release you start using new features\nadded in the <code class=\"hljs\">1.1.0</code> release of “bar”, update your dependency requirement to\n<code class=\"hljs\">bar=\"1.1.0\"</code>.</p>\n<p>If you fail to do this, it may not be immediately obvious because Cargo can\nopportunistically choose the newest version when you run a blanket <code class=\"hljs\">cargo update</code>. However, if another user depends on your library, and runs <code class=\"hljs\">cargo update your-library</code>, it will <em>not</em> automatically update “bar” if it is\nlocked in their <code class=\"hljs\">Cargo.lock</code>. It will only update “bar” in that situation if\nthe dependency declaration is also updated. Failure to do so can cause\nconfusing build errors for the user using <code class=\"hljs\">cargo update your-library</code>.</p>\n</li>\n<li>\n<p>If two packages are tightly coupled, then an <code class=\"hljs\">=</code> dependency requirement may\nhelp ensure that they stay in sync. For example, a library with a companion\nproc-macro library will sometimes make assumptions between the two libraries\nthat won’t work well if the two are out of sync (and it is never expected to\nuse the two libraries independently). The parent library can use an <code class=\"hljs\">=</code>\nrequirement on the proc-macro, and re-export the macros for easy access.</p>\n</li>\n<li>\n<p><code class=\"hljs\">0.0.x</code> versions can be used for packages that are permanently unstable.</p>\n</li>\n</ul>\n<p>In general, the stricter you make the dependency requirements, the more likely\nit will be for the resolver to fail. Conversely, if you use requirements that\nare too loose, it may be possible for new versions to be published that will\nbreak the build.</p>\n<h2 id=\"troubleshooting\"><a class=\"header\" href=\"#troubleshooting\">Troubleshooting</a></h2>\n<p>The following illustrates some problems you may experience, and some possible\nsolutions.</p>\n<h3 id=\"why-was-a-dependency-included\"><a class=\"header\" href=\"#why-was-a-dependency-included\">Why was a dependency included?</a></h3>\n<p>Say you see dependency <code class=\"hljs\">rand</code> in the <code class=\"hljs\">cargo check</code> output but don’t think its needed and want to understand why its being pulled in.</p>\n<p>You can run</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo tree --workspace --target all --all-features --invert rand</span>\nrand v0.8.5\n└── ...\n\nrand v0.8.5\n└── ...\n</code></pre>\n<h3 id=\"why-was-that-feature-on-this-dependency-enabled\"><a class=\"header\" href=\"#why-was-that-feature-on-this-dependency-enabled\">Why was that feature on this dependency enabled?</a></h3>\n<p>You might identify that it was an activated feature that caused <code class=\"hljs\">rand</code> to show up.  <strong>To figure out which package activated the feature, you can add the <code class=\"hljs\">--edges features</code></strong></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo tree --workspace --target all --all-features --edges features --invert rand</span>\nrand v0.8.5\n└── ...\n\nrand v0.8.5\n└── ...\n</code></pre>\n<h3 id=\"unexpected-dependency-duplication\"><a class=\"header\" href=\"#unexpected-dependency-duplication\">Unexpected dependency duplication</a></h3>\n<p>You see multiple instances of <code class=\"hljs\">rand</code> when you run</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo tree --workspace --target all --all-features --duplicates</span>\nrand v0.7.3\n└── ...\n\nrand v0.8.5\n└── ...\n</code></pre>\n<p>The resolver algorithm has converged on a solution that includes two copies of a\ndependency when one would suffice. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Package A</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"0.7\"</span>\n\n<span class=\"hljs-comment\"># Package B</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"&gt;=0.6\"</span>  <span class=\"hljs-comment\"># <span class=\"hljs-doctag\">note:</span> open requirements such as this are discouraged</span>\n</code></pre>\n<p>In this example, Cargo may build two copies of the <code class=\"hljs\">rand</code> crate, even though a\nsingle copy at version <code class=\"hljs\">0.7.3</code> would meet all requirements. This is because the\nresolver’s algorithm favors building the latest available version of <code class=\"hljs\">rand</code> for\nPackage B, which is <code class=\"hljs\">0.8.5</code> at the time of this writing, and that is\nincompatible with Package A’s specification. The resolver’s algorithm does not\ncurrently attempt to “deduplicate” in this situation.</p>\n<p>The use of open-ended version requirements like <code class=\"hljs\">&gt;=0.6</code> is discouraged in Cargo.\nBut, if you run into this situation, the <a href=\"reference/../commands/cargo-update.html\"><code class=\"hljs\">cargo update</code></a> command with the\n<code class=\"hljs\">--precise</code> flag can be used to manually remove such duplications.</p>\n<h3 id=\"why-wasnt-a-newer-version-selected\"><a class=\"header\" href=\"#why-wasnt-a-newer-version-selected\">Why wasn’t a newer version selected?</a></h3>\n<p>Say you noticed that the latest version of a dependency wasn’t selected when you ran:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo update</span>\n</code></pre>\n<p>You can enable some extra logging to see why this happened:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> env CARGO_LOG=cargo::core::resolver=trace cargo update</span>\n</code></pre>\n<p><strong>Note:</strong> Cargo log targets and levels may change over time.</p>\n<h3 id=\"semver-breaking-patch-release-breaks-the-build\"><a class=\"header\" href=\"#semver-breaking-patch-release-breaks-the-build\">SemVer-breaking patch release breaks the build</a></h3>\n<p>Sometimes a project may inadvertently publish a point release with a\nSemVer-breaking change. When users update with <code class=\"hljs\">cargo update</code>, they will pick\nup this new release, and then their build may break. In this situation, it is\nrecommended that the project should <a href=\"reference/publishing.html#cargo-yank\">yank</a> the release, and either remove the\nSemVer-breaking change, or publish it as a new SemVer-major version increase.</p>\n<p>If the change happened in a third-party project, if possible try to\n(politely!) work with the project to resolve the issue.</p>\n<p>While waiting for the release to be yanked, some workarounds depend on the\ncircumstances:</p>\n<ul>\n<li>If your project is the end product (such as a binary executable), just avoid\nupdating the offending package in <code class=\"hljs\">Cargo.lock</code>. This can be done with the\n<code class=\"hljs\">--precise</code> flag in <a href=\"reference/../commands/cargo-update.html\"><code class=\"hljs\">cargo update</code></a>.</li>\n<li>If you publish a binary on <a href=\"https://crates.io/\">crates.io</a>, then you can temporarily add an <code class=\"hljs\">=</code>\nrequirement to force the dependency to a specific good version.\n<ul>\n<li>Binary projects can alternatively recommend users to use the <code class=\"hljs\">--locked</code>\nflag with <a href=\"reference/../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> to use the original <code class=\"hljs\">Cargo.lock</code> that contains\nthe known good version.</li>\n</ul>\n</li>\n<li>Libraries may also consider publishing a temporary new release with stricter\nrequirements that avoid the troublesome dependency. You may want to consider\nusing range requirements (instead of <code class=\"hljs\">=</code>) to avoid overly-strict\nrequirements that may conflict with other packages using the same\ndependency. Once the problem has been resolved, you can publish another\npoint release that relaxes the dependency back to a caret requirement.</li>\n<li>If it looks like the third-party project is unable or unwilling to yank the\nrelease, then one option is to update your code to be compatible with the\nchanges, and update the dependency requirement to set the minimum version to\nthe new release. You will also need to consider if this is a SemVer-breaking\nchange of your own library, for example if it exposes types from the\ndependency.</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"semver-compatibility-2\"><a class=\"header\" href=\"#semver-compatibility-2\">SemVer Compatibility</a></h1>\n<p>This chapter provides details on what is conventionally considered a\ncompatible or breaking SemVer change for new releases of a package. See the\n<a href=\"reference/resolver.html#semver-compatibility\">SemVer compatibility</a> section for details on what SemVer is, and how Cargo\nuses it to ensure compatibility of libraries.</p>\n<p>These are only <em>guidelines</em>, and not necessarily hard-and-fast rules that all\nprojects will obey. The <a href=\"reference/semver.html#change-categories\">Change categories</a> section details how this guide\nclassifies the level and severity of a change. Most of this guide focuses on\nchanges that will cause <code class=\"hljs\">cargo</code> and <code class=\"hljs\">rustc</code> to fail to build something that\npreviously worked. Almost every change carries some risk that it will\nnegatively affect the runtime behavior, and for those cases it is usually a\njudgment call by the project maintainers whether or not it is a\nSemVer-incompatible change.</p>\n<h2 id=\"change-categories\"><a class=\"header\" href=\"#change-categories\">Change categories</a></h2>\n<p>All of the policies listed below are categorized by the level of change:</p>\n<ul>\n<li><strong>Major change</strong>: a change that requires a major SemVer bump.</li>\n<li><strong>Minor change</strong>: a change that requires only a minor SemVer bump.</li>\n<li><strong>Possibly-breaking change</strong>: a change that some projects may consider major\nand others consider minor.</li>\n</ul>\n<p>The “Possibly-breaking” category covers changes that have the <em>potential</em> to\nbreak during an update, but may not necessarily cause a breakage. The impact\nof these changes should be considered carefully. The exact nature will depend\non the change and the principles of the project maintainers.</p>\n<p>Some projects may choose to only bump the patch number on a minor change. It\nis encouraged to follow the SemVer spec, and only apply bug fixes in patch\nreleases. However, a bug fix may require an API change that is marked as a\n“minor change”, and shouldn’t affect compatibility. This guide does not take a\nstance on how each individual “minor change” should be treated, as the\ndifference between minor and patch changes are conventions that depend on the\nnature of the change.</p>\n<p>Some changes are marked as “minor”, even though they carry the potential risk\nof breaking a build. This is for situations where the potential is extremely\nlow, and the potentially breaking code is unlikely to be written in idiomatic\nRust, or is specifically discouraged from use.</p>\n<p>This guide uses the terms “major” and “minor” assuming this relates to a\n“1.0.0” release or later. Initial development releases starting with “0.y.z”\ncan treat changes in “y” as a major release, and “z” as a minor release.\n“0.0.z” releases are always major changes. This is because Cargo uses the\nconvention that only changes in the left-most non-zero component are\nconsidered incompatible.</p>\n<ul>\n<li>API compatibility\n<ul>\n<li>Items\n<ul>\n<li><a href=\"reference/semver.html#item-remove\">Major: renaming/moving/removing any public items</a></li>\n<li><a href=\"reference/semver.html#item-new\">Minor: adding new public items</a></li>\n</ul>\n</li>\n<li>Types\n<ul>\n<li><a href=\"reference/semver.html#type-layout\">Major: Changing the alignment, layout, or size of a well-defined type</a></li>\n</ul>\n</li>\n<li>Structs\n<ul>\n<li><a href=\"reference/semver.html#struct-add-private-field-when-public\">Major: adding a private struct field when all current fields are public</a></li>\n<li><a href=\"reference/semver.html#struct-add-public-field-when-no-private\">Major: adding a public field when no private field exists</a></li>\n<li><a href=\"reference/semver.html#struct-private-fields-with-private\">Minor: adding or removing private fields when at least one already exists</a></li>\n<li><a href=\"reference/semver.html#struct-tuple-normal-with-private\">Minor: going from a tuple struct with all private fields (with at least one field) to a normal struct, or vice versa</a></li>\n</ul>\n</li>\n<li>Enums\n<ul>\n<li><a href=\"reference/semver.html#enum-variant-new\">Major: adding new enum variants (without <code class=\"hljs\">non_exhaustive</code>)</a></li>\n<li><a href=\"reference/semver.html#enum-fields-new\">Major: adding new fields to an enum variant</a></li>\n</ul>\n</li>\n<li>Traits\n<ul>\n<li><a href=\"reference/semver.html#trait-new-item-no-default\">Major: adding a non-defaulted trait item</a></li>\n<li><a href=\"reference/semver.html#trait-item-signature\">Major: any change to trait item signatures</a></li>\n<li><a href=\"reference/semver.html#trait-new-default-item\">Possibly-breaking: adding a defaulted trait item</a></li>\n<li><a href=\"reference/semver.html#trait-object-safety\">Major: adding a trait item that makes the trait non-object safe</a></li>\n<li><a href=\"reference/semver.html#trait-new-parameter-no-default\">Major: adding a type parameter without a default</a></li>\n<li><a href=\"reference/semver.html#trait-new-parameter-default\">Minor: adding a defaulted trait type parameter</a></li>\n</ul>\n</li>\n<li>Implementations\n<ul>\n<li><a href=\"reference/semver.html#impl-item-new\">Possibly-breaking change: adding any inherent items</a></li>\n</ul>\n</li>\n<li>Generics\n<ul>\n<li><a href=\"reference/semver.html#generic-bounds-tighten\">Major: tightening generic bounds</a></li>\n<li><a href=\"reference/semver.html#generic-bounds-loosen\">Minor: loosening generic bounds</a></li>\n<li><a href=\"reference/semver.html#generic-new-default\">Minor: adding defaulted type parameters</a></li>\n<li><a href=\"reference/semver.html#generic-generalize-identical\">Minor: generalizing a type to use generics (with identical types)</a></li>\n<li><a href=\"reference/semver.html#generic-generalize-different\">Major: generalizing a type to use generics (with possibly different types)</a></li>\n<li><a href=\"reference/semver.html#generic-more-generic\">Minor: changing a generic type to a more generic type</a></li>\n</ul>\n</li>\n<li>Functions\n<ul>\n<li><a href=\"reference/semver.html#fn-change-arity\">Major: adding/removing function parameters</a></li>\n<li><a href=\"reference/semver.html#fn-generic-new\">Possibly-breaking: introducing a new function type parameter</a></li>\n<li><a href=\"reference/semver.html#fn-generalize-compatible\">Minor: generalizing a function to use generics (supporting original type)</a></li>\n<li><a href=\"reference/semver.html#fn-generalize-mismatch\">Major: generalizing a function to use generics with type mismatch</a></li>\n<li><a href=\"reference/semver.html#fn-unsafe-safe\">Minor: making an <code class=\"hljs\">unsafe</code> function safe</a></li>\n</ul>\n</li>\n<li>Attributes\n<ul>\n<li><a href=\"reference/semver.html#attr-no-std-to-std\">Major: switching from <code class=\"hljs\">no_std</code> support to requiring <code class=\"hljs\">std</code></a></li>\n<li><a href=\"reference/semver.html#attr-adding-non-exhaustive\">Major: adding <code class=\"hljs\">non_exhaustive</code> to an existing enum, variant, or struct with no private fields</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Tooling and environment compatibility\n<ul>\n<li><a href=\"reference/semver.html#env-new-rust\">Possibly-breaking: changing the minimum version of Rust required</a></li>\n<li><a href=\"reference/semver.html#env-change-requirements\">Possibly-breaking: changing the platform and environment requirements</a></li>\n<li><a href=\"reference/semver.html#new-lints\">Minor: introducing new lints</a></li>\n<li>Cargo\n<ul>\n<li><a href=\"reference/semver.html#cargo-feature-add\">Minor: adding a new Cargo feature</a></li>\n<li><a href=\"reference/semver.html#cargo-feature-remove\">Major: removing a Cargo feature</a></li>\n<li><a href=\"reference/semver.html#cargo-feature-remove-another\">Major: removing a feature from a feature list if that changes functionality or public items</a></li>\n<li><a href=\"reference/semver.html#cargo-remove-opt-dep\">Possibly-breaking: removing an optional dependency</a></li>\n<li><a href=\"reference/semver.html#cargo-change-dep-feature\">Minor: changing dependency features</a></li>\n<li><a href=\"reference/semver.html#cargo-dep-add\">Minor: adding dependencies</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"reference/semver.html#application-compatibility\">Application compatibility</a></li>\n</ul>\n<h2 id=\"api-compatibility\"><a class=\"header\" href=\"#api-compatibility\">API compatibility</a></h2>\n<p>All of the examples below contain three parts: the original code, the code\nafter it has been modified, and an example usage of the code that could appear\nin another project. In a minor change, the example usage should successfully\nbuild with both the before and after versions.</p>\n<h3 id=\"item-remove\"><a class=\"header\" href=\"#item-remove\">Major: renaming/moving/removing any public items</a></h3>\n<p>The absence of a publicly exposed <a href=\"reference/../../reference/items.html\">item</a> will cause any uses of that item to\nfail to compile.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-comment\">// ... item has been removed</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    updated_crate::foo(); <span class=\"hljs-comment\">// Error: cannot find function `foo`</span>\n}</code></pre>\n<p>This includes adding any sort of <a href=\"reference/../../reference/conditional-compilation.html#the-cfg-attribute\"><code class=\"hljs\">cfg</code> attribute</a> which can change which\nitems or behavior is available based on <a href=\"reference/../../reference/conditional-compilation.html\">conditional compilation</a>.</p>\n<p>Mitigating strategies:</p>\n<ul>\n<li>Mark items to be removed as <a href=\"reference/../../reference/attributes/diagnostics.html#the-deprecated-attribute\">deprecated</a>, and then remove them at a later\ndate in a SemVer-breaking release.</li>\n<li>Mark renamed items as <a href=\"reference/../../reference/attributes/diagnostics.html#the-deprecated-attribute\">deprecated</a>, and use a <a href=\"reference/../../reference/items/use-declarations.html\"><code class=\"hljs\">pub use</code></a> item to re-export\nto the old name.</li>\n</ul>\n<h3 id=\"item-new\"><a class=\"header\" href=\"#item-new\">Minor: adding new public items</a></h3>\n<p>Adding new, public <a href=\"reference/../../reference/items.html\">items</a> is a minor change.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-comment\">// ... absence of item</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will safely work.</span>\n<span class=\"hljs-comment\">// `foo` is not used since it didn't previously exist.</span></code></pre>\n<p>Note that in some rare cases this can be a <strong>breaking change</strong> due to glob\nimports. For example, if you add a new trait, and a project has used a glob\nimport that brings that trait into scope, and the new trait introduces an\nassociated item that conflicts with any types it is implemented on, this can\ncause a compile-time error due to the ambiguity. Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// Breaking change example</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-comment\">// ... absence of trait</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">NewTrait</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {}\n}\n\n<span class=\"hljs-keyword\">impl</span> NewTrait <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i32</span> {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::*;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">LocalTrait</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {}\n}\n\n<span class=\"hljs-keyword\">impl</span> LocalTrait <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i32</span> {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-number\">123i32</span>.foo(); <span class=\"hljs-comment\">// Error:  multiple applicable items in scope</span>\n}</code></pre>\n<p>This is not considered a major change because conventionally glob imports are\na known forwards-compatibility hazard. Glob imports of items from external\ncrates should be avoided.</p>\n<h3 id=\"type-layout\"><a class=\"header\" href=\"#type-layout\">Major: Changing the alignment, layout, or size of a well-defined type</a></h3>\n<p>It is a breaking change to change the alignment, layout, or size of a type that was previously well-defined.</p>\n<p>In general, types that use the <a href=\"reference/../../reference/type-layout.html#the-default-representation\">the default representation</a> do not have a well-defined alignment, layout, or size.\nThe compiler is free to alter the alignment, layout, or size, so code should not make any assumptions about it.</p>\n<blockquote>\n<p><strong>Note</strong>: It may be possible for external crates to break if they make assumptions about the alignment, layout, or size of a type even if it is not well-defined.\nThis is not considered a SemVer breaking change since those assumptions should not be made.</p>\n</blockquote>\n<p>Some examples of changes that are not a breaking change are (assuming no other rules in this guide are violated):</p>\n<ul>\n<li>Adding, removing, reordering, or changing fields of a default representation struct, union, or enum in such a way that the change follows the other rules in this guide (for example, using <code class=\"hljs\">non_exhaustive</code> to allow those changes, or changes to private fields that are already private).\nSee <a href=\"reference/semver.html#struct-add-private-field-when-public\">struct-add-private-field-when-public</a>, <a href=\"reference/semver.html#struct-add-public-field-when-no-private\">struct-add-public-field-when-no-private</a>, <a href=\"reference/semver.html#struct-private-fields-with-private\">struct-private-fields-with-private</a>, <a href=\"reference/semver.html#enum-fields-new\">enum-fields-new</a>.</li>\n<li>Adding variants to a default representation enum, if the enum uses <code class=\"hljs\">non_exhaustive</code>.\nThis may change the alignment or size of the enumeration, but those are not well-defined.\nSee <a href=\"reference/semver.html#enum-variant-new\">enum-variant-new</a>.</li>\n<li>Adding, removing, reordering, or changing private fields of a <code class=\"hljs\">repr(C)</code> struct, union, or enum, following the other rules in this guide (for example, using <code class=\"hljs\">non_exhaustive</code>, or adding private fields when other private fields already exist).\nSee <a href=\"reference/semver.html#repr-c-private-change\">repr-c-private-change</a>.</li>\n<li>Adding variants to a <code class=\"hljs\">repr(C)</code> enum, if the enum uses <code class=\"hljs\">non_exhaustive</code>.\nSee <a href=\"reference/semver.html#repr-c-enum-variant-new\">repr-c-enum-variant-new</a>.</li>\n<li>Adding <code class=\"hljs\">repr(C)</code> to a default representation struct, union, or enum.\nSee <a href=\"reference/semver.html#repr-c-add\">repr-c-add</a>.</li>\n<li>Adding <code class=\"hljs\">repr(&lt;int&gt;)</code> <a href=\"reference/../../reference/type-layout.html#primitive-representations\">primitive representation</a> to an enum.\nSee <a href=\"reference/semver.html#repr-int-enum-add\">repr-int-enum-add</a>.</li>\n<li>Adding <code class=\"hljs\">repr(transparent)</code> to a default representation struct or enum.\nSee <a href=\"reference/semver.html#repr-transparent-add\">repr-transparent-add</a>.</li>\n</ul>\n<p>Types that use the <a href=\"reference/../../reference/type-layout.html#representations\"><code class=\"hljs\">repr</code> attribute</a> can be said to have an alignment and layout that is defined in some way that code may make some assumptions about that may break as a result of changing that type.</p>\n<p>In some cases, types with a <code class=\"hljs\">repr</code> attribute may not have an alignment, layout, or size that is well-defined.\nIn these cases, it may be safe to make changes to the types, though care should be exercised.\nFor example, types with private fields that do not otherwise document their alignment, layout, or size guarantees cannot be relied upon by external crates since the public API does not fully define the alignment, layout, or size of the type.</p>\n<p>A common example where a type with <em>private</em> fields is well-defined is a type with a single private field with a generic type, using <code class=\"hljs\">repr(transparent)</code>,\nand the prose of the documentation discusses that it is transparent to the generic type.\nFor example, see <a href=\"reference/../../std/cell/struct.UnsafeCell.html#memory-layout\"><code class=\"hljs\">UnsafeCell</code></a>.</p>\n<p>Some examples of breaking changes are:</p>\n<ul>\n<li>Adding <code class=\"hljs\">repr(packed)</code> to a struct or union.\nSee <a href=\"reference/semver.html#repr-packed-add\">repr-packed-add</a>.</li>\n<li>Adding <code class=\"hljs\">repr(align)</code> to a struct, union, or enum.\nSee <a href=\"reference/semver.html#repr-align-add\">repr-align-add</a>.</li>\n<li>Removing <code class=\"hljs\">repr(packed)</code> from a struct or union.\nSee <a href=\"reference/semver.html#repr-packed-remove\">repr-packed-remove</a>.</li>\n<li>Changing the value N of <code class=\"hljs\">repr(packed(N))</code> if that changes the alignment or layout.\nSee <a href=\"reference/semver.html#repr-packed-n-change\">repr-packed-n-change</a>.</li>\n<li>Changing the value N of <code class=\"hljs\">repr(align(N))</code> if that changes the alignment.\nSee <a href=\"reference/semver.html#repr-align-n-change\">repr-align-n-change</a>.</li>\n<li>Removing <code class=\"hljs\">repr(align)</code> from a struct, union, or enum.\nSee <a href=\"reference/semver.html#repr-align-remove\">repr-align-remove</a>.</li>\n<li>Changing the order of public fields of a <code class=\"hljs\">repr(C)</code> type.\nSee <a href=\"reference/semver.html#repr-c-shuffle\">repr-c-shuffle</a>.</li>\n<li>Removing <code class=\"hljs\">repr(C)</code> from a struct, union, or enum.\nSee <a href=\"reference/semver.html#repr-c-remove\">repr-c-remove</a>.</li>\n<li>Removing <code class=\"hljs\">repr(&lt;int&gt;)</code> from an enum.\nSee <a href=\"reference/semver.html#repr-int-enum-remove\">repr-int-enum-remove</a>.</li>\n<li>Changing the primitive representation of a <code class=\"hljs\">repr(&lt;int&gt;)</code> enum.\nSee <a href=\"reference/semver.html#repr-int-enum-change\">repr-int-enum-change</a>.</li>\n<li>Removing <code class=\"hljs\">repr(transparent)</code> from a struct or enum.\nSee <a href=\"reference/semver.html#repr-transparent-remove\">repr-transparent-remove</a>.</li>\n</ul>\n<h4 id=\"repr-c-private-change\"><a class=\"header\" href=\"#repr-c-private-change\">Minor: <code>repr(C)</code> add, remove, or change a private field</a></h4>\n<p>It is usually safe to add, remove, or change a private field of a <code class=\"hljs\">repr(C)</code> struct, union, or enum, assuming it follows the other guidelines in this guide (see <a href=\"reference/semver.html#struct-add-private-field-when-public\">struct-add-private-field-when-public</a>, <a href=\"reference/semver.html#struct-add-public-field-when-no-private\">struct-add-public-field-when-no-private</a>, <a href=\"reference/semver.html#struct-private-fields-with-private\">struct-private-fields-with-private</a>, <a href=\"reference/semver.html#enum-fields-new\">enum-fields-new</a>).</p>\n<p>For example, adding private fields can only be done if there are already other private fields, or it is <code class=\"hljs\">non_exhaustive</code>.\nPublic fields may be added if there are private fields, or it is <code class=\"hljs\">non_exhaustive</code>, and the addition does not alter the layout of the other fields.</p>\n<p>However, this may change the size and alignment of the type.\nCare should be taken if the size or alignment changes.\nCode should not make assumptions about the size or alignment of types with private fields or <code class=\"hljs\">non_exhaustive</code> unless it has a documented size or alignment.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[derive(Default)]</span>\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Example</span></span> {\n    <span class=\"hljs-keyword\">pub</span> f1: <span class=\"hljs-built_in\">i32</span>,\n    f2: <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-comment\">// a private field</span>\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[derive(Default)]</span>\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Example</span></span> {\n    <span class=\"hljs-keyword\">pub</span> f1: <span class=\"hljs-built_in\">i32</span>,\n    f2: <span class=\"hljs-built_in\">i32</span>,\n    f3: <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-comment\">// a new field</span>\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will safely work.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> Users should not make assumptions about the size or alignment</span>\n    <span class=\"hljs-comment\">// since they are not documented.</span>\n    <span class=\"hljs-keyword\">let</span> f = updated_crate::Example::default();\n}</code></pre>\n<h4 id=\"repr-c-enum-variant-new\"><a class=\"header\" href=\"#repr-c-enum-variant-new\">Minor: <code>repr(C)</code> add enum variant</a></h4>\n<p>It is usually safe to add variants to a <code class=\"hljs\">repr(C)</code> enum, if the enum uses <code class=\"hljs\">non_exhaustive</code>.\nSee <a href=\"reference/semver.html#enum-variant-new\">enum-variant-new</a> for more discussion.</p>\n<p>Note that this may be a breaking change since it changes the size and alignment of the type.\nSee <a href=\"reference/semver.html#repr-c-private-change\">repr-c-private-change</a> for similar concerns.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-meta\">#[non_exhaustive]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Example</span></span> {\n    Variant1 { f1: <span class=\"hljs-built_in\">i16</span> },\n    Variant2 { f1: <span class=\"hljs-built_in\">i32</span> },\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-meta\">#[non_exhaustive]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Example</span></span> {\n    Variant1 { f1: <span class=\"hljs-built_in\">i16</span> },\n    Variant2 { f1: <span class=\"hljs-built_in\">i32</span> },\n    Variant3 { f1: <span class=\"hljs-built_in\">i64</span> }, <span class=\"hljs-comment\">// added</span>\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will safely work.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> Users should not make assumptions about the size or alignment</span>\n    <span class=\"hljs-comment\">// since they are not specified. For example, this raised the size from 8</span>\n    <span class=\"hljs-comment\">// to 16 bytes.</span>\n    <span class=\"hljs-keyword\">let</span> f = updated_crate::Example::Variant2 { f1: <span class=\"hljs-number\">123</span> };\n}</code></pre>\n<h4 id=\"repr-c-add\"><a class=\"header\" href=\"#repr-c-add\">Minor: Adding <code>repr(C)</code> to a default representation</a></h4>\n<p>It is safe to add <code class=\"hljs\">repr(C)</code> to a struct, union, or enum with <a href=\"reference/../../reference/type-layout.html#the-default-representation\">the default representation</a>.\nThis is safe because users should not make assumptions about the alignment, layout, or size of types with with the default representation.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Example</span></span> {\n    <span class=\"hljs-keyword\">pub</span> f1: <span class=\"hljs-built_in\">i32</span>,\n    <span class=\"hljs-keyword\">pub</span> f2: <span class=\"hljs-built_in\">i16</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[repr(C)]</span> <span class=\"hljs-comment\">// added</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Example</span></span> {\n    <span class=\"hljs-keyword\">pub</span> f1: <span class=\"hljs-built_in\">i32</span>,\n    <span class=\"hljs-keyword\">pub</span> f2: <span class=\"hljs-built_in\">i16</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will safely work.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> f = updated_crate::Example { f1: <span class=\"hljs-number\">123</span>, f2: <span class=\"hljs-number\">456</span> };\n}</code></pre>\n<h4 id=\"repr-int-enum-add\"><a class=\"header\" href=\"#repr-int-enum-add\">Minor: Adding <code>repr(&lt;int&gt;)</code> to an enum</a></h4>\n<p>It is safe to add <code class=\"hljs\">repr(&lt;int&gt;)</code> <a href=\"reference/../../reference/type-layout.html#primitive-representations\">primitive representation</a> to an enum with <a href=\"reference/../../reference/type-layout.html#the-default-representation\">the default representation</a>.\nThis is safe because users should not make assumptions about the alignment, layout, or size of an enum with the default representation.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">E</span></span> {\n    Variant1,\n    Variant2(<span class=\"hljs-built_in\">i32</span>),\n    Variant3 { f1: <span class=\"hljs-built_in\">f64</span> },\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[repr(i32)]</span> <span class=\"hljs-comment\">// added</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">E</span></span> {\n    Variant1,\n    Variant2(<span class=\"hljs-built_in\">i32</span>),\n    Variant3 { f1: <span class=\"hljs-built_in\">f64</span> },\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will safely work.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = updated_crate::E::Variant3 { f1: <span class=\"hljs-number\">1.23</span> };\n}</code></pre>\n<h4 id=\"repr-transparent-add\"><a class=\"header\" href=\"#repr-transparent-add\">Minor: Adding <code>repr(transparent)</code> to a default representation struct or enum</a></h4>\n<p>It is safe to add <code class=\"hljs\">repr(transparent)</code> to a struct or enum with <a href=\"reference/../../reference/type-layout.html#the-default-representation\">the default representation</a>.\nThis is safe because users should not make assumptions about the alignment, layout, or size of a struct or enum with the default representation.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[derive(Default)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Example</span></span>&lt;T&gt;(T);\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[derive(Default)]</span>\n<span class=\"hljs-meta\">#[repr(transparent)]</span> <span class=\"hljs-comment\">// added</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Example</span></span>&lt;T&gt;(T);\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will safely work.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = updated_crate::Example::&lt;<span class=\"hljs-built_in\">i32</span>&gt;::default();\n}</code></pre>\n<h4 id=\"repr-packed-add\"><a class=\"header\" href=\"#repr-packed-add\">Major: Adding <code>repr(packed)</code> to a struct or union</a></h4>\n<p>It is a breaking change to add <code class=\"hljs\">repr(packed)</code> to a struct or union.\nMaking a type <code class=\"hljs\">repr(packed)</code> makes changes that can break code, such as being invalid to take a reference to a field, or causing truncation of disjoint closure captures.</p>\n<!-- TODO: If all fields are private, should this be safe to do? -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Example</span></span> {\n    <span class=\"hljs-keyword\">pub</span> f1: <span class=\"hljs-built_in\">u8</span>,\n    <span class=\"hljs-keyword\">pub</span> f2: <span class=\"hljs-built_in\">u16</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[repr(packed)]</span> <span class=\"hljs-comment\">// added</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Example</span></span> {\n    <span class=\"hljs-keyword\">pub</span> f1: <span class=\"hljs-built_in\">u8</span>,\n    <span class=\"hljs-keyword\">pub</span> f2: <span class=\"hljs-built_in\">u16</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> f = updated_crate::Example { f1: <span class=\"hljs-number\">1</span>, f2: <span class=\"hljs-number\">2</span> };\n    <span class=\"hljs-keyword\">let</span> x = &amp;f.f2; <span class=\"hljs-comment\">// Error: reference to packed field is unaligned</span>\n}</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Example</span></span>(<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-built_in\">i32</span>);\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[repr(packed)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Example</span></span>(<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-built_in\">i32</span>);\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> f = updated_crate::Example(<span class=\"hljs-number\">123</span>, <span class=\"hljs-number\">456</span>);\n    <span class=\"hljs-keyword\">let</span> c = || {\n        <span class=\"hljs-comment\">// Without repr(packed), the closure precisely captures `&amp;f.0`.</span>\n        <span class=\"hljs-comment\">// With repr(packed), the closure captures `&amp;f` to avoid undefined behavior.</span>\n        <span class=\"hljs-keyword\">let</span> a = f.<span class=\"hljs-number\">0</span>;\n    };\n    f.<span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">789</span>; <span class=\"hljs-comment\">// Error: cannot assign to `f.1` because it is borrowed</span>\n    c();\n}</code></pre>\n<h4 id=\"repr-align-add\"><a class=\"header\" href=\"#repr-align-add\">Major: Adding <code>repr(align)</code> to a struct, union, or enum</a></h4>\n<p>It is a breaking change to add <code class=\"hljs\">repr(align)</code> to a struct, union, or enum.\nMaking a type <code class=\"hljs\">repr(align)</code> would break any use of that type in a <code class=\"hljs\">repr(packed)</code> type because that combination is not allowed.</p>\n<!-- TODO: This seems like it should be extraordinarily rare. Should there be any exceptions carved out for this? -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Aligned</span></span> {\n    <span class=\"hljs-keyword\">pub</span> a: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[repr(align(8))]</span> <span class=\"hljs-comment\">// added</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Aligned</span></span> {\n    <span class=\"hljs-keyword\">pub</span> a: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Aligned;\n\n<span class=\"hljs-meta\">#[repr(packed)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Packed</span></span> { <span class=\"hljs-comment\">// Error: packed type cannot transitively contain a `#[repr(align)]` type</span>\n    f1: Aligned,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> p = Packed {\n        f1: Aligned { a: <span class=\"hljs-number\">123</span> },\n    };\n}</code></pre>\n<h4 id=\"repr-packed-remove\"><a class=\"header\" href=\"#repr-packed-remove\">Major: Removing <code>repr(packed)</code> from a struct or union</a></h4>\n<p>It is a breaking change to remove <code class=\"hljs\">repr(packed)</code> from a struct or union.\nThis may change the alignment or layout that extern crates are relying on.</p>\n<p>If any fields are public, then removing <code class=\"hljs\">repr(packed)</code> may change the way disjoint closure captures work.\nIn some cases, this can cause code to break, similar to those outlined in the <a href=\"reference/../../edition-guide/rust-2021/disjoint-capture-in-closures.html\">edition guide</a>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[repr(C, packed)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Packed</span></span> {\n    <span class=\"hljs-keyword\">pub</span> a: <span class=\"hljs-built_in\">u8</span>,\n    <span class=\"hljs-keyword\">pub</span> b: <span class=\"hljs-built_in\">u16</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[repr(C)]</span> <span class=\"hljs-comment\">// removed packed</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Packed</span></span> {\n    <span class=\"hljs-keyword\">pub</span> a: <span class=\"hljs-built_in\">u8</span>,\n    <span class=\"hljs-keyword\">pub</span> b: <span class=\"hljs-built_in\">u16</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Packed;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> p = Packed { a: <span class=\"hljs-number\">1</span>, b: <span class=\"hljs-number\">2</span> };\n    <span class=\"hljs-comment\">// Some assumption about the size of the type.</span>\n    <span class=\"hljs-comment\">// Without `packed`, this fails since the size is 4.</span>\n    <span class=\"hljs-keyword\">const</span> _: () = <span class=\"hljs-built_in\">assert!</span>(std::mem::size_of::&lt;Packed&gt;() == <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// Error: evaluation of constant value failed</span>\n}</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[repr(C, packed)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Packed</span></span> {\n    <span class=\"hljs-keyword\">pub</span> a: *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">i32</span>,\n    <span class=\"hljs-keyword\">pub</span> b: <span class=\"hljs-built_in\">i32</span>,\n}\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Send</span> <span class=\"hljs-keyword\">for</span> Packed {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[repr(C)]</span> <span class=\"hljs-comment\">// removed packed</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Packed</span></span> {\n    <span class=\"hljs-keyword\">pub</span> a: *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">i32</span>,\n    <span class=\"hljs-keyword\">pub</span> b: <span class=\"hljs-built_in\">i32</span>,\n}\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Send</span> <span class=\"hljs-keyword\">for</span> Packed {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Packed;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = <span class=\"hljs-number\">123</span>;\n\n    <span class=\"hljs-keyword\">let</span> p = Packed {\n        a: &amp;<span class=\"hljs-keyword\">mut</span> x <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">i32</span>,\n        b: <span class=\"hljs-number\">456</span>,\n    };\n\n    <span class=\"hljs-comment\">// When the structure was packed, the closure captures `p` which is Send.</span>\n    <span class=\"hljs-comment\">// When `packed` is removed, this ends up capturing `p.a` which is not Send.</span>\n    std::thread::spawn(<span class=\"hljs-keyword\">move</span> || <span class=\"hljs-keyword\">unsafe</span> {\n        *(p.a) += <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// Error: cannot be sent between threads safely</span>\n    });\n}</code></pre>\n<h4 id=\"repr-packed-n-change\"><a class=\"header\" href=\"#repr-packed-n-change\">Major: Changing the value N of <code>repr(packed(N))</code> if that changes the alignment or layout</a></h4>\n<p>It is a breaking change to change the value of N of <code class=\"hljs\">repr(packed(N))</code> if that changes the alignment or layout.\nThis may change the alignment or layout that external crates are relying on.</p>\n<p>If the value <code class=\"hljs\">N</code> is lowered below the alignment of a public field, then that would break any code that attempts to take a reference of that field.</p>\n<p>Note that some changes to <code class=\"hljs\">N</code> may not change the alignment or layout, for example increasing it when the current value is already equal to the natural alignment of the type.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[repr(packed(4))]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Packed</span></span> {\n    <span class=\"hljs-keyword\">pub</span> a: <span class=\"hljs-built_in\">u8</span>,\n    <span class=\"hljs-keyword\">pub</span> b: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[repr(packed(2))]</span> <span class=\"hljs-comment\">// changed to 2</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Packed</span></span> {\n    <span class=\"hljs-keyword\">pub</span> a: <span class=\"hljs-built_in\">u8</span>,\n    <span class=\"hljs-keyword\">pub</span> b: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Packed;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> p = Packed { a: <span class=\"hljs-number\">1</span>, b: <span class=\"hljs-number\">2</span> };\n    <span class=\"hljs-keyword\">let</span> x = &amp;p.b; <span class=\"hljs-comment\">// Error: reference to packed field is unaligned</span>\n}</code></pre>\n<h4 id=\"repr-align-n-change\"><a class=\"header\" href=\"#repr-align-n-change\">Major: Changing the value N of <code>repr(align(N))</code> if that changes the alignment</a></h4>\n<p>It is a breaking change to change the value <code class=\"hljs\">N</code> of <code class=\"hljs\">repr(align(N))</code> if that changes the alignment.\nThis may change the alignment that external crates are relying on.</p>\n<p>This change should be safe to make if the type is not well-defined as discussed in <a href=\"reference/semver.html#type-layout\">type layout</a> (such as having any private fields and having an undocumented alignment or layout).</p>\n<p>Note that some changes to <code class=\"hljs\">N</code> may not change the alignment or layout, for example decreasing it when the current value is already equal to or less than the natural alignment of the type.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[repr(align(8))]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Packed</span></span> {\n    <span class=\"hljs-keyword\">pub</span> a: <span class=\"hljs-built_in\">u8</span>,\n    <span class=\"hljs-keyword\">pub</span> b: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[repr(align(4))]</span> <span class=\"hljs-comment\">// changed to 4</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Packed</span></span> {\n    <span class=\"hljs-keyword\">pub</span> a: <span class=\"hljs-built_in\">u8</span>,\n    <span class=\"hljs-keyword\">pub</span> b: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Packed;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> p = Packed { a: <span class=\"hljs-number\">1</span>, b: <span class=\"hljs-number\">2</span> };\n    <span class=\"hljs-comment\">// Some assumption about the size of the type.</span>\n    <span class=\"hljs-comment\">// The alignment has changed from 8 to 4.</span>\n    <span class=\"hljs-keyword\">const</span> _: () = <span class=\"hljs-built_in\">assert!</span>(std::mem::align_of::&lt;Packed&gt;() == <span class=\"hljs-number\">8</span>); <span class=\"hljs-comment\">// Error: evaluation of constant value failed</span>\n}</code></pre>\n<h4 id=\"repr-align-remove\"><a class=\"header\" href=\"#repr-align-remove\">Major: Removing <code>repr(align)</code> from a struct, union, or enum</a></h4>\n<p>It is a breaking change to remove <code class=\"hljs\">repr(align)</code> from a struct, union, or enum, if their layout was well-defined.\nThis may change the alignment or layout that external crates are relying on.</p>\n<p>This change should be safe to make if the type is not well-defined as discussed in <a href=\"reference/semver.html#type-layout\">type layout</a> (such as having any private fields and having an undocumented alignment).</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[repr(C, align(8))]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Packed</span></span> {\n    <span class=\"hljs-keyword\">pub</span> a: <span class=\"hljs-built_in\">u8</span>,\n    <span class=\"hljs-keyword\">pub</span> b: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[repr(C)]</span> <span class=\"hljs-comment\">// removed align</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Packed</span></span> {\n    <span class=\"hljs-keyword\">pub</span> a: <span class=\"hljs-built_in\">u8</span>,\n    <span class=\"hljs-keyword\">pub</span> b: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Packed;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> p = Packed { a: <span class=\"hljs-number\">1</span>, b: <span class=\"hljs-number\">2</span> };\n    <span class=\"hljs-comment\">// Some assumption about the size of the type.</span>\n    <span class=\"hljs-comment\">// The alignment has changed from 8 to 4.</span>\n    <span class=\"hljs-keyword\">const</span> _: () = <span class=\"hljs-built_in\">assert!</span>(std::mem::align_of::&lt;Packed&gt;() == <span class=\"hljs-number\">8</span>); <span class=\"hljs-comment\">// Error: evaluation of constant value failed</span>\n}</code></pre>\n<h4 id=\"repr-c-shuffle\"><a class=\"header\" href=\"#repr-c-shuffle\">Major: Changing the order of public fields of a <code>repr(C)</code> type</a></h4>\n<p>It is a breaking change to change the order of public fields of a <code class=\"hljs\">repr(C)</code> type.\nExternal crates may be relying on the specific ordering of the fields.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore run-fail hljs hide-boring\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SpecificLayout</span></span> {\n    <span class=\"hljs-keyword\">pub</span> a: <span class=\"hljs-built_in\">u8</span>,\n    <span class=\"hljs-keyword\">pub</span> b: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SpecificLayout</span></span> {\n    <span class=\"hljs-keyword\">pub</span> b: <span class=\"hljs-built_in\">u32</span>, <span class=\"hljs-comment\">// changed order</span>\n    <span class=\"hljs-keyword\">pub</span> a: <span class=\"hljs-built_in\">u8</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::SpecificLayout;\n\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> {\n    <span class=\"hljs-comment\">// This C function is assuming a specific layout defined in a C header.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">c_fn_get_b</span></span>(x: &amp;SpecificLayout) -&gt; <span class=\"hljs-built_in\">u32</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> p = SpecificLayout { a: <span class=\"hljs-number\">1</span>, b: <span class=\"hljs-number\">2</span> };\n    <span class=\"hljs-keyword\">unsafe</span> { <span class=\"hljs-built_in\">assert_eq!</span>(c_fn_get_b(&amp;p), <span class=\"hljs-number\">2</span>) } <span class=\"hljs-comment\">// Error: value not equal to 2</span>\n}\n\n<span class=\"boring\"><span class=\"hljs-keyword\">mod</span> cdep {\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// This simulates what would normally be something included from a build script.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// This definition would be in a C header.</span>\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[repr(C)]</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SpecificLayout</span></span> {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">pub</span> a: <span class=\"hljs-built_in\">u8</span>,\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">pub</span> b: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[no_mangle]</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">c_fn_get_b</span></span>(x: &amp;SpecificLayout) -&gt; <span class=\"hljs-built_in\">u32</span> {\n</span><span class=\"boring\">        x.b\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<h4 id=\"repr-c-remove\"><a class=\"header\" href=\"#repr-c-remove\">Major: Removing <code>repr(C)</code> from a struct, union, or enum</a></h4>\n<p>It is a breaking change to remove <code class=\"hljs\">repr(C)</code> from a struct, union, or enum.\nExternal crates may be relying on the specific layout of the type.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SpecificLayout</span></span> {\n    <span class=\"hljs-keyword\">pub</span> a: <span class=\"hljs-built_in\">u8</span>,\n    <span class=\"hljs-keyword\">pub</span> b: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-comment\">// removed repr(C)</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SpecificLayout</span></span> {\n    <span class=\"hljs-keyword\">pub</span> a: <span class=\"hljs-built_in\">u8</span>,\n    <span class=\"hljs-keyword\">pub</span> b: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::SpecificLayout;\n\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> {\n    <span class=\"hljs-comment\">// This C function is assuming a specific layout defined in a C header.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">c_fn_get_b</span></span>(x: &amp;SpecificLayout) -&gt; <span class=\"hljs-built_in\">u32</span>; <span class=\"hljs-comment\">// Error: is not FFI-safe</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> p = SpecificLayout { a: <span class=\"hljs-number\">1</span>, b: <span class=\"hljs-number\">2</span> };\n    <span class=\"hljs-keyword\">unsafe</span> { <span class=\"hljs-built_in\">assert_eq!</span>(c_fn_get_b(&amp;p), <span class=\"hljs-number\">2</span>) }\n}\n\n<span class=\"boring\"><span class=\"hljs-keyword\">mod</span> cdep {\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// This simulates what would normally be something included from a build script.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// This definition would be in a C header.</span>\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[repr(C)]</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SpecificLayout</span></span> {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">pub</span> a: <span class=\"hljs-built_in\">u8</span>,\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">pub</span> b: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[no_mangle]</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">c_fn_get_b</span></span>(x: &amp;SpecificLayout) -&gt; <span class=\"hljs-built_in\">u32</span> {\n</span><span class=\"boring\">        x.b\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<h4 id=\"repr-int-enum-remove\"><a class=\"header\" href=\"#repr-int-enum-remove\">Major: Removing <code>repr(&lt;int&gt;)</code> from an enum</a></h4>\n<p>It is a breaking change to remove <code class=\"hljs\">repr(&lt;int&gt;)</code> from an enum.\nExternal crates may be assuming that the discriminant is a specific size.\nFor example, <a href=\"reference/../../std/mem/fn.transmute.html\"><code class=\"hljs\">std::mem::transmute</code></a> of an enum may fail.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[repr(u16)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Example</span></span> {\n    Variant1,\n    Variant2,\n    Variant3,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-comment\">// removed repr(u16)</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Example</span></span> {\n    Variant1,\n    Variant2,\n    Variant3,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> e = updated_crate::Example::Variant2;\n    <span class=\"hljs-keyword\">let</span> i: <span class=\"hljs-built_in\">u16</span> = <span class=\"hljs-keyword\">unsafe</span> { std::mem::transmute(e) }; <span class=\"hljs-comment\">// Error: cannot transmute between types of different sizes</span>\n}</code></pre>\n<h4 id=\"repr-int-enum-change\"><a class=\"header\" href=\"#repr-int-enum-change\">Major: Changing the primitive representation of a <code>repr(&lt;int&gt;)</code> enum</a></h4>\n<p>It is a breaking change to change the primitive representation of a <code class=\"hljs\">repr(&lt;int&gt;)</code> enum.\nExternal crates may be assuming that the discriminant is a specific size.\nFor example, <a href=\"reference/../../std/mem/fn.transmute.html\"><code class=\"hljs\">std::mem::transmute</code></a> of an enum may fail.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[repr(u16)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Example</span></span> {\n    Variant1,\n    Variant2,\n    Variant3,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[repr(u8)]</span> <span class=\"hljs-comment\">// changed repr size</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Example</span></span> {\n    Variant1,\n    Variant2,\n    Variant3,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> e = updated_crate::Example::Variant2;\n    <span class=\"hljs-keyword\">let</span> i: <span class=\"hljs-built_in\">u16</span> = <span class=\"hljs-keyword\">unsafe</span> { std::mem::transmute(e) }; <span class=\"hljs-comment\">// Error: cannot transmute between types of different sizes</span>\n}</code></pre>\n<h4 id=\"repr-transparent-remove\"><a class=\"header\" href=\"#repr-transparent-remove\">Major: Removing <code>repr(transparent)</code> from a struct or enum</a></h4>\n<p>It is a breaking change to remove <code class=\"hljs\">repr(transparent)</code> from a struct or enum.\nExternal crates may be relying on the type having the alignment, layout, or size of the transparent field.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[repr(transparent)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Transparent</span></span>&lt;T&gt;(T);\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-comment\">// removed repr</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Transparent</span></span>&lt;T&gt;(T);\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-meta\">#![deny(improper_ctypes)]</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Transparent;\n\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">c_fn</span></span>() -&gt; Transparent&lt;<span class=\"hljs-built_in\">f64</span>&gt;; <span class=\"hljs-comment\">// Error: is not FFI-safe</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</code></pre>\n<h3 id=\"struct-add-private-field-when-public\"><a class=\"header\" href=\"#struct-add-private-field-when-public\">Major: adding a private struct field when all current fields are public</a></h3>\n<p>When a private field is added to a struct that previously had all public fields,\nthis will break any code that attempts to construct it with a <a href=\"reference/../../reference/expressions/struct-expr.html\">struct literal</a>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n    <span class=\"hljs-keyword\">pub</span> f1: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n    <span class=\"hljs-keyword\">pub</span> f1: <span class=\"hljs-built_in\">i32</span>,\n    f2: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = updated_crate::Foo { f1: <span class=\"hljs-number\">123</span> }; <span class=\"hljs-comment\">// Error: cannot construct `Foo`</span>\n}</code></pre>\n<p>Mitigation strategies:</p>\n<ul>\n<li>Do not add new fields to all-public field structs.</li>\n<li>Mark structs as <a href=\"reference/../../reference/attributes/type_system.html#the-non_exhaustive-attribute\"><code class=\"hljs\">#[non_exhaustive]</code></a> when first introducing\na struct to prevent users from using struct literal syntax, and instead\nprovide a constructor method and/or <a href=\"reference/../../std/default/trait.Default.html\">Default</a> implementation.</li>\n</ul>\n<h3 id=\"struct-add-public-field-when-no-private\"><a class=\"header\" href=\"#struct-add-public-field-when-no-private\">Major: adding a public field when no private field exists</a></h3>\n<p>When a public field is added to a struct that has all public fields, this will\nbreak any code that attempts to construct it with a <a href=\"reference/../../reference/expressions/struct-expr.html\">struct literal</a>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n    <span class=\"hljs-keyword\">pub</span> f1: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n    <span class=\"hljs-keyword\">pub</span> f1: <span class=\"hljs-built_in\">i32</span>,\n    <span class=\"hljs-keyword\">pub</span> f2: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = updated_crate::Foo { f1: <span class=\"hljs-number\">123</span> }; <span class=\"hljs-comment\">// Error: missing field `f2`</span>\n}</code></pre>\n<p>Mitigation strategies:</p>\n<ul>\n<li>Do not add new new fields to all-public field structs.</li>\n<li>Mark structs as <a href=\"reference/../../reference/attributes/type_system.html#the-non_exhaustive-attribute\"><code class=\"hljs\">#[non_exhaustive]</code></a> when first introducing\na struct to prevent users from using struct literal syntax, and instead\nprovide a constructor method and/or <a href=\"reference/../../std/default/trait.Default.html\">Default</a> implementation.</li>\n</ul>\n<h3 id=\"struct-private-fields-with-private\"><a class=\"header\" href=\"#struct-private-fields-with-private\">Minor: adding or removing private fields when at least one already exists</a></h3>\n<p>It is safe to add or remove private fields from a struct when the struct\nalready has at least one private field.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[derive(Default)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n    f1: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[derive(Default)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n    f2: <span class=\"hljs-built_in\">f64</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will safely work.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// Cannot access private fields.</span>\n    <span class=\"hljs-keyword\">let</span> x = updated_crate::Foo::default();\n}</code></pre>\n<p>This is safe because existing code cannot use a <a href=\"reference/../../reference/expressions/struct-expr.html\">struct literal</a> to construct\nit, nor exhaustively match its contents.</p>\n<p>Note that for tuple structs, this is a <strong>major change</strong> if the tuple contains\npublic fields, and the addition or removal of a private field changes the\nindex of any public field.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[derive(Default)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>(<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>);\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[derive(Default)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>(<span class=\"hljs-built_in\">f64</span>, <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>);\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = updated_crate::Foo::default();\n    <span class=\"hljs-keyword\">let</span> y = x.<span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// Error: is private</span>\n}</code></pre>\n<h3 id=\"struct-tuple-normal-with-private\"><a class=\"header\" href=\"#struct-tuple-normal-with-private\">Minor: going from a tuple struct with all private fields (with at least one field) to a normal struct, or vice versa</a></h3>\n<p>Changing a tuple struct to a normal struct (or vice-versa) is safe if all\nfields are private.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[derive(Default)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>(<span class=\"hljs-built_in\">i32</span>);\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[derive(Default)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n    f1: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will safely work.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// Cannot access private fields.</span>\n    <span class=\"hljs-keyword\">let</span> x = updated_crate::Foo::default();\n}</code></pre>\n<p>This is safe because existing code cannot use a <a href=\"reference/../../reference/expressions/struct-expr.html\">struct literal</a> to construct\nit, nor match its contents.</p>\n<h3 id=\"enum-variant-new\"><a class=\"header\" href=\"#enum-variant-new\">Major: adding new enum variants (without <code>non_exhaustive</code>)</a></h3>\n<p>It is a breaking change to add a new enum variant if the enum does not use the\n<a href=\"reference/../../reference/attributes/type_system.html#the-non_exhaustive-attribute\"><code class=\"hljs\">#[non_exhaustive]</code></a> attribute.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">E</span></span> {\n    Variant1,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">E</span></span> {\n    Variant1,\n    Variant2,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">use</span> updated_crate::E;\n    <span class=\"hljs-keyword\">let</span> x = E::Variant1;\n    <span class=\"hljs-keyword\">match</span> x { <span class=\"hljs-comment\">// Error: `E::Variant2` not covered</span>\n        E::Variant1 =&gt; {}\n    }\n}</code></pre>\n<p>Mitigation strategies:</p>\n<ul>\n<li>When introducing the enum, mark it as <a href=\"reference/../../reference/attributes/type_system.html#the-non_exhaustive-attribute\"><code class=\"hljs\">#[non_exhaustive]</code></a>\nto force users to use <a href=\"reference/../../reference/patterns.html#wildcard-pattern\">wildcard patterns</a> to catch new variants.</li>\n</ul>\n<h3 id=\"enum-fields-new\"><a class=\"header\" href=\"#enum-fields-new\">Major: adding new fields to an enum variant</a></h3>\n<p>It is a breaking change to add new fields to an enum variant because all\nfields are public, and constructors and matching will fail to compile.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">E</span></span> {\n    Variant1 { f1: <span class=\"hljs-built_in\">i32</span> },\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">E</span></span> {\n    Variant1 { f1: <span class=\"hljs-built_in\">i32</span>, f2: <span class=\"hljs-built_in\">i32</span> },\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">use</span> updated_crate::E;\n    <span class=\"hljs-keyword\">let</span> x = E::Variant1 { f1: <span class=\"hljs-number\">1</span> }; <span class=\"hljs-comment\">// Error: missing f2</span>\n    <span class=\"hljs-keyword\">match</span> x {\n        E::Variant1 { f1 } =&gt; {} <span class=\"hljs-comment\">// Error: missing f2</span>\n    }\n}</code></pre>\n<p>Mitigation strategies:</p>\n<ul>\n<li>When introducing the enum, mark the variant as <a href=\"reference/../../reference/attributes/type_system.html#the-non_exhaustive-attribute\"><code class=\"hljs\">non_exhaustive</code></a>\nso that it cannot be constructed or matched without wildcards.\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore skip hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">E</span></span> {\n    <span class=\"hljs-meta\">#[non_exhaustive]</span>\n    Variant1{f1: <span class=\"hljs-built_in\">i32</span>}\n}</code></pre>\n</li>\n<li>When introducing the enum, use an explicit struct as a value, where you can\nhave control over the field visibility.\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore skip hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n   f1: <span class=\"hljs-built_in\">i32</span>,\n   f2: <span class=\"hljs-built_in\">i32</span>,\n}\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">E</span></span> {\n    Variant1(Foo)\n}</code></pre>\n</li>\n</ul>\n<h3 id=\"trait-new-item-no-default\"><a class=\"header\" href=\"#trait-new-item-no-default\">Major: adding a non-defaulted trait item</a></h3>\n<p>It is a breaking change to add a non-defaulted item to a trait. This will\nbreak any implementors of the trait.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Trait;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> Trait <span class=\"hljs-keyword\">for</span> Foo {}  <span class=\"hljs-comment\">// Error: not all trait items implemented</span></code></pre>\n<p>Mitigation strategies:</p>\n<ul>\n<li>Always provide a default implementation or value for new associated trait\nitems.</li>\n<li>When introducing the trait, use the <a href=\"https://rust-lang.github.io/api-guidelines/future-proofing.html#sealed-traits-protect-against-downstream-implementations-c-sealed\">sealed trait</a> technique to prevent\nusers outside of the crate from implementing the trait.</li>\n</ul>\n<h3 id=\"trait-item-signature\"><a class=\"header\" href=\"#trait-item-signature\">Major: any change to trait item signatures</a></h3>\n<p>It is a breaking change to make any change to a trait item signature. This can\nbreak external implementors of the trait.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, x: <span class=\"hljs-built_in\">i32</span>) {}\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {\n    <span class=\"hljs-comment\">// For sealed traits or normal functions, this would be a minor change</span>\n    <span class=\"hljs-comment\">// because generalizing with generics strictly expands the possible uses.</span>\n    <span class=\"hljs-comment\">// But in this case, trait implementations must use the same signature.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>&lt;V&gt;(&amp;<span class=\"hljs-keyword\">self</span>, x: V) {}\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Trait;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> Trait <span class=\"hljs-keyword\">for</span> Foo {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, x: <span class=\"hljs-built_in\">i32</span>) {}  <span class=\"hljs-comment\">// Error: trait declaration has 1 type parameter</span>\n}</code></pre>\n<p>Mitigation strategies:</p>\n<ul>\n<li>Introduce new items with default implementations to cover the new\nfunctionality instead of modifying existing items.</li>\n<li>When introducing the trait, use the <a href=\"https://rust-lang.github.io/api-guidelines/future-proofing.html#sealed-traits-protect-against-downstream-implementations-c-sealed\">sealed trait</a> technique to prevent\nusers outside of the crate from implementing the trait.</li>\n</ul>\n<h3 id=\"trait-new-default-item\"><a class=\"header\" href=\"#trait-new-default-item\">Possibly-breaking: adding a defaulted trait item</a></h3>\n<p>It is usually safe to add a defaulted trait item. However, this can sometimes\ncause a compile error. For example, this can introduce an ambiguity if a\nmethod of the same name exists in another trait.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// Breaking change example</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {}\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Trait;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">LocalTrait</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {}\n}\n\n<span class=\"hljs-keyword\">impl</span> Trait <span class=\"hljs-keyword\">for</span> Foo {}\n<span class=\"hljs-keyword\">impl</span> LocalTrait <span class=\"hljs-keyword\">for</span> Foo {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = Foo;\n    x.foo(); <span class=\"hljs-comment\">// Error: multiple applicable items in scope</span>\n}</code></pre>\n<p>Note that this ambiguity does <em>not</em> exist for name collisions on <a href=\"reference/../../reference/items/implementations.html#inherent-implementations\">inherent\nimplementations</a>, as they take priority over trait items.</p>\n<p>See <a href=\"reference/semver.html#trait-object-safety\">trait-object-safety</a> for a special case to consider\nwhen adding trait items.</p>\n<p>Mitigation strategies:</p>\n<ul>\n<li>Some projects may deem this acceptable breakage, particularly if the new\nitem name is unlikely to collide with any existing code. Choose names\ncarefully to help avoid these collisions. Additionally, it may be acceptable\nto require downstream users to add <a href=\"reference/../../reference/expressions/call-expr.html#disambiguating-function-calls\">disambiguation syntax</a> to select the\ncorrect function when updating the dependency.</li>\n</ul>\n<h3 id=\"trait-object-safety\"><a class=\"header\" href=\"#trait-object-safety\">Major: adding a trait item that makes the trait non-object safe</a></h3>\n<p>It is a breaking change to add a trait item that changes the trait to not be\n<a href=\"reference/../../reference/items/traits.html#object-safety\">object safe</a>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {\n    <span class=\"hljs-comment\">// An associated const makes the trait not object-safe.</span>\n    <span class=\"hljs-keyword\">const</span> CONST: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">123</span>;\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Trait;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> Trait <span class=\"hljs-keyword\">for</span> Foo {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> obj: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Trait&gt; = <span class=\"hljs-built_in\">Box</span>::new(Foo); <span class=\"hljs-comment\">// Error: cannot be made into an object</span>\n}</code></pre>\n<p>It is safe to do the converse (making a non-object safe trait into a safe\none).</p>\n<h3 id=\"trait-new-parameter-no-default\"><a class=\"header\" href=\"#trait-new-parameter-no-default\">Major: adding a type parameter without a default</a></h3>\n<p>It is a breaking change to add a type parameter without a default to a trait.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span>&lt;T&gt; {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Trait;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> Trait <span class=\"hljs-keyword\">for</span> Foo {}  <span class=\"hljs-comment\">// Error: missing generics</span></code></pre>\n<p>Mitigating strategies:</p>\n<ul>\n<li>See <a href=\"reference/semver.html#trait-new-parameter-default\">adding a defaulted trait type parameter</a>.</li>\n</ul>\n<h3 id=\"trait-new-parameter-default\"><a class=\"header\" href=\"#trait-new-parameter-default\">Minor: adding a defaulted trait type parameter</a></h3>\n<p>It is safe to add a type parameter to a trait as long as it has a default.\nExternal implementors will use the default without needing to specify the\nparameter.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span>&lt;T = <span class=\"hljs-built_in\">i32</span>&gt; {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will safely work.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Trait;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> Trait <span class=\"hljs-keyword\">for</span> Foo {}</code></pre>\n<h3 id=\"impl-item-new\"><a class=\"header\" href=\"#impl-item-new\">Possibly-breaking change: adding any inherent items</a></h3>\n<p>Usually adding inherent items to an implementation should be safe because\ninherent items take priority over trait items. However, in some cases the\ncollision can cause problems if the name is the same as an implemented trait\nitem with a different signature.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// Breaking change example</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> Foo {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {}\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Foo;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, x: <span class=\"hljs-built_in\">i32</span>) {}\n}\n\n<span class=\"hljs-keyword\">impl</span> Trait <span class=\"hljs-keyword\">for</span> Foo {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = Foo;\n    x.foo(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Error: this method takes 0 arguments but 1 argument was supplied</span>\n}</code></pre>\n<p>Note that if the signatures match, there would not be a compile-time error,\nbut possibly a silent change in runtime behavior (because it is now executing\na different function).</p>\n<p>Mitigation strategies:</p>\n<ul>\n<li>Some projects may deem this acceptable breakage, particularly if the new\nitem name is unlikely to collide with any existing code. Choose names\ncarefully to help avoid these collisions. Additionally, it may be acceptable\nto require downstream users to add <a href=\"reference/../../reference/expressions/call-expr.html#disambiguating-function-calls\">disambiguation syntax</a> to select the\ncorrect function when updating the dependency.</li>\n</ul>\n<h3 id=\"generic-bounds-tighten\"><a class=\"header\" href=\"#generic-bounds-tighten\">Major: tightening generic bounds</a></h3>\n<p>It is a breaking change to tighten generic bounds on a type since this can\nbreak users expecting the looser bounds.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;A&gt; {\n    <span class=\"hljs-keyword\">pub</span> f1: A,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;A: <span class=\"hljs-built_in\">Eq</span>&gt; {\n    <span class=\"hljs-keyword\">pub</span> f1: A,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Foo;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> s = Foo { f1: <span class=\"hljs-number\">1.23</span> }; <span class=\"hljs-comment\">// Error: the trait bound `{float}: Eq` is not satisfied</span>\n}</code></pre>\n<h3 id=\"generic-bounds-loosen\"><a class=\"header\" href=\"#generic-bounds-loosen\">Minor: loosening generic bounds</a></h3>\n<p>It is safe to loosen the generic bounds on a type, as it only expands what is\nallowed.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;A: <span class=\"hljs-built_in\">Clone</span>&gt; {\n    <span class=\"hljs-keyword\">pub</span> f1: A,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;A&gt; {\n    <span class=\"hljs-keyword\">pub</span> f1: A,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will safely work.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Foo;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> s = Foo { f1: <span class=\"hljs-number\">123</span> };\n}</code></pre>\n<h3 id=\"generic-new-default\"><a class=\"header\" href=\"#generic-new-default\">Minor: adding defaulted type parameters</a></h3>\n<p>It is safe to add a type parameter to a type as long as it has a default. All\nexisting references will use the default without needing to specify the\nparameter.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#[derive(Default)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[derive(Default)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;A = <span class=\"hljs-built_in\">i32</span>&gt; {\n    f1: A,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will safely work.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Foo;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> s: Foo = <span class=\"hljs-built_in\">Default</span>::default();\n}</code></pre>\n<h3 id=\"generic-generalize-identical\"><a class=\"header\" href=\"#generic-generalize-identical\">Minor: generalizing a type to use generics (with identical types)</a></h3>\n<p>A struct or enum field can change from a concrete type to a generic type\nparameter, provided that the change results in an identical type for all\nexisting use cases. For example, the following change is permitted:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>(<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-built_in\">u8</span>);\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;T = <span class=\"hljs-built_in\">u8</span>&gt;(<span class=\"hljs-keyword\">pub</span> T);\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will safely work.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Foo;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> s: Foo = Foo(<span class=\"hljs-number\">123</span>);\n}</code></pre>\n<p>because existing uses of <code class=\"hljs\">Foo</code> are shorthand for <code class=\"hljs\">Foo&lt;u8&gt;</code> which yields the\nidentical field type.</p>\n<h3 id=\"generic-generalize-different\"><a class=\"header\" href=\"#generic-generalize-different\">Major: generalizing a type to use generics (with possibly different types)</a></h3>\n<p>Changing a struct or enum field from a concrete type to a generic type\nparameter can break if the type can change.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;T = <span class=\"hljs-built_in\">u8</span>&gt;(<span class=\"hljs-keyword\">pub</span> T, <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-built_in\">u8</span>);\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;T = <span class=\"hljs-built_in\">u8</span>&gt;(<span class=\"hljs-keyword\">pub</span> T, <span class=\"hljs-keyword\">pub</span> T);\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Foo;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> s: Foo&lt;<span class=\"hljs-built_in\">f32</span>&gt; = Foo(<span class=\"hljs-number\">3.14</span>, <span class=\"hljs-number\">123</span>); <span class=\"hljs-comment\">// Error: mismatched types</span>\n}</code></pre>\n<h3 id=\"generic-more-generic\"><a class=\"header\" href=\"#generic-more-generic\">Minor: changing a generic type to a more generic type</a></h3>\n<p>It is safe to change a generic type to a more generic one. For example, the\nfollowing adds a generic parameter that defaults to the original type, which\nis safe because all existing users will be using the same type for both\nfields, the defaulted parameter does not need to be specified.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;T&gt;(<span class=\"hljs-keyword\">pub</span> T, <span class=\"hljs-keyword\">pub</span> T);\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;T, U = T&gt;(<span class=\"hljs-keyword\">pub</span> T, <span class=\"hljs-keyword\">pub</span> U);\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will safely work.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::Foo;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> s: Foo&lt;<span class=\"hljs-built_in\">f32</span>&gt; = Foo(<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">2.0</span>);\n}</code></pre>\n<h3 id=\"fn-change-arity\"><a class=\"header\" href=\"#fn-change-arity\">Major: adding/removing function parameters</a></h3>\n<p>Changing the arity of a function is a breaking change.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(x: <span class=\"hljs-built_in\">i32</span>) {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    updated_crate::foo(); <span class=\"hljs-comment\">// Error: this function takes 1 argument</span>\n}</code></pre>\n<p>Mitigating strategies:</p>\n<ul>\n<li>Introduce a new function with the new signature and possibly\n<a href=\"reference/../../reference/attributes/diagnostics.html#the-deprecated-attribute\">deprecate</a> the old one.</li>\n<li>Introduce functions that take a struct argument, where the struct is built\nwith the builder pattern. This allows new fields to be added to the struct\nin the future.</li>\n</ul>\n<h3 id=\"fn-generic-new\"><a class=\"header\" href=\"#fn-generic-new\">Possibly-breaking: introducing a new function type parameter</a></h3>\n<p>Usually, adding a non-defaulted type parameter is safe, but in some\ncases it can be a breaking change:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// Breaking change example</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T&gt;() {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T, U&gt;() {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::foo;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    foo::&lt;<span class=\"hljs-built_in\">u8</span>&gt;(); <span class=\"hljs-comment\">// Error: function takes 2 generic arguments but 1 generic argument was supplied</span>\n}</code></pre>\n<p>However, such explicit calls are rare enough (and can usually be written in\nother ways) that this breakage is usually acceptable. One should take into\naccount how likely it is that the function in question is being called with\nexplicit type arguments.</p>\n<h3 id=\"fn-generalize-compatible\"><a class=\"header\" href=\"#fn-generalize-compatible\">Minor: generalizing a function to use generics (supporting original type)</a></h3>\n<p>The type of a parameter to a function, or its return value, can be\n<em>generalized</em> to use generics, including by introducing a new type parameter,\nas long as it can be instantiated to the original type. For example, the\nfollowing changes are allowed:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(x: <span class=\"hljs-built_in\">u8</span>) -&gt; <span class=\"hljs-built_in\">u8</span> {\n    x\n}\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>&lt;T: <span class=\"hljs-built_in\">Iterator</span>&lt;Item = <span class=\"hljs-built_in\">u8</span>&gt;&gt;(t: T) {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">use</span> std::ops::Add;\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T: Add&gt;(x: T) -&gt; T {\n    x\n}\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>&lt;T: <span class=\"hljs-built_in\">IntoIterator</span>&lt;Item = <span class=\"hljs-built_in\">u8</span>&gt;&gt;(t: T) {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will safely work.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::{bar, foo};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    foo(<span class=\"hljs-number\">1</span>);\n    bar(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].into_iter());\n}</code></pre>\n<p>because all existing uses are instantiations of the new signature.</p>\n<p>Perhaps somewhat surprisingly, generalization applies to trait objects as\nwell, given that every trait implements itself:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {}\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(t: &amp;<span class=\"hljs-keyword\">dyn</span> Trait) {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {}\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T: Trait + ?<span class=\"hljs-built_in\">Sized</span>&gt;(t: &amp;T) {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will safely work.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::{foo, Trait};\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n<span class=\"hljs-keyword\">impl</span> Trait <span class=\"hljs-keyword\">for</span> Foo {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> obj = Foo;\n    foo(&amp;obj);\n}</code></pre>\n<p>(The use of <code class=\"hljs\">?Sized</code> is essential; otherwise you couldn’t recover the original\nsignature.)</p>\n<p>Introducing generics in this way can potentially create type inference\nfailures. These are usually rare, and may be acceptable breakage for some\nprojects, as this can be fixed with additional type annotations.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// Breaking change example</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> {\n    <span class=\"hljs-number\">0</span>\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T: <span class=\"hljs-built_in\">Default</span>&gt;() -&gt; T {\n    <span class=\"hljs-built_in\">Default</span>::default()\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::foo;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = foo(); <span class=\"hljs-comment\">// Error: type annotations needed</span>\n}</code></pre>\n<h3 id=\"fn-generalize-mismatch\"><a class=\"header\" href=\"#fn-generalize-mismatch\">Major: generalizing a function to use generics with type mismatch</a></h3>\n<p>It is a breaking change to change a function parameter or return type if the\ngeneric type constrains or changes the types previously allowed. For example,\nthe following adds a generic constraint that may not be satisfied by existing\ncode:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(x: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">u8</span>&gt;) {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T: <span class=\"hljs-built_in\">Copy</span> + <span class=\"hljs-built_in\">IntoIterator</span>&lt;Item = <span class=\"hljs-built_in\">u8</span>&gt;&gt;(x: T) {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::foo;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    foo(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// Error: `Copy` is not implemented for `Vec&lt;u8&gt;`</span>\n}</code></pre>\n<h3 id=\"fn-unsafe-safe\"><a class=\"header\" href=\"#fn-unsafe-safe\">Minor: making an <code>unsafe</code> function safe</a></h3>\n<p>A previously <code class=\"hljs\">unsafe</code> function can be made safe without breaking code.</p>\n<p>Note however that it may cause the <a href=\"reference/../../rustc/lints/listing/warn-by-default.html#unused-unsafe\"><code class=\"hljs\">unused_unsafe</code></a> lint to\ntrigger as in the example below, which will cause local crates that have\nspecified <code class=\"hljs\">#![deny(warnings)]</code> to stop compiling. Per <a href=\"reference/semver.html#new-lints\">introducing new\nlints</a>, it is allowed for updates to introduce new warnings.</p>\n<p>Going the other way (making a safe function <code class=\"hljs\">unsafe</code>) is a breaking change.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will trigger a lint.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::foo;\n\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>(f: <span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>()) {\n    f()\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">unsafe</span> { foo() }; <span class=\"hljs-comment\">// The `unused_unsafe` lint will trigger here</span>\n    <span class=\"hljs-keyword\">unsafe</span> { bar(foo) };\n}</code></pre>\n<p>Making a previously <code class=\"hljs\">unsafe</code> associated function or method on structs / enums\nsafe is also a minor change, while the same is not true for associated\nfunction on traits (see <a href=\"reference/semver.html#trait-item-signature\">any change to trait item signatures</a>).</p>\n<h3 id=\"attr-no-std-to-std\"><a class=\"header\" href=\"#attr-no-std-to-std\">Major: switching from <code>no_std</code> support to requiring <code>std</code></a></h3>\n<p>If your library specifically supports a <a href=\"reference/../../reference/names/preludes.html#the-no_std-attribute\"><code class=\"hljs\">no_std</code></a> environment, it is a\nbreaking change to make a new release that requires <code class=\"hljs\">std</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore skip hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-meta\">#![no_std]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n    std::time::SystemTime::now();\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-comment\">// This will fail to link for no_std targets because they don't have a `std` crate.</span>\n<span class=\"hljs-meta\">#![no_std]</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::foo;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example</span></span>() {\n    foo();\n}</code></pre>\n<p>Mitigation strategies:</p>\n<ul>\n<li>A common idiom to avoid this is to include a <code class=\"hljs\">std</code> <a href=\"reference/features.html\">Cargo feature</a> that\noptionally enables <code class=\"hljs\">std</code> support, and when the feature is off, the library\ncan be used in a <code class=\"hljs\">no_std</code> environment.</li>\n</ul>\n<h3 id=\"attr-adding-non-exhaustive\"><a class=\"header\" href=\"#attr-adding-non-exhaustive\">Major: adding <code>non_exhaustive</code> to an existing enum, variant, or struct with no private fields</a></h3>\n<p>Making items <a href=\"reference/../../reference/attributes/type_system.html#the-non_exhaustive-attribute\"><code class=\"hljs\">#[non_exhaustive]</code></a> changes how they may\nbe used outside the crate where they are defined:</p>\n<ul>\n<li>Non-exhaustive structs and enum variants cannot be constructed\nusing <a href=\"reference/../../reference/expressions/struct-expr.html\">struct literal</a> syntax, including <a href=\"reference/../../reference/expressions/struct-expr.html#functional-update-syntax\">functional update syntax</a>.</li>\n<li>Pattern matching on non-exhaustive structs requires <code class=\"hljs\">..</code> and\nmatching on enums does not count towards exhaustiveness.</li>\n<li>Casting enum variants to their discriminant with <code class=\"hljs\">as</code> is not allowed.</li>\n</ul>\n<p>Structs with private fields cannot be constructed using <a href=\"reference/../../reference/expressions/struct-expr.html\">struct literal</a> syntax\nregardless of whether <a href=\"reference/../../reference/attributes/type_system.html#the-non_exhaustive-attribute\"><code class=\"hljs\">#[non_exhaustive]</code></a> is used.\nAdding <a href=\"reference/../../reference/attributes/type_system.html#the-non_exhaustive-attribute\"><code class=\"hljs\">#[non_exhaustive]</code></a> to such a struct is not\na breaking change.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n    <span class=\"hljs-keyword\">pub</span> bar: <span class=\"hljs-built_in\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Bar</span></span> {\n    X,\n    Y(<span class=\"hljs-built_in\">usize</span>),\n    Z { a: <span class=\"hljs-built_in\">usize</span> },\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Quux</span></span> {\n    Var,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[non_exhaustive]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n    <span class=\"hljs-keyword\">pub</span> bar: <span class=\"hljs-built_in\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Bar</span></span> {\n    <span class=\"hljs-meta\">#[non_exhaustive]</span>\n    X,\n\n    <span class=\"hljs-meta\">#[non_exhaustive]</span>\n    Y(<span class=\"hljs-built_in\">usize</span>),\n\n    <span class=\"hljs-meta\">#[non_exhaustive]</span>\n    Z { a: <span class=\"hljs-built_in\">usize</span> },\n}\n\n<span class=\"hljs-meta\">#[non_exhaustive]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Quux</span></span> {\n    Var,\n}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example usage that will break.</span>\n<span class=\"hljs-keyword\">use</span> updated_crate::{Bar, Foo, Quux};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> foo = Foo { bar: <span class=\"hljs-number\">0</span> }; <span class=\"hljs-comment\">// Error: cannot create non-exhaustive struct using struct expression</span>\n\n    <span class=\"hljs-keyword\">let</span> bar_x = Bar::X; <span class=\"hljs-comment\">// Error: unit variant `X` is private</span>\n    <span class=\"hljs-keyword\">let</span> bar_y = Bar::Y(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// Error: tuple variant `Y` is private</span>\n    <span class=\"hljs-keyword\">let</span> bar_z = Bar::Z { a: <span class=\"hljs-number\">0</span> }; <span class=\"hljs-comment\">// Error: cannot create non-exhaustive variant using struct expression</span>\n\n    <span class=\"hljs-keyword\">let</span> q = Quux::Var;\n    <span class=\"hljs-keyword\">match</span> q {\n        Quux::Var =&gt; <span class=\"hljs-number\">0</span>,\n        <span class=\"hljs-comment\">// Error: non-exhaustive patterns: `_` not covered</span>\n    };\n}</code></pre>\n<p>Mitigation strategies:</p>\n<ul>\n<li>Mark structs, enums, and enum variants as\n<a href=\"reference/../../reference/attributes/type_system.html#the-non_exhaustive-attribute\"><code class=\"hljs\">#[non_exhaustive]</code></a> when first introducing them,\nrather than adding <a href=\"reference/../../reference/attributes/type_system.html#the-non_exhaustive-attribute\"><code class=\"hljs\">#[non_exhaustive]</code></a> later on.</li>\n</ul>\n<h2 id=\"tooling-and-environment-compatibility\"><a class=\"header\" href=\"#tooling-and-environment-compatibility\">Tooling and environment compatibility</a></h2>\n<h3 id=\"env-new-rust\"><a class=\"header\" href=\"#env-new-rust\">Possibly-breaking: changing the minimum version of Rust required</a></h3>\n<p>Introducing the use of new features in a new release of Rust can break\nprojects that are using older versions of Rust. This also includes using new\nfeatures in a new release of Cargo, and requiring the use of a nightly-only\nfeature in a crate that previously worked on stable.</p>\n<p>It is generally recommended to treat this as a minor change, rather than as\na major change, for <a href=\"https://github.com/rust-lang/api-guidelines/discussions/231\">various reasons</a>. It\nis usually relatively easy to update to a newer version of Rust. Rust also has\na rapid 6-week release cycle, and some projects will provide compatibility\nwithin a window of releases (such as the current stable release plus N\nprevious releases). Just keep in mind that some large projects may not be able\nto update their Rust toolchain rapidly.</p>\n<p>Mitigation strategies:</p>\n<ul>\n<li>Use <a href=\"reference/features.html\">Cargo features</a> to make the new features opt-in.</li>\n<li>Provide a large window of support for older releases.</li>\n<li>Copy the source of new standard library items if possible so that you\ncan continue to use an older version but take advantage of the new feature.</li>\n<li>Provide a separate branch of older minor releases that can receive backports\nof important bugfixes.</li>\n<li>Keep an eye out for the <a href=\"https://github.com/rust-lang/rust/issues/64796\"><code class=\"hljs\">[cfg(version(..))]</code></a> and\n<a href=\"https://github.com/rust-lang/rust/issues/64797\"><code class=\"hljs\">#[cfg(accessible(..))]</code></a> features which provide an opt-in\nmechanism for new features. These are currently unstable and only available\nin the nightly channel.</li>\n</ul>\n<h3 id=\"env-change-requirements\"><a class=\"header\" href=\"#env-change-requirements\">Possibly-breaking: changing the platform and environment requirements</a></h3>\n<p>There is a very wide range of assumptions a library makes about the\nenvironment that it runs in, such as the host platform, operating system\nversion, available services, filesystem support, etc. It can be a breaking\nchange if you make a new release that restricts what was previously supported,\nfor example requiring a newer version of an operating system. These changes\ncan be difficult to track, since you may not always know if a change breaks in\nan environment that is not automatically tested.</p>\n<p>Some projects may deem this acceptable breakage, particularly if the breakage\nis unlikely for most users, or the project doesn’t have the resources to\nsupport all environments. Another notable situation is when a vendor\ndiscontinues support for some hardware or OS, the project may deem it\nreasonable to also discontinue support.</p>\n<p>Mitigation strategies:</p>\n<ul>\n<li>Document the platforms and environments you specifically support.</li>\n<li>Test your code on a wide range of environments in CI.</li>\n</ul>\n<h3 id=\"new-lints\"><a class=\"header\" href=\"#new-lints\">Minor: introducing new lints</a></h3>\n<p>Some changes to a library may cause new lints to be triggered in users of that library.\nThis should generally be considered a compatible change.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore dont-deny hljs\"><span class=\"hljs-comment\">// MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-meta\">#[deprecated]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// Example use of the library that will safely work.</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    updated_crate::foo(); <span class=\"hljs-comment\">// Warning: use of deprecated function</span>\n}</code></pre>\n<p>Beware that it may be possible for this to technically cause a project to fail if they have explicitly denied the warning, and the updated crate is a direct dependency.\nDenying warnings should be done with care and the understanding that new lints may be introduced over time.\nHowever, library authors should be cautious about introducing new warnings and may want to consider the potential impact on their users.</p>\n<p>The following lints are examples of those that may be introduced when updating a dependency:</p>\n<ul>\n<li><a href=\"reference/../../rustc/lints/listing/warn-by-default.html#deprecated\"><code class=\"hljs\">deprecated</code></a> — Introduced when a dependency adds the <a href=\"reference/../../reference/attributes/diagnostics.html#the-deprecated-attribute\"><code class=\"hljs\">#[deprecated]</code> attribute</a> to an item you are using.</li>\n<li><a href=\"reference/../../rustc/lints/listing/warn-by-default.html#unused-must-use\"><code class=\"hljs\">unused_must_use</code></a> — Introduced when a dependency adds the <a href=\"reference/../../reference/attributes/diagnostics.html#the-must_use-attribute\"><code class=\"hljs\">#[must_use]</code> attribute</a> to an item where you are not consuming the result.</li>\n<li><a href=\"reference/../../rustc/lints/listing/warn-by-default.html#unused-unsafe\"><code class=\"hljs\">unused_unsafe</code></a> — Introduced when a dependency <em>removes</em> the <code class=\"hljs\">unsafe</code> qualifier from a function, and that is the only unsafe function called in an unsafe block.</li>\n</ul>\n<p>Additionally, updating <code class=\"hljs\">rustc</code> to a new version may introduce new lints.</p>\n<p>Transitive dependencies which introduce new lints should not usually cause a failure because Cargo uses <a href=\"reference/../../rustc/lints/levels.html#capping-lints\"><code class=\"hljs\">--cap-lints</code></a> to suppress all lints in dependencies.</p>\n<p>Mitigating strategies:</p>\n<ul>\n<li>If you build with warnings denied, understand you may need to deal with resolving new warnings whenever you update your dependencies.\nIf using RUSTFLAGS to pass <code class=\"hljs\">-Dwarnings</code>, also add the <code class=\"hljs\">-A</code> flag to allow lints that are likely to cause issues, such as <code class=\"hljs\">-Adeprecated</code>.</li>\n<li>Introduce deprecations behind a <a href=\"reference/features.html\">feature</a>.\nFor example <code class=\"hljs\">#[cfg_attr(feature = \"deprecated\", deprecated=\"use bar instead\")]</code>.\nThen, when you plan to remove an item in a future SemVer breaking change, you can communicate with your users that they should enable the <code class=\"hljs\">deprecated</code> feature <em>before</em> updating to remove the use of the deprecated items.\nThis allows users to choose when to respond to deprecations without needing to immediately respond to them.\nA downside is that it can be difficult to communicate to users that they need to take these manual steps to prepare for a major update.</li>\n</ul>\n<h3 id=\"cargo\"><a class=\"header\" href=\"#cargo\">Cargo</a></h3>\n<h4 id=\"cargo-feature-add\"><a class=\"header\" href=\"#cargo-feature-add\">Minor: adding a new Cargo feature</a></h4>\n<p>It is usually safe to add new <a href=\"reference/features.html\">Cargo features</a>. If the feature introduces new\nchanges that cause a breaking change, this can cause difficulties for projects\nthat have stricter backwards-compatibility needs. In that scenario, avoid\nadding the feature to the “default” list, and possibly document the\nconsequences of enabling the feature.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">###########################################################</span>\n<span class=\"hljs-comment\"># Before</span>\n<span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-comment\"># ..empty</span>\n\n<span class=\"hljs-comment\">###########################################################</span>\n<span class=\"hljs-comment\"># After</span>\n<span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">std</span> = []\n</code></pre>\n<h4 id=\"cargo-feature-remove\"><a class=\"header\" href=\"#cargo-feature-remove\">Major: removing a Cargo feature</a></h4>\n<p>It is usually a breaking change to remove <a href=\"reference/features.html\">Cargo features</a>. This will cause\nan error for any project that enabled the feature.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># MAJOR CHANGE</span>\n\n<span class=\"hljs-comment\">###########################################################</span>\n<span class=\"hljs-comment\"># Before</span>\n<span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">logging</span> = []\n\n<span class=\"hljs-comment\">###########################################################</span>\n<span class=\"hljs-comment\"># After</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-comment\"># ..logging removed</span>\n</code></pre>\n<p>Mitigation strategies:</p>\n<ul>\n<li>Clearly document your features. If there is an internal or experimental\nfeature, mark it as such, so that users know the status of the feature.</li>\n<li>Leave the old feature in <code class=\"hljs\">Cargo.toml</code>, but otherwise remove its\nfunctionality. Document that the feature is deprecated, and remove it in a\nfuture major SemVer release.</li>\n</ul>\n<h4 id=\"cargo-feature-remove-another\"><a class=\"header\" href=\"#cargo-feature-remove-another\">Major: removing a feature from a feature list if that changes functionality or public items</a></h4>\n<p>If removing a feature from another feature, this can break existing users if\nthey are expecting that functionality to be available through that feature.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Breaking change example</span>\n\n<span class=\"hljs-comment\">###########################################################</span>\n<span class=\"hljs-comment\"># Before</span>\n<span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">default</span> = [<span class=\"hljs-string\">\"std\"</span>]\n<span class=\"hljs-attr\">std</span> = []\n\n<span class=\"hljs-comment\">###########################################################</span>\n<span class=\"hljs-comment\"># After</span>\n<span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">default</span> = []  <span class=\"hljs-comment\"># This may cause packages to fail if they are expecting std to be enabled.</span>\n<span class=\"hljs-attr\">std</span> = []\n</code></pre>\n<h4 id=\"cargo-remove-opt-dep\"><a class=\"header\" href=\"#cargo-remove-opt-dep\">Possibly-breaking: removing an optional dependency</a></h4>\n<p>Removing an <a href=\"reference/features.html#optional-dependencies\">optional dependency</a> can break a project using your library because\nanother project may be enabling that dependency via <a href=\"reference/features.html\">Cargo features</a>.</p>\n<p>When there is an optional dependency, cargo implicitly defines a feature of\nthe same name to provide a mechanism to enable the dependency and to check\nwhen it is enabled. This problem can be avoided by using the <code class=\"hljs\">dep:</code> syntax in\nthe <code class=\"hljs\">[features]</code> table, which disables this implicit feature. Using <code class=\"hljs\">dep:</code>\nmakes it possible to hide the existence of optional dependencies under more\nsemantically-relevant names which can be more safely modified.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Breaking change example</span>\n\n<span class=\"hljs-comment\">###########################################################</span>\n<span class=\"hljs-comment\"># Before</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">curl</span> = { version = <span class=\"hljs-string\">\"0.4.31\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n\n<span class=\"hljs-comment\">###########################################################</span>\n<span class=\"hljs-comment\"># After</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-comment\"># ..curl removed</span>\n</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># MINOR CHANGE</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># This example shows how to avoid breaking changes with optional dependencies.</span>\n\n<span class=\"hljs-comment\">###########################################################</span>\n<span class=\"hljs-comment\"># Before</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">curl</span> = { version = <span class=\"hljs-string\">\"0.4.31\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n\n<span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">networking</span> = [<span class=\"hljs-string\">\"dep:curl\"</span>]\n\n<span class=\"hljs-comment\">###########################################################</span>\n<span class=\"hljs-comment\"># After</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-comment\"># Here, one optional dependency was replaced with another.</span>\n<span class=\"hljs-attr\">hyper</span> = { version = <span class=\"hljs-string\">\"0.14.27\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n\n<span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">networking</span> = [<span class=\"hljs-string\">\"dep:hyper\"</span>]\n</code></pre>\n<p>Mitigation strategies:</p>\n<ul>\n<li>Use the <code class=\"hljs\">dep:</code> syntax in the <code class=\"hljs\">[features]</code> table to avoid exposing optional\ndependencies in the first place. See <a href=\"reference/features.html#optional-dependencies\">optional dependencies</a> for\nmore information.</li>\n<li>Clearly document your features. If the optional dependency is not included\nin the documented list of features, then you may decide to consider it safe\nto change undocumented entries.</li>\n<li>Leave the optional dependency, and just don’t use it within your library.</li>\n<li>Replace the optional dependency with a <a href=\"reference/features.html\">Cargo feature</a> that does nothing,\nand document that it is deprecated.</li>\n<li>Use high-level features which enable optional dependencies, and document\nthose as the preferred way to enable the extended functionality. For\nexample, if your library has optional support for something like\n“networking”, create a generic feature name “networking” that enables the\noptional dependencies necessary to implement “networking”. Then document the\n“networking” feature.</li>\n</ul>\n<h4 id=\"cargo-change-dep-feature\"><a class=\"header\" href=\"#cargo-change-dep-feature\">Minor: changing dependency features</a></h4>\n<p>It is usually safe to change the features on a dependency, as long as the\nfeature does not introduce a breaking change.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">###########################################################</span>\n<span class=\"hljs-comment\"># Before</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = { version = <span class=\"hljs-string\">\"0.7.3\"</span>, features = [<span class=\"hljs-string\">\"small_rng\"</span>] }\n\n\n<span class=\"hljs-comment\">###########################################################</span>\n<span class=\"hljs-comment\"># After</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"0.7.3\"</span>\n</code></pre>\n<h4 id=\"cargo-dep-add\"><a class=\"header\" href=\"#cargo-dep-add\">Minor: adding dependencies</a></h4>\n<p>It is usually safe to add new dependencies, as long as the new dependency\ndoes not introduce new requirements that result in a breaking change.\nFor example, adding a new dependency that requires nightly in a project\nthat previously worked on stable is a major change.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># MINOR CHANGE</span>\n\n<span class=\"hljs-comment\">###########################################################</span>\n<span class=\"hljs-comment\"># Before</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-comment\"># ..empty</span>\n\n<span class=\"hljs-comment\">###########################################################</span>\n<span class=\"hljs-comment\"># After</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">log</span> = <span class=\"hljs-string\">\"0.4.11\"</span>\n</code></pre>\n<h2 id=\"application-compatibility\"><a class=\"header\" href=\"#application-compatibility\">Application compatibility</a></h2>\n<p>Cargo projects may also include executable binaries which have their own\ninterfaces (such as a CLI interface, OS-level interaction, etc.). Since these\nare part of the Cargo package, they often use and share the same version as\nthe package. You will need to decide if and how you want to employ a SemVer\ncontract with your users in the changes you make to your application. The\npotential breaking and compatible changes to an application are too numerous\nto list, so you are encouraged to use the spirit of the <a href=\"https://semver.org/\">SemVer</a> spec to guide\nyour decisions on how to apply versioning to your application, or at least\ndocument what your commitments are.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"future-incompat-report-1\"><a class=\"header\" href=\"#future-incompat-report-1\">Future incompat report</a></h1>\n<p>Cargo checks for future-incompatible warnings in all dependencies. These are warnings for\nchanges that may become hard errors in the future, causing the dependency to\nstop building in a future version of rustc. If any warnings are found, a small\nnotice is displayed indicating that the warnings were found, and provides\ninstructions on how to display a full report.</p>\n<p>For example, you may see something like this at the end of a build:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">warning: the following packages contain code that will be rejected by a future\n         version of Rust: rental v0.5.5\nnote: to see what the problems were, use the option `--future-incompat-report`,\n      or run `cargo report future-incompatibilities --id 1`\n</code></pre>\n<p>A full report can be displayed with the <code class=\"hljs\">cargo report future-incompatibilities --id ID</code> command, or by running the build again with\nthe <code class=\"hljs\">--future-incompat-report</code> flag. The developer should then update their\ndependencies to a version where the issue is fixed, or work with the\ndevelopers of the dependencies to help resolve the issue.</p>\n<h2 id=\"configuration-2\"><a class=\"header\" href=\"#configuration-2\">Configuration</a></h2>\n<p>This feature can be configured through a <a href=\"reference/config.html#future-incompat-report\"><code class=\"hljs\">[future-incompat-report]</code></a>\nsection in <code class=\"hljs\">.cargo/config.toml</code>. Currently, the supported options are:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[future-incompat-report]</span>\n<span class=\"hljs-attr\">frequency</span> = <span class=\"hljs-string\">\"always\"</span>\n</code></pre>\n<p>The supported values for the frequency are <code class=\"hljs\">\"always\"</code> and <code class=\"hljs\">\"never\"</code>, which control\nwhether or not a message is printed out at the end of <code class=\"hljs\">cargo build</code> / <code class=\"hljs\">cargo check</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"reporting-build-timings\"><a class=\"header\" href=\"#reporting-build-timings\">Reporting build timings</a></h1>\n<p>The <code class=\"hljs\">--timings</code> option gives some information about how long each compilation\ntakes, and tracks concurrency information over time.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">cargo build --timings\n</code></pre>\n<p>This writes an HTML report in <code class=\"hljs\">target/cargo-timings/cargo-timing.html</code>. This\nalso writes a copy of the report to the same directory with a timestamp in the\nfilename, if you want to look at older runs.</p>\n<h2 id=\"reading-the-graphs\"><a class=\"header\" href=\"#reading-the-graphs\">Reading the graphs</a></h2>\n<p>There are two tables and two graphs in the output.</p>\n<p>The first table displays the build information of the project, including the\nnumber of units built, the maximum number of concurrency, build time, and the\nversion information of the currently used compiler.</p>\n<p><img src=\"reference/../images/build-info.png\" alt=\"build-info\"></p>\n<p>The “unit” graph shows the duration of each unit over time. A “unit” is a single\ncompiler invocation. There are lines that show which additional units are\n“unlocked” when a unit finishes. That is, it shows the new units that are now\nallowed to run because their dependencies are all finished. Hover the mouse over\na unit to highlight the lines. This can help visualize the critical path of\ndependencies. This may change between runs because the units may finish in\ndifferent orders.</p>\n<p>The “codegen” times are highlighted in a lavender color. In some cases, build\npipelining allows units to start when their dependencies are performing code\ngeneration. This information is not always displayed (for example, binary\nunits do not show when code generation starts).</p>\n<p>The “custom build” units are <code class=\"hljs\">build.rs</code> scripts, which when run are\nhighlighted in orange.</p>\n<p><img src=\"reference/../images/build-unit-time.png\" alt=\"build-unit-time\"></p>\n<p>The second graph shows Cargo’s concurrency over time. The background\nindicates CPU usage. The three lines are:</p>\n<ul>\n<li>“Waiting” (red) — This is the number of units waiting for a CPU slot to\nopen.</li>\n<li>“Inactive” (blue) — This is the number of units that are waiting for their\ndependencies to finish.</li>\n<li>“Active” (green) — This is the number of units currently running.</li>\n</ul>\n<p><img src=\"reference/../images/cargo-concurrency-over-time.png\" alt=\"cargo-concurrency-over-time\"></p>\n<p>Note: This does not show the concurrency in the compiler itself. <code class=\"hljs\">rustc</code>\ncoordinates with Cargo via the “job server” to stay within the concurrency\nlimit. This currently mostly applies to the code generation phase.</p>\n<p>Tips for addressing compile times:</p>\n<ul>\n<li>Look for slow dependencies.\n<ul>\n<li>Check if they have features that you may wish to consider disabling.</li>\n<li>Consider trying to remove the dependency completely.</li>\n</ul>\n</li>\n<li>Look for a crate being built multiple times with different versions. Try to\nremove the older versions from the dependency graph.</li>\n<li>Split large crates into smaller pieces.</li>\n<li>If there are a large number of crates bottlenecked on a single crate, focus\nyour attention on improving that one crate to improve parallelism.</li>\n</ul>\n<p>The last table lists the total time and “codegen” time spent on each unit,\nas well as the features that were enabled during each unit’s compilation.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unstable-features\"><a class=\"header\" href=\"#unstable-features\">Unstable Features</a></h1>\n<p>Experimental Cargo features are only available on the <a href=\"reference/../../book/appendix-07-nightly-rust.html\">nightly channel</a>. You\nare encouraged to experiment with these features to see if they meet your\nneeds, and if there are any issues or problems. Check the linked tracking\nissues listed below for more information on the feature, and click the GitHub\nsubscribe button if you want future updates.</p>\n<p>After some period of time, if the feature does not have any major concerns, it\ncan be <a href=\"https://doc.crates.io/contrib/process/unstable.html#stabilization\">stabilized</a>, which will make it available on stable once the current\nnightly release reaches the stable channel (anywhere from 6 to 12 weeks).</p>\n<p>There are three different ways that unstable features can be enabled based on\nhow the feature works:</p>\n<ul>\n<li>\n<p>New syntax in <code class=\"hljs\">Cargo.toml</code> requires a <code class=\"hljs\">cargo-features</code> key at the top of\n<code class=\"hljs\">Cargo.toml</code>, before any tables. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># This specifies which new Cargo.toml features are enabled.</span>\n<span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"test-dummy-unstable\"</span>]\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-package\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">im-a-teapot</span> = <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\"># This is a new option enabled by test-dummy-unstable.</span>\n</code></pre>\n</li>\n<li>\n<p>New command-line flags, options, and subcommands require the <code class=\"hljs\">-Z unstable-options</code> CLI option to also be included. For example, the new\n<code class=\"hljs\">--out-dir</code> option is only available on nightly:</p>\n<p><code class=\"hljs\">cargo +nightly build --out-dir=out -Z unstable-options</code></p>\n</li>\n<li>\n<p><code class=\"hljs\">-Z</code> command-line flags are used to enable new functionality that may not\nhave an interface, or the interface has not yet been designed, or for more\ncomplex features that affect multiple parts of Cargo. For example, the\n<a href=\"reference/unstable.html#mtime-on-use\">mtime-on-use</a> feature can be enabled with:</p>\n<p><code class=\"hljs\">cargo +nightly build -Z mtime-on-use</code></p>\n<p>Run <code class=\"hljs\">cargo -Z help</code> to see a list of flags available.</p>\n<p>Anything which can be configured with a <code class=\"hljs\">-Z</code> flag can also be set in the\ncargo <a href=\"reference/config.html\">config file</a> (<code class=\"hljs\">.cargo/config.toml</code>) in the <code class=\"hljs\">unstable</code> table. For\nexample:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[unstable]</span>\n<span class=\"hljs-attr\">mtime-on-use</span> = <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">build-std</span> = [<span class=\"hljs-string\">\"core\"</span>, <span class=\"hljs-string\">\"alloc\"</span>]\n</code></pre>\n</li>\n</ul>\n<p>Each new feature described below should explain how to use it.\nFor the latest nightly, see the <a href=\"https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#script\">nightly version</a> of this page.</p>\n<h2 id=\"list-of-unstable-features\"><a class=\"header\" href=\"#list-of-unstable-features\">List of unstable features</a></h2>\n<ul>\n<li>Unstable-specific features\n<ul>\n<li><a href=\"reference/unstable.html#allow-features\">-Z allow-features</a> — Provides a way to restrict which unstable features are used.</li>\n</ul>\n</li>\n<li>Build scripts and linking\n<ul>\n<li><a href=\"reference/unstable.html#metabuild\">Metabuild</a> — Provides declarative build scripts.</li>\n</ul>\n</li>\n<li>Resolver and features\n<ul>\n<li><a href=\"reference/unstable.html#no-index-update\">no-index-update</a> — Prevents cargo from updating the index cache.</li>\n<li><a href=\"reference/unstable.html#avoid-dev-deps\">avoid-dev-deps</a> — Prevents the resolver from including dev-dependencies during resolution.</li>\n<li><a href=\"reference/unstable.html#minimal-versions\">minimal-versions</a> — Forces the resolver to use the lowest compatible version instead of the highest.</li>\n<li><a href=\"reference/unstable.html#direct-minimal-versions\">direct-minimal-versions</a> — Forces the resolver to use the lowest compatible version instead of the highest.</li>\n<li><a href=\"reference/unstable.html#public-dependency\">public-dependency</a> — Allows dependencies to be classified as either public or private.</li>\n<li><a href=\"reference/unstable.html#msrv-policy\">msrv-policy</a> — MSRV-aware resolver and version selection</li>\n<li><a href=\"reference/unstable.html#precise-pre-release\">precise-pre-release</a> — Allows pre-release versions to be selected with <code class=\"hljs\">update --precise</code></li>\n</ul>\n</li>\n<li>Output behavior\n<ul>\n<li><a href=\"reference/unstable.html#out-dir\">out-dir</a> — Adds a directory where artifacts are copied to.</li>\n<li><a href=\"reference/unstable.html#different-binary-name\">Different binary name</a> — Assign a name to the built binary that is separate from the crate name.</li>\n</ul>\n</li>\n<li>Compile behavior\n<ul>\n<li><a href=\"reference/unstable.html#mtime-on-use\">mtime-on-use</a> — Updates the last-modified timestamp on every dependency every time it is used, to provide a mechanism to delete unused artifacts.</li>\n<li><a href=\"reference/unstable.html#doctest-xcompile\">doctest-xcompile</a> — Supports running doctests with the <code class=\"hljs\">--target</code> flag.</li>\n<li><a href=\"reference/unstable.html#build-std\">build-std</a> — Builds the standard library instead of using pre-built binaries.</li>\n<li><a href=\"reference/unstable.html#build-std-features\">build-std-features</a> — Sets features to use with the standard library.</li>\n<li><a href=\"reference/unstable.html#binary-dep-depinfo\">binary-dep-depinfo</a> — Causes the dep-info file to track binary dependencies.</li>\n<li><a href=\"reference/unstable.html#panic-abort-tests\">panic-abort-tests</a> — Allows running tests with the “abort” panic strategy.</li>\n<li><a href=\"reference/unstable.html#host-config\">host-config</a> — Allows setting <code class=\"hljs\">[target]</code>-like configuration settings for host build targets.</li>\n<li><a href=\"reference/unstable.html#target-applies-to-host\">target-applies-to-host</a> — Alters whether certain flags will be passed to host build targets.</li>\n<li><a href=\"reference/unstable.html#gc\">gc</a> — Global cache garbage collection.</li>\n<li><a href=\"reference/unstable.html#open-namespaces\">open-namespaces</a> — Allow multiple packages to participate in the same API namespace</li>\n</ul>\n</li>\n<li>rustdoc\n<ul>\n<li><a href=\"reference/unstable.html#rustdoc-map\">rustdoc-map</a> — Provides mappings for documentation to link to external sites like <a href=\"https://docs.rs/\">docs.rs</a>.</li>\n<li><a href=\"reference/unstable.html#scrape-examples\">scrape-examples</a> — Shows examples within documentation.</li>\n<li><a href=\"reference/unstable.html#output-format-for-rustdoc\">output-format</a> — Allows documentation to also be emitted in the experimental <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc_json_types/\">JSON format</a>.</li>\n</ul>\n</li>\n<li><code class=\"hljs\">Cargo.toml</code> extensions\n<ul>\n<li><a href=\"reference/unstable.html#profile-rustflags-option\">Profile <code class=\"hljs\">rustflags</code> option</a> — Passed directly to rustc.</li>\n<li><a href=\"reference/unstable.html#codegen-backend\">codegen-backend</a> — Select the codegen backend used by rustc.</li>\n<li><a href=\"reference/unstable.html#per-package-target\">per-package-target</a> — Sets the <code class=\"hljs\">--target</code> to use for each individual package.</li>\n<li><a href=\"reference/unstable.html#artifact-dependencies\">artifact dependencies</a> — Allow build artifacts to be included into other build artifacts and build them for different targets.</li>\n<li><a href=\"reference/unstable.html#edition-2024\">Edition 2024</a> — Adds support for the 2024 Edition.</li>\n<li><a href=\"reference/unstable.html#profile-trim-paths-option\">Profile <code class=\"hljs\">trim-paths</code> option</a> — Control the sanitization of file paths in build outputs.</li>\n<li><a href=\"reference/unstable.html#lintscargo\"><code class=\"hljs\">[lints.cargo]</code></a> — Allows configuring lints for Cargo.</li>\n</ul>\n</li>\n<li>Information and metadata\n<ul>\n<li><a href=\"reference/unstable.html#build-plan\">Build-plan</a> — Emits JSON information on which commands will be run.</li>\n<li><a href=\"reference/unstable.html#unit-graph\">unit-graph</a> — Emits JSON for Cargo’s internal graph structure.</li>\n<li><a href=\"reference/unstable.html#rustc---print\"><code class=\"hljs\">cargo rustc --print</code></a> — Calls rustc with <code class=\"hljs\">--print</code> to display information from rustc.</li>\n</ul>\n</li>\n<li>Configuration\n<ul>\n<li><a href=\"reference/unstable.html#config-include\">config-include</a> — Adds the ability for config files to include other files.</li>\n<li><a href=\"reference/unstable.html#cargo-config\"><code class=\"hljs\">cargo config</code></a> — Adds a new subcommand for viewing config files.</li>\n</ul>\n</li>\n<li>Registries\n<ul>\n<li><a href=\"reference/unstable.html#publish-timeout\">publish-timeout</a> — Controls the timeout between uploading the crate and being available in the index</li>\n<li><a href=\"reference/unstable.html#asymmetric-token\">asymmetric-token</a> — Adds support for authentication tokens using asymmetric cryptography (<code class=\"hljs\">cargo:paseto</code> provider).</li>\n</ul>\n</li>\n<li>Other\n<ul>\n<li><a href=\"reference/unstable.html#gitoxide\">gitoxide</a> — Use <code class=\"hljs\">gitoxide</code> instead of <code class=\"hljs\">git2</code> for a set of operations.</li>\n<li><a href=\"reference/unstable.html#script\">script</a> — Enable support for single-file <code class=\"hljs\">.rs</code> packages.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"allow-features\"><a class=\"header\" href=\"#allow-features\">allow-features</a></h2>\n<p>This permanently-unstable flag makes it so that only a listed set of\nunstable features can be used. Specifically, if you pass\n<code class=\"hljs\">-Zallow-features=foo,bar</code>, you’ll continue to be able to pass <code class=\"hljs\">-Zfoo</code>\nand <code class=\"hljs\">-Zbar</code> to <code class=\"hljs\">cargo</code>, but you will be unable to pass <code class=\"hljs\">-Zbaz</code>. You can\npass an empty string (<code class=\"hljs\">-Zallow-features=</code>) to disallow all unstable\nfeatures.</p>\n<p><code class=\"hljs\">-Zallow-features</code> also restricts which unstable features can be passed\nto the <code class=\"hljs\">cargo-features</code> entry in <code class=\"hljs\">Cargo.toml</code>. If, for example, you want\nto allow</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"test-dummy-unstable\"</span>]\n</code></pre>\n<p>where <code class=\"hljs\">test-dummy-unstable</code> is unstable, that features would also be\ndisallowed by <code class=\"hljs\">-Zallow-features=</code>, and allowed with\n<code class=\"hljs\">-Zallow-features=test-dummy-unstable</code>.</p>\n<p>The list of features passed to cargo’s <code class=\"hljs\">-Zallow-features</code> is also passed\nto any Rust tools that cargo ends up calling (like <code class=\"hljs\">rustc</code> or\n<code class=\"hljs\">rustdoc</code>). Thus, if you run <code class=\"hljs\">cargo -Zallow-features=</code>, no unstable\nCargo <em>or</em> Rust features can be used.</p>\n<h2 id=\"no-index-update\"><a class=\"header\" href=\"#no-index-update\">no-index-update</a></h2>\n<ul>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/issues/3479\">#3479</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/7404\">#7404</a></li>\n</ul>\n<p>The <code class=\"hljs\">-Z no-index-update</code> flag ensures that Cargo does not attempt to update\nthe registry index. This is intended for tools such as Crater that issue many\nCargo commands, and you want to avoid the network latency for updating the\nindex each time.</p>\n<h2 id=\"mtime-on-use\"><a class=\"header\" href=\"#mtime-on-use\">mtime-on-use</a></h2>\n<ul>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/pull/6477\">#6477</a></li>\n<li>Cache usage meta tracking issue: <a href=\"https://github.com/rust-lang/cargo/issues/7150\">#7150</a></li>\n</ul>\n<p>The <code class=\"hljs\">-Z mtime-on-use</code> flag is an experiment to have Cargo update the mtime of\nused files to make it easier for tools like cargo-sweep to detect which files\nare stale. For many workflows this needs to be set on <em>all</em> invocations of cargo.\nTo make this more practical setting the <code class=\"hljs\">unstable.mtime_on_use</code> flag in <code class=\"hljs\">.cargo/config.toml</code>\nor the corresponding ENV variable will apply the <code class=\"hljs\">-Z mtime-on-use</code> to all\ninvocations of nightly cargo. (the config flag is ignored by stable)</p>\n<h2 id=\"avoid-dev-deps\"><a class=\"header\" href=\"#avoid-dev-deps\">avoid-dev-deps</a></h2>\n<ul>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/issues/4988\">#4988</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/5133\">#5133</a></li>\n</ul>\n<p>When running commands such as <code class=\"hljs\">cargo install</code> or <code class=\"hljs\">cargo build</code>, Cargo\ncurrently requires dev-dependencies to be downloaded, even if they are not\nused. The <code class=\"hljs\">-Z avoid-dev-deps</code> flag allows Cargo to avoid downloading\ndev-dependencies if they are not needed. The <code class=\"hljs\">Cargo.lock</code> file will not be\ngenerated if dev-dependencies are skipped.</p>\n<h2 id=\"minimal-versions\"><a class=\"header\" href=\"#minimal-versions\">minimal-versions</a></h2>\n<ul>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/issues/4100\">#4100</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/5657\">#5657</a></li>\n</ul>\n<blockquote>\n<p>Note: It is not recommended to use this feature. Because it enforces minimal\nversions for all transitive dependencies, its usefulness is limited since\nnot all external dependencies declare proper lower version bounds. It is\nintended that it will be changed in the future to only enforce minimal\nversions for direct dependencies.</p>\n</blockquote>\n<p>When a <code class=\"hljs\">Cargo.lock</code> file is generated, the <code class=\"hljs\">-Z minimal-versions</code> flag will\nresolve the dependencies to the minimum SemVer version that will satisfy the\nrequirements (instead of the greatest version).</p>\n<p>The intended use-case of this flag is to check, during continuous integration,\nthat the versions specified in Cargo.toml are a correct reflection of the\nminimum versions that you are actually using. That is, if Cargo.toml says\n<code class=\"hljs\">foo = \"1.0.0\"</code> that you don’t accidentally depend on features added only in\n<code class=\"hljs\">foo 1.5.0</code>.</p>\n<h2 id=\"direct-minimal-versions\"><a class=\"header\" href=\"#direct-minimal-versions\">direct-minimal-versions</a></h2>\n<ul>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/issues/4100\">#4100</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/5657\">#5657</a></li>\n</ul>\n<p>When a <code class=\"hljs\">Cargo.lock</code> file is generated, the <code class=\"hljs\">-Z direct-minimal-versions</code> flag will\nresolve the dependencies to the minimum SemVer version that will satisfy the\nrequirements (instead of the greatest version) for direct dependencies only.</p>\n<p>The intended use-case of this flag is to check, during continuous integration,\nthat the versions specified in Cargo.toml are a correct reflection of the\nminimum versions that you are actually using. That is, if Cargo.toml says\n<code class=\"hljs\">foo = \"1.0.0\"</code> that you don’t accidentally depend on features added only in\n<code class=\"hljs\">foo 1.5.0</code>.</p>\n<p>Indirect dependencies are resolved as normal so as not to be blocked on their\nminimal version validation.</p>\n<h2 id=\"out-dir\"><a class=\"header\" href=\"#out-dir\">out-dir</a></h2>\n<ul>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/issues/4875\">#4875</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/6790\">#6790</a></li>\n</ul>\n<p>This feature allows you to specify the directory where artifacts will be\ncopied to after they are built. Typically artifacts are only written to the\n<code class=\"hljs\">target/release</code> or <code class=\"hljs\">target/debug</code> directories. However, determining the\nexact filename can be tricky since you need to parse JSON output. The\n<code class=\"hljs\">--out-dir</code> flag makes it easier to predictably access the artifacts. Note\nthat the artifacts are copied, so the originals are still in the <code class=\"hljs\">target</code>\ndirectory. Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">cargo +nightly build --out-dir=out -Z unstable-options\n</code></pre>\n<p>This can also be specified in <code class=\"hljs\">.cargo/config.toml</code> files.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[build]</span>\n<span class=\"hljs-attr\">out-dir</span> = <span class=\"hljs-string\">\"out\"</span>\n</code></pre>\n<h2 id=\"doctest-xcompile\"><a class=\"header\" href=\"#doctest-xcompile\">doctest-xcompile</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/7040\">#7040</a></li>\n<li>Tracking Rustc Issue: <a href=\"https://github.com/rust-lang/rust/issues/64245\">#64245</a></li>\n</ul>\n<p>This flag changes <code class=\"hljs\">cargo test</code>’s behavior when handling doctests when\na target is passed. Currently, if a target is passed that is different\nfrom the host cargo will simply skip testing doctests. If this flag is\npresent, cargo will continue as normal, passing the tests to doctest,\nwhile also passing it a <code class=\"hljs\">--target</code> option, as well as enabling\n<code class=\"hljs\">-Zunstable-features --enable-per-target-ignores</code> and passing along\ninformation from <code class=\"hljs\">.cargo/config.toml</code>. See the rustc issue for more information.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">cargo <span class=\"hljs-built_in\">test</span> --target foo -Zdoctest-xcompile\n</code></pre>\n<h2 id=\"build-plan\"><a class=\"header\" href=\"#build-plan\">Build-plan</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/5579\">#5579</a></li>\n</ul>\n<p>The <code class=\"hljs\">--build-plan</code> argument for the <code class=\"hljs\">build</code> command will output JSON with\ninformation about which commands would be run without actually executing\nanything. This can be useful when integrating with another build tool.\nExample:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">cargo +nightly build --build-plan -Z unstable-options\n</code></pre>\n<h2 id=\"metabuild\"><a class=\"header\" href=\"#metabuild\">Metabuild</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/rust/issues/49803\">rust-lang/rust#49803</a></li>\n<li>RFC: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2196-metabuild.md\">#2196</a></li>\n</ul>\n<p>Metabuild is a feature to have declarative build scripts. Instead of writing\na <code class=\"hljs\">build.rs</code> script, you specify a list of build dependencies in the\n<code class=\"hljs\">metabuild</code> key in <code class=\"hljs\">Cargo.toml</code>. A build script is automatically generated\nthat runs each build dependency in order. Metabuild packages can then read\nmetadata from <code class=\"hljs\">Cargo.toml</code> to specify their behavior.</p>\n<p>Include <code class=\"hljs\">cargo-features</code> at the top of <code class=\"hljs\">Cargo.toml</code>, a <code class=\"hljs\">metabuild</code> key in the\n<code class=\"hljs\">package</code>, list the dependencies in <code class=\"hljs\">build-dependencies</code>, and add any metadata\nthat the metabuild packages require under <code class=\"hljs\">package.metadata</code>. Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"metabuild\"</span>]\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"mypackage\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.0.1\"</span>\n<span class=\"hljs-attr\">metabuild</span> = [<span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-string\">\"bar\"</span>]\n\n<span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">foo</span> = <span class=\"hljs-string\">\"1.0\"</span>\n<span class=\"hljs-attr\">bar</span> = <span class=\"hljs-string\">\"1.0\"</span>\n\n<span class=\"hljs-section\">[package.metadata.foo]</span>\n<span class=\"hljs-attr\">extra-info</span> = <span class=\"hljs-string\">\"qwerty\"</span>\n</code></pre>\n<p>Metabuild packages should have a public function called <code class=\"hljs\">metabuild</code> that\nperforms the same actions as a regular <code class=\"hljs\">build.rs</code> script would perform.</p>\n<h2 id=\"public-dependency\"><a class=\"header\" href=\"#public-dependency\">public-dependency</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/rust/issues/44663\">#44663</a></li>\n</ul>\n<p>The ‘public-dependency’ feature allows marking dependencies as ‘public’\nor ‘private’. When this feature is enabled, additional information is passed to rustc to allow\nthe <a href=\"reference/../../rustc/lints/listing/warn-by-default.html#exported-private-dependencies\">exported_private_dependencies</a> lint to function properly.</p>\n<p>To enable this feature, you can either use <code class=\"hljs\">-Zpublic-dependency</code></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">cargo +nightly run -Zpublic-dependency\n</code></pre>\n<p>or <code class=\"hljs\">[unstable]</code> table, for example,</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># .cargo/config.toml</span>\n<span class=\"hljs-section\">[unstable]</span>\n<span class=\"hljs-attr\">public-dependency</span> = <span class=\"hljs-literal\">true</span>\n</code></pre>\n<p><code class=\"hljs\">public-dependency</code> could also be enabled in <code class=\"hljs\">cargo-features</code>, <strong>though this is deprecated and will be removed soon</strong>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"public-dependency\"</span>]\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">my_dep</span> = { version = <span class=\"hljs-string\">\"1.2.3\"</span>, public = <span class=\"hljs-literal\">true</span> }\n<span class=\"hljs-attr\">private_dep</span> = <span class=\"hljs-string\">\"2.0.0\"</span> <span class=\"hljs-comment\"># Will be 'private' by default</span>\n</code></pre>\n<p>Documentation updates:</p>\n<ul>\n<li>For workspace’s “The <code class=\"hljs\">dependencies</code> table” section, include <code class=\"hljs\">public</code> as an unsupported field for <code class=\"hljs\">workspace.dependencies</code></li>\n</ul>\n<h2 id=\"msrv-policy\"><a class=\"header\" href=\"#msrv-policy\">msrv-policy</a></h2>\n<ul>\n<li><a href=\"https://github.com/rust-lang/cargo/issues/9930\">#9930</a> (MSRV-aware resolver)</li>\n</ul>\n<p>Catch-all unstable feature for MSRV-aware cargo features under\n<a href=\"https://github.com/rust-lang/rfcs/pull/2495\">RFC 2495</a>.</p>\n<h3 id=\"msrv-aware-cargo-add\"><a class=\"header\" href=\"#msrv-aware-cargo-add\">MSRV-aware cargo add</a></h3>\n<p>This was stabilized in 1.79 in <a href=\"https://github.com/rust-lang/cargo/pull/13608\">#13608</a>.</p>\n<h3 id=\"msrv-aware-resolver\"><a class=\"header\" href=\"#msrv-aware-resolver\">MSRV-aware resolver</a></h3>\n<p><code class=\"hljs\">-Zmsrv-policy</code> allows access to an MSRV-aware resolver which can be enabled with:</p>\n<ul>\n<li><code class=\"hljs\">resolver.something-like-precedence</code> config field</li>\n<li><code class=\"hljs\">workspace.resolver = \"3\"</code> / <code class=\"hljs\">package.resolver = \"3\"</code></li>\n<li><code class=\"hljs\">package.edition = \"2024\"</code> (only in workspace root)</li>\n</ul>\n<p>The resolver will prefer dependencies with a <code class=\"hljs\">package.rust-version</code> that is the same or older than your project’s MSRV.\nYour project’s MSRV is determined by taking the lowest <code class=\"hljs\">package.rust-version</code> set among your workspace members.\nIf there is none set, your toolchain version will be used with the intent to pick up the version from rustup’s <code class=\"hljs\">rust-toolchain.toml</code>, if present.</p>\n<h4 id=\"resolversomething-like-precedence\"><a class=\"header\" href=\"#resolversomething-like-precedence\"><code>resolver.something-like-precedence</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: “something-like-maximum”</li>\n<li>Environment: <code class=\"hljs\">CARGO_RESOLVER_SOMETHING_LIKE_PRECEDENCE</code></li>\n</ul>\n<p>Select which policy should be used when resolving dependencies.  Values include</p>\n<ul>\n<li><code class=\"hljs\">something-like-maximum</code>: prefer highest compatible versions of a package</li>\n<li><code class=\"hljs\">something-like-rust-version</code>: prefer versions of packages compatible with your project’s Rust version</li>\n</ul>\n<p>Can be overridden with</p>\n<ul>\n<li><code class=\"hljs\">--ignore-rust-version</code> CLI option</li>\n<li>Setting the dependency’s version requirement too high</li>\n<li>Specifying the version to <code class=\"hljs\">cargo update</code> with <code class=\"hljs\">--precise</code></li>\n</ul>\n<h2 id=\"precise-pre-release\"><a class=\"header\" href=\"#precise-pre-release\">precise-pre-release</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/13290\">#13290</a></li>\n<li>RFC: <a href=\"https://github.com/rust-lang/rfcs/pull/3493\">#3493</a></li>\n</ul>\n<p>The <code class=\"hljs\">precise-pre-release</code> feature allows pre-release versions to be selected with <code class=\"hljs\">update --precise</code>\neven when a pre-release is not specified by a projects <code class=\"hljs\">Cargo.toml</code>.</p>\n<p>Take for example this <code class=\"hljs\">Cargo.toml</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">my-dependency</span> = <span class=\"hljs-string\">\"0.1.1\"</span>\n</code></pre>\n<p>It’s possible to update <code class=\"hljs\">my-dependency</code> to a pre-release with <code class=\"hljs\">update -Zunstable-options my-dependency --precise 0.1.2-pre.0</code>.\nThis is because <code class=\"hljs\">0.1.2-pre.0</code> is considered compatible with <code class=\"hljs\">0.1.1</code>.\nIt would not be possible to upgrade to <code class=\"hljs\">0.2.0-pre.0</code> from <code class=\"hljs\">0.1.1</code> in the same way.</p>\n<h2 id=\"build-std\"><a class=\"header\" href=\"#build-std\">build-std</a></h2>\n<ul>\n<li>Tracking Repository: <a href=\"https://github.com/rust-lang/wg-cargo-std-aware\">https://github.com/rust-lang/wg-cargo-std-aware</a></li>\n</ul>\n<p>The <code class=\"hljs\">build-std</code> feature enables Cargo to compile the standard library itself as\npart of a crate graph compilation. This feature has also historically been known\nas “std-aware Cargo”. This feature is still in very early stages of development,\nand is also a possible massive feature addition to Cargo. This is a very large\nfeature to document, even in the minimal form that it exists in today, so if\nyou’re curious to stay up to date you’ll want to follow the <a href=\"https://github.com/rust-lang/wg-cargo-std-aware\">tracking\nrepository</a> and its set of\nissues.</p>\n<p>The functionality implemented today is behind a flag called <code class=\"hljs\">-Z build-std</code>. This\nflag indicates that Cargo should compile the standard library from source code\nusing the same profile as the main build itself. Note that for this to work you\nneed to have the source code for the standard library available, and at this\ntime the only supported method of doing so is to add the <code class=\"hljs\">rust-src</code> rust rustup\ncomponent:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustup component add rust-src --toolchain nightly</span>\n</code></pre>\n<p>It is also required today that the <code class=\"hljs\">-Z build-std</code> flag is combined with the\n<code class=\"hljs\">--target</code> flag. Note that you’re not forced to do a cross compilation, you’re\njust forced to pass <code class=\"hljs\">--target</code> in one form or another.</p>\n<p>Usage looks like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new foo</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> foo</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo +nightly run -Z build-std --target x86_64-unknown-linux-gnu</span>\n   Compiling core v0.0.0 (...)\n   ...\n   Compiling foo v0.1.0 (...)\n    Finished dev [unoptimized + debuginfo] target(s) in 21.00s\n     Running `target/x86_64-unknown-linux-gnu/debug/foo`\nHello, world!\n</code></pre>\n<p>Here we recompiled the standard library in debug mode with debug assertions\n(like <code class=\"hljs\">src/main.rs</code> is compiled) and everything was linked together at the end.</p>\n<p>Using <code class=\"hljs\">-Z build-std</code> will implicitly compile the stable crates <code class=\"hljs\">core</code>, <code class=\"hljs\">std</code>,\n<code class=\"hljs\">alloc</code>, and <code class=\"hljs\">proc_macro</code>. If you’re using <code class=\"hljs\">cargo test</code> it will also compile the\n<code class=\"hljs\">test</code> crate. If you’re working with an environment which does not support some\nof these crates, then you can pass an argument to <code class=\"hljs\">-Zbuild-std</code> as well:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo +nightly build -Z build-std=core,alloc</span>\n</code></pre>\n<p>The value here is a comma-separated list of standard library crates to build.</p>\n<h3 id=\"requirements\"><a class=\"header\" href=\"#requirements\">Requirements</a></h3>\n<p>As a summary, a list of requirements today to use <code class=\"hljs\">-Z build-std</code> are:</p>\n<ul>\n<li>You must install libstd’s source code through <code class=\"hljs\">rustup component add rust-src</code></li>\n<li>You must pass <code class=\"hljs\">--target</code></li>\n<li>You must use both a nightly Cargo and a nightly rustc</li>\n<li>The <code class=\"hljs\">-Z build-std</code> flag must be passed to all <code class=\"hljs\">cargo</code> invocations.</li>\n</ul>\n<h3 id=\"reporting-bugs-and-helping-out\"><a class=\"header\" href=\"#reporting-bugs-and-helping-out\">Reporting bugs and helping out</a></h3>\n<p>The <code class=\"hljs\">-Z build-std</code> feature is in the very early stages of development! This\nfeature for Cargo has an extremely long history and is very large in scope, and\nthis is just the beginning. If you’d like to report bugs please either report\nthem to:</p>\n<ul>\n<li>Cargo — <a href=\"https://github.com/rust-lang/cargo/issues/new\">https://github.com/rust-lang/cargo/issues/new</a> — for implementation bugs</li>\n<li>The tracking repository —\n<a href=\"https://github.com/rust-lang/wg-cargo-std-aware/issues/new\">https://github.com/rust-lang/wg-cargo-std-aware/issues/new</a> — for larger design\nquestions.</li>\n</ul>\n<p>Also if you’d like to see a feature that’s not yet implemented and/or if\nsomething doesn’t quite work the way you’d like it to, feel free to check out\nthe <a href=\"https://github.com/rust-lang/wg-cargo-std-aware/issues\">issue tracker</a> of\nthe tracking repository, and if it’s not there please file a new issue!</p>\n<h2 id=\"build-std-features\"><a class=\"header\" href=\"#build-std-features\">build-std-features</a></h2>\n<ul>\n<li>Tracking Repository: <a href=\"https://github.com/rust-lang/wg-cargo-std-aware\">https://github.com/rust-lang/wg-cargo-std-aware</a></li>\n</ul>\n<p>This flag is a sibling to the <code class=\"hljs\">-Zbuild-std</code> feature flag. This will configure\nthe features enabled for the standard library itself when building the standard\nlibrary. The default enabled features, at this time, are <code class=\"hljs\">backtrace</code> and\n<code class=\"hljs\">panic-unwind</code>. This flag expects a comma-separated list and, if provided, will\noverride the default list of features enabled.</p>\n<h2 id=\"binary-dep-depinfo\"><a class=\"header\" href=\"#binary-dep-depinfo\">binary-dep-depinfo</a></h2>\n<ul>\n<li>Tracking rustc issue: <a href=\"https://github.com/rust-lang/rust/issues/63012\">#63012</a></li>\n</ul>\n<p>The <code class=\"hljs\">-Z binary-dep-depinfo</code> flag causes Cargo to forward the same flag to\n<code class=\"hljs\">rustc</code> which will then cause <code class=\"hljs\">rustc</code> to include the paths of all binary\ndependencies in the “dep info” file (with the <code class=\"hljs\">.d</code> extension). Cargo then uses\nthat information for change-detection (if any binary dependency changes, then\nthe crate will be rebuilt). The primary use case is for building the compiler\nitself, which has implicit dependencies on the standard library that would\notherwise be untracked for change-detection.</p>\n<h2 id=\"panic-abort-tests\"><a class=\"header\" href=\"#panic-abort-tests\">panic-abort-tests</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/rust/issues/67650\">#67650</a></li>\n<li>Original Pull Request: <a href=\"https://github.com/rust-lang/cargo/pull/7460\">#7460</a></li>\n</ul>\n<p>The <code class=\"hljs\">-Z panic-abort-tests</code> flag will enable nightly support to compile test\nharness crates with <code class=\"hljs\">-Cpanic=abort</code>. Without this flag Cargo will compile tests,\nand everything they depend on, with <code class=\"hljs\">-Cpanic=unwind</code> because it’s the only way\n<code class=\"hljs\">test</code>-the-crate knows how to operate. As of <a href=\"https://github.com/rust-lang/rust/pull/64158\">rust-lang/rust#64158</a>, however,\nthe <code class=\"hljs\">test</code> crate supports <code class=\"hljs\">-C panic=abort</code> with a test-per-process, and can help\navoid compiling crate graphs multiple times.</p>\n<p>It’s currently unclear how this feature will be stabilized in Cargo, but we’d\nlike to stabilize it somehow!</p>\n<h2 id=\"config-include\"><a class=\"header\" href=\"#config-include\">config-include</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/7723\">#7723</a></li>\n</ul>\n<p>This feature requires the <code class=\"hljs\">-Zconfig-include</code> command-line option.</p>\n<p>The <code class=\"hljs\">include</code> key in a config file can be used to load another config file. It\ntakes a string for a path to another file relative to the config file, or an\narray of config file paths. Only path ending with <code class=\"hljs\">.toml</code> is accepted.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># a path ending with `.toml`</span>\n<span class=\"hljs-attr\">include</span> = <span class=\"hljs-string\">\"path/to/mordor.toml\"</span>\n\n<span class=\"hljs-comment\"># or an array of paths</span>\n<span class=\"hljs-attr\">include</span> = [<span class=\"hljs-string\">\"frodo.toml\"</span>, <span class=\"hljs-string\">\"samwise.toml\"</span>]\n</code></pre>\n<p>Unlike other config values, the merge behavior of the <code class=\"hljs\">include</code> key is\ndifferent. When a config file contains an <code class=\"hljs\">include</code> key:</p>\n<ol>\n<li>The config values are first loaded from the <code class=\"hljs\">include</code> path.\n<ul>\n<li>If the value of the <code class=\"hljs\">include</code> key is an array of paths, the config values\nare loaded and merged from left to right for each path.</li>\n<li>Recurse this step if the config values from the <code class=\"hljs\">include</code> path also\ncontain an <code class=\"hljs\">include</code> key.</li>\n</ul>\n</li>\n<li>Then, the config file’s own values are merged on top of the config\nfrom the <code class=\"hljs\">include</code> path.</li>\n</ol>\n<h2 id=\"target-applies-to-host\"><a class=\"header\" href=\"#target-applies-to-host\">target-applies-to-host</a></h2>\n<ul>\n<li>Original Pull Request: <a href=\"https://github.com/rust-lang/cargo/pull/9322\">#9322</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/9453\">#9453</a></li>\n</ul>\n<p>Historically, Cargo’s behavior for whether the <code class=\"hljs\">linker</code> and <code class=\"hljs\">rustflags</code>\nconfiguration options from environment variables and\n<a href=\"reference/config.html#target\"><code class=\"hljs\">[target]</code></a> are respected for build scripts, plugins,\nand other artifacts that are <em>always</em> built for the host platform has\nbeen somewhat inconsistent.\nWhen <code class=\"hljs\">--target</code> is <em>not</em> passed, Cargo respects the same <code class=\"hljs\">linker</code> and\n<code class=\"hljs\">rustflags</code> for build scripts as for all other compile artifacts. When\n<code class=\"hljs\">--target</code> <em>is</em> passed, however, Cargo respects <code class=\"hljs\">linker</code> from\n<a href=\"reference/config.html#targettriplelinker\"><code class=\"hljs\">[target.&lt;host triple&gt;]</code></a>, and does not\npick up any <code class=\"hljs\">rustflags</code> configuration.\nThis dual behavior is confusing, but also makes it difficult to correctly\nconfigure builds where the host triple and the <a href=\"reference/../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\">target triple</a> happen to\nbe the same, but artifacts intended to run on the build host should still\nbe configured differently.</p>\n<p><code class=\"hljs\">-Ztarget-applies-to-host</code> enables the top-level\n<code class=\"hljs\">target-applies-to-host</code> setting in Cargo configuration files which\nallows users to opt into different (and more consistent) behavior for\nthese properties. When <code class=\"hljs\">target-applies-to-host</code> is unset, or set to\n<code class=\"hljs\">true</code>, in the configuration file, the existing Cargo behavior is\npreserved (though see <code class=\"hljs\">-Zhost-config</code>, which changes that default). When\nit is set to <code class=\"hljs\">false</code>, no options from <code class=\"hljs\">[target.&lt;host triple&gt;]</code>,\n<code class=\"hljs\">RUSTFLAGS</code>, or <code class=\"hljs\">[build]</code> are respected for host artifacts regardless of\nwhether <code class=\"hljs\">--target</code> is passed to Cargo. To customize artifacts intended\nto be run on the host, use <code class=\"hljs\">[host]</code> (<a href=\"reference/unstable.html#host-config\"><code class=\"hljs\">host-config</code></a>).</p>\n<p>In the future, <code class=\"hljs\">target-applies-to-host</code> may end up defaulting to <code class=\"hljs\">false</code>\nto provide more sane and consistent default behavior.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># config.toml</span>\n<span class=\"hljs-attr\">target-applies-to-host</span> = <span class=\"hljs-literal\">false</span>\n</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">cargo +nightly -Ztarget-applies-to-host build --target x86_64-unknown-linux-gnu\n</code></pre>\n<h2 id=\"host-config\"><a class=\"header\" href=\"#host-config\">host-config</a></h2>\n<ul>\n<li>Original Pull Request: <a href=\"https://github.com/rust-lang/cargo/pull/9322\">#9322</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/9452\">#9452</a></li>\n</ul>\n<p>The <code class=\"hljs\">host</code> key in a config file can be used pass flags to host build targets\nsuch as build scripts that must run on the host system instead of the target\nsystem when cross compiling. It supports both generic and host arch specific\ntables. Matching host arch tables take precedence over generic host tables.</p>\n<p>It requires the <code class=\"hljs\">-Zhost-config</code> and <code class=\"hljs\">-Ztarget-applies-to-host</code>\ncommand-line options to be set, and that <code class=\"hljs\">target-applies-to-host = false</code> is set in the Cargo configuration file.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># config.toml</span>\n<span class=\"hljs-section\">[host]</span>\n<span class=\"hljs-attr\">linker</span> = <span class=\"hljs-string\">\"/path/to/host/linker\"</span>\n<span class=\"hljs-section\">[host.x86_64-unknown-linux-gnu]</span>\n<span class=\"hljs-attr\">linker</span> = <span class=\"hljs-string\">\"/path/to/host/arch/linker\"</span>\n<span class=\"hljs-attr\">rustflags</span> = [<span class=\"hljs-string\">\"-Clink-arg=--verbose\"</span>]\n<span class=\"hljs-section\">[target.x86_64-unknown-linux-gnu]</span>\n<span class=\"hljs-attr\">linker</span> = <span class=\"hljs-string\">\"/path/to/target/linker\"</span>\n</code></pre>\n<p>The generic <code class=\"hljs\">host</code> table above will be entirely ignored when building on a\n<code class=\"hljs\">x86_64-unknown-linux-gnu</code> host as the <code class=\"hljs\">host.x86_64-unknown-linux-gnu</code> table\ntakes precedence.</p>\n<p>Setting <code class=\"hljs\">-Zhost-config</code> changes the default for <code class=\"hljs\">target-applies-to-host</code> to\n<code class=\"hljs\">false</code> from <code class=\"hljs\">true</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">cargo +nightly -Ztarget-applies-to-host -Zhost-config build --target x86_64-unknown-linux-gnu\n</code></pre>\n<h2 id=\"unit-graph\"><a class=\"header\" href=\"#unit-graph\">unit-graph</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/8002\">#8002</a></li>\n</ul>\n<p>The <code class=\"hljs\">--unit-graph</code> flag can be passed to any build command (<code class=\"hljs\">build</code>, <code class=\"hljs\">check</code>,\n<code class=\"hljs\">run</code>, <code class=\"hljs\">test</code>, <code class=\"hljs\">bench</code>, <code class=\"hljs\">doc</code>, etc.) to emit a JSON object to stdout which\nrepresents Cargo’s internal unit graph. Nothing is actually built, and the\ncommand returns immediately after printing. Each “unit” corresponds to an\nexecution of the compiler. These objects also include which unit each unit\ndepends on.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo +nightly build --unit-graph -Z unstable-options\n</code></pre>\n<p>This structure provides a more complete view of the dependency relationship as\nCargo sees it. In particular, the “features” field supports the new feature\nresolver where a dependency can be built multiple times with different\nfeatures. <code class=\"hljs\">cargo metadata</code> fundamentally cannot represent the relationship of\nfeatures between different dependency kinds, and features now depend on which\ncommand is run and which packages and targets are selected. Additionally it\ncan provide details about intra-package dependencies like build scripts or\ntests.</p>\n<p>The following is a description of the JSON structure:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n  <span class=\"hljs-comment\">/* Version of the JSON output structure. If any backwards incompatible\n     changes are made, this value will be increased.\n  */</span>\n  <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-comment\">/* Array of all build units. */</span>\n  <span class=\"hljs-string\">\"units\"</span>: [\n    {\n      <span class=\"hljs-comment\">/* An opaque string which indicates the package.\n         Information about the package can be obtained from `cargo metadata`.\n      */</span>\n      <span class=\"hljs-string\">\"pkg_id\"</span>: <span class=\"hljs-string\">\"my-package 0.1.0 (path+file:///path/to/my-package)\"</span>,\n      <span class=\"hljs-comment\">/* The Cargo target. See the `cargo metadata` documentation for more\n         information about these fields.\n         https://doc.rust-lang.org/cargo/commands/cargo-metadata.html\n      */</span>\n      <span class=\"hljs-string\">\"target\"</span>: {\n        <span class=\"hljs-string\">\"kind\"</span>: [<span class=\"hljs-string\">\"lib\"</span>],\n        <span class=\"hljs-string\">\"crate_types\"</span>: [<span class=\"hljs-string\">\"lib\"</span>],\n        <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"my_package\"</span>,\n        <span class=\"hljs-string\">\"src_path\"</span>: <span class=\"hljs-string\">\"/path/to/my-package/src/lib.rs\"</span>,\n        <span class=\"hljs-string\">\"edition\"</span>: <span class=\"hljs-string\">\"2018\"</span>,\n        <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-string\">\"doctest\"</span>: <span class=\"hljs-literal\">true</span>\n      },\n      <span class=\"hljs-comment\">/* The profile settings for this unit.\n         These values may not match the profile defined in the manifest.\n         Units can use modified profile settings. For example, the \"panic\"\n         setting can be overridden for tests to force it to \"unwind\".\n      */</span>\n      <span class=\"hljs-string\">\"profile\"</span>: {\n        <span class=\"hljs-comment\">/* The profile name these settings are derived from. */</span>\n        <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"dev\"</span>,\n        <span class=\"hljs-comment\">/* The optimization level as a string. */</span>\n        <span class=\"hljs-string\">\"opt_level\"</span>: <span class=\"hljs-string\">\"0\"</span>,\n        <span class=\"hljs-comment\">/* The LTO setting as a string. */</span>\n        <span class=\"hljs-string\">\"lto\"</span>: <span class=\"hljs-string\">\"false\"</span>,\n        <span class=\"hljs-comment\">/* The codegen units as an integer.\n           `null` if it should use the compiler's default.\n        */</span>\n        <span class=\"hljs-string\">\"codegen_units\"</span>: <span class=\"hljs-literal\">null</span>,\n        <span class=\"hljs-comment\">/* The debug information level as an integer.\n           `null` if it should use the compiler's default (0).\n        */</span>\n        <span class=\"hljs-string\">\"debuginfo\"</span>: <span class=\"hljs-number\">2</span>,\n        <span class=\"hljs-comment\">/* Whether or not debug-assertions are enabled. */</span>\n        <span class=\"hljs-string\">\"debug_assertions\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">/* Whether or not overflow-checks are enabled. */</span>\n        <span class=\"hljs-string\">\"overflow_checks\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">/* Whether or not rpath is enabled. */</span>\n        <span class=\"hljs-string\">\"rpath\"</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-comment\">/* Whether or not incremental is enabled. */</span>\n        <span class=\"hljs-string\">\"incremental\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">/* The panic strategy, \"unwind\" or \"abort\". */</span>\n        <span class=\"hljs-string\">\"panic\"</span>: <span class=\"hljs-string\">\"unwind\"</span>\n      },\n      <span class=\"hljs-comment\">/* Which platform this target is being built for.\n         A value of `null` indicates it is for the host.\n         Otherwise it is a string of the target triple (such as\n         \"x86_64-unknown-linux-gnu\").\n      */</span>\n      <span class=\"hljs-string\">\"platform\"</span>: <span class=\"hljs-literal\">null</span>,\n      <span class=\"hljs-comment\">/* The \"mode\" for this unit. Valid values:\n\n         * \"test\" --- Build using `rustc` as a test.\n         * \"build\" --- Build using `rustc`.\n         * \"check\" --- Build using `rustc` in \"check\" mode.\n         * \"doc\" --- Build using `rustdoc`.\n         * \"doctest\" --- Test using `rustdoc`.\n         * \"run-custom-build\" --- Represents the execution of a build script.\n      */</span>\n      <span class=\"hljs-string\">\"mode\"</span>: <span class=\"hljs-string\">\"build\"</span>,\n      <span class=\"hljs-comment\">/* Array of features enabled on this unit as strings. */</span>\n      <span class=\"hljs-string\">\"features\"</span>: [<span class=\"hljs-string\">\"somefeat\"</span>],\n      <span class=\"hljs-comment\">/* Whether or not this is a standard-library unit,\n         part of the unstable build-std feature.\n         If not set, treat as `false`.\n      */</span>\n      <span class=\"hljs-string\">\"is_std\"</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-comment\">/* Array of dependencies of this unit. */</span>\n      <span class=\"hljs-string\">\"dependencies\"</span>: [\n        {\n          <span class=\"hljs-comment\">/* Index in the \"units\" array for the dependency. */</span>\n          <span class=\"hljs-string\">\"index\"</span>: <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-comment\">/* The name that this dependency will be referred as. */</span>\n          <span class=\"hljs-string\">\"extern_crate_name\"</span>: <span class=\"hljs-string\">\"unicode_xid\"</span>,\n          <span class=\"hljs-comment\">/* Whether or not this dependency is \"public\",\n             part of the unstable public-dependency feature.\n             If not set, the public-dependency feature is not enabled.\n          */</span>\n          <span class=\"hljs-string\">\"public\"</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-comment\">/* Whether or not this dependency is injected into the prelude,\n             currently used by the build-std feature.\n             If not set, treat as `false`.\n          */</span>\n          <span class=\"hljs-string\">\"noprelude\"</span>: <span class=\"hljs-literal\">false</span>\n        }\n      ]\n    },\n    <span class=\"hljs-comment\">// ...</span>\n  ],\n  <span class=\"hljs-comment\">/* Array of indices in the \"units\" array that are the \"roots\" of the\n     dependency graph.\n  */</span>\n  <span class=\"hljs-string\">\"roots\"</span>: [<span class=\"hljs-number\">0</span>],\n}\n</code></pre>\n<h2 id=\"profile-rustflags-option\"><a class=\"header\" href=\"#profile-rustflags-option\">Profile <code>rustflags</code> option</a></h2>\n<ul>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/issues/7878\">rust-lang/cargo#7878</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/10271\">rust-lang/cargo#10271</a></li>\n</ul>\n<p>This feature provides a new option in the <code class=\"hljs\">[profile]</code> section to specify flags\nthat are passed directly to rustc.\nThis can be enabled like so:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"profile-rustflags\"</span>]\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n\n<span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">rustflags</span> = [ <span class=\"hljs-string\">\"-C\"</span>, <span class=\"hljs-string\">\"...\"</span> ]\n</code></pre>\n<p>To set this in a profile in Cargo configuration, you need to use either\n<code class=\"hljs\">-Z profile-rustflags</code> or <code class=\"hljs\">[unstable]</code> table to enable it. For example,</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># .cargo/config.toml</span>\n<span class=\"hljs-section\">[unstable]</span>\n<span class=\"hljs-attr\">profile-rustflags</span> = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">rustflags</span> = [ <span class=\"hljs-string\">\"-C\"</span>, <span class=\"hljs-string\">\"...\"</span> ]\n</code></pre>\n<h2 id=\"rustdoc-map\"><a class=\"header\" href=\"#rustdoc-map\">rustdoc-map</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/8296\">#8296</a></li>\n</ul>\n<p>This feature adds configuration settings that are passed to <code class=\"hljs\">rustdoc</code> so that\nit can generate links to dependencies whose documentation is hosted elsewhere\nwhen the dependency is not documented. First, add this to <code class=\"hljs\">.cargo/config</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[doc.extern-map.registries]</span>\n<span class=\"hljs-attr\">crates-io</span> = <span class=\"hljs-string\">\"https://docs.rs/\"</span>\n</code></pre>\n<p>Then, when building documentation, use the following flags to cause links\nto dependencies to link to <a href=\"https://docs.rs/\">docs.rs</a>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo +nightly doc --no-deps -Zrustdoc-map\n</code></pre>\n<p>The <code class=\"hljs\">registries</code> table contains a mapping of registry name to the URL to link\nto. The URL may have the markers <code class=\"hljs\">{pkg_name}</code> and <code class=\"hljs\">{version}</code> which will get\nreplaced with the corresponding values. If neither are specified, then Cargo\ndefaults to appending <code class=\"hljs\">{pkg_name}/{version}/</code> to the end of the URL.</p>\n<p>Another config setting is available to redirect standard library links. By\ndefault, rustdoc creates links to <a href=\"https://doc.rust-lang.org/nightly/\">https://doc.rust-lang.org/nightly/</a>. To\nchange this behavior, use the <code class=\"hljs\">doc.extern-map.std</code> setting:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[doc.extern-map]</span>\n<span class=\"hljs-attr\">std</span> = <span class=\"hljs-string\">\"local\"</span>\n</code></pre>\n<p>A value of <code class=\"hljs\">\"local\"</code> means to link to the documentation found in the <code class=\"hljs\">rustc</code>\nsysroot. If you are using rustup, this documentation can be installed with\n<code class=\"hljs\">rustup component add rust-docs</code>.</p>\n<p>The default value is <code class=\"hljs\">\"remote\"</code>.</p>\n<p>The value may also take a URL for a custom location.</p>\n<h2 id=\"per-package-target\"><a class=\"header\" href=\"#per-package-target\">per-package-target</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/pull/9406\">#9406</a></li>\n<li>Original Pull Request: <a href=\"https://github.com/rust-lang/cargo/pull/9030\">#9030</a></li>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/pull/7004\">#7004</a></li>\n</ul>\n<p>The <code class=\"hljs\">per-package-target</code> feature adds two keys to the manifest:\n<code class=\"hljs\">package.default-target</code> and <code class=\"hljs\">package.forced-target</code>. The first makes\nthe package be compiled by default (ie. when no <code class=\"hljs\">--target</code> argument is\npassed) for some target. The second one makes the package always be\ncompiled for the target.</p>\n<p>Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">forced-target</span> = <span class=\"hljs-string\">\"wasm32-unknown-unknown\"</span>\n</code></pre>\n<p>In this example, the crate is always built for\n<code class=\"hljs\">wasm32-unknown-unknown</code>, for instance because it is going to be used\nas a plugin for a main program that runs on the host (or provided on\nthe command line) target.</p>\n<h2 id=\"artifact-dependencies\"><a class=\"header\" href=\"#artifact-dependencies\">artifact-dependencies</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/pull/9096\">#9096</a></li>\n<li>Original Pull Request: <a href=\"https://github.com/rust-lang/cargo/pull/9992\">#9992</a></li>\n</ul>\n<p>Artifact dependencies allow Cargo packages to depend on <code class=\"hljs\">bin</code>, <code class=\"hljs\">cdylib</code>, and <code class=\"hljs\">staticlib</code> crates,\nand use the artifacts built by those crates at compile time.</p>\n<p>Run <code class=\"hljs\">cargo</code> with <code class=\"hljs\">-Z bindeps</code> to enable this functionality.</p>\n<h3 id=\"artifact-dependencies-dependency-declarations\"><a class=\"header\" href=\"#artifact-dependencies-dependency-declarations\">artifact-dependencies: Dependency declarations</a></h3>\n<p>Artifact-dependencies adds the following keys to a dependency declaration in <code class=\"hljs\">Cargo.toml</code>:</p>\n<ul>\n<li>\n<p><code class=\"hljs\">artifact</code> — This specifies the <a href=\"reference/cargo-targets.html\">Cargo Target</a> to build.\nNormally without this field, Cargo will only build the <code class=\"hljs\">[lib]</code> target from a dependency.\nThis field allows specifying which target will be built, and made available as a binary at build time:</p>\n<ul>\n<li><code class=\"hljs\">\"bin\"</code> — Compiled executable binaries, corresponding to all of the <code class=\"hljs\">[[bin]]</code> sections in the dependency’s manifest.</li>\n<li><code class=\"hljs\">\"bin:&lt;bin-name&gt;\"</code> — Compiled executable binary, corresponding to a specific binary target specified by the given <code class=\"hljs\">&lt;bin-name&gt;</code>.</li>\n<li><code class=\"hljs\">\"cdylib\"</code> — A C-compatible dynamic library, corresponding to a <code class=\"hljs\">[lib]</code> section with <code class=\"hljs\">crate-type = [\"cdylib\"]</code> in the dependency’s manifest.</li>\n<li><code class=\"hljs\">\"staticlib\"</code> — A C-compatible static library, corresponding to a <code class=\"hljs\">[lib]</code> section with <code class=\"hljs\">crate-type = [\"staticlib\"]</code> in the dependency’s manifest.</li>\n</ul>\n<p>The <code class=\"hljs\">artifact</code> value can be a string, or it can be an array of strings to specify multiple targets.</p>\n<p>Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">bar</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, artifact = <span class=\"hljs-string\">\"staticlib\"</span> }\n<span class=\"hljs-attr\">zoo</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, artifact = [<span class=\"hljs-string\">\"bin:cat\"</span>, <span class=\"hljs-string\">\"bin:dog\"</span>]}\n</code></pre>\n</li>\n<li>\n<p><code class=\"hljs\">lib</code> — This is a Boolean value which indicates whether or not to also build the dependency’s library as a normal Rust <code class=\"hljs\">lib</code> dependency.\nThis field can only be specified when <code class=\"hljs\">artifact</code> is specified.</p>\n<p>The default for this field is <code class=\"hljs\">false</code> when <code class=\"hljs\">artifact</code> is specified.\nIf this is set to <code class=\"hljs\">true</code>, then the dependency’s <code class=\"hljs\">[lib]</code> target will also be built for the platform target the declaring package is being built for.\nThis allows the package to use the dependency from Rust code like a normal dependency in addition to an artifact dependency.</p>\n<p>Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">bar</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, artifact = <span class=\"hljs-string\">\"bin\"</span>, lib = <span class=\"hljs-literal\">true</span> }\n</code></pre>\n</li>\n<li>\n<p><code class=\"hljs\">target</code> — The platform target to build the dependency for.\nThis field can only be specified when <code class=\"hljs\">artifact</code> is specified.</p>\n<p>The default if this is not specified depends on the dependency kind.\nFor build dependencies, it will be built for the host target.\nFor all other dependencies, it will be built for the same targets the declaring package is built for.</p>\n<p>For a build dependency, this can also take the special value of <code class=\"hljs\">\"target\"</code> which means to build the dependency for the same targets that the package is being built for.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">bar</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, artifact = <span class=\"hljs-string\">\"cdylib\"</span>, target = <span class=\"hljs-string\">\"wasm32-unknown-unknown\"</span>}\n<span class=\"hljs-attr\">same-target</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, artifact = <span class=\"hljs-string\">\"bin\"</span>, target = <span class=\"hljs-string\">\"target\"</span> }\n</code></pre>\n</li>\n</ul>\n<h3 id=\"artifact-dependencies-environment-variables\"><a class=\"header\" href=\"#artifact-dependencies-environment-variables\">artifact-dependencies: Environment variables</a></h3>\n<p>After building an artifact dependency, Cargo provides the following environment variables that you can use to access the artifact:</p>\n<ul>\n<li>\n<p><code class=\"hljs\">CARGO_&lt;ARTIFACT-TYPE&gt;_DIR_&lt;DEP&gt;</code> — This is the directory containing all the artifacts from the dependency.</p>\n<p><code class=\"hljs\">&lt;ARTIFACT-TYPE&gt;</code> is the <code class=\"hljs\">artifact</code> specified for the dependency (uppercased as in <code class=\"hljs\">CDYLIB</code>, <code class=\"hljs\">STATICLIB</code>, or <code class=\"hljs\">BIN</code>) and <code class=\"hljs\">&lt;DEP&gt;</code> is the name of the dependency.\nAs with other Cargo environment variables, dependency names are converted to uppercase, with dashes replaced by underscores.</p>\n<p>If your manifest renames the dependency, <code class=\"hljs\">&lt;DEP&gt;</code> corresponds to the name you specify, not the original package name.</p>\n</li>\n<li>\n<p><code class=\"hljs\">CARGO_&lt;ARTIFACT-TYPE&gt;_FILE_&lt;DEP&gt;_&lt;NAME&gt;</code> — This is the full path to the artifact.</p>\n<p><code class=\"hljs\">&lt;ARTIFACT-TYPE&gt;</code> is the <code class=\"hljs\">artifact</code> specified for the dependency (uppercased as above), <code class=\"hljs\">&lt;DEP&gt;</code> is the name of the dependency (transformed as above), and <code class=\"hljs\">&lt;NAME&gt;</code> is the name of the artifact from the dependency.</p>\n<p>Note that <code class=\"hljs\">&lt;NAME&gt;</code> is not modified in any way from the <code class=\"hljs\">name</code> specified in the crate supplying the artifact, or the crate name if not specified; for instance, it may be in lowercase, or contain dashes.</p>\n<p>For convenience, if the artifact name matches the original package name, cargo additionally supplies a copy of this variable with the <code class=\"hljs\">_&lt;NAME&gt;</code> suffix omitted.\nFor instance, if the <code class=\"hljs\">cmake</code> crate supplies a binary named <code class=\"hljs\">cmake</code>, Cargo supplies both <code class=\"hljs\">CARGO_BIN_FILE_CMAKE</code> and <code class=\"hljs\">CARGO_BIN_FILE_CMAKE_cmake</code>.</p>\n</li>\n</ul>\n<p>For each kind of dependency, these variables are supplied to the same part of the build process that has access to that kind of dependency:</p>\n<ul>\n<li>For build-dependencies, these variables are supplied to the <code class=\"hljs\">build.rs</code> script, and can be accessed using <a href=\"https://doc.rust-lang.org/std/env/fn.var_os.html\"><code class=\"hljs\">std::env::var_os</code></a>.\n(As with any OS file path, these may or may not be valid UTF-8.)</li>\n<li>For normal dependencies, these variables are supplied during the compilation of the crate, and can be accessed using the <a href=\"https://doc.rust-lang.org/std/macro.env.html\"><code class=\"hljs\">env!</code></a> macro.</li>\n<li>For dev-dependencies, these variables are supplied during the compilation of examples, tests, and benchmarks, and can be accessed using the <a href=\"https://doc.rust-lang.org/std/macro.env.html\"><code class=\"hljs\">env!</code></a> macro.</li>\n</ul>\n<h3 id=\"artifact-dependencies-examples\"><a class=\"header\" href=\"#artifact-dependencies-examples\">artifact-dependencies: Examples</a></h3>\n<h4 id=\"example-use-a-binary-executable-from-a-build-script\"><a class=\"header\" href=\"#example-use-a-binary-executable-from-a-build-script\">Example: use a binary executable from a build script</a></h4>\n<p>In the <code class=\"hljs\">Cargo.toml</code> file, you can specify a dependency on a binary to make available for a build script:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">some-build-tool</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, artifact = <span class=\"hljs-string\">\"bin\"</span> }\n</code></pre>\n<p>Then inside the build script, the binary can be executed at build time:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> build_tool = std::env::var_os(<span class=\"hljs-string\">\"CARGO_BIN_FILE_SOME_BUILD_TOOL\"</span>).unwrap();\n    <span class=\"hljs-keyword\">let</span> status = std::process::Command::new(build_tool)\n        .arg(<span class=\"hljs-string\">\"do-stuff\"</span>)\n        .status()\n        .unwrap();\n    <span class=\"hljs-keyword\">if</span> !status.success() {\n        eprintln!(<span class=\"hljs-string\">\"failed!\"</span>);\n        std::process::exit(<span class=\"hljs-number\">1</span>);\n    }\n}</code></pre></pre>\n<h4 id=\"example-use-cdylib-artifact-in-build-script\"><a class=\"header\" href=\"#example-use-cdylib-artifact-in-build-script\">Example: use <em>cdylib</em> artifact in build script</a></h4>\n<p>The <code class=\"hljs\">Cargo.toml</code> in the consuming package, building the <code class=\"hljs\">bar</code> library as <code class=\"hljs\">cdylib</code>\nfor a specific build target…</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">bar</span> = { artifact = <span class=\"hljs-string\">\"cdylib\"</span>, version = <span class=\"hljs-string\">\"1.0\"</span>, target = <span class=\"hljs-string\">\"wasm32-unknown-unknown\"</span> }\n</code></pre>\n<p>…along with the build script in <code class=\"hljs\">build.rs</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    wasm::run_file(std::env::var(<span class=\"hljs-string\">\"CARGO_CDYLIB_FILE_BAR\"</span>).unwrap());\n}</code></pre></pre>\n<h4 id=\"example-use-binary-artifact-and-its-library-in-a-binary\"><a class=\"header\" href=\"#example-use-binary-artifact-and-its-library-in-a-binary\">Example: use <em>binary</em> artifact and its library in a binary</a></h4>\n<p>The <code class=\"hljs\">Cargo.toml</code> in the consuming package, building the <code class=\"hljs\">bar</code> binary for inclusion\nas artifact while making it available as library as well…</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">bar</span> = { artifact = <span class=\"hljs-string\">\"bin\"</span>, version = <span class=\"hljs-string\">\"1.0\"</span>, lib = <span class=\"hljs-literal\">true</span> }\n</code></pre>\n<p>…along with the executable using <code class=\"hljs\">main.rs</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    bar::init();\n    command::run(<span class=\"hljs-built_in\">env!</span>(<span class=\"hljs-string\">\"CARGO_BIN_FILE_BAR\"</span>));\n}</code></pre></pre>\n<h2 id=\"publish-timeout\"><a class=\"header\" href=\"#publish-timeout\">publish-timeout</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/11222\">11222</a></li>\n</ul>\n<p>The <code class=\"hljs\">publish.timeout</code> key in a config file can be used to control how long\n<code class=\"hljs\">cargo publish</code> waits between posting a package to the registry and it being\navailable in the local index.</p>\n<p>A timeout of <code class=\"hljs\">0</code> prevents any checks from occurring. The current default is\n<code class=\"hljs\">60</code> seconds.</p>\n<p>It requires the <code class=\"hljs\">-Zpublish-timeout</code> command-line options to be set.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># config.toml</span>\n<span class=\"hljs-section\">[publish]</span>\n<span class=\"hljs-attr\">timeout</span> = <span class=\"hljs-number\">300</span>  <span class=\"hljs-comment\"># in seconds</span>\n</code></pre>\n<h2 id=\"asymmetric-token\"><a class=\"header\" href=\"#asymmetric-token\">asymmetric-token</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/10519\">10519</a></li>\n<li>RFC: <a href=\"https://github.com/rust-lang/rfcs/pull/3231\">#3231</a></li>\n</ul>\n<p>The <code class=\"hljs\">-Z asymmetric-token</code> flag enables the <code class=\"hljs\">cargo:paseto</code> credential provider which allows Cargo to authenticate to registries without sending secrets over the network.</p>\n<p>In <a href=\"reference/config.html\"><code class=\"hljs\">config.toml</code></a> and <code class=\"hljs\">credentials.toml</code> files there is a field called <code class=\"hljs\">private-key</code>, which is a private key formatted in the secret <a href=\"https://github.com/paseto-standard/paserk/blob/master/types/secret.md\">subset of <code class=\"hljs\">PASERK</code></a> and is used to sign asymmetric tokens</p>\n<p>A keypair can be generated with <code class=\"hljs\">cargo login --generate-keypair</code> which will:</p>\n<ul>\n<li>generate a public/private keypair in the currently recommended fashion.</li>\n<li>save the private key in <code class=\"hljs\">credentials.toml</code>.</li>\n<li>print the public key in <a href=\"https://github.com/paseto-standard/paserk/blob/master/types/public.md\">PASERK public</a> format.</li>\n</ul>\n<p>It is recommended that the <code class=\"hljs\">private-key</code> be saved in <code class=\"hljs\">credentials.toml</code>. It is also supported in <code class=\"hljs\">config.toml</code>, primarily so that it can be set using the associated environment variable, which is the recommended way to provide it in CI contexts. This setup is what we have for the <code class=\"hljs\">token</code> field for setting a secret token.</p>\n<p>There is also an optional field called <code class=\"hljs\">private-key-subject</code> which is a string chosen by the registry.\nThis string will be included as part of an asymmetric token and should not be secret.\nIt is intended for the rare use cases like “cryptographic proof that the central CA server authorized this action”. Cargo requires it to be non-whitespace printable ASCII. Registries that need non-ASCII data should base64 encode it.</p>\n<p>Both fields can be set with <code class=\"hljs\">cargo login --registry=name --private-key --private-key-subject=\"subject\"</code> which will prompt you to put in the key value.</p>\n<p>A registry can have at most one of <code class=\"hljs\">private-key</code> or <code class=\"hljs\">token</code> set.</p>\n<p>All PASETOs will include <code class=\"hljs\">iat</code>, the current time in ISO 8601 format. Cargo will include the following where appropriate:</p>\n<ul>\n<li><code class=\"hljs\">sub</code> an optional, non-secret string chosen by the registry that is expected to be claimed with every request. The value will be the <code class=\"hljs\">private-key-subject</code> from the <code class=\"hljs\">config.toml</code> file.</li>\n<li><code class=\"hljs\">mutation</code> if present, indicates that this request is a mutating operation (or a read-only operation if not present), must be one of the strings <code class=\"hljs\">publish</code>, <code class=\"hljs\">yank</code>, or <code class=\"hljs\">unyank</code>.\n<ul>\n<li><code class=\"hljs\">name</code> name of the crate related to this request.</li>\n<li><code class=\"hljs\">vers</code> version string of the crate related to this request.</li>\n<li><code class=\"hljs\">cksum</code> the SHA256 hash of the crate contents, as a string of 64 lowercase hexadecimal digits, must be present only when <code class=\"hljs\">mutation</code> is equal to <code class=\"hljs\">publish</code></li>\n</ul>\n</li>\n<li><code class=\"hljs\">challenge</code> the challenge string received from a 401/403 from this server this session. Registries that issue challenges must track which challenges have been issued/used and never accept a given challenge more than once within the same validity period (avoiding the need to track every challenge ever issued).</li>\n</ul>\n<p>The “footer” (which is part of the signature) will be a JSON string in UTF-8 and include:</p>\n<ul>\n<li><code class=\"hljs\">url</code> the RFC 3986 compliant URL where cargo got the config.json file,\n<ul>\n<li>If this is a registry with an HTTP index, then this is the base URL that all index queries are relative to.</li>\n<li>If this is a registry with a GIT index, it is the URL Cargo used to clone the index.</li>\n</ul>\n</li>\n<li><code class=\"hljs\">kid</code> the identifier of the private key used to sign the request, using the <a href=\"https://github.com/paseto-standard/paserk/blob/master/operations/ID.md\">PASERK IDs</a> standard.</li>\n</ul>\n<p>PASETO includes the message that was signed, so the server does not have to reconstruct the exact string from the request in order to check the signature. The server does need to check that the signature is valid for the string in the PASETO and that the contents of that string matches the request.\nIf a claim should be expected for the request but is missing in the PASETO then the request must be rejected.</p>\n<h2 id=\"cargo-config\"><a class=\"header\" href=\"#cargo-config\"><code>cargo config</code></a></h2>\n<ul>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/issues/2362\">#2362</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/9301\">#9301</a></li>\n</ul>\n<p>The <code class=\"hljs\">cargo config</code> subcommand provides a way to display the configuration\nfiles that cargo loads. It currently includes the <code class=\"hljs\">get</code> subcommand which\ncan take an optional config value to display.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">cargo +nightly -Zunstable-options config get build.rustflags\n</code></pre>\n<p>If no config value is included, it will display all config values. See the\n<code class=\"hljs\">--help</code> output for more options available.</p>\n<h2 id=\"rustc---print\"><a class=\"header\" href=\"#rustc---print\">rustc <code>--print</code></a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/9357\">#9357</a></li>\n</ul>\n<p><code class=\"hljs\">cargo rustc --print=VAL</code> forwards the <code class=\"hljs\">--print</code> flag to <code class=\"hljs\">rustc</code> in order to\nextract information from <code class=\"hljs\">rustc</code>. This runs <code class=\"hljs\">rustc</code> with the corresponding\n<a href=\"https://doc.rust-lang.org/rustc/command-line-arguments.html#--print-print-compiler-information\"><code class=\"hljs\">--print</code></a>\nflag, and then immediately exits without compiling. Exposing this as a cargo\nflag allows cargo to inject the correct target and RUSTFLAGS based on the\ncurrent configuration.</p>\n<p>The primary use case is to run <code class=\"hljs\">cargo rustc --print=cfg</code> to get config values\nfor the appropriate target and influenced by any other RUSTFLAGS.</p>\n<h2 id=\"different-binary-name\"><a class=\"header\" href=\"#different-binary-name\">Different binary name</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/9778\">#9778</a></li>\n<li>PR: <a href=\"https://github.com/rust-lang/cargo/pull/9627\">#9627</a></li>\n</ul>\n<p>The <code class=\"hljs\">different-binary-name</code> feature allows setting the filename of the binary without having to obey the\nrestrictions placed on crate names. For example, the crate name must use only <code class=\"hljs\">alphanumeric</code> characters\nor <code class=\"hljs\">-</code> or <code class=\"hljs\">_</code>, and cannot be empty.</p>\n<p>The <code class=\"hljs\">filename</code> parameter should <strong>not</strong> include the binary extension, <code class=\"hljs\">cargo</code> will figure out the appropriate\nextension and use that for the binary on its own.</p>\n<p>The <code class=\"hljs\">filename</code> parameter is only available in the <code class=\"hljs\">[[bin]]</code> section of the manifest.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"different-binary-name\"</span>]\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> =  <span class=\"hljs-string\">\"foo\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.0.1\"</span>\n\n<span class=\"hljs-section\">[[bin]]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"foo\"</span>\n<span class=\"hljs-attr\">filename</span> = <span class=\"hljs-string\">\"007bar\"</span>\n<span class=\"hljs-attr\">path</span> = <span class=\"hljs-string\">\"src/main.rs\"</span>\n</code></pre>\n<h2 id=\"scrape-examples\"><a class=\"header\" href=\"#scrape-examples\">scrape-examples</a></h2>\n<ul>\n<li>RFC: <a href=\"https://github.com/rust-lang/rfcs/pull/3123\">#3123</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/9910\">#9910</a></li>\n</ul>\n<p>The <code class=\"hljs\">-Z rustdoc-scrape-examples</code> flag tells Rustdoc to search crates in the current workspace\nfor calls to functions. Those call-sites are then included as documentation. You can use the flag\nlike this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo doc -Z unstable-options -Z rustdoc-scrape-examples\n</code></pre>\n<p>By default, Cargo will scrape examples from the example targets of packages being documented.\nYou can individually enable or disable targets from being scraped with the <code class=\"hljs\">doc-scrape-examples</code> flag, such as:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Enable scraping examples from a library</span>\n<span class=\"hljs-section\">[lib]</span>\n<span class=\"hljs-attr\">doc-scrape-examples</span> = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\"># Disable scraping examples from an example target</span>\n<span class=\"hljs-section\">[[example]]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-example\"</span>\n<span class=\"hljs-attr\">doc-scrape-examples</span> = <span class=\"hljs-literal\">false</span>\n</code></pre>\n<p><strong>Note on tests:</strong> enabling <code class=\"hljs\">doc-scrape-examples</code> on test targets will not currently have any effect. Scraping\nexamples from tests is a work-in-progress.</p>\n<p><strong>Note on dev-dependencies:</strong> documenting a library does not normally require the crate’s dev-dependencies. However,\nexample targets require dev-deps. For backwards compatibility, <code class=\"hljs\">-Z rustdoc-scrape-examples</code> will <em>not</em> introduce a\ndev-deps requirement for <code class=\"hljs\">cargo doc</code>. Therefore examples will <em>not</em> be scraped from example targets under the\nfollowing conditions:</p>\n<ol>\n<li>No target being documented requires dev-deps, AND</li>\n<li>At least one crate with targets being documented has dev-deps, AND</li>\n<li>The <code class=\"hljs\">doc-scrape-examples</code> parameter is unset or false for all <code class=\"hljs\">[[example]]</code> targets.</li>\n</ol>\n<p>If you want examples to be scraped from example targets, then you must not satisfy one of the above conditions.\nFor example, you can set <code class=\"hljs\">doc-scrape-examples</code> to true for one example target, and that signals to Cargo that\nyou are ok with dev-deps being build for <code class=\"hljs\">cargo doc</code>.</p>\n<h2 id=\"output-format-for-rustdoc\"><a class=\"header\" href=\"#output-format-for-rustdoc\">output-format for rustdoc</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/13283\">#13283</a></li>\n</ul>\n<p>This flag determines the output format of <code class=\"hljs\">cargo rustdoc</code>, accepting <code class=\"hljs\">html</code> or <code class=\"hljs\">json</code>, providing tools with a way to lean on <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc_json_types/\">rustdoc’s experimental JSON format</a>.</p>\n<p>You can use the flag like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo rustdoc -Z unstable-options --output-format json\n</code></pre>\n<h2 id=\"codegen-backend\"><a class=\"header\" href=\"#codegen-backend\">codegen-backend</a></h2>\n<p>The <code class=\"hljs\">codegen-backend</code> feature makes it possible to select the codegen backend used by rustc using a profile.</p>\n<p>Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"foo\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">serde</span> = <span class=\"hljs-string\">\"1.0.117\"</span>\n\n<span class=\"hljs-section\">[profile.dev.package.foo]</span>\n<span class=\"hljs-attr\">codegen-backend</span> = <span class=\"hljs-string\">\"cranelift\"</span>\n</code></pre>\n<p>To set this in a profile in Cargo configuration, you need to use either\n<code class=\"hljs\">-Z codegen-backend</code> or <code class=\"hljs\">[unstable]</code> table to enable it. For example,</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># .cargo/config.toml</span>\n<span class=\"hljs-section\">[unstable]</span>\n<span class=\"hljs-attr\">codegen-backend</span> = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-section\">[profile.dev.package.foo]</span>\n<span class=\"hljs-attr\">codegen-backend</span> = <span class=\"hljs-string\">\"cranelift\"</span>\n</code></pre>\n<h2 id=\"gitoxide\"><a class=\"header\" href=\"#gitoxide\">gitoxide</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/11813\">#11813</a></li>\n</ul>\n<p>With the ‘gitoxide’ unstable feature, all or the specified git operations will be performed by\nthe <code class=\"hljs\">gitoxide</code> crate instead of <code class=\"hljs\">git2</code>.</p>\n<p>While <code class=\"hljs\">-Zgitoxide</code> enables all currently implemented features, one can individually select git operations\nto run with <code class=\"hljs\">gitoxide</code> with the <code class=\"hljs\">-Zgitoxide=operation[,operationN]</code> syntax.</p>\n<p>Valid operations are the following:</p>\n<ul>\n<li><code class=\"hljs\">fetch</code> - All fetches are done with <code class=\"hljs\">gitoxide</code>, which includes git dependencies as well as the crates index.</li>\n<li><code class=\"hljs\">checkout</code> <em>(planned)</em> - checkout the worktree, with support for filters and submodules.</li>\n</ul>\n<h2 id=\"git\"><a class=\"header\" href=\"#git\">git</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/13285\">#13285</a></li>\n</ul>\n<p>With the ‘git’ unstable feature, both <code class=\"hljs\">gitoxide</code> and <code class=\"hljs\">git2</code> will perform shallow fetches of the crate\nindex and git dependencies.</p>\n<p>While <code class=\"hljs\">-Zgit</code> enables all currently implemented features, one can individually select when to perform\nshallow fetches with the <code class=\"hljs\">-Zgit=operation[,operationN]</code> syntax.</p>\n<p>Valid operations are the following:</p>\n<ul>\n<li><code class=\"hljs\">shallow-index</code> - perform a shallow clone of the index.</li>\n<li><code class=\"hljs\">shallow-deps</code> - perform a shallow clone of git dependencies.</li>\n</ul>\n<p><strong>Details on shallow clones</strong></p>\n<ul>\n<li>To enable shallow clones, add <code class=\"hljs\">-Zgit=shallow-deps</code> for fetching git dependencies or <code class=\"hljs\">-Zgit=shallow-index</code> for fetching registry index.</li>\n<li>Shallow-cloned and shallow-checked-out git repositories reside at their own <code class=\"hljs\">-shallow</code> suffixed directories, i.e,\n<ul>\n<li><code class=\"hljs\">~/.cargo/registry/index/*-shallow</code></li>\n<li><code class=\"hljs\">~/.cargo/git/db/*-shallow</code></li>\n<li><code class=\"hljs\">~/.cargo/git/checkouts/*-shallow</code></li>\n</ul>\n</li>\n<li>When the unstable feature is on, fetching/cloning a git repository is always a shallow fetch. This roughly equals to <code class=\"hljs\">git fetch --depth 1</code> everywhere.</li>\n<li>Even with the presence of <code class=\"hljs\">Cargo.lock</code> or specifying a commit <code class=\"hljs\">{ rev = \"…\" }</code>, gitoxide and libgit2 are still smart enough to shallow fetch without unshallowing the existing repository.</li>\n</ul>\n<h2 id=\"script\"><a class=\"header\" href=\"#script\">script</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/12207\">#12207</a></li>\n</ul>\n<p>Cargo can directly run <code class=\"hljs\">.rs</code> files as:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo +nightly -Zscript file.rs</span>\n</code></pre>\n<p>where <code class=\"hljs\">file.rs</code> can be as simple as:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</code></pre></pre>\n<p>A user may optionally specify a manifest in a <code class=\"hljs\">cargo</code> code fence in a module-level comment, like:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\">#!/usr/bin/env -S cargo +nightly -Zscript\n---cargo\n[dependencies]\nclap = { version = <span class=\"hljs-string\">\"4.2\"</span>, features = [<span class=\"hljs-string\">\"derive\"</span>] }\n---\n\n<span class=\"hljs-keyword\">use</span> clap::Parser;\n\n<span class=\"hljs-meta\">#[derive(Parser, Debug)]</span>\n<span class=\"hljs-meta\">#[clap(version)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Args</span></span> {\n    <span class=\"hljs-meta\">#[clap(short, long, help = <span class=\"hljs-meta-string\">\"Path to config\"</span>)]</span>\n    config: <span class=\"hljs-built_in\">Option</span>&lt;std::path::PathBuf&gt;,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> args = Args::parse();\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{:?}\"</span>, args);\n}</code></pre></pre>\n<h3 id=\"single-file-packages\"><a class=\"header\" href=\"#single-file-packages\">Single-file packages</a></h3>\n<p>In addition to today’s multi-file packages (<code class=\"hljs\">Cargo.toml</code> file with other <code class=\"hljs\">.rs</code>\nfiles), we are adding the concept of single-file packages which may contain an\nembedded manifest.  There is no required distinguishment for a single-file\n<code class=\"hljs\">.rs</code> package from any other <code class=\"hljs\">.rs</code> file.</p>\n<p>Single-file packages may be selected via <code class=\"hljs\">--manifest-path</code>, like\n<code class=\"hljs\">cargo test --manifest-path foo.rs</code>. Unlike <code class=\"hljs\">Cargo.toml</code>, these files cannot be auto-discovered.</p>\n<p>A single-file package may contain an embedded manifest.  An embedded manifest\nis stored using <code class=\"hljs\">TOML</code> in rust “frontmatter”, a markdown code-fence with <code class=\"hljs\">cargo</code>\nat the start of the infostring at the top of the file.</p>\n<p>Inferred / defaulted manifest fields:</p>\n<ul>\n<li><code class=\"hljs\">package.name = &lt;slugified file stem&gt;</code></li>\n<li><code class=\"hljs\">package.edition = &lt;current&gt;</code> to avoid always having to add an embedded\nmanifest at the cost of potentially breaking scripts on rust upgrades\n<ul>\n<li>Warn when <code class=\"hljs\">edition</code> is unspecified to raise awareness of this</li>\n</ul>\n</li>\n</ul>\n<p>Disallowed manifest fields:</p>\n<ul>\n<li><code class=\"hljs\">[workspace]</code>, <code class=\"hljs\">[lib]</code>, <code class=\"hljs\">[[bin]]</code>, <code class=\"hljs\">[[example]]</code>, <code class=\"hljs\">[[test]]</code>, <code class=\"hljs\">[[bench]]</code></li>\n<li><code class=\"hljs\">package.workspace</code>, <code class=\"hljs\">package.build</code>, <code class=\"hljs\">package.links</code>, <code class=\"hljs\">package.autobins</code>, <code class=\"hljs\">package.autoexamples</code>, <code class=\"hljs\">package.autotests</code>, <code class=\"hljs\">package.autobenches</code></li>\n</ul>\n<p>The default <code class=\"hljs\">CARGO_TARGET_DIR</code> for single-file packages is at <code class=\"hljs\">$CARGO_HOME/target/&lt;hash&gt;</code>:</p>\n<ul>\n<li>Avoid conflicts from multiple single-file packages being in the same directory</li>\n<li>Avoid problems with the single-file package’s parent directory being read-only</li>\n<li>Avoid cluttering the user’s directory</li>\n</ul>\n<p>The lockfile for single-file packages will be placed in <code class=\"hljs\">CARGO_TARGET_DIR</code>.  In\nthe future, when workspaces are supported, that will allow a user to have a\npersistent lockfile.</p>\n<h3 id=\"manifest-commands\"><a class=\"header\" href=\"#manifest-commands\">Manifest-commands</a></h3>\n<p>You may pass a manifest directly to the <code class=\"hljs\">cargo</code> command, without a subcommand,\nlike <code class=\"hljs\">foo/Cargo.toml</code> or a single-file package like <code class=\"hljs\">foo.rs</code>.  This is mostly\nintended for being put in <code class=\"hljs\">#!</code> lines.</p>\n<p>The precedence for how to interpret <code class=\"hljs\">cargo &lt;subcommand&gt;</code> is</p>\n<ol>\n<li>Built-in xor single-file packages</li>\n<li>Aliases</li>\n<li>External subcommands</li>\n</ol>\n<p>A parameter is identified as a manifest-command if it has one of:</p>\n<ul>\n<li>Path separators</li>\n<li>A <code class=\"hljs\">.rs</code> extension</li>\n<li>The file name is <code class=\"hljs\">Cargo.toml</code></li>\n</ul>\n<p>Differences between <code class=\"hljs\">cargo run --manifest-path &lt;path&gt;</code> and <code class=\"hljs\">cargo &lt;path&gt;</code></p>\n<ul>\n<li><code class=\"hljs\">cargo &lt;path&gt;</code> runs with the config for <code class=\"hljs\">&lt;path&gt;</code> and not the current dir, more like <code class=\"hljs\">cargo install --path &lt;path&gt;</code></li>\n<li><code class=\"hljs\">cargo &lt;path&gt;</code> is at a verbosity level below the normal default.  Pass <code class=\"hljs\">-v</code> to get normal output.</li>\n</ul>\n<h3 id=\"documentation-updates\"><a class=\"header\" href=\"#documentation-updates\">Documentation Updates</a></h3>\n<h2 id=\"edition-2024\"><a class=\"header\" href=\"#edition-2024\">Edition 2024</a></h2>\n<ul>\n<li>Tracking Issue: (none created yet)</li>\n<li>RFC: <a href=\"https://github.com/rust-lang/rfcs/pull/3501\">rust-lang/rfcs#3501</a></li>\n</ul>\n<p>Support for the 2024 <a href=\"reference/../../edition-guide/index.html\">edition</a> can be enabled by adding the <code class=\"hljs\">edition2024</code>\nunstable feature to the top of <code class=\"hljs\">Cargo.toml</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"edition2024\"</span>]\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-package\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2024\"</span>\n</code></pre>\n<p>If you want to transition an existing project from a previous edition, then\n<code class=\"hljs\">cargo fix --edition</code> can be used on the nightly channel. After running <code class=\"hljs\">cargo fix</code>, you can switch the edition to 2024 as illustrated above.</p>\n<p>This feature is very unstable, and is only intended for early testing and\nexperimentation. Future nightly releases may introduce changes for the 2024\nedition that may break your build.</p>\n<h2 id=\"profile-trim-paths-option\"><a class=\"header\" href=\"#profile-trim-paths-option\">Profile <code>trim-paths</code> option</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/12137\">rust-lang/cargo#12137</a></li>\n<li>Tracking Rustc Issue: <a href=\"https://github.com/rust-lang/rust/issues/111540\">rust-lang/rust#111540</a></li>\n</ul>\n<p>This adds a new profile setting to control how paths are sanitized in the resulting binary.\nThis can be enabled like so:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"trim-paths\"</span>]\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n\n<span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">trim-paths</span> = [<span class=\"hljs-string\">\"diagnostics\"</span>, <span class=\"hljs-string\">\"object\"</span>]\n</code></pre>\n<p>To set this in a profile in Cargo configuration,\nyou need to use either <code class=\"hljs\">-Z trim-paths</code> or <code class=\"hljs\">[unstable]</code> table to enable it.\nFor example,</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># .cargo/config.toml</span>\n<span class=\"hljs-section\">[unstable]</span>\n<span class=\"hljs-attr\">trim-paths</span> = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">trim-paths</span> = [<span class=\"hljs-string\">\"diagnostics\"</span>, <span class=\"hljs-string\">\"object\"</span>]\n</code></pre>\n<h3 id=\"documentation-updates-1\"><a class=\"header\" href=\"#documentation-updates-1\">Documentation updates</a></h3>\n<h4 id=\"trim-paths\"><a class=\"header\" href=\"#trim-paths\">trim-paths</a></h4>\n<p><em>as a new <a href=\"reference/./profiles.html#profile-settings\">“Profiles settings” entry</a></em></p>\n<p><code class=\"hljs\">trim-paths</code> is a profile setting which enables and controls the sanitization of file paths in build outputs.\nIt takes the following values:</p>\n<ul>\n<li><code class=\"hljs\">\"none\"</code> and <code class=\"hljs\">false</code> — disable path sanitization</li>\n<li><code class=\"hljs\">\"macro\"</code> — sanitize paths in the expansion of <code class=\"hljs\">std::file!()</code> macro.\nThis is where paths in embedded panic messages come from</li>\n<li><code class=\"hljs\">\"diagnostics\"</code> — sanitize paths in printed compiler diagnostics</li>\n<li><code class=\"hljs\">\"object\"</code> — sanitize paths in compiled executables or libraries</li>\n<li><code class=\"hljs\">\"all\"</code> and <code class=\"hljs\">true</code> — sanitize paths in all possible locations</li>\n</ul>\n<p>It also takes an array with the combinations of <code class=\"hljs\">\"macro\"</code>, <code class=\"hljs\">\"diagnostics\"</code>, and <code class=\"hljs\">\"object\"</code>.</p>\n<p>It is defaulted to <code class=\"hljs\">none</code> for the <code class=\"hljs\">dev</code> profile, and <code class=\"hljs\">object</code> for the <code class=\"hljs\">release</code> profile.\nYou can manually override it by specifying this option in <code class=\"hljs\">Cargo.toml</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[profile.dev]</span>\n<span class=\"hljs-attr\">trim-paths</span> = <span class=\"hljs-string\">\"all\"</span>\n\n<span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">trim-paths</span> = [<span class=\"hljs-string\">\"object\"</span>, <span class=\"hljs-string\">\"diagnostics\"</span>]\n</code></pre>\n<p>The default <code class=\"hljs\">release</code> profile setting (<code class=\"hljs\">object</code>) sanitizes only the paths in emitted executable or library files.\nIt always affects paths from macros such as panic messages, and in debug information only if they will be embedded together with the binary\n(the default on platforms with ELF binaries, such as Linux and windows-gnu),\nbut will not touch them if they are in separate files (the default on Windows MSVC and macOS).\nBut the paths to these separate files are sanitized.</p>\n<p>If <code class=\"hljs\">trim-paths</code> is not <code class=\"hljs\">none</code> or <code class=\"hljs\">false</code>, then the following paths are sanitized if they appear in a selected scope:</p>\n<ol>\n<li>Path to the source files of the standard and core library (sysroot) will begin with <code class=\"hljs\">/rustc/[rustc commit hash]</code>,\ne.g. <code class=\"hljs\">/home/username/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs</code> -&gt;\n<code class=\"hljs\">/rustc/fe72845f7bb6a77b9e671e6a4f32fe714962cec4/library/core/src/result.rs</code></li>\n<li>Path to the current package will be stripped, relatively to the current workspace root, e.g. <code class=\"hljs\">/home/username/crate/src/lib.rs</code> -&gt; <code class=\"hljs\">src/lib.rs</code>.</li>\n<li>Path to dependency packages will be replaced with <code class=\"hljs\">[package name]-[version]</code>. E.g. <code class=\"hljs\">/home/username/deps/foo/src/lib.rs</code> -&gt; <code class=\"hljs\">foo-0.1.0/src/lib.rs</code></li>\n</ol>\n<p>When a path to the source files of the standard and core library is <em>not</em> in scope for sanitization,\nthe emitted path will depend on if <code class=\"hljs\">rust-src</code> component is present.\nIf it is, then some paths will point to the copy of the source files on your file system;\nif it isn’t, then they will show up as <code class=\"hljs\">/rustc/[rustc commit hash]/library/...</code>\n(just like when it is selected for sanitization).\nPaths to all other source files will not be affected.</p>\n<p>This will not affect any hard-coded paths in the source code, such as in strings.</p>\n<h4 id=\"environment-variable\"><a class=\"header\" href=\"#environment-variable\">Environment variable</a></h4>\n<p><em>as a new entry of <a href=\"reference/./environment-variables.html#environment-variables-cargo-sets-for-crates\">“Environment variables Cargo sets for build scripts”</a></em></p>\n<ul>\n<li><code class=\"hljs\">CARGO_TRIM_PATHS</code> — The value of <code class=\"hljs\">trim-paths</code> profile option.\n<code class=\"hljs\">false</code>, <code class=\"hljs\">\"none\"</code>, and empty arrays would be converted to <code class=\"hljs\">none</code>.\n<code class=\"hljs\">true</code> and <code class=\"hljs\">\"all\"</code> become <code class=\"hljs\">all</code>.\nValues in a non-empty array would be joined into a comma-separated list.\nIf the build script introduces absolute paths to built artifacts (such as by invoking a compiler),\nthe user may request them to be sanitized in different types of artifacts.\nCommon paths requiring sanitization include <code class=\"hljs\">OUT_DIR</code> and <code class=\"hljs\">CARGO_MANIFEST_DIR</code>,\nplus any other introduced by the build script, such as include directories.</li>\n</ul>\n<h2 id=\"gc\"><a class=\"header\" href=\"#gc\">gc</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/12633\">#12633</a></li>\n</ul>\n<p>The <code class=\"hljs\">-Zgc</code> flag enables garbage-collection within cargo’s global cache within the cargo home directory.\nThis includes downloaded dependencies such as compressed <code class=\"hljs\">.crate</code> files, extracted <code class=\"hljs\">src</code> directories, registry index caches, and git dependencies.\nWhen <code class=\"hljs\">-Zgc</code> is present, cargo will track the last time any index and dependency was used,\nand then uses those timestamps to manually or automatically delete cache entries that have not been used for a while.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">cargo build -Zgc\n</code></pre>\n<h3 id=\"automatic-garbage-collection\"><a class=\"header\" href=\"#automatic-garbage-collection\">Automatic garbage collection</a></h3>\n<p>Automatic deletion happens on commands that are already doing a significant amount of work,\nsuch as all of the build commands (<code class=\"hljs\">cargo build</code>, <code class=\"hljs\">cargo test</code>, <code class=\"hljs\">cargo check</code>, etc.), and <code class=\"hljs\">cargo fetch</code>.\nThe deletion happens just after resolution and packages have been downloaded.\nAutomatic deletion is only done once per day (see <code class=\"hljs\">gc.auto.frequency</code> to configure).\nAutomatic deletion is disabled if cargo is offline such as with <code class=\"hljs\">--offline</code> or <code class=\"hljs\">--frozen</code> to avoid deleting artifacts that may need to be used if you are offline for a long period of time.</p>\n<h4 id=\"automatic-gc-configuration\"><a class=\"header\" href=\"#automatic-gc-configuration\">Automatic gc configuration</a></h4>\n<p>The automatic gc behavior can be specified via a cargo configuration setting.\nThe settings available are:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Example config.toml file.</span>\n\n<span class=\"hljs-comment\"># This table defines the behavior for automatic garbage collection.</span>\n<span class=\"hljs-section\">[gc.auto]</span>\n<span class=\"hljs-comment\"># The maximum frequency that automatic garbage collection happens.</span>\n<span class=\"hljs-comment\"># Can be \"never\" to disable automatic-gc, or \"always\" to run on every command.</span>\n<span class=\"hljs-attr\">frequency</span> = <span class=\"hljs-string\">\"1 day\"</span>\n<span class=\"hljs-comment\"># Anything older than this duration will be deleted in the source cache.</span>\n<span class=\"hljs-attr\">max-src-age</span> = <span class=\"hljs-string\">\"1 month\"</span>\n<span class=\"hljs-comment\"># Anything older than this duration will be deleted in the compressed crate cache.</span>\n<span class=\"hljs-attr\">max-crate-age</span> = <span class=\"hljs-string\">\"3 months\"</span>\n<span class=\"hljs-comment\"># Any index older than this duration will be deleted from the index cache.</span>\n<span class=\"hljs-attr\">max-index-age</span> = <span class=\"hljs-string\">\"3 months\"</span>\n<span class=\"hljs-comment\"># Any git checkout older than this duration will be deleted from the checkout cache.</span>\n<span class=\"hljs-attr\">max-git-co-age</span> = <span class=\"hljs-string\">\"1 month\"</span>\n<span class=\"hljs-comment\"># Any git clone older than this duration will be deleted from the git cache.</span>\n<span class=\"hljs-attr\">max-git-db-age</span> = <span class=\"hljs-string\">\"3 months\"</span>\n</code></pre>\n<h3 id=\"manual-garbage-collection-with-cargo-clean\"><a class=\"header\" href=\"#manual-garbage-collection-with-cargo-clean\">Manual garbage collection with <code>cargo clean</code></a></h3>\n<p>Manual deletion can be done with the <code class=\"hljs\">cargo clean gc</code> command.\nDeletion of cache contents can be performed by passing one of the cache options:</p>\n<ul>\n<li><code class=\"hljs\">--max-src-age=DURATION</code> — Deletes source cache files that have not been used since the given age.</li>\n<li><code class=\"hljs\">--max-crate-age=DURATION</code> — Deletes crate cache files that have not been used since the given age.</li>\n<li><code class=\"hljs\">--max-index-age=DURATION</code> — Deletes registry indexes that have not been used since then given age (including their <code class=\"hljs\">.crate</code> and <code class=\"hljs\">src</code> files).</li>\n<li><code class=\"hljs\">--max-git-co-age=DURATION</code> — Deletes git dependency checkouts that have not been used since then given age.</li>\n<li><code class=\"hljs\">--max-git-db-age=DURATION</code> — Deletes git dependency clones that have not been used since then given age.</li>\n<li><code class=\"hljs\">--max-download-age=DURATION</code> — Deletes any downloaded cache data that has not been used since then given age.</li>\n<li><code class=\"hljs\">--max-src-size=SIZE</code> — Deletes the oldest source cache files until the cache is under the given size.</li>\n<li><code class=\"hljs\">--max-crate-size=SIZE</code> — Deletes the oldest crate cache files until the cache is under the given size.</li>\n<li><code class=\"hljs\">--max-git-size=SIZE</code> — Deletes the oldest git dependency caches until the cache is under the given size.</li>\n<li><code class=\"hljs\">--max-download-size=SIZE</code> — Deletes the oldest downloaded cache data until the cache is under the given size.</li>\n</ul>\n<p>A DURATION is specified in the form “N seconds/minutes/days/weeks/months” where N is an integer.</p>\n<p>A SIZE is specified in the form “N <em>suffix</em>” where <em>suffix</em> is B, kB, MB, GB, kiB, MiB, or GiB, and N is an integer or floating point number. If no suffix is specified, the number is the number of bytes.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">cargo clean gc\ncargo clean gc --max-download-age=1week\ncargo clean gc --max-git-size=0 --max-download-size=100MB\n</code></pre>\n<h2 id=\"open-namespaces\"><a class=\"header\" href=\"#open-namespaces\">open-namespaces</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/13576\">#13576</a></li>\n</ul>\n<p>Allow multiple packages to participate in the same API namespace</p>\n<p>This can be enabled like so:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"open-namespaces\"</span>]\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n</code></pre>\n<h2 id=\"lintscargo\"><a class=\"header\" href=\"#lintscargo\"><code>[lints.cargo]</code></a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/12235\">#12235</a></li>\n</ul>\n<p>A new <code class=\"hljs\">lints</code> tool table for <code class=\"hljs\">cargo</code> that can be used to configure lints emitted\nby <code class=\"hljs\">cargo</code> itself when <code class=\"hljs\">-Zcargo-lints</code> is used</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[lints.cargo]</span>\n<span class=\"hljs-attr\">implicit-features</span> = <span class=\"hljs-string\">\"warn\"</span>\n</code></pre>\n<p>This will work with\n<a href=\"https://rust-lang.github.io/rfcs/2906-cargo-workspace-deduplicate.html\">RFC 2906 <code class=\"hljs\">workspace-deduplicate</code></a>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[workspace.lints.cargo]</span>\n<span class=\"hljs-attr\">implicit-features</span> = <span class=\"hljs-string\">\"warn\"</span>\n\n<span class=\"hljs-section\">[lints]</span>\n<span class=\"hljs-attr\">workspace</span> = <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h1 id=\"stabilized-and-removed-features\"><a class=\"header\" href=\"#stabilized-and-removed-features\">Stabilized and removed features</a></h1>\n<h2 id=\"compile-progress\"><a class=\"header\" href=\"#compile-progress\">Compile progress</a></h2>\n<p>The compile-progress feature has been stabilized in the 1.30 release.\nProgress bars are now enabled by default.\nSee <a href=\"reference/config.html#termprogresswhen\"><code class=\"hljs\">term.progress</code></a> for more information about\ncontrolling this feature.</p>\n<h2 id=\"edition\"><a class=\"header\" href=\"#edition\">Edition</a></h2>\n<p>Specifying the <code class=\"hljs\">edition</code> in <code class=\"hljs\">Cargo.toml</code> has been stabilized in the 1.31 release.\nSee <a href=\"reference/manifest.html#the-edition-field\">the edition field</a> for more information\nabout specifying this field.</p>\n<h2 id=\"rename-dependency\"><a class=\"header\" href=\"#rename-dependency\">rename-dependency</a></h2>\n<p>Specifying renamed dependencies in <code class=\"hljs\">Cargo.toml</code> has been stabilized in the 1.31 release.\nSee <a href=\"reference/specifying-dependencies.html#renaming-dependencies-in-cargotoml\">renaming dependencies</a>\nfor more information about renaming dependencies.</p>\n<h2 id=\"alternate-registries\"><a class=\"header\" href=\"#alternate-registries\">Alternate Registries</a></h2>\n<p>Support for alternate registries has been stabilized in the 1.34 release.\nSee the <a href=\"reference/registries.html\">Registries chapter</a> for more information about alternate registries.</p>\n<h2 id=\"offline-mode\"><a class=\"header\" href=\"#offline-mode\">Offline Mode</a></h2>\n<p>The offline feature has been stabilized in the 1.36 release.\nSee the <a href=\"reference/../commands/cargo.html#option-cargo---offline\"><code class=\"hljs\">--offline</code> flag</a> for\nmore information on using the offline mode.</p>\n<h2 id=\"publish-lockfile\"><a class=\"header\" href=\"#publish-lockfile\">publish-lockfile</a></h2>\n<p>The <code class=\"hljs\">publish-lockfile</code> feature has been removed in the 1.37 release.\nThe <code class=\"hljs\">Cargo.lock</code> file is always included when a package is published if the\npackage contains a binary target. <code class=\"hljs\">cargo install</code> requires the <code class=\"hljs\">--locked</code> flag\nto use the <code class=\"hljs\">Cargo.lock</code> file.\nSee <a href=\"reference/../commands/cargo-package.html\"><code class=\"hljs\">cargo package</code></a> and\n<a href=\"reference/../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> for more information.</p>\n<h2 id=\"default-run\"><a class=\"header\" href=\"#default-run\">default-run</a></h2>\n<p>The <code class=\"hljs\">default-run</code> feature has been stabilized in the 1.37 release.\nSee <a href=\"reference/manifest.html#the-default-run-field\">the <code class=\"hljs\">default-run</code> field</a> for more\ninformation about specifying the default target to run.</p>\n<h2 id=\"cache-messages\"><a class=\"header\" href=\"#cache-messages\">cache-messages</a></h2>\n<p>Compiler message caching has been stabilized in the 1.40 release.\nCompiler warnings are now cached by default and will be replayed automatically\nwhen re-running Cargo.</p>\n<h2 id=\"install-upgrade\"><a class=\"header\" href=\"#install-upgrade\">install-upgrade</a></h2>\n<p>The <code class=\"hljs\">install-upgrade</code> feature has been stabilized in the 1.41 release.\n<a href=\"reference/../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> will now automatically upgrade packages if they appear to be\nout-of-date. See the <a href=\"reference/../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> documentation for more information.</p>\n<h2 id=\"profile-overrides\"><a class=\"header\" href=\"#profile-overrides\">Profile Overrides</a></h2>\n<p>Profile overrides have been stabilized in the 1.41 release.\nSee <a href=\"reference/profiles.html#overrides\">Profile Overrides</a> for more information on using\noverrides.</p>\n<h2 id=\"config-profiles\"><a class=\"header\" href=\"#config-profiles\">Config Profiles</a></h2>\n<p>Specifying profiles in Cargo config files and environment variables has been\nstabilized in the 1.43 release.\nSee the <a href=\"reference/config.html#profile\">config <code class=\"hljs\">[profile]</code> table</a> for more information\nabout specifying <a href=\"reference/profiles.html\">profiles</a> in config files.</p>\n<h2 id=\"crate-versions\"><a class=\"header\" href=\"#crate-versions\">crate-versions</a></h2>\n<p>The <code class=\"hljs\">-Z crate-versions</code> flag has been stabilized in the 1.47 release.\nThe crate version is now automatically included in the\n<a href=\"reference/../commands/cargo-doc.html\"><code class=\"hljs\">cargo doc</code></a> documentation sidebar.</p>\n<h2 id=\"features-2\"><a class=\"header\" href=\"#features-2\">Features</a></h2>\n<p>The <code class=\"hljs\">-Z features</code> flag has been stabilized in the 1.51 release.\nSee <a href=\"reference/features.html#feature-resolver-version-2\">feature resolver version 2</a>\nfor more information on using the new feature resolver.</p>\n<h2 id=\"package-features\"><a class=\"header\" href=\"#package-features\">package-features</a></h2>\n<p>The <code class=\"hljs\">-Z package-features</code> flag has been stabilized in the 1.51 release.\nSee the <a href=\"reference/features.html#resolver-version-2-command-line-flags\">resolver version 2 command-line flags</a>\nfor more information on using the features CLI options.</p>\n<h2 id=\"resolver\"><a class=\"header\" href=\"#resolver\">Resolver</a></h2>\n<p>The <code class=\"hljs\">resolver</code> feature in <code class=\"hljs\">Cargo.toml</code> has been stabilized in the 1.51 release.\nSee the <a href=\"reference/resolver.html#resolver-versions\">resolver versions</a> for more\ninformation about specifying resolvers.</p>\n<h2 id=\"extra-link-arg\"><a class=\"header\" href=\"#extra-link-arg\">extra-link-arg</a></h2>\n<p>The <code class=\"hljs\">extra-link-arg</code> feature to specify additional linker arguments in build\nscripts has been stabilized in the 1.56 release. See the <a href=\"reference/build-scripts.html#outputs-of-the-build-script\">build script\ndocumentation</a> for more\ninformation on specifying extra linker arguments.</p>\n<h2 id=\"configurable-env\"><a class=\"header\" href=\"#configurable-env\">configurable-env</a></h2>\n<p>The <code class=\"hljs\">configurable-env</code> feature to specify environment variables in Cargo\nconfiguration has been stabilized in the 1.56 release. See the <a href=\"reference/config.html#env\">config\ndocumentation</a> for more information about configuring\nenvironment variables.</p>\n<h2 id=\"rust-version\"><a class=\"header\" href=\"#rust-version\">rust-version</a></h2>\n<p>The <code class=\"hljs\">rust-version</code> field in <code class=\"hljs\">Cargo.toml</code> has been stabilized in the 1.56 release.\nSee the <a href=\"reference/manifest.html#the-rust-version-field\">rust-version field</a> for more\ninformation on using the <code class=\"hljs\">rust-version</code> field and the <code class=\"hljs\">--ignore-rust-version</code> option.</p>\n<h2 id=\"patch-in-config\"><a class=\"header\" href=\"#patch-in-config\">patch-in-config</a></h2>\n<p>The <code class=\"hljs\">-Z patch-in-config</code> flag, and the corresponding support for\n<code class=\"hljs\">[patch]</code> section in Cargo configuration files has been stabilized in\nthe 1.56 release. See the <a href=\"reference/config.html#patch\">patch field</a> for more\ninformation.</p>\n<h2 id=\"edition-2021\"><a class=\"header\" href=\"#edition-2021\">edition 2021</a></h2>\n<p>The 2021 edition has been stabilized in the 1.56 release.\nSee the <a href=\"reference/manifest.html#the-edition-field\"><code class=\"hljs\">edition</code> field</a> for more information on setting the edition.\nSee <a href=\"reference/../commands/cargo-fix.html\"><code class=\"hljs\">cargo fix --edition</code></a> and <a href=\"reference/../../edition-guide/index.html\">The Edition Guide</a> for more information on migrating existing projects.</p>\n<h2 id=\"custom-named-profiles\"><a class=\"header\" href=\"#custom-named-profiles\">Custom named profiles</a></h2>\n<p>Custom named profiles have been stabilized in the 1.57 release. See the\n<a href=\"reference/profiles.html#custom-profiles\">profiles chapter</a> for more information.</p>\n<h2 id=\"profile-strip-option\"><a class=\"header\" href=\"#profile-strip-option\">Profile <code>strip</code> option</a></h2>\n<p>The profile <code class=\"hljs\">strip</code> option has been stabilized in the 1.59 release. See the\n<a href=\"reference/profiles.html#strip\">profiles chapter</a> for more information.</p>\n<h2 id=\"future-incompat-report-2\"><a class=\"header\" href=\"#future-incompat-report-2\">Future incompat report</a></h2>\n<p>Support for generating a future-incompat report has been stabilized\nin the 1.59 release. See the <a href=\"reference/future-incompat-report.html\">future incompat report chapter</a>\nfor more information.</p>\n<h2 id=\"namespaced-features\"><a class=\"header\" href=\"#namespaced-features\">Namespaced features</a></h2>\n<p>Namespaced features has been stabilized in the 1.60 release.\nSee the <a href=\"reference/features.html#optional-dependencies\">Features chapter</a> for more information.</p>\n<h2 id=\"weak-dependency-features\"><a class=\"header\" href=\"#weak-dependency-features\">Weak dependency features</a></h2>\n<p>Weak dependency features has been stabilized in the 1.60 release.\nSee the <a href=\"reference/features.html#dependency-features\">Features chapter</a> for more information.</p>\n<h2 id=\"timings\"><a class=\"header\" href=\"#timings\">timings</a></h2>\n<p>The <code class=\"hljs\">-Ztimings</code> option has been stabilized as <code class=\"hljs\">--timings</code> in the 1.60 release.\n(<code class=\"hljs\">--timings=html</code> and the machine-readable <code class=\"hljs\">--timings=json</code> output remain\nunstable and require <code class=\"hljs\">-Zunstable-options</code>.)</p>\n<h2 id=\"config-cli\"><a class=\"header\" href=\"#config-cli\">config-cli</a></h2>\n<p>The <code class=\"hljs\">--config</code> CLI option has been stabilized in the 1.63 release. See\nthe <a href=\"reference/config.html#command-line-overrides\">config documentation</a> for more\ninformation.</p>\n<h2 id=\"multitarget\"><a class=\"header\" href=\"#multitarget\">multitarget</a></h2>\n<p>The <code class=\"hljs\">-Z multitarget</code> option has been stabilized in the 1.64 release.\nSee <a href=\"reference/config.html#buildtarget\"><code class=\"hljs\">build.target</code></a> for more information about\nsetting the default <a href=\"reference/../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\">target platform triples</a>.</p>\n<h2 id=\"crate-type\"><a class=\"header\" href=\"#crate-type\">crate-type</a></h2>\n<p>The <code class=\"hljs\">--crate-type</code> flag for <code class=\"hljs\">cargo rustc</code> has been stabilized in the 1.64\nrelease. See the <a href=\"reference/../commands/cargo-rustc.html\"><code class=\"hljs\">cargo rustc</code> documentation</a>\nfor more information.</p>\n<h2 id=\"workspace-inheritance\"><a class=\"header\" href=\"#workspace-inheritance\">Workspace Inheritance</a></h2>\n<p>Workspace Inheritance has been stabilized in the 1.64 release.\nSee <a href=\"reference/workspaces.html#the-package-table\">workspace.package</a>,\n<a href=\"reference/workspaces.html#the-dependencies-table\">workspace.dependencies</a>,\nand <a href=\"reference/specifying-dependencies.html#inheriting-a-dependency-from-a-workspace\">inheriting-a-dependency-from-a-workspace</a>\nfor more information.</p>\n<h2 id=\"terminal-width\"><a class=\"header\" href=\"#terminal-width\">terminal-width</a></h2>\n<p>The <code class=\"hljs\">-Z terminal-width</code> option has been stabilized in the 1.68 release.\nThe terminal width is always passed to the compiler when running from a\nterminal where Cargo can automatically detect the width.</p>\n<h2 id=\"sparse-registry\"><a class=\"header\" href=\"#sparse-registry\">sparse-registry</a></h2>\n<p>Sparse registry support has been stabilized in the 1.68 release.\nSee <a href=\"reference/registries.html#registry-protocols\">Registry Protocols</a> for more information.</p>\n<h3 id=\"cargo-logout\"><a class=\"header\" href=\"#cargo-logout\"><code>cargo logout</code></a></h3>\n<p>The <a href=\"reference/../commands/cargo-logout.html\"><code class=\"hljs\">cargo logout</code></a> command has been stabilized in the 1.70 release.</p>\n<h2 id=\"doctest-in-workspace\"><a class=\"header\" href=\"#doctest-in-workspace\"><code>doctest-in-workspace</code></a></h2>\n<p>The <code class=\"hljs\">-Z doctest-in-workspace</code> option for <code class=\"hljs\">cargo test</code> has been stabilized and\nenabled by default in the 1.72 release. See the\n<a href=\"reference/../commands/cargo-test.html#working-directory-of-tests\"><code class=\"hljs\">cargo test</code> documentation</a>\nfor more information about the working directory for compiling and running tests.</p>\n<h2 id=\"keep-going\"><a class=\"header\" href=\"#keep-going\">keep-going</a></h2>\n<p>The <code class=\"hljs\">--keep-going</code> option has been stabilized in the 1.74 release. See the\n<a href=\"reference/../commands/cargo-build.html#option-cargo-build---keep-going\"><code class=\"hljs\">--keep-going</code> flag</a>\nin <code class=\"hljs\">cargo build</code> as an example for more details.</p>\n<h2 id=\"lints\"><a class=\"header\" href=\"#lints\"><code>[lints]</code></a></h2>\n<p><a href=\"reference/manifest.html#the-lints-section\"><code class=\"hljs\">[lints]</code></a> (enabled via <code class=\"hljs\">-Zlints</code>) has been stabilized in the 1.74 release.</p>\n<h2 id=\"credential-process\"><a class=\"header\" href=\"#credential-process\">credential-process</a></h2>\n<p>The <code class=\"hljs\">-Z credential-process</code> feature has been stabilized in the 1.74 release.</p>\n<p>See <a href=\"reference/registry-authentication.html\">Registry Authentication</a> documentation for details.</p>\n<h2 id=\"registry-auth\"><a class=\"header\" href=\"#registry-auth\">registry-auth</a></h2>\n<p>The <code class=\"hljs\">-Z registry-auth</code> feature has been stabilized in the 1.74 release with the additional\nrequirement that a credential-provider is configured.</p>\n<p>See <a href=\"reference/registry-authentication.html\">Registry Authentication</a> documentation for details.</p>\n<h2 id=\"check-cfg\"><a class=\"header\" href=\"#check-cfg\">check-cfg</a></h2>\n<p>The <code class=\"hljs\">-Z check-cfg</code> feature has been stabilized in the 1.80 release by making it the\ndefault behavior.</p>\n<p>See the <a href=\"reference/build-scripts.html#rustc-check-cfg\">build script documentation</a> for informations\nabout specifying custom cfgs.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-commands\"><a class=\"header\" href=\"#cargo-commands\">Cargo Commands</a></h1>\n<ul>\n<li><a href=\"commands/general-commands.html\">General Commands</a></li>\n<li><a href=\"commands/build-commands.html\">Build Commands</a></li>\n<li><a href=\"commands/manifest-commands.html\">Manifest Commands</a></li>\n<li><a href=\"commands/package-commands.html\">Package Commands</a></li>\n<li><a href=\"commands/publishing-commands.html\">Publishing Commands</a></li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"general-commands\"><a class=\"header\" href=\"#general-commands\">General Commands</a></h1>\n<ul>\n<li><a href=\"commands/cargo.html\">cargo</a></li>\n<li><a href=\"commands/cargo-help.html\">cargo help</a></li>\n<li><a href=\"commands/cargo-version.html\">cargo version</a></li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo1\"><a class=\"header\" href=\"#cargo1\">cargo(1)</a></h1>\n<h2 id=\"name\"><a class=\"header\" href=\"#name\">NAME</a></h2>\n<p>cargo — The Rust package manager</p>\n<h2 id=\"synopsis\"><a class=\"header\" href=\"#synopsis\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo</code> [<em>options</em>] <em>command</em> [<em>args</em>]<br>\n<code class=\"hljs\">cargo</code> [<em>options</em>] <code class=\"hljs\">--version</code><br>\n<code class=\"hljs\">cargo</code> [<em>options</em>] <code class=\"hljs\">--list</code><br>\n<code class=\"hljs\">cargo</code> [<em>options</em>] <code class=\"hljs\">--help</code><br>\n<code class=\"hljs\">cargo</code> [<em>options</em>] <code class=\"hljs\">--explain</code> <em>code</em></p>\n<h2 id=\"description\"><a class=\"header\" href=\"#description\">DESCRIPTION</a></h2>\n<p>This program is a package manager and build tool for the Rust language,\navailable at <a href=\"https://rust-lang.org\">https://rust-lang.org</a>.</p>\n<h2 id=\"commands\"><a class=\"header\" href=\"#commands\">COMMANDS</a></h2>\n<h3 id=\"build-commands\"><a class=\"header\" href=\"#build-commands\">Build Commands</a></h3>\n<p><a href=\"commands/cargo-bench.html\">cargo-bench(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Execute benchmarks of a package.</p>\n<p><a href=\"commands/cargo-build.html\">cargo-build(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Compile a package.</p>\n<p><a href=\"commands/cargo-check.html\">cargo-check(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Check a local package and all of its dependencies for errors.</p>\n<p><a href=\"commands/cargo-clean.html\">cargo-clean(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Remove artifacts that Cargo has generated in the past.</p>\n<p><a href=\"commands/cargo-doc.html\">cargo-doc(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Build a package’s documentation.</p>\n<p><a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Fetch dependencies of a package from the network.</p>\n<p><a href=\"commands/cargo-fix.html\">cargo-fix(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Automatically fix lint warnings reported by rustc.</p>\n<p><a href=\"commands/cargo-run.html\">cargo-run(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Run a binary or example of the local package.</p>\n<p><a href=\"commands/cargo-rustc.html\">cargo-rustc(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Compile a package, and pass extra options to the compiler.</p>\n<p><a href=\"commands/cargo-rustdoc.html\">cargo-rustdoc(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Build a package’s documentation, using specified custom flags.</p>\n<p><a href=\"commands/cargo-test.html\">cargo-test(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Execute unit and integration tests of a package.</p>\n<h3 id=\"manifest-commands-1\"><a class=\"header\" href=\"#manifest-commands-1\">Manifest Commands</a></h3>\n<p><a href=\"commands/cargo-generate-lockfile.html\">cargo-generate-lockfile(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Generate <code class=\"hljs\">Cargo.lock</code> for a project.</p>\n<p><a href=\"commands/cargo-locate-project.html\">cargo-locate-project(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Print a JSON representation of a <code class=\"hljs\">Cargo.toml</code> file’s location.</p>\n<p><a href=\"commands/cargo-metadata.html\">cargo-metadata(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Output the resolved dependencies of a package in machine-readable format.</p>\n<p><a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Print a fully qualified package specification.</p>\n<p><a href=\"commands/cargo-tree.html\">cargo-tree(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Display a tree visualization of a dependency graph.</p>\n<p><a href=\"commands/cargo-update.html\">cargo-update(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Update dependencies as recorded in the local lock file.</p>\n<p><a href=\"commands/cargo-vendor.html\">cargo-vendor(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Vendor all dependencies locally.</p>\n<p><a href=\"commands/cargo-verify-project.html\">cargo-verify-project(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Check correctness of crate manifest.</p>\n<h3 id=\"package-commands\"><a class=\"header\" href=\"#package-commands\">Package Commands</a></h3>\n<p><a href=\"commands/cargo-init.html\">cargo-init(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Create a new Cargo package in an existing directory.</p>\n<p><a href=\"commands/cargo-install.html\">cargo-install(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Build and install a Rust binary.</p>\n<p><a href=\"commands/cargo-new.html\">cargo-new(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Create a new Cargo package.</p>\n<p><a href=\"commands/cargo-search.html\">cargo-search(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Search packages in crates.io.</p>\n<p><a href=\"commands/cargo-uninstall.html\">cargo-uninstall(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Remove a Rust binary.</p>\n<h3 id=\"publishing-commands\"><a class=\"header\" href=\"#publishing-commands\">Publishing Commands</a></h3>\n<p><a href=\"commands/cargo-login.html\">cargo-login(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Save an API token from the registry locally.</p>\n<p><a href=\"commands/cargo-logout.html\">cargo-logout(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Remove an API token from the registry locally.</p>\n<p><a href=\"commands/cargo-owner.html\">cargo-owner(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Manage the owners of a crate on the registry.</p>\n<p><a href=\"commands/cargo-package.html\">cargo-package(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Assemble the local package into a distributable tarball.</p>\n<p><a href=\"commands/cargo-publish.html\">cargo-publish(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Upload a package to the registry.</p>\n<p><a href=\"commands/cargo-yank.html\">cargo-yank(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Remove a pushed crate from the index.</p>\n<h3 id=\"general-commands-1\"><a class=\"header\" href=\"#general-commands-1\">General Commands</a></h3>\n<p><a href=\"commands/cargo-help.html\">cargo-help(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Display help information about Cargo.</p>\n<p><a href=\"commands/cargo-version.html\">cargo-version(1)</a><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Show version information.</p>\n<h2 id=\"options\"><a class=\"header\" href=\"#options\">OPTIONS</a></h2>\n<h3 id=\"special-options\"><a class=\"header\" href=\"#special-options\">Special Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo--V\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo--V\"></a><code class=\"hljs\">-V</code></dt>\n<dt class=\"option-term\" id=\"option-cargo---version\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo---version\"></a><code class=\"hljs\">--version</code></dt>\n<dd class=\"option-desc\">Print version info and exit. If used with <code class=\"hljs\">--verbose</code>, prints extra\ninformation.</dd>\n<dt class=\"option-term\" id=\"option-cargo---list\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo---list\"></a><code class=\"hljs\">--list</code></dt>\n<dd class=\"option-desc\">List all installed Cargo subcommands. If used with <code class=\"hljs\">--verbose</code>, prints extra\ninformation.</dd>\n<dt class=\"option-term\" id=\"option-cargo---explain\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo---explain\"></a><code class=\"hljs\">--explain</code> <em>code</em></dt>\n<dd class=\"option-desc\">Run <code class=\"hljs\">rustc --explain CODE</code> which will print out a detailed explanation of an\nerror message (for example, <code class=\"hljs\">E0004</code>).</dd>\n</dl>\n<h3 id=\"display-options\"><a class=\"header\" href=\"#display-options\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo--v\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo---verbose\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo--q\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo---quiet\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo---color\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"manifest-options\"><a class=\"header\" href=\"#manifest-options\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo---frozen\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dt class=\"option-term\" id=\"option-cargo---locked\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Either of these flags requires that the <code class=\"hljs\">Cargo.lock</code> file is\nup-to-date. If the lock file is missing, or it needs to be updated, Cargo will\nexit with an error. The <code class=\"hljs\">--frozen</code> flag also prevents Cargo from\nattempting to access the network to determine if it is out-of-date.<p></p>\n<p>These may be used in environments where you want to assert that the\n<code class=\"hljs\">Cargo.lock</code> file is up-to-date (such as a CI build) or want to avoid network\naccess.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo---offline\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"common-options\"><a class=\"header\" href=\"#common-options\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo---config\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo--C\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo--h\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo---help\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo--Z\"><a class=\"option-anchor\" href=\"commands/cargo.html#option-cargo--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment\"><a class=\"header\" href=\"#environment\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status\"><a class=\"header\" href=\"#exit-status\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"files-1\"><a class=\"header\" href=\"#files-1\">FILES</a></h2>\n<p><code class=\"hljs\">~/.cargo/</code><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Default location for Cargo’s “home” directory where it\nstores various files. The location can be changed with the <code class=\"hljs\">CARGO_HOME</code>\nenvironment variable.</p>\n<p><code class=\"hljs\">$CARGO_HOME/bin/</code><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Binaries installed by <a href=\"commands/cargo-install.html\">cargo-install(1)</a> will be located here. If using\n<a href=\"https://rust-lang.github.io/rustup/\">rustup</a>, executables distributed with Rust are also located here.</p>\n<p><code class=\"hljs\">$CARGO_HOME/config.toml</code><br>\n&nbsp;&nbsp;&nbsp;&nbsp;The global configuration file. See <a href=\"commands/../reference/config.html\">the reference</a>\nfor more information about configuration files.</p>\n<p><code class=\"hljs\">.cargo/config.toml</code><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Cargo automatically searches for a file named <code class=\"hljs\">.cargo/config.toml</code> in the\ncurrent directory, and all parent directories. These configuration files\nwill be merged with the global configuration file.</p>\n<p><code class=\"hljs\">$CARGO_HOME/credentials.toml</code><br>\n&nbsp;&nbsp;&nbsp;&nbsp;Private authentication information for logging in to a registry.</p>\n<p><code class=\"hljs\">$CARGO_HOME/registry/</code><br>\n&nbsp;&nbsp;&nbsp;&nbsp;This directory contains cached downloads of the registry index and any\ndownloaded dependencies.</p>\n<p><code class=\"hljs\">$CARGO_HOME/git/</code><br>\n&nbsp;&nbsp;&nbsp;&nbsp;This directory contains cached downloads of git dependencies.</p>\n<p>Please note that the internal structure of the <code class=\"hljs\">$CARGO_HOME</code> directory is not\nstable yet and may be subject to change.</p>\n<h2 id=\"examples-1\"><a class=\"header\" href=\"#examples-1\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Build a local package and all of its dependencies:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo build\n</code></pre>\n</li>\n<li>\n<p>Build a package with optimizations:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo build --release\n</code></pre>\n</li>\n<li>\n<p>Run tests for a cross-compiled target:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo test --target i686-unknown-linux-gnu\n</code></pre>\n</li>\n<li>\n<p>Create a new package that builds an executable:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo new foobar\n</code></pre>\n</li>\n<li>\n<p>Create a package in the current directory:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">mkdir foo &amp;&amp; cd foo\ncargo init .\n</code></pre>\n</li>\n<li>\n<p>Learn about a command’s options and usage:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo help clean\n</code></pre>\n</li>\n</ol>\n<h2 id=\"bugs\"><a class=\"header\" href=\"#bugs\">BUGS</a></h2>\n<p>See <a href=\"https://github.com/rust-lang/cargo/issues\">https://github.com/rust-lang/cargo/issues</a> for issues.</p>\n<h2 id=\"see-also\"><a class=\"header\" href=\"#see-also\">SEE ALSO</a></h2>\n<p><a href=\"https://doc.rust-lang.org/rustc/index.html\">rustc(1)</a>, <a href=\"https://doc.rust-lang.org/rustdoc/index.html\">rustdoc(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-help1\"><a class=\"header\" href=\"#cargo-help1\">cargo-help(1)</a></h1>\n<h2 id=\"name-1\"><a class=\"header\" href=\"#name-1\">NAME</a></h2>\n<p>cargo-help — Get help for a Cargo command</p>\n<h2 id=\"synopsis-1\"><a class=\"header\" href=\"#synopsis-1\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo help</code> [<em>subcommand</em>]</p>\n<h2 id=\"description-1\"><a class=\"header\" href=\"#description-1\">DESCRIPTION</a></h2>\n<p>Prints a help message for the given command.</p>\n<h2 id=\"examples-2\"><a class=\"header\" href=\"#examples-2\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Get help for a command:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo help build\n</code></pre>\n</li>\n<li>\n<p>Help is also available with the <code class=\"hljs\">--help</code> flag:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo build --help\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-1\"><a class=\"header\" href=\"#see-also-1\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-version1\"><a class=\"header\" href=\"#cargo-version1\">cargo-version(1)</a></h1>\n<h2 id=\"name-2\"><a class=\"header\" href=\"#name-2\">NAME</a></h2>\n<p>cargo-version — Show version information</p>\n<h2 id=\"synopsis-2\"><a class=\"header\" href=\"#synopsis-2\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo version</code> [<em>options</em>]</p>\n<h2 id=\"description-2\"><a class=\"header\" href=\"#description-2\">DESCRIPTION</a></h2>\n<p>Displays the version of Cargo.</p>\n<h2 id=\"options-1\"><a class=\"header\" href=\"#options-1\">OPTIONS</a></h2>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-version--v\"><a class=\"option-anchor\" href=\"commands/cargo-version.html#option-cargo-version--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-version---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-version.html#option-cargo-version---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Display additional version information.</dd>\n</dl>\n<h2 id=\"examples-3\"><a class=\"header\" href=\"#examples-3\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Display the version:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo version\n</code></pre>\n</li>\n<li>\n<p>The version is also available via flags:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo --version\ncargo -V\n</code></pre>\n</li>\n<li>\n<p>Display extra version information:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo -Vv\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-2\"><a class=\"header\" href=\"#see-also-2\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"build-commands-1\"><a class=\"header\" href=\"#build-commands-1\">Build Commands</a></h1>\n<ul>\n<li><a href=\"commands/cargo-bench.html\">cargo bench</a></li>\n<li><a href=\"commands/cargo-build.html\">cargo build</a></li>\n<li><a href=\"commands/cargo-check.html\">cargo check</a></li>\n<li><a href=\"commands/cargo-clean.html\">cargo clean</a></li>\n<li><a href=\"commands/cargo-doc.html\">cargo doc</a></li>\n<li><a href=\"commands/cargo-fetch.html\">cargo fetch</a></li>\n<li><a href=\"commands/cargo-fix.html\">cargo fix</a></li>\n<li><a href=\"commands/cargo-run.html\">cargo run</a></li>\n<li><a href=\"commands/cargo-rustc.html\">cargo rustc</a></li>\n<li><a href=\"commands/cargo-rustdoc.html\">cargo rustdoc</a></li>\n<li><a href=\"commands/cargo-test.html\">cargo test</a></li>\n<li><a href=\"commands/cargo-report.html\">cargo report</a></li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-bench1\"><a class=\"header\" href=\"#cargo-bench1\">cargo-bench(1)</a></h1>\n<h2 id=\"name-3\"><a class=\"header\" href=\"#name-3\">NAME</a></h2>\n<p>cargo-bench — Execute benchmarks of a package</p>\n<h2 id=\"synopsis-3\"><a class=\"header\" href=\"#synopsis-3\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo bench</code> [<em>options</em>] [<em>benchname</em>] [<code class=\"hljs\">--</code> <em>bench-options</em>]</p>\n<h2 id=\"description-3\"><a class=\"header\" href=\"#description-3\">DESCRIPTION</a></h2>\n<p>Compile and execute benchmarks.</p>\n<p>The benchmark filtering argument <em>benchname</em> and all the arguments following\nthe two dashes (<code class=\"hljs\">--</code>) are passed to the benchmark binaries and thus to\n<em>libtest</em> (rustc’s built in unit-test and micro-benchmarking framework). If\nyou are passing arguments to both Cargo and the binary, the ones after <code class=\"hljs\">--</code> go\nto the binary, the ones before go to Cargo. For details about libtest’s\narguments see the output of <code class=\"hljs\">cargo bench -- --help</code> and check out the rustc\nbook’s chapter on how tests work at\n<a href=\"https://doc.rust-lang.org/rustc/tests/index.html\">https://doc.rust-lang.org/rustc/tests/index.html</a>.</p>\n<p>As an example, this will run only the benchmark named <code class=\"hljs\">foo</code> (and skip other\nsimilarly named benchmarks like <code class=\"hljs\">foobar</code>):</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo bench -- foo --exact\n</code></pre>\n<p>Benchmarks are built with the <code class=\"hljs\">--test</code> option to <code class=\"hljs\">rustc</code> which creates a\nspecial executable by linking your code with libtest. The executable\nautomatically runs all functions annotated with the <code class=\"hljs\">#[bench]</code> attribute.\nCargo passes the <code class=\"hljs\">--bench</code> flag to the test harness to tell it to run\nonly benchmarks, regardless of whether the harness is libtest or a custom harness.</p>\n<p>The libtest harness may be disabled by setting <code class=\"hljs\">harness = false</code> in the target\nmanifest settings, in which case your code will need to provide its own <code class=\"hljs\">main</code>\nfunction to handle running benchmarks.</p>\n<blockquote>\n<p><strong>Note</strong>: The\n<a href=\"https://doc.rust-lang.org/nightly/unstable-book/library-features/test.html\"><code class=\"hljs\">#[bench]</code> attribute</a>\nis currently unstable and only available on the\n<a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly channel</a>.\nThere are some packages available on\n<a href=\"https://crates.io/keywords/benchmark\">crates.io</a> that may help with\nrunning benchmarks on the stable channel, such as\n<a href=\"https://crates.io/crates/criterion\">Criterion</a>.</p>\n</blockquote>\n<p>By default, <code class=\"hljs\">cargo bench</code> uses the <a href=\"commands/../reference/profiles.html#bench\"><code class=\"hljs\">bench</code> profile</a>, which enables\noptimizations and disables debugging information. If you need to debug a\nbenchmark, you can use the <code class=\"hljs\">--profile=dev</code> command-line option to switch to\nthe dev profile. You can then run the debug-enabled benchmark within a\ndebugger.</p>\n<h3 id=\"working-directory-of-benchmarks\"><a class=\"header\" href=\"#working-directory-of-benchmarks\">Working directory of benchmarks</a></h3>\n<p>The working directory of every benchmark is set to the root directory of the\npackage the benchmark belongs to.\nSetting the working directory of benchmarks to the package’s root directory\nmakes it possible for benchmarks to reliably access the package’s files using\nrelative paths, regardless from where <code class=\"hljs\">cargo bench</code> was executed from.</p>\n<h2 id=\"options-2\"><a class=\"header\" href=\"#options-2\">OPTIONS</a></h2>\n<h3 id=\"benchmark-options\"><a class=\"header\" href=\"#benchmark-options\">Benchmark Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-bench---no-run\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---no-run\"></a><code class=\"hljs\">--no-run</code></dt>\n<dd class=\"option-desc\">Compile, but don’t run benchmarks.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---no-fail-fast\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---no-fail-fast\"></a><code class=\"hljs\">--no-fail-fast</code></dt>\n<dd class=\"option-desc\">Run all benchmarks regardless of failure. Without this flag, Cargo will exit\nafter the first executable fails. The Rust test harness will run all benchmarks\nwithin the executable to completion, this flag only applies to the executable\nas a whole.</dd>\n</dl>\n<h3 id=\"package-selection-1\"><a class=\"header\" href=\"#package-selection-1\">Package Selection</a></h3>\n<p>By default, when no package selection options are given, the packages selected\ndepend on the selected manifest file (based on the current working directory if\n<code class=\"hljs\">--manifest-path</code> is not given). If the manifest is the root of a workspace then\nthe workspaces default members are selected, otherwise only the package defined\nby the manifest will be selected.</p>\n<p>The default members of a workspace can be set explicitly with the\n<code class=\"hljs\">workspace.default-members</code> key in the root manifest. If this is not set, a\nvirtual workspace will include all workspace members (equivalent to passing\n<code class=\"hljs\">--workspace</code>), and a non-virtual workspace will include only the root crate itself.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-bench--p\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench--p\"></a><code class=\"hljs\">-p</code> <em>spec</em>…</dt>\n<dt class=\"option-term\" id=\"option-cargo-bench---package\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---package\"></a><code class=\"hljs\">--package</code> <em>spec</em>…</dt>\n<dd class=\"option-desc\">Benchmark only the specified packages. See <a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a> for the\nSPEC format. This flag may be specified multiple times and supports common Unix\nglob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell accidentally\nexpanding glob patterns before Cargo handles them, you must use single quotes or\ndouble quotes around each pattern.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---workspace\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---workspace\"></a><code class=\"hljs\">--workspace</code></dt>\n<dd class=\"option-desc\">Benchmark all members in the workspace.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---all\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---all\"></a><code class=\"hljs\">--all</code></dt>\n<dd class=\"option-desc\">Deprecated alias for <code class=\"hljs\">--workspace</code>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---exclude\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---exclude\"></a><code class=\"hljs\">--exclude</code> <em>SPEC</em>…</dt>\n<dd class=\"option-desc\">Exclude the specified packages. Must be used in conjunction with the\n<code class=\"hljs\">--workspace</code> flag. This flag may be specified multiple times and supports\ncommon Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell\naccidentally expanding glob patterns before Cargo handles them, you must use\nsingle quotes or double quotes around each pattern.</dd>\n</dl>\n<h3 id=\"target-selection\"><a class=\"header\" href=\"#target-selection\">Target Selection</a></h3>\n<p>When no target selection options are given, <code class=\"hljs\">cargo bench</code> will build the\nfollowing targets of the selected packages:</p>\n<ul>\n<li>lib — used to link with binaries and benchmarks</li>\n<li>bins (only if benchmark targets are built and required features are\navailable)</li>\n<li>lib as a benchmark</li>\n<li>bins as benchmarks</li>\n<li>benchmark targets</li>\n</ul>\n<p>The default behavior can be changed by setting the <code class=\"hljs\">bench</code> flag for the target\nin the manifest settings. Setting examples to <code class=\"hljs\">bench = true</code> will build and\nrun the example as a benchmark, replacing the example’s <code class=\"hljs\">main</code> function with\nthe libtest harness.</p>\n<p>Setting targets to <code class=\"hljs\">bench = false</code> will stop them from being bencharmked by\ndefault. Target selection options that take a target by name (such as\n<code class=\"hljs\">--example foo</code>) ignore the <code class=\"hljs\">bench</code> flag and will always benchmark the given\ntarget.</p>\n<p>See <a href=\"commands/../reference/cargo-targets.html#configuring-a-target\">Configuring a target</a>\nfor more information on per-target settings.</p>\n<p>Binary targets are automatically built if there is an integration test or\nbenchmark being selected to benchmark. This allows an integration\ntest to execute the binary to exercise and test its behavior.\nThe <code class=\"hljs\">CARGO_BIN_EXE_&lt;name&gt;</code>\n<a href=\"commands/../reference/environment-variables.html#environment-variables-cargo-sets-for-crates\">environment variable</a>\nis set when the integration test is built so that it can use the\n<a href=\"https://doc.rust-lang.org/std/macro.env.html\"><code class=\"hljs\">env</code> macro</a> to locate the\nexecutable.</p>\n<p>Passing target selection flags will benchmark only the specified\ntargets.</p>\n<p>Note that <code class=\"hljs\">--bin</code>, <code class=\"hljs\">--example</code>, <code class=\"hljs\">--test</code> and <code class=\"hljs\">--bench</code> flags also\nsupport common Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your\nshell accidentally expanding glob patterns before Cargo handles them, you must\nuse single quotes or double quotes around each glob pattern.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-bench---lib\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---lib\"></a><code class=\"hljs\">--lib</code></dt>\n<dd class=\"option-desc\">Benchmark the package’s library.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---bin\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---bin\"></a><code class=\"hljs\">--bin</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Benchmark the specified binary. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---bins\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---bins\"></a><code class=\"hljs\">--bins</code></dt>\n<dd class=\"option-desc\">Benchmark all binary targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---example\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---example\"></a><code class=\"hljs\">--example</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Benchmark the specified example. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---examples\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---examples\"></a><code class=\"hljs\">--examples</code></dt>\n<dd class=\"option-desc\">Benchmark all example targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---test\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---test\"></a><code class=\"hljs\">--test</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Benchmark the specified integration test. This flag may be specified\nmultiple times and supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---tests\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---tests\"></a><code class=\"hljs\">--tests</code></dt>\n<dd class=\"option-desc\">Benchmark all targets in test mode that have the <code class=\"hljs\">test = true</code> manifest\nflag set. By default this includes the library and binaries built as\nunittests, and integration tests. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nunittest, and once as a dependency for binaries, integration tests, etc.).\nTargets may be enabled or disabled by setting the <code class=\"hljs\">test</code> flag in the\nmanifest settings for the target.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---bench\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---bench\"></a><code class=\"hljs\">--bench</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Benchmark the specified benchmark. This flag may be specified multiple\ntimes and supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---benches\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---benches\"></a><code class=\"hljs\">--benches</code></dt>\n<dd class=\"option-desc\">Benchmark all targets in benchmark mode that have the <code class=\"hljs\">bench = true</code>\nmanifest flag set. By default this includes the library and binaries built\nas benchmarks, and bench targets. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nbenchmark, and once as a dependency for binaries, benchmarks, etc.).\nTargets may be enabled or disabled by setting the <code class=\"hljs\">bench</code> flag in the\nmanifest settings for the target.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---all-targets\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---all-targets\"></a><code class=\"hljs\">--all-targets</code></dt>\n<dd class=\"option-desc\">Benchmark all targets. This is equivalent to specifying <code class=\"hljs\">--lib --bins --tests --benches --examples</code>.</dd>\n</dl>\n<h3 id=\"feature-selection\"><a class=\"header\" href=\"#feature-selection\">Feature Selection</a></h3>\n<p>The feature flags allow you to control which features are enabled. When no\nfeature options are given, the <code class=\"hljs\">default</code> feature is activated for every\nselected package.</p>\n<p>See <a href=\"commands/../reference/features.html#command-line-feature-options\">the features documentation</a>\nfor more details.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-bench--F\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench--F\"></a><code class=\"hljs\">-F</code> <em>features</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-bench---features\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---features\"></a><code class=\"hljs\">--features</code> <em>features</em></dt>\n<dd class=\"option-desc\">Space or comma separated list of features to activate. Features of workspace\nmembers may be enabled with <code class=\"hljs\">package-name/feature-name</code> syntax. This flag may\nbe specified multiple times, which enables all specified features.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---all-features\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---all-features\"></a><code class=\"hljs\">--all-features</code></dt>\n<dd class=\"option-desc\">Activate all available features of all selected packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---no-default-features\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---no-default-features\"></a><code class=\"hljs\">--no-default-features</code></dt>\n<dd class=\"option-desc\">Do not activate the <code class=\"hljs\">default</code> feature of the selected packages.</dd>\n</dl>\n<h3 id=\"compilation-options\"><a class=\"header\" href=\"#compilation-options\">Compilation Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-bench---target\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---target\"></a><code class=\"hljs\">--target</code> <em>triple</em></dt>\n<dd class=\"option-desc\">Benchmark for the given architecture. The default is the host architecture. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code>. Run <code class=\"hljs\">rustc --print target-list</code> for a\nlist of supported targets. This flag may be specified multiple times.<p></p>\n<p>This may also be specified with the <code class=\"hljs\">build.target</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p>\n<p>Note that specifying this flag makes Cargo run in a different mode where the\ntarget artifacts are placed in a separate directory. See the\n<a href=\"commands/../guide/build-cache.html\">build cache</a> documentation for more details.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---profile\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---profile\"></a><code class=\"hljs\">--profile</code> <em>name</em></dt>\n<dd class=\"option-desc\">Benchmark with the given profile.\nSee <a href=\"commands/../reference/profiles.html\">the reference</a> for more details on profiles.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---timings=fmts\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---timings=fmts\"></a><code class=\"hljs\">--timings=</code><em>fmts</em></dt>\n<dd class=\"option-desc\">Output information how long each compilation takes, and track concurrency\ninformation over time. Accepts an optional comma-separated list of output\nformats; <code class=\"hljs\">--timings</code> without an argument will default to <code class=\"hljs\">--timings=html</code>.\nSpecifying an output format (rather than the default) is unstable and requires\n<code class=\"hljs\">-Zunstable-options</code>. Valid output formats:<p></p>\n<ul>\n<li><code class=\"hljs\">html</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Write a human-readable file <code class=\"hljs\">cargo-timing.html</code> to the\n<code class=\"hljs\">target/cargo-timings</code> directory with a report of the compilation. Also write\na report to the same directory with a timestamp in the filename if you want\nto look at older runs. HTML output is suitable for human consumption only,\nand does not provide machine-readable timing data.</li>\n<li><code class=\"hljs\">json</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Emit machine-readable JSON\ninformation about timing information.</li>\n</ul></dd>\n</dl>\n<h3 id=\"output-options\"><a class=\"header\" href=\"#output-options\">Output Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-bench---target-dir\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---target-dir\"></a><code class=\"hljs\">--target-dir</code> <em>directory</em></dt>\n<dd class=\"option-desc\">Directory for all generated artifacts and intermediate files. May also be\nspecified with the <code class=\"hljs\">CARGO_TARGET_DIR</code> environment variable, or the\n<code class=\"hljs\">build.target-dir</code> <a href=\"commands/../reference/config.html\">config value</a>.\nDefaults to <code class=\"hljs\">target</code> in the root of the workspace.</dd>\n</dl>\n<h3 id=\"display-options-1\"><a class=\"header\" href=\"#display-options-1\">Display Options</a></h3>\n<p>By default the Rust test harness hides output from benchmark execution to keep\nresults readable. Benchmark output can be recovered (e.g., for debugging) by\npassing <code class=\"hljs\">--nocapture</code> to the benchmark binaries:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo bench -- --nocapture\n</code></pre>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-bench--v\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-bench---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench--q\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-bench---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---color\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---message-format\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---message-format\"></a><code class=\"hljs\">--message-format</code> <em>fmt</em></dt>\n<dd class=\"option-desc\">The output format for diagnostic messages. Can be specified multiple times\nand consists of comma-separated values. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">human</code> (default): Display in a human-readable text format. Conflicts with\n<code class=\"hljs\">short</code> and <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">short</code>: Emit shorter, human-readable text messages. Conflicts with <code class=\"hljs\">human</code>\nand <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">json</code>: Emit JSON messages to stdout. See\n<a href=\"commands/../reference/external-tools.html#json-messages\">the reference</a>\nfor more details. Conflicts with <code class=\"hljs\">human</code> and <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-short</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages contains\nthe “short” rendering from rustc. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-rendered-ansi</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages\ncontains embedded ANSI color codes for respecting rustc’s default color\nscheme. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-render-diagnostics</code>: Instruct Cargo to not include rustc diagnostics\nin JSON messages printed, but instead Cargo itself should render the\nJSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others\ncoming from rustc are still emitted. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n</ul></dd>\n</dl>\n<h3 id=\"manifest-options-1\"><a class=\"header\" href=\"#manifest-options-1\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-bench---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---ignore-rust-version\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---ignore-rust-version\"></a><code class=\"hljs\">--ignore-rust-version</code></dt>\n<dd class=\"option-desc\">Ignore <code class=\"hljs\">rust-version</code> specification in packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---locked\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---offline\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-1\"><a class=\"header\" href=\"#common-options-1\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-bench-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench---config\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench--C\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-bench--h\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-bench---help\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-bench--Z\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h3 id=\"miscellaneous-options\"><a class=\"header\" href=\"#miscellaneous-options\">Miscellaneous Options</a></h3>\n<p>The <code class=\"hljs\">--jobs</code> argument affects the building of the benchmark executable but\ndoes not affect how many threads are used when running the benchmarks. The\nRust test harness runs benchmarks serially in a single thread.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-bench--j\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench--j\"></a><code class=\"hljs\">-j</code> <em>N</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-bench---jobs\"><a class=\"option-anchor\" href=\"commands/cargo-bench.html#option-cargo-bench---jobs\"></a><code class=\"hljs\">--jobs</code> <em>N</em></dt>\n<dd class=\"option-desc\">Number of parallel jobs to run. May also be specified with the\n<code class=\"hljs\">build.jobs</code> <a href=\"commands/../reference/config.html\">config value</a>. Defaults to\nthe number of logical CPUs. If negative, it sets the maximum number of\nparallel jobs to the number of logical CPUs plus provided value. If\na string <code class=\"hljs\">default</code> is provided, it sets the value back to defaults.\nShould not be 0.</dd>\n</dl>\n<p>While <code class=\"hljs\">cargo bench</code> involves compilation, it does not provide a <code class=\"hljs\">--keep-going</code>\nflag. Use <code class=\"hljs\">--no-fail-fast</code> to run as many benchmarks as possible without\nstopping at the first failure. To “compile” as many benchmarks as possible, use\n<code class=\"hljs\">--benches</code> to build benchmark binaries separately. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo build --benches --release --keep-going\ncargo bench --no-fail-fast\n</code></pre>\n<h2 id=\"environment-1\"><a class=\"header\" href=\"#environment-1\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-1\"><a class=\"header\" href=\"#exit-status-1\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-4\"><a class=\"header\" href=\"#examples-4\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Build and execute all the benchmarks of the current package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo bench\n</code></pre>\n</li>\n<li>\n<p>Run only a specific benchmark within a specific benchmark target:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo bench --bench bench_name -- modname::some_benchmark\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-3\"><a class=\"header\" href=\"#see-also-3\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-test.html\">cargo-test(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-build1\"><a class=\"header\" href=\"#cargo-build1\">cargo-build(1)</a></h1>\n<h2 id=\"name-4\"><a class=\"header\" href=\"#name-4\">NAME</a></h2>\n<p>cargo-build — Compile the current package</p>\n<h2 id=\"synopsis-4\"><a class=\"header\" href=\"#synopsis-4\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo build</code> [<em>options</em>]</p>\n<h2 id=\"description-4\"><a class=\"header\" href=\"#description-4\">DESCRIPTION</a></h2>\n<p>Compile local packages and all of their dependencies.</p>\n<h2 id=\"options-3\"><a class=\"header\" href=\"#options-3\">OPTIONS</a></h2>\n<h3 id=\"package-selection-2\"><a class=\"header\" href=\"#package-selection-2\">Package Selection</a></h3>\n<p>By default, when no package selection options are given, the packages selected\ndepend on the selected manifest file (based on the current working directory if\n<code class=\"hljs\">--manifest-path</code> is not given). If the manifest is the root of a workspace then\nthe workspaces default members are selected, otherwise only the package defined\nby the manifest will be selected.</p>\n<p>The default members of a workspace can be set explicitly with the\n<code class=\"hljs\">workspace.default-members</code> key in the root manifest. If this is not set, a\nvirtual workspace will include all workspace members (equivalent to passing\n<code class=\"hljs\">--workspace</code>), and a non-virtual workspace will include only the root crate itself.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-build--p\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build--p\"></a><code class=\"hljs\">-p</code> <em>spec</em>…</dt>\n<dt class=\"option-term\" id=\"option-cargo-build---package\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---package\"></a><code class=\"hljs\">--package</code> <em>spec</em>…</dt>\n<dd class=\"option-desc\">Build only the specified packages. See <a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a> for the\nSPEC format. This flag may be specified multiple times and supports common Unix\nglob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell accidentally\nexpanding glob patterns before Cargo handles them, you must use single quotes or\ndouble quotes around each pattern.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---workspace\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---workspace\"></a><code class=\"hljs\">--workspace</code></dt>\n<dd class=\"option-desc\">Build all members in the workspace.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---all\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---all\"></a><code class=\"hljs\">--all</code></dt>\n<dd class=\"option-desc\">Deprecated alias for <code class=\"hljs\">--workspace</code>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---exclude\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---exclude\"></a><code class=\"hljs\">--exclude</code> <em>SPEC</em>…</dt>\n<dd class=\"option-desc\">Exclude the specified packages. Must be used in conjunction with the\n<code class=\"hljs\">--workspace</code> flag. This flag may be specified multiple times and supports\ncommon Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell\naccidentally expanding glob patterns before Cargo handles them, you must use\nsingle quotes or double quotes around each pattern.</dd>\n</dl>\n<h3 id=\"target-selection-1\"><a class=\"header\" href=\"#target-selection-1\">Target Selection</a></h3>\n<p>When no target selection options are given, <code class=\"hljs\">cargo build</code> will build all\nbinary and library targets of the selected packages. Binaries are skipped if\nthey have <code class=\"hljs\">required-features</code> that are missing.</p>\n<p>Binary targets are automatically built if there is an integration test or\nbenchmark being selected to build. This allows an integration\ntest to execute the binary to exercise and test its behavior.\nThe <code class=\"hljs\">CARGO_BIN_EXE_&lt;name&gt;</code>\n<a href=\"commands/../reference/environment-variables.html#environment-variables-cargo-sets-for-crates\">environment variable</a>\nis set when the integration test is built so that it can use the\n<a href=\"https://doc.rust-lang.org/std/macro.env.html\"><code class=\"hljs\">env</code> macro</a> to locate the\nexecutable.</p>\n<p>Passing target selection flags will build only the specified\ntargets.</p>\n<p>Note that <code class=\"hljs\">--bin</code>, <code class=\"hljs\">--example</code>, <code class=\"hljs\">--test</code> and <code class=\"hljs\">--bench</code> flags also\nsupport common Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your\nshell accidentally expanding glob patterns before Cargo handles them, you must\nuse single quotes or double quotes around each glob pattern.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-build---lib\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---lib\"></a><code class=\"hljs\">--lib</code></dt>\n<dd class=\"option-desc\">Build the package’s library.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---bin\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---bin\"></a><code class=\"hljs\">--bin</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Build the specified binary. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---bins\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---bins\"></a><code class=\"hljs\">--bins</code></dt>\n<dd class=\"option-desc\">Build all binary targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---example\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---example\"></a><code class=\"hljs\">--example</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Build the specified example. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---examples\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---examples\"></a><code class=\"hljs\">--examples</code></dt>\n<dd class=\"option-desc\">Build all example targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---test\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---test\"></a><code class=\"hljs\">--test</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Build the specified integration test. This flag may be specified\nmultiple times and supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---tests\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---tests\"></a><code class=\"hljs\">--tests</code></dt>\n<dd class=\"option-desc\">Build all targets in test mode that have the <code class=\"hljs\">test = true</code> manifest\nflag set. By default this includes the library and binaries built as\nunittests, and integration tests. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nunittest, and once as a dependency for binaries, integration tests, etc.).\nTargets may be enabled or disabled by setting the <code class=\"hljs\">test</code> flag in the\nmanifest settings for the target.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---bench\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---bench\"></a><code class=\"hljs\">--bench</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Build the specified benchmark. This flag may be specified multiple\ntimes and supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---benches\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---benches\"></a><code class=\"hljs\">--benches</code></dt>\n<dd class=\"option-desc\">Build all targets in benchmark mode that have the <code class=\"hljs\">bench = true</code>\nmanifest flag set. By default this includes the library and binaries built\nas benchmarks, and bench targets. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nbenchmark, and once as a dependency for binaries, benchmarks, etc.).\nTargets may be enabled or disabled by setting the <code class=\"hljs\">bench</code> flag in the\nmanifest settings for the target.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---all-targets\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---all-targets\"></a><code class=\"hljs\">--all-targets</code></dt>\n<dd class=\"option-desc\">Build all targets. This is equivalent to specifying <code class=\"hljs\">--lib --bins --tests --benches --examples</code>.</dd>\n</dl>\n<h3 id=\"feature-selection-1\"><a class=\"header\" href=\"#feature-selection-1\">Feature Selection</a></h3>\n<p>The feature flags allow you to control which features are enabled. When no\nfeature options are given, the <code class=\"hljs\">default</code> feature is activated for every\nselected package.</p>\n<p>See <a href=\"commands/../reference/features.html#command-line-feature-options\">the features documentation</a>\nfor more details.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-build--F\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build--F\"></a><code class=\"hljs\">-F</code> <em>features</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-build---features\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---features\"></a><code class=\"hljs\">--features</code> <em>features</em></dt>\n<dd class=\"option-desc\">Space or comma separated list of features to activate. Features of workspace\nmembers may be enabled with <code class=\"hljs\">package-name/feature-name</code> syntax. This flag may\nbe specified multiple times, which enables all specified features.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---all-features\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---all-features\"></a><code class=\"hljs\">--all-features</code></dt>\n<dd class=\"option-desc\">Activate all available features of all selected packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---no-default-features\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---no-default-features\"></a><code class=\"hljs\">--no-default-features</code></dt>\n<dd class=\"option-desc\">Do not activate the <code class=\"hljs\">default</code> feature of the selected packages.</dd>\n</dl>\n<h3 id=\"compilation-options-1\"><a class=\"header\" href=\"#compilation-options-1\">Compilation Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-build---target\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---target\"></a><code class=\"hljs\">--target</code> <em>triple</em></dt>\n<dd class=\"option-desc\">Build for the given architecture. The default is the host architecture. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code>. Run <code class=\"hljs\">rustc --print target-list</code> for a\nlist of supported targets. This flag may be specified multiple times.<p></p>\n<p>This may also be specified with the <code class=\"hljs\">build.target</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p>\n<p>Note that specifying this flag makes Cargo run in a different mode where the\ntarget artifacts are placed in a separate directory. See the\n<a href=\"commands/../guide/build-cache.html\">build cache</a> documentation for more details.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-build--r\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build--r\"></a><code class=\"hljs\">-r</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-build---release\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---release\"></a><code class=\"hljs\">--release</code></dt>\n<dd class=\"option-desc\">Build optimized artifacts with the <code class=\"hljs\">release</code> profile.\nSee also the <code class=\"hljs\">--profile</code> option for choosing a specific profile by name.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---profile\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---profile\"></a><code class=\"hljs\">--profile</code> <em>name</em></dt>\n<dd class=\"option-desc\">Build with the given profile.\nSee <a href=\"commands/../reference/profiles.html\">the reference</a> for more details on profiles.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---timings=fmts\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---timings=fmts\"></a><code class=\"hljs\">--timings=</code><em>fmts</em></dt>\n<dd class=\"option-desc\">Output information how long each compilation takes, and track concurrency\ninformation over time. Accepts an optional comma-separated list of output\nformats; <code class=\"hljs\">--timings</code> without an argument will default to <code class=\"hljs\">--timings=html</code>.\nSpecifying an output format (rather than the default) is unstable and requires\n<code class=\"hljs\">-Zunstable-options</code>. Valid output formats:<p></p>\n<ul>\n<li><code class=\"hljs\">html</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Write a human-readable file <code class=\"hljs\">cargo-timing.html</code> to the\n<code class=\"hljs\">target/cargo-timings</code> directory with a report of the compilation. Also write\na report to the same directory with a timestamp in the filename if you want\nto look at older runs. HTML output is suitable for human consumption only,\nand does not provide machine-readable timing data.</li>\n<li><code class=\"hljs\">json</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Emit machine-readable JSON\ninformation about timing information.</li>\n</ul></dd>\n</dl>\n<h3 id=\"output-options-1\"><a class=\"header\" href=\"#output-options-1\">Output Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-build---target-dir\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---target-dir\"></a><code class=\"hljs\">--target-dir</code> <em>directory</em></dt>\n<dd class=\"option-desc\">Directory for all generated artifacts and intermediate files. May also be\nspecified with the <code class=\"hljs\">CARGO_TARGET_DIR</code> environment variable, or the\n<code class=\"hljs\">build.target-dir</code> <a href=\"commands/../reference/config.html\">config value</a>.\nDefaults to <code class=\"hljs\">target</code> in the root of the workspace.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---out-dir\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---out-dir\"></a><code class=\"hljs\">--out-dir</code> <em>directory</em></dt>\n<dd class=\"option-desc\">Copy final artifacts to this directory.<p></p>\n<p>This option is unstable and available only on the\n<a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly channel</a>\nand requires the <code class=\"hljs\">-Z unstable-options</code> flag to enable.\nSee <a href=\"https://github.com/rust-lang/cargo/issues/6790\">https://github.com/rust-lang/cargo/issues/6790</a> for more information.</p></dd>\n</dl>\n<h3 id=\"display-options-2\"><a class=\"header\" href=\"#display-options-2\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-build--v\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-build---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build--q\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-build---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---color\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-build---message-format\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---message-format\"></a><code class=\"hljs\">--message-format</code> <em>fmt</em></dt>\n<dd class=\"option-desc\">The output format for diagnostic messages. Can be specified multiple times\nand consists of comma-separated values. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">human</code> (default): Display in a human-readable text format. Conflicts with\n<code class=\"hljs\">short</code> and <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">short</code>: Emit shorter, human-readable text messages. Conflicts with <code class=\"hljs\">human</code>\nand <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">json</code>: Emit JSON messages to stdout. See\n<a href=\"commands/../reference/external-tools.html#json-messages\">the reference</a>\nfor more details. Conflicts with <code class=\"hljs\">human</code> and <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-short</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages contains\nthe “short” rendering from rustc. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-rendered-ansi</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages\ncontains embedded ANSI color codes for respecting rustc’s default color\nscheme. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-render-diagnostics</code>: Instruct Cargo to not include rustc diagnostics\nin JSON messages printed, but instead Cargo itself should render the\nJSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others\ncoming from rustc are still emitted. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n</ul></dd>\n<dt class=\"option-term\" id=\"option-cargo-build---build-plan\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---build-plan\"></a><code class=\"hljs\">--build-plan</code></dt>\n<dd class=\"option-desc\">Outputs a series of JSON messages to stdout that indicate the commands to run\nthe build.<p></p>\n<p>This option is unstable and available only on the\n<a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly channel</a>\nand requires the <code class=\"hljs\">-Z unstable-options</code> flag to enable.\nSee <a href=\"https://github.com/rust-lang/cargo/issues/5579\">https://github.com/rust-lang/cargo/issues/5579</a> for more information.</p></dd>\n</dl>\n<h3 id=\"manifest-options-2\"><a class=\"header\" href=\"#manifest-options-2\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-build---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---ignore-rust-version\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---ignore-rust-version\"></a><code class=\"hljs\">--ignore-rust-version</code></dt>\n<dd class=\"option-desc\">Ignore <code class=\"hljs\">rust-version</code> specification in packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---locked\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-build---offline\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-build---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-2\"><a class=\"header\" href=\"#common-options-2\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-build-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---config\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build--C\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-build--h\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-build---help\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build--Z\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h3 id=\"miscellaneous-options-1\"><a class=\"header\" href=\"#miscellaneous-options-1\">Miscellaneous Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-build--j\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build--j\"></a><code class=\"hljs\">-j</code> <em>N</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-build---jobs\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---jobs\"></a><code class=\"hljs\">--jobs</code> <em>N</em></dt>\n<dd class=\"option-desc\">Number of parallel jobs to run. May also be specified with the\n<code class=\"hljs\">build.jobs</code> <a href=\"commands/../reference/config.html\">config value</a>. Defaults to\nthe number of logical CPUs. If negative, it sets the maximum number of\nparallel jobs to the number of logical CPUs plus provided value. If\na string <code class=\"hljs\">default</code> is provided, it sets the value back to defaults.\nShould not be 0.</dd>\n<dt class=\"option-term\" id=\"option-cargo-build---keep-going\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---keep-going\"></a><code class=\"hljs\">--keep-going</code></dt>\n<dd class=\"option-desc\">Build as many crates in the dependency graph as possible, rather than aborting\nthe build on the first one that fails to build.<p></p>\n<p>For example if the current package depends on dependencies <code class=\"hljs\">fails</code> and <code class=\"hljs\">works</code>,\none of which fails to build, <code class=\"hljs\">cargo build -j1</code> may or may not build the\none that succeeds (depending on which one of the two builds Cargo picked to run\nfirst), whereas <code class=\"hljs\">cargo build -j1 --keep-going</code> would definitely run both\nbuilds, even if the one run first fails.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-build---future-incompat-report\"><a class=\"option-anchor\" href=\"commands/cargo-build.html#option-cargo-build---future-incompat-report\"></a><code class=\"hljs\">--future-incompat-report</code></dt>\n<dd class=\"option-desc\">Displays a future-incompat report for any future-incompatible warnings\nproduced during execution of this command<p></p>\n<p>See <a href=\"commands/cargo-report.html\">cargo-report(1)</a></p></dd>\n</dl>\n<h2 id=\"environment-2\"><a class=\"header\" href=\"#environment-2\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-2\"><a class=\"header\" href=\"#exit-status-2\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-5\"><a class=\"header\" href=\"#examples-5\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Build the local package and all of its dependencies:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo build\n</code></pre>\n</li>\n<li>\n<p>Build with optimizations:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo build --release\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-4\"><a class=\"header\" href=\"#see-also-4\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-rustc.html\">cargo-rustc(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-check1\"><a class=\"header\" href=\"#cargo-check1\">cargo-check(1)</a></h1>\n<h2 id=\"name-5\"><a class=\"header\" href=\"#name-5\">NAME</a></h2>\n<p>cargo-check — Check the current package</p>\n<h2 id=\"synopsis-5\"><a class=\"header\" href=\"#synopsis-5\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo check</code> [<em>options</em>]</p>\n<h2 id=\"description-5\"><a class=\"header\" href=\"#description-5\">DESCRIPTION</a></h2>\n<p>Check a local package and all of its dependencies for errors. This will\nessentially compile the packages without performing the final step of code\ngeneration, which is faster than running <code class=\"hljs\">cargo build</code>. The compiler will save\nmetadata files to disk so that future runs will reuse them if the source has\nnot been modified. Some diagnostics and errors are only emitted during code\ngeneration, so they inherently won’t be reported with <code class=\"hljs\">cargo check</code>.</p>\n<h2 id=\"options-4\"><a class=\"header\" href=\"#options-4\">OPTIONS</a></h2>\n<h3 id=\"package-selection-3\"><a class=\"header\" href=\"#package-selection-3\">Package Selection</a></h3>\n<p>By default, when no package selection options are given, the packages selected\ndepend on the selected manifest file (based on the current working directory if\n<code class=\"hljs\">--manifest-path</code> is not given). If the manifest is the root of a workspace then\nthe workspaces default members are selected, otherwise only the package defined\nby the manifest will be selected.</p>\n<p>The default members of a workspace can be set explicitly with the\n<code class=\"hljs\">workspace.default-members</code> key in the root manifest. If this is not set, a\nvirtual workspace will include all workspace members (equivalent to passing\n<code class=\"hljs\">--workspace</code>), and a non-virtual workspace will include only the root crate itself.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-check--p\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check--p\"></a><code class=\"hljs\">-p</code> <em>spec</em>…</dt>\n<dt class=\"option-term\" id=\"option-cargo-check---package\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---package\"></a><code class=\"hljs\">--package</code> <em>spec</em>…</dt>\n<dd class=\"option-desc\">Check only the specified packages. See <a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a> for the\nSPEC format. This flag may be specified multiple times and supports common Unix\nglob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell accidentally\nexpanding glob patterns before Cargo handles them, you must use single quotes or\ndouble quotes around each pattern.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---workspace\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---workspace\"></a><code class=\"hljs\">--workspace</code></dt>\n<dd class=\"option-desc\">Check all members in the workspace.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---all\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---all\"></a><code class=\"hljs\">--all</code></dt>\n<dd class=\"option-desc\">Deprecated alias for <code class=\"hljs\">--workspace</code>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---exclude\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---exclude\"></a><code class=\"hljs\">--exclude</code> <em>SPEC</em>…</dt>\n<dd class=\"option-desc\">Exclude the specified packages. Must be used in conjunction with the\n<code class=\"hljs\">--workspace</code> flag. This flag may be specified multiple times and supports\ncommon Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell\naccidentally expanding glob patterns before Cargo handles them, you must use\nsingle quotes or double quotes around each pattern.</dd>\n</dl>\n<h3 id=\"target-selection-2\"><a class=\"header\" href=\"#target-selection-2\">Target Selection</a></h3>\n<p>When no target selection options are given, <code class=\"hljs\">cargo check</code> will check all\nbinary and library targets of the selected packages. Binaries are skipped if\nthey have <code class=\"hljs\">required-features</code> that are missing.</p>\n<p>Passing target selection flags will check only the specified\ntargets.</p>\n<p>Note that <code class=\"hljs\">--bin</code>, <code class=\"hljs\">--example</code>, <code class=\"hljs\">--test</code> and <code class=\"hljs\">--bench</code> flags also\nsupport common Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your\nshell accidentally expanding glob patterns before Cargo handles them, you must\nuse single quotes or double quotes around each glob pattern.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-check---lib\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---lib\"></a><code class=\"hljs\">--lib</code></dt>\n<dd class=\"option-desc\">Check the package’s library.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---bin\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---bin\"></a><code class=\"hljs\">--bin</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Check the specified binary. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---bins\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---bins\"></a><code class=\"hljs\">--bins</code></dt>\n<dd class=\"option-desc\">Check all binary targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---example\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---example\"></a><code class=\"hljs\">--example</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Check the specified example. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---examples\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---examples\"></a><code class=\"hljs\">--examples</code></dt>\n<dd class=\"option-desc\">Check all example targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---test\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---test\"></a><code class=\"hljs\">--test</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Check the specified integration test. This flag may be specified\nmultiple times and supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---tests\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---tests\"></a><code class=\"hljs\">--tests</code></dt>\n<dd class=\"option-desc\">Check all targets in test mode that have the <code class=\"hljs\">test = true</code> manifest\nflag set. By default this includes the library and binaries built as\nunittests, and integration tests. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nunittest, and once as a dependency for binaries, integration tests, etc.).\nTargets may be enabled or disabled by setting the <code class=\"hljs\">test</code> flag in the\nmanifest settings for the target.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---bench\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---bench\"></a><code class=\"hljs\">--bench</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Check the specified benchmark. This flag may be specified multiple\ntimes and supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---benches\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---benches\"></a><code class=\"hljs\">--benches</code></dt>\n<dd class=\"option-desc\">Check all targets in benchmark mode that have the <code class=\"hljs\">bench = true</code>\nmanifest flag set. By default this includes the library and binaries built\nas benchmarks, and bench targets. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nbenchmark, and once as a dependency for binaries, benchmarks, etc.).\nTargets may be enabled or disabled by setting the <code class=\"hljs\">bench</code> flag in the\nmanifest settings for the target.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---all-targets\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---all-targets\"></a><code class=\"hljs\">--all-targets</code></dt>\n<dd class=\"option-desc\">Check all targets. This is equivalent to specifying <code class=\"hljs\">--lib --bins --tests --benches --examples</code>.</dd>\n</dl>\n<h3 id=\"feature-selection-2\"><a class=\"header\" href=\"#feature-selection-2\">Feature Selection</a></h3>\n<p>The feature flags allow you to control which features are enabled. When no\nfeature options are given, the <code class=\"hljs\">default</code> feature is activated for every\nselected package.</p>\n<p>See <a href=\"commands/../reference/features.html#command-line-feature-options\">the features documentation</a>\nfor more details.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-check--F\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check--F\"></a><code class=\"hljs\">-F</code> <em>features</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-check---features\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---features\"></a><code class=\"hljs\">--features</code> <em>features</em></dt>\n<dd class=\"option-desc\">Space or comma separated list of features to activate. Features of workspace\nmembers may be enabled with <code class=\"hljs\">package-name/feature-name</code> syntax. This flag may\nbe specified multiple times, which enables all specified features.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---all-features\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---all-features\"></a><code class=\"hljs\">--all-features</code></dt>\n<dd class=\"option-desc\">Activate all available features of all selected packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---no-default-features\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---no-default-features\"></a><code class=\"hljs\">--no-default-features</code></dt>\n<dd class=\"option-desc\">Do not activate the <code class=\"hljs\">default</code> feature of the selected packages.</dd>\n</dl>\n<h3 id=\"compilation-options-2\"><a class=\"header\" href=\"#compilation-options-2\">Compilation Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-check---target\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---target\"></a><code class=\"hljs\">--target</code> <em>triple</em></dt>\n<dd class=\"option-desc\">Check for the given architecture. The default is the host architecture. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code>. Run <code class=\"hljs\">rustc --print target-list</code> for a\nlist of supported targets. This flag may be specified multiple times.<p></p>\n<p>This may also be specified with the <code class=\"hljs\">build.target</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p>\n<p>Note that specifying this flag makes Cargo run in a different mode where the\ntarget artifacts are placed in a separate directory. See the\n<a href=\"commands/../guide/build-cache.html\">build cache</a> documentation for more details.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-check--r\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check--r\"></a><code class=\"hljs\">-r</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-check---release\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---release\"></a><code class=\"hljs\">--release</code></dt>\n<dd class=\"option-desc\">Check optimized artifacts with the <code class=\"hljs\">release</code> profile.\nSee also the <code class=\"hljs\">--profile</code> option for choosing a specific profile by name.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---profile\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---profile\"></a><code class=\"hljs\">--profile</code> <em>name</em></dt>\n<dd class=\"option-desc\">Check with the given profile.<p></p>\n<p>As a special case, specifying the <code class=\"hljs\">test</code> profile will also enable checking in\ntest mode which will enable checking tests and enable the <code class=\"hljs\">test</code> cfg option.\nSee <a href=\"https://doc.rust-lang.org/rustc/tests/index.html\">rustc tests</a> for more\ndetail.</p>\n<p>See <a href=\"commands/../reference/profiles.html\">the reference</a> for more details on profiles.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-check---timings=fmts\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---timings=fmts\"></a><code class=\"hljs\">--timings=</code><em>fmts</em></dt>\n<dd class=\"option-desc\">Output information how long each compilation takes, and track concurrency\ninformation over time. Accepts an optional comma-separated list of output\nformats; <code class=\"hljs\">--timings</code> without an argument will default to <code class=\"hljs\">--timings=html</code>.\nSpecifying an output format (rather than the default) is unstable and requires\n<code class=\"hljs\">-Zunstable-options</code>. Valid output formats:<p></p>\n<ul>\n<li><code class=\"hljs\">html</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Write a human-readable file <code class=\"hljs\">cargo-timing.html</code> to the\n<code class=\"hljs\">target/cargo-timings</code> directory with a report of the compilation. Also write\na report to the same directory with a timestamp in the filename if you want\nto look at older runs. HTML output is suitable for human consumption only,\nand does not provide machine-readable timing data.</li>\n<li><code class=\"hljs\">json</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Emit machine-readable JSON\ninformation about timing information.</li>\n</ul></dd>\n</dl>\n<h3 id=\"output-options-2\"><a class=\"header\" href=\"#output-options-2\">Output Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-check---target-dir\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---target-dir\"></a><code class=\"hljs\">--target-dir</code> <em>directory</em></dt>\n<dd class=\"option-desc\">Directory for all generated artifacts and intermediate files. May also be\nspecified with the <code class=\"hljs\">CARGO_TARGET_DIR</code> environment variable, or the\n<code class=\"hljs\">build.target-dir</code> <a href=\"commands/../reference/config.html\">config value</a>.\nDefaults to <code class=\"hljs\">target</code> in the root of the workspace.</dd>\n</dl>\n<h3 id=\"display-options-3\"><a class=\"header\" href=\"#display-options-3\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-check--v\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-check---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check--q\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-check---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---color\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-check---message-format\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---message-format\"></a><code class=\"hljs\">--message-format</code> <em>fmt</em></dt>\n<dd class=\"option-desc\">The output format for diagnostic messages. Can be specified multiple times\nand consists of comma-separated values. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">human</code> (default): Display in a human-readable text format. Conflicts with\n<code class=\"hljs\">short</code> and <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">short</code>: Emit shorter, human-readable text messages. Conflicts with <code class=\"hljs\">human</code>\nand <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">json</code>: Emit JSON messages to stdout. See\n<a href=\"commands/../reference/external-tools.html#json-messages\">the reference</a>\nfor more details. Conflicts with <code class=\"hljs\">human</code> and <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-short</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages contains\nthe “short” rendering from rustc. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-rendered-ansi</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages\ncontains embedded ANSI color codes for respecting rustc’s default color\nscheme. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-render-diagnostics</code>: Instruct Cargo to not include rustc diagnostics\nin JSON messages printed, but instead Cargo itself should render the\nJSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others\ncoming from rustc are still emitted. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n</ul></dd>\n</dl>\n<h3 id=\"manifest-options-3\"><a class=\"header\" href=\"#manifest-options-3\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-check---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---ignore-rust-version\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---ignore-rust-version\"></a><code class=\"hljs\">--ignore-rust-version</code></dt>\n<dd class=\"option-desc\">Ignore <code class=\"hljs\">rust-version</code> specification in packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---locked\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-check---offline\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-check---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-3\"><a class=\"header\" href=\"#common-options-3\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-check-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---config\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check--C\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-check--h\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-check---help\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check--Z\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h3 id=\"miscellaneous-options-2\"><a class=\"header\" href=\"#miscellaneous-options-2\">Miscellaneous Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-check--j\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check--j\"></a><code class=\"hljs\">-j</code> <em>N</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-check---jobs\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---jobs\"></a><code class=\"hljs\">--jobs</code> <em>N</em></dt>\n<dd class=\"option-desc\">Number of parallel jobs to run. May also be specified with the\n<code class=\"hljs\">build.jobs</code> <a href=\"commands/../reference/config.html\">config value</a>. Defaults to\nthe number of logical CPUs. If negative, it sets the maximum number of\nparallel jobs to the number of logical CPUs plus provided value. If\na string <code class=\"hljs\">default</code> is provided, it sets the value back to defaults.\nShould not be 0.</dd>\n<dt class=\"option-term\" id=\"option-cargo-check---keep-going\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---keep-going\"></a><code class=\"hljs\">--keep-going</code></dt>\n<dd class=\"option-desc\">Build as many crates in the dependency graph as possible, rather than aborting\nthe build on the first one that fails to build.<p></p>\n<p>For example if the current package depends on dependencies <code class=\"hljs\">fails</code> and <code class=\"hljs\">works</code>,\none of which fails to build, <code class=\"hljs\">cargo check -j1</code> may or may not build the\none that succeeds (depending on which one of the two builds Cargo picked to run\nfirst), whereas <code class=\"hljs\">cargo check -j1 --keep-going</code> would definitely run both\nbuilds, even if the one run first fails.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-check---future-incompat-report\"><a class=\"option-anchor\" href=\"commands/cargo-check.html#option-cargo-check---future-incompat-report\"></a><code class=\"hljs\">--future-incompat-report</code></dt>\n<dd class=\"option-desc\">Displays a future-incompat report for any future-incompatible warnings\nproduced during execution of this command<p></p>\n<p>See <a href=\"commands/cargo-report.html\">cargo-report(1)</a></p></dd>\n</dl>\n<h2 id=\"environment-3\"><a class=\"header\" href=\"#environment-3\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-3\"><a class=\"header\" href=\"#exit-status-3\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-6\"><a class=\"header\" href=\"#examples-6\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Check the local package for errors:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo check\n</code></pre>\n</li>\n<li>\n<p>Check all targets, including unit tests:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo check --all-targets --profile=test\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-5\"><a class=\"header\" href=\"#see-also-5\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-build.html\">cargo-build(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-clean1\"><a class=\"header\" href=\"#cargo-clean1\">cargo-clean(1)</a></h1>\n<h2 id=\"name-6\"><a class=\"header\" href=\"#name-6\">NAME</a></h2>\n<p>cargo-clean — Remove generated artifacts</p>\n<h2 id=\"synopsis-6\"><a class=\"header\" href=\"#synopsis-6\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo clean</code> [<em>options</em>]</p>\n<h2 id=\"description-6\"><a class=\"header\" href=\"#description-6\">DESCRIPTION</a></h2>\n<p>Remove artifacts from the target directory that Cargo has generated in the\npast.</p>\n<p>With no options, <code class=\"hljs\">cargo clean</code> will delete the entire target directory.</p>\n<h2 id=\"options-5\"><a class=\"header\" href=\"#options-5\">OPTIONS</a></h2>\n<h3 id=\"package-selection-4\"><a class=\"header\" href=\"#package-selection-4\">Package Selection</a></h3>\n<p>When no packages are selected, all packages and all dependencies in the\nworkspace are cleaned.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-clean--p\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean--p\"></a><code class=\"hljs\">-p</code> <em>spec</em>…</dt>\n<dt class=\"option-term\" id=\"option-cargo-clean---package\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean---package\"></a><code class=\"hljs\">--package</code> <em>spec</em>…</dt>\n<dd class=\"option-desc\">Clean only the specified packages. This flag may be specified\nmultiple times. See <a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a> for the SPEC format.</dd>\n</dl>\n<h3 id=\"clean-options\"><a class=\"header\" href=\"#clean-options\">Clean Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-clean---dry-run\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean---dry-run\"></a><code class=\"hljs\">--dry-run</code></dt>\n<dd class=\"option-desc\">Displays a summary of what would be deleted without deleting anything.\nUse with <code class=\"hljs\">--verbose</code> to display the actual files that would be deleted.</dd>\n<dt class=\"option-term\" id=\"option-cargo-clean---doc\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean---doc\"></a><code class=\"hljs\">--doc</code></dt>\n<dd class=\"option-desc\">This option will cause <code class=\"hljs\">cargo clean</code> to remove only the <code class=\"hljs\">doc</code> directory in\nthe target directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-clean---release\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean---release\"></a><code class=\"hljs\">--release</code></dt>\n<dd class=\"option-desc\">Remove all artifacts in the <code class=\"hljs\">release</code> directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-clean---profile\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean---profile\"></a><code class=\"hljs\">--profile</code> <em>name</em></dt>\n<dd class=\"option-desc\">Remove all artifacts in the directory with the given profile name.</dd>\n<dt class=\"option-term\" id=\"option-cargo-clean---target-dir\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean---target-dir\"></a><code class=\"hljs\">--target-dir</code> <em>directory</em></dt>\n<dd class=\"option-desc\">Directory for all generated artifacts and intermediate files. May also be\nspecified with the <code class=\"hljs\">CARGO_TARGET_DIR</code> environment variable, or the\n<code class=\"hljs\">build.target-dir</code> <a href=\"commands/../reference/config.html\">config value</a>.\nDefaults to <code class=\"hljs\">target</code> in the root of the workspace.</dd>\n<dt class=\"option-term\" id=\"option-cargo-clean---target\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean---target\"></a><code class=\"hljs\">--target</code> <em>triple</em></dt>\n<dd class=\"option-desc\">Clean for the given architecture. The default is the host architecture. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code>. Run <code class=\"hljs\">rustc --print target-list</code> for a\nlist of supported targets. This flag may be specified multiple times.<p></p>\n<p>This may also be specified with the <code class=\"hljs\">build.target</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p>\n<p>Note that specifying this flag makes Cargo run in a different mode where the\ntarget artifacts are placed in a separate directory. See the\n<a href=\"commands/../guide/build-cache.html\">build cache</a> documentation for more details.</p></dd>\n</dl>\n<h3 id=\"display-options-4\"><a class=\"header\" href=\"#display-options-4\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-clean--v\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-clean---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-clean--q\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-clean---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-clean---color\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"manifest-options-4\"><a class=\"header\" href=\"#manifest-options-4\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-clean---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-clean---locked\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-clean---offline\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-clean---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-4\"><a class=\"header\" href=\"#common-options-4\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-clean-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-clean---config\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-clean--C\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-clean--h\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-clean---help\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-clean--Z\"><a class=\"option-anchor\" href=\"commands/cargo-clean.html#option-cargo-clean--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-4\"><a class=\"header\" href=\"#environment-4\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-4\"><a class=\"header\" href=\"#exit-status-4\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-7\"><a class=\"header\" href=\"#examples-7\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Remove the entire target directory:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo clean\n</code></pre>\n</li>\n<li>\n<p>Remove only the release artifacts:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo clean --release\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-6\"><a class=\"header\" href=\"#see-also-6\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-build.html\">cargo-build(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-doc1\"><a class=\"header\" href=\"#cargo-doc1\">cargo-doc(1)</a></h1>\n<h2 id=\"name-7\"><a class=\"header\" href=\"#name-7\">NAME</a></h2>\n<p>cargo-doc — Build a package’s documentation</p>\n<h2 id=\"synopsis-7\"><a class=\"header\" href=\"#synopsis-7\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo doc</code> [<em>options</em>]</p>\n<h2 id=\"description-7\"><a class=\"header\" href=\"#description-7\">DESCRIPTION</a></h2>\n<p>Build the documentation for the local package and all dependencies. The output\nis placed in <code class=\"hljs\">target/doc</code> in rustdoc’s usual format.</p>\n<h2 id=\"options-6\"><a class=\"header\" href=\"#options-6\">OPTIONS</a></h2>\n<h3 id=\"documentation-options\"><a class=\"header\" href=\"#documentation-options\">Documentation Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-doc---open\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---open\"></a><code class=\"hljs\">--open</code></dt>\n<dd class=\"option-desc\">Open the docs in a browser after building them. This will use your default\nbrowser unless you define another one in the <code class=\"hljs\">BROWSER</code> environment variable\nor use the <a href=\"commands/../reference/config.html#docbrowser\"><code class=\"hljs\">doc.browser</code></a> configuration\noption.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---no-deps\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---no-deps\"></a><code class=\"hljs\">--no-deps</code></dt>\n<dd class=\"option-desc\">Do not build documentation for dependencies.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---document-private-items\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---document-private-items\"></a><code class=\"hljs\">--document-private-items</code></dt>\n<dd class=\"option-desc\">Include non-public items in the documentation. This will be enabled by default if documenting a binary target.</dd>\n</dl>\n<h3 id=\"package-selection-5\"><a class=\"header\" href=\"#package-selection-5\">Package Selection</a></h3>\n<p>By default, when no package selection options are given, the packages selected\ndepend on the selected manifest file (based on the current working directory if\n<code class=\"hljs\">--manifest-path</code> is not given). If the manifest is the root of a workspace then\nthe workspaces default members are selected, otherwise only the package defined\nby the manifest will be selected.</p>\n<p>The default members of a workspace can be set explicitly with the\n<code class=\"hljs\">workspace.default-members</code> key in the root manifest. If this is not set, a\nvirtual workspace will include all workspace members (equivalent to passing\n<code class=\"hljs\">--workspace</code>), and a non-virtual workspace will include only the root crate itself.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-doc--p\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc--p\"></a><code class=\"hljs\">-p</code> <em>spec</em>…</dt>\n<dt class=\"option-term\" id=\"option-cargo-doc---package\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---package\"></a><code class=\"hljs\">--package</code> <em>spec</em>…</dt>\n<dd class=\"option-desc\">Document only the specified packages. See <a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a> for the\nSPEC format. This flag may be specified multiple times and supports common Unix\nglob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell accidentally\nexpanding glob patterns before Cargo handles them, you must use single quotes or\ndouble quotes around each pattern.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---workspace\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---workspace\"></a><code class=\"hljs\">--workspace</code></dt>\n<dd class=\"option-desc\">Document all members in the workspace.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---all\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---all\"></a><code class=\"hljs\">--all</code></dt>\n<dd class=\"option-desc\">Deprecated alias for <code class=\"hljs\">--workspace</code>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---exclude\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---exclude\"></a><code class=\"hljs\">--exclude</code> <em>SPEC</em>…</dt>\n<dd class=\"option-desc\">Exclude the specified packages. Must be used in conjunction with the\n<code class=\"hljs\">--workspace</code> flag. This flag may be specified multiple times and supports\ncommon Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell\naccidentally expanding glob patterns before Cargo handles them, you must use\nsingle quotes or double quotes around each pattern.</dd>\n</dl>\n<h3 id=\"target-selection-3\"><a class=\"header\" href=\"#target-selection-3\">Target Selection</a></h3>\n<p>When no target selection options are given, <code class=\"hljs\">cargo doc</code> will document all\nbinary and library targets of the selected package. The binary will be skipped\nif its name is the same as the lib target. Binaries are skipped if they have\n<code class=\"hljs\">required-features</code> that are missing.</p>\n<p>The default behavior can be changed by setting <code class=\"hljs\">doc = false</code> for the target in\nthe manifest settings. Using target selection options will ignore the <code class=\"hljs\">doc</code>\nflag and will always document the given target.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-doc---lib\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---lib\"></a><code class=\"hljs\">--lib</code></dt>\n<dd class=\"option-desc\">Document the package’s library.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---bin\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---bin\"></a><code class=\"hljs\">--bin</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Document the specified binary. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---bins\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---bins\"></a><code class=\"hljs\">--bins</code></dt>\n<dd class=\"option-desc\">Document all binary targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---example\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---example\"></a><code class=\"hljs\">--example</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Document the specified example. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---examples\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---examples\"></a><code class=\"hljs\">--examples</code></dt>\n<dd class=\"option-desc\">Document all example targets.</dd>\n</dl>\n<h3 id=\"feature-selection-3\"><a class=\"header\" href=\"#feature-selection-3\">Feature Selection</a></h3>\n<p>The feature flags allow you to control which features are enabled. When no\nfeature options are given, the <code class=\"hljs\">default</code> feature is activated for every\nselected package.</p>\n<p>See <a href=\"commands/../reference/features.html#command-line-feature-options\">the features documentation</a>\nfor more details.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-doc--F\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc--F\"></a><code class=\"hljs\">-F</code> <em>features</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-doc---features\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---features\"></a><code class=\"hljs\">--features</code> <em>features</em></dt>\n<dd class=\"option-desc\">Space or comma separated list of features to activate. Features of workspace\nmembers may be enabled with <code class=\"hljs\">package-name/feature-name</code> syntax. This flag may\nbe specified multiple times, which enables all specified features.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---all-features\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---all-features\"></a><code class=\"hljs\">--all-features</code></dt>\n<dd class=\"option-desc\">Activate all available features of all selected packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---no-default-features\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---no-default-features\"></a><code class=\"hljs\">--no-default-features</code></dt>\n<dd class=\"option-desc\">Do not activate the <code class=\"hljs\">default</code> feature of the selected packages.</dd>\n</dl>\n<h3 id=\"compilation-options-3\"><a class=\"header\" href=\"#compilation-options-3\">Compilation Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-doc---target\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---target\"></a><code class=\"hljs\">--target</code> <em>triple</em></dt>\n<dd class=\"option-desc\">Document for the given architecture. The default is the host architecture. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code>. Run <code class=\"hljs\">rustc --print target-list</code> for a\nlist of supported targets. This flag may be specified multiple times.<p></p>\n<p>This may also be specified with the <code class=\"hljs\">build.target</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p>\n<p>Note that specifying this flag makes Cargo run in a different mode where the\ntarget artifacts are placed in a separate directory. See the\n<a href=\"commands/../guide/build-cache.html\">build cache</a> documentation for more details.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-doc--r\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc--r\"></a><code class=\"hljs\">-r</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-doc---release\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---release\"></a><code class=\"hljs\">--release</code></dt>\n<dd class=\"option-desc\">Document optimized artifacts with the <code class=\"hljs\">release</code> profile.\nSee also the <code class=\"hljs\">--profile</code> option for choosing a specific profile by name.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---profile\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---profile\"></a><code class=\"hljs\">--profile</code> <em>name</em></dt>\n<dd class=\"option-desc\">Document with the given profile.\nSee <a href=\"commands/../reference/profiles.html\">the reference</a> for more details on profiles.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---timings=fmts\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---timings=fmts\"></a><code class=\"hljs\">--timings=</code><em>fmts</em></dt>\n<dd class=\"option-desc\">Output information how long each compilation takes, and track concurrency\ninformation over time. Accepts an optional comma-separated list of output\nformats; <code class=\"hljs\">--timings</code> without an argument will default to <code class=\"hljs\">--timings=html</code>.\nSpecifying an output format (rather than the default) is unstable and requires\n<code class=\"hljs\">-Zunstable-options</code>. Valid output formats:<p></p>\n<ul>\n<li><code class=\"hljs\">html</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Write a human-readable file <code class=\"hljs\">cargo-timing.html</code> to the\n<code class=\"hljs\">target/cargo-timings</code> directory with a report of the compilation. Also write\na report to the same directory with a timestamp in the filename if you want\nto look at older runs. HTML output is suitable for human consumption only,\nand does not provide machine-readable timing data.</li>\n<li><code class=\"hljs\">json</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Emit machine-readable JSON\ninformation about timing information.</li>\n</ul></dd>\n</dl>\n<h3 id=\"output-options-3\"><a class=\"header\" href=\"#output-options-3\">Output Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-doc---target-dir\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---target-dir\"></a><code class=\"hljs\">--target-dir</code> <em>directory</em></dt>\n<dd class=\"option-desc\">Directory for all generated artifacts and intermediate files. May also be\nspecified with the <code class=\"hljs\">CARGO_TARGET_DIR</code> environment variable, or the\n<code class=\"hljs\">build.target-dir</code> <a href=\"commands/../reference/config.html\">config value</a>.\nDefaults to <code class=\"hljs\">target</code> in the root of the workspace.</dd>\n</dl>\n<h3 id=\"display-options-5\"><a class=\"header\" href=\"#display-options-5\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-doc--v\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-doc---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc--q\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-doc---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---color\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---message-format\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---message-format\"></a><code class=\"hljs\">--message-format</code> <em>fmt</em></dt>\n<dd class=\"option-desc\">The output format for diagnostic messages. Can be specified multiple times\nand consists of comma-separated values. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">human</code> (default): Display in a human-readable text format. Conflicts with\n<code class=\"hljs\">short</code> and <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">short</code>: Emit shorter, human-readable text messages. Conflicts with <code class=\"hljs\">human</code>\nand <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">json</code>: Emit JSON messages to stdout. See\n<a href=\"commands/../reference/external-tools.html#json-messages\">the reference</a>\nfor more details. Conflicts with <code class=\"hljs\">human</code> and <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-short</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages contains\nthe “short” rendering from rustc. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-rendered-ansi</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages\ncontains embedded ANSI color codes for respecting rustc’s default color\nscheme. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-render-diagnostics</code>: Instruct Cargo to not include rustc diagnostics\nin JSON messages printed, but instead Cargo itself should render the\nJSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others\ncoming from rustc are still emitted. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n</ul></dd>\n</dl>\n<h3 id=\"manifest-options-5\"><a class=\"header\" href=\"#manifest-options-5\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-doc---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---ignore-rust-version\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---ignore-rust-version\"></a><code class=\"hljs\">--ignore-rust-version</code></dt>\n<dd class=\"option-desc\">Ignore <code class=\"hljs\">rust-version</code> specification in packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---locked\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---offline\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-5\"><a class=\"header\" href=\"#common-options-5\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-doc-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---config\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc--C\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-doc--h\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-doc---help\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc--Z\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h3 id=\"miscellaneous-options-3\"><a class=\"header\" href=\"#miscellaneous-options-3\">Miscellaneous Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-doc--j\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc--j\"></a><code class=\"hljs\">-j</code> <em>N</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-doc---jobs\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---jobs\"></a><code class=\"hljs\">--jobs</code> <em>N</em></dt>\n<dd class=\"option-desc\">Number of parallel jobs to run. May also be specified with the\n<code class=\"hljs\">build.jobs</code> <a href=\"commands/../reference/config.html\">config value</a>. Defaults to\nthe number of logical CPUs. If negative, it sets the maximum number of\nparallel jobs to the number of logical CPUs plus provided value. If\na string <code class=\"hljs\">default</code> is provided, it sets the value back to defaults.\nShould not be 0.</dd>\n<dt class=\"option-term\" id=\"option-cargo-doc---keep-going\"><a class=\"option-anchor\" href=\"commands/cargo-doc.html#option-cargo-doc---keep-going\"></a><code class=\"hljs\">--keep-going</code></dt>\n<dd class=\"option-desc\">Build as many crates in the dependency graph as possible, rather than aborting\nthe build on the first one that fails to build.<p></p>\n<p>For example if the current package depends on dependencies <code class=\"hljs\">fails</code> and <code class=\"hljs\">works</code>,\none of which fails to build, <code class=\"hljs\">cargo doc -j1</code> may or may not build the\none that succeeds (depending on which one of the two builds Cargo picked to run\nfirst), whereas <code class=\"hljs\">cargo doc -j1 --keep-going</code> would definitely run both\nbuilds, even if the one run first fails.</p></dd>\n</dl>\n<h2 id=\"environment-5\"><a class=\"header\" href=\"#environment-5\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-5\"><a class=\"header\" href=\"#exit-status-5\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-8\"><a class=\"header\" href=\"#examples-8\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Build the local package documentation and its dependencies and output to\n<code class=\"hljs\">target/doc</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo doc\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-7\"><a class=\"header\" href=\"#see-also-7\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-rustdoc.html\">cargo-rustdoc(1)</a>, <a href=\"https://doc.rust-lang.org/rustdoc/index.html\">rustdoc(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-fetch1\"><a class=\"header\" href=\"#cargo-fetch1\">cargo-fetch(1)</a></h1>\n<h2 id=\"name-8\"><a class=\"header\" href=\"#name-8\">NAME</a></h2>\n<p>cargo-fetch — Fetch dependencies of a package from the network</p>\n<h2 id=\"synopsis-8\"><a class=\"header\" href=\"#synopsis-8\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo fetch</code> [<em>options</em>]</p>\n<h2 id=\"description-8\"><a class=\"header\" href=\"#description-8\">DESCRIPTION</a></h2>\n<p>If a <code class=\"hljs\">Cargo.lock</code> file is available, this command will ensure that all of the\ngit dependencies and/or registry dependencies are downloaded and locally\navailable. Subsequent Cargo commands will be able to run offline after a <code class=\"hljs\">cargo fetch</code> unless the lock file changes.</p>\n<p>If the lock file is not available, then this command will generate the lock\nfile before fetching the dependencies.</p>\n<p>If <code class=\"hljs\">--target</code> is not specified, then all target dependencies are fetched.</p>\n<p>See also the <a href=\"https://crates.io/crates/cargo-prefetch\">cargo-prefetch</a>\nplugin which adds a command to download popular crates. This may be useful if\nyou plan to use Cargo without a network with the <code class=\"hljs\">--offline</code> flag.</p>\n<h2 id=\"options-7\"><a class=\"header\" href=\"#options-7\">OPTIONS</a></h2>\n<h3 id=\"fetch-options\"><a class=\"header\" href=\"#fetch-options\">Fetch options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-fetch---target\"><a class=\"option-anchor\" href=\"commands/cargo-fetch.html#option-cargo-fetch---target\"></a><code class=\"hljs\">--target</code> <em>triple</em></dt>\n<dd class=\"option-desc\">Fetch for the given architecture. The default is all architectures. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code>. Run <code class=\"hljs\">rustc --print target-list</code> for a\nlist of supported targets. This flag may be specified multiple times.<p></p>\n<p>This may also be specified with the <code class=\"hljs\">build.target</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p>\n<p>Note that specifying this flag makes Cargo run in a different mode where the\ntarget artifacts are placed in a separate directory. See the\n<a href=\"commands/../guide/build-cache.html\">build cache</a> documentation for more details.</p></dd>\n</dl>\n<h3 id=\"display-options-6\"><a class=\"header\" href=\"#display-options-6\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-fetch--v\"><a class=\"option-anchor\" href=\"commands/cargo-fetch.html#option-cargo-fetch--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-fetch---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-fetch.html#option-cargo-fetch---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fetch--q\"><a class=\"option-anchor\" href=\"commands/cargo-fetch.html#option-cargo-fetch--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-fetch---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-fetch.html#option-cargo-fetch---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fetch---color\"><a class=\"option-anchor\" href=\"commands/cargo-fetch.html#option-cargo-fetch---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"manifest-options-6\"><a class=\"header\" href=\"#manifest-options-6\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-fetch---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-fetch.html#option-cargo-fetch---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fetch---locked\"><a class=\"option-anchor\" href=\"commands/cargo-fetch.html#option-cargo-fetch---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-fetch---offline\"><a class=\"option-anchor\" href=\"commands/cargo-fetch.html#option-cargo-fetch---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-fetch---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-fetch.html#option-cargo-fetch---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-6\"><a class=\"header\" href=\"#common-options-6\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-fetch-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-fetch.html#option-cargo-fetch-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fetch---config\"><a class=\"option-anchor\" href=\"commands/cargo-fetch.html#option-cargo-fetch---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fetch--C\"><a class=\"option-anchor\" href=\"commands/cargo-fetch.html#option-cargo-fetch--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-fetch--h\"><a class=\"option-anchor\" href=\"commands/cargo-fetch.html#option-cargo-fetch--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-fetch---help\"><a class=\"option-anchor\" href=\"commands/cargo-fetch.html#option-cargo-fetch---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fetch--Z\"><a class=\"option-anchor\" href=\"commands/cargo-fetch.html#option-cargo-fetch--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-6\"><a class=\"header\" href=\"#environment-6\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-6\"><a class=\"header\" href=\"#exit-status-6\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-9\"><a class=\"header\" href=\"#examples-9\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Fetch all dependencies:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo fetch\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-8\"><a class=\"header\" href=\"#see-also-8\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-update.html\">cargo-update(1)</a>, <a href=\"commands/cargo-generate-lockfile.html\">cargo-generate-lockfile(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-fix1\"><a class=\"header\" href=\"#cargo-fix1\">cargo-fix(1)</a></h1>\n<h2 id=\"name-9\"><a class=\"header\" href=\"#name-9\">NAME</a></h2>\n<p>cargo-fix — Automatically fix lint warnings reported by rustc</p>\n<h2 id=\"synopsis-9\"><a class=\"header\" href=\"#synopsis-9\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo fix</code> [<em>options</em>]</p>\n<h2 id=\"description-9\"><a class=\"header\" href=\"#description-9\">DESCRIPTION</a></h2>\n<p>This Cargo subcommand will automatically take rustc’s suggestions from\ndiagnostics like warnings and apply them to your source code. This is intended\nto help automate tasks that rustc itself already knows how to tell you to fix!</p>\n<p>Executing <code class=\"hljs\">cargo fix</code> will under the hood execute <a href=\"commands/cargo-check.html\">cargo-check(1)</a>. Any warnings\napplicable to your crate will be automatically fixed (if possible) and all\nremaining warnings will be displayed when the check process is finished. For\nexample if you’d like to apply all fixes to the current package, you can run:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo fix\n</code></pre>\n<p>which behaves the same as <code class=\"hljs\">cargo check --all-targets</code>.</p>\n<p><code class=\"hljs\">cargo fix</code> is only capable of fixing code that is normally compiled with\n<code class=\"hljs\">cargo check</code>. If code is conditionally enabled with optional features, you\nwill need to enable those features for that code to be analyzed:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo fix --features foo\n</code></pre>\n<p>Similarly, other <code class=\"hljs\">cfg</code> expressions like platform-specific code will need to\npass <code class=\"hljs\">--target</code> to fix code for the given target.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo fix --target x86_64-pc-windows-gnu\n</code></pre>\n<p>If you encounter any problems with <code class=\"hljs\">cargo fix</code> or otherwise have any questions\nor feature requests please don’t hesitate to file an issue at\n<a href=\"https://github.com/rust-lang/cargo\">https://github.com/rust-lang/cargo</a>.</p>\n<h3 id=\"edition-migration\"><a class=\"header\" href=\"#edition-migration\">Edition migration</a></h3>\n<p>The <code class=\"hljs\">cargo fix</code> subcommand can also be used to migrate a package from one\n<a href=\"https://doc.rust-lang.org/edition-guide/editions/transitioning-an-existing-project-to-a-new-edition.html\">edition</a> to the next. The general procedure is:</p>\n<ol>\n<li>Run <code class=\"hljs\">cargo fix --edition</code>. Consider also using the <code class=\"hljs\">--all-features</code> flag if\nyour project has multiple features. You may also want to run <code class=\"hljs\">cargo fix --edition</code> multiple times with different <code class=\"hljs\">--target</code> flags if your project\nhas platform-specific code gated by <code class=\"hljs\">cfg</code> attributes.</li>\n<li>Modify <code class=\"hljs\">Cargo.toml</code> to set the <a href=\"commands/../reference/manifest.html#the-edition-field\">edition field</a> to the new edition.</li>\n<li>Run your project tests to verify that everything still works. If new\nwarnings are issued, you may want to consider running <code class=\"hljs\">cargo fix</code> again\n(without the <code class=\"hljs\">--edition</code> flag) to apply any suggestions given by the\ncompiler.</li>\n</ol>\n<p>And hopefully that’s it! Just keep in mind of the caveats mentioned above that\n<code class=\"hljs\">cargo fix</code> cannot update code for inactive features or <code class=\"hljs\">cfg</code> expressions.\nAlso, in some rare cases the compiler is unable to automatically migrate all\ncode to the new edition, and this may require manual changes after building\nwith the new edition.</p>\n<h2 id=\"options-8\"><a class=\"header\" href=\"#options-8\">OPTIONS</a></h2>\n<h3 id=\"fix-options\"><a class=\"header\" href=\"#fix-options\">Fix options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-fix---broken-code\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---broken-code\"></a><code class=\"hljs\">--broken-code</code></dt>\n<dd class=\"option-desc\">Fix code even if it already has compiler errors. This is useful if <code class=\"hljs\">cargo fix</code>\nfails to apply the changes. It will apply the changes and leave the broken\ncode in the working directory for you to inspect and manually fix.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---edition\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---edition\"></a><code class=\"hljs\">--edition</code></dt>\n<dd class=\"option-desc\">Apply changes that will update the code to the next edition. This will not\nupdate the edition in the <code class=\"hljs\">Cargo.toml</code> manifest, which must be updated\nmanually after <code class=\"hljs\">cargo fix --edition</code> has finished.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---edition-idioms\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---edition-idioms\"></a><code class=\"hljs\">--edition-idioms</code></dt>\n<dd class=\"option-desc\">Apply suggestions that will update code to the preferred style for the current\nedition.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---allow-no-vcs\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---allow-no-vcs\"></a><code class=\"hljs\">--allow-no-vcs</code></dt>\n<dd class=\"option-desc\">Fix code even if a VCS was not detected.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---allow-dirty\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---allow-dirty\"></a><code class=\"hljs\">--allow-dirty</code></dt>\n<dd class=\"option-desc\">Fix code even if the working directory has changes.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---allow-staged\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---allow-staged\"></a><code class=\"hljs\">--allow-staged</code></dt>\n<dd class=\"option-desc\">Fix code even if the working directory has staged changes.</dd>\n</dl>\n<h3 id=\"package-selection-6\"><a class=\"header\" href=\"#package-selection-6\">Package Selection</a></h3>\n<p>By default, when no package selection options are given, the packages selected\ndepend on the selected manifest file (based on the current working directory if\n<code class=\"hljs\">--manifest-path</code> is not given). If the manifest is the root of a workspace then\nthe workspaces default members are selected, otherwise only the package defined\nby the manifest will be selected.</p>\n<p>The default members of a workspace can be set explicitly with the\n<code class=\"hljs\">workspace.default-members</code> key in the root manifest. If this is not set, a\nvirtual workspace will include all workspace members (equivalent to passing\n<code class=\"hljs\">--workspace</code>), and a non-virtual workspace will include only the root crate itself.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-fix--p\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix--p\"></a><code class=\"hljs\">-p</code> <em>spec</em>…</dt>\n<dt class=\"option-term\" id=\"option-cargo-fix---package\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---package\"></a><code class=\"hljs\">--package</code> <em>spec</em>…</dt>\n<dd class=\"option-desc\">Fix only the specified packages. See <a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a> for the\nSPEC format. This flag may be specified multiple times and supports common Unix\nglob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell accidentally\nexpanding glob patterns before Cargo handles them, you must use single quotes or\ndouble quotes around each pattern.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---workspace\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---workspace\"></a><code class=\"hljs\">--workspace</code></dt>\n<dd class=\"option-desc\">Fix all members in the workspace.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---all\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---all\"></a><code class=\"hljs\">--all</code></dt>\n<dd class=\"option-desc\">Deprecated alias for <code class=\"hljs\">--workspace</code>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---exclude\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---exclude\"></a><code class=\"hljs\">--exclude</code> <em>SPEC</em>…</dt>\n<dd class=\"option-desc\">Exclude the specified packages. Must be used in conjunction with the\n<code class=\"hljs\">--workspace</code> flag. This flag may be specified multiple times and supports\ncommon Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell\naccidentally expanding glob patterns before Cargo handles them, you must use\nsingle quotes or double quotes around each pattern.</dd>\n</dl>\n<h3 id=\"target-selection-4\"><a class=\"header\" href=\"#target-selection-4\">Target Selection</a></h3>\n<p>When no target selection options are given, <code class=\"hljs\">cargo fix</code> will fix all targets\n(<code class=\"hljs\">--all-targets</code> implied). Binaries are skipped if they have\n<code class=\"hljs\">required-features</code> that are missing.</p>\n<p>Passing target selection flags will fix only the specified\ntargets.</p>\n<p>Note that <code class=\"hljs\">--bin</code>, <code class=\"hljs\">--example</code>, <code class=\"hljs\">--test</code> and <code class=\"hljs\">--bench</code> flags also\nsupport common Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your\nshell accidentally expanding glob patterns before Cargo handles them, you must\nuse single quotes or double quotes around each glob pattern.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-fix---lib\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---lib\"></a><code class=\"hljs\">--lib</code></dt>\n<dd class=\"option-desc\">Fix the package’s library.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---bin\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---bin\"></a><code class=\"hljs\">--bin</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Fix the specified binary. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---bins\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---bins\"></a><code class=\"hljs\">--bins</code></dt>\n<dd class=\"option-desc\">Fix all binary targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---example\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---example\"></a><code class=\"hljs\">--example</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Fix the specified example. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---examples\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---examples\"></a><code class=\"hljs\">--examples</code></dt>\n<dd class=\"option-desc\">Fix all example targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---test\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---test\"></a><code class=\"hljs\">--test</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Fix the specified integration test. This flag may be specified\nmultiple times and supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---tests\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---tests\"></a><code class=\"hljs\">--tests</code></dt>\n<dd class=\"option-desc\">Fix all targets in test mode that have the <code class=\"hljs\">test = true</code> manifest\nflag set. By default this includes the library and binaries built as\nunittests, and integration tests. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nunittest, and once as a dependency for binaries, integration tests, etc.).\nTargets may be enabled or disabled by setting the <code class=\"hljs\">test</code> flag in the\nmanifest settings for the target.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---bench\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---bench\"></a><code class=\"hljs\">--bench</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Fix the specified benchmark. This flag may be specified multiple\ntimes and supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---benches\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---benches\"></a><code class=\"hljs\">--benches</code></dt>\n<dd class=\"option-desc\">Fix all targets in benchmark mode that have the <code class=\"hljs\">bench = true</code>\nmanifest flag set. By default this includes the library and binaries built\nas benchmarks, and bench targets. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nbenchmark, and once as a dependency for binaries, benchmarks, etc.).\nTargets may be enabled or disabled by setting the <code class=\"hljs\">bench</code> flag in the\nmanifest settings for the target.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---all-targets\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---all-targets\"></a><code class=\"hljs\">--all-targets</code></dt>\n<dd class=\"option-desc\">Fix all targets. This is equivalent to specifying <code class=\"hljs\">--lib --bins --tests --benches --examples</code>.</dd>\n</dl>\n<h3 id=\"feature-selection-4\"><a class=\"header\" href=\"#feature-selection-4\">Feature Selection</a></h3>\n<p>The feature flags allow you to control which features are enabled. When no\nfeature options are given, the <code class=\"hljs\">default</code> feature is activated for every\nselected package.</p>\n<p>See <a href=\"commands/../reference/features.html#command-line-feature-options\">the features documentation</a>\nfor more details.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-fix--F\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix--F\"></a><code class=\"hljs\">-F</code> <em>features</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-fix---features\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---features\"></a><code class=\"hljs\">--features</code> <em>features</em></dt>\n<dd class=\"option-desc\">Space or comma separated list of features to activate. Features of workspace\nmembers may be enabled with <code class=\"hljs\">package-name/feature-name</code> syntax. This flag may\nbe specified multiple times, which enables all specified features.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---all-features\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---all-features\"></a><code class=\"hljs\">--all-features</code></dt>\n<dd class=\"option-desc\">Activate all available features of all selected packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---no-default-features\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---no-default-features\"></a><code class=\"hljs\">--no-default-features</code></dt>\n<dd class=\"option-desc\">Do not activate the <code class=\"hljs\">default</code> feature of the selected packages.</dd>\n</dl>\n<h3 id=\"compilation-options-4\"><a class=\"header\" href=\"#compilation-options-4\">Compilation Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-fix---target\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---target\"></a><code class=\"hljs\">--target</code> <em>triple</em></dt>\n<dd class=\"option-desc\">Fix for the given architecture. The default is the host architecture. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code>. Run <code class=\"hljs\">rustc --print target-list</code> for a\nlist of supported targets. This flag may be specified multiple times.<p></p>\n<p>This may also be specified with the <code class=\"hljs\">build.target</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p>\n<p>Note that specifying this flag makes Cargo run in a different mode where the\ntarget artifacts are placed in a separate directory. See the\n<a href=\"commands/../guide/build-cache.html\">build cache</a> documentation for more details.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-fix--r\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix--r\"></a><code class=\"hljs\">-r</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-fix---release\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---release\"></a><code class=\"hljs\">--release</code></dt>\n<dd class=\"option-desc\">Fix optimized artifacts with the <code class=\"hljs\">release</code> profile.\nSee also the <code class=\"hljs\">--profile</code> option for choosing a specific profile by name.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---profile\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---profile\"></a><code class=\"hljs\">--profile</code> <em>name</em></dt>\n<dd class=\"option-desc\">Fix with the given profile.<p></p>\n<p>As a special case, specifying the <code class=\"hljs\">test</code> profile will also enable checking in\ntest mode which will enable checking tests and enable the <code class=\"hljs\">test</code> cfg option.\nSee <a href=\"https://doc.rust-lang.org/rustc/tests/index.html\">rustc tests</a> for more\ndetail.</p>\n<p>See <a href=\"commands/../reference/profiles.html\">the reference</a> for more details on profiles.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---timings=fmts\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---timings=fmts\"></a><code class=\"hljs\">--timings=</code><em>fmts</em></dt>\n<dd class=\"option-desc\">Output information how long each compilation takes, and track concurrency\ninformation over time. Accepts an optional comma-separated list of output\nformats; <code class=\"hljs\">--timings</code> without an argument will default to <code class=\"hljs\">--timings=html</code>.\nSpecifying an output format (rather than the default) is unstable and requires\n<code class=\"hljs\">-Zunstable-options</code>. Valid output formats:<p></p>\n<ul>\n<li><code class=\"hljs\">html</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Write a human-readable file <code class=\"hljs\">cargo-timing.html</code> to the\n<code class=\"hljs\">target/cargo-timings</code> directory with a report of the compilation. Also write\na report to the same directory with a timestamp in the filename if you want\nto look at older runs. HTML output is suitable for human consumption only,\nand does not provide machine-readable timing data.</li>\n<li><code class=\"hljs\">json</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Emit machine-readable JSON\ninformation about timing information.</li>\n</ul></dd>\n</dl>\n<h3 id=\"output-options-4\"><a class=\"header\" href=\"#output-options-4\">Output Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-fix---target-dir\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---target-dir\"></a><code class=\"hljs\">--target-dir</code> <em>directory</em></dt>\n<dd class=\"option-desc\">Directory for all generated artifacts and intermediate files. May also be\nspecified with the <code class=\"hljs\">CARGO_TARGET_DIR</code> environment variable, or the\n<code class=\"hljs\">build.target-dir</code> <a href=\"commands/../reference/config.html\">config value</a>.\nDefaults to <code class=\"hljs\">target</code> in the root of the workspace.</dd>\n</dl>\n<h3 id=\"display-options-7\"><a class=\"header\" href=\"#display-options-7\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-fix--v\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-fix---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix--q\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-fix---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---color\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---message-format\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---message-format\"></a><code class=\"hljs\">--message-format</code> <em>fmt</em></dt>\n<dd class=\"option-desc\">The output format for diagnostic messages. Can be specified multiple times\nand consists of comma-separated values. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">human</code> (default): Display in a human-readable text format. Conflicts with\n<code class=\"hljs\">short</code> and <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">short</code>: Emit shorter, human-readable text messages. Conflicts with <code class=\"hljs\">human</code>\nand <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">json</code>: Emit JSON messages to stdout. See\n<a href=\"commands/../reference/external-tools.html#json-messages\">the reference</a>\nfor more details. Conflicts with <code class=\"hljs\">human</code> and <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-short</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages contains\nthe “short” rendering from rustc. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-rendered-ansi</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages\ncontains embedded ANSI color codes for respecting rustc’s default color\nscheme. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-render-diagnostics</code>: Instruct Cargo to not include rustc diagnostics\nin JSON messages printed, but instead Cargo itself should render the\nJSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others\ncoming from rustc are still emitted. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n</ul></dd>\n</dl>\n<h3 id=\"manifest-options-7\"><a class=\"header\" href=\"#manifest-options-7\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-fix---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---ignore-rust-version\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---ignore-rust-version\"></a><code class=\"hljs\">--ignore-rust-version</code></dt>\n<dd class=\"option-desc\">Ignore <code class=\"hljs\">rust-version</code> specification in packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---locked\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---offline\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-7\"><a class=\"header\" href=\"#common-options-7\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-fix-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---config\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix--C\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-fix--h\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-fix---help\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix--Z\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h3 id=\"miscellaneous-options-4\"><a class=\"header\" href=\"#miscellaneous-options-4\">Miscellaneous Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-fix--j\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix--j\"></a><code class=\"hljs\">-j</code> <em>N</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-fix---jobs\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---jobs\"></a><code class=\"hljs\">--jobs</code> <em>N</em></dt>\n<dd class=\"option-desc\">Number of parallel jobs to run. May also be specified with the\n<code class=\"hljs\">build.jobs</code> <a href=\"commands/../reference/config.html\">config value</a>. Defaults to\nthe number of logical CPUs. If negative, it sets the maximum number of\nparallel jobs to the number of logical CPUs plus provided value. If\na string <code class=\"hljs\">default</code> is provided, it sets the value back to defaults.\nShould not be 0.</dd>\n<dt class=\"option-term\" id=\"option-cargo-fix---keep-going\"><a class=\"option-anchor\" href=\"commands/cargo-fix.html#option-cargo-fix---keep-going\"></a><code class=\"hljs\">--keep-going</code></dt>\n<dd class=\"option-desc\">Build as many crates in the dependency graph as possible, rather than aborting\nthe build on the first one that fails to build.<p></p>\n<p>For example if the current package depends on dependencies <code class=\"hljs\">fails</code> and <code class=\"hljs\">works</code>,\none of which fails to build, <code class=\"hljs\">cargo fix -j1</code> may or may not build the\none that succeeds (depending on which one of the two builds Cargo picked to run\nfirst), whereas <code class=\"hljs\">cargo fix -j1 --keep-going</code> would definitely run both\nbuilds, even if the one run first fails.</p></dd>\n</dl>\n<h2 id=\"environment-7\"><a class=\"header\" href=\"#environment-7\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-7\"><a class=\"header\" href=\"#exit-status-7\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-10\"><a class=\"header\" href=\"#examples-10\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Apply compiler suggestions to the local package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo fix\n</code></pre>\n</li>\n<li>\n<p>Update a package to prepare it for the next edition:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo fix --edition\n</code></pre>\n</li>\n<li>\n<p>Apply suggested idioms for the current edition:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo fix --edition-idioms\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-9\"><a class=\"header\" href=\"#see-also-9\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-check.html\">cargo-check(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-run1\"><a class=\"header\" href=\"#cargo-run1\">cargo-run(1)</a></h1>\n<h2 id=\"name-10\"><a class=\"header\" href=\"#name-10\">NAME</a></h2>\n<p>cargo-run — Run the current package</p>\n<h2 id=\"synopsis-10\"><a class=\"header\" href=\"#synopsis-10\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo run</code> [<em>options</em>] [<code class=\"hljs\">--</code> <em>args</em>]</p>\n<h2 id=\"description-10\"><a class=\"header\" href=\"#description-10\">DESCRIPTION</a></h2>\n<p>Run a binary or example of the local package.</p>\n<p>All the arguments following the two dashes (<code class=\"hljs\">--</code>) are passed to the binary to\nrun. If you’re passing arguments to both Cargo and the binary, the ones after\n<code class=\"hljs\">--</code> go to the binary, the ones before go to Cargo.</p>\n<p>Unlike <a href=\"commands/cargo-test.html\">cargo-test(1)</a> and <a href=\"commands/cargo-bench.html\">cargo-bench(1)</a>, <code class=\"hljs\">cargo run</code> sets the\nworking directory of the binary executed to the current working directory, same\nas if it was executed in the shell directly.</p>\n<h2 id=\"options-9\"><a class=\"header\" href=\"#options-9\">OPTIONS</a></h2>\n<h3 id=\"package-selection-7\"><a class=\"header\" href=\"#package-selection-7\">Package Selection</a></h3>\n<p>By default, the package in the current working directory is selected. The <code class=\"hljs\">-p</code>\nflag can be used to choose a different package in a workspace.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-run--p\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run--p\"></a><code class=\"hljs\">-p</code> <em>spec</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-run---package\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---package\"></a><code class=\"hljs\">--package</code> <em>spec</em></dt>\n<dd class=\"option-desc\">The package to run. See <a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a> for the SPEC\nformat.</dd>\n</dl>\n<h3 id=\"target-selection-5\"><a class=\"header\" href=\"#target-selection-5\">Target Selection</a></h3>\n<p>When no target selection options are given, <code class=\"hljs\">cargo run</code> will run the binary\ntarget. If there are multiple binary targets, you must pass a target flag to\nchoose one. Or, the <code class=\"hljs\">default-run</code> field may be specified in the <code class=\"hljs\">[package]</code>\nsection of <code class=\"hljs\">Cargo.toml</code> to choose the name of the binary to run by default.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-run---bin\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---bin\"></a><code class=\"hljs\">--bin</code> <em>name</em></dt>\n<dd class=\"option-desc\">Run the specified binary.</dd>\n<dt class=\"option-term\" id=\"option-cargo-run---example\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---example\"></a><code class=\"hljs\">--example</code> <em>name</em></dt>\n<dd class=\"option-desc\">Run the specified example.</dd>\n</dl>\n<h3 id=\"feature-selection-5\"><a class=\"header\" href=\"#feature-selection-5\">Feature Selection</a></h3>\n<p>The feature flags allow you to control which features are enabled. When no\nfeature options are given, the <code class=\"hljs\">default</code> feature is activated for every\nselected package.</p>\n<p>See <a href=\"commands/../reference/features.html#command-line-feature-options\">the features documentation</a>\nfor more details.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-run--F\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run--F\"></a><code class=\"hljs\">-F</code> <em>features</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-run---features\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---features\"></a><code class=\"hljs\">--features</code> <em>features</em></dt>\n<dd class=\"option-desc\">Space or comma separated list of features to activate. Features of workspace\nmembers may be enabled with <code class=\"hljs\">package-name/feature-name</code> syntax. This flag may\nbe specified multiple times, which enables all specified features.</dd>\n<dt class=\"option-term\" id=\"option-cargo-run---all-features\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---all-features\"></a><code class=\"hljs\">--all-features</code></dt>\n<dd class=\"option-desc\">Activate all available features of all selected packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-run---no-default-features\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---no-default-features\"></a><code class=\"hljs\">--no-default-features</code></dt>\n<dd class=\"option-desc\">Do not activate the <code class=\"hljs\">default</code> feature of the selected packages.</dd>\n</dl>\n<h3 id=\"compilation-options-5\"><a class=\"header\" href=\"#compilation-options-5\">Compilation Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-run---target\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---target\"></a><code class=\"hljs\">--target</code> <em>triple</em></dt>\n<dd class=\"option-desc\">Run for the given architecture. The default is the host architecture. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code>. Run <code class=\"hljs\">rustc --print target-list</code> for a\nlist of supported targets.<p></p>\n<p>This may also be specified with the <code class=\"hljs\">build.target</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p>\n<p>Note that specifying this flag makes Cargo run in a different mode where the\ntarget artifacts are placed in a separate directory. See the\n<a href=\"commands/../guide/build-cache.html\">build cache</a> documentation for more details.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-run--r\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run--r\"></a><code class=\"hljs\">-r</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-run---release\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---release\"></a><code class=\"hljs\">--release</code></dt>\n<dd class=\"option-desc\">Run optimized artifacts with the <code class=\"hljs\">release</code> profile.\nSee also the <code class=\"hljs\">--profile</code> option for choosing a specific profile by name.</dd>\n<dt class=\"option-term\" id=\"option-cargo-run---profile\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---profile\"></a><code class=\"hljs\">--profile</code> <em>name</em></dt>\n<dd class=\"option-desc\">Run with the given profile.\nSee <a href=\"commands/../reference/profiles.html\">the reference</a> for more details on profiles.</dd>\n<dt class=\"option-term\" id=\"option-cargo-run---timings=fmts\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---timings=fmts\"></a><code class=\"hljs\">--timings=</code><em>fmts</em></dt>\n<dd class=\"option-desc\">Output information how long each compilation takes, and track concurrency\ninformation over time. Accepts an optional comma-separated list of output\nformats; <code class=\"hljs\">--timings</code> without an argument will default to <code class=\"hljs\">--timings=html</code>.\nSpecifying an output format (rather than the default) is unstable and requires\n<code class=\"hljs\">-Zunstable-options</code>. Valid output formats:<p></p>\n<ul>\n<li><code class=\"hljs\">html</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Write a human-readable file <code class=\"hljs\">cargo-timing.html</code> to the\n<code class=\"hljs\">target/cargo-timings</code> directory with a report of the compilation. Also write\na report to the same directory with a timestamp in the filename if you want\nto look at older runs. HTML output is suitable for human consumption only,\nand does not provide machine-readable timing data.</li>\n<li><code class=\"hljs\">json</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Emit machine-readable JSON\ninformation about timing information.</li>\n</ul></dd>\n</dl>\n<h3 id=\"output-options-5\"><a class=\"header\" href=\"#output-options-5\">Output Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-run---target-dir\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---target-dir\"></a><code class=\"hljs\">--target-dir</code> <em>directory</em></dt>\n<dd class=\"option-desc\">Directory for all generated artifacts and intermediate files. May also be\nspecified with the <code class=\"hljs\">CARGO_TARGET_DIR</code> environment variable, or the\n<code class=\"hljs\">build.target-dir</code> <a href=\"commands/../reference/config.html\">config value</a>.\nDefaults to <code class=\"hljs\">target</code> in the root of the workspace.</dd>\n</dl>\n<h3 id=\"display-options-8\"><a class=\"header\" href=\"#display-options-8\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-run--v\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-run---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-run--q\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-run---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-run---color\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-run---message-format\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---message-format\"></a><code class=\"hljs\">--message-format</code> <em>fmt</em></dt>\n<dd class=\"option-desc\">The output format for diagnostic messages. Can be specified multiple times\nand consists of comma-separated values. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">human</code> (default): Display in a human-readable text format. Conflicts with\n<code class=\"hljs\">short</code> and <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">short</code>: Emit shorter, human-readable text messages. Conflicts with <code class=\"hljs\">human</code>\nand <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">json</code>: Emit JSON messages to stdout. See\n<a href=\"commands/../reference/external-tools.html#json-messages\">the reference</a>\nfor more details. Conflicts with <code class=\"hljs\">human</code> and <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-short</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages contains\nthe “short” rendering from rustc. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-rendered-ansi</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages\ncontains embedded ANSI color codes for respecting rustc’s default color\nscheme. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-render-diagnostics</code>: Instruct Cargo to not include rustc diagnostics\nin JSON messages printed, but instead Cargo itself should render the\nJSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others\ncoming from rustc are still emitted. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n</ul></dd>\n</dl>\n<h3 id=\"manifest-options-8\"><a class=\"header\" href=\"#manifest-options-8\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-run---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-run---ignore-rust-version\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---ignore-rust-version\"></a><code class=\"hljs\">--ignore-rust-version</code></dt>\n<dd class=\"option-desc\">Ignore <code class=\"hljs\">rust-version</code> specification in packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-run---locked\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-run---offline\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-run---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-8\"><a class=\"header\" href=\"#common-options-8\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-run-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-run---config\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-run--C\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-run--h\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-run---help\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-run--Z\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h3 id=\"miscellaneous-options-5\"><a class=\"header\" href=\"#miscellaneous-options-5\">Miscellaneous Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-run--j\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run--j\"></a><code class=\"hljs\">-j</code> <em>N</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-run---jobs\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---jobs\"></a><code class=\"hljs\">--jobs</code> <em>N</em></dt>\n<dd class=\"option-desc\">Number of parallel jobs to run. May also be specified with the\n<code class=\"hljs\">build.jobs</code> <a href=\"commands/../reference/config.html\">config value</a>. Defaults to\nthe number of logical CPUs. If negative, it sets the maximum number of\nparallel jobs to the number of logical CPUs plus provided value. If\na string <code class=\"hljs\">default</code> is provided, it sets the value back to defaults.\nShould not be 0.</dd>\n<dt class=\"option-term\" id=\"option-cargo-run---keep-going\"><a class=\"option-anchor\" href=\"commands/cargo-run.html#option-cargo-run---keep-going\"></a><code class=\"hljs\">--keep-going</code></dt>\n<dd class=\"option-desc\">Build as many crates in the dependency graph as possible, rather than aborting\nthe build on the first one that fails to build.<p></p>\n<p>For example if the current package depends on dependencies <code class=\"hljs\">fails</code> and <code class=\"hljs\">works</code>,\none of which fails to build, <code class=\"hljs\">cargo run -j1</code> may or may not build the\none that succeeds (depending on which one of the two builds Cargo picked to run\nfirst), whereas <code class=\"hljs\">cargo run -j1 --keep-going</code> would definitely run both\nbuilds, even if the one run first fails.</p></dd>\n</dl>\n<h2 id=\"environment-8\"><a class=\"header\" href=\"#environment-8\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-8\"><a class=\"header\" href=\"#exit-status-8\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-11\"><a class=\"header\" href=\"#examples-11\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Build the local package and run its main target (assuming only one binary):</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo run\n</code></pre>\n</li>\n<li>\n<p>Run an example with extra arguments:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo run --example exname -- --exoption exarg1 exarg2\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-10\"><a class=\"header\" href=\"#see-also-10\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-build.html\">cargo-build(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-rustc1\"><a class=\"header\" href=\"#cargo-rustc1\">cargo-rustc(1)</a></h1>\n<h2 id=\"name-11\"><a class=\"header\" href=\"#name-11\">NAME</a></h2>\n<p>cargo-rustc — Compile the current package, and pass extra options to the compiler</p>\n<h2 id=\"synopsis-11\"><a class=\"header\" href=\"#synopsis-11\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo rustc</code> [<em>options</em>] [<code class=\"hljs\">--</code> <em>args</em>]</p>\n<h2 id=\"description-11\"><a class=\"header\" href=\"#description-11\">DESCRIPTION</a></h2>\n<p>The specified target for the current package (or package specified by <code class=\"hljs\">-p</code> if\nprovided) will be compiled along with all of its dependencies. The specified\n<em>args</em> will all be passed to the final compiler invocation, not any of the\ndependencies. Note that the compiler will still unconditionally receive\narguments such as <code class=\"hljs\">-L</code>, <code class=\"hljs\">--extern</code>, and <code class=\"hljs\">--crate-type</code>, and the specified\n<em>args</em> will simply be added to the compiler invocation.</p>\n<p>See <a href=\"https://doc.rust-lang.org/rustc/index.html\">https://doc.rust-lang.org/rustc/index.html</a> for documentation on rustc\nflags.</p>\n<p>This command requires that only one target is being compiled when additional\narguments are provided. If more than one target is available for the current\npackage the filters of <code class=\"hljs\">--lib</code>, <code class=\"hljs\">--bin</code>, etc, must be used to select which\ntarget is compiled.</p>\n<p>To pass flags to all compiler processes spawned by Cargo, use the <code class=\"hljs\">RUSTFLAGS</code>\n<a href=\"commands/../reference/environment-variables.html\">environment variable</a> or the\n<code class=\"hljs\">build.rustflags</code> <a href=\"commands/../reference/config.html\">config value</a>.</p>\n<h2 id=\"options-10\"><a class=\"header\" href=\"#options-10\">OPTIONS</a></h2>\n<h3 id=\"package-selection-8\"><a class=\"header\" href=\"#package-selection-8\">Package Selection</a></h3>\n<p>By default, the package in the current working directory is selected. The <code class=\"hljs\">-p</code>\nflag can be used to choose a different package in a workspace.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustc--p\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc--p\"></a><code class=\"hljs\">-p</code> <em>spec</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-rustc---package\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---package\"></a><code class=\"hljs\">--package</code> <em>spec</em></dt>\n<dd class=\"option-desc\">The package to build. See <a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a> for the SPEC\nformat.</dd>\n</dl>\n<h3 id=\"target-selection-6\"><a class=\"header\" href=\"#target-selection-6\">Target Selection</a></h3>\n<p>When no target selection options are given, <code class=\"hljs\">cargo rustc</code> will build all\nbinary and library targets of the selected package.</p>\n<p>Binary targets are automatically built if there is an integration test or\nbenchmark being selected to build. This allows an integration\ntest to execute the binary to exercise and test its behavior.\nThe <code class=\"hljs\">CARGO_BIN_EXE_&lt;name&gt;</code>\n<a href=\"commands/../reference/environment-variables.html#environment-variables-cargo-sets-for-crates\">environment variable</a>\nis set when the integration test is built so that it can use the\n<a href=\"https://doc.rust-lang.org/std/macro.env.html\"><code class=\"hljs\">env</code> macro</a> to locate the\nexecutable.</p>\n<p>Passing target selection flags will build only the specified\ntargets.</p>\n<p>Note that <code class=\"hljs\">--bin</code>, <code class=\"hljs\">--example</code>, <code class=\"hljs\">--test</code> and <code class=\"hljs\">--bench</code> flags also\nsupport common Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your\nshell accidentally expanding glob patterns before Cargo handles them, you must\nuse single quotes or double quotes around each glob pattern.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustc---lib\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---lib\"></a><code class=\"hljs\">--lib</code></dt>\n<dd class=\"option-desc\">Build the package’s library.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---bin\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---bin\"></a><code class=\"hljs\">--bin</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Build the specified binary. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---bins\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---bins\"></a><code class=\"hljs\">--bins</code></dt>\n<dd class=\"option-desc\">Build all binary targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---example\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---example\"></a><code class=\"hljs\">--example</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Build the specified example. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---examples\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---examples\"></a><code class=\"hljs\">--examples</code></dt>\n<dd class=\"option-desc\">Build all example targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---test\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---test\"></a><code class=\"hljs\">--test</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Build the specified integration test. This flag may be specified\nmultiple times and supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---tests\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---tests\"></a><code class=\"hljs\">--tests</code></dt>\n<dd class=\"option-desc\">Build all targets in test mode that have the <code class=\"hljs\">test = true</code> manifest\nflag set. By default this includes the library and binaries built as\nunittests, and integration tests. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nunittest, and once as a dependency for binaries, integration tests, etc.).\nTargets may be enabled or disabled by setting the <code class=\"hljs\">test</code> flag in the\nmanifest settings for the target.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---bench\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---bench\"></a><code class=\"hljs\">--bench</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Build the specified benchmark. This flag may be specified multiple\ntimes and supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---benches\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---benches\"></a><code class=\"hljs\">--benches</code></dt>\n<dd class=\"option-desc\">Build all targets in benchmark mode that have the <code class=\"hljs\">bench = true</code>\nmanifest flag set. By default this includes the library and binaries built\nas benchmarks, and bench targets. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nbenchmark, and once as a dependency for binaries, benchmarks, etc.).\nTargets may be enabled or disabled by setting the <code class=\"hljs\">bench</code> flag in the\nmanifest settings for the target.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---all-targets\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---all-targets\"></a><code class=\"hljs\">--all-targets</code></dt>\n<dd class=\"option-desc\">Build all targets. This is equivalent to specifying <code class=\"hljs\">--lib --bins --tests --benches --examples</code>.</dd>\n</dl>\n<h3 id=\"feature-selection-6\"><a class=\"header\" href=\"#feature-selection-6\">Feature Selection</a></h3>\n<p>The feature flags allow you to control which features are enabled. When no\nfeature options are given, the <code class=\"hljs\">default</code> feature is activated for every\nselected package.</p>\n<p>See <a href=\"commands/../reference/features.html#command-line-feature-options\">the features documentation</a>\nfor more details.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustc--F\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc--F\"></a><code class=\"hljs\">-F</code> <em>features</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-rustc---features\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---features\"></a><code class=\"hljs\">--features</code> <em>features</em></dt>\n<dd class=\"option-desc\">Space or comma separated list of features to activate. Features of workspace\nmembers may be enabled with <code class=\"hljs\">package-name/feature-name</code> syntax. This flag may\nbe specified multiple times, which enables all specified features.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---all-features\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---all-features\"></a><code class=\"hljs\">--all-features</code></dt>\n<dd class=\"option-desc\">Activate all available features of all selected packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---no-default-features\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---no-default-features\"></a><code class=\"hljs\">--no-default-features</code></dt>\n<dd class=\"option-desc\">Do not activate the <code class=\"hljs\">default</code> feature of the selected packages.</dd>\n</dl>\n<h3 id=\"compilation-options-6\"><a class=\"header\" href=\"#compilation-options-6\">Compilation Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustc---target\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---target\"></a><code class=\"hljs\">--target</code> <em>triple</em></dt>\n<dd class=\"option-desc\">Build for the given architecture. The default is the host architecture. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code>. Run <code class=\"hljs\">rustc --print target-list</code> for a\nlist of supported targets. This flag may be specified multiple times.<p></p>\n<p>This may also be specified with the <code class=\"hljs\">build.target</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p>\n<p>Note that specifying this flag makes Cargo run in a different mode where the\ntarget artifacts are placed in a separate directory. See the\n<a href=\"commands/../guide/build-cache.html\">build cache</a> documentation for more details.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc--r\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc--r\"></a><code class=\"hljs\">-r</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-rustc---release\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---release\"></a><code class=\"hljs\">--release</code></dt>\n<dd class=\"option-desc\">Build optimized artifacts with the <code class=\"hljs\">release</code> profile.\nSee also the <code class=\"hljs\">--profile</code> option for choosing a specific profile by name.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---profile\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---profile\"></a><code class=\"hljs\">--profile</code> <em>name</em></dt>\n<dd class=\"option-desc\">Build with the given profile.<p></p>\n<p>The <code class=\"hljs\">rustc</code> subcommand will treat the following named profiles with special behaviors:</p>\n<ul>\n<li><code class=\"hljs\">check</code> — Builds in the same way as the <a href=\"commands/cargo-check.html\">cargo-check(1)</a> command with\nthe <code class=\"hljs\">dev</code> profile.</li>\n<li><code class=\"hljs\">test</code> — Builds in the same way as the <a href=\"commands/cargo-test.html\">cargo-test(1)</a> command,\nenabling building in test mode which will enable tests and enable the <code class=\"hljs\">test</code>\ncfg option. See <a href=\"https://doc.rust-lang.org/rustc/tests/index.html\">rustc\ntests</a> for more detail.</li>\n<li><code class=\"hljs\">bench</code> — Builds in the same was as the <a href=\"commands/cargo-bench.html\">cargo-bench(1)</a> command,\nsimilar to the <code class=\"hljs\">test</code> profile.</li>\n</ul>\n<p>See <a href=\"commands/../reference/profiles.html\">the reference</a> for more details on profiles.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---timings=fmts\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---timings=fmts\"></a><code class=\"hljs\">--timings=</code><em>fmts</em></dt>\n<dd class=\"option-desc\">Output information how long each compilation takes, and track concurrency\ninformation over time. Accepts an optional comma-separated list of output\nformats; <code class=\"hljs\">--timings</code> without an argument will default to <code class=\"hljs\">--timings=html</code>.\nSpecifying an output format (rather than the default) is unstable and requires\n<code class=\"hljs\">-Zunstable-options</code>. Valid output formats:<p></p>\n<ul>\n<li><code class=\"hljs\">html</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Write a human-readable file <code class=\"hljs\">cargo-timing.html</code> to the\n<code class=\"hljs\">target/cargo-timings</code> directory with a report of the compilation. Also write\na report to the same directory with a timestamp in the filename if you want\nto look at older runs. HTML output is suitable for human consumption only,\nand does not provide machine-readable timing data.</li>\n<li><code class=\"hljs\">json</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Emit machine-readable JSON\ninformation about timing information.</li>\n</ul></dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---crate-type\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---crate-type\"></a><code class=\"hljs\">--crate-type</code> <em>crate-type</em></dt>\n<dd class=\"option-desc\">Build for the given crate type. This flag accepts a comma-separated list of\n1 or more crate types, of which the allowed values are the same as <code class=\"hljs\">crate-type</code>\nfield in the manifest for configuring a Cargo target. See\n<a href=\"commands/../reference/cargo-targets.html#the-crate-type-field\"><code class=\"hljs\">crate-type</code> field</a>\nfor possible values.<p></p>\n<p>If the manifest contains a list, and <code class=\"hljs\">--crate-type</code> is provided,\nthe command-line argument value will override what is in the manifest.</p>\n<p>This flag only works when building a <code class=\"hljs\">lib</code> or <code class=\"hljs\">example</code> library target.</p></dd>\n</dl>\n<h3 id=\"output-options-6\"><a class=\"header\" href=\"#output-options-6\">Output Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustc---target-dir\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---target-dir\"></a><code class=\"hljs\">--target-dir</code> <em>directory</em></dt>\n<dd class=\"option-desc\">Directory for all generated artifacts and intermediate files. May also be\nspecified with the <code class=\"hljs\">CARGO_TARGET_DIR</code> environment variable, or the\n<code class=\"hljs\">build.target-dir</code> <a href=\"commands/../reference/config.html\">config value</a>.\nDefaults to <code class=\"hljs\">target</code> in the root of the workspace.</dd>\n</dl>\n<h3 id=\"display-options-9\"><a class=\"header\" href=\"#display-options-9\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustc--v\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-rustc---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc--q\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-rustc---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---color\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---message-format\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---message-format\"></a><code class=\"hljs\">--message-format</code> <em>fmt</em></dt>\n<dd class=\"option-desc\">The output format for diagnostic messages. Can be specified multiple times\nand consists of comma-separated values. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">human</code> (default): Display in a human-readable text format. Conflicts with\n<code class=\"hljs\">short</code> and <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">short</code>: Emit shorter, human-readable text messages. Conflicts with <code class=\"hljs\">human</code>\nand <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">json</code>: Emit JSON messages to stdout. See\n<a href=\"commands/../reference/external-tools.html#json-messages\">the reference</a>\nfor more details. Conflicts with <code class=\"hljs\">human</code> and <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-short</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages contains\nthe “short” rendering from rustc. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-rendered-ansi</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages\ncontains embedded ANSI color codes for respecting rustc’s default color\nscheme. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-render-diagnostics</code>: Instruct Cargo to not include rustc diagnostics\nin JSON messages printed, but instead Cargo itself should render the\nJSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others\ncoming from rustc are still emitted. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n</ul></dd>\n</dl>\n<h3 id=\"manifest-options-9\"><a class=\"header\" href=\"#manifest-options-9\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustc---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---ignore-rust-version\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---ignore-rust-version\"></a><code class=\"hljs\">--ignore-rust-version</code></dt>\n<dd class=\"option-desc\">Ignore <code class=\"hljs\">rust-version</code> specification in packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---locked\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---offline\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-9\"><a class=\"header\" href=\"#common-options-9\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustc-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---config\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc--C\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc--h\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-rustc---help\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc--Z\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h3 id=\"miscellaneous-options-6\"><a class=\"header\" href=\"#miscellaneous-options-6\">Miscellaneous Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustc--j\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc--j\"></a><code class=\"hljs\">-j</code> <em>N</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-rustc---jobs\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---jobs\"></a><code class=\"hljs\">--jobs</code> <em>N</em></dt>\n<dd class=\"option-desc\">Number of parallel jobs to run. May also be specified with the\n<code class=\"hljs\">build.jobs</code> <a href=\"commands/../reference/config.html\">config value</a>. Defaults to\nthe number of logical CPUs. If negative, it sets the maximum number of\nparallel jobs to the number of logical CPUs plus provided value. If\na string <code class=\"hljs\">default</code> is provided, it sets the value back to defaults.\nShould not be 0.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---keep-going\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---keep-going\"></a><code class=\"hljs\">--keep-going</code></dt>\n<dd class=\"option-desc\">Build as many crates in the dependency graph as possible, rather than aborting\nthe build on the first one that fails to build.<p></p>\n<p>For example if the current package depends on dependencies <code class=\"hljs\">fails</code> and <code class=\"hljs\">works</code>,\none of which fails to build, <code class=\"hljs\">cargo rustc -j1</code> may or may not build the\none that succeeds (depending on which one of the two builds Cargo picked to run\nfirst), whereas <code class=\"hljs\">cargo rustc -j1 --keep-going</code> would definitely run both\nbuilds, even if the one run first fails.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-rustc---future-incompat-report\"><a class=\"option-anchor\" href=\"commands/cargo-rustc.html#option-cargo-rustc---future-incompat-report\"></a><code class=\"hljs\">--future-incompat-report</code></dt>\n<dd class=\"option-desc\">Displays a future-incompat report for any future-incompatible warnings\nproduced during execution of this command<p></p>\n<p>See <a href=\"commands/cargo-report.html\">cargo-report(1)</a></p></dd>\n</dl>\n<h2 id=\"environment-9\"><a class=\"header\" href=\"#environment-9\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-9\"><a class=\"header\" href=\"#exit-status-9\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-12\"><a class=\"header\" href=\"#examples-12\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Check if your package (not including dependencies) uses unsafe code:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo rustc --lib -- -D unsafe-code\n</code></pre>\n</li>\n<li>\n<p>Try an experimental flag on the nightly compiler, such as this which prints\nthe size of every type:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo rustc --lib -- -Z print-type-sizes\n</code></pre>\n</li>\n<li>\n<p>Override <code class=\"hljs\">crate-type</code> field in Cargo.toml with command-line option:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo rustc --lib --crate-type lib,cdylib\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-11\"><a class=\"header\" href=\"#see-also-11\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-build.html\">cargo-build(1)</a>, <a href=\"https://doc.rust-lang.org/rustc/index.html\">rustc(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-rustdoc1\"><a class=\"header\" href=\"#cargo-rustdoc1\">cargo-rustdoc(1)</a></h1>\n<h2 id=\"name-12\"><a class=\"header\" href=\"#name-12\">NAME</a></h2>\n<p>cargo-rustdoc — Build a package’s documentation, using specified custom flags</p>\n<h2 id=\"synopsis-12\"><a class=\"header\" href=\"#synopsis-12\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo rustdoc</code> [<em>options</em>] [<code class=\"hljs\">--</code> <em>args</em>]</p>\n<h2 id=\"description-12\"><a class=\"header\" href=\"#description-12\">DESCRIPTION</a></h2>\n<p>The specified target for the current package (or package specified by <code class=\"hljs\">-p</code> if\nprovided) will be documented with the specified <em>args</em> being passed to the\nfinal rustdoc invocation. Dependencies will not be documented as part of this\ncommand. Note that rustdoc will still unconditionally receive arguments such\nas <code class=\"hljs\">-L</code>, <code class=\"hljs\">--extern</code>, and <code class=\"hljs\">--crate-type</code>, and the specified <em>args</em> will simply\nbe added to the rustdoc invocation.</p>\n<p>See <a href=\"https://doc.rust-lang.org/rustdoc/index.html\">https://doc.rust-lang.org/rustdoc/index.html</a> for documentation on rustdoc\nflags.</p>\n<p>This command requires that only one target is being compiled when additional\narguments are provided. If more than one target is available for the current\npackage the filters of <code class=\"hljs\">--lib</code>, <code class=\"hljs\">--bin</code>, etc, must be used to select which\ntarget is compiled.</p>\n<p>To pass flags to all rustdoc processes spawned by Cargo, use the\n<code class=\"hljs\">RUSTDOCFLAGS</code> <a href=\"commands/../reference/environment-variables.html\">environment variable</a>\nor the <code class=\"hljs\">build.rustdocflags</code> <a href=\"commands/../reference/config.html\">config value</a>.</p>\n<h2 id=\"options-11\"><a class=\"header\" href=\"#options-11\">OPTIONS</a></h2>\n<h3 id=\"documentation-options-1\"><a class=\"header\" href=\"#documentation-options-1\">Documentation Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---open\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---open\"></a><code class=\"hljs\">--open</code></dt>\n<dd class=\"option-desc\">Open the docs in a browser after building them. This will use your default\nbrowser unless you define another one in the <code class=\"hljs\">BROWSER</code> environment variable\nor use the <a href=\"commands/../reference/config.html#docbrowser\"><code class=\"hljs\">doc.browser</code></a> configuration\noption.</dd>\n</dl>\n<h3 id=\"package-selection-9\"><a class=\"header\" href=\"#package-selection-9\">Package Selection</a></h3>\n<p>By default, the package in the current working directory is selected. The <code class=\"hljs\">-p</code>\nflag can be used to choose a different package in a workspace.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc--p\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc--p\"></a><code class=\"hljs\">-p</code> <em>spec</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---package\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---package\"></a><code class=\"hljs\">--package</code> <em>spec</em></dt>\n<dd class=\"option-desc\">The package to document. See <a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a> for the SPEC\nformat.</dd>\n</dl>\n<h3 id=\"target-selection-7\"><a class=\"header\" href=\"#target-selection-7\">Target Selection</a></h3>\n<p>When no target selection options are given, <code class=\"hljs\">cargo rustdoc</code> will document all\nbinary and library targets of the selected package. The binary will be skipped\nif its name is the same as the lib target. Binaries are skipped if they have\n<code class=\"hljs\">required-features</code> that are missing.</p>\n<p>Passing target selection flags will document only the specified\ntargets.</p>\n<p>Note that <code class=\"hljs\">--bin</code>, <code class=\"hljs\">--example</code>, <code class=\"hljs\">--test</code> and <code class=\"hljs\">--bench</code> flags also\nsupport common Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your\nshell accidentally expanding glob patterns before Cargo handles them, you must\nuse single quotes or double quotes around each glob pattern.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---lib\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---lib\"></a><code class=\"hljs\">--lib</code></dt>\n<dd class=\"option-desc\">Document the package’s library.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---bin\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---bin\"></a><code class=\"hljs\">--bin</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Document the specified binary. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---bins\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---bins\"></a><code class=\"hljs\">--bins</code></dt>\n<dd class=\"option-desc\">Document all binary targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---example\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---example\"></a><code class=\"hljs\">--example</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Document the specified example. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---examples\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---examples\"></a><code class=\"hljs\">--examples</code></dt>\n<dd class=\"option-desc\">Document all example targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---test\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---test\"></a><code class=\"hljs\">--test</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Document the specified integration test. This flag may be specified\nmultiple times and supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---tests\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---tests\"></a><code class=\"hljs\">--tests</code></dt>\n<dd class=\"option-desc\">Document all targets in test mode that have the <code class=\"hljs\">test = true</code> manifest\nflag set. By default this includes the library and binaries built as\nunittests, and integration tests. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nunittest, and once as a dependency for binaries, integration tests, etc.).\nTargets may be enabled or disabled by setting the <code class=\"hljs\">test</code> flag in the\nmanifest settings for the target.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---bench\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---bench\"></a><code class=\"hljs\">--bench</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Document the specified benchmark. This flag may be specified multiple\ntimes and supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---benches\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---benches\"></a><code class=\"hljs\">--benches</code></dt>\n<dd class=\"option-desc\">Document all targets in benchmark mode that have the <code class=\"hljs\">bench = true</code>\nmanifest flag set. By default this includes the library and binaries built\nas benchmarks, and bench targets. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nbenchmark, and once as a dependency for binaries, benchmarks, etc.).\nTargets may be enabled or disabled by setting the <code class=\"hljs\">bench</code> flag in the\nmanifest settings for the target.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---all-targets\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---all-targets\"></a><code class=\"hljs\">--all-targets</code></dt>\n<dd class=\"option-desc\">Document all targets. This is equivalent to specifying <code class=\"hljs\">--lib --bins --tests --benches --examples</code>.</dd>\n</dl>\n<h3 id=\"feature-selection-7\"><a class=\"header\" href=\"#feature-selection-7\">Feature Selection</a></h3>\n<p>The feature flags allow you to control which features are enabled. When no\nfeature options are given, the <code class=\"hljs\">default</code> feature is activated for every\nselected package.</p>\n<p>See <a href=\"commands/../reference/features.html#command-line-feature-options\">the features documentation</a>\nfor more details.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc--F\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc--F\"></a><code class=\"hljs\">-F</code> <em>features</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---features\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---features\"></a><code class=\"hljs\">--features</code> <em>features</em></dt>\n<dd class=\"option-desc\">Space or comma separated list of features to activate. Features of workspace\nmembers may be enabled with <code class=\"hljs\">package-name/feature-name</code> syntax. This flag may\nbe specified multiple times, which enables all specified features.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---all-features\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---all-features\"></a><code class=\"hljs\">--all-features</code></dt>\n<dd class=\"option-desc\">Activate all available features of all selected packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---no-default-features\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---no-default-features\"></a><code class=\"hljs\">--no-default-features</code></dt>\n<dd class=\"option-desc\">Do not activate the <code class=\"hljs\">default</code> feature of the selected packages.</dd>\n</dl>\n<h3 id=\"compilation-options-7\"><a class=\"header\" href=\"#compilation-options-7\">Compilation Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---target\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---target\"></a><code class=\"hljs\">--target</code> <em>triple</em></dt>\n<dd class=\"option-desc\">Document for the given architecture. The default is the host architecture. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code>. Run <code class=\"hljs\">rustc --print target-list</code> for a\nlist of supported targets. This flag may be specified multiple times.<p></p>\n<p>This may also be specified with the <code class=\"hljs\">build.target</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p>\n<p>Note that specifying this flag makes Cargo run in a different mode where the\ntarget artifacts are placed in a separate directory. See the\n<a href=\"commands/../guide/build-cache.html\">build cache</a> documentation for more details.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc--r\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc--r\"></a><code class=\"hljs\">-r</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---release\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---release\"></a><code class=\"hljs\">--release</code></dt>\n<dd class=\"option-desc\">Document optimized artifacts with the <code class=\"hljs\">release</code> profile.\nSee also the <code class=\"hljs\">--profile</code> option for choosing a specific profile by name.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---profile\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---profile\"></a><code class=\"hljs\">--profile</code> <em>name</em></dt>\n<dd class=\"option-desc\">Document with the given profile.\nSee <a href=\"commands/../reference/profiles.html\">the reference</a> for more details on profiles.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---timings=fmts\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---timings=fmts\"></a><code class=\"hljs\">--timings=</code><em>fmts</em></dt>\n<dd class=\"option-desc\">Output information how long each compilation takes, and track concurrency\ninformation over time. Accepts an optional comma-separated list of output\nformats; <code class=\"hljs\">--timings</code> without an argument will default to <code class=\"hljs\">--timings=html</code>.\nSpecifying an output format (rather than the default) is unstable and requires\n<code class=\"hljs\">-Zunstable-options</code>. Valid output formats:<p></p>\n<ul>\n<li><code class=\"hljs\">html</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Write a human-readable file <code class=\"hljs\">cargo-timing.html</code> to the\n<code class=\"hljs\">target/cargo-timings</code> directory with a report of the compilation. Also write\na report to the same directory with a timestamp in the filename if you want\nto look at older runs. HTML output is suitable for human consumption only,\nand does not provide machine-readable timing data.</li>\n<li><code class=\"hljs\">json</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Emit machine-readable JSON\ninformation about timing information.</li>\n</ul></dd>\n</dl>\n<h3 id=\"output-options-7\"><a class=\"header\" href=\"#output-options-7\">Output Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---target-dir\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---target-dir\"></a><code class=\"hljs\">--target-dir</code> <em>directory</em></dt>\n<dd class=\"option-desc\">Directory for all generated artifacts and intermediate files. May also be\nspecified with the <code class=\"hljs\">CARGO_TARGET_DIR</code> environment variable, or the\n<code class=\"hljs\">build.target-dir</code> <a href=\"commands/../reference/config.html\">config value</a>.\nDefaults to <code class=\"hljs\">target</code> in the root of the workspace.</dd>\n</dl>\n<h3 id=\"display-options-10\"><a class=\"header\" href=\"#display-options-10\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc--v\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc--q\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---color\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---message-format\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---message-format\"></a><code class=\"hljs\">--message-format</code> <em>fmt</em></dt>\n<dd class=\"option-desc\">The output format for diagnostic messages. Can be specified multiple times\nand consists of comma-separated values. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">human</code> (default): Display in a human-readable text format. Conflicts with\n<code class=\"hljs\">short</code> and <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">short</code>: Emit shorter, human-readable text messages. Conflicts with <code class=\"hljs\">human</code>\nand <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">json</code>: Emit JSON messages to stdout. See\n<a href=\"commands/../reference/external-tools.html#json-messages\">the reference</a>\nfor more details. Conflicts with <code class=\"hljs\">human</code> and <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-short</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages contains\nthe “short” rendering from rustc. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-rendered-ansi</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages\ncontains embedded ANSI color codes for respecting rustc’s default color\nscheme. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-render-diagnostics</code>: Instruct Cargo to not include rustc diagnostics\nin JSON messages printed, but instead Cargo itself should render the\nJSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others\ncoming from rustc are still emitted. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n</ul></dd>\n</dl>\n<h3 id=\"manifest-options-10\"><a class=\"header\" href=\"#manifest-options-10\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---ignore-rust-version\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---ignore-rust-version\"></a><code class=\"hljs\">--ignore-rust-version</code></dt>\n<dd class=\"option-desc\">Ignore <code class=\"hljs\">rust-version</code> specification in packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---locked\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---offline\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-10\"><a class=\"header\" href=\"#common-options-10\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---config\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc--C\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc--h\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---help\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc--Z\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h3 id=\"miscellaneous-options-7\"><a class=\"header\" href=\"#miscellaneous-options-7\">Miscellaneous Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc--j\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc--j\"></a><code class=\"hljs\">-j</code> <em>N</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---jobs\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---jobs\"></a><code class=\"hljs\">--jobs</code> <em>N</em></dt>\n<dd class=\"option-desc\">Number of parallel jobs to run. May also be specified with the\n<code class=\"hljs\">build.jobs</code> <a href=\"commands/../reference/config.html\">config value</a>. Defaults to\nthe number of logical CPUs. If negative, it sets the maximum number of\nparallel jobs to the number of logical CPUs plus provided value. If\na string <code class=\"hljs\">default</code> is provided, it sets the value back to defaults.\nShould not be 0.</dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---keep-going\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---keep-going\"></a><code class=\"hljs\">--keep-going</code></dt>\n<dd class=\"option-desc\">Build as many crates in the dependency graph as possible, rather than aborting\nthe build on the first one that fails to build.<p></p>\n<p>For example if the current package depends on dependencies <code class=\"hljs\">fails</code> and <code class=\"hljs\">works</code>,\none of which fails to build, <code class=\"hljs\">cargo rustdoc -j1</code> may or may not build the\none that succeeds (depending on which one of the two builds Cargo picked to run\nfirst), whereas <code class=\"hljs\">cargo rustdoc -j1 --keep-going</code> would definitely run both\nbuilds, even if the one run first fails.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-rustdoc---output-format\"><a class=\"option-anchor\" href=\"commands/cargo-rustdoc.html#option-cargo-rustdoc---output-format\"></a><code class=\"hljs\">--output-format</code></dt>\n<dd class=\"option-desc\">The output type for the documentation emitted. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">html</code> (default): Emit the documentation in HTML format.</li>\n<li><code class=\"hljs\">json</code>: Emit the documentation in the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc_json_types\">experimental JSON format</a>.</li>\n</ul>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly channel</a>\nand requires the <code class=\"hljs\">-Z unstable-options</code> flag to enable.</p></dd>\n</dl>\n<h2 id=\"environment-10\"><a class=\"header\" href=\"#environment-10\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-10\"><a class=\"header\" href=\"#exit-status-10\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-13\"><a class=\"header\" href=\"#examples-13\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Build documentation with custom CSS included from a given file:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo rustdoc --lib -- --extend-css extra.css\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-12\"><a class=\"header\" href=\"#see-also-12\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-doc.html\">cargo-doc(1)</a>, <a href=\"https://doc.rust-lang.org/rustdoc/index.html\">rustdoc(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-test1\"><a class=\"header\" href=\"#cargo-test1\">cargo-test(1)</a></h1>\n<h2 id=\"name-13\"><a class=\"header\" href=\"#name-13\">NAME</a></h2>\n<p>cargo-test — Execute unit and integration tests of a package</p>\n<h2 id=\"synopsis-13\"><a class=\"header\" href=\"#synopsis-13\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo test</code> [<em>options</em>] [<em>testname</em>] [<code class=\"hljs\">--</code> <em>test-options</em>]</p>\n<h2 id=\"description-13\"><a class=\"header\" href=\"#description-13\">DESCRIPTION</a></h2>\n<p>Compile and execute unit, integration, and documentation tests.</p>\n<p>The test filtering argument <code class=\"hljs\">TESTNAME</code> and all the arguments following the two\ndashes (<code class=\"hljs\">--</code>) are passed to the test binaries and thus to <em>libtest</em> (rustc’s\nbuilt in unit-test and micro-benchmarking framework).  If you’re passing\narguments to both Cargo and the binary, the ones after <code class=\"hljs\">--</code> go to the binary,\nthe ones before go to Cargo.  For details about libtest’s arguments see the\noutput of <code class=\"hljs\">cargo test -- --help</code> and check out the rustc book’s chapter on\nhow tests work at <a href=\"https://doc.rust-lang.org/rustc/tests/index.html\">https://doc.rust-lang.org/rustc/tests/index.html</a>.</p>\n<p>As an example, this will filter for tests with <code class=\"hljs\">foo</code> in their name and run them\non 3 threads in parallel:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo test foo -- --test-threads 3\n</code></pre>\n<p>Tests are built with the <code class=\"hljs\">--test</code> option to <code class=\"hljs\">rustc</code> which creates a special\nexecutable by linking your code with libtest. The executable automatically\nruns all functions annotated with the <code class=\"hljs\">#[test]</code> attribute in multiple threads.\n<code class=\"hljs\">#[bench]</code> annotated functions will also be run with one iteration to verify\nthat they are functional.</p>\n<p>If the package contains multiple test targets, each target compiles to a\nspecial executable as aforementioned, and then is run serially.</p>\n<p>The libtest harness may be disabled by setting <code class=\"hljs\">harness = false</code> in the target\nmanifest settings, in which case your code will need to provide its own <code class=\"hljs\">main</code>\nfunction to handle running tests.</p>\n<h3 id=\"documentation-tests\"><a class=\"header\" href=\"#documentation-tests\">Documentation tests</a></h3>\n<p>Documentation tests are also run by default, which is handled by <code class=\"hljs\">rustdoc</code>. It\nextracts code samples from documentation comments of the library target, and\nthen executes them.</p>\n<p>Different from normal test targets, each code block compiles to a doctest\nexecutable on the fly with <code class=\"hljs\">rustc</code>. These executables run in parallel in\nseparate processes. The compilation of a code block is in fact a part of test\nfunction controlled by libtest, so some options such as <code class=\"hljs\">--jobs</code> might not\ntake effect. Note that this execution model of doctests is not guaranteed\nand may change in the future; beware of depending on it.</p>\n<p>See the <a href=\"https://doc.rust-lang.org/rustdoc/\">rustdoc book</a> for more information\non writing doc tests.</p>\n<h3 id=\"working-directory-of-tests\"><a class=\"header\" href=\"#working-directory-of-tests\">Working directory of tests</a></h3>\n<p>The working directory when running each unit and integration test is set to the\nroot directory of the package the test belongs to.\nSetting the working directory of tests to the package’s root directory makes it\npossible for tests to reliably access the package’s files using relative paths,\nregardless from where <code class=\"hljs\">cargo test</code> was executed from.</p>\n<p>For documentation tests, the working directory when invoking <code class=\"hljs\">rustdoc</code> is set to\nthe workspace root directory, and is also the directory <code class=\"hljs\">rustdoc</code> uses as the\ncompilation directory of each documentation test.\nThe working directory when running each documentation test is set to the root\ndirectory of the package the test belongs to, and is controlled via <code class=\"hljs\">rustdoc</code>’s\n<code class=\"hljs\">--test-run-directory</code> option.</p>\n<h2 id=\"options-12\"><a class=\"header\" href=\"#options-12\">OPTIONS</a></h2>\n<h3 id=\"test-options\"><a class=\"header\" href=\"#test-options\">Test Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test---no-run\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---no-run\"></a><code class=\"hljs\">--no-run</code></dt>\n<dd class=\"option-desc\">Compile, but don’t run tests.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---no-fail-fast\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---no-fail-fast\"></a><code class=\"hljs\">--no-fail-fast</code></dt>\n<dd class=\"option-desc\">Run all tests regardless of failure. Without this flag, Cargo will exit\nafter the first executable fails. The Rust test harness will run all tests\nwithin the executable to completion, this flag only applies to the executable\nas a whole.</dd>\n</dl>\n<h3 id=\"package-selection-10\"><a class=\"header\" href=\"#package-selection-10\">Package Selection</a></h3>\n<p>By default, when no package selection options are given, the packages selected\ndepend on the selected manifest file (based on the current working directory if\n<code class=\"hljs\">--manifest-path</code> is not given). If the manifest is the root of a workspace then\nthe workspaces default members are selected, otherwise only the package defined\nby the manifest will be selected.</p>\n<p>The default members of a workspace can be set explicitly with the\n<code class=\"hljs\">workspace.default-members</code> key in the root manifest. If this is not set, a\nvirtual workspace will include all workspace members (equivalent to passing\n<code class=\"hljs\">--workspace</code>), and a non-virtual workspace will include only the root crate itself.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test--p\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test--p\"></a><code class=\"hljs\">-p</code> <em>spec</em>…</dt>\n<dt class=\"option-term\" id=\"option-cargo-test---package\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---package\"></a><code class=\"hljs\">--package</code> <em>spec</em>…</dt>\n<dd class=\"option-desc\">Test only the specified packages. See <a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a> for the\nSPEC format. This flag may be specified multiple times and supports common Unix\nglob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell accidentally\nexpanding glob patterns before Cargo handles them, you must use single quotes or\ndouble quotes around each pattern.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---workspace\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---workspace\"></a><code class=\"hljs\">--workspace</code></dt>\n<dd class=\"option-desc\">Test all members in the workspace.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---all\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---all\"></a><code class=\"hljs\">--all</code></dt>\n<dd class=\"option-desc\">Deprecated alias for <code class=\"hljs\">--workspace</code>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---exclude\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---exclude\"></a><code class=\"hljs\">--exclude</code> <em>SPEC</em>…</dt>\n<dd class=\"option-desc\">Exclude the specified packages. Must be used in conjunction with the\n<code class=\"hljs\">--workspace</code> flag. This flag may be specified multiple times and supports\ncommon Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell\naccidentally expanding glob patterns before Cargo handles them, you must use\nsingle quotes or double quotes around each pattern.</dd>\n</dl>\n<h3 id=\"target-selection-8\"><a class=\"header\" href=\"#target-selection-8\">Target Selection</a></h3>\n<p>When no target selection options are given, <code class=\"hljs\">cargo test</code> will build the\nfollowing targets of the selected packages:</p>\n<ul>\n<li>lib — used to link with binaries, examples, integration tests, and doc tests</li>\n<li>bins (only if integration tests are built and required features are\navailable)</li>\n<li>examples — to ensure they compile</li>\n<li>lib as a unit test</li>\n<li>bins as unit tests</li>\n<li>integration tests</li>\n<li>doc tests for the lib target</li>\n</ul>\n<p>The default behavior can be changed by setting the <code class=\"hljs\">test</code> flag for the target\nin the manifest settings. Setting examples to <code class=\"hljs\">test = true</code> will build and run\nthe example as a test, replacing the example’s <code class=\"hljs\">main</code> function with the\nlibtest harness. If you don’t want the <code class=\"hljs\">main</code> function replaced, also include\n<code class=\"hljs\">harness = false</code>, in which case the example will be built and executed as-is.</p>\n<p>Setting targets to <code class=\"hljs\">test = false</code> will stop them from being tested by default.\nTarget selection options that take a target by name (such as <code class=\"hljs\">--example foo</code>)\nignore the <code class=\"hljs\">test</code> flag and will always test the given target.</p>\n<p>Doc tests for libraries may be disabled by setting <code class=\"hljs\">doctest = false</code> for the\nlibrary in the manifest.</p>\n<p>See <a href=\"commands/../reference/cargo-targets.html#configuring-a-target\">Configuring a target</a>\nfor more information on per-target settings.</p>\n<p>Binary targets are automatically built if there is an integration test or\nbenchmark being selected to test. This allows an integration\ntest to execute the binary to exercise and test its behavior.\nThe <code class=\"hljs\">CARGO_BIN_EXE_&lt;name&gt;</code>\n<a href=\"commands/../reference/environment-variables.html#environment-variables-cargo-sets-for-crates\">environment variable</a>\nis set when the integration test is built so that it can use the\n<a href=\"https://doc.rust-lang.org/std/macro.env.html\"><code class=\"hljs\">env</code> macro</a> to locate the\nexecutable.</p>\n<p>Passing target selection flags will test only the specified\ntargets.</p>\n<p>Note that <code class=\"hljs\">--bin</code>, <code class=\"hljs\">--example</code>, <code class=\"hljs\">--test</code> and <code class=\"hljs\">--bench</code> flags also\nsupport common Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your\nshell accidentally expanding glob patterns before Cargo handles them, you must\nuse single quotes or double quotes around each glob pattern.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test---lib\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---lib\"></a><code class=\"hljs\">--lib</code></dt>\n<dd class=\"option-desc\">Test the package’s library.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---bin\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---bin\"></a><code class=\"hljs\">--bin</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Test the specified binary. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---bins\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---bins\"></a><code class=\"hljs\">--bins</code></dt>\n<dd class=\"option-desc\">Test all binary targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---example\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---example\"></a><code class=\"hljs\">--example</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Test the specified example. This flag may be specified multiple times\nand supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---examples\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---examples\"></a><code class=\"hljs\">--examples</code></dt>\n<dd class=\"option-desc\">Test all example targets.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---test\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---test\"></a><code class=\"hljs\">--test</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Test the specified integration test. This flag may be specified\nmultiple times and supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---tests\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---tests\"></a><code class=\"hljs\">--tests</code></dt>\n<dd class=\"option-desc\">Test all targets in test mode that have the <code class=\"hljs\">test = true</code> manifest\nflag set. By default this includes the library and binaries built as\nunittests, and integration tests. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nunittest, and once as a dependency for binaries, integration tests, etc.).\nTargets may be enabled or disabled by setting the <code class=\"hljs\">test</code> flag in the\nmanifest settings for the target.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---bench\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---bench\"></a><code class=\"hljs\">--bench</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Test the specified benchmark. This flag may be specified multiple\ntimes and supports common Unix glob patterns.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---benches\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---benches\"></a><code class=\"hljs\">--benches</code></dt>\n<dd class=\"option-desc\">Test all targets in benchmark mode that have the <code class=\"hljs\">bench = true</code>\nmanifest flag set. By default this includes the library and binaries built\nas benchmarks, and bench targets. Be aware that this will also build any\nrequired dependencies, so the lib target may be built twice (once as a\nbenchmark, and once as a dependency for binaries, benchmarks, etc.).\nTargets may be enabled or disabled by setting the <code class=\"hljs\">bench</code> flag in the\nmanifest settings for the target.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---all-targets\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---all-targets\"></a><code class=\"hljs\">--all-targets</code></dt>\n<dd class=\"option-desc\">Test all targets. This is equivalent to specifying <code class=\"hljs\">--lib --bins --tests --benches --examples</code>.</dd>\n</dl>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test---doc\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---doc\"></a><code class=\"hljs\">--doc</code></dt>\n<dd class=\"option-desc\">Test only the library’s documentation. This cannot be mixed with other\ntarget options.</dd>\n</dl>\n<h3 id=\"feature-selection-8\"><a class=\"header\" href=\"#feature-selection-8\">Feature Selection</a></h3>\n<p>The feature flags allow you to control which features are enabled. When no\nfeature options are given, the <code class=\"hljs\">default</code> feature is activated for every\nselected package.</p>\n<p>See <a href=\"commands/../reference/features.html#command-line-feature-options\">the features documentation</a>\nfor more details.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test--F\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test--F\"></a><code class=\"hljs\">-F</code> <em>features</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-test---features\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---features\"></a><code class=\"hljs\">--features</code> <em>features</em></dt>\n<dd class=\"option-desc\">Space or comma separated list of features to activate. Features of workspace\nmembers may be enabled with <code class=\"hljs\">package-name/feature-name</code> syntax. This flag may\nbe specified multiple times, which enables all specified features.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---all-features\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---all-features\"></a><code class=\"hljs\">--all-features</code></dt>\n<dd class=\"option-desc\">Activate all available features of all selected packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---no-default-features\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---no-default-features\"></a><code class=\"hljs\">--no-default-features</code></dt>\n<dd class=\"option-desc\">Do not activate the <code class=\"hljs\">default</code> feature of the selected packages.</dd>\n</dl>\n<h3 id=\"compilation-options-8\"><a class=\"header\" href=\"#compilation-options-8\">Compilation Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test---target\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---target\"></a><code class=\"hljs\">--target</code> <em>triple</em></dt>\n<dd class=\"option-desc\">Test for the given architecture. The default is the host architecture. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code>. Run <code class=\"hljs\">rustc --print target-list</code> for a\nlist of supported targets. This flag may be specified multiple times.<p></p>\n<p>This may also be specified with the <code class=\"hljs\">build.target</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p>\n<p>Note that specifying this flag makes Cargo run in a different mode where the\ntarget artifacts are placed in a separate directory. See the\n<a href=\"commands/../guide/build-cache.html\">build cache</a> documentation for more details.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-test--r\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test--r\"></a><code class=\"hljs\">-r</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-test---release\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---release\"></a><code class=\"hljs\">--release</code></dt>\n<dd class=\"option-desc\">Test optimized artifacts with the <code class=\"hljs\">release</code> profile.\nSee also the <code class=\"hljs\">--profile</code> option for choosing a specific profile by name.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---profile\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---profile\"></a><code class=\"hljs\">--profile</code> <em>name</em></dt>\n<dd class=\"option-desc\">Test with the given profile.\nSee <a href=\"commands/../reference/profiles.html\">the reference</a> for more details on profiles.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---timings=fmts\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---timings=fmts\"></a><code class=\"hljs\">--timings=</code><em>fmts</em></dt>\n<dd class=\"option-desc\">Output information how long each compilation takes, and track concurrency\ninformation over time. Accepts an optional comma-separated list of output\nformats; <code class=\"hljs\">--timings</code> without an argument will default to <code class=\"hljs\">--timings=html</code>.\nSpecifying an output format (rather than the default) is unstable and requires\n<code class=\"hljs\">-Zunstable-options</code>. Valid output formats:<p></p>\n<ul>\n<li><code class=\"hljs\">html</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Write a human-readable file <code class=\"hljs\">cargo-timing.html</code> to the\n<code class=\"hljs\">target/cargo-timings</code> directory with a report of the compilation. Also write\na report to the same directory with a timestamp in the filename if you want\nto look at older runs. HTML output is suitable for human consumption only,\nand does not provide machine-readable timing data.</li>\n<li><code class=\"hljs\">json</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Emit machine-readable JSON\ninformation about timing information.</li>\n</ul></dd>\n</dl>\n<h3 id=\"output-options-8\"><a class=\"header\" href=\"#output-options-8\">Output Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test---target-dir\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---target-dir\"></a><code class=\"hljs\">--target-dir</code> <em>directory</em></dt>\n<dd class=\"option-desc\">Directory for all generated artifacts and intermediate files. May also be\nspecified with the <code class=\"hljs\">CARGO_TARGET_DIR</code> environment variable, or the\n<code class=\"hljs\">build.target-dir</code> <a href=\"commands/../reference/config.html\">config value</a>.\nDefaults to <code class=\"hljs\">target</code> in the root of the workspace.</dd>\n</dl>\n<h3 id=\"display-options-11\"><a class=\"header\" href=\"#display-options-11\">Display Options</a></h3>\n<p>By default the Rust test harness hides output from test execution to keep\nresults readable. Test output can be recovered (e.g., for debugging) by passing\n<code class=\"hljs\">--nocapture</code> to the test binaries:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo test -- --nocapture\n</code></pre>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test--v\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-test---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test--q\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-test---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---color\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-test---message-format\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---message-format\"></a><code class=\"hljs\">--message-format</code> <em>fmt</em></dt>\n<dd class=\"option-desc\">The output format for diagnostic messages. Can be specified multiple times\nand consists of comma-separated values. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">human</code> (default): Display in a human-readable text format. Conflicts with\n<code class=\"hljs\">short</code> and <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">short</code>: Emit shorter, human-readable text messages. Conflicts with <code class=\"hljs\">human</code>\nand <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">json</code>: Emit JSON messages to stdout. See\n<a href=\"commands/../reference/external-tools.html#json-messages\">the reference</a>\nfor more details. Conflicts with <code class=\"hljs\">human</code> and <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-short</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages contains\nthe “short” rendering from rustc. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-rendered-ansi</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages\ncontains embedded ANSI color codes for respecting rustc’s default color\nscheme. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-render-diagnostics</code>: Instruct Cargo to not include rustc diagnostics\nin JSON messages printed, but instead Cargo itself should render the\nJSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others\ncoming from rustc are still emitted. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n</ul></dd>\n</dl>\n<h3 id=\"manifest-options-11\"><a class=\"header\" href=\"#manifest-options-11\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---ignore-rust-version\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---ignore-rust-version\"></a><code class=\"hljs\">--ignore-rust-version</code></dt>\n<dd class=\"option-desc\">Ignore <code class=\"hljs\">rust-version</code> specification in packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---locked\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-test---offline\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-test---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-11\"><a class=\"header\" href=\"#common-options-11\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---config\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test--C\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-test--h\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-test---help\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test--Z\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h3 id=\"miscellaneous-options-8\"><a class=\"header\" href=\"#miscellaneous-options-8\">Miscellaneous Options</a></h3>\n<p>The <code class=\"hljs\">--jobs</code> argument affects the building of the test executable but does not\naffect how many threads are used when running the tests. The Rust test harness\nincludes an option to control the number of threads used:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo test -j 2 -- --test-threads=2\n</code></pre>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-test--j\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test--j\"></a><code class=\"hljs\">-j</code> <em>N</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-test---jobs\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---jobs\"></a><code class=\"hljs\">--jobs</code> <em>N</em></dt>\n<dd class=\"option-desc\">Number of parallel jobs to run. May also be specified with the\n<code class=\"hljs\">build.jobs</code> <a href=\"commands/../reference/config.html\">config value</a>. Defaults to\nthe number of logical CPUs. If negative, it sets the maximum number of\nparallel jobs to the number of logical CPUs plus provided value. If\na string <code class=\"hljs\">default</code> is provided, it sets the value back to defaults.\nShould not be 0.</dd>\n<dt class=\"option-term\" id=\"option-cargo-test---future-incompat-report\"><a class=\"option-anchor\" href=\"commands/cargo-test.html#option-cargo-test---future-incompat-report\"></a><code class=\"hljs\">--future-incompat-report</code></dt>\n<dd class=\"option-desc\">Displays a future-incompat report for any future-incompatible warnings\nproduced during execution of this command<p></p>\n<p>See <a href=\"commands/cargo-report.html\">cargo-report(1)</a></p></dd>\n</dl>\n<p>While <code class=\"hljs\">cargo test</code> involves compilation, it does not provide a <code class=\"hljs\">--keep-going</code>\nflag. Use <code class=\"hljs\">--no-fail-fast</code> to run as many tests as possible without stopping at\nthe first failure. To “compile” as many tests as possible, use <code class=\"hljs\">--tests</code> to\nbuild test binaries separately. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo build --tests --keep-going\ncargo test --tests --no-fail-fast\n</code></pre>\n<h2 id=\"environment-11\"><a class=\"header\" href=\"#environment-11\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-11\"><a class=\"header\" href=\"#exit-status-11\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-14\"><a class=\"header\" href=\"#examples-14\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Execute all the unit and integration tests of the current package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo test\n</code></pre>\n</li>\n<li>\n<p>Run only tests whose names match against a filter string:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo test name_filter\n</code></pre>\n</li>\n<li>\n<p>Run only a specific test within a specific integration test:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo test --test int_test_name -- modname::test_name\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-13\"><a class=\"header\" href=\"#see-also-13\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-bench.html\">cargo-bench(1)</a>, <a href=\"commands/../reference/cargo-targets.html#tests\">types of tests</a>, <a href=\"https://doc.rust-lang.org/rustc/tests/index.html\">how to write tests</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-report1\"><a class=\"header\" href=\"#cargo-report1\">cargo-report(1)</a></h1>\n<h2 id=\"name-14\"><a class=\"header\" href=\"#name-14\">NAME</a></h2>\n<p>cargo-report — Generate and display various kinds of reports</p>\n<h2 id=\"synopsis-14\"><a class=\"header\" href=\"#synopsis-14\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo report</code> <em>type</em> [<em>options</em>]</p>\n<h3 id=\"description-14\"><a class=\"header\" href=\"#description-14\">DESCRIPTION</a></h3>\n<p>Displays a report of the given <em>type</em> — currently, only <code class=\"hljs\">future-incompat</code> is supported</p>\n<h2 id=\"options-13\"><a class=\"header\" href=\"#options-13\">OPTIONS</a></h2>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-report---id\"><a class=\"option-anchor\" href=\"commands/cargo-report.html#option-cargo-report---id\"></a><code class=\"hljs\">--id</code> <em>id</em></dt>\n<dd class=\"option-desc\">Show the report with the specified Cargo-generated id</dd>\n<dt class=\"option-term\" id=\"option-cargo-report--p\"><a class=\"option-anchor\" href=\"commands/cargo-report.html#option-cargo-report--p\"></a><code class=\"hljs\">-p</code> <em>spec</em>…</dt>\n<dt class=\"option-term\" id=\"option-cargo-report---package\"><a class=\"option-anchor\" href=\"commands/cargo-report.html#option-cargo-report---package\"></a><code class=\"hljs\">--package</code> <em>spec</em>…</dt>\n<dd class=\"option-desc\">Only display a report for the specified package</dd>\n</dl>\n<h2 id=\"examples-15\"><a class=\"header\" href=\"#examples-15\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Display the latest future-incompat report:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo report future-incompat\n</code></pre>\n</li>\n<li>\n<p>Display the latest future-incompat report for a specific package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo report future-incompat --package my-dep:0.0.1\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-14\"><a class=\"header\" href=\"#see-also-14\">SEE ALSO</a></h2>\n<p><a href=\"commands/../reference/future-incompat-report.html\">Future incompat report</a></p>\n<p><a href=\"commands/cargo.html\">cargo(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"manifest-commands-2\"><a class=\"header\" href=\"#manifest-commands-2\">Manifest Commands</a></h1>\n<ul>\n<li><a href=\"commands/cargo-add.html\">cargo add</a></li>\n<li><a href=\"commands/cargo-generate-lockfile.html\">cargo generate-lockfile</a></li>\n<li><a href=\"commands/cargo-locate-project.html\">cargo locate-project</a></li>\n<li><a href=\"commands/cargo-metadata.html\">cargo metadata</a></li>\n<li><a href=\"commands/cargo-pkgid.html\">cargo pkgid</a></li>\n<li><a href=\"commands/cargo-remove.html\">cargo remove</a></li>\n<li><a href=\"commands/cargo-tree.html\">cargo tree</a></li>\n<li><a href=\"commands/cargo-update.html\">cargo update</a></li>\n<li><a href=\"commands/cargo-vendor.html\">cargo vendor</a></li>\n<li><a href=\"commands/cargo-verify-project.html\">cargo verify-project</a></li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-add1\"><a class=\"header\" href=\"#cargo-add1\">cargo-add(1)</a></h1>\n<h2 id=\"name-15\"><a class=\"header\" href=\"#name-15\">NAME</a></h2>\n<p>cargo-add — Add dependencies to a Cargo.toml manifest file</p>\n<h2 id=\"synopsis-15\"><a class=\"header\" href=\"#synopsis-15\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo add</code> [<em>options</em>] <em>crate</em>…<br>\n<code class=\"hljs\">cargo add</code> [<em>options</em>] <code class=\"hljs\">--path</code> <em>path</em><br>\n<code class=\"hljs\">cargo add</code> [<em>options</em>] <code class=\"hljs\">--git</code> <em>url</em> [<em>crate</em>…]</p>\n<h2 id=\"description-15\"><a class=\"header\" href=\"#description-15\">DESCRIPTION</a></h2>\n<p>This command can add or modify dependencies.</p>\n<p>The source for the dependency can be specified with:</p>\n<ul>\n<li><em>crate</em><code class=\"hljs\">@</code><em>version</em>: Fetch from a registry with a version constraint of “<em>version</em>”</li>\n<li><code class=\"hljs\">--path</code> <em>path</em>: Fetch from the specified <em>path</em></li>\n<li><code class=\"hljs\">--git</code> <em>url</em>: Pull from a git repo at <em>url</em></li>\n</ul>\n<p>If no source is specified, then a best effort will be made to select one, including:</p>\n<ul>\n<li>Existing dependencies in other tables (like <code class=\"hljs\">dev-dependencies</code>)</li>\n<li>Workspace members</li>\n<li>Latest release in the registry</li>\n</ul>\n<p>When you add a package that is already present, the existing entry will be updated with the flags specified.</p>\n<p>Upon successful invocation, the enabled (<code class=\"hljs\">+</code>) and disabled (<code class=\"hljs\">-</code>) <a href=\"commands/../reference/features.html\">features</a> of the specified\ndependency will be listed in the command’s output.</p>\n<h2 id=\"options-14\"><a class=\"header\" href=\"#options-14\">OPTIONS</a></h2>\n<h3 id=\"source-options\"><a class=\"header\" href=\"#source-options\">Source options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-add---git\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---git\"></a><code class=\"hljs\">--git</code> <em>url</em></dt>\n<dd class=\"option-desc\"><a href=\"commands/../reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories\">Git URL to add the specified crate from</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add---branch\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---branch\"></a><code class=\"hljs\">--branch</code> <em>branch</em></dt>\n<dd class=\"option-desc\">Branch to use when adding from git.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add---tag\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---tag\"></a><code class=\"hljs\">--tag</code> <em>tag</em></dt>\n<dd class=\"option-desc\">Tag to use when adding from git.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add---rev\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---rev\"></a><code class=\"hljs\">--rev</code> <em>sha</em></dt>\n<dd class=\"option-desc\">Specific commit to use when adding from git.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add---path\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---path\"></a><code class=\"hljs\">--path</code> <em>path</em></dt>\n<dd class=\"option-desc\"><a href=\"commands/../reference/specifying-dependencies.html#specifying-path-dependencies\">Filesystem path</a> to local crate to add.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add---registry\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---registry\"></a><code class=\"hljs\">--registry</code> <em>registry</em></dt>\n<dd class=\"option-desc\">Name of the registry to use. Registry names are defined in <a href=\"commands/../reference/config.html\">Cargo config\nfiles</a>. If not specified, the default registry is used,\nwhich is defined by the <code class=\"hljs\">registry.default</code> config key which defaults to\n<code class=\"hljs\">crates-io</code>.</dd>\n</dl>\n<h3 id=\"section-options\"><a class=\"header\" href=\"#section-options\">Section options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-add---dev\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---dev\"></a><code class=\"hljs\">--dev</code></dt>\n<dd class=\"option-desc\">Add as a <a href=\"commands/../reference/specifying-dependencies.html#development-dependencies\">development dependency</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add---build\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---build\"></a><code class=\"hljs\">--build</code></dt>\n<dd class=\"option-desc\">Add as a <a href=\"commands/../reference/specifying-dependencies.html#build-dependencies\">build dependency</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add---target\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---target\"></a><code class=\"hljs\">--target</code> <em>target</em></dt>\n<dd class=\"option-desc\">Add as a dependency to the <a href=\"commands/../reference/specifying-dependencies.html#platform-specific-dependencies\">given target platform</a>.<p></p>\n<p>To avoid unexpected shell expansions, you may use quotes around each target, e.g., <code class=\"hljs\">--target 'cfg(unix)'</code>.</p></dd>\n</dl>\n<h3 id=\"dependency-options\"><a class=\"header\" href=\"#dependency-options\">Dependency options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-add---dry-run\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---dry-run\"></a><code class=\"hljs\">--dry-run</code></dt>\n<dd class=\"option-desc\">Don’t actually write the manifest</dd>\n<dt class=\"option-term\" id=\"option-cargo-add---rename\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---rename\"></a><code class=\"hljs\">--rename</code> <em>name</em></dt>\n<dd class=\"option-desc\"><a href=\"commands/../reference/specifying-dependencies.html#renaming-dependencies-in-cargotoml\">Rename</a> the dependency.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add---optional\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---optional\"></a><code class=\"hljs\">--optional</code></dt>\n<dd class=\"option-desc\">Mark the dependency as <a href=\"commands/../reference/features.html#optional-dependencies\">optional</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add---no-optional\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---no-optional\"></a><code class=\"hljs\">--no-optional</code></dt>\n<dd class=\"option-desc\">Mark the dependency as <a href=\"commands/../reference/features.html#optional-dependencies\">required</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add---public\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---public\"></a><code class=\"hljs\">--public</code></dt>\n<dd class=\"option-desc\">Mark the dependency as public.<p></p>\n<p>The dependency can be referenced in your library’s public API.</p>\n<p><a href=\"commands/../reference/unstable.html#public-dependency\">Unstable (nightly-only)</a></p></dd>\n<dt class=\"option-term\" id=\"option-cargo-add---no-public\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---no-public\"></a><code class=\"hljs\">--no-public</code></dt>\n<dd class=\"option-desc\">Mark the dependency as private.<p></p>\n<p>While you can use the crate in your implementation, it cannot be referenced in your public API.</p>\n<p><a href=\"commands/../reference/unstable.html#public-dependency\">Unstable (nightly-only)</a></p></dd>\n<dt class=\"option-term\" id=\"option-cargo-add---no-default-features\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---no-default-features\"></a><code class=\"hljs\">--no-default-features</code></dt>\n<dd class=\"option-desc\">Disable the <a href=\"commands/../reference/features.html#dependency-features\">default features</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add---default-features\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---default-features\"></a><code class=\"hljs\">--default-features</code></dt>\n<dd class=\"option-desc\">Re-enable the <a href=\"commands/../reference/features.html#dependency-features\">default features</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add--F\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add--F\"></a><code class=\"hljs\">-F</code> <em>features</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-add---features\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---features\"></a><code class=\"hljs\">--features</code> <em>features</em></dt>\n<dd class=\"option-desc\">Space or comma separated list of <a href=\"commands/../reference/features.html#dependency-features\">features to\nactivate</a>. When adding multiple\ncrates, the features for a specific crate may be enabled with\n<code class=\"hljs\">package-name/feature-name</code> syntax. This flag may be specified multiple times,\nwhich enables all specified features.</dd>\n</dl>\n<h3 id=\"display-options-12\"><a class=\"header\" href=\"#display-options-12\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-add--v\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-add---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add--q\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-add---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add---color\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"manifest-options-12\"><a class=\"header\" href=\"#manifest-options-12\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-add---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add--p\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add--p\"></a><code class=\"hljs\">-p</code> <em>spec</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-add---package\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---package\"></a><code class=\"hljs\">--package</code> <em>spec</em></dt>\n<dd class=\"option-desc\">Add dependencies to only the specified package.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add---ignore-rust-version\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---ignore-rust-version\"></a><code class=\"hljs\">--ignore-rust-version</code></dt>\n<dd class=\"option-desc\">Ignore <code class=\"hljs\">rust-version</code> specification in packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add---locked\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-add---offline\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-add---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-12\"><a class=\"header\" href=\"#common-options-12\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-add-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add---config\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add--C\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-add--h\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-add---help\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-add--Z\"><a class=\"option-anchor\" href=\"commands/cargo-add.html#option-cargo-add--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-12\"><a class=\"header\" href=\"#environment-12\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-12\"><a class=\"header\" href=\"#exit-status-12\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-16\"><a class=\"header\" href=\"#examples-16\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Add <code class=\"hljs\">regex</code> as a dependency</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo add regex\n</code></pre>\n</li>\n<li>\n<p>Add <code class=\"hljs\">trybuild</code> as a dev-dependency</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo add --dev trybuild\n</code></pre>\n</li>\n<li>\n<p>Add an older version of <code class=\"hljs\">nom</code> as a dependency</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo add nom@5\n</code></pre>\n</li>\n<li>\n<p>Add support for serializing data structures to json with <code class=\"hljs\">derive</code>s</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo add serde serde_json -F serde/derive\n</code></pre>\n</li>\n<li>\n<p>Add <code class=\"hljs\">windows</code> as a platform specific dependency on <code class=\"hljs\">cfg(windows)</code></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo add windows --target 'cfg(windows)'\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-15\"><a class=\"header\" href=\"#see-also-15\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-remove.html\">cargo-remove(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-generate-lockfile1\"><a class=\"header\" href=\"#cargo-generate-lockfile1\">cargo-generate-lockfile(1)</a></h1>\n<h2 id=\"name-16\"><a class=\"header\" href=\"#name-16\">NAME</a></h2>\n<p>cargo-generate-lockfile — Generate the lockfile for a package</p>\n<h2 id=\"synopsis-16\"><a class=\"header\" href=\"#synopsis-16\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo generate-lockfile</code> [<em>options</em>]</p>\n<h2 id=\"description-16\"><a class=\"header\" href=\"#description-16\">DESCRIPTION</a></h2>\n<p>This command will create the <code class=\"hljs\">Cargo.lock</code> lockfile for the current package or\nworkspace. If the lockfile already exists, it will be rebuilt with the latest\navailable version of every package.</p>\n<p>See also <a href=\"commands/cargo-update.html\">cargo-update(1)</a> which is also capable of creating a <code class=\"hljs\">Cargo.lock</code>\nlockfile and has more options for controlling update behavior.</p>\n<h2 id=\"options-15\"><a class=\"header\" href=\"#options-15\">OPTIONS</a></h2>\n<h3 id=\"display-options-13\"><a class=\"header\" href=\"#display-options-13\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-generate-lockfile--v\"><a class=\"option-anchor\" href=\"commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-generate-lockfile---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-generate-lockfile--q\"><a class=\"option-anchor\" href=\"commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-generate-lockfile---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-generate-lockfile---color\"><a class=\"option-anchor\" href=\"commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"manifest-options-13\"><a class=\"header\" href=\"#manifest-options-13\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-generate-lockfile---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-generate-lockfile---ignore-rust-version\"><a class=\"option-anchor\" href=\"commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---ignore-rust-version\"></a><code class=\"hljs\">--ignore-rust-version</code></dt>\n<dd class=\"option-desc\">Ignore <code class=\"hljs\">rust-version</code> specification in packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-generate-lockfile---locked\"><a class=\"option-anchor\" href=\"commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-generate-lockfile---offline\"><a class=\"option-anchor\" href=\"commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-generate-lockfile---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-13\"><a class=\"header\" href=\"#common-options-13\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-generate-lockfile-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-generate-lockfile---config\"><a class=\"option-anchor\" href=\"commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-generate-lockfile--C\"><a class=\"option-anchor\" href=\"commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-generate-lockfile--h\"><a class=\"option-anchor\" href=\"commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-generate-lockfile---help\"><a class=\"option-anchor\" href=\"commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-generate-lockfile--Z\"><a class=\"option-anchor\" href=\"commands/cargo-generate-lockfile.html#option-cargo-generate-lockfile--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-13\"><a class=\"header\" href=\"#environment-13\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-13\"><a class=\"header\" href=\"#exit-status-13\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-17\"><a class=\"header\" href=\"#examples-17\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Create or update the lockfile for the current package or workspace:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo generate-lockfile\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-16\"><a class=\"header\" href=\"#see-also-16\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-update.html\">cargo-update(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-locate-project1\"><a class=\"header\" href=\"#cargo-locate-project1\">cargo-locate-project(1)</a></h1>\n<h2 id=\"name-17\"><a class=\"header\" href=\"#name-17\">NAME</a></h2>\n<p>cargo-locate-project — Print a JSON representation of a Cargo.toml file’s location</p>\n<h2 id=\"synopsis-17\"><a class=\"header\" href=\"#synopsis-17\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo locate-project</code> [<em>options</em>]</p>\n<h2 id=\"description-17\"><a class=\"header\" href=\"#description-17\">DESCRIPTION</a></h2>\n<p>This command will print a JSON object to stdout with the full path to the manifest. The\nmanifest is found by searching upward for a file named <code class=\"hljs\">Cargo.toml</code> starting from the current\nworking directory.</p>\n<p>If the project happens to be a part of a workspace, the manifest of the project, rather than\nthe workspace root, is output. This can be overridden by the <code class=\"hljs\">--workspace</code> flag. The root\nworkspace is found by traversing further upward or by using the field <code class=\"hljs\">package.workspace</code> after\nlocating the manifest of a workspace member.</p>\n<h2 id=\"options-16\"><a class=\"header\" href=\"#options-16\">OPTIONS</a></h2>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-locate-project---workspace\"><a class=\"option-anchor\" href=\"commands/cargo-locate-project.html#option-cargo-locate-project---workspace\"></a><code class=\"hljs\">--workspace</code></dt>\n<dd class=\"option-desc\">Locate the <code class=\"hljs\">Cargo.toml</code> at the root of the workspace, as opposed to the current\nworkspace member.</dd>\n</dl>\n<h3 id=\"display-options-14\"><a class=\"header\" href=\"#display-options-14\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-locate-project---message-format\"><a class=\"option-anchor\" href=\"commands/cargo-locate-project.html#option-cargo-locate-project---message-format\"></a><code class=\"hljs\">--message-format</code> <em>fmt</em></dt>\n<dd class=\"option-desc\">The representation in which to print the project location. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">json</code> (default): JSON object with the path under the key “root”.</li>\n<li><code class=\"hljs\">plain</code>: Just the path.</li>\n</ul></dd>\n<dt class=\"option-term\" id=\"option-cargo-locate-project--v\"><a class=\"option-anchor\" href=\"commands/cargo-locate-project.html#option-cargo-locate-project--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-locate-project---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-locate-project.html#option-cargo-locate-project---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-locate-project--q\"><a class=\"option-anchor\" href=\"commands/cargo-locate-project.html#option-cargo-locate-project--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-locate-project---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-locate-project.html#option-cargo-locate-project---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-locate-project---color\"><a class=\"option-anchor\" href=\"commands/cargo-locate-project.html#option-cargo-locate-project---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"manifest-options-14\"><a class=\"header\" href=\"#manifest-options-14\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-locate-project---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-locate-project.html#option-cargo-locate-project---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n</dl>\n<h3 id=\"common-options-14\"><a class=\"header\" href=\"#common-options-14\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-locate-project-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-locate-project.html#option-cargo-locate-project-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-locate-project---config\"><a class=\"option-anchor\" href=\"commands/cargo-locate-project.html#option-cargo-locate-project---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-locate-project--C\"><a class=\"option-anchor\" href=\"commands/cargo-locate-project.html#option-cargo-locate-project--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-locate-project--h\"><a class=\"option-anchor\" href=\"commands/cargo-locate-project.html#option-cargo-locate-project--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-locate-project---help\"><a class=\"option-anchor\" href=\"commands/cargo-locate-project.html#option-cargo-locate-project---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-locate-project--Z\"><a class=\"option-anchor\" href=\"commands/cargo-locate-project.html#option-cargo-locate-project--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-14\"><a class=\"header\" href=\"#environment-14\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-14\"><a class=\"header\" href=\"#exit-status-14\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-18\"><a class=\"header\" href=\"#examples-18\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Display the path to the manifest based on the current directory:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo locate-project\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-17\"><a class=\"header\" href=\"#see-also-17\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-metadata.html\">cargo-metadata(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-metadata1\"><a class=\"header\" href=\"#cargo-metadata1\">cargo-metadata(1)</a></h1>\n<h2 id=\"name-18\"><a class=\"header\" href=\"#name-18\">NAME</a></h2>\n<p>cargo-metadata — Machine-readable metadata about the current package</p>\n<h2 id=\"synopsis-18\"><a class=\"header\" href=\"#synopsis-18\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo metadata</code> [<em>options</em>]</p>\n<h2 id=\"description-18\"><a class=\"header\" href=\"#description-18\">DESCRIPTION</a></h2>\n<p>Output JSON to stdout containing information about the workspace members and\nresolved dependencies of the current package.</p>\n<p>The format of the output is subject to change in futures versions of Cargo. It\nis recommended to include the <code class=\"hljs\">--format-version</code> flag to future-proof your code\nto ensure the output is in the format you are expecting. For more on the\nexpectations, see <a href=\"commands/cargo-metadata.html#compatibility\">“Compatibility”</a>.</p>\n<p>See the <a href=\"https://crates.io/crates/cargo_metadata\">cargo_metadata crate</a>\nfor a Rust API for reading the metadata.</p>\n<h2 id=\"output-format\"><a class=\"header\" href=\"#output-format\">OUTPUT FORMAT</a></h2>\n<h3 id=\"compatibility\"><a class=\"header\" href=\"#compatibility\">Compatibility</a></h3>\n<p>Within the same output format version, the compatibility is maintained, except\nsome scenarios. The following is a non-exhaustive list of changes that are not\nconsidersed as incompatible:</p>\n<ul>\n<li><strong>Adding new fields</strong> — New fields will be added when needed. Reserving this\nhelps Cargo evolve without bumping the format version too often.</li>\n<li><strong>Adding new values for enum-like fields</strong> — Same as adding new fields. It\nkeeps metadata evolving without stagnation.</li>\n<li><strong>Changing opaque representations</strong> — The inner representations of some\nfields are implementation details. For example, fields related to\n“Source ID” are treated as opaque identifiers to differentiate packages or\nsources. Consumers shouldn’t rely on those representations unless specified.</li>\n</ul>\n<h3 id=\"json-format\"><a class=\"header\" href=\"#json-format\">JSON format</a></h3>\n<p>The JSON output has the following format:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">/* Array of all packages in the workspace.\n       It also includes all feature-enabled dependencies unless --no-deps is used.\n    */</span>\n    <span class=\"hljs-string\">\"packages\"</span>: [\n        {\n            <span class=\"hljs-comment\">/* The name of the package. */</span>\n            <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"my-package\"</span>,\n            <span class=\"hljs-comment\">/* The version of the package. */</span>\n            <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-string\">\"0.1.0\"</span>,\n            <span class=\"hljs-comment\">/* The Package ID for referring to the\n               package within the document and as the `--package` argument to many commands\n            */</span>\n            <span class=\"hljs-string\">\"id\"</span>: <span class=\"hljs-string\">\"file:///path/to/my-package#0.1.0\"</span>,\n            <span class=\"hljs-comment\">/* The license value from the manifest, or null. */</span>\n            <span class=\"hljs-string\">\"license\"</span>: <span class=\"hljs-string\">\"MIT/Apache-2.0\"</span>,\n            <span class=\"hljs-comment\">/* The license-file value from the manifest, or null. */</span>\n            <span class=\"hljs-string\">\"license_file\"</span>: <span class=\"hljs-string\">\"LICENSE\"</span>,\n            <span class=\"hljs-comment\">/* The description value from the manifest, or null. */</span>\n            <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Package description.\"</span>,\n            <span class=\"hljs-comment\">/* The source ID of the package, an \"opaque\" identifier representing\n               where a package is retrieved from. See \"Compatibility\" above for\n               the stability guarantee.\n\n               This is null for path dependencies and workspace members.\n\n               For other dependencies, it is a string with the format:\n               - \"registry+URL\" for registry-based dependencies.\n                 Example: \"registry+https://github.com/rust-lang/crates.io-index\"\n               - \"git+URL\" for git-based dependencies.\n                 Example: \"git+https://github.com/rust-lang/cargo?rev=5e85ba14aaa20f8133863373404cb0af69eeef2c#5e85ba14aaa20f8133863373404cb0af69eeef2c\"\n               - \"sparse+URL\" for dependencies from a sparse registry\n                 Example: \"sparse+https://my-sparse-registry.org\"\n\n               The value after the `+` is not explicitly defined, and may change\n               between versions of Cargo and may not directly correlate to other\n               things, such as registry definitions in a config file. New source\n               kinds may be added in the future which will have different `+`\n               prefixed identifiers.\n            */</span>\n            <span class=\"hljs-string\">\"source\"</span>: <span class=\"hljs-literal\">null</span>,\n            <span class=\"hljs-comment\">/* Array of dependencies declared in the package's manifest. */</span>\n            <span class=\"hljs-string\">\"dependencies\"</span>: [\n                {\n                    <span class=\"hljs-comment\">/* The name of the dependency. */</span>\n                    <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"bitflags\"</span>,\n                    <span class=\"hljs-comment\">/* The source ID of the dependency. May be null, see\n                       description for the package source.\n                    */</span>\n                    <span class=\"hljs-string\">\"source\"</span>: <span class=\"hljs-string\">\"registry+https://github.com/rust-lang/crates.io-index\"</span>,\n                    <span class=\"hljs-comment\">/* The version requirement for the dependency.\n                       Dependencies without a version requirement have a value of \"*\".\n                    */</span>\n                    <span class=\"hljs-string\">\"req\"</span>: <span class=\"hljs-string\">\"^1.0\"</span>,\n                    <span class=\"hljs-comment\">/* The dependency kind.\n                       \"dev\", \"build\", or null for a normal dependency.\n                    */</span>\n                    <span class=\"hljs-string\">\"kind\"</span>: <span class=\"hljs-literal\">null</span>,\n                    <span class=\"hljs-comment\">/* If the dependency is renamed, this is the new name for\n                       the dependency as a string.  null if it is not renamed.\n                    */</span>\n                    <span class=\"hljs-string\">\"rename\"</span>: <span class=\"hljs-literal\">null</span>,\n                    <span class=\"hljs-comment\">/* Boolean of whether or not this is an optional dependency. */</span>\n                    <span class=\"hljs-string\">\"optional\"</span>: <span class=\"hljs-literal\">false</span>,\n                    <span class=\"hljs-comment\">/* Boolean of whether or not default features are enabled. */</span>\n                    <span class=\"hljs-string\">\"uses_default_features\"</span>: <span class=\"hljs-literal\">true</span>,\n                    <span class=\"hljs-comment\">/* Array of features enabled. */</span>\n                    <span class=\"hljs-string\">\"features\"</span>: [],\n                    <span class=\"hljs-comment\">/* The target platform for the dependency.\n                       null if not a target dependency.\n                    */</span>\n                    <span class=\"hljs-string\">\"target\"</span>: <span class=\"hljs-string\">\"cfg(windows)\"</span>,\n                    <span class=\"hljs-comment\">/* The file system path for a local path dependency.\n                       not present if not a path dependency.\n                    */</span>\n                    <span class=\"hljs-string\">\"path\"</span>: <span class=\"hljs-string\">\"/path/to/dep\"</span>,\n                    <span class=\"hljs-comment\">/* A string of the URL of the registry this dependency is from.\n                       If not specified or null, the dependency is from the default\n                       registry (crates.io).\n                    */</span>\n                    <span class=\"hljs-string\">\"registry\"</span>: <span class=\"hljs-literal\">null</span>\n                }\n            ],\n            <span class=\"hljs-comment\">/* Array of Cargo targets. */</span>\n            <span class=\"hljs-string\">\"targets\"</span>: [\n                {\n                    <span class=\"hljs-comment\">/* Array of target kinds.\n                       - lib targets list the `crate-type` values from the\n                         manifest such as \"lib\", \"rlib\", \"dylib\",\n                         \"proc-macro\", etc. (default [\"lib\"])\n                       - binary is [\"bin\"]\n                       - example is [\"example\"]\n                       - integration test is [\"test\"]\n                       - benchmark is [\"bench\"]\n                       - build script is [\"custom-build\"]\n                    */</span>\n                    <span class=\"hljs-string\">\"kind\"</span>: [\n                        <span class=\"hljs-string\">\"bin\"</span>\n                    ],\n                    <span class=\"hljs-comment\">/* Array of crate types.\n                       - lib and example libraries list the `crate-type` values\n                         from the manifest such as \"lib\", \"rlib\", \"dylib\",\n                         \"proc-macro\", etc. (default [\"lib\"])\n                       - all other target kinds are [\"bin\"]\n                    */</span>\n                    <span class=\"hljs-string\">\"crate_types\"</span>: [\n                        <span class=\"hljs-string\">\"bin\"</span>\n                    ],\n                    <span class=\"hljs-comment\">/* The name of the target.\n                       For lib targets, dashes will be replaced with underscores.\n                    */</span>\n                    <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"my-package\"</span>,\n                    <span class=\"hljs-comment\">/* Absolute path to the root source file of the target. */</span>\n                    <span class=\"hljs-string\">\"src_path\"</span>: <span class=\"hljs-string\">\"/path/to/my-package/src/main.rs\"</span>,\n                    <span class=\"hljs-comment\">/* The Rust edition of the target.\n                       Defaults to the package edition.\n                    */</span>\n                    <span class=\"hljs-string\">\"edition\"</span>: <span class=\"hljs-string\">\"2018\"</span>,\n                    <span class=\"hljs-comment\">/* Array of required features.\n                       This property is not included if no required features are set.\n                    */</span>\n                    <span class=\"hljs-string\">\"required-features\"</span>: [<span class=\"hljs-string\">\"feat1\"</span>],\n                    <span class=\"hljs-comment\">/* Whether the target should be documented by `cargo doc`. */</span>\n                    <span class=\"hljs-string\">\"doc\"</span>: <span class=\"hljs-literal\">true</span>,\n                    <span class=\"hljs-comment\">/* Whether or not this target has doc tests enabled, and\n                       the target is compatible with doc testing.\n                    */</span>\n                    <span class=\"hljs-string\">\"doctest\"</span>: <span class=\"hljs-literal\">false</span>,\n                    <span class=\"hljs-comment\">/* Whether or not this target should be built and run with `--test`\n                    */</span>\n                    <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-literal\">true</span>\n                }\n            ],\n            <span class=\"hljs-comment\">/* Set of features defined for the package.\n               Each feature maps to an array of features or dependencies it\n               enables.\n            */</span>\n            <span class=\"hljs-string\">\"features\"</span>: {\n                <span class=\"hljs-string\">\"default\"</span>: [\n                    <span class=\"hljs-string\">\"feat1\"</span>\n                ],\n                <span class=\"hljs-string\">\"feat1\"</span>: [],\n                <span class=\"hljs-string\">\"feat2\"</span>: []\n            },\n            <span class=\"hljs-comment\">/* Absolute path to this package's manifest. */</span>\n            <span class=\"hljs-string\">\"manifest_path\"</span>: <span class=\"hljs-string\">\"/path/to/my-package/Cargo.toml\"</span>,\n            <span class=\"hljs-comment\">/* Package metadata.\n               This is null if no metadata is specified.\n            */</span>\n            <span class=\"hljs-string\">\"metadata\"</span>: {\n                <span class=\"hljs-string\">\"docs\"</span>: {\n                    <span class=\"hljs-string\">\"rs\"</span>: {\n                        <span class=\"hljs-string\">\"all-features\"</span>: <span class=\"hljs-literal\">true</span>\n                    }\n                }\n            },\n            <span class=\"hljs-comment\">/* List of registries to which this package may be published.\n               Publishing is unrestricted if null, and forbidden if an empty array. */</span>\n            <span class=\"hljs-string\">\"publish\"</span>: [\n                <span class=\"hljs-string\">\"crates-io\"</span>\n            ],\n            <span class=\"hljs-comment\">/* Array of authors from the manifest.\n               Empty array if no authors specified.\n            */</span>\n            <span class=\"hljs-string\">\"authors\"</span>: [\n                <span class=\"hljs-string\">\"Jane Doe &lt;user@example.com&gt;\"</span>\n            ],\n            <span class=\"hljs-comment\">/* Array of categories from the manifest. */</span>\n            <span class=\"hljs-string\">\"categories\"</span>: [\n                <span class=\"hljs-string\">\"command-line-utilities\"</span>\n            ],\n            <span class=\"hljs-comment\">/* Optional string that is the default binary picked by cargo run. */</span>\n            <span class=\"hljs-string\">\"default_run\"</span>: <span class=\"hljs-literal\">null</span>,\n            <span class=\"hljs-comment\">/* Optional string that is the minimum supported rust version */</span>\n            <span class=\"hljs-string\">\"rust_version\"</span>: <span class=\"hljs-string\">\"1.56\"</span>,\n            <span class=\"hljs-comment\">/* Array of keywords from the manifest. */</span>\n            <span class=\"hljs-string\">\"keywords\"</span>: [\n                <span class=\"hljs-string\">\"cli\"</span>\n            ],\n            <span class=\"hljs-comment\">/* The readme value from the manifest or null if not specified. */</span>\n            <span class=\"hljs-string\">\"readme\"</span>: <span class=\"hljs-string\">\"README.md\"</span>,\n            <span class=\"hljs-comment\">/* The repository value from the manifest or null if not specified. */</span>\n            <span class=\"hljs-string\">\"repository\"</span>: <span class=\"hljs-string\">\"https://github.com/rust-lang/cargo\"</span>,\n            <span class=\"hljs-comment\">/* The homepage value from the manifest or null if not specified. */</span>\n            <span class=\"hljs-string\">\"homepage\"</span>: <span class=\"hljs-string\">\"https://rust-lang.org\"</span>,\n            <span class=\"hljs-comment\">/* The documentation value from the manifest or null if not specified. */</span>\n            <span class=\"hljs-string\">\"documentation\"</span>: <span class=\"hljs-string\">\"https://doc.rust-lang.org/stable/std\"</span>,\n            <span class=\"hljs-comment\">/* The default edition of the package.\n               Note that individual targets may have different editions.\n            */</span>\n            <span class=\"hljs-string\">\"edition\"</span>: <span class=\"hljs-string\">\"2018\"</span>,\n            <span class=\"hljs-comment\">/* Optional string that is the name of a native library the package\n               is linking to.\n            */</span>\n            <span class=\"hljs-string\">\"links\"</span>: <span class=\"hljs-literal\">null</span>,\n        }\n    ],\n    <span class=\"hljs-comment\">/* Array of members of the workspace.\n       Each entry is the Package ID for the package.\n    */</span>\n    <span class=\"hljs-string\">\"workspace_members\"</span>: [\n        <span class=\"hljs-string\">\"file:///path/to/my-package#0.1.0\"</span>,\n    ],\n    <span class=\"hljs-comment\">/* Array of default members of the workspace.\n       Each entry is the Package ID for the package.\n    */</span>\n    <span class=\"hljs-string\">\"workspace_default_members\"</span>: [\n        <span class=\"hljs-string\">\"file:///path/to/my-package#0.1.0\"</span>,\n    ],\n    <span class=\"hljs-comment\">// The resolved dependency graph for the entire workspace. The enabled</span>\n    <span class=\"hljs-comment\">// features are based on the enabled features for the \"current\" package.</span>\n    <span class=\"hljs-comment\">// Inactivated optional dependencies are not listed.</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// This is null if --no-deps is specified.</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// By default, this includes all dependencies for all target platforms.</span>\n    <span class=\"hljs-comment\">// The `--filter-platform` flag may be used to narrow to a specific</span>\n    <span class=\"hljs-comment\">// target triple.</span>\n    <span class=\"hljs-string\">\"resolve\"</span>: {\n        <span class=\"hljs-comment\">/* Array of nodes within the dependency graph.\n           Each node is a package.\n        */</span>\n        <span class=\"hljs-string\">\"nodes\"</span>: [\n            {\n                <span class=\"hljs-comment\">/* The Package ID of this node. */</span>\n                <span class=\"hljs-string\">\"id\"</span>: <span class=\"hljs-string\">\"file:///path/to/my-package#0.1.0\"</span>,\n                <span class=\"hljs-comment\">/* The dependencies of this package, an array of Package IDs. */</span>\n                <span class=\"hljs-string\">\"dependencies\"</span>: [\n                    <span class=\"hljs-string\">\"https://github.com/rust-lang/crates.io-index#bitflags@1.0.4\"</span>\n                ],\n                <span class=\"hljs-comment\">/* The dependencies of this package. This is an alternative to\n                   \"dependencies\" which contains additional information. In\n                   particular, this handles renamed dependencies.\n                */</span>\n                <span class=\"hljs-string\">\"deps\"</span>: [\n                    {\n                        <span class=\"hljs-comment\">/* The name of the dependency's library target.\n                           If this is a renamed dependency, this is the new\n                           name.\n                        */</span>\n                        <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"bitflags\"</span>,\n                        <span class=\"hljs-comment\">/* The Package ID of the dependency. */</span>\n                        <span class=\"hljs-string\">\"pkg\"</span>: <span class=\"hljs-string\">\"https://github.com/rust-lang/crates.io-index#bitflags@1.0.4\"</span>\n                        <span class=\"hljs-comment\">/* Array of dependency kinds. Added in Cargo 1.40. */</span>\n                        <span class=\"hljs-string\">\"dep_kinds\"</span>: [\n                            {\n                                <span class=\"hljs-comment\">/* The dependency kind.\n                                   \"dev\", \"build\", or null for a normal dependency.\n                                */</span>\n                                <span class=\"hljs-string\">\"kind\"</span>: <span class=\"hljs-literal\">null</span>,\n                                <span class=\"hljs-comment\">/* The target platform for the dependency.\n                                   null if not a target dependency.\n                                */</span>\n                                <span class=\"hljs-string\">\"target\"</span>: <span class=\"hljs-string\">\"cfg(windows)\"</span>\n                            }\n                        ]\n                    }\n                ],\n                <span class=\"hljs-comment\">/* Array of features enabled on this package. */</span>\n                <span class=\"hljs-string\">\"features\"</span>: [\n                    <span class=\"hljs-string\">\"default\"</span>\n                ]\n            }\n        ],\n        <span class=\"hljs-comment\">/* The root package of the workspace.\n           This is null if this is a virtual workspace. Otherwise it is\n           the Package ID of the root package.\n        */</span>\n        <span class=\"hljs-string\">\"root\"</span>: <span class=\"hljs-string\">\"file:///path/to/my-package#0.1.0\"</span>,\n    },\n    <span class=\"hljs-comment\">/* The absolute path to the build directory where Cargo places its output. */</span>\n    <span class=\"hljs-string\">\"target_directory\"</span>: <span class=\"hljs-string\">\"/path/to/my-package/target\"</span>,\n    <span class=\"hljs-comment\">/* The version of the schema for this metadata structure.\n       This will be changed if incompatible changes are ever made.\n    */</span>\n    <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-comment\">/* The absolute path to the root of the workspace. */</span>\n    <span class=\"hljs-string\">\"workspace_root\"</span>: <span class=\"hljs-string\">\"/path/to/my-package\"</span>\n    <span class=\"hljs-comment\">/* Workspace metadata.\n       This is null if no metadata is specified. */</span>\n    <span class=\"hljs-string\">\"metadata\"</span>: {\n        <span class=\"hljs-string\">\"docs\"</span>: {\n            <span class=\"hljs-string\">\"rs\"</span>: {\n                <span class=\"hljs-string\">\"all-features\"</span>: <span class=\"hljs-literal\">true</span>\n            }\n        }\n    }\n}\n</code></pre>\n<p>Notes:</p>\n<ul>\n<li>For <code class=\"hljs\">\"id\"</code> field syntax, see <a href=\"commands/../reference/pkgid-spec.html\">Package ID Specifications</a> in the reference.</li>\n</ul>\n<h2 id=\"options-17\"><a class=\"header\" href=\"#options-17\">OPTIONS</a></h2>\n<h3 id=\"output-options-9\"><a class=\"header\" href=\"#output-options-9\">Output Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-metadata---no-deps\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata---no-deps\"></a><code class=\"hljs\">--no-deps</code></dt>\n<dd class=\"option-desc\">Output information only about the workspace members and don’t fetch\ndependencies.</dd>\n<dt class=\"option-term\" id=\"option-cargo-metadata---format-version\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata---format-version\"></a><code class=\"hljs\">--format-version</code> <em>version</em></dt>\n<dd class=\"option-desc\">Specify the version of the output format to use. Currently <code class=\"hljs\">1</code> is the only\npossible value.</dd>\n<dt class=\"option-term\" id=\"option-cargo-metadata---filter-platform\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata---filter-platform\"></a><code class=\"hljs\">--filter-platform</code> <em>triple</em></dt>\n<dd class=\"option-desc\">This filters the <code class=\"hljs\">resolve</code> output to only include dependencies for the\ngiven <a href=\"commands/../appendix/glossary.html#target\">target triple</a>.\nWithout this flag, the resolve includes all targets.<p></p>\n<p>Note that the dependencies listed in the “packages” array still includes all\ndependencies. Each package definition is intended to be an unaltered\nreproduction of the information within <code class=\"hljs\">Cargo.toml</code>.</p></dd>\n</dl>\n<h3 id=\"feature-selection-9\"><a class=\"header\" href=\"#feature-selection-9\">Feature Selection</a></h3>\n<p>The feature flags allow you to control which features are enabled. When no\nfeature options are given, the <code class=\"hljs\">default</code> feature is activated for every\nselected package.</p>\n<p>See <a href=\"commands/../reference/features.html#command-line-feature-options\">the features documentation</a>\nfor more details.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-metadata--F\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata--F\"></a><code class=\"hljs\">-F</code> <em>features</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-metadata---features\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata---features\"></a><code class=\"hljs\">--features</code> <em>features</em></dt>\n<dd class=\"option-desc\">Space or comma separated list of features to activate. Features of workspace\nmembers may be enabled with <code class=\"hljs\">package-name/feature-name</code> syntax. This flag may\nbe specified multiple times, which enables all specified features.</dd>\n<dt class=\"option-term\" id=\"option-cargo-metadata---all-features\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata---all-features\"></a><code class=\"hljs\">--all-features</code></dt>\n<dd class=\"option-desc\">Activate all available features of all selected packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-metadata---no-default-features\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata---no-default-features\"></a><code class=\"hljs\">--no-default-features</code></dt>\n<dd class=\"option-desc\">Do not activate the <code class=\"hljs\">default</code> feature of the selected packages.</dd>\n</dl>\n<h3 id=\"display-options-15\"><a class=\"header\" href=\"#display-options-15\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-metadata--v\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-metadata---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-metadata--q\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-metadata---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-metadata---color\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"manifest-options-15\"><a class=\"header\" href=\"#manifest-options-15\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-metadata---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-metadata---locked\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-metadata---offline\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-metadata---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-15\"><a class=\"header\" href=\"#common-options-15\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-metadata-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-metadata---config\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-metadata--C\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-metadata--h\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-metadata---help\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-metadata--Z\"><a class=\"option-anchor\" href=\"commands/cargo-metadata.html#option-cargo-metadata--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-15\"><a class=\"header\" href=\"#environment-15\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-15\"><a class=\"header\" href=\"#exit-status-15\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-19\"><a class=\"header\" href=\"#examples-19\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Output JSON about the current package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo metadata --format-version=1\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-18\"><a class=\"header\" href=\"#see-also-18\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a>, <a href=\"commands/../reference/pkgid-spec.html\">Package ID Specifications</a>, <a href=\"commands/../reference/external-tools.html#json-messages\">JSON messages</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-pkgid1\"><a class=\"header\" href=\"#cargo-pkgid1\">cargo-pkgid(1)</a></h1>\n<h2 id=\"name-19\"><a class=\"header\" href=\"#name-19\">NAME</a></h2>\n<p>cargo-pkgid — Print a fully qualified package specification</p>\n<h2 id=\"synopsis-19\"><a class=\"header\" href=\"#synopsis-19\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo pkgid</code> [<em>options</em>] [<em>spec</em>]</p>\n<h2 id=\"description-19\"><a class=\"header\" href=\"#description-19\">DESCRIPTION</a></h2>\n<p>Given a <em>spec</em> argument, print out the fully qualified package ID specifier\nfor a package or dependency in the current workspace. This command will\ngenerate an error if <em>spec</em> is ambiguous as to which package it refers to in\nthe dependency graph. If no <em>spec</em> is given, then the specifier for the local\npackage is printed.</p>\n<p>This command requires that a lockfile is available and dependencies have been\nfetched.</p>\n<p>A package specifier consists of a name, version, and source URL. You are\nallowed to use partial specifiers to succinctly match a specific package as\nlong as it matches only one package. This specifier is also used by other parts\nin Cargo, such as <a href=\"commands/cargo-metadata.html\">cargo-metadata(1)</a> and <a href=\"commands/../reference/external-tools.html#json-messages\">JSON messages</a> emitted by Cargo.</p>\n<p>The format of a <em>spec</em> can be one of the following:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>SPEC Structure</th><th>Example SPEC</th></tr></thead><tbody>\n<tr><td><em>name</em></td><td><code class=\"hljs\">bitflags</code></td></tr>\n<tr><td><em>name</em><code class=\"hljs\">@</code><em>version</em></td><td><code class=\"hljs\">bitflags@1.0.4</code></td></tr>\n<tr><td><em>url</em></td><td><code class=\"hljs\">https://github.com/rust-lang/cargo</code></td></tr>\n<tr><td><em>url</em><code class=\"hljs\">#</code><em>version</em></td><td><code class=\"hljs\">https://github.com/rust-lang/cargo#0.33.0</code></td></tr>\n<tr><td><em>url</em><code class=\"hljs\">#</code><em>name</em></td><td><code class=\"hljs\">https://github.com/rust-lang/crates.io-index#bitflags</code></td></tr>\n<tr><td><em>url</em><code class=\"hljs\">#</code><em>name</em><code class=\"hljs\">@</code><em>version</em></td><td><code class=\"hljs\">https://github.com/rust-lang/cargo#crates-io@0.21.0</code></td></tr>\n</tbody></table>\n</div>\n<p>The specification grammar can be found in chapter <a href=\"commands/../reference/pkgid-spec.html\">Package ID Specifications</a>.</p>\n<h2 id=\"options-18\"><a class=\"header\" href=\"#options-18\">OPTIONS</a></h2>\n<h3 id=\"package-selection-11\"><a class=\"header\" href=\"#package-selection-11\">Package Selection</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-pkgid--p\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid--p\"></a><code class=\"hljs\">-p</code> <em>spec</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-pkgid---package\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid---package\"></a><code class=\"hljs\">--package</code> <em>spec</em></dt>\n<dd class=\"option-desc\">Get the package ID for the given package instead of the current package.</dd>\n</dl>\n<h3 id=\"display-options-16\"><a class=\"header\" href=\"#display-options-16\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-pkgid--v\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-pkgid---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-pkgid--q\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-pkgid---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-pkgid---color\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"manifest-options-16\"><a class=\"header\" href=\"#manifest-options-16\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-pkgid---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-pkgid---locked\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-pkgid---offline\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-pkgid---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-16\"><a class=\"header\" href=\"#common-options-16\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-pkgid-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-pkgid---config\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-pkgid--C\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-pkgid--h\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-pkgid---help\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-pkgid--Z\"><a class=\"option-anchor\" href=\"commands/cargo-pkgid.html#option-cargo-pkgid--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-16\"><a class=\"header\" href=\"#environment-16\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-16\"><a class=\"header\" href=\"#exit-status-16\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-20\"><a class=\"header\" href=\"#examples-20\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Retrieve package specification for <code class=\"hljs\">foo</code> package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo pkgid foo\n</code></pre>\n</li>\n<li>\n<p>Retrieve package specification for version 1.0.0 of <code class=\"hljs\">foo</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo pkgid foo@1.0.0\n</code></pre>\n</li>\n<li>\n<p>Retrieve package specification for <code class=\"hljs\">foo</code> from crates.io:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo pkgid https://github.com/rust-lang/crates.io-index#foo\n</code></pre>\n</li>\n<li>\n<p>Retrieve package specification for <code class=\"hljs\">foo</code> from a local package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo pkgid file:///path/to/local/package#foo\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-19\"><a class=\"header\" href=\"#see-also-19\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-generate-lockfile.html\">cargo-generate-lockfile(1)</a>, <a href=\"commands/cargo-metadata.html\">cargo-metadata(1)</a>,\n<a href=\"commands/../reference/pkgid-spec.html\">Package ID Specifications</a>, <a href=\"commands/../reference/external-tools.html#json-messages\">JSON messages</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-remove1\"><a class=\"header\" href=\"#cargo-remove1\">cargo-remove(1)</a></h1>\n<h2 id=\"name-20\"><a class=\"header\" href=\"#name-20\">NAME</a></h2>\n<p>cargo-remove — Remove dependencies from a Cargo.toml manifest file</p>\n<h2 id=\"synopsis-20\"><a class=\"header\" href=\"#synopsis-20\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo remove</code> [<em>options</em>] <em>dependency</em>…</p>\n<h2 id=\"description-20\"><a class=\"header\" href=\"#description-20\">DESCRIPTION</a></h2>\n<p>Remove one or more dependencies from a <code class=\"hljs\">Cargo.toml</code> manifest.</p>\n<h2 id=\"options-19\"><a class=\"header\" href=\"#options-19\">OPTIONS</a></h2>\n<h3 id=\"section-options-1\"><a class=\"header\" href=\"#section-options-1\">Section options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-remove---dev\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove---dev\"></a><code class=\"hljs\">--dev</code></dt>\n<dd class=\"option-desc\">Remove as a <a href=\"commands/../reference/specifying-dependencies.html#development-dependencies\">development dependency</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-remove---build\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove---build\"></a><code class=\"hljs\">--build</code></dt>\n<dd class=\"option-desc\">Remove as a <a href=\"commands/../reference/specifying-dependencies.html#build-dependencies\">build dependency</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-remove---target\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove---target\"></a><code class=\"hljs\">--target</code> <em>target</em></dt>\n<dd class=\"option-desc\">Remove as a dependency to the <a href=\"commands/../reference/specifying-dependencies.html#platform-specific-dependencies\">given target platform</a>.<p></p>\n<p>To avoid unexpected shell expansions, you may use quotes around each target, e.g., <code class=\"hljs\">--target 'cfg(unix)'</code>.</p></dd>\n</dl>\n<h3 id=\"miscellaneous-options-9\"><a class=\"header\" href=\"#miscellaneous-options-9\">Miscellaneous Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-remove---dry-run\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove---dry-run\"></a><code class=\"hljs\">--dry-run</code></dt>\n<dd class=\"option-desc\">Don’t actually write to the manifest.</dd>\n</dl>\n<h3 id=\"display-options-17\"><a class=\"header\" href=\"#display-options-17\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-remove--v\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-remove---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-remove--q\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-remove---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-remove---color\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"manifest-options-17\"><a class=\"header\" href=\"#manifest-options-17\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-remove---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-remove---locked\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-remove---offline\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-remove---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"package-selection-12\"><a class=\"header\" href=\"#package-selection-12\">Package Selection</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-remove--p\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove--p\"></a><code class=\"hljs\">-p</code> <em>spec</em>…</dt>\n<dt class=\"option-term\" id=\"option-cargo-remove---package\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove---package\"></a><code class=\"hljs\">--package</code> <em>spec</em>…</dt>\n<dd class=\"option-desc\">Package to remove from.</dd>\n</dl>\n<h3 id=\"common-options-17\"><a class=\"header\" href=\"#common-options-17\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-remove-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-remove---config\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-remove--C\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-remove--h\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-remove---help\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-remove--Z\"><a class=\"option-anchor\" href=\"commands/cargo-remove.html#option-cargo-remove--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-17\"><a class=\"header\" href=\"#environment-17\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-17\"><a class=\"header\" href=\"#exit-status-17\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-21\"><a class=\"header\" href=\"#examples-21\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Remove <code class=\"hljs\">regex</code> as a dependency</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo remove regex\n</code></pre>\n</li>\n<li>\n<p>Remove <code class=\"hljs\">trybuild</code> as a dev-dependency</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo remove --dev trybuild\n</code></pre>\n</li>\n<li>\n<p>Remove <code class=\"hljs\">nom</code> from the <code class=\"hljs\">x86_64-pc-windows-gnu</code> dependencies table</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo remove --target x86_64-pc-windows-gnu nom\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-20\"><a class=\"header\" href=\"#see-also-20\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-add.html\">cargo-add(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-tree1\"><a class=\"header\" href=\"#cargo-tree1\">cargo-tree(1)</a></h1>\n<h2 id=\"name-21\"><a class=\"header\" href=\"#name-21\">NAME</a></h2>\n<p>cargo-tree — Display a tree visualization of a dependency graph</p>\n<h2 id=\"synopsis-21\"><a class=\"header\" href=\"#synopsis-21\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo tree</code> [<em>options</em>]</p>\n<h2 id=\"description-21\"><a class=\"header\" href=\"#description-21\">DESCRIPTION</a></h2>\n<p>This command will display a tree of dependencies to the terminal. An example\nof a simple project that depends on the “rand” package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">myproject v0.1.0 (/myproject)\n└── rand v0.7.3\n    ├── getrandom v0.1.14\n    │   ├── cfg-if v0.1.10\n    │   └── libc v0.2.68\n    ├── libc v0.2.68 (*)\n    ├── rand_chacha v0.2.2\n    │   ├── ppv-lite86 v0.2.6\n    │   └── rand_core v0.5.1\n    │       └── getrandom v0.1.14 (*)\n    └── rand_core v0.5.1 (*)\n[build-dependencies]\n└── cc v1.0.50\n</code></pre>\n<p>Packages marked with <code class=\"hljs\">(*)</code> have been “de-duplicated”. The dependencies for the\npackage have already been shown elsewhere in the graph, and so are not\nrepeated. Use the <code class=\"hljs\">--no-dedupe</code> option to repeat the duplicates.</p>\n<p>The <code class=\"hljs\">-e</code> flag can be used to select the dependency kinds to display. The\n“features” kind changes the output to display the features enabled by\neach dependency. For example, <code class=\"hljs\">cargo tree -e features</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">myproject v0.1.0 (/myproject)\n└── log feature \"serde\"\n    └── log v0.4.8\n        ├── serde v1.0.106\n        └── cfg-if feature \"default\"\n            └── cfg-if v0.1.10\n</code></pre>\n<p>In this tree, <code class=\"hljs\">myproject</code> depends on <code class=\"hljs\">log</code> with the <code class=\"hljs\">serde</code> feature. <code class=\"hljs\">log</code> in\nturn depends on <code class=\"hljs\">cfg-if</code> with “default” features. When using <code class=\"hljs\">-e features</code> it\ncan be helpful to use <code class=\"hljs\">-i</code> flag to show how the features flow into a package.\nSee the examples below for more detail.</p>\n<h3 id=\"feature-unification-1\"><a class=\"header\" href=\"#feature-unification-1\">Feature Unification</a></h3>\n<p>This command shows a graph much closer to a feature-unified graph Cargo will\nbuild, rather than what you list in <code class=\"hljs\">Cargo.toml</code>. For instance, if you specify\nthe same dependency in both <code class=\"hljs\">[dependencies]</code> and <code class=\"hljs\">[dev-dependencies]</code> but with\ndifferent features on. This command may merge all features and show a <code class=\"hljs\">(*)</code> on\none of the dependency to indicate the duplicate.</p>\n<p>As a result, for a mostly equivalent overview of what <code class=\"hljs\">cargo build</code> does,\n<code class=\"hljs\">cargo tree -e normal,build</code> is pretty close; for a mostly equivalent overview\nof what <code class=\"hljs\">cargo test</code> does, <code class=\"hljs\">cargo tree</code> is pretty close. However, it doesn’t\nguarantee the exact equivalence to what Cargo is going to build, since a\ncompilation is complex and depends on lots of different factors.</p>\n<p>To learn more about feature unification, check out this\n<a href=\"commands/../reference/features.html#feature-unification\">dedicated section</a>.</p>\n<h2 id=\"options-20\"><a class=\"header\" href=\"#options-20\">OPTIONS</a></h2>\n<h3 id=\"tree-options\"><a class=\"header\" href=\"#tree-options\">Tree Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-tree--i\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree--i\"></a><code class=\"hljs\">-i</code> <em>spec</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-tree---invert\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---invert\"></a><code class=\"hljs\">--invert</code> <em>spec</em></dt>\n<dd class=\"option-desc\">Show the reverse dependencies for the given package. This flag will invert\nthe tree and display the packages that depend on the given package.<p></p>\n<p>Note that in a workspace, by default it will only display the package’s\nreverse dependencies inside the tree of the workspace member in the current\ndirectory. The <code class=\"hljs\">--workspace</code> flag can be used to extend it so that it will\nshow the package’s reverse dependencies across the entire workspace. The <code class=\"hljs\">-p</code>\nflag can be used to display the package’s reverse dependencies only with the\nsubtree of the package given to <code class=\"hljs\">-p</code>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-tree---prune\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---prune\"></a><code class=\"hljs\">--prune</code> <em>spec</em></dt>\n<dd class=\"option-desc\">Prune the given package from the display of the dependency tree.</dd>\n<dt class=\"option-term\" id=\"option-cargo-tree---depth\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---depth\"></a><code class=\"hljs\">--depth</code> <em>depth</em></dt>\n<dd class=\"option-desc\">Maximum display depth of the dependency tree. A depth of 1 displays the direct\ndependencies, for example.</dd>\n<dt class=\"option-term\" id=\"option-cargo-tree---no-dedupe\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---no-dedupe\"></a><code class=\"hljs\">--no-dedupe</code></dt>\n<dd class=\"option-desc\">Do not de-duplicate repeated dependencies. Usually, when a package has already\ndisplayed its dependencies, further occurrences will not re-display its\ndependencies, and will include a <code class=\"hljs\">(*)</code> to indicate it has already been shown.\nThis flag will cause those duplicates to be repeated.</dd>\n<dt class=\"option-term\" id=\"option-cargo-tree--d\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree--d\"></a><code class=\"hljs\">-d</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-tree---duplicates\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---duplicates\"></a><code class=\"hljs\">--duplicates</code></dt>\n<dd class=\"option-desc\">Show only dependencies which come in multiple versions (implies <code class=\"hljs\">--invert</code>).\nWhen used with the <code class=\"hljs\">-p</code> flag, only shows duplicates within the subtree of the\ngiven package.<p></p>\n<p>It can be beneficial for build times and executable sizes to avoid building\nthat same package multiple times. This flag can help identify the offending\npackages. You can then investigate if the package that depends on the\nduplicate with the older version can be updated to the newer version so that\nonly one instance is built.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-tree--e\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree--e\"></a><code class=\"hljs\">-e</code> <em>kinds</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-tree---edges\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---edges\"></a><code class=\"hljs\">--edges</code> <em>kinds</em></dt>\n<dd class=\"option-desc\">The dependency kinds to display. Takes a comma separated list of values:<p></p>\n<ul>\n<li><code class=\"hljs\">all</code> — Show all edge kinds.</li>\n<li><code class=\"hljs\">normal</code> — Show normal dependencies.</li>\n<li><code class=\"hljs\">build</code> — Show build dependencies.</li>\n<li><code class=\"hljs\">dev</code> — Show development dependencies.</li>\n<li><code class=\"hljs\">features</code> — Show features enabled by each dependency. If this is the only\nkind given, then it will automatically include the other dependency kinds.</li>\n<li><code class=\"hljs\">no-normal</code> — Do not include normal dependencies.</li>\n<li><code class=\"hljs\">no-build</code> — Do not include build dependencies.</li>\n<li><code class=\"hljs\">no-dev</code> — Do not include development dependencies.</li>\n<li><code class=\"hljs\">no-proc-macro</code> — Do not include procedural macro dependencies.</li>\n</ul>\n<p>The <code class=\"hljs\">normal</code>, <code class=\"hljs\">build</code>, <code class=\"hljs\">dev</code>, and <code class=\"hljs\">all</code> dependency kinds cannot be mixed with\n<code class=\"hljs\">no-normal</code>, <code class=\"hljs\">no-build</code>, or <code class=\"hljs\">no-dev</code> dependency kinds.</p>\n<p>The default is <code class=\"hljs\">normal,build,dev</code>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-tree---target\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---target\"></a><code class=\"hljs\">--target</code> <em>triple</em></dt>\n<dd class=\"option-desc\">Filter dependencies matching the given <a href=\"commands/../appendix/glossary.html#target\">target triple</a>.\nThe default is the host platform. Use the value <code class=\"hljs\">all</code> to include <em>all</em> targets.</dd>\n</dl>\n<h3 id=\"tree-formatting-options\"><a class=\"header\" href=\"#tree-formatting-options\">Tree Formatting Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-tree---charset\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---charset\"></a><code class=\"hljs\">--charset</code> <em>charset</em></dt>\n<dd class=\"option-desc\">Chooses the character set to use for the tree. Valid values are “utf8” or\n“ascii”. When unspecified, cargo will auto-select a value.</dd>\n<dt class=\"option-term\" id=\"option-cargo-tree--f\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree--f\"></a><code class=\"hljs\">-f</code> <em>format</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-tree---format\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---format\"></a><code class=\"hljs\">--format</code> <em>format</em></dt>\n<dd class=\"option-desc\">Set the format string for each package. The default is “{p}”.<p></p>\n<p>This is an arbitrary string which will be used to display each package. The following\nstrings will be replaced with the corresponding value:</p>\n<ul>\n<li><code class=\"hljs\">{p}</code> — The package name.</li>\n<li><code class=\"hljs\">{l}</code> — The package license.</li>\n<li><code class=\"hljs\">{r}</code> — The package repository URL.</li>\n<li><code class=\"hljs\">{f}</code> — Comma-separated list of package features that are enabled.</li>\n<li><code class=\"hljs\">{lib}</code> — The name, as used in a <code class=\"hljs\">use</code> statement, of the package’s library.</li>\n</ul></dd>\n<dt class=\"option-term\" id=\"option-cargo-tree---prefix\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---prefix\"></a><code class=\"hljs\">--prefix</code> <em>prefix</em></dt>\n<dd class=\"option-desc\">Sets how each line is displayed. The <em>prefix</em> value can be one of:<p></p>\n<ul>\n<li><code class=\"hljs\">indent</code> (default) — Shows each line indented as a tree.</li>\n<li><code class=\"hljs\">depth</code> — Show as a list, with the numeric depth printed before each entry.</li>\n<li><code class=\"hljs\">none</code> — Show as a flat list.</li>\n</ul></dd>\n</dl>\n<h3 id=\"package-selection-13\"><a class=\"header\" href=\"#package-selection-13\">Package Selection</a></h3>\n<p>By default, when no package selection options are given, the packages selected\ndepend on the selected manifest file (based on the current working directory if\n<code class=\"hljs\">--manifest-path</code> is not given). If the manifest is the root of a workspace then\nthe workspaces default members are selected, otherwise only the package defined\nby the manifest will be selected.</p>\n<p>The default members of a workspace can be set explicitly with the\n<code class=\"hljs\">workspace.default-members</code> key in the root manifest. If this is not set, a\nvirtual workspace will include all workspace members (equivalent to passing\n<code class=\"hljs\">--workspace</code>), and a non-virtual workspace will include only the root crate itself.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-tree--p\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree--p\"></a><code class=\"hljs\">-p</code> <em>spec</em>…</dt>\n<dt class=\"option-term\" id=\"option-cargo-tree---package\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---package\"></a><code class=\"hljs\">--package</code> <em>spec</em>…</dt>\n<dd class=\"option-desc\">Display only the specified packages. See <a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a> for the\nSPEC format. This flag may be specified multiple times and supports common Unix\nglob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell accidentally\nexpanding glob patterns before Cargo handles them, you must use single quotes or\ndouble quotes around each pattern.</dd>\n<dt class=\"option-term\" id=\"option-cargo-tree---workspace\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---workspace\"></a><code class=\"hljs\">--workspace</code></dt>\n<dd class=\"option-desc\">Display all members in the workspace.</dd>\n<dt class=\"option-term\" id=\"option-cargo-tree---exclude\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---exclude\"></a><code class=\"hljs\">--exclude</code> <em>SPEC</em>…</dt>\n<dd class=\"option-desc\">Exclude the specified packages. Must be used in conjunction with the\n<code class=\"hljs\">--workspace</code> flag. This flag may be specified multiple times and supports\ncommon Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell\naccidentally expanding glob patterns before Cargo handles them, you must use\nsingle quotes or double quotes around each pattern.</dd>\n</dl>\n<h3 id=\"manifest-options-18\"><a class=\"header\" href=\"#manifest-options-18\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-tree---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-tree---locked\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-tree---offline\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-tree---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"feature-selection-10\"><a class=\"header\" href=\"#feature-selection-10\">Feature Selection</a></h3>\n<p>The feature flags allow you to control which features are enabled. When no\nfeature options are given, the <code class=\"hljs\">default</code> feature is activated for every\nselected package.</p>\n<p>See <a href=\"commands/../reference/features.html#command-line-feature-options\">the features documentation</a>\nfor more details.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-tree--F\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree--F\"></a><code class=\"hljs\">-F</code> <em>features</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-tree---features\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---features\"></a><code class=\"hljs\">--features</code> <em>features</em></dt>\n<dd class=\"option-desc\">Space or comma separated list of features to activate. Features of workspace\nmembers may be enabled with <code class=\"hljs\">package-name/feature-name</code> syntax. This flag may\nbe specified multiple times, which enables all specified features.</dd>\n<dt class=\"option-term\" id=\"option-cargo-tree---all-features\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---all-features\"></a><code class=\"hljs\">--all-features</code></dt>\n<dd class=\"option-desc\">Activate all available features of all selected packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-tree---no-default-features\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---no-default-features\"></a><code class=\"hljs\">--no-default-features</code></dt>\n<dd class=\"option-desc\">Do not activate the <code class=\"hljs\">default</code> feature of the selected packages.</dd>\n</dl>\n<h3 id=\"display-options-18\"><a class=\"header\" href=\"#display-options-18\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-tree--v\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-tree---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-tree--q\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-tree---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-tree---color\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"common-options-18\"><a class=\"header\" href=\"#common-options-18\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-tree-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-tree---config\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-tree--C\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-tree--h\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-tree---help\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-tree--Z\"><a class=\"option-anchor\" href=\"commands/cargo-tree.html#option-cargo-tree--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-18\"><a class=\"header\" href=\"#environment-18\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-18\"><a class=\"header\" href=\"#exit-status-18\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-22\"><a class=\"header\" href=\"#examples-22\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Display the tree for the package in the current directory:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo tree\n</code></pre>\n</li>\n<li>\n<p>Display all the packages that depend on the <code class=\"hljs\">syn</code> package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo tree -i syn\n</code></pre>\n</li>\n<li>\n<p>Show the features enabled on each package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo tree --format \"{p} {f}\"\n</code></pre>\n</li>\n<li>\n<p>Show all packages that are built multiple times. This can happen if multiple\nsemver-incompatible versions appear in the tree (like 1.0.0 and 2.0.0).</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo tree -d\n</code></pre>\n</li>\n<li>\n<p>Explain why features are enabled for the <code class=\"hljs\">syn</code> package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo tree -e features -i syn\n</code></pre>\n<p>The <code class=\"hljs\">-e features</code> flag is used to show features. The <code class=\"hljs\">-i</code> flag is used to\ninvert the graph so that it displays the packages that depend on <code class=\"hljs\">syn</code>. An\nexample of what this would display:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">syn v1.0.17\n├── syn feature \"clone-impls\"\n│   └── syn feature \"default\"\n│       └── rustversion v1.0.2\n│           └── rustversion feature \"default\"\n│               └── myproject v0.1.0 (/myproject)\n│                   └── myproject feature \"default\" (command-line)\n├── syn feature \"default\" (*)\n├── syn feature \"derive\"\n│   └── syn feature \"default\" (*)\n├── syn feature \"full\"\n│   └── rustversion v1.0.2 (*)\n├── syn feature \"parsing\"\n│   └── syn feature \"default\" (*)\n├── syn feature \"printing\"\n│   └── syn feature \"default\" (*)\n├── syn feature \"proc-macro\"\n│   └── syn feature \"default\" (*)\n└── syn feature \"quote\"\n    ├── syn feature \"printing\" (*)\n    └── syn feature \"proc-macro\" (*)\n</code></pre>\n<p>To read this graph, you can follow the chain for each feature from the root\nto see why it is included. For example, the “full” feature is added by the\n<code class=\"hljs\">rustversion</code> crate which is included from <code class=\"hljs\">myproject</code> (with the default\nfeatures), and <code class=\"hljs\">myproject</code> is the package selected on the command-line. All\nof the other <code class=\"hljs\">syn</code> features are added by the “default” feature (“quote” is\nadded by “printing” and “proc-macro”, both of which are default features).</p>\n<p>If you’re having difficulty cross-referencing the de-duplicated <code class=\"hljs\">(*)</code>\nentries, try with the <code class=\"hljs\">--no-dedupe</code> flag to get the full output.</p>\n</li>\n</ol>\n<h2 id=\"see-also-21\"><a class=\"header\" href=\"#see-also-21\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-metadata.html\">cargo-metadata(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-update1\"><a class=\"header\" href=\"#cargo-update1\">cargo-update(1)</a></h1>\n<h2 id=\"name-22\"><a class=\"header\" href=\"#name-22\">NAME</a></h2>\n<p>cargo-update — Update dependencies as recorded in the local lock file</p>\n<h2 id=\"synopsis-22\"><a class=\"header\" href=\"#synopsis-22\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo update</code> [<em>options</em>] <em>spec</em></p>\n<h2 id=\"description-22\"><a class=\"header\" href=\"#description-22\">DESCRIPTION</a></h2>\n<p>This command will update dependencies in the <code class=\"hljs\">Cargo.lock</code> file to the latest\nversion. If the <code class=\"hljs\">Cargo.lock</code> file does not exist, it will be created with the\nlatest available versions.</p>\n<h2 id=\"options-21\"><a class=\"header\" href=\"#options-21\">OPTIONS</a></h2>\n<h3 id=\"update-options\"><a class=\"header\" href=\"#update-options\">Update Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-update-spec…\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update-spec…\"></a><em>spec</em>…</dt>\n<dd class=\"option-desc\">Update only the specified packages. This flag may be specified\nmultiple times. See <a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a> for the SPEC format.<p></p>\n<p>If packages are specified with <em>spec</em>, then a conservative update of\nthe lockfile will be performed. This means that only the dependency specified\nby SPEC will be updated. Its transitive dependencies will be updated only if\nSPEC cannot be updated without updating dependencies.  All other dependencies\nwill remain locked at their currently recorded versions.</p>\n<p>If <em>spec</em> is not specified, all dependencies are updated.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-update---recursive\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update---recursive\"></a><code class=\"hljs\">--recursive</code></dt>\n<dd class=\"option-desc\">When used with <em>spec</em>, dependencies of <em>spec</em> are forced to update as well.\nCannot be used with <code class=\"hljs\">--precise</code>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-update---precise\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update---precise\"></a><code class=\"hljs\">--precise</code> <em>precise</em></dt>\n<dd class=\"option-desc\">When used with <em>spec</em>, allows you to specify a specific version number to set\nthe package to. If the package comes from a git repository, this can be a git\nrevision (such as a SHA hash or tag).<p></p>\n<p>While not recommended, you can specify a yanked version of a package.\nWhen possible, try other non-yanked SemVer-compatible versions or seek help\nfrom the maintainers of the package.</p>\n<p>A compatible <code class=\"hljs\">pre-release</code> version can also be specified even when the version\nrequirement in <code class=\"hljs\">Cargo.toml</code> doesn’t contain any pre-release identifier (nightly only).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-update--w\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update--w\"></a><code class=\"hljs\">-w</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-update---workspace\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update---workspace\"></a><code class=\"hljs\">--workspace</code></dt>\n<dd class=\"option-desc\">Attempt to update only packages defined in the workspace. Other packages\nare updated only if they don’t already exist in the lockfile. This\noption is useful for updating <code class=\"hljs\">Cargo.lock</code> after you’ve changed version\nnumbers in <code class=\"hljs\">Cargo.toml</code>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-update---dry-run\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update---dry-run\"></a><code class=\"hljs\">--dry-run</code></dt>\n<dd class=\"option-desc\">Displays what would be updated, but doesn’t actually write the lockfile.</dd>\n</dl>\n<h3 id=\"display-options-19\"><a class=\"header\" href=\"#display-options-19\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-update--v\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-update---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-update--q\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-update---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-update---color\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"manifest-options-19\"><a class=\"header\" href=\"#manifest-options-19\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-update---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-update---ignore-rust-version\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update---ignore-rust-version\"></a><code class=\"hljs\">--ignore-rust-version</code></dt>\n<dd class=\"option-desc\">Ignore <code class=\"hljs\">rust-version</code> specification in packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-update---locked\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-update---offline\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-update---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-19\"><a class=\"header\" href=\"#common-options-19\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-update-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-update---config\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-update--C\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-update--h\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-update---help\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-update--Z\"><a class=\"option-anchor\" href=\"commands/cargo-update.html#option-cargo-update--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-19\"><a class=\"header\" href=\"#environment-19\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-19\"><a class=\"header\" href=\"#exit-status-19\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-23\"><a class=\"header\" href=\"#examples-23\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Update all dependencies in the lockfile:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo update\n</code></pre>\n</li>\n<li>\n<p>Update only specific dependencies:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo update foo bar\n</code></pre>\n</li>\n<li>\n<p>Set a specific dependency to a specific version:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo update foo --precise 1.2.3\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-22\"><a class=\"header\" href=\"#see-also-22\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-generate-lockfile.html\">cargo-generate-lockfile(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-vendor1\"><a class=\"header\" href=\"#cargo-vendor1\">cargo-vendor(1)</a></h1>\n<h2 id=\"name-23\"><a class=\"header\" href=\"#name-23\">NAME</a></h2>\n<p>cargo-vendor — Vendor all dependencies locally</p>\n<h2 id=\"synopsis-23\"><a class=\"header\" href=\"#synopsis-23\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo vendor</code> [<em>options</em>] [<em>path</em>]</p>\n<h2 id=\"description-23\"><a class=\"header\" href=\"#description-23\">DESCRIPTION</a></h2>\n<p>This cargo subcommand will vendor all crates.io and git dependencies for a\nproject into the specified directory at <code class=\"hljs\">&lt;path&gt;</code>. After this command completes\nthe vendor directory specified by <code class=\"hljs\">&lt;path&gt;</code> will contain all remote sources from\ndependencies specified. Additional manifests beyond the default one can be\nspecified with the <code class=\"hljs\">-s</code> option.</p>\n<p>The configuration necessary to use the vendored sources would be printed to\nstdout after <code class=\"hljs\">cargo vendor</code> completes the vendoring process.\nYou will need to add or redirect it to your Cargo configuration file,\nwhich is usually <code class=\"hljs\">.cargo/config.toml</code> locally for the current package.</p>\n<p>Cargo treats vendored sources as read-only as it does to registry and git sources.\nIf you intend to modify a crate from a remote source,\nuse <code class=\"hljs\">[patch]</code> or a <code class=\"hljs\">path</code> dependency pointing to a local copy of that crate.\nCargo will then correctly handle the crate on incremental rebuilds,\nas it knowns that it is no longer a read-only dependency.</p>\n<h2 id=\"options-22\"><a class=\"header\" href=\"#options-22\">OPTIONS</a></h2>\n<h3 id=\"vendor-options\"><a class=\"header\" href=\"#vendor-options\">Vendor Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-vendor--s\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor--s\"></a><code class=\"hljs\">-s</code> <em>manifest</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-vendor---sync\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor---sync\"></a><code class=\"hljs\">--sync</code> <em>manifest</em></dt>\n<dd class=\"option-desc\">Specify an extra <code class=\"hljs\">Cargo.toml</code> manifest to workspaces which should also be\nvendored and synced to the output. May be specified multiple times.</dd>\n<dt class=\"option-term\" id=\"option-cargo-vendor---no-delete\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor---no-delete\"></a><code class=\"hljs\">--no-delete</code></dt>\n<dd class=\"option-desc\">Don’t delete the “vendor” directory when vendoring, but rather keep all\nexisting contents of the vendor directory</dd>\n<dt class=\"option-term\" id=\"option-cargo-vendor---respect-source-config\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor---respect-source-config\"></a><code class=\"hljs\">--respect-source-config</code></dt>\n<dd class=\"option-desc\">Instead of ignoring <code class=\"hljs\">[source]</code> configuration by default in <code class=\"hljs\">.cargo/config.toml</code>\nread it and use it when downloading crates from crates.io, for example</dd>\n<dt class=\"option-term\" id=\"option-cargo-vendor---versioned-dirs\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor---versioned-dirs\"></a><code class=\"hljs\">--versioned-dirs</code></dt>\n<dd class=\"option-desc\">Normally versions are only added to disambiguate multiple versions of the\nsame package. This option causes all directories in the “vendor” directory\nto be versioned, which makes it easier to track the history of vendored\npackages over time, and can help with the performance of re-vendoring when\nonly a subset of the packages have changed.</dd>\n</dl>\n<h3 id=\"manifest-options-20\"><a class=\"header\" href=\"#manifest-options-20\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-vendor---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-vendor---locked\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-vendor---offline\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-vendor---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"display-options-20\"><a class=\"header\" href=\"#display-options-20\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-vendor--v\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-vendor---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-vendor--q\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-vendor---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-vendor---color\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"common-options-20\"><a class=\"header\" href=\"#common-options-20\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-vendor-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-vendor---config\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-vendor--C\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-vendor--h\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-vendor---help\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-vendor--Z\"><a class=\"option-anchor\" href=\"commands/cargo-vendor.html#option-cargo-vendor--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-20\"><a class=\"header\" href=\"#environment-20\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-20\"><a class=\"header\" href=\"#exit-status-20\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-24\"><a class=\"header\" href=\"#examples-24\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Vendor all dependencies into a local “vendor” folder</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo vendor\n</code></pre>\n</li>\n<li>\n<p>Vendor all dependencies into a local “third-party/vendor” folder</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo vendor third-party/vendor\n</code></pre>\n</li>\n<li>\n<p>Vendor the current workspace as well as another to “vendor”</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo vendor -s ../path/to/Cargo.toml\n</code></pre>\n</li>\n<li>\n<p>Vendor and redirect the necessary vendor configs to a config file.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo vendor &gt; path/to/my/cargo/config.toml\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-23\"><a class=\"header\" href=\"#see-also-23\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-verify-project1\"><a class=\"header\" href=\"#cargo-verify-project1\">cargo-verify-project(1)</a></h1>\n<h2 id=\"name-24\"><a class=\"header\" href=\"#name-24\">NAME</a></h2>\n<p>cargo-verify-project — Check correctness of crate manifest</p>\n<h2 id=\"synopsis-24\"><a class=\"header\" href=\"#synopsis-24\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo verify-project</code> [<em>options</em>]</p>\n<h2 id=\"description-24\"><a class=\"header\" href=\"#description-24\">DESCRIPTION</a></h2>\n<p>This command will parse the local manifest and check its validity. It emits a\nJSON object with the result. A successful validation will display:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">{\"success\":\"true\"}\n</code></pre>\n<p>An invalid workspace will display:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">{\"invalid\":\"human-readable error message\"}\n</code></pre>\n<h2 id=\"options-23\"><a class=\"header\" href=\"#options-23\">OPTIONS</a></h2>\n<h3 id=\"display-options-21\"><a class=\"header\" href=\"#display-options-21\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-verify-project--v\"><a class=\"option-anchor\" href=\"commands/cargo-verify-project.html#option-cargo-verify-project--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-verify-project---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-verify-project.html#option-cargo-verify-project---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-verify-project--q\"><a class=\"option-anchor\" href=\"commands/cargo-verify-project.html#option-cargo-verify-project--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-verify-project---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-verify-project.html#option-cargo-verify-project---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-verify-project---color\"><a class=\"option-anchor\" href=\"commands/cargo-verify-project.html#option-cargo-verify-project---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"manifest-options-21\"><a class=\"header\" href=\"#manifest-options-21\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-verify-project---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-verify-project.html#option-cargo-verify-project---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-verify-project---locked\"><a class=\"option-anchor\" href=\"commands/cargo-verify-project.html#option-cargo-verify-project---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-verify-project---offline\"><a class=\"option-anchor\" href=\"commands/cargo-verify-project.html#option-cargo-verify-project---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-verify-project---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-verify-project.html#option-cargo-verify-project---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"common-options-21\"><a class=\"header\" href=\"#common-options-21\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-verify-project-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-verify-project.html#option-cargo-verify-project-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-verify-project---config\"><a class=\"option-anchor\" href=\"commands/cargo-verify-project.html#option-cargo-verify-project---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-verify-project--C\"><a class=\"option-anchor\" href=\"commands/cargo-verify-project.html#option-cargo-verify-project--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-verify-project--h\"><a class=\"option-anchor\" href=\"commands/cargo-verify-project.html#option-cargo-verify-project--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-verify-project---help\"><a class=\"option-anchor\" href=\"commands/cargo-verify-project.html#option-cargo-verify-project---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-verify-project--Z\"><a class=\"option-anchor\" href=\"commands/cargo-verify-project.html#option-cargo-verify-project--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-21\"><a class=\"header\" href=\"#environment-21\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-21\"><a class=\"header\" href=\"#exit-status-21\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: The workspace is OK.</li>\n<li><code class=\"hljs\">1</code>: The workspace is invalid.</li>\n</ul>\n<h2 id=\"examples-25\"><a class=\"header\" href=\"#examples-25\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Check the current workspace for errors:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo verify-project\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-24\"><a class=\"header\" href=\"#see-also-24\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-package.html\">cargo-package(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"package-commands-1\"><a class=\"header\" href=\"#package-commands-1\">Package Commands</a></h1>\n<ul>\n<li><a href=\"commands/cargo-init.html\">cargo init</a></li>\n<li><a href=\"commands/cargo-install.html\">cargo install</a></li>\n<li><a href=\"commands/cargo-new.html\">cargo new</a></li>\n<li><a href=\"commands/cargo-search.html\">cargo search</a></li>\n<li><a href=\"commands/cargo-uninstall.html\">cargo uninstall</a></li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-init1\"><a class=\"header\" href=\"#cargo-init1\">cargo-init(1)</a></h1>\n<h2 id=\"name-25\"><a class=\"header\" href=\"#name-25\">NAME</a></h2>\n<p>cargo-init — Create a new Cargo package in an existing directory</p>\n<h2 id=\"synopsis-25\"><a class=\"header\" href=\"#synopsis-25\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo init</code> [<em>options</em>] [<em>path</em>]</p>\n<h2 id=\"description-25\"><a class=\"header\" href=\"#description-25\">DESCRIPTION</a></h2>\n<p>This command will create a new Cargo manifest in the current directory. Give a\npath as an argument to create in the given directory.</p>\n<p>If there are typically-named Rust source files already in the directory, those\nwill be used. If not, then a sample <code class=\"hljs\">src/main.rs</code> file will be created, or\n<code class=\"hljs\">src/lib.rs</code> if <code class=\"hljs\">--lib</code> is passed.</p>\n<p>If the directory is not already in a VCS repository, then a new repository\nis created (see <code class=\"hljs\">--vcs</code> below).</p>\n<p>See <a href=\"commands/cargo-new.html\">cargo-new(1)</a> for a similar command which will create a new package in\na new directory.</p>\n<h2 id=\"options-24\"><a class=\"header\" href=\"#options-24\">OPTIONS</a></h2>\n<h3 id=\"init-options\"><a class=\"header\" href=\"#init-options\">Init Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-init---bin\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init---bin\"></a><code class=\"hljs\">--bin</code></dt>\n<dd class=\"option-desc\">Create a package with a binary target (<code class=\"hljs\">src/main.rs</code>).\nThis is the default behavior.</dd>\n<dt class=\"option-term\" id=\"option-cargo-init---lib\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init---lib\"></a><code class=\"hljs\">--lib</code></dt>\n<dd class=\"option-desc\">Create a package with a library target (<code class=\"hljs\">src/lib.rs</code>).</dd>\n<dt class=\"option-term\" id=\"option-cargo-init---edition\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init---edition\"></a><code class=\"hljs\">--edition</code> <em>edition</em></dt>\n<dd class=\"option-desc\">Specify the Rust edition to use. Default is 2021.\nPossible values: 2015, 2018, 2021, 2024</dd>\n<dt class=\"option-term\" id=\"option-cargo-init---name\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init---name\"></a><code class=\"hljs\">--name</code> <em>name</em></dt>\n<dd class=\"option-desc\">Set the package name. Defaults to the directory name.</dd>\n<dt class=\"option-term\" id=\"option-cargo-init---vcs\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init---vcs\"></a><code class=\"hljs\">--vcs</code> <em>vcs</em></dt>\n<dd class=\"option-desc\">Initialize a new VCS repository for the given version control system (git,\nhg, pijul, or fossil) or do not initialize any version control at all\n(none). If not specified, defaults to <code class=\"hljs\">git</code> or the configuration value\n<code class=\"hljs\">cargo-new.vcs</code>, or <code class=\"hljs\">none</code> if already inside a VCS repository.</dd>\n<dt class=\"option-term\" id=\"option-cargo-init---registry\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init---registry\"></a><code class=\"hljs\">--registry</code> <em>registry</em></dt>\n<dd class=\"option-desc\">This sets the <code class=\"hljs\">publish</code> field in <code class=\"hljs\">Cargo.toml</code> to the given registry name\nwhich will restrict publishing only to that registry.<p></p>\n<p>Registry names are defined in <a href=\"commands/../reference/config.html\">Cargo config files</a>.\nIf not specified, the default registry defined by the <code class=\"hljs\">registry.default</code>\nconfig key is used. If the default registry is not set and <code class=\"hljs\">--registry</code> is not\nused, the <code class=\"hljs\">publish</code> field will not be set which means that publishing will not\nbe restricted.</p></dd>\n</dl>\n<h3 id=\"display-options-22\"><a class=\"header\" href=\"#display-options-22\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-init--v\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-init---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-init--q\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-init---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-init---color\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"common-options-22\"><a class=\"header\" href=\"#common-options-22\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-init-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-init---config\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-init--C\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-init--h\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-init---help\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-init--Z\"><a class=\"option-anchor\" href=\"commands/cargo-init.html#option-cargo-init--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-22\"><a class=\"header\" href=\"#environment-22\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-22\"><a class=\"header\" href=\"#exit-status-22\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-26\"><a class=\"header\" href=\"#examples-26\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Create a binary Cargo package in the current directory:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo init\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-25\"><a class=\"header\" href=\"#see-also-25\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-new.html\">cargo-new(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-install1\"><a class=\"header\" href=\"#cargo-install1\">cargo-install(1)</a></h1>\n<h2 id=\"name-26\"><a class=\"header\" href=\"#name-26\">NAME</a></h2>\n<p>cargo-install — Build and install a Rust binary</p>\n<h2 id=\"synopsis-26\"><a class=\"header\" href=\"#synopsis-26\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo install</code> [<em>options</em>] <em>crate</em>[@<em>version</em>]…<br>\n<code class=\"hljs\">cargo install</code> [<em>options</em>] <code class=\"hljs\">--path</code> <em>path</em><br>\n<code class=\"hljs\">cargo install</code> [<em>options</em>] <code class=\"hljs\">--git</code> <em>url</em> [<em>crate</em>…]<br>\n<code class=\"hljs\">cargo install</code> [<em>options</em>] <code class=\"hljs\">--list</code></p>\n<h2 id=\"description-26\"><a class=\"header\" href=\"#description-26\">DESCRIPTION</a></h2>\n<p>This command manages Cargo’s local set of installed binary crates. Only\npackages which have executable <code class=\"hljs\">[[bin]]</code> or <code class=\"hljs\">[[example]]</code> targets can be\ninstalled, and all executables are installed into the installation root’s\n<code class=\"hljs\">bin</code> folder. By default only binaries, not examples, are installed.</p>\n<p>The installation root is determined, in order of precedence:</p>\n<ul>\n<li><code class=\"hljs\">--root</code> option</li>\n<li><code class=\"hljs\">CARGO_INSTALL_ROOT</code> environment variable</li>\n<li><code class=\"hljs\">install.root</code> Cargo <a href=\"commands/../reference/config.html\">config value</a></li>\n<li><code class=\"hljs\">CARGO_HOME</code> environment variable</li>\n<li><code class=\"hljs\">$HOME/.cargo</code></li>\n</ul>\n<p>There are multiple sources from which a crate can be installed. The default\nsource location is crates.io but the <code class=\"hljs\">--git</code>, <code class=\"hljs\">--path</code>, and <code class=\"hljs\">--registry</code> flags\ncan change this source. If the source contains more than one package (such as\ncrates.io or a git repository with multiple crates) the <em>crate</em> argument is\nrequired to indicate which crate should be installed.</p>\n<p>Crates from crates.io can optionally specify the version they wish to install\nvia the <code class=\"hljs\">--version</code> flags, and similarly packages from git repositories can\noptionally specify the branch, tag, or revision that should be installed. If a\ncrate has multiple binaries, the <code class=\"hljs\">--bin</code> argument can selectively install only\none of them, and if you’d rather install examples the <code class=\"hljs\">--example</code> argument can\nbe used as well.</p>\n<p>If the package is already installed, Cargo will reinstall it if the installed\nversion does not appear to be up-to-date. If any of the following values\nchange, then Cargo will reinstall the package:</p>\n<ul>\n<li>The package version and source.</li>\n<li>The set of binary names installed.</li>\n<li>The chosen features.</li>\n<li>The profile (<code class=\"hljs\">--profile</code>).</li>\n<li>The target (<code class=\"hljs\">--target</code>).</li>\n</ul>\n<p>Installing with <code class=\"hljs\">--path</code> will always build and install, unless there are\nconflicting binaries from another package. The <code class=\"hljs\">--force</code> flag may be used to\nforce Cargo to always reinstall the package.</p>\n<p>If the source is crates.io or <code class=\"hljs\">--git</code> then by default the crate will be built\nin a temporary target directory. To avoid this, the target directory can be\nspecified by setting the <code class=\"hljs\">CARGO_TARGET_DIR</code> environment variable to a relative\npath. In particular, this can be useful for caching build artifacts on\ncontinuous integration systems.</p>\n<h3 id=\"dealing-with-the-lockfile\"><a class=\"header\" href=\"#dealing-with-the-lockfile\">Dealing with the Lockfile</a></h3>\n<p>By default, the <code class=\"hljs\">Cargo.lock</code> file that is included with the package will be\nignored. This means that Cargo will recompute which versions of dependencies\nto use, possibly using newer versions that have been released since the\npackage was published. The <code class=\"hljs\">--locked</code> flag can be used to force Cargo to use\nthe packaged <code class=\"hljs\">Cargo.lock</code> file if it is available. This may be useful for\nensuring reproducible builds, to use the exact same set of dependencies that\nwere available when the package was published. It may also be useful if a\nnewer version of a dependency is published that no longer builds on your\nsystem, or has other problems. The downside to using <code class=\"hljs\">--locked</code> is that you\nwill not receive any fixes or updates to any dependency. Note that Cargo did\nnot start publishing <code class=\"hljs\">Cargo.lock</code> files until version 1.37, which means\npackages published with prior versions will not have a <code class=\"hljs\">Cargo.lock</code> file\navailable.</p>\n<h3 id=\"configuration-discovery\"><a class=\"header\" href=\"#configuration-discovery\">Configuration Discovery</a></h3>\n<p>This command operates on system or user level, not project level.\nThis means that the local <a href=\"commands/../reference/config.html#hierarchical-structure\">configuration discovery</a> is ignored.\nInstead, the configuration discovery begins at <code class=\"hljs\">$CARGO_HOME/config.toml</code>.\nIf the package is installed with <code class=\"hljs\">--path $PATH</code>, the local configuration\nwill be used, beginning discovery at <code class=\"hljs\">$PATH/.cargo/config.toml</code>.</p>\n<h2 id=\"options-25\"><a class=\"header\" href=\"#options-25\">OPTIONS</a></h2>\n<h3 id=\"install-options\"><a class=\"header\" href=\"#install-options\">Install Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-install---vers\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---vers\"></a><code class=\"hljs\">--vers</code> <em>version</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-install---version\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---version\"></a><code class=\"hljs\">--version</code> <em>version</em></dt>\n<dd class=\"option-desc\">Specify a version to install. This may be a <a href=\"commands/../reference/specifying-dependencies.html\">version\nrequirement</a>, like <code class=\"hljs\">~1.2</code>, to have Cargo\nselect the newest version from the given requirement. If the version does not\nhave a requirement operator (such as <code class=\"hljs\">^</code> or <code class=\"hljs\">~</code>), then it must be in the form\n<em>MAJOR.MINOR.PATCH</em>, and will install exactly that version; it is <em>not</em>\ntreated as a caret requirement like Cargo dependencies are.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---git\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---git\"></a><code class=\"hljs\">--git</code> <em>url</em></dt>\n<dd class=\"option-desc\">Git URL to install the specified crate from.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---branch\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---branch\"></a><code class=\"hljs\">--branch</code> <em>branch</em></dt>\n<dd class=\"option-desc\">Branch to use when installing from git.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---tag\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---tag\"></a><code class=\"hljs\">--tag</code> <em>tag</em></dt>\n<dd class=\"option-desc\">Tag to use when installing from git.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---rev\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---rev\"></a><code class=\"hljs\">--rev</code> <em>sha</em></dt>\n<dd class=\"option-desc\">Specific commit to use when installing from git.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---path\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---path\"></a><code class=\"hljs\">--path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Filesystem path to local crate to install from.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---list\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---list\"></a><code class=\"hljs\">--list</code></dt>\n<dd class=\"option-desc\">List all installed packages and their versions.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install--f\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install--f\"></a><code class=\"hljs\">-f</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-install---force\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---force\"></a><code class=\"hljs\">--force</code></dt>\n<dd class=\"option-desc\">Force overwriting existing crates or binaries. This can be used if a package\nhas installed a binary with the same name as another package. This is also\nuseful if something has changed on the system that you want to rebuild with,\nsuch as a newer version of <code class=\"hljs\">rustc</code>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---no-track\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---no-track\"></a><code class=\"hljs\">--no-track</code></dt>\n<dd class=\"option-desc\">By default, Cargo keeps track of the installed packages with a metadata file\nstored in the installation root directory. This flag tells Cargo not to use or\ncreate that file. With this flag, Cargo will refuse to overwrite any existing\nfiles unless the <code class=\"hljs\">--force</code> flag is used. This also disables Cargo’s ability to\nprotect against multiple concurrent invocations of Cargo installing at the\nsame time.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---bin\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---bin\"></a><code class=\"hljs\">--bin</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Install only the specified binary.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---bins\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---bins\"></a><code class=\"hljs\">--bins</code></dt>\n<dd class=\"option-desc\">Install all binaries. This is the default behavior.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---example\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---example\"></a><code class=\"hljs\">--example</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Install only the specified example.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---examples\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---examples\"></a><code class=\"hljs\">--examples</code></dt>\n<dd class=\"option-desc\">Install all examples.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---root\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---root\"></a><code class=\"hljs\">--root</code> <em>dir</em></dt>\n<dd class=\"option-desc\">Directory to install packages into.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---registry\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---registry\"></a><code class=\"hljs\">--registry</code> <em>registry</em></dt>\n<dd class=\"option-desc\">Name of the registry to use. Registry names are defined in <a href=\"commands/../reference/config.html\">Cargo config\nfiles</a>. If not specified, the default registry is used,\nwhich is defined by the <code class=\"hljs\">registry.default</code> config key which defaults to\n<code class=\"hljs\">crates-io</code>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---index\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---index\"></a><code class=\"hljs\">--index</code> <em>index</em></dt>\n<dd class=\"option-desc\">The URL of the registry index to use.</dd>\n</dl>\n<h3 id=\"feature-selection-11\"><a class=\"header\" href=\"#feature-selection-11\">Feature Selection</a></h3>\n<p>The feature flags allow you to control which features are enabled. When no\nfeature options are given, the <code class=\"hljs\">default</code> feature is activated for every\nselected package.</p>\n<p>See <a href=\"commands/../reference/features.html#command-line-feature-options\">the features documentation</a>\nfor more details.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-install--F\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install--F\"></a><code class=\"hljs\">-F</code> <em>features</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-install---features\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---features\"></a><code class=\"hljs\">--features</code> <em>features</em></dt>\n<dd class=\"option-desc\">Space or comma separated list of features to activate. Features of workspace\nmembers may be enabled with <code class=\"hljs\">package-name/feature-name</code> syntax. This flag may\nbe specified multiple times, which enables all specified features.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---all-features\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---all-features\"></a><code class=\"hljs\">--all-features</code></dt>\n<dd class=\"option-desc\">Activate all available features of all selected packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---no-default-features\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---no-default-features\"></a><code class=\"hljs\">--no-default-features</code></dt>\n<dd class=\"option-desc\">Do not activate the <code class=\"hljs\">default</code> feature of the selected packages.</dd>\n</dl>\n<h3 id=\"compilation-options-9\"><a class=\"header\" href=\"#compilation-options-9\">Compilation Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-install---target\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---target\"></a><code class=\"hljs\">--target</code> <em>triple</em></dt>\n<dd class=\"option-desc\">Install for the given architecture. The default is the host architecture. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code>. Run <code class=\"hljs\">rustc --print target-list</code> for a\nlist of supported targets.<p></p>\n<p>This may also be specified with the <code class=\"hljs\">build.target</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p>\n<p>Note that specifying this flag makes Cargo run in a different mode where the\ntarget artifacts are placed in a separate directory. See the\n<a href=\"commands/../guide/build-cache.html\">build cache</a> documentation for more details.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-install---target-dir\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---target-dir\"></a><code class=\"hljs\">--target-dir</code> <em>directory</em></dt>\n<dd class=\"option-desc\">Directory for all generated artifacts and intermediate files. May also be\nspecified with the <code class=\"hljs\">CARGO_TARGET_DIR</code> environment variable, or the\n<code class=\"hljs\">build.target-dir</code> <a href=\"commands/../reference/config.html\">config value</a>.\nDefaults to a new temporary folder located in the\ntemporary directory of the platform.<p></p>\n<p>When using <code class=\"hljs\">--path</code>, by default it will use <code class=\"hljs\">target</code> directory in the workspace\nof the local crate unless <code class=\"hljs\">--target-dir</code>\nis specified.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-install---debug\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---debug\"></a><code class=\"hljs\">--debug</code></dt>\n<dd class=\"option-desc\">Build with the <code class=\"hljs\">dev</code> profile instead of the <code class=\"hljs\">release</code> profile.\nSee also the <code class=\"hljs\">--profile</code> option for choosing a specific profile by name.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---profile\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---profile\"></a><code class=\"hljs\">--profile</code> <em>name</em></dt>\n<dd class=\"option-desc\">Install with the given profile.\nSee <a href=\"commands/../reference/profiles.html\">the reference</a> for more details on profiles.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---timings=fmts\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---timings=fmts\"></a><code class=\"hljs\">--timings=</code><em>fmts</em></dt>\n<dd class=\"option-desc\">Output information how long each compilation takes, and track concurrency\ninformation over time. Accepts an optional comma-separated list of output\nformats; <code class=\"hljs\">--timings</code> without an argument will default to <code class=\"hljs\">--timings=html</code>.\nSpecifying an output format (rather than the default) is unstable and requires\n<code class=\"hljs\">-Zunstable-options</code>. Valid output formats:<p></p>\n<ul>\n<li><code class=\"hljs\">html</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Write a human-readable file <code class=\"hljs\">cargo-timing.html</code> to the\n<code class=\"hljs\">target/cargo-timings</code> directory with a report of the compilation. Also write\na report to the same directory with a timestamp in the filename if you want\nto look at older runs. HTML output is suitable for human consumption only,\nand does not provide machine-readable timing data.</li>\n<li><code class=\"hljs\">json</code> (unstable, requires <code class=\"hljs\">-Zunstable-options</code>): Emit machine-readable JSON\ninformation about timing information.</li>\n</ul></dd>\n</dl>\n<h3 id=\"manifest-options-22\"><a class=\"header\" href=\"#manifest-options-22\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-install---ignore-rust-version\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---ignore-rust-version\"></a><code class=\"hljs\">--ignore-rust-version</code></dt>\n<dd class=\"option-desc\">Ignore <code class=\"hljs\">rust-version</code> specification in packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---locked\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-install---offline\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-install---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"miscellaneous-options-10\"><a class=\"header\" href=\"#miscellaneous-options-10\">Miscellaneous Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-install--j\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install--j\"></a><code class=\"hljs\">-j</code> <em>N</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-install---jobs\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---jobs\"></a><code class=\"hljs\">--jobs</code> <em>N</em></dt>\n<dd class=\"option-desc\">Number of parallel jobs to run. May also be specified with the\n<code class=\"hljs\">build.jobs</code> <a href=\"commands/../reference/config.html\">config value</a>. Defaults to\nthe number of logical CPUs. If negative, it sets the maximum number of\nparallel jobs to the number of logical CPUs plus provided value. If\na string <code class=\"hljs\">default</code> is provided, it sets the value back to defaults.\nShould not be 0.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---keep-going\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---keep-going\"></a><code class=\"hljs\">--keep-going</code></dt>\n<dd class=\"option-desc\">Build as many crates in the dependency graph as possible, rather than aborting\nthe build on the first one that fails to build.<p></p>\n<p>For example if the current package depends on dependencies <code class=\"hljs\">fails</code> and <code class=\"hljs\">works</code>,\none of which fails to build, <code class=\"hljs\">cargo install -j1</code> may or may not build the\none that succeeds (depending on which one of the two builds Cargo picked to run\nfirst), whereas <code class=\"hljs\">cargo install -j1 --keep-going</code> would definitely run both\nbuilds, even if the one run first fails.</p></dd>\n</dl>\n<h3 id=\"display-options-23\"><a class=\"header\" href=\"#display-options-23\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-install--v\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-install---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install--q\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-install---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---color\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-install---message-format\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---message-format\"></a><code class=\"hljs\">--message-format</code> <em>fmt</em></dt>\n<dd class=\"option-desc\">The output format for diagnostic messages. Can be specified multiple times\nand consists of comma-separated values. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">human</code> (default): Display in a human-readable text format. Conflicts with\n<code class=\"hljs\">short</code> and <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">short</code>: Emit shorter, human-readable text messages. Conflicts with <code class=\"hljs\">human</code>\nand <code class=\"hljs\">json</code>.</li>\n<li><code class=\"hljs\">json</code>: Emit JSON messages to stdout. See\n<a href=\"commands/../reference/external-tools.html#json-messages\">the reference</a>\nfor more details. Conflicts with <code class=\"hljs\">human</code> and <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-short</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages contains\nthe “short” rendering from rustc. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-diagnostic-rendered-ansi</code>: Ensure the <code class=\"hljs\">rendered</code> field of JSON messages\ncontains embedded ANSI color codes for respecting rustc’s default color\nscheme. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n<li><code class=\"hljs\">json-render-diagnostics</code>: Instruct Cargo to not include rustc diagnostics\nin JSON messages printed, but instead Cargo itself should render the\nJSON diagnostics coming from rustc. Cargo’s own JSON diagnostics and others\ncoming from rustc are still emitted. Cannot be used with <code class=\"hljs\">human</code> or <code class=\"hljs\">short</code>.</li>\n</ul></dd>\n</dl>\n<h3 id=\"common-options-23\"><a class=\"header\" href=\"#common-options-23\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-install-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install---config\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install--C\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-install--h\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-install---help\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-install--Z\"><a class=\"option-anchor\" href=\"commands/cargo-install.html#option-cargo-install--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-23\"><a class=\"header\" href=\"#environment-23\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-23\"><a class=\"header\" href=\"#exit-status-23\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-27\"><a class=\"header\" href=\"#examples-27\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Install or upgrade a package from crates.io:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo install ripgrep\n</code></pre>\n</li>\n<li>\n<p>Install or reinstall the package in the current directory:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo install --path .\n</code></pre>\n</li>\n<li>\n<p>View the list of installed packages:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo install --list\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-26\"><a class=\"header\" href=\"#see-also-26\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-uninstall.html\">cargo-uninstall(1)</a>, <a href=\"commands/cargo-search.html\">cargo-search(1)</a>, <a href=\"commands/cargo-publish.html\">cargo-publish(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-new1\"><a class=\"header\" href=\"#cargo-new1\">cargo-new(1)</a></h1>\n<h2 id=\"name-27\"><a class=\"header\" href=\"#name-27\">NAME</a></h2>\n<p>cargo-new — Create a new Cargo package</p>\n<h2 id=\"synopsis-27\"><a class=\"header\" href=\"#synopsis-27\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo new</code> [<em>options</em>] <em>path</em></p>\n<h2 id=\"description-27\"><a class=\"header\" href=\"#description-27\">DESCRIPTION</a></h2>\n<p>This command will create a new Cargo package in the given directory. This\nincludes a simple template with a <code class=\"hljs\">Cargo.toml</code> manifest, sample source file,\nand a VCS ignore file. If the directory is not already in a VCS repository,\nthen a new repository is created (see <code class=\"hljs\">--vcs</code> below).</p>\n<p>See <a href=\"commands/cargo-init.html\">cargo-init(1)</a> for a similar command which will create a new manifest\nin an existing directory.</p>\n<h2 id=\"options-26\"><a class=\"header\" href=\"#options-26\">OPTIONS</a></h2>\n<h3 id=\"new-options\"><a class=\"header\" href=\"#new-options\">New Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-new---bin\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new---bin\"></a><code class=\"hljs\">--bin</code></dt>\n<dd class=\"option-desc\">Create a package with a binary target (<code class=\"hljs\">src/main.rs</code>).\nThis is the default behavior.</dd>\n<dt class=\"option-term\" id=\"option-cargo-new---lib\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new---lib\"></a><code class=\"hljs\">--lib</code></dt>\n<dd class=\"option-desc\">Create a package with a library target (<code class=\"hljs\">src/lib.rs</code>).</dd>\n<dt class=\"option-term\" id=\"option-cargo-new---edition\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new---edition\"></a><code class=\"hljs\">--edition</code> <em>edition</em></dt>\n<dd class=\"option-desc\">Specify the Rust edition to use. Default is 2021.\nPossible values: 2015, 2018, 2021, 2024</dd>\n<dt class=\"option-term\" id=\"option-cargo-new---name\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new---name\"></a><code class=\"hljs\">--name</code> <em>name</em></dt>\n<dd class=\"option-desc\">Set the package name. Defaults to the directory name.</dd>\n<dt class=\"option-term\" id=\"option-cargo-new---vcs\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new---vcs\"></a><code class=\"hljs\">--vcs</code> <em>vcs</em></dt>\n<dd class=\"option-desc\">Initialize a new VCS repository for the given version control system (git,\nhg, pijul, or fossil) or do not initialize any version control at all\n(none). If not specified, defaults to <code class=\"hljs\">git</code> or the configuration value\n<code class=\"hljs\">cargo-new.vcs</code>, or <code class=\"hljs\">none</code> if already inside a VCS repository.</dd>\n<dt class=\"option-term\" id=\"option-cargo-new---registry\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new---registry\"></a><code class=\"hljs\">--registry</code> <em>registry</em></dt>\n<dd class=\"option-desc\">This sets the <code class=\"hljs\">publish</code> field in <code class=\"hljs\">Cargo.toml</code> to the given registry name\nwhich will restrict publishing only to that registry.<p></p>\n<p>Registry names are defined in <a href=\"commands/../reference/config.html\">Cargo config files</a>.\nIf not specified, the default registry defined by the <code class=\"hljs\">registry.default</code>\nconfig key is used. If the default registry is not set and <code class=\"hljs\">--registry</code> is not\nused, the <code class=\"hljs\">publish</code> field will not be set which means that publishing will not\nbe restricted.</p></dd>\n</dl>\n<h3 id=\"display-options-24\"><a class=\"header\" href=\"#display-options-24\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-new--v\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-new---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-new--q\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-new---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-new---color\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"common-options-24\"><a class=\"header\" href=\"#common-options-24\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-new-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-new---config\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-new--C\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-new--h\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-new---help\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-new--Z\"><a class=\"option-anchor\" href=\"commands/cargo-new.html#option-cargo-new--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-24\"><a class=\"header\" href=\"#environment-24\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-24\"><a class=\"header\" href=\"#exit-status-24\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-28\"><a class=\"header\" href=\"#examples-28\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Create a binary Cargo package in the given directory:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo new foo\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-27\"><a class=\"header\" href=\"#see-also-27\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-init.html\">cargo-init(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-search1\"><a class=\"header\" href=\"#cargo-search1\">cargo-search(1)</a></h1>\n<h2 id=\"name-28\"><a class=\"header\" href=\"#name-28\">NAME</a></h2>\n<p>cargo-search — Search packages in the registry. Default registry is crates.io</p>\n<h2 id=\"synopsis-28\"><a class=\"header\" href=\"#synopsis-28\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo search</code> [<em>options</em>] [<em>query</em>…]</p>\n<h2 id=\"description-28\"><a class=\"header\" href=\"#description-28\">DESCRIPTION</a></h2>\n<p>This performs a textual search for crates on <a href=\"https://crates.io\">https://crates.io</a>. The matching\ncrates will be displayed along with their description in TOML format suitable\nfor copying into a <code class=\"hljs\">Cargo.toml</code> manifest.</p>\n<h2 id=\"options-27\"><a class=\"header\" href=\"#options-27\">OPTIONS</a></h2>\n<h3 id=\"search-options\"><a class=\"header\" href=\"#search-options\">Search Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-search---limit\"><a class=\"option-anchor\" href=\"commands/cargo-search.html#option-cargo-search---limit\"></a><code class=\"hljs\">--limit</code> <em>limit</em></dt>\n<dd class=\"option-desc\">Limit the number of results (default: 10, max: 100).</dd>\n<dt class=\"option-term\" id=\"option-cargo-search---index\"><a class=\"option-anchor\" href=\"commands/cargo-search.html#option-cargo-search---index\"></a><code class=\"hljs\">--index</code> <em>index</em></dt>\n<dd class=\"option-desc\">The URL of the registry index to use.</dd>\n<dt class=\"option-term\" id=\"option-cargo-search---registry\"><a class=\"option-anchor\" href=\"commands/cargo-search.html#option-cargo-search---registry\"></a><code class=\"hljs\">--registry</code> <em>registry</em></dt>\n<dd class=\"option-desc\">Name of the registry to use. Registry names are defined in <a href=\"commands/../reference/config.html\">Cargo config\nfiles</a>. If not specified, the default registry is used,\nwhich is defined by the <code class=\"hljs\">registry.default</code> config key which defaults to\n<code class=\"hljs\">crates-io</code>.</dd>\n</dl>\n<h3 id=\"display-options-25\"><a class=\"header\" href=\"#display-options-25\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-search--v\"><a class=\"option-anchor\" href=\"commands/cargo-search.html#option-cargo-search--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-search---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-search.html#option-cargo-search---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-search--q\"><a class=\"option-anchor\" href=\"commands/cargo-search.html#option-cargo-search--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-search---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-search.html#option-cargo-search---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-search---color\"><a class=\"option-anchor\" href=\"commands/cargo-search.html#option-cargo-search---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"common-options-25\"><a class=\"header\" href=\"#common-options-25\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-search-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-search.html#option-cargo-search-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-search---config\"><a class=\"option-anchor\" href=\"commands/cargo-search.html#option-cargo-search---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-search--C\"><a class=\"option-anchor\" href=\"commands/cargo-search.html#option-cargo-search--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-search--h\"><a class=\"option-anchor\" href=\"commands/cargo-search.html#option-cargo-search--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-search---help\"><a class=\"option-anchor\" href=\"commands/cargo-search.html#option-cargo-search---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-search--Z\"><a class=\"option-anchor\" href=\"commands/cargo-search.html#option-cargo-search--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-25\"><a class=\"header\" href=\"#environment-25\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-25\"><a class=\"header\" href=\"#exit-status-25\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-29\"><a class=\"header\" href=\"#examples-29\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Search for a package from crates.io:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo search serde\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-28\"><a class=\"header\" href=\"#see-also-28\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-install.html\">cargo-install(1)</a>, <a href=\"commands/cargo-publish.html\">cargo-publish(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-uninstall1\"><a class=\"header\" href=\"#cargo-uninstall1\">cargo-uninstall(1)</a></h1>\n<h2 id=\"name-29\"><a class=\"header\" href=\"#name-29\">NAME</a></h2>\n<p>cargo-uninstall — Remove a Rust binary</p>\n<h2 id=\"synopsis-29\"><a class=\"header\" href=\"#synopsis-29\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo uninstall</code> [<em>options</em>] [<em>spec</em>…]</p>\n<h2 id=\"description-29\"><a class=\"header\" href=\"#description-29\">DESCRIPTION</a></h2>\n<p>This command removes a package installed with <a href=\"commands/cargo-install.html\">cargo-install(1)</a>. The <em>spec</em>\nargument is a package ID specification of the package to remove (see\n<a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a>).</p>\n<p>By default all binaries are removed for a crate but the <code class=\"hljs\">--bin</code> and\n<code class=\"hljs\">--example</code> flags can be used to only remove particular binaries.</p>\n<p>The installation root is determined, in order of precedence:</p>\n<ul>\n<li><code class=\"hljs\">--root</code> option</li>\n<li><code class=\"hljs\">CARGO_INSTALL_ROOT</code> environment variable</li>\n<li><code class=\"hljs\">install.root</code> Cargo <a href=\"commands/../reference/config.html\">config value</a></li>\n<li><code class=\"hljs\">CARGO_HOME</code> environment variable</li>\n<li><code class=\"hljs\">$HOME/.cargo</code></li>\n</ul>\n<h2 id=\"options-28\"><a class=\"header\" href=\"#options-28\">OPTIONS</a></h2>\n<h3 id=\"install-options-1\"><a class=\"header\" href=\"#install-options-1\">Install Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-uninstall--p\"><a class=\"option-anchor\" href=\"commands/cargo-uninstall.html#option-cargo-uninstall--p\"></a><code class=\"hljs\">-p</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-uninstall---package\"><a class=\"option-anchor\" href=\"commands/cargo-uninstall.html#option-cargo-uninstall---package\"></a><code class=\"hljs\">--package</code> <em>spec</em>…</dt>\n<dd class=\"option-desc\">Package to uninstall.</dd>\n<dt class=\"option-term\" id=\"option-cargo-uninstall---bin\"><a class=\"option-anchor\" href=\"commands/cargo-uninstall.html#option-cargo-uninstall---bin\"></a><code class=\"hljs\">--bin</code> <em>name</em>…</dt>\n<dd class=\"option-desc\">Only uninstall the binary <em>name</em>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-uninstall---root\"><a class=\"option-anchor\" href=\"commands/cargo-uninstall.html#option-cargo-uninstall---root\"></a><code class=\"hljs\">--root</code> <em>dir</em></dt>\n<dd class=\"option-desc\">Directory to uninstall packages from.</dd>\n</dl>\n<h3 id=\"display-options-26\"><a class=\"header\" href=\"#display-options-26\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-uninstall--v\"><a class=\"option-anchor\" href=\"commands/cargo-uninstall.html#option-cargo-uninstall--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-uninstall---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-uninstall.html#option-cargo-uninstall---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-uninstall--q\"><a class=\"option-anchor\" href=\"commands/cargo-uninstall.html#option-cargo-uninstall--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-uninstall---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-uninstall.html#option-cargo-uninstall---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-uninstall---color\"><a class=\"option-anchor\" href=\"commands/cargo-uninstall.html#option-cargo-uninstall---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"common-options-26\"><a class=\"header\" href=\"#common-options-26\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-uninstall-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-uninstall.html#option-cargo-uninstall-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-uninstall---config\"><a class=\"option-anchor\" href=\"commands/cargo-uninstall.html#option-cargo-uninstall---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-uninstall--C\"><a class=\"option-anchor\" href=\"commands/cargo-uninstall.html#option-cargo-uninstall--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-uninstall--h\"><a class=\"option-anchor\" href=\"commands/cargo-uninstall.html#option-cargo-uninstall--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-uninstall---help\"><a class=\"option-anchor\" href=\"commands/cargo-uninstall.html#option-cargo-uninstall---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-uninstall--Z\"><a class=\"option-anchor\" href=\"commands/cargo-uninstall.html#option-cargo-uninstall--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-26\"><a class=\"header\" href=\"#environment-26\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-26\"><a class=\"header\" href=\"#exit-status-26\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-30\"><a class=\"header\" href=\"#examples-30\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Uninstall a previously installed package.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo uninstall ripgrep\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-29\"><a class=\"header\" href=\"#see-also-29\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-install.html\">cargo-install(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"publishing-commands-1\"><a class=\"header\" href=\"#publishing-commands-1\">Publishing Commands</a></h1>\n<ul>\n<li><a href=\"commands/cargo-login.html\">cargo login</a></li>\n<li><a href=\"commands/cargo-logout.html\">cargo logout</a></li>\n<li><a href=\"commands/cargo-owner.html\">cargo owner</a></li>\n<li><a href=\"commands/cargo-package.html\">cargo package</a></li>\n<li><a href=\"commands/cargo-publish.html\">cargo publish</a></li>\n<li><a href=\"commands/cargo-yank.html\">cargo yank</a></li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-login1\"><a class=\"header\" href=\"#cargo-login1\">cargo-login(1)</a></h1>\n<h2 id=\"name-30\"><a class=\"header\" href=\"#name-30\">NAME</a></h2>\n<p>cargo-login — Log in to a registry</p>\n<h2 id=\"synopsis-30\"><a class=\"header\" href=\"#synopsis-30\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo login</code> [<em>options</em>] [<em>token</em>] [<code class=\"hljs\">--</code> <em>args</em>]</p>\n<h2 id=\"description-30\"><a class=\"header\" href=\"#description-30\">DESCRIPTION</a></h2>\n<p>This command will run a credential provider to save a token so that commands\nthat require authentication, such as <a href=\"commands/cargo-publish.html\">cargo-publish(1)</a>, will be\nautomatically authenticated.</p>\n<p>All the arguments following the two dashes (<code class=\"hljs\">--</code>) are passed to the credential provider.</p>\n<p>For the default <code class=\"hljs\">cargo:token</code> credential provider, the token is saved\nin <code class=\"hljs\">$CARGO_HOME/credentials.toml</code>. <code class=\"hljs\">CARGO_HOME</code> defaults to <code class=\"hljs\">.cargo</code>\nin your home directory.</p>\n<p>If a registry has a credential-provider specified, it will be used. Otherwise,\nthe providers from the config value <code class=\"hljs\">registry.global-credential-providers</code> will\nbe attempted, starting from the end of the list.</p>\n<p>If the <em>token</em> argument is not specified, it will be read from stdin.</p>\n<p>The API token for crates.io may be retrieved from <a href=\"https://crates.io/me\">https://crates.io/me</a>.</p>\n<p>Take care to keep the token secret, it should not be shared with anyone else.</p>\n<h2 id=\"options-29\"><a class=\"header\" href=\"#options-29\">OPTIONS</a></h2>\n<h3 id=\"login-options\"><a class=\"header\" href=\"#login-options\">Login Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-login---registry\"><a class=\"option-anchor\" href=\"commands/cargo-login.html#option-cargo-login---registry\"></a><code class=\"hljs\">--registry</code> <em>registry</em></dt>\n<dd class=\"option-desc\">Name of the registry to use. Registry names are defined in <a href=\"commands/../reference/config.html\">Cargo config\nfiles</a>. If not specified, the default registry is used,\nwhich is defined by the <code class=\"hljs\">registry.default</code> config key which defaults to\n<code class=\"hljs\">crates-io</code>.</dd>\n</dl>\n<h3 id=\"display-options-27\"><a class=\"header\" href=\"#display-options-27\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-login--v\"><a class=\"option-anchor\" href=\"commands/cargo-login.html#option-cargo-login--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-login---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-login.html#option-cargo-login---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-login--q\"><a class=\"option-anchor\" href=\"commands/cargo-login.html#option-cargo-login--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-login---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-login.html#option-cargo-login---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-login---color\"><a class=\"option-anchor\" href=\"commands/cargo-login.html#option-cargo-login---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"common-options-27\"><a class=\"header\" href=\"#common-options-27\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-login-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-login.html#option-cargo-login-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-login---config\"><a class=\"option-anchor\" href=\"commands/cargo-login.html#option-cargo-login---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-login--C\"><a class=\"option-anchor\" href=\"commands/cargo-login.html#option-cargo-login--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-login--h\"><a class=\"option-anchor\" href=\"commands/cargo-login.html#option-cargo-login--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-login---help\"><a class=\"option-anchor\" href=\"commands/cargo-login.html#option-cargo-login---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-login--Z\"><a class=\"option-anchor\" href=\"commands/cargo-login.html#option-cargo-login--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-27\"><a class=\"header\" href=\"#environment-27\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-27\"><a class=\"header\" href=\"#exit-status-27\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-31\"><a class=\"header\" href=\"#examples-31\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Save the token for the default registry:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo login\n</code></pre>\n</li>\n<li>\n<p>Save the token for a specific registry:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo login --registry my-registry\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-30\"><a class=\"header\" href=\"#see-also-30\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-logout.html\">cargo-logout(1)</a>, <a href=\"commands/cargo-publish.html\">cargo-publish(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-logout1\"><a class=\"header\" href=\"#cargo-logout1\">cargo-logout(1)</a></h1>\n<h2 id=\"name-31\"><a class=\"header\" href=\"#name-31\">NAME</a></h2>\n<p>cargo-logout — Remove an API token from the registry locally</p>\n<h2 id=\"synopsis-31\"><a class=\"header\" href=\"#synopsis-31\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo logout</code> [<em>options</em>]</p>\n<h2 id=\"description-31\"><a class=\"header\" href=\"#description-31\">DESCRIPTION</a></h2>\n<p>This command will run a credential provider to remove a saved token.</p>\n<p>For the default <code class=\"hljs\">cargo:token</code> credential provider, credentials are stored\nin <code class=\"hljs\">$CARGO_HOME/credentials.toml</code> where <code class=\"hljs\">$CARGO_HOME</code> defaults to <code class=\"hljs\">.cargo</code>\nin your home directory.</p>\n<p>If a registry has a credential-provider specified, it will be used. Otherwise,\nthe providers from the config value <code class=\"hljs\">registry.global-credential-providers</code> will\nbe attempted, starting from the end of the list.</p>\n<p>If <code class=\"hljs\">--registry</code> is not specified, then the credentials for the default\nregistry will be removed (configured by\n<a href=\"commands/../reference/config.html#registrydefault\"><code class=\"hljs\">registry.default</code></a>, which defaults\nto <a href=\"https://crates.io/\">https://crates.io/</a>).</p>\n<p>This will not revoke the token on the server. If you need to revoke the token,\nvisit the registry website and follow its instructions (see\n<a href=\"https://crates.io/me\">https://crates.io/me</a> to revoke the token for <a href=\"https://crates.io/\">https://crates.io/</a>).</p>\n<h2 id=\"options-30\"><a class=\"header\" href=\"#options-30\">OPTIONS</a></h2>\n<h3 id=\"logout-options\"><a class=\"header\" href=\"#logout-options\">Logout Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-logout---registry\"><a class=\"option-anchor\" href=\"commands/cargo-logout.html#option-cargo-logout---registry\"></a><code class=\"hljs\">--registry</code> <em>registry</em></dt>\n<dd class=\"option-desc\">Name of the registry to use. Registry names are defined in <a href=\"commands/../reference/config.html\">Cargo config\nfiles</a>. If not specified, the default registry is used,\nwhich is defined by the <code class=\"hljs\">registry.default</code> config key which defaults to\n<code class=\"hljs\">crates-io</code>.</dd>\n</dl>\n<h3 id=\"display-options-28\"><a class=\"header\" href=\"#display-options-28\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-logout--v\"><a class=\"option-anchor\" href=\"commands/cargo-logout.html#option-cargo-logout--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-logout---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-logout.html#option-cargo-logout---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-logout--q\"><a class=\"option-anchor\" href=\"commands/cargo-logout.html#option-cargo-logout--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-logout---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-logout.html#option-cargo-logout---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-logout---color\"><a class=\"option-anchor\" href=\"commands/cargo-logout.html#option-cargo-logout---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"common-options-28\"><a class=\"header\" href=\"#common-options-28\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-logout-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-logout.html#option-cargo-logout-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-logout---config\"><a class=\"option-anchor\" href=\"commands/cargo-logout.html#option-cargo-logout---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-logout--C\"><a class=\"option-anchor\" href=\"commands/cargo-logout.html#option-cargo-logout--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-logout--h\"><a class=\"option-anchor\" href=\"commands/cargo-logout.html#option-cargo-logout--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-logout---help\"><a class=\"option-anchor\" href=\"commands/cargo-logout.html#option-cargo-logout---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-logout--Z\"><a class=\"option-anchor\" href=\"commands/cargo-logout.html#option-cargo-logout--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-28\"><a class=\"header\" href=\"#environment-28\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-28\"><a class=\"header\" href=\"#exit-status-28\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-32\"><a class=\"header\" href=\"#examples-32\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Remove the default registry token:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo logout\n</code></pre>\n</li>\n<li>\n<p>Remove the token for a specific registry:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo logout --registry my-registry\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-31\"><a class=\"header\" href=\"#see-also-31\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-login.html\">cargo-login(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-owner1\"><a class=\"header\" href=\"#cargo-owner1\">cargo-owner(1)</a></h1>\n<h2 id=\"name-32\"><a class=\"header\" href=\"#name-32\">NAME</a></h2>\n<p>cargo-owner — Manage the owners of a crate on the registry</p>\n<h2 id=\"synopsis-32\"><a class=\"header\" href=\"#synopsis-32\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo owner</code> [<em>options</em>] <code class=\"hljs\">--add</code> <em>login</em> [<em>crate</em>]<br>\n<code class=\"hljs\">cargo owner</code> [<em>options</em>] <code class=\"hljs\">--remove</code> <em>login</em> [<em>crate</em>]<br>\n<code class=\"hljs\">cargo owner</code> [<em>options</em>] <code class=\"hljs\">--list</code> [<em>crate</em>]</p>\n<h2 id=\"description-32\"><a class=\"header\" href=\"#description-32\">DESCRIPTION</a></h2>\n<p>This command will modify the owners for a crate on the registry. Owners of a\ncrate can upload new versions and yank old versions. Non-team owners can also\nmodify the set of owners, so take care!</p>\n<p>This command requires you to be authenticated with either the <code class=\"hljs\">--token</code> option\nor using <a href=\"commands/cargo-login.html\">cargo-login(1)</a>.</p>\n<p>If the crate name is not specified, it will use the package name from the\ncurrent directory.</p>\n<p>See <a href=\"commands/../reference/publishing.html#cargo-owner\">the reference</a> for more\ninformation about owners and publishing.</p>\n<h2 id=\"options-31\"><a class=\"header\" href=\"#options-31\">OPTIONS</a></h2>\n<h3 id=\"owner-options\"><a class=\"header\" href=\"#owner-options\">Owner Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-owner--a\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner--a\"></a><code class=\"hljs\">-a</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-owner---add\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner---add\"></a><code class=\"hljs\">--add</code> <em>login</em>…</dt>\n<dd class=\"option-desc\">Invite the given user or team as an owner.</dd>\n<dt class=\"option-term\" id=\"option-cargo-owner--r\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner--r\"></a><code class=\"hljs\">-r</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-owner---remove\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner---remove\"></a><code class=\"hljs\">--remove</code> <em>login</em>…</dt>\n<dd class=\"option-desc\">Remove the given user or team as an owner.</dd>\n<dt class=\"option-term\" id=\"option-cargo-owner--l\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner--l\"></a><code class=\"hljs\">-l</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-owner---list\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner---list\"></a><code class=\"hljs\">--list</code></dt>\n<dd class=\"option-desc\">List owners of a crate.</dd>\n<dt class=\"option-term\" id=\"option-cargo-owner---token\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner---token\"></a><code class=\"hljs\">--token</code> <em>token</em></dt>\n<dd class=\"option-desc\">API token to use when authenticating. This overrides the token stored in\nthe credentials file (which is created by <a href=\"commands/cargo-login.html\">cargo-login(1)</a>).<p></p>\n<p><a href=\"commands/../reference/config.html\">Cargo config</a> environment variables can be\nused to override the tokens stored in the credentials file. The token for\ncrates.io may be specified with the <code class=\"hljs\">CARGO_REGISTRY_TOKEN</code> environment\nvariable. Tokens for other registries may be specified with environment\nvariables of the form <code class=\"hljs\">CARGO_REGISTRIES_NAME_TOKEN</code> where <code class=\"hljs\">NAME</code> is the name\nof the registry in all capital letters.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-owner---index\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner---index\"></a><code class=\"hljs\">--index</code> <em>index</em></dt>\n<dd class=\"option-desc\">The URL of the registry index to use.</dd>\n<dt class=\"option-term\" id=\"option-cargo-owner---registry\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner---registry\"></a><code class=\"hljs\">--registry</code> <em>registry</em></dt>\n<dd class=\"option-desc\">Name of the registry to use. Registry names are defined in <a href=\"commands/../reference/config.html\">Cargo config\nfiles</a>. If not specified, the default registry is used,\nwhich is defined by the <code class=\"hljs\">registry.default</code> config key which defaults to\n<code class=\"hljs\">crates-io</code>.</dd>\n</dl>\n<h3 id=\"display-options-29\"><a class=\"header\" href=\"#display-options-29\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-owner--v\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-owner---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-owner--q\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-owner---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-owner---color\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"common-options-29\"><a class=\"header\" href=\"#common-options-29\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-owner-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-owner---config\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-owner--C\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-owner--h\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-owner---help\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-owner--Z\"><a class=\"option-anchor\" href=\"commands/cargo-owner.html#option-cargo-owner--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-29\"><a class=\"header\" href=\"#environment-29\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-29\"><a class=\"header\" href=\"#exit-status-29\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-33\"><a class=\"header\" href=\"#examples-33\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>List owners of a package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo owner --list foo\n</code></pre>\n</li>\n<li>\n<p>Invite an owner to a package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo owner --add username foo\n</code></pre>\n</li>\n<li>\n<p>Remove an owner from a package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo owner --remove username foo\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-32\"><a class=\"header\" href=\"#see-also-32\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-login.html\">cargo-login(1)</a>, <a href=\"commands/cargo-publish.html\">cargo-publish(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-package1\"><a class=\"header\" href=\"#cargo-package1\">cargo-package(1)</a></h1>\n<h2 id=\"name-33\"><a class=\"header\" href=\"#name-33\">NAME</a></h2>\n<p>cargo-package — Assemble the local package into a distributable tarball</p>\n<h2 id=\"synopsis-33\"><a class=\"header\" href=\"#synopsis-33\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo package</code> [<em>options</em>]</p>\n<h2 id=\"description-33\"><a class=\"header\" href=\"#description-33\">DESCRIPTION</a></h2>\n<p>This command will create a distributable, compressed <code class=\"hljs\">.crate</code> file with the\nsource code of the package in the current directory. The resulting file will\nbe stored in the <code class=\"hljs\">target/package</code> directory. This performs the following\nsteps:</p>\n<ol>\n<li>Load and check the current workspace, performing some basic checks.\n<ul>\n<li>Path dependencies are not allowed unless they have a version key. Cargo\nwill ignore the path key for dependencies in published packages.\n<code class=\"hljs\">dev-dependencies</code> do not have this restriction.</li>\n</ul>\n</li>\n<li>Create the compressed <code class=\"hljs\">.crate</code> file.\n<ul>\n<li>The original <code class=\"hljs\">Cargo.toml</code> file is rewritten and normalized.</li>\n<li><code class=\"hljs\">[patch]</code>, <code class=\"hljs\">[replace]</code>, and <code class=\"hljs\">[workspace]</code> sections are removed from the\nmanifest.</li>\n<li><code class=\"hljs\">Cargo.lock</code> is automatically included if the package contains an\nexecutable binary or example target. <a href=\"commands/cargo-install.html\">cargo-install(1)</a> will use the\npackaged lock file if the <code class=\"hljs\">--locked</code> flag is used.</li>\n<li>A <code class=\"hljs\">.cargo_vcs_info.json</code> file is included that contains information\nabout the current VCS checkout hash if available (not included with\n<code class=\"hljs\">--allow-dirty</code>).</li>\n</ul>\n</li>\n<li>Extract the <code class=\"hljs\">.crate</code> file and build it to verify it can build.\n<ul>\n<li>This will rebuild your package from scratch to ensure that it can be\nbuilt from a pristine state. The <code class=\"hljs\">--no-verify</code> flag can be used to skip\nthis step.</li>\n</ul>\n</li>\n<li>Check that build scripts did not modify any source files.</li>\n</ol>\n<p>The list of files included can be controlled with the <code class=\"hljs\">include</code> and <code class=\"hljs\">exclude</code>\nfields in the manifest.</p>\n<p>See <a href=\"commands/../reference/publishing.html\">the reference</a> for more details about\npackaging and publishing.</p>\n<h3 id=\"cargo_vcs_infojson-format\"><a class=\"header\" href=\"#cargo_vcs_infojson-format\">.cargo_vcs_info.json format</a></h3>\n<p>Will generate a <code class=\"hljs\">.cargo_vcs_info.json</code> in the following format</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n <span class=\"hljs-string\">\"git\"</span>: {\n   <span class=\"hljs-string\">\"sha1\"</span>: <span class=\"hljs-string\">\"aac20b6e7e543e6dd4118b246c77225e3a3a1302\"</span>\n },\n <span class=\"hljs-string\">\"path_in_vcs\"</span>: <span class=\"hljs-string\">\"\"</span>\n}\n</code></pre>\n<p><code class=\"hljs\">path_in_vcs</code> will be set to a repo-relative path for packages\nin subdirectories of the version control repository.</p>\n<p>The compatibility of this file is maintained under the same policy\nas the JSON output of <a href=\"commands/cargo-metadata.html\">cargo-metadata(1)</a>.</p>\n<p>Note that this file provides a best-effort snapshot of the VCS information.\nHowever, the provenance of the package is not verified.\nThere is no guarantee that the source code in the tarball matches the VCS information.</p>\n<h2 id=\"options-32\"><a class=\"header\" href=\"#options-32\">OPTIONS</a></h2>\n<h3 id=\"package-options\"><a class=\"header\" href=\"#package-options\">Package Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-package--l\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package--l\"></a><code class=\"hljs\">-l</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-package---list\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---list\"></a><code class=\"hljs\">--list</code></dt>\n<dd class=\"option-desc\">Print files included in a package without making one.</dd>\n<dt class=\"option-term\" id=\"option-cargo-package---no-verify\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---no-verify\"></a><code class=\"hljs\">--no-verify</code></dt>\n<dd class=\"option-desc\">Don’t verify the contents by building them.</dd>\n<dt class=\"option-term\" id=\"option-cargo-package---no-metadata\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---no-metadata\"></a><code class=\"hljs\">--no-metadata</code></dt>\n<dd class=\"option-desc\">Ignore warnings about a lack of human-usable metadata (such as the description\nor the license).</dd>\n<dt class=\"option-term\" id=\"option-cargo-package---allow-dirty\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---allow-dirty\"></a><code class=\"hljs\">--allow-dirty</code></dt>\n<dd class=\"option-desc\">Allow working directories with uncommitted VCS changes to be packaged.</dd>\n</dl>\n<h3 id=\"package-selection-14\"><a class=\"header\" href=\"#package-selection-14\">Package Selection</a></h3>\n<p>By default, when no package selection options are given, the packages selected\ndepend on the selected manifest file (based on the current working directory if\n<code class=\"hljs\">--manifest-path</code> is not given). If the manifest is the root of a workspace then\nthe workspaces default members are selected, otherwise only the package defined\nby the manifest will be selected.</p>\n<p>The default members of a workspace can be set explicitly with the\n<code class=\"hljs\">workspace.default-members</code> key in the root manifest. If this is not set, a\nvirtual workspace will include all workspace members (equivalent to passing\n<code class=\"hljs\">--workspace</code>), and a non-virtual workspace will include only the root crate itself.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-package--p\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package--p\"></a><code class=\"hljs\">-p</code> <em>spec</em>…</dt>\n<dt class=\"option-term\" id=\"option-cargo-package---package\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---package\"></a><code class=\"hljs\">--package</code> <em>spec</em>…</dt>\n<dd class=\"option-desc\">Package only the specified packages. See <a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a> for the\nSPEC format. This flag may be specified multiple times and supports common Unix\nglob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell accidentally\nexpanding glob patterns before Cargo handles them, you must use single quotes or\ndouble quotes around each pattern.</dd>\n<dt class=\"option-term\" id=\"option-cargo-package---workspace\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---workspace\"></a><code class=\"hljs\">--workspace</code></dt>\n<dd class=\"option-desc\">Package all members in the workspace.</dd>\n<dt class=\"option-term\" id=\"option-cargo-package---exclude\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---exclude\"></a><code class=\"hljs\">--exclude</code> <em>SPEC</em>…</dt>\n<dd class=\"option-desc\">Exclude the specified packages. Must be used in conjunction with the\n<code class=\"hljs\">--workspace</code> flag. This flag may be specified multiple times and supports\ncommon Unix glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code> and <code class=\"hljs\">[]</code>. However, to avoid your shell\naccidentally expanding glob patterns before Cargo handles them, you must use\nsingle quotes or double quotes around each pattern.</dd>\n</dl>\n<h3 id=\"compilation-options-10\"><a class=\"header\" href=\"#compilation-options-10\">Compilation Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-package---target\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---target\"></a><code class=\"hljs\">--target</code> <em>triple</em></dt>\n<dd class=\"option-desc\">Package for the given architecture. The default is the host architecture. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code>. Run <code class=\"hljs\">rustc --print target-list</code> for a\nlist of supported targets. This flag may be specified multiple times.<p></p>\n<p>This may also be specified with the <code class=\"hljs\">build.target</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p>\n<p>Note that specifying this flag makes Cargo run in a different mode where the\ntarget artifacts are placed in a separate directory. See the\n<a href=\"commands/../guide/build-cache.html\">build cache</a> documentation for more details.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-package---target-dir\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---target-dir\"></a><code class=\"hljs\">--target-dir</code> <em>directory</em></dt>\n<dd class=\"option-desc\">Directory for all generated artifacts and intermediate files. May also be\nspecified with the <code class=\"hljs\">CARGO_TARGET_DIR</code> environment variable, or the\n<code class=\"hljs\">build.target-dir</code> <a href=\"commands/../reference/config.html\">config value</a>.\nDefaults to <code class=\"hljs\">target</code> in the root of the workspace.</dd>\n</dl>\n<h3 id=\"feature-selection-12\"><a class=\"header\" href=\"#feature-selection-12\">Feature Selection</a></h3>\n<p>The feature flags allow you to control which features are enabled. When no\nfeature options are given, the <code class=\"hljs\">default</code> feature is activated for every\nselected package.</p>\n<p>See <a href=\"commands/../reference/features.html#command-line-feature-options\">the features documentation</a>\nfor more details.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-package--F\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package--F\"></a><code class=\"hljs\">-F</code> <em>features</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-package---features\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---features\"></a><code class=\"hljs\">--features</code> <em>features</em></dt>\n<dd class=\"option-desc\">Space or comma separated list of features to activate. Features of workspace\nmembers may be enabled with <code class=\"hljs\">package-name/feature-name</code> syntax. This flag may\nbe specified multiple times, which enables all specified features.</dd>\n<dt class=\"option-term\" id=\"option-cargo-package---all-features\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---all-features\"></a><code class=\"hljs\">--all-features</code></dt>\n<dd class=\"option-desc\">Activate all available features of all selected packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-package---no-default-features\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---no-default-features\"></a><code class=\"hljs\">--no-default-features</code></dt>\n<dd class=\"option-desc\">Do not activate the <code class=\"hljs\">default</code> feature of the selected packages.</dd>\n</dl>\n<h3 id=\"manifest-options-23\"><a class=\"header\" href=\"#manifest-options-23\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-package---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-package---locked\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-package---offline\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-package---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"miscellaneous-options-11\"><a class=\"header\" href=\"#miscellaneous-options-11\">Miscellaneous Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-package--j\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package--j\"></a><code class=\"hljs\">-j</code> <em>N</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-package---jobs\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---jobs\"></a><code class=\"hljs\">--jobs</code> <em>N</em></dt>\n<dd class=\"option-desc\">Number of parallel jobs to run. May also be specified with the\n<code class=\"hljs\">build.jobs</code> <a href=\"commands/../reference/config.html\">config value</a>. Defaults to\nthe number of logical CPUs. If negative, it sets the maximum number of\nparallel jobs to the number of logical CPUs plus provided value. If\na string <code class=\"hljs\">default</code> is provided, it sets the value back to defaults.\nShould not be 0.</dd>\n<dt class=\"option-term\" id=\"option-cargo-package---keep-going\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---keep-going\"></a><code class=\"hljs\">--keep-going</code></dt>\n<dd class=\"option-desc\">Build as many crates in the dependency graph as possible, rather than aborting\nthe build on the first one that fails to build.<p></p>\n<p>For example if the current package depends on dependencies <code class=\"hljs\">fails</code> and <code class=\"hljs\">works</code>,\none of which fails to build, <code class=\"hljs\">cargo package -j1</code> may or may not build the\none that succeeds (depending on which one of the two builds Cargo picked to run\nfirst), whereas <code class=\"hljs\">cargo package -j1 --keep-going</code> would definitely run both\nbuilds, even if the one run first fails.</p></dd>\n</dl>\n<h3 id=\"display-options-30\"><a class=\"header\" href=\"#display-options-30\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-package--v\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-package---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-package--q\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-package---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-package---color\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"common-options-30\"><a class=\"header\" href=\"#common-options-30\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-package-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-package---config\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-package--C\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-package--h\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-package---help\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-package--Z\"><a class=\"option-anchor\" href=\"commands/cargo-package.html#option-cargo-package--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-30\"><a class=\"header\" href=\"#environment-30\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-30\"><a class=\"header\" href=\"#exit-status-30\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-34\"><a class=\"header\" href=\"#examples-34\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Create a compressed <code class=\"hljs\">.crate</code> file of the current package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo package\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-33\"><a class=\"header\" href=\"#see-also-33\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-publish.html\">cargo-publish(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-publish1\"><a class=\"header\" href=\"#cargo-publish1\">cargo-publish(1)</a></h1>\n<h2 id=\"name-34\"><a class=\"header\" href=\"#name-34\">NAME</a></h2>\n<p>cargo-publish — Upload a package to the registry</p>\n<h2 id=\"synopsis-34\"><a class=\"header\" href=\"#synopsis-34\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo publish</code> [<em>options</em>]</p>\n<h2 id=\"description-34\"><a class=\"header\" href=\"#description-34\">DESCRIPTION</a></h2>\n<p>This command will create a distributable, compressed <code class=\"hljs\">.crate</code> file with the\nsource code of the package in the current directory and upload it to a\nregistry. The default registry is <a href=\"https://crates.io\">https://crates.io</a>. This performs the\nfollowing steps:</p>\n<ol>\n<li>Performs a few checks, including:\n<ul>\n<li>Checks the <code class=\"hljs\">package.publish</code> key in the manifest for restrictions on\nwhich registries you are allowed to publish to.</li>\n</ul>\n</li>\n<li>Create a <code class=\"hljs\">.crate</code> file by following the steps in <a href=\"commands/cargo-package.html\">cargo-package(1)</a>.</li>\n<li>Upload the crate to the registry. The server will perform additional\nchecks on the crate.</li>\n<li>The client will poll waiting for the package to appear in the index,\nand may timeout. In that case, you will need to check for completion\nmanually. This timeout does not affect the upload.</li>\n</ol>\n<p>This command requires you to be authenticated with either the <code class=\"hljs\">--token</code> option\nor using <a href=\"commands/cargo-login.html\">cargo-login(1)</a>.</p>\n<p>See <a href=\"commands/../reference/publishing.html\">the reference</a> for more details about\npackaging and publishing.</p>\n<h2 id=\"options-33\"><a class=\"header\" href=\"#options-33\">OPTIONS</a></h2>\n<h3 id=\"publish-options\"><a class=\"header\" href=\"#publish-options\">Publish Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-publish---dry-run\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---dry-run\"></a><code class=\"hljs\">--dry-run</code></dt>\n<dd class=\"option-desc\">Perform all checks without uploading.</dd>\n<dt class=\"option-term\" id=\"option-cargo-publish---token\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---token\"></a><code class=\"hljs\">--token</code> <em>token</em></dt>\n<dd class=\"option-desc\">API token to use when authenticating. This overrides the token stored in\nthe credentials file (which is created by <a href=\"commands/cargo-login.html\">cargo-login(1)</a>).<p></p>\n<p><a href=\"commands/../reference/config.html\">Cargo config</a> environment variables can be\nused to override the tokens stored in the credentials file. The token for\ncrates.io may be specified with the <code class=\"hljs\">CARGO_REGISTRY_TOKEN</code> environment\nvariable. Tokens for other registries may be specified with environment\nvariables of the form <code class=\"hljs\">CARGO_REGISTRIES_NAME_TOKEN</code> where <code class=\"hljs\">NAME</code> is the name\nof the registry in all capital letters.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-publish---no-verify\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---no-verify\"></a><code class=\"hljs\">--no-verify</code></dt>\n<dd class=\"option-desc\">Don’t verify the contents by building them.</dd>\n<dt class=\"option-term\" id=\"option-cargo-publish---allow-dirty\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---allow-dirty\"></a><code class=\"hljs\">--allow-dirty</code></dt>\n<dd class=\"option-desc\">Allow working directories with uncommitted VCS changes to be packaged.</dd>\n<dt class=\"option-term\" id=\"option-cargo-publish---index\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---index\"></a><code class=\"hljs\">--index</code> <em>index</em></dt>\n<dd class=\"option-desc\">The URL of the registry index to use.</dd>\n<dt class=\"option-term\" id=\"option-cargo-publish---registry\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---registry\"></a><code class=\"hljs\">--registry</code> <em>registry</em></dt>\n<dd class=\"option-desc\">Name of the registry to publish to. Registry names are defined in <a href=\"commands/../reference/config.html\">Cargo\nconfig files</a>. If not specified, and there is a\n<a href=\"commands/../reference/manifest.html#the-publish-field\"><code class=\"hljs\">package.publish</code></a> field in\n<code class=\"hljs\">Cargo.toml</code> with a single registry, then it will publish to that registry.\nOtherwise it will use the default registry, which is defined by the\n<a href=\"commands/../reference/config.html#registrydefault\"><code class=\"hljs\">registry.default</code></a> config key\nwhich defaults to <code class=\"hljs\">crates-io</code>.</dd>\n</dl>\n<h3 id=\"package-selection-15\"><a class=\"header\" href=\"#package-selection-15\">Package Selection</a></h3>\n<p>By default, the package in the current working directory is selected. The <code class=\"hljs\">-p</code>\nflag can be used to choose a different package in a workspace.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-publish--p\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish--p\"></a><code class=\"hljs\">-p</code> <em>spec</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-publish---package\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---package\"></a><code class=\"hljs\">--package</code> <em>spec</em></dt>\n<dd class=\"option-desc\">The package to publish. See <a href=\"commands/cargo-pkgid.html\">cargo-pkgid(1)</a> for the SPEC\nformat.</dd>\n</dl>\n<h3 id=\"compilation-options-11\"><a class=\"header\" href=\"#compilation-options-11\">Compilation Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-publish---target\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---target\"></a><code class=\"hljs\">--target</code> <em>triple</em></dt>\n<dd class=\"option-desc\">Publish for the given architecture. The default is the host architecture. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code>. Run <code class=\"hljs\">rustc --print target-list</code> for a\nlist of supported targets. This flag may be specified multiple times.<p></p>\n<p>This may also be specified with the <code class=\"hljs\">build.target</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p>\n<p>Note that specifying this flag makes Cargo run in a different mode where the\ntarget artifacts are placed in a separate directory. See the\n<a href=\"commands/../guide/build-cache.html\">build cache</a> documentation for more details.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-publish---target-dir\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---target-dir\"></a><code class=\"hljs\">--target-dir</code> <em>directory</em></dt>\n<dd class=\"option-desc\">Directory for all generated artifacts and intermediate files. May also be\nspecified with the <code class=\"hljs\">CARGO_TARGET_DIR</code> environment variable, or the\n<code class=\"hljs\">build.target-dir</code> <a href=\"commands/../reference/config.html\">config value</a>.\nDefaults to <code class=\"hljs\">target</code> in the root of the workspace.</dd>\n</dl>\n<h3 id=\"feature-selection-13\"><a class=\"header\" href=\"#feature-selection-13\">Feature Selection</a></h3>\n<p>The feature flags allow you to control which features are enabled. When no\nfeature options are given, the <code class=\"hljs\">default</code> feature is activated for every\nselected package.</p>\n<p>See <a href=\"commands/../reference/features.html#command-line-feature-options\">the features documentation</a>\nfor more details.</p>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-publish--F\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish--F\"></a><code class=\"hljs\">-F</code> <em>features</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-publish---features\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---features\"></a><code class=\"hljs\">--features</code> <em>features</em></dt>\n<dd class=\"option-desc\">Space or comma separated list of features to activate. Features of workspace\nmembers may be enabled with <code class=\"hljs\">package-name/feature-name</code> syntax. This flag may\nbe specified multiple times, which enables all specified features.</dd>\n<dt class=\"option-term\" id=\"option-cargo-publish---all-features\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---all-features\"></a><code class=\"hljs\">--all-features</code></dt>\n<dd class=\"option-desc\">Activate all available features of all selected packages.</dd>\n<dt class=\"option-term\" id=\"option-cargo-publish---no-default-features\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---no-default-features\"></a><code class=\"hljs\">--no-default-features</code></dt>\n<dd class=\"option-desc\">Do not activate the <code class=\"hljs\">default</code> feature of the selected packages.</dd>\n</dl>\n<h3 id=\"manifest-options-24\"><a class=\"header\" href=\"#manifest-options-24\">Manifest Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-publish---manifest-path\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---manifest-path\"></a><code class=\"hljs\">--manifest-path</code> <em>path</em></dt>\n<dd class=\"option-desc\">Path to the <code class=\"hljs\">Cargo.toml</code> file. By default, Cargo searches for the\n<code class=\"hljs\">Cargo.toml</code> file in the current directory or any parent directory.</dd>\n<dt class=\"option-term\" id=\"option-cargo-publish---locked\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---locked\"></a><code class=\"hljs\">--locked</code></dt>\n<dd class=\"option-desc\">Asserts that the exact same dependencies and versions are used as when the\nexisting <code class=\"hljs\">Cargo.lock</code> file was originally generated. Cargo will exit with an\nerror when either of the following scenarios arises:<p></p>\n<ul>\n<li>The lock file is missing.</li>\n<li>Cargo attempted to change the lock file due to a different dependency resolution.</li>\n</ul>\n<p>It may be used in environments where deterministic builds are desired,\nsuch as in CI pipelines.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-publish---offline\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---offline\"></a><code class=\"hljs\">--offline</code></dt>\n<dd class=\"option-desc\">Prevents Cargo from accessing the network for any reason. Without this\nflag, Cargo will stop with an error if it needs to access the network and\nthe network is not available. With this flag, Cargo will attempt to\nproceed without the network if possible.<p></p>\n<p>Beware that this may result in different dependency resolution than online\nmode. Cargo will restrict itself to crates that are downloaded locally, even\nif there might be a newer version as indicated in the local copy of the index.\nSee the <a href=\"commands/cargo-fetch.html\">cargo-fetch(1)</a> command to download dependencies before going\noffline.</p>\n<p>May also be specified with the <code class=\"hljs\">net.offline</code> <a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-publish---frozen\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---frozen\"></a><code class=\"hljs\">--frozen</code></dt>\n<dd class=\"option-desc\">Equivalent to specifying both <code class=\"hljs\">--locked</code> and <code class=\"hljs\">--offline</code>.</dd>\n</dl>\n<h3 id=\"miscellaneous-options-12\"><a class=\"header\" href=\"#miscellaneous-options-12\">Miscellaneous Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-publish--j\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish--j\"></a><code class=\"hljs\">-j</code> <em>N</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-publish---jobs\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---jobs\"></a><code class=\"hljs\">--jobs</code> <em>N</em></dt>\n<dd class=\"option-desc\">Number of parallel jobs to run. May also be specified with the\n<code class=\"hljs\">build.jobs</code> <a href=\"commands/../reference/config.html\">config value</a>. Defaults to\nthe number of logical CPUs. If negative, it sets the maximum number of\nparallel jobs to the number of logical CPUs plus provided value. If\na string <code class=\"hljs\">default</code> is provided, it sets the value back to defaults.\nShould not be 0.</dd>\n<dt class=\"option-term\" id=\"option-cargo-publish---keep-going\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---keep-going\"></a><code class=\"hljs\">--keep-going</code></dt>\n<dd class=\"option-desc\">Build as many crates in the dependency graph as possible, rather than aborting\nthe build on the first one that fails to build.<p></p>\n<p>For example if the current package depends on dependencies <code class=\"hljs\">fails</code> and <code class=\"hljs\">works</code>,\none of which fails to build, <code class=\"hljs\">cargo publish -j1</code> may or may not build the\none that succeeds (depending on which one of the two builds Cargo picked to run\nfirst), whereas <code class=\"hljs\">cargo publish -j1 --keep-going</code> would definitely run both\nbuilds, even if the one run first fails.</p></dd>\n</dl>\n<h3 id=\"display-options-31\"><a class=\"header\" href=\"#display-options-31\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-publish--v\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-publish---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-publish--q\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-publish---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-publish---color\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"common-options-31\"><a class=\"header\" href=\"#common-options-31\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-publish-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-publish---config\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-publish--C\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-publish--h\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-publish---help\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-publish--Z\"><a class=\"option-anchor\" href=\"commands/cargo-publish.html#option-cargo-publish--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-31\"><a class=\"header\" href=\"#environment-31\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-31\"><a class=\"header\" href=\"#exit-status-31\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-35\"><a class=\"header\" href=\"#examples-35\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Publish the current package:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo publish\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-34\"><a class=\"header\" href=\"#see-also-34\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-package.html\">cargo-package(1)</a>, <a href=\"commands/cargo-login.html\">cargo-login(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cargo-yank1\"><a class=\"header\" href=\"#cargo-yank1\">cargo-yank(1)</a></h1>\n<h2 id=\"name-35\"><a class=\"header\" href=\"#name-35\">NAME</a></h2>\n<p>cargo-yank — Remove a pushed crate from the index</p>\n<h2 id=\"synopsis-35\"><a class=\"header\" href=\"#synopsis-35\">SYNOPSIS</a></h2>\n<p><code class=\"hljs\">cargo yank</code> [<em>options</em>] <em>crate</em>@<em>version</em><br>\n<code class=\"hljs\">cargo yank</code> [<em>options</em>] <code class=\"hljs\">--version</code> <em>version</em> [<em>crate</em>]</p>\n<h2 id=\"description-35\"><a class=\"header\" href=\"#description-35\">DESCRIPTION</a></h2>\n<p>The yank command removes a previously published crate’s version from the\nserver’s index. This command does not delete any data, and the crate will\nstill be available for download via the registry’s download link.</p>\n<p>Cargo will not use a yanked version for any new project or checkout without a\npre-existing lockfile, and will generate an error if there are no longer\nany compatible versions for your crate.</p>\n<p>This command requires you to be authenticated with either the <code class=\"hljs\">--token</code> option\nor using <a href=\"commands/cargo-login.html\">cargo-login(1)</a>.</p>\n<p>If the crate name is not specified, it will use the package name from the\ncurrent directory.</p>\n<h3 id=\"how-yank-works\"><a class=\"header\" href=\"#how-yank-works\">How yank works</a></h3>\n<p>For example, the <code class=\"hljs\">foo</code> crate published version <code class=\"hljs\">1.5.0</code> and another crate <code class=\"hljs\">bar</code>\ndeclared a dependency on version <code class=\"hljs\">foo = \"1.5\"</code>. Now <code class=\"hljs\">foo</code> releases a new, but\nnot semver compatible, version <code class=\"hljs\">2.0.0</code>, and finds a critical issue with <code class=\"hljs\">1.5.0</code>.\nIf <code class=\"hljs\">1.5.0</code> is yanked, no new project or checkout without an existing lockfile\nwill be able to use crate <code class=\"hljs\">bar</code> as it relies on <code class=\"hljs\">1.5</code>.</p>\n<p>In this case, the maintainers of <code class=\"hljs\">foo</code> should first publish a semver compatible\nversion such as <code class=\"hljs\">1.5.1</code> prior to yanking <code class=\"hljs\">1.5.0</code> so that <code class=\"hljs\">bar</code> and all projects\nthat depend on <code class=\"hljs\">bar</code> will continue to work.</p>\n<p>As another example, consider a crate <code class=\"hljs\">bar</code> with published versions <code class=\"hljs\">1.5.0</code>,\n<code class=\"hljs\">1.5.1</code>, <code class=\"hljs\">1.5.2</code>, <code class=\"hljs\">2.0.0</code> and <code class=\"hljs\">3.0.0</code>. The following table identifies the\nversions cargo could use in the absence of a lockfile for different SemVer\nrequirements, following a given release being yanked:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Yanked Version / SemVer requirement</th><th><code class=\"hljs\">bar = \"1.5.0\"</code></th><th><code class=\"hljs\">bar = \"=1.5.0\"</code></th><th><code class=\"hljs\">bar = \"2.0.0\"</code></th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">1.5.0</code></td><td>Use either <code class=\"hljs\">1.5.1</code> or <code class=\"hljs\">1.5.2</code></td><td><strong>Return Error</strong></td><td>Use <code class=\"hljs\">2.0.0</code></td></tr>\n<tr><td><code class=\"hljs\">1.5.1</code></td><td>Use either <code class=\"hljs\">1.5.0</code> or <code class=\"hljs\">1.5.2</code></td><td>Use <code class=\"hljs\">1.5.0</code></td><td>Use <code class=\"hljs\">2.0.0</code></td></tr>\n<tr><td><code class=\"hljs\">2.0.0</code></td><td>Use either <code class=\"hljs\">1.5.0</code>, <code class=\"hljs\">1.5.1</code> or <code class=\"hljs\">1.5.2</code></td><td>Use <code class=\"hljs\">1.5.0</code></td><td><strong>Return Error</strong></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"when-to-yank\"><a class=\"header\" href=\"#when-to-yank\">When to yank</a></h3>\n<p>Crates should only be yanked in exceptional circumstances, for example, an\naccidental publish, an unintentional SemVer breakages, or a significantly\nbroken and unusable crate. In the case of security vulnerabilities, <a href=\"https://rustsec.org/\">RustSec</a>\nis typically a less disruptive mechanism to inform users and encourage them\nto upgrade, and avoids the possibility of significant downstream disruption\nirrespective of susceptibility to the vulnerability in question.</p>\n<p>A common workflow is to yank a crate having already published a semver\ncompatible version, to reduce the probability of preventing dependent\ncrates from compiling.</p>\n<p>When addressing copyright, licensing, or personal data issues with a published\ncrate, simply yanking it may not suffice. In such cases, contact the maintainers\nof the registry you used. For crates.io, refer to their <a href=\"https://crates.io/policies\">policies</a> and contact\nthem at <a href=\"mailto:commands/help@crates.io\">help@crates.io</a>.</p>\n<p>If credentials have been leaked, the recommended course of action is to revoke\nthem immediately. Once a crate has been published, it is impossible to determine\nif the leaked credentials have been copied. Yanking the crate only prevents new\nusers from downloading it, but cannot stop those who have already downloaded it\nfrom keeping or even spreading the leaked credentials.</p>\n<h2 id=\"options-34\"><a class=\"header\" href=\"#options-34\">OPTIONS</a></h2>\n<h3 id=\"yank-options\"><a class=\"header\" href=\"#yank-options\">Yank Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-yank---vers\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank---vers\"></a><code class=\"hljs\">--vers</code> <em>version</em></dt>\n<dt class=\"option-term\" id=\"option-cargo-yank---version\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank---version\"></a><code class=\"hljs\">--version</code> <em>version</em></dt>\n<dd class=\"option-desc\">The version to yank or un-yank.</dd>\n<dt class=\"option-term\" id=\"option-cargo-yank---undo\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank---undo\"></a><code class=\"hljs\">--undo</code></dt>\n<dd class=\"option-desc\">Undo a yank, putting a version back into the index.</dd>\n<dt class=\"option-term\" id=\"option-cargo-yank---token\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank---token\"></a><code class=\"hljs\">--token</code> <em>token</em></dt>\n<dd class=\"option-desc\">API token to use when authenticating. This overrides the token stored in\nthe credentials file (which is created by <a href=\"commands/cargo-login.html\">cargo-login(1)</a>).<p></p>\n<p><a href=\"commands/../reference/config.html\">Cargo config</a> environment variables can be\nused to override the tokens stored in the credentials file. The token for\ncrates.io may be specified with the <code class=\"hljs\">CARGO_REGISTRY_TOKEN</code> environment\nvariable. Tokens for other registries may be specified with environment\nvariables of the form <code class=\"hljs\">CARGO_REGISTRIES_NAME_TOKEN</code> where <code class=\"hljs\">NAME</code> is the name\nof the registry in all capital letters.</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-yank---index\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank---index\"></a><code class=\"hljs\">--index</code> <em>index</em></dt>\n<dd class=\"option-desc\">The URL of the registry index to use.</dd>\n<dt class=\"option-term\" id=\"option-cargo-yank---registry\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank---registry\"></a><code class=\"hljs\">--registry</code> <em>registry</em></dt>\n<dd class=\"option-desc\">Name of the registry to use. Registry names are defined in <a href=\"commands/../reference/config.html\">Cargo config\nfiles</a>. If not specified, the default registry is used,\nwhich is defined by the <code class=\"hljs\">registry.default</code> config key which defaults to\n<code class=\"hljs\">crates-io</code>.</dd>\n</dl>\n<h3 id=\"display-options-32\"><a class=\"header\" href=\"#display-options-32\">Display Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-yank--v\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank--v\"></a><code class=\"hljs\">-v</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-yank---verbose\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank---verbose\"></a><code class=\"hljs\">--verbose</code></dt>\n<dd class=\"option-desc\">Use verbose output. May be specified twice for “very verbose” output which\nincludes extra output such as dependency warnings and build script output.\nMay also be specified with the <code class=\"hljs\">term.verbose</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-yank--q\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank--q\"></a><code class=\"hljs\">-q</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-yank---quiet\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank---quiet\"></a><code class=\"hljs\">--quiet</code></dt>\n<dd class=\"option-desc\">Do not print cargo log messages.\nMay also be specified with the <code class=\"hljs\">term.quiet</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</dd>\n<dt class=\"option-term\" id=\"option-cargo-yank---color\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank---color\"></a><code class=\"hljs\">--color</code> <em>when</em></dt>\n<dd class=\"option-desc\">Control when colored output is used. Valid values:<p></p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>May also be specified with the <code class=\"hljs\">term.color</code>\n<a href=\"commands/../reference/config.html\">config value</a>.</p></dd>\n</dl>\n<h3 id=\"common-options-32\"><a class=\"header\" href=\"#common-options-32\">Common Options</a></h3>\n<dl>\n<dt class=\"option-term\" id=\"option-cargo-yank-+toolchain\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank-+toolchain\"></a><code class=\"hljs\">+</code><em>toolchain</em></dt>\n<dd class=\"option-desc\">If Cargo has been installed with rustup, and the first argument to <code class=\"hljs\">cargo</code>\nbegins with <code class=\"hljs\">+</code>, it will be interpreted as a rustup toolchain name (such\nas <code class=\"hljs\">+stable</code> or <code class=\"hljs\">+nightly</code>).\nSee the <a href=\"https://rust-lang.github.io/rustup/overrides.html\">rustup documentation</a>\nfor more information about how toolchain overrides work.</dd>\n<dt class=\"option-term\" id=\"option-cargo-yank---config\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank---config\"></a><code class=\"hljs\">--config</code> <em>KEY=VALUE</em> or <em>PATH</em></dt>\n<dd class=\"option-desc\">Overrides a Cargo configuration value. The argument should be in TOML syntax of <code class=\"hljs\">KEY=VALUE</code>,\nor provided as a path to an extra configuration file. This flag may be specified multiple times.\nSee the <a href=\"commands/../reference/config.html#command-line-overrides\">command-line overrides section</a> for more information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-yank--C\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank--C\"></a><code class=\"hljs\">-C</code> <em>PATH</em></dt>\n<dd class=\"option-desc\">Changes the current working directory before executing any specified operations. This affects\nthings like where cargo looks by default for the project manifest (<code class=\"hljs\">Cargo.toml</code>), as well as\nthe directories searched for discovering <code class=\"hljs\">.cargo/config.toml</code>, for example. This option must\nappear before the command name, for example <code class=\"hljs\">cargo -C path/to/my-project build</code>.<p></p>\n<p>This option is only available on the <a href=\"https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\">nightly\nchannel</a> and\nrequires the <code class=\"hljs\">-Z unstable-options</code> flag to enable (see\n<a href=\"https://github.com/rust-lang/cargo/issues/10098\">#10098</a>).</p></dd>\n<dt class=\"option-term\" id=\"option-cargo-yank--h\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank--h\"></a><code class=\"hljs\">-h</code></dt>\n<dt class=\"option-term\" id=\"option-cargo-yank---help\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank---help\"></a><code class=\"hljs\">--help</code></dt>\n<dd class=\"option-desc\">Prints help information.</dd>\n<dt class=\"option-term\" id=\"option-cargo-yank--Z\"><a class=\"option-anchor\" href=\"commands/cargo-yank.html#option-cargo-yank--Z\"></a><code class=\"hljs\">-Z</code> <em>flag</em></dt>\n<dd class=\"option-desc\">Unstable (nightly-only) flags to Cargo. Run <code class=\"hljs\">cargo -Z help</code> for details.</dd>\n</dl>\n<h2 id=\"environment-32\"><a class=\"header\" href=\"#environment-32\">ENVIRONMENT</a></h2>\n<p>See <a href=\"commands/../reference/environment-variables.html\">the reference</a> for\ndetails on environment variables that Cargo reads.</p>\n<h2 id=\"exit-status-32\"><a class=\"header\" href=\"#exit-status-32\">EXIT STATUS</a></h2>\n<ul>\n<li><code class=\"hljs\">0</code>: Cargo succeeded.</li>\n<li><code class=\"hljs\">101</code>: Cargo failed to complete.</li>\n</ul>\n<h2 id=\"examples-36\"><a class=\"header\" href=\"#examples-36\">EXAMPLES</a></h2>\n<ol>\n<li>\n<p>Yank a crate from the index:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo yank foo@1.0.7\n</code></pre>\n</li>\n</ol>\n<h2 id=\"see-also-35\"><a class=\"header\" href=\"#see-also-35\">SEE ALSO</a></h2>\n<p><a href=\"commands/cargo.html\">cargo(1)</a>, <a href=\"commands/cargo-login.html\">cargo-login(1)</a>, <a href=\"commands/cargo-publish.html\">cargo-publish(1)</a></p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"frequently-asked-questions\"><a class=\"header\" href=\"#frequently-asked-questions\">Frequently Asked Questions</a></h1>\n<h2 id=\"is-the-plan-to-use-github-as-a-package-repository\"><a class=\"header\" href=\"#is-the-plan-to-use-github-as-a-package-repository\">Is the plan to use GitHub as a package repository?</a></h2>\n<p>No. The plan for Cargo is to use <a href=\"https://crates.io/\">crates.io</a>, like npm or Rubygems do with\n<a href=\"https://www.npmjs.com\">npmjs.com</a> and <a href=\"https://rubygems.org\">rubygems.org</a>.</p>\n<p>We plan to support git repositories as a source of packages forever,\nbecause they can be used for early development and temporary patches,\neven when people use the registry as the primary source of packages.</p>\n<h2 id=\"why-build-cratesio-rather-than-use-github-as-a-registry\"><a class=\"header\" href=\"#why-build-cratesio-rather-than-use-github-as-a-registry\">Why build crates.io rather than use GitHub as a registry?</a></h2>\n<p>We think that it’s very important to support multiple ways to download\npackages, including downloading from GitHub and copying packages into\nyour package itself.</p>\n<p>That said, we think that <a href=\"https://crates.io/\">crates.io</a> offers a number of important benefits, and\nwill likely become the primary way that people download packages in Cargo.</p>\n<p>For precedent, both Node.js’s <a href=\"https://www.npmjs.com\">npm</a> and Ruby’s <a href=\"https://bundler.io\">bundler</a> support both a\ncentral registry model as well as a Git-based model, and most packages\nare downloaded through the registry in those ecosystems, with an\nimportant minority of packages making use of git-based packages.</p>\n<p>Some of the advantages that make a central registry popular in other\nlanguages include:</p>\n<ul>\n<li><strong>Discoverability</strong>. A central registry provides an easy place to look\nfor existing packages. Combined with tagging, this also makes it\npossible for a registry to provide ecosystem-wide information, such as a\nlist of the most popular or most-depended-on packages.</li>\n<li><strong>Speed</strong>. A central registry makes it possible to easily fetch just\nthe metadata for packages quickly and efficiently, and then to\nefficiently download just the published package, and not other bloat\nthat happens to exist in the repository. This adds up to a significant\nimprovement in the speed of dependency resolution and fetching. As\ndependency graphs scale up, downloading all of the git repositories bogs\ndown fast. Also remember that not everybody has a high-speed,\nlow-latency Internet connection.</li>\n</ul>\n<h2 id=\"will-cargo-work-with-c-code-or-other-languages\"><a class=\"header\" href=\"#will-cargo-work-with-c-code-or-other-languages\">Will Cargo work with C code (or other languages)?</a></h2>\n<p>Yes!</p>\n<p>Cargo handles compiling Rust code, but we know that many Rust packages\nlink against C code. We also know that there are decades of tooling\nbuilt up around compiling languages other than Rust.</p>\n<p>Our solution: Cargo allows a package to <a href=\"reference/build-scripts.html\">specify a script</a>\n(written in Rust) to run before invoking <code class=\"hljs\">rustc</code>. Rust is leveraged to\nimplement platform-specific configuration and refactor out common build\nfunctionality among packages.</p>\n<h2 id=\"can-cargo-be-used-inside-of-make-or-ninja-or-\"><a class=\"header\" href=\"#can-cargo-be-used-inside-of-make-or-ninja-or-\">Can Cargo be used inside of <code>make</code> (or <code>ninja</code>, or …)</a></h2>\n<p>Indeed. While we intend Cargo to be useful as a standalone way to\ncompile Rust packages at the top-level, we know that some people will\nwant to invoke Cargo from other build tools.</p>\n<p>We have designed Cargo to work well in those contexts, paying attention\nto things like error codes and machine-readable output modes. We still\nhave some work to do on those fronts, but using Cargo in the context of\nconventional scripts is something we designed for from the beginning and\nwill continue to prioritize.</p>\n<h2 id=\"does-cargo-handle-multi-platform-packages-or-cross-compilation\"><a class=\"header\" href=\"#does-cargo-handle-multi-platform-packages-or-cross-compilation\">Does Cargo handle multi-platform packages or cross-compilation?</a></h2>\n<p>Rust itself provides facilities for configuring sections of code based\non the platform. Cargo also supports <a href=\"reference/specifying-dependencies.html#platform-specific-dependencies\">platform-specific\ndependencies</a>, and we plan to support more per-platform\nconfiguration in <code class=\"hljs\">Cargo.toml</code> in the future.</p>\n<p>In the longer-term, we’re looking at ways to conveniently cross-compile\npackages using Cargo.</p>\n<h2 id=\"does-cargo-support-environments-like-production-or-test\"><a class=\"header\" href=\"#does-cargo-support-environments-like-production-or-test\">Does Cargo support environments, like <code>production</code> or <code>test</code>?</a></h2>\n<p>We support environments through the use of <a href=\"reference/profiles.html\">profiles</a> to support:</p>\n<ul>\n<li>environment-specific flags (like <code class=\"hljs\">-g --opt-level=0</code> for development\nand <code class=\"hljs\">--opt-level=3</code> for production).</li>\n<li>environment-specific dependencies (like <code class=\"hljs\">hamcrest</code> for test assertions).</li>\n<li>environment-specific <code class=\"hljs\">#[cfg]</code></li>\n<li>a <code class=\"hljs\">cargo test</code> command</li>\n</ul>\n<h2 id=\"does-cargo-work-on-windows\"><a class=\"header\" href=\"#does-cargo-work-on-windows\">Does Cargo work on Windows?</a></h2>\n<p>Yes!</p>\n<p>All commits to Cargo are required to pass the local test suite on Windows.\nIf you encounter an issue while running on Windows, we consider it a bug, so <a href=\"https://github.com/rust-lang/cargo/issues\">please file an\nissue</a>.</p>\n<h2 id=\"why-have-cargolock-in-version-control\"><a class=\"header\" href=\"#why-have-cargolock-in-version-control\">Why have <code>Cargo.lock</code> in version control?</a></h2>\n<p>While <a href=\"commands/cargo-new.html\"><code class=\"hljs\">cargo new</code></a> defaults to tracking <code class=\"hljs\">Cargo.lock</code> in version control,\nwhether you do is dependent on the needs of your package.</p>\n<p>The purpose of a <code class=\"hljs\">Cargo.lock</code> lockfile is to describe the state of the world at\nthe time of a successful build.\nCargo uses the lockfile to provide deterministic builds at different times and\non different systems,\nby ensuring that the exact same dependencies and versions are used as when the\n<code class=\"hljs\">Cargo.lock</code> file was originally generated.</p>\n<p>Deterministic builds help with</p>\n<ul>\n<li>Running <code class=\"hljs\">git bisect</code> to find the root cause of a bug</li>\n<li>Ensuring CI only fails due to new commits and not external factors</li>\n<li>Reducing confusion when contributors see different behavior as compared to\nother contributors or CI</li>\n</ul>\n<p>Having this snapshot of dependencies can also help when projects need to be\nverified against consistent versions of dependencies, like when</p>\n<ul>\n<li>Verifying a minimum-supported Rust version (MSRV) that is less than the latest\nversion of a dependency supports</li>\n<li>Verifying human readable output which won’t have compatibility guarantees\n(e.g. snapshot testing error messages to ensure they are “understandable”, a\nmetric too fuzzy to automate)</li>\n</ul>\n<p>However, this determinism can give a false sense of security because\n<code class=\"hljs\">Cargo.lock</code> does not affect the consumers of your package, only <code class=\"hljs\">Cargo.toml</code> does that.\nFor example:</p>\n<ul>\n<li><a href=\"commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> will select the latest dependencies unless <code class=\"hljs\">--locked</code> is\npassed in.</li>\n<li>New dependencies, like those added with <a href=\"commands/cargo-add.html\"><code class=\"hljs\">cargo add</code></a>, will be locked to the latest version</li>\n</ul>\n<p>The lockfile can also be a source of merge conflicts.</p>\n<p>For strategies to verify newer versions of dependencies via CI,\nsee <a href=\"guide/continuous-integration.html#verifying-latest-dependencies\">Verifying Latest Dependencies</a>.</p>\n<h2 id=\"can-libraries-use--as-a-version-for-their-dependencies\"><a class=\"header\" href=\"#can-libraries-use--as-a-version-for-their-dependencies\">Can libraries use <code>*</code> as a version for their dependencies?</a></h2>\n<p><strong>As of January 22nd, 2016, <a href=\"https://crates.io/\">crates.io</a> rejects all packages (not just libraries)\nwith wildcard dependency constraints.</strong></p>\n<p>While libraries <em>can</em>, strictly speaking, they should not. A version requirement\nof <code class=\"hljs\">*</code> says “This will work with every version ever”, which is never going\nto be true. Libraries should always specify the range that they do work with,\neven if it’s something as general as “every 1.x.y version”.</p>\n<h2 id=\"why-cargotoml\"><a class=\"header\" href=\"#why-cargotoml\">Why <code>Cargo.toml</code>?</a></h2>\n<p>As one of the most frequent interactions with Cargo, the question of why the\nconfiguration file is named <code class=\"hljs\">Cargo.toml</code> arises from time to time. The leading\ncapital-<code class=\"hljs\">C</code> was chosen to ensure that the manifest was grouped with other\nsimilar configuration files in directory listings. Sorting files often puts\ncapital letters before lowercase letters, ensuring files like <code class=\"hljs\">Makefile</code> and\n<code class=\"hljs\">Cargo.toml</code> are placed together. The trailing <code class=\"hljs\">.toml</code> was chosen to emphasize\nthe fact that the file is in the <a href=\"https://toml.io/\">TOML configuration\nformat</a>.</p>\n<p>Cargo does not allow other names such as <code class=\"hljs\">cargo.toml</code> or <code class=\"hljs\">Cargofile</code> to\nemphasize the ease of how a Cargo repository can be identified. An option of\nmany possible names has historically led to confusion where one case was handled\nbut others were accidentally forgotten.</p>\n<h2 id=\"how-can-cargo-work-offline\"><a class=\"header\" href=\"#how-can-cargo-work-offline\">How can Cargo work offline?</a></h2>\n<p>Cargo is often used in situations with limited or no network access such as\nairplanes, CI environments, or embedded in large production deployments. Users\nare often surprised when Cargo attempts to fetch resources from the network, and\nhence the request for Cargo to work offline comes up frequently.</p>\n<p>Cargo, at its heart, will not attempt to access the network unless told to do\nso. That is, if no crates come from crates.io, a git repository, or some other\nnetwork location, Cargo will never attempt to make a network connection. As a\nresult, if Cargo attempts to touch the network, then it’s because it needs to\nfetch a required resource.</p>\n<p>Cargo is also quite aggressive about caching information to minimize the amount\nof network activity. It will guarantee, for example, that if <code class=\"hljs\">cargo build</code> (or\nan equivalent) is run to completion then the next <code class=\"hljs\">cargo build</code> is guaranteed to\nnot touch the network so long as <code class=\"hljs\">Cargo.toml</code> has not been modified in the\nmeantime. This avoidance of the network boils down to a <code class=\"hljs\">Cargo.lock</code> existing\nand a populated cache of the crates reflected in the lock file. If either of\nthese components are missing, then they’re required for the build to succeed and\nmust be fetched remotely.</p>\n<p>As of Rust 1.11.0, Cargo understands a new flag, <code class=\"hljs\">--frozen</code>, which is an\nassertion that it shouldn’t touch the network. When passed, Cargo will\nimmediately return an error if it would otherwise attempt a network request.\nThe error should include contextual information about why the network request is\nbeing made in the first place to help debug as well. Note that this flag <em>does\nnot change the behavior of Cargo</em>, it simply asserts that Cargo shouldn’t touch\nthe network as a previous command has been run to ensure that network activity\nshouldn’t be necessary.</p>\n<p>The <code class=\"hljs\">--offline</code> flag was added in Rust 1.36.0. This flag tells Cargo to not\naccess the network, and try to proceed with available cached data if possible.\nYou can use <a href=\"commands/cargo-fetch.html\"><code class=\"hljs\">cargo fetch</code></a> in one project to download dependencies before\ngoing offline, and then use those same dependencies in another project with\nthe <code class=\"hljs\">--offline</code> flag (or <a href=\"reference/config.html#netoffline\">configuration value</a>).</p>\n<p>For more information about vendoring, see documentation on <a href=\"reference/source-replacement.html\">source\nreplacement</a>.</p>\n<h2 id=\"why-is-cargo-rebuilding-my-code\"><a class=\"header\" href=\"#why-is-cargo-rebuilding-my-code\">Why is Cargo rebuilding my code?</a></h2>\n<p>Cargo is responsible for incrementally compiling crates in your project. This\nmeans that if you type <code class=\"hljs\">cargo build</code> twice the second one shouldn’t rebuild your\ncrates.io dependencies, for example. Nevertheless bugs arise and Cargo can\nsometimes rebuild code when you’re not expecting it!</p>\n<p>We’ve long <a href=\"https://github.com/rust-lang/cargo/issues/2904\">wanted to provide better diagnostics about\nthis</a> but unfortunately haven’t\nbeen able to make progress on that issue in quite some time. In the meantime,\nhowever, you can debug a rebuild at least a little by setting the <code class=\"hljs\">CARGO_LOG</code>\nenvironment variable:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">$ CARGO_LOG=cargo::core::compiler::fingerprint=info cargo build\n</code></pre>\n<p>This will cause Cargo to print out a lot of information about diagnostics and\nrebuilding. This can often contain clues as to why your project is getting\nrebuilt, although you’ll often need to connect some dots yourself since this\noutput isn’t super easy to read just yet. Note that the <code class=\"hljs\">CARGO_LOG</code> needs to be\nset for the command that rebuilds when you think it should not. Unfortunately\nCargo has no way right now of after-the-fact debugging “why was that rebuilt?”</p>\n<p>Some issues we’ve seen historically which can cause crates to get rebuilt are:</p>\n<ul>\n<li>\n<p>A build script prints <code class=\"hljs\">cargo::rerun-if-changed=foo</code> where <code class=\"hljs\">foo</code> is a file that\ndoesn’t exist and nothing generates it. In this case Cargo will keep running\nthe build script thinking it will generate the file but nothing ever does. The\nfix is to avoid printing <code class=\"hljs\">rerun-if-changed</code> in this scenario.</p>\n</li>\n<li>\n<p>Two successive Cargo builds may differ in the set of features enabled for some\ndependencies. For example if the first build command builds the whole\nworkspace and the second command builds only one crate, this may cause a\ndependency on crates.io to have a different set of features enabled, causing\nit and everything that depends on it to get rebuilt. There’s unfortunately not\nreally a great fix for this, although if possible it’s best to have the set of\nfeatures enabled on a crate constant regardless of what you’re building in\nyour workspace.</p>\n</li>\n<li>\n<p>Some filesystems exhibit unusual behavior around timestamps. Cargo primarily\nuses timestamps on files to govern whether rebuilding needs to happen, but if\nyou’re using a nonstandard filesystem it may be affecting the timestamps\nsomehow (e.g. truncating them, causing them to drift, etc). In this scenario,\nfeel free to open an issue and we can see if we can accommodate the filesystem\nsomehow.</p>\n</li>\n<li>\n<p>A concurrent build process is either deleting artifacts or modifying files.\nSometimes you might have a background process that either tries to build or\ncheck your project. These background processes might surprisingly delete some\nbuild artifacts or touch files (or maybe just by accident), which can cause\nrebuilds to look spurious! The best fix here would be to wrangle the\nbackground process to avoid clashing with your work.</p>\n</li>\n</ul>\n<p>If after trying to debug your issue, however, you’re still running into problems\nthen feel free to <a href=\"https://github.com/rust-lang/cargo/issues/new\">open an\nissue</a>!</p>\n<h2 id=\"what-does-version-conflict-mean-and-how-to-resolve-it\"><a class=\"header\" href=\"#what-does-version-conflict-mean-and-how-to-resolve-it\">What does “version conflict” mean and how to resolve it?</a></h2>\n<blockquote>\n<p>failed to select a version for <code class=\"hljs\">x</code> which could resolve this conflict</p>\n</blockquote>\n<p>Have you seen the error message above?</p>\n<p>This is one of the most annoying error message for Cargo users. There are several\nsituations may lead us to a version conflict. Below we’ll walk through possible\ncauses and provide diagnostic techniques to help you out there:</p>\n<ul>\n<li>\n<p>The project and its dependencies use <a href=\"https://doc.rust-lang.org/cargo/reference/resolver.html#links\">links</a> to repeatedly link the local\nlibrary. Cargo forbids linking two packages with the same native library, so\neven with multiple layers of dependencies it is not allowed. In this case, the\nerror message will prompt: <code class=\"hljs\">Only one package in the dependency graph may specify the same links value</code>, you may need to manually check and delete duplicate link\nvalues. The community also have <a href=\"https://doc.rust-lang.org/cargo/reference/build-scripts.html#-sys-packages\">conventions in place</a> to alleviate this.</p>\n</li>\n<li>\n<p>When depending on different crates in the project, if these crates use the same\ndependent library, but the version used is restricted, making it impossible to\ndetermine the correct version, it will also cause conflicts. The error message\nwill prompt: <code class=\"hljs\">all possible versions conflict with previously selected packages</code>.\nYou may need to modify the version requirements to make them consistent.</p>\n</li>\n<li>\n<p>If there are multiple versions of dependencies in the project, when using\n<a href=\"https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#direct-minimal-versions\"><code class=\"hljs\">direct-minimal-versions</code></a>, the minimum version requirements cannot be met,\nwhich will cause conflicts. You may need to modify version requirements of your\ndirect dependencies to meet the minimum SemVer version accordingly.</p>\n</li>\n<li>\n<p>If the dependent crate does not have the features you choose, it will also\ncause conflicts. At this time, you need to check the dependent version and its\nfeatures.</p>\n</li>\n<li>\n<p>Conflicts may occur when merging branches or PRs, if there are non-trivial\nconflicts, you can reset all “yours” changes, fix all other conflicts in the\nbranch, and then run some cargo command (like <code class=\"hljs\">cargo tree</code> or <code class=\"hljs\">cargo check</code>),\nwhich should re-update the lockfile with your own local changes. If you previously\nran some <code class=\"hljs\">cargo update</code> commands in your branch, you can re-run them that this\ntime. The community has been looking to resolve merge conflicts with <code class=\"hljs\">Cargo.lock</code>\nand <code class=\"hljs\">Cargo.toml</code> using a <a href=\"https://github.com/rust-lang/cargo/issues/1818\">custom merge tool</a>.</p>\n</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"glossary\"><a class=\"header\" href=\"#glossary\">Glossary</a></h1>\n<h2 id=\"artifact\"><a class=\"header\" href=\"#artifact\">Artifact</a></h2>\n<p>An <em>artifact</em> is the file or set of files created as a result of the\ncompilation process. This includes linkable libraries, executable binaries,\nand generated documentation.</p>\n<h2 id=\"cargo-1\"><a class=\"header\" href=\"#cargo-1\">Cargo</a></h2>\n<p><em>Cargo</em> is the Rust <a href=\"appendix/glossary.html#package-manager\"><em>package manager</em></a>, and the primary\ntopic of this book.</p>\n<h2 id=\"cargolock\"><a class=\"header\" href=\"#cargolock\">Cargo.lock</a></h2>\n<p>See <a href=\"appendix/glossary.html#lock-file\"><em>lock file</em></a>.</p>\n<h2 id=\"cargotoml\"><a class=\"header\" href=\"#cargotoml\">Cargo.toml</a></h2>\n<p>See <a href=\"appendix/glossary.html#manifest\"><em>manifest</em></a>.</p>\n<h2 id=\"crate\"><a class=\"header\" href=\"#crate\">Crate</a></h2>\n<p>A Rust <em>crate</em> is either a library or an executable program, referred to as\neither a <em>library crate</em> or a <em>binary crate</em>, respectively.</p>\n<p>Every <a href=\"appendix/glossary.html#target\">target</a> defined for a Cargo <a href=\"appendix/glossary.html#package\">package</a> is a <em>crate</em>.</p>\n<p>Loosely, the term <em>crate</em> may refer to either the source code of the target or\nto the compiled artifact that the target produces. It may also refer to a\ncompressed package fetched from a <a href=\"appendix/glossary.html#registry\">registry</a>.</p>\n<p>The source code for a given crate may be subdivided into <a href=\"appendix/glossary.html#module\"><em>modules</em></a>.</p>\n<h2 id=\"edition-1\"><a class=\"header\" href=\"#edition-1\">Edition</a></h2>\n<p>A <em>Rust edition</em> is a developmental landmark of the Rust language. The\n<a href=\"appendix/../reference/manifest.html#the-edition-field\">edition of a package</a> is specified in the <code class=\"hljs\">Cargo.toml</code>\n<a href=\"appendix/glossary.html#manifest\">manifest</a>, and individual targets can specify which edition they\nuse. See the <a href=\"appendix/../../edition-guide/index.html\">Edition Guide</a> for more information.</p>\n<h2 id=\"feature\"><a class=\"header\" href=\"#feature\">Feature</a></h2>\n<p>The meaning of <em>feature</em> depends on the context:</p>\n<ul>\n<li>\n<p>A <a href=\"appendix/../reference/features.html\"><em>feature</em></a> is a named flag which allows for conditional\ncompilation. A feature can refer to an optional dependency, or an arbitrary\nname defined in a <code class=\"hljs\">Cargo.toml</code> <a href=\"appendix/glossary.html#manifest\">manifest</a> that can be checked\nwithin source code.</p>\n</li>\n<li>\n<p>Cargo has <a href=\"appendix/../reference/unstable.html\"><em>unstable feature flags</em></a> which can be used to\nenable experimental behavior of Cargo itself.</p>\n</li>\n<li>\n<p>The Rust compiler and Rustdoc have their own unstable feature flags (see\n<a href=\"https://doc.rust-lang.org/nightly/unstable-book/index.html\">The Unstable Book</a> and <a href=\"https://doc.rust-lang.org/nightly/rustdoc/unstable-features.html\">The Rustdoc\nBook</a>).</p>\n</li>\n<li>\n<p>CPU targets have <a href=\"appendix/../../reference/attributes/codegen.html#the-target_feature-attribute\"><em>target features</em></a> which specify\ncapabilities of a CPU.</p>\n</li>\n</ul>\n<h2 id=\"index\"><a class=\"header\" href=\"#index\">Index</a></h2>\n<p>The <em>index</em> is the searchable list of <a href=\"appendix/glossary.html#crate\"><em>crates</em></a> in a\n<a href=\"appendix/glossary.html#registry\"><em>registry</em></a>.</p>\n<h2 id=\"lock-file\"><a class=\"header\" href=\"#lock-file\">Lock file</a></h2>\n<p>The <code class=\"hljs\">Cargo.lock</code> <em>lock file</em> is a file that captures the exact version of\nevery dependency used in a <a href=\"appendix/glossary.html#workspace\"><em>workspace</em></a> or\n<a href=\"appendix/glossary.html#package\"><em>package</em></a>. It is automatically generated by Cargo. See\n<a href=\"appendix/../guide/cargo-toml-vs-cargo-lock.html\">Cargo.toml vs Cargo.lock</a>.</p>\n<h2 id=\"manifest\"><a class=\"header\" href=\"#manifest\">Manifest</a></h2>\n<p>A <a href=\"appendix/../reference/manifest.html\"><em>manifest</em></a> is a description of a <a href=\"appendix/glossary.html#package\">package</a> or a\n<a href=\"appendix/glossary.html#workspace\">workspace</a> in a file named <code class=\"hljs\">Cargo.toml</code>.</p>\n<p>A <a href=\"appendix/../reference/workspaces.html\"><em>virtual manifest</em></a> is a <code class=\"hljs\">Cargo.toml</code> file that only describes a\nworkspace, and does not include a package.</p>\n<h2 id=\"member\"><a class=\"header\" href=\"#member\">Member</a></h2>\n<p>A <em>member</em> is a <a href=\"appendix/glossary.html#package\"><em>package</em></a> that belongs to a\n<a href=\"appendix/glossary.html#workspace\"><em>workspace</em></a>.</p>\n<h2 id=\"module\"><a class=\"header\" href=\"#module\">Module</a></h2>\n<p>Rust’s module system is used to organize code into logical units called\n<em>modules</em>, which provide isolated namespaces within the code.</p>\n<p>The source code for a given <a href=\"appendix/glossary.html#crate\">crate</a> may be subdivided into one or more\nseparate modules. This is usually done to organize the code into areas of\nrelated functionality or to control the visible scope (public/private) of\nsymbols within the source (structs, functions, and so on).</p>\n<p>A <a href=\"appendix/glossary.html#manifest\"><code class=\"hljs\">Cargo.toml</code></a> file is primarily concerned with the\n<a href=\"appendix/glossary.html#package\">package</a> it defines, its crates, and the packages of the crates on\nwhich they depend. Nevertheless, you will see the term “module” often when\nworking with Rust, so you should understand its relationship to a given crate.</p>\n<h2 id=\"package\"><a class=\"header\" href=\"#package\">Package</a></h2>\n<p>A <em>package</em> is a collection of source files and a <code class=\"hljs\">Cargo.toml</code>\n<a href=\"appendix/glossary.html#manifest\"><em>manifest</em></a> file which describes the package. A package has a name\nand version which is used for specifying dependencies between packages.</p>\n<p>A package contains multiple <a href=\"appendix/glossary.html#target\"><em>targets</em></a>, each of which is a\n<a href=\"appendix/glossary.html#crate\"><em>crate</em></a>. The <code class=\"hljs\">Cargo.toml</code> file describes the type of the crates\n(binary or library) within the package, along with some metadata about each\none — how each is to be built, what their direct dependencies are, etc., as\ndescribed throughout this book.</p>\n<p>The <em>package root</em> is the directory where the package’s <code class=\"hljs\">Cargo.toml</code> manifest\nis located. (Compare with <a href=\"appendix/glossary.html#workspace\"><em>workspace root</em></a>.)</p>\n<p>The <a href=\"appendix/../reference/pkgid-spec.html\"><em>package ID specification</em></a>, or <em>SPEC</em>, is a string used to\nuniquely reference a specific version of a package from a specific source.</p>\n<p>Small to medium sized Rust projects will only need a single package, though it\nis common for them to have multiple crates.</p>\n<p>Larger projects may involve multiple packages, in which case Cargo\n<a href=\"appendix/glossary.html#workspace\"><em>workspaces</em></a> can be used to manage common dependencies and other\nrelated metadata between the packages.</p>\n<h2 id=\"package-manager\"><a class=\"header\" href=\"#package-manager\">Package manager</a></h2>\n<p>Broadly speaking, a <em>package manager</em> is a program (or collection of related\nprograms) in a software ecosystem that automates the process of obtaining,\ninstalling, and upgrading artifacts. Within a programming language ecosystem,\na package manager is a developer-focused tool whose primary functionality is\nto download library artifacts and their dependencies from some central\nrepository; this capability is often combined with the ability to perform\nsoftware builds (by invoking the language-specific compiler).</p>\n<p><a href=\"appendix/glossary.html#cargo\"><em>Cargo</em></a> is the package manager within the Rust ecosystem. Cargo\ndownloads your Rust <a href=\"appendix/glossary.html#package\">package</a>’s dependencies\n(<a href=\"appendix/glossary.html#artifact\"><em>artifacts</em></a> known as <a href=\"appendix/glossary.html#crate\"><em>crates</em></a>), compiles your\npackages, makes distributable packages, and (optionally) uploads them to\n<a href=\"https://crates.io/\">crates.io</a>, the Rust community’s <a href=\"appendix/glossary.html#registry\"><em>package registry</em></a>.</p>\n<h2 id=\"package-registry\"><a class=\"header\" href=\"#package-registry\">Package registry</a></h2>\n<p>See <a href=\"appendix/glossary.html#registry\"><em>registry</em></a>.</p>\n<h2 id=\"project\"><a class=\"header\" href=\"#project\">Project</a></h2>\n<p>Another name for a <a href=\"appendix/glossary.html#package\">package</a>.</p>\n<h2 id=\"registry-1\"><a class=\"header\" href=\"#registry-1\">Registry</a></h2>\n<p>A <em>registry</em> is a service that contains a collection of downloadable\n<a href=\"appendix/glossary.html#crate\"><em>crates</em></a> that can be installed or used as dependencies for a\n<a href=\"appendix/glossary.html#package\"><em>package</em></a>. The default registry in the Rust ecosystem is\n<a href=\"https://crates.io\">crates.io</a>. The registry has an <a href=\"appendix/glossary.html#index\"><em>index</em></a> which\ncontains a list of all crates, and tells Cargo how to download the crates that\nare needed.</p>\n<h2 id=\"source-1\"><a class=\"header\" href=\"#source-1\">Source</a></h2>\n<p>A <em>source</em> is a provider that contains <a href=\"appendix/glossary.html#crate\"><em>crates</em></a> that may be included\nas dependencies for a <a href=\"appendix/glossary.html#package\"><em>package</em></a>. There are several kinds of\nsources:</p>\n<ul>\n<li><strong>Registry source</strong> — See <a href=\"appendix/glossary.html#registry\">registry</a>.</li>\n<li><strong>Local registry source</strong> — A set of crates stored as compressed files on\nthe filesystem. See <a href=\"appendix/../reference/source-replacement.html#local-registry-sources\">Local Registry Sources</a>.</li>\n<li><strong>Directory source</strong> — A set of crates stored as uncompressed files on the\nfilesystem. See <a href=\"appendix/../reference/source-replacement.html#directory-sources\">Directory Sources</a>.</li>\n<li><strong>Path source</strong> — An individual package located on the filesystem (such as a\n<a href=\"appendix/../reference/specifying-dependencies.html#specifying-path-dependencies\">path dependency</a>) or a set of multiple packages (such as <a href=\"appendix/../reference/overriding-dependencies.html#paths-overrides\">path overrides</a>).</li>\n<li><strong>Git source</strong> — Packages located in a git repository (such as a <a href=\"appendix/../reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories\">git\ndependency</a> or <a href=\"appendix/../reference/source-replacement.html\">git source</a>).</li>\n</ul>\n<p>See <a href=\"appendix/../reference/source-replacement.html\">Source Replacement</a> for more information.</p>\n<h2 id=\"spec\"><a class=\"header\" href=\"#spec\">Spec</a></h2>\n<p>See <a href=\"appendix/glossary.html#package\">package ID specification</a>.</p>\n<h2 id=\"target-1\"><a class=\"header\" href=\"#target-1\">Target</a></h2>\n<p>The meaning of the term <em>target</em> depends on the context:</p>\n<ul>\n<li>\n<p><strong>Cargo Target</strong> — Cargo <a href=\"appendix/glossary.html#package\"><em>packages</em></a> consist of <em>targets</em> which\ncorrespond to <a href=\"appendix/glossary.html#artifact\"><em>artifacts</em></a> that will be produced. Packages can\nhave library, binary, example, test, and benchmark targets. The\n<a href=\"appendix/../reference/cargo-targets.html#configuring-a-target\">list of targets</a> are configured in the <code class=\"hljs\">Cargo.toml</code>\n<a href=\"appendix/glossary.html#manifest\"><em>manifest</em></a>, often inferred automatically by the <a href=\"appendix/../guide/project-layout.html\">directory\nlayout</a> of the source files.</p>\n</li>\n<li>\n<p><strong>Target Directory</strong> — Cargo places all built artifacts and intermediate\nfiles in the <em>target</em> directory. By default this is a directory named\n<code class=\"hljs\">target</code> at the <a href=\"appendix/glossary.html#workspace\"><em>workspace</em></a> root, or the package root if not\nusing a workspace. The directory may be changed with the <code class=\"hljs\">--target-dir</code>\ncommand-line option, the <code class=\"hljs\">CARGO_TARGET_DIR</code> <a href=\"appendix/../reference/environment-variables.html\">environment variable</a>, or the\n<code class=\"hljs\">build.target-dir</code> <a href=\"appendix/../reference/config.html\">config option</a>.</p>\n</li>\n<li>\n<p><strong>Target Architecture</strong> — The OS and machine architecture for the built\nartifacts are typically referred to as a <em>target</em>.</p>\n</li>\n<li>\n<p><strong>Target Triple</strong> — A triple is a specific format for specifying a target\narchitecture. Triples may be referred to as a <em>target triple</em> which is the\narchitecture for the artifact produced, and the <em>host triple</em> which is the\narchitecture that the compiler is running on. The target triple can be\nspecified with the <code class=\"hljs\">--target</code> command-line option or the <code class=\"hljs\">build.target</code>\n<a href=\"appendix/../reference/config.html\">config option</a>. The general format of the triple is\n<code class=\"hljs\">&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</code> where:</p>\n<ul>\n<li><code class=\"hljs\">arch</code> = The base CPU architecture, for example <code class=\"hljs\">x86_64</code>, <code class=\"hljs\">i686</code>, <code class=\"hljs\">arm</code>,\n<code class=\"hljs\">thumb</code>, <code class=\"hljs\">mips</code>, etc.</li>\n<li><code class=\"hljs\">sub</code> = The CPU sub-architecture, for example <code class=\"hljs\">arm</code> has <code class=\"hljs\">v7</code>, <code class=\"hljs\">v7s</code>,\n<code class=\"hljs\">v5te</code>, etc.</li>\n<li><code class=\"hljs\">vendor</code> = The vendor, for example <code class=\"hljs\">unknown</code>, <code class=\"hljs\">apple</code>, <code class=\"hljs\">pc</code>, <code class=\"hljs\">nvidia</code>, etc.</li>\n<li><code class=\"hljs\">sys</code> = The system name, for example <code class=\"hljs\">linux</code>, <code class=\"hljs\">windows</code>, <code class=\"hljs\">darwin</code>, etc.\n<code class=\"hljs\">none</code> is typically used for bare-metal without an OS.</li>\n<li><code class=\"hljs\">abi</code> = The ABI, for example <code class=\"hljs\">gnu</code>, <code class=\"hljs\">android</code>, <code class=\"hljs\">eabi</code>, etc.</li>\n</ul>\n<p>Some parameters may be omitted. Run <code class=\"hljs\">rustc --print target-list</code> for a list of\nsupported targets.</p>\n</li>\n</ul>\n<h2 id=\"test-targets\"><a class=\"header\" href=\"#test-targets\">Test Targets</a></h2>\n<p>Cargo <em>test targets</em> generate binaries which help verify proper operation and\ncorrectness of code. There are two types of test artifacts:</p>\n<ul>\n<li><strong>Unit test</strong> — A <em>unit test</em> is an executable binary compiled directly from\na library or a binary target. It contains the entire contents of the library\nor binary code, and runs <code class=\"hljs\">#[test]</code> annotated functions, intended to verify\nindividual units of code.</li>\n<li><strong>Integration test target</strong> — An <a href=\"appendix/../reference/cargo-targets.html#integration-tests\"><em>integration test\ntarget</em></a> is an executable binary compiled from a <em>test\ntarget</em> which is a distinct <a href=\"appendix/glossary.html#crate\"><em>crate</em></a> whose source is located in the\n<code class=\"hljs\">tests</code> directory or specified by the <a href=\"appendix/../reference/cargo-targets.html#configuring-a-target\"><code class=\"hljs\">[[test]]</code> table</a> in the\n<code class=\"hljs\">Cargo.toml</code> <a href=\"appendix/glossary.html#manifest\"><em>manifest</em></a>. It is intended to only test the public\nAPI of a library, or execute a binary to verify its operation.</li>\n</ul>\n<h2 id=\"workspace\"><a class=\"header\" href=\"#workspace\">Workspace</a></h2>\n<p>A <a href=\"appendix/../reference/workspaces.html\"><em>workspace</em></a> is a collection of one or more\n<a href=\"appendix/glossary.html#package\"><em>packages</em></a> that share common dependency resolution (with a shared\n<code class=\"hljs\">Cargo.lock</code> <a href=\"appendix/glossary.html#lock-file\"><em>lock file</em></a>), output directory, and various\nsettings such as profiles.</p>\n<p>A <a href=\"appendix/../reference/workspaces.html\"><em>virtual workspace</em></a> is a workspace where the root <code class=\"hljs\">Cargo.toml</code>\n<a href=\"appendix/glossary.html#manifest\"><em>manifest</em></a> does not define a package, and only lists the\nworkspace <a href=\"appendix/glossary.html#member\"><em>members</em></a>.</p>\n<p>The <em>workspace root</em> is the directory where the workspace’s <code class=\"hljs\">Cargo.toml</code>\nmanifest is located. (Compare with <a href=\"appendix/glossary.html#package\"><em>package root</em></a>.)</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"git-authentication\"><a class=\"header\" href=\"#git-authentication\">Git Authentication</a></h1>\n<p>Cargo supports some forms of authentication when using git dependencies and\nregistries. This appendix contains some information for setting up git\nauthentication in a way that works with Cargo.</p>\n<p>If you need other authentication methods, the <a href=\"appendix/../reference/config.html#netgit-fetch-with-cli\"><code class=\"hljs\">net.git-fetch-with-cli</code></a>\nconfig value can be set to cause Cargo to execute the <code class=\"hljs\">git</code> executable to\nhandle fetching remote repositories instead of using the built-in support.\nThis can be enabled with the <code class=\"hljs\">CARGO_NET_GIT_FETCH_WITH_CLI=true</code> environment\nvariable.</p>\n<h2 id=\"https-authentication\"><a class=\"header\" href=\"#https-authentication\">HTTPS authentication</a></h2>\n<p>HTTPS authentication requires the <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage\"><code class=\"hljs\">credential.helper</code></a> mechanism. There are\nmultiple credential helpers, and you specify the one you want to use in your\nglobal git configuration file.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-ini hljs\"><span class=\"hljs-comment\"># ~/.gitconfig</span>\n\n<span class=\"hljs-section\">[credential]</span>\n<span class=\"hljs-attr\">helper</span> = store\n</code></pre>\n<p>Cargo does not ask for passwords, so for most helpers you will need to give\nthe helper the initial username/password before running Cargo. One way to do\nthis is to run <code class=\"hljs\">git clone</code> of the private git repo and enter the\nusername/password.</p>\n<blockquote>\n<p><strong>Tip:</strong><br>\nmacOS users may want to consider using the osxkeychain helper.<br>\nWindows users may want to consider using the <a href=\"https://github.com/microsoft/Git-Credential-Manager-Core/\">GCM</a> helper.</p>\n</blockquote>\n<blockquote>\n<p><strong>Note:</strong> Windows users will need to make sure that the <code class=\"hljs\">sh</code> shell is\navailable in your <code class=\"hljs\">PATH</code>. This typically is available with the Git for\nWindows installation.</p>\n</blockquote>\n<h2 id=\"ssh-authentication\"><a class=\"header\" href=\"#ssh-authentication\">SSH authentication</a></h2>\n<p>SSH authentication requires <code class=\"hljs\">ssh-agent</code> to be running to acquire the SSH key.\nMake sure the appropriate environment variables are set up (<code class=\"hljs\">SSH_AUTH_SOCK</code> on\nmost Unix-like systems), and that the correct keys are added (with <code class=\"hljs\">ssh-add</code>).</p>\n<p>Windows can use Pageant (part of <a href=\"https://www.chiark.greenend.org.uk/~sgtatham/putty/\">PuTTY</a>) or <code class=\"hljs\">ssh-agent</code>.\nTo use <code class=\"hljs\">ssh-agent</code>, Cargo needs to use the OpenSSH that is distributed as part\nof Windows, as Cargo does not support the simulated Unix-domain sockets used\nby MinGW or Cygwin.\nMore information about installing with Windows can be found at the <a href=\"https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse\">Microsoft\ninstallation documentation</a> and the page on <a href=\"https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_keymanagement\">key management</a> has instructions\non how to start <code class=\"hljs\">ssh-agent</code> and to add keys.</p>\n<blockquote>\n<p><strong>Note:</strong> Cargo does not support git’s shorthand SSH URLs like\n<code class=\"hljs\">git@example.com:user/repo.git</code>. Use a full SSH URL like\n<code class=\"hljs\">ssh://git@example.com/user/repo.git</code>.</p>\n</blockquote>\n<blockquote>\n<p><strong>Note:</strong> SSH configuration files (like OpenSSH’s <code class=\"hljs\">~/.ssh/config</code>) are not\nused by Cargo’s built-in SSH library. More advanced requirements should use\n<a href=\"appendix/../reference/config.html#netgit-fetch-with-cli\"><code class=\"hljs\">net.git-fetch-with-cli</code></a>.</p>\n</blockquote>\n<h3 id=\"ssh-known-hosts\"><a class=\"header\" href=\"#ssh-known-hosts\">SSH Known Hosts</a></h3>\n<p>When connecting to an SSH host, Cargo must verify the identity of the host\nusing “known hosts”, which are a list of host keys. Cargo can look for these\nknown hosts in OpenSSH-style <code class=\"hljs\">known_hosts</code> files located in their standard\nlocations (<code class=\"hljs\">.ssh/known_hosts</code> in your home directory, or\n<code class=\"hljs\">/etc/ssh/ssh_known_hosts</code> on Unix-like platforms or\n<code class=\"hljs\">%PROGRAMDATA%\\ssh\\ssh_known_hosts</code> on Windows). More information about these\nfiles can be found in the <a href=\"https://man.openbsd.org/sshd#SSH_KNOWN_HOSTS_FILE_FORMAT\">sshd man page</a>. Alternatively, keys may be\nconfigured in a Cargo configuration file with <a href=\"appendix/../reference/config.html#netsshknown-hosts\"><code class=\"hljs\">net.ssh.known-hosts</code></a>.</p>\n<p>When connecting to an SSH host before the known hosts has been configured,\nCargo will display an error message instructing you how to add the host key.\nThis also includes a “fingerprint”, which is a smaller hash of the host key,\nwhich should be easier to visually verify. The server administrator can get\nthe fingerprint by running <code class=\"hljs\">ssh-keygen</code> against the public key (for example,\n<code class=\"hljs\">ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub</code>). Well-known sites may\npublish their fingerprints on the web; for example GitHub posts theirs at\n<a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints\">https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints</a>.</p>\n<p>Cargo comes with the host keys for <a href=\"https://github.com\">github.com</a> built-in.\nIf those ever change, you can add the new keys to the config or known_hosts file.</p>\n<blockquote>\n<p><strong>Note:</strong> Cargo doesn’t support the <code class=\"hljs\">@cert-authority</code> or <code class=\"hljs\">@revoked</code>\nmarkers in <code class=\"hljs\">known_hosts</code> files. To make use of this functionality, use\n<a href=\"appendix/../reference/config.html#netgit-fetch-with-cli\"><code class=\"hljs\">net.git-fetch-with-cli</code></a>. This is also a good tip if Cargo’s SSH client\nisn’t behaving the way you expect it to.</p>\n</blockquote>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n        <script>\n        window.addEventListener('load', function() {\n            window.setTimeout(window.print, 100);\n        });\n        </script>\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:53.701Z"
}