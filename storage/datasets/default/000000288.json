{
	"title": "std::ops - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ops/index.html",
	"markdown": "# std::ops - Rust\n\n## Module [std](../index.html)::[ops](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/lib.rs.html#383) ·\n\nExpand description\n\nOverloadable operators.\n\nImplementing these traits allows you to overload certain operators.\n\nSome of these traits are imported by the prelude, so they are available in every Rust program. Only operators backed by traits can be overloaded. For example, the addition operator (`+`) can be overloaded through the [`Add`](trait.Add.html \"trait std::ops::Add\") trait, but since the assignment operator (`=`) has no backing trait, there is no way of overloading its semantics. Additionally, this module does not provide any mechanism to create new operators. If traitless overloading or custom operators are required, you should look toward macros to extend Rust’s syntax.\n\nImplementations of operator traits should be unsurprising in their respective contexts, keeping in mind their usual meanings and [operator precedence](about:blank/reference/expressions.html#expression-precedence). For example, when implementing [`Mul`](trait.Mul.html \"trait std::ops::Mul\"), the operation should have some resemblance to multiplication (and share expected properties like associativity).\n\nNote that the `&&` and `||` operators are currently not supported for overloading. Due to their short circuiting nature, they require a different design from traits for other operators like [`BitAnd`](trait.BitAnd.html \"trait std::ops::BitAnd\"). Designs for them are under discussion.\n\nMany of the operators take their operands by value. In non-generic contexts involving built-in types, this is usually not a problem. However, using these operators in generic code, requires some attention if values have to be reused as opposed to letting the operators consume them. One option is to occasionally use [`clone`](about:blank/clone/trait.Clone.html#tymethod.clone \"method std::clone::Clone::clone\"). Another option is to rely on the types involved providing additional operator implementations for references. For example, for a user-defined type `T` which is supposed to support addition, it is probably a good idea to have both `T` and `&T` implement the traits [`Add<T>`](trait.Add.html \"trait std::ops::Add\") and [`Add<&T>`](trait.Add.html \"trait std::ops::Add\") so that generic code can be written without unnecessary cloning.\n\n## [§](#examples)Examples\n\nThis example creates a `Point` struct that implements [`Add`](trait.Add.html \"trait std::ops::Add\") and [`Sub`](trait.Sub.html \"trait std::ops::Sub\"), and then demonstrates adding and subtracting two `Point`s.\n\n```\nuse std::ops::{Add, Sub};\n\n#[derive(Debug, Copy, Clone, PartialEq)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl Add for Point {\n    type Output = Self;\n\n    fn add(self, other: Self) -> Self {\n        Self {x: self.x + other.x, y: self.y + other.y}\n    }\n}\n\nimpl Sub for Point {\n    type Output = Self;\n\n    fn sub(self, other: Self) -> Self {\n        Self {x: self.x - other.x, y: self.y - other.y}\n    }\n}\n\nassert_eq!(Point {x: 3, y: 3}, Point {x: 1, y: 0} + Point {x: 2, y: 3});\nassert_eq!(Point {x: -1, y: -3}, Point {x: 1, y: 0} - Point {x: 2, y: 3});\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::%7BAdd,+Sub%7D;%0A++++%0A++++%23%5Bderive(Debug,+Copy,+Clone,+PartialEq)%5D%0A++++struct+Point+%7B%0A++++++++x:+i32,%0A++++++++y:+i32,%0A++++%7D%0A++++%0A++++impl+Add+for+Point+%7B%0A++++++++type+Output+=+Self;%0A++++%0A++++++++fn+add(self,+other:+Self)+-%3E+Self+%7B%0A++++++++++++Self+%7Bx:+self.x+%2B+other.x,+y:+self.y+%2B+other.y%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+Sub+for+Point+%7B%0A++++++++type+Output+=+Self;%0A++++%0A++++++++fn+sub(self,+other:+Self)+-%3E+Self+%7B%0A++++++++++++Self+%7Bx:+self.x+-+other.x,+y:+self.y+-+other.y%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(Point+%7Bx:+3,+y:+3%7D,+Point+%7Bx:+1,+y:+0%7D+%2B+Point+%7Bx:+2,+y:+3%7D);%0A++++assert_eq!(Point+%7Bx:+-1,+y:+-3%7D,+Point+%7Bx:+1,+y:+0%7D+-+Point+%7Bx:+2,+y:+3%7D);%0A%7D&edition=2021)\n\nSee the documentation for each trait for an example implementation.\n\nThe [`Fn`](trait.Fn.html \"trait std::ops::Fn\"), [`FnMut`](trait.FnMut.html \"trait std::ops::FnMut\"), and [`FnOnce`](trait.FnOnce.html \"trait std::ops::FnOnce\") traits are implemented by types that can be invoked like functions. Note that [`Fn`](trait.Fn.html \"trait std::ops::Fn\") takes `&self`, [`FnMut`](trait.FnMut.html \"trait std::ops::FnMut\") takes `&mut self` and [`FnOnce`](trait.FnOnce.html \"trait std::ops::FnOnce\") takes `self`. These correspond to the three kinds of methods that can be invoked on an instance: call-by-reference, call-by-mutable-reference, and call-by-value. The most common use of these traits is to act as bounds to higher-level functions that take functions or closures as arguments.\n\nTaking a [`Fn`](trait.Fn.html \"trait std::ops::Fn\") as a parameter:\n\n```\nfn call_with_one<F>(func: F) -> usize\n    where F: Fn(usize) -> usize\n{\n    func(1)\n}\n\nlet double = |x| x * 2;\nassert_eq!(call_with_one(double), 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+call_with_one%3CF%3E(func:+F)+-%3E+usize%0A++++++++where+F:+Fn(usize)+-%3E+usize%0A++++%7B%0A++++++++func(1)%0A++++%7D%0A++++%0A++++let+double+=+%7Cx%7C+x+*+2;%0A++++assert_eq!(call_with_one(double),+2);%0A%7D&edition=2021)\n\nTaking a [`FnMut`](trait.FnMut.html \"trait std::ops::FnMut\") as a parameter:\n\n```\nfn do_twice<F>(mut func: F)\n    where F: FnMut()\n{\n    func();\n    func();\n}\n\nlet mut x: usize = 1;\n{\n    let add_two_to_x = || x += 2;\n    do_twice(add_two_to_x);\n}\n\nassert_eq!(x, 5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+do_twice%3CF%3E(mut+func:+F)%0A++++++++where+F:+FnMut()%0A++++%7B%0A++++++++func();%0A++++++++func();%0A++++%7D%0A++++%0A++++let+mut+x:+usize+=+1;%0A++++%7B%0A++++++++let+add_two_to_x+=+%7C%7C+x+%2B=+2;%0A++++++++do_twice(add_two_to_x);%0A++++%7D%0A++++%0A++++assert_eq!(x,+5);%0A%7D&edition=2021)\n\nTaking a [`FnOnce`](trait.FnOnce.html \"trait std::ops::FnOnce\") as a parameter:\n\n```\nfn consume_with_relish<F>(func: F)\n    where F: FnOnce() -> String\n{\n    // `func` consumes its captured variables, so it cannot be run more\n    // than once\n    println!(\"Consumed: {}\", func());\n\n    println!(\"Delicious!\");\n\n    // Attempting to invoke `func()` again will throw a `use of moved\n    // value` error for `func`\n}\n\nlet x = String::from(\"x\");\nlet consume_and_return_x = move || x;\nconsume_with_relish(consume_and_return_x);\n\n// `consume_and_return_x` can no longer be invoked at this point\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+consume_with_relish%3CF%3E(func:+F)%0A++++++++where+F:+FnOnce()+-%3E+String%0A++++%7B%0A++++++++//+%60func%60+consumes+its+captured+variables,+so+it+cannot+be+run+more%0A++++++++//+than+once%0A++++++++println!(%22Consumed:+%7B%7D%22,+func());%0A++++%0A++++++++println!(%22Delicious!%22);%0A++++%0A++++++++//+Attempting+to+invoke+%60func()%60+again+will+throw+a+%60use+of+moved%0A++++++++//+value%60+error+for+%60func%60%0A++++%7D%0A++++%0A++++let+x+=+String::from(%22x%22);%0A++++let+consume_and_return_x+=+move+%7C%7C+x;%0A++++consume_with_relish(consume_and_return_x);%0A++++%0A++++//+%60consume_and_return_x%60+can+no+longer+be+invoked+at+this+point%0A%7D&edition=2021)\n\n-   A (half-open) range bounded inclusively below and exclusively above (`start..end`).\n    \n-   A range only bounded inclusively below (`start..`).\n    \n-   An unbounded range (`..`).\n    \n-   A range bounded inclusively below and above (`start..=end`).\n    \n-   A range only bounded exclusively above (`..end`).\n    \n-   A range only bounded inclusively above (`..=end`).\n    \n-   Implement `FromResidual<Yeet<T>>` on your type to enable `do yeet expr` syntax in functions returning your type.\n    \n\n-   An endpoint of a range of keys.\n    \n-   Used to tell an operation whether it should exit early or go on as usual.\n    \n-   The result of a coroutine resumption.\n    \n\n-   The addition operator `+`.\n    \n-   The addition assignment operator `+=`.\n    \n-   The bitwise AND operator `&`.\n    \n-   The bitwise AND assignment operator `&=`.\n    \n-   The bitwise OR operator `|`.\n    \n-   The bitwise OR assignment operator `|=`.\n    \n-   The bitwise XOR operator `^`.\n    \n-   The bitwise XOR assignment operator `^=`.\n    \n-   Used for immutable dereferencing operations, like `*v`.\n    \n-   Used for mutable dereferencing operations, like in `*v = 1;`.\n    \n-   The division operator `/`.\n    \n-   The division assignment operator `/=`.\n    \n-   Custom code within the destructor.\n    \n-   The version of the call operator that takes an immutable receiver.\n    \n-   The version of the call operator that takes a mutable receiver.\n    \n-   The version of the call operator that takes a by-value receiver.\n    \n-   Used for indexing operations (`container[index]`) in immutable contexts.\n    \n-   Used for indexing operations (`container[index]`) in mutable contexts.\n    \n-   The multiplication operator `*`.\n    \n-   The multiplication assignment operator `*=`.\n    \n-   The unary negation operator `-`.\n    \n-   The unary logical negation operator `!`.\n    \n-   `RangeBounds` is implemented by Rust’s built-in range types, produced by range syntax like `..`, `a..`, `..b`, `..=c`, `d..e`, or `f..=g`.\n    \n-   The remainder operator `%`.\n    \n-   The remainder assignment operator `%=`.\n    \n-   The left shift operator `<<`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust’s type checker has special handling for `_ << _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a << b` and `a.shl(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference.\n    \n-   The left shift assignment operator `<<=`.\n    \n-   The right shift operator `>>`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust’s type checker has special handling for `_ >> _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a >> b` and `a.shr(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference.\n    \n-   The right shift assignment operator `>>=`.\n    \n-   The subtraction operator `-`.\n    \n-   The subtraction assignment operator `-=`.\n    \n-   An async-aware version of the [`Fn`](trait.Fn.html \"trait std::ops::Fn\") trait.\n    \n-   An async-aware version of the [`FnMut`](trait.FnMut.html \"trait std::ops::FnMut\") trait.\n    \n-   An async-aware version of the [`FnOnce`](trait.FnOnce.html \"trait std::ops::FnOnce\") trait.\n    \n-   Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.\n    \n-   The trait implemented by builtin coroutine types.\n    \n-   Perma-unstable marker trait. Indicates that the type has a well-behaved [`Deref`](trait.Deref.html \"trait std::ops::Deref\") (and, if applicable, [`DerefMut`](trait.DerefMut.html \"trait std::ops::DerefMut\")) implementation. This is relied on for soundness of deref patterns.\n    \n-   `DispatchFromDyn` is used in the implementation of object safety checks (specifically allowing arbitrary self types), to guarantee that a method’s receiver type can be dispatched on.\n    \n-   Used to specify which residuals can be converted into which [`crate::ops::Try`](trait.Try.html \"trait std::ops::Try\") types.\n    \n-   `OneSidedRange` is implemented for built-in range types that are unbounded on one side. For example, `a..`, `..b` and `..=c` implement `OneSidedRange`, but `..`, `d..e`, and `f..=g` do not.\n    \n-   Allows retrieving the canonical type implementing [`Try`](trait.Try.html \"trait std::ops::Try\") that has this type as its residual and allows it to hold an `O` as its output.\n    \n-   [Try](trait.Try.html \"trait std::ops::Try\")Experimental\n    \n    The `?` operator and `try {}` blocks.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Overloadable operators.\"><title>std::ops - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Module ops</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Module ops</a></h2><div class=\"sidebar-elems\"><section><ul class=\"block\"><li><a href=\"#structs\">Structs</a></li><li><a href=\"#enums\">Enums</a></li><li><a href=\"#traits\">Traits</a></li></ul></section><h2><a href=\"../index.html\">In crate std</a></h2><h3><a href=\"../index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"../primitive.array.html\">array</a></li><li><a href=\"../primitive.bool.html\">bool</a></li><li><a href=\"../primitive.char.html\">char</a></li><li><a href=\"../primitive.f128.html\">f128</a></li><li><a href=\"../primitive.f16.html\">f16</a></li><li><a href=\"../primitive.f32.html\">f32</a></li><li><a href=\"../primitive.f64.html\">f64</a></li><li><a href=\"../primitive.fn.html\">fn</a></li><li><a href=\"../primitive.i128.html\">i128</a></li><li><a href=\"../primitive.i16.html\">i16</a></li><li><a href=\"../primitive.i32.html\">i32</a></li><li><a href=\"../primitive.i64.html\">i64</a></li><li><a href=\"../primitive.i8.html\">i8</a></li><li><a href=\"../primitive.isize.html\">isize</a></li><li><a href=\"../primitive.never.html\">never</a></li><li><a href=\"../primitive.pointer.html\">pointer</a></li><li><a href=\"../primitive.reference.html\">reference</a></li><li><a href=\"../primitive.slice.html\">slice</a></li><li><a href=\"../primitive.str.html\">str</a></li><li><a href=\"../primitive.tuple.html\">tuple</a></li><li><a href=\"../primitive.u128.html\">u128</a></li><li><a href=\"../primitive.u16.html\">u16</a></li><li><a href=\"../primitive.u32.html\">u32</a></li><li><a href=\"../primitive.u64.html\">u64</a></li><li><a href=\"../primitive.u8.html\">u8</a></li><li><a href=\"../primitive.unit.html\">unit</a></li><li><a href=\"../primitive.usize.html\">usize</a></li></ul><h3><a href=\"../index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"../alloc/index.html\">alloc</a></li><li><a href=\"../any/index.html\">any</a></li><li><a href=\"../arch/index.html\">arch</a></li><li><a href=\"../array/index.html\">array</a></li><li><a href=\"../ascii/index.html\">ascii</a></li><li><a href=\"../assert_matches/index.html\">assert_matches</a></li><li><a href=\"../async_iter/index.html\">async_iter</a></li><li><a href=\"../backtrace/index.html\">backtrace</a></li><li><a href=\"../borrow/index.html\">borrow</a></li><li><a href=\"../boxed/index.html\">boxed</a></li><li><a href=\"../cell/index.html\">cell</a></li><li><a href=\"../char/index.html\">char</a></li><li><a href=\"../clone/index.html\">clone</a></li><li><a href=\"../cmp/index.html\">cmp</a></li><li><a href=\"../collections/index.html\">collections</a></li><li><a href=\"../convert/index.html\">convert</a></li><li><a href=\"../default/index.html\">default</a></li><li><a href=\"../env/index.html\">env</a></li><li><a href=\"../error/index.html\">error</a></li><li><a href=\"../f128/index.html\">f128</a></li><li><a href=\"../f16/index.html\">f16</a></li><li><a href=\"../f32/index.html\">f32</a></li><li><a href=\"../f64/index.html\">f64</a></li><li><a href=\"../ffi/index.html\">ffi</a></li><li><a href=\"../fmt/index.html\">fmt</a></li><li><a href=\"../fs/index.html\">fs</a></li><li><a href=\"../future/index.html\">future</a></li><li><a href=\"../hash/index.html\">hash</a></li><li><a href=\"../hint/index.html\">hint</a></li><li><a href=\"../i128/index.html\">i128</a></li><li><a href=\"../i16/index.html\">i16</a></li><li><a href=\"../i32/index.html\">i32</a></li><li><a href=\"../i64/index.html\">i64</a></li><li><a href=\"../i8/index.html\">i8</a></li><li><a href=\"../intrinsics/index.html\">intrinsics</a></li><li><a href=\"../io/index.html\">io</a></li><li><a href=\"../isize/index.html\">isize</a></li><li><a href=\"../iter/index.html\">iter</a></li><li><a href=\"../marker/index.html\">marker</a></li><li><a href=\"../mem/index.html\">mem</a></li><li><a href=\"../net/index.html\">net</a></li><li><a href=\"../num/index.html\">num</a></li><li><a href=\"../ops/index.html\">ops</a></li><li><a href=\"../option/index.html\">option</a></li><li><a href=\"../os/index.html\">os</a></li><li><a href=\"../panic/index.html\">panic</a></li><li><a href=\"../pat/index.html\">pat</a></li><li><a href=\"../path/index.html\">path</a></li><li><a href=\"../pin/index.html\">pin</a></li><li><a href=\"../prelude/index.html\">prelude</a></li><li><a href=\"../primitive/index.html\">primitive</a></li><li><a href=\"../process/index.html\">process</a></li><li><a href=\"../ptr/index.html\">ptr</a></li><li><a href=\"../rc/index.html\">rc</a></li><li><a href=\"../result/index.html\">result</a></li><li><a href=\"../simd/index.html\">simd</a></li><li><a href=\"../slice/index.html\">slice</a></li><li><a href=\"../str/index.html\">str</a></li><li><a href=\"../string/index.html\">string</a></li><li><a href=\"../sync/index.html\">sync</a></li><li><a href=\"../task/index.html\">task</a></li><li><a href=\"../thread/index.html\">thread</a></li><li><a href=\"../time/index.html\">time</a></li><li><a href=\"../u128/index.html\">u128</a></li><li><a href=\"../u16/index.html\">u16</a></li><li><a href=\"../u32/index.html\">u32</a></li><li><a href=\"../u64/index.html\">u64</a></li><li><a href=\"../u8/index.html\">u8</a></li><li><a href=\"../usize/index.html\">usize</a></li><li><a href=\"../vec/index.html\">vec</a></li></ul><h3><a href=\"../index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"../macro.assert.html\">assert</a></li><li><a href=\"../macro.assert_eq.html\">assert_eq</a></li><li><a href=\"../macro.assert_ne.html\">assert_ne</a></li><li><a href=\"../macro.cfg.html\">cfg</a></li><li><a href=\"../macro.cfg_match.html\">cfg_match</a></li><li><a href=\"../macro.column.html\">column</a></li><li><a href=\"../macro.compile_error.html\">compile_error</a></li><li><a href=\"../macro.concat.html\">concat</a></li><li><a href=\"../macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"../macro.concat_idents.html\">concat_idents</a></li><li><a href=\"../macro.const_format_args.html\">const_format_args</a></li><li><a href=\"../macro.dbg.html\">dbg</a></li><li><a href=\"../macro.debug_assert.html\">debug_assert</a></li><li><a href=\"../macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"../macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"../macro.env.html\">env</a></li><li><a href=\"../macro.eprint.html\">eprint</a></li><li><a href=\"../macro.eprintln.html\">eprintln</a></li><li><a href=\"../macro.file.html\">file</a></li><li><a href=\"../macro.format.html\">format</a></li><li><a href=\"../macro.format_args.html\">format_args</a></li><li><a href=\"../macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"../macro.include.html\">include</a></li><li><a href=\"../macro.include_bytes.html\">include_bytes</a></li><li><a href=\"../macro.include_str.html\">include_str</a></li><li><a href=\"../macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"../macro.line.html\">line</a></li><li><a href=\"../macro.log_syntax.html\">log_syntax</a></li><li><a href=\"../macro.matches.html\">matches</a></li><li><a href=\"../macro.module_path.html\">module_path</a></li><li><a href=\"../macro.option_env.html\">option_env</a></li><li><a href=\"../macro.panic.html\">panic</a></li><li><a href=\"../macro.print.html\">print</a></li><li><a href=\"../macro.println.html\">println</a></li><li><a href=\"../macro.stringify.html\">stringify</a></li><li><a href=\"../macro.thread_local.html\">thread_local</a></li><li><a href=\"../macro.todo.html\">todo</a></li><li><a href=\"../macro.trace_macros.html\">trace_macros</a></li><li><a href=\"../macro.try.html\">try</a></li><li><a href=\"../macro.unimplemented.html\">unimplemented</a></li><li><a href=\"../macro.unreachable.html\">unreachable</a></li><li><a href=\"../macro.vec.html\">vec</a></li><li><a href=\"../macro.write.html\">write</a></li><li><a href=\"../macro.writeln.html\">writeln</a></li></ul><h3><a href=\"../index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"../keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"../keyword.as.html\">as</a></li><li><a href=\"../keyword.async.html\">async</a></li><li><a href=\"../keyword.await.html\">await</a></li><li><a href=\"../keyword.break.html\">break</a></li><li><a href=\"../keyword.const.html\">const</a></li><li><a href=\"../keyword.continue.html\">continue</a></li><li><a href=\"../keyword.crate.html\">crate</a></li><li><a href=\"../keyword.dyn.html\">dyn</a></li><li><a href=\"../keyword.else.html\">else</a></li><li><a href=\"../keyword.enum.html\">enum</a></li><li><a href=\"../keyword.extern.html\">extern</a></li><li><a href=\"../keyword.false.html\">false</a></li><li><a href=\"../keyword.fn.html\">fn</a></li><li><a href=\"../keyword.for.html\">for</a></li><li><a href=\"../keyword.if.html\">if</a></li><li><a href=\"../keyword.impl.html\">impl</a></li><li><a href=\"../keyword.in.html\">in</a></li><li><a href=\"../keyword.let.html\">let</a></li><li><a href=\"../keyword.loop.html\">loop</a></li><li><a href=\"../keyword.match.html\">match</a></li><li><a href=\"../keyword.mod.html\">mod</a></li><li><a href=\"../keyword.move.html\">move</a></li><li><a href=\"../keyword.mut.html\">mut</a></li><li><a href=\"../keyword.pub.html\">pub</a></li><li><a href=\"../keyword.ref.html\">ref</a></li><li><a href=\"../keyword.return.html\">return</a></li><li><a href=\"../keyword.self.html\">self</a></li><li><a href=\"../keyword.static.html\">static</a></li><li><a href=\"../keyword.struct.html\">struct</a></li><li><a href=\"../keyword.super.html\">super</a></li><li><a href=\"../keyword.trait.html\">trait</a></li><li><a href=\"../keyword.true.html\">true</a></li><li><a href=\"../keyword.type.html\">type</a></li><li><a href=\"../keyword.union.html\">union</a></li><li><a href=\"../keyword.unsafe.html\">unsafe</a></li><li><a href=\"../keyword.use.html\">use</a></li><li><a href=\"../keyword.where.html\">where</a></li><li><a href=\"../keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Module <a href=\"../index.html\">std</a>::<wbr><a class=\"mod\" href=\"#\">ops</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/lib.rs.html#383\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Overloadable operators.</p>\n<p>Implementing these traits allows you to overload certain operators.</p>\n<p>Some of these traits are imported by the prelude, so they are available in\nevery Rust program. Only operators backed by traits can be overloaded. For\nexample, the addition operator (<code>+</code>) can be overloaded through the <a href=\"trait.Add.html\" title=\"trait std::ops::Add\"><code>Add</code></a>\ntrait, but since the assignment operator (<code>=</code>) has no backing trait, there\nis no way of overloading its semantics. Additionally, this module does not\nprovide any mechanism to create new operators. If traitless overloading or\ncustom operators are required, you should look toward macros to extend\nRust’s syntax.</p>\n<p>Implementations of operator traits should be unsurprising in their\nrespective contexts, keeping in mind their usual meanings and\n<a href=\"../../reference/expressions.html#expression-precedence\">operator precedence</a>. For example, when implementing <a href=\"trait.Mul.html\" title=\"trait std::ops::Mul\"><code>Mul</code></a>, the operation\nshould have some resemblance to multiplication (and share expected\nproperties like associativity).</p>\n<p>Note that the <code>&amp;&amp;</code> and <code>||</code> operators are currently not supported for\noverloading. Due to their short circuiting nature, they require a different\ndesign from traits for other operators like <a href=\"trait.BitAnd.html\" title=\"trait std::ops::BitAnd\"><code>BitAnd</code></a>. Designs for them are\nunder discussion.</p>\n<p>Many of the operators take their operands by value. In non-generic\ncontexts involving built-in types, this is usually not a problem.\nHowever, using these operators in generic code, requires some\nattention if values have to be reused as opposed to letting the operators\nconsume them. One option is to occasionally use <a href=\"../clone/trait.Clone.html#tymethod.clone\" title=\"method std::clone::Clone::clone\"><code>clone</code></a>.\nAnother option is to rely on the types involved providing additional\noperator implementations for references. For example, for a user-defined\ntype <code>T</code> which is supposed to support addition, it is probably a good\nidea to have both <code>T</code> and <code>&amp;T</code> implement the traits <a href=\"trait.Add.html\" title=\"trait std::ops::Add\"><code>Add&lt;T&gt;</code></a> and\n<a href=\"trait.Add.html\" title=\"trait std::ops::Add\"><code>Add&lt;&amp;T&gt;</code></a> so that generic code can be written without unnecessary\ncloning.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>This example creates a <code>Point</code> struct that implements <a href=\"trait.Add.html\" title=\"trait std::ops::Add\"><code>Add</code></a> and <a href=\"trait.Sub.html\" title=\"trait std::ops::Sub\"><code>Sub</code></a>,\nand then demonstrates adding and subtracting two <code>Point</code>s.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ops::{Add, Sub};\n\n<span class=\"attr\">#[derive(Debug, Copy, Clone, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: i32,\n    y: i32,\n}\n\n<span class=\"kw\">impl </span>Add <span class=\"kw\">for </span>Point {\n    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n\n    <span class=\"kw\">fn </span>add(<span class=\"self\">self</span>, other: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{x: <span class=\"self\">self</span>.x + other.x, y: <span class=\"self\">self</span>.y + other.y}\n    }\n}\n\n<span class=\"kw\">impl </span>Sub <span class=\"kw\">for </span>Point {\n    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n\n    <span class=\"kw\">fn </span>sub(<span class=\"self\">self</span>, other: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{x: <span class=\"self\">self</span>.x - other.x, y: <span class=\"self\">self</span>.y - other.y}\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(Point {x: <span class=\"number\">3</span>, y: <span class=\"number\">3</span>}, Point {x: <span class=\"number\">1</span>, y: <span class=\"number\">0</span>} + Point {x: <span class=\"number\">2</span>, y: <span class=\"number\">3</span>});\n<span class=\"macro\">assert_eq!</span>(Point {x: -<span class=\"number\">1</span>, y: -<span class=\"number\">3</span>}, Point {x: <span class=\"number\">1</span>, y: <span class=\"number\">0</span>} - Point {x: <span class=\"number\">2</span>, y: <span class=\"number\">3</span>});</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::%7BAdd,+Sub%7D;%0A++++%0A++++%23%5Bderive(Debug,+Copy,+Clone,+PartialEq)%5D%0A++++struct+Point+%7B%0A++++++++x:+i32,%0A++++++++y:+i32,%0A++++%7D%0A++++%0A++++impl+Add+for+Point+%7B%0A++++++++type+Output+=+Self;%0A++++%0A++++++++fn+add(self,+other:+Self)+-%3E+Self+%7B%0A++++++++++++Self+%7Bx:+self.x+%2B+other.x,+y:+self.y+%2B+other.y%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+Sub+for+Point+%7B%0A++++++++type+Output+=+Self;%0A++++%0A++++++++fn+sub(self,+other:+Self)+-%3E+Self+%7B%0A++++++++++++Self+%7Bx:+self.x+-+other.x,+y:+self.y+-+other.y%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(Point+%7Bx:+3,+y:+3%7D,+Point+%7Bx:+1,+y:+0%7D+%2B+Point+%7Bx:+2,+y:+3%7D);%0A++++assert_eq!(Point+%7Bx:+-1,+y:+-3%7D,+Point+%7Bx:+1,+y:+0%7D+-+Point+%7Bx:+2,+y:+3%7D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>See the documentation for each trait for an example implementation.</p>\n<p>The <a href=\"trait.Fn.html\" title=\"trait std::ops::Fn\"><code>Fn</code></a>, <a href=\"trait.FnMut.html\" title=\"trait std::ops::FnMut\"><code>FnMut</code></a>, and <a href=\"trait.FnOnce.html\" title=\"trait std::ops::FnOnce\"><code>FnOnce</code></a> traits are implemented by types that can be\ninvoked like functions. Note that <a href=\"trait.Fn.html\" title=\"trait std::ops::Fn\"><code>Fn</code></a> takes <code>&amp;self</code>, <a href=\"trait.FnMut.html\" title=\"trait std::ops::FnMut\"><code>FnMut</code></a> takes <code>&amp;mut self</code> and <a href=\"trait.FnOnce.html\" title=\"trait std::ops::FnOnce\"><code>FnOnce</code></a> takes <code>self</code>. These correspond to the three kinds of\nmethods that can be invoked on an instance: call-by-reference,\ncall-by-mutable-reference, and call-by-value. The most common use of these\ntraits is to act as bounds to higher-level functions that take functions or\nclosures as arguments.</p>\n<p>Taking a <a href=\"trait.Fn.html\" title=\"trait std::ops::Fn\"><code>Fn</code></a> as a parameter:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>call_with_one&lt;F&gt;(func: F) -&gt; usize\n    <span class=\"kw\">where </span>F: Fn(usize) -&gt; usize\n{\n    func(<span class=\"number\">1</span>)\n}\n\n<span class=\"kw\">let </span>double = |x| x * <span class=\"number\">2</span>;\n<span class=\"macro\">assert_eq!</span>(call_with_one(double), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+call_with_one%3CF%3E(func:+F)+-%3E+usize%0A++++++++where+F:+Fn(usize)+-%3E+usize%0A++++%7B%0A++++++++func(1)%0A++++%7D%0A++++%0A++++let+double+=+%7Cx%7C+x+*+2;%0A++++assert_eq!(call_with_one(double),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Taking a <a href=\"trait.FnMut.html\" title=\"trait std::ops::FnMut\"><code>FnMut</code></a> as a parameter:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>do_twice&lt;F&gt;(<span class=\"kw-2\">mut </span>func: F)\n    <span class=\"kw\">where </span>F: FnMut()\n{\n    func();\n    func();\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: usize = <span class=\"number\">1</span>;\n{\n    <span class=\"kw\">let </span>add_two_to_x = || x += <span class=\"number\">2</span>;\n    do_twice(add_two_to_x);\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+do_twice%3CF%3E(mut+func:+F)%0A++++++++where+F:+FnMut()%0A++++%7B%0A++++++++func();%0A++++++++func();%0A++++%7D%0A++++%0A++++let+mut+x:+usize+=+1;%0A++++%7B%0A++++++++let+add_two_to_x+=+%7C%7C+x+%2B=+2;%0A++++++++do_twice(add_two_to_x);%0A++++%7D%0A++++%0A++++assert_eq!(x,+5);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Taking a <a href=\"trait.FnOnce.html\" title=\"trait std::ops::FnOnce\"><code>FnOnce</code></a> as a parameter:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>consume_with_relish&lt;F&gt;(func: F)\n    <span class=\"kw\">where </span>F: FnOnce() -&gt; String\n{\n    <span class=\"comment\">// `func` consumes its captured variables, so it cannot be run more\n    // than once\n    </span><span class=\"macro\">println!</span>(<span class=\"string\">\"Consumed: {}\"</span>, func());\n\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Delicious!\"</span>);\n\n    <span class=\"comment\">// Attempting to invoke `func()` again will throw a `use of moved\n    // value` error for `func`\n</span>}\n\n<span class=\"kw\">let </span>x = String::from(<span class=\"string\">\"x\"</span>);\n<span class=\"kw\">let </span>consume_and_return_x = <span class=\"kw\">move </span>|| x;\nconsume_with_relish(consume_and_return_x);\n\n<span class=\"comment\">// `consume_and_return_x` can no longer be invoked at this point</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+consume_with_relish%3CF%3E(func:+F)%0A++++++++where+F:+FnOnce()+-%3E+String%0A++++%7B%0A++++++++//+%60func%60+consumes+its+captured+variables,+so+it+cannot+be+run+more%0A++++++++//+than+once%0A++++++++println!(%22Consumed:+%7B%7D%22,+func());%0A++++%0A++++++++println!(%22Delicious!%22);%0A++++%0A++++++++//+Attempting+to+invoke+%60func()%60+again+will+throw+a+%60use+of+moved%0A++++++++//+value%60+error+for+%60func%60%0A++++%7D%0A++++%0A++++let+x+=+String::from(%22x%22);%0A++++let+consume_and_return_x+=+move+%7C%7C+x;%0A++++consume_with_relish(consume_and_return_x);%0A++++%0A++++//+%60consume_and_return_x%60+can+no+longer+be+invoked+at+this+point%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"structs\" class=\"section-header\">Structs<a href=\"#structs\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Range.html\" title=\"struct std::ops::Range\">Range</a></div><div class=\"desc docblock-short\">A (half-open) range bounded inclusively below and exclusively above\n(<code>start..end</code>).</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RangeFrom.html\" title=\"struct std::ops::RangeFrom\">RangeFrom</a></div><div class=\"desc docblock-short\">A range only bounded inclusively below (<code>start..</code>).</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RangeFull.html\" title=\"struct std::ops::RangeFull\">RangeFull</a></div><div class=\"desc docblock-short\">An unbounded range (<code>..</code>).</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RangeInclusive.html\" title=\"struct std::ops::RangeInclusive\">RangeInclusive</a></div><div class=\"desc docblock-short\">A range bounded inclusively below and above (<code>start..=end</code>).</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RangeTo.html\" title=\"struct std::ops::RangeTo\">RangeTo</a></div><div class=\"desc docblock-short\">A range only bounded exclusively above (<code>..end</code>).</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RangeToInclusive.html\" title=\"struct std::ops::RangeToInclusive\">RangeToInclusive</a></div><div class=\"desc docblock-short\">A range only bounded inclusively above (<code>..=end</code>).</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Yeet.html\" title=\"struct std::ops::Yeet\">Yeet</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Implement <code>FromResidual&lt;Yeet&lt;T&gt;&gt;</code> on your type to enable\n<code>do yeet expr</code> syntax in functions returning your type.</div></li></ul><h2 id=\"enums\" class=\"section-header\">Enums<a href=\"#enums\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a></div><div class=\"desc docblock-short\">An endpoint of a range of keys.</div></li><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a></div><div class=\"desc docblock-short\">Used to tell an operation whether it should exit early or go on as usual.</div></li><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.CoroutineState.html\" title=\"enum std::ops::CoroutineState\">CoroutineState</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">The result of a coroutine resumption.</div></li></ul><h2 id=\"traits\" class=\"section-header\">Traits<a href=\"#traits\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Add.html\" title=\"trait std::ops::Add\">Add</a></div><div class=\"desc docblock-short\">The addition operator <code>+</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a></div><div class=\"desc docblock-short\">The addition assignment operator <code>+=</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a></div><div class=\"desc docblock-short\">The bitwise AND operator <code>&amp;</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a></div><div class=\"desc docblock-short\">The bitwise AND assignment operator <code>&amp;=</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a></div><div class=\"desc docblock-short\">The bitwise OR operator <code>|</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a></div><div class=\"desc docblock-short\">The bitwise OR assignment operator <code>|=</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a></div><div class=\"desc docblock-short\">The bitwise XOR operator <code>^</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a></div><div class=\"desc docblock-short\">The bitwise XOR assignment operator <code>^=</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a></div><div class=\"desc docblock-short\">Used for immutable dereferencing operations, like <code>*v</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a></div><div class=\"desc docblock-short\">Used for mutable dereferencing operations, like in <code>*v = 1;</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Div.html\" title=\"trait std::ops::Div\">Div</a></div><div class=\"desc docblock-short\">The division operator <code>/</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a></div><div class=\"desc docblock-short\">The division assignment operator <code>/=</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a></div><div class=\"desc docblock-short\">Custom code within the destructor.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Fn.html\" title=\"trait std::ops::Fn\">Fn</a></div><div class=\"desc docblock-short\">The version of the call operator that takes an immutable receiver.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a></div><div class=\"desc docblock-short\">The version of the call operator that takes a mutable receiver.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a></div><div class=\"desc docblock-short\">The version of the call operator that takes a by-value receiver.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Index.html\" title=\"trait std::ops::Index\">Index</a></div><div class=\"desc docblock-short\">Used for indexing operations (<code>container[index]</code>) in immutable contexts.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.IndexMut.html\" title=\"trait std::ops::IndexMut\">IndexMut</a></div><div class=\"desc docblock-short\">Used for indexing operations (<code>container[index]</code>) in mutable contexts.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a></div><div class=\"desc docblock-short\">The multiplication operator <code>*</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a></div><div class=\"desc docblock-short\">The multiplication assignment operator <code>*=</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a></div><div class=\"desc docblock-short\">The unary negation operator <code>-</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Not.html\" title=\"trait std::ops::Not\">Not</a></div><div class=\"desc docblock-short\">The unary logical negation operator <code>!</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.RangeBounds.html\" title=\"trait std::ops::RangeBounds\">RangeBounds</a></div><div class=\"desc docblock-short\"><code>RangeBounds</code> is implemented by Rust’s built-in range types, produced\nby range syntax like <code>..</code>, <code>a..</code>, <code>..b</code>, <code>..=c</code>, <code>d..e</code>, or <code>f..=g</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a></div><div class=\"desc docblock-short\">The remainder operator <code>%</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a></div><div class=\"desc docblock-short\">The remainder assignment operator <code>%=</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a></div><div class=\"desc docblock-short\">The left shift operator <code>&lt;&lt;</code>. Note that because this trait is implemented\nfor all integer types with multiple right-hand-side types, Rust’s type\nchecker has special handling for <code>_ &lt;&lt; _</code>, setting the result type for\ninteger operations to the type of the left-hand-side operand. This means\nthat though <code>a &lt;&lt; b</code> and <code>a.shl(b)</code> are one and the same from an evaluation\nstandpoint, they are different when it comes to type inference.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a></div><div class=\"desc docblock-short\">The left shift assignment operator <code>&lt;&lt;=</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a></div><div class=\"desc docblock-short\">The right shift operator <code>&gt;&gt;</code>. Note that because this trait is implemented\nfor all integer types with multiple right-hand-side types, Rust’s type\nchecker has special handling for <code>_ &gt;&gt; _</code>, setting the result type for\ninteger operations to the type of the left-hand-side operand. This means\nthat though <code>a &gt;&gt; b</code> and <code>a.shr(b)</code> are one and the same from an evaluation\nstandpoint, they are different when it comes to type inference.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a></div><div class=\"desc docblock-short\">The right shift assignment operator <code>&gt;&gt;=</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a></div><div class=\"desc docblock-short\">The subtraction operator <code>-</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a></div><div class=\"desc docblock-short\">The subtraction assignment operator <code>-=</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.AsyncFn.html\" title=\"trait std::ops::AsyncFn\">AsyncFn</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">An async-aware version of the <a href=\"trait.Fn.html\" title=\"trait std::ops::Fn\"><code>Fn</code></a> trait.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.AsyncFnMut.html\" title=\"trait std::ops::AsyncFnMut\">AsyncFnMut</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">An async-aware version of the <a href=\"trait.FnMut.html\" title=\"trait std::ops::FnMut\"><code>FnMut</code></a> trait.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.AsyncFnOnce.html\" title=\"trait std::ops::AsyncFnOnce\">AsyncFnOnce</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">An async-aware version of the <a href=\"trait.FnOnce.html\" title=\"trait std::ops::FnOnce\"><code>FnOnce</code></a> trait.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">The trait implemented by builtin coroutine types.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.DerefPure.html\" title=\"trait std::ops::DerefPure\">DerefPure</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Perma-unstable marker trait. Indicates that the type has a well-behaved <a href=\"trait.Deref.html\" title=\"trait std::ops::Deref\"><code>Deref</code></a>\n(and, if applicable, <a href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\"><code>DerefMut</code></a>) implementation. This is relied on for soundness\nof deref patterns.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\"><code>DispatchFromDyn</code> is used in the implementation of object safety checks (specifically allowing\narbitrary self types), to guarantee that a method’s receiver type can be dispatched on.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.FromResidual.html\" title=\"trait std::ops::FromResidual\">FromResidual</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Used to specify which residuals can be converted into which <a href=\"trait.Try.html\" title=\"trait std::ops::Try\"><code>crate::ops::Try</code></a> types.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.OneSidedRange.html\" title=\"trait std::ops::OneSidedRange\">OneSidedRange</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\"><code>OneSidedRange</code> is implemented for built-in range types that are unbounded\non one side. For example, <code>a..</code>, <code>..b</code> and <code>..=c</code> implement <code>OneSidedRange</code>,\nbut <code>..</code>, <code>d..e</code>, and <code>f..=g</code> do not.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Allows retrieving the canonical type implementing <a href=\"trait.Try.html\" title=\"trait std::ops::Try\"><code>Try</code></a> that has this type\nas its residual and allows it to hold an <code>O</code> as its output.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Try.html\" title=\"trait std::ops::Try\">Try</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">The <code>?</code> operator and <code>try {}</code> blocks.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:03.297Z"
}