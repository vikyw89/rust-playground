{
	"title": "Bound in std::ops - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ops/enum.Bound.html",
	"markdown": "# Bound in std::ops - Rust\n\n## Enum [std](../index.html)::[ops](index.html)::[Bound](#)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#672) ·\n\n```\npub enum Bound<T> {\n    Included(T),\n    Excluded(T),\n    Unbounded,\n}\n```\n\nExpand description\n\nAn endpoint of a range of keys.\n\n## [§](#examples)Examples\n\n`Bound`s are range endpoints:\n\n```\nuse std::ops::Bound::*;\nuse std::ops::RangeBounds;\n\nassert_eq!((..100).start_bound(), Unbounded);\nassert_eq!((1..12).start_bound(), Included(&1));\nassert_eq!((1..12).end_bound(), Excluded(&12));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::Bound::*;%0A++++use+std::ops::RangeBounds;%0A++++%0A++++assert_eq!((..100).start_bound(),+Unbounded);%0A++++assert_eq!((1..12).start_bound(),+Included(%261));%0A++++assert_eq!((1..12).end_bound(),+Excluded(%2612));%0A%7D&edition=2021)\n\nUsing a tuple of `Bound`s as an argument to [`BTreeMap::range`](about:blank/std/collections/btree_map/struct.BTreeMap.html#method.range). Note that in most cases, it’s better to use range syntax (`1..5`) instead.\n\n```\nuse std::collections::BTreeMap;\nuse std::ops::Bound::{Excluded, Included, Unbounded};\n\nlet mut map = BTreeMap::new();\nmap.insert(3, \"a\");\nmap.insert(5, \"b\");\nmap.insert(8, \"c\");\n\nfor (key, value) in map.range((Excluded(3), Included(8))) {\n    println!(\"{key}: {value}\");\n}\n\nassert_eq!(Some((&3, &\"a\")), map.range((Unbounded, Included(5))).next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeMap;%0A++++use+std::ops::Bound::%7BExcluded,+Included,+Unbounded%7D;%0A++++%0A++++let+mut+map+=+BTreeMap::new();%0A++++map.insert(3,+%22a%22);%0A++++map.insert(5,+%22b%22);%0A++++map.insert(8,+%22c%22);%0A++++%0A++++for+(key,+value)+in+map.range((Excluded(3),+Included(8)))+%7B%0A++++++++println!(%22%7Bkey%7D:+%7Bvalue%7D%22);%0A++++%7D%0A++++%0A++++assert_eq!(Some((%263,+%26%22a%22)),+map.range((Unbounded,+Included(5))).next());%0A%7D&edition=2021)\n\n[§](#variant.Included)1.17.0\n\nAn inclusive bound.\n\n[§](#variant.Excluded)1.17.0\n\nAn exclusive bound.\n\n[§](#variant.Unbounded)1.17.0\n\nAn infinite endpoint. Indicates that there is no bound in this direction.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#684)[§](#impl-Bound%3CT%3E)\n\n1.65.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#688)\n\nConverts from `&Bound<T>` to `Bound<&T>`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#699)\n\n🔬This is a nightly-only experimental API. (`bound_as_ref` [#80996](https://github.com/rust-lang/rust/issues/80996))\n\nConverts from `&mut Bound<T>` to `Bound<&mut T>`.\n\n1.77.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#730)\n\nMaps a `Bound<T>` to a `Bound<U>` by applying a function to the contained value (including both `Included` and `Excluded`), returning a `Bound` of the same kind.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::ops::Bound::*;\n\nlet bound_string = Included(\"Hello, World!\");\n\nassert_eq!(bound_string.map(|s| s.len()), Included(13));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::Bound::*;%0A++++%0A++++let+bound_string+=+Included(%22Hello,+World!%22);%0A++++%0A++++assert_eq!(bound_string.map(%7Cs%7C+s.len()),+Included(13));%0A%7D&edition=2021)\n\n```\nuse std::ops::Bound;\nuse Bound::*;\n\nlet unbounded_string: Bound<String> = Unbounded;\n\nassert_eq!(unbounded_string.map(|s| s.len()), Unbounded);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::Bound;%0A++++use+Bound::*;%0A++++%0A++++let+unbounded_string:+Bound%3CString%3E+=+Unbounded;%0A++++%0A++++assert_eq!(unbounded_string.map(%7Cs%7C+s.len()),+Unbounded);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#739)[§](#impl-Bound%3C%26T%3E)\n\n1.55.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#753)\n\nMap a `Bound<&T>` to a `Bound<T>` by cloning the contents of the bound.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::ops::Bound::*;\nuse std::ops::RangeBounds;\n\nassert_eq!((1..12).start_bound(), Included(&1));\nassert_eq!((1..12).start_bound().cloned(), Included(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::Bound::*;%0A++++use+std::ops::RangeBounds;%0A++++%0A++++assert_eq!((1..12).start_bound(),+Included(%261));%0A++++assert_eq!((1..12).start_bound().cloned(),+Included(1));%0A%7D&edition=2021)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671)[§](#impl-Clone-for-Bound%3CT%3E)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671)[§](#impl-Debug-for-Bound%3CT%3E)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671)[§](#impl-Hash-for-Bound%3CT%3E)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671)[§](#impl-PartialEq-for-Bound%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671)[§](#impl-Copy-for-Bound%3CT%3E)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671)[§](#impl-Eq-for-Bound%3CT%3E)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671)[§](#impl-StructuralPartialEq-for-Bound%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An endpoint of a range of keys.\"><title>Bound in std::ops - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc enum\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Bound</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Bound</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#variants\">Variants</a></h3><ul class=\"block variant\"><li><a href=\"#variant.Excluded\">Excluded</a></li><li><a href=\"#variant.Included\">Included</a></li><li><a href=\"#variant.Unbounded\">Unbounded</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_mut\">as_mut</a></li><li><a href=\"#method.as_ref\">as_ref</a></li><li><a href=\"#method.cloned\">cloned</a></li><li><a href=\"#method.map\">map</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-Bound%3CT%3E\">Clone</a></li><li><a href=\"#impl-Copy-for-Bound%3CT%3E\">Copy</a></li><li><a href=\"#impl-Debug-for-Bound%3CT%3E\">Debug</a></li><li><a href=\"#impl-Eq-for-Bound%3CT%3E\">Eq</a></li><li><a href=\"#impl-Hash-for-Bound%3CT%3E\">Hash</a></li><li><a href=\"#impl-PartialEq-for-Bound%3CT%3E\">PartialEq</a></li><li><a href=\"#impl-StructuralPartialEq-for-Bound%3CT%3E\">StructuralPartialEq</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Bound%3CT%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Bound%3CT%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Bound%3CT%3E\">Send</a></li><li><a href=\"#impl-Sync-for-Bound%3CT%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-Bound%3CT%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Bound%3CT%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::ops</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Range.html\">Range</a></li><li><a href=\"struct.RangeFrom.html\">RangeFrom</a></li><li><a href=\"struct.RangeFull.html\">RangeFull</a></li><li><a href=\"struct.RangeInclusive.html\">RangeInclusive</a></li><li><a href=\"struct.RangeTo.html\">RangeTo</a></li><li><a href=\"struct.RangeToInclusive.html\">RangeToInclusive</a></li><li><a href=\"struct.Yeet.html\">Yeet</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Bound.html\">Bound</a></li><li><a href=\"enum.ControlFlow.html\">ControlFlow</a></li><li><a href=\"enum.CoroutineState.html\">CoroutineState</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Add.html\">Add</a></li><li><a href=\"trait.AddAssign.html\">AddAssign</a></li><li><a href=\"trait.AsyncFn.html\">AsyncFn</a></li><li><a href=\"trait.AsyncFnMut.html\">AsyncFnMut</a></li><li><a href=\"trait.AsyncFnOnce.html\">AsyncFnOnce</a></li><li><a href=\"trait.BitAnd.html\">BitAnd</a></li><li><a href=\"trait.BitAndAssign.html\">BitAndAssign</a></li><li><a href=\"trait.BitOr.html\">BitOr</a></li><li><a href=\"trait.BitOrAssign.html\">BitOrAssign</a></li><li><a href=\"trait.BitXor.html\">BitXor</a></li><li><a href=\"trait.BitXorAssign.html\">BitXorAssign</a></li><li><a href=\"trait.CoerceUnsized.html\">CoerceUnsized</a></li><li><a href=\"trait.Coroutine.html\">Coroutine</a></li><li><a href=\"trait.Deref.html\">Deref</a></li><li><a href=\"trait.DerefMut.html\">DerefMut</a></li><li><a href=\"trait.DerefPure.html\">DerefPure</a></li><li><a href=\"trait.DispatchFromDyn.html\">DispatchFromDyn</a></li><li><a href=\"trait.Div.html\">Div</a></li><li><a href=\"trait.DivAssign.html\">DivAssign</a></li><li><a href=\"trait.Drop.html\">Drop</a></li><li><a href=\"trait.Fn.html\">Fn</a></li><li><a href=\"trait.FnMut.html\">FnMut</a></li><li><a href=\"trait.FnOnce.html\">FnOnce</a></li><li><a href=\"trait.FromResidual.html\">FromResidual</a></li><li><a href=\"trait.Index.html\">Index</a></li><li><a href=\"trait.IndexMut.html\">IndexMut</a></li><li><a href=\"trait.Mul.html\">Mul</a></li><li><a href=\"trait.MulAssign.html\">MulAssign</a></li><li><a href=\"trait.Neg.html\">Neg</a></li><li><a href=\"trait.Not.html\">Not</a></li><li><a href=\"trait.OneSidedRange.html\">OneSidedRange</a></li><li><a href=\"trait.RangeBounds.html\">RangeBounds</a></li><li><a href=\"trait.Rem.html\">Rem</a></li><li><a href=\"trait.RemAssign.html\">RemAssign</a></li><li><a href=\"trait.Residual.html\">Residual</a></li><li><a href=\"trait.Shl.html\">Shl</a></li><li><a href=\"trait.ShlAssign.html\">ShlAssign</a></li><li><a href=\"trait.Shr.html\">Shr</a></li><li><a href=\"trait.ShrAssign.html\">ShrAssign</a></li><li><a href=\"trait.Sub.html\">Sub</a></li><li><a href=\"trait.SubAssign.html\">SubAssign</a></li><li><a href=\"trait.Try.html\">Try</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Enum <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ops</a>::<wbr><a class=\"enum\" href=\"#\">Bound</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#672\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub enum Bound&lt;T&gt; {\n    Included(T),\n    Excluded(T),\n    Unbounded,\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An endpoint of a range of keys.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p><code>Bound</code>s are range endpoints:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ops::Bound::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::ops::RangeBounds;\n\n<span class=\"macro\">assert_eq!</span>((..<span class=\"number\">100</span>).start_bound(), Unbounded);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1</span>..<span class=\"number\">12</span>).start_bound(), Included(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1</span>..<span class=\"number\">12</span>).end_bound(), Excluded(<span class=\"kw-2\">&amp;</span><span class=\"number\">12</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::Bound::*;%0A++++use+std::ops::RangeBounds;%0A++++%0A++++assert_eq!((..100).start_bound(),+Unbounded);%0A++++assert_eq!((1..12).start_bound(),+Included(%261));%0A++++assert_eq!((1..12).end_bound(),+Excluded(%2612));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using a tuple of <code>Bound</code>s as an argument to <a href=\"../../std/collections/btree_map/struct.BTreeMap.html#method.range\"><code>BTreeMap::range</code></a>.\nNote that in most cases, it’s better to use range syntax (<code>1..5</code>) instead.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::BTreeMap;\n<span class=\"kw\">use </span>std::ops::Bound::{Excluded, Included, Unbounded};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = BTreeMap::new();\nmap.insert(<span class=\"number\">3</span>, <span class=\"string\">\"a\"</span>);\nmap.insert(<span class=\"number\">5</span>, <span class=\"string\">\"b\"</span>);\nmap.insert(<span class=\"number\">8</span>, <span class=\"string\">\"c\"</span>);\n\n<span class=\"kw\">for </span>(key, value) <span class=\"kw\">in </span>map.range((Excluded(<span class=\"number\">3</span>), Included(<span class=\"number\">8</span>))) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{key}: {value}\"</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>)), map.range((Unbounded, Included(<span class=\"number\">5</span>))).next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::BTreeMap;%0A++++use+std::ops::Bound::%7BExcluded,+Included,+Unbounded%7D;%0A++++%0A++++let+mut+map+=+BTreeMap::new();%0A++++map.insert(3,+%22a%22);%0A++++map.insert(5,+%22b%22);%0A++++map.insert(8,+%22c%22);%0A++++%0A++++for+(key,+value)+in+map.range((Excluded(3),+Included(8)))+%7B%0A++++++++println!(%22%7Bkey%7D:+%7Bvalue%7D%22);%0A++++%7D%0A++++%0A++++assert_eq!(Some((%263,+%26%22a%22)),+map.range((Unbounded,+Included(5))).next());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"variants\" class=\"variants section-header\">Variants<a href=\"#variants\" class=\"anchor\">§</a></h2><div class=\"variants\"><section id=\"variant.Included\" class=\"variant\"><a href=\"#variant.Included\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.17.0\">1.17.0</span><h3 class=\"code-header\">Included(T)</h3></section><div class=\"docblock\"><p>An inclusive bound.</p>\n</div><section id=\"variant.Excluded\" class=\"variant\"><a href=\"#variant.Excluded\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.17.0\">1.17.0</span><h3 class=\"code-header\">Excluded(T)</h3></section><div class=\"docblock\"><p>An exclusive bound.</p>\n</div><section id=\"variant.Unbounded\" class=\"variant\"><a href=\"#variant.Unbounded\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.17.0\">1.17.0</span><h3 class=\"code-header\">Unbounded</h3></section><div class=\"docblock\"><p>An infinite endpoint. Indicates that there is no bound in this direction.</p>\n</div></div><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Bound%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#684\">source</a><a href=\"#impl-Bound%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.65.0\">1.65.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#699\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bound_as_ref</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/80996\">#80996</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#730\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to the contained value (including\nboth <code>Included</code> and <code>Excluded</code>), returning a <code>Bound</code> of the same kind.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ops::Bound::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bound_string = Included(<span class=\"string\">\"Hello, World!\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(bound_string.map(|s| s.len()), Included(<span class=\"number\">13</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::Bound::*;%0A++++%0A++++let+bound_string+=+Included(%22Hello,+World!%22);%0A++++%0A++++assert_eq!(bound_string.map(%7Cs%7C+s.len()),+Included(13));%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ops::Bound;\n<span class=\"kw\">use </span>Bound::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>unbounded_string: Bound&lt;String&gt; = Unbounded;\n\n<span class=\"macro\">assert_eq!</span>(unbounded_string.map(|s| s.len()), Unbounded);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::Bound;%0A++++use+Bound::*;%0A++++%0A++++let+unbounded_string:+Bound%3CString%3E+=+Unbounded;%0A++++%0A++++assert_eq!(unbounded_string.map(%7Cs%7C+s.len()),+Unbounded);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Bound%3C%26T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#739\">source</a><a href=\"#impl-Bound%3C%26T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cloned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#753\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.cloned\" class=\"fn\">cloned</a>(self) -&gt; <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Map a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of the bound.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ops::Bound::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::ops::RangeBounds;\n\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1</span>..<span class=\"number\">12</span>).start_bound(), Included(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1</span>..<span class=\"number\">12</span>).start_bound().cloned(), Included(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::Bound::*;%0A++++use+std::ops::RangeBounds;%0A++++%0A++++assert_eq!((1..12).start_bound(),+Included(%261));%0A++++assert_eq!((1..12).start_bound().cloned(),+Included(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Bound%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671\">source</a></span><a href=\"#impl-Clone-for-Bound%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Bound%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671\">source</a></span><a href=\"#impl-Debug-for-Bound%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-Bound%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671\">source</a></span><a href=\"#impl-Hash-for-Bound%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-Bound%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671\">source</a></span><a href=\"#impl-PartialEq-for-Bound%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><section id=\"impl-Copy-for-Bound%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671\">source</a></span><a href=\"#impl-Copy-for-Bound%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h3></section><section id=\"impl-Eq-for-Bound%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671\">source</a></span><a href=\"#impl-Eq-for-Bound%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,</div></h3></section><section id=\"impl-StructuralPartialEq-for-Bound%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#671\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Bound%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;</h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Bound%3CT%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-Bound%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-Bound%3CT%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Bound%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-Bound%3CT%3E\" class=\"impl\"><a href=\"#impl-Send-for-Bound%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-Bound%3CT%3E\" class=\"impl\"><a href=\"#impl-Sync-for-Bound%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-Bound%3CT%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-Bound%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-Bound%3CT%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Bound%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"enum\" href=\"enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:46.169Z"
}