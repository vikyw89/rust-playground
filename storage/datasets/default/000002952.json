{
	"title": "MetadataExt in std::os::windows::fs - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/windows/fs/trait.MetadataExt.html",
	"markdown": "# MetadataExt in std::os::windows::fs - Rust\n\n```\npub trait MetadataExt {\n    // Required methods\n    fn file_attributes(&self) -> u32;\n    fn creation_time(&self) -> u64;\n    fn last_access_time(&self) -> u64;\n    fn last_write_time(&self) -> u64;\n    fn file_size(&self) -> u64;\n    fn volume_serial_number(&self) -> Option<u32>;\n    fn number_of_links(&self) -> Option<u32>;\n    fn file_index(&self) -> Option<u64>;\n}\n```\n\nAvailable on **Windows** only.\n\nExpand description\n\n1.1.0 · [source](about:blank/src/std/os/windows/fs.rs.html#328)\n\nReturns the value of the `dwFileAttributes` field of this metadata.\n\nThis field contains the file system attribute information for a file or directory. For possible values and their descriptions, see [File Attribute Constants](https://docs.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants) in the Windows Dev Center.\n\n##### [§](#examples)Examples\n\n```\nuse std::io;\nuse std::fs;\nuse std::os::windows::prelude::*;\n\nfn main() -> io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n    let attributes = metadata.file_attributes();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::fs;%0Ause+std::os::windows::prelude::*;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A++++let+attributes+=+metadata.file_attributes();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/windows/fs.rs.html#357)\n\nReturns the value of the `ftCreationTime` field of this metadata.\n\nThe returned 64-bit value is equivalent to a [`FILETIME`](https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime) struct, which represents the number of 100-nanosecond intervals since January 1, 1601 (UTC). The struct is automatically converted to a `u64` value, as that is the recommended way to use it.\n\nIf the underlying filesystem does not support creation time, the returned value is 0.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::io;\nuse std::fs;\nuse std::os::windows::prelude::*;\n\nfn main() -> io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n    let creation_time = metadata.creation_time();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::fs;%0Ause+std::os::windows::prelude::*;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A++++let+creation_time+=+metadata.creation_time();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/windows/fs.rs.html#392)\n\nReturns the value of the `ftLastAccessTime` field of this metadata.\n\nThe returned 64-bit value is equivalent to a [`FILETIME`](https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime) struct, which represents the number of 100-nanosecond intervals since January 1, 1601 (UTC). The struct is automatically converted to a `u64` value, as that is the recommended way to use it.\n\nFor a file, the value specifies the last time that a file was read from or written to. For a directory, the value specifies when the directory was created. For both files and directories, the specified date is correct, but the time of day is always set to midnight.\n\nIf the underlying filesystem does not support last access time, the returned value is 0.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::io;\nuse std::fs;\nuse std::os::windows::prelude::*;\n\nfn main() -> io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n    let last_access_time = metadata.last_access_time();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::fs;%0Ause+std::os::windows::prelude::*;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A++++let+last_access_time+=+metadata.last_access_time();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/windows/fs.rs.html#425)\n\nReturns the value of the `ftLastWriteTime` field of this metadata.\n\nThe returned 64-bit value is equivalent to a [`FILETIME`](https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime) struct, which represents the number of 100-nanosecond intervals since January 1, 1601 (UTC). The struct is automatically converted to a `u64` value, as that is the recommended way to use it.\n\nFor a file, the value specifies the last time that a file was written to. For a directory, the structure specifies when the directory was created.\n\nIf the underlying filesystem does not support the last write time, the returned value is 0.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::io;\nuse std::fs;\nuse std::os::windows::prelude::*;\n\nfn main() -> io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n    let last_write_time = metadata.last_write_time();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::fs;%0Ause+std::os::windows::prelude::*;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A++++let+last_write_time+=+metadata.last_write_time();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/windows/fs.rs.html#446)\n\nReturns the value of the `nFileSize{High,Low}` fields of this metadata.\n\nThe returned value does not have meaning for directories.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::io;\nuse std::fs;\nuse std::os::windows::prelude::*;\n\nfn main() -> io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n    let file_size = metadata.file_size();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::fs;%0Ause+std::os::windows::prelude::*;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A++++let+file_size+=+metadata.file_size();%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/os/windows/fs.rs.html#455)\n\n🔬This is a nightly-only experimental API. (`windows_by_handle` [#63010](https://github.com/rust-lang/rust/issues/63010))\n\nReturns the value of the `dwVolumeSerialNumber` field of this metadata.\n\nThis will return `None` if the `Metadata` instance was created from a call to `DirEntry::metadata`. If this `Metadata` was created by using `fs::metadata` or `File::metadata`, then this will return `Some`.\n\n[source](about:blank/src/std/os/windows/fs.rs.html#464)\n\n🔬This is a nightly-only experimental API. (`windows_by_handle` [#63010](https://github.com/rust-lang/rust/issues/63010))\n\nReturns the value of the `nNumberOfLinks` field of this metadata.\n\nThis will return `None` if the `Metadata` instance was created from a call to `DirEntry::metadata`. If this `Metadata` was created by using `fs::metadata` or `File::metadata`, then this will return `Some`.\n\n[source](about:blank/src/std/os/windows/fs.rs.html#473)\n\n🔬This is a nightly-only experimental API. (`windows_by_handle` [#63010](https://github.com/rust-lang/rust/issues/63010))\n\nReturns the value of the `nFileIndex{Low,High}` fields of this metadata.\n\nThis will return `None` if the `Metadata` instance was created from a call to `DirEntry::metadata`. If this `Metadata` was created by using `fs::metadata` or `File::metadata`, then this will return `Some`.\n\n1.1.0 · [source](about:blank/src/std/os/windows/fs.rs.html#477-502)[§](#impl-MetadataExt-for-Metadata)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Windows-specific extensions to `fs::Metadata`.\"><title>MetadataExt in std::os::windows::fs - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">MetadataExt</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">MetadataExt</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.creation_time\">creation_time</a></li><li><a href=\"#tymethod.file_attributes\">file_attributes</a></li><li><a href=\"#tymethod.file_index\">file_index</a></li><li><a href=\"#tymethod.file_size\">file_size</a></li><li><a href=\"#tymethod.last_access_time\">last_access_time</a></li><li><a href=\"#tymethod.last_write_time\">last_write_time</a></li><li><a href=\"#tymethod.number_of_links\">number_of_links</a></li><li><a href=\"#tymethod.volume_serial_number\">volume_serial_number</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::os::windows::fs</a></h2><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.FileExt.html\">FileExt</a></li><li><a href=\"trait.FileTimesExt.html\">FileTimesExt</a></li><li><a href=\"trait.FileTypeExt.html\">FileTypeExt</a></li><li><a href=\"trait.MetadataExt.html\">MetadataExt</a></li><li><a href=\"trait.OpenOptionsExt.html\">OpenOptionsExt</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.junction_point.html\">junction_point</a></li><li><a href=\"fn.symlink_dir.html\">symlink_dir</a></li><li><a href=\"fn.symlink_file.html\">symlink_file</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">windows</a>::<wbr><a href=\"index.html\">fs</a>::<wbr><a class=\"trait\" href=\"#\">MetadataExt</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#304-474\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait MetadataExt {\n    // Required methods\n    fn <a href=\"#tymethod.file_attributes\" class=\"fn\">file_attributes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.creation_time\" class=\"fn\">creation_time</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.last_access_time\" class=\"fn\">last_access_time</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.last_write_time\" class=\"fn\">last_write_time</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.file_size\" class=\"fn\">file_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.volume_serial_number\" class=\"fn\">volume_serial_number</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.number_of_links\" class=\"fn\">number_of_links</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.file_index\" class=\"fn\">file_index</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>&gt;;\n}</code></pre><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Windows-specific extensions to <a href=\"../../../fs/struct.Metadata.html\" title=\"struct std::fs::Metadata\"><code>fs::Metadata</code></a>.</p>\n<p>The data members that this trait exposes correspond to the members\nof the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/ns-fileapi-by_handle_file_information\"><code>BY_HANDLE_FILE_INFORMATION</code></a> structure.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.file_attributes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#328\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.file_attributes\" class=\"fn\">file_attributes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the value of the <code>dwFileAttributes</code> field of this metadata.</p>\n<p>This field contains the file system attribute information for a file\nor directory. For possible values and their descriptions, see\n<a href=\"https://docs.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants\">File Attribute Constants</a> in the Windows Dev Center.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::windows::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>metadata = fs::metadata(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>attributes = metadata.file_attributes();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::fs;%0Ause+std::os::windows::prelude::*;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A++++let+attributes+=+metadata.file_attributes();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.creation_time\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#357\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.creation_time\" class=\"fn\">creation_time</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the value of the <code>ftCreationTime</code> field of this metadata.</p>\n<p>The returned 64-bit value is equivalent to a <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime\"><code>FILETIME</code></a> struct,\nwhich represents the number of 100-nanosecond intervals since\nJanuary 1, 1601 (UTC). The struct is automatically\nconverted to a <code>u64</code> value, as that is the recommended way\nto use it.</p>\n<p>If the underlying filesystem does not support creation time, the\nreturned value is 0.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::windows::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>metadata = fs::metadata(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>creation_time = metadata.creation_time();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::fs;%0Ause+std::os::windows::prelude::*;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A++++let+creation_time+=+metadata.creation_time();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.last_access_time\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#392\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.last_access_time\" class=\"fn\">last_access_time</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the value of the <code>ftLastAccessTime</code> field of this metadata.</p>\n<p>The returned 64-bit value is equivalent to a <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime\"><code>FILETIME</code></a> struct,\nwhich represents the number of 100-nanosecond intervals since\nJanuary 1, 1601 (UTC). The struct is automatically\nconverted to a <code>u64</code> value, as that is the recommended way\nto use it.</p>\n<p>For a file, the value specifies the last time that a file was read\nfrom or written to. For a directory, the value specifies when\nthe directory was created. For both files and directories, the\nspecified date is correct, but the time of day is always set to\nmidnight.</p>\n<p>If the underlying filesystem does not support last access time, the\nreturned value is 0.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::windows::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>metadata = fs::metadata(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>last_access_time = metadata.last_access_time();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::fs;%0Ause+std::os::windows::prelude::*;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A++++let+last_access_time+=+metadata.last_access_time();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.last_write_time\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#425\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.last_write_time\" class=\"fn\">last_write_time</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the value of the <code>ftLastWriteTime</code> field of this metadata.</p>\n<p>The returned 64-bit value is equivalent to a <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime\"><code>FILETIME</code></a> struct,\nwhich represents the number of 100-nanosecond intervals since\nJanuary 1, 1601 (UTC). The struct is automatically\nconverted to a <code>u64</code> value, as that is the recommended way\nto use it.</p>\n<p>For a file, the value specifies the last time that a file was written\nto. For a directory, the structure specifies when the directory was\ncreated.</p>\n<p>If the underlying filesystem does not support the last write time,\nthe returned value is 0.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::windows::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>metadata = fs::metadata(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>last_write_time = metadata.last_write_time();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::fs;%0Ause+std::os::windows::prelude::*;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A++++let+last_write_time+=+metadata.last_write_time();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.file_size\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#446\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.file_size\" class=\"fn\">file_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the value of the <code>nFileSize{High,Low}</code> fields of this\nmetadata.</p>\n<p>The returned value does not have meaning for directories.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::windows::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>metadata = fs::metadata(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>file_size = metadata.file_size();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::fs;%0Ause+std::os::windows::prelude::*;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A++++let+file_size+=+metadata.file_size();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.volume_serial_number\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/windows/fs.rs.html#455\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.volume_serial_number\" class=\"fn\">volume_serial_number</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>windows_by_handle</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63010\">#63010</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the value of the <code>dwVolumeSerialNumber</code> field of this\nmetadata.</p>\n<p>This will return <code>None</code> if the <code>Metadata</code> instance was created from a\ncall to <code>DirEntry::metadata</code>. If this <code>Metadata</code> was created by using\n<code>fs::metadata</code> or <code>File::metadata</code>, then this will return <code>Some</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.number_of_links\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/windows/fs.rs.html#464\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.number_of_links\" class=\"fn\">number_of_links</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>windows_by_handle</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63010\">#63010</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the value of the <code>nNumberOfLinks</code> field of this\nmetadata.</p>\n<p>This will return <code>None</code> if the <code>Metadata</code> instance was created from a\ncall to <code>DirEntry::metadata</code>. If this <code>Metadata</code> was created by using\n<code>fs::metadata</code> or <code>File::metadata</code>, then this will return <code>Some</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.file_index\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/windows/fs.rs.html#473\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.file_index\" class=\"fn\">file_index</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>windows_by_handle</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63010\">#63010</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the value of the <code>nFileIndex{Low,High}</code> fields of this\nmetadata.</p>\n<p>This will return <code>None</code> if the <code>Metadata</code> instance was created from a\ncall to <code>DirEntry::metadata</code>. If this <code>Metadata</code> was created by using\n<code>fs::metadata</code> or <code>File::metadata</code>, then this will return <code>Some</code>.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-MetadataExt-for-Metadata\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#477-502\">source</a></span><a href=\"#impl-MetadataExt-for-Metadata\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.MetadataExt.html\" title=\"trait std::os::windows::fs::MetadataExt\">MetadataExt</a> for <a class=\"struct\" href=\"../../../fs/struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h3></section></div><script src=\"../../../../trait.impl/std/os/windows/fs/trait.MetadataExt.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:28.235Z"
}