{
	"title": "core - Rust",
	"url": "https://doc.rust-lang.org/stable/core/index.html",
	"markdown": "# core - Rust\n\n## Crate [core](#)\n\n1.6.0 · [source](about:blank/src/core/lib.rs.html#1-476) ·\n\nExpand description\n\n## [§](#the-rust-core-library)The Rust Core Library\n\nThe Rust Core Library is the dependency-free[1](#fn1) foundation of [The Rust Standard Library](../std/index.html). It is the portable glue between the language and its libraries, defining the intrinsic and primitive building blocks of all Rust code. It links to no upstream libraries, no system libraries, and no libc.\n\nThe core library is _minimal_: it isn’t even aware of heap allocation, nor does it provide concurrency or I/O. These things require platform integration, and this library is platform-agnostic.\n\n## [§](#how-to-use-the-core-library)How to use the core library\n\nPlease note that all of these details are currently not considered stable.\n\nThis library is built on the assumption of a few existing symbols:\n\n-   `memcpy`, `memmove`, `memset`, `memcmp`, `bcmp`, `strlen` - These are core memory routines which are generated by Rust codegen backends. Additionally, this library can make explicit calls to `strlen`. Their signatures are the same as found in C, but there are extra assumptions about their semantics: For `memcpy`, `memmove`, `memset`, `memcmp`, and `bcmp`, if the `n` parameter is 0, the function is assumed to not be UB, even if the pointers are NULL or dangling. (Note that making extra assumptions about these functions is common among compilers: [clang](https://reviews.llvm.org/D86993) and [GCC](https://gcc.gnu.org/onlinedocs/gcc/Standards.html#C-Language) do the same.) These functions are often provided by the system libc, but can also be provided by the [compiler-builtins crate](https://crates.io/crates/compiler_builtins). Note that the library does not guarantee that it will always make these assumptions, so Rust user code directly calling the C functions should follow the C specification! The advice for Rust user code is to call the functions provided by this library instead (such as `ptr::copy`).\n    \n-   `rust_begin_panic` - This function takes four arguments, a `fmt::Arguments`, a `&'static str`, and two `u32`’s. These four arguments dictate the panic message, the file at which panic was invoked, and the line and column inside the file. It is up to consumers of this core library to define this panic function; it is only required to never return. This requires a `lang` attribute named `panic_impl`.\n    \n-   `rust_eh_personality` - is used by the failure mechanisms of the compiler. This is often mapped to GCC’s personality function, but crates which do not trigger a panic can be assured that this function is never called. The `lang` attribute is called `eh_personality`.\n    \n\n-   A fixed-size array, denoted `[T; N]`, for the element type, `T`, and the non-negative compile-time constant size, `N`.\n    \n-   The boolean type.\n    \n-   A character type.\n    \n-   A 32-bit floating point type (specifically, the “binary32” type defined in IEEE 754-2008).\n    \n-   A 64-bit floating point type (specifically, the “binary64” type defined in IEEE 754-2008).\n    \n-   Function pointers, like `fn(usize) -> bool`.\n    \n-   The 8-bit signed integer type.\n    \n-   The 16-bit signed integer type.\n    \n-   The 32-bit signed integer type.\n    \n-   The 64-bit signed integer type.\n    \n-   The 128-bit signed integer type.\n    \n-   The pointer-sized signed integer type.\n    \n-   Raw, unsafe pointers, `*const T`, and `*mut T`.\n    \n-   References, `&T` and `&mut T`.\n    \n-   A dynamically-sized view into a contiguous sequence, `[T]`. Contiguous here means that elements are laid out so that every element is the same distance from its neighbors.\n    \n-   String slices.\n    \n-   A finite heterogeneous sequence, `(T, U, ..)`.\n    \n-   The 8-bit unsigned integer type.\n    \n-   The 16-bit unsigned integer type.\n    \n-   The 32-bit unsigned integer type.\n    \n-   The 64-bit unsigned integer type.\n    \n-   The 128-bit unsigned integer type.\n    \n-   The `()` type, also called “unit”.\n    \n-   The pointer-sized unsigned integer type.\n    \n-   [f16](primitive.f16.html \"primitive core::f16\")Experimental\n    \n    A 16-bit floating point type (specifically, the “binary16” type defined in IEEE 754-2008).\n    \n-   A 128-bit floating point type (specifically, the “binary128” type defined in IEEE 754-2008).\n    \n-   The `!` type, also called “never”.\n    \n\n-   Memory allocation APIs\n    \n-   Utilities for dynamic typing or type reflection.\n    \n-   SIMD and vendor intrinsics module.\n    \n-   Utilities for the array primitive type.\n    \n-   Operations on ASCII strings and characters.\n    \n-   Utilities for working with borrowed data.\n    \n-   Shareable mutable containers.\n    \n-   Utilities for the `char` primitive type.\n    \n-   The `Clone` trait for types that cannot be ‘implicitly copied’.\n    \n-   Utilities for comparing and ordering values.\n    \n-   Traits for conversions between types.\n    \n-   The `Default` trait for types with a default value.\n    \n-   Constants for the `f32` single-precision floating point type.\n    \n-   Constants for the `f64` double-precision floating point type.\n    \n-   Platform-specific types, as defined by C.\n    \n-   Utilities for formatting and printing strings.\n    \n-   Asynchronous basic functionality.\n    \n-   Generic hashing support.\n    \n-   Hints to compiler that affects how code should be emitted or optimized. Hints may be compile time or runtime.\n    \n-   [i8](i8/index.html \"mod core::i8\")Deprecation planned\n    \n-   [i16](i16/index.html \"mod core::i16\")Deprecation planned\n    \n-   [i32](i32/index.html \"mod core::i32\")Deprecation planned\n    \n-   [i64](i64/index.html \"mod core::i64\")Deprecation planned\n    \n-   [i128](i128/index.html \"mod core::i128\")Deprecation planned\n    \n-   [isize](isize/index.html \"mod core::isize\")Deprecation planned\n    \n-   Composable external iteration.\n    \n-   Primitive traits and types representing basic properties of types.\n    \n-   Basic functions for dealing with memory.\n    \n-   Networking primitives for IP communication.\n    \n-   Numeric traits and functions for the built-in numeric types.\n    \n-   Overloadable operators.\n    \n-   Optional values.\n    \n-   Panic support in the standard library.\n    \n-   Types that pin data to a location in memory.\n    \n-   The core prelude\n    \n-   This module reexports the primitive types to allow usage that is not possibly shadowed by other declared types.\n    \n-   Manually manage memory through raw pointers.\n    \n-   Error handling with the `Result` type.\n    \n-   Slice management and manipulation.\n    \n-   String manipulation.\n    \n-   Synchronization primitives\n    \n-   Types and Traits for working with asynchronous tasks.\n    \n-   Temporal quantification.\n    \n-   [u8](u8/index.html \"mod core::u8\")Deprecation planned\n    \n-   [u16](u16/index.html \"mod core::u16\")Deprecation planned\n    \n-   [u32](u32/index.html \"mod core::u32\")Deprecation planned\n    \n-   [u64](u64/index.html \"mod core::u64\")Deprecation planned\n    \n-   [u128](u128/index.html \"mod core::u128\")Deprecation planned\n    \n-   [usize](usize/index.html \"mod core::usize\")Deprecation planned\n    \n-   Unstable module containing the unstable `assert_matches` macro.\n    \n-   Composable asynchronous iteration.\n    \n-   Interfaces for working with Errors.\n    \n-   [f16](f16/index.html \"mod core::f16\")Experimental\n    \n    Constants for the `f16` half-precision floating point type.\n    \n-   Constants for the `f128` quadruple-precision floating point type.\n    \n-   Compiler intrinsics.\n    \n-   [io](io/index.html \"mod core::io\")Experimental\n    \n    Traits, helpers, and type definitions for core I/O functionality.\n    \n-   Panic support for core\n    \n-   [pat](pat/index.html \"mod core::pat\")Experimental\n    \n    Helper module for exporting the `pattern_type` macro\n    \n-   Portable SIMD module.\n    \n-   Provides the [`assert_unsafe_precondition`](ub_checks/macro.assert_unsafe_precondition.html \"macro core::ub_checks::assert_unsafe_precondition\") macro as well as some utility functions that cover common preconditions.\n    \n\n-   Asserts that a boolean expression is `true` at runtime.\n    \n-   Asserts that two expressions are equal to each other (using [`PartialEq`](cmp/trait.PartialEq.html \"trait core::cmp::PartialEq\")).\n    \n-   Asserts that two expressions are not equal to each other (using [`PartialEq`](cmp/trait.PartialEq.html \"trait core::cmp::PartialEq\")).\n    \n-   Evaluates boolean combinations of configuration flags at compile-time.\n    \n-   Expands to the column number at which it was invoked.\n    \n-   Causes compilation to fail with the given error message when encountered.\n    \n-   Concatenates literals into a static string slice.\n    \n-   Asserts that a boolean expression is `true` at runtime.\n    \n-   Asserts that two expressions are equal to each other.\n    \n-   Asserts that two expressions are not equal to each other.\n    \n-   Inspects an environment variable at compile time.\n    \n-   Expands to the file name in which it was invoked.\n    \n-   Constructs parameters for the other string-formatting macros.\n    \n-   Parses a file as an expression or an item according to the context.\n    \n-   Includes a file as a reference to a byte array.\n    \n-   Includes a UTF-8 encoded file as a string.\n    \n-   Expands to the line number on which it was invoked.\n    \n-   Returns whether the given expression matches the provided pattern.\n    \n-   Expands to a string that represents the current module path.\n    \n-   Optionally inspects an environment variable at compile time.\n    \n-   Panics the current thread.\n    \n-   Stringifies its arguments.\n    \n-   Indicates unfinished code.\n    \n-   [try](macro.try.html \"macro core::try\")Deprecated\n    \n    Unwraps a result or propagates its error.\n    \n-   Indicates unimplemented code by panicking with a message of “not implemented”.\n    \n-   Indicates unreachable code.\n    \n-   Writes formatted data into a buffer.\n    \n-   Write formatted data into a buffer, with a newline appended.\n    \n-   Check that the preconditions of an unsafe function are followed. The check is enabled at runtime if debug assertions are enabled when the caller is monomorphized. In const-eval/Miri checks implemented with this macro for language UB are always ignored.\n    \n-   A macro for defining `#[cfg]` match-like statements.\n    \n-   Concatenates literals into a byte slice.\n    \n-   Concatenates identifiers into one identifier.\n    \n-   Same as [`format_args`](macro.format_args.html \"macro core::format_args\"), but can be used in some const contexts.\n    \n-   Same as [`format_args`](macro.format_args.html \"macro core::format_args\"), but adds a newline in the end.\n    \n-   Prints passed tokens into the standard output.\n    \n-   Creates a pattern type.\n    \n-   Enables or disables tracing functionality used for debugging other macros.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The Rust Core Library\"><title>core - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"core\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../crates1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod crate\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../core/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\">Crate <a href=\"#\">core</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../core/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../core/index.html\">core</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><ul class=\"block\"><li><a id=\"all-types\" href=\"all.html\">All Items</a></li></ul><section><ul class=\"block\"><li><a href=\"#primitives\">Primitive Types</a></li><li><a href=\"#modules\">Modules</a></li><li><a href=\"#macros\">Macros</a></li></ul></section><h3>Crates</h3><ul class=\"block crate\"><li><a href=\"../alloc/index.html\">alloc</a></li><li class=\"current\"><a href=\"../core/index.html\">core</a></li><li><a href=\"../proc_macro/index.html\">proc_macro</a></li><li><a href=\"../std/index.html\">std</a></li><li><a href=\"../test/index.html\">test</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../core/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Crate <a class=\"mod\" href=\"#\">core</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../src/core/lib.rs.html#1-476\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><h2 id=\"the-rust-core-library\"><a class=\"doc-anchor\" href=\"#the-rust-core-library\">§</a>The Rust Core Library</h2>\n<p>The Rust Core Library is the dependency-free<sup id=\"fnref1\"><a href=\"#fn1\">1</a></sup> foundation of <a href=\"../std/index.html\">The\nRust Standard Library</a>. It is the portable glue\nbetween the language and its libraries, defining the intrinsic and\nprimitive building blocks of all Rust code. It links to no\nupstream libraries, no system libraries, and no libc.</p>\n<p>The core library is <em>minimal</em>: it isn’t even aware of heap allocation,\nnor does it provide concurrency or I/O. These things require\nplatform integration, and this library is platform-agnostic.</p>\n<h2 id=\"how-to-use-the-core-library\"><a class=\"doc-anchor\" href=\"#how-to-use-the-core-library\">§</a>How to use the core library</h2>\n<p>Please note that all of these details are currently not considered stable.</p>\n<p>This library is built on the assumption of a few existing symbols:</p>\n<ul>\n<li>\n<p><code>memcpy</code>, <code>memmove</code>, <code>memset</code>, <code>memcmp</code>, <code>bcmp</code>, <code>strlen</code> - These are core memory routines\nwhich are generated by Rust codegen backends. Additionally, this library can make explicit\ncalls to <code>strlen</code>. Their signatures are the same as found in C, but there are extra\nassumptions about their semantics: For <code>memcpy</code>, <code>memmove</code>, <code>memset</code>, <code>memcmp</code>, and <code>bcmp</code>, if\nthe <code>n</code> parameter is 0, the function is assumed to not be UB, even if the pointers are NULL or\ndangling. (Note that making extra assumptions about these functions is common among compilers:\n<a href=\"https://reviews.llvm.org/D86993\">clang</a> and <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Standards.html#C-Language\">GCC</a> do the same.)\nThese functions are often provided by the system libc, but can also be provided by the\n<a href=\"https://crates.io/crates/compiler_builtins\">compiler-builtins crate</a>.\nNote that the library does not guarantee that it will always make these assumptions, so Rust\nuser code directly calling the C functions should follow the C specification! The advice for\nRust user code is to call the functions provided by this library instead (such as\n<code>ptr::copy</code>).</p>\n</li>\n<li>\n<p><code>rust_begin_panic</code> - This function takes four arguments, a\n<code>fmt::Arguments</code>, a <code>&amp;'static str</code>, and two <code>u32</code>’s. These four arguments\ndictate the panic message, the file at which panic was invoked, and the\nline and column inside the file. It is up to consumers of this core\nlibrary to define this panic function; it is only required to never\nreturn. This requires a <code>lang</code> attribute named <code>panic_impl</code>.</p>\n</li>\n<li>\n<p><code>rust_eh_personality</code> - is used by the failure mechanisms of the\ncompiler. This is often mapped to GCC’s personality function, but crates\nwhich do not trigger a panic can be assured that this function is never\ncalled. The <code>lang</code> attribute is called <code>eh_personality</code>.</p>\n</li>\n</ul>\n<div class=\"footnotes\"><hr><ol><li id=\"fn1\"><p>Strictly speaking, there are some symbols which are needed but\nthey aren’t always necessary.&nbsp;<a href=\"#fnref1\">↩</a></p></li></ol></div></div></details><h2 id=\"primitives\" class=\"section-header\">Primitive Types<a href=\"#primitives\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.array.html\" title=\"primitive core::array\">array</a></div><div class=\"desc docblock-short\">A fixed-size array, denoted <code>[T; N]</code>, for the element type, <code>T</code>, and the\nnon-negative compile-time constant size, <code>N</code>.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.bool.html\" title=\"primitive core::bool\">bool</a></div><div class=\"desc docblock-short\">The boolean type.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.char.html\" title=\"primitive core::char\">char</a></div><div class=\"desc docblock-short\">A character type.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.f32.html\" title=\"primitive core::f32\">f32</a></div><div class=\"desc docblock-short\">A 32-bit floating point type (specifically, the “binary32” type defined in IEEE 754-2008).</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.f64.html\" title=\"primitive core::f64\">f64</a></div><div class=\"desc docblock-short\">A 64-bit floating point type (specifically, the “binary64” type defined in IEEE 754-2008).</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.fn.html\" title=\"primitive core::fn\">fn</a></div><div class=\"desc docblock-short\">Function pointers, like <code>fn(usize) -&gt; bool</code>.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.i8.html\" title=\"primitive core::i8\">i8</a></div><div class=\"desc docblock-short\">The 8-bit signed integer type.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.i16.html\" title=\"primitive core::i16\">i16</a></div><div class=\"desc docblock-short\">The 16-bit signed integer type.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.i32.html\" title=\"primitive core::i32\">i32</a></div><div class=\"desc docblock-short\">The 32-bit signed integer type.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.i64.html\" title=\"primitive core::i64\">i64</a></div><div class=\"desc docblock-short\">The 64-bit signed integer type.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.i128.html\" title=\"primitive core::i128\">i128</a></div><div class=\"desc docblock-short\">The 128-bit signed integer type.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.isize.html\" title=\"primitive core::isize\">isize</a></div><div class=\"desc docblock-short\">The pointer-sized signed integer type.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.pointer.html\" title=\"primitive core::pointer\">pointer</a></div><div class=\"desc docblock-short\">Raw, unsafe pointers, <code>*const T</code>, and <code>*mut T</code>.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.reference.html\" title=\"primitive core::reference\">reference</a></div><div class=\"desc docblock-short\">References, <code>&amp;T</code> and <code>&amp;mut T</code>.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.slice.html\" title=\"primitive core::slice\">slice</a></div><div class=\"desc docblock-short\">A dynamically-sized view into a contiguous sequence, <code>[T]</code>. Contiguous here\nmeans that elements are laid out so that every element is the same\ndistance from its neighbors.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.str.html\" title=\"primitive core::str\">str</a></div><div class=\"desc docblock-short\">String slices.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.tuple.html\" title=\"primitive core::tuple\">tuple</a></div><div class=\"desc docblock-short\">A finite heterogeneous sequence, <code>(T, U, ..)</code>.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.u8.html\" title=\"primitive core::u8\">u8</a></div><div class=\"desc docblock-short\">The 8-bit unsigned integer type.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.u16.html\" title=\"primitive core::u16\">u16</a></div><div class=\"desc docblock-short\">The 16-bit unsigned integer type.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.u32.html\" title=\"primitive core::u32\">u32</a></div><div class=\"desc docblock-short\">The 32-bit unsigned integer type.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.u64.html\" title=\"primitive core::u64\">u64</a></div><div class=\"desc docblock-short\">The 64-bit unsigned integer type.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.u128.html\" title=\"primitive core::u128\">u128</a></div><div class=\"desc docblock-short\">The 128-bit unsigned integer type.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.unit.html\" title=\"primitive core::unit\">unit</a></div><div class=\"desc docblock-short\">The <code>()</code> type, also called “unit”.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.usize.html\" title=\"primitive core::usize\">usize</a></div><div class=\"desc docblock-short\">The pointer-sized unsigned integer type.</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.f16.html\" title=\"primitive core::f16\">f16</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A 16-bit floating point type (specifically, the “binary16” type defined in IEEE 754-2008).</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.f128.html\" title=\"primitive core::f128\">f128</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A 128-bit floating point type (specifically, the “binary128” type defined in IEEE 754-2008).</div></li><li><div class=\"item-name\"><a class=\"primitive\" href=\"primitive.never.html\" title=\"primitive core::never\">never</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">The <code>!</code> type, also called “never”.</div></li></ul><h2 id=\"modules\" class=\"section-header\">Modules<a href=\"#modules\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"mod\" href=\"alloc/index.html\" title=\"mod core::alloc\">alloc</a></div><div class=\"desc docblock-short\">Memory allocation APIs</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"any/index.html\" title=\"mod core::any\">any</a></div><div class=\"desc docblock-short\">Utilities for dynamic typing or type reflection.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"arch/index.html\" title=\"mod core::arch\">arch</a></div><div class=\"desc docblock-short\">SIMD and vendor intrinsics module.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"array/index.html\" title=\"mod core::array\">array</a></div><div class=\"desc docblock-short\">Utilities for the array primitive type.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"ascii/index.html\" title=\"mod core::ascii\">ascii</a></div><div class=\"desc docblock-short\">Operations on ASCII strings and characters.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"borrow/index.html\" title=\"mod core::borrow\">borrow</a></div><div class=\"desc docblock-short\">Utilities for working with borrowed data.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"cell/index.html\" title=\"mod core::cell\">cell</a></div><div class=\"desc docblock-short\">Shareable mutable containers.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"char/index.html\" title=\"mod core::char\">char</a></div><div class=\"desc docblock-short\">Utilities for the <code>char</code> primitive type.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"clone/index.html\" title=\"mod core::clone\">clone</a></div><div class=\"desc docblock-short\">The <code>Clone</code> trait for types that cannot be ‘implicitly copied’.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"cmp/index.html\" title=\"mod core::cmp\">cmp</a></div><div class=\"desc docblock-short\">Utilities for comparing and ordering values.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"convert/index.html\" title=\"mod core::convert\">convert</a></div><div class=\"desc docblock-short\">Traits for conversions between types.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"default/index.html\" title=\"mod core::default\">default</a></div><div class=\"desc docblock-short\">The <code>Default</code> trait for types with a default value.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"f32/index.html\" title=\"mod core::f32\">f32</a></div><div class=\"desc docblock-short\">Constants for the <code>f32</code> single-precision floating point type.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"f64/index.html\" title=\"mod core::f64\">f64</a></div><div class=\"desc docblock-short\">Constants for the <code>f64</code> double-precision floating point type.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"ffi/index.html\" title=\"mod core::ffi\">ffi</a></div><div class=\"desc docblock-short\">Platform-specific types, as defined by C.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"fmt/index.html\" title=\"mod core::fmt\">fmt</a></div><div class=\"desc docblock-short\">Utilities for formatting and printing strings.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"future/index.html\" title=\"mod core::future\">future</a></div><div class=\"desc docblock-short\">Asynchronous basic functionality.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"hash/index.html\" title=\"mod core::hash\">hash</a></div><div class=\"desc docblock-short\">Generic hashing support.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"hint/index.html\" title=\"mod core::hint\">hint</a></div><div class=\"desc docblock-short\">Hints to compiler that affects how code should be emitted or optimized.\nHints may be compile time or runtime.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"i8/index.html\" title=\"mod core::i8\">i8</a><span class=\"stab deprecated\" title=\"\">Deprecation planned</span></div><div class=\"desc docblock-short\">Redundant constants module for the <a href=\"primitive.i8.html\" title=\"primitive i8\"><code>i8</code> primitive type</a>.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"i16/index.html\" title=\"mod core::i16\">i16</a><span class=\"stab deprecated\" title=\"\">Deprecation planned</span></div><div class=\"desc docblock-short\">Redundant constants module for the <a href=\"primitive.i16.html\" title=\"primitive i16\"><code>i16</code> primitive type</a>.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"i32/index.html\" title=\"mod core::i32\">i32</a><span class=\"stab deprecated\" title=\"\">Deprecation planned</span></div><div class=\"desc docblock-short\">Redundant constants module for the <a href=\"primitive.i32.html\" title=\"primitive i32\"><code>i32</code> primitive type</a>.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"i64/index.html\" title=\"mod core::i64\">i64</a><span class=\"stab deprecated\" title=\"\">Deprecation planned</span></div><div class=\"desc docblock-short\">Redundant constants module for the <a href=\"primitive.i64.html\" title=\"primitive i64\"><code>i64</code> primitive type</a>.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"i128/index.html\" title=\"mod core::i128\">i128</a><span class=\"stab deprecated\" title=\"\">Deprecation planned</span></div><div class=\"desc docblock-short\">Redundant constants module for the <a href=\"primitive.i128.html\" title=\"primitive i128\"><code>i128</code> primitive type</a>.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"isize/index.html\" title=\"mod core::isize\">isize</a><span class=\"stab deprecated\" title=\"\">Deprecation planned</span></div><div class=\"desc docblock-short\">Redundant constants module for the <a href=\"primitive.isize.html\" title=\"primitive isize\"><code>isize</code> primitive type</a>.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"iter/index.html\" title=\"mod core::iter\">iter</a></div><div class=\"desc docblock-short\">Composable external iteration.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"marker/index.html\" title=\"mod core::marker\">marker</a></div><div class=\"desc docblock-short\">Primitive traits and types representing basic properties of types.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"mem/index.html\" title=\"mod core::mem\">mem</a></div><div class=\"desc docblock-short\">Basic functions for dealing with memory.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"net/index.html\" title=\"mod core::net\">net</a></div><div class=\"desc docblock-short\">Networking primitives for IP communication.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"num/index.html\" title=\"mod core::num\">num</a></div><div class=\"desc docblock-short\">Numeric traits and functions for the built-in numeric types.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"ops/index.html\" title=\"mod core::ops\">ops</a></div><div class=\"desc docblock-short\">Overloadable operators.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"option/index.html\" title=\"mod core::option\">option</a></div><div class=\"desc docblock-short\">Optional values.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"panic/index.html\" title=\"mod core::panic\">panic</a></div><div class=\"desc docblock-short\">Panic support in the standard library.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"pin/index.html\" title=\"mod core::pin\">pin</a></div><div class=\"desc docblock-short\">Types that pin data to a location in memory.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"prelude/index.html\" title=\"mod core::prelude\">prelude</a></div><div class=\"desc docblock-short\">The core prelude</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"primitive/index.html\" title=\"mod core::primitive\">primitive</a></div><div class=\"desc docblock-short\">This module reexports the primitive types to allow usage that is not\npossibly shadowed by other declared types.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"ptr/index.html\" title=\"mod core::ptr\">ptr</a></div><div class=\"desc docblock-short\">Manually manage memory through raw pointers.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"result/index.html\" title=\"mod core::result\">result</a></div><div class=\"desc docblock-short\">Error handling with the <code>Result</code> type.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"slice/index.html\" title=\"mod core::slice\">slice</a></div><div class=\"desc docblock-short\">Slice management and manipulation.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"str/index.html\" title=\"mod core::str\">str</a></div><div class=\"desc docblock-short\">String manipulation.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"sync/index.html\" title=\"mod core::sync\">sync</a></div><div class=\"desc docblock-short\">Synchronization primitives</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"task/index.html\" title=\"mod core::task\">task</a></div><div class=\"desc docblock-short\">Types and Traits for working with asynchronous tasks.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"time/index.html\" title=\"mod core::time\">time</a></div><div class=\"desc docblock-short\">Temporal quantification.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"u8/index.html\" title=\"mod core::u8\">u8</a><span class=\"stab deprecated\" title=\"\">Deprecation planned</span></div><div class=\"desc docblock-short\">Redundant constants module for the <a href=\"primitive.u8.html\" title=\"primitive u8\"><code>u8</code> primitive type</a>.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"u16/index.html\" title=\"mod core::u16\">u16</a><span class=\"stab deprecated\" title=\"\">Deprecation planned</span></div><div class=\"desc docblock-short\">Redundant constants module for the <a href=\"primitive.u16.html\" title=\"primitive u16\"><code>u16</code> primitive type</a>.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"u32/index.html\" title=\"mod core::u32\">u32</a><span class=\"stab deprecated\" title=\"\">Deprecation planned</span></div><div class=\"desc docblock-short\">Redundant constants module for the <a href=\"primitive.u32.html\" title=\"primitive u32\"><code>u32</code> primitive type</a>.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"u64/index.html\" title=\"mod core::u64\">u64</a><span class=\"stab deprecated\" title=\"\">Deprecation planned</span></div><div class=\"desc docblock-short\">Redundant constants module for the <a href=\"primitive.u64.html\" title=\"primitive u64\"><code>u64</code> primitive type</a>.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"u128/index.html\" title=\"mod core::u128\">u128</a><span class=\"stab deprecated\" title=\"\">Deprecation planned</span></div><div class=\"desc docblock-short\">Redundant constants module for the <a href=\"primitive.u128.html\" title=\"primitive u128\"><code>u128</code> primitive type</a>.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"usize/index.html\" title=\"mod core::usize\">usize</a><span class=\"stab deprecated\" title=\"\">Deprecation planned</span></div><div class=\"desc docblock-short\">Redundant constants module for the <a href=\"primitive.usize.html\" title=\"primitive usize\"><code>usize</code> primitive type</a>.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"assert_matches/index.html\" title=\"mod core::assert_matches\">assert_matches</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Unstable module containing the unstable <code>assert_matches</code> macro.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"async_iter/index.html\" title=\"mod core::async_iter\">async_iter</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Composable asynchronous iteration.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"error/index.html\" title=\"mod core::error\">error</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Interfaces for working with Errors.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"f16/index.html\" title=\"mod core::f16\">f16</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Constants for the <code>f16</code> half-precision floating point type.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"f128/index.html\" title=\"mod core::f128\">f128</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Constants for the <code>f128</code> quadruple-precision floating point type.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"intrinsics/index.html\" title=\"mod core::intrinsics\">intrinsics</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Compiler intrinsics.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"io/index.html\" title=\"mod core::io\">io</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Traits, helpers, and type definitions for core I/O functionality.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"panicking/index.html\" title=\"mod core::panicking\">panicking</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Panic support for core</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"pat/index.html\" title=\"mod core::pat\">pat</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Helper module for exporting the <code>pattern_type</code> macro</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"simd/index.html\" title=\"mod core::simd\">simd</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Portable SIMD module.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"ub_checks/index.html\" title=\"mod core::ub_checks\">ub_checks</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Provides the <a href=\"ub_checks/macro.assert_unsafe_precondition.html\" title=\"macro core::ub_checks::assert_unsafe_precondition\"><code>assert_unsafe_precondition</code></a> macro as well as some utility functions that cover\ncommon preconditions.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"unicode/index.html\" title=\"mod core::unicode\">unicode</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li></ul><h2 id=\"macros\" class=\"section-header\">Macros<a href=\"#macros\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.assert.html\" title=\"macro core::assert\">assert</a></div><div class=\"desc docblock-short\">Asserts that a boolean expression is <code>true</code> at runtime.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.assert_eq.html\" title=\"macro core::assert_eq\">assert_eq</a></div><div class=\"desc docblock-short\">Asserts that two expressions are equal to each other (using <a href=\"cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\"><code>PartialEq</code></a>).</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.assert_ne.html\" title=\"macro core::assert_ne\">assert_ne</a></div><div class=\"desc docblock-short\">Asserts that two expressions are not equal to each other (using <a href=\"cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\"><code>PartialEq</code></a>).</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.cfg.html\" title=\"macro core::cfg\">cfg</a></div><div class=\"desc docblock-short\">Evaluates boolean combinations of configuration flags at compile-time.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.column.html\" title=\"macro core::column\">column</a></div><div class=\"desc docblock-short\">Expands to the column number at which it was invoked.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.compile_error.html\" title=\"macro core::compile_error\">compile_error</a></div><div class=\"desc docblock-short\">Causes compilation to fail with the given error message when encountered.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.concat.html\" title=\"macro core::concat\">concat</a></div><div class=\"desc docblock-short\">Concatenates literals into a static string slice.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.debug_assert.html\" title=\"macro core::debug_assert\">debug_assert</a></div><div class=\"desc docblock-short\">Asserts that a boolean expression is <code>true</code> at runtime.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.debug_assert_eq.html\" title=\"macro core::debug_assert_eq\">debug_assert_eq</a></div><div class=\"desc docblock-short\">Asserts that two expressions are equal to each other.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.debug_assert_ne.html\" title=\"macro core::debug_assert_ne\">debug_assert_ne</a></div><div class=\"desc docblock-short\">Asserts that two expressions are not equal to each other.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.env.html\" title=\"macro core::env\">env</a></div><div class=\"desc docblock-short\">Inspects an environment variable at compile time.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.file.html\" title=\"macro core::file\">file</a></div><div class=\"desc docblock-short\">Expands to the file name in which it was invoked.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.format_args.html\" title=\"macro core::format_args\">format_args</a></div><div class=\"desc docblock-short\">Constructs parameters for the other string-formatting macros.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.include.html\" title=\"macro core::include\">include</a></div><div class=\"desc docblock-short\">Parses a file as an expression or an item according to the context.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.include_bytes.html\" title=\"macro core::include_bytes\">include_bytes</a></div><div class=\"desc docblock-short\">Includes a file as a reference to a byte array.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.include_str.html\" title=\"macro core::include_str\">include_str</a></div><div class=\"desc docblock-short\">Includes a UTF-8 encoded file as a string.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.line.html\" title=\"macro core::line\">line</a></div><div class=\"desc docblock-short\">Expands to the line number on which it was invoked.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.matches.html\" title=\"macro core::matches\">matches</a></div><div class=\"desc docblock-short\">Returns whether the given expression matches the provided pattern.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.module_path.html\" title=\"macro core::module_path\">module_path</a></div><div class=\"desc docblock-short\">Expands to a string that represents the current module path.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.option_env.html\" title=\"macro core::option_env\">option_env</a></div><div class=\"desc docblock-short\">Optionally inspects an environment variable at compile time.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.panic.html\" title=\"macro core::panic\">panic</a></div><div class=\"desc docblock-short\">Panics the current thread.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.stringify.html\" title=\"macro core::stringify\">stringify</a></div><div class=\"desc docblock-short\">Stringifies its arguments.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.todo.html\" title=\"macro core::todo\">todo</a></div><div class=\"desc docblock-short\">Indicates unfinished code.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.try.html\" title=\"macro core::try\">try</a><span class=\"stab deprecated\" title=\"\">Deprecated</span></div><div class=\"desc docblock-short\">Unwraps a result or propagates its error.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.unimplemented.html\" title=\"macro core::unimplemented\">unimplemented</a></div><div class=\"desc docblock-short\">Indicates unimplemented code by panicking with a message of “not implemented”.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.unreachable.html\" title=\"macro core::unreachable\">unreachable</a></div><div class=\"desc docblock-short\">Indicates unreachable code.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.write.html\" title=\"macro core::write\">write</a></div><div class=\"desc docblock-short\">Writes formatted data into a buffer.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.writeln.html\" title=\"macro core::writeln\">writeln</a></div><div class=\"desc docblock-short\">Write formatted data into a buffer, with a newline appended.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.assert_unsafe_precondition.html\" title=\"macro core::assert_unsafe_precondition\">assert_unsafe_precondition</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Check that the preconditions of an unsafe function are followed. The check is enabled at\nruntime if debug assertions are enabled when the caller is monomorphized. In const-eval/Miri\nchecks implemented with this macro for language UB are always ignored.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.cfg_match.html\" title=\"macro core::cfg_match\">cfg_match</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A macro for defining <code>#[cfg]</code> match-like statements.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.concat_bytes.html\" title=\"macro core::concat_bytes\">concat_bytes</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Concatenates literals into a byte slice.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.concat_idents.html\" title=\"macro core::concat_idents\">concat_idents</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Concatenates identifiers into one identifier.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.const_format_args.html\" title=\"macro core::const_format_args\">const_format_args</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Same as <a href=\"macro.format_args.html\" title=\"macro core::format_args\"><code>format_args</code></a>, but can be used in some const contexts.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.format_args_nl.html\" title=\"macro core::format_args_nl\">format_args_nl</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Same as <a href=\"macro.format_args.html\" title=\"macro core::format_args\"><code>format_args</code></a>, but adds a newline in the end.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.log_syntax.html\" title=\"macro core::log_syntax\">log_syntax</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Prints passed tokens into the standard output.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.pattern_type.html\" title=\"macro core::pattern_type\">pattern_type</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Creates a pattern type.</div></li><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.trace_macros.html\" title=\"macro core::trace_macros\">trace_macros</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Enables or disables tracing functionality used for debugging other macros.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:20:16.171Z"
}