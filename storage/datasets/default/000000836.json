{
	"title": "The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/print.html",
	"markdown": "# The Rust Reference\n\n## [Introduction](#introduction)\n\nThis book is the primary reference for the Rust programming language. It provides three kinds of material:\n\n-   Chapters that informally describe each language construct and their use.\n-   Chapters that informally describe the memory model, concurrency model, runtime services, linkage model, and debugging facilities.\n-   Appendix chapters providing rationale and references to languages that influenced the design.\n\nWarning: This book is incomplete. Documenting everything takes a while. See the [GitHub issues](https://github.com/rust-lang/reference/issues) for what is not documented in this book.\n\n## [Rust releases](#rust-releases)\n\nRust has a new language release every six weeks. The first stable release of the language was Rust 1.0.0, followed by Rust 1.1.0 and so on. Tools (`rustc`, `cargo`, etc.) and documentation ([Standard library](../std/index.html), this book, etc.) are released with the language release.\n\nThe latest release of this book, matching the latest Rust version, can always be found at [https://doc.rust-lang.org/reference/](https://doc.rust-lang.org/reference/). Prior versions can be found by adding the Rust version before the \"reference\" directory. For example, the Reference for Rust 1.49.0 is located at [https://doc.rust-lang.org/1.49.0/reference/](https://doc.rust-lang.org/1.49.0/reference/).\n\n## [What _The Reference_ is not](#what-the-reference-is-not)\n\nThis book does not serve as an introduction to the language. Background familiarity with the language is assumed. A separate [book](../book/index.html) is available to help acquire such background familiarity.\n\nThis book also does not serve as a reference to the [standard library](../std/index.html) included in the language distribution. Those libraries are documented separately by extracting documentation attributes from their source code. Many of the features that one might expect to be language features are library features in Rust, so what you're looking for may be there, not here.\n\nSimilarly, this book does not usually document the specifics of `rustc` as a tool or of Cargo. `rustc` has its own [book](../rustc/index.html). Cargo has a [book](../cargo/index.html) that contains a [reference](../cargo/reference/index.html). There are a few pages such as [linkage](linkage.html) that still describe how `rustc` works.\n\nThis book also only serves as a reference to what is available in stable Rust. For unstable features being worked on, see the [Unstable Book](https://doc.rust-lang.org/nightly/unstable-book/).\n\nRust compilers, including `rustc`, will perform optimizations. The reference does not specify what optimizations are allowed or disallowed. Instead, think of the compiled program as a black box. You can only probe by running it, feeding it input and observing its output. Everything that happens that way must conform to what the reference says.\n\nFinally, this book is not normative. It may include details that are specific to `rustc` itself, and should not be taken as a specification for the Rust language. We intend to produce such a book someday, and until then, the reference is the closest thing we have to one.\n\n## [How to use this book](#how-to-use-this-book)\n\nThis book does not assume you are reading this book sequentially. Each chapter generally can be read standalone, but will cross-link to other chapters for facets of the language they refer to, but do not discuss.\n\nThere are two main ways to read this document.\n\nThe first is to answer a specific question. If you know which chapter answers that question, you can jump to that chapter in the table of contents. Otherwise, you can press `s` or click the magnifying glass on the top bar to search for keywords related to your question. For example, say you wanted to know when a temporary value created in a let statement is dropped. If you didn't already know that the [lifetime of temporaries](about:blank/expressions.html#temporaries) is defined in the [expressions chapter](expressions.html), you could search \"temporary let\" and the first search result will take you to that section.\n\nThe second is to generally improve your knowledge of a facet of the language. In that case, just browse the table of contents until you see something you want to know more about, and just start reading. If a link looks interesting, click it, and read about that section.\n\nThat said, there is no wrong way to read this book. Read it however you feel helps you best.\n\n### [Conventions](#conventions)\n\nLike all technical books, this book has certain conventions in how it displays information. These conventions are documented here.\n\n-   Statements that define a term contain that term in _italics_. Whenever that term is used outside of that chapter, it is usually a link to the section that has this definition.\n    \n    An _example term_ is an example of a term being defined.\n    \n-   Differences in the language by which edition the crate is compiled under are in a blockquote that start with the words \"Edition Differences:\" in **bold**.\n    \n    > **Edition Differences**: In the 2015 edition, this syntax is valid that is disallowed as of the 2018 edition.\n    \n-   Notes that contain useful information about the state of the book or point out useful, but mostly out of scope, information are in blockquotes that start with the word \"Note:\" in **bold**.\n    \n    > **Note**: This is an example note.\n    \n-   Warnings that show unsound behavior in the language or possibly confusing interactions of language features are in a special warning box.\n    \n    Warning: This is an example warning.\n    \n-   Code snippets inline in the text are inside `<code>` tags.\n    \n    Longer code examples are in a syntax highlighted box that has controls for copying, executing, and showing hidden lines in the top right corner.\n    \n    ```rust\n    // This is a hidden line.\n    fn main() {\n        println!(\"This is a code example\");\n    }\n    ```\n    \n    All examples are written for the latest edition unless otherwise stated.\n    \n-   The grammar and lexical structure is in blockquotes with either \"Lexer\" or \"Syntax\" in **bold superscript** as the first line.\n    \n    > **Syntax**  \n    > _ExampleGrammar_:  \n    >       `~` [_Expression_](expressions.html)  \n    >    | `box` [_Expression_](expressions.html)\n    \n    See [Notation](notation.html) for more detail.\n    \n\n## [Contributing](#contributing)\n\nWe welcome contributions of all kinds.\n\nYou can contribute to this book by opening an issue or sending a pull request to [the Rust Reference repository](https://github.com/rust-lang/reference/). If this book does not answer your question, and you think its answer is in scope of it, please do not hesitate to [file an issue](https://github.com/rust-lang/reference/issues) or ask about it in the `t-lang/doc` stream on [Zulip](https://rust-lang.zulipchat.com/#narrow/stream/237824-t-lang.2Fdoc). Knowing what people use this book for the most helps direct our attention to making those sections the best that they can be. We also want the reference to be as normative as possible, so if you see anything that is wrong or is non-normative but not specifically called out, please also [file an issue](https://github.com/rust-lang/reference/issues).\n\n## [Notation](#notation)\n\n## [Grammar](#grammar)\n\nThe following notations are used by the _Lexer_ and _Syntax_ grammar snippets:\n\n| Notation | Examples | Meaning |\n| --- | --- | --- |\n| CAPITAL | KW\\_IF, INTEGER\\_LITERAL | A token produced by the lexer |\n| _ItalicCamelCase_ | _LetStatement_, _Item_ | A syntactical production |\n| `string` | `x`, `while`, `*` | The exact character(s) |\n| \\\\x | \\\\n, \\\\r, \\\\t, \\\\0 | The character represented by this escape |\n| x? | `pub`? | An optional item |\n| x\\* | _OuterAttribute_\\* | 0 or more of x |\n| x+ | _MacroMatch_+ | 1 or more of x |\n| xa..b | HEX\\_DIGIT1..6 | a to b repetitions of x |\n| | | `u8` | `u16`, Block | Item | Either one or another |\n| \\[ \\] | \\[`b` `B`\\] | Any of the characters listed |\n| \\[ - \\] | \\[`a`\\-`z`\\] | Any of the characters in the range |\n| ~\\[ \\] | ~\\[`b` `B`\\] | Any characters, except those listed |\n| ~`string` | ~`\\n`, ~`*/` | Any characters, except this sequence |\n| ( ) | (`,` _Parameter_)? | Groups items |\n\n## [String table productions](#string-table-productions)\n\nSome rules in the grammar — notably [unary operators](about:blank/expressions/operator-expr.html#borrow-operators), [binary operators](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), and [keywords](keywords.html) — are given in a simplified form: as a listing of printable strings. These cases form a subset of the rules regarding the [token](tokens.html) rule, and are assumed to be the result of a lexical-analysis phase feeding the parser, driven by a DFA, operating over the disjunction of all such string table entries.\n\nWhen such a string in `monospace` font occurs inside the grammar, it is an implicit reference to a single member of such a string table production. See [tokens](tokens.html) for more information.\n\n## [Lexical structure](#lexical-structure)\n\n## [Input format](#input-format)\n\nThis chapter describes how a source file is interpreted as a sequence of tokens.\n\nSee [Crates and source files](crates-and-source-files.html) for a description of how programs are organised into files.\n\n## [Source encoding](#source-encoding)\n\nEach source file is interpreted as a sequence of Unicode characters encoded in UTF-8. It is an error if the file is not valid UTF-8.\n\n## [Byte order mark removal](#byte-order-mark-removal)\n\nIf the first character in the sequence is `U+FEFF` ([BYTE ORDER MARK](https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8)), it is removed.\n\n## [CRLF normalization](#crlf-normalization)\n\nEach pair of characters `U+000D` (CR) immediately followed by `U+000A` (LF) is replaced by a single `U+000A` (LF).\n\nOther occurrences of the character `U+000D` (CR) are left in place (they are treated as [whitespace](whitespace.html)).\n\n## [Shebang removal](#shebang-removal)\n\nIf the remaining sequence begins with the characters `#!`, the characters up to and including the first `U+000A` (LF) are removed from the sequence.\n\nFor example, the first line of the following file would be ignored:\n\n```rust\n#!/usr/bin/env rustx\n\nfn main() {\n    println!(\"Hello!\");\n}\n```\n\nAs an exception, if the `#!` characters are followed (ignoring intervening [comments](comments.html) or [whitespace](whitespace.html)) by a `[` token, nothing is removed. This prevents an [inner attribute](attributes.html) at the start of a source file being removed.\n\n> **Note**: The standard library [`include!`](../std/macro.include.html) macro applies byte order mark removal, CRLF normalization, and shebang removal to the file it reads. The [`include_str!`](../std/macro.include_str.html) and [`include_bytes!`](../std/macro.include_bytes.html) macros do not.\n\n## [Tokenization](#tokenization)\n\nThe resulting sequence of characters is then converted into tokens as described in the remainder of this chapter.\n\n## [Keywords](#keywords)\n\nRust divides keywords into three categories:\n\n-   [strict](about:blank/keywords.html#strict-keywords)\n-   [reserved](about:blank/keywords.html#reserved-keywords)\n-   [weak](about:blank/keywords.html#weak-keywords)\n\n## [Strict keywords](#strict-keywords)\n\nThese keywords can only be used in their correct contexts. They cannot be used as the names of:\n\n-   [Items](items.html)\n-   [Variables](variables.html) and function parameters\n-   Fields and [variants](items/enumerations.html)\n-   [Type parameters](types/parameters.html)\n-   Lifetime parameters or [loop labels](about:blank/expressions/loop-expr.html#loop-labels)\n-   [Macros](macros.html) or [attributes](attributes.html)\n-   [Macro placeholders](macros-by-example.html)\n-   [Crates](crates-and-source-files.html)\n\n> **Lexer:**  \n> KW\\_AS : `as`  \n> KW\\_BREAK : `break`  \n> KW\\_CONST : `const`  \n> KW\\_CONTINUE : `continue`  \n> KW\\_CRATE : `crate`  \n> KW\\_ELSE : `else`  \n> KW\\_ENUM : `enum`  \n> KW\\_EXTERN : `extern`  \n> KW\\_FALSE : `false`  \n> KW\\_FN : `fn`  \n> KW\\_FOR : `for`  \n> KW\\_IF : `if`  \n> KW\\_IMPL : `impl`  \n> KW\\_IN : `in`  \n> KW\\_LET : `let`  \n> KW\\_LOOP : `loop`  \n> KW\\_MATCH : `match`  \n> KW\\_MOD : `mod`  \n> KW\\_MOVE : `move`  \n> KW\\_MUT : `mut`  \n> KW\\_PUB : `pub`  \n> KW\\_REF : `ref`  \n> KW\\_RETURN : `return`  \n> KW\\_SELFVALUE : `self`  \n> KW\\_SELFTYPE : `Self`  \n> KW\\_STATIC : `static`  \n> KW\\_STRUCT : `struct`  \n> KW\\_SUPER : `super`  \n> KW\\_TRAIT : `trait`  \n> KW\\_TRUE : `true`  \n> KW\\_TYPE : `type`  \n> KW\\_UNSAFE : `unsafe`  \n> KW\\_USE : `use`  \n> KW\\_WHERE : `where`  \n> KW\\_WHILE : `while`\n\nThe following keywords were added beginning in the 2018 edition.\n\n> **Lexer 2018+**  \n> KW\\_ASYNC : `async`  \n> KW\\_AWAIT : `await`  \n> KW\\_DYN : `dyn`\n\n## [Reserved keywords](#reserved-keywords)\n\nThese keywords aren't used yet, but they are reserved for future use. They have the same restrictions as strict keywords. The reasoning behind this is to make current programs forward compatible with future versions of Rust by forbidding them to use these keywords.\n\n> **Lexer**  \n> KW\\_ABSTRACT : `abstract`  \n> KW\\_BECOME : `become`  \n> KW\\_BOX : `box`  \n> KW\\_DO : `do`  \n> KW\\_FINAL : `final`  \n> KW\\_MACRO : `macro`  \n> KW\\_OVERRIDE : `override`  \n> KW\\_PRIV : `priv`  \n> KW\\_TYPEOF : `typeof`  \n> KW\\_UNSIZED : `unsized`  \n> KW\\_VIRTUAL : `virtual`  \n> KW\\_YIELD : `yield`\n\nThe following keywords are reserved beginning in the 2018 edition.\n\n> **Lexer 2018+**  \n> KW\\_TRY : `try`\n\n## [Weak keywords](#weak-keywords)\n\nThese keywords have special meaning only in certain contexts. For example, it is possible to declare a variable or method with the name `union`.\n\n-   `macro_rules` is used to create custom [macros](macros.html).\n    \n-   `union` is used to declare a [union](items/unions.html) and is only a keyword when used in a union declaration.\n    \n-   `'static` is used for the static lifetime and cannot be used as a [generic lifetime parameter](items/generics.html) or [loop label](about:blank/expressions/loop-expr.html#loop-labels)\n    \n    ```compile\n    // error[E0262]: invalid lifetime parameter name: `'static`\n    fn invalid_lifetime_parameter<'static>(s: &'static str) -> &'static str { s }\n    \n    ```\n    \n-   In the 2015 edition, [`dyn`](types/trait-object.html) is a keyword when used in a type position followed by a path that does not start with `::`.\n    \n    Beginning in the 2018 edition, `dyn` has been promoted to a strict keyword.\n    \n\n> **Lexer**  \n> KW\\_MACRO\\_RULES : `macro_rules`  \n> KW\\_UNION : `union`  \n> KW\\_STATICLIFETIME : `'static`\n> \n> **Lexer 2015**  \n> KW\\_DYN : `dyn`\n\n## [Identifiers](#identifiers)\n\n> **Lexer:**  \n> IDENTIFIER\\_OR\\_KEYWORD :  \n>       XID\\_Start XID\\_Continue\\*  \n>    | `_` XID\\_Continue+\n> \n> RAW\\_IDENTIFIER : `r#` IDENTIFIER\\_OR\\_KEYWORD _Except `crate`, `self`, `super`, `Self`_\n> \n> NON\\_KEYWORD\\_IDENTIFIER : IDENTIFIER\\_OR\\_KEYWORD _Except a [strict](about:blank/keywords.html#strict-keywords) or [reserved](about:blank/keywords.html#reserved-keywords) keyword_\n> \n> IDENTIFIER :  \n> NON\\_KEYWORD\\_IDENTIFIER | RAW\\_IDENTIFIER\n\nIdentifiers follow the specification in [Unicode Standard Annex #31](https://www.unicode.org/reports/tr31/tr31-37.html) for Unicode version 15.0, with the additions described below. Some examples of identifiers:\n\n-   `foo`\n-   `_identifier`\n-   `r#true`\n-   `Москва`\n-   `東京`\n\nThe profile used from UAX #31 is:\n\n-   Start := [`XID_Start`](http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Start%3A%5D&abb=on&g=&i=), plus the underscore character (U+005F)\n-   Continue := [`XID_Continue`](http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Continue%3A%5D&abb=on&g=&i=)\n-   Medial := empty\n\nwith the additional constraint that a single underscore character is not an identifier.\n\n> **Note**: Identifiers starting with an underscore are typically used to indicate an identifier that is intentionally unused, and will silence the unused warning in `rustc`.\n\nIdentifiers may not be a [strict](about:blank/keywords.html#strict-keywords) or [reserved](about:blank/keywords.html#reserved-keywords) keyword without the `r#` prefix described below in [raw identifiers](about:blank/identifiers.html#raw-identifiers).\n\nZero width non-joiner (ZWNJ U+200C) and zero width joiner (ZWJ U+200D) characters are not allowed in identifiers.\n\nIdentifiers are restricted to the ASCII subset of [`XID_Start`](http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Start%3A%5D&abb=on&g=&i=) and [`XID_Continue`](http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Continue%3A%5D&abb=on&g=&i=) in the following situations:\n\n-   [`extern crate`](items/extern-crates.html) declarations\n-   External crate names referenced in a [path](paths.html)\n-   [Module](items/modules.html) names loaded from the filesystem without a [`path` attribute](about:blank/items/modules.html#the-path-attribute)\n-   [`no_mangle`](about:blank/abi.html#the-no_mangle-attribute) attributed items\n-   Item names in [external blocks](items/external-blocks.html)\n\n## [Normalization](#normalization)\n\nIdentifiers are normalized using Normalization Form C (NFC) as defined in [Unicode Standard Annex #15](https://www.unicode.org/reports/tr15/tr15-53.html). Two identifiers are equal if their NFC forms are equal.\n\n[Procedural](procedural-macros.html) and [declarative](macros-by-example.html) macros receive normalized identifiers in their input.\n\n## [Raw identifiers](#raw-identifiers)\n\nA raw identifier is like a normal identifier, but prefixed by `r#`. (Note that the `r#` prefix is not included as part of the actual identifier.) Unlike a normal identifier, a raw identifier may be any strict or reserved keyword except the ones listed above for `RAW_IDENTIFIER`.\n\n> **Lexer**  \n> LINE\\_COMMENT :  \n>       `//` (~\\[`/` `!` `\\n`\\] | `//`) ~`\\n`\\*  \n>    | `//`\n> \n> BLOCK\\_COMMENT :  \n>       `/*` (~\\[`*` `!`\\] | `**` | _BlockCommentOrDoc_) (_BlockCommentOrDoc_ | ~`*/`)\\* `*/`  \n>    | `/**/`  \n>    | `/***/`\n> \n> INNER\\_LINE\\_DOC :  \n>    `//!` ~\\[`\\n` _IsolatedCR_\\]\\*\n> \n> INNER\\_BLOCK\\_DOC :  \n>    `/*!` ( _BlockCommentOrDoc_ | ~\\[`*/` _IsolatedCR_\\] )\\* `*/`\n> \n> OUTER\\_LINE\\_DOC :  \n>    `///` (~`/` ~\\[`\\n` _IsolatedCR_\\]\\*)?\n> \n> OUTER\\_BLOCK\\_DOC :  \n>    `/**` (~`*` | _BlockCommentOrDoc_ ) (_BlockCommentOrDoc_ | ~\\[`*/` _IsolatedCR_\\])\\* `*/`\n> \n> _BlockCommentOrDoc_ :  \n>       BLOCK\\_COMMENT  \n>    | OUTER\\_BLOCK\\_DOC  \n>    | INNER\\_BLOCK\\_DOC\n> \n> _IsolatedCR_ :  \n>    \\\\r\n\nComments follow the general C++ style of line (`//`) and block (`/* ... */`) comment forms. Nested block comments are supported.\n\nNon-doc comments are interpreted as a form of whitespace.\n\nLine doc comments beginning with exactly _three_ slashes (`///`), and block doc comments (`/** ... */`), both outer doc comments, are interpreted as a special syntax for [`doc` attributes](../rustdoc/the-doc-attribute.html). That is, they are equivalent to writing `#[doc=\"...\"]` around the body of the comment, i.e., `/// Foo` turns into `#[doc=\"Foo\"]` and `/** Bar */` turns into `#[doc=\"Bar\"]`.\n\nLine comments beginning with `//!` and block comments `/*! ... */` are doc comments that apply to the parent of the comment, rather than the item that follows. That is, they are equivalent to writing `#![doc=\"...\"]` around the body of the comment. `//!` comments are usually used to document modules that occupy a source file.\n\nThe character `U+000D` (CR) is not allowed in doc comments.\n\n> **Note**: The sequence `U+000D` (CR) immediately followed by `U+000A` (LF) would have been previously transformed into a single `U+000A` (LF).\n\n## [Examples](#examples)\n\n```rust\n#![allow(unused)]\nfn main() {\n//! A doc comment that applies to the implicit anonymous module of this crate\n\npub mod outer_module {\n\n    //!  - Inner line doc\n    //!! - Still an inner line doc (but with a bang at the beginning)\n\n    /*!  - Inner block doc */\n    /*!! - Still an inner block doc (but with a bang at the beginning) */\n\n    //   - Only a comment\n    ///  - Outer line doc (exactly 3 slashes)\n    //// - Only a comment\n\n    /*   - Only a comment */\n    /**  - Outer block doc (exactly) 2 asterisks */\n    /*** - Only a comment */\n\n    pub mod inner_module {}\n\n    pub mod nested_comments {\n        /* In Rust /* we can /* nest comments */ */ */\n\n        // All three types of block comments can contain or be nested inside\n        // any other type:\n\n        /*   /* */  /** */  /*! */  */\n        /*!  /* */  /** */  /*! */  */\n        /**  /* */  /** */  /*! */  */\n        pub mod dummy_item {}\n    }\n\n    pub mod degenerate_cases {\n        // empty inner line doc\n        //!\n\n        // empty inner block doc\n        /*!*/\n\n        // empty line comment\n        //\n\n        // empty outer line doc\n        ///\n\n        // empty block comment\n        /**/\n\n        pub mod dummy_item {}\n\n        // empty 2-asterisk block isn't a doc block, it is a block comment\n        /***/\n\n    }\n\n    /* The next one isn't allowed because outer doc comments\n       require an item that will receive the doc */\n\n    /// Where is my item?\n  mod boo {}\n}\n}\n```\n\n## [Whitespace](#whitespace)\n\nWhitespace is any non-empty string containing only characters that have the [`Pattern_White_Space`](https://www.unicode.org/reports/tr31/) Unicode property, namely:\n\n-   `U+0009` (horizontal tab, `'\\t'`)\n-   `U+000A` (line feed, `'\\n'`)\n-   `U+000B` (vertical tab)\n-   `U+000C` (form feed)\n-   `U+000D` (carriage return, `'\\r'`)\n-   `U+0020` (space, `' '`)\n-   `U+0085` (next line)\n-   `U+200E` (left-to-right mark)\n-   `U+200F` (right-to-left mark)\n-   `U+2028` (line separator)\n-   `U+2029` (paragraph separator)\n\nRust is a \"free-form\" language, meaning that all forms of whitespace serve only to separate _tokens_ in the grammar, and have no semantic significance.\n\nA Rust program has identical meaning if each whitespace element is replaced with any other legal whitespace element, such as a single space character.\n\n## [Tokens](#tokens)\n\nTokens are primitive productions in the grammar defined by regular (non-recursive) languages. Rust source input can be broken down into the following kinds of tokens:\n\n-   [Keywords](keywords.html)\n-   [Identifiers](identifiers.html)\n-   [Literals](about:blank/tokens.html#literals)\n-   [Lifetimes](about:blank/tokens.html#lifetimes-and-loop-labels)\n-   [Punctuation](about:blank/tokens.html#punctuation)\n-   [Delimiters](about:blank/tokens.html#delimiters)\n\nWithin this documentation's grammar, \"simple\" tokens are given in [string table production](about:blank/notation.html#string-table-productions) form, and appear in `monospace` font.\n\n## [Literals](#literals)\n\nLiterals are tokens used in [literal expressions](expressions/literal-expr.html).\n\n### [Examples](#examples-1)\n\n#### [Characters and strings](#characters-and-strings)\n\n> **Note**: Character and string literal tokens never include the sequence of `U+000D` (CR) immediately followed by `U+000A` (LF): this pair would have been previously transformed into a single `U+000A` (LF).\n\n#### [ASCII escapes](#ascii-escapes)\n\n|  | Name |\n| --- | --- |\n| `\\x41` | 7-bit character code (exactly 2 digits, up to 0x7F) |\n| `\\n` | Newline |\n| `\\r` | Carriage return |\n| `\\t` | Tab |\n| `\\\\` | Backslash |\n| `\\0` | Null |\n\n#### [Byte escapes](#byte-escapes)\n\n|  | Name |\n| --- | --- |\n| `\\x7F` | 8-bit character code (exactly 2 digits) |\n| `\\n` | Newline |\n| `\\r` | Carriage return |\n| `\\t` | Tab |\n| `\\\\` | Backslash |\n| `\\0` | Null |\n\n#### [Unicode escapes](#unicode-escapes)\n\n|  | Name |\n| --- | --- |\n| `\\u{7FFF}` | 24-bit Unicode character code (up to 6 digits) |\n\n#### [Quote escapes](#quote-escapes)\n\n|  | Name |\n| --- | --- |\n| `\\'` | Single quote |\n| `\\\"` | Double quote |\n\n#### [Numbers](#numbers)\n\n| [Number literals](about:blank/tokens.html#number-literals)[2](#nl) | Example | Exponentiation |\n| --- | --- | --- |\n| Decimal integer | `98_222` | `N/A` |\n| Hex integer | `0xff` | `N/A` |\n| Octal integer | `0o77` | `N/A` |\n| Binary integer | `0b1111_0000` | `N/A` |\n| Floating-point | `123.0E+77` | `Optional` |\n\n#### [Suffixes](#suffixes)\n\nA suffix is a sequence of characters following the primary part of a literal (without intervening whitespace), of the same form as a non-raw identifier or keyword.\n\n> **Lexer**  \n> SUFFIX : IDENTIFIER\\_OR\\_KEYWORD  \n> SUFFIX\\_NO\\_E : SUFFIX _not beginning with `e` or `E`_\n\nAny kind of literal (string, integer, etc) with any suffix is valid as a token.\n\nA literal token with any suffix can be passed to a macro without producing an error. The macro itself will decide how to interpret such a token and whether to produce an error or not. In particular, the `literal` fragment specifier for by-example macros matches literal tokens with arbitrary suffixes.\n\n```rust\n#![allow(unused)]\nfn main() {\nmacro_rules! blackhole { ($tt:tt) => () }\nmacro_rules! blackhole_lit { ($l:literal) => () }\n\nblackhole!(\"string\"suffix); // OK\nblackhole_lit!(1suffix); // OK\n}\n```\n\nHowever, suffixes on literal tokens which are interpreted as literal expressions or patterns are restricted. Any suffixes are rejected on non-numeric literal tokens, and numeric literal tokens are accepted only with suffixes from the list below.\n\n| Integer | Floating-point |\n| --- | --- |\n| `u8`, `i8`, `u16`, `i16`, `u32`, `i32`, `u64`, `i64`, `u128`, `i128`, `usize`, `isize` | `f32`, `f64` |\n\n### [Character and string literals](#character-and-string-literals)\n\n#### [Character literals](#character-literals)\n\n> **Lexer**  \n> CHAR\\_LITERAL :  \n>    `'` ( ~\\[`'` `\\` \\\\n \\\\r \\\\t\\] | QUOTE\\_ESCAPE | ASCII\\_ESCAPE | UNICODE\\_ESCAPE ) `'` SUFFIX?\n> \n> QUOTE\\_ESCAPE :  \n>    `\\'` | `\\\"`\n> \n> ASCII\\_ESCAPE :  \n>       `\\x` OCT\\_DIGIT HEX\\_DIGIT  \n>    | `\\n` | `\\r` | `\\t` | `\\\\` | `\\0`\n> \n> UNICODE\\_ESCAPE :  \n>    `\\u{` ( HEX\\_DIGIT `_`\\* )1..6 `}`\n\nA _character literal_ is a single Unicode character enclosed within two `U+0027` (single-quote) characters, with the exception of `U+0027` itself, which must be _escaped_ by a preceding `U+005C` character (`\\`).\n\n#### [String literals](#string-literals)\n\n> **Lexer**  \n> STRING\\_LITERAL :  \n>    `\"` (  \n>       ~\\[`\"` `\\` _IsolatedCR_\\]  \n>       | QUOTE\\_ESCAPE  \n>       | ASCII\\_ESCAPE  \n>       | UNICODE\\_ESCAPE  \n>       | STRING\\_CONTINUE  \n>    )\\* `\"` SUFFIX?\n> \n> STRING\\_CONTINUE :  \n>    `\\` _followed by_ \\\\n\n\nA _string literal_ is a sequence of any Unicode characters enclosed within two `U+0022` (double-quote) characters, with the exception of `U+0022` itself, which must be _escaped_ by a preceding `U+005C` character (`\\`).\n\nLine-breaks, represented by the character `U+000A` (LF), are allowed in string literals. When an unescaped `U+005C` character (`\\`) occurs immediately before a line break, the line break does not appear in the string represented by the token. See [String continuation escapes](about:blank/expressions/literal-expr.html#string-continuation-escapes) for details. The character `U+000D` (CR) may not appear in a string literal other than as part of such a string continuation escape.\n\n#### [Character escapes](#character-escapes)\n\nSome additional _escapes_ are available in either character or non-raw string literals. An escape starts with a `U+005C` (`\\`) and continues with one of the following forms:\n\n-   A _7-bit code point escape_ starts with `U+0078` (`x`) and is followed by exactly two _hex digits_ with value up to `0x7F`. It denotes the ASCII character with value equal to the provided hex value. Higher values are not permitted because it is ambiguous whether they mean Unicode code points or byte values.\n-   A _24-bit code point escape_ starts with `U+0075` (`u`) and is followed by up to six _hex digits_ surrounded by braces `U+007B` (`{`) and `U+007D` (`}`). It denotes the Unicode code point equal to the provided hex value.\n-   A _whitespace escape_ is one of the characters `U+006E` (`n`), `U+0072` (`r`), or `U+0074` (`t`), denoting the Unicode values `U+000A` (LF), `U+000D` (CR) or `U+0009` (HT) respectively.\n-   The _null escape_ is the character `U+0030` (`0`) and denotes the Unicode value `U+0000` (NUL).\n-   The _backslash escape_ is the character `U+005C` (`\\`) which must be escaped in order to denote itself.\n\n#### [Raw string literals](#raw-string-literals)\n\n> **Lexer**  \n> RAW\\_STRING\\_LITERAL :  \n>    `r` RAW\\_STRING\\_CONTENT SUFFIX?\n> \n> RAW\\_STRING\\_CONTENT :  \n>       `\"` ( ~ _IsolatedCR_ )\\* (non-greedy) `\"`  \n>    | `#` RAW\\_STRING\\_CONTENT `#`\n\nRaw string literals do not process any escapes. They start with the character `U+0072` (`r`), followed by fewer than 256 of the character `U+0023` (`#`) and a `U+0022` (double-quote) character.\n\nThe _raw string body_ can contain any sequence of Unicode characters other than `U+000D` (CR). It is terminated only by another `U+0022` (double-quote) character, followed by the same number of `U+0023` (`#`) characters that preceded the opening `U+0022` (double-quote) character.\n\nAll Unicode characters contained in the raw string body represent themselves, the characters `U+0022` (double-quote) (except when followed by at least as many `U+0023` (`#`) characters as were used to start the raw string literal) or `U+005C` (`\\`) do not have any special meaning.\n\nExamples for string literals:\n\n```rust\n#![allow(unused)]\nfn main() {\n\"foo\"; r\"foo\";                     // foo\n\"\\\"foo\\\"\"; r#\"\"foo\"\"#;             // \"foo\"\n\n\"foo #\\\"# bar\";\nr##\"foo #\"# bar\"##;                // foo #\"# bar\n\n\"\\x52\"; \"R\"; r\"R\";                 // R\n\"\\\\x52\"; r\"\\x52\";                  // \\x52\n}\n```\n\n### [Byte and byte string literals](#byte-and-byte-string-literals)\n\n#### [Byte literals](#byte-literals)\n\n> **Lexer**  \n> BYTE\\_LITERAL :  \n>    `b'` ( ASCII\\_FOR\\_CHAR | BYTE\\_ESCAPE ) `'` SUFFIX?\n> \n> ASCII\\_FOR\\_CHAR :  \n>    _any ASCII (i.e. 0x00 to 0x7F), except_ `'`, `\\`, \\\\n, \\\\r or \\\\t\n> \n> BYTE\\_ESCAPE :  \n>       `\\x` HEX\\_DIGIT HEX\\_DIGIT  \n>    | `\\n` | `\\r` | `\\t` | `\\\\` | `\\0` | `\\'` | `\\\"`\n\nA _byte literal_ is a single ASCII character (in the `U+0000` to `U+007F` range) or a single _escape_ preceded by the characters `U+0062` (`b`) and `U+0027` (single-quote), and followed by the character `U+0027`. If the character `U+0027` is present within the literal, it must be _escaped_ by a preceding `U+005C` (`\\`) character. It is equivalent to a `u8` unsigned 8-bit integer _number literal_.\n\n#### [Byte string literals](#byte-string-literals)\n\n> **Lexer**  \n> BYTE\\_STRING\\_LITERAL :  \n>    `b\"` ( ASCII\\_FOR\\_STRING | BYTE\\_ESCAPE | STRING\\_CONTINUE )\\* `\"` SUFFIX?\n> \n> ASCII\\_FOR\\_STRING :  \n>    _any ASCII (i.e 0x00 to 0x7F), except_ `\"`, `\\` _and IsolatedCR_\n\nA non-raw _byte string literal_ is a sequence of ASCII characters and _escapes_, preceded by the characters `U+0062` (`b`) and `U+0022` (double-quote), and followed by the character `U+0022`. If the character `U+0022` is present within the literal, it must be _escaped_ by a preceding `U+005C` (`\\`) character. Alternatively, a byte string literal can be a _raw byte string literal_, defined below.\n\nLine-breaks, represented by the character `U+000A` (LF), are allowed in byte string literals. When an unescaped `U+005C` character (`\\`) occurs immediately before a line break, the line break does not appear in the string represented by the token. See [String continuation escapes](about:blank/expressions/literal-expr.html#string-continuation-escapes) for details. The character `U+000D` (CR) may not appear in a byte string literal other than as part of such a string continuation escape.\n\nSome additional _escapes_ are available in either byte or non-raw byte string literals. An escape starts with a `U+005C` (`\\`) and continues with one of the following forms:\n\n-   A _byte escape_ escape starts with `U+0078` (`x`) and is followed by exactly two _hex digits_. It denotes the byte equal to the provided hex value.\n-   A _whitespace escape_ is one of the characters `U+006E` (`n`), `U+0072` (`r`), or `U+0074` (`t`), denoting the bytes values `0x0A` (ASCII LF), `0x0D` (ASCII CR) or `0x09` (ASCII HT) respectively.\n-   The _null escape_ is the character `U+0030` (`0`) and denotes the byte value `0x00` (ASCII NUL).\n-   The _backslash escape_ is the character `U+005C` (`\\`) which must be escaped in order to denote its ASCII encoding `0x5C`.\n\n#### [Raw byte string literals](#raw-byte-string-literals)\n\n> **Lexer**  \n> RAW\\_BYTE\\_STRING\\_LITERAL :  \n>    `br` RAW\\_BYTE\\_STRING\\_CONTENT SUFFIX?\n> \n> RAW\\_BYTE\\_STRING\\_CONTENT :  \n>       `\"` ASCII\\_FOR\\_RAW\\* (non-greedy) `\"`  \n>    | `#` RAW\\_BYTE\\_STRING\\_CONTENT `#`\n> \n> ASCII\\_FOR\\_RAW :  \n>    _any ASCII (i.e. 0x00 to 0x7F) except IsolatedCR_\n\nRaw byte string literals do not process any escapes. They start with the character `U+0062` (`b`), followed by `U+0072` (`r`), followed by fewer than 256 of the character `U+0023` (`#`), and a `U+0022` (double-quote) character.\n\nThe _raw string body_ can contain any sequence of ASCII characters other than `U+000D` (CR). It is terminated only by another `U+0022` (double-quote) character, followed by the same number of `U+0023` (`#`) characters that preceded the opening `U+0022` (double-quote) character. A raw byte string literal can not contain any non-ASCII byte.\n\nAll characters contained in the raw string body represent their ASCII encoding, the characters `U+0022` (double-quote) (except when followed by at least as many `U+0023` (`#`) characters as were used to start the raw string literal) or `U+005C` (`\\`) do not have any special meaning.\n\nExamples for byte string literals:\n\n```rust\n#![allow(unused)]\nfn main() {\nb\"foo\"; br\"foo\";                     // foo\nb\"\\\"foo\\\"\"; br#\"\"foo\"\"#;             // \"foo\"\n\nb\"foo #\\\"# bar\";\nbr##\"foo #\"# bar\"##;                 // foo #\"# bar\n\nb\"\\x52\"; b\"R\"; br\"R\";                // R\nb\"\\\\x52\"; br\"\\x52\";                  // \\x52\n}\n```\n\n### [C string and raw C string literals](#c-string-and-raw-c-string-literals)\n\n#### [C string literals](#c-string-literals)\n\n> **Lexer**  \n> C\\_STRING\\_LITERAL :  \n>    `c\"` (  \n>       ~\\[`\"` `\\` _IsolatedCR_ _NUL_\\]  \n>       | BYTE\\_ESCAPE _except `\\0` or `\\x00`_  \n>       | UNICODE\\_ESCAPE _except `\\u{0}`, `\\u{00}`, …, `\\u{000000}`_  \n>       | STRING\\_CONTINUE  \n>    )\\* `\"` SUFFIX?\n\nA _C string literal_ is a sequence of Unicode characters and _escapes_, preceded by the characters `U+0063` (`c`) and `U+0022` (double-quote), and followed by the character `U+0022`. If the character `U+0022` is present within the literal, it must be _escaped_ by a preceding `U+005C` (`\\`) character. Alternatively, a C string literal can be a _raw C string literal_, defined below.\n\nC strings are implicitly terminated by byte `0x00`, so the C string literal `c\"\"` is equivalent to manually constructing a `&CStr` from the byte string literal `b\"\\x00\"`. Other than the implicit terminator, byte `0x00` is not permitted within a C string.\n\nLine-breaks, represented by the character `U+000A` (LF), are allowed in C string literals. When an unescaped `U+005C` character (`\\`) occurs immediately before a line break, the line break does not appear in the string represented by the token. See [String continuation escapes](about:blank/expressions/literal-expr.html#string-continuation-escapes) for details. The character `U+000D` (CR) may not appear in a C string literal other than as part of such a string continuation escape.\n\nSome additional _escapes_ are available in non-raw C string literals. An escape starts with a `U+005C` (`\\`) and continues with one of the following forms:\n\n-   A _byte escape_ escape starts with `U+0078` (`x`) and is followed by exactly two _hex digits_. It denotes the byte equal to the provided hex value.\n-   A _24-bit code point escape_ starts with `U+0075` (`u`) and is followed by up to six _hex digits_ surrounded by braces `U+007B` (`{`) and `U+007D` (`}`). It denotes the Unicode code point equal to the provided hex value, encoded as UTF-8.\n-   A _whitespace escape_ is one of the characters `U+006E` (`n`), `U+0072` (`r`), or `U+0074` (`t`), denoting the bytes values `0x0A` (ASCII LF), `0x0D` (ASCII CR) or `0x09` (ASCII HT) respectively.\n-   The _backslash escape_ is the character `U+005C` (`\\`) which must be escaped in order to denote its ASCII encoding `0x5C`.\n\nA C string represents bytes with no defined encoding, but a C string literal may contain Unicode characters above `U+007F`. Such characters will be replaced with the bytes of that character's UTF-8 representation.\n\nThe following C string literals are equivalent:\n\n```rust\n#![allow(unused)]\nfn main() {\nc\"æ\";        // LATIN SMALL LETTER AE (U+00E6)\nc\"\\u{00E6}\";\nc\"\\xC3\\xA6\";\n}\n```\n\n> **Edition Differences**: C string literals are accepted in the 2021 edition or later. In earlier additions the token `c\"\"` is lexed as `c \"\"`.\n\n#### [Raw C string literals](#raw-c-string-literals)\n\n> **Lexer**  \n> RAW\\_C\\_STRING\\_LITERAL :  \n>    `cr` RAW\\_C\\_STRING\\_CONTENT SUFFIX?\n> \n> RAW\\_C\\_STRING\\_CONTENT :  \n>       `\"` ( ~ _IsolatedCR_ _NUL_ )\\* (non-greedy) `\"`  \n>    | `#` RAW\\_C\\_STRING\\_CONTENT `#`\n\nRaw C string literals do not process any escapes. They start with the character `U+0063` (`c`), followed by `U+0072` (`r`), followed by fewer than 256 of the character `U+0023` (`#`), and a `U+0022` (double-quote) character.\n\nThe _raw C string body_ can contain any sequence of Unicode characters other than `U+0000` (NUL) and `U+000D` (CR). It is terminated only by another `U+0022` (double-quote) character, followed by the same number of `U+0023` (`#`) characters that preceded the opening `U+0022` (double-quote) character.\n\nAll characters contained in the raw C string body represent themselves in UTF-8 encoding. The characters `U+0022` (double-quote) (except when followed by at least as many `U+0023` (`#`) characters as were used to start the raw C string literal) or `U+005C` (`\\`) do not have any special meaning.\n\n> **Edition Differences**: Raw C string literals are accepted in the 2021 edition or later. In earlier additions the token `cr\"\"` is lexed as `cr \"\"`, and `cr#\"\"#` is lexed as `cr #\"\"#` (which is non-grammatical).\n\n#### [Examples for C string and raw C string literals](#examples-for-c-string-and-raw-c-string-literals)\n\n```rust\n#![allow(unused)]\nfn main() {\nc\"foo\"; cr\"foo\";                     // foo\nc\"\\\"foo\\\"\"; cr#\"\"foo\"\"#;             // \"foo\"\n\nc\"foo #\\\"# bar\";\ncr##\"foo #\"# bar\"##;                 // foo #\"# bar\n\nc\"\\x52\"; c\"R\"; cr\"R\";                // R\nc\"\\\\x52\"; cr\"\\x52\";                  // \\x52\n}\n```\n\n### [Number literals](#number-literals)\n\nA _number literal_ is either an _integer literal_ or a _floating-point literal_. The grammar for recognizing the two kinds of literals is mixed.\n\n#### [Integer literals](#integer-literals)\n\n> **Lexer**  \n> INTEGER\\_LITERAL :  \n>    ( DEC\\_LITERAL | BIN\\_LITERAL | OCT\\_LITERAL | HEX\\_LITERAL ) SUFFIX\\_NO\\_E?\n> \n> DEC\\_LITERAL :  \n>    DEC\\_DIGIT (DEC\\_DIGIT|`_`)\\*\n> \n> BIN\\_LITERAL :  \n>    `0b` (BIN\\_DIGIT|`_`)\\* BIN\\_DIGIT (BIN\\_DIGIT|`_`)\\*\n> \n> OCT\\_LITERAL :  \n>    `0o` (OCT\\_DIGIT|`_`)\\* OCT\\_DIGIT (OCT\\_DIGIT|`_`)\\*\n> \n> HEX\\_LITERAL :  \n>    `0x` (HEX\\_DIGIT|`_`)\\* HEX\\_DIGIT (HEX\\_DIGIT|`_`)\\*\n> \n> BIN\\_DIGIT : \\[`0`\\-`1`\\]\n> \n> OCT\\_DIGIT : \\[`0`\\-`7`\\]\n> \n> DEC\\_DIGIT : \\[`0`\\-`9`\\]\n> \n> HEX\\_DIGIT : \\[`0`\\-`9` `a`\\-`f` `A`\\-`F`\\]\n\nAn _integer literal_ has one of four forms:\n\n-   A _decimal literal_ starts with a _decimal digit_ and continues with any mixture of _decimal digits_ and _underscores_.\n-   A _hex literal_ starts with the character sequence `U+0030` `U+0078` (`0x`) and continues as any mixture (with at least one digit) of hex digits and underscores.\n-   An _octal literal_ starts with the character sequence `U+0030` `U+006F` (`0o`) and continues as any mixture (with at least one digit) of octal digits and underscores.\n-   A _binary literal_ starts with the character sequence `U+0030` `U+0062` (`0b`) and continues as any mixture (with at least one digit) of binary digits and underscores.\n\nLike any literal, an integer literal may be followed (immediately, without any spaces) by a suffix as described above. The suffix may not begin with `e` or `E`, as that would be interpreted as the exponent of a floating-point literal. See [Integer literal expressions](about:blank/expressions/literal-expr.html#integer-literal-expressions) for the effect of these suffixes.\n\nExamples of integer literals which are accepted as literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n#![allow(overflowing_literals)]\n123;\n123i32;\n123u32;\n123_u32;\n\n0xff;\n0xff_u8;\n0x01_f32; // integer 7986, not floating-point 1.0\n0x01_e3;  // integer 483, not floating-point 1000.0\n\n0o70;\n0o70_i16;\n\n0b1111_1111_1001_0000;\n0b1111_1111_1001_0000i64;\n0b________1;\n\n0usize;\n\n// These are too big for their type, but are accepted as literal expressions.\n128_i8;\n256_u8;\n\n// This is an integer literal, accepted as a floating-point literal expression.\n5f32;\n}\n```\n\nNote that `-1i8`, for example, is analyzed as two tokens: `-` followed by `1i8`.\n\nExamples of integer literals which are not accepted as literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[cfg(FALSE)] {\n0invalidSuffix;\n123AFB43;\n0b010a;\n0xAB_CD_EF_GH;\n0b1111_f32;\n}\n}\n```\n\n#### [Tuple index](#tuple-index)\n\n> **Lexer**  \n> TUPLE\\_INDEX:  \n>    INTEGER\\_LITERAL\n\nA tuple index is used to refer to the fields of [tuples](types/tuple.html), [tuple structs](items/structs.html), and [tuple variants](items/enumerations.html).\n\nTuple indices are compared with the literal token directly. Tuple indices start with `0` and each successive index increments the value by `1` as a decimal value. Thus, only decimal values will match, and the value must not have any extra `0` prefix characters.\n\n```rust\n#![allow(unused)]\nfn main() {\nlet example = (\"dog\", \"cat\", \"horse\");\nlet dog = example.0;\nlet cat = example.1;\n// The following examples are invalid.\nlet cat = example.01;  // ERROR no field named `01`\nlet horse = example.0b10;  // ERROR no field named `0b10`\n}\n```\n\n> **Note**: Tuple indices may include certain suffixes, but this is not intended to be valid, and may be removed in a future version. See [https://github.com/rust-lang/rust/issues/60210](https://github.com/rust-lang/rust/issues/60210) for more information.\n\n#### [Floating-point literals](#floating-point-literals)\n\n> **Lexer**  \n> FLOAT\\_LITERAL :  \n>       DEC\\_LITERAL `.` _(not immediately followed by `.`, `_` or an XID\\_Start character)_  \n>    | DEC\\_LITERAL `.` DEC\\_LITERAL SUFFIX\\_NO\\_E?  \n>    | DEC\\_LITERAL (`.` DEC\\_LITERAL)? FLOAT\\_EXPONENT SUFFIX?\n> \n> FLOAT\\_EXPONENT :  \n>    (`e`|`E`) (`+`|`-`)? (DEC\\_DIGIT|`_`)\\* DEC\\_DIGIT (DEC\\_DIGIT|`_`)\\*\n\nA _floating-point literal_ has one of two forms:\n\n-   A _decimal literal_ followed by a period character `U+002E` (`.`). This is optionally followed by another decimal literal, with an optional _exponent_.\n-   A single _decimal literal_ followed by an _exponent_.\n\nLike integer literals, a floating-point literal may be followed by a suffix, so long as the pre-suffix part does not end with `U+002E` (`.`). The suffix may not begin with `e` or `E` if the literal does not include an exponent. See [Floating-point literal expressions](about:blank/expressions/literal-expr.html#floating-point-literal-expressions) for the effect of these suffixes.\n\nExamples of floating-point literals which are accepted as literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n123.0f64;\n0.1f64;\n0.1f32;\n12E+99_f64;\nlet x: f64 = 2.;\n}\n```\n\nThis last example is different because it is not possible to use the suffix syntax with a floating point literal ending in a period. `2.f64` would attempt to call a method named `f64` on `2`.\n\nNote that `-1.0`, for example, is analyzed as two tokens: `-` followed by `1.0`.\n\nExamples of floating-point literals which are not accepted as literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[cfg(FALSE)] {\n2.0f80;\n2e5f80;\n2e5e6;\n2.0e5e6;\n1.3e10u64;\n}\n}\n```\n\n#### [Reserved forms similar to number literals](#reserved-forms-similar-to-number-literals)\n\n> **Lexer**  \n> RESERVED\\_NUMBER :  \n>       BIN\\_LITERAL \\[`2`\\-`9`​\\]  \n>    | OCT\\_LITERAL \\[`8`\\-`9`​\\]  \n>    | ( BIN\\_LITERAL | OCT\\_LITERAL | HEX\\_LITERAL ) `.`  \n>          _(not immediately followed by `.`, `_` or an XID\\_Start character)_  \n>    | ( BIN\\_LITERAL | OCT\\_LITERAL ) (`e`|`E`)  \n>    | `0b` `_`\\* _end of input or not BIN\\_DIGIT_  \n>    | `0o` `_`\\* _end of input or not OCT\\_DIGIT_  \n>    | `0x` `_`\\* _end of input or not HEX\\_DIGIT_  \n>    | DEC\\_LITERAL ( . DEC\\_LITERAL)? (`e`|`E`) (`+`|`-`)? _end of input or not DEC\\_DIGIT_\n\nThe following lexical forms similar to number literals are _reserved forms_. Due to the possible ambiguity these raise, they are rejected by the tokenizer instead of being interpreted as separate tokens.\n\n-   An unsuffixed binary or octal literal followed, without intervening whitespace, by a decimal digit out of the range for its radix.\n    \n-   An unsuffixed binary, octal, or hexadecimal literal followed, without intervening whitespace, by a period character (with the same restrictions on what follows the period as for floating-point literals).\n    \n-   An unsuffixed binary or octal literal followed, without intervening whitespace, by the character `e` or `E`.\n    \n-   Input which begins with one of the radix prefixes but is not a valid binary, octal, or hexadecimal literal (because it contains no digits).\n    \n-   Input which has the form of a floating-point literal with no digits in the exponent.\n    \n\nExamples of reserved forms:\n\n```rust\n#![allow(unused)]\nfn main() {\n0b0102;  // this is not `0b010` followed by `2`\n0o1279;  // this is not `0o127` followed by `9`\n0x80.0;  // this is not `0x80` followed by `.` and `0`\n0b101e;  // this is not a suffixed literal, or `0b101` followed by `e`\n0b;      // this is not an integer literal, or `0` followed by `b`\n0b_;     // this is not an integer literal, or `0` followed by `b_`\n2e;      // this is not a floating-point literal, or `2` followed by `e`\n2.0e;    // this is not a floating-point literal, or `2.0` followed by `e`\n2em;     // this is not a suffixed literal, or `2` followed by `em`\n2.0em;   // this is not a suffixed literal, or `2.0` followed by `em`\n}\n```\n\n## [Lifetimes and loop labels](#lifetimes-and-loop-labels)\n\n> **Lexer**  \n> LIFETIME\\_TOKEN :  \n>       `'` [IDENTIFIER\\_OR\\_KEYWORD](identifiers.html) _(not immediately followed by `'`)_  \n>    | `'_` _(not immediately followed by `'`)_\n> \n> LIFETIME\\_OR\\_LABEL :  \n>       `'` [NON\\_KEYWORD\\_IDENTIFIER](identifiers.html) _(not immediately followed by `'`)_\n\nLifetime parameters and [loop labels](expressions/loop-expr.html) use LIFETIME\\_OR\\_LABEL tokens. Any LIFETIME\\_TOKEN will be accepted by the lexer, and for example, can be used in macros.\n\n## [Punctuation](#punctuation)\n\nPunctuation symbol tokens are listed here for completeness. Their individual usages and meanings are defined in the linked pages.\n\n| Symbol | Name | Usage |\n| --- | --- | --- |\n| `+` | Plus | [Addition](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [Trait Bounds](trait-bounds.html), [Macro Kleene Matcher](macros-by-example.html) |\n| `-` | Minus | [Subtraction](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [Negation](about:blank/expressions/operator-expr.html#negation-operators) |\n| `*` | Star | [Multiplication](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [Dereference](about:blank/expressions/operator-expr.html#the-dereference-operator), [Raw Pointers](about:blank/types/pointer.html#raw-pointers-const-and-mut), [Macro Kleene Matcher](macros-by-example.html), [Use wildcards](items/use-declarations.html) |\n| `/` | Slash | [Division](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators) |\n| `%` | Percent | [Remainder](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators) |\n| `^` | Caret | [Bitwise and Logical XOR](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators) |\n| `!` | Not | [Bitwise and Logical NOT](about:blank/expressions/operator-expr.html#negation-operators), [Macro Calls](macros-by-example.html), [Inner Attributes](attributes.html), [Never Type](types/never.html), [Negative impls](items/implementations.html) |\n| `&` | And | [Bitwise and Logical AND](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [Borrow](about:blank/expressions/operator-expr.html#borrow-operators), [References](types/pointer.html), [Reference patterns](about:blank/patterns.html#reference-patterns) |\n| `|` | Or | [Bitwise and Logical OR](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [Closures](expressions/closure-expr.html), Patterns in [match](expressions/match-expr.html), [if let](about:blank/expressions/if-expr.html#if-let-expressions), and [while let](about:blank/expressions/loop-expr.html#predicate-pattern-loops) |\n| `&&` | AndAnd | [Lazy AND](about:blank/expressions/operator-expr.html#lazy-boolean-operators), [Borrow](about:blank/expressions/operator-expr.html#borrow-operators), [References](types/pointer.html), [Reference patterns](about:blank/patterns.html#reference-patterns) |\n| `||` | OrOr | [Lazy OR](about:blank/expressions/operator-expr.html#lazy-boolean-operators), [Closures](expressions/closure-expr.html) |\n| `<<` | Shl | [Shift Left](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [Nested Generics](items/generics.html) |\n| `>>` | Shr | [Shift Right](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [Nested Generics](items/generics.html) |\n| `+=` | PlusEq | [Addition assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `-=` | MinusEq | [Subtraction assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `*=` | StarEq | [Multiplication assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `/=` | SlashEq | [Division assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `%=` | PercentEq | [Remainder assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `^=` | CaretEq | [Bitwise XOR assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `&=` | AndEq | [Bitwise And assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `|=` | OrEq | [Bitwise Or assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `<<=` | ShlEq | [Shift Left assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `>>=` | ShrEq | [Shift Right assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions), [Nested Generics](items/generics.html) |\n| `=` | Eq | [Assignment](about:blank/expressions/operator-expr.html#assignment-expressions), [Attributes](attributes.html), Various type definitions |\n| `==` | EqEq | [Equal](about:blank/expressions/operator-expr.html#comparison-operators) |\n| `!=` | Ne | [Not Equal](about:blank/expressions/operator-expr.html#comparison-operators) |\n| `>` | Gt | [Greater than](about:blank/expressions/operator-expr.html#comparison-operators), [Generics](items/generics.html), [Paths](paths.html) |\n| `<` | Lt | [Less than](about:blank/expressions/operator-expr.html#comparison-operators), [Generics](items/generics.html), [Paths](paths.html) |\n| `>=` | Ge | [Greater than or equal to](about:blank/expressions/operator-expr.html#comparison-operators), [Generics](items/generics.html) |\n| `<=` | Le | [Less than or equal to](about:blank/expressions/operator-expr.html#comparison-operators) |\n| `@` | At | [Subpattern binding](about:blank/patterns.html#identifier-patterns) |\n| `_` | Underscore | [Wildcard patterns](about:blank/patterns.html#wildcard-pattern), [Inferred types](types/inferred.html), Unnamed items in [constants](items/constant-items.html), [extern crates](items/extern-crates.html), [use declarations](items/use-declarations.html), and [destructuring assignment](expressions/underscore-expr.html) |\n| `.` | Dot | [Field access](expressions/field-expr.html), [Tuple index](about:blank/expressions/tuple-expr.html#tuple-indexing-expressions) |\n| `..` | DotDot | [Range](expressions/range-expr.html), [Struct expressions](expressions/struct-expr.html), [Patterns](patterns.html), [Range Patterns](about:blank/patterns.html#range-patterns) |\n| `...` | DotDotDot | [Variadic functions](items/external-blocks.html), [Range patterns](about:blank/patterns.html#range-patterns) |\n| `..=` | DotDotEq | [Inclusive Range](expressions/range-expr.html), [Range patterns](about:blank/patterns.html#range-patterns) |\n| `,` | Comma | Various separators |\n| `;` | Semi | Terminator for various items and statements, [Array types](types/array.html) |\n| `:` | Colon | Various separators |\n| `::` | PathSep | [Path separator](paths.html) |\n| `->` | RArrow | [Function return type](items/functions.html), [Closure return type](expressions/closure-expr.html), [Function pointer type](types/function-pointer.html) |\n| `=>` | FatArrow | [Match arms](expressions/match-expr.html), [Macros](macros-by-example.html) |\n| `<-` | LArrow | The left arrow symbol has been unused since before Rust 1.0, but it is still treated as a single token |\n| `#` | Pound | [Attributes](attributes.html) |\n| `$` | Dollar | [Macros](macros-by-example.html) |\n| `?` | Question | [Question mark operator](about:blank/expressions/operator-expr.html#the-question-mark-operator), [Questionably sized](about:blank/trait-bounds.html#sized), [Macro Kleene Matcher](macros-by-example.html) |\n| `~` | Tilde | The tilde operator has been unused since before Rust 1.0, but its token may still be used |\n\n## [Delimiters](#delimiters)\n\nBracket punctuation is used in various parts of the grammar. An open bracket must always be paired with a close bracket. Brackets and the tokens within them are referred to as \"token trees\" in [macros](macros-by-example.html). The three types of brackets are:\n\n| Bracket | Type |\n| --- | --- |\n| `{` `}` | Curly braces |\n| `[` `]` | Square brackets |\n| `(` `)` | Parentheses |\n\n## [Reserved prefixes](#reserved-prefixes)\n\n> **Lexer 2021+**  \n> RESERVED\\_TOKEN\\_DOUBLE\\_QUOTE : ( IDENTIFIER\\_OR\\_KEYWORD _Except `b` or `c` or `r` or `br` or `cr`_ | `_` ) `\"`  \n> RESERVED\\_TOKEN\\_SINGLE\\_QUOTE : ( IDENTIFIER\\_OR\\_KEYWORD _Except `b`_ | `_` ) `'`  \n> RESERVED\\_TOKEN\\_POUND : ( IDENTIFIER\\_OR\\_KEYWORD _Except `r` or `br` or `cr`_ | `_` ) `#`\n\nSome lexical forms known as _reserved prefixes_ are reserved for future use.\n\nSource input which would otherwise be lexically interpreted as a non-raw identifier (or a keyword or `_`) which is immediately followed by a `#`, `'`, or `\"` character (without intervening whitespace) is identified as a reserved prefix.\n\nNote that raw identifiers, raw string literals, and raw byte string literals may contain a `#` character but are not interpreted as containing a reserved prefix.\n\nSimilarly the `r`, `b`, `br`, `c`, and `cr` prefixes used in raw string literals, byte literals, byte string literals, raw byte string literals, C string literals, and raw C string literals are not interpreted as reserved prefixes.\n\n> **Edition Differences**: Starting with the 2021 edition, reserved prefixes are reported as an error by the lexer (in particular, they cannot be passed to macros).\n> \n> Before the 2021 edition, reserved prefixes are accepted by the lexer and interpreted as multiple tokens (for example, one token for the identifier or keyword, followed by a `#` token).\n> \n> Examples accepted in all editions:\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> macro_rules! lexes {($($_:tt)*) => {}}\n> lexes!{a #foo}\n> lexes!{continue 'foo}\n> lexes!{match \"...\" {}}\n> lexes!{r#let#foo}         // three tokens: r#let # foo\n> }\n> ```\n> \n> Examples accepted before the 2021 edition but rejected later:\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> macro_rules! lexes {($($_:tt)*) => {}}\n> lexes!{a#foo}\n> lexes!{continue'foo}\n> lexes!{match\"...\" {}}\n> }\n> ```\n\n## [Macros](#macros)\n\nThe functionality and syntax of Rust can be extended with custom definitions called macros. They are given names, and invoked through a consistent syntax: `some_extension!(...)`.\n\nThere are two ways to define new macros:\n\n-   [Macros by Example](macros-by-example.html) define new syntax in a higher-level, declarative way.\n-   [Procedural Macros](procedural-macros.html) define function-like macros, custom derives, and custom attributes using functions that operate on input tokens.\n\n## [Macro Invocation](#macro-invocation)\n\n> **Syntax**  \n> _MacroInvocation_ :  \n>    [_SimplePath_](about:blank/paths.html#simple-paths) `!` _DelimTokenTree_\n> \n> _DelimTokenTree_ :  \n>       `(` _TokenTree_\\* `)`  \n>    | `[` _TokenTree_\\* `]`  \n>    | `{` _TokenTree_\\* `}`\n> \n> _TokenTree_ :  \n>    [_Token_](tokens.html)_except [delimiters](about:blank/tokens.html#delimiters)_ | _DelimTokenTree_\n> \n> _MacroInvocationSemi_ :  \n>       [_SimplePath_](about:blank/paths.html#simple-paths) `!` `(` _TokenTree_\\* `)` `;`  \n>    | [_SimplePath_](about:blank/paths.html#simple-paths) `!` `[` _TokenTree_\\* `]` `;`  \n>    | [_SimplePath_](about:blank/paths.html#simple-paths) `!` `{` _TokenTree_\\* `}`\n\nA macro invocation expands a macro at compile time and replaces the invocation with the result of the macro. Macros may be invoked in the following situations:\n\n-   [Expressions](expressions.html) and [statements](statements.html)\n-   [Patterns](patterns.html)\n-   [Types](types.html)\n-   [Items](items.html) including [associated items](items/associated-items.html)\n-   [`macro_rules`](macros-by-example.html) transcribers\n-   [External blocks](items/external-blocks.html)\n\nWhen used as an item or a statement, the _MacroInvocationSemi_ form is used where a semicolon is required at the end when not using curly braces. [Visibility qualifiers](visibility-and-privacy.html) are never allowed before a macro invocation or [`macro_rules`](macros-by-example.html) definition.\n\n```rust\n#![allow(unused)]\nfn main() {\n// Used as an expression.\nlet x = vec![1,2,3];\n\n// Used as a statement.\nprintln!(\"Hello!\");\n\n// Used in a pattern.\nmacro_rules! pat {\n    ($i:ident) => (Some($i))\n}\n\nif let pat!(x) = Some(1) {\n    assert_eq!(x, 1);\n}\n\n// Used in a type.\nmacro_rules! Tuple {\n    { $A:ty, $B:ty } => { ($A, $B) };\n}\n\ntype N2 = Tuple!(i32, i32);\n\n// Used as an item.\nuse std::cell::RefCell;\nthread_local!(static FOO: RefCell<u32> = RefCell::new(1));\n\n// Used as an associated item.\nmacro_rules! const_maker {\n    ($t:ty, $v:tt) => { const CONST: $t = $v; };\n}\ntrait T {\n    const_maker!{i32, 7}\n}\n\n// Macro calls within macros.\nmacro_rules! example {\n    () => { println!(\"Macro call in a macro!\") };\n}\n// Outer macro `example` is expanded, then inner macro `println` is expanded.\nexample!();\n}\n```\n\n## [Macros By Example](#macros-by-example)\n\n> **Syntax**  \n> _MacroRulesDefinition_ :  \n>    `macro_rules` `!` [IDENTIFIER](identifiers.html) _MacroRulesDef_\n> \n> _MacroRulesDef_ :  \n>       `(` _MacroRules_ `)` `;`  \n>    | `[` _MacroRules_ `]` `;`  \n>    | `{` _MacroRules_ `}`\n> \n> _MacroRules_ :  \n>    _MacroRule_ ( `;` _MacroRule_ )\\* `;`?\n> \n> _MacroRule_ :  \n>    _MacroMatcher_ `=>` _MacroTranscriber_\n> \n> _MacroMatcher_ :  \n>       `(` _MacroMatch_\\* `)`  \n>    | `[` _MacroMatch_\\* `]`  \n>    | `{` _MacroMatch_\\* `}`\n> \n> _MacroMatch_ :  \n>       [_Token_](tokens.html)_except `$` and [delimiters](about:blank/tokens.html#delimiters)_  \n>    | _MacroMatcher_  \n>    | `$` ( [IDENTIFIER\\_OR\\_KEYWORD](identifiers.html) _except `crate`_ | [RAW\\_IDENTIFIER](identifiers.html) | `_` ) `:` _MacroFragSpec_  \n>    | `$` `(` _MacroMatch_+ `)` _MacroRepSep_? _MacroRepOp_\n> \n> _MacroFragSpec_ :  \n>       `block` | `expr` | `ident` | `item` | `lifetime` | `literal`  \n>    | `meta` | `pat` | `pat_param` | `path` | `stmt` | `tt` | `ty` | `vis`\n> \n> _MacroRepSep_ :  \n>    [_Token_](tokens.html)_except [delimiters](about:blank/tokens.html#delimiters) and MacroRepOp_\n> \n> _MacroRepOp_ :  \n>    `*` | `+` | `?`\n> \n> _MacroTranscriber_ :  \n>    [_DelimTokenTree_](macros.html)\n\n`macro_rules` allows users to define syntax extension in a declarative way. We call such extensions \"macros by example\" or simply \"macros\".\n\nEach macro by example has a name, and one or more _rules_. Each rule has two parts: a _matcher_, describing the syntax that it matches, and a _transcriber_, describing the syntax that will replace a successfully matched invocation. Both the matcher and the transcriber must be surrounded by delimiters. Macros can expand to expressions, statements, items (including traits, impls, and foreign items), types, or patterns.\n\n## [Transcribing](#transcribing)\n\nWhen a macro is invoked, the macro expander looks up macro invocations by name, and tries each macro rule in turn. It transcribes the first successful match; if this results in an error, then future matches are not tried. When matching, no lookahead is performed; if the compiler cannot unambiguously determine how to parse the macro invocation one token at a time, then it is an error. In the following example, the compiler does not look ahead past the identifier to see if the following token is a `)`, even though that would allow it to parse the invocation unambiguously:\n\n```rust\n#![allow(unused)]\nfn main() {\nmacro_rules! ambiguity {\n    ($($i:ident)* $j:ident) => { };\n}\n\nambiguity!(error); // Error: local ambiguity\n}\n```\n\nIn both the matcher and the transcriber, the `$` token is used to invoke special behaviours from the macro engine (described below in [Metavariables](about:blank/macros-by-example.html#metavariables) and [Repetitions](about:blank/macros-by-example.html#repetitions)). Tokens that aren't part of such an invocation are matched and transcribed literally, with one exception. The exception is that the outer delimiters for the matcher will match any pair of delimiters. Thus, for instance, the matcher `(())` will match `{()}` but not `{{}}`. The character `$` cannot be matched or transcribed literally.\n\n### [Forwarding a matched fragment](#forwarding-a-matched-fragment)\n\nWhen forwarding a matched fragment to another macro-by-example, matchers in the second macro will see an opaque AST of the fragment type. The second macro can't use literal tokens to match the fragments in the matcher, only a fragment specifier of the same type. The `ident`, `lifetime`, and `tt` fragment types are an exception, and _can_ be matched by literal tokens. The following illustrates this restriction:\n\n```rust\n#![allow(unused)]\nfn main() {\nmacro_rules! foo {\n    ($l:expr) => { bar!($l); }\n// ERROR:               ^^ no rules expected this token in macro call\n}\n\nmacro_rules! bar {\n    (3) => {}\n}\n\nfoo!(3);\n}\n```\n\nThe following illustrates how tokens can be directly matched after matching a `tt` fragment:\n\n```rust\n#![allow(unused)]\nfn main() {\n// compiles OK\nmacro_rules! foo {\n    ($l:tt) => { bar!($l); }\n}\n\nmacro_rules! bar {\n    (3) => {}\n}\n\nfoo!(3);\n}\n```\n\nIn the matcher, `$` _name_ `:` _fragment-specifier_ matches a Rust syntax fragment of the kind specified and binds it to the metavariable `$`_name_. Valid fragment specifiers are:\n\n-   `item`: an [_Item_](items.html)\n-   `block`: a [_BlockExpression_](expressions/block-expr.html)\n-   `stmt`: a [_Statement_](statements.html) without the trailing semicolon (except for item statements that require semicolons)\n-   `pat_param`: a [_PatternNoTopAlt_](patterns.html)\n-   `pat`: at least any [_PatternNoTopAlt_](patterns.html), and possibly more depending on edition\n-   `expr`: an [_Expression_](expressions.html)\n-   `ty`: a [_Type_](about:blank/types.html#type-expressions)\n-   `ident`: an [IDENTIFIER\\_OR\\_KEYWORD](identifiers.html) or [RAW\\_IDENTIFIER](identifiers.html)\n-   `path`: a [_TypePath_](about:blank/paths.html#paths-in-types) style path\n-   `tt`: a [_TokenTree_](about:blank/macros.html#macro-invocation) (a single [token](tokens.html) or tokens in matching delimiters `()`, `[]`, or `{}`)\n-   `meta`: an [_Attr_](attributes.html), the contents of an attribute\n-   `lifetime`: a [LIFETIME\\_TOKEN](about:blank/tokens.html#lifetimes-and-loop-labels)\n-   `vis`: a possibly empty [_Visibility_](visibility-and-privacy.html) qualifier\n-   `literal`: matches `-`?[_LiteralExpression_](expressions/literal-expr.html)\n\nIn the transcriber, metavariables are referred to simply by `$`_name_, since the fragment kind is specified in the matcher. Metavariables are replaced with the syntax element that matched them. The keyword metavariable `$crate` can be used to refer to the current crate; see [Hygiene](about:blank/macros-by-example.html#hygiene) below. Metavariables can be transcribed more than once or not at all.\n\nFor reasons of backwards compatibility, though `_` [is also an expression](expressions/underscore-expr.html), a standalone underscore is not matched by the `expr` fragment specifier. However, `_` is matched by the `expr` fragment specifier when it appears as a subexpression. For the same reason, a standalone [const block](about:blank/expressions/block-expr.html#const-blocks) is not matched but it is matched when appearing as a subexpression.\n\n> **Edition Differences**: Starting with the 2021 edition, `pat` fragment-specifiers match top-level or-patterns (that is, they accept [_Pattern_](patterns.html)).\n> \n> Before the 2021 edition, they match exactly the same fragments as `pat_param` (that is, they accept [_PatternNoTopAlt_](patterns.html)).\n> \n> The relevant edition is the one in effect for the `macro_rules!` definition.\n\n## [Repetitions](#repetitions)\n\nIn both the matcher and transcriber, repetitions are indicated by placing the tokens to be repeated inside `$(`…`)`, followed by a repetition operator, optionally with a separator token between. The separator token can be any token other than a delimiter or one of the repetition operators, but `;` and `,` are the most common. For instance, `$( $i:ident ),*` represents any number of identifiers separated by commas. Nested repetitions are permitted.\n\nThe repetition operators are:\n\n-   `*` — indicates any number of repetitions.\n-   `+` — indicates any number but at least one.\n-   `?` — indicates an optional fragment with zero or one occurrence.\n\nSince `?` represents at most one occurrence, it cannot be used with a separator.\n\nThe repeated fragment both matches and transcribes to the specified number of the fragment, separated by the separator token. Metavariables are matched to every repetition of their corresponding fragment. For instance, the `$( $i:ident ),*` example above matches `$i` to all of the identifiers in the list.\n\nDuring transcription, additional restrictions apply to repetitions so that the compiler knows how to expand them properly:\n\n1.  A metavariable must appear in exactly the same number, kind, and nesting order of repetitions in the transcriber as it did in the matcher. So for the matcher `$( $i:ident ),*`, the transcribers `=> { $i }`, `=> { $( $( $i)* )* }`, and `=> { $( $i )+ }` are all illegal, but `=> { $( $i );* }` is correct and replaces a comma-separated list of identifiers with a semicolon-separated list.\n2.  Each repetition in the transcriber must contain at least one metavariable to decide how many times to expand it. If multiple metavariables appear in the same repetition, they must be bound to the same number of fragments. For instance, `( $( $i:ident ),* ; $( $j:ident ),* ) => (( $( ($i,$j) ),* ))` must bind the same number of `$i` fragments as `$j` fragments. This means that invoking the macro with `(a, b, c; d, e, f)` is legal and expands to `((a,d), (b,e), (c,f))`, but `(a, b, c; d, e)` is illegal because it does not have the same number. This requirement applies to every layer of nested repetitions.\n\n## [Scoping, Exporting, and Importing](#scoping-exporting-and-importing)\n\nFor historical reasons, the scoping of macros by example does not work entirely like items. Macros have two forms of scope: textual scope, and path-based scope. Textual scope is based on the order that things appear in source files, or even across multiple files, and is the default scoping. It is explained further below. Path-based scope works exactly the same way that item scoping does. The scoping, exporting, and importing of macros is controlled largely by attributes.\n\nWhen a macro is invoked by an unqualified identifier (not part of a multi-part path), it is first looked up in textual scoping. If this does not yield any results, then it is looked up in path-based scoping. If the macro's name is qualified with a path, then it is only looked up in path-based scoping.\n\n```rust\nuse lazy_static::lazy_static; // Path-based import.\n\nmacro_rules! lazy_static { // Textual definition.\n    (lazy) => {};\n}\n\nlazy_static!{lazy} // Textual lookup finds our macro first.\nself::lazy_static!{} // Path-based lookup ignores our macro, finds imported one.\n```\n\n### [Textual Scope](#textual-scope)\n\nTextual scope is based largely on the order that things appear in source files, and works similarly to the scope of local variables declared with `let` except it also applies at the module level. When `macro_rules!` is used to define a macro, the macro enters the scope after the definition (note that it can still be used recursively, since names are looked up from the invocation site), up until its surrounding scope, typically a module, is closed. This can enter child modules and even span across multiple files:\n\n```rust\n//// src/lib.rs\nmod has_macro {\n    // m!{} // Error: m is not in scope.\n\n    macro_rules! m {\n        () => {};\n    }\n    m!{} // OK: appears after declaration of m.\n\n    mod uses_macro;\n}\n\n// m!{} // Error: m is not in scope.\n\n//// src/has_macro/uses_macro.rs\n\nm!{} // OK: appears after declaration of m in src/lib.rs\n```\n\nIt is not an error to define a macro multiple times; the most recent declaration will shadow the previous one unless it has gone out of scope.\n\n```rust\n#![allow(unused)]\nfn main() {\nmacro_rules! m {\n    (1) => {};\n}\n\nm!(1);\n\nmod inner {\n    m!(1);\n\n    macro_rules! m {\n        (2) => {};\n    }\n    // m!(1); // Error: no rule matches '1'\n    m!(2);\n\n    macro_rules! m {\n        (3) => {};\n    }\n    m!(3);\n}\n\nm!(1);\n}\n```\n\nMacros can be declared and used locally inside functions as well, and work similarly:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn foo() {\n    // m!(); // Error: m is not in scope.\n    macro_rules! m {\n        () => {};\n    }\n    m!();\n}\n\n\n// m!(); // Error: m is not in scope.\n}\n```\n\n### [The `macro_use` attribute](#the-macro_use-attribute)\n\nThe _`macro_use` attribute_ has two purposes. First, it can be used to make a module's macro scope not end when the module is closed, by applying it to a module:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[macro_use]\nmod inner {\n    macro_rules! m {\n        () => {};\n    }\n}\n\nm!();\n}\n```\n\nSecond, it can be used to import macros from another crate, by attaching it to an `extern crate` declaration appearing in the crate's root module. Macros imported this way are imported into the [`macro_use` prelude](about:blank/names/preludes.html#macro_use-prelude), not textually, which means that they can be shadowed by any other name. While macros imported by `#[macro_use]` can be used before the import statement, in case of a conflict, the last macro imported wins. Optionally, a list of macros to import can be specified using the [_MetaListIdents_](about:blank/attributes.html#meta-item-attribute-syntax) syntax; this is not supported when `#[macro_use]` is applied to a module.\n\n```rust\n#[macro_use(lazy_static)] // Or #[macro_use] to import all macros.\nextern crate lazy_static;\n\nlazy_static!{}\n// self::lazy_static!{} // Error: lazy_static is not defined in `self`\n```\n\nMacros to be imported with `#[macro_use]` must be exported with `#[macro_export]`, which is described below.\n\n### [Path-Based Scope](#path-based-scope)\n\nBy default, a macro has no path-based scope. However, if it has the `#[macro_export]` attribute, then it is declared in the crate root scope and can be referred to normally as such:\n\n```rust\n#![allow(unused)]\nfn main() {\nself::m!();\nm!(); // OK: Path-based lookup finds m in the current module.\n\nmod inner {\n    super::m!();\n    crate::m!();\n}\n\nmod mac {\n    #[macro_export]\n    macro_rules! m {\n        () => {};\n    }\n}\n}\n```\n\nMacros labeled with `#[macro_export]` are always `pub` and can be referred to by other crates, either by path or by `#[macro_use]` as described above.\n\n## [Hygiene](#hygiene)\n\nBy default, all identifiers referred to in a macro are expanded as-is, and are looked up at the macro's invocation site. This can lead to issues if a macro refers to an item or macro which isn't in scope at the invocation site. To alleviate this, the `$crate` metavariable can be used at the start of a path to force lookup to occur inside the crate defining the macro.\n\n```rust\n//// Definitions in the `helper_macro` crate.\n#[macro_export]\nmacro_rules! helped {\n    // () => { helper!() } // This might lead to an error due to 'helper' not being in scope.\n    () => { $crate::helper!() }\n}\n\n#[macro_export]\nmacro_rules! helper {\n    () => { () }\n}\n\n//// Usage in another crate.\n// Note that `helper_macro::helper` is not imported!\nuse helper_macro::helped;\n\nfn unit() {\n    helped!();\n}\n```\n\nNote that, because `$crate` refers to the current crate, it must be used with a fully qualified module path when referring to non-macro items:\n\n```rust\n#![allow(unused)]\nfn main() {\npub mod inner {\n    #[macro_export]\n    macro_rules! call_foo {\n        () => { $crate::inner::foo() };\n    }\n\n    pub fn foo() {}\n}\n}\n```\n\nAdditionally, even though `$crate` allows a macro to refer to items within its own crate when expanding, its use has no effect on visibility. An item or macro referred to must still be visible from the invocation site. In the following example, any attempt to invoke `call_foo!()` from outside its crate will fail because `foo()` is not public.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[macro_export]\nmacro_rules! call_foo {\n    () => { $crate::foo() };\n}\n\nfn foo() {}\n}\n```\n\n> **Version & Edition Differences**: Prior to Rust 1.30, `$crate` and `local_inner_macros` (below) were unsupported. They were added alongside path-based imports of macros (described above), to ensure that helper macros did not need to be manually imported by users of a macro-exporting crate. Crates written for earlier versions of Rust that use helper macros need to be modified to use `$crate` or `local_inner_macros` to work well with path-based imports.\n\nWhen a macro is exported, the `#[macro_export]` attribute can have the `local_inner_macros` keyword added to automatically prefix all contained macro invocations with `$crate::`. This is intended primarily as a tool to migrate code written before `$crate` was added to the language to work with Rust 2018's path-based imports of macros. Its use is discouraged in new code.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[macro_export(local_inner_macros)]\nmacro_rules! helped {\n    () => { helper!() } // Automatically converted to $crate::helper!().\n}\n\n#[macro_export]\nmacro_rules! helper {\n    () => { () }\n}\n}\n```\n\n## [Follow-set Ambiguity Restrictions](#follow-set-ambiguity-restrictions)\n\nThe parser used by the macro system is reasonably powerful, but it is limited in order to prevent ambiguity in current or future versions of the language. In particular, in addition to the rule about ambiguous expansions, a nonterminal matched by a metavariable must be followed by a token which has been decided can be safely used after that kind of match.\n\nAs an example, a macro matcher like `$i:expr [ , ]` could in theory be accepted in Rust today, since `[,]` cannot be part of a legal expression and therefore the parse would always be unambiguous. However, because `[` can start trailing expressions, `[` is not a character which can safely be ruled out as coming after an expression. If `[,]` were accepted in a later version of Rust, this matcher would become ambiguous or would misparse, breaking working code. Matchers like `$i:expr,` or `$i:expr;` would be legal, however, because `,` and `;` are legal expression separators. The specific rules are:\n\n-   `expr` and `stmt` may only be followed by one of: `=>`, `,`, or `;`.\n-   `pat_param` may only be followed by one of: `=>`, `,`, `=`, `|`, `if`, or `in`.\n-   `pat` may only be followed by one of: `=>`, `,`, `=`, `if`, or `in`.\n-   `path` and `ty` may only be followed by one of: `=>`, `,`, `=`, `|`, `;`, `:`, `>`, `>>`, `[`, `{`, `as`, `where`, or a macro variable of `block` fragment specifier.\n-   `vis` may only be followed by one of: `,`, an identifier other than a non-raw `priv`, any token that can begin a type, or a metavariable with a `ident`, `ty`, or `path` fragment specifier.\n-   All other fragment specifiers have no restrictions.\n\n> **Edition Differences**: Before the 2021 edition, `pat` may also be followed by `|`.\n\nWhen repetitions are involved, then the rules apply to every possible number of expansions, taking separators into account. This means:\n\n-   If the repetition includes a separator, that separator must be able to follow the contents of the repetition.\n-   If the repetition can repeat multiple times (`*` or `+`), then the contents must be able to follow themselves.\n-   The contents of the repetition must be able to follow whatever comes before, and whatever comes after must be able to follow the contents of the repetition.\n-   If the repetition can match zero times (`*` or `?`), then whatever comes after must be able to follow whatever comes before.\n\nFor more detail, see the [formal specification](macro-ambiguity.html).\n\n## [Procedural Macros](#procedural-macros)\n\n_Procedural macros_ allow creating syntax extensions as execution of a function. Procedural macros come in one of three flavors:\n\n-   [Function-like macros](about:blank/procedural-macros.html#function-like-procedural-macros) - `custom!(...)`\n-   [Derive macros](about:blank/procedural-macros.html#derive-macros) - `#[derive(CustomDerive)]`\n-   [Attribute macros](about:blank/procedural-macros.html#attribute-macros) - `#[CustomAttribute]`\n\nProcedural macros allow you to run code at compile time that operates over Rust syntax, both consuming and producing Rust syntax. You can sort of think of procedural macros as functions from an AST to another AST.\n\nProcedural macros must be defined in a crate with the [crate type](linkage.html) of `proc-macro`.\n\n> **Note**: When using Cargo, Procedural macro crates are defined with the `proc-macro` key in your manifest:\n> \n> ```toml\n> [lib]\n> proc-macro = true\n> \n> ```\n\nAs functions, they must either return syntax, panic, or loop endlessly. Returned syntax either replaces or adds the syntax depending on the kind of procedural macro. Panics are caught by the compiler and are turned into a compiler error. Endless loops are not caught by the compiler which hangs the compiler.\n\nProcedural macros run during compilation, and thus have the same resources that the compiler has. For example, standard input, error, and output are the same that the compiler has access to. Similarly, file access is the same. Because of this, procedural macros have the same security concerns that [Cargo's build scripts](../cargo/reference/build-scripts.html) have.\n\nProcedural macros have two ways of reporting errors. The first is to panic. The second is to emit a [`compile_error`](../std/macro.compile_error.html) macro invocation.\n\n### [The `proc_macro` crate](#the-proc_macro-crate)\n\nProcedural macro crates almost always will link to the compiler-provided [`proc_macro` crate](../proc_macro/index.html). The `proc_macro` crate provides types required for writing procedural macros and facilities to make it easier.\n\nThis crate primarily contains a [`TokenStream`](../proc_macro/struct.TokenStream.html) type. Procedural macros operate over _token streams_ instead of AST nodes, which is a far more stable interface over time for both the compiler and for procedural macros to target. A _token stream_ is roughly equivalent to `Vec<TokenTree>` where a `TokenTree` can roughly be thought of as lexical token. For example `foo` is an `Ident` token, `.` is a `Punct` token, and `1.2` is a `Literal` token. The `TokenStream` type, unlike `Vec<TokenTree>`, is cheap to clone.\n\nAll tokens have an associated `Span`. A `Span` is an opaque value that cannot be modified but can be manufactured. `Span`s represent an extent of source code within a program and are primarily used for error reporting. While you cannot modify a `Span` itself, you can always change the `Span` _associated_ with any token, such as through getting a `Span` from another token.\n\n### [Procedural macro hygiene](#procedural-macro-hygiene)\n\nProcedural macros are _unhygienic_. This means they behave as if the output token stream was simply written inline to the code it's next to. This means that it's affected by external items and also affects external imports.\n\nMacro authors need to be careful to ensure their macros work in as many contexts as possible given this limitation. This often includes using absolute paths to items in libraries (for example, `::std::option::Option` instead of `Option`) or by ensuring that generated functions have names that are unlikely to clash with other functions (like `__internal_foo` instead of `foo`).\n\n### [Function-like procedural macros](#function-like-procedural-macros)\n\n_Function-like procedural macros_ are procedural macros that are invoked using the macro invocation operator (`!`).\n\nThese macros are defined by a [public](visibility-and-privacy.html) [function](items/functions.html) with the `proc_macro` [attribute](attributes.html) and a signature of `(TokenStream) -> TokenStream`. The input [`TokenStream`](../proc_macro/struct.TokenStream.html) is what is inside the delimiters of the macro invocation and the output [`TokenStream`](../proc_macro/struct.TokenStream.html) replaces the entire macro invocation.\n\nFor example, the following macro definition ignores its input and outputs a function `answer` into its scope.\n\n```rust\n#![crate_type = \"proc-macro\"]\nextern crate proc_macro;\nuse proc_macro::TokenStream;\n\n#[proc_macro]\npub fn make_answer(_item: TokenStream) -> TokenStream {\n    \"fn answer() -> u32 { 42 }\".parse().unwrap()\n}\n```\n\nAnd then we use it in a binary crate to print \"42\" to standard output.\n\n```rust\nextern crate proc_macro_examples;\nuse proc_macro_examples::make_answer;\n\nmake_answer!();\n\nfn main() {\n    println!(\"{}\", answer());\n}\n```\n\nFunction-like procedural macros may be invoked in any macro invocation position, which includes [statements](statements.html), [expressions](expressions.html), [patterns](patterns.html), [type expressions](about:blank/types.html#type-expressions), [item](items.html) positions, including items in [`extern` blocks](items/external-blocks.html), inherent and trait [implementations](items/implementations.html), and [trait definitions](items/traits.html).\n\n### [Derive macros](#derive-macros)\n\n_Derive macros_ define new inputs for the [`derive` attribute](attributes/derive.html). These macros can create new [items](items.html) given the token stream of a [struct](items/structs.html), [enum](items/enumerations.html), or [union](items/unions.html). They can also define [derive macro helper attributes](about:blank/procedural-macros.html#derive-macro-helper-attributes).\n\nCustom derive macros are defined by a [public](visibility-and-privacy.html) [function](items/functions.html) with the `proc_macro_derive` attribute and a signature of `(TokenStream) -> TokenStream`.\n\nThe input [`TokenStream`](../proc_macro/struct.TokenStream.html) is the token stream of the item that has the `derive` attribute on it. The output [`TokenStream`](../proc_macro/struct.TokenStream.html) must be a set of items that are then appended to the [module](items/modules.html) or [block](expressions/block-expr.html) that the item from the input [`TokenStream`](../proc_macro/struct.TokenStream.html) is in.\n\nThe following is an example of a derive macro. Instead of doing anything useful with its input, it just appends a function `answer`.\n\n```rust\n#![crate_type = \"proc-macro\"]\nextern crate proc_macro;\nuse proc_macro::TokenStream;\n\n#[proc_macro_derive(AnswerFn)]\npub fn derive_answer_fn(_item: TokenStream) -> TokenStream {\n    \"fn answer() -> u32 { 42 }\".parse().unwrap()\n}\n```\n\nAnd then using said derive macro:\n\n```rust\nextern crate proc_macro_examples;\nuse proc_macro_examples::AnswerFn;\n\n#[derive(AnswerFn)]\nstruct Struct;\n\nfn main() {\n    assert_eq!(42, answer());\n}\n```\n\n#### [Derive macro helper attributes](#derive-macro-helper-attributes)\n\nDerive macros can add additional [attributes](attributes.html) into the scope of the [item](items.html) they are on. Said attributes are called _derive macro helper attributes_. These attributes are [inert](about:blank/attributes.html#active-and-inert-attributes), and their only purpose is to be fed into the derive macro that defined them. That said, they can be seen by all macros.\n\nThe way to define helper attributes is to put an `attributes` key in the `proc_macro_derive` macro with a comma separated list of identifiers that are the names of the helper attributes.\n\nFor example, the following derive macro defines a helper attribute `helper`, but ultimately doesn't do anything with it.\n\n```rust\n#![crate_type=\"proc-macro\"]\nextern crate proc_macro;\nuse proc_macro::TokenStream;\n\n#[proc_macro_derive(HelperAttr, attributes(helper))]\npub fn derive_helper_attr(_item: TokenStream) -> TokenStream {\n    TokenStream::new()\n}\n```\n\nAnd then usage on the derive macro on a struct:\n\n```rust\n#[derive(HelperAttr)]\nstruct Struct {\n    #[helper] field: ()\n}\n```\n\n### [Attribute macros](#attribute-macros)\n\n_Attribute macros_ define new [outer attributes](attributes.html) which can be attached to [items](items.html), including items in [`extern` blocks](items/external-blocks.html), inherent and trait [implementations](items/implementations.html), and [trait definitions](items/traits.html).\n\nAttribute macros are defined by a [public](visibility-and-privacy.html) [function](items/functions.html) with the `proc_macro_attribute` [attribute](attributes.html) that has a signature of `(TokenStream, TokenStream) -> TokenStream`. The first [`TokenStream`](../proc_macro/struct.TokenStream.html) is the delimited token tree following the attribute's name, not including the outer delimiters. If the attribute is written as a bare attribute name, the attribute [`TokenStream`](../proc_macro/struct.TokenStream.html) is empty. The second [`TokenStream`](../proc_macro/struct.TokenStream.html) is the rest of the [item](items.html) including other [attributes](attributes.html) on the [item](items.html). The returned [`TokenStream`](../proc_macro/struct.TokenStream.html) replaces the [item](items.html) with an arbitrary number of [items](items.html).\n\nFor example, this attribute macro takes the input stream and returns it as is, effectively being the no-op of attributes.\n\n```rust\n#![crate_type = \"proc-macro\"]\nextern crate proc_macro;\nuse proc_macro::TokenStream;\n\n#[proc_macro_attribute]\npub fn return_as_is(_attr: TokenStream, item: TokenStream) -> TokenStream {\n    item\n}\n```\n\nThis following example shows the stringified [`TokenStream`s](../proc_macro/struct.TokenStream.html) that the attribute macros see. The output will show in the output of the compiler. The output is shown in the comments after the function prefixed with \"out:\".\n\n```rust\n// my-macro/src/lib.rs\nextern crate proc_macro;\nuse proc_macro::TokenStream;\n\n#[proc_macro_attribute]\npub fn show_streams(attr: TokenStream, item: TokenStream) -> TokenStream {\n    println!(\"attr: \\\"{attr}\\\"\");\n    println!(\"item: \\\"{item}\\\"\");\n    item\n}\n```\n\n```rust\n// src/lib.rs\nextern crate my_macro;\n\nuse my_macro::show_streams;\n\n// Example: Basic function\n#[show_streams]\nfn invoke1() {}\n// out: attr: \"\"\n// out: item: \"fn invoke1() {}\"\n\n// Example: Attribute with input\n#[show_streams(bar)]\nfn invoke2() {}\n// out: attr: \"bar\"\n// out: item: \"fn invoke2() {}\"\n\n// Example: Multiple tokens in the input\n#[show_streams(multiple => tokens)]\nfn invoke3() {}\n// out: attr: \"multiple => tokens\"\n// out: item: \"fn invoke3() {}\"\n\n// Example:\n#[show_streams { delimiters }]\nfn invoke4() {}\n// out: attr: \"delimiters\"\n// out: item: \"fn invoke4() {}\"\n```\n\n### [Declarative macro tokens and procedural macro tokens](#declarative-macro-tokens-and-procedural-macro-tokens)\n\nDeclarative `macro_rules` macros and procedural macros use similar, but different definitions for tokens (or rather [`TokenTree`s](../proc_macro/enum.TokenTree.html).)\n\nToken trees in `macro_rules` (corresponding to `tt` matchers) are defined as\n\n-   Delimited groups (`(...)`, `{...}`, etc)\n-   All operators supported by the language, both single-character and multi-character ones (`+`, `+=`).\n    -   Note that this set doesn't include the single quote `'`.\n-   Literals (`\"string\"`, `1`, etc)\n    -   Note that negation (e.g. `-1`) is never a part of such literal tokens, but a separate operator token.\n-   Identifiers, including keywords (`ident`, `r#ident`, `fn`)\n-   Lifetimes (`'ident`)\n-   Metavariable substitutions in `macro_rules` (e.g. `$my_expr` in `macro_rules! mac { ($my_expr: expr) => { $my_expr } }` after the `mac`'s expansion, which will be considered a single token tree regardless of the passed expression)\n\nToken trees in procedural macros are defined as\n\n-   Delimited groups (`(...)`, `{...}`, etc)\n-   All punctuation characters used in operators supported by the language (`+`, but not `+=`), and also the single quote `'` character (typically used in lifetimes, see below for lifetime splitting and joining behavior)\n-   Literals (`\"string\"`, `1`, etc)\n    -   Negation (e.g. `-1`) is supported as a part of integer and floating point literals.\n-   Identifiers, including keywords (`ident`, `r#ident`, `fn`)\n\nMismatches between these two definitions are accounted for when token streams are passed to and from procedural macros.  \nNote that the conversions below may happen lazily, so they might not happen if the tokens are not actually inspected.\n\nWhen passed to a proc-macro\n\n-   All multi-character operators are broken into single characters.\n-   Lifetimes are broken into a `'` character and an identifier.\n-   All metavariable substitutions are represented as their underlying token streams.\n    -   Such token streams may be wrapped into delimited groups ([`Group`](../proc_macro/struct.Group.html)) with implicit delimiters ([`Delimiter::None`](about:blank/proc_macro/enum.Delimiter.html#variant.None)) when it's necessary for preserving parsing priorities.\n    -   `tt` and `ident` substitutions are never wrapped into such groups and always represented as their underlying token trees.\n\nWhen emitted from a proc macro\n\n-   Punctuation characters are glued into multi-character operators when applicable.\n-   Single quotes `'` joined with identifiers are glued into lifetimes.\n-   Negative literals are converted into two tokens (the `-` and the literal) possibly wrapped into a delimited group ([`Group`](../proc_macro/struct.Group.html)) with implicit delimiters ([`Delimiter::None`](about:blank/proc_macro/enum.Delimiter.html#variant.None)) when it's necessary for preserving parsing priorities.\n\nNote that neither declarative nor procedural macros support doc comment tokens (e.g. `/// Doc`), so they are always converted to token streams representing their equivalent `#[doc = r\"str\"]` attributes when passed to macros.\n\n## [Crates and source files](#crates-and-source-files)\n\n> **Syntax**  \n> _Crate_ :  \n>    [_InnerAttribute_](attributes.html)\\*  \n>    [_Item_](items.html)\\*\n\n> Note: Although Rust, like any other language, can be implemented by an interpreter as well as a compiler, the only existing implementation is a compiler, and the language has always been designed to be compiled. For these reasons, this section assumes a compiler.\n\nRust's semantics obey a _phase distinction_ between compile-time and run-time.[1](#phase-distinction) Semantic rules that have a _static interpretation_ govern the success or failure of compilation, while semantic rules that have a _dynamic interpretation_ govern the behavior of the program at run-time.\n\nThe compilation model centers on artifacts called _crates_. Each compilation processes a single crate in source form, and if successful, produces a single crate in binary form: either an executable or some sort of library.[2](#cratesourcefile)\n\nA _crate_ is a unit of compilation and linking, as well as versioning, distribution, and runtime loading. A crate contains a _tree_ of nested [module](items/modules.html) scopes. The top level of this tree is a module that is anonymous (from the point of view of paths within the module) and any item within a crate has a canonical [module path](paths.html) denoting its location within the crate's module tree.\n\nThe Rust compiler is always invoked with a single source file as input, and always produces a single output crate. The processing of that source file may result in other source files being loaded as modules. Source files have the extension `.rs`.\n\nA Rust source file describes a module, the name and location of which — in the module tree of the current crate — are defined from outside the source file: either by an explicit [_Module_](items/modules.html) item in a referencing source file, or by the name of the crate itself. Every source file is a module, but not every module needs its own source file: [module definitions](items/modules.html) can be nested within one file.\n\nEach source file contains a sequence of zero or more [_Item_](items.html) definitions, and may optionally begin with any number of [attributes](attributes.html) that apply to the containing module, most of which influence the behavior of the compiler. The anonymous crate module can have additional attributes that apply to the crate as a whole.\n\n> **Note**: The file's contents may be preceded by a [shebang](about:blank/input-format.html#shebang-removal).\n\n```rust\n#![allow(unused)]\nfn main() {\n// Specify the crate name.\n#![crate_name = \"projx\"]\n\n// Specify the type of output artifact.\n#![crate_type = \"lib\"]\n\n// Turn on a warning.\n// This can be done in any module, not just the anonymous crate module.\n#![warn(non_camel_case_types)]\n}\n```\n\n## [Preludes and `no_std`](#preludes-and-no_std)\n\nThis section has been moved to the [Preludes chapter](names/preludes.html).\n\n## [Main Functions](#main-functions)\n\nA crate that contains a `main` [function](items/functions.html) can be compiled to an executable. If a `main` function is present, it must take no arguments, must not declare any [trait or lifetime bounds](trait-bounds.html), must not have any [where clauses](about:blank/items/generics.html#where-clauses), and its return type must implement the [`Termination`](../std/process/trait.Termination.html) trait.\n\n```rust\nfn main() {}\n```\n\n```rust\nfn main() -> ! {\n    std::process::exit(0);\n}\n```\n\n```rust\nfn main() -> impl std::process::Termination {\n    std::process::ExitCode::SUCCESS\n}\n```\n\nThe `main` function may be an import, e.g. from an external crate or from the current one.\n\n```rust\n#![allow(unused)]\nfn main() {\nmod foo {\n    pub fn bar() {\n        println!(\"Hello, world!\");\n    }\n}\nuse foo::bar as main;\n}\n```\n\n> **Note**: Types with implementations of [`Termination`](../std/process/trait.Termination.html) in the standard library include:\n> \n> -   `()`\n> -   [`!`](types/never.html)\n> -   [`Infallible`](../std/convert/enum.Infallible.html)\n> -   [`ExitCode`](../std/process/struct.ExitCode.html)\n> -   `Result<T, E> where T: Termination, E: Debug`\n\n### [The `no_main` attribute](#the-no_main-attribute)\n\nThe _`no_main` [attribute](attributes.html)_ may be applied at the crate level to disable emitting the `main` symbol for an executable binary. This is useful when some other object being linked to defines `main`.\n\n## [The `crate_name` attribute](#the-crate_name-attribute)\n\nThe _`crate_name` [attribute](attributes.html)_ may be applied at the crate level to specify the name of the crate with the [_MetaNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax.\n\n```rust\n#![allow(unused)]\n#![crate_name = \"mycrate\"]\nfn main() {\n}\n```\n\nThe crate name must not be empty, and must only contain [Unicode alphanumeric](about:blank/std/primitive.char.html#method.is_alphanumeric) or `_` (U+005F) characters.\n\n## [Conditional compilation](#conditional-compilation)\n\n> **Syntax**  \n> _ConfigurationPredicate_ :  \n>       _ConfigurationOption_  \n>    | _ConfigurationAll_  \n>    | _ConfigurationAny_  \n>    | _ConfigurationNot_\n> \n> _ConfigurationOption_ :  \n>    [IDENTIFIER](identifiers.html) (`=` ([STRING\\_LITERAL](about:blank/tokens.html#string-literals) | [RAW\\_STRING\\_LITERAL](about:blank/tokens.html#raw-string-literals)))?\n> \n> _ConfigurationAll_  \n>    `all` `(` _ConfigurationPredicateList_? `)`\n> \n> _ConfigurationAny_  \n>    `any` `(` _ConfigurationPredicateList_? `)`\n> \n> _ConfigurationNot_  \n>    `not` `(` _ConfigurationPredicate_ `)`\n> \n> _ConfigurationPredicateList_  \n>    _ConfigurationPredicate_ (`,` _ConfigurationPredicate_)\\* `,`?\n\n_Conditionally compiled source code_ is source code that may or may not be considered a part of the source code depending on certain conditions. Source code can be conditionally compiled using the [attributes](attributes.html) [`cfg`](about:blank/conditional-compilation.html#the-cfg-attribute) and [`cfg_attr`](about:blank/conditional-compilation.html#the-cfg_attr-attribute) and the built-in [`cfg` macro](about:blank/conditional-compilation.html#the-cfg-macro). These conditions are based on the target architecture of the compiled crate, arbitrary values passed to the compiler, and a few other miscellaneous things further described below in detail.\n\nEach form of conditional compilation takes a _configuration predicate_ that evaluates to true or false. The predicate is one of the following:\n\n-   A configuration option. It is true if the option is set and false if it is unset.\n-   `all()` with a comma separated list of configuration predicates. It is false if at least one predicate is false. If there are no predicates, it is true.\n-   `any()` with a comma separated list of configuration predicates. It is true if at least one predicate is true. If there are no predicates, it is false.\n-   `not()` with a configuration predicate. It is true if its predicate is false and false if its predicate is true.\n\n_Configuration options_ are names and key-value pairs that are either set or unset. Names are written as a single identifier such as, for example, `unix`. Key-value pairs are written as an identifier, `=`, and then a string. For example, `target_arch = \"x86_64\"` is a configuration option.\n\n> **Note**: Whitespace around the `=` is ignored. `foo=\"bar\"` and `foo = \"bar\"` are equivalent configuration options.\n\nKeys are not unique in the set of key-value configuration options. For example, both `feature = \"std\"` and `feature = \"serde\"` can be set at the same time.\n\n## [Set Configuration Options](#set-configuration-options)\n\nWhich configuration options are set is determined statically during the compilation of the crate. Certain options are _compiler-set_ based on data about the compilation. Other options are _arbitrarily-set_, set based on input passed to the compiler outside of the code. It is not possible to set a configuration option from within the source code of the crate being compiled.\n\n> **Note**: For `rustc`, arbitrary-set configuration options are set using the [`--cfg`](about:blank/rustc/command-line-arguments.html#--cfg-configure-the-compilation-environment) flag.\n\n> **Note**: Configuration options with the key `feature` are a convention used by [Cargo](../cargo/reference/features.html) for specifying compile-time options and optional dependencies.\n\nWarning: It is possible for arbitrarily-set configuration options to have the same value as compiler-set configuration options. For example, it is possible to do `rustc --cfg \"unix\" program.rs` while compiling to a Windows target, and have both `unix` and `windows` configuration options set at the same time. It is unwise to actually do this.\n\n### [`target_arch`](#target_arch)\n\nKey-value option set once with the target's CPU architecture. The value is similar to the first element of the platform's target triple, but not identical.\n\nExample values:\n\n-   `\"x86\"`\n-   `\"x86_64\"`\n-   `\"mips\"`\n-   `\"powerpc\"`\n-   `\"powerpc64\"`\n-   `\"arm\"`\n-   `\"aarch64\"`\n\n### [`target_feature`](#target_feature)\n\nKey-value option set for each platform feature available for the current compilation target.\n\nExample values:\n\n-   `\"avx\"`\n-   `\"avx2\"`\n-   `\"crt-static\"`\n-   `\"rdrand\"`\n-   `\"sse\"`\n-   `\"sse2\"`\n-   `\"sse4.1\"`\n\nSee the [`target_feature` attribute](about:blank/attributes/codegen.html#the-target_feature-attribute) for more details on the available features. An additional feature of `crt-static` is available to the `target_feature` option to indicate that a [static C runtime](about:blank/linkage.html#static-and-dynamic-c-runtimes) is available.\n\n### [`target_os`](#target_os)\n\nKey-value option set once with the target's operating system. This value is similar to the second and third element of the platform's target triple.\n\nExample values:\n\n-   `\"windows\"`\n-   `\"macos\"`\n-   `\"ios\"`\n-   `\"linux\"`\n-   `\"android\"`\n-   `\"freebsd\"`\n-   `\"dragonfly\"`\n-   `\"openbsd\"`\n-   `\"netbsd\"`\n-   `\"none\"` (typical for embedded targets)\n\n### [`target_family`](#target_family)\n\nKey-value option providing a more generic description of a target, such as the family of the operating systems or architectures that the target generally falls into. Any number of `target_family` key-value pairs can be set.\n\nExample values:\n\n-   `\"unix\"`\n-   `\"windows\"`\n-   `\"wasm\"`\n\n### [`unix` and `windows`](#unix-and-windows)\n\n`unix` is set if `target_family = \"unix\"` is set and `windows` is set if `target_family = \"windows\"` is set.\n\n### [`target_env`](#target_env)\n\nKey-value option set with further disambiguating information about the target platform with information about the ABI or `libc` used. For historical reasons, this value is only defined as not the empty-string when actually needed for disambiguation. Thus, for example, on many GNU platforms, this value will be empty. This value is similar to the fourth element of the platform's target triple. One difference is that embedded ABIs such as `gnueabihf` will simply define `target_env` as `\"gnu\"`.\n\nExample values:\n\n-   `\"\"`\n-   `\"gnu\"`\n-   `\"msvc\"`\n-   `\"musl\"`\n-   `\"sgx\"`\n\n### [`target_abi`](#target_abi)\n\nKey-value option set to further disambiguate the `target_env` with information about the target ABI. For historical reasons, this value is only defined as not the empty-string when actually needed for disambiguation. Thus, for example, on many GNU platforms, this value will be empty.\n\nExample values:\n\n-   `\"\"`\n-   `\"llvm\"`\n-   `\"eabihf\"`\n-   `\"abi64\"`\n-   `\"sim\"`\n-   `\"macabi\"`\n\n### [`target_endian`](#target_endian)\n\nKey-value option set once with either a value of \"little\" or \"big\" depending on the endianness of the target's CPU.\n\n### [`target_pointer_width`](#target_pointer_width)\n\nKey-value option set once with the target's pointer width in bits.\n\nExample values:\n\n-   `\"16\"`\n-   `\"32\"`\n-   `\"64\"`\n\n### [`target_vendor`](#target_vendor)\n\nKey-value option set once with the vendor of the target.\n\nExample values:\n\n-   `\"apple\"`\n-   `\"fortanix\"`\n-   `\"pc\"`\n-   `\"unknown\"`\n\n### [`target_has_atomic`](#target_has_atomic)\n\nKey-value option set for each bit width that the target supports atomic loads, stores, and compare-and-swap operations.\n\nWhen this cfg is present, all of the stable [`core::sync::atomic`](../core/sync/atomic/index.html) APIs are available for the relevant atomic width.\n\nPossible values:\n\n-   `\"8\"`\n-   `\"16\"`\n-   `\"32\"`\n-   `\"64\"`\n-   `\"128\"`\n-   `\"ptr\"`\n\n### [`test`](#test)\n\nEnabled when compiling the test harness. Done with `rustc` by using the [`--test`](about:blank/rustc/command-line-arguments.html#--test-build-a-test-harness) flag. See [Testing](attributes/testing.html) for more on testing support.\n\n### [`debug_assertions`](#debug_assertions)\n\nEnabled by default when compiling without optimizations. This can be used to enable extra debugging code in development but not in production. For example, it controls the behavior of the standard library's [`debug_assert!`](../std/macro.debug_assert.html) macro.\n\n### [`proc_macro`](#proc_macro)\n\nSet when the crate being compiled is being compiled with the `proc_macro` [crate type](linkage.html).\n\n### [`panic`](#panic)\n\nKey-value option set depending on the panic strategy. Note that more values may be added in the future.\n\nExample values:\n\n-   `\"abort\"`\n-   `\"unwind\"`\n\n## [Forms of conditional compilation](#forms-of-conditional-compilation)\n\n### [The `cfg` attribute](#the-cfg-attribute)\n\n> **Syntax**  \n> _CfgAttrAttribute_ :  \n>    `cfg` `(` _ConfigurationPredicate_ `)`\n\nThe `cfg` [attribute](attributes.html) conditionally includes the thing it is attached to based on a configuration predicate.\n\nIt is written as `cfg`, `(`, a configuration predicate, and finally `)`.\n\nIf the predicate is true, the thing is rewritten to not have the `cfg` attribute on it. If the predicate is false, the thing is removed from the source code.\n\nWhen a crate-level `cfg` has a false predicate, the behavior is slightly different: any crate attributes preceding the `cfg` are kept, and any crate attributes following the `cfg` are removed. This allows `#![no_std]` and `#![no_core]` crates to avoid linking `std`/`core` even if a `#![cfg(...)]` has removed the entire crate.\n\nSome examples on functions:\n\n```rust\n#![allow(unused)]\nfn main() {\n// The function is only included in the build when compiling for macOS\n#[cfg(target_os = \"macos\")]\nfn macos_only() {\n  // ...\n}\n\n// This function is only included when either foo or bar is defined\n#[cfg(any(foo, bar))]\nfn needs_foo_or_bar() {\n  // ...\n}\n\n// This function is only included when compiling for a unixish OS with a 32-bit\n// architecture\n#[cfg(all(unix, target_pointer_width = \"32\"))]\nfn on_32bit_unix() {\n  // ...\n}\n\n// This function is only included when foo is not defined\n#[cfg(not(foo))]\nfn needs_not_foo() {\n  // ...\n}\n\n// This function is only included when the panic strategy is set to unwind\n#[cfg(panic = \"unwind\")]\nfn when_unwinding() {\n  // ...\n}\n\n}\n```\n\nThe `cfg` attribute is allowed anywhere attributes are allowed.\n\n### [The `cfg_attr` attribute](#the-cfg_attr-attribute)\n\n> **Syntax**  \n> _CfgAttrAttribute_ :  \n>    `cfg_attr` `(` _ConfigurationPredicate_ `,` _CfgAttrs_? `)`\n> \n> _CfgAttrs_ :  \n>    [_Attr_](attributes.html) (`,` [_Attr_](attributes.html))\\* `,`?\n\nThe `cfg_attr` [attribute](attributes.html) conditionally includes [attributes](attributes.html) based on a configuration predicate.\n\nWhen the configuration predicate is true, this attribute expands out to the attributes listed after the predicate. For example, the following module will either be found at `linux.rs` or `windows.rs` based on the target.\n\n```rust\n#[cfg_attr(target_os = \"linux\", path = \"linux.rs\")]\n#[cfg_attr(windows, path = \"windows.rs\")]\nmod os;\n```\n\nZero, one, or more attributes may be listed. Multiple attributes will each be expanded into separate attributes. For example:\n\n```rust\n#[cfg_attr(feature = \"magic\", sparkles, crackles)]\nfn bewitched() {}\n\n// When the `magic` feature flag is enabled, the above will expand to:\n#[sparkles]\n#[crackles]\nfn bewitched() {}\n```\n\n> **Note**: The `cfg_attr` can expand to another `cfg_attr`. For example, `#[cfg_attr(target_os = \"linux\", cfg_attr(feature = \"multithreaded\", some_other_attribute))]` is valid. This example would be equivalent to `#[cfg_attr(all(target_os = \"linux\", feature =\"multithreaded\"), some_other_attribute)]`.\n\nThe `cfg_attr` attribute is allowed anywhere attributes are allowed.\n\n### [The `cfg` macro](#the-cfg-macro)\n\nThe built-in `cfg` macro takes in a single configuration predicate and evaluates to the `true` literal when the predicate is true and the `false` literal when it is false.\n\nFor example:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet machine_kind = if cfg!(unix) {\n  \"unix\"\n} else if cfg!(windows) {\n  \"windows\"\n} else {\n  \"unknown\"\n};\n\nprintln!(\"I'm running on a {} machine!\", machine_kind);\n}\n```\n\n## [Items](#items)\n\n> **Syntax:**  \n> _Item_:  \n>    [_OuterAttribute_](attributes.html)\\*  \n>       _VisItem_  \n>    | _MacroItem_\n> \n> _VisItem_:  \n>    [_Visibility_](visibility-and-privacy.html)?  \n>    (  \n>          [_Module_](items/modules.html)  \n>       | [_ExternCrate_](items/extern-crates.html)  \n>       | [_UseDeclaration_](items/use-declarations.html)  \n>       | [_Function_](items/functions.html)  \n>       | [_TypeAlias_](items/type-aliases.html)  \n>       | [_Struct_](items/structs.html)  \n>       | [_Enumeration_](items/enumerations.html)  \n>       | [_Union_](items/unions.html)  \n>       | [_ConstantItem_](items/constant-items.html)  \n>       | [_StaticItem_](items/static-items.html)  \n>       | [_Trait_](items/traits.html)  \n>       | [_Implementation_](items/implementations.html)  \n>       | [_ExternBlock_](items/external-blocks.html)  \n>    )\n> \n> _MacroItem_:  \n>       [_MacroInvocationSemi_](about:blank/macros.html#macro-invocation)  \n>    | [_MacroRulesDefinition_](macros-by-example.html)\n\nAn _item_ is a component of a crate. Items are organized within a crate by a nested set of [modules](items/modules.html). Every crate has a single \"outermost\" anonymous module; all further items within the crate have [paths](paths.html) within the module tree of the crate.\n\nItems are entirely determined at compile-time, generally remain fixed during execution, and may reside in read-only memory.\n\nThere are several kinds of items:\n\n-   [modules](items/modules.html)\n-   [`extern crate` declarations](items/extern-crates.html)\n-   [`use` declarations](items/use-declarations.html)\n-   [function definitions](items/functions.html)\n-   [type definitions](items/type-aliases.html)\n-   [struct definitions](items/structs.html)\n-   [enumeration definitions](items/enumerations.html)\n-   [union definitions](items/unions.html)\n-   [constant items](items/constant-items.html)\n-   [static items](items/static-items.html)\n-   [trait definitions](items/traits.html)\n-   [implementations](items/implementations.html)\n-   [`extern` blocks](items/external-blocks.html)\n\nItems may be declared in the [root of the crate](crates-and-source-files.html), a [module](items/modules.html), or a [block expression](expressions/block-expr.html). A subset of items, called [associated items](items/associated-items.html), may be declared in [traits](items/traits.html) and [implementations](items/implementations.html). A subset of items, called external items, may be declared in [`extern` blocks](items/external-blocks.html).\n\nItems may be defined in any order, with the exception of [`macro_rules`](macros-by-example.html) which has its own scoping behavior. [Name resolution](names/name-resolution.html) of item names allows items to be defined before or after where the item is referred to in the module or block.\n\nSee [item scopes](about:blank/names/scopes.html#item-scopes) for information on the scoping rules of items.\n\n## [Modules](#modules)\n\n> **Syntax:**  \n> _Module_ :  \n>       `unsafe`? `mod` [IDENTIFIER](items/../identifiers.html) `;`  \n>    | `unsafe`? `mod` [IDENTIFIER](items/../identifiers.html) `{`  \n>         [_InnerAttribute_](items/../attributes.html)\\*  \n>         [_Item_](items/../items.html)\\*  \n>       `}`\n\nA module is a container for zero or more [items](items/../items.html).\n\nA _module item_ is a module, surrounded in braces, named, and prefixed with the keyword `mod`. A module item introduces a new, named module into the tree of modules making up a crate. Modules can nest arbitrarily.\n\nAn example of a module:\n\n```rust\n#![allow(unused)]\nfn main() {\nmod math {\n    type Complex = (f64, f64);\n    fn sin(f: f64) -> f64 {\n        /* ... */\n      unimplemented!();\n    }\n    fn cos(f: f64) -> f64 {\n        /* ... */\n      unimplemented!();\n    }\n    fn tan(f: f64) -> f64 {\n        /* ... */\n      unimplemented!();\n    }\n}\n}\n```\n\nModules and types share the same namespace. Declaring a named type with the same name as a module in scope is forbidden: that is, a type definition, trait, struct, enumeration, union, type parameter or crate can't shadow the name of a module in scope, or vice versa. Items brought into scope with `use` also have this restriction.\n\nThe `unsafe` keyword is syntactically allowed to appear before the `mod` keyword, but it is rejected at a semantic level. This allows macros to consume the syntax and make use of the `unsafe` keyword, before removing it from the token stream.\n\n## [Module Source Filenames](#module-source-filenames)\n\nA module without a body is loaded from an external file. When the module does not have a `path` attribute, the path to the file mirrors the logical [module path](items/../paths.html). Ancestor module path components are directories, and the module's contents are in a file with the name of the module plus the `.rs` extension. For example, the following module structure can have this corresponding filesystem structure:\n\n| Module Path | Filesystem Path | File Contents |\n| --- | --- | --- |\n| `crate` | `lib.rs` | `mod util;` |\n| `crate::util` | `util.rs` | `mod config;` |\n| `crate::util::config` | `util/config.rs` |  |\n\nModule filenames may also be the name of the module as a directory with the contents in a file named `mod.rs` within that directory. The above example can alternately be expressed with `crate::util`'s contents in a file named `util/mod.rs`. It is not allowed to have both `util.rs` and `util/mod.rs`.\n\n> **Note**: Prior to `rustc` 1.30, using `mod.rs` files was the way to load a module with nested children. It is encouraged to use the new naming convention as it is more consistent, and avoids having many files named `mod.rs` within a project.\n\n### [The `path` attribute](#the-path-attribute)\n\nThe directories and files used for loading external file modules can be influenced with the `path` attribute.\n\nFor `path` attributes on modules not inside inline module blocks, the file path is relative to the directory the source file is located. For example, the following code snippet would use the paths shown based on where it is located:\n\n```rust\n#[path = \"foo.rs\"]\nmod c;\n```\n\n| Source File | `c`'s File Location | `c`'s Module Path |\n| --- | --- | --- |\n| `src/a/b.rs` | `src/a/foo.rs` | `crate::a::b::c` |\n| `src/a/mod.rs` | `src/a/foo.rs` | `crate::a::c` |\n\nFor `path` attributes inside inline module blocks, the relative location of the file path depends on the kind of source file the `path` attribute is located in. \"mod-rs\" source files are root modules (such as `lib.rs` or `main.rs`) and modules with files named `mod.rs`. \"non-mod-rs\" source files are all other module files. Paths for `path` attributes inside inline module blocks in a mod-rs file are relative to the directory of the mod-rs file including the inline module components as directories. For non-mod-rs files, it is the same except the path starts with a directory with the name of the non-mod-rs module. For example, the following code snippet would use the paths shown based on where it is located:\n\n```rust\nmod inline {\n    #[path = \"other.rs\"]\n    mod inner;\n}\n```\n\n| Source File | `inner`'s File Location | `inner`'s Module Path |\n| --- | --- | --- |\n| `src/a/b.rs` | `src/a/b/inline/other.rs` | `crate::a::b::inline::inner` |\n| `src/a/mod.rs` | `src/a/inline/other.rs` | `crate::a::inline::inner` |\n\nAn example of combining the above rules of `path` attributes on inline modules and nested modules within (applies to both mod-rs and non-mod-rs files):\n\n```rust\n#[path = \"thread_files\"]\nmod thread {\n    // Load the `local_data` module from `thread_files/tls.rs` relative to\n    // this source file's directory.\n    #[path = \"tls.rs\"]\n    mod local_data;\n}\n```\n\n## [Attributes on Modules](#attributes-on-modules)\n\nModules, like all items, accept outer attributes. They also accept inner attributes: either after `{` for a module with a body, or at the beginning of the source file, after the optional BOM and shebang.\n\nThe built-in attributes that have meaning on a module are [`cfg`](items/../conditional-compilation.html), [`deprecated`](about:blank/attributes/diagnostics.html#the-deprecated-attribute), [`doc`](items/../../rustdoc/the-doc-attribute.html), [the lint check attributes](about:blank/attributes/diagnostics.html#lint-check-attributes), [`path`](about:blank/items/modules.html#the-path-attribute), and [`no_implicit_prelude`](about:blank/names/preludes.html#the-no_implicit_prelude-attribute). Modules also accept macro attributes.\n\n## [Extern crate declarations](#extern-crate-declarations)\n\n> **Syntax:**  \n> _ExternCrate_ :  \n>    `extern` `crate` _CrateRef_ _AsClause_? `;`\n> \n> _CrateRef_ :  \n>    [IDENTIFIER](items/../identifiers.html) | `self`\n> \n> _AsClause_ :  \n>    `as` ( [IDENTIFIER](items/../identifiers.html) | `_` )\n\nAn _`extern crate` declaration_ specifies a dependency on an external crate. The external crate is then bound into the declaring scope as the [identifier](items/../identifiers.html) provided in the `extern crate` declaration. Additionally, if the `extern crate` appears in the crate root, then the crate name is also added to the [extern prelude](about:blank/names/preludes.html#extern-prelude), making it automatically in scope in all modules. The `as` clause can be used to bind the imported crate to a different name.\n\nThe external crate is resolved to a specific `soname` at compile time, and a runtime linkage requirement to that `soname` is passed to the linker for loading at runtime. The `soname` is resolved at compile time by scanning the compiler's library path and matching the optional `crate_name` provided against the [`crate_name` attributes](about:blank/crates-and-source-files.html#the-crate_name-attribute) that were declared on the external crate when it was compiled. If no `crate_name` is provided, a default `name` attribute is assumed, equal to the [identifier](items/../identifiers.html) given in the `extern crate` declaration.\n\nThe `self` crate may be imported which creates a binding to the current crate. In this case the `as` clause must be used to specify the name to bind it to.\n\nThree examples of `extern crate` declarations:\n\n```rust\nextern crate pcre;\n\nextern crate std; // equivalent to: extern crate std as std;\n\nextern crate std as ruststd; // linking to 'std' under another name\n```\n\nWhen naming Rust crates, hyphens are disallowed. However, Cargo packages may make use of them. In such case, when `Cargo.toml` doesn't specify a crate name, Cargo will transparently replace `-` with `_` (Refer to [RFC 940](https://github.com/rust-lang/rfcs/blob/master/text/0940-hyphens-considered-harmful.md) for more details).\n\nHere is an example:\n\n```rust\n// Importing the Cargo package hello-world\nextern crate hello_world; // hyphen replaced with an underscore\n```\n\n## [Extern Prelude](#extern-prelude)\n\nThis section has been moved to [Preludes — Extern Prelude](about:blank/names/preludes.html#extern-prelude).\n\n## [Underscore Imports](#underscore-imports)\n\nAn external crate dependency can be declared without binding its name in scope by using an underscore with the form `extern crate foo as _`. This may be useful for crates that only need to be linked, but are never referenced, and will avoid being reported as unused.\n\nThe [`macro_use` attribute](about:blank/macros-by-example.html#the-macro_use-attribute) works as usual and imports the macro names into the [`macro_use` prelude](about:blank/names/preludes.html#macro_use-prelude).\n\n## [The `no_link` attribute](#the-no_link-attribute)\n\nThe _`no_link` attribute_ may be specified on an `extern crate` item to prevent linking the crate into the output. This is commonly used to load a crate to access only its macros.\n\n## [Use declarations](#use-declarations)\n\n> **Syntax:**  \n> _UseDeclaration_ :  \n>    `use` _UseTree_ `;`\n> \n> _UseTree_ :  \n>       ([_SimplePath_](about:blank/paths.html#simple-paths)? `::`)? `*`  \n>    | ([_SimplePath_](about:blank/paths.html#simple-paths)? `::`)? `{` (_UseTree_ ( `,` _UseTree_ )\\* `,`?)? `}`  \n>    | [_SimplePath_](about:blank/paths.html#simple-paths) ( `as` ( [IDENTIFIER](items/../identifiers.html) | `_` ) )?\n\nA _use declaration_ creates one or more local name bindings synonymous with some other [path](items/../paths.html). Usually a `use` declaration is used to shorten the path required to refer to a module item. These declarations may appear in [modules](items/modules.html) and [blocks](items/../expressions/block-expr.html), usually at the top.\n\nUse declarations support a number of convenient shortcuts:\n\n-   Simultaneously binding a list of paths with a common prefix, using the glob-like brace syntax `use a::b::{c, d, e::f, g::h::i};`\n-   Simultaneously binding a list of paths with a common prefix and their common parent module, using the `self` keyword, such as `use a::b::{self, c, d::e};`\n-   Rebinding the target name as a new local name, using the syntax `use p::q::r as x;`. This can also be used with the last two features: `use a::b::{self as ab, c as abc}`.\n-   Binding all paths matching a given prefix, using the asterisk wildcard syntax `use a::b::*;`.\n-   Nesting groups of the previous features multiple times, such as `use a::b::{self as ab, c, d::{*, e::f}};`\n\nAn example of `use` declarations:\n\n```rust\nuse std::collections::hash_map::{self, HashMap};\n\nfn foo<T>(_: T){}\nfn bar(map1: HashMap<String, usize>, map2: hash_map::HashMap<String, usize>){}\n\nfn main() {\n    // use declarations can also exist inside of functions\n    use std::option::Option::{Some, None};\n\n    // Equivalent to 'foo(vec![std::option::Option::Some(1.0f64),\n    // std::option::Option::None]);'\n    foo(vec![Some(1.0f64), None]);\n\n    // Both `hash_map` and `HashMap` are in scope.\n    let map1 = HashMap::new();\n    let map2 = hash_map::HashMap::new();\n    bar(map1, map2);\n}\n```\n\n## [`use` Visibility](#use-visibility)\n\nLike items, `use` declarations are private to the containing module, by default. Also like items, a `use` declaration can be public, if qualified by the `pub` keyword. Such a `use` declaration serves to _re-export_ a name. A public `use` declaration can therefore _redirect_ some public name to a different target definition: even a definition with a private canonical path, inside a different module. If a sequence of such redirections form a cycle or cannot be resolved unambiguously, they represent a compile-time error.\n\nAn example of re-exporting:\n\n```rust\nmod quux {\n    pub use self::foo::{bar, baz};\n    pub mod foo {\n        pub fn bar() {}\n        pub fn baz() {}\n    }\n}\n\nfn main() {\n    quux::bar();\n    quux::baz();\n}\n```\n\nIn this example, the module `quux` re-exports two public names defined in `foo`.\n\n## [`use` Paths](#use-paths)\n\n> **Note**: This section is incomplete.\n\nSome examples of what will and will not work for `use` items:\n\n```rust\n#![allow(unused_imports)]\nuse std::path::{self, Path, PathBuf};  // good: std is a crate name\nuse crate::foo::baz::foobaz;    // good: foo is at the root of the crate\n\nmod foo {\n\n    pub mod example {\n        pub mod iter {}\n    }\n\n    use crate::foo::example::iter; // good: foo is at crate root\n//  use example::iter;      // bad in 2015 edition: relative paths are not allowed without `self`; good in 2018 edition\n    use self::baz::foobaz;  // good: self refers to module 'foo'\n    use crate::foo::bar::foobar;   // good: foo is at crate root\n\n    pub mod bar {\n        pub fn foobar() { }\n    }\n\n    pub mod baz {\n        use super::bar::foobar; // good: super refers to module 'foo'\n        pub fn foobaz() { }\n    }\n}\n\nfn main() {}\n```\n\n> **Edition Differences**: In the 2015 edition, `use` paths also allow accessing items in the crate root. Using the example above, the following `use` paths work in 2015 but not 2018:\n> \n> ```rust\n> mod foo {\n>     pub mod example { pub mod iter {} }\n>     pub mod baz { pub fn foobaz() {} }\n> }\n> use foo::example::iter;\n> use ::foo::baz::foobaz;\n> fn main() {}\n> ```\n> \n> The 2015 edition does not allow use declarations to reference the [extern prelude](about:blank/names/preludes.html#extern-prelude). Thus [`extern crate`](items/extern-crates.html) declarations are still required in 2015 to reference an external crate in a use declaration. Beginning with the 2018 edition, use declarations can specify an external crate dependency the same way `extern crate` can.\n> \n> In the 2018 edition, if an in-scope item has the same name as an external crate, then `use` of that crate name requires a leading `::` to unambiguously select the crate name. This is to retain compatibility with potential future changes.\n> \n> ```rust\n> // use std::fs; // Error, this is ambiguous.\n> use ::std::fs;  // Imports from the `std` crate, not the module below.\n> use self::std::fs as self_fs;  // Imports the module below.\n> \n> mod std {\n>     pub mod fs {}\n> }\n> fn main() {}\n> ```\n\n## [Underscore Imports](#underscore-imports-1)\n\nItems can be imported without binding to a name by using an underscore with the form `use path as _`. This is particularly useful to import a trait so that its methods may be used without importing the trait's symbol, for example if the trait's symbol may conflict with another symbol. Another example is to link an external crate without importing its name.\n\nAsterisk glob imports will import items imported with `_` in their unnameable form.\n\n```rust\nmod foo {\n    pub trait Zoo {\n        fn zoo(&self) {}\n    }\n\n    impl<T> Zoo for T {}\n}\n\nuse self::foo::Zoo as _;\nstruct Zoo;  // Underscore import avoids name conflict with this item.\n\nfn main() {\n    let z = Zoo;\n    z.zoo();\n}\n```\n\nThe unique, unnameable symbols are created after macro expansion so that macros may safely emit multiple references to `_` imports. For example, the following should not produce an error:\n\n```rust\n#![allow(unused)]\nfn main() {\nmacro_rules! m {\n    ($item: item) => { $item $item }\n}\n\nm!(use std as _;);\n// This expands to:\n// use std as _;\n// use std as _;\n}\n```\n\n## [Functions](#functions)\n\n> **Syntax**  \n> _Function_ :  \n>    _FunctionQualifiers_ `fn` [IDENTIFIER](items/../identifiers.html) [_GenericParams_](items/generics.html)?  \n>       `(` _FunctionParameters_? `)`  \n>       _FunctionReturnType_? [_WhereClause_](about:blank/items/generics.html#where-clauses)?  \n>       ( [_BlockExpression_](items/../expressions/block-expr.html) | `;` )\n> \n> _FunctionQualifiers_ :  \n>    `const`? `async`[1](#async-edition)? `unsafe`? (`extern` _Abi_?)?\n> \n> _Abi_ :  \n>    [STRING\\_LITERAL](about:blank/tokens.html#string-literals) | [RAW\\_STRING\\_LITERAL](about:blank/tokens.html#raw-string-literals)\n> \n> _FunctionParameters_ :  \n>       _SelfParam_ `,`?  \n>    | (_SelfParam_ `,`)? _FunctionParam_ (`,` _FunctionParam_)\\* `,`?\n> \n> _SelfParam_ :  \n>    [_OuterAttribute_](items/../attributes.html)\\* ( _ShorthandSelf_ | _TypedSelf_ )\n> \n> _ShorthandSelf_ :  \n>    (`&` | `&` [_Lifetime_](items/../trait-bounds.html))? `mut`? `self`\n> \n> _TypedSelf_ :  \n>    `mut`? `self` `:` [_Type_](about:blank/types.html#type-expressions)\n> \n> _FunctionParam_ :  \n>    [_OuterAttribute_](items/../attributes.html)\\* ( _FunctionParamPattern_ | `...` | [_Type_](about:blank/types.html#type-expressions) [2](#fn-param-2015) )\n> \n> _FunctionParamPattern_ :  \n>    [_PatternNoTopAlt_](items/../patterns.html) `:` ( [_Type_](about:blank/types.html#type-expressions) | `...` )\n> \n> _FunctionReturnType_ :  \n>    `->` [_Type_](about:blank/types.html#type-expressions)\n\nA _function_ consists of a [block](items/../expressions/block-expr.html), along with a name, a set of parameters, and an output type. Other than a name, all these are optional. Functions are declared with the keyword `fn`. Functions may declare a set of _input_ [_variables_](items/../variables.html) as parameters, through which the caller passes arguments into the function, and the _output_ [_type_](about:blank/types.html#type-expressions) of the value the function will return to its caller on completion. If the output type is not explicitly stated, it is the [unit type](items/../types/tuple.html).\n\nWhen referred to, a _function_ yields a first-class _value_ of the corresponding zero-sized [_function item type_](items/../types/function-item.html), which when called evaluates to a direct call to the function.\n\nFor example, this is a simple function:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn answer_to_life_the_universe_and_everything() -> i32 {\n    return 42;\n}\n}\n```\n\n## [Function parameters](#function-parameters)\n\nFunction parameters are irrefutable [patterns](items/../patterns.html), so any pattern that is valid in an else-less `let` binding is also valid as a parameter:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn first((value, _): (i32, i32)) -> i32 { value }\n}\n```\n\nIf the first parameter is a _SelfParam_, this indicates that the function is a [method](about:blank/items/associated-items.html#methods). Functions with a self parameter may only appear as an [associated function](about:blank/items/associated-items.html#associated-functions-and-methods) in a [trait](items/traits.html) or [implementation](items/implementations.html).\n\nA parameter with the `...` token indicates a [variadic function](about:blank/items/external-blocks.html#variadic-functions), and may only be used as the last parameter of an [external block](items/external-blocks.html) function. The variadic parameter may have an optional identifier, such as `args: ...`.\n\n## [Function body](#function-body)\n\nThe block of a function is conceptually wrapped in a block that binds the argument patterns and then `return`s the value of the function's block. This means that the tail expression of the block, if evaluated, ends up being returned to the caller. As usual, an explicit return expression within the body of the function will short-cut that implicit return, if reached.\n\nFor example, the function above behaves as if it was written as:\n\n```rust\n// argument_0 is the actual first argument passed from the caller\nlet (value, _) = argument_0;\nreturn {\n    value\n};\n```\n\nFunctions without a body block are terminated with a semicolon. This form may only appear in a [trait](items/traits.html) or [external block](items/external-blocks.html).\n\n## [Generic functions](#generic-functions)\n\nA _generic function_ allows one or more _parameterized types_ to appear in its signature. Each type parameter must be explicitly declared in an angle-bracket-enclosed and comma-separated list, following the function name.\n\n```rust\n#![allow(unused)]\nfn main() {\n// foo is generic over A and B\n\nfn foo<A, B>(x: A, y: B) {\n}\n}\n```\n\nInside the function signature and body, the name of the type parameter can be used as a type name. [Trait](items/traits.html) bounds can be specified for type parameters to allow methods with that trait to be called on values of that type. This is specified using the `where` syntax:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fmt::Debug;\nfn foo<T>(x: T) where T: Debug {\n}\n}\n```\n\nWhen a generic function is referenced, its type is instantiated based on the context of the reference. For example, calling the `foo` function here:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fmt::Debug;\n\nfn foo<T>(x: &[T]) where T: Debug {\n    // details elided\n}\n\nfoo(&[1, 2]);\n}\n```\n\nwill instantiate type parameter `T` with `i32`.\n\nThe type parameters can also be explicitly supplied in a trailing [path](items/../paths.html) component after the function name. This might be necessary if there is not sufficient context to determine the type parameters. For example, `mem::size_of::<u32>() == 4`.\n\n## [Extern function qualifier](#extern-function-qualifier)\n\nThe `extern` function qualifier allows providing function _definitions_ that can be called with a particular ABI:\n\n```rust\nextern \"ABI\" fn foo() { /* ... */ }\n```\n\nThese are often used in combination with [external block](items/external-blocks.html) items which provide function _declarations_ that can be used to call functions without providing their _definition_:\n\n```rust\nextern \"ABI\" {\n  fn foo(); /* no body */\n}\nunsafe { foo() }\n```\n\nWhen `\"extern\" Abi?*` is omitted from `FunctionQualifiers` in function items, the ABI `\"Rust\"` is assigned. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn foo() {}\n}\n```\n\nis equivalent to:\n\n```rust\n#![allow(unused)]\nfn main() {\nextern \"Rust\" fn foo() {}\n}\n```\n\nFunctions can be called by foreign code, and using an ABI that differs from Rust allows, for example, to provide functions that can be called from other programming languages like C:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Declares a function with the \"C\" ABI\nextern \"C\" fn new_i32() -> i32 { 0 }\n\n// Declares a function with the \"stdcall\" ABI\n#[cfg(target_arch = \"x86_64\")]\nextern \"stdcall\" fn new_i32_stdcall() -> i32 { 0 }\n}\n```\n\nJust as with [external block](items/external-blocks.html), when the `extern` keyword is used and the `\"ABI\"` is omitted, the ABI used defaults to `\"C\"`. That is, this:\n\n```rust\n#![allow(unused)]\nfn main() {\nextern fn new_i32() -> i32 { 0 }\nlet fptr: extern fn() -> i32 = new_i32;\n}\n```\n\nis equivalent to:\n\n```rust\n#![allow(unused)]\nfn main() {\nextern \"C\" fn new_i32() -> i32 { 0 }\nlet fptr: extern \"C\" fn() -> i32 = new_i32;\n}\n```\n\nFunctions with an ABI that differs from `\"Rust\"` do not support unwinding in the exact same way that Rust does. Therefore, unwinding past the end of functions with such ABIs causes the process to abort.\n\n> **Note**: The LLVM backend of the `rustc` implementation aborts the process by executing an illegal instruction.\n\n## [Const functions](#const-functions)\n\nFunctions qualified with the `const` keyword are [const functions](about:blank/const_eval.html#const-functions), as are [tuple struct](items/structs.html) and [tuple variant](items/enumerations.html) constructors. _Const functions_ can be called from within [const contexts](about:blank/const_eval.html#const-context).\n\nConst functions may use the [`extern`](about:blank/items/functions.html#extern-function-qualifier) function qualifier, but only with the `\"Rust\"` and `\"C\"` ABIs.\n\nConst functions are not allowed to be [async](about:blank/items/functions.html#async-functions).\n\n## [Async functions](#async-functions)\n\nFunctions may be qualified as async, and this can also be combined with the `unsafe` qualifier:\n\n```rust\n#![allow(unused)]\nfn main() {\nasync fn regular_example() { }\nasync unsafe fn unsafe_example() { }\n}\n```\n\nAsync functions do no work when called: instead, they capture their arguments into a future. When polled, that future will execute the function's body.\n\nAn async function is roughly equivalent to a function that returns [`impl Future`](items/../types/impl-trait.html) and with an [`async move` block](about:blank/expressions/block-expr.html#async-blocks) as its body:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Source\nasync fn example(x: &str) -> usize {\n    x.len()\n}\n}\n```\n\nis roughly equivalent to:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::future::Future;\n// Desugared\nfn example<'a>(x: &'a str) -> impl Future<Output = usize> + 'a {\n    async move { x.len() }\n}\n}\n```\n\nThe actual desugaring is more complex:\n\n-   The return type in the desugaring is assumed to capture all lifetime parameters from the `async fn` declaration. This can be seen in the desugared example above, which explicitly outlives, and hence captures, `'a`.\n-   The [`async move` block](about:blank/expressions/block-expr.html#async-blocks) in the body captures all function parameters, including those that are unused or bound to a `_` pattern. This ensures that function parameters are dropped in the same order as they would be if the function were not async, except that the drop occurs when the returned future has been fully awaited.\n\nFor more information on the effect of async, see [`async` blocks](about:blank/expressions/block-expr.html#async-blocks).\n\n> **Edition differences**: Async functions are only available beginning with Rust 2018.\n\n### [Combining `async` and `unsafe`](#combining-async-and-unsafe)\n\nIt is legal to declare a function that is both async and unsafe. The resulting function is unsafe to call and (like any async function) returns a future. This future is just an ordinary future and thus an `unsafe` context is not required to \"await\" it:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Returns a future that, when awaited, dereferences `x`.\n//\n// Soundness condition: `x` must be safe to dereference until\n// the resulting future is complete.\nasync unsafe fn unsafe_example(x: *const i32) -> i32 {\n  *x\n}\n\nasync fn safe_example() {\n    // An `unsafe` block is required to invoke the function initially:\n    let p = 22;\n    let future = unsafe { unsafe_example(&p) };\n\n    // But no `unsafe` block required here. This will\n    // read the value of `p`:\n    let q = future.await;\n}\n}\n```\n\nNote that this behavior is a consequence of the desugaring to a function that returns an `impl Future` -- in this case, the function we desugar to is an `unsafe` function, but the return value remains the same.\n\nUnsafe is used on an async function in precisely the same way that it is used on other functions: it indicates that the function imposes some additional obligations on its caller to ensure soundness. As in any other unsafe function, these conditions may extend beyond the initial call itself -- in the snippet above, for example, the `unsafe_example` function took a pointer `x` as argument, and then (when awaited) dereferenced that pointer. This implies that `x` would have to be valid until the future is finished executing, and it is the caller's responsibility to ensure that.\n\n## [Attributes on functions](#attributes-on-functions)\n\n[Outer attributes](items/../attributes.html) are allowed on functions. [Inner attributes](items/../attributes.html) are allowed directly after the `{` inside its [block](items/../expressions/block-expr.html).\n\nThis example shows an inner attribute on a function. The function is documented with just the word \"Example\".\n\n```rust\n#![allow(unused)]\nfn main() {\nfn documented() {\n    #![doc = \"Example\"]\n}\n}\n```\n\n> Note: Except for lints, it is idiomatic to only use outer attributes on function items.\n\nThe attributes that have meaning on a function are [`cfg`](about:blank/conditional-compilation.html#the-cfg-attribute), [`cfg_attr`](about:blank/conditional-compilation.html#the-cfg_attr-attribute), [`deprecated`](about:blank/attributes/diagnostics.html#the-deprecated-attribute), [`doc`](items/../../rustdoc/the-doc-attribute.html), [`export_name`](about:blank/abi.html#the-export_name-attribute), [`link_section`](about:blank/abi.html#the-link_section-attribute), [`no_mangle`](about:blank/abi.html#the-no_mangle-attribute), [the lint check attributes](about:blank/attributes/diagnostics.html#lint-check-attributes), [`must_use`](about:blank/attributes/diagnostics.html#the-must_use-attribute), [the procedural macro attributes](items/../procedural-macros.html), [the testing attributes](items/../attributes/testing.html), and [the optimization hint attributes](about:blank/attributes/codegen.html#optimization-hints). Functions also accept attributes macros.\n\n## [Attributes on function parameters](#attributes-on-function-parameters)\n\n[Outer attributes](items/../attributes.html) are allowed on function parameters and the permitted [built-in attributes](about:blank/attributes.html#built-in-attributes-index) are restricted to `cfg`, `cfg_attr`, `allow`, `warn`, `deny`, and `forbid`.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn len(\n    #[cfg(windows)] slice: &[u16],\n    #[cfg(not(windows))] slice: &[u8],\n) -> usize {\n    slice.len()\n}\n}\n```\n\nInert helper attributes used by procedural macro attributes applied to items are also allowed but be careful to not include these inert attributes in your final `TokenStream`.\n\nFor example, the following code defines an inert `some_inert_attribute` attribute that is not formally defined anywhere and the `some_proc_macro_attribute` procedural macro is responsible for detecting its presence and removing it from the output token stream.\n\n```rust\n#[some_proc_macro_attribute]\nfn foo_oof(#[some_inert_attribute] arg: u8) {\n}\n```\n\n## [Type aliases](#type-aliases)\n\n> **Syntax**  \n> _TypeAlias_ :  \n>    `type` [IDENTIFIER](items/../identifiers.html) [_GenericParams_](items/generics.html)? ( `:` [_TypeParamBounds_](items/../trait-bounds.html) )? [_WhereClause_](about:blank/items/generics.html#where-clauses)? ( `=` [_Type_](about:blank/types.html#type-expressions) [_WhereClause_](about:blank/items/generics.html#where-clauses)?)? `;`\n\nA _type alias_ defines a new name for an existing [type](items/../types.html). Type aliases are declared with the keyword `type`. Every value has a single, specific type, but may implement several different traits, or be compatible with several different type constraints.\n\nFor example, the following defines the type `Point` as a synonym for the type `(u8, u8)`, the type of pairs of unsigned 8 bit integers:\n\n```rust\n#![allow(unused)]\nfn main() {\ntype Point = (u8, u8);\nlet p: Point = (41, 68);\n}\n```\n\nA type alias to a tuple-struct or unit-struct cannot be used to qualify that type's constructor:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct MyStruct(u32);\n\nuse MyStruct as UseAlias;\ntype TypeAlias = MyStruct;\n\nlet _ = UseAlias(5); // OK\nlet _ = TypeAlias(5); // Doesn't work\n}\n```\n\nA type alias, when not used as an associated type, must include a [_Type_](about:blank/types.html#type-expressions) and may not include [_TypeParamBounds_](items/../trait-bounds.html).\n\nA type alias, when used as an [associated type](about:blank/items/associated-items.html#associated-types) in a [trait](items/traits.html), must not include a [_Type_](about:blank/types.html#type-expressions) specification but may include [_TypeParamBounds_](items/../trait-bounds.html).\n\nA type alias, when used as an [associated type](about:blank/items/associated-items.html#associated-types) in a [trait impl](about:blank/items/implementations.html#trait-implementations), must include a [_Type_](about:blank/types.html#type-expressions) specification and may not include [_TypeParamBounds_](items/../trait-bounds.html).\n\nWhere clauses before the equals sign on a type alias in a [trait impl](about:blank/items/implementations.html#trait-implementations) (like `type TypeAlias<T> where T: Foo = Bar<T>`) are deprecated. Where clauses after the equals sign (like `type TypeAlias<T> = Bar<T> where T: Foo`) are preferred.\n\n## [Structs](#structs)\n\n> **Syntax**  \n> _Struct_ :  \n>       _StructStruct_  \n>    | _TupleStruct_\n> \n> _StructStruct_ :  \n>    `struct` [IDENTIFIER](items/../identifiers.html)  [_GenericParams_](items/generics.html)? [_WhereClause_](about:blank/items/generics.html#where-clauses)? ( `{` _StructFields_? `}` | `;` )\n> \n> _TupleStruct_ :  \n>    `struct` [IDENTIFIER](items/../identifiers.html)  [_GenericParams_](items/generics.html)? `(` _TupleFields_? `)` [_WhereClause_](about:blank/items/generics.html#where-clauses)? `;`\n> \n> _StructFields_ :  \n>    _StructField_ (`,` _StructField_)\\* `,`?\n> \n> _StructField_ :  \n>    [_OuterAttribute_](items/../attributes.html)\\*  \n>    [_Visibility_](items/../visibility-and-privacy.html)?  \n>    [IDENTIFIER](items/../identifiers.html) `:` [_Type_](about:blank/types.html#type-expressions)\n> \n> _TupleFields_ :  \n>    _TupleField_ (`,` _TupleField_)\\* `,`?\n> \n> _TupleField_ :  \n>    [_OuterAttribute_](items/../attributes.html)\\*  \n>    [_Visibility_](items/../visibility-and-privacy.html)?  \n>    [_Type_](about:blank/types.html#type-expressions)\n\nA _struct_ is a nominal [struct type](items/../types/struct.html) defined with the keyword `struct`.\n\nAn example of a `struct` item and its use:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Point {x: i32, y: i32}\nlet p = Point {x: 10, y: 11};\nlet px: i32 = p.x;\n}\n```\n\nA _tuple struct_ is a nominal [tuple type](items/../types/tuple.html), also defined with the keyword `struct`. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Point(i32, i32);\nlet p = Point(10, 11);\nlet px: i32 = match p { Point(x, _) => x };\n}\n```\n\nA _unit-like struct_ is a struct without any fields, defined by leaving off the list of fields entirely. Such a struct implicitly defines a constant of its type with the same name. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Cookie;\nlet c = [Cookie, Cookie {}, Cookie, Cookie {}];\n}\n```\n\nis equivalent to\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Cookie {}\nconst Cookie: Cookie = Cookie {};\nlet c = [Cookie, Cookie {}, Cookie, Cookie {}];\n}\n```\n\nThe precise memory layout of a struct is not specified. One can specify a particular layout using the [`repr` attribute](about:blank/type-layout.html#representations).\n\n## [Enumerations](#enumerations)\n\n> **Syntax**  \n> _Enumeration_ :  \n>    `enum` [IDENTIFIER](items/../identifiers.html)  [_GenericParams_](items/generics.html)? [_WhereClause_](about:blank/items/generics.html#where-clauses)? `{` _EnumItems_? `}`\n> \n> _EnumItems_ :  \n>    _EnumItem_ ( `,` _EnumItem_ )\\* `,`?\n> \n> _EnumItem_ :  \n>    _OuterAttribute_\\* [_Visibility_](items/../visibility-and-privacy.html)?  \n>    [IDENTIFIER](items/../identifiers.html) ( _EnumItemTuple_ | _EnumItemStruct_ )? _EnumItemDiscriminant_?\n> \n> _EnumItemTuple_ :  \n>    `(` [_TupleFields_](items/structs.html)? `)`\n> \n> _EnumItemStruct_ :  \n>    `{` [_StructFields_](items/structs.html)? `}`\n> \n> _EnumItemDiscriminant_ :  \n>    `=` [_Expression_](items/../expressions.html)\n\nAn _enumeration_, also referred to as an _enum_, is a simultaneous definition of a nominal [enumerated type](items/../types/enum.html) as well as a set of _constructors_, that can be used to create or pattern-match values of the corresponding enumerated type.\n\nEnumerations are declared with the keyword `enum`.\n\nAn example of an `enum` item and its use:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Animal {\n    Dog,\n    Cat,\n}\n\nlet mut a: Animal = Animal::Dog;\na = Animal::Cat;\n}\n```\n\nEnum constructors can have either named or unnamed fields:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Animal {\n    Dog(String, f64),\n    Cat { name: String, weight: f64 },\n}\n\nlet mut a: Animal = Animal::Dog(\"Cocoa\".to_string(), 37.2);\na = Animal::Cat { name: \"Spotty\".to_string(), weight: 2.7 };\n}\n```\n\nIn this example, `Cat` is a _struct-like enum variant_, whereas `Dog` is simply called an enum variant.\n\nAn enum where no constructors contain fields are called a _field-less enum_. For example, this is a fieldless enum:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Fieldless {\n    Tuple(),\n    Struct{},\n    Unit,\n}\n}\n```\n\nIf a field-less enum only contains unit variants, the enum is called an _unit-only enum_. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Enum {\n    Foo = 3,\n    Bar = 2,\n    Baz = 1,\n}\n}\n```\n\n## [Discriminants](#discriminants)\n\nEach enum instance has a _discriminant_: an integer logically associated to it that is used to determine which variant it holds.\n\nUnder the [default representation](about:blank/type-layout.html#the-default-representation), the discriminant is interpreted as an `isize` value. However, the compiler is allowed to use a smaller type (or another means of distinguishing variants) in its actual memory layout.\n\n### [Assigning discriminant values](#assigning-discriminant-values)\n\n#### [Explicit discriminants](#explicit-discriminants)\n\nIn two circumstances, the discriminant of a variant may be explicitly set by following the variant name with `=` and a [constant expression](about:blank/const_eval.html#constant-expressions):\n\n1.  if the enumeration is \"[unit-only](about:blank/items/enumerations.html#unit-only-enum)\".\n    \n2.  if a [primitive representation](about:blank/type-layout.html#primitive-representations) is used. For example:\n    \n    ```rust\n    #![allow(unused)]\n    fn main() {\n    #[repr(u8)]\n    enum Enum {\n        Unit = 3,\n        Tuple(u16),\n        Struct {\n            a: u8,\n            b: u16,\n        } = 1,\n    }\n    }\n    ```\n    \n\n#### [Implicit discriminants](#implicit-discriminants)\n\nIf a discriminant for a variant is not specified, then it is set to one higher than the discriminant of the previous variant in the declaration. If the discriminant of the first variant in the declaration is unspecified, then it is set to zero.\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Foo {\n    Bar,            // 0\n    Baz = 123,      // 123\n    Quux,           // 124\n}\n\nlet baz_discriminant = Foo::Baz as u32;\nassert_eq!(baz_discriminant, 123);\n}\n```\n\n#### [Restrictions](#restrictions)\n\nIt is an error when two variants share the same discriminant.\n\n```rust\n#![allow(unused)]\nfn main() {\nenum SharedDiscriminantError {\n    SharedA = 1,\n    SharedB = 1\n}\n\nenum SharedDiscriminantError2 {\n    Zero,       // 0\n    One,        // 1\n    OneToo = 1  // 1 (collision with previous!)\n}\n}\n```\n\nIt is also an error to have an unspecified discriminant where the previous discriminant is the maximum value for the size of the discriminant.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[repr(u8)]\nenum OverflowingDiscriminantError {\n    Max = 255,\n    MaxPlusOne // Would be 256, but that overflows the enum.\n}\n\n#[repr(u8)]\nenum OverflowingDiscriminantError2 {\n    MaxMinusOne = 254, // 254\n    Max,               // 255\n    MaxPlusOne         // Would be 256, but that overflows the enum.\n}\n}\n```\n\n### [Accessing discriminant](#accessing-discriminant)\n\n#### [Via `mem::discriminant`](#via-memdiscriminant)\n\n[`mem::discriminant`](items/../../std/mem/fn.discriminant.html) returns an opaque reference to the discriminant of an enum value which can be compared. This cannot be used to get the value of the discriminant.\n\n#### [Casting](#casting)\n\nIf an enumeration is [unit-only](about:blank/items/enumerations.html#unit-only-enum) (with no tuple and struct variants), then its discriminant can be directly accessed with a [numeric cast](about:blank/expressions/operator-expr.html#semantics); e.g.:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Enum {\n    Foo,\n    Bar,\n    Baz,\n}\n\nassert_eq!(0, Enum::Foo as isize);\nassert_eq!(1, Enum::Bar as isize);\nassert_eq!(2, Enum::Baz as isize);\n}\n```\n\n[Field-less enums](about:blank/items/enumerations.html#field-less-enum) can be casted if they do not have explicit discriminants, or where only unit variants are explicit.\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Fieldless {\n    Tuple(),\n    Struct{},\n    Unit,\n}\n\nassert_eq!(0, Fieldless::Tuple() as isize);\nassert_eq!(1, Fieldless::Struct{} as isize);\nassert_eq!(2, Fieldless::Unit as isize);\n\n#[repr(u8)]\nenum FieldlessWithDiscrimants {\n    First = 10,\n    Tuple(),\n    Second = 20,\n    Struct{},\n    Unit,\n}\n\nassert_eq!(10, FieldlessWithDiscrimants::First as u8);\nassert_eq!(11, FieldlessWithDiscrimants::Tuple() as u8);\nassert_eq!(20, FieldlessWithDiscrimants::Second as u8);\nassert_eq!(21, FieldlessWithDiscrimants::Struct{} as u8);\nassert_eq!(22, FieldlessWithDiscrimants::Unit as u8);\n}\n```\n\n#### [Pointer casting](#pointer-casting)\n\nIf the enumeration specifies a [primitive representation](about:blank/type-layout.html#primitive-representations), then the discriminant may be reliably accessed via unsafe pointer casting:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[repr(u8)]\nenum Enum {\n    Unit,\n    Tuple(bool),\n    Struct{a: bool},\n}\n\nimpl Enum {\n    fn discriminant(&self) -> u8 {\n        unsafe { *(self as *const Self as *const u8) }\n    }\n}\n\nlet unit_like = Enum::Unit;\nlet tuple_like = Enum::Tuple(true);\nlet struct_like = Enum::Struct{a: false};\n\nassert_eq!(0, unit_like.discriminant());\nassert_eq!(1, tuple_like.discriminant());\nassert_eq!(2, struct_like.discriminant());\n}\n```\n\n## [Zero-variant enums](#zero-variant-enums)\n\nEnums with zero variants are known as _zero-variant enums_. As they have no valid values, they cannot be instantiated.\n\n```rust\n#![allow(unused)]\nfn main() {\nenum ZeroVariants {}\n}\n```\n\nZero-variant enums are equivalent to the [never type](items/../types/never.html), but they cannot be coerced into other types.\n\n```rust\n#![allow(unused)]\nfn main() {\nenum ZeroVariants {}\nlet x: ZeroVariants = panic!();\nlet y: u32 = x; // mismatched type error\n}\n```\n\n## [Variant visibility](#variant-visibility)\n\nEnum variants syntactically allow a [_Visibility_](items/../visibility-and-privacy.html) annotation, but this is rejected when the enum is validated. This allows items to be parsed with a unified syntax across different contexts where they are used.\n\n```rust\n#![allow(unused)]\nfn main() {\nmacro_rules! mac_variant {\n    ($vis:vis $name:ident) => {\n        enum $name {\n            $vis Unit,\n\n            $vis Tuple(u8, u16),\n\n            $vis Struct { f: u8 },\n        }\n    }\n}\n\n// Empty `vis` is allowed.\nmac_variant! { E }\n\n// This is allowed, since it is removed before being validated.\n#[cfg(FALSE)]\nenum E {\n    pub U,\n    pub(crate) T(u8),\n    pub(super) T { f: String }\n}\n}\n```\n\n## [Unions](#unions)\n\n> **Syntax**  \n> _Union_ :  \n>    `union` [IDENTIFIER](items/../identifiers.html) [_GenericParams_](items/generics.html)? [_WhereClause_](about:blank/items/generics.html#where-clauses)? `{`[_StructFields_](items/structs.html) `}`\n\nA union declaration uses the same syntax as a struct declaration, except with `union` in place of `struct`.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[repr(C)]\nunion MyUnion {\n    f1: u32,\n    f2: f32,\n}\n}\n```\n\nThe key property of unions is that all fields of a union share common storage. As a result, writes to one field of a union can overwrite its other fields, and size of a union is determined by the size of its largest field.\n\nUnion field types are restricted to the following subset of types:\n\n-   `Copy` types\n-   References (`&T` and `&mut T` for arbitrary `T`)\n-   `ManuallyDrop<T>` (for arbitrary `T`)\n-   Tuples and arrays containing only allowed union field types\n\nThis restriction ensures, in particular, that union fields never need to be dropped. Like for structs and enums, it is possible to `impl Drop` for a union to manually define what happens when it gets dropped.\n\n## [Initialization of a union](#initialization-of-a-union)\n\nA value of a union type can be created using the same syntax that is used for struct types, except that it must specify exactly one field:\n\n```rust\n#![allow(unused)]\nfn main() {\nunion MyUnion { f1: u32, f2: f32 }\n\nlet u = MyUnion { f1: 1 };\n}\n```\n\nThe expression above creates a value of type `MyUnion` and initializes the storage using field `f1`. The union can be accessed using the same syntax as struct fields:\n\n```rust\n#![allow(unused)]\nfn main() {\nunion MyUnion { f1: u32, f2: f32 }\n\nlet u = MyUnion { f1: 1 };\nlet f = unsafe { u.f1 };\n}\n```\n\n## [Reading and writing union fields](#reading-and-writing-union-fields)\n\nUnions have no notion of an \"active field\". Instead, every union access just interprets the storage as the type of the field used for the access. Reading a union field reads the bits of the union at the field's type. Fields might have a non-zero offset (except when [the C representation](about:blank/type-layout.html#reprc-unions) is used); in that case the bits starting at the offset of the fields are read. It is the programmer's responsibility to make sure that the data is valid at the field's type. Failing to do so results in [undefined behavior](items/../behavior-considered-undefined.html). For example, reading the value `3` from a field of the [boolean type](items/../types/boolean.html) is undefined behavior. Effectively, writing to and then reading from a union with [the C representation](about:blank/type-layout.html#reprc-unions) is analogous to a [`transmute`](items/../../std/mem/fn.transmute.html) from the type used for writing to the type used for reading.\n\nConsequently, all reads of union fields have to be placed in `unsafe` blocks:\n\n```rust\n#![allow(unused)]\nfn main() {\nunion MyUnion { f1: u32, f2: f32 }\nlet u = MyUnion { f1: 1 };\n\nunsafe {\n    let f = u.f1;\n}\n}\n```\n\nCommonly, code using unions will provide safe wrappers around unsafe union field accesses.\n\nIn contrast, writes to union fields are safe, since they just overwrite arbitrary data, but cannot cause undefined behavior. (Note that union field types can never have drop glue, so a union field write will never implicitly drop anything.)\n\n## [Pattern matching on unions](#pattern-matching-on-unions)\n\nAnother way to access union fields is to use pattern matching. Pattern matching on union fields uses the same syntax as struct patterns, except that the pattern must specify exactly one field. Since pattern matching is like reading the union with a particular field, it has to be placed in `unsafe` blocks as well.\n\n```rust\n#![allow(unused)]\nfn main() {\nunion MyUnion { f1: u32, f2: f32 }\n\nfn f(u: MyUnion) {\n    unsafe {\n        match u {\n            MyUnion { f1: 10 } => { println!(\"ten\"); }\n            MyUnion { f2 } => { println!(\"{}\", f2); }\n        }\n    }\n}\n}\n```\n\nPattern matching may match a union as a field of a larger structure. In particular, when using a Rust union to implement a C tagged union via FFI, this allows matching on the tag and the corresponding field simultaneously:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[repr(u32)]\nenum Tag { I, F }\n\n#[repr(C)]\nunion U {\n    i: i32,\n    f: f32,\n}\n\n#[repr(C)]\nstruct Value {\n    tag: Tag,\n    u: U,\n}\n\nfn is_zero(v: Value) -> bool {\n    unsafe {\n        match v {\n            Value { tag: Tag::I, u: U { i: 0 } } => true,\n            Value { tag: Tag::F, u: U { f: num } } if num == 0.0 => true,\n            _ => false,\n        }\n    }\n}\n}\n```\n\n## [References to union fields](#references-to-union-fields)\n\nSince union fields share common storage, gaining write access to one field of a union can give write access to all its remaining fields. Borrow checking rules have to be adjusted to account for this fact. As a result, if one field of a union is borrowed, all its remaining fields are borrowed as well for the same lifetime.\n\n```rust\n#![allow(unused)]\nfn main() {\nunion MyUnion { f1: u32, f2: f32 }\n// ERROR: cannot borrow `u` (via `u.f2`) as mutable more than once at a time\nfn test() {\n    let mut u = MyUnion { f1: 1 };\n    unsafe {\n        let b1 = &mut u.f1;\n//                    ---- first mutable borrow occurs here (via `u.f1`)\n        let b2 = &mut u.f2;\n//                    ^^^^ second mutable borrow occurs here (via `u.f2`)\n        *b1 = 5;\n    }\n//  - first borrow ends here\n    assert_eq!(unsafe { u.f1 }, 5);\n}\n}\n```\n\nAs you could see, in many aspects (except for layouts, safety, and ownership) unions behave exactly like structs, largely as a consequence of inheriting their syntactic shape from structs. This is also true for many unmentioned aspects of Rust language (such as privacy, name resolution, type inference, generics, trait implementations, inherent implementations, coherence, pattern checking, etc etc etc).\n\n## [Constant items](#constant-items)\n\n> **Syntax**  \n> _ConstantItem_ :  \n>    `const` ( [IDENTIFIER](items/../identifiers.html) | `_` ) `:` [_Type_](about:blank/types.html#type-expressions) ( `=` [_Expression_](items/../expressions.html) )? `;`\n\nA _constant item_ is an optionally named _[constant value](about:blank/const_eval.html#constant-expressions)_ which is not associated with a specific memory location in the program. Constants are essentially inlined wherever they are used, meaning that they are copied directly into the relevant context when used. This includes usage of constants from external crates, and non-[`Copy`](about:blank/special-types-and-traits.html#copy) types. References to the same constant are not necessarily guaranteed to refer to the same memory address.\n\nConstants must be explicitly typed. The type must have a `'static` lifetime: any references in the initializer must have `'static` lifetimes.\n\nConstants may refer to the address of other constants, in which case the address will have elided lifetimes where applicable, otherwise – in most cases – defaulting to the `static` lifetime. (See [static lifetime elision](about:blank/lifetime-elision.html#static-lifetime-elision).) The compiler is, however, still at liberty to translate the constant many times, so the address referred to may not be stable.\n\n```rust\n#![allow(unused)]\nfn main() {\nconst BIT1: u32 = 1 << 0;\nconst BIT2: u32 = 1 << 1;\n\nconst BITS: [u32; 2] = [BIT1, BIT2];\nconst STRING: &'static str = \"bitstring\";\n\nstruct BitsNStrings<'a> {\n    mybits: [u32; 2],\n    mystring: &'a str,\n}\n\nconst BITS_N_STRINGS: BitsNStrings<'static> = BitsNStrings {\n    mybits: BITS,\n    mystring: STRING,\n};\n}\n```\n\nThe constant expression may only be omitted in a [trait definition](items/traits.html).\n\n## [Constants with Destructors](#constants-with-destructors)\n\nConstants can contain destructors. Destructors are run when the value goes out of scope.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct TypeWithDestructor(i32);\n\nimpl Drop for TypeWithDestructor {\n    fn drop(&mut self) {\n        println!(\"Dropped. Held {}.\", self.0);\n    }\n}\n\nconst ZERO_WITH_DESTRUCTOR: TypeWithDestructor = TypeWithDestructor(0);\n\nfn create_and_drop_zero_with_destructor() {\n    let x = ZERO_WITH_DESTRUCTOR;\n    // x gets dropped at end of function, calling drop.\n    // prints \"Dropped. Held 0.\".\n}\n}\n```\n\n## [Unnamed constant](#unnamed-constant)\n\nUnlike an [associated constant](about:blank/items/associated-items.html#associated-constants), a [free](about:blank/glossary.html#free-item) constant may be unnamed by using an underscore instead of the name. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nconst _: () =  { struct _SameNameTwice; };\n\n// OK although it is the same name as above:\nconst _: () =  { struct _SameNameTwice; };\n}\n```\n\nAs with [underscore imports](about:blank/items/use-declarations.html#underscore-imports), macros may safely emit the same unnamed constant in the same scope more than once. For example, the following should not produce an error:\n\n```rust\n#![allow(unused)]\nfn main() {\nmacro_rules! m {\n    ($item: item) => { $item $item }\n}\n\nm!(const _: () = (););\n// This expands to:\n// const _: () = ();\n// const _: () = ();\n}\n```\n\n## [Evaluation](#evaluation)\n\n[Free](about:blank/glossary.html#free-item) constants are always [evaluated](items/../const_eval.html) at compile-time to surface panics. This happens even within an unused function:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Compile-time panic\nconst PANIC: () = std::unimplemented!();\n\nfn unused_generic_function<T>() {\n    // A failing compile-time assertion\n    const _: () = assert!(usize::BITS == 0);\n}\n}\n```\n\n## [Static items](#static-items)\n\n> **Syntax**  \n> _StaticItem_ :  \n>    `static` `mut`? [IDENTIFIER](items/../identifiers.html) `:` [_Type_](about:blank/types.html#type-expressions) ( `=` [_Expression_](items/../expressions.html) )? `;`\n\nA _static item_ is similar to a [constant](items/constant-items.html), except that it represents a precise memory location in the program. All references to the static refer to the same memory location. Static items have the `static` lifetime, which outlives all other lifetimes in a Rust program. Static items do not call [`drop`](items/../destructors.html) at the end of the program.\n\nThe static initializer is a [constant expression](about:blank/const_eval.html#constant-expressions) evaluated at compile time. Static initializers may refer to other statics.\n\nNon-`mut` static items that contain a type that is not [interior mutable](items/../interior-mutability.html) may be placed in read-only memory.\n\nAll access to a static is safe, but there are a number of restrictions on statics:\n\n-   The type must have the `Sync` trait bound to allow thread-safe access.\n-   Constants cannot refer to statics.\n\nThe initializer expression must be omitted in an [external block](items/external-blocks.html), and must be provided for free static items.\n\n## [Statics & generics](#statics--generics)\n\nA static item defined in a generic scope (for example in a blanket or default implementation) will result in exactly one static item being defined, as if the static definition was pulled out of the current scope into the module. There will _not_ be one item per monomorphization.\n\nThis code:\n\n```rust\nuse std::sync::atomic::{AtomicUsize, Ordering};\n\ntrait Tr {\n    fn default_impl() {\n        static COUNTER: AtomicUsize = AtomicUsize::new(0);\n        println!(\"default_impl: counter was {}\", COUNTER.fetch_add(1, Ordering::Relaxed));\n    }\n\n    fn blanket_impl();\n}\n\nstruct Ty1 {}\nstruct Ty2 {}\n\nimpl<T> Tr for T {\n    fn blanket_impl() {\n        static COUNTER: AtomicUsize = AtomicUsize::new(0);\n        println!(\"blanket_impl: counter was {}\", COUNTER.fetch_add(1, Ordering::Relaxed));\n    }\n}\n\nfn main() {\n    <Ty1 as Tr>::default_impl();\n    <Ty2 as Tr>::default_impl();\n    <Ty1 as Tr>::blanket_impl();\n    <Ty2 as Tr>::blanket_impl();\n}\n```\n\nprints\n\n```text\ndefault_impl: counter was 0\ndefault_impl: counter was 1\nblanket_impl: counter was 0\nblanket_impl: counter was 1\n\n```\n\n## [Mutable statics](#mutable-statics)\n\nIf a static item is declared with the `mut` keyword, then it is allowed to be modified by the program. One of Rust's goals is to make concurrency bugs hard to run into, and this is obviously a very large source of race conditions or other bugs. For this reason, an `unsafe` block is required when either reading or writing a mutable static variable. Care should be taken to ensure that modifications to a mutable static are safe with respect to other threads running in the same process.\n\nMutable statics are still very useful, however. They can be used with C libraries and can also be bound from C libraries in an `extern` block.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn atomic_add(_: &mut u32, _: u32) -> u32 { 2 }\n\nstatic mut LEVELS: u32 = 0;\n\n// This violates the idea of no shared state, and this doesn't internally\n// protect against races, so this function is `unsafe`\nunsafe fn bump_levels_unsafe1() -> u32 {\n    let ret = LEVELS;\n    LEVELS += 1;\n    return ret;\n}\n\n// Assuming that we have an atomic_add function which returns the old value,\n// this function is \"safe\" but the meaning of the return value may not be what\n// callers expect, so it's still marked as `unsafe`\nunsafe fn bump_levels_unsafe2() -> u32 {\n    return atomic_add(&mut LEVELS, 1);\n}\n}\n```\n\nMutable statics have the same restrictions as normal statics, except that the type does not have to implement the `Sync` trait.\n\n## [Using Statics or Consts](#using-statics-or-consts)\n\nIt can be confusing whether or not you should use a constant item or a static item. Constants should, in general, be preferred over statics unless one of the following are true:\n\n-   Large amounts of data are being stored\n-   The single-address property of statics is required.\n-   Interior mutability is required.\n\n## [Traits](#traits)\n\n> **Syntax**  \n> _Trait_ :  \n>    `unsafe`? `trait` [IDENTIFIER](items/../identifiers.html)  [_GenericParams_](items/generics.html)? ( `:` [_TypeParamBounds_](items/../trait-bounds.html)? )? [_WhereClause_](about:blank/items/generics.html#where-clauses)? `{`  \n>      [_InnerAttribute_](items/../attributes.html)\\*  \n>      [_AssociatedItem_](items/associated-items.html)\\*  \n>    `}`\n\nA _trait_ describes an abstract interface that types can implement. This interface consists of [associated items](items/associated-items.html), which come in three varieties:\n\n-   [functions](about:blank/items/associated-items.html#associated-functions-and-methods)\n-   [types](about:blank/items/associated-items.html#associated-types)\n-   [constants](about:blank/items/associated-items.html#associated-constants)\n\nAll traits define an implicit type parameter `Self` that refers to \"the type that is implementing this interface\". Traits may also contain additional type parameters. These type parameters, including `Self`, may be constrained by other traits and so forth [as usual](items/generics.html).\n\nTraits are implemented for specific types through separate [implementations](items/implementations.html).\n\nTrait functions may omit the function body by replacing it with a semicolon. This indicates that the implementation must define the function. If the trait function defines a body, this definition acts as a default for any implementation which does not override it. Similarly, associated constants may omit the equals sign and expression to indicate implementations must define the constant value. Associated types must never define the type, the type may only be specified in an implementation.\n\n```rust\n#![allow(unused)]\nfn main() {\n// Examples of associated trait items with and without definitions.\ntrait Example {\n    const CONST_NO_DEFAULT: i32;\n    const CONST_WITH_DEFAULT: i32 = 99;\n    type TypeNoDefault;\n    fn method_without_default(&self);\n    fn method_with_default(&self) {}\n}\n}\n```\n\nTrait functions are not allowed to be [`const`](about:blank/items/functions.html#const-functions).\n\n## [Trait bounds](#trait-bounds)\n\nGeneric items may use traits as [bounds](items/../trait-bounds.html) on their type parameters.\n\n## [Generic Traits](#generic-traits)\n\nType parameters can be specified for a trait to make it generic. These appear after the trait name, using the same syntax used in [generic functions](about:blank/items/functions.html#generic-functions).\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Seq<T> {\n    fn len(&self) -> u32;\n    fn elt_at(&self, n: u32) -> T;\n    fn iter<F>(&self, f: F) where F: Fn(T);\n}\n}\n```\n\n## [Object Safety](#object-safety)\n\nObject safe traits can be the base trait of a [trait object](items/../types/trait-object.html). A trait is _object safe_ if it has the following qualities (defined in [RFC 255](https://github.com/rust-lang/rfcs/blob/master/text/0255-object-safety.md)):\n\n-   All [supertraits](about:blank/items/traits.html#supertraits) must also be object safe.\n-   `Sized` must not be a [supertrait](about:blank/items/traits.html#supertraits). In other words, it must not require `Self: Sized`.\n-   It must not have any associated constants.\n-   It must not have any associated types with generics.\n-   All associated functions must either be dispatchable from a trait object or be explicitly non-dispatchable:\n    -   Dispatchable functions must:\n        -   Not have any type parameters (although lifetime parameters are allowed).\n        -   Be a [method](about:blank/items/associated-items.html#methods) that does not use `Self` except in the type of the receiver.\n        -   Have a receiver with one of the following types:\n            -   `&Self` (i.e. `&self`)\n            -   `&mut Self` (i.e `&mut self`)\n            -   [`Box<Self>`](about:blank/special-types-and-traits.html#boxt)\n            -   [`Rc<Self>`](about:blank/special-types-and-traits.html#rct)\n            -   [`Arc<Self>`](about:blank/special-types-and-traits.html#arct)\n            -   [`Pin<P>`](about:blank/special-types-and-traits.html#pinp) where `P` is one of the types above\n        -   Not have an opaque return type; that is,\n            -   Not be an `async fn` (which has a hidden `Future` type).\n            -   Not have a return position `impl Trait` type (`fn example(&self) -> impl Trait`).\n        -   Not have a `where Self: Sized` bound (receiver type of `Self` (i.e. `self`) implies this).\n    -   Explicitly non-dispatchable functions require:\n        -   Have a `where Self: Sized` bound (receiver type of `Self` (i.e. `self`) implies this).\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::rc::Rc;\nuse std::sync::Arc;\nuse std::pin::Pin;\n// Examples of object safe methods.\ntrait TraitMethods {\n    fn by_ref(self: &Self) {}\n    fn by_ref_mut(self: &mut Self) {}\n    fn by_box(self: Box<Self>) {}\n    fn by_rc(self: Rc<Self>) {}\n    fn by_arc(self: Arc<Self>) {}\n    fn by_pin(self: Pin<&Self>) {}\n    fn with_lifetime<'a>(self: &'a Self) {}\n    fn nested_pin(self: Pin<Arc<Self>>) {}\n}\nstruct S;\nimpl TraitMethods for S {}\nlet t: Box<dyn TraitMethods> = Box::new(S);\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\n// This trait is object-safe, but these methods cannot be dispatched on a trait object.\ntrait NonDispatchable {\n    // Non-methods cannot be dispatched.\n    fn foo() where Self: Sized {}\n    // Self type isn't known until runtime.\n    fn returns(&self) -> Self where Self: Sized;\n    // `other` may be a different concrete type of the receiver.\n    fn param(&self, other: Self) where Self: Sized {}\n    // Generics are not compatible with vtables.\n    fn typed<T>(&self, x: T) where Self: Sized {}\n}\n\nstruct S;\nimpl NonDispatchable for S {\n    fn returns(&self) -> Self where Self: Sized { S }\n}\nlet obj: Box<dyn NonDispatchable> = Box::new(S);\nobj.returns(); // ERROR: cannot call with Self return\nobj.param(S);  // ERROR: cannot call with Self parameter\nobj.typed(1);  // ERROR: cannot call with generic type\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::rc::Rc;\n// Examples of non-object safe traits.\ntrait NotObjectSafe {\n    const CONST: i32 = 1;  // ERROR: cannot have associated const\n\n    fn foo() {}  // ERROR: associated function without Sized\n    fn returns(&self) -> Self; // ERROR: Self in return type\n    fn typed<T>(&self, x: T) {} // ERROR: has generic type parameters\n    fn nested(self: Rc<Box<Self>>) {} // ERROR: nested receiver not yet supported\n}\n\nstruct S;\nimpl NotObjectSafe for S {\n    fn returns(&self) -> Self { S }\n}\nlet obj: Box<dyn NotObjectSafe> = Box::new(S); // ERROR\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\n// Self: Sized traits are not object-safe.\ntrait TraitWithSize where Self: Sized {}\n\nstruct S;\nimpl TraitWithSize for S {}\nlet obj: Box<dyn TraitWithSize> = Box::new(S); // ERROR\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\n// Not object safe if `Self` is a type argument.\ntrait Super<A> {}\ntrait WithSelf: Super<Self> where Self: Sized {}\n\nstruct S;\nimpl<A> Super<A> for S {}\nimpl WithSelf for S {}\nlet obj: Box<dyn WithSelf> = Box::new(S); // ERROR: cannot use `Self` type parameter\n}\n```\n\n## [Supertraits](#supertraits)\n\n**Supertraits** are traits that are required to be implemented for a type to implement a specific trait. Furthermore, anywhere a [generic](items/generics.html) or [trait object](items/../types/trait-object.html) is bounded by a trait, it has access to the associated items of its supertraits.\n\nSupertraits are declared by trait bounds on the `Self` type of a trait and transitively the supertraits of the traits declared in those trait bounds. It is an error for a trait to be its own supertrait.\n\nThe trait with a supertrait is called a **subtrait** of its supertrait.\n\nThe following is an example of declaring `Shape` to be a supertrait of `Circle`.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Shape { fn area(&self) -> f64; }\ntrait Circle : Shape { fn radius(&self) -> f64; }\n}\n```\n\nAnd the following is the same example, except using [where clauses](about:blank/items/generics.html#where-clauses).\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Shape { fn area(&self) -> f64; }\ntrait Circle where Self: Shape { fn radius(&self) -> f64; }\n}\n```\n\nThis next example gives `radius` a default implementation using the `area` function from `Shape`.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Shape { fn area(&self) -> f64; }\ntrait Circle where Self: Shape {\n    fn radius(&self) -> f64 {\n        // A = pi * r^2\n        // so algebraically,\n        // r = sqrt(A / pi)\n        (self.area() /std::f64::consts::PI).sqrt()\n    }\n}\n}\n```\n\nThis next example calls a supertrait method on a generic parameter.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Shape { fn area(&self) -> f64; }\ntrait Circle : Shape { fn radius(&self) -> f64; }\nfn print_area_and_radius<C: Circle>(c: C) {\n    // Here we call the area method from the supertrait `Shape` of `Circle`.\n    println!(\"Area: {}\", c.area());\n    println!(\"Radius: {}\", c.radius());\n}\n}\n```\n\nSimilarly, here is an example of calling supertrait methods on trait objects.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Shape { fn area(&self) -> f64; }\ntrait Circle : Shape { fn radius(&self) -> f64; }\nstruct UnitCircle;\nimpl Shape for UnitCircle { fn area(&self) -> f64 { std::f64::consts::PI } }\nimpl Circle for UnitCircle { fn radius(&self) -> f64 { 1.0 } }\nlet circle = UnitCircle;\nlet circle = Box::new(circle) as Box<dyn Circle>;\nlet nonsense = circle.radius() * circle.area();\n}\n```\n\n## [Unsafe traits](#unsafe-traits)\n\nTraits items that begin with the `unsafe` keyword indicate that _implementing_ the trait may be [unsafe](items/../unsafety.html). It is safe to use a correctly implemented unsafe trait. The [trait implementation](about:blank/items/implementations.html#trait-implementations) must also begin with the `unsafe` keyword.\n\n[`Sync`](about:blank/special-types-and-traits.html#sync) and [`Send`](about:blank/special-types-and-traits.html#send) are examples of unsafe traits.\n\n## [Parameter patterns](#parameter-patterns)\n\nFunction or method declarations without a body only allow [IDENTIFIER](items/../identifiers.html) or `_` [wild card](about:blank/patterns.html#wildcard-pattern) patterns. `mut` [IDENTIFIER](items/../identifiers.html) is currently allowed, but it is deprecated and will become a hard error in the future.\n\nIn the 2015 edition, the pattern for a trait function or method parameter is optional:\n\n```rust\n#![allow(unused)]\nfn main() {\n// 2015 Edition\ntrait T {\n    fn f(i32);  // Parameter identifiers are not required.\n}\n}\n```\n\nThe kinds of patterns for parameters is limited to one of the following:\n\n-   [IDENTIFIER](items/../identifiers.html)\n-   `mut` [IDENTIFIER](items/../identifiers.html)\n-   [`_`](about:blank/patterns.html#wildcard-pattern)\n-   `&` [IDENTIFIER](items/../identifiers.html)\n-   `&&` [IDENTIFIER](items/../identifiers.html)\n\nBeginning in the 2018 edition, function or method parameter patterns are no longer optional. Also, all irrefutable patterns are allowed as long as there is a body. Without a body, the limitations listed above are still in effect.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait T {\n    fn f1((a, b): (i32, i32)) {}\n    fn f2(_: (i32, i32));  // Cannot use tuple pattern without a body.\n}\n}\n```\n\n## [Item visibility](#item-visibility)\n\nTrait items syntactically allow a [_Visibility_](items/../visibility-and-privacy.html) annotation, but this is rejected when the trait is validated. This allows items to be parsed with a unified syntax across different contexts where they are used. As an example, an empty `vis` macro fragment specifier can be used for trait items, where the macro rule may be used in other situations where visibility is allowed.\n\n```rust\nmacro_rules! create_method {\n    ($vis:vis $name:ident) => {\n        $vis fn $name(&self) {}\n    };\n}\n\ntrait T1 {\n    // Empty `vis` is allowed.\n    create_method! { method_of_t1 }\n}\n\nstruct S;\n\nimpl S {\n    // Visibility is allowed here.\n    create_method! { pub method_of_s }\n}\n\nimpl T1 for S {}\n\nfn main() {\n    let s = S;\n    s.method_of_t1();\n    s.method_of_s();\n}\n```\n\n## [Implementations](#implementations)\n\n> **Syntax**  \n> _Implementation_ :  \n>    _InherentImpl_ | _TraitImpl_\n> \n> _InherentImpl_ :  \n>    `impl` [_GenericParams_](items/generics.html)? [_Type_](about:blank/types.html#type-expressions) [_WhereClause_](about:blank/items/generics.html#where-clauses)? `{`  \n>       [_InnerAttribute_](items/../attributes.html)\\*  \n>       [_AssociatedItem_](items/associated-items.html)\\*  \n>    `}`\n> \n> _TraitImpl_ :  \n>    `unsafe`? `impl` [_GenericParams_](items/generics.html)? `!`? [_TypePath_](about:blank/paths.html#paths-in-types) `for` [_Type_](about:blank/types.html#type-expressions)  \n>    [_WhereClause_](about:blank/items/generics.html#where-clauses)?  \n>    `{`  \n>       [_InnerAttribute_](items/../attributes.html)\\*  \n>       [_AssociatedItem_](items/associated-items.html)\\*  \n>    `}`\n\nAn _implementation_ is an item that associates items with an _implementing type_. Implementations are defined with the keyword `impl` and contain functions that belong to an instance of the type that is being implemented or to the type statically.\n\nThere are two types of implementations:\n\n-   inherent implementations\n-   [trait](items/traits.html) implementations\n\n## [Inherent Implementations](#inherent-implementations)\n\nAn inherent implementation is defined as the sequence of the `impl` keyword, generic type declarations, a path to a nominal type, a where clause, and a bracketed set of associable items.\n\nThe nominal type is called the _implementing type_ and the associable items are the _associated items_ to the implementing type.\n\nInherent implementations associate the contained items to the implementing type. Inherent implementations can contain [associated functions](about:blank/items/associated-items.html#associated-functions-and-methods) (including [methods](about:blank/items/associated-items.html#methods)) and [associated constants](about:blank/items/associated-items.html#associated-constants). They cannot contain associated type aliases.\n\nThe [path](items/../paths.html) to an associated item is any path to the implementing type, followed by the associated item's identifier as the final path component.\n\nA type can also have multiple inherent implementations. An implementing type must be defined within the same crate as the original type definition.\n\n```rust\npub mod color {\n    pub struct Color(pub u8, pub u8, pub u8);\n\n    impl Color {\n        pub const WHITE: Color = Color(255, 255, 255);\n    }\n}\n\nmod values {\n    use super::color::Color;\n    impl Color {\n        pub fn red() -> Color {\n            Color(255, 0, 0)\n        }\n    }\n}\n\npub use self::color::Color;\nfn main() {\n    // Actual path to the implementing type and impl in the same module.\n    color::Color::WHITE;\n\n    // Impl blocks in different modules are still accessed through a path to the type.\n    color::Color::red();\n\n    // Re-exported paths to the implementing type also work.\n    Color::red();\n\n    // Does not work, because use in `values` is not pub.\n    // values::Color::red();\n}\n```\n\n## [Trait Implementations](#trait-implementations)\n\nA _trait implementation_ is defined like an inherent implementation except that the optional generic type declarations are followed by a [trait](items/traits.html), followed by the keyword `for`, followed by a path to a nominal type.\n\nThe trait is known as the _implemented trait_. The implementing type implements the implemented trait.\n\nA trait implementation must define all non-default associated items declared by the implemented trait, may redefine default associated items defined by the implemented trait, and cannot define any other items.\n\nThe path to the associated items is `<` followed by a path to the implementing type followed by `as` followed by a path to the trait followed by `>` as a path component followed by the associated item's path component.\n\n[Unsafe traits](about:blank/items/traits.html#unsafe-traits) require the trait implementation to begin with the `unsafe` keyword.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[derive(Copy, Clone)]\nstruct Point {x: f64, y: f64};\ntype Surface = i32;\nstruct BoundingBox {x: f64, y: f64, width: f64, height: f64};\ntrait Shape { fn draw(&self, s: Surface); fn bounding_box(&self) -> BoundingBox; }\nfn do_draw_circle(s: Surface, c: Circle) { }\nstruct Circle {\n    radius: f64,\n    center: Point,\n}\n\nimpl Copy for Circle {}\n\nimpl Clone for Circle {\n    fn clone(&self) -> Circle { *self }\n}\n\nimpl Shape for Circle {\n    fn draw(&self, s: Surface) { do_draw_circle(s, *self); }\n    fn bounding_box(&self) -> BoundingBox {\n        let r = self.radius;\n        BoundingBox {\n            x: self.center.x - r,\n            y: self.center.y - r,\n            width: 2.0 * r,\n            height: 2.0 * r,\n        }\n    }\n}\n}\n```\n\n### [Trait Implementation Coherence](#trait-implementation-coherence)\n\nA trait implementation is considered incoherent if either the orphan rules check fails or there are overlapping implementation instances.\n\nTwo trait implementations overlap when there is a non-empty intersection of the traits the implementation is for, the implementations can be instantiated with the same type.\n\n#### [Orphan rules](#orphan-rules)\n\nGiven `impl<P1..=Pn> Trait<T1..=Tn> for T0`, an `impl` is valid only if at least one of the following is true:\n\n-   `Trait` is a [local trait](about:blank/glossary.html#local-trait)\n-   All of\n    -   At least one of the types `T0..=Tn` must be a [local type](about:blank/glossary.html#local-type). Let `Ti` be the first such type.\n    -   No [uncovered type](about:blank/glossary.html#uncovered-type) parameters `P1..=Pn` may appear in `T0..Ti` (excluding `Ti`)\n\nOnly the appearance of _uncovered_ type parameters is restricted. Note that for the purposes of coherence, [fundamental types](about:blank/glossary.html#fundamental-type-constructors) are special. The `T` in `Box<T>` is not considered covered, and `Box<LocalType>` is considered local.\n\n## [Generic Implementations](#generic-implementations)\n\nAn implementation can take [generic parameters](items/generics.html), which can be used in the rest of the implementation. Implementation parameters are written directly after the `impl` keyword.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Seq<T> { fn dummy(&self, _: T) { } }\nimpl<T> Seq<T> for Vec<T> {\n    /* ... */\n}\nimpl Seq<bool> for u32 {\n    /* Treat the integer as a sequence of bits */\n}\n}\n```\n\nGeneric parameters _constrain_ an implementation if the parameter appears at least once in one of:\n\n-   The implemented trait, if it has one\n-   The implementing type\n-   As an [associated type](about:blank/items/associated-items.html#associated-types) in the [bounds](items/../trait-bounds.html) of a type that contains another parameter that constrains the implementation\n\nType and const parameters must always constrain the implementation. Lifetimes must constrain the implementation if the lifetime is used in an associated type.\n\nExamples of constraining situations:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Trait{}\ntrait GenericTrait<T> {}\ntrait HasAssocType { type Ty; }\nstruct Struct;\nstruct GenericStruct<T>(T);\nstruct ConstGenericStruct<const N: usize>([(); N]);\n// T constrains by being an argument to GenericTrait.\nimpl<T> GenericTrait<T> for i32 { /* ... */ }\n\n// T constrains by being an argument to GenericStruct\nimpl<T> Trait for GenericStruct<T> { /* ... */ }\n\n// Likewise, N constrains by being an argument to ConstGenericStruct\nimpl<const N: usize> Trait for ConstGenericStruct<N> { /* ... */ }\n\n// T constrains by being in an associated type in a bound for type `U` which is\n// itself a generic parameter constraining the trait.\nimpl<T, U> GenericTrait<U> for u32 where U: HasAssocType<Ty = T> { /* ... */ }\n\n// Like previous, except the type is `(U, isize)`. `U` appears inside the type\n// that includes `T`, and is not the type itself.\nimpl<T, U> GenericStruct<U> where (U, isize): HasAssocType<Ty = T> { /* ... */ }\n}\n```\n\nExamples of non-constraining situations:\n\n```rust\n#![allow(unused)]\nfn main() {\n// The rest of these are errors, since they have type or const parameters that\n// do not constrain.\n\n// T does not constrain since it does not appear at all.\nimpl<T> Struct { /* ... */ }\n\n// N does not constrain for the same reason.\nimpl<const N: usize> Struct { /* ... */ }\n\n// Usage of T inside the implementation does not constrain the impl.\nimpl<T> Struct {\n    fn uses_t(t: &T) { /* ... */ }\n}\n\n// T is used as an associated type in the bounds for U, but U does not constrain.\nimpl<T, U> Struct where U: HasAssocType<Ty = T> { /* ... */ }\n\n// T is used in the bounds, but not as an associated type, so it does not constrain.\nimpl<T, U> GenericTrait<U> for u32 where U: GenericTrait<T> {}\n}\n```\n\nExample of an allowed unconstraining lifetime parameter:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Struct;\nimpl<'a> Struct {}\n}\n```\n\nExample of a disallowed unconstraining lifetime parameter:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Struct;\ntrait HasAssocType { type Ty; }\nimpl<'a> HasAssocType for Struct {\n    type Ty = &'a Struct;\n}\n}\n```\n\n## [Attributes on Implementations](#attributes-on-implementations)\n\nImplementations may contain outer [attributes](items/../attributes.html) before the `impl` keyword and inner [attributes](items/../attributes.html) inside the brackets that contain the associated items. Inner attributes must come before any associated items. The attributes that have meaning here are [`cfg`](items/../conditional-compilation.html), [`deprecated`](about:blank/attributes/diagnostics.html#the-deprecated-attribute), [`doc`](items/../../rustdoc/the-doc-attribute.html), and [the lint check attributes](about:blank/attributes/diagnostics.html#lint-check-attributes).\n\n## [External blocks](#external-blocks)\n\n> **Syntax**  \n> _ExternBlock_ :  \n>    `unsafe`? `extern` [_Abi_](items/functions.html)? `{`  \n>       [_InnerAttribute_](items/../attributes.html)\\*  \n>       _ExternalItem_\\*  \n>    `}`\n> \n> _ExternalItem_ :  \n>    [_OuterAttribute_](items/../attributes.html)\\* (  \n>          [_MacroInvocationSemi_](about:blank/macros.html#macro-invocation)  \n>       | ( [_Visibility_](items/../visibility-and-privacy.html)? ( [_StaticItem_](items/static-items.html) | [_Function_](items/functions.html) ) )  \n>    )\n\nExternal blocks provide _declarations_ of items that are not _defined_ in the current crate and are the basis of Rust's foreign function interface. These are akin to unchecked imports.\n\nTwo kinds of item _declarations_ are allowed in external blocks: [functions](items/functions.html) and [statics](items/static-items.html). Calling functions or accessing statics that are declared in external blocks is only allowed in an `unsafe` context.\n\nThe `unsafe` keyword is syntactically allowed to appear before the `extern` keyword, but it is rejected at a semantic level. This allows macros to consume the syntax and make use of the `unsafe` keyword, before removing it from the token stream.\n\n## [Functions](#functions-1)\n\nFunctions within external blocks are declared in the same way as other Rust functions, with the exception that they must not have a body and are instead terminated by a semicolon. Patterns are not allowed in parameters, only [IDENTIFIER](items/../identifiers.html) or `_` may be used. Function qualifiers (`const`, `async`, `unsafe`, and `extern`) are not allowed.\n\nFunctions within external blocks may be called by Rust code, just like functions defined in Rust. The Rust compiler automatically translates between the Rust ABI and the foreign ABI.\n\nA function declared in an extern block is implicitly `unsafe`. When coerced to a function pointer, a function declared in an extern block has type `unsafe extern \"abi\" for<'l1, ..., 'lm> fn(A1, ..., An) -> R`, where `'l1`, ... `'lm` are its lifetime parameters, `A1`, ..., `An` are the declared types of its parameters and `R` is the declared return type.\n\n## [Statics](#statics)\n\nStatics within external blocks are declared in the same way as [statics](items/static-items.html) outside of external blocks, except that they do not have an expression initializing their value. It is `unsafe` to access a static item declared in an extern block, whether or not it's mutable, because there is nothing guaranteeing that the bit pattern at the static's memory is valid for the type it is declared with, since some arbitrary (e.g. C) code is in charge of initializing the static.\n\nExtern statics can be either immutable or mutable just like [statics](items/static-items.html) outside of external blocks. An immutable static _must_ be initialized before any Rust code is executed. It is not enough for the static to be initialized before Rust code reads from it.\n\n## [ABI](#abi)\n\nBy default external blocks assume that the library they are calling uses the standard C ABI on the specific platform. Other ABIs may be specified using an `abi` string, as shown here:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Interface to the Windows API\nextern \"stdcall\" { }\n}\n```\n\nThere are three ABI strings which are cross-platform, and which all compilers are guaranteed to support:\n\n-   `extern \"Rust\"` -- The default ABI when you write a normal `fn foo()` in any Rust code.\n-   `extern \"C\"` -- This is the same as `extern fn foo()`; whatever the default your C compiler supports.\n-   `extern \"system\"` -- Usually the same as `extern \"C\"`, except on Win32, in which case it's `\"stdcall\"`, or what you should use to link to the Windows API itself\n\nThere are also some platform-specific ABI strings:\n\n-   `extern \"cdecl\"` -- The default for x86\\_32 C code.\n-   `extern \"stdcall\"` -- The default for the Win32 API on x86\\_32.\n-   `extern \"win64\"` -- The default for C code on x86\\_64 Windows.\n-   `extern \"sysv64\"` -- The default for C code on non-Windows x86\\_64.\n-   `extern \"aapcs\"` -- The default for ARM.\n-   `extern \"fastcall\"` -- The `fastcall` ABI -- corresponds to MSVC's `__fastcall` and GCC and clang's `__attribute__((fastcall))`\n-   `extern \"vectorcall\"` -- The `vectorcall` ABI -- corresponds to MSVC's `__vectorcall` and clang's `__attribute__((vectorcall))`\n-   `extern \"thiscall\"` -- The default for C++ member functions on MSVC -- corresponds to MSVC's `__thiscall` and GCC and clang's `__attribute__((thiscall))`\n-   `extern \"efiapi\"` -- The ABI used for [UEFI](https://uefi.org/specifications) functions.\n\n## [Variadic functions](#variadic-functions)\n\nFunctions within external blocks may be variadic by specifying `...` as the last argument. The variadic parameter may optionally be specified with an identifier.\n\n```rust\n#![allow(unused)]\nfn main() {\nextern \"C\" {\n    fn foo(...);\n    fn bar(x: i32, ...);\n    fn with_name(format: *const u8, args: ...);\n}\n}\n```\n\n## [Attributes on extern blocks](#attributes-on-extern-blocks)\n\nThe following [attributes](items/../attributes.html) control the behavior of external blocks.\n\n### [The `link` attribute](#the-link-attribute)\n\nThe _`link` attribute_ specifies the name of a native library that the compiler should link with for the items within an `extern` block. It uses the [_MetaListNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to specify its inputs. The `name` key is the name of the native library to link. The `kind` key is an optional value which specifies the kind of library with the following possible values:\n\n-   `dylib` — Indicates a dynamic library. This is the default if `kind` is not specified.\n-   `static` — Indicates a static library.\n-   `framework` — Indicates a macOS framework. This is only valid for macOS targets.\n-   `raw-dylib` — Indicates a dynamic library where the compiler will generate an import library to link against (see [`dylib` versus `raw-dylib`](about:blank/items/external-blocks.html#dylib-versus-raw-dylib) below for details). This is only valid for Windows targets.\n\nThe `name` key must be included if `kind` is specified.\n\nThe optional `modifiers` argument is a way to specify linking modifiers for the library to link. Modifiers are specified as a comma-delimited string with each modifier prefixed with either a `+` or `-` to indicate that the modifier is enabled or disabled, respectively. Specifying multiple `modifiers` arguments in a single `link` attribute, or multiple identical modifiers in the same `modifiers` argument is not currently supported.  \nExample: `#[link(name = \"mylib\", kind = \"static\", modifiers = \"+whole-archive\")]`.\n\nThe `wasm_import_module` key may be used to specify the [WebAssembly module](https://webassembly.github.io/spec/core/syntax/modules.html) name for the items within an `extern` block when importing symbols from the host environment. The default module name is `env` if `wasm_import_module` is not specified.\n\n```rust\n#[link(name = \"crypto\")]\nextern {\n    // …\n}\n\n#[link(name = \"CoreFoundation\", kind = \"framework\")]\nextern {\n    // …\n}\n\n#[link(wasm_import_module = \"foo\")]\nextern {\n    // …\n}\n```\n\nIt is valid to add the `link` attribute on an empty extern block. You can use this to satisfy the linking requirements of extern blocks elsewhere in your code (including upstream crates) instead of adding the attribute to each extern block.\n\n#### [Linking modifiers: `bundle`](#linking-modifiers-bundle)\n\nThis modifier is only compatible with the `static` linking kind. Using any other kind will result in a compiler error.\n\nWhen building a rlib or staticlib `+bundle` means that the native static library will be packed into the rlib or staticlib archive, and then retrieved from there during linking of the final binary.\n\nWhen building a rlib `-bundle` means that the native static library is registered as a dependency of that rlib \"by name\", and object files from it are included only during linking of the final binary, the file search by that name is also performed during final linking.  \nWhen building a staticlib `-bundle` means that the native static library is simply not included into the archive and some higher level build system will need to add it later during linking of the final binary.\n\nThis modifier has no effect when building other targets like executables or dynamic libraries.\n\nThe default for this modifier is `+bundle`.\n\nMore implementation details about this modifier can be found in [`bundle` documentation for rustc](about:blank/rustc/command-line-arguments.html#linking-modifiers-bundle).\n\n#### [Linking modifiers: `whole-archive`](#linking-modifiers-whole-archive)\n\nThis modifier is only compatible with the `static` linking kind. Using any other kind will result in a compiler error.\n\n`+whole-archive` means that the static library is linked as a whole archive without throwing any object files away.\n\nThe default for this modifier is `-whole-archive`.\n\nMore implementation details about this modifier can be found in [`whole-archive` documentation for rustc](about:blank/rustc/command-line-arguments.html#linking-modifiers-whole-archive).\n\n### [Linking modifiers: `verbatim`](#linking-modifiers-verbatim)\n\nThis modifier is compatible with all linking kinds.\n\n`+verbatim` means that rustc itself won't add any target-specified library prefixes or suffixes (like `lib` or `.a`) to the library name, and will try its best to ask for the same thing from the linker.\n\n`-verbatim` means that rustc will either add a target-specific prefix and suffix to the library name before passing it to linker, or won't prevent linker from implicitly adding it.\n\nThe default for this modifier is `-verbatim`.\n\nMore implementation details about this modifier can be found in [`verbatim` documentation for rustc](about:blank/rustc/command-line-arguments.html#linking-modifiers-verbatim).\n\n#### [`dylib` versus `raw-dylib`](#dylib-versus-raw-dylib)\n\nOn Windows, linking against a dynamic library requires that an import library is provided to the linker: this is a special static library that declares all of the symbols exported by the dynamic library in such a way that the linker knows that they have to be dynamically loaded at runtime.\n\nSpecifying `kind = \"dylib\"` instructs the Rust compiler to link an import library based on the `name` key. The linker will then use its normal library resolution logic to find that import library. Alternatively, specifying `kind = \"raw-dylib\"` instructs the compiler to generate an import library during compilation and provide that to the linker instead.\n\n`raw-dylib` is only supported on Windows. Using it when targeting other platforms will result in a compiler error.\n\n#### [The `import_name_type` key](#the-import_name_type-key)\n\nOn x86 Windows, names of functions are \"decorated\" (i.e., have a specific prefix and/or suffix added) to indicate their calling convention. For example, a `stdcall` calling convention function with the name `fn1` that has no arguments would be decorated as `_fn1@0`. However, the [PE Format](https://learn.microsoft.com/windows/win32/debug/pe-format#import-name-type) does also permit names to have no prefix or be undecorated. Additionally, the MSVC and GNU toolchains use different decorations for the same calling conventions which means, by default, some Win32 functions cannot be called using the `raw-dylib` link kind via the GNU toolchain.\n\nTo allow for these differences, when using the `raw-dylib` link kind you may also specify the `import_name_type` key with one of the following values to change how functions are named in the generated import library:\n\n-   `decorated`: The function name will be fully-decorated using the MSVC toolchain format.\n-   `noprefix`: The function name will be decorated using the MSVC toolchain format, but skipping the leading `?`, `@`, or optionally `_`.\n-   `undecorated`: The function name will not be decorated.\n\nIf the `import_name_type` key is not specified, then the function name will be fully-decorated using the target toolchain's format.\n\nVariables are never decorated and so the `import_name_type` key has no effect on how they are named in the generated import library.\n\nThe `import_name_type` key is only supported on x86 Windows. Using it when targeting other platforms will result in a compiler error.\n\n### [The `link_name` attribute](#the-link_name-attribute)\n\nThe _`link_name` attribute_ may be specified on declarations inside an `extern` block to indicate the symbol to import for the given function or static. It uses the [_MetaNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to specify the name of the symbol.\n\n```rust\n#![allow(unused)]\nfn main() {\nextern {\n    #[link_name = \"actual_symbol_name\"]\n    fn name_in_rust();\n}\n}\n```\n\nUsing this attribute with the `link_ordinal` attribute will result in a compiler error.\n\n### [The `link_ordinal` attribute](#the-link_ordinal-attribute)\n\nThe _`link_ordinal` attribute_ can be applied on declarations inside an `extern` block to indicate the numeric ordinal to use when generating the import library to link against. An ordinal is a unique number per symbol exported by a dynamic library on Windows and can be used when the library is being loaded to find that symbol rather than having to look it up by name.\n\nWarning: `link_ordinal` should only be used in cases where the ordinal of the symbol is known to be stable: if the ordinal of a symbol is not explicitly set when its containing binary is built then one will be automatically assigned to it, and that assigned ordinal may change between builds of the binary.\n\n```rust\n#[link(name = \"exporter\", kind = \"raw-dylib\")]\nextern \"stdcall\" {\n    #[link_ordinal(15)]\n    fn imported_function_stdcall(i: i32);\n}\n```\n\nThis attribute is only used with the `raw-dylib` linking kind. Using any other kind will result in a compiler error.\n\nUsing this attribute with the `link_name` attribute will result in a compiler error.\n\n### [Attributes on function parameters](#attributes-on-function-parameters-1)\n\nAttributes on extern function parameters follow the same rules and restrictions as [regular function parameters](about:blank/items/functions.html#attributes-on-function-parameters).\n\n## [Generic parameters](#generic-parameters)\n\n> **Syntax**  \n> _GenericParams_ :  \n>       `<` `>`  \n>    | `<` (_GenericParam_ `,`)\\* _GenericParam_ `,`? `>`\n> \n> _GenericParam_ :  \n>    [_OuterAttribute_](items/../attributes.html)\\* ( _LifetimeParam_ | _TypeParam_ | _ConstParam_ )\n> \n> _LifetimeParam_ :  \n>    [LIFETIME\\_OR\\_LABEL](about:blank/tokens.html#lifetimes-and-loop-labels) ( `:` [_LifetimeBounds_](items/../trait-bounds.html) )?\n> \n> _TypeParam_ :  \n>    [IDENTIFIER](items/../identifiers.html) ( `:` [_TypeParamBounds_](items/../trait-bounds.html)? )? ( `=` [_Type_](about:blank/types.html#type-expressions) )?\n> \n> _ConstParam_:  \n>    `const` [IDENTIFIER](items/../identifiers.html) `:` [_Type_](about:blank/types.html#type-expressions) ( `=` _[Block](items/../expressions/block-expr.html)_ | [IDENTIFIER](items/../identifiers.html) | -?[LITERAL](items/../expressions/literal-expr.html) )?\n\n[Functions](items/functions.html), [type aliases](items/type-aliases.html), [structs](items/structs.html), [enumerations](items/enumerations.html), [unions](items/unions.html), [traits](items/traits.html), and [implementations](items/implementations.html) may be _parameterized_ by types, constants, and lifetimes. These parameters are listed in angle brackets (`<...>`), usually immediately after the name of the item and before its definition. For implementations, which don't have a name, they come directly after `impl`. The order of generic parameters is restricted to lifetime parameters and then type and const parameters intermixed. The same parameter name may not be declared more than once in a _GenericParams_ list.\n\nSome examples of items with type, const, and lifetime parameters:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn foo<'a, T>() {}\ntrait A<U> {}\nstruct Ref<'a, T> where T: 'a { r: &'a T }\nstruct InnerArray<T, const N: usize>([T; N]);\nstruct EitherOrderWorks<const N: bool, U>(U);\n}\n```\n\nGeneric parameters are in scope within the item definition where they are declared. They are not in scope for items declared within the body of a function as described in [item declarations](about:blank/statements.html#item-declarations). See [generic parameter scopes](about:blank/names/scopes.html#generic-parameter-scopes) for more details.\n\n[References](about:blank/types/pointer.html#shared-references-), [raw pointers](about:blank/types/pointer.html#raw-pointers-const-and-mut), [arrays](items/../types/array.html), [slices](items/../types/slice.html), [tuples](items/../types/tuple.html), and [function pointers](items/../types/function-pointer.html) have lifetime or type parameters as well, but are not referred to with path syntax.\n\n### [Const generics](#const-generics)\n\n_Const generic parameters_ allow items to be generic over constant values. The const identifier introduces a name for the constant parameter, and all instances of the item must be instantiated with a value of the given type.\n\nThe only allowed types of const parameters are `u8`, `u16`, `u32`, `u64`, `u128`, `usize`, `i8`, `i16`, `i32`, `i64`, `i128`, `isize`, `char` and `bool`.\n\nConst parameters can be used anywhere a [const item](items/constant-items.html) can be used, with the exception that when used in a [type](items/../types.html) or [array repeat expression](items/../expressions/array-expr.html), it must be standalone (as described below). That is, they are allowed in the following places:\n\n1.  As an applied const to any type which forms a part of the signature of the item in question.\n2.  As part of a const expression used to define an [associated const](about:blank/items/associated-items.html#associated-constants), or as a parameter to an [associated type](about:blank/items/associated-items.html#associated-types).\n3.  As a value in any runtime expression in the body of any functions in the item.\n4.  As a parameter to any type used in the body of any functions in the item.\n5.  As a part of the type of any fields in the item.\n\n```rust\n#![allow(unused)]\nfn main() {\n// Examples where const generic parameters can be used.\n\n// Used in the signature of the item itself.\nfn foo<const N: usize>(arr: [i32; N]) {\n    // Used as a type within a function body.\n    let x: [i32; N];\n    // Used as an expression.\n    println!(\"{}\", N * 2);\n}\n\n// Used as a field of a struct.\nstruct Foo<const N: usize>([i32; N]);\n\nimpl<const N: usize> Foo<N> {\n    // Used as an associated constant.\n    const CONST: usize = N * 4;\n}\n\ntrait Trait {\n    type Output;\n}\n\nimpl<const N: usize> Trait for Foo<N> {\n    // Used as an associated type.\n    type Output = [i32; N];\n}\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\n// Examples where const generic parameters cannot be used.\nfn foo<const N: usize>() {\n    // Cannot use in item definitions within a function body.\n    const BAD_CONST: [usize; N] = [1; N];\n    static BAD_STATIC: [usize; N] = [1; N];\n    fn inner(bad_arg: [usize; N]) {\n        let bad_value = N * 2;\n    }\n    type BadAlias = [usize; N];\n    struct BadStruct([usize; N]);\n}\n}\n```\n\nAs a further restriction, const parameters may only appear as a standalone argument inside of a [type](items/../types.html) or [array repeat expression](items/../expressions/array-expr.html). In those contexts, they may only be used as a single segment [path expression](items/../expressions/path-expr.html), possibly inside a [block](items/../expressions/block-expr.html) (such as `N` or `{N}`). That is, they cannot be combined with other expressions.\n\n```rust\n#![allow(unused)]\nfn main() {\n// Examples where const parameters may not be used.\n\n// Not allowed to combine in other expressions in types, such as the\n// arithmetic expression in the return type here.\nfn bad_function<const N: usize>() -> [u8; {N + 1}] {\n    // Similarly not allowed for array repeat expressions.\n    [1; {N + 1}]\n}\n}\n```\n\nA const argument in a [path](items/../paths.html) specifies the const value to use for that item. The argument must be a [const expression](about:blank/const_eval.html#constant-expressions) of the type ascribed to the const parameter. The const expression must be a [block expression](items/../expressions/block-expr.html) (surrounded with braces) unless it is a single path segment (an [IDENTIFIER](items/../identifiers.html)) or a [literal](items/../expressions/literal-expr.html) (with a possibly leading `-` token).\n\n> **Note**: This syntactic restriction is necessary to avoid requiring infinite lookahead when parsing an expression inside of a type.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn double<const N: i32>() {\n    println!(\"doubled: {}\", N * 2);\n}\n\nconst SOME_CONST: i32 = 12;\n\nfn example() {\n    // Example usage of a const argument.\n    double::<9>();\n    double::<-123>();\n    double::<{7 + 8}>();\n    double::<SOME_CONST>();\n    double::<{ SOME_CONST + 5 }>();\n}\n}\n```\n\nWhen there is ambiguity if a generic argument could be resolved as either a type or const argument, it is always resolved as a type. Placing the argument in a block expression can force it to be interpreted as a const argument.\n\n```rust\n#![allow(unused)]\nfn main() {\ntype N = u32;\nstruct Foo<const N: usize>;\n// The following is an error, because `N` is interpreted as the type alias `N`.\nfn foo<const N: usize>() -> Foo<N> { todo!() } // ERROR\n// Can be fixed by wrapping in braces to force it to be interpreted as the `N`\n// const parameter:\nfn bar<const N: usize>() -> Foo<{ N }> { todo!() } // ok\n}\n```\n\nUnlike type and lifetime parameters, const parameters can be declared without being used inside of a parameterized item, with the exception of implementations as described in [generic implementations](about:blank/items/implementations.html#generic-implementations):\n\n```rust\n#![allow(unused)]\nfn main() {\n// ok\nstruct Foo<const N: usize>;\nenum Bar<const M: usize> { A, B }\n\n// ERROR: unused parameter\nstruct Baz<T>;\nstruct Biz<'a>;\nstruct Unconstrained;\nimpl<const N: usize> Unconstrained {}\n}\n```\n\nWhen resolving a trait bound obligation, the exhaustiveness of all implementations of const parameters is not considered when determining if the bound is satisfied. For example, in the following, even though all possible const values for the `bool` type are implemented, it is still an error that the trait bound is not satisfied:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Foo<const B: bool>;\ntrait Bar {}\nimpl Bar for Foo<true> {}\nimpl Bar for Foo<false> {}\n\nfn needs_bar(_: impl Bar) {}\nfn generic<const B: bool>() {\n    let v = Foo::<B>;\n    needs_bar(v); // ERROR: trait bound `Foo<B>: Bar` is not satisfied\n}\n}\n```\n\n## [Where clauses](#where-clauses)\n\n> **Syntax**  \n> _WhereClause_ :  \n>    `where` ( _WhereClauseItem_ `,` )\\* _WhereClauseItem_ ?\n> \n> _WhereClauseItem_ :  \n>       _LifetimeWhereClauseItem_  \n>    | _TypeBoundWhereClauseItem_\n> \n> _LifetimeWhereClauseItem_ :  \n>    [_Lifetime_](items/../trait-bounds.html) `:` [_LifetimeBounds_](items/../trait-bounds.html)\n> \n> _TypeBoundWhereClauseItem_ :  \n>    [_ForLifetimes_](about:blank/trait-bounds.html#higher-ranked-trait-bounds)? [_Type_](about:blank/types.html#type-expressions) `:` [_TypeParamBounds_](items/../trait-bounds.html)?\n\n_Where clauses_ provide another way to specify bounds on type and lifetime parameters as well as a way to specify bounds on types that aren't type parameters.\n\nThe `for` keyword can be used to introduce [higher-ranked lifetimes](about:blank/trait-bounds.html#higher-ranked-trait-bounds). It only allows [_LifetimeParam_](about:blank/items/generics.html#generic-parameters) parameters.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct A<T>\nwhere\n    T: Iterator,            // Could use A<T: Iterator> instead\n    T::Item: Copy,          // Bound on an associated type\n    String: PartialEq<T>,   // Bound on `String`, using the type parameter\n    i32: Default,           // Allowed, but not useful\n{\n    f: T,\n}\n}\n```\n\n## [Attributes](#attributes)\n\nGeneric lifetime and type parameters allow [attributes](items/../attributes.html) on them. There are no built-in attributes that do anything in this position, although custom derive attributes may give meaning to it.\n\nThis example shows using a custom derive attribute to modify the meaning of a generic parameter.\n\n```rust\n// Assume that the derive for MyFlexibleClone declared `my_flexible_clone` as\n// an attribute it understands.\n#[derive(MyFlexibleClone)]\nstruct Foo<#[my_flexible_clone(unbounded)] H> {\n    a: *const H\n}\n```\n\n## [Associated Items](#associated-items)\n\n> **Syntax**  \n> _AssociatedItem_ :  \n>    [_OuterAttribute_](items/../attributes.html)\\* (  \n>          [_MacroInvocationSemi_](about:blank/macros.html#macro-invocation)  \n>       | ( [_Visibility_](items/../visibility-and-privacy.html)? ( [_TypeAlias_](items/type-aliases.html) | [_ConstantItem_](items/constant-items.html) | [_Function_](items/functions.html) ) )  \n>    )\n\n_Associated Items_ are the items declared in [traits](items/traits.html) or defined in [implementations](items/implementations.html). They are called this because they are defined on an associate type — the type in the implementation. They are a subset of the kinds of items you can declare in a module. Specifically, there are [associated functions](about:blank/items/associated-items.html#associated-functions-and-methods) (including methods), [associated types](about:blank/items/associated-items.html#associated-types), and [associated constants](about:blank/items/associated-items.html#associated-constants).\n\nAssociated items are useful when the associated item logically is related to the associating item. For example, the `is_some` method on `Option` is intrinsically related to Options, so should be associated.\n\nEvery associated item kind comes in two varieties: definitions that contain the actual implementation and declarations that declare signatures for definitions.\n\nIt is the declarations that make up the contract of traits and what is available on generic types.\n\n## [Associated functions and methods](#associated-functions-and-methods)\n\n_Associated functions_ are [functions](items/functions.html) associated with a type.\n\nAn _associated function declaration_ declares a signature for an associated function definition. It is written as a function item, except the function body is replaced with a `;`.\n\nThe identifier is the name of the function. The generics, parameter list, return type, and where clause of the associated function must be the same as the associated function declarations's.\n\nAn _associated function definition_ defines a function associated with another type. It is written the same as a [function item](items/../types/function-item.html).\n\nAn example of a common associated function is a `new` function that returns a value of the type the associated function is associated with.\n\n```rust\nstruct Struct {\n    field: i32\n}\n\nimpl Struct {\n    fn new() -> Struct {\n        Struct {\n            field: 0i32\n        }\n    }\n}\n\nfn main () {\n    let _struct = Struct::new();\n}\n```\n\nWhen the associated function is declared on a trait, the function can also be called with a [path](items/../paths.html) that is a path to the trait appended by the name of the trait. When this happens, it is substituted for `<_ as Trait>::function_name`.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Num {\n    fn from_i32(n: i32) -> Self;\n}\n\nimpl Num for f64 {\n    fn from_i32(n: i32) -> f64 { n as f64 }\n}\n\n// These 4 are all equivalent in this case.\nlet _: f64 = Num::from_i32(42);\nlet _: f64 = <_ as Num>::from_i32(42);\nlet _: f64 = <f64 as Num>::from_i32(42);\nlet _: f64 = f64::from_i32(42);\n}\n```\n\n### [Methods](#methods)\n\nAssociated functions whose first parameter is named `self` are called _methods_ and may be invoked using the [method call operator](items/../expressions/method-call-expr.html), for example, `x.foo()`, as well as the usual function call notation.\n\nIf the type of the `self` parameter is specified, it is limited to types resolving to one generated by the following grammar (where `'lt` denotes some arbitrary lifetime):\n\n```text\nP = &'lt S | &'lt mut S | Box<S> | Rc<S> | Arc<S> | Pin<P>\nS = Self | P\n\n```\n\nThe `Self` terminal in this grammar denotes a type resolving to the implementing type. This can also include the contextual type alias `Self`, other type aliases, or associated type projections resolving to the implementing type.\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::rc::Rc;\nuse std::sync::Arc;\nuse std::pin::Pin;\n// Examples of methods implemented on struct `Example`.\nstruct Example;\ntype Alias = Example;\ntrait Trait { type Output; }\nimpl Trait for Example { type Output = Example; }\nimpl Example {\n    fn by_value(self: Self) {}\n    fn by_ref(self: &Self) {}\n    fn by_ref_mut(self: &mut Self) {}\n    fn by_box(self: Box<Self>) {}\n    fn by_rc(self: Rc<Self>) {}\n    fn by_arc(self: Arc<Self>) {}\n    fn by_pin(self: Pin<&Self>) {}\n    fn explicit_type(self: Arc<Example>) {}\n    fn with_lifetime<'a>(self: &'a Self) {}\n    fn nested<'a>(self: &mut &'a Arc<Rc<Box<Alias>>>) {}\n    fn via_projection(self: <Example as Trait>::Output) {}\n}\n}\n```\n\nShorthand syntax can be used without specifying a type, which have the following equivalents:\n\n| Shorthand | Equivalent |\n| --- | --- |\n| `self` | `self: Self` |\n| `&'lifetime self` | `self: &'lifetime Self` |\n| `&'lifetime mut self` | `self: &'lifetime mut Self` |\n\n> **Note**: Lifetimes can be, and usually are, elided with this shorthand.\n\nIf the `self` parameter is prefixed with `mut`, it becomes a mutable variable, similar to regular parameters using a `mut` [identifier pattern](about:blank/patterns.html#identifier-patterns). For example:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Changer: Sized {\n    fn change(mut self) {}\n    fn modify(mut self: Box<Self>) {}\n}\n}\n```\n\nAs an example of methods on a trait, consider the following:\n\n```rust\n#![allow(unused)]\nfn main() {\ntype Surface = i32;\ntype BoundingBox = i32;\ntrait Shape {\n    fn draw(&self, surface: Surface);\n    fn bounding_box(&self) -> BoundingBox;\n}\n}\n```\n\nThis defines a trait with two methods. All values that have [implementations](items/implementations.html) of this trait while the trait is in scope can have their `draw` and `bounding_box` methods called.\n\n```rust\n#![allow(unused)]\nfn main() {\ntype Surface = i32;\ntype BoundingBox = i32;\ntrait Shape {\n    fn draw(&self, surface: Surface);\n    fn bounding_box(&self) -> BoundingBox;\n}\n\nstruct Circle {\n    // ...\n}\n\nimpl Shape for Circle {\n    // ...\n  fn draw(&self, _: Surface) {}\n  fn bounding_box(&self) -> BoundingBox { 0i32 }\n}\n\nimpl Circle {\n    fn new() -> Circle { Circle{} }\n}\n\nlet circle_shape = Circle::new();\nlet bounding_box = circle_shape.bounding_box();\n}\n```\n\n> **Edition Differences**: In the 2015 edition, it is possible to declare trait methods with anonymous parameters (e.g. `fn foo(u8)`). This is deprecated and an error as of the 2018 edition. All parameters must have an argument name.\n\n#### [Attributes on method parameters](#attributes-on-method-parameters)\n\nAttributes on method parameters follow the same rules and restrictions as [regular function parameters](about:blank/items/functions.html#attributes-on-function-parameters).\n\n## [Associated Types](#associated-types)\n\n_Associated types_ are [type aliases](items/type-aliases.html) associated with another type. Associated types cannot be defined in [inherent implementations](about:blank/items/implementations.html#inherent-implementations) nor can they be given a default implementation in traits.\n\nAn _associated type declaration_ declares a signature for associated type definitions. It is written in one of the following forms, where `Assoc` is the name of the associated type, `Params` is a comma-separated list of type, lifetime or const parameters, `Bounds` is a plus-separated list of trait bounds that the associated type must meet, and `WhereBounds` is a comma-separated list of bounds that the parameters must meet:\n\n```rust\ntype Assoc;\ntype Assoc: Bounds;\ntype Assoc<Params>;\ntype Assoc<Params>: Bounds;\ntype Assoc<Params> where WhereBounds;\ntype Assoc<Params>: Bounds where WhereBounds;\n```\n\nThe identifier is the name of the declared type alias. The optional trait bounds must be fulfilled by the implementations of the type alias. There is an implicit [`Sized`](about:blank/special-types-and-traits.html#sized) bound on associated types that can be relaxed using the special `?Sized` bound.\n\nAn _associated type definition_ defines a type alias for the implementation of a trait on a type. They are written similarly to an _associated type declaration_, but cannot contain `Bounds`, but instead must contain a `Type`:\n\n```rust\ntype Assoc = Type;\ntype Assoc<Params> = Type; // the type `Type` here may reference `Params`\ntype Assoc<Params> = Type where WhereBounds;\ntype Assoc<Params> where WhereBounds = Type; // deprecated, prefer the form above\n```\n\nIf a type `Item` has an associated type `Assoc` from a trait `Trait`, then `<Item as Trait>::Assoc` is a type that is an alias of the type specified in the associated type definition. Furthermore, if `Item` is a type parameter, then `Item::Assoc` can be used in type parameters.\n\nAssociated types may include [generic parameters](items/generics.html) and [where clauses](about:blank/items/generics.html#where-clauses); these are often referred to as _generic associated types_, or _GATs_. If the type `Thing` has an associated type `Item` from a trait `Trait` with the generics `<'a>` , the type can be named like `<Thing as Trait>::Item<'x>`, where `'x` is some lifetime in scope. In this case, `'x` will be used wherever `'a` appears in the associated type definitions on impls.\n\n```rust\ntrait AssociatedType {\n    // Associated type declaration\n    type Assoc;\n}\n\nstruct Struct;\n\nstruct OtherStruct;\n\nimpl AssociatedType for Struct {\n    // Associated type definition\n    type Assoc = OtherStruct;\n}\n\nimpl OtherStruct {\n    fn new() -> OtherStruct {\n        OtherStruct\n    }\n}\n\nfn main() {\n    // Usage of the associated type to refer to OtherStruct as <Struct as AssociatedType>::Assoc\n    let _other_struct: OtherStruct = <Struct as AssociatedType>::Assoc::new();\n}\n```\n\nAn example of associated types with generics and where clauses:\n\n```rust\nstruct ArrayLender<'a, T>(&'a mut [T; 16]);\n\ntrait Lend {\n    // Generic associated type declaration\n    type Lender<'a> where Self: 'a;\n    fn lend<'a>(&'a mut self) -> Self::Lender<'a>;\n}\n\nimpl<T> Lend for [T; 16] {\n    // Generic associated type definition\n    type Lender<'a> = ArrayLender<'a, T> where Self: 'a;\n\n    fn lend<'a>(&'a mut self) -> Self::Lender<'a> {\n        ArrayLender(self)\n    }\n}\n\nfn borrow<'a, T: Lend>(array: &'a mut T) -> <T as Lend>::Lender<'a> {\n    array.lend()\n}\n\n\nfn main() {\n    let mut array = [0usize; 16];\n    let lender = borrow(&mut array);\n}\n```\n\n### [Associated Types Container Example](#associated-types-container-example)\n\nConsider the following example of a `Container` trait. Notice that the type is available for use in the method signatures:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Container {\n    type E;\n    fn empty() -> Self;\n    fn insert(&mut self, elem: Self::E);\n}\n}\n```\n\nIn order for a type to implement this trait, it must not only provide implementations for every method, but it must specify the type `E`. Here's an implementation of `Container` for the standard library type `Vec`:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Container {\n    type E;\n    fn empty() -> Self;\n    fn insert(&mut self, elem: Self::E);\n}\nimpl<T> Container for Vec<T> {\n    type E = T;\n    fn empty() -> Vec<T> { Vec::new() }\n    fn insert(&mut self, x: T) { self.push(x); }\n}\n}\n```\n\n### [Relationship between `Bounds` and `WhereBounds`](#relationship-between-bounds-and-wherebounds)\n\nIn this example:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fmt::Debug;\ntrait Example {\n    type Output<T>: Ord where T: Debug;\n}\n}\n```\n\nGiven a reference to the associated type like `<X as Example>::Output<Y>`, the associated type itself must be `Ord`, and the type `Y` must be `Debug`.\n\n### [Required where clauses on generic associated types](#required-where-clauses-on-generic-associated-types)\n\nGeneric associated type declarations on traits currently may require a list of where clauses, dependent on functions in the trait and how the GAT is used. These rules may be loosened in the future; updates can be found [on the generic associated types initiative repository](https://rust-lang.github.io/generic-associated-types-initiative/explainer/required_bounds.html).\n\nIn a few words, these where clauses are required in order to maximize the allowed definitions of the associated type in impls. To do this, any clauses that _can be proven to hold_ on functions (using the parameters of the function or trait) where a GAT appears as an input or output must also be written on the GAT itself.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait LendingIterator {\n    type Item<'x> where Self: 'x;\n    fn next<'a>(&'a mut self) -> Self::Item<'a>;\n}\n}\n```\n\nIn the above, on the `next` function, we can prove that `Self: 'a`, because of the implied bounds from `&'a mut self`; therefore, we must write the equivalent bound on the GAT itself: `where Self: 'x`.\n\nWhen there are multiple functions in a trait that use the GAT, then the _intersection_ of the bounds from the different functions are used, rather than the union.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Check<T> {\n    type Checker<'x>;\n    fn create_checker<'a>(item: &'a T) -> Self::Checker<'a>;\n    fn do_check(checker: Self::Checker<'_>);\n}\n}\n```\n\nIn this example, no bounds are required on the `type Checker<'a>;`. While we know that `T: 'a` on `create_checker`, we do not know that on `do_check`. However, if `do_check` was commented out, then the `where T: 'x` bound would be required on `Checker`.\n\nThe bounds on associated types also propagate required where clauses.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Iterable {\n    type Item<'a> where Self: 'a;\n    type Iterator<'a>: Iterator<Item = Self::Item<'a>> where Self: 'a;\n    fn iter<'a>(&'a self) -> Self::Iterator<'a>;\n}\n}\n```\n\nHere, `where Self: 'a` is required on `Item` because of `iter`. However, `Item` is used in the bounds of `Iterator`, the `where Self: 'a` clause is also required there.\n\nFinally, any explicit uses of `'static` on GATs in the trait do not count towards the required bounds.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait StaticReturn {\n    type Y<'a>;\n    fn foo(&self) -> Self::Y<'static>;\n}\n}\n```\n\n## [Associated Constants](#associated-constants)\n\n_Associated constants_ are [constants](items/constant-items.html) associated with a type.\n\nAn _associated constant declaration_ declares a signature for associated constant definitions. It is written as `const`, then an identifier, then `:`, then a type, finished by a `;`.\n\nThe identifier is the name of the constant used in the path. The type is the type that the definition has to implement.\n\nAn _associated constant definition_ defines a constant associated with a type. It is written the same as a [constant item](items/constant-items.html).\n\nAssociated constant definitions undergo [constant evaluation](items/../const_eval.html) only when referenced. Further, definitions that include [generic parameters](items/generics.html) are evaluated after monomorphization.\n\n```rust\nstruct Struct;\nstruct GenericStruct<const ID: i32>;\n\nimpl Struct {\n    // Definition not immediately evaluated\n    const PANIC: () = panic!(\"compile-time panic\");\n}\n\nimpl<const ID: i32> GenericStruct<ID> {\n    // Definition not immediately evaluated\n    const NON_ZERO: () = if ID == 0 {\n        panic!(\"contradiction\")\n    };\n}\n\nfn main() {\n    // Referencing Struct::PANIC causes compilation error\n    let _ = Struct::PANIC;\n\n    // Fine, ID is not 0\n    let _ = GenericStruct::<1>::NON_ZERO;\n\n    // Compilation error from evaluating NON_ZERO with ID=0\n    let _ = GenericStruct::<0>::NON_ZERO;\n}\n```\n\n### [Associated Constants Examples](#associated-constants-examples)\n\nA basic example:\n\n```rust\ntrait ConstantId {\n    const ID: i32;\n}\n\nstruct Struct;\n\nimpl ConstantId for Struct {\n    const ID: i32 = 1;\n}\n\nfn main() {\n    assert_eq!(1, Struct::ID);\n}\n```\n\nUsing default values:\n\n```rust\ntrait ConstantIdDefault {\n    const ID: i32 = 1;\n}\n\nstruct Struct;\nstruct OtherStruct;\n\nimpl ConstantIdDefault for Struct {}\n\nimpl ConstantIdDefault for OtherStruct {\n    const ID: i32 = 5;\n}\n\nfn main() {\n    assert_eq!(1, Struct::ID);\n    assert_eq!(5, OtherStruct::ID);\n}\n```\n\n## [Attributes](#attributes-1)\n\n> **Syntax**  \n> _InnerAttribute_ :  \n>    `#` `!` `[` _Attr_ `]`\n> \n> _OuterAttribute_ :  \n>    `#` `[` _Attr_ `]`\n> \n> _Attr_ :  \n>    [_SimplePath_](about:blank/paths.html#simple-paths) _AttrInput_?\n> \n> _AttrInput_ :  \n>       [_DelimTokenTree_](macros.html)  \n>    | `=` [_Expression_](expressions.html)\n\nAn _attribute_ is a general, free-form metadatum that is interpreted according to name, convention, language, and compiler version. Attributes are modeled on Attributes in [ECMA-335](https://www.ecma-international.org/publications-and-standards/standards/ecma-335/), with the syntax coming from [ECMA-334](https://www.ecma-international.org/publications-and-standards/standards/ecma-334/) (C#).\n\n_Inner attributes_, written with a bang (`!`) after the hash (`#`), apply to the item that the attribute is declared within. _Outer attributes_, written without the bang after the hash, apply to the thing that follows the attribute.\n\nThe attribute consists of a path to the attribute, followed by an optional delimited token tree whose interpretation is defined by the attribute. Attributes other than macro attributes also allow the input to be an equals sign (`=`) followed by an expression. See the [meta item syntax](about:blank/attributes.html#meta-item-attribute-syntax) below for more details.\n\nAttributes can be classified into the following kinds:\n\n-   [Built-in attributes](about:blank/attributes.html#built-in-attributes-index)\n-   [Macro attributes](about:blank/procedural-macros.html#attribute-macros)\n-   [Derive macro helper attributes](about:blank/procedural-macros.html#derive-macro-helper-attributes)\n-   [Tool attributes](about:blank/attributes.html#tool-attributes)\n\nAttributes may be applied to many things in the language:\n\n-   All [item declarations](items.html) accept outer attributes while [external blocks](items/external-blocks.html), [functions](items/functions.html), [implementations](items/implementations.html), and [modules](items/modules.html) accept inner attributes.\n-   Most [statements](statements.html) accept outer attributes (see [Expression Attributes](about:blank/expressions.html#expression-attributes) for limitations on expression statements).\n-   [Block expressions](expressions/block-expr.html) accept outer and inner attributes, but only when they are the outer expression of an [expression statement](about:blank/statements.html#expression-statements) or the final expression of another block expression.\n-   [Enum](items/enumerations.html) variants and [struct](items/structs.html) and [union](items/unions.html) fields accept outer attributes.\n-   [Match expression arms](expressions/match-expr.html) accept outer attributes.\n-   [Generic lifetime or type parameter](items/generics.html) accept outer attributes.\n-   Expressions accept outer attributes in limited situations, see [Expression Attributes](about:blank/expressions.html#expression-attributes) for details.\n-   [Function](items/functions.html), [closure](expressions/closure-expr.html) and [function pointer](types/function-pointer.html) parameters accept outer attributes. This includes attributes on variadic parameters denoted with `...` in function pointers and [external blocks](about:blank/items/external-blocks.html#variadic-functions).\n\nSome examples of attributes:\n\n```rust\n#![allow(unused)]\nfn main() {\n// General metadata applied to the enclosing module or crate.\n#![crate_type = \"lib\"]\n\n// A function marked as a unit test\n#[test]\nfn test_foo() {\n    /* ... */\n}\n\n// A conditionally-compiled module\n#[cfg(target_os = \"linux\")]\nmod bar {\n    /* ... */\n}\n\n// A lint attribute used to suppress a warning/error\n#[allow(non_camel_case_types)]\ntype int8_t = i8;\n\n// Inner attribute applies to the entire function.\nfn some_unused_variables() {\n  #![allow(unused_variables)]\n\n  let x = ();\n  let y = ();\n  let z = ();\n}\n}\n```\n\nA \"meta item\" is the syntax used for the _Attr_ rule by most [built-in attributes](about:blank/attributes.html#built-in-attributes-index). It has the following grammar:\n\n> **Syntax**  \n> _MetaItem_ :  \n>       [_SimplePath_](about:blank/paths.html#simple-paths)  \n>    | [_SimplePath_](about:blank/paths.html#simple-paths) `=` [_Expression_](expressions.html)  \n>    | [_SimplePath_](about:blank/paths.html#simple-paths) `(` _MetaSeq_? `)`\n> \n> _MetaSeq_ :  \n>    _MetaItemInner_ ( `,` MetaItemInner )\\* `,`?\n> \n> _MetaItemInner_ :  \n>       _MetaItem_  \n>    | [_Expression_](expressions.html)\n\nExpressions in meta items must macro-expand to literal expressions, which must not include integer or float type suffixes. Expressions which are not literal expressions will be syntactically accepted (and can be passed to proc-macros), but will be rejected after parsing.\n\nNote that if the attribute appears within another macro, it will be expanded after that outer macro. For example, the following code will expand the `Serialize` proc-macro first, which must preserve the `include_str!` call in order for it to be expanded:\n\n```rust\n#[derive(Serialize)]\nstruct Foo {\n    #[doc = include_str!(\"x.md\")]\n    x: u32\n}\n```\n\nAdditionally, macros in attributes will be expanded only after all other attributes applied to the item:\n\n```rust\n#[macro_attr1] // expanded first\n#[doc = mac!()] // `mac!` is expanded fourth.\n#[macro_attr2] // expanded second\n#[derive(MacroDerive1, MacroDerive2)] // expanded third\nfn foo() {}\n```\n\nVarious built-in attributes use different subsets of the meta item syntax to specify their inputs. The following grammar rules show some commonly used forms:\n\n> **Syntax**  \n> _MetaWord_:  \n>    [IDENTIFIER](identifiers.html)\n> \n> _MetaNameValueStr_:  \n>    [IDENTIFIER](identifiers.html) `=` ([STRING\\_LITERAL](about:blank/tokens.html#string-literals) | [RAW\\_STRING\\_LITERAL](about:blank/tokens.html#raw-string-literals))\n> \n> _MetaListPaths_:  \n>    [IDENTIFIER](identifiers.html) `(` ( [_SimplePath_](about:blank/paths.html#simple-paths) (`,` [_SimplePath_](about:blank/paths.html#simple-paths))\\* `,`? )? `)`\n> \n> _MetaListIdents_:  \n>    [IDENTIFIER](identifiers.html) `(` ( [IDENTIFIER](identifiers.html) (`,` [IDENTIFIER](identifiers.html))\\* `,`? )? `)`\n> \n> _MetaListNameValueStr_:  \n>    [IDENTIFIER](identifiers.html) `(` ( _MetaNameValueStr_ (`,` _MetaNameValueStr_)\\* `,`? )? `)`\n\nSome examples of meta items are:\n\n| Style | Example |\n| --- | --- |\n| _MetaWord_ | `no_std` |\n| _MetaNameValueStr_ | `doc = \"example\"` |\n| _MetaListPaths_ | `allow(unused, clippy::inline_always)` |\n| _MetaListIdents_ | `macro_use(foo, bar)` |\n| _MetaListNameValueStr_ | `link(name = \"CoreFoundation\", kind = \"framework\")` |\n\n## [Active and inert attributes](#active-and-inert-attributes)\n\nAn attribute is either active or inert. During attribute processing, _active attributes_ remove themselves from the thing they are on while _inert attributes_ stay on.\n\nThe [`cfg`](about:blank/conditional-compilation.html#the-cfg-attribute) and [`cfg_attr`](about:blank/conditional-compilation.html#the-cfg_attr-attribute) attributes are active. The [`test`](about:blank/attributes/testing.html#the-test-attribute) attribute is inert when compiling for tests and active otherwise. [Attribute macros](about:blank/procedural-macros.html#attribute-macros) are active. All other attributes are inert.\n\nThe compiler may allow attributes for external tools where each tool resides in its own namespace in the [tool prelude](about:blank/names/preludes.html#tool-prelude). The first segment of the attribute path is the name of the tool, with one or more additional segments whose interpretation is up to the tool.\n\nWhen a tool is not in use, the tool's attributes are accepted without a warning. When the tool is in use, the tool is responsible for processing and interpretation of its attributes.\n\nTool attributes are not available if the [`no_implicit_prelude`](about:blank/names/preludes.html#the-no_implicit_prelude-attribute) attribute is used.\n\n```rust\n#![allow(unused)]\nfn main() {\n// Tells the rustfmt tool to not format the following element.\n#[rustfmt::skip]\nstruct S {\n}\n\n// Controls the \"cyclomatic complexity\" threshold for the clippy tool.\n#[clippy::cyclomatic_complexity = \"100\"]\npub fn f() {}\n}\n```\n\n> Note: `rustc` currently recognizes the tools \"clippy\", \"rustfmt\" and \"diagnostic\".\n\n## [Built-in attributes index](#built-in-attributes-index)\n\nThe following is an index of all built-in attributes.\n\n-   Conditional compilation\n    -   [`cfg`](about:blank/conditional-compilation.html#the-cfg-attribute) — Controls conditional compilation.\n    -   [`cfg_attr`](about:blank/conditional-compilation.html#the-cfg_attr-attribute) — Conditionally includes attributes.\n-   Testing\n    -   [`test`](about:blank/attributes/testing.html#the-test-attribute) — Marks a function as a test.\n    -   [`ignore`](about:blank/attributes/testing.html#the-ignore-attribute) — Disables a test function.\n    -   [`should_panic`](about:blank/attributes/testing.html#the-should_panic-attribute) — Indicates a test should generate a panic.\n-   Derive\n    -   [`derive`](attributes/derive.html) — Automatic trait implementations.\n    -   [`automatically_derived`](about:blank/attributes/derive.html#the-automatically_derived-attribute) — Marker for implementations created by `derive`.\n-   Macros\n    -   [`macro_export`](about:blank/macros-by-example.html#path-based-scope) — Exports a `macro_rules` macro for cross-crate usage.\n    -   [`macro_use`](about:blank/macros-by-example.html#the-macro_use-attribute) — Expands macro visibility, or imports macros from other crates.\n    -   [`proc_macro`](about:blank/procedural-macros.html#function-like-procedural-macros) — Defines a function-like macro.\n    -   [`proc_macro_derive`](about:blank/procedural-macros.html#derive-macros) — Defines a derive macro.\n    -   [`proc_macro_attribute`](about:blank/procedural-macros.html#attribute-macros) — Defines an attribute macro.\n-   Diagnostics\n    -   [`allow`](about:blank/attributes/diagnostics.html#lint-check-attributes), [`warn`](about:blank/attributes/diagnostics.html#lint-check-attributes), [`deny`](about:blank/attributes/diagnostics.html#lint-check-attributes), [`forbid`](about:blank/attributes/diagnostics.html#lint-check-attributes) — Alters the default lint level.\n    -   [`deprecated`](about:blank/attributes/diagnostics.html#the-deprecated-attribute) — Generates deprecation notices.\n    -   [`must_use`](about:blank/attributes/diagnostics.html#the-must_use-attribute) — Generates a lint for unused values.\n    -   [`diagnostic::on_unimplemented`](about:blank/attributes/diagnostics.html#the-diagnosticon_unimplemented-attribute) — Hints the compiler to emit a certain error message if a trait is not implemented.\n-   ABI, linking, symbols, and FFI\n    -   [`link`](about:blank/items/external-blocks.html#the-link-attribute) — Specifies a native library to link with an `extern` block.\n    -   [`link_name`](about:blank/items/external-blocks.html#the-link_name-attribute) — Specifies the name of the symbol for functions or statics in an `extern` block.\n    -   [`link_ordinal`](about:blank/items/external-blocks.html#the-link_ordinal-attribute) — Specifies the ordinal of the symbol for functions or statics in an `extern` block.\n    -   [`no_link`](about:blank/items/extern-crates.html#the-no_link-attribute) — Prevents linking an extern crate.\n    -   [`repr`](about:blank/type-layout.html#representations) — Controls type layout.\n    -   [`crate_type`](linkage.html) — Specifies the type of crate (library, executable, etc.).\n    -   [`no_main`](about:blank/crates-and-source-files.html#the-no_main-attribute) — Disables emitting the `main` symbol.\n    -   [`export_name`](about:blank/abi.html#the-export_name-attribute) — Specifies the exported symbol name for a function or static.\n    -   [`link_section`](about:blank/abi.html#the-link_section-attribute) — Specifies the section of an object file to use for a function or static.\n    -   [`no_mangle`](about:blank/abi.html#the-no_mangle-attribute) — Disables symbol name encoding.\n    -   [`used`](about:blank/abi.html#the-used-attribute) — Forces the compiler to keep a static item in the output object file.\n    -   [`crate_name`](about:blank/crates-and-source-files.html#the-crate_name-attribute) — Specifies the crate name.\n-   Code generation\n    -   [`inline`](about:blank/attributes/codegen.html#the-inline-attribute) — Hint to inline code.\n    -   [`cold`](about:blank/attributes/codegen.html#the-cold-attribute) — Hint that a function is unlikely to be called.\n    -   [`no_builtins`](about:blank/attributes/codegen.html#the-no_builtins-attribute) — Disables use of certain built-in functions.\n    -   [`target_feature`](about:blank/attributes/codegen.html#the-target_feature-attribute) — Configure platform-specific code generation.\n    -   [`track_caller`](about:blank/attributes/codegen.html#the-track_caller-attribute) - Pass the parent call location to `std::panic::Location::caller()`.\n    -   [`instruction_set`](about:blank/attributes/codegen.html#the-instruction_set-attribute) - Specify the instruction set used to generate a functions code\n-   Documentation\n    -   `doc` — Specifies documentation. See [The Rustdoc Book](../rustdoc/the-doc-attribute.html) for more information. [Doc comments](about:blank/comments.html#doc-comments) are transformed into `doc` attributes.\n-   Preludes\n    -   [`no_std`](about:blank/names/preludes.html#the-no_std-attribute) — Removes std from the prelude.\n    -   [`no_implicit_prelude`](about:blank/names/preludes.html#the-no_implicit_prelude-attribute) — Disables prelude lookups within a module.\n-   Modules\n    -   [`path`](about:blank/items/modules.html#the-path-attribute) — Specifies the filename for a module.\n-   Limits\n    -   [`recursion_limit`](about:blank/attributes/limits.html#the-recursion_limit-attribute) — Sets the maximum recursion limit for certain compile-time operations.\n    -   [`type_length_limit`](about:blank/attributes/limits.html#the-type_length_limit-attribute) — Sets the maximum size of a polymorphic type.\n-   Runtime\n    -   [`panic_handler`](about:blank/runtime.html#the-panic_handler-attribute) — Sets the function to handle panics.\n    -   [`global_allocator`](about:blank/runtime.html#the-global_allocator-attribute) — Sets the global memory allocator.\n    -   [`windows_subsystem`](about:blank/runtime.html#the-windows_subsystem-attribute) — Specifies the windows subsystem to link with.\n-   Features\n    -   `feature` — Used to enable unstable or experimental compiler features. See [The Unstable Book](../unstable-book/index.html) for features implemented in `rustc`.\n-   Type System\n    -   [`non_exhaustive`](about:blank/attributes/type_system.html#the-non_exhaustive-attribute) — Indicate that a type will have more fields/variants added in future.\n-   Debugger\n    -   [`debugger_visualizer`](about:blank/attributes/debugger.html#the-debugger_visualizer-attribute) — Embeds a file that specifies debugger output for a type.\n    -   [`collapse_debuginfo`](about:blank/attributes/debugger.html#the-collapse_debuginfo-attribute) — Controls how macro invocations are encoded in debuginfo.\n\n## [Testing attributes](#testing-attributes)\n\nThe following [attributes](attributes/../attributes.html) are used for specifying functions for performing tests. Compiling a crate in \"test\" mode enables building the test functions along with a test harness for executing the tests. Enabling the test mode also enables the [`test` conditional compilation option](about:blank/conditional-compilation.html#test).\n\n## [The `test` attribute](#the-test-attribute)\n\nThe _`test` attribute_ marks a function to be executed as a test. These functions are only compiled when in test mode. Test functions must be free, monomorphic functions that take no arguments, and the return type must implement the [`Termination`](attributes/../../std/process/trait.Termination.html) trait, for example:\n\n-   `()`\n-   `Result<T, E> where T: Termination, E: Debug`\n-   `!`\n\n> Note: The test mode is enabled by passing the `--test` argument to `rustc` or using `cargo test`.\n\nThe test harness calls the returned value's [`report`](about:blank/std/process/trait.Termination.html#tymethod.report) method, and classifies the test as passed or failed depending on whether the resulting [`ExitCode`](attributes/../../std/process/struct.ExitCode.html) represents successful termination. In particular:\n\n-   Tests that return `()` pass as long as they terminate and do not panic.\n-   Tests that return a `Result<(), E>` pass as long as they return `Ok(())`.\n-   Tests that return `ExitCode::SUCCESS` pass, and tests that return `ExitCode::FAILURE` fail.\n-   Tests that do not terminate neither pass nor fail.\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::io;\nfn setup_the_thing() -> io::Result<i32> { Ok(1) }\nfn do_the_thing(s: &i32) -> io::Result<()> { Ok(()) }\n#[test]\nfn test_the_thing() -> io::Result<()> {\n    let state = setup_the_thing()?; // expected to succeed\n    do_the_thing(&state)?;          // expected to succeed\n    Ok(())\n}\n}\n```\n\n## [The `ignore` attribute](#the-ignore-attribute)\n\nA function annotated with the `test` attribute can also be annotated with the `ignore` attribute. The _`ignore` attribute_ tells the test harness to not execute that function as a test. It will still be compiled when in test mode.\n\nThe `ignore` attribute may optionally be written with the [_MetaNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to specify a reason why the test is ignored.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[test]\n#[ignore = \"not yet implemented\"]\nfn mytest() {\n    // …\n}\n}\n```\n\n> **Note**: The `rustc` test harness supports the `--include-ignored` flag to force ignored tests to be run.\n\n## [The `should_panic` attribute](#the-should_panic-attribute)\n\nA function annotated with the `test` attribute that returns `()` can also be annotated with the `should_panic` attribute. The _`should_panic` attribute_ makes the test only pass if it actually panics.\n\nThe `should_panic` attribute may optionally take an input string that must appear within the panic message. If the string is not found in the message, then the test will fail. The string may be passed using the [_MetaNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax or the [_MetaListNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax with an `expected` field.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[test]\n#[should_panic(expected = \"values don't match\")]\nfn mytest() {\n    assert_eq!(1, 2, \"values don't match\");\n}\n}\n```\n\n## [Derive](#derive)\n\nThe _`derive` attribute_ allows new [items](attributes/../items.html) to be automatically generated for data structures. It uses the [_MetaListPaths_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to specify a list of traits to implement or paths to [derive macros](about:blank/procedural-macros.html#derive-macros) to process.\n\nFor example, the following will create an [`impl` item](attributes/../items/implementations.html) for the [`PartialEq`](attributes/../../std/cmp/trait.PartialEq.html) and [`Clone`](attributes/../../std/clone/trait.Clone.html) traits for `Foo`, and the type parameter `T` will be given the `PartialEq` or `Clone` constraints for the appropriate `impl`:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[derive(PartialEq, Clone)]\nstruct Foo<T> {\n    a: i32,\n    b: T,\n}\n}\n```\n\nThe generated `impl` for `PartialEq` is equivalent to\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Foo<T> { a: i32, b: T }\nimpl<T: PartialEq> PartialEq for Foo<T> {\n    fn eq(&self, other: &Foo<T>) -> bool {\n        self.a == other.a && self.b == other.b\n    }\n}\n}\n```\n\nYou can implement `derive` for your own traits through [procedural macros](about:blank/procedural-macros.html#derive-macros).\n\n## [The `automatically_derived` attribute](#the-automatically_derived-attribute)\n\nThe _`automatically_derived` attribute_ is automatically added to [implementations](attributes/../items/implementations.html) created by the `derive` attribute for built-in traits. It has no direct effect, but it may be used by tools and diagnostic lints to detect these automatically generated implementations.\n\n## [Diagnostic attributes](#diagnostic-attributes)\n\nThe following [attributes](attributes/../attributes.html) are used for controlling or generating diagnostic messages during compilation.\n\n## [Lint check attributes](#lint-check-attributes)\n\nA lint check names a potentially undesirable coding pattern, such as unreachable code or omitted documentation. The lint attributes `allow`, `warn`, `deny`, and `forbid` use the [_MetaListPaths_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to specify a list of lint names to change the lint level for the entity to which the attribute applies.\n\nFor any lint check `C`:\n\n-   `allow(C)` overrides the check for `C` so that violations will go unreported,\n-   `warn(C)` warns about violations of `C` but continues compilation.\n-   `deny(C)` signals an error after encountering a violation of `C`,\n-   `forbid(C)` is the same as `deny(C)`, but also forbids changing the lint level afterwards,\n\n> Note: The lint checks supported by `rustc` can be found via `rustc -W help`, along with their default settings and are documented in the [rustc book](attributes/../../rustc/lints/index.html).\n\n```rust\n#![allow(unused)]\nfn main() {\npub mod m1 {\n    // Missing documentation is ignored here\n    #[allow(missing_docs)]\n    pub fn undocumented_one() -> i32 { 1 }\n\n    // Missing documentation signals a warning here\n    #[warn(missing_docs)]\n    pub fn undocumented_too() -> i32 { 2 }\n\n    // Missing documentation signals an error here\n    #[deny(missing_docs)]\n    pub fn undocumented_end() -> i32 { 3 }\n}\n}\n```\n\nLint attributes can override the level specified from a previous attribute, as long as the level does not attempt to change a forbidden lint. Previous attributes are those from a higher level in the syntax tree, or from a previous attribute on the same entity as listed in left-to-right source order.\n\nThis example shows how one can use `allow` and `warn` to toggle a particular check on and off:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[warn(missing_docs)]\npub mod m2 {\n    #[allow(missing_docs)]\n    pub mod nested {\n        // Missing documentation is ignored here\n        pub fn undocumented_one() -> i32 { 1 }\n\n        // Missing documentation signals a warning here,\n        // despite the allow above.\n        #[warn(missing_docs)]\n        pub fn undocumented_two() -> i32 { 2 }\n    }\n\n    // Missing documentation signals a warning here\n    pub fn undocumented_too() -> i32 { 3 }\n}\n}\n```\n\nThis example shows how one can use `forbid` to disallow uses of `allow` for that lint check:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[forbid(missing_docs)]\npub mod m3 {\n    // Attempting to toggle warning signals an error here\n    #[allow(missing_docs)]\n    /// Returns 2.\n    pub fn undocumented_too() -> i32 { 2 }\n}\n}\n```\n\n> Note: `rustc` allows setting lint levels on the [command-line](about:blank/rustc/lints/levels.html#via-compiler-flag), and also supports [setting caps](about:blank/rustc/lints/levels.html#capping-lints) on the lints that are reported.\n\n### [Lint groups](#lint-groups)\n\nLints may be organized into named groups so that the level of related lints can be adjusted together. Using a named group is equivalent to listing out the lints within that group.\n\n```rust\n#![allow(unused)]\nfn main() {\n// This allows all lints in the \"unused\" group.\n#[allow(unused)]\n// This overrides the \"unused_must_use\" lint from the \"unused\"\n// group to deny.\n#[deny(unused_must_use)]\nfn example() {\n    // This does not generate a warning because the \"unused_variables\"\n    // lint is in the \"unused\" group.\n    let x = 1;\n    // This generates an error because the result is unused and\n    // \"unused_must_use\" is marked as \"deny\".\n    std::fs::remove_file(\"some_file\"); // ERROR: unused `Result` that must be used\n}\n}\n```\n\nThere is a special group named \"warnings\" which includes all lints at the \"warn\" level. The \"warnings\" group ignores attribute order and applies to all lints that would otherwise warn within the entity.\n\n```rust\n#![allow(unused)]\nfn main() {\nunsafe fn an_unsafe_fn() {}\n// The order of these two attributes does not matter.\n#[deny(warnings)]\n// The unsafe_code lint is normally \"allow\" by default.\n#[warn(unsafe_code)]\nfn example_err() {\n    // This is an error because the `unsafe_code` warning has\n    // been lifted to \"deny\".\n    unsafe { an_unsafe_fn() } // ERROR: usage of `unsafe` block\n}\n}\n```\n\n### [Tool lint attributes](#tool-lint-attributes)\n\nTool lints allows using scoped lints, to `allow`, `warn`, `deny` or `forbid` lints of certain tools.\n\nTool lints only get checked when the associated tool is active. If a lint attribute, such as `allow`, references a nonexistent tool lint, the compiler will not warn about the nonexistent lint until you use the tool.\n\nOtherwise, they work just like regular lint attributes:\n\n```rust\n// set the entire `pedantic` clippy lint group to warn\n#![warn(clippy::pedantic)]\n// silence warnings from the `filter_map` clippy lint\n#![allow(clippy::filter_map)]\n\nfn main() {\n    // ...\n}\n\n// silence the `cmp_nan` clippy lint just for this function\n#[allow(clippy::cmp_nan)]\nfn foo() {\n    // ...\n}\n```\n\n> Note: `rustc` currently recognizes the tool lints for \"[clippy](https://github.com/rust-lang/rust-clippy)\" and \"[rustdoc](attributes/../../rustdoc/lints.html)\".\n\n## [The `deprecated` attribute](#the-deprecated-attribute)\n\nThe _`deprecated` attribute_ marks an item as deprecated. `rustc` will issue warnings on usage of `#[deprecated]` items. `rustdoc` will show item deprecation, including the `since` version and `note`, if available.\n\nThe `deprecated` attribute has several forms:\n\n-   `deprecated` — Issues a generic message.\n-   `deprecated = \"message\"` — Includes the given string in the deprecation message.\n-   [_MetaListNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax with two optional fields:\n    -   `since` — Specifies a version number when the item was deprecated. `rustc` does not currently interpret the string, but external tools like [Clippy](https://github.com/rust-lang/rust-clippy) may check the validity of the value.\n    -   `note` — Specifies a string that should be included in the deprecation message. This is typically used to provide an explanation about the deprecation and preferred alternatives.\n\nThe `deprecated` attribute may be applied to any [item](attributes/../items.html), [trait item](attributes/../items/traits.html), [enum variant](attributes/../items/enumerations.html), [struct field](attributes/../items/structs.html), [external block item](attributes/../items/external-blocks.html), or [macro definition](attributes/../macros-by-example.html). It cannot be applied to [trait implementation items](about:blank/items/implementations.html#trait-implementations). When applied to an item containing other items, such as a [module](attributes/../items/modules.html) or [implementation](attributes/../items/implementations.html), all child items inherit the deprecation attribute.\n\nHere is an example:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[deprecated(since = \"5.2.0\", note = \"foo was rarely used. Users should instead use bar\")]\npub fn foo() {}\n\npub fn bar() {}\n}\n```\n\nThe [RFC](https://github.com/rust-lang/rfcs/blob/master/text/1270-deprecation.md) contains motivations and more details.\n\n## [The `must_use` attribute](#the-must_use-attribute)\n\nThe _`must_use` attribute_ is used to issue a diagnostic warning when a value is not \"used\". It can be applied to user-defined composite types ([`struct`s](attributes/../items/structs.html), [`enum`s](attributes/../items/enumerations.html), and [`union`s](attributes/../items/unions.html)), [functions](attributes/../items/functions.html), and [traits](attributes/../items/traits.html).\n\nThe `must_use` attribute may include a message by using the [_MetaNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax such as `#[must_use = \"example message\"]`. The message will be given alongside the warning.\n\nWhen used on user-defined composite types, if the [expression](attributes/../expressions.html) of an [expression statement](about:blank/statements.html#expression-statements) has that type, then the `unused_must_use` lint is violated.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[must_use]\nstruct MustUse {\n    // some fields\n}\n\nimpl MustUse {\n  fn new() -> MustUse { MustUse {} }\n}\n\n// Violates the `unused_must_use` lint.\nMustUse::new();\n}\n```\n\nWhen used on a function, if the [expression](attributes/../expressions.html) of an [expression statement](about:blank/statements.html#expression-statements) is a [call expression](attributes/../expressions/call-expr.html) to that function, then the `unused_must_use` lint is violated.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[must_use]\nfn five() -> i32 { 5i32 }\n\n// Violates the unused_must_use lint.\nfive();\n}\n```\n\nWhen used on a [trait declaration](attributes/../items/traits.html), a [call expression](attributes/../expressions/call-expr.html) of an [expression statement](about:blank/statements.html#expression-statements) to a function that returns an [impl trait](attributes/../types/impl-trait.html) or a [dyn trait](attributes/../types/trait-object.html) of that trait violates the `unused_must_use` lint.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[must_use]\ntrait Critical {}\nimpl Critical for i32 {}\n\nfn get_critical() -> impl Critical {\n    4i32\n}\n\n// Violates the `unused_must_use` lint.\nget_critical();\n}\n```\n\nWhen used on a function in a trait declaration, then the behavior also applies when the call expression is a function from an implementation of the trait.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Trait {\n    #[must_use]\n    fn use_me(&self) -> i32;\n}\n\nimpl Trait for i32 {\n    fn use_me(&self) -> i32 { 0i32 }\n}\n\n// Violates the `unused_must_use` lint.\n5i32.use_me();\n}\n```\n\nWhen used on a function in a trait implementation, the attribute does nothing.\n\n> Note: Trivial no-op expressions containing the value will not violate the lint. Examples include wrapping the value in a type that does not implement [`Drop`](about:blank/special-types-and-traits.html#drop) and then not using that type and being the final expression of a [block expression](attributes/../expressions/block-expr.html) that is not used.\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> #[must_use]\n> fn five() -> i32 { 5i32 }\n> \n> // None of these violate the unused_must_use lint.\n> (five(),);\n> Some(five());\n> { five() };\n> if true { five() } else { 0i32 };\n> match true {\n>     _ => five()\n> };\n> }\n> ```\n\n> Note: It is idiomatic to use a [let statement](about:blank/statements.html#let-statements) with a pattern of `_` when a must-used value is purposely discarded.\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> #[must_use]\n> fn five() -> i32 { 5i32 }\n> \n> // Does not violate the unused_must_use lint.\n> let _ = five();\n> }\n> ```\n\nThe `#[diagnostic]` attribute namespace is a home for attributes to influence compile-time error messages. The hints provided by these attributes are not guaranteed to be used. Unknown attributes in this namespace are accepted, though they may emit warnings for unused attributes. Additionally, invalid inputs to known attributes will typically be a warning (see the attribute definitions for details). This is meant to allow adding or discarding attributes and changing inputs in the future to allow changes without the need to keep the non-meaningful attributes or options working.\n\n### [The `diagnostic::on_unimplemented` attribute](#the-diagnosticon_unimplemented-attribute)\n\nThe `#[diagnostic::on_unimplemented]` attribute is a hint to the compiler to supplement the error message that would normally be generated in scenarios where a trait is required but not implemented on a type. The attribute should be placed on a [trait declaration](attributes/../items/traits.html), though it is not an error to be located in other positions. The attribute uses the [_MetaListNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to specify its inputs, though any malformed input to the attribute is not considered as an error to provide both forwards and backwards compatibility. The following keys have the given meaning:\n\n-   `message` — The text for the top level error message.\n-   `label` — The text for the label shown inline in the broken code in the error message.\n-   `note` — Provides additional notes.\n\nThe `note` option can appear several times, which results in several note messages being emitted. If any of the other options appears several times the first occurrence of the relevant option specifies the actually used value. Any other occurrence generates an lint warning. For any other non-existing option a lint-warning is generated.\n\nAll three options accept a string as an argument, interpreted using the same formatting as a [`std::fmt`](attributes/../../std/fmt/index.html) string. Format parameters with the given named parameter will be replaced with the following text:\n\n-   `{Self}` — The name of the type implementing the trait.\n-   `{` _GenericParameterName_ `}` — The name of the generic argument's type for the given generic parameter.\n\nAny other format parameter will generate a warning, but will otherwise be included in the string as-is.\n\nInvalid format strings may generate a warning, but are otherwise allowed, but may not display as intended. Format specifiers may generate a warning, but are otherwise ignored.\n\nIn this example:\n\n```rust\n#[diagnostic::on_unimplemented(\n    message = \"My Message for `ImportantTrait<{A}>` implemented for `{Self}`\",\n    label = \"My Label\",\n    note = \"Note 1\",\n    note = \"Note 2\"\n)]\ntrait ImportantTrait<A> {}\n\nfn use_my_trait(_: impl ImportantTrait<i32>) {}\n\nfn main() {\n    use_my_trait(String::new());\n}\n```\n\nthe compiler may generate an error message which looks like this:\n\n```text\nerror[E0277]: My Message for `ImportantTrait<i32>` implemented for `String`\n  --> src/main.rs:14:18\n   |\n14 |     use_my_trait(String::new());\n   |     ------------ ^^^^^^^^^^^^^ My Label\n   |     |\n   |     required by a bound introduced by this call\n   |\n   = help: the trait `ImportantTrait<i32>` is not implemented for `String`\n   = note: Note 1\n   = note: Note 2\n\n```\n\n## [Code generation attributes](#code-generation-attributes)\n\nThe following [attributes](attributes/../attributes.html) are used for controlling code generation.\n\n## [Optimization hints](#optimization-hints)\n\nThe `cold` and `inline` [attributes](attributes/../attributes.html) give suggestions to generate code in a way that may be faster than what it would do without the hint. The attributes are only hints, and may be ignored.\n\nBoth attributes can be used on [functions](attributes/../items/functions.html). When applied to a function in a [trait](attributes/../items/traits.html), they apply only to that function when used as a default function for a trait implementation and not to all trait implementations. The attributes have no effect on a trait function without a body.\n\n### [The `inline` attribute](#the-inline-attribute)\n\nThe _`inline` [attribute](attributes/../attributes.html)_ suggests that a copy of the attributed function should be placed in the caller, rather than generating code to call the function where it is defined.\n\n> _**Note**_: The `rustc` compiler automatically inlines functions based on internal heuristics. Incorrectly inlining functions can make the program slower, so this attribute should be used with care.\n\nThere are three ways to use the inline attribute:\n\n-   `#[inline]` _suggests_ performing an inline expansion.\n-   `#[inline(always)]` _suggests_ that an inline expansion should always be performed.\n-   `#[inline(never)]` _suggests_ that an inline expansion should never be performed.\n\n> _**Note**_: `#[inline]` in every form is a hint, with no _requirements_ on the language to place a copy of the attributed function in the caller.\n\n### [The `cold` attribute](#the-cold-attribute)\n\nThe _`cold` [attribute](attributes/../attributes.html)_ suggests that the attributed function is unlikely to be called.\n\n## [The `no_builtins` attribute](#the-no_builtins-attribute)\n\nThe _`no_builtins` [attribute](attributes/../attributes.html)_ may be applied at the crate level to disable optimizing certain code patterns to invocations of library functions that are assumed to exist.\n\n## [The `target_feature` attribute](#the-target_feature-attribute)\n\nThe _`target_feature` [attribute](attributes/../attributes.html)_ may be applied to a function to enable code generation of that function for specific platform architecture features. It uses the [_MetaListNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax with a single key of `enable` whose value is a string of comma-separated feature names to enable.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[cfg(target_feature = \"avx2\")]\n#[target_feature(enable = \"avx2\")]\nunsafe fn foo_avx2() {}\n}\n```\n\nEach [target architecture](about:blank/conditional-compilation.html#target_arch) has a set of features that may be enabled. It is an error to specify a feature for a target architecture that the crate is not being compiled for.\n\nIt is [undefined behavior](attributes/../behavior-considered-undefined.html) to call a function that is compiled with a feature that is not supported on the current platform the code is running on, _except_ if the platform explicitly documents this to be safe.\n\nFunctions marked with `target_feature` are not inlined into a context that does not support the given features. The `#[inline(always)]` attribute may not be used with a `target_feature` attribute.\n\n### [Available features](#available-features)\n\nThe following is a list of the available feature names.\n\n#### [`x86` or `x86_64`](#x86-or-x86_64)\n\nExecuting code with unsupported features is undefined behavior on this platform. Hence this platform requires that `#[target_feature]` is only applied to [`unsafe` functions](attributes/../unsafe-keyword.html).\n\n| Feature | Implicitly Enables | Description |\n| --- | --- | --- |\n| `adx` |  | [ADX](https://en.wikipedia.org/wiki/Intel_ADX) — Multi-Precision Add-Carry Instruction Extensions |\n| `aes` | `sse2` | [AES](https://en.wikipedia.org/wiki/AES_instruction_set) — Advanced Encryption Standard |\n| `avx` | `sse4.2` | [AVX](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions) — Advanced Vector Extensions |\n| `avx2` | `avx` | [AVX2](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#AVX2) — Advanced Vector Extensions 2 |\n| `bmi1` |  | [BMI1](https://en.wikipedia.org/wiki/Bit_Manipulation_Instruction_Sets) — Bit Manipulation Instruction Sets |\n| `bmi2` |  | [BMI2](https://en.wikipedia.org/wiki/Bit_Manipulation_Instruction_Sets#BMI2) — Bit Manipulation Instruction Sets 2 |\n| `cmpxchg16b` |  | [`cmpxchg16b`](https://www.felixcloutier.com/x86/cmpxchg8b:cmpxchg16b) - Compares and exchange 16 bytes (128 bits) of data atomically |\n| `f16c` | `avx` | [F16C](https://en.wikipedia.org/wiki/F16C) — 16-bit floating point conversion instructions |\n| `fma` | `avx` | [FMA3](https://en.wikipedia.org/wiki/FMA_instruction_set) — Three-operand fused multiply-add |\n| `fxsr` |  | [`fxsave`](https://www.felixcloutier.com/x86/fxsave) and [`fxrstor`](https://www.felixcloutier.com/x86/fxrstor) — Save and restore x87 FPU, MMX Technology, and SSE State |\n| `lzcnt` |  | [`lzcnt`](https://www.felixcloutier.com/x86/lzcnt) — Leading zeros count |\n| `movbe` |  | [`movbe`](https://www.felixcloutier.com/x86/movbe) - Move data after swapping bytes |\n| `pclmulqdq` | `sse2` | [`pclmulqdq`](https://www.felixcloutier.com/x86/pclmulqdq) — Packed carry-less multiplication quadword |\n| `popcnt` |  | [`popcnt`](https://www.felixcloutier.com/x86/popcnt) — Count of bits set to 1 |\n| `rdrand` |  | [`rdrand`](https://en.wikipedia.org/wiki/RdRand) — Read random number |\n| `rdseed` |  | [`rdseed`](https://en.wikipedia.org/wiki/RdRand) — Read random seed |\n| `sha` | `sse2` | [SHA](https://en.wikipedia.org/wiki/Intel_SHA_extensions) — Secure Hash Algorithm |\n| `sse` |  | [SSE](https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions) — Streaming SIMD Extensions |\n| `sse2` | `sse` | [SSE2](https://en.wikipedia.org/wiki/SSE2) — Streaming SIMD Extensions 2 |\n| `sse3` | `sse2` | [SSE3](https://en.wikipedia.org/wiki/SSE3) — Streaming SIMD Extensions 3 |\n| `sse4.1` | `ssse3` | [SSE4.1](https://en.wikipedia.org/wiki/SSE4#SSE4.1) — Streaming SIMD Extensions 4.1 |\n| `sse4.2` | `sse4.1` | [SSE4.2](https://en.wikipedia.org/wiki/SSE4#SSE4.2) — Streaming SIMD Extensions 4.2 |\n| `ssse3` | `sse3` | [SSSE3](https://en.wikipedia.org/wiki/SSSE3) — Supplemental Streaming SIMD Extensions 3 |\n| `xsave` |  | [`xsave`](https://www.felixcloutier.com/x86/xsave) — Save processor extended states |\n| `xsavec` |  | [`xsavec`](https://www.felixcloutier.com/x86/xsavec) — Save processor extended states with compaction |\n| `xsaveopt` |  | [`xsaveopt`](https://www.felixcloutier.com/x86/xsaveopt) — Save processor extended states optimized |\n| `xsaves` |  | [`xsaves`](https://www.felixcloutier.com/x86/xsaves) — Save processor extended states supervisor |\n\n#### [`aarch64`](#aarch64)\n\nThis platform requires that `#[target_feature]` is only applied to [`unsafe` functions](attributes/../unsafe-keyword.html).\n\nFurther documentation on these features can be found in the [ARM Architecture Reference Manual](https://developer.arm.com/documentation/ddi0487/latest), or elsewhere on [developer.arm.com](https://developer.arm.com/).\n\n> _**Note**_: The following pairs of features should both be marked as enabled or disabled together if used:\n> \n> -   `paca` and `pacg`, which LLVM currently implements as one feature.\n\n| Feature | Implicitly Enables | Feature Name |\n| --- | --- | --- |\n| `aes` | `neon` | FEAT\\_AES & FEAT\\_PMULL - Advanced SIMD AES & PMULL instructions |\n| `bf16` |  | FEAT\\_BF16 - BFloat16 instructions |\n| `bti` |  | FEAT\\_BTI - Branch Target Identification |\n| `crc` |  | FEAT\\_CRC - CRC32 checksum instructions |\n| `dit` |  | FEAT\\_DIT - Data Independent Timing instructions |\n| `dotprod` |  | FEAT\\_DotProd - Advanced SIMD Int8 dot product instructions |\n| `dpb` |  | FEAT\\_DPB - Data cache clean to point of persistence |\n| `dpb2` |  | FEAT\\_DPB2 - Data cache clean to point of deep persistence |\n| `f32mm` | `sve` | FEAT\\_F32MM - SVE single-precision FP matrix multiply instruction |\n| `f64mm` | `sve` | FEAT\\_F64MM - SVE double-precision FP matrix multiply instruction |\n| `fcma` | `neon` | FEAT\\_FCMA - Floating point complex number support |\n| `fhm` | `fp16` | FEAT\\_FHM - Half-precision FP FMLAL instructions |\n| `flagm` |  | FEAT\\_FlagM - Conditional flag manipulation |\n| `fp16` | `neon` | FEAT\\_FP16 - Half-precision FP data processing |\n| `frintts` |  | FEAT\\_FRINTTS - Floating-point to int helper instructions |\n| `i8mm` |  | FEAT\\_I8MM - Int8 Matrix Multiplication |\n| `jsconv` | `neon` | FEAT\\_JSCVT - JavaScript conversion instruction |\n| `lse` |  | FEAT\\_LSE - Large System Extension |\n| `lor` |  | FEAT\\_LOR - Limited Ordering Regions extension |\n| `mte` |  | FEAT\\_MTE & FEAT\\_MTE2 - Memory Tagging Extension |\n| `neon` |  | FEAT\\_FP & FEAT\\_AdvSIMD - Floating Point and Advanced SIMD extension |\n| `pan` |  | FEAT\\_PAN - Privileged Access-Never extension |\n| `paca` |  | FEAT\\_PAuth - Pointer Authentication (address authentication) |\n| `pacg` |  | FEAT\\_PAuth - Pointer Authentication (generic authentication) |\n| `pmuv3` |  | FEAT\\_PMUv3 - Performance Monitors extension (v3) |\n| `rand` |  | FEAT\\_RNG - Random Number Generator |\n| `ras` |  | FEAT\\_RAS & FEAT\\_RASv1p1 - Reliability, Availability and Serviceability extension |\n| `rcpc` |  | FEAT\\_LRCPC - Release consistent Processor Consistent |\n| `rcpc2` | `rcpc` | FEAT\\_LRCPC2 - RcPc with immediate offsets |\n| `rdm` |  | FEAT\\_RDM - Rounding Double Multiply accumulate |\n| `sb` |  | FEAT\\_SB - Speculation Barrier |\n| `sha2` | `neon` | FEAT\\_SHA1 & FEAT\\_SHA256 - Advanced SIMD SHA instructions |\n| `sha3` | `sha2` | FEAT\\_SHA512 & FEAT\\_SHA3 - Advanced SIMD SHA instructions |\n| `sm4` | `neon` | FEAT\\_SM3 & FEAT\\_SM4 - Advanced SIMD SM3/4 instructions |\n| `spe` |  | FEAT\\_SPE - Statistical Profiling Extension |\n| `ssbs` |  | FEAT\\_SSBS & FEAT\\_SSBS2 - Speculative Store Bypass Safe |\n| `sve` | `fp16` | FEAT\\_SVE - Scalable Vector Extension |\n| `sve2` | `sve` | FEAT\\_SVE2 - Scalable Vector Extension 2 |\n| `sve2-aes` | `sve2`, `aes` | FEAT\\_SVE\\_AES - SVE AES instructions |\n| `sve2-sm4` | `sve2`, `sm4` | FEAT\\_SVE\\_SM4 - SVE SM4 instructions |\n| `sve2-sha3` | `sve2`, `sha3` | FEAT\\_SVE\\_SHA3 - SVE SHA3 instructions |\n| `sve2-bitperm` | `sve2` | FEAT\\_SVE\\_BitPerm - SVE Bit Permute |\n| `tme` |  | FEAT\\_TME - Transactional Memory Extension |\n| `vh` |  | FEAT\\_VHE - Virtualization Host Extensions |\n\n#### [`riscv32` or `riscv64`](#riscv32-or-riscv64)\n\nThis platform requires that `#[target_feature]` is only applied to [`unsafe` functions](attributes/../unsafe-keyword.html).\n\nFurther documentation on these features can be found in their respective specification. Many specifications are described in the [RISC-V ISA Manual](https://github.com/riscv/riscv-isa-manual) or in another manual hosted on the [RISC-V GitHub Account](https://github.com/riscv).\n\n| Feature | Implicitly Enables | Description |\n| --- | --- | --- |\n| `a` |  | [A](https://github.com/riscv/riscv-isa-manual/blob/de46343a245c6ee1f7b1a40c92fe1a86bd4f4978/src/a-st-ext.adoc) — Atomic instructions |\n| `c` |  | [C](https://github.com/riscv/riscv-isa-manual/blob/de46343a245c6ee1f7b1a40c92fe1a86bd4f4978/src/c-st-ext.adoc) — Compressed instructions |\n| `m` |  | [M](https://github.com/riscv/riscv-isa-manual/blob/de46343a245c6ee1f7b1a40c92fe1a86bd4f4978/src/m-st-ext.adoc) — Integer Multiplication and Division instructions |\n| `zb` | `zba`, `zbc`, `zbs` | [Zb](https://github.com/riscv/riscv-bitmanip) — Bit Manipulation instructions |\n| `zba` |  | [Zba](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zba.adoc) — Address Generation instructions |\n| `zbb` |  | [Zbb](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbb.adoc) — Basic bit-manipulation |\n| `zbc` |  | [Zbc](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbc.adoc) — Carry-less multiplication |\n| `zbkb` |  | [Zbkb](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbkb.adoc) — Bit Manipulation Instructions for Cryptography |\n| `zbkc` |  | [Zbkc](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbc.adoc) — Carry-less multiplication for Cryptography |\n| `zbkx` |  | [Zbkx](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbkx.adoc) — Crossbar permutations |\n| `zbs` |  | [Zbs](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbs.adoc) — Single-bit instructions |\n| `zk` | `zkn`, `zkr`, `zks`, `zkt`, `zbkb`, `zbkc`, `zkbx` | [Zk](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zk.adoc) — Scalar Cryptography |\n| `zkn` | `zknd`, `zkne`, `zknh`, `zbkb`, `zbkc`, `zkbx` | [Zkn](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zkn.adoc) — NIST Algorithm suite extension |\n| `zknd` |  | [Zknd](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zknd.adoc) — NIST Suite: AES Decryption |\n| `zkne` |  | [Zkne](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zkne.adoc) — NIST Suite: AES Encryption |\n| `zknh` |  | [Zknh](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zknh.adoc) — NIST Suite: Hash Function Instructions |\n| `zkr` |  | [Zkr](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zkr.adoc) — Entropy Source Extension |\n| `zks` | `zksed`, `zksh`, `zbkb`, `zbkc`, `zkbx` | [Zks](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zks.adoc) — ShangMi Algorithm Suite |\n| `zksed` |  | [Zksed](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zksed.adoc) — ShangMi Suite: SM4 Block Cipher Instructions |\n| `zksh` |  | [Zksh](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zksh.adoc) — ShangMi Suite: SM3 Hash Function Instructions |\n| `zkt` |  | [Zkt](https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zkt.adoc) — Data Independent Execution Latency Subset |\n\n#### [`wasm32` or `wasm64`](#wasm32-or-wasm64)\n\n`#[target_feature]` may be used with both safe and [`unsafe` functions](attributes/../unsafe-keyword.html) on Wasm platforms. It is impossible to cause undefined behavior via the `#[target_feature]` attribute because attempting to use instructions unsupported by the Wasm engine will fail at load time without the risk of being interpreted in a way different from what the compiler expected.\n\n### [Additional information](#additional-information)\n\nSee the [`target_feature` conditional compilation option](about:blank/conditional-compilation.html#target_feature) for selectively enabling or disabling compilation of code based on compile-time settings. Note that this option is not affected by the `target_feature` attribute, and is only driven by the features enabled for the entire crate.\n\nSee the [`is_x86_feature_detected`](attributes/../../std/arch/macro.is_x86_feature_detected.html) or [`is_aarch64_feature_detected`](attributes/../../std/arch/macro.is_aarch64_feature_detected.html) macros in the standard library for runtime feature detection on these platforms.\n\n> Note: `rustc` has a default set of features enabled for each target and CPU. The CPU may be chosen with the [`-C target-cpu`](about:blank/rustc/codegen-options/index.html#target-cpu) flag. Individual features may be enabled or disabled for an entire crate with the [`-C target-feature`](about:blank/rustc/codegen-options/index.html#target-feature) flag.\n\n## [The `track_caller` attribute](#the-track_caller-attribute)\n\nThe `track_caller` attribute may be applied to any function with [`\"Rust\"` ABI](about:blank/items/external-blocks.html#abi) with the exception of the entry point `fn main`. When applied to functions and methods in trait declarations, the attribute applies to all implementations. If the trait provides a default implementation with the attribute, then the attribute also applies to override implementations.\n\nWhen applied to a function in an `extern` block the attribute must also be applied to any linked implementations, otherwise undefined behavior results. When applied to a function which is made available to an `extern` block, the declaration in the `extern` block must also have the attribute, otherwise undefined behavior results.\n\n### [Behavior](#behavior)\n\nApplying the attribute to a function `f` allows code within `f` to get a hint of the [`Location`](attributes/../../core/panic/struct.Location.html) of the \"topmost\" tracked call that led to `f`'s invocation. At the point of observation, an implementation behaves as if it walks up the stack from `f`'s frame to find the nearest frame of an _unattributed_ function `outer`, and it returns the [`Location`](attributes/../../core/panic/struct.Location.html) of the tracked call in `outer`.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[track_caller]\nfn f() {\n    println!(\"{}\", std::panic::Location::caller());\n}\n}\n```\n\n> Note: `core` provides [`core::panic::Location::caller`](about:blank/core/panic/struct.Location.html#method.caller) for observing caller locations. It wraps the [`core::intrinsics::caller_location`](attributes/../../core/intrinsics/fn.caller_location.html) intrinsic implemented by `rustc`.\n\n> Note: because the resulting `Location` is a hint, an implementation may halt its walk up the stack early. See [Limitations](about:blank/attributes/codegen.html#limitations) for important caveats.\n\n#### [Examples](#examples-2)\n\nWhen `f` is called directly by `calls_f`, code in `f` observes its callsite within `calls_f`:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[track_caller]\nfn f() {\n    println!(\"{}\", std::panic::Location::caller());\n}\nfn calls_f() {\n    f(); // <-- f() prints this location\n}\n}\n```\n\nWhen `f` is called by another attributed function `g` which is in turn called by `calls_g`, code in both `f` and `g` observes `g`'s callsite within `calls_g`:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[track_caller]\nfn f() {\n    println!(\"{}\", std::panic::Location::caller());\n}\n#[track_caller]\nfn g() {\n    println!(\"{}\", std::panic::Location::caller());\n    f();\n}\n\nfn calls_g() {\n    g(); // <-- g() prints this location twice, once itself and once from f()\n}\n}\n```\n\nWhen `g` is called by another attributed function `h` which is in turn called by `calls_h`, all code in `f`, `g`, and `h` observes `h`'s callsite within `calls_h`:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[track_caller]\nfn f() {\n    println!(\"{}\", std::panic::Location::caller());\n}\n#[track_caller]\nfn g() {\n    println!(\"{}\", std::panic::Location::caller());\n    f();\n}\n#[track_caller]\nfn h() {\n    println!(\"{}\", std::panic::Location::caller());\n    g();\n}\n\nfn calls_h() {\n    h(); // <-- prints this location three times, once itself, once from g(), once from f()\n}\n}\n```\n\nAnd so on.\n\n### [Limitations](#limitations)\n\nThis information is a hint and implementations are not required to preserve it.\n\nIn particular, coercing a function with `#[track_caller]` to a function pointer creates a shim which appears to observers to have been called at the attributed function's definition site, losing actual caller information across virtual calls. A common example of this coercion is the creation of a trait object whose methods are attributed.\n\n> Note: The aforementioned shim for function pointers is necessary because `rustc` implements `track_caller` in a codegen context by appending an implicit parameter to the function ABI, but this would be unsound for an indirect call because the parameter is not a part of the function's type and a given function pointer type may or may not refer to a function with the attribute. The creation of a shim hides the implicit parameter from callers of the function pointer, preserving soundness.\n\n## [The `instruction_set` attribute](#the-instruction_set-attribute)\n\nThe _`instruction_set` [attribute](attributes/../attributes.html)_ may be applied to a function to control which instruction set the function will be generated for. This allows mixing more than one instruction set in a single program on CPU architectures that support it. It uses the [_MetaListPath_](about:blank/attributes.html#meta-item-attribute-syntax) syntax, and a path comprised of the architecture family name and instruction set name.\n\nIt is a compilation error to use the `instruction_set` attribute on a target that does not support it.\n\n### [On ARM](#on-arm)\n\nFor the `ARMv4T` and `ARMv5te` architectures, the following are supported:\n\n-   `arm::a32` - Generate the function as A32 \"ARM\" code.\n-   `arm::t32` - Generate the function as T32 \"Thumb\" code.\n\n```rust\n#[instruction_set(arm::a32)]\nfn foo_arm_code() {}\n\n#[instruction_set(arm::t32)]\nfn bar_thumb_code() {}\n```\n\nUsing the `instruction_set` attribute has the following effects:\n\n-   If the address of the function is taken as a function pointer, the low bit of the address will be set to 0 (arm) or 1 (thumb) depending on the instruction set.\n-   Any inline assembly in the function must use the specified instruction set instead of the target default.\n\n## [Limits](#limits)\n\nThe following [attributes](attributes/../attributes.html) affect compile-time limits.\n\n## [The `recursion_limit` attribute](#the-recursion_limit-attribute)\n\nThe _`recursion_limit` attribute_ may be applied at the [crate](attributes/../crates-and-source-files.html) level to set the maximum depth for potentially infinitely-recursive compile-time operations like macro expansion or auto-dereference. It uses the [_MetaNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to specify the recursion depth.\n\n> Note: The default in `rustc` is 128.\n\n```rust\n#![allow(unused)]\n#![recursion_limit = \"4\"]\n\nfn main() {\nmacro_rules! a {\n    () => { a!(1); };\n    (1) => { a!(2); };\n    (2) => { a!(3); };\n    (3) => { a!(4); };\n    (4) => { };\n}\n\n// This fails to expand because it requires a recursion depth greater than 4.\na!{}\n}\n```\n\n```rust\n#![allow(unused)]\n#![recursion_limit = \"1\"]\n\nfn main() {\n// This fails because it requires two recursive steps to auto-dereference.\n(|_: &u8| {})(&&&1);\n}\n```\n\n## [The `type_length_limit` attribute](#the-type_length_limit-attribute)\n\nThe _`type_length_limit` attribute_ limits the maximum number of type substitutions made when constructing a concrete type during monomorphization. It is applied at the [crate](attributes/../crates-and-source-files.html) level, and uses the [_MetaNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to set the limit based on the number of type substitutions.\n\n> Note: The default in `rustc` is 1048576.\n\n```rust\n#![allow(unused)]\n#![type_length_limit = \"4\"]\n\nfn main() {\nfn f<T>(x: T) {}\n\n// This fails to compile because monomorphizing to\n// `f::<((((i32,), i32), i32), i32)>` requires more than 4 type elements.\nf(((((1,), 2), 3), 4));\n}\n```\n\n## [Type system attributes](#type-system-attributes)\n\nThe following [attributes](attributes/../attributes.html) are used for changing how a type can be used.\n\n## [The `non_exhaustive` attribute](#the-non_exhaustive-attribute)\n\nThe _`non_exhaustive` attribute_ indicates that a type or variant may have more fields or variants added in the future. It can be applied to [`struct`s](attributes/../items/structs.html), [`enum`s](attributes/../items/enumerations.html), and `enum` variants.\n\nThe `non_exhaustive` attribute uses the [_MetaWord_](about:blank/attributes.html#meta-item-attribute-syntax) syntax and thus does not take any inputs.\n\nWithin the defining crate, `non_exhaustive` has no effect.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[non_exhaustive]\npub struct Config {\n    pub window_width: u16,\n    pub window_height: u16,\n}\n\n#[non_exhaustive]\npub struct Token;\n\n#[non_exhaustive]\npub struct Id(pub u64);\n\n#[non_exhaustive]\npub enum Error {\n    Message(String),\n    Other,\n}\n\npub enum Message {\n    #[non_exhaustive] Send { from: u32, to: u32, contents: String },\n    #[non_exhaustive] Reaction(u32),\n    #[non_exhaustive] Quit,\n}\n\n// Non-exhaustive structs can be constructed as normal within the defining crate.\nlet config = Config { window_width: 640, window_height: 480 };\nlet token = Token;\nlet id = Id(4);\n\n// Non-exhaustive structs can be matched on exhaustively within the defining crate.\nlet Config { window_width, window_height } = config;\nlet Token = token;\nlet Id(id_number) = id;\n\nlet error = Error::Other;\nlet message = Message::Reaction(3);\n\n// Non-exhaustive enums can be matched on exhaustively within the defining crate.\nmatch error {\n    Error::Message(ref s) => { },\n    Error::Other => { },\n}\n\nmatch message {\n    // Non-exhaustive variants can be matched on exhaustively within the defining crate.\n    Message::Send { from, to, contents } => { },\n    Message::Reaction(id) => { },\n    Message::Quit => { },\n}\n}\n```\n\nOutside of the defining crate, types annotated with `non_exhaustive` have limitations that preserve backwards compatibility when new fields or variants are added.\n\nNon-exhaustive types cannot be constructed outside of the defining crate:\n\n-   Non-exhaustive variants ([`struct`](attributes/../items/structs.html) or [`enum` variant](attributes/../items/enumerations.html)) cannot be constructed with a [_StructExpression_](attributes/../expressions/struct-expr.html) (including with [functional update syntax](about:blank/expressions/struct-expr.html#functional-update-syntax)).\n-   The implicitly defined same-named constant of a [unit-like struct](attributes/../items/structs.html), or the same-named constructor function of a [tuple struct](attributes/../items/structs.html), has a [visibility](attributes/../visibility-and-privacy.html) no greater than `pub(crate)`. That is, if the struct’s visibility is `pub`, then the constant or constructor’s visibility is `pub(crate)`, and otherwise the visibility of the two items is the same (as is the case without `#[non_exhaustive]`).\n-   [`enum`](attributes/../items/enumerations.html) instances can be constructed.\n\nThe following examples of construction do not compile when outside the defining crate:\n\n```rust\n// These are types defined in an upstream crate that have been annotated as\n// `#[non_exhaustive]`.\nuse upstream::{Config, Token, Id, Error, Message};\n\n// Cannot construct an instance of `Config`; if new fields were added in\n// a new version of `upstream` then this would fail to compile, so it is\n// disallowed.\nlet config = Config { window_width: 640, window_height: 480 };\n\n// Cannot construct an instance of `Token`; if new fields were added, then\n// it would not be a unit-like struct any more, so the same-named constant\n// created by it being a unit-like struct is not public outside the crate;\n// this code fails to compile.\nlet token = Token;\n\n// Cannot construct an instance of `Id`; if new fields were added, then\n// its constructor function signature would change, so its constructor\n// function is not public outside the crate; this code fails to compile.\nlet id = Id(5);\n\n// Can construct an instance of `Error`; new variants being introduced would\n// not result in this failing to compile.\nlet error = Error::Message(\"foo\".to_string());\n\n// Cannot construct an instance of `Message::Send` or `Message::Reaction`;\n// if new fields were added in a new version of `upstream` then this would\n// fail to compile, so it is disallowed.\nlet message = Message::Send { from: 0, to: 1, contents: \"foo\".to_string(), };\nlet message = Message::Reaction(0);\n\n// Cannot construct an instance of `Message::Quit`; if this were converted to\n// a tuple-variant `upstream` then this would fail to compile.\nlet message = Message::Quit;\n```\n\nThere are limitations when matching on non-exhaustive types outside of the defining crate:\n\n-   When pattern matching on a non-exhaustive variant ([`struct`](attributes/../items/structs.html) or [`enum` variant](attributes/../items/enumerations.html)), a [_StructPattern_](about:blank/patterns.html#struct-patterns) must be used which must include a `..`. A tuple variant's constructor's [visibility](attributes/../visibility-and-privacy.html) is reduced to be no greater than `pub(crate)`.\n-   When pattern matching on a non-exhaustive [`enum`](attributes/../items/enumerations.html), matching on a variant does not contribute towards the exhaustiveness of the arms.\n\nThe following examples of matching do not compile when outside the defining crate:\n\n```rust\n// These are types defined in an upstream crate that have been annotated as\n// `#[non_exhaustive]`.\nuse upstream::{Config, Token, Id, Error, Message};\n\n// Cannot match on a non-exhaustive enum without including a wildcard arm.\nmatch error {\n  Error::Message(ref s) => { },\n  Error::Other => { },\n  // would compile with: `_ => {},`\n}\n\n// Cannot match on a non-exhaustive struct without a wildcard.\nif let Ok(Config { window_width, window_height }) = config {\n    // would compile with: `..`\n}\n\n// Cannot match a non-exhaustive unit-like or tuple struct except by using\n// braced struct syntax with a wildcard.\n// This would compile as `let Token { .. } = token;`\nlet Token = token;\n// This would compile as `let Id { 0: id_number, .. } = id;`\nlet Id(id_number) = id;\n\nmatch message {\n  // Cannot match on a non-exhaustive struct enum variant without including a wildcard.\n  Message::Send { from, to, contents } => { },\n  // Cannot match on a non-exhaustive tuple or unit enum variant.\n  Message::Reaction(type) => { },\n  Message::Quit => { },\n}\n```\n\nIt's also not allowed to cast non-exhaustive types from foreign crates.\n\n```rust\nuse othercrate::NonExhaustiveEnum;\n\n// Cannot cast a non-exhaustive enum outside of its defining crate.\nlet _ = NonExhaustiveEnum::default() as u8;\n```\n\nNon-exhaustive types are always considered inhabited in downstream crates.\n\n## [Debugger attributes](#debugger-attributes)\n\nThe following [attributes](attributes/../attributes.html) are used for enhancing the debugging experience when using third-party debuggers like GDB or WinDbg.\n\n## [The `debugger_visualizer` attribute](#the-debugger_visualizer-attribute)\n\nThe _`debugger_visualizer` attribute_ can be used to embed a debugger visualizer file into the debug information. This enables an improved debugger experience for displaying values in the debugger. It uses the [_MetaListNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to specify its inputs, and must be specified as a crate attribute.\n\n### [Using `debugger_visualizer` with Natvis](#using-debugger_visualizer-with-natvis)\n\nNatvis is an XML-based framework for Microsoft debuggers (such as Visual Studio and WinDbg) that uses declarative rules to customize the display of types. For detailed information on the Natvis format, refer to Microsoft's [Natvis documentation](https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects).\n\nThis attribute only supports embedding Natvis files on `-windows-msvc` targets.\n\nThe path to the Natvis file is specified with the `natvis_file` key, which is a path relative to the crate source file:\n\n```rust\n#![debugger_visualizer(natvis_file = \"Rectangle.natvis\")]\n\nstruct FancyRect {\n    x: f32,\n    y: f32,\n    dx: f32,\n    dy: f32,\n}\n\nfn main() {\n    let fancy_rect = FancyRect { x: 10.0, y: 10.0, dx: 5.0, dy: 5.0 };\n    println!(\"set breakpoint here\");\n}\n```\n\nand `Rectangle.natvis` contains:\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n    <Type Name=\"foo::FancyRect\">\n      <DisplayString>({x},{y}) + ({dx}, {dy})</DisplayString>\n      <Expand>\n        <Synthetic Name=\"LowerLeft\">\n          <DisplayString>({x}, {y})</DisplayString>\n        </Synthetic>\n        <Synthetic Name=\"UpperLeft\">\n          <DisplayString>({x}, {y + dy})</DisplayString>\n        </Synthetic>\n        <Synthetic Name=\"UpperRight\">\n          <DisplayString>({x + dx}, {y + dy})</DisplayString>\n        </Synthetic>\n        <Synthetic Name=\"LowerRight\">\n          <DisplayString>({x + dx}, {y})</DisplayString>\n        </Synthetic>\n      </Expand>\n    </Type>\n</AutoVisualizer>\n\n```\n\nWhen viewed under WinDbg, the `fancy_rect` variable would be shown as follows:\n\n```text\n> Variables:\n  > fancy_rect: (10.0, 10.0) + (5.0, 5.0)\n    > LowerLeft: (10.0, 10.0)\n    > UpperLeft: (10.0, 15.0)\n    > UpperRight: (15.0, 15.0)\n    > LowerRight: (15.0, 10.0)\n\n```\n\n### [Using `debugger_visualizer` with GDB](#using-debugger_visualizer-with-gdb)\n\nGDB supports the use of a structured Python script, called a _pretty printer_, that describes how a type should be visualized in the debugger view. For detailed information on pretty printers, refer to GDB's [pretty printing documentation](https://sourceware.org/gdb/onlinedocs/gdb/Pretty-Printing.html).\n\nEmbedded pretty printers are not automatically loaded when debugging a binary under GDB. There are two ways to enable auto-loading embedded pretty printers:\n\n1.  Launch GDB with extra arguments to explicitly add a directory or binary to the auto-load safe path: `gdb -iex \"add-auto-load-safe-path safe-path path/to/binary\" path/to/binary` For more information, see GDB's [auto-loading documentation](https://sourceware.org/gdb/onlinedocs/gdb/Auto_002dloading-safe-path.html).\n2.  Create a file named `gdbinit` under `$HOME/.config/gdb` (you may need to create the directory if it doesn't already exist). Add the following line to that file: `add-auto-load-safe-path path/to/binary`.\n\nThese scripts are embedded using the `gdb_script_file` key, which is a path relative to the crate source file.\n\n```rust\n#![debugger_visualizer(gdb_script_file = \"printer.py\")]\n\nstruct Person {\n    name: String,\n    age: i32,\n}\n\nfn main() {\n    let bob = Person { name: String::from(\"Bob\"), age: 10 };\n    println!(\"set breakpoint here\");\n}\n```\n\nand `printer.py` contains:\n\n```python\nimport gdb\n\nclass PersonPrinter:\n    \"Print a Person\"\n\n    def __init__(self, val):\n        self.val = val\n        self.name = val[\"name\"]\n        self.age = int(val[\"age\"])\n\n    def to_string(self):\n        return \"{} is {} years old.\".format(self.name, self.age)\n\ndef lookup(val):\n    lookup_tag = val.type.tag\n    if lookup_tag is None:\n        return None\n    if \"foo::Person\" == lookup_tag:\n        return PersonPrinter(val)\n\n    return None\n\ngdb.current_objfile().pretty_printers.append(lookup)\n\n```\n\nWhen the crate's debug executable is passed into GDB[1](#rust-gdb), `print bob` will display:\n\n```text\n\"Bob\" is 10 years old.\n\n```\n\n## [The `collapse_debuginfo` attribute](#the-collapse_debuginfo-attribute)\n\nThe _`collapse_debuginfo` [attribute](attributes/../attributes.html)_ controls whether code locations from a macro definition are collapsed into a single location associated with the macro's call site, when generating debuginfo for code calling this macro.\n\nThe attribute uses the [_MetaListIdents_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to specify its inputs, and can only be applied to macro definitions.\n\nAccepted options:\n\n-   `#[collapse_debuginfo(yes)]` — code locations in debuginfo are collapsed.\n-   `#[collapse_debuginfo(no)]` — code locations in debuginfo are not collapsed.\n-   `#[collapse_debuginfo(external)]` — code locations in debuginfo are collapsed only if the macro comes from a different crate.\n\nThe `external` behavior is the default for macros that don't have this attribute, unless they are built-in macros. For built-in macros the default is `yes`.\n\n> **Note**: `rustc` has a `-C collapse-macro-debuginfo` CLI option to override both the default collapsing behavior and `#[collapse_debuginfo]` attributes.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[collapse_debuginfo(yes)]\nmacro_rules! example {\n    () => {\n        println!(\"hello!\");\n    };\n}\n}\n```\n\n## [Statements and expressions](#statements-and-expressions)\n\nRust is _primarily_ an expression language. This means that most forms of value-producing or effect-causing evaluation are directed by the uniform syntax category of _expressions_. Each kind of expression can typically _nest_ within each other kind of expression, and rules for evaluation of expressions involve specifying both the value produced by the expression and the order in which its sub-expressions are themselves evaluated.\n\nIn contrast, statements serve _mostly_ to contain and explicitly sequence expression evaluation.\n\n## [Statements](#statements)\n\n> **Syntax**  \n> _Statement_ :  \n>       `;`  \n>    | [_Item_](items.html)  \n>    | [_LetStatement_](about:blank/statements.html#let-statements)  \n>    | [_ExpressionStatement_](about:blank/statements.html#expression-statements)  \n>    | [_MacroInvocationSemi_](about:blank/macros.html#macro-invocation)\n\nA _statement_ is a component of a [block](expressions/block-expr.html), which is in turn a component of an outer [expression](expressions.html) or [function](items/functions.html).\n\nRust has two kinds of statement: [declaration statements](about:blank/statements.html#declaration-statements) and [expression statements](about:blank/statements.html#expression-statements).\n\n## [Declaration statements](#declaration-statements)\n\nA _declaration statement_ is one that introduces one or more _names_ into the enclosing statement block. The declared names may denote new variables or new [items](items.html).\n\nThe two kinds of declaration statements are item declarations and `let` statements.\n\n### [Item declarations](#item-declarations)\n\nAn _item declaration statement_ has a syntactic form identical to an [item declaration](items.html) within a [module](items/modules.html). Declaring an item within a statement block restricts its [scope](names/scopes.html) to the block containing the statement. The item is not given a [canonical path](about:blank/paths.html#canonical-paths) nor are any sub-items it may declare. The exception to this is that associated items defined by [implementations](items/implementations.html) are still accessible in outer scopes as long as the item and, if applicable, trait are accessible. It is otherwise identical in meaning to declaring the item inside a module.\n\nThere is no implicit capture of the containing function's generic parameters, parameters, and local variables. For example, `inner` may not access `outer_var`.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn outer() {\n  let outer_var = true;\n\n  fn inner() { /* outer_var is not in scope here */ }\n\n  inner();\n}\n}\n```\n\n### [`let` statements](#let-statements)\n\n> **Syntax**  \n> _LetStatement_ :  \n>    [_OuterAttribute_](attributes.html)\\* `let` [_PatternNoTopAlt_](patterns.html) ( `:` [_Type_](types.html) )? (`=` [_Expression_](expressions.html) [†](about:blank/statements.html#let-else-restriction) ( `else` [_BlockExpression_](expressions/block-expr.html)) ? ) ? `;`\n> \n> † When an `else` block is specified, the _Expression_ must not be a [_LazyBooleanExpression_](about:blank/expressions/operator-expr.html#lazy-boolean-operators), or end with a `}`.\n\nA _`let` statement_ introduces a new set of [variables](variables.html), given by a [pattern](patterns.html). The pattern is followed optionally by a type annotation and then either ends, or is followed by an initializer expression plus an optional `else` block. When no type annotation is given, the compiler will infer the type, or signal an error if insufficient type information is available for definite inference. Any variables introduced by a variable declaration are visible from the point of declaration until the end of the enclosing block scope, except when they are shadowed by another variable declaration.\n\nIf an `else` block is not present, the pattern must be irrefutable. If an `else` block is present, the pattern may be refutable. If the pattern does not match (this requires it to be refutable), the `else` block is executed. The `else` block must always diverge (evaluate to the [never type](types/never.html)).\n\n```rust\n#![allow(unused)]\nfn main() {\nlet (mut v, w) = (vec![1, 2, 3], 42); // The bindings may be mut or const\nlet Some(t) = v.pop() else { // Refutable patterns require an else block\n    panic!(); // The else block must diverge\n};\nlet [u, v] = [v[0], v[1]] else { // This pattern is irrefutable, so the compiler\n                                 // will lint as the else block is redundant.\n    panic!();\n};\n}\n```\n\n## [Expression statements](#expression-statements)\n\n> **Syntax**  \n> _ExpressionStatement_ :  \n>       [_ExpressionWithoutBlock_](expressions.html) `;`  \n>    | [_ExpressionWithBlock_](expressions.html) `;`?\n\nAn _expression statement_ is one that evaluates an [expression](expressions.html) and ignores its result. As a rule, an expression statement's purpose is to trigger the effects of evaluating its expression.\n\nAn expression that consists of only a [block expression](expressions/block-expr.html) or control flow expression, if used in a context where a statement is permitted, can omit the trailing semicolon. This can cause an ambiguity between it being parsed as a standalone statement and as a part of another expression; in this case, it is parsed as a statement. The type of [_ExpressionWithBlock_](expressions.html) expressions when used as statements must be the unit type.\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut v = vec![1, 2, 3];\nv.pop();          // Ignore the element returned from pop\nif v.is_empty() {\n    v.push(5);\n} else {\n    v.remove(0);\n}                 // Semicolon can be omitted.\n[1];              // Separate expression statement, not an indexing expression.\n}\n```\n\nWhen the trailing semicolon is omitted, the result must be type `()`.\n\n```rust\n#![allow(unused)]\nfn main() {\n// bad: the block's type is i32, not ()\n// Error: expected `()` because of default return type\n// if true {\n//   1\n// }\n\n// good: the block's type is i32\nif true {\n  1\n} else {\n  2\n};\n}\n```\n\n## [Attributes on Statements](#attributes-on-statements)\n\nStatements accept [outer attributes](attributes.html). The attributes that have meaning on a statement are [`cfg`](conditional-compilation.html), and [the lint check attributes](about:blank/attributes/diagnostics.html#lint-check-attributes).\n\n## [Expressions](#expressions)\n\n> **Syntax**  \n> _Expression_ :  \n>       _ExpressionWithoutBlock_  \n>    | _ExpressionWithBlock_\n> \n> _ExpressionWithoutBlock_ :  \n>    [_OuterAttribute_](attributes.html)\\*[†](about:blank/expressions.html#expression-attributes)  \n>    (  \n>          [_LiteralExpression_](expressions/literal-expr.html)  \n>       | [_PathExpression_](expressions/path-expr.html)  \n>       | [_OperatorExpression_](expressions/operator-expr.html)  \n>       | [_GroupedExpression_](expressions/grouped-expr.html)  \n>       | [_ArrayExpression_](expressions/array-expr.html)  \n>       | [_AwaitExpression_](expressions/await-expr.html)  \n>       | [_IndexExpression_](about:blank/expressions/array-expr.html#array-and-slice-indexing-expressions)  \n>       | [_TupleExpression_](expressions/tuple-expr.html)  \n>       | [_TupleIndexingExpression_](about:blank/expressions/tuple-expr.html#tuple-indexing-expressions)  \n>       | [_StructExpression_](expressions/struct-expr.html)  \n>       | [_CallExpression_](expressions/call-expr.html)  \n>       | [_MethodCallExpression_](expressions/method-call-expr.html)  \n>       | [_FieldExpression_](expressions/field-expr.html)  \n>       | [_ClosureExpression_](expressions/closure-expr.html)  \n>       | [_AsyncBlockExpression_](about:blank/expressions/block-expr.html#async-blocks)  \n>       | [_ContinueExpression_](about:blank/expressions/loop-expr.html#continue-expressions)  \n>       | [_BreakExpression_](about:blank/expressions/loop-expr.html#break-expressions)  \n>       | [_RangeExpression_](expressions/range-expr.html)  \n>       | [_ReturnExpression_](expressions/return-expr.html)  \n>       | [_UnderscoreExpression_](expressions/underscore-expr.html)  \n>       | [_MacroInvocation_](about:blank/macros.html#macro-invocation)  \n>    )\n> \n> _ExpressionWithBlock_ :  \n>    [_OuterAttribute_](attributes.html)\\*[†](about:blank/expressions.html#expression-attributes)  \n>    (  \n>          [_BlockExpression_](expressions/block-expr.html)  \n>       | [_ConstBlockExpression_](about:blank/expressions/block-expr.html#const-blocks)  \n>       | [_UnsafeBlockExpression_](about:blank/expressions/block-expr.html#unsafe-blocks)  \n>       | [_LoopExpression_](expressions/loop-expr.html)  \n>       | [_IfExpression_](about:blank/expressions/if-expr.html#if-expressions)  \n>       | [_IfLetExpression_](about:blank/expressions/if-expr.html#if-let-expressions)  \n>       | [_MatchExpression_](expressions/match-expr.html)  \n>    )\n\nAn expression may have two roles: it always produces a _value_, and it may have _effects_ (otherwise known as \"side effects\"). An expression _evaluates to_ a value, and has effects during _evaluation_. Many expressions contain sub-expressions, called the _operands_ of the expression. The meaning of each kind of expression dictates several things:\n\n-   Whether or not to evaluate the operands when evaluating the expression\n-   The order in which to evaluate the operands\n-   How to combine the operands' values to obtain the value of the expression\n\nIn this way, the structure of expressions dictates the structure of execution. Blocks are just another kind of expression, so blocks, statements, expressions, and blocks again can recursively nest inside each other to an arbitrary depth.\n\n> **Note**: We give names to the operands of expressions so that we may discuss them, but these names are not stable and may be changed.\n\n## [Expression precedence](#expression-precedence)\n\nThe precedence of Rust operators and expressions is ordered as follows, going from strong to weak. Binary Operators at the same precedence level are grouped in the order given by their associativity.\n\n| Operator/Expression | Associativity |\n| --- | --- |\n| Paths |  |\n| Method calls |  |\n| Field expressions | left to right |\n| Function calls, array indexing |  |\n| `?` |  |\n| Unary `-` `*` `!` `&` `&mut` |  |\n| `as` | left to right |\n| `*` `/` `%` | left to right |\n| `+` `-` | left to right |\n| `<<` `>>` | left to right |\n| `&` | left to right |\n| `^` | left to right |\n| `|` | left to right |\n| `==` `!=` `<` `>` `<=` `>=` | Require parentheses |\n| `&&` | left to right |\n| `||` | left to right |\n| `..` `..=` | Require parentheses |\n| `=` `+=` `-=` `*=` `/=` `%=`  \n`&=` `|=` `^=` `<<=` `>>=` | right to left |\n| `return` `break` closures |  |\n\n## [Evaluation order of operands](#evaluation-order-of-operands)\n\nThe following list of expressions all evaluate their operands the same way, as described after the list. Other expressions either don't take operands or evaluate them conditionally as described on their respective pages.\n\n-   Dereference expression\n-   Error propagation expression\n-   Negation expression\n-   Arithmetic and logical binary operators\n-   Comparison operators\n-   Type cast expression\n-   Grouped expression\n-   Array expression\n-   Await expression\n-   Index expression\n-   Tuple expression\n-   Tuple index expression\n-   Struct expression\n-   Call expression\n-   Method call expression\n-   Field expression\n-   Break expression\n-   Range expression\n-   Return expression\n\nThe operands of these expressions are evaluated prior to applying the effects of the expression. Expressions taking multiple operands are evaluated left to right as written in the source code.\n\n> **Note**: Which subexpressions are the operands of an expression is determined by expression precedence as per the previous section.\n\nFor example, the two `next` method calls will always be called in the same order:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Using vec instead of array to avoid references\n// since there is no stable owned array iterator\n// at the time this example was written.\nlet mut one_two = vec![1, 2].into_iter();\nassert_eq!(\n    (1, 2),\n    (one_two.next().unwrap(), one_two.next().unwrap())\n);\n}\n```\n\n> **Note**: Since this is applied recursively, these expressions are also evaluated from innermost to outermost, ignoring siblings until there are no inner subexpressions.\n\n## [Place Expressions and Value Expressions](#place-expressions-and-value-expressions)\n\nExpressions are divided into two main categories: place expressions and value expressions; there is also a third, minor category of expressions called assignee expressions. Within each expression, operands may likewise occur in either place context or value context. The evaluation of an expression depends both on its own category and the context it occurs within.\n\nA _place expression_ is an expression that represents a memory location. These expressions are [paths](expressions/path-expr.html) which refer to local variables, [static variables](items/static-items.html), [dereferences](about:blank/expressions/operator-expr.html#the-dereference-operator) (`*expr`), [array indexing](about:blank/expressions/array-expr.html#array-and-slice-indexing-expressions) expressions (`expr[expr]`), [field](expressions/field-expr.html) references (`expr.f`) and parenthesized place expressions. All other expressions are value expressions.\n\nA _value expression_ is an expression that represents an actual value.\n\nThe following contexts are _place expression_ contexts:\n\n-   The left operand of a [compound assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) expression.\n-   The operand of a unary [borrow](about:blank/expressions/operator-expr.html#borrow-operators), [address-of](about:blank/expressions/operator-expr.html#raw-address-of-operators) or [dereference](about:blank/expressions/operator-expr.html#the-dereference-operator) operator.\n-   The operand of a field expression.\n-   The indexed operand of an array indexing expression.\n-   The operand of any [implicit borrow](about:blank/expressions.html#implicit-borrows).\n-   The initializer of a [let statement](about:blank/statements.html#let-statements).\n-   The [scrutinee](about:blank/glossary.html#scrutinee) of an [`if let`](about:blank/expressions/if-expr.html#if-let-expressions), [`match`](expressions/match-expr.html), or [`while let`](about:blank/expressions/loop-expr.html#predicate-pattern-loops) expression.\n-   The base of a [functional update](about:blank/expressions/struct-expr.html#functional-update-syntax) struct expression.\n\n> Note: Historically, place expressions were called _lvalues_ and value expressions were called _rvalues_.\n\nAn _assignee expression_ is an expression that appears in the left operand of an [assignment](about:blank/expressions/operator-expr.html#assignment-expressions) expression. Explicitly, the assignee expressions are:\n\n-   Place expressions.\n-   [Underscores](expressions/underscore-expr.html).\n-   [Tuples](expressions/tuple-expr.html) of assignee expressions.\n-   [Slices](expressions/array-expr.html) of assignee expressions.\n-   [Tuple structs](expressions/struct-expr.html) of assignee expressions.\n-   [Structs](expressions/struct-expr.html) of assignee expressions (with optionally named fields).\n-   [Unit structs](expressions/struct-expr.html).\n\nArbitrary parenthesisation is permitted inside assignee expressions.\n\n### [Moved and copied types](#moved-and-copied-types)\n\nWhen a place expression is evaluated in a value expression context, or is bound by value in a pattern, it denotes the value held _in_ that memory location. If the type of that value implements [`Copy`](about:blank/special-types-and-traits.html#copy), then the value will be copied. In the remaining situations, if that type is [`Sized`](about:blank/special-types-and-traits.html#sized), then it may be possible to move the value. Only the following place expressions may be moved out of:\n\n-   [Variables](variables.html) which are not currently borrowed.\n-   [Temporary values](about:blank/expressions.html#temporaries).\n-   [Fields](expressions/field-expr.html) of a place expression which can be moved out of and don't implement [`Drop`](about:blank/special-types-and-traits.html#drop).\n-   The result of [dereferencing](about:blank/expressions/operator-expr.html#the-dereference-operator) an expression with type [`Box<T>`](../std/boxed/struct.Box.html) and that can also be moved out of.\n\nAfter moving out of a place expression that evaluates to a local variable, the location is deinitialized and cannot be read from again until it is reinitialized. In all other cases, trying to use a place expression in a value expression context is an error.\n\n### [Mutability](#mutability)\n\nFor a place expression to be [assigned](about:blank/expressions/operator-expr.html#assignment-expressions) to, mutably [borrowed](about:blank/expressions/operator-expr.html#borrow-operators), [implicitly mutably borrowed](about:blank/expressions.html#implicit-borrows), or bound to a pattern containing `ref mut`, it must be _mutable_. We call these _mutable place expressions_. In contrast, other place expressions are called _immutable place expressions_.\n\nThe following expressions can be mutable place expression contexts:\n\n-   Mutable [variables](variables.html) which are not currently borrowed.\n-   [Mutable `static` items](about:blank/items/static-items.html#mutable-statics).\n-   [Temporary values](about:blank/expressions.html#temporaries).\n-   [Fields](expressions/field-expr.html): this evaluates the subexpression in a mutable place expression context.\n-   [Dereferences](about:blank/expressions/operator-expr.html#the-dereference-operator) of a `*mut T` pointer.\n-   Dereference of a variable, or field of a variable, with type `&mut T`. Note: This is an exception to the requirement of the next rule.\n-   Dereferences of a type that implements `DerefMut`: this then requires that the value being dereferenced is evaluated in a mutable place expression context.\n-   [Array indexing](about:blank/expressions/array-expr.html#array-and-slice-indexing-expressions) of a type that implements `IndexMut`: this then evaluates the value being indexed, but not the index, in mutable place expression context.\n\n### [Temporaries](#temporaries)\n\nWhen using a value expression in most place expression contexts, a temporary unnamed memory location is created and initialized to that value. The expression evaluates to that location instead, except if [promoted](about:blank/destructors.html#constant-promotion) to a `static`. The [drop scope](about:blank/destructors.html#drop-scopes) of the temporary is usually the end of the enclosing statement.\n\n### [Implicit Borrows](#implicit-borrows)\n\nCertain expressions will treat an expression as a place expression by implicitly borrowing it. For example, it is possible to compare two unsized [slices](types/slice.html) for equality directly, because the `==` operator implicitly borrows its operands:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet c = [1, 2, 3];\nlet d = vec![1, 2, 3];\nlet a: &[i32];\nlet b: &[i32];\na = &c;\nb = &d;\n// ...\n*a == *b;\n// Equivalent form:\n::std::cmp::PartialEq::eq(&*a, &*b);\n}\n```\n\nImplicit borrows may be taken in the following expressions:\n\n-   Left operand in [method-call](expressions/method-call-expr.html) expressions.\n-   Left operand in [field](expressions/field-expr.html) expressions.\n-   Left operand in [call expressions](expressions/call-expr.html).\n-   Left operand in [array indexing](about:blank/expressions/array-expr.html#array-and-slice-indexing-expressions) expressions.\n-   Operand of the [dereference operator](about:blank/expressions/operator-expr.html#the-dereference-operator) (`*`).\n-   Operands of [comparison](about:blank/expressions/operator-expr.html#comparison-operators).\n-   Left operands of the [compound assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions).\n\n## [Overloading Traits](#overloading-traits)\n\nMany of the following operators and expressions can also be overloaded for other types using traits in `std::ops` or `std::cmp`. These traits also exist in `core::ops` and `core::cmp` with the same names.\n\n## [Expression Attributes](#expression-attributes)\n\n[Outer attributes](attributes.html) before an expression are allowed only in a few specific cases:\n\n-   Before an expression used as a [statement](statements.html).\n-   Elements of [array expressions](expressions/array-expr.html), [tuple expressions](expressions/tuple-expr.html), [call expressions](expressions/call-expr.html), and tuple-style [struct](expressions/struct-expr.html) expressions.\n-   The tail expression of [block expressions](expressions/block-expr.html).\n\nThey are never allowed before:\n\n-   [Range](expressions/range-expr.html) expressions.\n-   Binary operator expressions ([_ArithmeticOrLogicalExpression_](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [_ComparisonExpression_](about:blank/expressions/operator-expr.html#comparison-operators), [_LazyBooleanExpression_](about:blank/expressions/operator-expr.html#lazy-boolean-operators), [_TypeCastExpression_](about:blank/expressions/operator-expr.html#type-cast-expressions), [_AssignmentExpression_](about:blank/expressions/operator-expr.html#assignment-expressions), [_CompoundAssignmentExpression_](about:blank/expressions/operator-expr.html#compound-assignment-expressions)).\n\n## [Literal expressions](#literal-expressions)\n\n> **Syntax**  \n> _LiteralExpression_ :  \n>       [CHAR\\_LITERAL](about:blank/tokens.html#character-literals)  \n>    | [STRING\\_LITERAL](about:blank/tokens.html#string-literals)  \n>    | [RAW\\_STRING\\_LITERAL](about:blank/tokens.html#raw-string-literals)  \n>    | [BYTE\\_LITERAL](about:blank/tokens.html#byte-literals)  \n>    | [BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#byte-string-literals)  \n>    | [RAW\\_BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#raw-byte-string-literals)  \n>    | [C\\_STRING\\_LITERAL](about:blank/tokens.html#c-string-literals)  \n>    | [RAW\\_C\\_STRING\\_LITERAL](about:blank/tokens.html#raw-c-string-literals)  \n>    | [INTEGER\\_LITERAL](about:blank/tokens.html#integer-literals)  \n>    | [FLOAT\\_LITERAL](about:blank/tokens.html#floating-point-literals)  \n>    | `true` | `false`\n\nA _literal expression_ is an expression consisting of a single token, rather than a sequence of tokens, that immediately and directly denotes the value it evaluates to, rather than referring to it by name or some other evaluation rule.\n\nA literal is a form of [constant expression](about:blank/const_eval.html#constant-expressions), so is evaluated (primarily) at compile time.\n\nEach of the lexical [literal](about:blank/tokens.html#literals) forms described earlier can make up a literal expression, as can the keywords `true` and `false`.\n\n```rust\n#![allow(unused)]\nfn main() {\n\"hello\";   // string type\n'5';       // character type\n5;         // integer type\n}\n```\n\nIn the descriptions below, the _string representation_ of a token is the sequence of characters from the input which matched the token's production in a _Lexer_ grammar snippet.\n\n> **Note**: this string representation never includes a character `U+000D` (CR) immediately followed by `U+000A` (LF): this pair would have been previously transformed into a single `U+000A` (LF).\n\n## [Escapes](#escapes)\n\nThe descriptions of textual literal expressions below make use of several forms of _escape_.\n\nEach form of escape is characterised by:\n\n-   an _escape sequence_: a sequence of characters, which always begins with `U+005C` (`\\`)\n-   an _escaped value_: either a single character or an empty sequence of characters\n\nIn the definitions of escapes below:\n\n-   An _octal digit_ is any of the characters in the range \\[`0`\\-`7`\\].\n-   A _hexadecimal digit_ is any of the characters in the ranges \\[`0`\\-`9`\\], \\[`a`\\-`f`\\], or \\[`A`\\-`F`\\].\n\n### [Simple escapes](#simple-escapes)\n\nEach sequence of characters occurring in the first column of the following table is an escape sequence.\n\nIn each case, the escaped value is the character given in the corresponding entry in the second column.\n\n| Escape sequence | Escaped value |\n| --- | --- |\n| `\\0` | U+0000 (NUL) |\n| `\\t` | U+0009 (HT) |\n| `\\n` | U+000A (LF) |\n| `\\r` | U+000D (CR) |\n| `\\\"` | U+0022 (QUOTATION MARK) |\n| `\\'` | U+0027 (APOSTROPHE) |\n| `\\\\` | U+005C (REVERSE SOLIDUS) |\n\n### [8-bit escapes](#8-bit-escapes)\n\nThe escape sequence consists of `\\x` followed by two hexadecimal digits.\n\nThe escaped value is the character whose [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value) is the result of interpreting the final two characters in the escape sequence as a hexadecimal integer, as if by [`u8::from_str_radix`](about:blank/core/primitive.u8.html#method.from_str_radix) with radix 16.\n\n> **Note**: the escaped value therefore has a [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value) in the range of [`u8`](expressions/../types/numeric.html).\n\n### [7-bit escapes](#7-bit-escapes)\n\nThe escape sequence consists of `\\x` followed by an octal digit then a hexadecimal digit.\n\nThe escaped value is the character whose [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value) is the result of interpreting the final two characters in the escape sequence as a hexadecimal integer, as if by [`u8::from_str_radix`](about:blank/core/primitive.u8.html#method.from_str_radix) with radix 16.\n\n### [Unicode escapes](#unicode-escapes-1)\n\nThe escape sequence consists of `\\u{`, followed by a sequence of characters each of which is a hexadecimal digit or `_`, followed by `}`.\n\nThe escaped value is the character whose [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value) is the result of interpreting the hexadecimal digits contained in the escape sequence as a hexadecimal integer, as if by [`u32::from_str_radix`](about:blank/core/primitive.u32.html#method.from_str_radix) with radix 16.\n\n> **Note**: the permitted forms of a [CHAR\\_LITERAL](about:blank/tokens.html#character-literals) or [STRING\\_LITERAL](about:blank/tokens.html#string-literals) token ensure that there is such a character.\n\n### [String continuation escapes](#string-continuation-escapes)\n\nThe escape sequence consists of `\\` followed immediately by `U+000A` (LF), and all following whitespace characters before the next non-whitespace character. For this purpose, the whitespace characters are `U+0009` (HT), `U+000A` (LF), `U+000D` (CR), and `U+0020` (SPACE).\n\nThe escaped value is an empty sequence of characters.\n\n> **Note**: The effect of this form of escape is that a string continuation skips following whitespace, including additional newlines. Thus `a`, `b` and `c` are equal:\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> let a = \"foobar\";\n> let b = \"foo\\\n>          bar\";\n> let c = \"foo\\\n> \n>      bar\";\n> \n> assert_eq!(a, b);\n> assert_eq!(b, c);\n> }\n> ```\n> \n> Skipping additional newlines (as in example c) is potentially confusing and unexpected. This behavior may be adjusted in the future. Until a decision is made, it is recommended to avoid relying on skipping multiple newlines with line continuations. See [this issue](https://github.com/rust-lang/reference/pull/1042) for more information.\n\n## [Character literal expressions](#character-literal-expressions)\n\nA character literal expression consists of a single [CHAR\\_LITERAL](about:blank/tokens.html#character-literals) token.\n\nThe expression's type is the primitive [`char`](expressions/../types/textual.html) type.\n\nThe token must not have a suffix.\n\nThe token's _literal content_ is the sequence of characters following the first `U+0027` (`'`) and preceding the last `U+0027` (`'`) in the string representation of the token.\n\nThe literal expression's _represented character_ is derived from the literal content as follows:\n\n-   If the literal content is one of the following forms of escape sequence, the represented character is the escape sequence's escaped value:\n    \n    -   [Simple escapes](about:blank/expressions/literal-expr.html#simple-escapes)\n    -   [7-bit escapes](about:blank/expressions/literal-expr.html#7-bit-escapes)\n    -   [Unicode escapes](about:blank/expressions/literal-expr.html#unicode-escapes)\n-   Otherwise the represented character is the single character that makes up the literal content.\n    \n\nThe expression's value is the [`char`](expressions/../types/textual.html) corresponding to the represented character's [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value).\n\n> **Note**: the permitted forms of a [CHAR\\_LITERAL](about:blank/tokens.html#character-literals) token ensure that these rules always produce a single character.\n\nExamples of character literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n'R';                               // R\n'\\'';                              // '\n'\\x52';                            // R\n'\\u{00E6}';                        // LATIN SMALL LETTER AE (U+00E6)\n}\n```\n\n## [String literal expressions](#string-literal-expressions)\n\nA string literal expression consists of a single [STRING\\_LITERAL](about:blank/tokens.html#string-literals) or [RAW\\_STRING\\_LITERAL](about:blank/tokens.html#raw-string-literals) token.\n\nThe expression's type is a shared reference (with `static` lifetime) to the primitive [`str`](expressions/../types/textual.html) type. That is, the type is `&'static str`.\n\nThe token must not have a suffix.\n\nThe token's _literal content_ is the sequence of characters following the first `U+0022` (`\"`) and preceding the last `U+0022` (`\"`) in the string representation of the token.\n\nThe literal expression's _represented string_ is a sequence of characters derived from the literal content as follows:\n\n-   If the token is a [STRING\\_LITERAL](about:blank/tokens.html#string-literals), each escape sequence of any of the following forms occurring in the literal content is replaced by the escape sequence's escaped value.\n    \n    -   [Simple escapes](about:blank/expressions/literal-expr.html#simple-escapes)\n    -   [7-bit escapes](about:blank/expressions/literal-expr.html#7-bit-escapes)\n    -   [Unicode escapes](about:blank/expressions/literal-expr.html#unicode-escapes)\n    -   [String continuation escapes](about:blank/expressions/literal-expr.html#string-continuation-escapes)\n    \n    These replacements take place in left-to-right order. For example, the token `\"\\\\x41\"` is converted to the characters `\\` `x` `4` `1`.\n    \n-   If the token is a [RAW\\_STRING\\_LITERAL](about:blank/tokens.html#raw-string-literals), the represented string is identical to the literal content.\n    \n\nThe expression's value is a reference to a statically allocated [`str`](expressions/../types/textual.html) containing the UTF-8 encoding of the represented string.\n\nExamples of string literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n\"foo\"; r\"foo\";                     // foo\n\"\\\"foo\\\"\"; r#\"\"foo\"\"#;             // \"foo\"\n\n\"foo #\\\"# bar\";\nr##\"foo #\"# bar\"##;                // foo #\"# bar\n\n\"\\x52\"; \"R\"; r\"R\";                 // R\n\"\\\\x52\"; r\"\\x52\";                  // \\x52\n}\n```\n\n## [Byte literal expressions](#byte-literal-expressions)\n\nA byte literal expression consists of a single [BYTE\\_LITERAL](about:blank/tokens.html#byte-literals) token.\n\nThe expression's type is the primitive [`u8`](expressions/../types/numeric.html) type.\n\nThe token must not have a suffix.\n\nThe token's _literal content_ is the sequence of characters following the first `U+0027` (`'`) and preceding the last `U+0027` (`'`) in the string representation of the token.\n\nThe literal expression's _represented character_ is derived from the literal content as follows:\n\n-   If the literal content is one of the following forms of escape sequence, the represented character is the escape sequence's escaped value:\n    \n    -   [Simple escapes](about:blank/expressions/literal-expr.html#simple-escapes)\n    -   [8-bit escapes](about:blank/expressions/literal-expr.html#8-bit-escapes)\n-   Otherwise the represented character is the single character that makes up the literal content.\n    \n\nThe expression's value is the represented character's [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value).\n\n> **Note**: the permitted forms of a [BYTE\\_LITERAL](about:blank/tokens.html#byte-literals) token ensure that these rules always produce a single character, whose Unicode scalar value is in the range of [`u8`](expressions/../types/numeric.html).\n\nExamples of byte literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\nb'R';                              // 82\nb'\\'';                             // 39\nb'\\x52';                           // 82\nb'\\xA0';                           // 160\n}\n```\n\n## [Byte string literal expressions](#byte-string-literal-expressions)\n\nA byte string literal expression consists of a single [BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#byte-string-literals) or [RAW\\_BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#raw-byte-string-literals) token.\n\nThe expression's type is a shared reference (with `static` lifetime) to an array whose element type is [`u8`](expressions/../types/numeric.html). That is, the type is `&'static [u8; N]`, where `N` is the number of bytes in the represented string described below.\n\nThe token must not have a suffix.\n\nThe token's _literal content_ is the sequence of characters following the first `U+0022` (`\"`) and preceding the last `U+0022` (`\"`) in the string representation of the token.\n\nThe literal expression's _represented string_ is a sequence of characters derived from the literal content as follows:\n\n-   If the token is a [BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#byte-string-literals), each escape sequence of any of the following forms occurring in the literal content is replaced by the escape sequence's escaped value.\n    \n    -   [Simple escapes](about:blank/expressions/literal-expr.html#simple-escapes)\n    -   [8-bit escapes](about:blank/expressions/literal-expr.html#8-bit-escapes)\n    -   [String continuation escapes](about:blank/expressions/literal-expr.html#string-continuation-escapes)\n    \n    These replacements take place in left-to-right order. For example, the token `b\"\\\\x41\"` is converted to the characters `\\` `x` `4` `1`.\n    \n-   If the token is a [RAW\\_BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#raw-byte-string-literals), the represented string is identical to the literal content.\n    \n\nThe expression's value is a reference to a statically allocated array containing the [Unicode scalar values](http://www.unicode.org/glossary/#unicode_scalar_value) of the characters in the represented string, in the same order.\n\n> **Note**: the permitted forms of [BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#byte-string-literals) and [RAW\\_BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#raw-byte-string-literals) tokens ensure that these rules always produce array element values in the range of [`u8`](expressions/../types/numeric.html).\n\nExamples of byte string literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\nb\"foo\"; br\"foo\";                     // foo\nb\"\\\"foo\\\"\"; br#\"\"foo\"\"#;             // \"foo\"\n\nb\"foo #\\\"# bar\";\nbr##\"foo #\"# bar\"##;                 // foo #\"# bar\n\nb\"\\x52\"; b\"R\"; br\"R\";                // R\nb\"\\\\x52\"; br\"\\x52\";                  // \\x52\n}\n```\n\n## [C string literal expressions](#c-string-literal-expressions)\n\nA C string literal expression consists of a single [C\\_STRING\\_LITERAL](about:blank/tokens.html#c-string-literals) or [RAW\\_C\\_STRING\\_LITERAL](about:blank/tokens.html#raw-c-string-literals) token.\n\nThe expression's type is a shared reference (with `static` lifetime) to the standard library [CStr](expressions/../../core/ffi/struct.CStr.html) type. That is, the type is `&'static core::ffi::CStr`.\n\nThe token must not have a suffix.\n\nThe token's _literal content_ is the sequence of characters following the first `\"` and preceding the last `\"` in the string representation of the token.\n\nThe literal expression's _represented bytes_ are a sequence of bytes derived from the literal content as follows:\n\n-   If the token is a [C\\_STRING\\_LITERAL](about:blank/tokens.html#c-string-literals), the literal content is treated as a sequence of items, each of which is either a single Unicode character other than `\\` or an [escape](about:blank/expressions/literal-expr.html#escapes). The sequence of items is converted to a sequence of bytes as follows:\n    \n    -   Each single Unicode character contributes its UTF-8 representation.\n    -   Each [simple escape](about:blank/expressions/literal-expr.html#simple-escapes) contributes the [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value) of its escaped value.\n    -   Each [8-bit escape](about:blank/expressions/literal-expr.html#8-bit-escapes) contributes a single byte containing the [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value) of its escaped value.\n    -   Each [unicode escape](about:blank/expressions/literal-expr.html#unicode-escapes) contributes the UTF-8 representation of its escaped value.\n    -   Each [string continuation escape](about:blank/expressions/literal-expr.html#string-continuation-escapes) contributes no bytes.\n-   If the token is a [RAW\\_C\\_STRING\\_LITERAL](about:blank/tokens.html#raw-c-string-literals), the represented bytes are the UTF-8 encoding of the literal content.\n    \n\n> **Note**: the permitted forms of [C\\_STRING\\_LITERAL](about:blank/tokens.html#c-string-literals) and [RAW\\_C\\_STRING\\_LITERAL](about:blank/tokens.html#raw-c-string-literals) tokens ensure that the represented bytes never include a null byte.\n\nThe expression's value is a reference to a statically allocated [CStr](expressions/../../core/ffi/struct.CStr.html) whose array of bytes contains the represented bytes followed by a null byte.\n\nExamples of C string literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\nc\"foo\"; cr\"foo\";                     // foo\nc\"\\\"foo\\\"\"; cr#\"\"foo\"\"#;             // \"foo\"\n\nc\"foo #\\\"# bar\";\ncr##\"foo #\"# bar\"##;                 // foo #\"# bar\n\nc\"\\x52\"; c\"R\"; cr\"R\";                // R\nc\"\\\\x52\"; cr\"\\x52\";                  // \\x52\n\nc\"æ\";                                // LATIN SMALL LETTER AE (U+00E6)\nc\"\\u{00E6}\";                         // LATIN SMALL LETTER AE (U+00E6)\nc\"\\xC3\\xA6\";                         // LATIN SMALL LETTER AE (U+00E6)\n\nc\"\\xE6\".to_bytes();                  // [230]\nc\"\\u{00E6}\".to_bytes();              // [195, 166]\n}\n```\n\n## [Integer literal expressions](#integer-literal-expressions)\n\nAn integer literal expression consists of a single [INTEGER\\_LITERAL](about:blank/tokens.html#integer-literals) token.\n\nIf the token has a [suffix](about:blank/tokens.html#suffixes), the suffix must be the name of one of the [primitive integer types](expressions/../types/numeric.html): `u8`, `i8`, `u16`, `i16`, `u32`, `i32`, `u64`, `i64`, `u128`, `i128`, `usize`, or `isize`, and the expression has that type.\n\nIf the token has no suffix, the expression's type is determined by type inference:\n\n-   If an integer type can be _uniquely_ determined from the surrounding program context, the expression has that type.\n    \n-   If the program context under-constrains the type, it defaults to the signed 32-bit integer `i32`.\n    \n-   If the program context over-constrains the type, it is considered a static type error.\n    \n\nExamples of integer literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n123;                               // type i32\n123i32;                            // type i32\n123u32;                            // type u32\n123_u32;                           // type u32\nlet a: u64 = 123;                  // type u64\n\n0xff;                              // type i32\n0xff_u8;                           // type u8\n\n0o70;                              // type i32\n0o70_i16;                          // type i16\n\n0b1111_1111_1001_0000;             // type i32\n0b1111_1111_1001_0000i64;          // type i64\n\n0usize;                            // type usize\n}\n```\n\nThe value of the expression is determined from the string representation of the token as follows:\n\n-   An integer radix is chosen by inspecting the first two characters of the string, as follows:\n    \n    -   `0b` indicates radix 2\n    -   `0o` indicates radix 8\n    -   `0x` indicates radix 16\n    -   otherwise the radix is 10.\n-   If the radix is not 10, the first two characters are removed from the string.\n    \n-   Any suffix is removed from the string.\n    \n-   Any underscores are removed from the string.\n    \n-   The string is converted to a `u128` value as if by [`u128::from_str_radix`](about:blank/core/primitive.u128.html#method.from_str_radix) with the chosen radix. If the value does not fit in `u128`, it is a compiler error.\n    \n-   The `u128` value is converted to the expression's type via a [numeric cast](about:blank/expressions/operator-expr.html#numeric-cast).\n    \n\n> **Note**: The final cast will truncate the value of the literal if it does not fit in the expression's type. `rustc` includes a [lint check](about:blank/attributes/diagnostics.html#lint-check-attributes) named `overflowing_literals`, defaulting to `deny`, which rejects expressions where this occurs.\n\n> **Note**: `-1i8`, for example, is an application of the [negation operator](about:blank/expressions/operator-expr.html#negation-operators) to the literal expression `1i8`, not a single integer literal expression. See [Overflow](about:blank/expressions/operator-expr.html#overflow) for notes on representing the most negative value for a signed type.\n\n## [Floating-point literal expressions](#floating-point-literal-expressions)\n\nA floating-point literal expression has one of two forms:\n\n-   a single [FLOAT\\_LITERAL](about:blank/tokens.html#floating-point-literals) token\n-   a single [INTEGER\\_LITERAL](about:blank/tokens.html#integer-literals) token which has a suffix and no radix indicator\n\nIf the token has a [suffix](about:blank/tokens.html#suffixes), the suffix must be the name of one of the [primitive floating-point types](about:blank/types/numeric.html#floating-point-types): `f32` or `f64`, and the expression has that type.\n\nIf the token has no suffix, the expression's type is determined by type inference:\n\n-   If a floating-point type can be _uniquely_ determined from the surrounding program context, the expression has that type.\n    \n-   If the program context under-constrains the type, it defaults to `f64`.\n    \n-   If the program context over-constrains the type, it is considered a static type error.\n    \n\nExamples of floating-point literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n123.0f64;        // type f64\n0.1f64;          // type f64\n0.1f32;          // type f32\n12E+99_f64;      // type f64\n5f32;            // type f32\nlet x: f64 = 2.; // type f64\n}\n```\n\nThe value of the expression is determined from the string representation of the token as follows:\n\n-   Any suffix is removed from the string.\n    \n-   Any underscores are removed from the string.\n    \n-   The string is converted to the expression's type as if by [`f32::from_str`](about:blank/core/primitive.f32.html#method.from_str) or [`f64::from_str`](about:blank/core/primitive.f64.html#method.from_str).\n    \n\n> **Note**: `-1.0`, for example, is an application of the [negation operator](about:blank/expressions/operator-expr.html#negation-operators) to the literal expression `1.0`, not a single floating-point literal expression.\n\n> **Note**: `inf` and `NaN` are not literal tokens. The [`f32::INFINITY`](about:blank/core/primitive.f32.html#associatedconstant.INFINITY), [`f64::INFINITY`](about:blank/core/primitive.f64.html#associatedconstant.INFINITY), [`f32::NAN`](about:blank/core/primitive.f32.html#associatedconstant.NAN), and [`f64::NAN`](about:blank/core/primitive.f64.html#associatedconstant.NAN) constants can be used instead of literal expressions. In `rustc`, a literal large enough to be evaluated as infinite will trigger the `overflowing_literals` lint check.\n\n## [Boolean literal expressions](#boolean-literal-expressions)\n\nA boolean literal expression consists of one of the keywords `true` or `false`.\n\nThe expression's type is the primitive [boolean type](expressions/../types/boolean.html), and its value is:\n\n-   true if the keyword is `true`\n-   false if the keyword is `false`\n\n## [Path expressions](#path-expressions)\n\n> **Syntax**  \n> _PathExpression_ :  \n>       [_PathInExpression_](about:blank/paths.html#paths-in-expressions)  \n>    | [_QualifiedPathInExpression_](about:blank/paths.html#qualified-paths)\n\nA [path](expressions/../paths.html) used as an expression context denotes either a local variable or an item. Path expressions that resolve to local or static variables are [place expressions](about:blank/expressions.html#place-expressions-and-value-expressions), other paths are [value expressions](about:blank/expressions.html#place-expressions-and-value-expressions). Using a [`static mut`](about:blank/items/static-items.html#mutable-statics) variable requires an [`unsafe` block](about:blank/expressions/block-expr.html#unsafe-blocks).\n\n```rust\n#![allow(unused)]\nfn main() {\nmod globals {\n    pub static STATIC_VAR: i32 = 5;\n    pub static mut STATIC_MUT_VAR: i32 = 7;\n}\nlet local_var = 3;\nlocal_var;\nglobals::STATIC_VAR;\nunsafe { globals::STATIC_MUT_VAR };\nlet some_constructor = Some::<i32>;\nlet push_integer = Vec::<i32>::push;\nlet slice_reverse = <[i32]>::reverse;\n}\n```\n\nEvaluation of associated constants is handled the same way as [`const` blocks](about:blank/expressions/block-expr.html#const-blocks).\n\n## [Block expressions](#block-expressions)\n\n> **Syntax**  \n> _BlockExpression_ :  \n>    `{`  \n>       [_InnerAttribute_](expressions/../attributes.html)\\*  \n>       _Statements_?  \n>    `}`\n> \n> _Statements_ :  \n>       [_Statement_](expressions/../statements.html)+  \n>    | [_Statement_](expressions/../statements.html)+ [_ExpressionWithoutBlock_](expressions/../expressions.html)  \n>    | [_ExpressionWithoutBlock_](expressions/../expressions.html)\n\nA _block expression_, or _block_, is a control flow expression and anonymous namespace scope for items and variable declarations. As a control flow expression, a block sequentially executes its component non-item declaration statements and then its final optional expression. As an anonymous namespace scope, item declarations are only in scope inside the block itself and variables declared by `let` statements are in scope from the next statement until the end of the block. See the [scopes](expressions/../names/scopes.html) chapter for more details.\n\nThe syntax for a block is `{`, then any [inner attributes](expressions/../attributes.html), then any number of [statements](expressions/../statements.html), then an optional expression, called the final operand, and finally a `}`.\n\nStatements are usually required to be followed by a semicolon, with two exceptions:\n\n1.  Item declaration statements do not need to be followed by a semicolon.\n2.  Expression statements usually require a following semicolon except if its outer expression is a flow control expression.\n\nFurthermore, extra semicolons between statements are allowed, but these semicolons do not affect semantics.\n\nWhen evaluating a block expression, each statement, except for item declaration statements, is executed sequentially. Then the final operand is executed, if given.\n\nThe type of a block is the type of the final operand, or `()` if the final operand is omitted.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn fn_call() {}\nlet _: () = {\n    fn_call();\n};\n\nlet five: i32 = {\n    fn_call();\n    5\n};\n\nassert_eq!(5, five);\n}\n```\n\n> Note: As a control flow expression, if a block expression is the outer expression of an expression statement, the expected type is `()` unless it is followed immediately by a semicolon.\n\nBlocks are always [value expressions](about:blank/expressions.html#place-expressions-and-value-expressions) and evaluate the last operand in value expression context.\n\n> **Note**: This can be used to force moving a value if really needed. For example, the following example fails on the call to `consume_self` because the struct was moved out of `s` in the block expression.\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> struct Struct;\n> \n> impl Struct {\n>     fn consume_self(self) {}\n>     fn borrow_self(&self) {}\n> }\n> \n> fn move_by_block_expression() {\n>     let s = Struct;\n> \n>     // Move the value out of `s` in the block expression.\n>     (&{ s }).borrow_self();\n> \n>     // Fails to execute because `s` is moved out of.\n>     s.consume_self();\n> }\n> }\n> ```\n\n## [`async` blocks](#async-blocks)\n\n> **Syntax**  \n> _AsyncBlockExpression_ :  \n>    `async` `move`? _BlockExpression_\n\nAn _async block_ is a variant of a block expression which evaluates to a future. The final expression of the block, if present, determines the result value of the future.\n\nExecuting an async block is similar to executing a closure expression: its immediate effect is to produce and return an anonymous type. Whereas closures return a type that implements one or more of the [`std::ops::Fn`](expressions/../../std/ops/trait.Fn.html) traits, however, the type returned for an async block implements the [`std::future::Future`](expressions/../../std/future/trait.Future.html) trait. The actual data format for this type is unspecified.\n\n> **Note:** The future type that rustc generates is roughly equivalent to an enum with one variant per `await` point, where each variant stores the data needed to resume from its corresponding point.\n\n> **Edition differences**: Async blocks are only available beginning with Rust 2018.\n\n### [Capture modes](#capture-modes)\n\nAsync blocks capture variables from their environment using the same [capture modes](about:blank/types/closure.html#capture-modes) as closures. Like closures, when written `async { .. }` the capture mode for each variable will be inferred from the content of the block. `async move { .. }` blocks however will move all referenced variables into the resulting future.\n\n### [Async context](#async-context)\n\nBecause async blocks construct a future, they define an **async context** which can in turn contain [`await` expressions](expressions/await-expr.html). Async contexts are established by async blocks as well as the bodies of async functions, whose semantics are defined in terms of async blocks.\n\n### [Control-flow operators](#control-flow-operators)\n\nAsync blocks act like a function boundary, much like closures. Therefore, the `?` operator and `return` expressions both affect the output of the future, not the enclosing function or other context. That is, `return <expr>` from within an async block will return the result of `<expr>` as the output of the future. Similarly, if `<expr>?` propagates an error, that error is propagated as the result of the future.\n\nFinally, the `break` and `continue` keywords cannot be used to branch out from an async block. Therefore the following is illegal:\n\n```rust\n#![allow(unused)]\nfn main() {\nloop {\n    async move {\n        break; // error[E0267]: `break` inside of an `async` block\n    }\n}\n}\n```\n\n## [`const` blocks](#const-blocks)\n\n> **Syntax**  \n> _ConstBlockExpression_ :  \n>    `const` _BlockExpression_\n\nA _const block_ is a variant of a block expression whose body evaluates at compile-time instead of at runtime.\n\nConst blocks allows you to define a constant value without having to define new [constant items](expressions/../items/constant-items.html), and thus they are also sometimes referred as _inline consts_. It also supports type inference so there is no need to specify the type, unlike [constant items](expressions/../items/constant-items.html).\n\nConst blocks have the ability to reference generic parameters in scope, unlike [free](about:blank/glossary.html#free-item) constant items. They are desugared to constant items with generic parameters in scope (similar to associated constants, but without a trait or type they are associated with). For example, this code:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn foo<T>() -> usize {\n    const { std::mem::size_of::<T>() + 1 }\n}\n}\n```\n\nis equivalent to:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn foo<T>() -> usize {\n    {\n        struct Const<T>(T);\n        impl<T> Const<T> {\n            const CONST: usize = std::mem::size_of::<T>() + 1;\n        }\n        Const::<T>::CONST\n    }\n}\n}\n```\n\nIf the const block expression is executed at runtime, then the constant is guaranteed to be evaluated, even if its return value is ignored:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn foo<T>() -> usize {\n    // If this code ever gets executed, then the assertion has definitely\n    // been evaluated at compile-time.\n    const { assert!(std::mem::size_of::<T>() > 0); }\n    // Here we can have unsafe code relying on the type being non-zero-sized.\n    /* ... */\n    42\n}\n}\n```\n\nIf the const block expression is not executed at runtime, it may or may not be evaluated:\n\n```rust\n#![allow(unused)]\nfn main() {\nif false {\n    // The panic may or may not occur when the program is built.\n    const { panic!(); }\n}\n}\n```\n\n## [`unsafe` blocks](#unsafe-blocks)\n\n> **Syntax**  \n> _UnsafeBlockExpression_ :  \n>    `unsafe` _BlockExpression_\n\n_See [`unsafe` block](expressions/../unsafe-blocks.html) for more information on when to use `unsafe`_\n\nA block of code can be prefixed with the `unsafe` keyword to permit [unsafe operations](expressions/../unsafety.html). Examples:\n\n```rust\n#![allow(unused)]\nfn main() {\nunsafe {\n    let b = [13u8, 17u8];\n    let a = &b[0] as *const u8;\n    assert_eq!(*a, 13);\n    assert_eq!(*a.offset(1), 17);\n}\n\nunsafe fn an_unsafe_fn() -> i32 { 10 }\nlet a = unsafe { an_unsafe_fn() };\n}\n```\n\n## [Labelled block expressions](#labelled-block-expressions)\n\nLabelled block expressions are documented in the [Loops and other breakable expressions](about:blank/expressions/loop-expr.html#labelled-block-expressions) section.\n\n## [Attributes on block expressions](#attributes-on-block-expressions)\n\n[Inner attributes](expressions/../attributes.html) are allowed directly after the opening brace of a block expression in the following situations:\n\n-   [Function](expressions/../items/functions.html) and [method](about:blank/items/associated-items.html#methods) bodies.\n-   Loop bodies ([`loop`](about:blank/expressions/loop-expr.html#infinite-loops), [`while`](about:blank/expressions/loop-expr.html#predicate-loops), [`while let`](about:blank/expressions/loop-expr.html#predicate-pattern-loops), and [`for`](about:blank/expressions/loop-expr.html#iterator-loops)).\n-   Block expressions used as a [statement](expressions/../statements.html).\n-   Block expressions as elements of [array expressions](expressions/array-expr.html), [tuple expressions](expressions/tuple-expr.html), [call expressions](expressions/call-expr.html), and tuple-style [struct](expressions/struct-expr.html) expressions.\n-   A block expression as the tail expression of another block expression.\n\nThe attributes that have meaning on a block expression are [`cfg`](expressions/../conditional-compilation.html) and [the lint check attributes](about:blank/attributes/diagnostics.html#lint-check-attributes).\n\nFor example, this function returns `true` on unix platforms and `false` on other platforms.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn is_unix_platform() -> bool {\n    #[cfg(unix)] { true }\n    #[cfg(not(unix))] { false }\n}\n}\n```\n\n## [Operator expressions](#operator-expressions)\n\n> **Syntax**  \n> _OperatorExpression_ :  \n>       [_BorrowExpression_](about:blank/expressions/operator-expr.html#borrow-operators)  \n>    | [_DereferenceExpression_](about:blank/expressions/operator-expr.html#the-dereference-operator)  \n>    | [_ErrorPropagationExpression_](about:blank/expressions/operator-expr.html#the-question-mark-operator)  \n>    | [_NegationExpression_](about:blank/expressions/operator-expr.html#negation-operators)  \n>    | [_ArithmeticOrLogicalExpression_](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators)  \n>    | [_ComparisonExpression_](about:blank/expressions/operator-expr.html#comparison-operators)  \n>    | [_LazyBooleanExpression_](about:blank/expressions/operator-expr.html#lazy-boolean-operators)  \n>    | [_TypeCastExpression_](about:blank/expressions/operator-expr.html#type-cast-expressions)  \n>    | [_AssignmentExpression_](about:blank/expressions/operator-expr.html#assignment-expressions)  \n>    | [_CompoundAssignmentExpression_](about:blank/expressions/operator-expr.html#compound-assignment-expressions)\n\nOperators are defined for built in types by the Rust language. Many of the following operators can also be overloaded using traits in `std::ops` or `std::cmp`.\n\n## [Overflow](#overflow)\n\nInteger operators will panic when they overflow when compiled in debug mode. The `-C debug-assertions` and `-C overflow-checks` compiler flags can be used to control this more directly. The following things are considered to be overflow:\n\n-   When `+`, `*` or binary `-` create a value greater than the maximum value, or less than the minimum value that can be stored.\n-   Applying unary `-` to the most negative value of any signed integer type, unless the operand is a [literal expression](about:blank/expressions/literal-expr.html#integer-literal-expressions) (or a literal expression standing alone inside one or more [grouped expressions](expressions/grouped-expr.html)).\n-   Using `/` or `%`, where the left-hand argument is the smallest integer of a signed integer type and the right-hand argument is `-1`. These checks occur even when `-C overflow-checks` is disabled, for legacy reasons.\n-   Using `<<` or `>>` where the right-hand argument is greater than or equal to the number of bits in the type of the left-hand argument, or is negative.\n\n> **Note**: The exception for literal expressions behind unary `-` means that forms such as `-128_i8` or `let j: i8 = -(128)` never cause a panic and have the expected value of -128.\n> \n> In these cases, the literal expression already has the most negative value for its type (for example, `128_i8` has the value -128) because integer literals are truncated to their type per the description in [Integer literal expressions](about:blank/expressions/literal-expr.html#integer-literal-expressions).\n> \n> Negation of these most negative values leaves the value unchanged due to two's complement overflow conventions.\n> \n> In `rustc`, these most negative expressions are also ignored by the `overflowing_literals` lint check.\n\n## [Borrow operators](#borrow-operators)\n\n> **Syntax**  \n> _BorrowExpression_ :  \n>       (`&`|`&&`) [_Expression_](expressions/../expressions.html)  \n>    | (`&`|`&&`) `mut` [_Expression_](expressions/../expressions.html)\n\nThe `&` (shared borrow) and `&mut` (mutable borrow) operators are unary prefix operators. When applied to a [place expression](about:blank/expressions.html#place-expressions-and-value-expressions), this expressions produces a reference (pointer) to the location that the value refers to. The memory location is also placed into a borrowed state for the duration of the reference. For a shared borrow (`&`), this implies that the place may not be mutated, but it may be read or shared again. For a mutable borrow (`&mut`), the place may not be accessed in any way until the borrow expires. `&mut` evaluates its operand in a mutable place expression context. If the `&` or `&mut` operators are applied to a [value expression](about:blank/expressions.html#place-expressions-and-value-expressions), then a [temporary value](about:blank/expressions.html#temporaries) is created.\n\nThese operators cannot be overloaded.\n\n```rust\n#![allow(unused)]\nfn main() {\n{\n    // a temporary with value 7 is created that lasts for this scope.\n    let shared_reference = &7;\n}\nlet mut array = [-2, 3, 9];\n{\n    // Mutably borrows `array` for this scope.\n    // `array` may only be used through `mutable_reference`.\n    let mutable_reference = &mut array;\n}\n}\n```\n\nEven though `&&` is a single token ([the lazy 'and' operator](about:blank/expressions/operator-expr.html#lazy-boolean-operators)), when used in the context of borrow expressions it works as two borrows:\n\n```rust\n#![allow(unused)]\nfn main() {\n// same meanings:\nlet a = &&  10;\nlet a = & & 10;\n\n// same meanings:\nlet a = &&&&  mut 10;\nlet a = && && mut 10;\nlet a = & & & & mut 10;\n}\n```\n\n### [Raw address-of operators](#raw-address-of-operators)\n\nRelated to the borrow operators are the _raw address-of operators_, which do not have first-class syntax, but are exposed via the macros [`ptr::addr_of!(expr)`](expressions/../../std/ptr/macro.addr_of.html) and [`ptr::addr_of_mut!(expr)`](expressions/../../std/ptr/macro.addr_of_mut.html). The expression `expr` is evaluated in place expression context. `ptr::addr_of!(expr)` then creates a const raw pointer of type `*const T` to the given place, and `ptr::addr_of_mut!(expr)` creates a mutable raw pointer of type `*mut T`.\n\nThe raw address-of operators must be used instead of a borrow operator whenever the place expression could evaluate to a place that is not properly aligned or does not store a valid value as determined by its type, or whenever creating a reference would introduce incorrect aliasing assumptions. In those situations, using a borrow operator would cause [undefined behavior](expressions/../behavior-considered-undefined.html) by creating an invalid reference, but a raw pointer may still be constructed using an address-of operator.\n\nThe following is an example of creating a raw pointer to an unaligned place through a `packed` struct:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::ptr;\n\n#[repr(packed)]\nstruct Packed {\n    f1: u8,\n    f2: u16,\n}\n\nlet packed = Packed { f1: 1, f2: 2 };\n// `&packed.f2` would create an unaligned reference, and thus be Undefined Behavior!\nlet raw_f2 = ptr::addr_of!(packed.f2);\nassert_eq!(unsafe { raw_f2.read_unaligned() }, 2);\n}\n```\n\nThe following is an example of creating a raw pointer to a place that does not contain a valid value:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::{ptr, mem::MaybeUninit};\n\nstruct Demo {\n    field: bool,\n}\n\nlet mut uninit = MaybeUninit::<Demo>::uninit();\n// `&uninit.as_mut().field` would create a reference to an uninitialized `bool`,\n// and thus be Undefined Behavior!\nlet f1_ptr = unsafe { ptr::addr_of_mut!((*uninit.as_mut_ptr()).field) };\nunsafe { f1_ptr.write(true); }\nlet init = unsafe { uninit.assume_init() };\n}\n```\n\n## [The dereference operator](#the-dereference-operator)\n\n> **Syntax**  \n> _DereferenceExpression_ :  \n>    `*` [_Expression_](expressions/../expressions.html)\n\nThe `*` (dereference) operator is also a unary prefix operator. When applied to a [pointer](expressions/../types/pointer.html) it denotes the pointed-to location. If the expression is of type `&mut T` or `*mut T`, and is either a local variable, a (nested) field of a local variable or is a mutable [place expression](about:blank/expressions.html#place-expressions-and-value-expressions), then the resulting memory location can be assigned to. Dereferencing a raw pointer requires `unsafe`.\n\nOn non-pointer types `*x` is equivalent to `*std::ops::Deref::deref(&x)` in an [immutable place expression context](about:blank/expressions.html#mutability) and `*std::ops::DerefMut::deref_mut(&mut x)` in a mutable place expression context.\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = &7;\nassert_eq!(*x, 7);\nlet y = &mut 9;\n*y = 11;\nassert_eq!(*y, 11);\n}\n```\n\n## [The question mark operator](#the-question-mark-operator)\n\n> **Syntax**  \n> _ErrorPropagationExpression_ :  \n>    [_Expression_](expressions/../expressions.html) `?`\n\nThe question mark operator (`?`) unwraps valid values or returns erroneous values, propagating them to the calling function. It is a unary postfix operator that can only be applied to the types `Result<T, E>` and `Option<T>`.\n\nWhen applied to values of the `Result<T, E>` type, it propagates errors. If the value is `Err(e)`, then it will return `Err(From::from(e))` from the enclosing function or closure. If applied to `Ok(x)`, then it will unwrap the value to evaluate to `x`.\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::num::ParseIntError;\nfn try_to_parse() -> Result<i32, ParseIntError> {\n    let x: i32 = \"123\".parse()?; // x = 123\n    let y: i32 = \"24a\".parse()?; // returns an Err() immediately\n    Ok(x + y)                    // Doesn't run.\n}\n\nlet res = try_to_parse();\nprintln!(\"{:?}\", res);\nassert!(res.is_err())\n}\n```\n\nWhen applied to values of the `Option<T>` type, it propagates `None`s. If the value is `None`, then it will return `None`. If applied to `Some(x)`, then it will unwrap the value to evaluate to `x`.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn try_option_some() -> Option<u8> {\n    let val = Some(1)?;\n    Some(val)\n}\nassert_eq!(try_option_some(), Some(1));\n\nfn try_option_none() -> Option<u8> {\n    let val = None?;\n    Some(val)\n}\nassert_eq!(try_option_none(), None);\n}\n```\n\n`?` cannot be overloaded.\n\n## [Negation operators](#negation-operators)\n\n> **Syntax**  \n> _NegationExpression_ :  \n>       `-` [_Expression_](expressions/../expressions.html)  \n>    | `!` [_Expression_](expressions/../expressions.html)\n\nThese are the last two unary operators. This table summarizes the behavior of them on primitive types and which traits are used to overload these operators for other types. Remember that signed integers are always represented using two's complement. The operands of all of these operators are evaluated in [value expression context](about:blank/expressions.html#place-expressions-and-value-expressions) so are moved or copied.\n\n| Symbol | Integer | `bool` | Floating Point | Overloading Trait |\n| --- | --- | --- | --- | --- |\n| `-` | Negation\\* |  | Negation | `std::ops::Neg` |\n| `!` | Bitwise NOT | [Logical NOT](about:blank/types/boolean.html#logical-not) |  | `std::ops::Not` |\n\n\\* Only for signed integer types.\n\nHere are some example of these operators\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = 6;\nassert_eq!(-x, -6);\nassert_eq!(!x, -7);\nassert_eq!(true, !false);\n}\n```\n\n## [Arithmetic and Logical Binary Operators](#arithmetic-and-logical-binary-operators)\n\n> **Syntax**  \n> _ArithmeticOrLogicalExpression_ :  \n>       [_Expression_](expressions/../expressions.html) `+` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `-` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `*` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `/` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `%` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `&` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `|` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `^` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `<<` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `>>` [_Expression_](expressions/../expressions.html)\n\nBinary operators expressions are all written with infix notation. This table summarizes the behavior of arithmetic and logical binary operators on primitive types and which traits are used to overload these operators for other types. Remember that signed integers are always represented using two's complement. The operands of all of these operators are evaluated in [value expression context](about:blank/expressions.html#place-expressions-and-value-expressions) so are moved or copied.\n\n| Symbol | Integer | `bool` | Floating Point | Overloading Trait | Overloading Compound Assignment Trait |\n| --- | --- | --- | --- | --- | --- |\n| `+` | Addition |  | Addition | `std::ops::Add` | `std::ops::AddAssign` |\n| `-` | Subtraction |  | Subtraction | `std::ops::Sub` | `std::ops::SubAssign` |\n| `*` | Multiplication |  | Multiplication | `std::ops::Mul` | `std::ops::MulAssign` |\n| `/` | Division\\*† |  | Division | `std::ops::Div` | `std::ops::DivAssign` |\n| `%` | Remainder\\*\\*† |  | Remainder | `std::ops::Rem` | `std::ops::RemAssign` |\n| `&` | Bitwise AND | [Logical AND](about:blank/types/boolean.html#logical-and) |  | `std::ops::BitAnd` | `std::ops::BitAndAssign` |\n| `|` | Bitwise OR | [Logical OR](about:blank/types/boolean.html#logical-or) |  | `std::ops::BitOr` | `std::ops::BitOrAssign` |\n| `^` | Bitwise XOR | [Logical XOR](about:blank/types/boolean.html#logical-xor) |  | `std::ops::BitXor` | `std::ops::BitXorAssign` |\n| `<<` | Left Shift |  |  | `std::ops::Shl` | `std::ops::ShlAssign` |\n| `>>` | Right Shift\\*\\*\\* |  |  | `std::ops::Shr` | `std::ops::ShrAssign` |\n\n\\* Integer division rounds towards zero.\n\n\\*\\* Rust uses a remainder defined with [truncating division](https://en.wikipedia.org/wiki/Modulo_operation#Variants_of_the_definition). Given `remainder = dividend % divisor`, the remainder will have the same sign as the dividend.\n\n\\*\\*\\* Arithmetic right shift on signed integer types, logical right shift on unsigned integer types.\n\n† For integer types, division by zero panics.\n\nHere are examples of these operators being used.\n\n```rust\n#![allow(unused)]\nfn main() {\nassert_eq!(3 + 6, 9);\nassert_eq!(5.5 - 1.25, 4.25);\nassert_eq!(-5 * 14, -70);\nassert_eq!(14 / 3, 4);\nassert_eq!(100 % 7, 2);\nassert_eq!(0b1010 & 0b1100, 0b1000);\nassert_eq!(0b1010 | 0b1100, 0b1110);\nassert_eq!(0b1010 ^ 0b1100, 0b110);\nassert_eq!(13 << 3, 104);\nassert_eq!(-10 >> 2, -3);\n}\n```\n\n## [Comparison Operators](#comparison-operators)\n\n> **Syntax**  \n> _ComparisonExpression_ :  \n>       [_Expression_](expressions/../expressions.html) `==` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `!=` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `>` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `<` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `>=` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `<=` [_Expression_](expressions/../expressions.html)\n\nComparison operators are also defined both for primitive types and many types in the standard library. Parentheses are required when chaining comparison operators. For example, the expression `a == b == c` is invalid and may be written as `(a == b) == c`.\n\nUnlike arithmetic and logical operators, the traits for overloading these operators are used more generally to show how a type may be compared and will likely be assumed to define actual comparisons by functions that use these traits as bounds. Many functions and macros in the standard library can then use that assumption (although not to ensure safety). Unlike the arithmetic and logical operators above, these operators implicitly take shared borrows of their operands, evaluating them in [place expression context](about:blank/expressions.html#place-expressions-and-value-expressions):\n\n```rust\n#![allow(unused)]\nfn main() {\nlet a = 1;\nlet b = 1;\na == b;\n// is equivalent to\n::std::cmp::PartialEq::eq(&a, &b);\n}\n```\n\nThis means that the operands don't have to be moved out of.\n\n| Symbol | Meaning | Overloading method |\n| --- | --- | --- |\n| `==` | Equal | `std::cmp::PartialEq::eq` |\n| `!=` | Not equal | `std::cmp::PartialEq::ne` |\n| `>` | Greater than | `std::cmp::PartialOrd::gt` |\n| `<` | Less than | `std::cmp::PartialOrd::lt` |\n| `>=` | Greater than or equal to | `std::cmp::PartialOrd::ge` |\n| `<=` | Less than or equal to | `std::cmp::PartialOrd::le` |\n\nHere are examples of the comparison operators being used.\n\n```rust\n#![allow(unused)]\nfn main() {\nassert!(123 == 123);\nassert!(23 != -12);\nassert!(12.5 > 12.2);\nassert!([1, 2, 3] < [1, 3, 4]);\nassert!('A' <= 'B');\nassert!(\"World\" >= \"Hello\");\n}\n```\n\n## [Lazy boolean operators](#lazy-boolean-operators)\n\n> **Syntax**  \n> _LazyBooleanExpression_ :  \n>       [_Expression_](expressions/../expressions.html) `||` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `&&` [_Expression_](expressions/../expressions.html)\n\nThe operators `||` and `&&` may be applied to operands of boolean type. The `||` operator denotes logical 'or', and the `&&` operator denotes logical 'and'. They differ from `|` and `&` in that the right-hand operand is only evaluated when the left-hand operand does not already determine the result of the expression. That is, `||` only evaluates its right-hand operand when the left-hand operand evaluates to `false`, and `&&` only when it evaluates to `true`.\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = false || true; // true\nlet y = false && panic!(); // false, doesn't evaluate `panic!()`\n}\n```\n\n## [Type cast expressions](#type-cast-expressions)\n\n> **Syntax**  \n> _TypeCastExpression_ :  \n>    [_Expression_](expressions/../expressions.html) `as` [_TypeNoBounds_](about:blank/types.html#type-expressions)\n\nA type cast expression is denoted with the binary operator `as`.\n\nExecuting an `as` expression casts the value on the left-hand side to the type on the right-hand side.\n\nAn example of an `as` expression:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn sum(values: &[f64]) -> f64 { 0.0 }\nfn len(values: &[f64]) -> i32 { 0 }\nfn average(values: &[f64]) -> f64 {\n    let sum: f64 = sum(values);\n    let size: f64 = len(values) as f64;\n    sum / size\n}\n}\n```\n\n`as` can be used to explicitly perform [coercions](expressions/../type-coercions.html), as well as the following additional casts. Any cast that does not fit either a coercion rule or an entry in the table is a compiler error. Here `*T` means either `*const T` or `*mut T`. `m` stands for optional `mut` in reference types and `mut` or `const` in pointer types.\n\n| Type of `e` | `U` | Cast performed by `e as U` |\n| --- | --- | --- |\n| Integer or Float type | Integer or Float type | Numeric cast |\n| Enumeration | Integer type | Enum cast |\n| `bool` or `char` | Integer type | Primitive to integer cast |\n| `u8` | `char` | `u8` to `char` cast |\n| `*T` | `*V` where `V: Sized` \\* | Pointer to pointer cast |\n| `*T` where `T: Sized` | Integer type | Pointer to address cast |\n| Integer type | `*V` where `V: Sized` | Address to pointer cast |\n| `&m₁ T` | `*m₂ T` \\*\\* | Reference to pointer cast |\n| `&m₁ [T; n]` | `*m₂ T` \\*\\* | Array to pointer cast |\n| [Function item](expressions/../types/function-item.html) | [Function pointer](expressions/../types/function-pointer.html) | Function item to function pointer cast |\n| [Function item](expressions/../types/function-item.html) | `*V` where `V: Sized` | Function item to pointer cast |\n| [Function item](expressions/../types/function-item.html) | Integer | Function item to address cast |\n| [Function pointer](expressions/../types/function-pointer.html) | `*V` where `V: Sized` | Function pointer to pointer cast |\n| [Function pointer](expressions/../types/function-pointer.html) | Integer | Function pointer to address cast |\n| Closure \\*\\*\\* | Function pointer | Closure to function pointer cast |\n\n\\* or `T` and `V` are compatible unsized types, e.g., both slices, both the same trait object.\n\n\\*\\* only when `m₁` is `mut` or `m₂` is `const`. Casting `mut` reference to `const` pointer is allowed.\n\n\\*\\*\\* only for closures that do not capture (close over) any local variables\n\n### [Semantics](#semantics)\n\n#### [Numeric cast](#numeric-cast)\n\n-   Casting between two integers of the same size (e.g. i32 -> u32) is a no-op (Rust uses 2's complement for negative values of fixed integers)\n-   Casting from a larger integer to a smaller integer (e.g. u32 -> u8) will truncate\n-   Casting from a smaller integer to a larger integer (e.g. u8 -> u32) will\n    -   zero-extend if the source is unsigned\n    -   sign-extend if the source is signed\n-   Casting from a float to an integer will round the float towards zero\n    -   `NaN` will return `0`\n    -   Values larger than the maximum integer value, including `INFINITY`, will saturate to the maximum value of the integer type.\n    -   Values smaller than the minimum integer value, including `NEG_INFINITY`, will saturate to the minimum value of the integer type.\n-   Casting from an integer to float will produce the closest possible float \\*\n    -   if necessary, rounding is according to `roundTiesToEven` mode \\*\\*\\*\n    -   on overflow, infinity (of the same sign as the input) is produced\n    -   note: with the current set of numeric types, overflow can only happen on `u128 as f32` for values greater or equal to `f32::MAX + (0.5 ULP)`\n-   Casting from an f32 to an f64 is perfect and lossless\n-   Casting from an f64 to an f32 will produce the closest possible f32 \\*\\*\n    -   if necessary, rounding is according to `roundTiesToEven` mode \\*\\*\\*\n    -   on overflow, infinity (of the same sign as the input) is produced\n\n\\* if integer-to-float casts with this rounding mode and overflow behavior are not supported natively by the hardware, these casts will likely be slower than expected.\n\n\\*\\* if f64-to-f32 casts with this rounding mode and overflow behavior are not supported natively by the hardware, these casts will likely be slower than expected.\n\n\\*\\*\\* as defined in IEEE 754-2008 §4.3.1: pick the nearest floating point number, preferring the one with an even least significant digit if exactly halfway between two floating point numbers.\n\n#### [Enum cast](#enum-cast)\n\nCasts an enum to its discriminant, then uses a numeric cast if needed. Casting is limited to the following kinds of enumerations:\n\n-   [Unit-only enums](about:blank/items/enumerations.html#unit-only-enum)\n-   [Field-less enums](about:blank/items/enumerations.html#field-less-enum) without [explicit discriminants](about:blank/items/enumerations.html#explicit-discriminants), or where only unit-variants have explicit discriminants\n\n#### [Primitive to integer cast](#primitive-to-integer-cast)\n\n-   `false` casts to `0`, `true` casts to `1`\n-   `char` casts to the value of the code point, then uses a numeric cast if needed.\n\n#### [`u8` to `char` cast](#u8-to-char-cast)\n\nCasts to the `char` with the corresponding code point.\n\n#### [Pointer to address cast](#pointer-to-address-cast)\n\nCasting from a raw pointer to an integer produces the machine address of the referenced memory. If the integer type is smaller than the pointer type, the address may be truncated; using `usize` avoids this.\n\n#### [Address to pointer cast](#address-to-pointer-cast)\n\nCasting from an integer to a raw pointer interprets the integer as a memory address and produces a pointer referencing that memory.\n\nWarning: This interacts with the Rust memory model, which is still under development. A pointer obtained from this cast may suffer additional restrictions even if it is bitwise equal to a valid pointer. Dereferencing such a pointer may be [undefined behavior](expressions/../behavior-considered-undefined.html) if aliasing rules are not followed.\n\nA trivial example of sound address arithmetic:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut values: [i32; 2] = [1, 2];\nlet p1: *mut i32 = values.as_mut_ptr();\nlet first_address = p1 as usize;\nlet second_address = first_address + 4; // 4 == size_of::<i32>()\nlet p2 = second_address as *mut i32;\nunsafe {\n    *p2 += 1;\n}\nassert_eq!(values[1], 3);\n}\n```\n\n#### [Pointer-to-pointer cast](#pointer-to-pointer-cast)\n\n`*const T` / `*mut T` can be cast to `*const U` / `*mut U` with the following behavior:\n\n-   If `T` and `U` are both sized, the pointer is returned unchanged.\n    \n-   If `T` and `U` are both unsized, the pointer is also returned unchanged. In particular, the metadata is preserved exactly.\n    \n    For instance, a cast from `*const [T]` to `*const [U]` preserves the number of elements. Note that, as a consequence, such casts do not necessarily preserve the size of the pointer's referent (e.g., casting `*const [u16]` to `*const [u8]` will result in a raw pointer which refers to an object of half the size of the original). The same holds for `str` and any compound type whose unsized tail is a slice type, such as `struct Foo(i32, [u8])` or `(u64, Foo)`.\n    \n-   If `T` is unsized and `U` is sized, the cast discards all metadata that completes the wide pointer `T` and produces a thin pointer `U` consisting of the data part of the unsized pointer.\n    \n\n## [Assignment expressions](#assignment-expressions)\n\n> **Syntax**  \n> _AssignmentExpression_ :  \n>    [_Expression_](expressions/../expressions.html) `=` [_Expression_](expressions/../expressions.html)\n\nAn _assignment expression_ moves a value into a specified place.\n\nAn assignment expression consists of a [mutable](about:blank/expressions.html#mutability) [assignee expression](about:blank/expressions.html#place-expressions-and-value-expressions), the _assignee operand_, followed by an equals sign (`=`) and a [value expression](about:blank/expressions.html#place-expressions-and-value-expressions), the _assigned value operand_. In its most basic form, an assignee expression is a [place expression](about:blank/expressions.html#place-expressions-and-value-expressions), and we discuss this case first. The more general case of destructuring assignment is discussed below, but this case always decomposes into sequential assignments to place expressions, which may be considered the more fundamental case.\n\n### [Basic assignments](#basic-assignments)\n\nEvaluating assignment expressions begins by evaluating its operands. The assigned value operand is evaluated first, followed by the assignee expression. For destructuring assignment, subexpressions of the assignee expression are evaluated left-to-right.\n\n> **Note**: This is different than other expressions in that the right operand is evaluated before the left one.\n\nIt then has the effect of first [dropping](expressions/../destructors.html) the value at the assigned place, unless the place is an uninitialized local variable or an uninitialized field of a local variable. Next it either [copies or moves](about:blank/expressions.html#moved-and-copied-types) the assigned value to the assigned place.\n\nAn assignment expression always produces [the unit value](expressions/../types/tuple.html).\n\nExample:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut x = 0;\nlet y = 0;\nx = y;\n}\n```\n\n### [Destructuring assignments](#destructuring-assignments)\n\nDestructuring assignment is a counterpart to destructuring pattern matches for variable declaration, permitting assignment to complex values, such as tuples or structs. For instance, we may swap two mutable variables:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet (mut a, mut b) = (0, 1);\n// Swap `a` and `b` using destructuring assignment.\n(b, a) = (a, b);\n}\n```\n\nIn contrast to destructuring declarations using `let`, patterns may not appear on the left-hand side of an assignment due to syntactic ambiguities. Instead, a group of expressions that correspond to patterns are designated to be [assignee expressions](about:blank/expressions.html#place-expressions-and-value-expressions), and permitted on the left-hand side of an assignment. Assignee expressions are then desugared to pattern matches followed by sequential assignment. The desugared patterns must be irrefutable: in particular, this means that only slice patterns whose length is known at compile-time, and the trivial slice `[..]`, are permitted for destructuring assignment.\n\nThe desugaring method is straightforward, and is illustrated best by example.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Struct { x: u32, y: u32 }\nlet (mut a, mut b) = (0, 0);\n(a, b) = (3, 4);\n\n[a, b] = [3, 4];\n\nStruct { x: a, y: b } = Struct { x: 3, y: 4};\n\n// desugars to:\n\n{\n    let (_a, _b) = (3, 4);\n    a = _a;\n    b = _b;\n}\n\n{\n    let [_a, _b] = [3, 4];\n    a = _a;\n    b = _b;\n}\n\n{\n    let Struct { x: _a, y: _b } = Struct { x: 3, y: 4};\n    a = _a;\n    b = _b;\n}\n}\n```\n\nIdentifiers are not forbidden from being used multiple times in a single assignee expression.\n\n[Underscore expressions](expressions/./underscore-expr.html) and empty [range expressions](expressions/./range-expr.html) may be used to ignore certain values, without binding them.\n\nNote that default binding modes do not apply for the desugared expression.\n\n## [Compound assignment expressions](#compound-assignment-expressions)\n\n> **Syntax**  \n> _CompoundAssignmentExpression_ :  \n>       [_Expression_](expressions/../expressions.html) `+=` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `-=` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `*=` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `/=` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `%=` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `&=` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `|=` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `^=` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `<<=` [_Expression_](expressions/../expressions.html)  \n>    | [_Expression_](expressions/../expressions.html) `>>=` [_Expression_](expressions/../expressions.html)\n\n_Compound assignment expressions_ combine arithmetic and logical binary operators with assignment expressions.\n\nFor example:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut x = 5;\nx += 1;\nassert!(x == 6);\n}\n```\n\nThe syntax of compound assignment is a [mutable](about:blank/expressions.html#mutability) [place expression](about:blank/expressions.html#place-expressions-and-value-expressions), the _assigned operand_, then one of the operators followed by an `=` as a single token (no whitespace), and then a [value expression](about:blank/expressions.html#place-expressions-and-value-expressions), the _modifying operand_.\n\nUnlike other place operands, the assigned place operand must be a place expression. Attempting to use a value expression is a compiler error rather than promoting it to a temporary.\n\nEvaluation of compound assignment expressions depends on the types of the operators.\n\nIf both types are primitives, then the modifying operand will be evaluated first followed by the assigned operand. It will then set the value of the assigned operand's place to the value of performing the operation of the operator with the values of the assigned operand and modifying operand.\n\n> **Note**: This is different than other expressions in that the right operand is evaluated before the left one.\n\nOtherwise, this expression is syntactic sugar for calling the function of the overloading compound assignment trait of the operator (see the table earlier in this chapter). A mutable borrow of the assigned operand is automatically taken.\n\nFor example, the following expression statements in `example` are equivalent:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Addable;\nuse std::ops::AddAssign;\n\nimpl AddAssign<Addable> for Addable {\n    /* */\nfn add_assign(&mut self, other: Addable) {}\n}\n\nfn example() {\nlet (mut a1, a2) = (Addable, Addable);\n  a1 += a2;\n\nlet (mut a1, a2) = (Addable, Addable);\n  AddAssign::add_assign(&mut a1, a2);\n}\n}\n```\n\nLike assignment expressions, compound assignment expressions always produce [the unit value](expressions/../types/tuple.html).\n\nWarning: The evaluation order of operands swaps depending on the types of the operands: with primitive types the right-hand side will get evaluated first, while with non-primitive types the left-hand side will get evaluated first. Try not to write code that depends on the evaluation order of operands in compound assignment expressions. See [this test](https://github.com/rust-lang/rust/blob/1.58.0/src/test/ui/expr/compound-assignment/eval-order.rs) for an example of using this dependency.\n\n## [Grouped expressions](#grouped-expressions)\n\n> **Syntax**  \n> _GroupedExpression_ :  \n>    `(` [_Expression_](expressions/../expressions.html) `)`\n\nA _parenthesized expression_ wraps a single expression, evaluating to that expression. The syntax for a parenthesized expression is a `(`, then an expression, called the _enclosed operand_, and then a `)`.\n\nParenthesized expressions evaluate to the value of the enclosed operand. Unlike other expressions, parenthesized expressions are both [place expressions and value expressions](about:blank/expressions.html#place-expressions-and-value-expressions). When the enclosed operand is a place expression, it is a place expression and when the enclosed operand is a value expression, it is a value expression.\n\nParentheses can be used to explicitly modify the precedence order of subexpressions within an expression.\n\nAn example of a parenthesized expression:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x: i32 = 2 + 3 * 4; // not parenthesized\nlet y: i32 = (2 + 3) * 4; // parenthesized\nassert_eq!(x, 14);\nassert_eq!(y, 20);\n}\n```\n\nAn example of a necessary use of parentheses is when calling a function pointer that is a member of a struct:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct A {\n   f: fn() -> &'static str\n}\nimpl A {\n   fn f(&self) -> &'static str {\n       \"The method f\"\n   }\n}\nlet a = A{f: || \"The field f\"};\n\nassert_eq!( a.f (), \"The method f\");\nassert_eq!((a.f)(), \"The field f\");\n}\n```\n\n## [Array and array index expressions](#array-and-array-index-expressions)\n\n## [Array expressions](#array-expressions)\n\n> **Syntax**  \n> _ArrayExpression_ :  \n>    `[` _ArrayElements_? `]`\n> \n> _ArrayElements_ :  \n>       [_Expression_](expressions/../expressions.html) ( `,` [_Expression_](expressions/../expressions.html) )\\* `,`?  \n>    | [_Expression_](expressions/../expressions.html) `;` [_Expression_](expressions/../expressions.html)\n\n_Array expressions_ construct [arrays](expressions/../types/array.html). Array expressions come in two forms.\n\nThe first form lists out every value in the array. The syntax for this form is a comma-separated list of expressions of uniform type enclosed in square brackets. This produces an array containing each of these values in the order they are written.\n\nThe syntax for the second form is two expressions separated by a semicolon (`;`) enclosed in square brackets. The expression before the `;` is called the _repeat operand_. The expression after the `;` is called the _length operand_. It must have type `usize` and be a [constant expression](about:blank/const_eval.html#constant-expressions), such as a [literal](about:blank/tokens.html#literals) or a [constant item](expressions/../items/constant-items.html). An array expression of this form creates an array with the length of the value of the length operand with each element being a copy of the repeat operand. That is, `[a; b]` creates an array containing `b` copies of the value of `a`. If the length operand has a value greater than 1 then this requires that the type of the repeat operand is [`Copy`](about:blank/special-types-and-traits.html#copy) or that it must be a [path](expressions/path-expr.html) to a constant item.\n\nWhen the repeat operand is a constant item, it is evaluated the length operand's value times. If that value is `0`, then the constant item is not evaluated at all. For expressions that are not a constant item, it is evaluated exactly once, and then the result is copied the length operand's value times.\n\n```rust\n#![allow(unused)]\nfn main() {\n[1, 2, 3, 4];\n[\"a\", \"b\", \"c\", \"d\"];\n[0; 128];              // array with 128 zeros\n[0u8, 0u8, 0u8, 0u8,];\n[[1, 0, 0], [0, 1, 0], [0, 0, 1]]; // 2D array\nconst EMPTY: Vec<i32> = Vec::new();\n[EMPTY; 2];\n}\n```\n\n## [Array and slice indexing expressions](#array-and-slice-indexing-expressions)\n\n> **Syntax**  \n> _IndexExpression_ :  \n>    [_Expression_](expressions/../expressions.html) `[` [_Expression_](expressions/../expressions.html) `]`\n\n[Array](expressions/../types/array.html) and [slice](expressions/../types/slice.html)\\-typed values can be indexed by writing a square-bracket-enclosed expression of type `usize` (the index) after them. When the array is mutable, the resulting [memory location](about:blank/expressions.html#place-expressions-and-value-expressions) can be assigned to.\n\nFor other types an index expression `a[b]` is equivalent to `*std::ops::Index::index(&a, b)`, or `*std::ops::IndexMut::index_mut(&mut a, b)` in a mutable place expression context. Just as with methods, Rust will also insert dereference operations on `a` repeatedly to find an implementation.\n\nIndices are zero-based for arrays and slices. Array access is a [constant expression](about:blank/const_eval.html#constant-expressions), so bounds can be checked at compile-time with a constant index value. Otherwise a check will be performed at run-time that will put the thread in a _panicked state_ if it fails.\n\n```rust\n#![allow(unused)]\nfn main() {\n// lint is deny by default.\n#![warn(unconditional_panic)]\n\n([1, 2, 3, 4])[2];        // Evaluates to 3\n\nlet b = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];\nb[1][2];                  // multidimensional array indexing\n\nlet x = ([\"a\", \"b\"])[10]; // warning: index out of bounds\n\nlet n = 10;\nlet y = ([\"a\", \"b\"])[n];  // panics\n\nlet arr = [\"a\", \"b\"];\narr[10];                  // warning: index out of bounds\n}\n```\n\nThe array index expression can be implemented for types other than arrays and slices by implementing the [Index](expressions/../../std/ops/trait.Index.html) and [IndexMut](expressions/../../std/ops/trait.IndexMut.html) traits.\n\n## [Tuple and tuple indexing expressions](#tuple-and-tuple-indexing-expressions)\n\n## [Tuple expressions](#tuple-expressions)\n\n> **Syntax**  \n> _TupleExpression_ :  \n>    `(` _TupleElements_? `)`\n> \n> _TupleElements_ :  \n>    ( [_Expression_](expressions/../expressions.html) `,` )+ [_Expression_](expressions/../expressions.html)?\n\nA _tuple expression_ constructs [tuple values](expressions/../types/tuple.html).\n\nThe syntax for tuple expressions is a parenthesized, comma separated list of expressions, called the _tuple initializer operands_. 1-ary tuple expressions require a comma after their tuple initializer operand to be disambiguated with a [parenthetical expression](expressions/grouped-expr.html).\n\nTuple expressions are a [value expression](about:blank/expressions.html#place-expressions-and-value-expressions) that evaluate into a newly constructed value of a tuple type. The number of tuple initializer operands is the arity of the constructed tuple. Tuple expressions without any tuple initializer operands produce the unit tuple. For other tuple expressions, the first written tuple initializer operand initializes the field `0` and subsequent operands initializes the next highest field. For example, in the tuple expression `('a', 'b', 'c')`, `'a'` initializes the value of the field `0`, `'b'` field `1`, and `'c'` field `2`.\n\nExamples of tuple expressions and their types:\n\n| Expression | Type |\n| --- | --- |\n| `()` | `()` (unit) |\n| `(0.0, 4.5)` | `(f64, f64)` |\n| `(\"x\".to_string(), )` | `(String, )` |\n| `(\"a\", 4usize, true)` | `(&'static str, usize, bool)` |\n\n## [Tuple indexing expressions](#tuple-indexing-expressions)\n\n> **Syntax**  \n> _TupleIndexingExpression_ :  \n>    [_Expression_](expressions/../expressions.html) `.` [TUPLE\\_INDEX](about:blank/tokens.html#tuple-index)\n\nA _tuple indexing expression_ accesses fields of [tuples](expressions/../types/tuple.html) and [tuple structs](expressions/../types/struct.html).\n\nThe syntax for a tuple index expression is an expression, called the _tuple operand_, then a `.`, then finally a tuple index. The syntax for the _tuple index_ is a [decimal literal](about:blank/tokens.html#integer-literals) with no leading zeros, underscores, or suffix. For example `0` and `2` are valid tuple indices but not `01`, `0_`, nor `0i32`.\n\nThe type of the tuple operand must be a [tuple type](expressions/../types/tuple.html) or a [tuple struct](expressions/../types/struct.html). The tuple index must be a name of a field of the type of the tuple operand.\n\nEvaluation of tuple index expressions has no side effects beyond evaluation of its tuple operand. As a [place expression](about:blank/expressions.html#place-expressions-and-value-expressions), it evaluates to the location of the field of the tuple operand with the same name as the tuple index.\n\nExamples of tuple indexing expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Indexing a tuple\nlet pair = (\"a string\", 2);\nassert_eq!(pair.1, 2);\n\n// Indexing a tuple struct\nstruct Point(f32, f32);\nlet point = Point(1.0, 0.0);\nassert_eq!(point.0, 1.0);\nassert_eq!(point.1, 0.0);\n}\n```\n\n> **Note**: Unlike field access expressions, tuple index expressions can be the function operand of a [call expression](expressions/./call-expr.html) as it cannot be confused with a method call since method names cannot be numbers.\n\n> **Note**: Although arrays and slices also have elements, you must use an [array or slice indexing expression](about:blank/expressions/array-expr.html#array-and-slice-indexing-expressions) or a [slice pattern](about:blank/patterns.html#slice-patterns) to access their elements.\n\n## [Struct expressions](#struct-expressions)\n\n> **Syntax**  \n> _StructExpression_ :  \n>       _StructExprStruct_  \n>    | _StructExprTuple_  \n>    | _StructExprUnit_\n> \n> _StructExprStruct_ :  \n>    [_PathInExpression_](about:blank/paths.html#paths-in-expressions) `{` (_StructExprFields_ | _StructBase_)? `}`\n> \n> _StructExprFields_ :  \n>    _StructExprField_ (`,` _StructExprField_)\\* (`,` _StructBase_ | `,`?)\n> \n> _StructExprField_ :  \n>    [_OuterAttribute_](expressions/../attributes.html) \\*  \n>    (  \n>          [IDENTIFIER](expressions/../identifiers.html)  \n>       | ([IDENTIFIER](expressions/../identifiers.html) | [TUPLE\\_INDEX](about:blank/tokens.html#tuple-index)) `:` [_Expression_](expressions/../expressions.html)  \n>    )\n> \n> _StructBase_ :  \n>    `..` [_Expression_](expressions/../expressions.html)\n> \n> _StructExprTuple_ :  \n>    [_PathInExpression_](about:blank/paths.html#paths-in-expressions) `(`  \n>       ( [_Expression_](expressions/../expressions.html) (`,` [_Expression_](expressions/../expressions.html))\\* `,`? )?  \n>    `)`\n> \n> _StructExprUnit_ : [_PathInExpression_](about:blank/paths.html#paths-in-expressions)\n\nA _struct expression_ creates a struct, enum, or union value. It consists of a path to a [struct](expressions/../items/structs.html), [enum variant](expressions/../items/enumerations.html), or [union](expressions/../items/unions.html) item followed by the values for the fields of the item. There are three forms of struct expressions: struct, tuple, and unit.\n\nThe following are examples of struct expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Point { x: f64, y: f64 }\nstruct NothingInMe { }\nstruct TuplePoint(f64, f64);\nmod game { pub struct User<'a> { pub name: &'a str, pub age: u32, pub score: usize } }\nstruct Cookie; fn some_fn<T>(t: T) {}\nPoint {x: 10.0, y: 20.0};\nNothingInMe {};\nTuplePoint(10.0, 20.0);\nTuplePoint { 0: 10.0, 1: 20.0 }; // Results in the same value as the above line\nlet u = game::User {name: \"Joe\", age: 35, score: 100_000};\nsome_fn::<Cookie>(Cookie);\n}\n```\n\n## [Field struct expression](#field-struct-expression)\n\nA struct expression with fields enclosed in curly braces allows you to specify the value for each individual field in any order. The field name is separated from its value with a colon.\n\nA value of a [union](expressions/../items/unions.html) type can only be created using this syntax, and it must specify exactly one field.\n\n## [Functional update syntax](#functional-update-syntax)\n\nA struct expression that constructs a value of a struct type can terminate with the syntax `..` followed by an expression to denote a functional update. The expression following `..` (the base) must have the same struct type as the new struct type being formed.\n\nThe entire expression uses the given values for the fields that were specified and moves or copies the remaining fields from the base expression. As with all struct expressions, all of the fields of the struct must be [visible](expressions/../visibility-and-privacy.html), even those not explicitly named.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Point3d { x: i32, y: i32, z: i32 }\nlet mut base = Point3d {x: 1, y: 2, z: 3};\nlet y_ref = &mut base.y;\nPoint3d {y: 0, z: 10, .. base}; // OK, only base.x is accessed\ndrop(y_ref);\n}\n```\n\nStruct expressions with curly braces can't be used directly in a [loop](expressions/loop-expr.html) or [if](about:blank/expressions/if-expr.html#if-expressions) expression's head, or in the [scrutinee](about:blank/glossary.html#scrutinee) of an [if let](about:blank/expressions/if-expr.html#if-let-expressions) or [match](expressions/match-expr.html) expression. However, struct expressions can be used in these situations if they are within another expression, for example inside [parentheses](expressions/grouped-expr.html).\n\nThe field names can be decimal integer values to specify indices for constructing tuple structs. This can be used with base structs to fill out the remaining indices not specified:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Color(u8, u8, u8);\nlet c1 = Color(0, 0, 0);  // Typical way of creating a tuple struct.\nlet c2 = Color{0: 255, 1: 127, 2: 0};  // Specifying fields by index.\nlet c3 = Color{1: 0, ..c2};  // Fill out all other fields using a base struct.\n}\n```\n\n### [Struct field init shorthand](#struct-field-init-shorthand)\n\nWhen initializing a data structure (struct, enum, union) with named (but not numbered) fields, it is allowed to write `fieldname` as a shorthand for `fieldname: fieldname`. This allows a compact syntax with less duplication. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Point3d { x: i32, y: i32, z: i32 }\nlet x = 0;\nlet y_value = 0;\nlet z = 0;\nPoint3d { x: x, y: y_value, z: z };\nPoint3d { x, y: y_value, z };\n}\n```\n\n## [Tuple struct expression](#tuple-struct-expression)\n\nA struct expression with fields enclosed in parentheses constructs a tuple struct. Though it is listed here as a specific expression for completeness, it is equivalent to a [call expression](expressions/call-expr.html) to the tuple struct's constructor. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Position(i32, i32, i32);\nPosition(0, 0, 0);  // Typical way of creating a tuple struct.\nlet c = Position;  // `c` is a function that takes 3 arguments.\nlet pos = c(8, 6, 7);  // Creates a `Position` value.\n}\n```\n\n## [Unit struct expression](#unit-struct-expression)\n\nA unit struct expression is just the path to a unit struct item. This refers to the unit struct's implicit constant of its value. The unit struct value can also be constructed with a fieldless struct expression. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Gamma;\nlet a = Gamma;  // Gamma unit value.\nlet b = Gamma{};  // Exact same value as `a`.\n}\n```\n\n## [Call expressions](#call-expressions)\n\n> **Syntax**  \n> _CallExpression_ :  \n>    [_Expression_](expressions/../expressions.html) `(` _CallParams_? `)`\n> \n> _CallParams_ :  \n>    [_Expression_](expressions/../expressions.html) ( `,` [_Expression_](expressions/../expressions.html) )\\* `,`?\n\nA _call expression_ calls a function. The syntax of a call expression is an expression, called the _function operand_, followed by a parenthesized comma-separated list of expression, called the _argument operands_. If the function eventually returns, then the expression completes. For [non-function types](expressions/../types/function-item.html), the expression `f(...)` uses the method on one of the [`std::ops::Fn`](expressions/../../std/ops/trait.Fn.html), [`std::ops::FnMut`](expressions/../../std/ops/trait.FnMut.html) or [`std::ops::FnOnce`](expressions/../../std/ops/trait.FnOnce.html) traits, which differ in whether they take the type by reference, mutable reference, or take ownership respectively. An automatic borrow will be taken if needed. The function operand will also be [automatically dereferenced](about:blank/expressions/field-expr.html#automatic-dereferencing) as required.\n\nSome examples of call expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn add(x: i32, y: i32) -> i32 { 0 }\nlet three: i32 = add(1i32, 2i32);\nlet name: &'static str = (|| \"Rust\")();\n}\n```\n\n## [Disambiguating Function Calls](#disambiguating-function-calls)\n\nAll function calls are sugar for a more explicit [fully-qualified syntax](about:blank/paths.html#qualified-paths). Function calls may need to be fully qualified, depending on the ambiguity of a call in light of in-scope items.\n\n> **Note**: In the past, the terms \"Unambiguous Function Call Syntax\", \"Universal Function Call Syntax\", or \"UFCS\", have been used in documentation, issues, RFCs, and other community writings. However, these terms lack descriptive power and potentially confuse the issue at hand. We mention them here for searchability's sake.\n\nSeveral situations often occur which result in ambiguities about the receiver or referent of method or associated function calls. These situations may include:\n\n-   Multiple in-scope traits define methods with the same name for the same types\n-   Auto-`deref` is undesirable; for example, distinguishing between methods on a smart pointer itself and the pointer's referent\n-   Methods which take no arguments, like [`default()`](about:blank/std/default/trait.Default.html#tymethod.default), and return properties of a type, like [`size_of()`](expressions/../../std/mem/fn.size_of.html)\n\nTo resolve the ambiguity, the programmer may refer to their desired method or function using more specific paths, types, or traits.\n\nFor example,\n\n```rust\ntrait Pretty {\n    fn print(&self);\n}\n\ntrait Ugly {\n    fn print(&self);\n}\n\nstruct Foo;\nimpl Pretty for Foo {\n    fn print(&self) {}\n}\n\nstruct Bar;\nimpl Pretty for Bar {\n    fn print(&self) {}\n}\nimpl Ugly for Bar {\n    fn print(&self) {}\n}\n\nfn main() {\n    let f = Foo;\n    let b = Bar;\n\n    // we can do this because we only have one item called `print` for `Foo`s\n    f.print();\n    // more explicit, and, in the case of `Foo`, not necessary\n    Foo::print(&f);\n    // if you're not into the whole brevity thing\n    <Foo as Pretty>::print(&f);\n\n    // b.print(); // Error: multiple 'print' found\n    // Bar::print(&b); // Still an error: multiple `print` found\n\n    // necessary because of in-scope items defining `print`\n    <Bar as Pretty>::print(&b);\n}\n```\n\nRefer to [RFC 132](https://github.com/rust-lang/rfcs/blob/master/text/0132-ufcs.md) for further details and motivations.\n\n## [Method-call expressions](#method-call-expressions)\n\n> **Syntax**  \n> _MethodCallExpression_ :  \n>    [_Expression_](expressions/../expressions.html) `.` [_PathExprSegment_](about:blank/paths.html#paths-in-expressions) `(`[_CallParams_](expressions/call-expr.html)? `)`\n\nA _method call_ consists of an expression (the _receiver_) followed by a single dot, an expression path segment, and a parenthesized expression-list. Method calls are resolved to associated [methods](about:blank/items/associated-items.html#methods) on specific traits, either statically dispatching to a method if the exact `self`\\-type of the left-hand-side is known, or dynamically dispatching if the left-hand-side expression is an indirect [trait object](expressions/../types/trait-object.html).\n\n```rust\n#![allow(unused)]\nfn main() {\nlet pi: Result<f32, _> = \"3.14\".parse();\nlet log_pi = pi.unwrap_or(1.0).log(2.72);\nassert!(1.14 < log_pi && log_pi < 1.15)\n}\n```\n\nWhen looking up a method call, the receiver may be automatically dereferenced or borrowed in order to call a method. This requires a more complex lookup process than for other functions, since there may be a number of possible methods to call. The following procedure is used:\n\nThe first step is to build a list of candidate receiver types. Obtain these by repeatedly [dereferencing](about:blank/expressions/operator-expr.html#the-dereference-operator) the receiver expression's type, adding each type encountered to the list, then finally attempting an [unsized coercion](about:blank/type-coercions.html#unsized-coercions) at the end, and adding the result type if that is successful. Then, for each candidate `T`, add `&T` and `&mut T` to the list immediately after `T`.\n\nFor instance, if the receiver has type `Box<[i32;2]>`, then the candidate types will be `Box<[i32;2]>`, `&Box<[i32;2]>`, `&mut Box<[i32;2]>`, `[i32; 2]` (by dereferencing), `&[i32; 2]`, `&mut [i32; 2]`, `[i32]` (by unsized coercion), `&[i32]`, and finally `&mut [i32]`.\n\nThen, for each candidate type `T`, search for a [visible](expressions/../visibility-and-privacy.html) method with a receiver of that type in the following places:\n\n1.  `T`'s inherent methods (methods implemented directly on `T`).\n2.  Any of the methods provided by a [visible](expressions/../visibility-and-privacy.html) trait implemented by `T`. If `T` is a type parameter, methods provided by trait bounds on `T` are looked up first. Then all remaining methods in scope are looked up.\n\n> Note: the lookup is done for each type in order, which can occasionally lead to surprising results. The below code will print \"In trait impl!\", because `&self` methods are looked up first, the trait method is found before the struct's `&mut self` method is found.\n> \n> ```rust\n> struct Foo {}\n> \n> trait Bar {\n>   fn bar(&self);\n> }\n> \n> impl Foo {\n>   fn bar(&mut self) {\n>     println!(\"In struct impl!\")\n>   }\n> }\n> \n> impl Bar for Foo {\n>   fn bar(&self) {\n>     println!(\"In trait impl!\")\n>   }\n> }\n> \n> fn main() {\n>   let mut f = Foo{};\n>   f.bar();\n> }\n> ```\n\nIf this results in multiple possible candidates, then it is an error, and the receiver must be [converted](about:blank/expressions/call-expr.html#disambiguating-function-calls) to an appropriate receiver type to make the method call.\n\nThis process does not take into account the mutability or lifetime of the receiver, or whether a method is `unsafe`. Once a method is looked up, if it can't be called for one (or more) of those reasons, the result is a compiler error.\n\nIf a step is reached where there is more than one possible method, such as where generic methods or traits are considered the same, then it is a compiler error. These cases require a [disambiguating function call syntax](about:blank/expressions/call-expr.html#disambiguating-function-calls) for method and function invocation.\n\n> **Edition Differences**: Before the 2021 edition, during the search for visible methods, if the candidate receiver type is an [array type](expressions/../types/array.html), methods provided by the standard library [`IntoIterator`](expressions/../../std/iter/trait.IntoIterator.html) trait are ignored.\n> \n> The edition used for this purpose is determined by the token representing the method name.\n> \n> This special case may be removed in the future.\n\n_**Warning:**_ For [trait objects](expressions/../types/trait-object.html), if there is an inherent method of the same name as a trait method, it will give a compiler error when trying to call the method in a method call expression. Instead, you can call the method using [disambiguating function call syntax](about:blank/expressions/call-expr.html#disambiguating-function-calls), in which case it calls the trait method, not the inherent method. There is no way to call the inherent method. Just don't define inherent methods on trait objects with the same name as a trait method and you'll be fine.\n\n## [Field access expressions](#field-access-expressions)\n\n> **Syntax**  \n> _FieldExpression_ :  \n>    [_Expression_](expressions/../expressions.html) `.` [IDENTIFIER](expressions/../identifiers.html)\n\nA _field expression_ is a [place expression](about:blank/expressions.html#place-expressions-and-value-expressions) that evaluates to the location of a field of a [struct](expressions/../items/structs.html) or [union](expressions/../items/unions.html). When the operand is [mutable](about:blank/expressions.html#mutability), the field expression is also mutable.\n\nThe syntax for a field expression is an expression, called the _container operand_, then a `.`, and finally an [identifier](expressions/../identifiers.html). Field expressions cannot be followed by a parenthetical comma-separated list of expressions, as that is instead parsed as a [method call expression](expressions/method-call-expr.html). That is, they cannot be the function operand of a [call expression](expressions/call-expr.html).\n\n> **Note**: Wrap the field expression in a [parenthesized expression](expressions/grouped-expr.html) to use it in a call expression.\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> struct HoldsCallable<F: Fn()> { callable: F }\n> let holds_callable = HoldsCallable { callable: || () };\n> \n> // Invalid: Parsed as calling the method \"callable\"\n> // holds_callable.callable();\n> \n> // Valid\n> (holds_callable.callable)();\n> }\n> ```\n\nExamples:\n\n```rust\nmystruct.myfield;\nfoo().x;\n(Struct {a: 10, b: 20}).a;\n(mystruct.function_field)() // Call expression containing a field expression\n```\n\n## [Automatic dereferencing](#automatic-dereferencing)\n\nIf the type of the container operand implements [`Deref`](about:blank/special-types-and-traits.html#deref-and-derefmut) or [`DerefMut`](about:blank/special-types-and-traits.html#deref-and-derefmut) depending on whether the operand is [mutable](about:blank/expressions.html#mutability), it is _automatically dereferenced_ as many times as necessary to make the field access possible. This process is also called _autoderef_ for short.\n\n## [Borrowing](#borrowing)\n\nThe fields of a struct or a reference to a struct are treated as separate entities when borrowing. If the struct does not implement [`Drop`](about:blank/special-types-and-traits.html#drop) and is stored in a local variable, this also applies to moving out of each of its fields. This also does not apply if automatic dereferencing is done though user-defined types other than [`Box`](about:blank/special-types-and-traits.html#boxt).\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct A { f1: String, f2: String, f3: String }\nlet mut x: A;\nx = A {\n    f1: \"f1\".to_string(),\n    f2: \"f2\".to_string(),\n    f3: \"f3\".to_string()\n};\nlet a: &mut String = &mut x.f1; // x.f1 borrowed mutably\nlet b: &String = &x.f2;         // x.f2 borrowed immutably\nlet c: &String = &x.f2;         // Can borrow again\nlet d: String = x.f3;           // Move out of x.f3\n}\n```\n\n## [Closure expressions](#closure-expressions)\n\n> **Syntax**  \n> _ClosureExpression_ :  \n>    `move`?  \n>    ( `||` | `|` _ClosureParameters_? `|` )  \n>    ([_Expression_](expressions/../expressions.html) | `->` [_TypeNoBounds_](about:blank/types.html#type-expressions) [_BlockExpression_](expressions/block-expr.html))\n> \n> _ClosureParameters_ :  \n>    _ClosureParam_ (`,` _ClosureParam_)\\* `,`?\n> \n> _ClosureParam_ :  \n>    [_OuterAttribute_](expressions/../attributes.html)\\* [_PatternNoTopAlt_](expressions/../patterns.html) ( `:` [_Type_](about:blank/types.html#type-expressions) )?\n\nA _closure expression_, also known as a lambda expression or a lambda, defines a [closure type](expressions/../types/closure.html) and evaluates to a value of that type. The syntax for a closure expression is an optional `move` keyword, then a pipe-symbol-delimited (`|`) comma-separated list of [patterns](expressions/../patterns.html), called the _closure parameters_ each optionally followed by a `:` and a type, then an optional `->` and type, called the _return type_, and then an expression, called the _closure body operand_. The optional type after each pattern is a type annotation for the pattern. If there is a return type, the closure body must be a [block](expressions/block-expr.html).\n\nA closure expression denotes a function that maps a list of parameters onto the expression that follows the parameters. Just like a [`let` binding](about:blank/statements.html#let-statements), the closure parameters are irrefutable [patterns](expressions/../patterns.html), whose type annotation is optional and will be inferred from context if not given. Each closure expression has a unique, anonymous type.\n\nSignificantly, closure expressions _capture their environment_, which regular [function definitions](expressions/../items/functions.html) do not. Without the `move` keyword, the closure expression [infers how it captures each variable from its environment](about:blank/types/closure.html#capture-modes), preferring to capture by shared reference, effectively borrowing all outer variables mentioned inside the closure's body. If needed the compiler will infer that instead mutable references should be taken, or that the values should be moved or copied (depending on their type) from the environment. A closure can be forced to capture its environment by copying or moving values by prefixing it with the `move` keyword. This is often used to ensure that the closure's lifetime is `'static`.\n\n## [Closure trait implementations](#closure-trait-implementations)\n\nWhich traits the closure type implement depends on how variables are captured and the types of the captured variables. See the [call traits and coercions](about:blank/types/closure.html#call-traits-and-coercions) chapter for how and when a closure implements `Fn`, `FnMut`, and `FnOnce`. The closure type implements [`Send`](about:blank/special-types-and-traits.html#send) and [`Sync`](about:blank/special-types-and-traits.html#sync) if the type of every captured variable also implements the trait.\n\n## [Example](#example)\n\nIn this example, we define a function `ten_times` that takes a higher-order function argument, and we then call it with a closure expression as an argument, followed by a closure expression that moves values from its environment.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn ten_times<F>(f: F) where F: Fn(i32) {\n    for index in 0..10 {\n        f(index);\n    }\n}\n\nten_times(|j| println!(\"hello, {}\", j));\n// With type annotations\nten_times(|j: i32| -> () { println!(\"hello, {}\", j) });\n\nlet word = \"konnichiwa\".to_owned();\nten_times(move |j| println!(\"{}, {}\", word, j));\n}\n```\n\n## [Attributes on closure parameters](#attributes-on-closure-parameters)\n\nAttributes on closure parameters follow the same rules and restrictions as [regular function parameters](about:blank/items/functions.html#attributes-on-function-parameters).\n\n## [Loops and other breakable expressions](#loops-and-other-breakable-expressions)\n\n> **Syntax**  \n> _LoopExpression_ :  \n>    [_LoopLabel_](about:blank/expressions/loop-expr.html#loop-labels)? (  \n>          [_InfiniteLoopExpression_](about:blank/expressions/loop-expr.html#infinite-loops)  \n>       | [_PredicateLoopExpression_](about:blank/expressions/loop-expr.html#predicate-loops)  \n>       | [_PredicatePatternLoopExpression_](about:blank/expressions/loop-expr.html#predicate-pattern-loops)  \n>       | [_IteratorLoopExpression_](about:blank/expressions/loop-expr.html#iterator-loops)  \n>       | [_LabelBlockExpression_](about:blank/expressions/loop-expr.html#labelled-block-expressions)  \n>    )\n\nRust supports five loop expressions:\n\n-   A [`loop` expression](about:blank/expressions/loop-expr.html#infinite-loops) denotes an infinite loop.\n-   A [`while` expression](about:blank/expressions/loop-expr.html#predicate-loops) loops until a predicate is false.\n-   A [`while let` expression](about:blank/expressions/loop-expr.html#predicate-pattern-loops) tests a pattern.\n-   A [`for` expression](about:blank/expressions/loop-expr.html#iterator-loops) extracts values from an iterator, looping until the iterator is empty.\n-   A [labelled block expression](about:blank/expressions/loop-expr.html#labelled-block-expressions) runs a loop exactly once, but allows exiting the loop early with `break`.\n\nAll five types of loop support [`break` expressions](about:blank/expressions/loop-expr.html#break-expressions), and [labels](about:blank/expressions/loop-expr.html#loop-labels). All except labelled block expressions support [`continue` expressions](about:blank/expressions/loop-expr.html#continue-expressions). Only `loop` and labelled block expressions support [evaluation to non-trivial values](about:blank/expressions/loop-expr.html#break-and-loop-values).\n\n## [Infinite loops](#infinite-loops)\n\n> **Syntax**  \n> _InfiniteLoopExpression_ :  \n>    `loop` [_BlockExpression_](expressions/block-expr.html)\n\nA `loop` expression repeats execution of its body continuously: `loop { println!(\"I live.\"); }`.\n\nA `loop` expression without an associated `break` expression is diverging and has type [`!`](expressions/../types/never.html). A `loop` expression containing associated [`break` expression(s)](about:blank/expressions/loop-expr.html#break-expressions) may terminate, and must have type compatible with the value of the `break` expression(s).\n\n## [Predicate loops](#predicate-loops)\n\n> **Syntax**  \n> _PredicateLoopExpression_ :  \n>    `while` [_Expression_](expressions/../expressions.html)_except struct expression_ [_BlockExpression_](expressions/block-expr.html)\n\nA `while` loop begins by evaluating the [boolean](expressions/../types/boolean.html) loop conditional operand. If the loop conditional operand evaluates to `true`, the loop body block executes, then control returns to the loop conditional operand. If the loop conditional expression evaluates to `false`, the `while` expression completes.\n\nAn example:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut i = 0;\n\nwhile i < 10 {\n    println!(\"hello\");\n    i = i + 1;\n}\n}\n```\n\n## [Predicate pattern loops](#predicate-pattern-loops)\n\n> **Syntax**  \n> [_PredicatePatternLoopExpression_](about:blank/expressions/loop-expr.html#predicate-pattern-loops) :  \n>    `while` `let` [_Pattern_](expressions/../patterns.html) `=` [_Scrutinee_](expressions/match-expr.html)_except lazy boolean operator expression_ [_BlockExpression_](expressions/block-expr.html)\n\nA `while let` loop is semantically similar to a `while` loop but in place of a condition expression it expects the keyword `let` followed by a pattern, an `=`, a [scrutinee](about:blank/glossary.html#scrutinee) expression and a block expression. If the value of the scrutinee matches the pattern, the loop body block executes then control returns to the pattern matching statement. Otherwise, the while expression completes.\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut x = vec![1, 2, 3];\n\nwhile let Some(y) = x.pop() {\n    println!(\"y = {}\", y);\n}\n\nwhile let _ = 5 {\n    println!(\"Irrefutable patterns are always true\");\n    break;\n}\n}\n```\n\nA `while let` loop is equivalent to a `loop` expression containing a [`match` expression](expressions/match-expr.html) as follows.\n\n```rust\n'label: while let PATS = EXPR {\n    /* loop body */\n}\n```\n\nis equivalent to\n\n```rust\n'label: loop {\n    match EXPR {\n        PATS => { /* loop body */ },\n        _ => break,\n    }\n}\n```\n\nMultiple patterns may be specified with the `|` operator. This has the same semantics as with `|` in `match` expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut vals = vec![2, 3, 1, 2, 2];\nwhile let Some(v @ 1) | Some(v @ 2) = vals.pop() {\n    // Prints 2, 2, then 1\n    println!(\"{}\", v);\n}\n}\n```\n\nAs is the case in [`if let` expressions](about:blank/expressions/if-expr.html#if-let-expressions), the scrutinee cannot be a [lazy boolean operator expression](about:blank/expressions/operator-expr.html#lazy-boolean-operators).\n\n## [Iterator loops](#iterator-loops)\n\n> **Syntax**  \n> _IteratorLoopExpression_ :  \n>    `for` [_Pattern_](expressions/../patterns.html) `in` [_Expression_](expressions/../expressions.html)_except struct expression_ [_BlockExpression_](expressions/block-expr.html)\n\nA `for` expression is a syntactic construct for looping over elements provided by an implementation of `std::iter::IntoIterator`. If the iterator yields a value, that value is matched against the irrefutable pattern, the body of the loop is executed, and then control returns to the head of the `for` loop. If the iterator is empty, the `for` expression completes.\n\nAn example of a `for` loop over the contents of an array:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet v = &[\"apples\", \"cake\", \"coffee\"];\n\nfor text in v {\n    println!(\"I like {}.\", text);\n}\n}\n```\n\nAn example of a for loop over a series of integers:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut sum = 0;\nfor n in 1..11 {\n    sum += n;\n}\nassert_eq!(sum, 55);\n}\n```\n\nA `for` loop is equivalent to a `loop` expression containing a [`match` expression](expressions/match-expr.html) as follows:\n\n```rust\n'label: for PATTERN in iter_expr {\n    /* loop body */\n}\n```\n\nis equivalent to\n\n```rust\n{\n    let result = match IntoIterator::into_iter(iter_expr) {\n        mut iter => 'label: loop {\n            let mut next;\n            match Iterator::next(&mut iter) {\n                Option::Some(val) => next = val,\n                Option::None => break,\n            };\n            let PATTERN = next;\n            let () = { /* loop body */ };\n        },\n    };\n    result\n}\n```\n\n`IntoIterator`, `Iterator`, and `Option` are always the standard library items here, not whatever those names resolve to in the current scope. The variable names `next`, `iter`, and `val` are for exposition only, they do not actually have names the user can type.\n\n> **Note**: that the outer `match` is used to ensure that any [temporary values](about:blank/expressions.html#temporaries) in `iter_expr` don't get dropped before the loop is finished. `next` is declared before being assigned because it results in types being inferred correctly more often.\n\n## [Loop labels](#loop-labels)\n\n> **Syntax**  \n> _LoopLabel_ :  \n>    [LIFETIME\\_OR\\_LABEL](about:blank/tokens.html#lifetimes-and-loop-labels) `:`\n\nA loop expression may optionally have a _label_. The label is written as a lifetime preceding the loop expression, as in `'foo: loop { break 'foo; }`, `'bar: while false {}`, `'humbug: for _ in 0..0 {}`. If a label is present, then labeled `break` and `continue` expressions nested within this loop may exit out of this loop or return control to its head. See [break expressions](about:blank/expressions/loop-expr.html#break-expressions) and [continue expressions](about:blank/expressions/loop-expr.html#continue-expressions).\n\nLabels follow the hygiene and shadowing rules of local variables. For example, this code will print \"outer loop\":\n\n```rust\n#![allow(unused)]\nfn main() {\n'a: loop {\n    'a: loop {\n        break 'a;\n    }\n    print!(\"outer loop\");\n    break 'a;\n}\n}\n```\n\n## [`break` expressions](#break-expressions)\n\n> **Syntax**  \n> _BreakExpression_ :  \n>    `break` [LIFETIME\\_OR\\_LABEL](about:blank/tokens.html#lifetimes-and-loop-labels)? [_Expression_](expressions/../expressions.html)?\n\nWhen `break` is encountered, execution of the associated loop body is immediately terminated, for example:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut last = 0;\nfor x in 1..100 {\n    if x > 12 {\n        break;\n    }\n    last = x;\n}\nassert_eq!(last, 12);\n}\n```\n\nA `break` expression is normally associated with the innermost `loop`, `for` or `while` loop enclosing the `break` expression, but a [label](about:blank/expressions/loop-expr.html#loop-labels) can be used to specify which enclosing loop is affected. Example:\n\n```rust\n#![allow(unused)]\nfn main() {\n'outer: loop {\n    while true {\n        break 'outer;\n    }\n}\n}\n```\n\nA `break` expression is only permitted in the body of a loop, and has one of the forms `break`, `break 'label` or ([see below](about:blank/expressions/loop-expr.html#break-and-loop-values)) `break EXPR` or `break 'label EXPR`.\n\n## [Labelled block expressions](#labelled-block-expressions-1)\n\n> **Syntax**  \n> _LabelBlockExpression_ :  \n>    [_BlockExpression_](expressions/block-expr.html)\n\nLabelled block expressions are exactly like block expressions, except that they allow using `break` expressions within the block. Unlike loops, `break` expressions within a labelled block expression _must_ have a label (i.e. the label is not optional). Similarly, labelled block expressions _must_ begin with a label.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn do_thing() {}\nfn condition_not_met() -> bool { true }\nfn do_next_thing() {}\nfn do_last_thing() {}\nlet result = 'block: {\n    do_thing();\n    if condition_not_met() {\n        break 'block 1;\n    }\n    do_next_thing();\n    if condition_not_met() {\n        break 'block 2;\n    }\n    do_last_thing();\n    3\n};\n}\n```\n\n## [`continue` expressions](#continue-expressions)\n\n> **Syntax**  \n> _ContinueExpression_ :  \n>    `continue` [LIFETIME\\_OR\\_LABEL](about:blank/tokens.html#lifetimes-and-loop-labels)?\n\nWhen `continue` is encountered, the current iteration of the associated loop body is immediately terminated, returning control to the loop _head_. In the case of a `while` loop, the head is the conditional expression controlling the loop. In the case of a `for` loop, the head is the call-expression controlling the loop.\n\nLike `break`, `continue` is normally associated with the innermost enclosing loop, but `continue 'label` may be used to specify the loop affected. A `continue` expression is only permitted in the body of a loop.\n\n## [`break` and loop values](#break-and-loop-values)\n\nWhen associated with a `loop`, a break expression may be used to return a value from that loop, via one of the forms `break EXPR` or `break 'label EXPR`, where `EXPR` is an expression whose result is returned from the `loop`. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet (mut a, mut b) = (1, 1);\nlet result = loop {\n    if b > 10 {\n        break b;\n    }\n    let c = a + b;\n    a = b;\n    b = c;\n};\n// first number in Fibonacci sequence over 10:\nassert_eq!(result, 13);\n}\n```\n\nIn the case a `loop` has an associated `break`, it is not considered diverging, and the `loop` must have a type compatible with each `break` expression. `break` without an expression is considered identical to `break` with expression `()`.\n\n## [Range expressions](#range-expressions)\n\n> **Syntax**  \n> _RangeExpression_ :  \n>       _RangeExpr_  \n>    | _RangeFromExpr_  \n>    | _RangeToExpr_  \n>    | _RangeFullExpr_  \n>    | _RangeInclusiveExpr_  \n>    | _RangeToInclusiveExpr_\n> \n> _RangeExpr_ :  \n>    [_Expression_](expressions/../expressions.html) `..` [_Expression_](expressions/../expressions.html)\n> \n> _RangeFromExpr_ :  \n>    [_Expression_](expressions/../expressions.html) `..`\n> \n> _RangeToExpr_ :  \n>    `..` [_Expression_](expressions/../expressions.html)\n> \n> _RangeFullExpr_ :  \n>    `..`\n> \n> _RangeInclusiveExpr_ :  \n>    [_Expression_](expressions/../expressions.html) `..=` [_Expression_](expressions/../expressions.html)\n> \n> _RangeToInclusiveExpr_ :  \n>    `..=` [_Expression_](expressions/../expressions.html)\n\nThe `..` and `..=` operators will construct an object of one of the `std::ops::Range` (or `core::ops::Range`) variants, according to the following table:\n\nExamples:\n\n```rust\n#![allow(unused)]\nfn main() {\n1..2;   // std::ops::Range\n3..;    // std::ops::RangeFrom\n..4;    // std::ops::RangeTo\n..;     // std::ops::RangeFull\n5..=6;  // std::ops::RangeInclusive\n..=7;   // std::ops::RangeToInclusive\n}\n```\n\nThe following expressions are equivalent.\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = std::ops::Range {start: 0, end: 10};\nlet y = 0..10;\n\nassert_eq!(x, y);\n}\n```\n\nRanges can be used in `for` loops:\n\n```rust\n#![allow(unused)]\nfn main() {\nfor i in 1..11 {\n    println!(\"{}\", i);\n}\n}\n```\n\n## [`if` and `if let` expressions](#if-and-if-let-expressions)\n\n## [`if` expressions](#if-expressions)\n\n> **Syntax**  \n> _IfExpression_ :  \n>    `if` [_Expression_](expressions/../expressions.html)_except struct expression_ [_BlockExpression_](expressions/block-expr.html)  \n>    (`else` ( [_BlockExpression_](expressions/block-expr.html) | _IfExpression_ | _IfLetExpression_ ) )?\n\nAn `if` expression is a conditional branch in program control. The syntax of an `if` expression is a condition operand, followed by a consequent block, any number of `else if` conditions and blocks, and an optional trailing `else` block. The condition operands must have the [boolean type](expressions/../types/boolean.html). If a condition operand evaluates to `true`, the consequent block is executed and any subsequent `else if` or `else` block is skipped. If a condition operand evaluates to `false`, the consequent block is skipped and any subsequent `else if` condition is evaluated. If all `if` and `else if` conditions evaluate to `false` then any `else` block is executed. An if expression evaluates to the same value as the executed block, or `()` if no block is evaluated. An `if` expression must have the same type in all situations.\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = 3;\nif x == 4 {\n    println!(\"x is four\");\n} else if x == 3 {\n    println!(\"x is three\");\n} else {\n    println!(\"x is something else\");\n}\n\nlet y = if 12 * 15 > 150 {\n    \"Bigger\"\n} else {\n    \"Smaller\"\n};\nassert_eq!(y, \"Bigger\");\n}\n```\n\n## [`if let` expressions](#if-let-expressions)\n\n> **Syntax**  \n> _IfLetExpression_ :  \n>    `if` `let` [_Pattern_](expressions/../patterns.html) `=` [_Scrutinee_](expressions/match-expr.html)_except lazy boolean operator expression_ [_BlockExpression_](expressions/block-expr.html)  \n>    (`else` ( [_BlockExpression_](expressions/block-expr.html) | _IfExpression_ | _IfLetExpression_ ) )?\n\nAn `if let` expression is semantically similar to an `if` expression but in place of a condition operand it expects the keyword `let` followed by a pattern, an `=` and a [scrutinee](about:blank/glossary.html#scrutinee) operand. If the value of the scrutinee matches the pattern, the corresponding block will execute. Otherwise, flow proceeds to the following `else` block if it exists. Like `if` expressions, `if let` expressions have a value determined by the block that is evaluated.\n\n```rust\n#![allow(unused)]\nfn main() {\nlet dish = (\"Ham\", \"Eggs\");\n\n// this body will be skipped because the pattern is refuted\nif let (\"Bacon\", b) = dish {\n    println!(\"Bacon is served with {}\", b);\n} else {\n    // This block is evaluated instead.\n    println!(\"No bacon will be served\");\n}\n\n// this body will execute\nif let (\"Ham\", b) = dish {\n    println!(\"Ham is served with {}\", b);\n}\n\nif let _ = 5 {\n    println!(\"Irrefutable patterns are always true\");\n}\n}\n```\n\n`if` and `if let` expressions can be intermixed:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = Some(3);\nlet a = if let Some(1) = x {\n    1\n} else if x == Some(2) {\n    2\n} else if let Some(y) = x {\n    y\n} else {\n    -1\n};\nassert_eq!(a, 3);\n}\n```\n\nAn `if let` expression is equivalent to a [`match` expression](expressions/match-expr.html) as follows:\n\n```rust\nif let PATS = EXPR {\n    /* body */\n} else {\n    /*else */\n}\n```\n\nis equivalent to\n\n```rust\nmatch EXPR {\n    PATS => { /* body */ },\n    _ => { /* else */ },    // () if there is no else\n}\n```\n\nMultiple patterns may be specified with the `|` operator. This has the same semantics as with `|` in `match` expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum E {\n    X(u8),\n    Y(u8),\n    Z(u8),\n}\nlet v = E::Y(12);\nif let E::X(n) | E::Y(n) = v {\n    assert_eq!(n, 12);\n}\n}\n```\n\nThe expression cannot be a [lazy boolean operator expression](about:blank/expressions/operator-expr.html#lazy-boolean-operators). Use of a lazy boolean operator is ambiguous with a planned feature change of the language (the implementation of if-let chains - see [eRFC 2947](https://github.com/rust-lang/rfcs/blob/master/text/2497-if-let-chains.md#rollout-plan-and-transitioning-to-rust-2018)). When lazy boolean operator expression is desired, this can be achieved by using parenthesis as below:\n\n```rust\n// Before...\nif let PAT = EXPR && EXPR { .. }\n\n// After...\nif let PAT = ( EXPR && EXPR ) { .. }\n\n// Before...\nif let PAT = EXPR || EXPR { .. }\n\n// After...\nif let PAT = ( EXPR || EXPR ) { .. }\n```\n\n## [`match` expressions](#match-expressions)\n\n> **Syntax**  \n> _MatchExpression_ :  \n>    `match` _Scrutinee_ `{`  \n>       [_InnerAttribute_](expressions/../attributes.html)\\*  \n>       _MatchArms_?  \n>    `}`\n> \n> _Scrutinee_ :  \n>    [_Expression_](expressions/../expressions.html)_except struct expression_\n> \n> _MatchArms_ :  \n>    ( _MatchArm_ `=>` ( [_ExpressionWithoutBlock_](expressions/../expressions.html) `,` | [_ExpressionWithBlock_](expressions/../expressions.html) `,`? ) )\\*  \n>    _MatchArm_ `=>` [_Expression_](expressions/../expressions.html) `,`?\n> \n> _MatchArm_ :  \n>    [_OuterAttribute_](expressions/../attributes.html)\\* [_Pattern_](expressions/../patterns.html) _MatchArmGuard_?\n> \n> _MatchArmGuard_ :  \n>    `if` [_Expression_](expressions/../expressions.html)\n\nA _`match` expression_ branches on a pattern. The exact form of matching that occurs depends on the [pattern](expressions/../patterns.html). A `match` expression has a _[scrutinee](about:blank/glossary.html#scrutinee) expression_, which is the value to compare to the patterns. The scrutinee expression and the patterns must have the same type.\n\nA `match` behaves differently depending on whether or not the scrutinee expression is a [place expression or value expression](about:blank/expressions.html#place-expressions-and-value-expressions). If the scrutinee expression is a [value expression](about:blank/expressions.html#place-expressions-and-value-expressions), it is first evaluated into a temporary location, and the resulting value is sequentially compared to the patterns in the arms until a match is found. The first arm with a matching pattern is chosen as the branch target of the `match`, any variables bound by the pattern are assigned to local variables in the arm's block, and control enters the block.\n\nWhen the scrutinee expression is a [place expression](about:blank/expressions.html#place-expressions-and-value-expressions), the match does not allocate a temporary location; however, a by-value binding may copy or move from the memory location. When possible, it is preferable to match on place expressions, as the lifetime of these matches inherits the lifetime of the place expression rather than being restricted to the inside of the match.\n\nAn example of a `match` expression:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = 1;\n\nmatch x {\n    1 => println!(\"one\"),\n    2 => println!(\"two\"),\n    3 => println!(\"three\"),\n    4 => println!(\"four\"),\n    5 => println!(\"five\"),\n    _ => println!(\"something else\"),\n}\n}\n```\n\nVariables bound within the pattern are scoped to the match guard and the arm's expression. The [binding mode](about:blank/patterns.html#binding-modes) (move, copy, or reference) depends on the pattern.\n\nMultiple match patterns may be joined with the `|` operator. Each pattern will be tested in left-to-right sequence until a successful match is found.\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = 9;\nlet message = match x {\n    0 | 1  => \"not many\",\n    2 ..= 9 => \"a few\",\n    _      => \"lots\"\n};\n\nassert_eq!(message, \"a few\");\n\n// Demonstration of pattern match order.\nstruct S(i32, i32);\n\nmatch S(1, 2) {\n    S(z @ 1, _) | S(_, z @ 2) => assert_eq!(z, 1),\n    _ => panic!(),\n}\n}\n```\n\n> Note: The `2..=9` is a [Range Pattern](about:blank/patterns.html#range-patterns), not a [Range Expression](expressions/range-expr.html). Thus, only those types of ranges supported by range patterns can be used in match arms.\n\nEvery binding in each `|` separated pattern must appear in all of the patterns in the arm. Every binding of the same name must have the same type, and have the same binding mode.\n\n## [Match guards](#match-guards)\n\nMatch arms can accept _match guards_ to further refine the criteria for matching a case. Pattern guards appear after the pattern and consist of a `bool`\\-typed expression following the `if` keyword.\n\nWhen the pattern matches successfully, the pattern guard expression is executed. If the expression evaluates to true, the pattern is successfully matched against. Otherwise, the next pattern, including other matches with the `|` operator in the same arm, is tested.\n\n```rust\n#![allow(unused)]\nfn main() {\nlet maybe_digit = Some(0);\nfn process_digit(i: i32) { }\nfn process_other(i: i32) { }\nlet message = match maybe_digit {\n    Some(x) if x < 10 => process_digit(x),\n    Some(x) => process_other(x),\n    None => panic!(),\n};\n}\n```\n\n> Note: Multiple matches using the `|` operator can cause the pattern guard and the side effects it has to execute multiple times. For example:\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> use std::cell::Cell;\n> let i : Cell<i32> = Cell::new(0);\n> match 1 {\n>     1 | _ if { i.set(i.get() + 1); false } => {}\n>     _ => {}\n> }\n> assert_eq!(i.get(), 2);\n> }\n> ```\n\nA pattern guard may refer to the variables bound within the pattern they follow. Before evaluating the guard, a shared reference is taken to the part of the scrutinee the variable matches on. While evaluating the guard, this shared reference is then used when accessing the variable. Only when the guard evaluates to true is the value moved, or copied, from the scrutinee into the variable. This allows shared borrows to be used inside guards without moving out of the scrutinee in case guard fails to match. Moreover, by holding a shared reference while evaluating the guard, mutation inside guards is also prevented.\n\n## [Attributes on match arms](#attributes-on-match-arms)\n\nOuter attributes are allowed on match arms. The only attributes that have meaning on match arms are [`cfg`](expressions/../conditional-compilation.html) and the [lint check attributes](about:blank/attributes/diagnostics.html#lint-check-attributes).\n\n[Inner attributes](expressions/../attributes.html) are allowed directly after the opening brace of the match expression in the same expression contexts as [attributes on block expressions](about:blank/expressions/block-expr.html#attributes-on-block-expressions).\n\n## [`return` expressions](#return-expressions)\n\n> **Syntax**  \n> _ReturnExpression_ :  \n>    `return` [_Expression_](expressions/../expressions.html)?\n\nReturn expressions are denoted with the keyword `return`. Evaluating a `return` expression moves its argument into the designated output location for the current function call, destroys the current function activation frame, and transfers control to the caller frame.\n\nAn example of a `return` expression:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn max(a: i32, b: i32) -> i32 {\n    if a > b {\n        return a;\n    }\n    return b;\n}\n}\n```\n\n## [Await expressions](#await-expressions)\n\n> **Syntax**  \n> _AwaitExpression_ :  \n>    [_Expression_](expressions/../expressions.html) `.` `await`\n\nAn `await` expression is a syntactic construct for suspending a computation provided by an implementation of `std::future::IntoFuture` until the given future is ready to produce a value. The syntax for an await expression is an expression with a type that implements the [`IntoFuture`](expressions/../../std/future/trait.IntoFuture.html) trait, called the _future operand_, then the token `.`, and then the `await` keyword. Await expressions are legal only within an [async context](about:blank/expressions/block-expr.html#async-context), like an [`async fn`](about:blank/items/functions.html#async-functions) or an [`async` block](about:blank/expressions/block-expr.html#async-blocks).\n\nMore specifically, an await expression has the following effect.\n\n1.  Create a future by calling [`IntoFuture::into_future`](about:blank/std/future/trait.IntoFuture.html#tymethod.into_future) on the future operand.\n2.  Evaluate the future to a [future](expressions/../../std/future/trait.Future.html) `tmp`;\n3.  Pin `tmp` using [`Pin::new_unchecked`](about:blank/std/pin/struct.Pin.html#method.new_unchecked);\n4.  This pinned future is then polled by calling the [`Future::poll`](about:blank/std/future/trait.Future.html#tymethod.poll) method and passing it the current [task context](about:blank/expressions/await-expr.html#task-context);\n5.  If the call to `poll` returns [`Poll::Pending`](about:blank/std/task/enum.Poll.html#variant.Pending), then the future returns `Poll::Pending`, suspending its state so that, when the surrounding async context is re-polled,execution returns to step 3;\n6.  Otherwise the call to `poll` must have returned [`Poll::Ready`](about:blank/std/task/enum.Poll.html#variant.Ready), in which case the value contained in the [`Poll::Ready`](about:blank/std/task/enum.Poll.html#variant.Ready) variant is used as the result of the `await` expression itself.\n\n> **Edition differences**: Await expressions are only available beginning with Rust 2018.\n\n## [Task context](#task-context)\n\nThe task context refers to the [`Context`](expressions/../../std/task/struct.Context.html) which was supplied to the current [async context](about:blank/expressions/block-expr.html#async-context) when the async context itself was polled. Because `await` expressions are only legal in an async context, there must be some task context available.\n\n## [Approximate desugaring](#approximate-desugaring)\n\nEffectively, an await expression is roughly equivalent to the following non-normative desugaring:\n\n```rust\nmatch operand.into_future() {\n    mut pinned => loop {\n        let mut pin = unsafe { Pin::new_unchecked(&mut pinned) };\n        match Pin::future::poll(Pin::borrow(&mut pin), &mut current_context) {\n            Poll::Ready(r) => break r,\n            Poll::Pending => yield Poll::Pending,\n        }\n    }\n}\n```\n\nwhere the `yield` pseudo-code returns `Poll::Pending` and, when re-invoked, resumes execution from that point. The variable `current_context` refers to the context taken from the async environment.\n\n## [`_` expressions](#_-expressions)\n\n> **Syntax**  \n> _UnderscoreExpression_ :  \n>    `_`\n\nUnderscore expressions, denoted with the symbol `_`, are used to signify a placeholder in a destructuring assignment. They may only appear in the left-hand side of an assignment.\n\nNote that this is distinct from the [wildcard pattern](about:blank/patterns.html#wildcard-pattern).\n\nAn example of an `_` expression:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet p = (1, 2);\nlet mut a = 0;\n(_, a) = p;\n}\n```\n\n## [Patterns](#patterns)\n\n> **Syntax**  \n> _Pattern_ :  \n>       `|`? _PatternNoTopAlt_ ( `|` _PatternNoTopAlt_ )\\*\n> \n> _PatternNoTopAlt_ :  \n>       _PatternWithoutRange_  \n>    | [_RangePattern_](about:blank/patterns.html#range-patterns)\n> \n> _PatternWithoutRange_ :  \n>       [_LiteralPattern_](about:blank/patterns.html#literal-patterns)  \n>    | [_IdentifierPattern_](about:blank/patterns.html#identifier-patterns)  \n>    | [_WildcardPattern_](about:blank/patterns.html#wildcard-pattern)  \n>    | [_RestPattern_](about:blank/patterns.html#rest-patterns)  \n>    | [_ReferencePattern_](about:blank/patterns.html#reference-patterns)  \n>    | [_StructPattern_](about:blank/patterns.html#struct-patterns)  \n>    | [_TupleStructPattern_](about:blank/patterns.html#tuple-struct-patterns)  \n>    | [_TuplePattern_](about:blank/patterns.html#tuple-patterns)  \n>    | [_GroupedPattern_](about:blank/patterns.html#grouped-patterns)  \n>    | [_SlicePattern_](about:blank/patterns.html#slice-patterns)  \n>    | [_PathPattern_](about:blank/patterns.html#path-patterns)  \n>    | [_MacroInvocation_](about:blank/macros.html#macro-invocation)\n\nPatterns are used to match values against structures and to, optionally, bind variables to values inside these structures. They are also used in variable declarations and parameters for functions and closures.\n\nThe pattern in the following example does four things:\n\n-   Tests if `person` has the `car` field filled with something.\n-   Tests if the person's `age` field is between 13 and 19, and binds its value to the `person_age` variable.\n-   Binds a reference to the `name` field to the variable `person_name`.\n-   Ignores the rest of the fields of `person`. The remaining fields can have any value and are not bound to any variables.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Car;\nstruct Computer;\nstruct Person {\n    name: String,\n    car: Option<Car>,\n    computer: Option<Computer>,\n    age: u8,\n}\nlet person = Person {\n    name: String::from(\"John\"),\n    car: Some(Car),\n    computer: None,\n    age: 15,\n};\nif let\n    Person {\n        car: Some(_),\n        age: person_age @ 13..=19,\n        name: ref person_name,\n        ..\n    } = person\n{\n    println!(\"{} has a car and is {} years old.\", person_name, person_age);\n}\n}\n```\n\nPatterns are used in:\n\n-   [`let` declarations](about:blank/statements.html#let-statements)\n-   [Function](items/functions.html) and [closure](expressions/closure-expr.html) parameters\n-   [`match` expressions](expressions/match-expr.html)\n-   [`if let` expressions](expressions/if-expr.html)\n-   [`while let` expressions](about:blank/expressions/loop-expr.html#predicate-pattern-loops)\n-   [`for` expressions](about:blank/expressions/loop-expr.html#iterator-loops)\n\n## [Destructuring](#destructuring)\n\nPatterns can be used to _destructure_ [structs](items/structs.html), [enums](items/enumerations.html), and [tuples](types/tuple.html). Destructuring breaks up a value into its component pieces. The syntax used is almost the same as when creating such values. In a pattern whose [scrutinee](about:blank/glossary.html#scrutinee) expression has a `struct`, `enum` or `tuple` type, a placeholder (`_`) stands in for a _single_ data field, whereas a wildcard `..` stands in for _all_ the remaining fields of a particular variant. When destructuring a data structure with named (but not numbered) fields, it is allowed to write `fieldname` as a shorthand for `fieldname: fieldname`.\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Message {\n    Quit,\n    WriteString(String),\n    Move { x: i32, y: i32 },\n    ChangeColor(u8, u8, u8),\n}\nlet message = Message::Quit;\nmatch message {\n    Message::Quit => println!(\"Quit\"),\n    Message::WriteString(write) => println!(\"{}\", &write),\n    Message::Move{ x, y: 0 } => println!(\"move {} horizontally\", x),\n    Message::Move{ .. } => println!(\"other move\"),\n    Message::ChangeColor { 0: red, 1: green, 2: _ } => {\n        println!(\"color change, red: {}, green: {}\", red, green);\n    }\n};\n}\n```\n\n## [Refutability](#refutability)\n\nA pattern is said to be _refutable_ when it has the possibility of not being matched by the value it is being matched against. _Irrefutable_ patterns, on the other hand, always match the value they are being matched against. Examples:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet (x, y) = (1, 2);               // \"(x, y)\" is an irrefutable pattern\n\nif let (a, 3) = (1, 2) {           // \"(a, 3)\" is refutable, and will not match\n    panic!(\"Shouldn't reach here\");\n} else if let (a, 4) = (3, 4) {    // \"(a, 4)\" is refutable, and will match\n    println!(\"Matched ({}, 4)\", a);\n}\n}\n```\n\n## [Literal patterns](#literal-patterns)\n\n> **Syntax**  \n> _LiteralPattern_ :  \n>       `true` | `false`  \n>    | [CHAR\\_LITERAL](about:blank/tokens.html#character-literals)  \n>    | [BYTE\\_LITERAL](about:blank/tokens.html#byte-literals)  \n>    | [STRING\\_LITERAL](about:blank/tokens.html#string-literals)  \n>    | [RAW\\_STRING\\_LITERAL](about:blank/tokens.html#raw-string-literals)  \n>    | [BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#byte-string-literals)  \n>    | [RAW\\_BYTE\\_STRING\\_LITERAL](about:blank/tokens.html#raw-byte-string-literals)  \n>    | [C\\_STRING\\_LITERAL](about:blank/tokens.html#c-string-literals)  \n>    | [RAW\\_C\\_STRING\\_LITERAL](about:blank/tokens.html#raw-c-string-literals)  \n>    | `-`? [INTEGER\\_LITERAL](about:blank/tokens.html#integer-literals)  \n>    | `-`? [FLOAT\\_LITERAL](about:blank/tokens.html#floating-point-literals)\n\n_Literal patterns_ match exactly the same value as what is created by the literal. Since negative numbers are not [literals](expressions/literal-expr.html), literal patterns also accept an optional minus sign before the literal, which acts like the negation operator.\n\nC string and raw C string literals are accepted in literal patterns, but `&CStr` doesn't implement structural equality (`#[derive(Eq, PartialEq)]`) and therefore any such `match` on a `&CStr` will be rejected with a type error.\n\nLiteral patterns are always refutable.\n\nExamples:\n\n```rust\n#![allow(unused)]\nfn main() {\nfor i in -2..5 {\n    match i {\n        -1 => println!(\"It's minus one\"),\n        1 => println!(\"It's a one\"),\n        2|4 => println!(\"It's either a two or a four\"),\n        _ => println!(\"Matched none of the arms\"),\n    }\n}\n}\n```\n\n## [Identifier patterns](#identifier-patterns)\n\n> **Syntax**  \n> _IdentifierPattern_ :  \n>       `ref`? `mut`? [IDENTIFIER](identifiers.html) (`@` [_PatternNoTopAlt_](about:blank/patterns.html#patterns) ) ?\n\nIdentifier patterns bind the value they match to a variable. The identifier must be unique within the pattern. The variable will shadow any variables of the same name in scope. The [scope](names/scopes.html) of the new binding depends on the context of where the pattern is used (such as a `let` binding or a `match` arm).\n\nPatterns that consist of only an identifier, possibly with a `mut`, match any value and bind it to that identifier. This is the most commonly used pattern in variable declarations and parameters for functions and closures.\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut variable = 10;\nfn sum(x: i32, y: i32) -> i32 {\n   x + y\n}\n}\n```\n\nTo bind the matched value of a pattern to a variable, use the syntax `variable @ subpattern`. For example, the following binds the value 2 to `e` (not the entire range: the range here is a range subpattern).\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = 2;\n\nmatch x {\n    e @ 1 ..= 5 => println!(\"got a range element {}\", e),\n    _ => println!(\"anything\"),\n}\n}\n```\n\nBy default, identifier patterns bind a variable to a copy of or move from the matched value depending on whether the matched value implements [`Copy`](about:blank/special-types-and-traits.html#copy). This can be changed to bind to a reference by using the `ref` keyword, or to a mutable reference using `ref mut`. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet a = Some(10);\nmatch a {\n    None => (),\n    Some(value) => (),\n}\n\nmatch a {\n    None => (),\n    Some(ref value) => (),\n}\n}\n```\n\nIn the first match expression, the value is copied (or moved). In the second match, a reference to the same memory location is bound to the variable value. This syntax is needed because in destructuring subpatterns the `&` operator can't be applied to the value's fields. For example, the following is not valid:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Person {\n   name: String,\n   age: u8,\n}\nlet value = Person { name: String::from(\"John\"), age: 23 };\nif let Person { name: &person_name, age: 18..=150 } = value { }\n}\n```\n\nTo make it valid, write the following:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Person {\n   name: String,\n   age: u8,\n}\nlet value = Person { name: String::from(\"John\"), age: 23 };\nif let Person {name: ref person_name, age: 18..=150 } = value { }\n}\n```\n\nThus, `ref` is not something that is being matched against. Its objective is exclusively to make the matched binding a reference, instead of potentially copying or moving what was matched.\n\n[Path patterns](about:blank/patterns.html#path-patterns) take precedence over identifier patterns. It is an error if `ref` or `ref mut` is specified and the identifier shadows a constant.\n\nIdentifier patterns are irrefutable if the `@` subpattern is irrefutable or the subpattern is not specified.\n\n### [Binding modes](#binding-modes)\n\nTo service better ergonomics, patterns operate in different _binding modes_ in order to make it easier to bind references to values. When a reference value is matched by a non-reference pattern, it will be automatically treated as a `ref` or `ref mut` binding. Example:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x: &Option<i32> = &Some(3);\nif let Some(y) = x {\n    // y was converted to `ref y` and its type is &i32\n}\n}\n```\n\n_Non-reference patterns_ include all patterns except bindings, [wildcard patterns](about:blank/patterns.html#wildcard-pattern) (`_`), [`const` patterns](about:blank/patterns.html#path-patterns) of reference types, and [reference patterns](about:blank/patterns.html#reference-patterns).\n\nIf a binding pattern does not explicitly have `ref`, `ref mut`, or `mut`, then it uses the _default binding mode_ to determine how the variable is bound. The default binding mode starts in \"move\" mode which uses move semantics. When matching a pattern, the compiler starts from the outside of the pattern and works inwards. Each time a reference is matched using a non-reference pattern, it will automatically dereference the value and update the default binding mode. References will set the default binding mode to `ref`. Mutable references will set the mode to `ref mut` unless the mode is already `ref` in which case it remains `ref`. If the automatically dereferenced value is still a reference, it is dereferenced and this process repeats.\n\nMove bindings and reference bindings can be mixed together in the same pattern. Doing so will result in partial move of the object bound to and the object cannot be used afterwards. This applies only if the type cannot be copied.\n\nIn the example below, `name` is moved out of `person`. Trying to use `person` as a whole or `person.name` would result in an error because of _partial move_.\n\nExample:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Person {\n   name: String,\n   age: u8,\n}\nlet person = Person{ name: String::from(\"John\"), age: 23 };\n// `name` is moved from person and `age` referenced\nlet Person { name, ref age } = person;\n}\n```\n\n## [Wildcard pattern](#wildcard-pattern)\n\n> **Syntax**  \n> _WildcardPattern_ :  \n>    `_`\n\nThe _wildcard pattern_ (an underscore symbol) matches any value. It is used to ignore values when they don't matter. Inside other patterns it matches a single data field (as opposed to the `..` which matches the remaining fields). Unlike identifier patterns, it does not copy, move or borrow the value it matches.\n\nExamples:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = 20;\nlet (a, _) = (10, x);   // the x is always matched by _\nassert_eq!(a, 10);\n\n// ignore a function/closure param\nlet real_part = |a: f64, _: f64| { a };\n\n// ignore a field from a struct\nstruct RGBA {\n   r: f32,\n   g: f32,\n   b: f32,\n   a: f32,\n}\nlet color = RGBA{r: 0.4, g: 0.1, b: 0.9, a: 0.5};\nlet RGBA{r: red, g: green, b: blue, a: _} = color;\nassert_eq!(color.r, red);\nassert_eq!(color.g, green);\nassert_eq!(color.b, blue);\n\n// accept any Some, with any value\nlet x = Some(10);\nif let Some(_) = x {}\n}\n```\n\nThe wildcard pattern is always irrefutable.\n\n## [Rest patterns](#rest-patterns)\n\n> **Syntax**  \n> _RestPattern_ :  \n>    `..`\n\nThe _rest pattern_ (the `..` token) acts as a variable-length pattern which matches zero or more elements that haven't been matched already before and after. It may only be used in [tuple](about:blank/patterns.html#tuple-patterns), [tuple struct](about:blank/patterns.html#tuple-struct-patterns), and [slice](about:blank/patterns.html#slice-patterns) patterns, and may only appear once as one of the elements in those patterns. It is also allowed in an [identifier pattern](about:blank/patterns.html#identifier-patterns) for [slice patterns](about:blank/patterns.html#slice-patterns) only.\n\nThe rest pattern is always irrefutable.\n\nExamples:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet words = vec![\"a\", \"b\", \"c\"];\nlet slice = &words[..];\nmatch slice {\n    [] => println!(\"slice is empty\"),\n    [one] => println!(\"single element {}\", one),\n    [head, tail @ ..] => println!(\"head={} tail={:?}\", head, tail),\n}\n\nmatch slice {\n    // Ignore everything but the last element, which must be \"!\".\n    [.., \"!\"] => println!(\"!!!\"),\n\n    // `start` is a slice of everything except the last element, which must be \"z\".\n    [start @ .., \"z\"] => println!(\"starts with: {:?}\", start),\n\n    // `end` is a slice of everything but the first element, which must be \"a\".\n    [\"a\", end @ ..] => println!(\"ends with: {:?}\", end),\n\n    // 'whole' is the entire slice and `last` is the final element\n    whole @ [.., last] => println!(\"the last element of {:?} is {}\", whole, last),\n\n    rest => println!(\"{:?}\", rest),\n}\n\nif let [.., penultimate, _] = slice {\n    println!(\"next to last is {}\", penultimate);\n}\n\nlet tuple = (1, 2, 3, 4, 5);\n// Rest patterns may also be used in tuple and tuple struct patterns.\nmatch tuple {\n    (1, .., y, z) => println!(\"y={} z={}\", y, z),\n    (.., 5) => println!(\"tail must be 5\"),\n    (..) => println!(\"matches everything else\"),\n}\n}\n```\n\n## [Range patterns](#range-patterns)\n\n> **Syntax**  \n> _RangePattern_ :  \n>       _RangeInclusivePattern_  \n>    | _RangeFromPattern_  \n>    | _RangeToInclusivePattern_  \n>    | _ObsoleteRangePattern_\n> \n> _RangeExclusivePattern_ :  \n>       _RangePatternBound_ `..` _RangePatternBound_\n> \n> _RangeInclusivePattern_ :  \n>       _RangePatternBound_ `..=` _RangePatternBound_\n> \n> _RangeFromPattern_ :  \n>       _RangePatternBound_ `..`\n> \n> _RangeToInclusivePattern_ :  \n>       `..=` _RangePatternBound_\n> \n> _ObsoleteRangePattern_ :  \n>    _RangePatternBound_ `...` _RangePatternBound_\n> \n> _RangePatternBound_ :  \n>       [CHAR\\_LITERAL](about:blank/tokens.html#character-literals)  \n>    | [BYTE\\_LITERAL](about:blank/tokens.html#byte-literals)  \n>    | `-`? [INTEGER\\_LITERAL](about:blank/tokens.html#integer-literals)  \n>    | `-`? [FLOAT\\_LITERAL](about:blank/tokens.html#floating-point-literals)  \n>    | [_PathExpression_](expressions/path-expr.html)\n\n_Range patterns_ match scalar values within the range defined by their bounds. They comprise a _sigil_ (one of `..`, `..=`, or `...`) and a bound on one or both sides. A bound on the left of the sigil is a _lower bound_. A bound on the right is an _upper bound_.\n\nA range pattern with both a lower and upper bound will match all values between and including both of its bounds. It is written as its lower bound, followed by `..` for end-exclusive or `..=` for end-inclusive, followed by its upper bound. The type of the range pattern is the type unification of its upper and lower bounds.\n\nFor example, a pattern `'m'..='p'` will match only the values `'m'`, `'n'`, `'o'`, and `'p'`. Similarly, `'m'..'p'` will match only `'m'`, `'n'` and `'o'`, specifically **not** including `'p'`.\n\nThe lower bound cannot be greater than the upper bound. That is, in `a..=b`, a ≤ b must be the case. For example, it is an error to have a range pattern `10..=0`.\n\nA range pattern with only a lower bound will match any value greater than or equal to the lower bound. It is written as its lower bound followed by `..`, and has the same type as its lower bound. For example, `1..` will match 1, 9, or 9001, or 9007199254740991 (if it is of an appropriate size), but not 0, and not negative numbers for signed integers.\n\nA range pattern with only an upper bound matches any value less than or equal to the upper bound. It is written as `..=` followed by its upper bound, and has the same type as its upper bound. For example, `..=10` will match 10, 1, 0, and for signed integer types, all negative values.\n\nRange patterns with only one bound cannot be used as the top-level pattern for subpatterns in [slice patterns](about:blank/patterns.html#slice-patterns).\n\nThe bounds is written as one of:\n\n-   A character, byte, integer, or float literal.\n-   A `-` followed by an integer or float literal.\n-   A [path](expressions/path-expr.html)\n\nIf the bounds is written as a path, after macro resolution, the path must resolve to a constant item of the type `char`, an integer type, or a float type.\n\nThe type and value of the bounds is dependent upon how it is written out. If the bounds is a [path](expressions/path-expr.html), the pattern has the type and value of the [constant](items/constant-items.html) the path resolves to. For float range patterns, the constant may not be a `NaN`. If it is a literal, it has the type and value of the corresponding [literal expression](expressions/literal-expr.html). If is a literal preceded by a `-`, it has the same type as the corresponding [literal expression](expressions/literal-expr.html) and the value of [negating](about:blank/expressions/operator-expr.html#negation-operators) the value of the corresponding literal expression.\n\nExamples:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet c = 'f';\nlet valid_variable = match c {\n    'a'..='z' => true,\n    'A'..='Z' => true,\n    'α'..='ω' => true,\n    _ => false,\n};\n\nlet ph = 10;\nprintln!(\"{}\", match ph {\n    0..7 => \"acid\",\n    7 => \"neutral\",\n    8..=14 => \"base\",\n    _ => unreachable!(),\n});\n\nlet uint: u32 = 5;\nmatch uint {\n    0 => \"zero!\",\n    1.. => \"positive number!\",\n};\n\n// using paths to constants:\nconst TROPOSPHERE_MIN : u8 = 6;\nconst TROPOSPHERE_MAX : u8 = 20;\n\nconst STRATOSPHERE_MIN : u8 = TROPOSPHERE_MAX + 1;\nconst STRATOSPHERE_MAX : u8 = 50;\n\nconst MESOSPHERE_MIN : u8 = STRATOSPHERE_MAX + 1;\nconst MESOSPHERE_MAX : u8 = 85;\n\nlet altitude = 70;\n\nprintln!(\"{}\", match altitude {\n    TROPOSPHERE_MIN..=TROPOSPHERE_MAX => \"troposphere\",\n    STRATOSPHERE_MIN..=STRATOSPHERE_MAX => \"stratosphere\",\n    MESOSPHERE_MIN..=MESOSPHERE_MAX => \"mesosphere\",\n    _ => \"outer space, maybe\",\n});\n\npub mod binary {\n    pub const MEGA : u64 = 1024*1024;\n    pub const GIGA : u64 = 1024*1024*1024;\n}\nlet n_items = 20_832_425;\nlet bytes_per_item = 12;\nif let size @ binary::MEGA..=binary::GIGA = n_items * bytes_per_item {\n    println!(\"It fits and occupies {} bytes\", size);\n}\n\ntrait MaxValue {\n    const MAX: u64;\n}\nimpl MaxValue for u8 {\n    const MAX: u64 = (1 << 8) - 1;\n}\nimpl MaxValue for u16 {\n    const MAX: u64 = (1 << 16) - 1;\n}\nimpl MaxValue for u32 {\n    const MAX: u64 = (1 << 32) - 1;\n}\n// using qualified paths:\nprintln!(\"{}\", match 0xfacade {\n    0 ..= <u8 as MaxValue>::MAX => \"fits in a u8\",\n    0 ..= <u16 as MaxValue>::MAX => \"fits in a u16\",\n    0 ..= <u32 as MaxValue>::MAX => \"fits in a u32\",\n    _ => \"too big\",\n});\n}\n```\n\nRange patterns for fix-width integer and `char` types are irrefutable when they span the entire set of possible values of a type. For example, `0u8..=255u8` is irrefutable. The range of values for an integer type is the closed range from its minimum to maximum value. The range of values for a `char` type are precisely those ranges containing all Unicode Scalar Values: `'\\u{0000}'..='\\u{D7FF}'` and `'\\u{E000}'..='\\u{10FFFF}'`.\n\n> **Edition Differences**: Before the 2021 edition, range patterns with both a lower and upper bound may also be written using `...` in place of `..=`, with the same meaning.\n\n## [Reference patterns](#reference-patterns)\n\n> **Syntax**  \n> _ReferencePattern_ :  \n>    (`&`|`&&`) `mut`? [_PatternWithoutRange_](about:blank/patterns.html#patterns)\n\nReference patterns dereference the pointers that are being matched and, thus, borrow them.\n\nFor example, these two matches on `x: &i32` are equivalent:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet int_reference = &3;\n\nlet a = match *int_reference { 0 => \"zero\", _ => \"some\" };\nlet b = match int_reference { &0 => \"zero\", _ => \"some\" };\n\nassert_eq!(a, b);\n}\n```\n\nThe grammar production for reference patterns has to match the token `&&` to match a reference to a reference because it is a token by itself, not two `&` tokens.\n\nAdding the `mut` keyword dereferences a mutable reference. The mutability must match the mutability of the reference.\n\nReference patterns are always irrefutable.\n\n## [Struct patterns](#struct-patterns)\n\n> **Syntax**  \n> _StructPattern_ :  \n>    [_PathInExpression_](about:blank/paths.html#paths-in-expressions) `{`  \n>       _StructPatternElements_ ?  \n>    `}`\n> \n> _StructPatternElements_ :  \n>       _StructPatternFields_ (`,` | `,` _StructPatternEtCetera_)?  \n>    | _StructPatternEtCetera_\n> \n> _StructPatternFields_ :  \n>    _StructPatternField_ (`,` _StructPatternField_) \\*\n> \n> _StructPatternField_ :  \n>    [_OuterAttribute_](attributes.html) \\*  \n>    (  \n>          [TUPLE\\_INDEX](about:blank/tokens.html#tuple-index) `:` [_Pattern_](about:blank/patterns.html#patterns)  \n>       | [IDENTIFIER](identifiers.html) `:` [_Pattern_](about:blank/patterns.html#patterns)  \n>       | `ref`? `mut`? [IDENTIFIER](identifiers.html)  \n>    )\n> \n> _StructPatternEtCetera_ :  \n>    [_OuterAttribute_](attributes.html) \\*  \n>    `..`\n\nStruct patterns match struct, enum, and union values that match all criteria defined by its subpatterns. They are also used to [destructure](about:blank/patterns.html#destructuring) a struct, enum, or union value.\n\nOn a struct pattern, the fields are referenced by name, index (in the case of tuple structs) or ignored by use of `..`:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Point {\n    x: u32,\n    y: u32,\n}\nlet s = Point {x: 1, y: 1};\n\nmatch s {\n    Point {x: 10, y: 20} => (),\n    Point {y: 10, x: 20} => (),    // order doesn't matter\n    Point {x: 10, ..} => (),\n    Point {..} => (),\n}\n\nstruct PointTuple (\n    u32,\n    u32,\n);\nlet t = PointTuple(1, 2);\n\nmatch t {\n    PointTuple {0: 10, 1: 20} => (),\n    PointTuple {1: 10, 0: 20} => (),   // order doesn't matter\n    PointTuple {0: 10, ..} => (),\n    PointTuple {..} => (),\n}\n\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n}\nlet m = Message::Quit;\n\nmatch m {\n    Message::Quit => (),\n    Message::Move {x: 10, y: 20} => (),\n    Message::Move {..} => (),\n}\n}\n```\n\nIf `..` is not used, a struct pattern used to match a struct is required to specify all fields:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Struct {\n   a: i32,\n   b: char,\n   c: bool,\n}\nlet mut struct_value = Struct{a: 10, b: 'X', c: false};\n\nmatch struct_value {\n    Struct{a: 10, b: 'X', c: false} => (),\n    Struct{a: 10, b: 'X', ref c} => (),\n    Struct{a: 10, b: 'X', ref mut c} => (),\n    Struct{a: 10, b: 'X', c: _} => (),\n    Struct{a: _, b: _, c: _} => (),\n}\n}\n```\n\nA struct pattern used to match a union must specify exactly one field (see [Pattern matching on unions](about:blank/items/unions.html#pattern-matching-on-unions)).\n\nThe `ref` and/or `mut` _IDENTIFIER_ syntax matches any value and binds it to a variable with the same name as the given field.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Struct {\n   a: i32,\n   b: char,\n   c: bool,\n}\nlet struct_value = Struct{a: 10, b: 'X', c: false};\n\nlet Struct{a: x, b: y, c: z} = struct_value;          // destructure all fields\n}\n```\n\nA struct pattern is refutable if the _PathInExpression_ resolves to a constructor of an enum with more than one variant, or one of its subpatterns is refutable.\n\n## [Tuple struct patterns](#tuple-struct-patterns)\n\n> **Syntax**  \n> _TupleStructPattern_ :  \n>    [_PathInExpression_](about:blank/paths.html#paths-in-expressions) `(` _TupleStructItems_? `)`\n> \n> _TupleStructItems_ :  \n>    [_Pattern_](about:blank/patterns.html#patterns) ( `,` [_Pattern_](about:blank/patterns.html#patterns) )\\* `,`?\n\nTuple struct patterns match tuple struct and enum values that match all criteria defined by its subpatterns. They are also used to [destructure](about:blank/patterns.html#destructuring) a tuple struct or enum value.\n\nA tuple struct pattern is refutable if the _PathInExpression_ resolves to a constructor of an enum with more than one variant, or one of its subpatterns is refutable.\n\n## [Tuple patterns](#tuple-patterns)\n\n> **Syntax**  \n> _TuplePattern_ :  \n>    `(` _TuplePatternItems_? `)`\n> \n> _TuplePatternItems_ :  \n>       [_Pattern_](about:blank/patterns.html#patterns) `,`  \n>    | [_RestPattern_](about:blank/patterns.html#rest-patterns)  \n>    | [_Pattern_](about:blank/patterns.html#patterns) (`,` [_Pattern_](about:blank/patterns.html#patterns))+ `,`?\n\nTuple patterns match tuple values that match all criteria defined by its subpatterns. They are also used to [destructure](about:blank/patterns.html#destructuring) a tuple.\n\nThe form `(..)` with a single [_RestPattern_](about:blank/patterns.html#rest-patterns) is a special form that does not require a comma, and matches a tuple of any size.\n\nThe tuple pattern is refutable when one of its subpatterns is refutable.\n\nAn example of using tuple patterns:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet pair = (10, \"ten\");\nlet (a, b) = pair;\n\nassert_eq!(a, 10);\nassert_eq!(b, \"ten\");\n}\n```\n\n## [Grouped patterns](#grouped-patterns)\n\n> **Syntax**  \n> _GroupedPattern_ :  \n>    `(` [_Pattern_](about:blank/patterns.html#patterns) `)`\n\nEnclosing a pattern in parentheses can be used to explicitly control the precedence of compound patterns. For example, a reference pattern next to a range pattern such as `&0..=5` is ambiguous and is not allowed, but can be expressed with parentheses.\n\n```rust\n#![allow(unused)]\nfn main() {\nlet int_reference = &3;\nmatch int_reference {\n    &(0..=5) => (),\n    _ => (),\n}\n}\n```\n\n## [Slice patterns](#slice-patterns)\n\n> **Syntax**  \n> _SlicePattern_ :  \n>    `[` _SlicePatternItems_? `]`\n> \n> _SlicePatternItems_ :  \n>    [_Pattern_](about:blank/patterns.html#patterns) (`,` [_Pattern_](about:blank/patterns.html#patterns))\\* `,`?\n\nSlice patterns can match both arrays of fixed size and slices of dynamic size.\n\n```rust\n#![allow(unused)]\nfn main() {\n// Fixed size\nlet arr = [1, 2, 3];\nmatch arr {\n    [1, _, _] => \"starts with one\",\n    [a, b, c] => \"starts with something else\",\n};\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\n// Dynamic size\nlet v = vec![1, 2, 3];\nmatch v[..] {\n    [a, b] => { /* this arm will not apply because the length doesn't match */ }\n    [a, b, c] => { /* this arm will apply */ }\n    _ => { /* this wildcard is required, since the length is not known statically */ }\n};\n}\n```\n\nSlice patterns are irrefutable when matching an array as long as each element is irrefutable. When matching a slice, it is irrefutable only in the form with a single `..` [rest pattern](about:blank/patterns.html#rest-patterns) or [identifier pattern](about:blank/patterns.html#identifier-patterns) with the `..` rest pattern as a subpattern.\n\nWithin a slice, a range pattern without both lower and upper bound must be enclosed in parentheses, as in `(a..)`, to clarify it is intended to match against a single slice element. A range pattern with both lower and upper bound, like `a..=b`, is not required to be enclosed in parentheses.\n\n## [Path patterns](#path-patterns)\n\n> **Syntax**  \n> _PathPattern_ :  \n>       [_PathExpression_](expressions/path-expr.html)\n\n_Path patterns_ are patterns that refer either to constant values or to structs or enum variants that have no fields.\n\nUnqualified path patterns can refer to:\n\n-   enum variants\n-   structs\n-   constants\n-   associated constants\n\nQualified path patterns can only refer to associated constants.\n\nPath patterns are irrefutable when they refer to structs or an enum variant when the enum has only one variant or a constant whose type is irrefutable. They are refutable when they refer to refutable constants or enum variants for enums with multiple variants.\n\n### [Constant patterns](#constant-patterns)\n\nWhen a constant `C` of type `T` is used as a pattern, we first check that `T: PartialEq`. Furthermore we require that the value of `C` _has (recursive) structural equality_, which is defined recursively as follows:\n\n-   Integers as well as `str`, `bool` and `char` values always have structural equality.\n-   Tuples, arrays, and slices have structural equality if all their fields/elements have structural equality. (In particular, `()` and `[]` always have structural equality.)\n-   References have structural equality if the value they point to has structural equality.\n-   A value of `struct` or `enum` type has structural equality if its `PartialEq` instance is derived via `#[derive(PartialEq)]`, and all fields (for enums: of the active variant) have structural equality.\n-   A raw pointer has structural equality if it was defined as a constant integer (and then cast/transmuted).\n-   A float value has structural equality if it is not a `NaN`.\n-   Nothing else has structural equality.\n\nIn particular, the value of `C` must be known at pattern-building time (which is pre-monomorphization). This means that associated consts that involve generic parameters cannot be used as patterns.\n\nAfter ensuring all conditions are met, the constant value is translated into a pattern, and now behaves exactly as-if that pattern had been written directly. In particular, it fully participates in exhaustiveness checking. (For raw pointers, constants are the only way to write such patterns. Only `_` is ever considered exhaustive for these types.)\n\n## [Or-patterns](#or-patterns)\n\n_Or-patterns_ are patterns that match on one of two or more sub-patterns (for example `A | B | C`). They can nest arbitrarily. Syntactically, or-patterns are allowed in any of the places where other patterns are allowed (represented by the _Pattern_ production), with the exceptions of `let`\\-bindings and function and closure arguments (represented by the _PatternNoTopAlt_ production).\n\n### [Static semantics](#static-semantics)\n\n1.  Given a pattern `p | q` at some depth for some arbitrary patterns `p` and `q`, the pattern is considered ill-formed if:\n    \n    -   the type inferred for `p` does not unify with the type inferred for `q`, or\n    -   the same set of bindings are not introduced in `p` and `q`, or\n    -   the type of any two bindings with the same name in `p` and `q` do not unify with respect to types or binding modes.\n    \n    Unification of types is in all instances aforementioned exact and implicit [type coercions](type-coercions.html) do not apply.\n    \n2.  When type checking an expression `match e_s { a_1 => e_1, ... a_n => e_n }`, for each match arm `a_i` which contains a pattern of form `p_i | q_i`, the pattern `p_i | q_i` is considered ill formed if, at the depth `d` where it exists the fragment of `e_s` at depth `d`, the type of the expression fragment does not unify with `p_i | q_i`.\n    \n3.  With respect to exhaustiveness checking, a pattern `p | q` is considered to cover `p` as well as `q`. For some constructor `c(x, ..)` the distributive law applies such that `c(p | q, ..rest)` covers the same set of value as `c(p, ..rest) | c(q, ..rest)` does. This can be applied recursively until there are no more nested patterns of form `p | q` other than those that exist at the top level.\n    \n    Note that by _\"constructor\"_ we do not refer to tuple struct patterns, but rather we refer to a pattern for any product type. This includes enum variants, tuple structs, structs with named fields, arrays, tuples, and slices.\n    \n\n### [Dynamic semantics](#dynamic-semantics)\n\n1.  The dynamic semantics of pattern matching a scrutinee expression `e_s` against a pattern `c(p | q, ..rest)` at depth `d` where `c` is some constructor, `p` and `q` are arbitrary patterns, and `rest` is optionally any remaining potential factors in `c`, is defined as being the same as that of `c(p, ..rest) | c(q, ..rest)`.\n\n### [Precedence with other undelimited patterns](#precedence-with-other-undelimited-patterns)\n\nAs shown elsewhere in this chapter, there are several types of patterns that are syntactically undelimited, including identifier patterns, reference patterns, and or-patterns. Or-patterns always have the lowest-precedence. This allows us to reserve syntactic space for a possible future type ascription feature and also to reduce ambiguity. For example, `x @ A(..) | B(..)` will result in an error that `x` is not bound in all patterns. `&A(x) | B(x)` will result in a type mismatch between `x` in the different subpatterns.\n\n## [Type system](#type-system)\n\n## [Types](#types)\n\nEvery variable, item, and value in a Rust program has a type. The _type_ of a _value_ defines the interpretation of the memory holding it and the operations that may be performed on the value.\n\nBuilt-in types are tightly integrated into the language, in nontrivial ways that are not possible to emulate in user-defined types. User-defined types have limited capabilities.\n\nThe list of types is:\n\n-   Primitive types:\n    -   [Boolean](types/boolean.html) — `bool`\n    -   [Numeric](types/numeric.html) — integer and float\n    -   [Textual](types/textual.html) — `char` and `str`\n    -   [Never](types/never.html) — `!` — a type with no values\n-   Sequence types:\n    -   [Tuple](types/tuple.html)\n    -   [Array](types/array.html)\n    -   [Slice](types/slice.html)\n-   User-defined types:\n    -   [Struct](types/struct.html)\n    -   [Enum](types/enum.html)\n    -   [Union](types/union.html)\n-   Function types:\n    -   [Functions](types/function-item.html)\n    -   [Closures](types/closure.html)\n-   Pointer types:\n    -   [References](about:blank/types/pointer.html#shared-references-)\n    -   [Raw pointers](about:blank/types/pointer.html#raw-pointers-const-and-mut)\n    -   [Function pointers](types/function-pointer.html)\n-   Trait types:\n    -   [Trait objects](types/trait-object.html)\n    -   [Impl trait](types/impl-trait.html)\n\n## [Type expressions](#type-expressions)\n\n> **Syntax**  \n> _Type_ :  \n>       _TypeNoBounds_  \n>    | [_ImplTraitType_](types/impl-trait.html)  \n>    | [_TraitObjectType_](types/trait-object.html)\n> \n> _TypeNoBounds_ :  \n>       [_ParenthesizedType_](about:blank/types.html#parenthesized-types)  \n>    | [_ImplTraitTypeOneBound_](types/impl-trait.html)  \n>    | [_TraitObjectTypeOneBound_](types/trait-object.html)  \n>    | [_TypePath_](about:blank/paths.html#paths-in-types)  \n>    | [_TupleType_](about:blank/types/tuple.html#tuple-types)  \n>    | [_NeverType_](types/never.html)  \n>    | [_RawPointerType_](about:blank/types/pointer.html#raw-pointers-const-and-mut)  \n>    | [_ReferenceType_](about:blank/types/pointer.html#shared-references-)  \n>    | [_ArrayType_](types/array.html)  \n>    | [_SliceType_](types/slice.html)  \n>    | [_InferredType_](types/inferred.html)  \n>    | [_QualifiedPathInType_](about:blank/paths.html#qualified-paths)  \n>    | [_BareFunctionType_](types/function-pointer.html)  \n>    | [_MacroInvocation_](about:blank/macros.html#macro-invocation)\n\nA _type expression_ as defined in the _Type_ grammar rule above is the syntax for referring to a type. It may refer to:\n\n-   Sequence types ([tuple](types/tuple.html), [array](types/array.html), [slice](types/slice.html)).\n-   [Type paths](about:blank/paths.html#paths-in-types) which can reference:\n    -   Primitive types ([boolean](types/boolean.html), [numeric](types/numeric.html), [textual](types/textual.html)).\n    -   Paths to an [item](items.html) ([struct](types/struct.html), [enum](types/enum.html), [union](types/union.html), [type alias](items/type-aliases.html), [trait](types/trait-object.html)).\n    -   [`Self` path](about:blank/paths.html#self-1) where `Self` is the implementing type.\n    -   Generic [type parameters](types/parameters.html).\n-   Pointer types ([reference](about:blank/types/pointer.html#shared-references-), [raw pointer](about:blank/types/pointer.html#raw-pointers-const-and-mut), [function pointer](types/function-pointer.html)).\n-   The [inferred type](types/inferred.html) which asks the compiler to determine the type.\n-   [Parentheses](about:blank/types.html#parenthesized-types) which are used for disambiguation.\n-   Trait types: [Trait objects](types/trait-object.html) and [impl trait](types/impl-trait.html).\n-   The [never](types/never.html) type.\n-   [Macros](macros.html) which expand to a type expression.\n\n### [Parenthesized types](#parenthesized-types)\n\n> _ParenthesizedType_ :  \n>    `(` [_Type_](about:blank/types.html#type-expressions) `)`\n\nIn some situations the combination of types may be ambiguous. Use parentheses around a type to avoid ambiguity. For example, the `+` operator for [type boundaries](trait-bounds.html) within a [reference type](about:blank/types/pointer.html#shared-references-) is unclear where the boundary applies, so the use of parentheses is required. Grammar rules that require this disambiguation use the [_TypeNoBounds_](about:blank/types.html#type-expressions) rule instead of [_Type_](about:blank/types.html#type-expressions).\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::any::Any;\ntype T<'a> = &'a (dyn Any + Send);\n}\n```\n\n## [Recursive types](#recursive-types)\n\nNominal types — [structs](types/struct.html), [enumerations](types/enum.html), and [unions](types/union.html) — may be recursive. That is, each `enum` variant or `struct` or `union` field may refer, directly or indirectly, to the enclosing `enum` or `struct` type itself. Such recursion has restrictions:\n\n-   Recursive types must include a nominal type in the recursion (not mere [type aliases](items/type-aliases.html), or other structural types such as [arrays](types/array.html) or [tuples](types/tuple.html)). So `type Rec = &'static [Rec]` is not allowed.\n-   The size of a recursive type must be finite; in other words the recursive fields of the type must be [pointer types](types/pointer.html).\n\nAn example of a _recursive_ type and its use:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum List<T> {\n    Nil,\n    Cons(T, Box<List<T>>)\n}\n\nlet a: List<i32> = List::Cons(7, Box::new(List::Cons(13, Box::new(List::Nil))));\n}\n```\n\n## [Boolean type](#boolean-type)\n\n```rust\n#![allow(unused)]\nfn main() {\nlet b: bool = true;\n}\n```\n\nThe _boolean type_ or _bool_ is a primitive data type that can take on one of two values, called _true_ and _false_.\n\nValues of this type may be created using a [literal expression](types/../expressions/literal-expr.html) using the keywords `true` and `false` corresponding to the value of the same name.\n\nThis type is a part of the [language prelude](about:blank/names/preludes.html#language-prelude) with the [name](types/../names.html) `bool`.\n\nAn object with the boolean type has a [size and alignment](about:blank/type-layout.html#size-and-alignment) of 1 each. The value false has the bit pattern `0x00` and the value true has the bit pattern `0x01`. It is [undefined behavior](types/../behavior-considered-undefined.html) for an object with the boolean type to have any other bit pattern.\n\nThe boolean type is the type of many operands in various [expressions](types/../expressions.html):\n\n-   The condition operand in [if expressions](about:blank/expressions/if-expr.html#if-expressions) and [while expressions](about:blank/expressions/loop-expr.html#predicate-loops)\n-   The operands in [lazy boolean operator expressions](about:blank/expressions/operator-expr.html#lazy-boolean-operators)\n\n> **Note**: The boolean type acts similarly to but is not an [enumerated type](types/enum.html). In practice, this mostly means that constructors are not associated to the type (e.g. `bool::true`).\n\nLike all primitives, the boolean type [implements](types/../items/implementations.html) the [traits](types/../items/traits.html) [`Clone`](about:blank/special-types-and-traits.html#clone), [`Copy`](about:blank/special-types-and-traits.html#copy), [`Sized`](about:blank/special-types-and-traits.html#sized), [`Send`](about:blank/special-types-and-traits.html#send), and [`Sync`](about:blank/special-types-and-traits.html#sync).\n\n> **Note**: See the [standard library docs](types/../../std/primitive.bool.html) for library operations.\n\n## [Operations on boolean values](#operations-on-boolean-values)\n\nWhen using certain operator expressions with a\n\nboolean type for its operands, they evaluate using the rules of [boolean logic](https://en.wikipedia.org/wiki/Boolean_algebra).\n\n### [Logical not](#logical-not)\n\n### [Logical or](#logical-or)\n\n| `a` | `b` | [`a | b`](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators) |\n| --- | --- | --- |\n| `true` | `true` | `true` |\n| `true` | `false` | `true` |\n| `false` | `true` | `true` |\n| `false` | `false` | `false` |\n\n### [Logical and](#logical-and)\n\n| `a` | `b` | [`a & b`](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators) |\n| --- | --- | --- |\n| `true` | `true` | `true` |\n| `true` | `false` | `false` |\n| `false` | `true` | `false` |\n| `false` | `false` | `false` |\n\n### [Logical xor](#logical-xor)\n\n| `a` | `b` | [`a ^ b`](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators) |\n| --- | --- | --- |\n| `true` | `true` | `false` |\n| `true` | `false` | `true` |\n| `false` | `true` | `true` |\n| `false` | `false` | `false` |\n\n### [Comparisons](#comparisons)\n\n| `a` | `b` | [`a == b`](about:blank/expressions/operator-expr.html#comparison-operators) |\n| --- | --- | --- |\n| `true` | `true` | `true` |\n| `true` | `false` | `false` |\n| `false` | `true` | `false` |\n| `false` | `false` | `true` |\n\n| `a` | `b` | [`a > b`](about:blank/expressions/operator-expr.html#comparison-operators) |\n| --- | --- | --- |\n| `true` | `true` | `false` |\n| `true` | `false` | `true` |\n| `false` | `true` | `false` |\n| `false` | `false` | `false` |\n\n-   `a != b` is the same as `!(a == b)`\n-   `a >= b` is the same as `a == b | a > b`\n-   `a < b` is the same as `!(a >= b)`\n-   `a <= b` is the same as `a == b | a < b`\n\n## [Bit validity](#bit-validity)\n\nThe single byte of a `bool` is guaranteed to be initialized (in other words, `transmute::<bool, u8>(...)` is always sound -- but since some bit patterns are invalid `bool`s, the inverse is not always sound).\n\n## [Numeric types](#numeric-types)\n\n## [Integer types](#integer-types)\n\nThe unsigned integer types consist of:\n\n| Type | Minimum | Maximum |\n| --- | --- | --- |\n| `u8` | 0 | 28\\-1 |\n| `u16` | 0 | 216\\-1 |\n| `u32` | 0 | 232\\-1 |\n| `u64` | 0 | 264\\-1 |\n| `u128` | 0 | 2128\\-1 |\n\nThe signed two's complement integer types consist of:\n\n| Type | Minimum | Maximum |\n| --- | --- | --- |\n| `i8` | \\-(27) | 27\\-1 |\n| `i16` | \\-(215) | 215\\-1 |\n| `i32` | \\-(231) | 231\\-1 |\n| `i64` | \\-(263) | 263\\-1 |\n| `i128` | \\-(2127) | 2127\\-1 |\n\n## [Floating-point types](#floating-point-types)\n\nThe IEEE 754-2008 \"binary32\" and \"binary64\" floating-point types are `f32` and `f64`, respectively.\n\n## [Machine-dependent integer types](#machine-dependent-integer-types)\n\nThe `usize` type is an unsigned integer type with the same number of bits as the platform's pointer type. It can represent every memory address in the process.\n\nThe `isize` type is a signed integer type with the same number of bits as the platform's pointer type. The theoretical upper bound on object and array size is the maximum `isize` value. This ensures that `isize` can be used to calculate differences between pointers into an object or array and can address every byte within an object along with one byte past the end.\n\n`usize` and `isize` are at least 16-bits wide.\n\n> **Note**: Many pieces of Rust code may assume that pointers, `usize`, and `isize` are either 32-bit or 64-bit. As a consequence, 16-bit pointer support is limited and may require explicit care and acknowledgment from a library to support.\n\n## [Bit validity](#bit-validity-1)\n\nFor every numeric type, `T`, the bit validity of `T` is equivalent to the bit validity of `[u8; size_of::<T>()]`. An uninitialized byte is not a valid `u8`.\n\n## [Textual types](#textual-types)\n\nThe types `char` and `str` hold textual data.\n\nA value of type `char` is a [Unicode scalar value](http://www.unicode.org/glossary/#unicode_scalar_value) (i.e. a code point that is not a surrogate), represented as a 32-bit unsigned word in the 0x0000 to 0xD7FF or 0xE000 to 0x10FFFF range. It is immediate [Undefined Behavior](types/../behavior-considered-undefined.html) to create a `char` that falls outside this range. A `[char]` is effectively a UCS-4 / UTF-32 string of length 1.\n\nA value of type `str` is represented the same way as `[u8]`, a slice of 8-bit unsigned bytes. However, the Rust standard library makes extra assumptions about `str`: methods working on `str` assume and ensure that the data in there is valid UTF-8. Calling a `str` method with a non-UTF-8 buffer can cause [Undefined Behavior](types/../behavior-considered-undefined.html) now or in the future.\n\nSince `str` is a [dynamically sized type](types/../dynamically-sized-types.html), it can only be instantiated through a pointer type, such as `&str`.\n\n## [Layout and bit validity](#layout-and-bit-validity)\n\n`char` is guaranteed to have the same size and alignment as `u32` on all platforms.\n\nEvery byte of a `char` is guaranteed to be initialized (in other words, `transmute::<char, [u8; size_of::<char>()]>(...)` is always sound -- but since some bit patterns are invalid `char`s, the inverse is not always sound).\n\n## [Never type](#never-type)\n\n> **Syntax**  \n> _NeverType_ : `!`\n\nThe never type `!` is a type with no values, representing the result of computations that never complete. Expressions of type `!` can be coerced into any other type.\n\nThe `!` type can **only** appear in function return types presently, indicating it is a diverging function that never returns.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn foo() -> ! {\n    panic!(\"This call never returns.\");\n}\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\nextern \"C\" {\n    pub fn no_return_extern_func() -> !;\n}\n}\n```\n\n## [Tuple types](#tuple-types)\n\n> **Syntax**  \n> _TupleType_ :  \n>       `(` `)`  \n>    | `(` ( [_Type_](about:blank/types.html#type-expressions) `,` )+ [_Type_](about:blank/types.html#type-expressions)? `)`\n\n_Tuple types_ are a family of structural types[1](#1) for heterogeneous lists of other types.\n\nThe syntax for a tuple type is a parenthesized, comma-separated list of types. 1-ary tuples require a comma after their element type to be disambiguated with a [parenthesized type](about:blank/types.html#parenthesized-types).\n\nA tuple type has a number of fields equal to the length of the list of types. This number of fields determines the _arity_ of the tuple. A tuple with `n` fields is called an _n-ary tuple_. For example, a tuple with 2 fields is a 2-ary tuple.\n\nFields of tuples are named using increasing numeric names matching their position in the list of types. The first field is `0`. The second field is `1`. And so on. The type of each field is the type of the same position in the tuple's list of types.\n\nFor convenience and historical reasons, the tuple type with no fields (`()`) is often called _unit_ or _the unit type_. Its one value is also called _unit_ or _the unit value_.\n\nSome examples of tuple types:\n\n-   `()` (unit)\n-   `(f64, f64)`\n-   `(String, i32)`\n-   `(i32, String)` (different type from the previous example)\n-   `(i32, f64, Vec<String>, Option<bool>)`\n\nValues of this type are constructed using a [tuple expression](about:blank/expressions/tuple-expr.html#tuple-expressions). Furthermore, various expressions will produce the unit value if there is no other meaningful value for it to evaluate to. Tuple fields can be accessed by either a [tuple index expression](about:blank/expressions/tuple-expr.html#tuple-indexing-expressions) or [pattern matching](about:blank/patterns.html#tuple-patterns).\n\n## [Array types](#array-types)\n\n> **Syntax**  \n> _ArrayType_ :  \n>    `[` [_Type_](about:blank/types.html#type-expressions) `;` [_Expression_](types/../expressions.html) `]`\n\nAn array is a fixed-size sequence of `N` elements of type `T`. The array type is written as `[T; N]`. The size is a [constant expression](about:blank/const_eval.html#constant-expressions) that evaluates to a [`usize`](about:blank/types/numeric.html#machine-dependent-integer-types).\n\nExamples:\n\n```rust\n#![allow(unused)]\nfn main() {\n// A stack-allocated array\nlet array: [i32; 3] = [1, 2, 3];\n\n// A heap-allocated array, coerced to a slice\nlet boxed_array: Box<[i32]> = Box::new([1, 2, 3]);\n}\n```\n\nAll elements of arrays are always initialized, and access to an array is always bounds-checked in safe methods and operators.\n\n> Note: The [`Vec<T>`](types/../../std/vec/struct.Vec.html) standard library type provides a heap-allocated resizable array type.\n\n## [Slice types](#slice-types)\n\n> **Syntax**  \n> _SliceType_ :  \n>    `[` [_Type_](about:blank/types.html#type-expressions) `]`\n\nA slice is a [dynamically sized type](types/../dynamically-sized-types.html) representing a 'view' into a sequence of elements of type `T`. The slice type is written as `[T]`.\n\nSlice types are generally used through pointer types. For example:\n\n-   `&[T]`: a 'shared slice', often just called a 'slice'. It doesn't own the data it points to; it borrows it.\n-   `&mut [T]`: a 'mutable slice'. It mutably borrows the data it points to.\n-   `Box<[T]>`: a 'boxed slice'\n\nExamples:\n\n```rust\n#![allow(unused)]\nfn main() {\n// A heap-allocated array, coerced to a slice\nlet boxed_array: Box<[i32]> = Box::new([1, 2, 3]);\n\n// A (shared) slice into an array\nlet slice: &[i32] = &boxed_array[..];\n}\n```\n\nAll elements of slices are always initialized, and access to a slice is always bounds-checked in safe methods and operators.\n\n## [Struct types](#struct-types)\n\nA `struct` _type_ is a heterogeneous product of other types, called the _fields_ of the type.[1](#structtype)\n\nNew instances of a `struct` can be constructed with a [struct expression](types/../expressions/struct-expr.html).\n\nThe memory layout of a `struct` is undefined by default to allow for compiler optimizations like field reordering, but it can be fixed with the [`repr` attribute](about:blank/type-layout.html#representations). In either case, fields may be given in any order in a corresponding struct _expression_; the resulting `struct` value will always have the same memory layout.\n\nThe fields of a `struct` may be qualified by [visibility modifiers](types/../visibility-and-privacy.html), to allow access to data in a struct outside a module.\n\nA _tuple struct_ type is just like a struct type, except that the fields are anonymous.\n\nA _unit-like struct_ type is like a struct type, except that it has no fields. The one value constructed by the associated [struct expression](types/../expressions/struct-expr.html) is the only value that inhabits such a type.\n\n## [Enumerated types](#enumerated-types)\n\nAn _enumerated type_ is a nominal, heterogeneous disjoint union type, denoted by the name of an [`enum` item](types/../items/enumerations.html). [1](#enumtype)\n\nAn [`enum` item](types/../items/enumerations.html) declares both the type and a number of _variants_, each of which is independently named and has the syntax of a struct, tuple struct or unit-like struct.\n\nNew instances of an `enum` can be constructed with a [struct expression](types/../expressions/struct-expr.html).\n\nAny `enum` value consumes as much memory as the largest variant for its corresponding `enum` type, as well as the size needed to store a discriminant.\n\nEnum types cannot be denoted _structurally_ as types, but must be denoted by named reference to an [`enum` item](types/../items/enumerations.html).\n\n## [Union types](#union-types)\n\nA _union type_ is a nominal, heterogeneous C-like union, denoted by the name of a [`union` item](types/../items/unions.html).\n\nUnions have no notion of an \"active field\". Instead, every union access transmutes parts of the content of the union to the type of the accessed field. Since transmutes can cause unexpected or undefined behaviour, `unsafe` is required to read from a union field. Union field types are also restricted to a subset of types which ensures that they never need dropping. See the [item](types/../items/unions.html) documentation for further details.\n\nThe memory layout of a `union` is undefined by default (in particular, fields do _not_ have to be at offset 0), but the `#[repr(...)]` attribute can be used to fix a layout.\n\n## [Function item types](#function-item-types)\n\nWhen referred to, a function item, or the constructor of a tuple-like struct or enum variant, yields a zero-sized value of its _function item type_. That type explicitly identifies the function - its name, its type arguments, and its early-bound lifetime arguments (but not its late-bound lifetime arguments, which are only assigned when the function is called) - so the value does not need to contain an actual function pointer, and no indirection is needed when the function is called.\n\nThere is no syntax that directly refers to a function item type, but the compiler will display the type as something like `fn(u32) -> i32 {fn_name}` in error messages.\n\nBecause the function item type explicitly identifies the function, the item types of different functions - different items, or the same item with different generics - are distinct, and mixing them will create a type error:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn foo<T>() { }\nlet x = &mut foo::<i32>;\n*x = foo::<u32>; //~ ERROR mismatched types\n}\n```\n\nHowever, there is a [coercion](types/../type-coercions.html) from function items to [function pointers](types/function-pointer.html) with the same signature, which is triggered not only when a function item is used when a function pointer is directly expected, but also when different function item types with the same signature meet in different arms of the same `if` or `match`:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet want_i32 = false;\nfn foo<T>() { }\n\n// `foo_ptr_1` has function pointer type `fn()` here\nlet foo_ptr_1: fn() = foo::<i32>;\n\n// ... and so does `foo_ptr_2` - this type-checks.\nlet foo_ptr_2 = if want_i32 {\n    foo::<i32>\n} else {\n    foo::<u32>\n};\n}\n```\n\nAll function items implement [`Fn`](types/../../std/ops/trait.Fn.html), [`FnMut`](types/../../std/ops/trait.FnMut.html), [`FnOnce`](types/../../std/ops/trait.FnOnce.html), [`Copy`](about:blank/special-types-and-traits.html#copy), [`Clone`](about:blank/special-types-and-traits.html#clone), [`Send`](about:blank/special-types-and-traits.html#send), and [`Sync`](about:blank/special-types-and-traits.html#sync).\n\n## [Closure types](#closure-types)\n\nA [closure expression](types/../expressions/closure-expr.html) produces a closure value with a unique, anonymous type that cannot be written out. A closure type is approximately equivalent to a struct which contains the captured variables. For instance, the following closure:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn f<F : FnOnce() -> String> (g: F) {\n    println!(\"{}\", g());\n}\n\nlet mut s = String::from(\"foo\");\nlet t = String::from(\"bar\");\n\nf(|| {\n    s += &t;\n    s\n});\n// Prints \"foobar\".\n}\n```\n\ngenerates a closure type roughly like the following:\n\n```rust\nstruct Closure<'a> {\n    s : String,\n    t : &'a String,\n}\n\nimpl<'a> FnOnce<()> for Closure<'a> {\n    type Output = String;\n    fn call_once(self) -> String {\n        self.s += &*self.t;\n        self.s\n    }\n}\n```\n\nso that the call to `f` works as if it were:\n\n```rust\nf(Closure{s: s, t: &t});\n```\n\n## [Capture modes](#capture-modes-1)\n\nThe compiler prefers to capture a closed-over variable by immutable borrow, followed by unique immutable borrow (see below), by mutable borrow, and finally by move. It will pick the first choice of these that is compatible with how the captured variable is used inside the closure body. The compiler does not take surrounding code into account, such as the lifetimes of involved variables, or of the closure itself.\n\nIf the `move` keyword is used, then all captures are by move or, for `Copy` types, by copy, regardless of whether a borrow would work. The `move` keyword is usually used to allow the closure to outlive the captured values, such as if the closure is being returned or used to spawn a new thread.\n\nComposite types such as structs, tuples, and enums are always captured entirely, not by individual fields. It may be necessary to borrow into a local variable in order to capture a single field:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::collections::HashSet;\n\nstruct SetVec {\n    set: HashSet<u32>,\n    vec: Vec<u32>\n}\n\nimpl SetVec {\n    fn populate(&mut self) {\n        let vec = &mut self.vec;\n        self.set.iter().for_each(|&n| {\n            vec.push(n);\n        })\n    }\n}\n}\n```\n\nIf, instead, the closure were to use `self.vec` directly, then it would attempt to capture `self` by mutable reference. But since `self.set` is already borrowed to iterate over, the code would not compile.\n\n## [Unique immutable borrows in captures](#unique-immutable-borrows-in-captures)\n\nCaptures can occur by a special kind of borrow called a _unique immutable borrow_, which cannot be used anywhere else in the language and cannot be written out explicitly. It occurs when modifying the referent of a mutable reference, as in the following example:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut b = false;\nlet x = &mut b;\n{\n    let mut c = || { *x = true; };\n    // The following line is an error:\n    // let y = &x;\n    c();\n}\nlet z = &x;\n}\n```\n\nIn this case, borrowing `x` mutably is not possible, because `x` is not `mut`. But at the same time, borrowing `x` immutably would make the assignment illegal, because a `& &mut` reference might not be unique, so it cannot safely be used to modify a value. So a unique immutable borrow is used: it borrows `x` immutably, but like a mutable borrow, it must be unique. In the above example, uncommenting the declaration of `y` will produce an error because it would violate the uniqueness of the closure's borrow of `x`; the declaration of z is valid because the closure's lifetime has expired at the end of the block, releasing the borrow.\n\n## [Call traits and coercions](#call-traits-and-coercions)\n\nClosure types all implement [`FnOnce`](types/../../std/ops/trait.FnOnce.html), indicating that they can be called once by consuming ownership of the closure. Additionally, some closures implement more specific call traits:\n\n-   A closure which does not move out of any captured variables implements [`FnMut`](types/../../std/ops/trait.FnMut.html), indicating that it can be called by mutable reference.\n    \n-   A closure which does not mutate or move out of any captured variables implements [`Fn`](types/../../std/ops/trait.Fn.html), indicating that it can be called by shared reference.\n    \n\n> Note: `move` closures may still implement [`Fn`](types/../../std/ops/trait.Fn.html) or [`FnMut`](types/../../std/ops/trait.FnMut.html), even though they capture variables by move. This is because the traits implemented by a closure type are determined by what the closure does with captured values, not how it captures them.\n\n_Non-capturing closures_ are closures that don't capture anything from their environment. They can be coerced to function pointers (e.g., `fn()`) with the matching signature.\n\n```rust\n#![allow(unused)]\nfn main() {\nlet add = |x, y| x + y;\n\nlet mut x = add(5,7);\n\ntype Binop = fn(i32, i32) -> i32;\nlet bo: Binop = add;\nx = bo(5,7);\n}\n```\n\n## [Other traits](#other-traits)\n\nAll closure types implement [`Sized`](about:blank/special-types-and-traits.html#sized). Additionally, closure types implement the following traits if allowed to do so by the types of the captures it stores:\n\n-   [`Clone`](about:blank/special-types-and-traits.html#clone)\n-   [`Copy`](about:blank/special-types-and-traits.html#copy)\n-   [`Sync`](about:blank/special-types-and-traits.html#sync)\n-   [`Send`](about:blank/special-types-and-traits.html#send)\n\nThe rules for [`Send`](about:blank/special-types-and-traits.html#send) and [`Sync`](about:blank/special-types-and-traits.html#sync) match those for normal struct types, while [`Clone`](about:blank/special-types-and-traits.html#clone) and [`Copy`](about:blank/special-types-and-traits.html#copy) behave as if [derived](types/../attributes/derive.html). For [`Clone`](about:blank/special-types-and-traits.html#clone), the order of cloning of the captured variables is left unspecified.\n\nBecause captures are often by reference, the following general rules arise:\n\n-   A closure is [`Sync`](about:blank/special-types-and-traits.html#sync) if all captured variables are [`Sync`](about:blank/special-types-and-traits.html#sync).\n-   A closure is [`Send`](about:blank/special-types-and-traits.html#send) if all variables captured by non-unique immutable reference are [`Sync`](about:blank/special-types-and-traits.html#sync), and all values captured by unique immutable or mutable reference, copy, or move are [`Send`](about:blank/special-types-and-traits.html#send).\n-   A closure is [`Clone`](about:blank/special-types-and-traits.html#clone) or [`Copy`](about:blank/special-types-and-traits.html#copy) if it does not capture any values by unique immutable or mutable reference, and if all values it captures by copy or move are [`Clone`](about:blank/special-types-and-traits.html#clone) or [`Copy`](about:blank/special-types-and-traits.html#copy), respectively.\n\n## [Pointer types](#pointer-types)\n\nAll pointers are explicit first-class values. They can be moved or copied, stored into data structs, and returned from functions.\n\n## [References (`&` and `&mut`)](#references--and-mut)\n\n> **Syntax**  \n> _ReferenceType_ :  \n>    `&` [_Lifetime_](types/../trait-bounds.html)? `mut`? [_TypeNoBounds_](about:blank/types.html#type-expressions)\n\n### [Shared references (`&`)](#shared-references-)\n\nShared references point to memory which is owned by some other value. When a shared reference to a value is created, it prevents direct mutation of the value. [Interior mutability](types/../interior-mutability.html) provides an exception for this in certain circumstances. As the name suggests, any number of shared references to a value may exist. A shared reference type is written `&type`, or `&'a type` when you need to specify an explicit lifetime. Copying a reference is a \"shallow\" operation: it involves only copying the pointer itself, that is, pointers are `Copy`. Releasing a reference has no effect on the value it points to, but referencing of a [temporary value](about:blank/expressions.html#temporaries) will keep it alive during the scope of the reference itself.\n\n### [Mutable references (`&mut`)](#mutable-references-mut)\n\nMutable references point to memory which is owned by some other value. A mutable reference type is written `&mut type` or `&'a mut type`. A mutable reference (that hasn't been borrowed) is the only way to access the value it points to, so is not `Copy`.\n\n## [Raw pointers (`*const` and `*mut`)](#raw-pointers-const-and-mut)\n\n> **Syntax**  \n> _RawPointerType_ :  \n>    `*` ( `mut` | `const` ) [_TypeNoBounds_](about:blank/types.html#type-expressions)\n\nRaw pointers are pointers without safety or liveness guarantees. Raw pointers are written as `*const T` or `*mut T`. For example `*const i32` means a raw pointer to a 32-bit integer. Copying or dropping a raw pointer has no effect on the lifecycle of any other value. Dereferencing a raw pointer is an [`unsafe` operation](types/../unsafety.html). This can also be used to convert a raw pointer to a reference by reborrowing it (`&*` or `&mut *`). Raw pointers are generally discouraged; they exist to support interoperability with foreign code, and writing performance-critical or low-level functions.\n\nWhen comparing raw pointers they are compared by their address, rather than by what they point to. When comparing raw pointers to [dynamically sized types](types/../dynamically-sized-types.html) they also have their additional data compared.\n\nRaw pointers can be created directly using [`core::ptr::addr_of!`](types/../../core/ptr/macro.addr_of.html) for `*const` pointers and [`core::ptr::addr_of_mut!`](types/../../core/ptr/macro.addr_of_mut.html) for `*mut` pointers.\n\n## [Smart Pointers](#smart-pointers)\n\nThe standard library contains additional 'smart pointer' types beyond references and raw pointers.\n\n## [Bit validity](#bit-validity-2)\n\nDespite pointers and references being similar to `usize`s in the machine code emitted on most platforms, the semantics of transmuting a reference or pointer type to a non-pointer type is currently undecided. Thus, it may not be valid to transmute a pointer or reference type, `P`, to a `[u8; size_of::<P>()]`.\n\nFor thin raw pointers (i.e., for `P = *const T` or `P = *mut T` for `T: Sized`), the inverse direction (transmuting from an integer or array of integers to `P`) is always valid. However, the pointer produced via such a transmutation may not be dereferenced (not even if `T` has size zero).\n\n## [Function pointer types](#function-pointer-types)\n\n> **Syntax**  \n> _BareFunctionType_ :  \n>    [_ForLifetimes_](about:blank/trait-bounds.html#higher-ranked-trait-bounds)? _FunctionTypeQualifiers_ `fn`  \n>       `(` _FunctionParametersMaybeNamedVariadic_? `)` _BareFunctionReturnType_?\n> \n> _FunctionTypeQualifiers_:  \n>    `unsafe`? (`extern` [_Abi_](types/../items/functions.html)?)?\n> \n> _BareFunctionReturnType_:  \n>    `->` [_TypeNoBounds_](about:blank/types.html#type-expressions)\n> \n> _FunctionParametersMaybeNamedVariadic_ :  \n>    _MaybeNamedFunctionParameters_ | _MaybeNamedFunctionParametersVariadic_\n> \n> _MaybeNamedFunctionParameters_ :  \n>    _MaybeNamedParam_ ( `,` _MaybeNamedParam_ )\\* `,`?\n> \n> _MaybeNamedParam_ :  \n>    [_OuterAttribute_](types/../attributes.html)\\* ( ( [IDENTIFIER](types/../identifiers.html) | `_` ) `:` )? [_Type_](about:blank/types.html#type-expressions)\n> \n> _MaybeNamedFunctionParametersVariadic_ :  \n>    ( _MaybeNamedParam_ `,` )\\* _MaybeNamedParam_ `,` [_OuterAttribute_](types/../attributes.html)\\* `...`\n\nFunction pointer types, written using the `fn` keyword, refer to a function whose identity is not necessarily known at compile-time. They can be created via a coercion from both [function items](types/function-item.html) and non-capturing [closures](types/closure.html).\n\nThe `unsafe` qualifier indicates that the type's value is an [unsafe function](types/../unsafe-keyword.html), and the `extern` qualifier indicates it is an [extern function](about:blank/items/functions.html#extern-function-qualifier).\n\nVariadic parameters can only be specified with [`extern`](types/../items/external-blocks.html) function types with the `\"C\"` or `\"cdecl\"` calling convention.\n\nAn example where `Binop` is defined as a function pointer type:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn add(x: i32, y: i32) -> i32 {\n    x + y\n}\n\nlet mut x = add(5,7);\n\ntype Binop = fn(i32, i32) -> i32;\nlet bo: Binop = add;\nx = bo(5,7);\n}\n```\n\n## [Attributes on function pointer parameters](#attributes-on-function-pointer-parameters)\n\nAttributes on function pointer parameters follow the same rules and restrictions as [regular function parameters](about:blank/items/functions.html#attributes-on-function-parameters).\n\n## [Trait objects](#trait-objects)\n\n> **Syntax**  \n> _TraitObjectType_ :  \n>    `dyn`? [_TypeParamBounds_](types/../trait-bounds.html)\n> \n> _TraitObjectTypeOneBound_ :  \n>    `dyn`? [_TraitBound_](types/../trait-bounds.html)\n\nA _trait object_ is an opaque value of another type that implements a set of traits. The set of traits is made up of an [object safe](about:blank/items/traits.html#object-safety) _base trait_ plus any number of [auto traits](about:blank/special-types-and-traits.html#auto-traits).\n\nTrait objects implement the base trait, its auto traits, and any [supertraits](about:blank/items/traits.html#supertraits) of the base trait.\n\nTrait objects are written as the keyword `dyn` followed by a set of trait bounds, but with the following restrictions on the trait bounds. All traits except the first trait must be auto traits, there may not be more than one lifetime, and opt-out bounds (e.g. `?Sized`) are not allowed. Furthermore, paths to traits may be parenthesized.\n\nFor example, given a trait `Trait`, the following are all trait objects:\n\n-   `dyn Trait`\n-   `dyn Trait + Send`\n-   `dyn Trait + Send + Sync`\n-   `dyn Trait + 'static`\n-   `dyn Trait + Send + 'static`\n-   `dyn Trait +`\n-   `dyn 'static + Trait`.\n-   `dyn (Trait)`\n\n> **Edition Differences**: Before the 2021 edition, the `dyn` keyword may be omitted.\n> \n> Note: For clarity, it is recommended to always use the `dyn` keyword on your trait objects unless your codebase supports compiling with Rust 1.26 or lower.\n\n> **Edition Differences**: In the 2015 edition, if the first bound of the trait object is a path that starts with `::`, then the `dyn` will be treated as a part of the path. The first path can be put in parenthesis to get around this. As such, if you want a trait object with the trait `::your_module::Trait`, you should write it as `dyn (::your_module::Trait)`.\n> \n> Beginning in the 2018 edition, `dyn` is a true keyword and is not allowed in paths, so the parentheses are not necessary.\n\nTwo trait object types alias each other if the base traits alias each other and if the sets of auto traits are the same and the lifetime bounds are the same. For example, `dyn Trait + Send + UnwindSafe` is the same as `dyn Trait + UnwindSafe + Send`.\n\nDue to the opaqueness of which concrete type the value is of, trait objects are [dynamically sized types](types/../dynamically-sized-types.html). Like all DSTs, trait objects are used behind some type of pointer; for example `&dyn SomeTrait` or `Box<dyn SomeTrait>`. Each instance of a pointer to a trait object includes:\n\n-   a pointer to an instance of a type `T` that implements `SomeTrait`\n-   a _virtual method table_, often just called a _vtable_, which contains, for each method of `SomeTrait` and its [supertraits](about:blank/items/traits.html#supertraits) that `T` implements, a pointer to `T`'s implementation (i.e. a function pointer).\n\nThe purpose of trait objects is to permit \"late binding\" of methods. Calling a method on a trait object results in virtual dispatch at runtime: that is, a function pointer is loaded from the trait object vtable and invoked indirectly. The actual implementation for each vtable entry can vary on an object-by-object basis.\n\nAn example of a trait object:\n\n```rust\ntrait Printable {\n    fn stringify(&self) -> String;\n}\n\nimpl Printable for i32 {\n    fn stringify(&self) -> String { self.to_string() }\n}\n\nfn print(a: Box<dyn Printable>) {\n    println!(\"{}\", a.stringify());\n}\n\nfn main() {\n    print(Box::new(10) as Box<dyn Printable>);\n}\n```\n\nIn this example, the trait `Printable` occurs as a trait object in both the type signature of `print`, and the cast expression in `main`.\n\n## [Trait Object Lifetime Bounds](#trait-object-lifetime-bounds)\n\nSince a trait object can contain references, the lifetimes of those references need to be expressed as part of the trait object. This lifetime is written as `Trait + 'a`. There are [defaults](about:blank/lifetime-elision.html#default-trait-object-lifetimes) that allow this lifetime to usually be inferred with a sensible choice.\n\n## [Impl trait](#impl-trait)\n\n> **Syntax**  \n> _ImplTraitType_ : `impl` [_TypeParamBounds_](types/../trait-bounds.html)\n> \n> _ImplTraitTypeOneBound_ : `impl` [_TraitBound_](types/../trait-bounds.html)\n\n`impl Trait` provides ways to specify unnamed but concrete types that implement a specific trait. It can appear in two sorts of places: argument position (where it can act as an anonymous type parameter to functions), and return position (where it can act as an abstract return type).\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Trait {}\nimpl Trait for () {}\n\n// argument position: anonymous type parameter\nfn foo(arg: impl Trait) {\n}\n\n// return position: abstract return type\nfn bar() -> impl Trait {\n}\n}\n```\n\n## [Anonymous type parameters](#anonymous-type-parameters)\n\n> Note: This is often called \"impl Trait in argument position\". (The term \"parameter\" is more correct here, but \"impl Trait in argument position\" is the phrasing used during the development of this feature, and it remains in parts of the implementation.)\n\nFunctions can use `impl` followed by a set of trait bounds to declare a parameter as having an anonymous type. The caller must provide a type that satisfies the bounds declared by the anonymous type parameter, and the function can only use the methods available through the trait bounds of the anonymous type parameter.\n\nFor example, these two forms are almost equivalent:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Trait {}\n\n// generic type parameter\nfn with_generic_type<T: Trait>(arg: T) {\n}\n\n// impl Trait in argument position\nfn with_impl_trait(arg: impl Trait) {\n}\n}\n```\n\nThat is, `impl Trait` in argument position is syntactic sugar for a generic type parameter like `<T: Trait>`, except that the type is anonymous and doesn't appear in the [_GenericParams_](types/../items/generics.html) list.\n\n> **Note:** For function parameters, generic type parameters and `impl Trait` are not exactly equivalent. With a generic parameter such as `<T: Trait>`, the caller has the option to explicitly specify the generic argument for `T` at the call site using [_GenericArgs_](about:blank/paths.html#paths-in-expressions), for example, `foo::<usize>(1)`. If `impl Trait` is the type of _any_ function parameter, then the caller can't ever provide any generic arguments when calling that function. This includes generic arguments for the return type or any const generics.\n> \n> Therefore, changing the function signature from either one to the other can constitute a breaking change for the callers of a function.\n\n## [Abstract return types](#abstract-return-types)\n\n> Note: This is often called \"impl Trait in return position\".\n\nFunctions can use `impl Trait` to return an abstract return type. These types stand in for another concrete type where the caller may only use the methods declared by the specified `Trait`. Each possible return value from the function must resolve to the same concrete type.\n\n`impl Trait` in return position allows a function to return an unboxed abstract type. This is particularly useful with [closures](types/closure.html) and iterators. For example, closures have a unique, un-writable type. Previously, the only way to return a closure from a function was to use a [trait object](types/trait-object.html):\n\n```rust\n#![allow(unused)]\nfn main() {\nfn returns_closure() -> Box<dyn Fn(i32) -> i32> {\n    Box::new(|x| x + 1)\n}\n}\n```\n\nThis could incur performance penalties from heap allocation and dynamic dispatch. It wasn't possible to fully specify the type of the closure, only to use the `Fn` trait. That means that the trait object is necessary. However, with `impl Trait`, it is possible to write this more simply:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn returns_closure() -> impl Fn(i32) -> i32 {\n    |x| x + 1\n}\n}\n```\n\nwhich also avoids the drawbacks of using a boxed trait object.\n\nSimilarly, the concrete types of iterators could become very complex, incorporating the types of all previous iterators in a chain. Returning `impl Iterator` means that a function only exposes the `Iterator` trait as a bound on its return type, instead of explicitly specifying all of the other iterator types involved.\n\n## [Return-position `impl Trait` in traits and trait implementations](#return-position-impl-trait-in-traits-and-trait-implementations)\n\nFunctions in traits may also use `impl Trait` as a syntax for an anonymous associated type.\n\nEvery `impl Trait` in the return type of an associated function in a trait is desugared to an anonymous associated type. The return type that appears in the implementation's function signature is used to determine the value of the associated type.\n\n### [Differences between generics and `impl Trait` in return position](#differences-between-generics-and-impl-trait-in-return-position)\n\nIn argument position, `impl Trait` is very similar in semantics to a generic type parameter. However, there are significant differences between the two in return position. With `impl Trait`, unlike with a generic type parameter, the function chooses the return type, and the caller cannot choose the return type.\n\nThe function:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Trait {}\nfn foo<T: Trait>() -> T {\n    // ...\npanic!()\n}\n}\n```\n\nallows the caller to determine the return type, `T`, and the function returns that type.\n\nThe function:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Trait {}\nimpl Trait for () {}\nfn foo() -> impl Trait {\n    // ...\n}\n}\n```\n\ndoesn't allow the caller to determine the return type. Instead, the function chooses the return type, but only promises that it will implement `Trait`.\n\n## [Limitations](#limitations-1)\n\n`impl Trait` can only appear as a parameter or return type of a non-`extern` function. It cannot be the type of a `let` binding, field type, or appear inside a type alias.\n\n## [Type parameters](#type-parameters)\n\nWithin the body of an item that has type parameter declarations, the names of its type parameters are types:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn to_vec<A: Clone>(xs: &[A]) -> Vec<A> {\n    if xs.is_empty() {\n        return vec![];\n    }\n    let first: A = xs[0].clone();\n    let mut rest: Vec<A> = to_vec(&xs[1..]);\n    rest.insert(0, first);\n    rest\n}\n}\n```\n\nHere, `first` has type `A`, referring to `to_vec`'s `A` type parameter; and `rest` has type `Vec<A>`, a vector with element type `A`.\n\n## [Inferred type](#inferred-type)\n\n> **Syntax**  \n> _InferredType_ : `_`\n\nThe inferred type asks the compiler to infer the type if possible based on the surrounding information available. It cannot be used in item signatures. It is often used in generic arguments:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x: Vec<_> = (0..10).collect();\n}\n```\n\n## [Dynamically Sized Types](#dynamically-sized-types)\n\nMost types have a fixed size that is known at compile time and implement the trait [`Sized`](about:blank/special-types-and-traits.html#sized). A type with a size that is known only at run-time is called a _dynamically sized type_ (_DST_) or, informally, an unsized type. [Slices](types/slice.html) and [trait objects](types/trait-object.html) are two examples of DSTs. Such types can only be used in certain cases:\n\n-   [Pointer types](types/pointer.html) to DSTs are sized but have twice the size of pointers to sized types\n    -   Pointers to slices also store the number of elements of the slice.\n    -   Pointers to trait objects also store a pointer to a vtable.\n-   DSTs can be provided as type arguments to generic type parameters having the special `?Sized` bound. They can also be used for associated type definitions when the corresponding associated type declaration has a `?Sized` bound. By default, any type parameter or associated type has a `Sized` bound, unless it is relaxed using `?Sized`.\n-   Traits may be implemented for DSTs. Unlike with generic type parameters, `Self: ?Sized` is the default in trait definitions.\n-   Structs may contain a DST as the last field; this makes the struct itself a DST.\n\n> **Note**: [variables](variables.html), function parameters, [const](items/constant-items.html) items, and [static](items/static-items.html) items must be `Sized`.\n\n## [Type Layout](#type-layout)\n\nThe layout of a type is its size, alignment, and the relative offsets of its fields. For enums, how the discriminant is laid out and interpreted is also part of type layout.\n\nType layout can be changed with each compilation. Instead of trying to document exactly what is done, we only document what is guaranteed today.\n\n## [Size and Alignment](#size-and-alignment)\n\nAll values have an alignment and size.\n\nThe _alignment_ of a value specifies what addresses are valid to store the value at. A value of alignment `n` must only be stored at an address that is a multiple of n. For example, a value with an alignment of 2 must be stored at an even address, while a value with an alignment of 1 can be stored at any address. Alignment is measured in bytes, and must be at least 1, and always a power of 2. The alignment of a value can be checked with the [`align_of_val`](../std/mem/fn.align_of_val.html) function.\n\nThe _size_ of a value is the offset in bytes between successive elements in an array with that item type including alignment padding. The size of a value is always a multiple of its alignment. Note that some types are zero-sized; 0 is considered a multiple of any alignment (for example, on some platforms, the type `[u16; 0]` has size 0 and alignment 2). The size of a value can be checked with the [`size_of_val`](../std/mem/fn.size_of_val.html) function.\n\nTypes where all values have the same size and alignment, and both are known at compile time, implement the [`Sized`](../std/marker/trait.Sized.html) trait and can be checked with the [`size_of`](../std/mem/fn.size_of.html) and [`align_of`](../std/mem/fn.align_of.html) functions. Types that are not [`Sized`](../std/marker/trait.Sized.html) are known as [dynamically sized types](dynamically-sized-types.html). Since all values of a `Sized` type share the same size and alignment, we refer to those shared values as the size of the type and the alignment of the type respectively.\n\n## [Primitive Data Layout](#primitive-data-layout)\n\nThe size of most primitives is given in this table.\n\n| Type | `size_of::<Type>()` |\n| --- | --- |\n| `bool` | 1 |\n| `u8` / `i8` | 1 |\n| `u16` / `i16` | 2 |\n| `u32` / `i32` | 4 |\n| `u64` / `i64` | 8 |\n| `u128` / `i128` | 16 |\n| `usize` / `isize` | See below |\n| `f32` | 4 |\n| `f64` | 8 |\n| `char` | 4 |\n\n`usize` and `isize` have a size big enough to contain every address on the target platform. For example, on a 32 bit target, this is 4 bytes, and on a 64 bit target, this is 8 bytes.\n\nThe alignment of primitives is platform-specific. In most cases, their alignment is equal to their size, but it may be less. In particular, `i128` and `u128` are often aligned to 4 or 8 bytes even though their size is 16, and on many 32-bit platforms, `i64`, `u64`, and `f64` are only aligned to 4 bytes, not 8.\n\n## [Pointers and References Layout](#pointers-and-references-layout)\n\nPointers and references have the same layout. Mutability of the pointer or reference does not change the layout.\n\nPointers to sized types have the same size and alignment as `usize`.\n\nPointers to unsized types are sized. The size and alignment is guaranteed to be at least equal to the size and alignment of a pointer.\n\n> Note: Though you should not rely on this, all pointers to DSTs are currently twice the size of the size of `usize` and have the same alignment.\n\n## [Array Layout](#array-layout)\n\nAn array of `[T; N]` has a size of `size_of::<T>() * N` and the same alignment of `T`. Arrays are laid out so that the zero-based `nth` element of the array is offset from the start of the array by `n * size_of::<T>()` bytes.\n\n## [Slice Layout](#slice-layout)\n\nSlices have the same layout as the section of the array they slice.\n\n> Note: This is about the raw `[T]` type, not pointers (`&[T]`, `Box<[T]>`, etc.) to slices.\n\n## [`str` Layout](#str-layout)\n\nString slices are a UTF-8 representation of characters that have the same layout as slices of type `[u8]`.\n\n## [Tuple Layout](#tuple-layout)\n\nTuples are laid out according to the [`Rust` representation](about:blank/type-layout.html#the-rust-representation).\n\nThe exception to this is the unit tuple (`()`), which is guaranteed as a zero-sized type to have a size of 0 and an alignment of 1.\n\n## [Trait Object Layout](#trait-object-layout)\n\nTrait objects have the same layout as the value the trait object is of.\n\n> Note: This is about the raw trait object types, not pointers (`&dyn Trait`, `Box<dyn Trait>`, etc.) to trait objects.\n\n## [Closure Layout](#closure-layout)\n\nClosures have no layout guarantees.\n\n## [Representations](#representations)\n\nAll user-defined composite types (`struct`s, `enum`s, and `union`s) have a _representation_ that specifies what the layout is for the type. The possible representations for a type are:\n\n-   [`Rust`](about:blank/type-layout.html#the-rust-representation) (default)\n-   [`C`](about:blank/type-layout.html#the-c-representation)\n-   The [primitive representations](about:blank/type-layout.html#primitive-representations)\n-   [`transparent`](about:blank/type-layout.html#the-transparent-representation)\n\nThe representation of a type can be changed by applying the `repr` attribute to it. The following example shows a struct with a `C` representation.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[repr(C)]\nstruct ThreeInts {\n    first: i16,\n    second: i8,\n    third: i32\n}\n}\n```\n\nThe alignment may be raised or lowered with the `align` and `packed` modifiers respectively. They alter the representation specified in the attribute. If no representation is specified, the default one is altered.\n\n```rust\n#![allow(unused)]\nfn main() {\n// Default representation, alignment lowered to 2.\n#[repr(packed(2))]\nstruct PackedStruct {\n    first: i16,\n    second: i8,\n    third: i32\n}\n\n// C representation, alignment raised to 8\n#[repr(C, align(8))]\nstruct AlignedStruct {\n    first: i16,\n    second: i8,\n    third: i32\n}\n}\n```\n\n> Note: As a consequence of the representation being an attribute on the item, the representation does not depend on generic parameters. Any two types with the same name have the same representation. For example, `Foo<Bar>` and `Foo<Baz>` both have the same representation.\n\nThe representation of a type can change the padding between fields, but does not change the layout of the fields themselves. For example, a struct with a `C` representation that contains a struct `Inner` with the default representation will not change the layout of `Inner`.\n\n### The `Rust` Representation\n\nThe `Rust` representation is the default representation for nominal types without a `repr` attribute. Using this representation explicitly through a `repr` attribute is guaranteed to be the same as omitting the attribute entirely.\n\nThe only data layout guarantees made by this representation are those required for soundness. They are:\n\n1.  The fields are properly aligned.\n2.  The fields do not overlap.\n3.  The alignment of the type is at least the maximum alignment of its fields.\n\nFormally, the first guarantee means that the offset of any field is divisible by that field's alignment. The second guarantee means that the fields can be ordered such that the offset plus the size of any field is less than or equal to the offset of the next field in the ordering. The ordering does not have to be the same as the order in which the fields are specified in the declaration of the type.\n\nBe aware that the second guarantee does not imply that the fields have distinct addresses: zero-sized types may have the same address as other fields in the same struct.\n\nThere are no other guarantees of data layout made by this representation.\n\n### [The `C` Representation](#the-c-representation)\n\nThe `C` representation is designed for dual purposes. One purpose is for creating types that are interoperable with the C Language. The second purpose is to create types that you can soundly perform operations on that rely on data layout such as reinterpreting values as a different type.\n\nBecause of this dual purpose, it is possible to create types that are not useful for interfacing with the C programming language.\n\nThis representation can be applied to structs, unions, and enums. The exception is [zero-variant enums](about:blank/items/enumerations.html#zero-variant-enums) for which the `C` representation is an error.\n\n#### [`#[repr(C)]` Structs](#reprc-structs)\n\nThe alignment of the struct is the alignment of the most-aligned field in it.\n\nThe size and offset of fields is determined by the following algorithm.\n\nStart with a current offset of 0 bytes.\n\nFor each field in declaration order in the struct, first determine the size and alignment of the field. If the current offset is not a multiple of the field's alignment, then add padding bytes to the current offset until it is a multiple of the field's alignment. The offset for the field is what the current offset is now. Then increase the current offset by the size of the field.\n\nFinally, the size of the struct is the current offset rounded up to the nearest multiple of the struct's alignment.\n\nHere is this algorithm described in pseudocode.\n\n```rust\n/// Returns the amount of padding needed after `offset` to ensure that the\n/// following address will be aligned to `alignment`.\nfn padding_needed_for(offset: usize, alignment: usize) -> usize {\n    let misalignment = offset % alignment;\n    if misalignment > 0 {\n        // round up to next multiple of `alignment`\n        alignment - misalignment\n    } else {\n        // already a multiple of `alignment`\n        0\n    }\n}\n\nstruct.alignment = struct.fields().map(|field| field.alignment).max();\n\nlet current_offset = 0;\n\nfor field in struct.fields_in_declaration_order() {\n    // Increase the current offset so that it's a multiple of the alignment\n    // of this field. For the first field, this will always be zero.\n    // The skipped bytes are called padding bytes.\n    current_offset += padding_needed_for(current_offset, field.alignment);\n\n    struct[field].offset = current_offset;\n\n    current_offset += field.size;\n}\n\nstruct.size = current_offset + padding_needed_for(current_offset, struct.alignment);\n```\n\nWarning: This pseudocode uses a naive algorithm that ignores overflow issues for the sake of clarity. To perform memory layout computations in actual code, use [`Layout`](../std/alloc/struct.Layout.html).\n\n> Note: This algorithm can produce zero-sized structs. In C, an empty struct declaration like `struct Foo { }` is illegal. However, both gcc and clang support options to enable such structs, and assign them size zero. C++, in contrast, gives empty structs a size of 1, unless they are inherited from or they are fields that have the `[[no_unique_address]]` attribute, in which case they do not increase the overall size of the struct.\n\n#### [`#[repr(C)]` Unions](#reprc-unions)\n\nA union declared with `#[repr(C)]` will have the same size and alignment as an equivalent C union declaration in the C language for the target platform. The union will have a size of the maximum size of all of its fields rounded to its alignment, and an alignment of the maximum alignment of all of its fields. These maximums may come from different fields.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[repr(C)]\nunion Union {\n    f1: u16,\n    f2: [u8; 4],\n}\n\nassert_eq!(std::mem::size_of::<Union>(), 4);  // From f2\nassert_eq!(std::mem::align_of::<Union>(), 2); // From f1\n\n#[repr(C)]\nunion SizeRoundedUp {\n   a: u32,\n   b: [u16; 3],\n}\n\nassert_eq!(std::mem::size_of::<SizeRoundedUp>(), 8);  // Size of 6 from b,\n                                                      // rounded up to 8 from\n                                                      // alignment of a.\nassert_eq!(std::mem::align_of::<SizeRoundedUp>(), 4); // From a\n}\n```\n\n#### [`#[repr(C)]` Field-less Enums](#reprc-field-less-enums)\n\nFor [field-less enums](about:blank/items/enumerations.html#field-less-enum), the `C` representation has the size and alignment of the default `enum` size and alignment for the target platform's C ABI.\n\n> Note: The enum representation in C is implementation defined, so this is really a \"best guess\". In particular, this may be incorrect when the C code of interest is compiled with certain flags.\n\nWarning: There are crucial differences between an `enum` in the C language and Rust's [field-less enums](about:blank/items/enumerations.html#field-less-enum) with this representation. An `enum` in C is mostly a `typedef` plus some named constants; in other words, an object of an `enum` type can hold any integer value. For example, this is often used for bitflags in `C`. In contrast, Rust’s [field-less enums](about:blank/items/enumerations.html#field-less-enum) can only legally hold the discriminant values, everything else is [undefined behavior](behavior-considered-undefined.html). Therefore, using a field-less enum in FFI to model a C `enum` is often wrong.\n\n#### [`#[repr(C)]` Enums With Fields](#reprc-enums-with-fields)\n\nThe representation of a `repr(C)` enum with fields is a `repr(C)` struct with two fields, also called a \"tagged union\" in C:\n\n-   a `repr(C)` version of the enum with all fields removed (\"the tag\")\n-   a `repr(C)` union of `repr(C)` structs for the fields of each variant that had them (\"the payload\")\n\n> Note: Due to the representation of `repr(C)` structs and unions, if a variant has a single field there is no difference between putting that field directly in the union or wrapping it in a struct; any system which wishes to manipulate such an `enum`'s representation may therefore use whichever form is more convenient or consistent for them.\n\n```rust\n#![allow(unused)]\nfn main() {\n// This Enum has the same representation as ...\n#[repr(C)]\nenum MyEnum {\n    A(u32),\n    B(f32, u64),\n    C { x: u32, y: u8 },\n    D,\n }\n\n// ... this struct.\n#[repr(C)]\nstruct MyEnumRepr {\n    tag: MyEnumDiscriminant,\n    payload: MyEnumFields,\n}\n\n// This is the discriminant enum.\n#[repr(C)]\nenum MyEnumDiscriminant { A, B, C, D }\n\n// This is the variant union.\n#[repr(C)]\nunion MyEnumFields {\n    A: MyAFields,\n    B: MyBFields,\n    C: MyCFields,\n    D: MyDFields,\n}\n\n#[repr(C)]\n#[derive(Copy, Clone)]\nstruct MyAFields(u32);\n\n#[repr(C)]\n#[derive(Copy, Clone)]\nstruct MyBFields(f32, u64);\n\n#[repr(C)]\n#[derive(Copy, Clone)]\nstruct MyCFields { x: u32, y: u8 }\n\n// This struct could be omitted (it is a zero-sized type), and it must be in\n// C/C++ headers.\n#[repr(C)]\n#[derive(Copy, Clone)]\nstruct MyDFields;\n}\n```\n\n> Note: `union`s with non-`Copy` fields are unstable, see [55149](https://github.com/rust-lang/rust/issues/55149).\n\n### [Primitive representations](#primitive-representations)\n\nThe _primitive representations_ are the representations with the same names as the primitive integer types. That is: `u8`, `u16`, `u32`, `u64`, `u128`, `usize`, `i8`, `i16`, `i32`, `i64`, `i128`, and `isize`.\n\nPrimitive representations can only be applied to enumerations and have different behavior whether the enum has fields or no fields. It is an error for [zero-variant enums](about:blank/items/enumerations.html#zero-variant-enums) to have a primitive representation. Combining two primitive representations together is an error.\n\n#### [Primitive Representation of Field-less Enums](#primitive-representation-of-field-less-enums)\n\nFor [field-less enums](about:blank/items/enumerations.html#field-less-enum), primitive representations set the size and alignment to be the same as the primitive type of the same name. For example, a field-less enum with a `u8` representation can only have discriminants between 0 and 255 inclusive.\n\n#### [Primitive Representation of Enums With Fields](#primitive-representation-of-enums-with-fields)\n\nThe representation of a primitive representation enum is a `repr(C)` union of `repr(C)` structs for each variant with a field. The first field of each struct in the union is the primitive representation version of the enum with all fields removed (\"the tag\") and the remaining fields are the fields of that variant.\n\n> Note: This representation is unchanged if the tag is given its own member in the union, should that make manipulation more clear for you (although to follow the C++ standard the tag member should be wrapped in a `struct`).\n\n```rust\n#![allow(unused)]\nfn main() {\n// This enum has the same representation as ...\n#[repr(u8)]\nenum MyEnum {\n    A(u32),\n    B(f32, u64),\n    C { x: u32, y: u8 },\n    D,\n }\n\n// ... this union.\n#[repr(C)]\nunion MyEnumRepr {\n    A: MyVariantA,\n    B: MyVariantB,\n    C: MyVariantC,\n    D: MyVariantD,\n}\n\n// This is the discriminant enum.\n#[repr(u8)]\n#[derive(Copy, Clone)]\nenum MyEnumDiscriminant { A, B, C, D }\n\n#[repr(C)]\n#[derive(Clone, Copy)]\nstruct MyVariantA(MyEnumDiscriminant, u32);\n\n#[repr(C)]\n#[derive(Clone, Copy)]\nstruct MyVariantB(MyEnumDiscriminant, f32, u64);\n\n#[repr(C)]\n#[derive(Clone, Copy)]\nstruct MyVariantC { tag: MyEnumDiscriminant, x: u32, y: u8 }\n\n#[repr(C)]\n#[derive(Clone, Copy)]\nstruct MyVariantD(MyEnumDiscriminant);\n}\n```\n\n> Note: `union`s with non-`Copy` fields are unstable, see [55149](https://github.com/rust-lang/rust/issues/55149).\n\n#### [Combining primitive representations of enums with fields and `#[repr(C)]`](#combining-primitive-representations-of-enums-with-fields-and-reprc)\n\nFor enums with fields, it is also possible to combine `repr(C)` and a primitive representation (e.g., `repr(C, u8)`). This modifies the [`repr(C)`](about:blank/type-layout.html#reprc-enums-with-fields) by changing the representation of the discriminant enum to the chosen primitive instead. So, if you chose the `u8` representation, then the discriminant enum would have a size and alignment of 1 byte.\n\nThe discriminant enum from the example [earlier](about:blank/type-layout.html#reprc-enums-with-fields) then becomes:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[repr(C, u8)] // `u8` was added\nenum MyEnum {\n    A(u32),\n    B(f32, u64),\n    C { x: u32, y: u8 },\n    D,\n }\n\n// ...\n\n#[repr(u8)] // So `u8` is used here instead of `C`\nenum MyEnumDiscriminant { A, B, C, D }\n\n// ...\n}\n```\n\nFor example, with a `repr(C, u8)` enum it is not possible to have 257 unique discriminants (\"tags\") whereas the same enum with only a `repr(C)` attribute will compile without any problems.\n\nUsing a primitive representation in addition to `repr(C)` can change the size of an enum from the `repr(C)` form:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[repr(C)]\nenum EnumC {\n    Variant0(u8),\n    Variant1,\n}\n\n#[repr(C, u8)]\nenum Enum8 {\n    Variant0(u8),\n    Variant1,\n}\n\n#[repr(C, u16)]\nenum Enum16 {\n    Variant0(u8),\n    Variant1,\n}\n\n// The size of the C representation is platform dependant\nassert_eq!(std::mem::size_of::<EnumC>(), 8);\n// One byte for the discriminant and one byte for the value in Enum8::Variant0\nassert_eq!(std::mem::size_of::<Enum8>(), 2);\n// Two bytes for the discriminant and one byte for the value in Enum16::Variant0\n// plus one byte of padding.\nassert_eq!(std::mem::size_of::<Enum16>(), 4);\n}\n```\n\n### [The alignment modifiers](#the-alignment-modifiers)\n\nThe `align` and `packed` modifiers can be used to respectively raise or lower the alignment of `struct`s and `union`s. `packed` may also alter the padding between fields (although it will not alter the padding inside of any field). On their own, `align` and `packed` do not provide guarantees about the order of fields in the layout of a struct or the layout of an enum variant, although they may be combined with representations (such as `C`) which do provide such guarantees.\n\nThe alignment is specified as an integer parameter in the form of `#[repr(align(x))]` or `#[repr(packed(x))]`. The alignment value must be a power of two from 1 up to 229. For `packed`, if no value is given, as in `#[repr(packed)]`, then the value is 1.\n\nFor `align`, if the specified alignment is less than the alignment of the type without the `align` modifier, then the alignment is unaffected.\n\nFor `packed`, if the specified alignment is greater than the type's alignment without the `packed` modifier, then the alignment and layout is unaffected. The alignments of each field, for the purpose of positioning fields, is the smaller of the specified alignment and the alignment of the field's type. Inter-field padding is guaranteed to be the minimum required in order to satisfy each field's (possibly altered) alignment (although note that, on its own, `packed` does not provide any guarantee about field ordering). An important consequence of these rules is that a type with `#[repr(packed(1))]` (or `#[repr(packed)]`) will have no inter-field padding.\n\nThe `align` and `packed` modifiers cannot be applied on the same type and a `packed` type cannot transitively contain another `align`ed type. `align` and `packed` may only be applied to the [`Rust`](about:blank/type-layout.html#the-rust-representation) and [`C`](about:blank/type-layout.html#the-c-representation) representations.\n\nThe `align` modifier can also be applied on an `enum`. When it is, the effect on the `enum`'s alignment is the same as if the `enum` was wrapped in a newtype `struct` with the same `align` modifier.\n\n> Note: References to unaligned fields are not allowed because it is [undefined behavior](behavior-considered-undefined.html). When fields are unaligned due to an alignment modifier, consider the following options for using references and dereferences:\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> #[repr(packed)]\n> struct Packed {\n>     f1: u8,\n>     f2: u16,\n> }\n> let mut e = Packed { f1: 1, f2: 2 };\n> // Instead of creating a reference to a field, copy the value to a local variable.\n> let x = e.f2;\n> // Or in situations like `println!` which creates a reference, use braces\n> // to change it to a copy of the value.\n> println!(\"{}\", {e.f2});\n> // Or if you need a pointer, use the unaligned methods for reading and writing\n> // instead of dereferencing the pointer directly.\n> let ptr: *const u16 = std::ptr::addr_of!(e.f2);\n> let value = unsafe { ptr.read_unaligned() };\n> let mut_ptr: *mut u16 = std::ptr::addr_of_mut!(e.f2);\n> unsafe { mut_ptr.write_unaligned(3) }\n> }\n> ```\n\n### [The `transparent` Representation](#the-transparent-representation)\n\nThe `transparent` representation can only be used on a [`struct`](items/structs.html) or an [`enum`](items/enumerations.html) with a single variant that has:\n\n-   a single field with non-zero size, and\n-   any number of fields with size 0 and alignment 1 (e.g. [`PhantomData<T>`](about:blank/special-types-and-traits.html#phantomdatat)).\n\nStructs and enums with this representation have the same layout and ABI as the single non-zero sized field.\n\nThis is different than the `C` representation because a struct with the `C` representation will always have the ABI of a `C` `struct` while, for example, a struct with the `transparent` representation with a primitive field will have the ABI of the primitive field.\n\nBecause this representation delegates type layout to another type, it cannot be used with any other representation.\n\n## [Interior Mutability](#interior-mutability)\n\nSometimes a type needs to be mutated while having multiple aliases. In Rust this is achieved using a pattern called _interior mutability_. A type has interior mutability if its internal state can be changed through a [shared reference](about:blank/types/pointer.html#shared-references-) to it. This goes against the usual [requirement](behavior-considered-undefined.html) that the value pointed to by a shared reference is not mutated.\n\n[`std::cell::UnsafeCell<T>`](../std/cell/struct.UnsafeCell.html) type is the only allowed way to disable this requirement. When `UnsafeCell<T>` is immutably aliased, it is still safe to mutate, or obtain a mutable reference to, the `T` it contains. As with all other types, it is undefined behavior to have multiple `&mut UnsafeCell<T>` aliases.\n\nOther types with interior mutability can be created by using `UnsafeCell<T>` as a field. The standard library provides a variety of types that provide safe interior mutability APIs. For example, [`std::cell::RefCell<T>`](../std/cell/struct.RefCell.html) uses run-time borrow checks to ensure the usual rules around multiple references. The [`std::sync::atomic`](../std/sync/atomic/index.html) module contains types that wrap a value that is only accessed with atomic operations, allowing the value to be shared and mutated across threads.\n\n## [Subtyping and Variance](#subtyping-and-variance)\n\nSubtyping is implicit and can occur at any stage in type checking or inference. Subtyping is restricted to two cases: variance with respect to lifetimes and between types with higher ranked lifetimes. If we were to erase lifetimes from types, then the only subtyping would be due to type equality.\n\nConsider the following example: string literals always have `'static` lifetime. Nevertheless, we can assign `s` to `t`:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn bar<'a>() {\n    let s: &'static str = \"hi\";\n    let t: &'a str = s;\n}\n}\n```\n\nSince `'static` outlives the lifetime parameter `'a`, `&'static str` is a subtype of `&'a str`.\n\n[Higher-ranked](../nomicon/hrtb.html) [function pointers](types/function-pointer.html) and [trait objects](types/trait-object.html) have another subtype relation. They are subtypes of types that are given by substitutions of the higher-ranked lifetimes. Some examples:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Here 'a is substituted for 'static\nlet subtype: &(for<'a> fn(&'a i32) -> &'a i32) = &((|x| x) as fn(&_) -> &_);\nlet supertype: &(fn(&'static i32) -> &'static i32) = subtype;\n\n// This works similarly for trait objects\nlet subtype: &(dyn for<'a> Fn(&'a i32) -> &'a i32) = &|x| x;\nlet supertype: &(dyn Fn(&'static i32) -> &'static i32) = subtype;\n\n// We can also substitute one higher-ranked lifetime for another\nlet subtype: &(for<'a, 'b> fn(&'a i32, &'b i32))= &((|x, y| {}) as fn(&_, &_));\nlet supertype: &for<'c> fn(&'c i32, &'c i32) = subtype;\n}\n```\n\n## [Variance](#variance)\n\nVariance is a property that generic types have with respect to their arguments. A generic type's _variance_ in a parameter is how the subtyping of the parameter affects the subtyping of the type.\n\n-   `F<T>` is _covariant_ over `T` if `T` being a subtype of `U` implies that `F<T>` is a subtype of `F<U>` (subtyping \"passes through\")\n-   `F<T>` is _contravariant_ over `T` if `T` being a subtype of `U` implies that `F<U>` is a subtype of `F<T>`\n-   `F<T>` is _invariant_ over `T` otherwise (no subtyping relation can be derived)\n\nVariance of types is automatically determined as follows\n\n| Type | Variance in `'a` | Variance in `T` |\n| --- | --- | --- |\n| `&'a T` | covariant | covariant |\n| `&'a mut T` | covariant | invariant |\n| `*const T` |  | covariant |\n| `*mut T` |  | invariant |\n| `[T]` and `[T; n]` |  | covariant |\n| `fn() -> T` |  | covariant |\n| `fn(T) -> ()` |  | contravariant |\n| `std::cell::UnsafeCell<T>` |  | invariant |\n| `std::marker::PhantomData<T>` |  | covariant |\n| `dyn Trait<T> + 'a` | covariant | invariant |\n\nThe variance of other `struct`, `enum`, and `union` types is decided by looking at the variance of the types of their fields. If the parameter is used in positions with different variances then the parameter is invariant. For example the following struct is covariant in `'a` and `T` and invariant in `'b`, `'c`, and `U`.\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::cell::UnsafeCell;\nstruct Variance<'a, 'b, 'c, T, U: 'a> {\n    x: &'a U,               // This makes `Variance` covariant in 'a, and would\n                            // make it covariant in U, but U is used later\n    y: *const T,            // Covariant in T\n    z: UnsafeCell<&'b f64>, // Invariant in 'b\n    w: *mut U,              // Invariant in U, makes the whole struct invariant\n\n    f: fn(&'c ()) -> &'c () // Both co- and contravariant, makes 'c invariant\n                            // in the struct.\n}\n}\n```\n\nWhen used outside of an `struct`, `enum`, or `union`, the variance for parameters is checked at each location separately.\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::cell::UnsafeCell;\nfn generic_tuple<'short, 'long: 'short>(\n    // 'long is used inside of a tuple in both a co- and invariant position.\n    x: (&'long u32, UnsafeCell<&'long u32>),\n) {\n    // As the variance at these positions is computed separately,\n    // we can freely shrink 'long in the covariant position.\n    let _: (&'short u32, UnsafeCell<&'long u32>) = x;\n}\n\nfn takes_fn_ptr<'short, 'middle: 'short>(\n    // 'middle is used in both a co- and contravariant position.\n    f: fn(&'middle ()) -> &'middle (),\n) {\n    // As the variance at these positions is computed separately,\n    // we can freely shrink 'middle in the covariant position\n    // and extend it in the contravariant position.\n    let _: fn(&'static ()) -> &'short () = f;\n}\n}\n```\n\n## [Trait and lifetime bounds](#trait-and-lifetime-bounds)\n\n> **Syntax**  \n> _TypeParamBounds_ :  \n>    _TypeParamBound_ ( `+` _TypeParamBound_ )\\* `+`?\n> \n> _TypeParamBound_ :  \n>       _Lifetime_ | _TraitBound_\n> \n> _TraitBound_ :  \n>       `?`? [_ForLifetimes_](about:blank/trait-bounds.html#higher-ranked-trait-bounds)? [_TypePath_](about:blank/paths.html#paths-in-types)  \n>    | `(` `?`? [_ForLifetimes_](about:blank/trait-bounds.html#higher-ranked-trait-bounds)? [_TypePath_](about:blank/paths.html#paths-in-types) `)`\n> \n> _LifetimeBounds_ :  \n>    ( _Lifetime_ `+` )\\* _Lifetime_?\n> \n> _Lifetime_ :  \n>       [LIFETIME\\_OR\\_LABEL](about:blank/tokens.html#lifetimes-and-loop-labels)  \n>    | `'static`  \n>    | `'_`\n\n[Trait](about:blank/items/traits.html#trait-bounds) and lifetime bounds provide a way for [generic items](items/generics.html) to restrict which types and lifetimes are used as their parameters. Bounds can be provided on any type in a [where clause](about:blank/items/generics.html#where-clauses). There are also shorter forms for certain common cases:\n\n-   Bounds written after declaring a [generic parameter](items/generics.html): `fn f<A: Copy>() {}` is the same as `fn f<A>() where A: Copy {}`.\n-   In trait declarations as [supertraits](about:blank/items/traits.html#supertraits): `trait Circle : Shape {}` is equivalent to `trait Circle where Self : Shape {}`.\n-   In trait declarations as bounds on [associated types](about:blank/items/associated-items.html#associated-types): `trait A { type B: Copy; }` is equivalent to `trait A where Self::B: Copy { type B; }`.\n\nBounds on an item must be satisfied when using the item. When type checking and borrow checking a generic item, the bounds can be used to determine that a trait is implemented for a type. For example, given `Ty: Trait`\n\n-   In the body of a generic function, methods from `Trait` can be called on `Ty` values. Likewise associated constants on the `Trait` can be used.\n-   Associated types from `Trait` can be used.\n-   Generic functions and types with a `T: Trait` bounds can be used with `Ty` being used for `T`.\n\n```rust\n#![allow(unused)]\nfn main() {\ntype Surface = i32;\ntrait Shape {\n    fn draw(&self, surface: Surface);\n    fn name() -> &'static str;\n}\n\nfn draw_twice<T: Shape>(surface: Surface, sh: T) {\n    sh.draw(surface);           // Can call method because T: Shape\n    sh.draw(surface);\n}\n\nfn copy_and_draw_twice<T: Copy>(surface: Surface, sh: T) where T: Shape {\n    let shape_copy = sh;        // doesn't move sh because T: Copy\n    draw_twice(surface, sh);    // Can use generic function because T: Shape\n}\n\nstruct Figure<S: Shape>(S, S);\n\nfn name_figure<U: Shape>(\n    figure: Figure<U>,          // Type Figure<U> is well-formed because U: Shape\n) {\n    println!(\n        \"Figure of two {}\",\n        U::name(),              // Can use associated function\n    );\n}\n}\n```\n\nBounds that don't use the item's parameters or [higher-ranked lifetimes](about:blank/trait-bounds.html#higher-ranked-trait-bounds) are checked when the item is defined. It is an error for such a bound to be false.\n\n[`Copy`](about:blank/special-types-and-traits.html#copy), [`Clone`](about:blank/special-types-and-traits.html#clone), and [`Sized`](about:blank/special-types-and-traits.html#sized) bounds are also checked for certain generic types when using the item, even if the use does not provide a concrete type. It is an error to have `Copy` or `Clone` as a bound on a mutable reference, [trait object](types/trait-object.html), or [slice](types/slice.html). It is an error to have `Sized` as a bound on a trait object or slice.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct A<'a, T>\nwhere\n    i32: Default,           // Allowed, but not useful\n    i32: Iterator,          // Error: `i32` is not an iterator\n    &'a mut T: Copy,        // (at use) Error: the trait bound is not satisfied\n    [T]: Sized,             // (at use) Error: size cannot be known at compilation\n{\n    f: &'a T,\n}\nstruct UsesA<'a, T>(A<'a, T>);\n}\n```\n\nTrait and lifetime bounds are also used to name [trait objects](types/trait-object.html).\n\n## [`?Sized`](#sized)\n\n`?` is only used to relax the implicit [`Sized`](about:blank/special-types-and-traits.html#sized) trait bound for [type parameters](types/parameters.html) or [associated types](about:blank/items/associated-items.html#associated-types). `?Sized` may not be used as a bound for other types.\n\n## [Lifetime bounds](#lifetime-bounds)\n\nLifetime bounds can be applied to types or to other lifetimes. The bound `'a: 'b` is usually read as `'a` _outlives_ `'b`. `'a: 'b` means that `'a` lasts at least as long as `'b`, so a reference `&'a ()` is valid whenever `&'b ()` is valid.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn f<'a, 'b>(x: &'a i32, mut y: &'b i32) where 'a: 'b {\n    y = x;                      // &'a i32 is a subtype of &'b i32 because 'a: 'b\n    let r: &'b &'a i32 = &&0;   // &'b &'a i32 is well formed because 'a: 'b\n}\n}\n```\n\n`T: 'a` means that all lifetime parameters of `T` outlive `'a`. For example, if `'a` is an unconstrained lifetime parameter, then `i32: 'static` and `&'static str: 'a` are satisfied, but `Vec<&'a ()>: 'static` is not.\n\n## [Higher-ranked trait bounds](#higher-ranked-trait-bounds)\n\n> _ForLifetimes_ :  \n>    `for` [_GenericParams_](items/generics.html)\n\nTrait bounds may be _higher ranked_ over lifetimes. These bounds specify a bound that is true _for all_ lifetimes. For example, a bound such as `for<'a> &'a T: PartialEq<i32>` would require an implementation like\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct T;\nimpl<'a> PartialEq<i32> for &'a T {\n    // ...\n   fn eq(&self, other: &i32) -> bool {true}\n}\n}\n```\n\nand could then be used to compare a `&'a T` with any lifetime to an `i32`.\n\nOnly a higher-ranked bound can be used here, because the lifetime of the reference is shorter than any possible lifetime parameter on the function:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn call_on_ref_zero<F>(f: F) where for<'a> F: Fn(&'a i32) {\n    let zero = 0;\n    f(&zero);\n}\n}\n```\n\nHigher-ranked lifetimes may also be specified just before the trait: the only difference is the [scope](about:blank/names/scopes.html#higher-ranked-trait-bound-scopes) of the lifetime parameter, which extends only to the end of the following trait instead of the whole bound. This function is equivalent to the last one.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn call_on_ref_zero<F>(f: F) where F: for<'a> Fn(&'a i32) {\n    let zero = 0;\n    f(&zero);\n}\n}\n```\n\n## [Implied bounds](#implied-bounds)\n\nLifetime bounds required for types to be well-formed are sometimes inferred.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn requires_t_outlives_a<'a, T>(x: &'a T) {}\n}\n```\n\nThe type parameter `T` is required to outlive `'a` for the type `&'a T` to be well-formed. This is inferred because the function signature contains the type `&'a T` which is only valid if `T: 'a` holds.\n\nImplied bounds are added for all parameters and outputs of functions. Inside of `requires_t_outlives_a` you can assume `T: 'a` to hold even if you don't explicitly specify this:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn requires_t_outlives_a_not_implied<'a, T: 'a>() {}\n\nfn requires_t_outlives_a<'a, T>(x: &'a T) {\n    // This compiles, because `T: 'a` is implied by\n    // the reference type `&'a T`.\n    requires_t_outlives_a_not_implied::<'a, T>();\n}\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\nfn requires_t_outlives_a_not_implied<'a, T: 'a>() {}\nfn not_implied<'a, T>() {\n    // This errors, because `T: 'a` is not implied by\n    // the function signature.\n    requires_t_outlives_a_not_implied::<'a, T>();\n}\n}\n```\n\nOnly lifetime bounds are implied, trait bounds still have to be explicitly added. The following example therefore causes an error:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fmt::Debug;\nstruct IsDebug<T: Debug>(T);\n// error[E0277]: `T` doesn't implement `Debug`\nfn doesnt_specify_t_debug<T>(x: IsDebug<T>) {}\n}\n```\n\nLifetime bounds are also inferred for type definitions and impl blocks for any type:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Struct<'a, T> {\n    // This requires `T: 'a` to be well-formed\n    // which is inferred by the compiler.\n    field: &'a T,\n}\n\nenum Enum<'a, T> {\n    // This requires `T: 'a` to be well-formed,\n    // which is inferred by the compiler.\n    //\n    // Note that `T: 'a` is required even when only\n    // using `Enum::OtherVariant`.\n    SomeVariant(&'a T),\n    OtherVariant,\n}\n\ntrait Trait<'a, T: 'a> {}\n\n// This would error because `T: 'a` is not implied by any type\n// in the impl header.\n//     impl<'a, T> Trait<'a, T> for () {}\n\n// This compiles as `T: 'a` is implied by the self type `&'a T`.\nimpl<'a, T> Trait<'a, T> for &'a T {}\n}\n```\n\n## [Type coercions](#type-coercions)\n\n**Type coercions** are implicit operations that change the type of a value. They happen automatically at specific locations and are highly restricted in what types actually coerce.\n\nAny conversions allowed by coercion can also be explicitly performed by the [type cast operator](about:blank/expressions/operator-expr.html#type-cast-expressions), `as`.\n\nCoercions are originally defined in [RFC 401](https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md) and expanded upon in [RFC 1558](https://github.com/rust-lang/rfcs/blob/master/text/1558-closure-to-fn-coercion.md).\n\n## [Coercion sites](#coercion-sites)\n\nA coercion can only occur at certain coercion sites in a program; these are typically places where the desired type is explicit or can be derived by propagation from explicit types (without type inference). Possible coercion sites are:\n\n-   `let` statements where an explicit type is given.\n    \n    For example, `&mut 42` is coerced to have type `&i8` in the following:\n    \n    ```rust\n    #![allow(unused)]\n    fn main() {\n    let _: &i8 = &mut 42;\n    }\n    ```\n    \n-   `static` and `const` item declarations (similar to `let` statements).\n    \n-   Arguments for function calls\n    \n    The value being coerced is the actual parameter, and it is coerced to the type of the formal parameter.\n    \n    For example, `&mut 42` is coerced to have type `&i8` in the following:\n    \n    ```rust\n    fn bar(_: &i8) { }\n    \n    fn main() {\n        bar(&mut 42);\n    }\n    ```\n    \n    For method calls, the receiver (`self` parameter) type is coerced differently, see the documentation on [method-call expressions](expressions/method-call-expr.html) for details.\n    \n-   Instantiations of struct, union, or enum variant fields\n    \n    For example, `&mut 42` is coerced to have type `&i8` in the following:\n    \n    ```rust\n    struct Foo<'a> { x: &'a i8 }\n    \n    fn main() {\n        Foo { x: &mut 42 };\n    }\n    ```\n    \n-   Function results—either the final line of a block if it is not semicolon-terminated or any expression in a `return` statement\n    \n    For example, `x` is coerced to have type `&dyn Display` in the following:\n    \n    ```rust\n    #![allow(unused)]\n    fn main() {\n    use std::fmt::Display;\n    fn foo(x: &u32) -> &dyn Display {\n        x\n    }\n    }\n    ```\n    \n\nIf the expression in one of these coercion sites is a coercion-propagating expression, then the relevant sub-expressions in that expression are also coercion sites. Propagation recurses from these new coercion sites. Propagating expressions and their relevant sub-expressions are:\n\n-   Array literals, where the array has type `[U; n]`. Each sub-expression in the array literal is a coercion site for coercion to type `U`.\n    \n-   Array literals with repeating syntax, where the array has type `[U; n]`. The repeated sub-expression is a coercion site for coercion to type `U`.\n    \n-   Tuples, where a tuple is a coercion site to type `(U_0, U_1, ..., U_n)`. Each sub-expression is a coercion site to the respective type, e.g. the zeroth sub-expression is a coercion site to type `U_0`.\n    \n-   Parenthesized sub-expressions (`(e)`): if the expression has type `U`, then the sub-expression is a coercion site to `U`.\n    \n-   Blocks: if a block has type `U`, then the last expression in the block (if it is not semicolon-terminated) is a coercion site to `U`. This includes blocks which are part of control flow statements, such as `if`/`else`, if the block has a known type.\n    \n\n## [Coercion types](#coercion-types)\n\nCoercion is allowed between the following types:\n\n-   `T` to `U` if `T` is a [subtype](subtyping.html) of `U` (_reflexive case_)\n    \n-   `T_1` to `T_3` where `T_1` coerces to `T_2` and `T_2` coerces to `T_3` (_transitive case_)\n    \n    Note that this is not fully supported yet.\n    \n-   `&mut T` to `&T`\n    \n-   `*mut T` to `*const T`\n    \n-   `&T` to `*const T`\n    \n-   `&mut T` to `*mut T`\n    \n-   `&T` or `&mut T` to `&U` if `T` implements `Deref<Target = U>`. For example:\n    \n    ```rust\n    use std::ops::Deref;\n    \n    struct CharContainer {\n        value: char,\n    }\n    \n    impl Deref for CharContainer {\n        type Target = char;\n    \n        fn deref<'a>(&'a self) -> &'a char {\n            &self.value\n        }\n    }\n    \n    fn foo(arg: &char) {}\n    \n    fn main() {\n        let x = &mut CharContainer { value: 'y' };\n        foo(x); //&mut CharContainer is coerced to &char.\n    }\n    ```\n    \n-   `&mut T` to `&mut U` if `T` implements `DerefMut<Target = U>`.\n    \n-   TyCtor(`T`) to TyCtor(`U`), where TyCtor(`T`) is one of\n    \n    -   `&T`\n    -   `&mut T`\n    -   `*const T`\n    -   `*mut T`\n    -   `Box<T>`\n    \n    and where `U` can be obtained from `T` by [unsized coercion](about:blank/type-coercions.html#unsized-coercions).\n    \n-   Function item types to `fn` pointers\n    \n-   Non capturing closures to `fn` pointers\n    \n-   `!` to any `T`\n    \n\n### [Unsized Coercions](#unsized-coercions)\n\nThe following coercions are called `unsized coercions`, since they relate to converting sized types to unsized types, and are permitted in a few cases where other coercions are not, as described above. They can still happen anywhere else a coercion can occur.\n\nTwo traits, [`Unsize`](../std/marker/trait.Unsize.html) and [`CoerceUnsized`](../std/ops/trait.CoerceUnsized.html), are used to assist in this process and expose it for library use. The following coercions are built-ins and, if `T` can be coerced to `U` with one of them, then an implementation of `Unsize<U>` for `T` will be provided:\n\n-   `[T; n]` to `[T]`.\n    \n-   `T` to `dyn U`, when `T` implements `U + Sized`, and `U` is [object safe](about:blank/items/traits.html#object-safety).\n    \n-   `Foo<..., T, ...>` to `Foo<..., U, ...>`, when:\n    \n    -   `Foo` is a struct.\n    -   `T` implements `Unsize<U>`.\n    -   The last field of `Foo` has a type involving `T`.\n    -   If that field has type `Bar<T>`, then `Bar<T>` implements `Unsized<Bar<U>>`.\n    -   T is not part of the type of any other fields.\n\nAdditionally, a type `Foo<T>` can implement `CoerceUnsized<Foo<U>>` when `T` implements `Unsize<U>` or `CoerceUnsized<Foo<U>>`. This allows it to provide a unsized coercion to `Foo<U>`.\n\n> Note: While the definition of the unsized coercions and their implementation has been stabilized, the traits themselves are not yet stable and therefore can't be used directly in stable Rust.\n\n## [Least upper bound coercions](#least-upper-bound-coercions)\n\nIn some contexts, the compiler must coerce together multiple types to try and find the most general type. This is called a \"Least Upper Bound\" coercion. LUB coercion is used and only used in the following situations:\n\n-   To find the common type for a series of if branches.\n-   To find the common type for a series of match arms.\n-   To find the common type for array elements.\n-   To find the type for the return type of a closure with multiple return statements.\n-   To check the type for the return type of a function with multiple return statements.\n\nIn each such case, there are a set of types `T0..Tn` to be mutually coerced to some target type `T_t`, which is unknown to start. Computing the LUB coercion is done iteratively. The target type `T_t` begins as the type `T0`. For each new type `Ti`, we consider whether\n\n-   If `Ti` can be coerced to the current target type `T_t`, then no change is made.\n-   Otherwise, check whether `T_t` can be coerced to `Ti`; if so, the `T_t` is changed to `Ti`. (This check is also conditioned on whether all of the source expressions considered thus far have implicit coercions.)\n-   If not, try to compute a mutual supertype of `T_t` and `Ti`, which will become the new target type.\n\n### [Examples:](#examples-3)\n\n```rust\n#![allow(unused)]\nfn main() {\nlet (a, b, c) = (0, 1, 2);\n// For if branches\nlet bar = if true {\n    a\n} else if false {\n    b\n} else {\n    c\n};\n\n// For match arms\nlet baw = match 42 {\n    0 => a,\n    1 => b,\n    _ => c,\n};\n\n// For array elements\nlet bax = [a, b, c];\n\n// For closure with multiple return statements\nlet clo = || {\n    if true {\n        a\n    } else if false {\n        b\n    } else {\n        c\n    }\n};\nlet baz = clo();\n\n// For type checking of function with multiple return statements\nfn foo() -> i32 {\n    let (a, b, c) = (0, 1, 2);\n    match 42 {\n        0 => a,\n        1 => b,\n        _ => c,\n    }\n}\n}\n```\n\nIn these examples, types of the `ba*` are found by LUB coercion. And the compiler checks whether LUB coercion result of `a`, `b`, `c` is `i32` in the processing of the function `foo`.\n\n### [Caveat](#caveat)\n\nThis description is obviously informal. Making it more precise is expected to proceed as part of a general effort to specify the Rust type checker more precisely.\n\n## [Destructors](#destructors)\n\nWhen an [initialized](about:blank/glossary.html#initialized) [variable](variables.html) or [temporary](about:blank/expressions.html#temporaries) goes out of [scope](about:blank/destructors.html#drop-scopes), its _destructor_ is run, or it is _dropped_. [Assignment](about:blank/expressions/operator-expr.html#assignment-expressions) also runs the destructor of its left-hand operand, if it's initialized. If a variable has been partially initialized, only its initialized fields are dropped.\n\nThe destructor of a type `T` consists of:\n\n1.  If `T: Drop`, calling [`<T as std::ops::Drop>::drop`](about:blank/std/ops/trait.Drop.html#tymethod.drop)\n2.  Recursively running the destructor of all of its fields.\n    -   The fields of a [struct](types/struct.html) are dropped in declaration order.\n    -   The fields of the active [enum variant](types/enum.html) are dropped in declaration order.\n    -   The fields of a [tuple](types/tuple.html) are dropped in order.\n    -   The elements of an [array](types/array.html) or owned [slice](types/slice.html) are dropped from the first element to the last.\n    -   The variables that a [closure](types/closure.html) captures by move are dropped in an unspecified order.\n    -   [Trait objects](types/trait-object.html) run the destructor of the underlying type.\n    -   Other types don't result in any further drops.\n\nIf a destructor must be run manually, such as when implementing your own smart pointer, [`std::ptr::drop_in_place`](../std/ptr/fn.drop_in_place.html) can be used.\n\nSome examples:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct PrintOnDrop(&'static str);\n\nimpl Drop for PrintOnDrop {\n    fn drop(&mut self) {\n        println!(\"{}\", self.0);\n    }\n}\n\nlet mut overwritten = PrintOnDrop(\"drops when overwritten\");\noverwritten = PrintOnDrop(\"drops when scope ends\");\n\nlet tuple = (PrintOnDrop(\"Tuple first\"), PrintOnDrop(\"Tuple second\"));\n\nlet moved;\n// No destructor run on assignment.\nmoved = PrintOnDrop(\"Drops when moved\");\n// Drops now, but is then uninitialized.\nmoved;\n\n// Uninitialized does not drop.\nlet uninitialized: PrintOnDrop;\n\n// After a partial move, only the remaining fields are dropped.\nlet mut partial_move = (PrintOnDrop(\"first\"), PrintOnDrop(\"forgotten\"));\n// Perform a partial move, leaving only `partial_move.0` initialized.\ncore::mem::forget(partial_move.1);\n// When partial_move's scope ends, only the first field is dropped.\n}\n```\n\n## [Drop scopes](#drop-scopes)\n\nEach variable or temporary is associated to a _drop scope_. When control flow leaves a drop scope all variables associated to that scope are dropped in reverse order of declaration (for variables) or creation (for temporaries).\n\nDrop scopes are determined after replacing [`for`](about:blank/expressions/loop-expr.html#iterator-loops), [`if let`](about:blank/expressions/if-expr.html#if-let-expressions), and [`while let`](about:blank/expressions/loop-expr.html#predicate-pattern-loops) expressions with the equivalent expressions using [`match`](expressions/match-expr.html). Overloaded operators are not distinguished from built-in operators and [binding modes](about:blank/patterns.html#binding-modes) are not considered.\n\nGiven a function, or closure, there are drop scopes for:\n\n-   The entire function\n-   Each [statement](statements.html)\n-   Each [expression](expressions.html)\n-   Each block, including the function body\n    -   In the case of a [block expression](expressions/block-expr.html), the scope for the block and the expression are the same scope.\n-   Each arm of a `match` expression\n\nDrop scopes are nested within one another as follows. When multiple scopes are left at once, such as when returning from a function, variables are dropped from the inside outwards.\n\n-   The entire function scope is the outer most scope.\n-   The function body block is contained within the scope of the entire function.\n-   The parent of the expression in an expression statement is the scope of the statement.\n-   The parent of the initializer of a [`let` statement](about:blank/statements.html#let-statements) is the `let` statement's scope.\n-   The parent of a statement scope is the scope of the block that contains the statement.\n-   The parent of the expression for a `match` guard is the scope of the arm that the guard is for.\n-   The parent of the expression after the `=>` in a `match` expression is the scope of the arm that it's in.\n-   The parent of the arm scope is the scope of the `match` expression that it belongs to.\n-   The parent of all other scopes is the scope of the immediately enclosing expression.\n\n### [Scopes of function parameters](#scopes-of-function-parameters)\n\nAll function parameters are in the scope of the entire function body, so are dropped last when evaluating the function. Each actual function parameter is dropped after any bindings introduced in that parameter's pattern.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct PrintOnDrop(&'static str);\nimpl Drop for PrintOnDrop {\n    fn drop(&mut self) {\n        println!(\"drop({})\", self.0);\n    }\n}\n// Drops `y`, then the second parameter, then `x`, then the first parameter\nfn patterns_in_parameters(\n    (x, _): (PrintOnDrop, PrintOnDrop),\n    (_, y): (PrintOnDrop, PrintOnDrop),\n) {}\n\n// drop order is 3 2 0 1\npatterns_in_parameters(\n    (PrintOnDrop(\"0\"), PrintOnDrop(\"1\")),\n    (PrintOnDrop(\"2\"), PrintOnDrop(\"3\")),\n);\n}\n```\n\n### [Scopes of local variables](#scopes-of-local-variables)\n\nLocal variables declared in a `let` statement are associated to the scope of the block that contains the `let` statement. Local variables declared in a `match` expression are associated to the arm scope of the `match` arm that they are declared in.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct PrintOnDrop(&'static str);\nimpl Drop for PrintOnDrop {\n    fn drop(&mut self) {\n        println!(\"drop({})\", self.0);\n    }\n}\nlet declared_first = PrintOnDrop(\"Dropped last in outer scope\");\n{\n    let declared_in_block = PrintOnDrop(\"Dropped in inner scope\");\n}\nlet declared_last = PrintOnDrop(\"Dropped first in outer scope\");\n}\n```\n\nIf multiple patterns are used in the same arm for a `match` expression, then an unspecified pattern will be used to determine the drop order.\n\n### [Temporary scopes](#temporary-scopes)\n\nThe _temporary scope_ of an expression is the scope that is used for the temporary variable that holds the result of that expression when used in a [place context](about:blank/expressions.html#place-expressions-and-value-expressions), unless it is [promoted](about:blank/destructors.html#constant-promotion).\n\nApart from lifetime extension, the temporary scope of an expression is the smallest scope that contains the expression and is one of the following:\n\n-   The entire function.\n-   A statement.\n-   The body of an [`if`](about:blank/expressions/if-expr.html#if-expressions), [`while`](about:blank/expressions/loop-expr.html#predicate-loops) or [`loop`](about:blank/expressions/loop-expr.html#infinite-loops) expression.\n-   The `else` block of an `if` expression.\n-   The condition expression of an `if` or `while` expression, or a `match` guard.\n-   The body expression for a match arm.\n-   The second operand of a [lazy boolean expression](about:blank/expressions/operator-expr.html#lazy-boolean-operators).\n\n> **Notes**:\n> \n> Temporaries that are created in the final expression of a function body are dropped _after_ any named variables bound in the function body. Their drop scope is the entire function, as there is no smaller enclosing temporary scope.\n> \n> The [scrutinee](about:blank/glossary.html#scrutinee) of a `match` expression is not a temporary scope, so temporaries in the scrutinee can be dropped after the `match` expression. For example, the temporary for `1` in `match 1 { ref mut z => z };` lives until the end of the statement.\n\nSome examples:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct PrintOnDrop(&'static str);\nimpl Drop for PrintOnDrop {\n    fn drop(&mut self) {\n        println!(\"drop({})\", self.0);\n    }\n}\nlet local_var = PrintOnDrop(\"local var\");\n\n// Dropped once the condition has been evaluated\nif PrintOnDrop(\"If condition\").0 == \"If condition\" {\n    // Dropped at the end of the block\n    PrintOnDrop(\"If body\").0\n} else {\n    unreachable!()\n};\n\n// Dropped at the end of the statement\n(PrintOnDrop(\"first operand\").0 == \"\"\n// Dropped at the )\n|| PrintOnDrop(\"second operand\").0 == \"\")\n// Dropped at the end of the expression\n|| PrintOnDrop(\"third operand\").0 == \"\";\n\n// Dropped at the end of the function, after local variables.\n// Changing this to a statement containing a return expression would make the\n// temporary be dropped before the local variables. Binding to a variable\n// which is then returned would also make the temporary be dropped first.\nmatch PrintOnDrop(\"Matched value in final expression\") {\n    // Dropped once the condition has been evaluated\n    _ if PrintOnDrop(\"guard condition\").0 == \"\" => (),\n    _ => (),\n}\n}\n```\n\n### [Operands](#operands)\n\nTemporaries are also created to hold the result of operands to an expression while the other operands are evaluated. The temporaries are associated to the scope of the expression with that operand. Since the temporaries are moved from once the expression is evaluated, dropping them has no effect unless one of the operands to an expression breaks out of the expression, returns, or panics.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct PrintOnDrop(&'static str);\nimpl Drop for PrintOnDrop {\n    fn drop(&mut self) {\n        println!(\"drop({})\", self.0);\n    }\n}\nloop {\n    // Tuple expression doesn't finish evaluating so operands drop in reverse order\n    (\n        PrintOnDrop(\"Outer tuple first\"),\n        PrintOnDrop(\"Outer tuple second\"),\n        (\n            PrintOnDrop(\"Inner tuple first\"),\n            PrintOnDrop(\"Inner tuple second\"),\n            break,\n        ),\n        PrintOnDrop(\"Never created\"),\n    );\n}\n}\n```\n\n### [Constant promotion](#constant-promotion)\n\nPromotion of a value expression to a `'static` slot occurs when the expression could be written in a constant and borrowed, and that borrow could be dereferenced where the expression was originally written, without changing the runtime behavior. That is, the promoted expression can be evaluated at compile-time and the resulting value does not contain [interior mutability](interior-mutability.html) or [destructors](destructors.html) (these properties are determined based on the value where possible, e.g. `&None` always has the type `&'static Option<_>`, as it contains nothing disallowed).\n\n### [Temporary lifetime extension](#temporary-lifetime-extension)\n\n> **Note**: The exact rules for temporary lifetime extension are subject to change. This is describing the current behavior only.\n\nThe temporary scopes for expressions in `let` statements are sometimes _extended_ to the scope of the block containing the `let` statement. This is done when the usual temporary scope would be too small, based on certain syntactic rules. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = &mut 0;\n// Usually a temporary would be dropped by now, but the temporary for `0` lives\n// to the end of the block.\nprintln!(\"{}\", x);\n}\n```\n\nIf a [borrow](about:blank/expressions/operator-expr.html#borrow-operators), [dereference](about:blank/expressions/operator-expr.html#the-dereference-operator), [field](expressions/field-expr.html), or [tuple indexing expression](about:blank/expressions/tuple-expr.html#tuple-indexing-expressions) has an extended temporary scope then so does its operand. If an [indexing expression](about:blank/expressions/array-expr.html#array-and-slice-indexing-expressions) has an extended temporary scope then the indexed expression also has an extended temporary scope.\n\n#### [Extending based on patterns](#extending-based-on-patterns)\n\nAn _extending pattern_ is either\n\n-   An [identifier pattern](about:blank/patterns.html#identifier-patterns) that binds by reference or mutable reference.\n-   A [struct](about:blank/patterns.html#struct-patterns), [tuple](about:blank/patterns.html#tuple-patterns), [tuple struct](about:blank/patterns.html#tuple-struct-patterns), or [slice](about:blank/patterns.html#slice-patterns) pattern where at least one of the direct subpatterns is an extending pattern.\n\nSo `ref x`, `V(ref x)` and `[ref x, y]` are all extending patterns, but `x`, `&ref x` and `&(ref x,)` are not.\n\nIf the pattern in a `let` statement is an extending pattern then the temporary scope of the initializer expression is extended.\n\n#### [Extending based on expressions](#extending-based-on-expressions)\n\nFor a let statement with an initializer, an _extending expression_ is an expression which is one of the following:\n\n-   The initializer expression.\n-   The operand of an extending [borrow expression](about:blank/expressions/operator-expr.html#borrow-operators).\n-   The operand(s) of an extending [array](about:blank/expressions/array-expr.html#array-expressions), [cast](about:blank/expressions/operator-expr.html#type-cast-expressions), [braced struct](expressions/struct-expr.html), or [tuple](about:blank/expressions/tuple-expr.html#tuple-expressions) expression.\n-   The final expression of any extending [block expression](expressions/block-expr.html).\n\nSo the borrow expressions in `&mut 0`, `(&1, &mut 2)`, and `Some { 0: &mut 3 }` are all extending expressions. The borrows in `&0 + &1` and `Some(&mut 0)` are not: the latter is syntactically a function call expression.\n\nThe operand of any extending borrow expression has its temporary scope extended.\n\n#### [Examples](#examples-4)\n\nHere are some examples where expressions have extended temporary scopes:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn temp() {}\ntrait Use { fn use_temp(&self) -> &Self { self } }\nimpl Use for () {}\n// The temporary that stores the result of `temp()` lives in the same scope\n// as x in these cases.\nlet x = &temp();\nlet x = &temp() as &dyn Send;\nlet x = (&*&temp(),);\nlet x = { [Some { 0: &temp(), }] };\nlet ref x = temp();\nlet ref x = *&temp();\nx;\n}\n```\n\nHere are some examples where expressions don't have extended temporary scopes:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn temp() {}\ntrait Use { fn use_temp(&self) -> &Self { self } }\nimpl Use for () {}\n// The temporary that stores the result of `temp()` only lives until the\n// end of the let statement in these cases.\n\nlet x = Some(&temp());         // ERROR\nlet x = (&temp()).use_temp();  // ERROR\nx;\n}\n```\n\n## [Not running destructors](#not-running-destructors)\n\n[`std::mem::forget`](../std/mem/fn.forget.html) can be used to prevent the destructor of a variable from being run, and [`std::mem::ManuallyDrop`](../std/mem/struct.ManuallyDrop.html) provides a wrapper to prevent a variable or field from being dropped automatically.\n\n> Note: Preventing a destructor from being run via [`std::mem::forget`](../std/mem/fn.forget.html) or other means is safe even if it has a type that isn't `'static`. Besides the places where destructors are guaranteed to run as defined by this document, types may _not_ safely rely on a destructor being run for soundness.\n\n## [Lifetime elision](#lifetime-elision)\n\nRust has rules that allow lifetimes to be elided in various places where the compiler can infer a sensible default choice.\n\n## [Lifetime elision in functions](#lifetime-elision-in-functions)\n\nIn order to make common patterns more ergonomic, lifetime arguments can be _elided_ in [function item](types/function-item.html), [function pointer](types/function-pointer.html), and [closure trait](types/closure.html) signatures. The following rules are used to infer lifetime parameters for elided lifetimes. It is an error to elide lifetime parameters that cannot be inferred. The placeholder lifetime, `'_`, can also be used to have a lifetime inferred in the same way. For lifetimes in paths, using `'_` is preferred. Trait object lifetimes follow different rules discussed [below](about:blank/lifetime-elision.html#default-trait-object-lifetimes).\n\n-   Each elided lifetime in the parameters becomes a distinct lifetime parameter.\n-   If there is exactly one lifetime used in the parameters (elided or not), that lifetime is assigned to _all_ elided output lifetimes.\n\nIn method signatures there is another rule\n\n-   If the receiver has type `&Self` or `&mut Self`, then the lifetime of that reference to `Self` is assigned to all elided output lifetime parameters.\n\nExamples:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait T {}\ntrait ToCStr {}\nstruct Thing<'a> {f: &'a i32}\nstruct Command;\n\ntrait Example {\nfn print1(s: &str);                                   // elided\nfn print2(s: &'_ str);                                // also elided\nfn print3<'a>(s: &'a str);                            // expanded\n\nfn debug1(lvl: usize, s: &str);                       // elided\nfn debug2<'a>(lvl: usize, s: &'a str);                // expanded\n\nfn substr1(s: &str, until: usize) -> &str;            // elided\nfn substr2<'a>(s: &'a str, until: usize) -> &'a str;  // expanded\n\nfn get_mut1(&mut self) -> &mut dyn T;                 // elided\nfn get_mut2<'a>(&'a mut self) -> &'a mut dyn T;       // expanded\n\nfn args1<T: ToCStr>(&mut self, args: &[T]) -> &mut Command;                  // elided\nfn args2<'a, 'b, T: ToCStr>(&'a mut self, args: &'b [T]) -> &'a mut Command; // expanded\n\nfn new1(buf: &mut [u8]) -> Thing<'_>;                 // elided - preferred\nfn new2(buf: &mut [u8]) -> Thing;                     // elided\nfn new3<'a>(buf: &'a mut [u8]) -> Thing<'a>;          // expanded\n}\n\ntype FunPtr1 = fn(&str) -> &str;                      // elided\ntype FunPtr2 = for<'a> fn(&'a str) -> &'a str;        // expanded\n\ntype FunTrait1 = dyn Fn(&str) -> &str;                // elided\ntype FunTrait2 = dyn for<'a> Fn(&'a str) -> &'a str;  // expanded\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\n// The following examples show situations where it is not allowed to elide the\n// lifetime parameter.\n\ntrait Example {\n// Cannot infer, because there are no parameters to infer from.\nfn get_str() -> &str;                                 // ILLEGAL\n\n// Cannot infer, ambiguous if it is borrowed from the first or second parameter.\nfn frob(s: &str, t: &str) -> &str;                    // ILLEGAL\n}\n}\n```\n\n## [Default trait object lifetimes](#default-trait-object-lifetimes)\n\nThe assumed lifetime of references held by a [trait object](types/trait-object.html) is called its _default object lifetime bound_. These were defined in [RFC 599](https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md) and amended in [RFC 1156](https://github.com/rust-lang/rfcs/blob/master/text/1156-adjust-default-object-bounds.md).\n\nThese default object lifetime bounds are used instead of the lifetime parameter elision rules defined above when the lifetime bound is omitted entirely. If `'_` is used as the lifetime bound then the bound follows the usual elision rules.\n\nIf the trait object is used as a type argument of a generic type then the containing type is first used to try to infer a bound.\n\n-   If there is a unique bound from the containing type then that is the default\n-   If there is more than one bound from the containing type then an explicit bound must be specified\n\nIf neither of those rules apply, then the bounds on the trait are used:\n\n-   If the trait is defined with a single lifetime _bound_ then that bound is used.\n-   If `'static` is used for any lifetime bound then `'static` is used.\n-   If the trait has no lifetime bounds, then the lifetime is inferred in expressions and is `'static` outside of expressions.\n\n```rust\n#![allow(unused)]\nfn main() {\n// For the following trait...\ntrait Foo { }\n\n// These two are the same because Box<T> has no lifetime bound on T\ntype T1 = Box<dyn Foo>;\ntype T2 = Box<dyn Foo + 'static>;\n\n// ...and so are these:\nimpl dyn Foo {}\nimpl dyn Foo + 'static {}\n\n// ...so are these, because &'a T requires T: 'a\ntype T3<'a> = &'a dyn Foo;\ntype T4<'a> = &'a (dyn Foo + 'a);\n\n// std::cell::Ref<'a, T> also requires T: 'a, so these are the same\ntype T5<'a> = std::cell::Ref<'a, dyn Foo>;\ntype T6<'a> = std::cell::Ref<'a, dyn Foo + 'a>;\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\n// This is an example of an error.\ntrait Foo { }\nstruct TwoBounds<'a, 'b, T: ?Sized + 'a + 'b> {\n    f1: &'a i32,\n    f2: &'b i32,\n    f3: T,\n}\ntype T7<'a, 'b> = TwoBounds<'a, 'b, dyn Foo>;\n//                                  ^^^^^^^\n// Error: the lifetime bound for this object type cannot be deduced from context\n}\n```\n\nNote that the innermost object sets the bound, so `&'a Box<dyn Foo>` is still `&'a Box<dyn Foo + 'static>`.\n\n```rust\n#![allow(unused)]\nfn main() {\n// For the following trait...\ntrait Bar<'a>: 'a { }\n\n// ...these two are the same:\ntype T1<'a> = Box<dyn Bar<'a>>;\ntype T2<'a> = Box<dyn Bar<'a> + 'a>;\n\n// ...and so are these:\nimpl<'a> dyn Bar<'a> {}\nimpl<'a> dyn Bar<'a> + 'a {}\n}\n```\n\n## [`'static` lifetime elision](#static-lifetime-elision)\n\nBoth [constant](items/constant-items.html) and [static](items/static-items.html) declarations of reference types have _implicit_ `'static` lifetimes unless an explicit lifetime is specified. As such, the constant declarations involving `'static` above may be written without the lifetimes.\n\n```rust\n#![allow(unused)]\nfn main() {\n// STRING: &'static str\nconst STRING: &str = \"bitstring\";\n\nstruct BitsNStrings<'a> {\n    mybits: [u32; 2],\n    mystring: &'a str,\n}\n\n// BITS_N_STRINGS: BitsNStrings<'static>\nconst BITS_N_STRINGS: BitsNStrings<'_> = BitsNStrings {\n    mybits: [1, 2],\n    mystring: STRING,\n};\n}\n```\n\nNote that if the `static` or `const` items include function or closure references, which themselves include references, the compiler will first try the standard elision rules. If it is unable to resolve the lifetimes by its usual rules, then it will error. By way of example:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Foo;\nstruct Bar;\nstruct Baz;\nfn somefunc(a: &Foo, b: &Bar, c: &Baz) -> usize {42}\n// Resolved as `for<'a> fn(&'a str) -> &'a str`.\nconst RESOLVED_SINGLE: fn(&str) -> &str = |x| x;\n\n// Resolved as `for<'a, 'b, 'c> Fn(&'a Foo, &'b Bar, &'c Baz) -> usize`.\nconst RESOLVED_MULTIPLE: &dyn Fn(&Foo, &Bar, &Baz) -> usize = &somefunc;\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Foo;\nstruct Bar;\nstruct Baz;\nfn somefunc<'a,'b>(a: &'a Foo, b: &'b Bar) -> &'a Baz {unimplemented!()}\n// There is insufficient information to bound the return reference lifetime\n// relative to the argument lifetimes, so this is an error.\nconst RESOLVED_STATIC: &dyn Fn(&Foo, &Bar) -> &Baz = &somefunc;\n//                                            ^\n// this function's return type contains a borrowed value, but the signature\n// does not say whether it is borrowed from argument 1 or argument 2\n}\n```\n\n## [Special types and traits](#special-types-and-traits)\n\nCertain types and traits that exist in [the standard library](../std/index.html) are known to the Rust compiler. This chapter documents the special features of these types and traits.\n\n## [`Box<T>`](#boxt)\n\n[`Box<T>`](../std/boxed/struct.Box.html) has a few special features that Rust doesn't currently allow for user defined types.\n\n-   The [dereference operator](about:blank/expressions/operator-expr.html#the-dereference-operator) for `Box<T>` produces a place which can be moved from. This means that the `*` operator and the destructor of `Box<T>` are built-in to the language.\n-   [Methods](about:blank/items/associated-items.html#associated-functions-and-methods) can take `Box<Self>` as a receiver.\n-   A trait may be implemented for `Box<T>` in the same crate as `T`, which the [orphan rules](about:blank/items/implementations.html#trait-implementation-coherence) prevent for other generic types.\n\n## [`Rc<T>`](#rct)\n\n[Methods](about:blank/items/associated-items.html#associated-functions-and-methods) can take [`Rc<Self>`](../std/rc/struct.Rc.html) as a receiver.\n\n## [`Arc<T>`](#arct)\n\n[Methods](about:blank/items/associated-items.html#associated-functions-and-methods) can take [`Arc<Self>`](../std/sync/struct.Arc.html) as a receiver.\n\n## [`Pin<P>`](#pinp)\n\n[Methods](about:blank/items/associated-items.html#associated-functions-and-methods) can take [`Pin<P>`](../std/pin/struct.Pin.html) as a receiver.\n\n## [`UnsafeCell<T>`](#unsafecellt)\n\n[`std::cell::UnsafeCell<T>`](../std/cell/struct.UnsafeCell.html) is used for [interior mutability](interior-mutability.html). It ensures that the compiler doesn't perform optimisations that are incorrect for such types. It also ensures that [`static` items](items/static-items.html) which have a type with interior mutability aren't placed in memory marked as read only.\n\n## [`PhantomData<T>`](#phantomdatat)\n\n[`std::marker::PhantomData<T>`](../std/marker/struct.PhantomData.html) is a zero-sized, minimum alignment, type that is considered to own a `T` for the purposes of [variance](about:blank/subtyping.html#variance), [drop check](../nomicon/dropck.html), and [auto traits](about:blank/special-types-and-traits.html#auto-traits).\n\n## [Operator Traits](#operator-traits)\n\nThe traits in [`std::ops`](../std/ops/index.html) and [`std::cmp`](../std/cmp/index.html) are used to overload [operators](expressions/operator-expr.html), [indexing expressions](about:blank/expressions/array-expr.html#array-and-slice-indexing-expressions), and [call expressions](expressions/call-expr.html).\n\n## [`Deref` and `DerefMut`](#deref-and-derefmut)\n\nAs well as overloading the unary `*` operator, [`Deref`](../std/ops/trait.Deref.html) and [`DerefMut`](../std/ops/trait.DerefMut.html) are also used in [method resolution](expressions/method-call-expr.html) and [deref coercions](about:blank/type-coercions.html#coercion-types).\n\n## [`Drop`](#drop)\n\nThe [`Drop`](../std/ops/trait.Drop.html) trait provides a [destructor](destructors.html), to be run whenever a value of this type is to be destroyed.\n\n## [`Copy`](#copy)\n\nThe [`Copy`](../std/marker/trait.Copy.html) trait changes the semantics of a type implementing it. Values whose type implements `Copy` are copied rather than moved upon assignment.\n\n`Copy` can only be implemented for types which do not implement `Drop`, and whose fields are all `Copy`. For enums, this means all fields of all variants have to be `Copy`. For unions, this means all variants have to be `Copy`.\n\n`Copy` is implemented by the compiler for\n\n-   [Tuples](types/tuple.html) of `Copy` types\n-   [Function pointers](types/function-pointer.html)\n-   [Function items](types/function-item.html)\n-   [Closures](types/closure.html) that capture no values or that only capture values of `Copy` types\n\n## [`Clone`](#clone)\n\nThe [`Clone`](../std/clone/trait.Clone.html) trait is a supertrait of `Copy`, so it also needs compiler generated implementations. It is implemented by the compiler for the following types:\n\n-   Types with a built-in `Copy` implementation (see above)\n-   [Tuples](types/tuple.html) of `Clone` types\n-   [Closures](types/closure.html) that only capture values of `Clone` types or capture no values from the environment\n\n## [`Send`](#send)\n\nThe [`Send`](../std/marker/trait.Send.html) trait indicates that a value of this type is safe to send from one thread to another.\n\n## [`Sync`](#sync)\n\nThe [`Sync`](../std/marker/trait.Sync.html) trait indicates that a value of this type is safe to share between multiple threads. This trait must be implemented for all types used in immutable [`static` items](items/static-items.html).\n\n## [`Termination`](#termination)\n\nThe [`Termination`](../std/process/trait.Termination.html) trait indicates the acceptable return types for the [main function](about:blank/crates-and-source-files.html#main-functions) and [test functions](about:blank/attributes/testing.html#the-test-attribute).\n\n## [Auto traits](#auto-traits)\n\nThe [`Send`](../std/marker/trait.Send.html), [`Sync`](../std/marker/trait.Sync.html), [`Unpin`](../std/marker/trait.Unpin.html), [`UnwindSafe`](../std/panic/trait.UnwindSafe.html), and [`RefUnwindSafe`](../std/panic/trait.RefUnwindSafe.html) traits are _auto traits_. Auto traits have special properties.\n\nIf no explicit implementation or negative implementation is written out for an auto trait for a given type, then the compiler implements it automatically according to the following rules:\n\n-   `&T`, `&mut T`, `*const T`, `*mut T`, `[T; n]`, and `[T]` implement the trait if `T` does.\n-   Function item types and function pointers automatically implement the trait.\n-   Structs, enums, unions, and tuples implement the trait if all of their fields do.\n-   Closures implement the trait if the types of all of their captures do. A closure that captures a `T` by shared reference and a `U` by value implements any auto traits that both `&T` and `U` do.\n\nFor generic types (counting the built-in types above as generic over `T`), if a generic implementation is available, then the compiler does not automatically implement it for types that could use the implementation except that they do not meet the requisite trait bounds. For instance, the standard library implements `Send` for all `&T` where `T` is `Sync`; this means that the compiler will not implement `Send` for `&T` if `T` is `Send` but not `Sync`.\n\nAuto traits can also have negative implementations, shown as `impl !AutoTrait for T` in the standard library documentation, that override the automatic implementations. For example `*mut T` has a negative implementation of `Send`, and so `*mut T` is not `Send`, even if `T` is. There is currently no stable way to specify additional negative implementations; they exist only in the standard library.\n\nAuto traits may be added as an additional bound to any [trait object](types/trait-object.html), even though normally only one trait is allowed. For instance, `Box<dyn Debug + Send + UnwindSafe>` is a valid type.\n\n## [`Sized`](#sized-1)\n\nThe [`Sized`](../std/marker/trait.Sized.html) trait indicates that the size of this type is known at compile-time; that is, it's not a [dynamically sized type](dynamically-sized-types.html). [Type parameters](types/parameters.html) (except `Self` in traits) are `Sized` by default, as are [associated types](about:blank/items/associated-items.html#associated-types). `Sized` is always implemented automatically by the compiler, not by [implementation items](items/implementations.html). These implicit `Sized` bounds may be relaxed by using the special `?Sized` bound.\n\n## [Names](#names)\n\nAn _entity_ is a language construct that can be referred to in some way within the source program, usually via a [path](paths.html). Entities include [types](types.html), [items](items.html), [generic parameters](items/generics.html), [variable bindings](patterns.html), [loop labels](about:blank/expressions/loop-expr.html#loop-labels), [lifetimes](about:blank/tokens.html#lifetimes-and-loop-labels), [fields](expressions/field-expr.html), [attributes](attributes.html), and [lints](about:blank/attributes/diagnostics.html#lint-check-attributes).\n\nA _declaration_ is a syntactical construct that can introduce a _name_ to refer to an entity. Entity names are valid within a [_scope_](names/scopes.html) — a region of source text where that name may be referenced.\n\nSome entities are [explicitly declared](about:blank/names.html#explicitly-declared-entities) in the source code, and some are [implicitly declared](about:blank/names.html#implicitly-declared-entities) as part of the language or compiler extensions.\n\n[_Paths_](paths.html) are used to refer to an entity, possibly in another module or type. Lifetimes and loop labels use a [dedicated syntax](about:blank/tokens.html#lifetimes-and-loop-labels) using a leading quote.\n\nNames are segregated into different [_namespaces_](names/namespaces.html), allowing entities in different namespaces to share the same name without conflict.\n\n[_Name resolution_](names/name-resolution.html) is the compile-time process of tying paths, identifiers, and labels to entity declarations.\n\nAccess to certain names may be restricted based on their [_visibility_](visibility-and-privacy.html).\n\n## [Explicitly declared entities](#explicitly-declared-entities)\n\nEntities that explicitly introduce a name in the source code are:\n\n-   [Items](items.html):\n    -   [Module declarations](items/modules.html)\n    -   [External crate declarations](items/extern-crates.html)\n    -   [Use declarations](items/use-declarations.html)\n    -   [Function declarations](items/functions.html) and [function parameters](about:blank/items/functions.html#function-parameters)\n    -   [Type aliases](items/type-aliases.html)\n    -   [struct](items/structs.html), [union](items/unions.html), [enum](items/enumerations.html), enum variant declarations, and their named fields\n    -   [Constant item declarations](items/constant-items.html)\n    -   [Static item declarations](items/static-items.html)\n    -   [Trait item declarations](items/traits.html) and their [associated items](items/associated-items.html)\n    -   [External block items](items/external-blocks.html)\n    -   [`macro_rules` declarations](macros-by-example.html) and [matcher metavariables](about:blank/macros-by-example.html#metavariables)\n    -   [Implementation](items/implementations.html) associated items\n-   [Expressions](expressions.html):\n    -   [Closure](expressions/closure-expr.html) parameters\n    -   [`while let`](about:blank/expressions/loop-expr.html#predicate-pattern-loops) pattern bindings\n    -   [`for`](about:blank/expressions/loop-expr.html#iterator-loops) pattern bindings\n    -   [`if let`](about:blank/expressions/if-expr.html#if-let-expressions) pattern bindings\n    -   [`match`](expressions/match-expr.html) pattern bindings\n    -   [Loop labels](about:blank/expressions/loop-expr.html#loop-labels)\n-   [Generic parameters](items/generics.html)\n-   [Higher ranked trait bounds](about:blank/trait-bounds.html#higher-ranked-trait-bounds)\n-   [`let` statement](about:blank/statements.html#let-statements) pattern bindings\n-   The [`macro_use` attribute](about:blank/macros-by-example.html#the-macro_use-attribute) can introduce macro names from another crate\n-   The [`macro_export` attribute](about:blank/macros-by-example.html#path-based-scope) can introduce an alias for the macro into the crate root\n\nAdditionally, [macro invocations](about:blank/macros.html#macro-invocation) and [attributes](attributes.html) can introduce names by expanding to one of the above items.\n\n## [Implicitly declared entities](#implicitly-declared-entities)\n\nThe following entities are implicitly defined by the language, or are introduced by compiler options and extensions:\n\n-   [Language prelude](about:blank/names/preludes.html#language-prelude):\n    -   [Boolean type](types/boolean.html) — `bool`\n    -   [Textual types](types/textual.html) — `char` and `str`\n    -   [Integer types](about:blank/types/numeric.html#integer-types) — `i8`, `i16`, `i32`, `i64`, `i128`, `u8`, `u16`, `u32`, `u64`, `u128`\n    -   [Machine-dependent integer types](about:blank/types/numeric.html#machine-dependent-integer-types) — `usize` and `isize`\n    -   [floating-point types](about:blank/types/numeric.html#floating-point-types) — `f32` and `f64`\n-   [Built-in attributes](about:blank/attributes.html#built-in-attributes-index)\n-   [Standard library prelude](about:blank/names/preludes.html#standard-library-prelude) items, attributes, and macros\n-   [Standard library](about:blank/names/preludes.html#extern-prelude) crates in the root module\n-   [External crates](about:blank/names/preludes.html#extern-prelude) linked by the compiler\n-   [Tool attributes](about:blank/attributes.html#tool-attributes)\n-   [Lints](about:blank/attributes/diagnostics.html#lint-check-attributes) and [tool lint attributes](about:blank/attributes/diagnostics.html#tool-lint-attributes)\n-   [Derive helper attributes](about:blank/procedural-macros.html#derive-macro-helper-attributes) are valid within an item without being explicitly imported\n-   The [`'static`](about:blank/keywords.html#weak-keywords) lifetime\n\nAdditionally, the crate root module does not have a name, but can be referred to with certain [path qualifiers](about:blank/paths.html#path-qualifiers) or aliases.\n\n## [Namespaces](#namespaces)\n\nA _namespace_ is a logical grouping of declared [names](names/../names.html). Names are segregated into separate namespaces based on the kind of entity the name refers to. Namespaces allow the occurrence of a name in one namespace to not conflict with the same name in another namespace.\n\nWithin a namespace, names are organized in a hierarchy, where each level of the hierarchy has its own collection of named entities.\n\nThere are several different namespaces that each contain different kinds of entities. The usage of a name will look for the declaration of that name in different namespaces, based on the context, as described in the [name resolution](names/name-resolution.html) chapter.\n\nThe following is a list of namespaces, with their corresponding entities:\n\n-   Type Namespace\n    -   [Module declarations](names/../items/modules.html)\n    -   [External crate declarations](names/../items/extern-crates.html)\n    -   [External crate prelude](about:blank/names/preludes.html#extern-prelude) items\n    -   [Struct](names/../items/structs.html), [union](names/../items/unions.html), [enum](names/../items/enumerations.html), enum variant declarations\n    -   [Trait item declarations](names/../items/traits.html)\n    -   [Type aliases](names/../items/type-aliases.html)\n    -   [Associated type declarations](about:blank/items/associated-items.html#associated-types)\n    -   Built-in types: [boolean](names/../types/boolean.html), [numeric](names/../types/numeric.html), and [textual](names/../types/textual.html)\n    -   [Generic type parameters](names/../items/generics.html)\n    -   [`Self` type](about:blank/paths.html#self-1)\n    -   [Tool attribute modules](about:blank/attributes.html#tool-attributes)\n-   Value Namespace\n    -   [Function declarations](names/../items/functions.html)\n    -   [Constant item declarations](names/../items/constant-items.html)\n    -   [Static item declarations](names/../items/static-items.html)\n    -   [Struct constructors](names/../items/structs.html)\n    -   [Enum variant constructors](names/../items/enumerations.html)\n    -   [`Self` constructors](about:blank/paths.html#self-1)\n    -   [Generic const parameters](about:blank/items/generics.html#const-generics)\n    -   [Associated const declarations](about:blank/items/associated-items.html#associated-constants)\n    -   [Associated function declarations](about:blank/items/associated-items.html#associated-functions-and-methods)\n    -   Local bindings — [`let`](about:blank/statements.html#let-statements), [`if let`](about:blank/expressions/if-expr.html#if-let-expressions), [`while let`](about:blank/expressions/loop-expr.html#predicate-pattern-loops), [`for`](about:blank/expressions/loop-expr.html#iterator-loops), [`match`](names/../expressions/match-expr.html) arms, [function parameters](about:blank/items/functions.html#function-parameters), [closure parameters](names/../expressions/closure-expr.html)\n    -   Captured [closure](names/../expressions/closure-expr.html) variables\n-   Macro Namespace\n    -   [`macro_rules` declarations](names/../macros-by-example.html)\n    -   [Built-in attributes](about:blank/attributes.html#built-in-attributes-index)\n    -   [Tool attributes](about:blank/attributes.html#tool-attributes)\n    -   [Function-like procedural macros](about:blank/procedural-macros.html#function-like-procedural-macros)\n    -   [Derive macros](about:blank/procedural-macros.html#derive-macros)\n    -   [Derive macro helpers](about:blank/procedural-macros.html#derive-macro-helper-attributes)\n    -   [Attribute macros](about:blank/procedural-macros.html#attribute-macros)\n-   Lifetime Namespace\n    -   [Generic lifetime parameters](names/../items/generics.html)\n-   Label Namespace\n    -   [Loop labels](about:blank/expressions/loop-expr.html#loop-labels)\n    -   [Block labels](about:blank/expressions/loop-expr.html#labelled-block-expressions)\n\nAn example of how overlapping names in different namespaces can be used unambiguously:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Foo introduces a type in the type namespace and a constructor in the value\n// namespace.\nstruct Foo(u32);\n\n// The `Foo` macro is declared in the macro namespace.\nmacro_rules! Foo {\n    () => {};\n}\n\n// `Foo` in the `f` parameter type refers to `Foo` in the type namespace.\n// `'Foo` introduces a new lifetime in the lifetime namespace.\nfn example<'Foo>(f: Foo) {\n    // `Foo` refers to the `Foo` constructor in the value namespace.\n    let ctor = Foo;\n    // `Foo` refers to the `Foo` macro in the macro namespace.\n    Foo!{}\n    // `'Foo` introduces a label in the label namespace.\n    'Foo: loop {\n        // `'Foo` refers to the `'Foo` lifetime parameter, and `Foo`\n        // refers to the type namespace.\n        let x: &'Foo Foo;\n        // `'Foo` refers to the label.\n        break 'Foo;\n    }\n}\n}\n```\n\n## [Named entities without a namespace](#named-entities-without-a-namespace)\n\nThe following entities have explicit names, but the names are not a part of any specific namespace.\n\n### [Fields](#fields)\n\nEven though struct, enum, and union fields are named, the named fields do not live in an explicit namespace. They can only be accessed via a [field expression](names/../expressions/field-expr.html), which only inspects the field names of the specific type being accessed.\n\n### [Use declarations](#use-declarations-1)\n\nA [use declaration](names/../items/use-declarations.html) has named aliases that it imports into scope, but the `use` item itself does not belong to a specific namespace. Instead, it can introduce aliases into multiple namespaces, depending on the item kind being imported.\n\n## [Sub-namespaces](#sub-namespaces)\n\nThe macro namespace is split into two sub-namespaces: one for [bang-style macros](names/../macros.html) and one for [attributes](names/../attributes.html). When an attribute is resolved, any bang-style macros in scope will be ignored. And conversely resolving a bang-style macro will ignore attribute macros in scope. This prevents one style from shadowing another.\n\nFor example, the [`cfg` attribute](about:blank/conditional-compilation.html#the-cfg-attribute) and the [`cfg` macro](about:blank/conditional-compilation.html#the-cfg-macro) are two different entities with the same name in the macro namespace, but they can still be used in their respective context.\n\nIt is still an error for a [`use` import](names/../items/use-declarations.html) to shadow another macro, regardless of their sub-namespaces.\n\n## [Scopes](#scopes)\n\nA _scope_ is the region of source text where a named [entity](names/../names.html) may be referenced with that name. The following sections provide details on the scoping rules and behavior, which depend on the kind of entity and where it is declared. The process of how names are resolved to entities is described in the [name resolution](names/name-resolution.html) chapter. More information on \"drop scopes\" used for the purpose of running destructors may be found in the [destructors](names/../destructors.html) chapter.\n\n## [Item scopes](#item-scopes)\n\nThe name of an [item](names/../items.html) declared directly in a [module](names/../items/modules.html) has a scope that extends from the start of the module to the end of the module. These items are also members of the module and can be referred to with a [path](names/../paths.html) leading from their module.\n\nThe name of an item declared as a [statement](names/../statements.html) has a scope that extends from the start of the block the item statement is in until the end of the block.\n\nIt is an error to introduce an item with a duplicate name of another item in the same [namespace](names/namespaces.html) within the same module or block. [Asterisk glob imports](names/../items/use-declarations.html) have special behavior for dealing with duplicate names and shadowing, see the linked chapter for more details. Items in a module may shadow items in a [prelude](about:blank/names/scopes.html#prelude-scopes).\n\nItem names from outer modules are not in scope within a nested module. A [path](names/../paths.html) may be used to refer to an item in another module.\n\n### [Associated item scopes](#associated-item-scopes)\n\n[Associated items](names/../items/associated-items.html) are not scoped and can only be referred to by using a [path](names/../paths.html) leading from the type or trait they are associated with. [Methods](about:blank/items/associated-items.html#methods) can also be referred to via [call expressions](names/../expressions/call-expr.html).\n\nSimilar to items within a module or block, it is an error to introduce an item within a trait or implementation that is a duplicate of another item in the trait or impl in the same namespace.\n\n## [Pattern binding scopes](#pattern-binding-scopes)\n\nThe scope of a local variable [pattern](names/../patterns.html) binding depends on where it is used:\n\n-   [`let` statement](about:blank/statements.html#let-statements) bindings range from just after the `let` statement until the end of the block where it is declared.\n-   [Function parameter](about:blank/items/functions.html#function-parameters) bindings are within the body of the function.\n-   [Closure parameter](names/../expressions/closure-expr.html) bindings are within the closure body.\n-   [`for`](about:blank/expressions/loop-expr.html#iterator-loops) and [`while let`](about:blank/expressions/loop-expr.html#predicate-pattern-loops) bindings are within the loop body.\n-   [`if let`](about:blank/expressions/if-expr.html#if-let-expressions) bindings are within the consequent block.\n-   [`match` arms](names/../expressions/match-expr.html) bindings are within the [match guard](about:blank/expressions/match-expr.html#match-guards) and the match arm expression.\n\nLocal variable scopes do not extend into item declarations.\n\n### [Pattern binding shadowing](#pattern-binding-shadowing)\n\nPattern bindings are allowed to shadow any name in scope with the following exceptions which are an error:\n\n-   [Const generic parameters](about:blank/items/generics.html#const-generics)\n-   [Static items](names/../items/static-items.html)\n-   [Const items](names/../items/constant-items.html)\n-   Constructors for [structs](names/../items/structs.html) and [enums](names/../items/enumerations.html)\n\nThe following example illustrates how local bindings can shadow item declarations:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn shadow_example() {\n    // Since there are no local variables in scope yet, this resolves to the function.\n    foo(); // prints `function`\n    let foo = || println!(\"closure\");\n    fn foo() { println!(\"function\"); }\n    // This resolves to the local closure since it shadows the item.\n    foo(); // prints `closure`\n}\n}\n```\n\n## [Generic parameter scopes](#generic-parameter-scopes)\n\nGeneric parameters are declared in a [_GenericParams_](names/../items/generics.html) list. The scope of a generic parameter is within the item it is declared on.\n\nAll parameters are in scope within the generic parameter list regardless of the order they are declared. The following shows some examples where a parameter may be referenced before it is declared:\n\n```rust\n#![allow(unused)]\nfn main() {\n// The 'b bound is referenced before it is declared.\nfn params_scope<'a: 'b, 'b>() {}\n\ntrait SomeTrait<const Z: usize> {}\n// The const N is referenced in the trait bound before it is declared.\nfn f<T: SomeTrait<N>, const N: usize>() {}\n}\n```\n\nGeneric parameters are also in scope for type bounds and where clauses, for example:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait SomeTrait<'a, T> {}\n// The <'a, U> for `SomeTrait` refer to the 'a and U parameters of `bounds_scope`.\nfn bounds_scope<'a, T: SomeTrait<'a, U>, U>() {}\n\nfn where_scope<'a, T, U>()\n    where T: SomeTrait<'a, U>\n{}\n}\n```\n\nIt is an error for [items](names/../items.html) declared inside a function to refer to a generic parameter from their outer scope.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn example<T>() {\n    fn inner(x: T) {} // ERROR: can't use generic parameters from outer function\n}\n}\n```\n\n### [Generic parameter shadowing](#generic-parameter-shadowing)\n\nIt is an error to shadow a generic parameter with the exception that items declared within functions are allowed to shadow generic parameter names from the function.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn example<'a, T, const N: usize>() {\n    // Items within functions are allowed to shadow generic parameter in scope.\n    fn inner_lifetime<'a>() {} // OK\n    fn inner_type<T>() {} // OK\n    fn inner_const<const N: usize>() {} // OK\n}\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait SomeTrait<'a, T, const N: usize> {\n    fn example_lifetime<'a>() {} // ERROR: 'a is already in use\n    fn example_type<T>() {} // ERROR: T is already in use\n    fn example_const<const N: usize>() {} // ERROR: N is already in use\n    fn example_mixed<const T: usize>() {} // ERROR: T is already in use\n}\n}\n```\n\n### [Lifetime scopes](#lifetime-scopes)\n\nLifetime parameters are declared in a [_GenericParams_](names/../items/generics.html) list and [higher-ranked trait bounds](about:blank/trait-bounds.html#higher-ranked-trait-bounds).\n\nThe `'static` lifetime and [placeholder lifetime](names/../lifetime-elision.html) `'_` have a special meaning and cannot be declared as a parameter.\n\n#### [Lifetime generic parameter scopes](#lifetime-generic-parameter-scopes)\n\n[Constant](names/../items/constant-items.html) and [static](names/../items/static-items.html) items and [const contexts](about:blank/const_eval.html#const-context) only ever allow `'static` lifetime references, so no other lifetime may be in scope within them. [Associated consts](about:blank/items/associated-items.html#associated-constants) do allow referring to lifetimes declared in their trait or implementation.\n\n#### [Higher-ranked trait bound scopes](#higher-ranked-trait-bound-scopes)\n\nThe scope of a lifetime parameter declared as a [higher-ranked trait bound](about:blank/trait-bounds.html#higher-ranked-trait-bounds) depends on the scenario where it is used.\n\n-   As a [_TypeBoundWhereClauseItem_](names/../items/generics.html) the declared lifetimes are in scope in the type and the type bounds.\n-   As a [_TraitBound_](names/../trait-bounds.html) the declared lifetimes are in scope within the bound type path.\n-   As a [_BareFunctionType_](names/../types/function-pointer.html) the declared lifetimes are in scope within the function parameters and return type.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Trait<'a>{}\n\nfn where_clause<T>()\n    // 'a is in scope in both the type and the type bounds.\n    where for <'a> &'a T: Trait<'a>\n{}\n\nfn bound<T>()\n    // 'a is in scope within the bound.\n    where T: for <'a> Trait<'a>\n{}\n\nstruct Example<'a> {\n    field: &'a u32\n}\n\n// 'a is in scope in both the parameters and return type.\ntype FnExample = for<'a> fn(x: Example<'a>) -> Example<'a>;\n}\n```\n\n#### [Impl trait restrictions](#impl-trait-restrictions)\n\n[Impl trait](names/../types/impl-trait.html) types can only reference lifetimes declared on a function or implementation.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Trait1 {\n    type Item;\n}\ntrait Trait2<'a> {}\n\nstruct Example;\n\nimpl Trait1 for Example {\n    type Item = Element;\n}\n\nstruct Element;\nimpl<'a> Trait2<'a> for Element {}\n\n// The `impl Trait2` here is not allowed to refer to 'b but it is allowed to\n// refer to 'a.\nfn foo<'a>() -> impl for<'b> Trait1<Item = impl Trait2<'a>> {\n    // ...\n   Example\n}\n}\n```\n\n## [Loop label scopes](#loop-label-scopes)\n\n[Loop labels](about:blank/expressions/loop-expr.html#loop-labels) may be declared by a [loop expression](names/../expressions/loop-expr.html). The scope of a loop label is from the point it is declared till the end of the loop expression. The scope does not extend into [items](names/../items.html), [closures](names/../expressions/closure-expr.html), [async blocks](about:blank/expressions/block-expr.html#async-blocks), [const arguments](about:blank/items/generics.html#const-generics), [const contexts](about:blank/const_eval.html#const-context), and the iterator expression of the defining [`for` loop](about:blank/expressions/loop-expr.html#iterator-loops).\n\n```rust\n#![allow(unused)]\nfn main() {\n'a: for n in 0..3 {\n    if n % 2 == 0 {\n        break 'a;\n    }\n    fn inner() {\n        // Using 'a here would be an error.\n        // break 'a;\n    }\n}\n\n// The label is in scope for the expression of `while` loops.\n'a: while break 'a {}         // Loop does not run.\n'a: while let _ = break 'a {} // Loop does not run.\n\n// The label is not in scope in the defining `for` loop:\n'a: for outer in 0..5 {\n    // This will break the outer loop, skipping the inner loop and stopping\n    // the outer loop.\n    'a: for inner in { break 'a; 0..1 } {\n        println!(\"{}\", inner); // This does not run.\n    }\n    println!(\"{}\", outer); // This does not run, either.\n}\n\n}\n```\n\nLoop labels may shadow labels of the same name in outer scopes. References to a label refer to the closest definition.\n\n```rust\n#![allow(unused)]\nfn main() {\n// Loop label shadowing example.\n'a: for outer in 0..5 {\n    'a: for inner in 0..5 {\n        // This terminates the inner loop, but the outer loop continues to run.\n        break 'a;\n    }\n}\n}\n```\n\n## [Prelude scopes](#prelude-scopes)\n\n[Preludes](names/preludes.html) bring entities into scope of every module. The entities are not members of the module, but are implicitly queried during [name resolution](names/name-resolution.html). The prelude names may be shadowed by declarations in a module.\n\nThe preludes are layered such that one shadows another if they contain entities of the same name. The order that preludes may shadow other preludes is the following where earlier entries may shadow later ones:\n\n1.  [Extern prelude](about:blank/names/preludes.html#extern-prelude)\n2.  [Tool prelude](about:blank/names/preludes.html#tool-prelude)\n3.  [`macro_use` prelude](about:blank/names/preludes.html#macro_use-prelude)\n4.  [Standard library prelude](about:blank/names/preludes.html#standard-library-prelude)\n5.  [Language prelude](about:blank/names/preludes.html#language-prelude)\n\n## [`macro_rules` scopes](#macro_rules-scopes)\n\nThe scope of `macro_rules` macros is described in the [Macros By Example](names/../macros-by-example.html) chapter. The behavior depends on the use of the [`macro_use`](about:blank/macros-by-example.html#the-macro_use-attribute) and [`macro_export`](about:blank/macros-by-example.html#path-based-scope) attributes.\n\n## [Derive macro helper attributes](#derive-macro-helper-attributes-1)\n\n[Derive macro helper attributes](about:blank/procedural-macros.html#derive-macro-helper-attributes) are in scope in the item where their corresponding [`derive` attribute](names/../attributes/derive.html) is specified. The scope extends from just after the `derive` attribute to the end of the item. Helper attributes shadow other attributes of the same name in scope.\n\n## [`Self` scope](#self-scope)\n\nAlthough [`Self`](about:blank/paths.html#self-1) is a keyword with special meaning, it interacts with name resolution in a way similar to normal names.\n\nThe implicit `Self` type in the definition of a [struct](names/../items/structs.html), [enum](names/../items/enumerations.html), [union](names/../items/unions.html), [trait](names/../items/traits.html), or [implementation](names/../items/implementations.html) is treated similarly to a [generic parameter](about:blank/names/scopes.html#generic-parameter-scopes), and is in scope in the same way as a generic type parameter.\n\nThe implicit `Self` constructor in the value [namespace](names/namespaces.html) of an [implementation](names/../items/implementations.html) is in scope within the body of the implementation (the implementation's [associated items](names/../items/associated-items.html)).\n\n```rust\n#![allow(unused)]\nfn main() {\n// Self type within struct definition.\nstruct Recursive {\n    f1: Option<Box<Self>>\n}\n\n// Self type within generic parameters.\nstruct SelfGeneric<T: Into<Self>>(T);\n\n// Self value constructor within an implementation.\nstruct ImplExample();\nimpl ImplExample {\n    fn example() -> Self { // Self type\n        Self() // Self value constructor\n    }\n}\n}\n```\n\n## [Preludes](#preludes)\n\nA _prelude_ is a collection of names that are automatically brought into scope of every module in a crate.\n\nThese prelude names are not part of the module itself: they are implicitly queried during [name resolution](names/name-resolution.html). For example, even though something like [`Box`](names/../../std/boxed/struct.Box.html) is in scope in every module, you cannot refer to it as `self::Box` because it is not a member of the current module.\n\nThere are several different preludes:\n\n-   [Standard library prelude](about:blank/names/preludes.html#standard-library-prelude)\n-   [Extern prelude](about:blank/names/preludes.html#extern-prelude)\n-   [Language prelude](about:blank/names/preludes.html#language-prelude)\n-   [`macro_use` prelude](about:blank/names/preludes.html#macro_use-prelude)\n-   [Tool prelude](about:blank/names/preludes.html#tool-prelude)\n\n## [Standard library prelude](#standard-library-prelude)\n\nEach crate has a standard library prelude, which consists of the names from a single standard library module. The module used depends on the crate's edition, and on whether the [`no_std` attribute](about:blank/names/preludes.html#the-no_std-attribute) is applied to the crate:\n\n> **Note**:\n> \n> [`std::prelude::rust_2015`](names/../../std/prelude/rust_2015/index.html) and [`std::prelude::rust_2018`](names/../../std/prelude/rust_2018/index.html) have the same contents as [`std::prelude::v1`](names/../../std/prelude/v1/index.html).\n> \n> [`core::prelude::rust_2015`](names/../../core/prelude/rust_2015/index.html) and [`core::prelude::rust_2018`](names/../../core/prelude/rust_2018/index.html) have the same contents as [`core::prelude::v1`](names/../../core/prelude/v1/index.html).\n\n## [Extern prelude](#extern-prelude-1)\n\nExternal crates imported with [`extern crate`](names/../items/extern-crates.html) in the root module or provided to the compiler (as with the `--extern` flag with `rustc`) are added to the _extern prelude_. If imported with an alias such as `extern crate orig_name as new_name`, then the symbol `new_name` is instead added to the prelude.\n\nThe [`core`](names/../../core/index.html) crate is always added to the extern prelude. The [`std`](names/../../std/index.html) crate is added as long as the [`no_std` attribute](about:blank/names/preludes.html#the-no_std-attribute) is not specified in the crate root.\n\n> **Edition Differences**: In the 2015 edition, crates in the extern prelude cannot be referenced via [use declarations](names/../items/use-declarations.html), so it is generally standard practice to include `extern crate` declarations to bring them into scope.\n> \n> Beginning in the 2018 edition, [use declarations](names/../items/use-declarations.html) can reference crates in the extern prelude, so it is considered unidiomatic to use `extern crate`.\n\n> **Note**: Additional crates that ship with `rustc`, such as [`alloc`](names/../../alloc/index.html), and [`test`](names/../../test/index.html), are not automatically included with the `--extern` flag when using Cargo. They must be brought into scope with an `extern crate` declaration, even in the 2018 edition.\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> extern crate alloc;\n> use alloc::rc::Rc;\n> }\n> ```\n> \n> Cargo does bring in `proc_macro` to the extern prelude for proc-macro crates only.\n\n### [The `no_std` attribute](#the-no_std-attribute)\n\nBy default, the standard library is automatically included in the crate root module. The [`std`](names/../../std/index.html) crate is added to the root, along with an implicit [`macro_use` attribute](about:blank/macros-by-example.html#the-macro_use-attribute) pulling in all macros exported from `std` into the [`macro_use` prelude](about:blank/names/preludes.html#macro_use-prelude). Both [`core`](names/../../core/index.html) and [`std`](names/../../std/index.html) are added to the [extern prelude](about:blank/names/preludes.html#extern-prelude).\n\nThe _`no_std` [attribute](names/../attributes.html)_ may be applied at the crate level to prevent the [`std`](names/../../std/index.html) crate from being automatically added into scope. It does three things:\n\n-   Prevents `std` from being added to the [extern prelude](about:blank/names/preludes.html#extern-prelude).\n-   Affects which module is used to make up the [standard library prelude](about:blank/names/preludes.html#standard-library-prelude) (as described above).\n-   Injects the [`core`](names/../../core/index.html) crate into the crate root instead of [`std`](names/../../std/index.html), and pulls in all macros exported from `core` in the [`macro_use` prelude](about:blank/names/preludes.html#macro_use-prelude).\n\n> **Note**: Using the core prelude over the standard prelude is useful when either the crate is targeting a platform that does not support the standard library or is purposefully not using the capabilities of the standard library. Those capabilities are mainly dynamic memory allocation (e.g. `Box` and `Vec`) and file and network capabilities (e.g. `std::fs` and `std::io`).\n\nWarning: Using `no_std` does not prevent the standard library from being linked in. It is still valid to put `extern crate std;` into the crate and dependencies can also link it in.\n\n## [Language prelude](#language-prelude)\n\nThe language prelude includes names of types and attributes that are built-in to the language. The language prelude is always in scope. It includes the following:\n\n-   [Type namespace](names/namespaces.html)\n    -   [Boolean type](names/../types/boolean.html) — `bool`\n    -   [Textual types](names/../types/textual.html) — `char` and `str`\n    -   [Integer types](about:blank/types/numeric.html#integer-types) — `i8`, `i16`, `i32`, `i64`, `i128`, `u8`, `u16`, `u32`, `u64`, `u128`\n    -   [Machine-dependent integer types](about:blank/types/numeric.html#machine-dependent-integer-types) — `usize` and `isize`\n    -   [floating-point types](about:blank/types/numeric.html#floating-point-types) — `f32` and `f64`\n-   [Macro namespace](names/namespaces.html)\n    -   [Built-in attributes](about:blank/attributes.html#built-in-attributes-index)\n\n## [`macro_use` prelude](#macro_use-prelude)\n\nThe `macro_use` prelude includes macros from external crates that were imported by the [`macro_use` attribute](about:blank/macros-by-example.html#the-macro_use-attribute) applied to an [`extern crate`](names/../items/extern-crates.html).\n\nThe tool prelude includes tool names for external tools in the [type namespace](names/namespaces.html). See the [tool attributes](about:blank/attributes.html#tool-attributes) section for more details.\n\n## [The `no_implicit_prelude` attribute](#the-no_implicit_prelude-attribute)\n\nThe _`no_implicit_prelude` [attribute](names/../attributes.html)_ may be applied at the crate level or on a module to indicate that it should not automatically bring the [standard library prelude](about:blank/names/preludes.html#standard-library-prelude), [extern prelude](about:blank/names/preludes.html#extern-prelude), or [tool prelude](about:blank/names/preludes.html#tool-prelude) into scope for that module or any of its descendants.\n\nThis attribute does not affect the [language prelude](about:blank/names/preludes.html#language-prelude).\n\n> **Edition Differences**: In the 2015 edition, the `no_implicit_prelude` attribute does not affect the [`macro_use` prelude](about:blank/names/preludes.html#macro_use-prelude), and all macros exported from the standard library are still included in the `macro_use` prelude. Starting in the 2018 edition, it will remove the `macro_use` prelude.\n\n## [Paths](#paths)\n\nA _path_ is a sequence of one or more path segments _logically_ separated by a namespace qualifier (`::`). If a path consists of only one segment, it refers to either an [item](items.html) or a [variable](variables.html) in a local control scope. If a path has multiple segments, it always refers to an item.\n\nTwo examples of simple paths consisting of only identifier segments:\n\n```rust\nx;\nx::y::z;\n```\n\n## [Types of paths](#types-of-paths)\n\n### [Simple Paths](#simple-paths)\n\n> **Syntax**  \n> _SimplePath_ :  \n>    `::`? _SimplePathSegment_ (`::` _SimplePathSegment_)\\*\n> \n> _SimplePathSegment_ :  \n>    [IDENTIFIER](identifiers.html) | `super` | `self` | `crate` | `$crate`\n\nSimple paths are used in [visibility](visibility-and-privacy.html) markers, [attributes](attributes.html), [macros](macros-by-example.html), and [`use`](items/use-declarations.html) items. Examples:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::io::{self, Write};\nmod m {\n    #[clippy::cyclomatic_complexity = \"0\"]\n    pub (in super) fn f1() {}\n}\n}\n```\n\n### [Paths in expressions](#paths-in-expressions)\n\n> **Syntax**  \n> _PathInExpression_ :  \n>    `::`? _PathExprSegment_ (`::` _PathExprSegment_)\\*\n> \n> _PathExprSegment_ :  \n>    _PathIdentSegment_ (`::` _GenericArgs_)?\n> \n> _PathIdentSegment_ :  \n>    [IDENTIFIER](identifiers.html) | `super` | `self` | `Self` | `crate` | `$crate`\n> \n> _GenericArgs_ :  \n>       `<` `>`  \n>    | `<` ( _GenericArg_ `,` )\\* _GenericArg_ `,`? `>`\n> \n> _GenericArg_ :  \n>    [_Lifetime_](trait-bounds.html) | [_Type_](about:blank/types.html#type-expressions) | _GenericArgsConst_ | _GenericArgsBinding_ | _GenericArgsBounds_\n> \n> _GenericArgsConst_ :  \n>       [_BlockExpression_](expressions/block-expr.html)  \n>    | [_LiteralExpression_](expressions/literal-expr.html)  \n>    | `-` [_LiteralExpression_](expressions/literal-expr.html)  \n>    | [_SimplePathSegment_](about:blank/paths.html#simple-paths)\n> \n> _GenericArgsBinding_ :  \n>    [IDENTIFIER](identifiers.html) _GenericArgs_? `=` [_Type_](about:blank/types.html#type-expressions)\n> \n> _GenericArgsBounds_ :  \n>    [IDENTIFIER](identifiers.html) _GenericArgs_? `:` [_TypeParamBounds_](trait-bounds.html)\n\nPaths in expressions allow for paths with generic arguments to be specified. They are used in various places in [expressions](expressions.html) and [patterns](patterns.html).\n\nThe `::` token is required before the opening `<` for generic arguments to avoid ambiguity with the less-than operator. This is colloquially known as \"turbofish\" syntax.\n\n```rust\n#![allow(unused)]\nfn main() {\n(0..10).collect::<Vec<_>>();\nVec::<u8>::with_capacity(1024);\n}\n```\n\nThe order of generic arguments is restricted to lifetime arguments, then type arguments, then const arguments, then equality constraints.\n\nConst arguments must be surrounded by braces unless they are a [literal](expressions/literal-expr.html) or a single segment path.\n\nThe synthetic type parameters corresponding to `impl Trait` types are implicit, and these cannot be explicitly specified.\n\n## [Qualified paths](#qualified-paths)\n\n> **Syntax**  \n> _QualifiedPathInExpression_ :  \n>    _QualifiedPathType_ (`::` _PathExprSegment_)+\n> \n> _QualifiedPathType_ :  \n>    `<` [_Type_](about:blank/types.html#type-expressions) (`as` _TypePath_)? `>`\n> \n> _QualifiedPathInType_ :  \n>    _QualifiedPathType_ (`::` _TypePathSegment_)+\n\nFully qualified paths allow for disambiguating the path for [trait implementations](about:blank/items/implementations.html#trait-implementations) and for specifying [canonical paths](about:blank/paths.html#canonical-paths). When used in a type specification, it supports using the type syntax specified below.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct S;\nimpl S {\n    fn f() { println!(\"S\"); }\n}\ntrait T1 {\n    fn f() { println!(\"T1 f\"); }\n}\nimpl T1 for S {}\ntrait T2 {\n    fn f() { println!(\"T2 f\"); }\n}\nimpl T2 for S {}\nS::f();  // Calls the inherent impl.\n<S as T1>::f();  // Calls the T1 trait function.\n<S as T2>::f();  // Calls the T2 trait function.\n}\n```\n\n### [Paths in types](#paths-in-types)\n\n> **Syntax**  \n> _TypePath_ :  \n>    `::`? _TypePathSegment_ (`::` _TypePathSegment_)\\*\n> \n> _TypePathSegment_ :  \n>    _PathIdentSegment_ (`::`? ([_GenericArgs_](about:blank/paths.html#paths-in-expressions) | _TypePathFn_))?\n> \n> _TypePathFn_ :  \n> `(` _TypePathFnInputs_? `)` (`->` [_TypeNoBounds_](about:blank/types.html#type-expressions))?\n> \n> _TypePathFnInputs_ :  \n> [_Type_](about:blank/types.html#type-expressions) (`,` [_Type_](about:blank/types.html#type-expressions))\\* `,`?\n\nType paths are used within type definitions, trait bounds, type parameter bounds, and qualified paths.\n\nAlthough the `::` token is allowed before the generics arguments, it is not required because there is no ambiguity like there is in _PathInExpression_.\n\n```rust\n#![allow(unused)]\nfn main() {\nmod ops {\n    pub struct Range<T> {f1: T}\n    pub trait Index<T> {}\n    pub struct Example<'a> {f1: &'a i32}\n}\nstruct S;\nimpl ops::Index<ops::Range<usize>> for S { /*...*/ }\nfn i<'a>() -> impl Iterator<Item = ops::Example<'a>> {\n    // ...\n   const EXAMPLE: Vec<ops::Example<'static>> = Vec::new();\n   EXAMPLE.into_iter()\n}\ntype G = std::boxed::Box<dyn std::ops::FnOnce(isize) -> isize>;\n}\n```\n\n## [Path qualifiers](#path-qualifiers)\n\nPaths can be denoted with various leading qualifiers to change the meaning of how it is resolved.\n\n### [`::`](#)\n\nPaths starting with `::` are considered to be _global paths_ where the segments of the path start being resolved from a place which differs based on edition. Each identifier in the path must resolve to an item.\n\n> **Edition Differences**: In the 2015 Edition, identifiers resolve from the \"crate root\" (`crate::` in the 2018 edition), which contains a variety of different items, including external crates, default crates such as `std` or `core`, and items in the top level of the crate (including `use` imports).\n> \n> Beginning with the 2018 Edition, paths starting with `::` resolve from crates in the [extern prelude](about:blank/names/preludes.html#extern-prelude). That is, they must be followed by the name of a crate.\n\n```rust\n#![allow(unused)]\nfn main() {\npub fn foo() {\n    // In the 2018 edition, this accesses `std` via the extern prelude.\n    // In the 2015 edition, this accesses `std` via the crate root.\n    let now = ::std::time::Instant::now();\n    println!(\"{:?}\", now);\n}\n}\n```\n\n```rust\n// 2015 Edition\nmod a {\n    pub fn foo() {}\n}\nmod b {\n    pub fn foo() {\n        ::a::foo(); // call `a`'s foo function\n        // In Rust 2018, `::a` would be interpreted as the crate `a`.\n    }\n}\nfn main() {}\n```\n\n### [`self`](#self)\n\n`self` resolves the path relative to the current module. `self` can only be used as the first segment, without a preceding `::`.\n\nIn a method body, a path which consists of a single `self` segment resolves to the method's self parameter.\n\n```rust\nfn foo() {}\nfn bar() {\n    self::foo();\n}\nstruct S(bool);\nimpl S {\n  fn baz(self) {\n        self.0;\n    }\n}\nfn main() {}\n```\n\n### [`Self`](#self-1)\n\n`Self`, with a capital \"S\", is used to refer to the implementing type within [traits](items/traits.html) and [implementations](items/implementations.html).\n\n`Self` can only be used as the first segment, without a preceding `::`.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait T {\n    type Item;\n    const C: i32;\n    // `Self` will be whatever type that implements `T`.\n    fn new() -> Self;\n    // `Self::Item` will be the type alias in the implementation.\n    fn f(&self) -> Self::Item;\n}\nstruct S;\nimpl T for S {\n    type Item = i32;\n    const C: i32 = 9;\n    fn new() -> Self {           // `Self` is the type `S`.\n        S\n    }\n    fn f(&self) -> Self::Item {  // `Self::Item` is the type `i32`.\n        Self::C                  // `Self::C` is the constant value `9`.\n    }\n}\n}\n```\n\n### [`super`](#super)\n\n`super` in a path resolves to the parent module. It may only be used in leading segments of the path, possibly after an initial `self` segment.\n\n```rust\nmod a {\n    pub fn foo() {}\n}\nmod b {\n    pub fn foo() {\n        super::a::foo(); // call a's foo function\n    }\n}\nfn main() {}\n```\n\n`super` may be repeated several times after the first `super` or `self` to refer to ancestor modules.\n\n```rust\nmod a {\n    fn foo() {}\n\n    mod b {\n        mod c {\n            fn foo() {\n                super::super::foo(); // call a's foo function\n                self::super::super::foo(); // call a's foo function\n            }\n        }\n    }\n}\nfn main() {}\n```\n\n### [`crate`](#crate)\n\n`crate` resolves the path relative to the current crate. `crate` can only be used as the first segment, without a preceding `::`.\n\n```rust\nfn foo() {}\nmod a {\n    fn bar() {\n        crate::foo();\n    }\n}\nfn main() {}\n```\n\n### [`$crate`](#crate-1)\n\n`$crate` is only used within [macro transcribers](macros-by-example.html), and can only be used as the first segment, without a preceding `::`. `$crate` will expand to a path to access items from the top level of the crate where the macro is defined, regardless of which crate the macro is invoked.\n\n```rust\npub fn increment(x: u32) -> u32 {\n    x + 1\n}\n\n#[macro_export]\nmacro_rules! inc {\n    ($x:expr) => ( $crate::increment($x) )\n}\nfn main() { }\n```\n\n## [Canonical paths](#canonical-paths)\n\nItems defined in a module or implementation have a _canonical path_ that corresponds to where within its crate it is defined. All other paths to these items are aliases. The canonical path is defined as a _path prefix_ appended by the path segment the item itself defines.\n\n[Implementations](items/implementations.html) and [use declarations](items/use-declarations.html) do not have canonical paths, although the items that implementations define do have them. Items defined in block expressions do not have canonical paths. Items defined in a module that does not have a canonical path do not have a canonical path. Associated items defined in an implementation that refers to an item without a canonical path, e.g. as the implementing type, the trait being implemented, a type parameter or bound on a type parameter, do not have canonical paths.\n\nThe path prefix for modules is the canonical path to that module. For bare implementations, it is the canonical path of the item being implemented surrounded by angle (`<>`) brackets. For [trait implementations](about:blank/items/implementations.html#trait-implementations), it is the canonical path of the item being implemented followed by `as` followed by the canonical path to the trait all surrounded in angle (`<>`) brackets.\n\nThe canonical path is only meaningful within a given crate. There is no global namespace across crates; an item's canonical path merely identifies it within the crate.\n\n```rust\n// Comments show the canonical path of the item.\n\nmod a { // crate::a\n    pub struct Struct; // crate::a::Struct\n\n    pub trait Trait { // crate::a::Trait\n        fn f(&self); // crate::a::Trait::f\n    }\n\n    impl Trait for Struct {\n        fn f(&self) {} // <crate::a::Struct as crate::a::Trait>::f\n    }\n\n    impl Struct {\n        fn g(&self) {} // <crate::a::Struct>::g\n    }\n}\n\nmod without { // crate::without\n    fn canonicals() { // crate::without::canonicals\n        struct OtherStruct; // None\n\n        trait OtherTrait { // None\n            fn g(&self); // None\n        }\n\n        impl OtherTrait for OtherStruct {\n            fn g(&self) {} // None\n        }\n\n        impl OtherTrait for crate::a::Struct {\n            fn g(&self) {} // None\n        }\n\n        impl crate::a::Trait for OtherStruct {\n            fn f(&self) {} // None\n        }\n    }\n}\n\nfn main() {}\n```\n\n## [Name resolution](#name-resolution)\n\n> **Note**: This is a placeholder for future expansion.\n\n## [Visibility and Privacy](#visibility-and-privacy)\n\n> **Syntax**  \n> _Visibility_ :  \n>       `pub`  \n>    | `pub` `(` `crate` `)`  \n>    | `pub` `(` `self` `)`  \n>    | `pub` `(` `super` `)`  \n>    | `pub` `(` `in` [_SimplePath_](about:blank/paths.html#simple-paths) `)`\n\nThese two terms are often used interchangeably, and what they are attempting to convey is the answer to the question \"Can this item be used at this location?\"\n\nRust's name resolution operates on a global hierarchy of namespaces. Each level in the hierarchy can be thought of as some item. The items are one of those mentioned above, but also include external crates. Declaring or defining a new module can be thought of as inserting a new tree into the hierarchy at the location of the definition.\n\nTo control whether interfaces can be used across modules, Rust checks each use of an item to see whether it should be allowed or not. This is where privacy warnings are generated, or otherwise \"you used a private item of another module and weren't allowed to.\"\n\nBy default, everything is _private_, with two exceptions: Associated items in a `pub` Trait are public by default; Enum variants in a `pub` enum are also public by default. When an item is declared as `pub`, it can be thought of as being accessible to the outside world. For example:\n\n```rust\nfn main() {}\n// Declare a private struct\nstruct Foo;\n\n// Declare a public struct with a private field\npub struct Bar {\n    field: i32,\n}\n\n// Declare a public enum with two public variants\npub enum State {\n    PubliclyAccessibleState,\n    PubliclyAccessibleState2,\n}\n```\n\nWith the notion of an item being either public or private, Rust allows item accesses in two cases:\n\n1.  If an item is public, then it can be accessed externally from some module `m` if you can access all the item's ancestor modules from `m`. You can also potentially be able to name the item through re-exports. See below.\n2.  If an item is private, it may be accessed by the current module and its descendants.\n\nThese two cases are surprisingly powerful for creating module hierarchies exposing public APIs while hiding internal implementation details. To help explain, here's a few use cases and what they would entail:\n\n-   A library developer needs to expose functionality to crates which link against their library. As a consequence of the first case, this means that anything which is usable externally must be `pub` from the root down to the destination item. Any private item in the chain will disallow external accesses.\n    \n-   A crate needs a global available \"helper module\" to itself, but it doesn't want to expose the helper module as a public API. To accomplish this, the root of the crate's hierarchy would have a private module which then internally has a \"public API\". Because the entire crate is a descendant of the root, then the entire local crate can access this private module through the second case.\n    \n-   When writing unit tests for a module, it's often a common idiom to have an immediate child of the module to-be-tested named `mod test`. This module could access any items of the parent module through the second case, meaning that internal implementation details could also be seamlessly tested from the child module.\n    \n\nIn the second case, it mentions that a private item \"can be accessed\" by the current module and its descendants, but the exact meaning of accessing an item depends on what the item is. Accessing a module, for example, would mean looking inside of it (to import more items). On the other hand, accessing a function would mean that it is invoked. Additionally, path expressions and import statements are considered to access an item in the sense that the import/expression is only valid if the destination is in the current visibility scope.\n\nHere's an example of a program which exemplifies the three cases outlined above:\n\n```rust\n// This module is private, meaning that no external crate can access this\n// module. Because it is private at the root of this current crate, however, any\n// module in the crate may access any publicly visible item in this module.\nmod crate_helper_module {\n\n    // This function can be used by anything in the current crate\n    pub fn crate_helper() {}\n\n    // This function *cannot* be used by anything else in the crate. It is not\n    // publicly visible outside of the `crate_helper_module`, so only this\n    // current module and its descendants may access it.\n    fn implementation_detail() {}\n}\n\n// This function is \"public to the root\" meaning that it's available to external\n// crates linking against this one.\npub fn public_api() {}\n\n// Similarly to 'public_api', this module is public so external crates may look\n// inside of it.\npub mod submodule {\n    use crate::crate_helper_module;\n\n    pub fn my_method() {\n        // Any item in the local crate may invoke the helper module's public\n        // interface through a combination of the two rules above.\n        crate_helper_module::crate_helper();\n    }\n\n    // This function is hidden to any module which is not a descendant of\n    // `submodule`\n    fn my_implementation() {}\n\n    #[cfg(test)]\n    mod test {\n\n        #[test]\n        fn test_my_implementation() {\n            // Because this module is a descendant of `submodule`, it's allowed\n            // to access private items inside of `submodule` without a privacy\n            // violation.\n            super::my_implementation();\n        }\n    }\n}\n\nfn main() {}\n```\n\nFor a Rust program to pass the privacy checking pass, all paths must be valid accesses given the two rules above. This includes all use statements, expressions, types, etc.\n\n## [`pub(in path)`, `pub(crate)`, `pub(super)`, and `pub(self)`](#pubin-path-pubcrate-pubsuper-and-pubself)\n\nIn addition to public and private, Rust allows users to declare an item as visible only within a given scope. The rules for `pub` restrictions are as follows:\n\n-   `pub(in path)` makes an item visible within the provided `path`. `path` must be an ancestor module of the item whose visibility is being declared.\n-   `pub(crate)` makes an item visible within the current crate.\n-   `pub(super)` makes an item visible to the parent module. This is equivalent to `pub(in super)`.\n-   `pub(self)` makes an item visible to the current module. This is equivalent to `pub(in self)` or not using `pub` at all.\n\n> **Edition Differences**: Starting with the 2018 edition, paths for `pub(in path)` must start with `crate`, `self`, or `super`. The 2015 edition may also use paths starting with `::` or modules from the crate root.\n\nHere's an example:\n\n```rust\npub mod outer_mod {\n    pub mod inner_mod {\n        // This function is visible within `outer_mod`\n        pub(in crate::outer_mod) fn outer_mod_visible_fn() {}\n        // Same as above, this is only valid in the 2015 edition.\n        pub(in outer_mod) fn outer_mod_visible_fn_2015() {}\n\n        // This function is visible to the entire crate\n        pub(crate) fn crate_visible_fn() {}\n\n        // This function is visible within `outer_mod`\n        pub(super) fn super_mod_visible_fn() {\n            // This function is visible since we're in the same `mod`\n            inner_mod_visible_fn();\n        }\n\n        // This function is visible only within `inner_mod`,\n        // which is the same as leaving it private.\n        pub(self) fn inner_mod_visible_fn() {}\n    }\n    pub fn foo() {\n        inner_mod::outer_mod_visible_fn();\n        inner_mod::crate_visible_fn();\n        inner_mod::super_mod_visible_fn();\n\n        // This function is no longer visible since we're outside of `inner_mod`\n        // Error! `inner_mod_visible_fn` is private\n        //inner_mod::inner_mod_visible_fn();\n    }\n}\n\nfn bar() {\n    // This function is still visible since we're in the same crate\n    outer_mod::inner_mod::crate_visible_fn();\n\n    // This function is no longer visible since we're outside of `outer_mod`\n    // Error! `super_mod_visible_fn` is private\n    //outer_mod::inner_mod::super_mod_visible_fn();\n\n    // This function is no longer visible since we're outside of `outer_mod`\n    // Error! `outer_mod_visible_fn` is private\n    //outer_mod::inner_mod::outer_mod_visible_fn();\n\n    outer_mod::foo();\n}\n\nfn main() { bar() }\n```\n\n> **Note:** This syntax only adds another restriction to the visibility of an item. It does not guarantee that the item is visible within all parts of the specified scope. To access an item, all of its parent items up to the current scope must still be visible as well.\n\n## [Re-exporting and Visibility](#re-exporting-and-visibility)\n\nRust allows publicly re-exporting items through a `pub use` directive. Because this is a public directive, this allows the item to be used in the current module through the rules above. It essentially allows public access into the re-exported item. For example, this program is valid:\n\n```rust\npub use self::implementation::api;\n\nmod implementation {\n    pub mod api {\n        pub fn f() {}\n    }\n}\n\nfn main() {}\n```\n\nThis means that any external crate referencing `implementation::api::f` would receive a privacy violation, while the path `api::f` would be allowed.\n\nWhen re-exporting a private item, it can be thought of as allowing the \"privacy chain\" being short-circuited through the reexport instead of passing through the namespace hierarchy as it normally would.\n\n## [Memory model](#memory-model)\n\nRust does not yet have a defined memory model. Various academics and industry professionals are working on various proposals, but for now, this is an under-defined place in the language.\n\n## [Memory allocation and lifetime](#memory-allocation-and-lifetime)\n\nThe _items_ of a program are those functions, modules, and types that have their value calculated at compile-time and stored uniquely in the memory image of the rust process. Items are neither dynamically allocated nor freed.\n\nThe _heap_ is a general term that describes boxes. The lifetime of an allocation in the heap depends on the lifetime of the box values pointing to it. Since box values may themselves be passed in and out of frames, or stored in the heap, heap allocations may outlive the frame they are allocated within. An allocation in the heap is guaranteed to reside at a single location in the heap for the whole lifetime of the allocation - it will never be relocated as a result of moving a box value.\n\n## [Variables](#variables)\n\nA _variable_ is a component of a stack frame, either a named function parameter, an anonymous [temporary](about:blank/expressions.html#temporaries), or a named local variable.\n\nA _local variable_ (or _stack-local_ allocation) holds a value directly, allocated within the stack's memory. The value is a part of the stack frame.\n\nLocal variables are immutable unless declared otherwise. For example: `let mut x = ...`.\n\nFunction parameters are immutable unless declared with `mut`. The `mut` keyword applies only to the following parameter. For example: `|mut x, y|` and `fn f(mut x: Box<i32>, y: Box<i32>)` declare one mutable variable `x` and one immutable variable `y`.\n\nLocal variables are not initialized when allocated. Instead, the entire frame worth of local variables are allocated, on frame-entry, in an uninitialized state. Subsequent statements within a function may or may not initialize the local variables. Local variables can be used only after they have been initialized through all reachable control flow paths.\n\nIn this next example, `init_after_if` is initialized after the [`if` expression](about:blank/expressions/if-expr.html#if-expressions) while `uninit_after_if` is not because it is not initialized in the `else` case.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn random_bool() -> bool { true }\nfn initialization_example() {\n    let init_after_if: ();\n    let uninit_after_if: ();\n\n    if random_bool() {\n        init_after_if = ();\n        uninit_after_if = ();\n    } else {\n        init_after_if = ();\n    }\n\n    init_after_if; // ok\n    // uninit_after_if; // err: use of possibly uninitialized `uninit_after_if`\n}\n}\n```\n\n## [Linkage](#linkage)\n\n> Note: This section is described more in terms of the compiler than of the language.\n\nThe compiler supports various methods to link crates together both statically and dynamically. This section will explore the various methods to link crates together, and more information about native libraries can be found in the [FFI section of the book](about:blank/book/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code).\n\nIn one session of compilation, the compiler can generate multiple artifacts through the usage of either command line flags or the `crate_type` attribute. If one or more command line flags are specified, all `crate_type` attributes will be ignored in favor of only building the artifacts specified by command line.\n\n-   `--crate-type=bin`, `#![crate_type = \"bin\"]` - A runnable executable will be produced. This requires that there is a `main` function in the crate which will be run when the program begins executing. This will link in all Rust and native dependencies, producing a single distributable binary. This is the default crate type.\n    \n-   `--crate-type=lib`, `#![crate_type = \"lib\"]` - A Rust library will be produced. This is an ambiguous concept as to what exactly is produced because a library can manifest itself in several forms. The purpose of this generic `lib` option is to generate the \"compiler recommended\" style of library. The output library will always be usable by rustc, but the actual type of library may change from time-to-time. The remaining output types are all different flavors of libraries, and the `lib` type can be seen as an alias for one of them (but the actual one is compiler-defined).\n    \n-   `--crate-type=dylib`, `#![crate_type = \"dylib\"]` - A dynamic Rust library will be produced. This is different from the `lib` output type in that this forces dynamic library generation. The resulting dynamic library can be used as a dependency for other libraries and/or executables. This output type will create `*.so` files on Linux, `*.dylib` files on macOS, and `*.dll` files on Windows.\n    \n-   `--crate-type=staticlib`, `#![crate_type = \"staticlib\"]` - A static system library will be produced. This is different from other library outputs in that the compiler will never attempt to link to `staticlib` outputs. The purpose of this output type is to create a static library containing all of the local crate's code along with all upstream dependencies. This output type will create `*.a` files on Linux, macOS and Windows (MinGW), and `*.lib` files on Windows (MSVC). This format is recommended for use in situations such as linking Rust code into an existing non-Rust application because it will not have dynamic dependencies on other Rust code.\n    \n-   `--crate-type=cdylib`, `#![crate_type = \"cdylib\"]` - A dynamic system library will be produced. This is used when compiling a dynamic library to be loaded from another language. This output type will create `*.so` files on Linux, `*.dylib` files on macOS, and `*.dll` files on Windows.\n    \n-   `--crate-type=rlib`, `#![crate_type = \"rlib\"]` - A \"Rust library\" file will be produced. This is used as an intermediate artifact and can be thought of as a \"static Rust library\". These `rlib` files, unlike `staticlib` files, are interpreted by the compiler in future linkage. This essentially means that `rustc` will look for metadata in `rlib` files like it looks for metadata in dynamic libraries. This form of output is used to produce statically linked executables as well as `staticlib` outputs.\n    \n-   `--crate-type=proc-macro`, `#![crate_type = \"proc-macro\"]` - The output produced is not specified, but if a `-L` path is provided to it then the compiler will recognize the output artifacts as a macro and it can be loaded for a program. Crates compiled with this crate type must only export [procedural macros](procedural-macros.html). The compiler will automatically set the `proc_macro` [configuration option](conditional-compilation.html). The crates are always compiled with the same target that the compiler itself was built with. For example, if you are executing the compiler from Linux with an `x86_64` CPU, the target will be `x86_64-unknown-linux-gnu` even if the crate is a dependency of another crate being built for a different target.\n    \n\nNote that these outputs are stackable in the sense that if multiple are specified, then the compiler will produce each form of output without having to recompile. However, this only applies for outputs specified by the same method. If only `crate_type` attributes are specified, then they will all be built, but if one or more `--crate-type` command line flags are specified, then only those outputs will be built.\n\nWith all these different kinds of outputs, if crate A depends on crate B, then the compiler could find B in various different forms throughout the system. The only forms looked for by the compiler, however, are the `rlib` format and the dynamic library format. With these two options for a dependent library, the compiler must at some point make a choice between these two formats. With this in mind, the compiler follows these rules when determining what format of dependencies will be used:\n\n1.  If a static library is being produced, all upstream dependencies are required to be available in `rlib` formats. This requirement stems from the reason that a dynamic library cannot be converted into a static format.\n    \n    Note that it is impossible to link in native dynamic dependencies to a static library, and in this case warnings will be printed about all unlinked native dynamic dependencies.\n    \n2.  If an `rlib` file is being produced, then there are no restrictions on what format the upstream dependencies are available in. It is simply required that all upstream dependencies be available for reading metadata from.\n    \n    The reason for this is that `rlib` files do not contain any of their upstream dependencies. It wouldn't be very efficient for all `rlib` files to contain a copy of `libstd.rlib`!\n    \n3.  If an executable is being produced and the `-C prefer-dynamic` flag is not specified, then dependencies are first attempted to be found in the `rlib` format. If some dependencies are not available in an rlib format, then dynamic linking is attempted (see below).\n    \n4.  If a dynamic library or an executable that is being dynamically linked is being produced, then the compiler will attempt to reconcile the available dependencies in either the rlib or dylib format to create a final product.\n    \n    A major goal of the compiler is to ensure that a library never appears more than once in any artifact. For example, if dynamic libraries B and C were each statically linked to library A, then a crate could not link to B and C together because there would be two copies of A. The compiler allows mixing the rlib and dylib formats, but this restriction must be satisfied.\n    \n    The compiler currently implements no method of hinting what format a library should be linked with. When dynamically linking, the compiler will attempt to maximize dynamic dependencies while still allowing some dependencies to be linked in via an rlib.\n    \n    For most situations, having all libraries available as a dylib is recommended if dynamically linking. For other situations, the compiler will emit a warning if it is unable to determine which formats to link each library with.\n    \n\nIn general, `--crate-type=bin` or `--crate-type=lib` should be sufficient for all compilation needs, and the other options are just available if more fine-grained control is desired over the output format of a crate.\n\n## [Static and dynamic C runtimes](#static-and-dynamic-c-runtimes)\n\nThe standard library in general strives to support both statically linked and dynamically linked C runtimes for targets as appropriate. For example the `x86_64-pc-windows-msvc` and `x86_64-unknown-linux-musl` targets typically come with both runtimes and the user selects which one they'd like. All targets in the compiler have a default mode of linking to the C runtime. Typically targets are linked dynamically by default, but there are exceptions which are static by default such as:\n\n-   `arm-unknown-linux-musleabi`\n-   `arm-unknown-linux-musleabihf`\n-   `armv7-unknown-linux-musleabihf`\n-   `i686-unknown-linux-musl`\n-   `x86_64-unknown-linux-musl`\n\nThe linkage of the C runtime is configured to respect the `crt-static` target feature. These target features are typically configured from the command line via flags to the compiler itself. For example to enable a static runtime you would execute:\n\n```sh\nrustc -C target-feature=+crt-static foo.rs\n\n```\n\nwhereas to link dynamically to the C runtime you would execute:\n\n```sh\nrustc -C target-feature=-crt-static foo.rs\n\n```\n\nTargets which do not support switching between linkage of the C runtime will ignore this flag. It's recommended to inspect the resulting binary to ensure that it's linked as you would expect after the compiler succeeds.\n\nCrates may also learn about how the C runtime is being linked. Code on MSVC, for example, needs to be compiled differently (e.g. with `/MT` or `/MD`) depending on the runtime being linked. This is exported currently through the [`cfg` attribute `target_feature` option](about:blank/conditional-compilation.html#target_feature):\n\n```rust\n#![allow(unused)]\nfn main() {\n#[cfg(target_feature = \"crt-static\")]\nfn foo() {\n    println!(\"the C runtime should be statically linked\");\n}\n\n#[cfg(not(target_feature = \"crt-static\"))]\nfn foo() {\n    println!(\"the C runtime should be dynamically linked\");\n}\n}\n```\n\nAlso note that Cargo build scripts can learn about this feature through [environment variables](about:blank/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts). In a build script you can detect the linkage via:\n\n```rust\nuse std::env;\n\nfn main() {\n    let linkage = env::var(\"CARGO_CFG_TARGET_FEATURE\").unwrap_or(String::new());\n\n    if linkage.contains(\"crt-static\") {\n        println!(\"the C runtime will be statically linked\");\n    } else {\n        println!(\"the C runtime will be dynamically linked\");\n    }\n}\n```\n\nTo use this feature locally, you typically will use the `RUSTFLAGS` environment variable to specify flags to the compiler through Cargo. For example to compile a statically linked binary on MSVC you would execute:\n\n```sh\nRUSTFLAGS='-C target-feature=+crt-static' cargo build --target x86_64-pc-windows-msvc\n\n```\n\n## [Inline assembly](#inline-assembly)\n\nSupport for inline assembly is provided via the [`asm!`](../core/arch/macro.asm.html) and [`global_asm!`](../core/arch/macro.global_asm.html) macros. It can be used to embed handwritten assembly in the assembly output generated by the compiler.\n\nSupport for inline assembly is stable on the following architectures:\n\n-   x86 and x86-64\n-   ARM\n-   AArch64\n-   RISC-V\n-   LoongArch\n\nThe compiler will emit an error if `asm!` is used on an unsupported target.\n\n## [Example](#example-1)\n\n```rust\n#![allow(unused)]\nfn main() {\n#[cfg(target_arch = \"x86_64\")] {\nuse std::arch::asm;\n\n// Multiply x by 6 using shifts and adds\nlet mut x: u64 = 4;\nunsafe {\n    asm!(\n        \"mov {tmp}, {x}\",\n        \"shl {tmp}, 1\",\n        \"shl {x}, 2\",\n        \"add {x}, {tmp}\",\n        x = inout(reg) x,\n        tmp = out(reg) _,\n    );\n}\nassert_eq!(x, 4 * 6);\n}\n}\n```\n\n## [Syntax](#syntax)\n\nThe following ABNF specifies the general syntax:\n\n```text\nformat_string := STRING_LITERAL / RAW_STRING_LITERAL\ndir_spec := \"in\" / \"out\" / \"lateout\" / \"inout\" / \"inlateout\"\nreg_spec := <register class> / \"\\\"\" <explicit register> \"\\\"\"\noperand_expr := expr / \"_\" / expr \"=>\" expr / expr \"=>\" \"_\"\nreg_operand := [ident \"=\"] dir_spec \"(\" reg_spec \")\" operand_expr\nclobber_abi := \"clobber_abi(\" <abi> *(\",\" <abi>) [\",\"] \")\"\noption := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / \"noreturn\" / \"nostack\" / \"att_syntax\" / \"raw\"\noptions := \"options(\" option *(\",\" option) [\",\"] \")\"\noperand := reg_operand / clobber_abi / options\nasm := \"asm!(\" format_string *(\",\" format_string) *(\",\" operand) [\",\"] \")\"\nglobal_asm := \"global_asm!(\" format_string *(\",\" format_string) *(\",\" operand) [\",\"] \")\"\n\n```\n\n## [Scope](#scope)\n\nInline assembly can be used in one of two ways.\n\nWith the `asm!` macro, the assembly code is emitted in a function scope and integrated into the compiler-generated assembly code of a function. This assembly code must obey [strict rules](about:blank/inline-assembly.html#rules-for-inline-assembly) to avoid undefined behavior. Note that in some cases the compiler may choose to emit the assembly code as a separate function and generate a call to it.\n\nWith the `global_asm!` macro, the assembly code is emitted in a global scope, outside a function. This can be used to hand-write entire functions using assembly code, and generally provides much more freedom to use arbitrary registers and assembler directives.\n\n## [Template string arguments](#template-string-arguments)\n\nThe assembler template uses the same syntax as [format strings](about:blank/std/fmt/index.html#syntax) (i.e. placeholders are specified by curly braces). The corresponding arguments are accessed in order, by index, or by name. However, implicit named arguments (introduced by [RFC #2795](https://github.com/rust-lang/rfcs/pull/2795)) are not supported.\n\nAn `asm!` invocation may have one or more template string arguments; an `asm!` with multiple template string arguments is treated as if all the strings were concatenated with a `\\n` between them. The expected usage is for each template string argument to correspond to a line of assembly code. All template string arguments must appear before any other arguments.\n\nAs with format strings, positional arguments must appear before named arguments and explicit [register operands](about:blank/inline-assembly.html#register-operands).\n\nExplicit register operands cannot be used by placeholders in the template string. All other named and positional operands must appear at least once in the template string, otherwise a compiler error is generated.\n\nThe exact assembly code syntax is target-specific and opaque to the compiler except for the way operands are substituted into the template string to form the code passed to the assembler.\n\nCurrently, all supported targets follow the assembly code syntax used by LLVM's internal assembler which usually corresponds to that of the GNU assembler (GAS). On x86, the `.intel_syntax noprefix` mode of GAS is used by default. On ARM, the `.syntax unified` mode is used. These targets impose an additional restriction on the assembly code: any assembler state (e.g. the current section which can be changed with `.section`) must be restored to its original value at the end of the asm string. Assembly code that does not conform to the GAS syntax will result in assembler-specific behavior. Further constraints on the directives used by inline assembly are indicated by [Directives Support](about:blank/inline-assembly.html#directives-support).\n\n## [Operand type](#operand-type)\n\nSeveral types of operands are supported:\n\n-   `in(<reg>) <expr>`\n    -   `<reg>` can refer to a register class or an explicit register. The allocated register name is substituted into the asm template string.\n    -   The allocated register will contain the value of `<expr>` at the start of the asm code.\n    -   The allocated register must contain the same value at the end of the asm code (except if a `lateout` is allocated to the same register).\n-   `out(<reg>) <expr>`\n    -   `<reg>` can refer to a register class or an explicit register. The allocated register name is substituted into the asm template string.\n    -   The allocated register will contain an undefined value at the start of the asm code.\n    -   `<expr>` must be a (possibly uninitialized) place expression, to which the contents of the allocated register are written at the end of the asm code.\n    -   An underscore (`_`) may be specified instead of an expression, which will cause the contents of the register to be discarded at the end of the asm code (effectively acting as a clobber).\n-   `lateout(<reg>) <expr>`\n    -   Identical to `out` except that the register allocator can reuse a register allocated to an `in`.\n    -   You should only write to the register after all inputs are read, otherwise you may clobber an input.\n-   `inout(<reg>) <expr>`\n    -   `<reg>` can refer to a register class or an explicit register. The allocated register name is substituted into the asm template string.\n    -   The allocated register will contain the value of `<expr>` at the start of the asm code.\n    -   `<expr>` must be a mutable initialized place expression, to which the contents of the allocated register are written at the end of the asm code.\n-   `inout(<reg>) <in expr> => <out expr>`\n    -   Same as `inout` except that the initial value of the register is taken from the value of `<in expr>`.\n    -   `<out expr>` must be a (possibly uninitialized) place expression, to which the contents of the allocated register are written at the end of the asm code.\n    -   An underscore (`_`) may be specified instead of an expression for `<out expr>`, which will cause the contents of the register to be discarded at the end of the asm code (effectively acting as a clobber).\n    -   `<in expr>` and `<out expr>` may have different types.\n-   `inlateout(<reg>) <expr>` / `inlateout(<reg>) <in expr> => <out expr>`\n    -   Identical to `inout` except that the register allocator can reuse a register allocated to an `in` (this can happen if the compiler knows the `in` has the same initial value as the `inlateout`).\n    -   You should only write to the register after all inputs are read, otherwise you may clobber an input.\n-   `sym <path>`\n    -   `<path>` must refer to a `fn` or `static`.\n    -   A mangled symbol name referring to the item is substituted into the asm template string.\n    -   The substituted string does not include any modifiers (e.g. GOT, PLT, relocations, etc).\n    -   `<path>` is allowed to point to a `#[thread_local]` static, in which case the asm code can combine the symbol with relocations (e.g. `@plt`, `@TPOFF`) to read from thread-local data.\n\nOperand expressions are evaluated from left to right, just like function call arguments. After the `asm!` has executed, outputs are written to in left to right order. This is significant if two outputs point to the same place: that place will contain the value of the rightmost output.\n\nSince `global_asm!` exists outside a function, it can only use `sym` operands.\n\n## [Register operands](#register-operands)\n\nInput and output operands can be specified either as an explicit register or as a register class from which the register allocator can select a register. Explicit registers are specified as string literals (e.g. `\"eax\"`) while register classes are specified as identifiers (e.g. `reg`).\n\nNote that explicit registers treat register aliases (e.g. `r14` vs `lr` on ARM) and smaller views of a register (e.g. `eax` vs `rax`) as equivalent to the base register. It is a compile-time error to use the same explicit register for two input operands or two output operands. Additionally, it is also a compile-time error to use overlapping registers (e.g. ARM VFP) in input operands or in output operands.\n\nOnly the following types are allowed as operands for inline assembly:\n\n-   Integers (signed and unsigned)\n-   Floating-point numbers\n-   Pointers (thin only)\n-   Function pointers\n-   SIMD vectors (structs defined with `#[repr(simd)]` and which implement `Copy`). This includes architecture-specific vector types defined in `std::arch` such as `__m128` (x86) or `int8x16_t` (ARM).\n\nHere is the list of currently supported register classes:\n\n| Architecture | Register class | Registers | LLVM constraint code |\n| --- | --- | --- | --- |\n| x86 | `reg` | `ax`, `bx`, `cx`, `dx`, `si`, `di`, `bp`, `r[8-15]` (x86-64 only) | `r` |\n| x86 | `reg_abcd` | `ax`, `bx`, `cx`, `dx` | `Q` |\n| x86-32 | `reg_byte` | `al`, `bl`, `cl`, `dl`, `ah`, `bh`, `ch`, `dh` | `q` |\n| x86-64 | `reg_byte`\\* | `al`, `bl`, `cl`, `dl`, `sil`, `dil`, `bpl`, `r[8-15]b` | `q` |\n| x86 | `xmm_reg` | `xmm[0-7]` (x86) `xmm[0-15]` (x86-64) | `x` |\n| x86 | `ymm_reg` | `ymm[0-7]` (x86) `ymm[0-15]` (x86-64) | `x` |\n| x86 | `zmm_reg` | `zmm[0-7]` (x86) `zmm[0-31]` (x86-64) | `v` |\n| x86 | `kreg` | `k[1-7]` | `Yk` |\n| x86 | `kreg0` | `k0` | Only clobbers |\n| x86 | `x87_reg` | `st([0-7])` | Only clobbers |\n| x86 | `mmx_reg` | `mm[0-7]` | Only clobbers |\n| x86-64 | `tmm_reg` | `tmm[0-7]` | Only clobbers |\n| AArch64 | `reg` | `x[0-30]` | `r` |\n| AArch64 | `vreg` | `v[0-31]` | `w` |\n| AArch64 | `vreg_low16` | `v[0-15]` | `x` |\n| AArch64 | `preg` | `p[0-15]`, `ffr` | Only clobbers |\n| ARM (ARM/Thumb2) | `reg` | `r[0-12]`, `r14` | `r` |\n| ARM (Thumb1) | `reg` | `r[0-7]` | `r` |\n| ARM | `sreg` | `s[0-31]` | `t` |\n| ARM | `sreg_low16` | `s[0-15]` | `x` |\n| ARM | `dreg` | `d[0-31]` | `w` |\n| ARM | `dreg_low16` | `d[0-15]` | `t` |\n| ARM | `dreg_low8` | `d[0-8]` | `x` |\n| ARM | `qreg` | `q[0-15]` | `w` |\n| ARM | `qreg_low8` | `q[0-7]` | `t` |\n| ARM | `qreg_low4` | `q[0-3]` | `x` |\n| RISC-V | `reg` | `x1`, `x[5-7]`, `x[9-15]`, `x[16-31]` (non-RV32E) | `r` |\n| RISC-V | `freg` | `f[0-31]` | `f` |\n| RISC-V | `vreg` | `v[0-31]` | Only clobbers |\n| LoongArch | `reg` | `$r1`, `$r[4-20]`, `$r[23,30]` | `r` |\n| LoongArch | `freg` | `$f[0-31]` | `f` |\n\n> **Notes**:\n> \n> -   On x86 we treat `reg_byte` differently from `reg` because the compiler can allocate `al` and `ah` separately whereas `reg` reserves the whole register.\n>     \n> -   On x86-64 the high byte registers (e.g. `ah`) are not available in the `reg_byte` register class.\n>     \n> -   Some register classes are marked as \"Only clobbers\" which means that registers in these classes cannot be used for inputs or outputs, only clobbers of the form `out(<explicit register>) _` or `lateout(<explicit register>) _`.\n>     \n\nEach register class has constraints on which value types they can be used with. This is necessary because the way a value is loaded into a register depends on its type. For example, on big-endian systems, loading a `i32x4` and a `i8x16` into a SIMD register may result in different register contents even if the byte-wise memory representation of both values is identical. The availability of supported types for a particular register class may depend on what target features are currently enabled.\n\n| Architecture | Register class | Target feature | Allowed types |\n| --- | --- | --- | --- |\n| x86-32 | `reg` | None | `i16`, `i32`, `f32` |\n| x86-64 | `reg` | None | `i16`, `i32`, `f32`, `i64`, `f64` |\n| x86 | `reg_byte` | None | `i8` |\n| x86 | `xmm_reg` | `sse` | `i32`, `f32`, `i64`, `f64`,  \n`i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`, `f64x2` |\n| x86 | `ymm_reg` | `avx` | `i32`, `f32`, `i64`, `f64`,  \n`i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`, `f64x2`  \n`i8x32`, `i16x16`, `i32x8`, `i64x4`, `f32x8`, `f64x4` |\n| x86 | `zmm_reg` | `avx512f` | `i32`, `f32`, `i64`, `f64`,  \n`i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`, `f64x2`  \n`i8x32`, `i16x16`, `i32x8`, `i64x4`, `f32x8`, `f64x4`  \n`i8x64`, `i16x32`, `i32x16`, `i64x8`, `f32x16`, `f64x8` |\n| x86 | `kreg` | `avx512f` | `i8`, `i16` |\n| x86 | `kreg` | `avx512bw` | `i32`, `i64` |\n| x86 | `mmx_reg` | N/A | Only clobbers |\n| x86 | `x87_reg` | N/A | Only clobbers |\n| x86 | `tmm_reg` | N/A | Only clobbers |\n| AArch64 | `reg` | None | `i8`, `i16`, `i32`, `f32`, `i64`, `f64` |\n| AArch64 | `vreg` | `neon` | `i8`, `i16`, `i32`, `f32`, `i64`, `f64`,  \n`i8x8`, `i16x4`, `i32x2`, `i64x1`, `f32x2`, `f64x1`,  \n`i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`, `f64x2` |\n| AArch64 | `preg` | N/A | Only clobbers |\n| ARM | `reg` | None | `i8`, `i16`, `i32`, `f32` |\n| ARM | `sreg` | `vfp2` | `i32`, `f32` |\n| ARM | `dreg` | `vfp2` | `i64`, `f64`, `i8x8`, `i16x4`, `i32x2`, `i64x1`, `f32x2` |\n| ARM | `qreg` | `neon` | `i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4` |\n| RISC-V32 | `reg` | None | `i8`, `i16`, `i32`, `f32` |\n| RISC-V64 | `reg` | None | `i8`, `i16`, `i32`, `f32`, `i64`, `f64` |\n| RISC-V | `freg` | `f` | `f32` |\n| RISC-V | `freg` | `d` | `f64` |\n| RISC-V | `vreg` | N/A | Only clobbers |\n| LoongArch64 | `reg` | None | `i8`, `i16`, `i32`, `i64`, `f32`, `f64` |\n| LoongArch64 | `freg` | None | `f32`, `f64` |\n\n> **Note**: For the purposes of the above table pointers, function pointers and `isize`/`usize` are treated as the equivalent integer type (`i16`/`i32`/`i64` depending on the target).\n\nIf a value is of a smaller size than the register it is allocated in then the upper bits of that register will have an undefined value for inputs and will be ignored for outputs. The only exception is the `freg` register class on RISC-V where `f32` values are NaN-boxed in a `f64` as required by the RISC-V architecture.\n\nWhen separate input and output expressions are specified for an `inout` operand, both expressions must have the same type. The only exception is if both operands are pointers or integers, in which case they are only required to have the same size. This restriction exists because the register allocators in LLVM and GCC sometimes cannot handle tied operands with different types.\n\n## [Register names](#register-names)\n\nSome registers have multiple names. These are all treated by the compiler as identical to the base register name. Here is the list of all supported register aliases:\n\n| Architecture | Base register | Aliases |\n| --- | --- | --- |\n| x86 | `ax` | `eax`, `rax` |\n| x86 | `bx` | `ebx`, `rbx` |\n| x86 | `cx` | `ecx`, `rcx` |\n| x86 | `dx` | `edx`, `rdx` |\n| x86 | `si` | `esi`, `rsi` |\n| x86 | `di` | `edi`, `rdi` |\n| x86 | `bp` | `bpl`, `ebp`, `rbp` |\n| x86 | `sp` | `spl`, `esp`, `rsp` |\n| x86 | `ip` | `eip`, `rip` |\n| x86 | `st(0)` | `st` |\n| x86 | `r[8-15]` | `r[8-15]b`, `r[8-15]w`, `r[8-15]d` |\n| x86 | `xmm[0-31]` | `ymm[0-31]`, `zmm[0-31]` |\n| AArch64 | `x[0-30]` | `w[0-30]` |\n| AArch64 | `x29` | `fp` |\n| AArch64 | `x30` | `lr` |\n| AArch64 | `sp` | `wsp` |\n| AArch64 | `xzr` | `wzr` |\n| AArch64 | `v[0-31]` | `b[0-31]`, `h[0-31]`, `s[0-31]`, `d[0-31]`, `q[0-31]` |\n| ARM | `r[0-3]` | `a[1-4]` |\n| ARM | `r[4-9]` | `v[1-6]` |\n| ARM | `r9` | `rfp` |\n| ARM | `r10` | `sl` |\n| ARM | `r11` | `fp` |\n| ARM | `r12` | `ip` |\n| ARM | `r13` | `sp` |\n| ARM | `r14` | `lr` |\n| ARM | `r15` | `pc` |\n| RISC-V | `x0` | `zero` |\n| RISC-V | `x1` | `ra` |\n| RISC-V | `x2` | `sp` |\n| RISC-V | `x3` | `gp` |\n| RISC-V | `x4` | `tp` |\n| RISC-V | `x[5-7]` | `t[0-2]` |\n| RISC-V | `x8` | `fp`, `s0` |\n| RISC-V | `x9` | `s1` |\n| RISC-V | `x[10-17]` | `a[0-7]` |\n| RISC-V | `x[18-27]` | `s[2-11]` |\n| RISC-V | `x[28-31]` | `t[3-6]` |\n| RISC-V | `f[0-7]` | `ft[0-7]` |\n| RISC-V | `f[8-9]` | `fs[0-1]` |\n| RISC-V | `f[10-17]` | `fa[0-7]` |\n| RISC-V | `f[18-27]` | `fs[2-11]` |\n| RISC-V | `f[28-31]` | `ft[8-11]` |\n| LoongArch | `$r0` | `$zero` |\n| LoongArch | `$r1` | `$ra` |\n| LoongArch | `$r2` | `$tp` |\n| LoongArch | `$r3` | `$sp` |\n| LoongArch | `$r[4-11]` | `$a[0-7]` |\n| LoongArch | `$r[12-20]` | `$t[0-8]` |\n| LoongArch | `$r21` |  |\n| LoongArch | `$r22` | `$fp`, `$s9` |\n| LoongArch | `$r[23-31]` | `$s[0-8]` |\n| LoongArch | `$f[0-7]` | `$fa[0-7]` |\n| LoongArch | `$f[8-23]` | `$ft[0-15]` |\n| LoongArch | `$f[24-31]` | `$fs[0-7]` |\n\nSome registers cannot be used for input or output operands:\n\n| Architecture | Unsupported register | Reason |\n| --- | --- | --- |\n| All | `sp` | The stack pointer must be restored to its original value at the end of an asm code block. |\n| All | `bp` (x86), `x29` (AArch64), `x8` (RISC-V), `$fp` (LoongArch) | The frame pointer cannot be used as an input or output. |\n| ARM | `r7` or `r11` | On ARM the frame pointer can be either `r7` or `r11` depending on the target. The frame pointer cannot be used as an input or output. |\n| All | `si` (x86-32), `bx` (x86-64), `r6` (ARM), `x19` (AArch64), `x9` (RISC-V), `$s8` (LoongArch) | This is used internally by LLVM as a \"base pointer\" for functions with complex stack frames. |\n| x86 | `ip` | This is the program counter, not a real register. |\n| AArch64 | `xzr` | This is a constant zero register which can't be modified. |\n| AArch64 | `x18` | This is an OS-reserved register on some AArch64 targets. |\n| ARM | `pc` | This is the program counter, not a real register. |\n| ARM | `r9` | This is an OS-reserved register on some ARM targets. |\n| RISC-V | `x0` | This is a constant zero register which can't be modified. |\n| RISC-V | `gp`, `tp` | These registers are reserved and cannot be used as inputs or outputs. |\n| LoongArch | `$r0` or `$zero` | This is a constant zero register which can't be modified. |\n| LoongArch | `$r2` or `$tp` | This is reserved for TLS. |\n| LoongArch | `$r21` | This is reserved by the ABI. |\n\nThe frame pointer and base pointer registers are reserved for internal use by LLVM. While `asm!` statements cannot explicitly specify the use of reserved registers, in some cases LLVM will allocate one of these reserved registers for `reg` operands. Assembly code making use of reserved registers should be careful since `reg` operands may use the same registers.\n\n## [Template modifiers](#template-modifiers)\n\nThe placeholders can be augmented by modifiers which are specified after the `:` in the curly braces. These modifiers do not affect register allocation, but change the way operands are formatted when inserted into the template string. Only one modifier is allowed per template placeholder.\n\nThe supported modifiers are a subset of LLVM's (and GCC's) [asm template argument modifiers](http://llvm.org/docs/LangRef.html#asm-template-argument-modifiers), but do not use the same letter codes.\n\n| Architecture | Register class | Modifier | Example output | LLVM modifier |\n| --- | --- | --- | --- | --- |\n| x86-32 | `reg` | None | `eax` | `k` |\n| x86-64 | `reg` | None | `rax` | `q` |\n| x86-32 | `reg_abcd` | `l` | `al` | `b` |\n| x86-64 | `reg` | `l` | `al` | `b` |\n| x86 | `reg_abcd` | `h` | `ah` | `h` |\n| x86 | `reg` | `x` | `ax` | `w` |\n| x86 | `reg` | `e` | `eax` | `k` |\n| x86-64 | `reg` | `r` | `rax` | `q` |\n| x86 | `reg_byte` | None | `al` / `ah` | None |\n| x86 | `xmm_reg` | None | `xmm0` | `x` |\n| x86 | `ymm_reg` | None | `ymm0` | `t` |\n| x86 | `zmm_reg` | None | `zmm0` | `g` |\n| x86 | `*mm_reg` | `x` | `xmm0` | `x` |\n| x86 | `*mm_reg` | `y` | `ymm0` | `t` |\n| x86 | `*mm_reg` | `z` | `zmm0` | `g` |\n| x86 | `kreg` | None | `k1` | None |\n| AArch64 | `reg` | None | `x0` | `x` |\n| AArch64 | `reg` | `w` | `w0` | `w` |\n| AArch64 | `reg` | `x` | `x0` | `x` |\n| AArch64 | `vreg` | None | `v0` | None |\n| AArch64 | `vreg` | `v` | `v0` | None |\n| AArch64 | `vreg` | `b` | `b0` | `b` |\n| AArch64 | `vreg` | `h` | `h0` | `h` |\n| AArch64 | `vreg` | `s` | `s0` | `s` |\n| AArch64 | `vreg` | `d` | `d0` | `d` |\n| AArch64 | `vreg` | `q` | `q0` | `q` |\n| ARM | `reg` | None | `r0` | None |\n| ARM | `sreg` | None | `s0` | None |\n| ARM | `dreg` | None | `d0` | `P` |\n| ARM | `qreg` | None | `q0` | `q` |\n| ARM | `qreg` | `e` / `f` | `d0` / `d1` | `e` / `f` |\n| RISC-V | `reg` | None | `x1` | None |\n| RISC-V | `freg` | None | `f0` | None |\n| LoongArch | `reg` | None | `$r1` | None |\n| LoongArch | `freg` | None | `$f0` | None |\n\n> **Notes**:\n> \n> -   on ARM `e` / `f`: this prints the low or high doubleword register name of a NEON quad (128-bit) register.\n> -   on x86: our behavior for `reg` with no modifiers differs from what GCC does. GCC will infer the modifier based on the operand value type, while we default to the full register size.\n> -   on x86 `xmm_reg`: the `x`, `t` and `g` LLVM modifiers are not yet implemented in LLVM (they are supported by GCC only), but this should be a simple change.\n\nAs stated in the previous section, passing an input value smaller than the register width will result in the upper bits of the register containing undefined values. This is not a problem if the inline asm only accesses the lower bits of the register, which can be done by using a template modifier to use a subregister name in the asm code (e.g. `ax` instead of `rax`). Since this an easy pitfall, the compiler will suggest a template modifier to use where appropriate given the input type. If all references to an operand already have modifiers then the warning is suppressed for that operand.\n\n## [ABI clobbers](#abi-clobbers)\n\nThe `clobber_abi` keyword can be used to apply a default set of clobbers to an `asm!` block. This will automatically insert the necessary clobber constraints as needed for calling a function with a particular calling convention: if the calling convention does not fully preserve the value of a register across a call then `lateout(\"...\") _` is implicitly added to the operands list (where the `...` is replaced by the register's name).\n\n`clobber_abi` may be specified any number of times. It will insert a clobber for all unique registers in the union of all specified calling conventions.\n\nGeneric register class outputs are disallowed by the compiler when `clobber_abi` is used: all outputs must specify an explicit register. Explicit register outputs have precedence over the implicit clobbers inserted by `clobber_abi`: a clobber will only be inserted for a register if that register is not used as an output. The following ABIs can be used with `clobber_abi`:\n\n| Architecture | ABI name | Clobbered registers |\n| --- | --- | --- |\n| x86-32 | `\"C\"`, `\"system\"`, `\"efiapi\"`, `\"cdecl\"`, `\"stdcall\"`, `\"fastcall\"` | `ax`, `cx`, `dx`, `xmm[0-7]`, `mm[0-7]`, `k[0-7]`, `st([0-7])` |\n| x86-64 | `\"C\"`, `\"system\"` (on Windows), `\"efiapi\"`, `\"win64\"` | `ax`, `cx`, `dx`, `r[8-11]`, `xmm[0-31]`, `mm[0-7]`, `k[0-7]`, `st([0-7])`, `tmm[0-7]` |\n| x86-64 | `\"C\"`, `\"system\"` (on non-Windows), `\"sysv64\"` | `ax`, `cx`, `dx`, `si`, `di`, `r[8-11]`, `xmm[0-31]`, `mm[0-7]`, `k[0-7]`, `st([0-7])`, `tmm[0-7]` |\n| AArch64 | `\"C\"`, `\"system\"`, `\"efiapi\"` | `x[0-17]`, `x18`\\*, `x30`, `v[0-31]`, `p[0-15]`, `ffr` |\n| ARM | `\"C\"`, `\"system\"`, `\"efiapi\"`, `\"aapcs\"` | `r[0-3]`, `r12`, `r14`, `s[0-15]`, `d[0-7]`, `d[16-31]` |\n| RISC-V | `\"C\"`, `\"system\"`, `\"efiapi\"` | `x1`, `x[5-7]`, `x[10-17]`, `x[28-31]`, `f[0-7]`, `f[10-17]`, `f[28-31]`, `v[0-31]` |\n| LoongArch | `\"C\"`, `\"system\"`, `\"efiapi\"` | `$r1`, `$r[4-20]`, `$f[0-23]` |\n\n> Notes:\n> \n> -   On AArch64 `x18` only included in the clobber list if it is not considered as a reserved register on the target.\n\nThe list of clobbered registers for each ABI is updated in rustc as architectures gain new registers: this ensures that `asm!` clobbers will continue to be correct when LLVM starts using these new registers in its generated code.\n\n## [Options](#options)\n\nFlags are used to further influence the behavior of the inline assembly block. Currently the following options are defined:\n\n-   `pure`: The `asm!` block has no side effects, must eventually return, and its outputs depend only on its direct inputs (i.e. the values themselves, not what they point to) or values read from memory (unless the `nomem` options is also set). This allows the compiler to execute the `asm!` block fewer times than specified in the program (e.g. by hoisting it out of a loop) or even eliminate it entirely if the outputs are not used. The `pure` option must be combined with either the `nomem` or `readonly` options, otherwise a compile-time error is emitted.\n-   `nomem`: The `asm!` blocks does not read or write to any memory. This allows the compiler to cache the values of modified global variables in registers across the `asm!` block since it knows that they are not read or written to by the `asm!`. The compiler also assumes that this `asm!` block does not perform any kind of synchronization with other threads, e.g. via fences.\n-   `readonly`: The `asm!` block does not write to any memory. This allows the compiler to cache the values of unmodified global variables in registers across the `asm!` block since it knows that they are not written to by the `asm!`. The compiler also assumes that this `asm!` block does not perform any kind of synchronization with other threads, e.g. via fences.\n-   `preserves_flags`: The `asm!` block does not modify the flags register (defined in the rules below). This allows the compiler to avoid recomputing the condition flags after the `asm!` block.\n-   `noreturn`: The `asm!` block never returns, and its return type is defined as `!` (never). Behavior is undefined if execution falls through past the end of the asm code. A `noreturn` asm block behaves just like a function which doesn't return; notably, local variables in scope are not dropped before it is invoked.\n-   `nostack`: The `asm!` block does not push data to the stack, or write to the stack red-zone (if supported by the target). If this option is _not_ used then the stack pointer is guaranteed to be suitably aligned (according to the target ABI) for a function call.\n-   `att_syntax`: This option is only valid on x86, and causes the assembler to use the `.att_syntax prefix` mode of the GNU assembler. Register operands are substituted in with a leading `%`.\n-   `raw`: This causes the template string to be parsed as a raw assembly string, with no special handling for `{` and `}`. This is primarily useful when including raw assembly code from an external file using `include_str!`.\n\nThe compiler performs some additional checks on options:\n\n-   The `nomem` and `readonly` options are mutually exclusive: it is a compile-time error to specify both.\n-   It is a compile-time error to specify `pure` on an asm block with no outputs or only discarded outputs (`_`).\n-   It is a compile-time error to specify `noreturn` on an asm block with outputs.\n\n`global_asm!` only supports the `att_syntax` and `raw` options. The remaining options are not meaningful for global-scope inline assembly\n\n## [Rules for inline assembly](#rules-for-inline-assembly)\n\nTo avoid undefined behavior, these rules must be followed when using function-scope inline assembly (`asm!`):\n\n-   Any registers not specified as inputs will contain an undefined value on entry to the asm block.\n    -   An \"undefined value\" in the context of inline assembly means that the register can (non-deterministically) have any one of the possible values allowed by the architecture. Notably it is not the same as an LLVM `undef` which can have a different value every time you read it (since such a concept does not exist in assembly code).\n-   Any registers not specified as outputs must have the same value upon exiting the asm block as they had on entry, otherwise behavior is undefined.\n    -   This only applies to registers which can be specified as an input or output. Other registers follow target-specific rules.\n    -   Note that a `lateout` may be allocated to the same register as an `in`, in which case this rule does not apply. Code should not rely on this however since it depends on the results of register allocation.\n-   Behavior is undefined if execution unwinds out of an asm block.\n    -   This also applies if the assembly code calls a function which then unwinds.\n-   The set of memory locations that assembly code is allowed to read and write are the same as those allowed for an FFI function.\n    -   Refer to the unsafe code guidelines for the exact rules.\n    -   If the `readonly` option is set, then only memory reads are allowed.\n    -   If the `nomem` option is set then no reads or writes to memory are allowed.\n    -   These rules do not apply to memory which is private to the asm code, such as stack space allocated within the asm block.\n-   The compiler cannot assume that the instructions in the asm are the ones that will actually end up executed.\n    -   This effectively means that the compiler must treat the `asm!` as a black box and only take the interface specification into account, not the instructions themselves.\n    -   Runtime code patching is allowed, via target-specific mechanisms.\n-   Unless the `nostack` option is set, asm code is allowed to use stack space below the stack pointer.\n    -   On entry to the asm block the stack pointer is guaranteed to be suitably aligned (according to the target ABI) for a function call.\n    -   You are responsible for making sure you don't overflow the stack (e.g. use stack probing to ensure you hit a guard page).\n    -   You should adjust the stack pointer when allocating stack memory as required by the target ABI.\n    -   The stack pointer must be restored to its original value before leaving the asm block.\n-   If the `noreturn` option is set then behavior is undefined if execution falls through to the end of the asm block.\n-   If the `pure` option is set then behavior is undefined if the `asm!` has side-effects other than its direct outputs. Behavior is also undefined if two executions of the `asm!` code with the same inputs result in different outputs.\n    -   When used with the `nomem` option, \"inputs\" are just the direct inputs of the `asm!`.\n    -   When used with the `readonly` option, \"inputs\" comprise the direct inputs of the `asm!` and any memory that the `asm!` block is allowed to read.\n-   These flags registers must be restored upon exiting the asm block if the `preserves_flags` option is set:\n    -   x86\n        -   Status flags in `EFLAGS` (CF, PF, AF, ZF, SF, OF).\n        -   Floating-point status word (all).\n        -   Floating-point exception flags in `MXCSR` (PE, UE, OE, ZE, DE, IE).\n    -   ARM\n        -   Condition flags in `CPSR` (N, Z, C, V)\n        -   Saturation flag in `CPSR` (Q)\n        -   Greater than or equal flags in `CPSR` (GE).\n        -   Condition flags in `FPSCR` (N, Z, C, V)\n        -   Saturation flag in `FPSCR` (QC)\n        -   Floating-point exception flags in `FPSCR` (IDC, IXC, UFC, OFC, DZC, IOC).\n    -   AArch64\n        -   Condition flags (`NZCV` register).\n        -   Floating-point status (`FPSR` register).\n    -   RISC-V\n        -   Floating-point exception flags in `fcsr` (`fflags`).\n        -   Vector extension state (`vtype`, `vl`, `vcsr`).\n    -   LoongArch\n        -   Floating-point condition flags in `$fcc[0-7]`.\n-   On x86, the direction flag (DF in `EFLAGS`) is clear on entry to an asm block and must be clear on exit.\n    -   Behavior is undefined if the direction flag is set on exiting an asm block.\n-   On x86, the x87 floating-point register stack must remain unchanged unless all of the `st([0-7])` registers have been marked as clobbered with `out(\"st(0)\") _, out(\"st(1)\") _, ...`.\n    -   If all x87 registers are clobbered then the x87 register stack is guaranteed to be empty upon entering an `asm` block. Assembly code must ensure that the x87 register stack is also empty when exiting the asm block.\n-   The requirement of restoring the stack pointer and non-output registers to their original value only applies when exiting an `asm!` block.\n    -   This means that `asm!` blocks that never return (even if not marked `noreturn`) don't need to preserve these registers.\n    -   When returning to a different `asm!` block than you entered (e.g. for context switching), these registers must contain the value they had upon entering the `asm!` block that you are _exiting_.\n        -   You cannot exit an `asm!` block that has not been entered. Neither can you exit an `asm!` block that has already been exited (without first entering it again).\n        -   You are responsible for switching any target-specific state (e.g. thread-local storage, stack bounds).\n        -   You cannot jump from an address in one `asm!` block to an address in another, even within the same function or block, without treating their contexts as potentially different and requiring context switching. You cannot assume that any particular value in those contexts (e.g. current stack pointer or temporary values below the stack pointer) will remain unchanged between the two `asm!` blocks.\n        -   The set of memory locations that you may access is the intersection of those allowed by the `asm!` blocks you entered and exited.\n-   You cannot assume that two `asm!` blocks adjacent in source code, even without any other code between them, will end up in successive addresses in the binary without any other instructions between them.\n-   You cannot assume that an `asm!` block will appear exactly once in the output binary. The compiler is allowed to instantiate multiple copies of the `asm!` block, for example when the function containing it is inlined in multiple places.\n-   On x86, inline assembly must not end with an instruction prefix (such as `LOCK`) that would apply to instructions generated by the compiler.\n    -   The compiler is currently unable to detect this due to the way inline assembly is compiled, but may catch and reject this in the future.\n\n> **Note**: As a general rule, the flags covered by `preserves_flags` are those which are _not_ preserved when performing a function call.\n\n### [Correctness and Validity](#correctness-and-validity)\n\nIn addition to all of the previous rules, the string argument to `asm!` must ultimately become— after all other arguments are evaluated, formatting is performed, and operands are translated— assembly that is both syntactically correct and semantically valid for the target architecture. The formatting rules allow the compiler to generate assembly with correct syntax. Rules concerning operands permit valid translation of Rust operands into and out of `asm!`. Adherence to these rules is necessary, but not sufficient, for the final expanded assembly to be both correct and valid. For instance:\n\n-   arguments may be placed in positions which are syntactically incorrect after formatting\n-   an instruction may be correctly written, but given architecturally invalid operands\n-   an architecturally unspecified instruction may be assembled into unspecified code\n-   a set of instructions, each correct and valid, may cause undefined behavior if placed in immediate succession\n\nAs a result, these rules are _non-exhaustive_. The compiler is not required to check the correctness and validity of the initial string nor the final assembly that is generated. The assembler may check for correctness and validity but is not required to do so. When using `asm!`, a typographical error may be sufficient to make a program unsound, and the rules for assembly may include thousands of pages of architectural reference manuals. Programmers should exercise appropriate care, as invoking this `unsafe` capability comes with assuming the responsibility of not violating rules of both the compiler or the architecture.\n\n### [Directives Support](#directives-support)\n\nInline assembly supports a subset of the directives supported by both GNU AS and LLVM's internal assembler, given as follows. The result of using other directives is assembler-specific (and may cause an error, or may be accepted as-is).\n\nIf inline assembly includes any \"stateful\" directive that modifies how subsequent assembly is processed, the block must undo the effects of any such directives before the inline assembly ends.\n\nThe following directives are guaranteed to be supported by the assembler:\n\n-   `.2byte`\n-   `.4byte`\n-   `.8byte`\n-   `.align`\n-   `.alt_entry`\n-   `.ascii`\n-   `.asciz`\n-   `.balign`\n-   `.balignl`\n-   `.balignw`\n-   `.bss`\n-   `.byte`\n-   `.comm`\n-   `.data`\n-   `.def`\n-   `.double`\n-   `.endef`\n-   `.equ`\n-   `.equiv`\n-   `.eqv`\n-   `.fill`\n-   `.float`\n-   `.global`\n-   `.globl`\n-   `.inst`\n-   `.lcomm`\n-   `.long`\n-   `.octa`\n-   `.option`\n-   `.p2align`\n-   `.popsection`\n-   `.private_extern`\n-   `.pushsection`\n-   `.quad`\n-   `.scl`\n-   `.section`\n-   `.set`\n-   `.short`\n-   `.size`\n-   `.skip`\n-   `.sleb128`\n-   `.space`\n-   `.string`\n-   `.text`\n-   `.type`\n-   `.uleb128`\n-   `.word`\n\n#### [Target Specific Directive Support](#target-specific-directive-support)\n\n##### [Dwarf Unwinding](#dwarf-unwinding)\n\nThe following directives are supported on ELF targets that support DWARF unwind info:\n\n-   `.cfi_adjust_cfa_offset`\n-   `.cfi_def_cfa`\n-   `.cfi_def_cfa_offset`\n-   `.cfi_def_cfa_register`\n-   `.cfi_endproc`\n-   `.cfi_escape`\n-   `.cfi_lsda`\n-   `.cfi_offset`\n-   `.cfi_personality`\n-   `.cfi_register`\n-   `.cfi_rel_offset`\n-   `.cfi_remember_state`\n-   `.cfi_restore`\n-   `.cfi_restore_state`\n-   `.cfi_return_column`\n-   `.cfi_same_value`\n-   `.cfi_sections`\n-   `.cfi_signal_frame`\n-   `.cfi_startproc`\n-   `.cfi_undefined`\n-   `.cfi_window_save`\n\n##### [Structured Exception Handling](#structured-exception-handling)\n\nOn targets with structured exception Handling, the following additional directives are guaranteed to be supported:\n\n-   `.seh_endproc`\n-   `.seh_endprologue`\n-   `.seh_proc`\n-   `.seh_pushreg`\n-   `.seh_savereg`\n-   `.seh_setframe`\n-   `.seh_stackalloc`\n\n##### [x86 (32-bit and 64-bit)](#x86-32-bit-and-64-bit)\n\nOn x86 targets, both 32-bit and 64-bit, the following additional directives are guaranteed to be supported:\n\n-   `.nops`\n-   `.code16`\n-   `.code32`\n-   `.code64`\n\nUse of `.code16`, `.code32`, and `.code64` directives are only supported if the state is reset to the default before exiting the assembly block. 32-bit x86 uses `.code32` by default, and x86\\_64 uses `.code64` by default.\n\n##### [ARM (32-bit)](#arm-32-bit)\n\nOn ARM, the following additional directives are guaranteed to be supported:\n\n-   `.even`\n-   `.fnstart`\n-   `.fnend`\n-   `.save`\n-   `.movsp`\n-   `.code`\n-   `.thumb`\n-   `.thumb_func`\n\n## [Unsafety](#unsafety)\n\nUnsafe operations are those that can potentially violate the memory-safety guarantees of Rust's static semantics.\n\nThe following language level features cannot be used in the safe subset of Rust:\n\n-   Dereferencing a [raw pointer](types/pointer.html).\n-   Reading or writing a [mutable](about:blank/items/static-items.html#mutable-statics) or [external](items/external-blocks.html) static variable.\n-   Accessing a field of a [`union`](items/unions.html), other than to assign to it.\n-   Calling an unsafe function (including an intrinsic or foreign function).\n-   Implementing an [unsafe trait](about:blank/items/traits.html#unsafe-traits).\n\n## [The `unsafe` keyword](#the-unsafe-keyword)\n\nThe `unsafe` keyword can occur in several different contexts: unsafe functions (`unsafe fn`), unsafe blocks (`unsafe {}`), unsafe traits (`unsafe trait`), and unsafe trait implementations (`unsafe impl`). It plays several different roles, depending on where it is used and whether the `unsafe_op_in_unsafe_fn` lint is enabled:\n\n-   it is used to mark code that _defines_ extra safety conditions (`unsafe fn`, `unsafe trait`)\n-   it is used to mark code that needs to _satisfy_ extra safety conditions (`unsafe {}`, `unsafe impl`, `unsafe fn` without [`unsafe_op_in_unsafe_fn`](about:blank/rustc/lints/listing/allowed-by-default.html#unsafe-op-in-unsafe-fn))\n\nThe following discusses each of these cases. See the [keyword documentation](../std/keyword.unsafe.html) for some illustrative examples.\n\n## [Unsafe functions (`unsafe fn`)](#unsafe-functions-unsafe-fn)\n\nUnsafe functions are functions that are not safe in all contexts and/or for all possible inputs. We say they have _extra safety conditions_, which are requirements that must be upheld by all callers and that the compiler does not check. For example, [`get_unchecked`](about:blank/std/primitive.slice.html#method.get_unchecked) has the extra safety condition that the index must be in-bounds. The unsafe function should come with documentation explaining what those extra safety conditions are.\n\nSuch a function must be prefixed with the keyword `unsafe` and can only be called from inside an `unsafe` block, or inside `unsafe fn` without the [`unsafe_op_in_unsafe_fn`](about:blank/rustc/lints/listing/allowed-by-default.html#unsafe-op-in-unsafe-fn) lint.\n\n## [Unsafe blocks (`unsafe {}`)](#unsafe-blocks-unsafe-)\n\nA block of code can be prefixed with the `unsafe` keyword, to permit calling `unsafe` functions or dereferencing raw pointers. By default, the body of an unsafe function is also considered to be an unsafe block; this can be changed by enabling the [`unsafe_op_in_unsafe_fn`](about:blank/rustc/lints/listing/allowed-by-default.html#unsafe-op-in-unsafe-fn) lint.\n\nBy putting operations into an unsafe block, the programmer states that they have taken care of satisfying the extra safety conditions of all operations inside that block.\n\nUnsafe blocks are the logical dual to unsafe functions: where unsafe functions define a proof obligation that callers must uphold, unsafe blocks state that all relevant proof obligations of functions or operations called inside the block have been discharged. There are many ways to discharge proof obligations; for example, there could be run-time checks or data structure invariants that guarantee that certain properties are definitely true, or the unsafe block could be inside an `unsafe fn`, in which case the block can use the proof obligations of that function to discharge the proof obligations arising inside the block.\n\nUnsafe blocks are used to wrap foreign libraries, make direct use of hardware or implement features not directly present in the language. For example, Rust provides the language features necessary to implement memory-safe concurrency in the language but the implementation of threads and message passing in the standard library uses unsafe blocks.\n\nRust's type system is a conservative approximation of the dynamic safety requirements, so in some cases there is a performance cost to using safe code. For example, a doubly-linked list is not a tree structure and can only be represented with reference-counted pointers in safe code. By using `unsafe` blocks to represent the reverse links as raw pointers, it can be implemented without reference counting. (See [\"Learn Rust With Entirely Too Many Linked Lists\"](https://rust-unofficial.github.io/too-many-lists/) for a more in-depth exploration of this particular example.)\n\n## [Unsafe traits (`unsafe trait`)](#unsafe-traits-unsafe-trait)\n\nAn unsafe trait is a trait that comes with extra safety conditions that must be upheld by _implementations_ of the trait. The unsafe trait should come with documentation explaining what those extra safety conditions are.\n\nSuch a trait must be prefixed with the keyword `unsafe` and can only be implemented by `unsafe impl` blocks.\n\n## [Unsafe trait implementations (`unsafe impl`)](#unsafe-trait-implementations-unsafe-impl)\n\nWhen implementing an unsafe trait, the implementation needs to be prefixed with the `unsafe` keyword. By writing `unsafe impl`, the programmer states that they have taken care of satisfying the extra safety conditions required by the trait.\n\nUnsafe trait implementations are the logical dual to unsafe traits: where unsafe traits define a proof obligation that implementations must uphold, unsafe implementations state that all relevant proof obligations have been discharged.\n\n## [Behavior considered undefined](#behavior-considered-undefined)\n\nRust code is incorrect if it exhibits any of the behaviors in the following list. This includes code within `unsafe` blocks and `unsafe` functions. `unsafe` only means that avoiding undefined behavior is on the programmer; it does not change anything about the fact that Rust programs must never cause undefined behavior.\n\nIt is the programmer's responsibility when writing `unsafe` code to ensure that any safe code interacting with the `unsafe` code cannot trigger these behaviors. `unsafe` code that satisfies this property for any safe client is called _sound_; if `unsafe` code can be misused by safe code to exhibit undefined behavior, it is _unsound_.\n\n_**Warning:**_ The following list is not exhaustive; it may grow or shrink. There is no formal model of Rust's semantics for what is and is not allowed in unsafe code, so there may be more behavior considered unsafe. We also reserve the right to make some of the behavior in that list defined in the future. In other words, this list does not say that anything will _definitely_ always be undefined in all future Rust version (but we might make such commitments for some list items in the future).\n\nPlease read the [Rustonomicon](../nomicon/index.html) before writing unsafe code.\n\n-   Data races.\n    \n-   Accessing (loading from or storing to) a place that is [dangling](about:blank/behavior-considered-undefined.html#dangling-pointers) or [based on a misaligned pointer](about:blank/behavior-considered-undefined.html#places-based-on-misaligned-pointers).\n    \n-   Performing a place projection that violates the requirements of [in-bounds pointer arithmetic](about:blank/std/primitive.pointer.html#method.offset). A place projection is a [field expression](expressions/field-expr.html), a [tuple index expression](about:blank/expressions/tuple-expr.html#tuple-indexing-expressions), or an [array/slice index expression](about:blank/expressions/array-expr.html#array-and-slice-indexing-expressions).\n    \n-   Breaking the [pointer aliasing rules](http://llvm.org/docs/LangRef.html#pointer-aliasing-rules). `Box<T>`, `&mut T` and `&T` follow LLVM’s scoped [noalias](http://llvm.org/docs/LangRef.html#noalias) model, except if the `&T` contains an [`UnsafeCell<U>`](../std/cell/struct.UnsafeCell.html). References and boxes must not be [dangling](about:blank/behavior-considered-undefined.html#dangling-pointers) while they are live. The exact liveness duration is not specified, but some bounds exist:\n    \n    -   For references, the liveness duration is upper-bounded by the syntactic lifetime assigned by the borrow checker; it cannot be live any _longer_ than that lifetime.\n    -   Each time a reference or box is passed to or returned from a function, it is considered live.\n    -   When a reference (but not a `Box`!) is passed to a function, it is live at least as long as that function call, again except if the `&T` contains an [`UnsafeCell<U>`](../std/cell/struct.UnsafeCell.html).\n    \n    All this also applies when values of these types are passed in a (nested) field of a compound type, but not behind pointer indirections.\n    \n-   Mutating immutable bytes. All bytes inside a [`const`](items/constant-items.html) item are immutable. The bytes owned by an immutable binding are immutable, unless those bytes are part of an [`UnsafeCell<U>`](../std/cell/struct.UnsafeCell.html).\n    \n    Moreover, the bytes [pointed to](about:blank/behavior-considered-undefined.html#pointed-to-bytes) by a shared reference, including transitively through other references (both shared and mutable) and `Box`es, are immutable; transitivity includes those references stored in fields of compound types.\n    \n    A mutation is any write of more than 0 bytes which overlaps with any of the relevant bytes (even if that write does not change the memory contents).\n    \n-   Invoking undefined behavior via compiler intrinsics.\n    \n-   Executing code compiled with platform features that the current platform does not support (see [`target_feature`](about:blank/attributes/codegen.html#the-target_feature-attribute)), _except_ if the platform explicitly documents this to be safe.\n    \n-   Calling a function with the wrong call ABI or unwinding from a function with the wrong unwind ABI.\n    \n-   Producing an invalid value, even in private fields and locals. \"Producing\" a value happens any time a value is assigned to or read from a place, passed to a function/primitive operation or returned from a function/primitive operation. The following values are invalid (at their respective type):\n    \n    -   A value other than `false` (`0`) or `true` (`1`) in a [`bool`](types/boolean.html).\n        \n    -   A discriminant in an `enum` not included in the type definition.\n        \n    -   A null `fn` pointer.\n        \n    -   A value in a `char` which is a surrogate or above `char::MAX`.\n        \n    -   A `!` (all values are invalid for this type).\n        \n    -   An integer (`i*`/`u*`), floating point value (`f*`), or raw pointer obtained from [uninitialized memory](http://llvm.org/docs/LangRef.html#undefined-values), or uninitialized memory in a `str`.\n        \n    -   A reference or `Box<T>` that is [dangling](about:blank/behavior-considered-undefined.html#dangling-pointers), misaligned, or points to an invalid value.\n        \n    -   Invalid metadata in a wide reference, `Box<T>`, or raw pointer:\n        \n        -   `dyn Trait` metadata is invalid if it is not a pointer to a vtable for `Trait` that matches the actual dynamic trait the pointer or reference points to.\n        -   Slice metadata is invalid if the length is not a valid `usize` (i.e., it must not be read from uninitialized memory).\n    -   Invalid values for a type with a custom definition of invalid values. In the standard library, this affects [`NonNull<T>`](../core/ptr/struct.NonNull.html) and [`NonZero*`](../core/num/index.html).\n        \n        > **Note**: `rustc` achieves this with the unstable `rustc_layout_scalar_valid_range_*` attributes.\n        \n-   Incorrect use of inline assembly. For more details, refer to the [rules](about:blank/inline-assembly.html#rules-for-inline-assembly) to follow when writing code that uses inline assembly.\n    \n-   **In [const context](about:blank/const_eval.html#const-context)**: transmuting or otherwise reinterpreting a pointer (reference, raw pointer, or function pointer) into some allocated object as a non-pointer type (such as integers). 'Reinterpreting' refers to loading the pointer value at integer type without a cast, e.g. by doing raw pointer casts or using a union.\n    \n\n**Note:** Uninitialized memory is also implicitly invalid for any type that has a restricted set of valid values. In other words, the only cases in which reading uninitialized memory is permitted are inside `union`s and in \"padding\" (the gaps between the fields/elements of a type).\n\n> **Note**: Undefined behavior affects the entire program. For example, calling a function in C that exhibits undefined behavior of C means your entire program contains undefined behaviour that can also affect the Rust code. And vice versa, undefined behavior in Rust can cause adverse affects on code executed by any FFI calls to other languages.\n\n### [Pointed-to bytes](#pointed-to-bytes)\n\nThe span of bytes a pointer or reference \"points to\" is determined by the pointer value and the size of the pointee type (using `size_of_val`).\n\n### [Places based on misaligned pointers](#places-based-on-misaligned-pointers)\n\nA place is said to be \"based on a misaligned pointer\" if the last `*` projection during place computation was performed on a pointer that was not aligned for its type. (If there is no `*` projection in the place expression, then this is accessing the field of a local and rustc will guarantee proper alignment. If there are multiple `*` projection, then each of them incurs a load of the pointer-to-be-dereferenced itself from memory, and each of these loads is subject to the alignment constraint. Note that some `*` projections can be omitted in surface Rust syntax due to automatic dereferencing; we are considering the fully expanded place expression here.)\n\nFor instance, if `ptr` has type `*const S` where `S` has an alignment of 8, then `ptr` must be 8-aligned or else `(*ptr).f` is \"based on an misaligned pointer\". This is true even if the type of the field `f` is `u8` (i.e., a type with alignment 1). In other words, the alignment requirement derives from the type of the pointer that was dereferenced, _not_ the type of the field that is being accessed.\n\nNote that a place based on a misaligned pointer only leads to Undefined Behavior when it is loaded from or stored to. `addr_of!`/`addr_of_mut!` on such a place is allowed. `&`/`&mut` on a place requires the alignment of the field type (or else the program would be \"producing an invalid value\"), which generally is a less restrictive requirement than being based on an aligned pointer. Taking a reference will lead to a compiler error in cases where the field type might be more aligned than the type that contains it, i.e., `repr(packed)`. This means that being based on an aligned pointer is always sufficient to ensure that the new reference is aligned, but it is not always necessary.\n\n### [Dangling pointers](#dangling-pointers)\n\nA reference/pointer is \"dangling\" if it is null or not all of the bytes it [points to](about:blank/behavior-considered-undefined.html#pointed-to-bytes) are part of the same live allocation (so in particular they all have to be part of _some_ allocation).\n\nIf the size is 0, then the pointer must either point inside of a live allocation (including pointing just after the last byte of the allocation), or it must be directly constructed from a non-zero integer literal.\n\nNote that dynamically sized types (such as slices and strings) point to their entire range, so it is important that the length metadata is never too large. In particular, the dynamic size of a Rust value (as determined by `size_of_val`) must never exceed `isize::MAX`.\n\n## [Behavior not considered `unsafe`](#behavior-not-considered-unsafe)\n\nThe Rust compiler does not consider the following behaviors _unsafe_, though a programmer may (should) find them undesirable, unexpected, or erroneous.\n\n##### [Deadlocks](#deadlocks)\n\n##### [Leaks of memory and other resources](#leaks-of-memory-and-other-resources)\n\n##### [Exiting without calling destructors](#exiting-without-calling-destructors)\n\n##### [Exposing randomized base addresses through pointer leaks](#exposing-randomized-base-addresses-through-pointer-leaks)\n\n##### [Integer overflow](#integer-overflow)\n\nIf a program contains arithmetic overflow, the programmer has made an error. In the following discussion, we maintain a distinction between arithmetic overflow and wrapping arithmetic. The first is erroneous, while the second is intentional.\n\nWhen the programmer has enabled `debug_assert!` assertions (for example, by enabling a non-optimized build), implementations must insert dynamic checks that `panic` on overflow. Other kinds of builds may result in `panics` or silently wrapped values on overflow, at the implementation's discretion.\n\nIn the case of implicitly-wrapped overflow, implementations must provide well-defined (even if still considered erroneous) results by using two's complement overflow conventions.\n\nThe integral types provide inherent methods to allow programmers explicitly to perform wrapping arithmetic. For example, `i32::wrapping_add` provides two's complement, wrapping addition.\n\nThe standard library also provides a `Wrapping<T>` newtype which ensures all standard arithmetic operations for `T` have wrapping semantics.\n\nSee [RFC 560](https://github.com/rust-lang/rfcs/blob/master/text/0560-integer-overflow.md) for error conditions, rationale, and more details about integer overflow.\n\n##### [Logic errors](#logic-errors)\n\nSafe code may impose extra logical constraints that can be checked at neither compile-time nor runtime. If a program breaks such a constraint, the behavior may be unspecified but will not result in undefined behavior. This could include panics, incorrect results, aborts, and non-termination. The behavior may also differ between runs, builds, or kinds of build.\n\nFor example, implementing both `Hash` and `Eq` requires that values considered equal have equal hashes. Another example are data structures like `BinaryHeap`, `BTreeMap`, `BTreeSet`, `HashMap` and `HashSet` which describe constraints on the modification of their keys while they are in the data structure. Violating such constraints is not considered unsafe, yet the program is considered erroneous and its behavior unpredictable.\n\n## [Constant evaluation](#constant-evaluation)\n\nConstant evaluation is the process of computing the result of [expressions](expressions.html) during compilation. Only a subset of all expressions can be evaluated at compile-time.\n\n## [Constant expressions](#constant-expressions)\n\nCertain forms of expressions, called constant expressions, can be evaluated at compile time. In [const contexts](about:blank/const_eval.html#const-context), these are the only allowed expressions, and are always evaluated at compile time. In other places, such as [let statements](about:blank/statements.html#let-statements), constant expressions _may_ be, but are not guaranteed to be, evaluated at compile time. Behaviors such as out of bounds [array indexing](about:blank/expressions/array-expr.html#array-and-slice-indexing-expressions) or [overflow](about:blank/expressions/operator-expr.html#overflow) are compiler errors if the value must be evaluated at compile time (i.e. in const contexts). Otherwise, these behaviors are warnings, but will likely panic at run-time.\n\nThe following expressions are constant expressions, so long as any operands are also constant expressions and do not cause any [`Drop::drop`](destructors.html) calls to be run.\n\n-   [Literals](expressions/literal-expr.html).\n-   [Const parameters](items/generics.html).\n-   [Paths](expressions/path-expr.html) to [functions](items/functions.html) and [constants](items/constant-items.html). Recursively defining constants is not allowed.\n-   Paths to [statics](items/static-items.html). These are only allowed within the initializer of a static.\n-   [Tuple expressions](expressions/tuple-expr.html).\n-   [Array expressions](expressions/array-expr.html).\n-   [Struct](expressions/struct-expr.html) expressions.\n-   [Block expressions](expressions/block-expr.html), including `unsafe` and `const` blocks.\n    -   [let statements](about:blank/statements.html#let-statements) and thus irrefutable [patterns](patterns.html), including mutable bindings\n    -   [assignment expressions](about:blank/expressions/operator-expr.html#assignment-expressions)\n    -   [compound assignment expressions](about:blank/expressions/operator-expr.html#compound-assignment-expressions)\n    -   [expression statements](about:blank/statements.html#expression-statements)\n-   [Field](expressions/field-expr.html) expressions.\n-   Index expressions, [array indexing](about:blank/expressions/array-expr.html#array-and-slice-indexing-expressions) or [slice](types/slice.html) with a `usize`.\n-   [Range expressions](expressions/range-expr.html).\n-   [Closure expressions](expressions/closure-expr.html) which don't capture variables from the environment.\n-   Built-in [negation](about:blank/expressions/operator-expr.html#negation-operators), [arithmetic](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [logical](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [comparison](about:blank/expressions/operator-expr.html#comparison-operators) or [lazy boolean](about:blank/expressions/operator-expr.html#lazy-boolean-operators) operators used on integer and floating point types, `bool`, and `char`.\n-   Shared [borrow](about:blank/expressions/operator-expr.html#borrow-operators)s, except if applied to a type with [interior mutability](interior-mutability.html).\n-   The [dereference operator](about:blank/expressions/operator-expr.html#the-dereference-operator) except for raw pointers.\n-   [Grouped](expressions/grouped-expr.html) expressions.\n-   [Cast](about:blank/expressions/operator-expr.html#type-cast-expressions) expressions, except\n    -   pointer to address casts and\n    -   function pointer to address casts.\n-   Calls of [const functions](about:blank/items/functions.html#const-functions) and const methods.\n-   [loop](about:blank/expressions/loop-expr.html#infinite-loops), [while](about:blank/expressions/loop-expr.html#predicate-loops) and [`while let`](about:blank/expressions/loop-expr.html#predicate-pattern-loops) expressions.\n-   [if](about:blank/expressions/if-expr.html#if-expressions), [`if let`](about:blank/expressions/if-expr.html#if-let-expressions) and [match](expressions/match-expr.html) expressions.\n\n## [Const context](#const-context)\n\nA _const context_ is one of the following:\n\n-   [Array type length expressions](types/array.html)\n-   [Array repeat length expressions](expressions/array-expr.html)\n-   The initializer of\n    -   [constants](items/constant-items.html)\n    -   [statics](items/static-items.html)\n    -   [enum discriminants](about:blank/items/enumerations.html#discriminants)\n-   A [const generic argument](about:blank/items/generics.html#const-generics)\n-   A [const block](about:blank/expressions/block-expr.html#const-blocks)\n\n## [Const Functions](#const-functions-1)\n\nA _const fn_ is a function that one is permitted to call from a const context. Declaring a function `const` has no effect on any existing uses, it only restricts the types that arguments and the return type may use, as well as prevent various expressions from being used within it. You can freely do anything with a const function that you can do with a regular function.\n\nWhen called from a const context, the function is interpreted by the compiler at compile time. The interpretation happens in the environment of the compilation target and not the host. So `usize` is `32` bits if you are compiling against a `32` bit system, irrelevant of whether you are building on a `64` bit or a `32` bit system.\n\nConst functions have various restrictions to make sure that they can be evaluated at compile-time. It is, for example, not possible to write a random number generator as a const function. Calling a const function at compile-time will always yield the same result as calling it at runtime, even when called multiple times. There's one exception to this rule: if you are doing complex floating point operations in extreme situations, then you might get (very slightly) different results. It is advisable to not make array lengths and enum discriminants depend on floating point computations.\n\nNotable features that are allowed in const contexts but not in const functions include:\n\n-   floating point operations\n    -   floating point values are treated just like generic parameters without trait bounds beyond `Copy`. So you cannot do anything with them but copy/move them around.\n\nConversely, the following are possible in a const function, but not in a const context:\n\n-   Use of generic type and lifetime parameters.\n    -   Const contexts do allow limited use of [const generic parameters](about:blank/items/generics.html#const-generics).\n\n## [Application Binary Interface (ABI)](#application-binary-interface-abi)\n\nThis section documents features that affect the ABI of the compiled output of a crate.\n\nSee _[extern functions](about:blank/items/functions.html#extern-function-qualifier)_ for information on specifying the ABI for exporting functions. See _[external blocks](items/external-blocks.html)_ for information on specifying the ABI for linking external libraries.\n\n## [The `used` attribute](#the-used-attribute)\n\nThe _`used` attribute_ can only be applied to [`static` items](items/static-items.html). This [attribute](attributes.html) forces the compiler to keep the variable in the output object file (.o, .rlib, etc. excluding final binaries) even if the variable is not used, or referenced, by any other item in the crate. However, the linker is still free to remove such an item.\n\nBelow is an example that shows under what conditions the compiler keeps a `static` item in the output object file.\n\n```rust\n#![allow(unused)]\nfn main() {\n// foo.rs\n\n// This is kept because of `#[used]`:\n#[used]\nstatic FOO: u32 = 0;\n\n// This is removable because it is unused:\n#[allow(dead_code)]\nstatic BAR: u32 = 0;\n\n// This is kept because it is publicly reachable:\npub static BAZ: u32 = 0;\n\n// This is kept because it is referenced by a public, reachable function:\nstatic QUUX: u32 = 0;\n\npub fn quux() -> &'static u32 {\n    &QUUX\n}\n\n// This is removable because it is referenced by a private, unused (dead) function:\nstatic CORGE: u32 = 0;\n\n#[allow(dead_code)]\nfn corge() -> &'static u32 {\n    &CORGE\n}\n}\n```\n\n```console\n$ rustc -O --emit=obj --crate-type=rlib foo.rs\n\n$ nm -C foo.o\n0000000000000000 R foo::BAZ\n0000000000000000 r foo::FOO\n0000000000000000 R foo::QUUX\n0000000000000000 T foo::quux\n\n```\n\n## [The `no_mangle` attribute](#the-no_mangle-attribute)\n\nThe _`no_mangle` attribute_ may be used on any [item](items.html) to disable standard symbol name mangling. The symbol for the item will be the identifier of the item's name.\n\nAdditionally, the item will be publicly exported from the produced library or object file, similar to the [`used` attribute](about:blank/abi.html#the-used-attribute).\n\n## [The `link_section` attribute](#the-link_section-attribute)\n\nThe _`link_section` attribute_ specifies the section of the object file that a [function](items/functions.html) or [static](items/static-items.html)'s content will be placed into. It uses the [_MetaNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to specify the section name.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[no_mangle]\n#[link_section = \".example_section\"]\npub static VAR1: u32 = 1;\n}\n```\n\n## [The `export_name` attribute](#the-export_name-attribute)\n\nThe _`export_name` attribute_ specifies the name of the symbol that will be exported on a [function](items/functions.html) or [static](items/static-items.html). It uses the [_MetaNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to specify the symbol name.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[export_name = \"exported_symbol_name\"]\npub fn name_in_rust() { }\n}\n```\n\n## [The Rust runtime](#the-rust-runtime)\n\nThis section documents features that define some aspects of the Rust runtime.\n\n## [The `panic_handler` attribute](#the-panic_handler-attribute)\n\nThe _`panic_handler` attribute_ can only be applied to a function with signature `fn(&PanicInfo) -> !`. The function marked with this [attribute](attributes.html) defines the behavior of panics. The [`PanicInfo`](../core/panic/struct.PanicInfo.html) struct contains information about the location of the panic. There must be a single `panic_handler` function in the dependency graph of a binary, dylib or cdylib crate.\n\nBelow is shown a `panic_handler` function that logs the panic message and then halts the thread.\n\n```rust\n#![no_std]\n\nuse core::fmt::{self, Write};\nuse core::panic::PanicInfo;\n\nstruct Sink {\n    // ..\n   _0: (),\n}\n\nimpl Sink {\n    fn new() -> Sink { Sink { _0: () }}\n}\n\nimpl fmt::Write for Sink {\n    fn write_str(&mut self, _: &str) -> fmt::Result { Ok(()) }\n}\n\n#[panic_handler]\nfn panic(info: &PanicInfo) -> ! {\n    let mut sink = Sink::new();\n\n    // logs \"panicked at '$reason', src/main.rs:27:4\" to some `sink`\n    let _ = writeln!(sink, \"{}\", info);\n\n    loop {}\n}\n```\n\n### [Standard behavior](#standard-behavior)\n\nThe standard library provides an implementation of `panic_handler` that defaults to unwinding the stack but that can be [changed to abort the process](../book/ch09-01-unrecoverable-errors-with-panic.html). The standard library's panic behavior can be modified at runtime with the [set\\_hook](../std/panic/fn.set_hook.html) function.\n\n## [The `global_allocator` attribute](#the-global_allocator-attribute)\n\nThe _`global_allocator` attribute_ is used on a [static item](items/static-items.html) implementing the [`GlobalAlloc`](../alloc/alloc/trait.GlobalAlloc.html) trait to set the global allocator.\n\n## [The `windows_subsystem` attribute](#the-windows_subsystem-attribute)\n\nThe _`windows_subsystem` attribute_ may be applied at the crate level to set the [subsystem](https://msdn.microsoft.com/en-us/library/fcc1zstk.aspx) when linking on a Windows target. It uses the [_MetaNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to specify the subsystem with a value of either `console` or `windows`. This attribute is ignored on non-Windows targets, and for non-`bin` [crate types](linkage.html).\n\nThe \"console\" subsystem is the default. If a console process is run from an existing console then it will be attached to that console, otherwise a new console window will be created.\n\nThe \"windows\" subsystem is commonly used by GUI applications that do not want to display a console window on startup. It will run detached from any existing console.\n\n```rust\n#![allow(unused)]\n#![windows_subsystem = \"windows\"]\nfn main() {\n}\n```\n\n## [Appendices](#appendices)\n\n## [Appendix: Macro Follow-Set Ambiguity Formal Specification](#appendix-macro-follow-set-ambiguity-formal-specification)\n\nThis page documents the formal specification of the follow rules for [Macros By Example](macros-by-example.html). They were originally specified in [RFC 550](https://github.com/rust-lang/rfcs/blob/master/text/0550-macro-future-proofing.md), from which the bulk of this text is copied, and expanded upon in subsequent RFCs.\n\n## [Definitions & Conventions](#definitions--conventions)\n\n-   `macro`: anything invokable as `foo!(...)` in source code.\n-   `MBE`: macro-by-example, a macro defined by `macro_rules`.\n-   `matcher`: the left-hand-side of a rule in a `macro_rules` invocation, or a subportion thereof.\n-   `macro parser`: the bit of code in the Rust parser that will parse the input using a grammar derived from all of the matchers.\n-   `fragment`: The class of Rust syntax that a given matcher will accept (or \"match\").\n-   `repetition` : a fragment that follows a regular repeating pattern\n-   `NT`: non-terminal, the various \"meta-variables\" or repetition matchers that can appear in a matcher, specified in MBE syntax with a leading `$` character.\n-   `simple NT`: a \"meta-variable\" non-terminal (further discussion below).\n-   `complex NT`: a repetition matching non-terminal, specified via repetition operators (`*`, `+`, `?`).\n-   `token`: an atomic element of a matcher; i.e. identifiers, operators, open/close delimiters, _and_ simple NT's.\n-   `token tree`: a tree structure formed from tokens (the leaves), complex NT's, and finite sequences of token trees.\n-   `delimiter token`: a token that is meant to divide the end of one fragment and the start of the next fragment.\n-   `separator token`: an optional delimiter token in an complex NT that separates each pair of elements in the matched repetition.\n-   `separated complex NT`: a complex NT that has its own separator token.\n-   `delimited sequence`: a sequence of token trees with appropriate open- and close-delimiters at the start and end of the sequence.\n-   `empty fragment`: The class of invisible Rust syntax that separates tokens, i.e. whitespace, or (in some lexical contexts), the empty token sequence.\n-   `fragment specifier`: The identifier in a simple NT that specifies which fragment the NT accepts.\n-   `language`: a context-free language.\n\nExample:\n\n```rust\n#![allow(unused)]\nfn main() {\nmacro_rules! i_am_an_mbe {\n    (start $foo:expr $($i:ident),* end) => ($foo)\n}\n}\n```\n\n`(start $foo:expr $($i:ident),* end)` is a matcher. The whole matcher is a delimited sequence (with open- and close-delimiters `(` and `)`), and `$foo` and `$i` are simple NT's with `expr` and `ident` as their respective fragment specifiers.\n\n`$(i:ident),*` is _also_ an NT; it is a complex NT that matches a comma-separated repetition of identifiers. The `,` is the separator token for the complex NT; it occurs in between each pair of elements (if any) of the matched fragment.\n\nAnother example of a complex NT is `$(hi $e:expr ;)+`, which matches any fragment of the form `hi <expr>; hi <expr>; ...` where `hi <expr>;` occurs at least once. Note that this complex NT does not have a dedicated separator token.\n\n(Note that Rust's parser ensures that delimited sequences always occur with proper nesting of token tree structure and correct matching of open- and close-delimiters.)\n\nWe will tend to use the variable \"M\" to stand for a matcher, variables \"t\" and \"u\" for arbitrary individual tokens, and the variables \"tt\" and \"uu\" for arbitrary token trees. (The use of \"tt\" does present potential ambiguity with its additional role as a fragment specifier; but it will be clear from context which interpretation is meant.)\n\n\"SEP\" will range over separator tokens, \"OP\" over the repetition operators `*`, `+`, and `?`, \"OPEN\"/\"CLOSE\" over matching token pairs surrounding a delimited sequence (e.g. `[` and `]`).\n\nGreek letters \"α\" \"β\" \"γ\" \"δ\" stand for potentially empty token-tree sequences. (However, the Greek letter \"ε\" (epsilon) has a special role in the presentation and does not stand for a token-tree sequence.)\n\n-   This Greek letter convention is usually just employed when the presence of a sequence is a technical detail; in particular, when we wish to _emphasize_ that we are operating on a sequence of token-trees, we will use the notation \"tt ...\" for the sequence, not a Greek letter.\n\nNote that a matcher is merely a token tree. A \"simple NT\", as mentioned above, is an meta-variable NT; thus it is a non-repetition. For example, `$foo:ty` is a simple NT but `$($foo:ty)+` is a complex NT.\n\nNote also that in the context of this formalism, the term \"token\" generally _includes_ simple NTs.\n\nFinally, it is useful for the reader to keep in mind that according to the definitions of this formalism, no simple NT matches the empty fragment, and likewise no token matches the empty fragment of Rust syntax. (Thus, the _only_ NT that can match the empty fragment is a complex NT.) This is not actually true, because the `vis` matcher can match an empty fragment. Thus, for the purposes of the formalism, we will treat `$v:vis` as actually being `$($v:vis)?`, with a requirement that the matcher match an empty fragment.\n\n### [The Matcher Invariants](#the-matcher-invariants)\n\nTo be valid, a matcher must meet the following three invariants. The definitions of FIRST and FOLLOW are described later.\n\n1.  For any two successive token tree sequences in a matcher `M` (i.e. `M = ... tt uu ...`) with `uu ...` nonempty, we must have FOLLOW(`... tt`) ∪ {ε} ⊇ FIRST(`uu ...`).\n2.  For any separated complex NT in a matcher, `M = ... $(tt ...) SEP OP ...`, we must have `SEP` ∈ FOLLOW(`tt ...`).\n3.  For an unseparated complex NT in a matcher, `M = ... $(tt ...) OP ...`, if OP = `*` or `+`, we must have FOLLOW(`tt ...`) ⊇ FIRST(`tt ...`).\n\nThe first invariant says that whatever actual token that comes after a matcher, if any, must be somewhere in the predetermined follow set. This ensures that a legal macro definition will continue to assign the same determination as to where `... tt` ends and `uu ...` begins, even as new syntactic forms are added to the language.\n\nThe second invariant says that a separated complex NT must use a separator token that is part of the predetermined follow set for the internal contents of the NT. This ensures that a legal macro definition will continue to parse an input fragment into the same delimited sequence of `tt ...`'s, even as new syntactic forms are added to the language.\n\nThe third invariant says that when we have a complex NT that can match two or more copies of the same thing with no separation in between, it must be permissible for them to be placed next to each other as per the first invariant. This invariant also requires they be nonempty, which eliminates a possible ambiguity.\n\n**NOTE: The third invariant is currently unenforced due to historical oversight and significant reliance on the behaviour. It is currently undecided what to do about this going forward. Macros that do not respect the behaviour may become invalid in a future edition of Rust. See the [tracking issue](https://github.com/rust-lang/rust/issues/56575).**\n\n### [FIRST and FOLLOW, informally](#first-and-follow-informally)\n\nA given matcher M maps to three sets: FIRST(M), LAST(M) and FOLLOW(M).\n\nEach of the three sets is made up of tokens. FIRST(M) and LAST(M) may also contain a distinguished non-token element ε (\"epsilon\"), which indicates that M can match the empty fragment. (But FOLLOW(M) is always just a set of tokens.)\n\nInformally:\n\n-   FIRST(M): collects the tokens potentially used first when matching a fragment to M.\n    \n-   LAST(M): collects the tokens potentially used last when matching a fragment to M.\n    \n-   FOLLOW(M): the set of tokens allowed to follow immediately after some fragment matched by M.\n    \n    In other words: t ∈ FOLLOW(M) if and only if there exists (potentially empty) token sequences α, β, γ, δ where:\n    \n    -   M matches β,\n        \n    -   t matches γ, and\n        \n    -   The concatenation α β γ δ is a parseable Rust program.\n        \n\nWe use the shorthand ANYTOKEN to denote the set of all tokens (including simple NTs). For example, if any token is legal after a matcher M, then FOLLOW(M) = ANYTOKEN.\n\n(To review one's understanding of the above informal descriptions, the reader at this point may want to jump ahead to the [examples of FIRST/LAST](about:blank/macro-ambiguity.html#examples-of-first-and-last) before reading their formal definitions.)\n\n### [FIRST, LAST](#first-last)\n\nBelow are formal inductive definitions for FIRST and LAST.\n\n\"A ∪ B\" denotes set union, \"A ∩ B\" denotes set intersection, and \"A \\\\ B\" denotes set difference (i.e. all elements of A that are not present in B).\n\n#### [FIRST](#first)\n\nFIRST(M) is defined by case analysis on the sequence M and the structure of its first token-tree (if any):\n\n-   if M is the empty sequence, then FIRST(M) = { ε },\n    \n-   if M starts with a token t, then FIRST(M) = { t },\n    \n    (Note: this covers the case where M starts with a delimited token-tree sequence, `M = OPEN tt ... CLOSE ...`, in which case `t = OPEN` and thus FIRST(M) = { `OPEN` }.)\n    \n    (Note: this critically relies on the property that no simple NT matches the empty fragment.)\n    \n-   Otherwise, M is a token-tree sequence starting with a complex NT: `M = $( tt ... ) OP α`, or `M = $( tt ... ) SEP OP α`, (where `α` is the (potentially empty) sequence of token trees for the rest of the matcher).\n    \n    -   Let SEP\\_SET(M) = { SEP } if SEP is present and ε ∈ FIRST(`tt ...`); otherwise SEP\\_SET(M) = {}.\n-   Let ALPHA\\_SET(M) = FIRST(`α`) if OP = `*` or `?` and ALPHA\\_SET(M) = {} if OP = `+`.\n    \n-   FIRST(M) = (FIRST(`tt ...`) \\\\ {ε}) ∪ SEP\\_SET(M) ∪ ALPHA\\_SET(M).\n    \n\nThe definition for complex NTs deserves some justification. SEP\\_SET(M) defines the possibility that the separator could be a valid first token for M, which happens when there is a separator defined and the repeated fragment could be empty. ALPHA\\_SET(M) defines the possibility that the complex NT could be empty, meaning that M's valid first tokens are those of the following token-tree sequences `α`. This occurs when either `*` or `?` is used, in which case there could be zero repetitions. In theory, this could also occur if `+` was used with a potentially-empty repeating fragment, but this is forbidden by the third invariant.\n\nFrom there, clearly FIRST(M) can include any token from SEP\\_SET(M) or ALPHA\\_SET(M), and if the complex NT match is nonempty, then any token starting FIRST(`tt ...`) could work too. The last piece to consider is ε. SEP\\_SET(M) and FIRST(`tt ...`) \\\\ {ε} cannot contain ε, but ALPHA\\_SET(M) could. Hence, this definition allows M to accept ε if and only if ε ∈ ALPHA\\_SET(M) does. This is correct because for M to accept ε in the complex NT case, both the complex NT and α must accept it. If OP = `+`, meaning that the complex NT cannot be empty, then by definition ε ∉ ALPHA\\_SET(M). Otherwise, the complex NT can accept zero repetitions, and then ALPHA\\_SET(M) = FOLLOW(`α`). So this definition is correct with respect to \\\\varepsilon as well.\n\n#### [LAST](#last)\n\nLAST(M), defined by case analysis on M itself (a sequence of token-trees):\n\n-   if M is the empty sequence, then LAST(M) = { ε }\n    \n-   if M is a singleton token t, then LAST(M) = { t }\n    \n-   if M is the singleton complex NT repeating zero or more times, `M = $( tt ... ) *`, or `M = $( tt ... ) SEP *`\n    \n    -   Let sep\\_set = { SEP } if SEP present; otherwise sep\\_set = {}.\n        \n    -   if ε ∈ LAST(`tt ...`) then LAST(M) = LAST(`tt ...`) ∪ sep\\_set\n        \n    -   otherwise, the sequence `tt ...` must be non-empty; LAST(M) = LAST(`tt ...`) ∪ {ε}.\n        \n-   if M is the singleton complex NT repeating one or more times, `M = $( tt ... ) +`, or `M = $( tt ... ) SEP +`\n    \n    -   Let sep\\_set = { SEP } if SEP present; otherwise sep\\_set = {}.\n        \n    -   if ε ∈ LAST(`tt ...`) then LAST(M) = LAST(`tt ...`) ∪ sep\\_set\n        \n    -   otherwise, the sequence `tt ...` must be non-empty; LAST(M) = LAST(`tt ...`)\n        \n-   if M is the singleton complex NT repeating zero or one time, `M = $( tt ...) ?`, then LAST(M) = LAST(`tt ...`) ∪ {ε}.\n    \n-   if M is a delimited token-tree sequence `OPEN tt ... CLOSE`, then LAST(M) = { `CLOSE` }.\n    \n-   if M is a non-empty sequence of token-trees `tt uu ...`,\n    \n    -   If ε ∈ LAST(`uu ...`), then LAST(M) = LAST(`tt`) ∪ (LAST(`uu ...`) \\\\ { ε }).\n        \n    -   Otherwise, the sequence `uu ...` must be non-empty; then LAST(M) = LAST(`uu ...`).\n        \n\n### [Examples of FIRST and LAST](#examples-of-first-and-last)\n\nBelow are some examples of FIRST and LAST. (Note in particular how the special ε element is introduced and eliminated based on the interaction between the pieces of the input.)\n\nOur first example is presented in a tree structure to elaborate on how the analysis of the matcher composes. (Some of the simpler subtrees have been elided.)\n\n```text\nINPUT:  $(  $d:ident   $e:expr   );*    $( $( h )* );*    $( f ; )+   g\n            ~~~~~~~~   ~~~~~~~                ~\n                |         |                   |\nFIRST:   { $d:ident }  { $e:expr }          { h }\n\n\nINPUT:  $(  $d:ident   $e:expr   );*    $( $( h )* );*    $( f ; )+\n            ~~~~~~~~~~~~~~~~~~             ~~~~~~~           ~~~\n                        |                      |               |\nFIRST:          { $d:ident }               { h, ε }         { f }\n\nINPUT:  $(  $d:ident   $e:expr   );*    $( $( h )* );*    $( f ; )+   g\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~    ~~~~~~~~~~~~~~    ~~~~~~~~~   ~\n                        |                       |              |       |\nFIRST:        { $d:ident, ε }            {  h, ε, ;  }      { f }   { g }\n\n\nINPUT:  $(  $d:ident   $e:expr   );*    $( $( h )* );*    $( f ; )+   g\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                                        |\nFIRST:                       { $d:ident, h, ;,  f }\n\n```\n\nThus:\n\n-   FIRST(`$($d:ident $e:expr );* $( $(h)* );* $( f ;)+ g`) = { `$d:ident`, `h`, `;`, `f` }\n\nNote however that:\n\n-   FIRST(`$($d:ident $e:expr );* $( $(h)* );* $($( f ;)+ g)*`) = { `$d:ident`, `h`, `;`, `f`, ε }\n\nHere are similar examples but now for LAST.\n\n-   LAST(`$d:ident $e:expr`) = { `$e:expr` }\n-   LAST(`$( $d:ident $e:expr );*`) = { `$e:expr`, ε }\n-   LAST(`$( $d:ident $e:expr );* $(h)*`) = { `$e:expr`, ε, `h` }\n-   LAST(`$( $d:ident $e:expr );* $(h)* $( f ;)+`) = { `;` }\n-   LAST(`$( $d:ident $e:expr );* $(h)* $( f ;)+ g`) = { `g` }\n\n### [FOLLOW(M)](#followm)\n\nFinally, the definition for FOLLOW(M) is built up as follows. pat, expr, etc. represent simple nonterminals with the given fragment specifier.\n\n-   FOLLOW(pat) = {`=>`, `,`, `=`, `|`, `if`, `in`}\\`.\n    \n-   FOLLOW(expr) = FOLLOW(stmt) = {`=>`, `,`, `;`}\\`.\n    \n-   FOLLOW(ty) = FOLLOW(path) = {`{`, `[`, `,`, `=>`, `:`, `=`, `>`, `>>`, `;`, `|`, `as`, `where`, block nonterminals}.\n    \n-   FOLLOW(vis) = {`,`l any keyword or identifier except a non-raw `priv`; any token that can begin a type; ident, ty, and path nonterminals}.\n    \n-   FOLLOW(t) = ANYTOKEN for any other simple token, including block, ident, tt, item, lifetime, literal and meta simple nonterminals, and all terminals.\n    \n-   FOLLOW(M), for any other M, is defined as the intersection, as t ranges over (LAST(M) \\\\ {ε}), of FOLLOW(t).\n    \n\nThe tokens that can begin a type are, as of this writing, {`(`, `[`, `!`, `*`, `&`, `&&`, `?`, lifetimes, `>`, `>>`, `::`, any non-keyword identifier, `super`, `self`, `Self`, `extern`, `crate`, `$crate`, `_`, `for`, `impl`, `fn`, `unsafe`, `typeof`, `dyn`}, although this list may not be complete because people won't always remember to update the appendix when new ones are added.\n\nExamples of FOLLOW for complex M:\n\n-   FOLLOW(`$( $d:ident $e:expr )*`) = FOLLOW(`$e:expr`)\n-   FOLLOW(`$( $d:ident $e:expr )* $(;)*`) = FOLLOW(`$e:expr`) ∩ ANYTOKEN = FOLLOW(`$e:expr`)\n-   FOLLOW(`$( $d:ident $e:expr )* $(;)* $( f |)+`) = ANYTOKEN\n\n### [Examples of valid and invalid matchers](#examples-of-valid-and-invalid-matchers)\n\nWith the above specification in hand, we can present arguments for why particular matchers are legal and others are not.\n\n-   `($ty:ty < foo ,)` : illegal, because FIRST(`< foo ,`) = { `<` } ⊈ FOLLOW(`ty`)\n    \n-   `($ty:ty , foo <)` : legal, because FIRST(`, foo <`) = { `,` } is ⊆ FOLLOW(`ty`).\n    \n-   `($pa:pat $pb:pat $ty:ty ,)` : illegal, because FIRST(`$pb:pat $ty:ty ,`) = { `$pb:pat` } ⊈ FOLLOW(`pat`), and also FIRST(`$ty:ty ,`) = { `$ty:ty` } ⊈ FOLLOW(`pat`).\n    \n-   `( $($a:tt $b:tt)* ; )` : legal, because FIRST(`$b:tt`) = { `$b:tt` } is ⊆ FOLLOW(`tt`) = ANYTOKEN, as is FIRST(`;`) = { `;` }.\n    \n-   `( $($t:tt),* , $(t:tt),* )` : legal, (though any attempt to actually use this macro will signal a local ambiguity error during expansion).\n    \n-   `($ty:ty $(; not sep)* -)` : illegal, because FIRST(`$(; not sep)* -`) = { `;`, `-` } is not in FOLLOW(`ty`).\n    \n-   `($($ty:ty)-+)` : illegal, because separator `-` is not in FOLLOW(`ty`).\n    \n-   `($($e:expr)*)` : illegal, because expr NTs are not in FOLLOW(expr NT).\n    \n\n## [Influences](#influences)\n\nRust is not a particularly original language, with design elements coming from a wide range of sources. Some of these are listed below (including elements that have since been removed):\n\n-   SML, OCaml: algebraic data types, pattern matching, type inference, semicolon statement separation\n-   C++: references, RAII, smart pointers, move semantics, monomorphization, memory model\n-   ML Kit, Cyclone: region based memory management\n-   Haskell (GHC): typeclasses, type families\n-   Newsqueak, Alef, Limbo: channels, concurrency\n-   Erlang: message passing, thread failure, ~linked thread failure~, ~lightweight concurrency~\n-   Swift: optional bindings\n-   Scheme: hygienic macros\n-   C#: attributes\n-   Ruby: closure syntax, ~block syntax~\n-   NIL, Hermes: ~typestate~\n-   [Unicode Annex #31](http://www.unicode.org/reports/tr31/): identifier and pattern syntax\n\n## [Glossary](#glossary)\n\n### [Abstract syntax tree](#abstract-syntax-tree)\n\nAn ‘abstract syntax tree’, or ‘AST’, is an intermediate representation of the structure of the program when the compiler is compiling it.\n\n### [Alignment](#alignment)\n\nThe alignment of a value specifies what addresses values are preferred to start at. Always a power of two. References to a value must be aligned. [More](about:blank/type-layout.html#size-and-alignment).\n\n### [Arity](#arity)\n\nArity refers to the number of arguments a function or operator takes. For some examples, `f(2, 3)` and `g(4, 6)` have arity 2, while `h(8, 2, 6)` has arity 3. The `!` operator has arity 1.\n\n### [Array](#array)\n\nAn array, sometimes also called a fixed-size array or an inline array, is a value describing a collection of elements, each selected by an index that can be computed at run time by the program. It occupies a contiguous region of memory.\n\n### [Associated item](#associated-item)\n\nAn associated item is an item that is associated with another item. Associated items are defined in [implementations](items/implementations.html) and declared in [traits](items/traits.html). Only functions, constants, and type aliases can be associated. Contrast to a [free item](about:blank/glossary.html#free-item).\n\n### [Blanket implementation](#blanket-implementation)\n\nAny implementation where a type appears [uncovered](about:blank/glossary.html#uncovered-type). `impl<T> Foo for T`, `impl<T> Bar<T> for T`, `impl<T> Bar<Vec<T>> for T`, and `impl<T> Bar<T> for Vec<T>` are considered blanket impls. However, `impl<T> Bar<Vec<T>> for Vec<T>` is not a blanket impl, as all instances of `T` which appear in this `impl` are covered by `Vec`.\n\n### [Bound](#bound)\n\nBounds are constraints on a type or trait. For example, if a bound is placed on the argument a function takes, types passed to that function must abide by that constraint.\n\n### [Combinator](#combinator)\n\nCombinators are higher-order functions that apply only functions and earlier defined combinators to provide a result from its arguments. They can be used to manage control flow in a modular fashion.\n\n### [Crate](#crate-2)\n\nA crate is the unit of compilation and linking. There are different [types of crates](linkage.html), such as libraries or executables. Crates may link and refer to other library crates, called external crates. A crate has a self-contained tree of [modules](items/modules.html), starting from an unnamed root module called the crate root. [Items](items.html) may be made visible to other crates by marking them as public in the crate root, including through [paths](paths.html) of public modules. [More](crates-and-source-files.html).\n\n### [Dispatch](#dispatch)\n\nDispatch is the mechanism to determine which specific version of code is actually run when it involves polymorphism. Two major forms of dispatch are static dispatch and dynamic dispatch. While Rust favors static dispatch, it also supports dynamic dispatch through a mechanism called ‘trait objects’.\n\n### [Dynamically sized type](#dynamically-sized-type)\n\nA dynamically sized type (DST) is a type without a statically known size or alignment.\n\n### [Entity](#entity)\n\nAn [_entity_](names.html) is a language construct that can be referred to in some way within the source program, usually via a [path](paths.html). Entities include [types](types.html), [items](items.html), [generic parameters](items/generics.html), [variable bindings](patterns.html), [loop labels](about:blank/tokens.html#lifetimes-and-loop-labels), [lifetimes](about:blank/tokens.html#lifetimes-and-loop-labels), [fields](expressions/field-expr.html), [attributes](attributes.html), and [lints](about:blank/attributes/diagnostics.html#lint-check-attributes).\n\n### [Expression](#expression)\n\nAn expression is a combination of values, constants, variables, operators and functions that evaluate to a single value, with or without side-effects.\n\nFor example, `2 + (3 * 4)` is an expression that returns the value 14.\n\n### [Free item](#free-item)\n\nAn [item](items.html) that is not a member of an [implementation](items/implementations.html), such as a _free function_ or a _free const_. Contrast to an [associated item](about:blank/glossary.html#associated-item).\n\n### [Fundamental traits](#fundamental-traits)\n\nA fundamental trait is one where adding an impl of it for an existing type is a breaking change. The `Fn` traits and `Sized` are fundamental.\n\n### [Fundamental type constructors](#fundamental-type-constructors)\n\nA fundamental type constructor is a type where implementing a [blanket implementation](about:blank/glossary.html#blanket-implementation) over it is a breaking change. `&`, `&mut`, `Box`, and `Pin` are fundamental.\n\nAny time a type `T` is considered [local](about:blank/glossary.html#local-type), `&T`, `&mut T`, `Box<T>`, and `Pin<T>` are also considered local. Fundamental type constructors cannot [cover](about:blank/glossary.html#uncovered-type) other types. Any time the term \"covered type\" is used, the `T` in `&T`, `&mut T`, `Box<T>`, and `Pin<T>` is not considered covered.\n\n### [Inhabited](#inhabited)\n\nA type is inhabited if it has constructors and therefore can be instantiated. An inhabited type is not \"empty\" in the sense that there can be values of the type. Opposite of [Uninhabited](about:blank/glossary.html#uninhabited).\n\n### [Inherent implementation](#inherent-implementation)\n\nAn [implementation](items/implementations.html) that applies to a nominal type, not to a trait-type pair. [More](about:blank/items/implementations.html#inherent-implementations).\n\n### [Inherent method](#inherent-method)\n\nA [method](about:blank/items/associated-items.html#methods) defined in an [inherent implementation](about:blank/items/implementations.html#inherent-implementations), not in a trait implementation.\n\n### [Initialized](#initialized)\n\nA variable is initialized if it has been assigned a value and hasn't since been moved from. All other memory locations are assumed to be uninitialized. Only unsafe Rust can create a memory location without initializing it.\n\n### [Local trait](#local-trait)\n\nA `trait` which was defined in the current crate. A trait definition is local or not independent of applied type arguments. Given `trait Foo<T, U>`, `Foo` is always local, regardless of the types substituted for `T` and `U`.\n\n### [Local type](#local-type)\n\nA `struct`, `enum`, or `union` which was defined in the current crate. This is not affected by applied type arguments. `struct Foo` is considered local, but `Vec<Foo>` is not. `LocalType<ForeignType>` is local. Type aliases do not affect locality.\n\n### [Module](#module)\n\nA module is a container for zero or more [items](items.html). Modules are organized in a tree, starting from an unnamed module at the root called the crate root or the root module. [Paths](paths.html) may be used to refer to items from other modules, which may be restricted by [visibility rules](visibility-and-privacy.html). [More](items/modules.html)\n\n### [Name](#name)\n\nA [_name_](names.html) is an [identifier](identifiers.html) or [lifetime or loop label](about:blank/tokens.html#lifetimes-and-loop-labels) that refers to an [entity](about:blank/glossary.html#entity). A _name binding_ is when an entity declaration introduces an identifier or label associated with that entity. [Paths](paths.html), identifiers, and labels are used to refer to an entity.\n\n### [Name resolution](#name-resolution-1)\n\n[_Name resolution_](names/name-resolution.html) is the compile-time process of tying [paths](paths.html), [identifiers](identifiers.html), and [labels](about:blank/tokens.html#lifetimes-and-loop-labels) to [entity](about:blank/glossary.html#entity) declarations.\n\n### [Namespace](#namespace)\n\nA _namespace_ is a logical grouping of declared [names](about:blank/glossary.html#name) based on the kind of [entity](about:blank/glossary.html#entity) the name refers to. Namespaces allow the occurrence of a name in one namespace to not conflict with the same name in another namespace.\n\nWithin a namespace, names are organized in a hierarchy, where each level of the hierarchy has its own collection of named entities.\n\n### [Nominal types](#nominal-types)\n\nTypes that can be referred to by a path directly. Specifically [enums](items/enumerations.html), [structs](items/structs.html), [unions](items/unions.html), and [trait objects](types/trait-object.html).\n\n### [Object safe traits](#object-safe-traits)\n\n[Traits](items/traits.html) that can be used as [trait objects](types/trait-object.html). Only traits that follow specific [rules](about:blank/items/traits.html#object-safety) are object safe.\n\n### [Path](#path)\n\nA [_path_](paths.html) is a sequence of one or more path segments used to refer to an [entity](about:blank/glossary.html#entity) in the current scope or other levels of a [namespace](about:blank/glossary.html#namespace) hierarchy.\n\n### [Prelude](#prelude)\n\nPrelude, or The Rust Prelude, is a small collection of items - mostly traits - that are imported into every module of every crate. The traits in the prelude are pervasive.\n\n### [Scope](#scope-1)\n\nA [_scope_](names/scopes.html) is the region of source text where a named [entity](about:blank/glossary.html#entity) may be referenced with that name.\n\n### [Scrutinee](#scrutinee)\n\nA scrutinee is the expression that is matched on in `match` expressions and similar pattern matching constructs. For example, in `match x { A => 1, B => 2 }`, the expression `x` is the scrutinee.\n\n### [Size](#size)\n\nThe size of a value has two definitions.\n\nThe first is that it is how much memory must be allocated to store that value.\n\nThe second is that it is the offset in bytes between successive elements in an array with that item type.\n\nIt is a multiple of the alignment, including zero. The size can change depending on compiler version (as new optimizations are made) and target platform (similar to how `usize` varies per-platform).\n\n[More](about:blank/type-layout.html#size-and-alignment).\n\n### [Slice](#slice)\n\nA slice is dynamically-sized view into a contiguous sequence, written as `[T]`.\n\nIt is often seen in its borrowed forms, either mutable or shared. The shared slice type is `&[T]`, while the mutable slice type is `&mut [T]`, where `T` represents the element type.\n\n### [Statement](#statement)\n\nA statement is the smallest standalone element of a programming language that commands a computer to perform an action.\n\n### [String literal](#string-literal)\n\nA string literal is a string stored directly in the final binary, and so will be valid for the `'static` duration.\n\nIts type is `'static` duration borrowed string slice, `&'static str`.\n\n### [String slice](#string-slice)\n\nA string slice is the most primitive string type in Rust, written as `str`. It is often seen in its borrowed forms, either mutable or shared. The shared string slice type is `&str`, while the mutable string slice type is `&mut str`.\n\nStrings slices are always valid UTF-8.\n\n### [Trait](#trait)\n\nA trait is a language item that is used for describing the functionalities a type must provide. It allows a type to make certain promises about its behavior.\n\nGeneric functions and generic structs can use traits to constrain, or bound, the types they accept.\n\n### [Turbofish](#turbofish)\n\nPaths with generic parameters in expressions must prefix the opening brackets with a `::`. Combined with the angular brackets for generics, this looks like a fish `::<>`. As such, this syntax is colloquially referred to as turbofish syntax.\n\nExamples:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet ok_num = Ok::<_, ()>(5);\nlet vec = [1, 2, 3].iter().map(|n| n * 2).collect::<Vec<_>>();\n}\n```\n\nThis `::` prefix is required to disambiguate generic paths with multiple comparisons in a comma-separate list. See [the bastion of the turbofish](https://github.com/rust-lang/rust/blob/1.58.0/src/test/ui/parser/bastion-of-the-turbofish.rs) for an example where not having the prefix would be ambiguous.\n\n### [Uncovered type](#uncovered-type)\n\nA type which does not appear as an argument to another type. For example, `T` is uncovered, but the `T` in `Vec<T>` is covered. This is only relevant for type arguments.\n\n### [Undefined behavior](#undefined-behavior)\n\nCompile-time or run-time behavior that is not specified. This may result in, but is not limited to: process termination or corruption; improper, incorrect, or unintended computation; or platform-specific results. [More](behavior-considered-undefined.html).\n\n### [Uninhabited](#uninhabited)\n\nA type is uninhabited if it has no constructors and therefore can never be instantiated. An uninhabited type is \"empty\" in the sense that there are no values of the type. The canonical example of an uninhabited type is the [never type](types/never.html) `!`, or an enum with no variants `enum Never { }`. Opposite of [Inhabited](about:blank/glossary.html#inhabited).",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>The Rust Reference</title>\n        <meta name=\"robots\" content=\"noindex\">\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"introduction\"><a class=\"header\" href=\"#introduction\">Introduction</a></h1>\n<p>This book is the primary reference for the Rust programming language.\nIt provides three kinds of material:</p>\n<ul>\n<li>Chapters that informally describe each language construct and their use.</li>\n<li>Chapters that informally describe the memory model, concurrency model, runtime services, linkage model, and debugging facilities.</li>\n<li>Appendix chapters providing rationale and references to languages that influenced the design.</li>\n</ul>\n<div class=\"warning\">\n<p>Warning:\nThis book is incomplete. Documenting everything takes a while.\nSee the <a href=\"https://github.com/rust-lang/reference/issues\">GitHub issues</a> for what is not documented in this book.</p>\n</div>\n<h2 id=\"rust-releases\"><a class=\"header\" href=\"#rust-releases\">Rust releases</a></h2>\n<p>Rust has a new language release every six weeks.\nThe first stable release of the language was Rust 1.0.0, followed by Rust 1.1.0 and so on.\nTools (<code class=\"hljs\">rustc</code>, <code class=\"hljs\">cargo</code>, etc.) and documentation (<a href=\"../std/index.html\">Standard library</a>, this book, etc.) are released with the language release.</p>\n<p>The latest release of this book, matching the latest Rust version, can always be found at <a href=\"https://doc.rust-lang.org/reference/\">https://doc.rust-lang.org/reference/</a>.\nPrior versions can be found by adding the Rust version before the \"reference\" directory.\nFor example, the Reference for Rust 1.49.0 is located at <a href=\"https://doc.rust-lang.org/1.49.0/reference/\">https://doc.rust-lang.org/1.49.0/reference/</a>.</p>\n<h2 id=\"what-the-reference-is-not\"><a class=\"header\" href=\"#what-the-reference-is-not\">What <em>The Reference</em> is not</a></h2>\n<p>This book does not serve as an introduction to the language.\nBackground familiarity with the language is assumed.\nA separate <a href=\"../book/index.html\">book</a> is available to help acquire such background familiarity.</p>\n<p>This book also does not serve as a reference to the <a href=\"../std/index.html\">standard library</a> included in the language distribution.\nThose libraries are documented separately by extracting documentation attributes from their source code.\nMany of the features that one might expect to be language features are library features in Rust, so what you're looking for may be there, not here.</p>\n<p>Similarly, this book does not usually document the specifics of <code class=\"hljs\">rustc</code> as a tool or of Cargo.\n<code class=\"hljs\">rustc</code> has its own <a href=\"../rustc/index.html\">book</a>.\nCargo has a <a href=\"../cargo/index.html\">book</a> that contains a <a href=\"../cargo/reference/index.html\">reference</a>.\nThere are a few pages such as <a href=\"linkage.html\">linkage</a> that still describe how <code class=\"hljs\">rustc</code> works.</p>\n<p>This book also only serves as a reference to what is available in stable Rust.\nFor unstable features being worked on, see the <a href=\"https://doc.rust-lang.org/nightly/unstable-book/\">Unstable Book</a>.</p>\n<p>Rust compilers, including <code class=\"hljs\">rustc</code>, will perform optimizations.\nThe reference does not specify what optimizations are allowed or disallowed.\nInstead, think of the compiled program as a black box.\nYou can only probe by running it, feeding it input and observing its output.\nEverything that happens that way must conform to what the reference says.</p>\n<p>Finally, this book is not normative.\nIt may include details that are specific to <code class=\"hljs\">rustc</code> itself, and should not be taken as a specification for the Rust language.\nWe intend to produce such a book someday, and until then, the reference is the closest thing we have to one.</p>\n<h2 id=\"how-to-use-this-book\"><a class=\"header\" href=\"#how-to-use-this-book\">How to use this book</a></h2>\n<p>This book does not assume you are reading this book sequentially.\nEach chapter generally can be read standalone, but will cross-link to other chapters for facets of the language they refer to, but do not discuss.</p>\n<p>There are two main ways to read this document.</p>\n<p>The first is to answer a specific question.\nIf you know which chapter answers that question, you can jump to that chapter in the table of contents.\nOtherwise, you can press <code class=\"hljs\">s</code> or click the magnifying glass on the top bar to search for keywords related to your question.\nFor example, say you wanted to know when a temporary value created in a let statement is dropped.\nIf you didn't already know that the <a href=\"expressions.html#temporaries\">lifetime of temporaries</a> is defined in the <a href=\"expressions.html\">expressions chapter</a>, you could search \"temporary let\" and the first search result will take you to that section.</p>\n<p>The second is to generally improve your knowledge of a facet of the language.\nIn that case, just browse the table of contents until you see something you want to know more about, and just start reading.\nIf a link looks interesting, click it, and read about that section.</p>\n<p>That said, there is no wrong way to read this book. Read it however you feel helps you best.</p>\n<h3 id=\"conventions\"><a class=\"header\" href=\"#conventions\">Conventions</a></h3>\n<p>Like all technical books, this book has certain conventions in how it displays information.\nThese conventions are documented here.</p>\n<ul>\n<li>\n<p>Statements that define a term contain that term in <em>italics</em>.\nWhenever that term is used outside of that chapter, it is usually a link to the section that has this definition.</p>\n<p>An <em>example term</em> is an example of a term being defined.</p>\n</li>\n<li>\n<p>Differences in the language by which edition the crate is compiled under are in a blockquote that start with the words \"Edition Differences:\" in <strong>bold</strong>.</p>\n<blockquote>\n<p><strong>Edition Differences</strong>: In the 2015 edition, this syntax is valid that is disallowed as of the 2018 edition.</p>\n</blockquote>\n</li>\n<li>\n<p>Notes that contain useful information about the state of the book or point out useful, but mostly out of scope, information are in blockquotes that start with the word \"Note:\" in <strong>bold</strong>.</p>\n<blockquote>\n<p><strong>Note</strong>: This is an example note.</p>\n</blockquote>\n</li>\n<li>\n<p>Warnings that show unsound behavior in the language or possibly confusing interactions of language features are in a special warning box.</p>\n<div class=\"warning\">\n<p>Warning: This is an example warning.</p>\n</div>\n</li>\n<li>\n<p>Code snippets inline in the text are inside <code class=\"hljs\">&lt;code&gt;</code> tags.</p>\n<p>Longer code examples are in a syntax highlighted box that has controls for copying, executing, and showing hidden lines in the top right corner.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-comment\">// This is a hidden line.</span>\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"This is a code example\"</span>);\n}</code></pre></pre>\n<p>All examples are written for the latest edition unless otherwise stated.</p>\n</li>\n<li>\n<p>The grammar and lexical structure is in blockquotes with either \"Lexer\" or \"Syntax\" in <sup><strong>bold superscript</strong></sup> as the first line.</p>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ExampleGrammar</em>:<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">~</code> <a href=\"expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <code class=\"hljs\">box</code> <a href=\"expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p>See <a href=\"notation.html\">Notation</a> for more detail.</p>\n</li>\n</ul>\n<h2 id=\"contributing\"><a class=\"header\" href=\"#contributing\">Contributing</a></h2>\n<p>We welcome contributions of all kinds.</p>\n<p>You can contribute to this book by opening an issue or sending a pull request to <a href=\"https://github.com/rust-lang/reference/\">the Rust Reference repository</a>.\nIf this book does not answer your question, and you think its answer is in scope of it, please do not hesitate to <a href=\"https://github.com/rust-lang/reference/issues\">file an issue</a> or ask about it in the <code class=\"hljs\">t-lang/doc</code> stream on <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/237824-t-lang.2Fdoc\">Zulip</a>.\nKnowing what people use this book for the most helps direct our attention to making those sections the best that they can be.\nWe also want the reference to be as normative as possible, so if you see anything that is wrong or is non-normative but not specifically called out, please also <a href=\"https://github.com/rust-lang/reference/issues\">file an issue</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"notation\"><a class=\"header\" href=\"#notation\">Notation</a></h1>\n<h2 id=\"grammar\"><a class=\"header\" href=\"#grammar\">Grammar</a></h2>\n<p>The following notations are used by the <em>Lexer</em> and <em>Syntax</em> grammar snippets:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Notation</th><th>Examples</th><th>Meaning</th></tr></thead><tbody>\n<tr><td>CAPITAL</td><td>KW_IF, INTEGER_LITERAL</td><td>A token produced by the lexer</td></tr>\n<tr><td><em>ItalicCamelCase</em></td><td><em>LetStatement</em>, <em>Item</em></td><td>A syntactical production</td></tr>\n<tr><td><code class=\"hljs\">string</code></td><td><code class=\"hljs\">x</code>, <code class=\"hljs\">while</code>, <code class=\"hljs\">*</code></td><td>The exact character(s)</td></tr>\n<tr><td>\\x</td><td>\\n, \\r, \\t, \\0</td><td>The character represented by this escape</td></tr>\n<tr><td>x<sup>?</sup></td><td><code class=\"hljs\">pub</code><sup>?</sup></td><td>An optional item</td></tr>\n<tr><td>x<sup>*</sup></td><td><em>OuterAttribute</em><sup>*</sup></td><td>0 or more of x</td></tr>\n<tr><td>x<sup>+</sup></td><td><em>MacroMatch</em><sup>+</sup></td><td>1 or more of x</td></tr>\n<tr><td>x<sup>a..b</sup></td><td>HEX_DIGIT<sup>1..6</sup></td><td>a to b repetitions of x</td></tr>\n<tr><td>|</td><td><code class=\"hljs\">u8</code> | <code class=\"hljs\">u16</code>, Block | Item</td><td>Either one or another</td></tr>\n<tr><td>[ ]</td><td>[<code class=\"hljs\">b</code> <code class=\"hljs\">B</code>]</td><td>Any of the characters listed</td></tr>\n<tr><td>[ - ]</td><td>[<code class=\"hljs\">a</code>-<code class=\"hljs\">z</code>]</td><td>Any of the characters in the range</td></tr>\n<tr><td>~[ ]</td><td>~[<code class=\"hljs\">b</code> <code class=\"hljs\">B</code>]</td><td>Any characters, except those listed</td></tr>\n<tr><td>~<code class=\"hljs\">string</code></td><td>~<code class=\"hljs\">\\n</code>, ~<code class=\"hljs\">*/</code></td><td>Any characters, except this sequence</td></tr>\n<tr><td>( )</td><td>(<code class=\"hljs\">,</code> <em>Parameter</em>)<sup>?</sup></td><td>Groups items</td></tr>\n</tbody></table>\n</div>\n<h2 id=\"string-table-productions\"><a class=\"header\" href=\"#string-table-productions\">String table productions</a></h2>\n<p>Some rules in the grammar — notably <a href=\"expressions/operator-expr.html#borrow-operators\">unary operators</a>, <a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">binary\noperators</a>, and <a href=\"keywords.html\">keywords</a> — are given in a simplified form: as a listing\nof printable strings. These cases form a subset of the rules regarding the\n<a href=\"tokens.html\">token</a> rule, and are assumed to be the result of a lexical-analysis\nphase feeding the parser, driven by a <abbr title=\"Deterministic Finite\nAutomaton\">DFA</abbr>, operating over the disjunction of all such string table\nentries.</p>\n<p>When such a string in <code class=\"hljs\">monospace</code> font occurs inside the grammar,\nit is an implicit reference to a single member of such a string table\nproduction. See <a href=\"tokens.html\">tokens</a> for more information.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"lexical-structure\"><a class=\"header\" href=\"#lexical-structure\">Lexical structure</a></h1>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"input-format\"><a class=\"header\" href=\"#input-format\">Input format</a></h1>\n<p>This chapter describes how a source file is interpreted as a sequence of tokens.</p>\n<p>See <a href=\"crates-and-source-files.html\">Crates and source files</a> for a description of how programs are organised into files.</p>\n<h2 id=\"source-encoding\"><a class=\"header\" href=\"#source-encoding\">Source encoding</a></h2>\n<p>Each source file is interpreted as a sequence of Unicode characters encoded in UTF-8.\nIt is an error if the file is not valid UTF-8.</p>\n<h2 id=\"byte-order-mark-removal\"><a class=\"header\" href=\"#byte-order-mark-removal\">Byte order mark removal</a></h2>\n<p>If the first character in the sequence is <code class=\"hljs\">U+FEFF</code> (<a href=\"https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8\">BYTE ORDER MARK</a>), it is removed.</p>\n<h2 id=\"crlf-normalization\"><a class=\"header\" href=\"#crlf-normalization\">CRLF normalization</a></h2>\n<p>Each pair of characters <code class=\"hljs\">U+000D</code> (CR) immediately followed by <code class=\"hljs\">U+000A</code> (LF) is replaced by a single <code class=\"hljs\">U+000A</code> (LF).</p>\n<p>Other occurrences of the character <code class=\"hljs\">U+000D</code> (CR) are left in place (they are treated as <a href=\"whitespace.html\">whitespace</a>).</p>\n<h2 id=\"shebang-removal\"><a class=\"header\" href=\"#shebang-removal\">Shebang removal</a></h2>\n<p>If the remaining sequence begins with the characters <code class=\"hljs\">#!</code>, the characters up to and including the first <code class=\"hljs\">U+000A</code> (LF) are removed from the sequence.</p>\n<p>For example, the first line of the following file would be ignored:</p>\n<!-- ignore: tests don't like shebang -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">#!/usr/bin/env rustx\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello!\"</span>);\n}</code></pre>\n<p>As an exception, if the <code class=\"hljs\">#!</code> characters are followed (ignoring intervening <a href=\"comments.html\">comments</a> or <a href=\"whitespace.html\">whitespace</a>) by a <code class=\"hljs\">[</code> token, nothing is removed.\nThis prevents an <a href=\"attributes.html\">inner attribute</a> at the start of a source file being removed.</p>\n<blockquote>\n<p><strong>Note</strong>: The standard library <a href=\"../std/macro.include.html\"><code class=\"hljs\">include!</code></a> macro applies byte order mark removal, CRLF normalization, and shebang removal to the file it reads. The <a href=\"../std/macro.include_str.html\"><code class=\"hljs\">include_str!</code></a> and <a href=\"../std/macro.include_bytes.html\"><code class=\"hljs\">include_bytes!</code></a> macros do not.</p>\n</blockquote>\n<h2 id=\"tokenization\"><a class=\"header\" href=\"#tokenization\">Tokenization</a></h2>\n<p>The resulting sequence of characters is then converted into tokens as described in the remainder of this chapter.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"keywords\"><a class=\"header\" href=\"#keywords\">Keywords</a></h1>\n<p>Rust divides keywords into three categories:</p>\n<ul>\n<li><a href=\"keywords.html#strict-keywords\">strict</a></li>\n<li><a href=\"keywords.html#reserved-keywords\">reserved</a></li>\n<li><a href=\"keywords.html#weak-keywords\">weak</a></li>\n</ul>\n<h2 id=\"strict-keywords\"><a class=\"header\" href=\"#strict-keywords\">Strict keywords</a></h2>\n<p>These keywords can only be used in their correct contexts. They cannot\nbe used as the names of:</p>\n<ul>\n<li><a href=\"items.html\">Items</a></li>\n<li><a href=\"variables.html\">Variables</a> and function parameters</li>\n<li>Fields and <a href=\"items/enumerations.html\">variants</a></li>\n<li><a href=\"types/parameters.html\">Type parameters</a></li>\n<li>Lifetime parameters or <a href=\"expressions/loop-expr.html#loop-labels\">loop labels</a></li>\n<li><a href=\"macros.html\">Macros</a> or <a href=\"attributes.html\">attributes</a></li>\n<li><a href=\"macros-by-example.html\">Macro placeholders</a></li>\n<li><a href=\"crates-and-source-files.html\">Crates</a></li>\n</ul>\n<blockquote>\n<p><strong><sup>Lexer:<sup></sup></sup></strong><br>\nKW_AS             : <code class=\"hljs\">as</code><br>\nKW_BREAK          : <code class=\"hljs\">break</code><br>\nKW_CONST          : <code class=\"hljs\">const</code><br>\nKW_CONTINUE       : <code class=\"hljs\">continue</code><br>\nKW_CRATE          : <code class=\"hljs\">crate</code><br>\nKW_ELSE           : <code class=\"hljs\">else</code><br>\nKW_ENUM           : <code class=\"hljs\">enum</code><br>\nKW_EXTERN         : <code class=\"hljs\">extern</code><br>\nKW_FALSE          : <code class=\"hljs\">false</code><br>\nKW_FN             : <code class=\"hljs\">fn</code><br>\nKW_FOR            : <code class=\"hljs\">for</code><br>\nKW_IF             : <code class=\"hljs\">if</code><br>\nKW_IMPL           : <code class=\"hljs\">impl</code><br>\nKW_IN             : <code class=\"hljs\">in</code><br>\nKW_LET            : <code class=\"hljs\">let</code><br>\nKW_LOOP           : <code class=\"hljs\">loop</code><br>\nKW_MATCH          : <code class=\"hljs\">match</code><br>\nKW_MOD            : <code class=\"hljs\">mod</code><br>\nKW_MOVE           : <code class=\"hljs\">move</code><br>\nKW_MUT            : <code class=\"hljs\">mut</code><br>\nKW_PUB            : <code class=\"hljs\">pub</code><br>\nKW_REF            : <code class=\"hljs\">ref</code><br>\nKW_RETURN         : <code class=\"hljs\">return</code><br>\nKW_SELFVALUE      : <code class=\"hljs\">self</code><br>\nKW_SELFTYPE       : <code class=\"hljs\">Self</code><br>\nKW_STATIC         : <code class=\"hljs\">static</code><br>\nKW_STRUCT         : <code class=\"hljs\">struct</code><br>\nKW_SUPER          : <code class=\"hljs\">super</code><br>\nKW_TRAIT          : <code class=\"hljs\">trait</code><br>\nKW_TRUE           : <code class=\"hljs\">true</code><br>\nKW_TYPE           : <code class=\"hljs\">type</code><br>\nKW_UNSAFE         : <code class=\"hljs\">unsafe</code><br>\nKW_USE            : <code class=\"hljs\">use</code><br>\nKW_WHERE          : <code class=\"hljs\">where</code><br>\nKW_WHILE          : <code class=\"hljs\">while</code></p>\n</blockquote>\n<p>The following keywords were added beginning in the 2018 edition.</p>\n<blockquote>\n<p><strong><sup>Lexer 2018+</sup></strong><br>\nKW_ASYNC          : <code class=\"hljs\">async</code><br>\nKW_AWAIT          : <code class=\"hljs\">await</code><br>\nKW_DYN            : <code class=\"hljs\">dyn</code></p>\n</blockquote>\n<h2 id=\"reserved-keywords\"><a class=\"header\" href=\"#reserved-keywords\">Reserved keywords</a></h2>\n<p>These keywords aren't used yet, but they are reserved for future use. They have\nthe same restrictions as strict keywords. The reasoning behind this is to make\ncurrent programs forward compatible with future versions of Rust by forbidding\nthem to use these keywords.</p>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nKW_ABSTRACT       : <code class=\"hljs\">abstract</code><br>\nKW_BECOME         : <code class=\"hljs\">become</code><br>\nKW_BOX            : <code class=\"hljs\">box</code><br>\nKW_DO             : <code class=\"hljs\">do</code><br>\nKW_FINAL          : <code class=\"hljs\">final</code><br>\nKW_MACRO          : <code class=\"hljs\">macro</code><br>\nKW_OVERRIDE       : <code class=\"hljs\">override</code><br>\nKW_PRIV           : <code class=\"hljs\">priv</code><br>\nKW_TYPEOF         : <code class=\"hljs\">typeof</code><br>\nKW_UNSIZED        : <code class=\"hljs\">unsized</code><br>\nKW_VIRTUAL        : <code class=\"hljs\">virtual</code><br>\nKW_YIELD          : <code class=\"hljs\">yield</code></p>\n</blockquote>\n<p>The following keywords are reserved beginning in the 2018 edition.</p>\n<blockquote>\n<p><strong><sup>Lexer 2018+</sup></strong><br>\nKW_TRY   : <code class=\"hljs\">try</code></p>\n</blockquote>\n<h2 id=\"weak-keywords\"><a class=\"header\" href=\"#weak-keywords\">Weak keywords</a></h2>\n<p>These keywords have special meaning only in certain contexts. For example, it\nis possible to declare a variable or method with the name <code class=\"hljs\">union</code>.</p>\n<ul>\n<li>\n<p><code class=\"hljs\">macro_rules</code> is used to create custom <a href=\"macros.html\">macros</a>.</p>\n</li>\n<li>\n<p><code class=\"hljs\">union</code> is used to declare a <a href=\"items/unions.html\">union</a> and is only a keyword when used in a\nunion declaration.</p>\n</li>\n<li>\n<p><code class=\"hljs\">'static</code> is used for the static lifetime and cannot be used as a <a href=\"items/generics.html\">generic\nlifetime parameter</a> or <a href=\"expressions/loop-expr.html#loop-labels\">loop label</a></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-compile_fail hljs\">// error[E0262]: invalid lifetime parameter name: `'static`\nfn invalid_lifetime_parameter&lt;'static&gt;(s: &amp;'static str) -&gt; &amp;'static str { s }\n</code></pre>\n</li>\n<li>\n<p>In the 2015 edition, <a href=\"types/trait-object.html\"><code class=\"hljs\">dyn</code></a> is a keyword when used in a type position\nfollowed by a path that does not start with <code class=\"hljs\">::</code>.</p>\n<p>Beginning in the 2018 edition, <code class=\"hljs\">dyn</code> has been promoted to a strict keyword.</p>\n</li>\n</ul>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nKW_MACRO_RULES    : <code class=\"hljs\">macro_rules</code><br>\nKW_UNION          : <code class=\"hljs\">union</code><br>\nKW_STATICLIFETIME : <code class=\"hljs\">'static</code></p>\n<p><strong><sup>Lexer 2015</sup></strong><br>\nKW_DYN            : <code class=\"hljs\">dyn</code></p>\n</blockquote>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"identifiers\"><a class=\"header\" href=\"#identifiers\">Identifiers</a></h1>\n<blockquote>\n<p><strong><sup>Lexer:<sup></sup></sup></strong><br>\nIDENTIFIER_OR_KEYWORD :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; XID_Start XID_Continue<sup>*</sup><br>\n&nbsp;&nbsp; | <code class=\"hljs\">_</code> XID_Continue<sup>+</sup></p>\n<p>RAW_IDENTIFIER : <code class=\"hljs\">r#</code> IDENTIFIER_OR_KEYWORD <sub><em>Except <code class=\"hljs\">crate</code>, <code class=\"hljs\">self</code>, <code class=\"hljs\">super</code>, <code class=\"hljs\">Self</code></em></sub></p>\n<p>NON_KEYWORD_IDENTIFIER : IDENTIFIER_OR_KEYWORD <sub><em>Except a <a href=\"keywords.html#strict-keywords\">strict</a> or <a href=\"keywords.html#reserved-keywords\">reserved</a> keyword</em></sub></p>\n<p>IDENTIFIER :<br>\nNON_KEYWORD_IDENTIFIER | RAW_IDENTIFIER</p>\n</blockquote>\n<!-- When updating the version, update the UAX links, too. -->\n<p>Identifiers follow the specification in <a href=\"https://www.unicode.org/reports/tr31/tr31-37.html\">Unicode Standard Annex #31</a> for Unicode version 15.0, with the additions described below. Some examples of identifiers:</p>\n<ul>\n<li><code class=\"hljs\">foo</code></li>\n<li><code class=\"hljs\">_identifier</code></li>\n<li><code class=\"hljs\">r#true</code></li>\n<li><code class=\"hljs\">Москва</code></li>\n<li><code class=\"hljs\">東京</code></li>\n</ul>\n<p>The profile used from UAX #31 is:</p>\n<ul>\n<li>Start := <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Start%3A%5D&amp;abb=on&amp;g=&amp;i=\"><code class=\"hljs\">XID_Start</code></a>, plus the underscore character (U+005F)</li>\n<li>Continue := <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Continue%3A%5D&amp;abb=on&amp;g=&amp;i=\"><code class=\"hljs\">XID_Continue</code></a></li>\n<li>Medial := empty</li>\n</ul>\n<p>with the additional constraint that a single underscore character is not an identifier.</p>\n<blockquote>\n<p><strong>Note</strong>: Identifiers starting with an underscore are typically used to indicate an identifier that is intentionally unused, and will silence the unused warning in <code class=\"hljs\">rustc</code>.</p>\n</blockquote>\n<p>Identifiers may not be a <a href=\"keywords.html#strict-keywords\">strict</a> or <a href=\"keywords.html#reserved-keywords\">reserved</a> keyword without the <code class=\"hljs\">r#</code> prefix described below in <a href=\"identifiers.html#raw-identifiers\">raw identifiers</a>.</p>\n<p>Zero width non-joiner (ZWNJ U+200C) and zero width joiner (ZWJ U+200D) characters are not allowed in identifiers.</p>\n<p>Identifiers are restricted to the ASCII subset of <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Start%3A%5D&amp;abb=on&amp;g=&amp;i=\"><code class=\"hljs\">XID_Start</code></a> and <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Continue%3A%5D&amp;abb=on&amp;g=&amp;i=\"><code class=\"hljs\">XID_Continue</code></a> in the following situations:</p>\n<ul>\n<li><a href=\"items/extern-crates.html\"><code class=\"hljs\">extern crate</code></a> declarations</li>\n<li>External crate names referenced in a <a href=\"paths.html\">path</a></li>\n<li><a href=\"items/modules.html\">Module</a> names loaded from the filesystem without a <a href=\"items/modules.html#the-path-attribute\"><code class=\"hljs\">path</code> attribute</a></li>\n<li><a href=\"abi.html#the-no_mangle-attribute\"><code class=\"hljs\">no_mangle</code></a> attributed items</li>\n<li>Item names in <a href=\"items/external-blocks.html\">external blocks</a></li>\n</ul>\n<h2 id=\"normalization\"><a class=\"header\" href=\"#normalization\">Normalization</a></h2>\n<p>Identifiers are normalized using Normalization Form C (NFC) as defined in <a href=\"https://www.unicode.org/reports/tr15/tr15-53.html\">Unicode Standard Annex #15</a>. Two identifiers are equal if their NFC forms are equal.</p>\n<p><a href=\"procedural-macros.html\">Procedural</a> and <a href=\"macros-by-example.html\">declarative</a> macros receive normalized identifiers in their input.</p>\n<h2 id=\"raw-identifiers\"><a class=\"header\" href=\"#raw-identifiers\">Raw identifiers</a></h2>\n<p>A raw identifier is like a normal identifier, but prefixed by <code class=\"hljs\">r#</code>. (Note that\nthe <code class=\"hljs\">r#</code> prefix is not included as part of the actual identifier.)\nUnlike a normal identifier, a raw identifier may be any strict or reserved\nkeyword except the ones listed above for <code class=\"hljs\">RAW_IDENTIFIER</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"comments\"><a class=\"header\" href=\"#comments\">Comments</a></h1>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nLINE_COMMENT :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">//</code> (~[<code class=\"hljs\">/</code> <code class=\"hljs\">!</code> <code class=\"hljs\">\\n</code>] | <code class=\"hljs\">//</code>) ~<code class=\"hljs\">\\n</code><sup>*</sup><br>\n&nbsp;&nbsp; | <code class=\"hljs\">//</code></p>\n<p>BLOCK_COMMENT :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">/*</code> (~[<code class=\"hljs\">*</code> <code class=\"hljs\">!</code>] | <code class=\"hljs\">**</code> | <em>BlockCommentOrDoc</em>)\n(<em>BlockCommentOrDoc</em> | ~<code class=\"hljs\">*/</code>)<sup>*</sup> <code class=\"hljs\">*/</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">/**/</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">/***/</code></p>\n<p>INNER_LINE_DOC :<br>\n&nbsp;&nbsp; <code class=\"hljs\">//!</code> ~[<code class=\"hljs\">\\n</code> <em>IsolatedCR</em>]<sup>*</sup></p>\n<p>INNER_BLOCK_DOC :<br>\n&nbsp;&nbsp; <code class=\"hljs\">/*!</code> ( <em>BlockCommentOrDoc</em> | ~[<code class=\"hljs\">*/</code> <em>IsolatedCR</em>] )<sup>*</sup> <code class=\"hljs\">*/</code></p>\n<p>OUTER_LINE_DOC :<br>\n&nbsp;&nbsp; <code class=\"hljs\">///</code> (~<code class=\"hljs\">/</code> ~[<code class=\"hljs\">\\n</code> <em>IsolatedCR</em>]<sup>*</sup>)<sup>?</sup></p>\n<p>OUTER_BLOCK_DOC :<br>\n&nbsp;&nbsp; <code class=\"hljs\">/**</code> (~<code class=\"hljs\">*</code> | <em>BlockCommentOrDoc</em> )\n(<em>BlockCommentOrDoc</em> | ~[<code class=\"hljs\">*/</code> <em>IsolatedCR</em>])<sup>*</sup> <code class=\"hljs\">*/</code></p>\n<p><em>BlockCommentOrDoc</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; BLOCK_COMMENT<br>\n&nbsp;&nbsp; | OUTER_BLOCK_DOC<br>\n&nbsp;&nbsp; | INNER_BLOCK_DOC</p>\n<p><em>IsolatedCR</em> :<br>\n&nbsp;&nbsp; \\r</p>\n</blockquote>\n<h2 id=\"non-doc-comments\"><a class=\"header\" href=\"#non-doc-comments\">Non-doc comments</a></h2>\n<p>Comments follow the general C++ style of line (<code class=\"hljs\">//</code>) and\nblock (<code class=\"hljs\">/* ... */</code>) comment forms. Nested block comments are supported.</p>\n<p>Non-doc comments are interpreted as a form of whitespace.</p>\n<h2 id=\"doc-comments\"><a class=\"header\" href=\"#doc-comments\">Doc comments</a></h2>\n<p>Line doc comments beginning with exactly <em>three</em> slashes (<code class=\"hljs\">///</code>), and block\ndoc comments (<code class=\"hljs\">/** ... */</code>), both outer doc comments, are interpreted as a\nspecial syntax for <a href=\"../rustdoc/the-doc-attribute.html\"><code class=\"hljs\">doc</code> attributes</a>. That is, they are equivalent to writing\n<code class=\"hljs\">#[doc=\"...\"]</code> around the body of the comment, i.e., <code class=\"hljs\">/// Foo</code> turns into\n<code class=\"hljs\">#[doc=\"Foo\"]</code> and <code class=\"hljs\">/** Bar */</code> turns into <code class=\"hljs\">#[doc=\"Bar\"]</code>.</p>\n<p>Line comments beginning with <code class=\"hljs\">//!</code> and block comments <code class=\"hljs\">/*! ... */</code> are\ndoc comments that apply to the parent of the comment, rather than the item\nthat follows.  That is, they are equivalent to writing <code class=\"hljs\">#![doc=\"...\"]</code> around\nthe body of the comment. <code class=\"hljs\">//!</code> comments are usually used to document\nmodules that occupy a source file.</p>\n<p>The character <code class=\"hljs\">U+000D</code> (CR) is not allowed in doc comments.</p>\n<blockquote>\n<p><strong>Note</strong>:  The sequence <code class=\"hljs\">U+000D</code> (CR) immediately followed by <code class=\"hljs\">U+000A</code> (LF) would have been previously transformed into a single <code class=\"hljs\">U+000A</code> (LF).</p>\n</blockquote>\n<h2 id=\"examples\"><a class=\"header\" href=\"#examples\">Examples</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">//! A doc comment that applies to the implicit anonymous module of this crate</span>\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> outer_module {\n\n    <span class=\"hljs-comment\">//!  - Inner line doc</span>\n    <span class=\"hljs-comment\">//!! - Still an inner line doc (but with a bang at the beginning)</span>\n\n    <span class=\"hljs-comment\">/*!  - Inner block doc */</span>\n    <span class=\"hljs-comment\">/*!! - Still an inner block doc (but with a bang at the beginning) */</span>\n\n    <span class=\"hljs-comment\">//   - Only a comment</span>\n    <span class=\"hljs-comment\">///  - Outer line doc (exactly 3 slashes)</span>\n    <span class=\"hljs-comment\">//// - Only a comment</span>\n\n    <span class=\"hljs-comment\">/*   - Only a comment */</span>\n    <span class=\"hljs-comment\">/**  - Outer block doc (exactly) 2 asterisks */</span>\n    <span class=\"hljs-comment\">/*** - Only a comment */</span>\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> inner_module {}\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> nested_comments {\n        <span class=\"hljs-comment\">/* In Rust <span class=\"hljs-comment\">/* we can <span class=\"hljs-comment\">/* nest comments */</span> */</span> */</span>\n\n        <span class=\"hljs-comment\">// All three types of block comments can contain or be nested inside</span>\n        <span class=\"hljs-comment\">// any other type:</span>\n\n        <span class=\"hljs-comment\">/*   <span class=\"hljs-comment\">/* */</span>  <span class=\"hljs-comment\">/** */</span>  <span class=\"hljs-comment\">/*! */</span>  */</span>\n        <span class=\"hljs-comment\">/*!  <span class=\"hljs-comment\">/* */</span>  <span class=\"hljs-comment\">/** */</span>  <span class=\"hljs-comment\">/*! */</span>  */</span>\n        <span class=\"hljs-comment\">/**  <span class=\"hljs-comment\">/* */</span>  <span class=\"hljs-comment\">/** */</span>  <span class=\"hljs-comment\">/*! */</span>  */</span>\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> dummy_item {}\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> degenerate_cases {\n        <span class=\"hljs-comment\">// empty inner line doc</span>\n        <span class=\"hljs-comment\">//!</span>\n\n        <span class=\"hljs-comment\">// empty inner block doc</span>\n        <span class=\"hljs-comment\">/*!*/</span>\n\n        <span class=\"hljs-comment\">// empty line comment</span>\n        <span class=\"hljs-comment\">//</span>\n\n        <span class=\"hljs-comment\">// empty outer line doc</span>\n        <span class=\"hljs-comment\">///</span>\n\n        <span class=\"hljs-comment\">// empty block comment</span>\n        <span class=\"hljs-comment\">/**/</span>\n\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> dummy_item {}\n\n        <span class=\"hljs-comment\">// empty 2-asterisk block isn't a doc block, it is a block comment</span>\n        <span class=\"hljs-comment\">/***/</span>\n\n    }\n\n    <span class=\"hljs-comment\">/* The next one isn't allowed because outer doc comments\n       require an item that will receive the doc */</span>\n\n    <span class=\"hljs-comment\">/// Where is my item?</span>\n<span class=\"boring\">  <span class=\"hljs-keyword\">mod</span> boo {}\n</span>}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"whitespace\"><a class=\"header\" href=\"#whitespace\">Whitespace</a></h1>\n<p>Whitespace is any non-empty string containing only characters that have the\n<a href=\"https://www.unicode.org/reports/tr31/\"><code class=\"hljs\">Pattern_White_Space</code></a> Unicode property, namely:</p>\n<ul>\n<li><code class=\"hljs\">U+0009</code> (horizontal tab, <code class=\"hljs\">'\\t'</code>)</li>\n<li><code class=\"hljs\">U+000A</code> (line feed, <code class=\"hljs\">'\\n'</code>)</li>\n<li><code class=\"hljs\">U+000B</code> (vertical tab)</li>\n<li><code class=\"hljs\">U+000C</code> (form feed)</li>\n<li><code class=\"hljs\">U+000D</code> (carriage return, <code class=\"hljs\">'\\r'</code>)</li>\n<li><code class=\"hljs\">U+0020</code> (space, <code class=\"hljs\">' '</code>)</li>\n<li><code class=\"hljs\">U+0085</code> (next line)</li>\n<li><code class=\"hljs\">U+200E</code> (left-to-right mark)</li>\n<li><code class=\"hljs\">U+200F</code> (right-to-left mark)</li>\n<li><code class=\"hljs\">U+2028</code> (line separator)</li>\n<li><code class=\"hljs\">U+2029</code> (paragraph separator)</li>\n</ul>\n<p>Rust is a \"free-form\" language, meaning that all forms of whitespace serve only\nto separate <em>tokens</em> in the grammar, and have no semantic significance.</p>\n<p>A Rust program has identical meaning if each whitespace element is replaced\nwith any other legal whitespace element, such as a single space character.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"tokens\"><a class=\"header\" href=\"#tokens\">Tokens</a></h1>\n<p>Tokens are primitive productions in the grammar defined by regular\n(non-recursive) languages.  Rust source input can be broken down\ninto the following kinds of tokens:</p>\n<ul>\n<li><a href=\"keywords.html\">Keywords</a></li>\n<li><a href=\"identifiers.html\">Identifiers</a></li>\n<li><a href=\"tokens.html#literals\">Literals</a></li>\n<li><a href=\"tokens.html#lifetimes-and-loop-labels\">Lifetimes</a></li>\n<li><a href=\"tokens.html#punctuation\">Punctuation</a></li>\n<li><a href=\"tokens.html#delimiters\">Delimiters</a></li>\n</ul>\n<p>Within this documentation's grammar, \"simple\" tokens are given in <a href=\"notation.html#string-table-productions\">string\ntable production</a> form, and appear in <code class=\"hljs\">monospace</code> font.</p>\n<h2 id=\"literals\"><a class=\"header\" href=\"#literals\">Literals</a></h2>\n<p>Literals are tokens used in <a href=\"expressions/literal-expr.html\">literal expressions</a>.</p>\n<h3 id=\"examples-1\"><a class=\"header\" href=\"#examples-1\">Examples</a></h3>\n<h4 id=\"characters-and-strings\"><a class=\"header\" href=\"#characters-and-strings\">Characters and strings</a></h4>\n<div class=\"table-wrapper\"><table><thead><tr><th></th><th>Example</th><th><code class=\"hljs\">#</code>&nbsp;sets<sup class=\"footnote-reference\"><a href=\"#nsets\">1</a></sup></th><th>Characters</th><th>Escapes</th></tr></thead><tbody>\n<tr><td><a href=\"tokens.html#character-literals\">Character</a></td><td><code class=\"hljs\">'H'</code></td><td>0</td><td>All Unicode</td><td><a href=\"tokens.html#quote-escapes\">Quote</a> &amp; <a href=\"tokens.html#ascii-escapes\">ASCII</a> &amp; <a href=\"tokens.html#unicode-escapes\">Unicode</a></td></tr>\n<tr><td><a href=\"tokens.html#string-literals\">String</a></td><td><code class=\"hljs\">\"hello\"</code></td><td>0</td><td>All Unicode</td><td><a href=\"tokens.html#quote-escapes\">Quote</a> &amp; <a href=\"tokens.html#ascii-escapes\">ASCII</a> &amp; <a href=\"tokens.html#unicode-escapes\">Unicode</a></td></tr>\n<tr><td><a href=\"tokens.html#raw-string-literals\">Raw string</a></td><td><code class=\"hljs\">r#\"hello\"#</code></td><td>&lt;256</td><td>All Unicode</td><td><code class=\"hljs\">N/A</code></td></tr>\n<tr><td><a href=\"tokens.html#byte-literals\">Byte</a></td><td><code class=\"hljs\">b'H'</code></td><td>0</td><td>All ASCII</td><td><a href=\"tokens.html#quote-escapes\">Quote</a> &amp; <a href=\"tokens.html#byte-escapes\">Byte</a></td></tr>\n<tr><td><a href=\"tokens.html#byte-string-literals\">Byte string</a></td><td><code class=\"hljs\">b\"hello\"</code></td><td>0</td><td>All ASCII</td><td><a href=\"tokens.html#quote-escapes\">Quote</a> &amp; <a href=\"tokens.html#byte-escapes\">Byte</a></td></tr>\n<tr><td><a href=\"tokens.html#raw-byte-string-literals\">Raw byte string</a></td><td><code class=\"hljs\">br#\"hello\"#</code></td><td>&lt;256</td><td>All ASCII</td><td><code class=\"hljs\">N/A</code></td></tr>\n<tr><td><a href=\"tokens.html#c-string-literals\">C string</a></td><td><code class=\"hljs\">c\"hello\"</code></td><td>0</td><td>All Unicode</td><td><a href=\"tokens.html#quote-escapes\">Quote</a> &amp; <a href=\"tokens.html#byte-escapes\">Byte</a> &amp; <a href=\"tokens.html#unicode-escapes\">Unicode</a></td></tr>\n<tr><td><a href=\"tokens.html#raw-c-string-literals\">Raw C string</a></td><td><code class=\"hljs\">cr#\"hello\"#</code></td><td>&lt;256</td><td>All Unicode</td><td><code class=\"hljs\">N/A</code></td></tr>\n</tbody></table>\n</div>\n<div class=\"footnote-definition\" id=\"nsets\"><sup class=\"footnote-definition-label\">1</sup>\n<p>The number of <code class=\"hljs\">#</code>s on each side of the same literal must be equivalent.</p>\n</div>\n<blockquote>\n<p><strong>Note</strong>:  Character and string literal tokens never include the sequence of <code class=\"hljs\">U+000D</code> (CR) immediately followed by <code class=\"hljs\">U+000A</code> (LF): this pair would have been previously transformed into a single <code class=\"hljs\">U+000A</code> (LF).</p>\n</blockquote>\n<h4 id=\"ascii-escapes\"><a class=\"header\" href=\"#ascii-escapes\">ASCII escapes</a></h4>\n<div class=\"table-wrapper\"><table><thead><tr><th></th><th>Name</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">\\x41</code></td><td>7-bit character code (exactly 2 digits, up to 0x7F)</td></tr>\n<tr><td><code class=\"hljs\">\\n</code></td><td>Newline</td></tr>\n<tr><td><code class=\"hljs\">\\r</code></td><td>Carriage return</td></tr>\n<tr><td><code class=\"hljs\">\\t</code></td><td>Tab</td></tr>\n<tr><td><code class=\"hljs\">\\\\</code></td><td>Backslash</td></tr>\n<tr><td><code class=\"hljs\">\\0</code></td><td>Null</td></tr>\n</tbody></table>\n</div>\n<h4 id=\"byte-escapes\"><a class=\"header\" href=\"#byte-escapes\">Byte escapes</a></h4>\n<div class=\"table-wrapper\"><table><thead><tr><th></th><th>Name</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">\\x7F</code></td><td>8-bit character code (exactly 2 digits)</td></tr>\n<tr><td><code class=\"hljs\">\\n</code></td><td>Newline</td></tr>\n<tr><td><code class=\"hljs\">\\r</code></td><td>Carriage return</td></tr>\n<tr><td><code class=\"hljs\">\\t</code></td><td>Tab</td></tr>\n<tr><td><code class=\"hljs\">\\\\</code></td><td>Backslash</td></tr>\n<tr><td><code class=\"hljs\">\\0</code></td><td>Null</td></tr>\n</tbody></table>\n</div>\n<h4 id=\"unicode-escapes\"><a class=\"header\" href=\"#unicode-escapes\">Unicode escapes</a></h4>\n<div class=\"table-wrapper\"><table><thead><tr><th></th><th>Name</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">\\u{7FFF}</code></td><td>24-bit Unicode character code (up to 6 digits)</td></tr>\n</tbody></table>\n</div>\n<h4 id=\"quote-escapes\"><a class=\"header\" href=\"#quote-escapes\">Quote escapes</a></h4>\n<div class=\"table-wrapper\"><table><thead><tr><th></th><th>Name</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">\\'</code></td><td>Single quote</td></tr>\n<tr><td><code class=\"hljs\">\\\"</code></td><td>Double quote</td></tr>\n</tbody></table>\n</div>\n<h4 id=\"numbers\"><a class=\"header\" href=\"#numbers\">Numbers</a></h4>\n<div class=\"table-wrapper\"><table><thead><tr><th><a href=\"tokens.html#number-literals\">Number literals</a><sup class=\"footnote-reference\"><a href=\"#nl\">2</a></sup></th><th>Example</th><th>Exponentiation</th></tr></thead><tbody>\n<tr><td>Decimal integer</td><td><code class=\"hljs\">98_222</code></td><td><code class=\"hljs\">N/A</code></td></tr>\n<tr><td>Hex integer</td><td><code class=\"hljs\">0xff</code></td><td><code class=\"hljs\">N/A</code></td></tr>\n<tr><td>Octal integer</td><td><code class=\"hljs\">0o77</code></td><td><code class=\"hljs\">N/A</code></td></tr>\n<tr><td>Binary integer</td><td><code class=\"hljs\">0b1111_0000</code></td><td><code class=\"hljs\">N/A</code></td></tr>\n<tr><td>Floating-point</td><td><code class=\"hljs\">123.0E+77</code></td><td><code class=\"hljs\">Optional</code></td></tr>\n</tbody></table>\n</div>\n<div class=\"footnote-definition\" id=\"nl\"><sup class=\"footnote-definition-label\">2</sup>\n<p>All number literals allow <code class=\"hljs\">_</code> as a visual separator: <code class=\"hljs\">1_234.0E+18f64</code></p>\n</div>\n<h4 id=\"suffixes\"><a class=\"header\" href=\"#suffixes\">Suffixes</a></h4>\n<p>A suffix is a sequence of characters following the primary part of a literal (without intervening whitespace), of the same form as a non-raw identifier or keyword.</p>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nSUFFIX : IDENTIFIER_OR_KEYWORD<br>\nSUFFIX_NO_E : SUFFIX <sub><em>not beginning with <code class=\"hljs\">e</code>&nbsp;or&nbsp;<code class=\"hljs\">E</code></em></sub></p>\n</blockquote>\n<p>Any kind of literal (string, integer, etc) with any suffix is valid as a token.</p>\n<p>A literal token with any suffix can be passed to a macro without producing an error.\nThe macro itself will decide how to interpret such a token and whether to produce an error or not.\nIn particular, the <code class=\"hljs\">literal</code> fragment specifier for by-example macros matches literal tokens with arbitrary suffixes.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">macro_rules!</span> blackhole { ($tt:tt) =&gt; () }\n<span class=\"hljs-built_in\">macro_rules!</span> blackhole_lit { ($l:literal) =&gt; () }\n\nblackhole!(<span class=\"hljs-string\">\"string\"</span>suffix); <span class=\"hljs-comment\">// OK</span>\nblackhole_lit!(<span class=\"hljs-number\">1</span>suffix); <span class=\"hljs-comment\">// OK</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>However, suffixes on literal tokens which are interpreted as literal expressions or patterns are restricted.\nAny suffixes are rejected on non-numeric literal tokens,\nand numeric literal tokens are accepted only with suffixes from the list below.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Integer</th><th>Floating-point</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">u8</code>, <code class=\"hljs\">i8</code>, <code class=\"hljs\">u16</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">u32</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">u64</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">u128</code>, <code class=\"hljs\">i128</code>, <code class=\"hljs\">usize</code>, <code class=\"hljs\">isize</code></td><td><code class=\"hljs\">f32</code>, <code class=\"hljs\">f64</code></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"character-and-string-literals\"><a class=\"header\" href=\"#character-and-string-literals\">Character and string literals</a></h3>\n<h4 id=\"character-literals\"><a class=\"header\" href=\"#character-literals\">Character literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nCHAR_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">'</code> ( ~[<code class=\"hljs\">'</code> <code class=\"hljs\">\\</code> \\n \\r \\t] | QUOTE_ESCAPE | ASCII_ESCAPE | UNICODE_ESCAPE ) <code class=\"hljs\">'</code> SUFFIX<sup>?</sup></p>\n<p>QUOTE_ESCAPE :<br>\n&nbsp;&nbsp; <code class=\"hljs\">\\'</code> | <code class=\"hljs\">\\\"</code></p>\n<p>ASCII_ESCAPE :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">\\x</code> OCT_DIGIT HEX_DIGIT<br>\n&nbsp;&nbsp; | <code class=\"hljs\">\\n</code> | <code class=\"hljs\">\\r</code> | <code class=\"hljs\">\\t</code> | <code class=\"hljs\">\\\\</code> | <code class=\"hljs\">\\0</code></p>\n<p>UNICODE_ESCAPE :<br>\n&nbsp;&nbsp; <code class=\"hljs\">\\u{</code> ( HEX_DIGIT <code class=\"hljs\">_</code><sup>*</sup> )<sup>1..6</sup> <code class=\"hljs\">}</code></p>\n</blockquote>\n<p>A <em>character literal</em> is a single Unicode character enclosed within two\n<code class=\"hljs\">U+0027</code> (single-quote) characters, with the exception of <code class=\"hljs\">U+0027</code> itself,\nwhich must be <em>escaped</em> by a preceding <code class=\"hljs\">U+005C</code> character (<code class=\"hljs\">\\</code>).</p>\n<h4 id=\"string-literals\"><a class=\"header\" href=\"#string-literals\">String literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nSTRING_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">\"</code> (<br>\n&nbsp;&nbsp; &nbsp;&nbsp; ~[<code class=\"hljs\">\"</code> <code class=\"hljs\">\\</code> <em>IsolatedCR</em>]<br>\n&nbsp;&nbsp; &nbsp;&nbsp; | QUOTE_ESCAPE<br>\n&nbsp;&nbsp; &nbsp;&nbsp; | ASCII_ESCAPE<br>\n&nbsp;&nbsp; &nbsp;&nbsp; | UNICODE_ESCAPE<br>\n&nbsp;&nbsp; &nbsp;&nbsp; | STRING_CONTINUE<br>\n&nbsp;&nbsp; )<sup>*</sup> <code class=\"hljs\">\"</code> SUFFIX<sup>?</sup></p>\n<p>STRING_CONTINUE :<br>\n&nbsp;&nbsp; <code class=\"hljs\">\\</code> <em>followed by</em> \\n</p>\n</blockquote>\n<p>A <em>string literal</em> is a sequence of any Unicode characters enclosed within two\n<code class=\"hljs\">U+0022</code> (double-quote) characters, with the exception of <code class=\"hljs\">U+0022</code> itself,\nwhich must be <em>escaped</em> by a preceding <code class=\"hljs\">U+005C</code> character (<code class=\"hljs\">\\</code>).</p>\n<p>Line-breaks, represented by the  character <code class=\"hljs\">U+000A</code> (LF), are allowed in string literals.\nWhen an unescaped <code class=\"hljs\">U+005C</code> character (<code class=\"hljs\">\\</code>) occurs immediately before a line break, the line break does not appear in the string represented by the token.\nSee <a href=\"expressions/literal-expr.html#string-continuation-escapes\">String continuation escapes</a> for details.\nThe character <code class=\"hljs\">U+000D</code> (CR) may not appear in a string literal other than as part of such a string continuation escape.</p>\n<h4 id=\"character-escapes\"><a class=\"header\" href=\"#character-escapes\">Character escapes</a></h4>\n<p>Some additional <em>escapes</em> are available in either character or non-raw string\nliterals. An escape starts with a <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) and continues with one of the\nfollowing forms:</p>\n<ul>\n<li>A <em>7-bit code point escape</em> starts with <code class=\"hljs\">U+0078</code> (<code class=\"hljs\">x</code>) and is\nfollowed by exactly two <em>hex digits</em> with value up to <code class=\"hljs\">0x7F</code>. It denotes the\nASCII character with value equal to the provided hex value. Higher values are\nnot permitted because it is ambiguous whether they mean Unicode code points or\nbyte values.</li>\n<li>A <em>24-bit code point escape</em> starts with <code class=\"hljs\">U+0075</code> (<code class=\"hljs\">u</code>) and is followed\nby up to six <em>hex digits</em> surrounded by braces <code class=\"hljs\">U+007B</code> (<code class=\"hljs\">{</code>) and <code class=\"hljs\">U+007D</code>\n(<code class=\"hljs\">}</code>). It denotes the Unicode code point equal to the provided hex value.</li>\n<li>A <em>whitespace escape</em> is one of the characters <code class=\"hljs\">U+006E</code> (<code class=\"hljs\">n</code>), <code class=\"hljs\">U+0072</code>\n(<code class=\"hljs\">r</code>), or <code class=\"hljs\">U+0074</code> (<code class=\"hljs\">t</code>), denoting the Unicode values <code class=\"hljs\">U+000A</code> (LF),\n<code class=\"hljs\">U+000D</code> (CR) or <code class=\"hljs\">U+0009</code> (HT) respectively.</li>\n<li>The <em>null escape</em> is the character <code class=\"hljs\">U+0030</code> (<code class=\"hljs\">0</code>) and denotes the Unicode\nvalue <code class=\"hljs\">U+0000</code> (NUL).</li>\n<li>The <em>backslash escape</em> is the character <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) which must be\nescaped in order to denote itself.</li>\n</ul>\n<h4 id=\"raw-string-literals\"><a class=\"header\" href=\"#raw-string-literals\">Raw string literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nRAW_STRING_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">r</code> RAW_STRING_CONTENT SUFFIX<sup>?</sup></p>\n<p>RAW_STRING_CONTENT :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">\"</code> ( ~ <em>IsolatedCR</em> )<sup>* (non-greedy)</sup> <code class=\"hljs\">\"</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">#</code> RAW_STRING_CONTENT <code class=\"hljs\">#</code></p>\n</blockquote>\n<p>Raw string literals do not process any escapes. They start with the character\n<code class=\"hljs\">U+0072</code> (<code class=\"hljs\">r</code>), followed by fewer than 256 of the character <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>) and a\n<code class=\"hljs\">U+0022</code> (double-quote) character.</p>\n<p>The <em>raw string body</em> can contain any sequence of Unicode characters other than <code class=\"hljs\">U+000D</code> (CR).\nIt is terminated only by another <code class=\"hljs\">U+0022</code> (double-quote) character, followed by the same number of <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>) characters that preceded the opening <code class=\"hljs\">U+0022</code> (double-quote) character.</p>\n<p>All Unicode characters contained in the raw string body represent themselves,\nthe characters <code class=\"hljs\">U+0022</code> (double-quote) (except when followed by at least as\nmany <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>) characters as were used to start the raw string literal) or\n<code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) do not have any special meaning.</p>\n<p>Examples for string literals:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-string\">\"foo\"</span>; <span class=\"hljs-string\">r\"foo\"</span>;                     <span class=\"hljs-comment\">// foo</span>\n<span class=\"hljs-string\">\"\\\"foo\\\"\"</span>; <span class=\"hljs-string\">r#\"\"foo\"\"#</span>;             <span class=\"hljs-comment\">// \"foo\"</span>\n\n<span class=\"hljs-string\">\"foo #\\\"# bar\"</span>;\n<span class=\"hljs-string\">r##\"foo #\"# bar\"##</span>;                <span class=\"hljs-comment\">// foo #\"# bar</span>\n\n<span class=\"hljs-string\">\"\\x52\"</span>; <span class=\"hljs-string\">\"R\"</span>; <span class=\"hljs-string\">r\"R\"</span>;                 <span class=\"hljs-comment\">// R</span>\n<span class=\"hljs-string\">\"\\\\x52\"</span>; <span class=\"hljs-string\">r\"\\x52\"</span>;                  <span class=\"hljs-comment\">// \\x52</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"byte-and-byte-string-literals\"><a class=\"header\" href=\"#byte-and-byte-string-literals\">Byte and byte string literals</a></h3>\n<h4 id=\"byte-literals\"><a class=\"header\" href=\"#byte-literals\">Byte literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nBYTE_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">b'</code> ( ASCII_FOR_CHAR | BYTE_ESCAPE )  <code class=\"hljs\">'</code> SUFFIX<sup>?</sup></p>\n<p>ASCII_FOR_CHAR :<br>\n&nbsp;&nbsp; <em>any ASCII (i.e. 0x00 to 0x7F), except</em> <code class=\"hljs\">'</code>, <code class=\"hljs\">\\</code>, \\n, \\r or \\t</p>\n<p>BYTE_ESCAPE :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">\\x</code> HEX_DIGIT HEX_DIGIT<br>\n&nbsp;&nbsp; | <code class=\"hljs\">\\n</code> | <code class=\"hljs\">\\r</code> | <code class=\"hljs\">\\t</code> | <code class=\"hljs\">\\\\</code> | <code class=\"hljs\">\\0</code> | <code class=\"hljs\">\\'</code> | <code class=\"hljs\">\\\"</code></p>\n</blockquote>\n<p>A <em>byte literal</em> is a single ASCII character (in the <code class=\"hljs\">U+0000</code> to <code class=\"hljs\">U+007F</code>\nrange) or a single <em>escape</em> preceded by the characters <code class=\"hljs\">U+0062</code> (<code class=\"hljs\">b</code>) and\n<code class=\"hljs\">U+0027</code> (single-quote), and followed by the character <code class=\"hljs\">U+0027</code>. If the character\n<code class=\"hljs\">U+0027</code> is present within the literal, it must be <em>escaped</em> by a preceding\n<code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) character. It is equivalent to a <code class=\"hljs\">u8</code> unsigned 8-bit integer\n<em>number literal</em>.</p>\n<h4 id=\"byte-string-literals\"><a class=\"header\" href=\"#byte-string-literals\">Byte string literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nBYTE_STRING_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">b\"</code> ( ASCII_FOR_STRING | BYTE_ESCAPE | STRING_CONTINUE )<sup>*</sup> <code class=\"hljs\">\"</code> SUFFIX<sup>?</sup></p>\n<p>ASCII_FOR_STRING :<br>\n&nbsp;&nbsp; <em>any ASCII (i.e 0x00 to 0x7F), except</em> <code class=\"hljs\">\"</code>, <code class=\"hljs\">\\</code> <em>and IsolatedCR</em></p>\n</blockquote>\n<p>A non-raw <em>byte string literal</em> is a sequence of ASCII characters and <em>escapes</em>,\npreceded by the characters <code class=\"hljs\">U+0062</code> (<code class=\"hljs\">b</code>) and <code class=\"hljs\">U+0022</code> (double-quote), and\nfollowed by the character <code class=\"hljs\">U+0022</code>. If the character <code class=\"hljs\">U+0022</code> is present within\nthe literal, it must be <em>escaped</em> by a preceding <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) character.\nAlternatively, a byte string literal can be a <em>raw byte string literal</em>, defined\nbelow.</p>\n<p>Line-breaks, represented by the  character <code class=\"hljs\">U+000A</code> (LF), are allowed in byte string literals.\nWhen an unescaped <code class=\"hljs\">U+005C</code> character (<code class=\"hljs\">\\</code>) occurs immediately before a line break, the line break does not appear in the string represented by the token.\nSee <a href=\"expressions/literal-expr.html#string-continuation-escapes\">String continuation escapes</a> for details.\nThe character <code class=\"hljs\">U+000D</code> (CR) may not appear in a byte string literal other than as part of such a string continuation escape.</p>\n<p>Some additional <em>escapes</em> are available in either byte or non-raw byte string\nliterals. An escape starts with a <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) and continues with one of the\nfollowing forms:</p>\n<ul>\n<li>A <em>byte escape</em> escape starts with <code class=\"hljs\">U+0078</code> (<code class=\"hljs\">x</code>) and is\nfollowed by exactly two <em>hex digits</em>. It denotes the byte\nequal to the provided hex value.</li>\n<li>A <em>whitespace escape</em> is one of the characters <code class=\"hljs\">U+006E</code> (<code class=\"hljs\">n</code>), <code class=\"hljs\">U+0072</code>\n(<code class=\"hljs\">r</code>), or <code class=\"hljs\">U+0074</code> (<code class=\"hljs\">t</code>), denoting the bytes values <code class=\"hljs\">0x0A</code> (ASCII LF),\n<code class=\"hljs\">0x0D</code> (ASCII CR) or <code class=\"hljs\">0x09</code> (ASCII HT) respectively.</li>\n<li>The <em>null escape</em> is the character <code class=\"hljs\">U+0030</code> (<code class=\"hljs\">0</code>) and denotes the byte\nvalue <code class=\"hljs\">0x00</code> (ASCII NUL).</li>\n<li>The <em>backslash escape</em> is the character <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) which must be\nescaped in order to denote its ASCII encoding <code class=\"hljs\">0x5C</code>.</li>\n</ul>\n<h4 id=\"raw-byte-string-literals\"><a class=\"header\" href=\"#raw-byte-string-literals\">Raw byte string literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nRAW_BYTE_STRING_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">br</code> RAW_BYTE_STRING_CONTENT SUFFIX<sup>?</sup></p>\n<p>RAW_BYTE_STRING_CONTENT :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">\"</code> ASCII_FOR_RAW<sup>* (non-greedy)</sup> <code class=\"hljs\">\"</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">#</code> RAW_BYTE_STRING_CONTENT <code class=\"hljs\">#</code></p>\n<p>ASCII_FOR_RAW :<br>\n&nbsp;&nbsp; <em>any ASCII (i.e. 0x00 to 0x7F) except IsolatedCR</em></p>\n</blockquote>\n<p>Raw byte string literals do not process any escapes. They start with the\ncharacter <code class=\"hljs\">U+0062</code> (<code class=\"hljs\">b</code>), followed by <code class=\"hljs\">U+0072</code> (<code class=\"hljs\">r</code>), followed by fewer than 256\nof the character <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>), and a <code class=\"hljs\">U+0022</code> (double-quote) character.</p>\n<p>The <em>raw string body</em> can contain any sequence of ASCII characters other than <code class=\"hljs\">U+000D</code> (CR).\nIt is terminated only by another <code class=\"hljs\">U+0022</code> (double-quote) character, followed by the same number of <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>) characters that preceded the opening <code class=\"hljs\">U+0022</code> (double-quote) character.\nA raw byte string literal can not contain any non-ASCII byte.</p>\n<p>All characters contained in the raw string body represent their ASCII encoding,\nthe characters <code class=\"hljs\">U+0022</code> (double-quote) (except when followed by at least as\nmany <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>) characters as were used to start the raw string literal) or\n<code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) do not have any special meaning.</p>\n<p>Examples for byte string literals:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-string\">b\"foo\"</span>; b<span class=\"hljs-string\">r\"foo\"</span>;                     <span class=\"hljs-comment\">// foo</span>\n<span class=\"hljs-string\">b\"\\\"foo\\\"\"</span>; b<span class=\"hljs-string\">r#\"\"foo\"\"#</span>;             <span class=\"hljs-comment\">// \"foo\"</span>\n\n<span class=\"hljs-string\">b\"foo #\\\"# bar\"</span>;\nb<span class=\"hljs-string\">r##\"foo #\"# bar\"##</span>;                 <span class=\"hljs-comment\">// foo #\"# bar</span>\n\n<span class=\"hljs-string\">b\"\\x52\"</span>; <span class=\"hljs-string\">b\"R\"</span>; b<span class=\"hljs-string\">r\"R\"</span>;                <span class=\"hljs-comment\">// R</span>\n<span class=\"hljs-string\">b\"\\\\x52\"</span>; b<span class=\"hljs-string\">r\"\\x52\"</span>;                  <span class=\"hljs-comment\">// \\x52</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"c-string-and-raw-c-string-literals\"><a class=\"header\" href=\"#c-string-and-raw-c-string-literals\">C string and raw C string literals</a></h3>\n<h4 id=\"c-string-literals\"><a class=\"header\" href=\"#c-string-literals\">C string literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nC_STRING_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">c\"</code> (<br>\n&nbsp;&nbsp; &nbsp;&nbsp; ~[<code class=\"hljs\">\"</code> <code class=\"hljs\">\\</code> <em>IsolatedCR</em> <em>NUL</em>]<br>\n&nbsp;&nbsp; &nbsp;&nbsp; | BYTE_ESCAPE <em>except <code class=\"hljs\">\\0</code> or <code class=\"hljs\">\\x00</code></em><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | UNICODE_ESCAPE <em>except <code class=\"hljs\">\\u{0}</code>, <code class=\"hljs\">\\u{00}</code>, …, <code class=\"hljs\">\\u{000000}</code></em><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | STRING_CONTINUE<br>\n&nbsp;&nbsp; )<sup>*</sup> <code class=\"hljs\">\"</code> SUFFIX<sup>?</sup></p>\n</blockquote>\n<p>A <em>C string literal</em> is a sequence of Unicode characters and <em>escapes</em>,\npreceded by the characters <code class=\"hljs\">U+0063</code> (<code class=\"hljs\">c</code>) and <code class=\"hljs\">U+0022</code> (double-quote), and\nfollowed by the character <code class=\"hljs\">U+0022</code>. If the character <code class=\"hljs\">U+0022</code> is present within\nthe literal, it must be <em>escaped</em> by a preceding <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) character.\nAlternatively, a C string literal can be a <em>raw C string literal</em>, defined below.</p>\n<p>C strings are implicitly terminated by byte <code class=\"hljs\">0x00</code>, so the C string literal\n<code class=\"hljs\">c\"\"</code> is equivalent to manually constructing a <code class=\"hljs\">&amp;CStr</code> from the byte string\nliteral <code class=\"hljs\">b\"\\x00\"</code>. Other than the implicit terminator, byte <code class=\"hljs\">0x00</code> is not\npermitted within a C string.</p>\n<p>Line-breaks, represented by the  character <code class=\"hljs\">U+000A</code> (LF), are allowed in C string literals.\nWhen an unescaped <code class=\"hljs\">U+005C</code> character (<code class=\"hljs\">\\</code>) occurs immediately before a line break, the line break does not appear in the string represented by the token.\nSee <a href=\"expressions/literal-expr.html#string-continuation-escapes\">String continuation escapes</a> for details.\nThe character <code class=\"hljs\">U+000D</code> (CR) may not appear in a C string literal other than as part of such a string continuation escape.</p>\n<p>Some additional <em>escapes</em> are available in non-raw C string literals. An escape\nstarts with a <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) and continues with one of the following forms:</p>\n<ul>\n<li>A <em>byte escape</em> escape starts with <code class=\"hljs\">U+0078</code> (<code class=\"hljs\">x</code>) and is followed by exactly\ntwo <em>hex digits</em>. It denotes the byte equal to the provided hex value.</li>\n<li>A <em>24-bit code point escape</em> starts with <code class=\"hljs\">U+0075</code> (<code class=\"hljs\">u</code>) and is followed\nby up to six <em>hex digits</em> surrounded by braces <code class=\"hljs\">U+007B</code> (<code class=\"hljs\">{</code>) and <code class=\"hljs\">U+007D</code>\n(<code class=\"hljs\">}</code>). It denotes the Unicode code point equal to the provided hex value,\nencoded as UTF-8.</li>\n<li>A <em>whitespace escape</em> is one of the characters <code class=\"hljs\">U+006E</code> (<code class=\"hljs\">n</code>), <code class=\"hljs\">U+0072</code>\n(<code class=\"hljs\">r</code>), or <code class=\"hljs\">U+0074</code> (<code class=\"hljs\">t</code>), denoting the bytes values <code class=\"hljs\">0x0A</code> (ASCII LF),\n<code class=\"hljs\">0x0D</code> (ASCII CR) or <code class=\"hljs\">0x09</code> (ASCII HT) respectively.</li>\n<li>The <em>backslash escape</em> is the character <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) which must be\nescaped in order to denote its ASCII encoding <code class=\"hljs\">0x5C</code>.</li>\n</ul>\n<p>A C string represents bytes with no defined encoding, but a C string literal\nmay contain Unicode characters above <code class=\"hljs\">U+007F</code>. Such characters will be replaced\nwith the bytes of that character's UTF-8 representation.</p>\n<p>The following C string literals are equivalent:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>c<span class=\"hljs-string\">\"æ\"</span>;        <span class=\"hljs-comment\">// LATIN SMALL LETTER AE (U+00E6)</span>\nc<span class=\"hljs-string\">\"\\u{00E6}\"</span>;\nc<span class=\"hljs-string\">\"\\xC3\\xA6\"</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p><strong>Edition Differences</strong>: C string literals are accepted in the 2021 edition or\nlater. In earlier additions the token <code class=\"hljs\">c\"\"</code> is lexed as <code class=\"hljs\">c \"\"</code>.</p>\n</blockquote>\n<h4 id=\"raw-c-string-literals\"><a class=\"header\" href=\"#raw-c-string-literals\">Raw C string literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nRAW_C_STRING_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">cr</code> RAW_C_STRING_CONTENT SUFFIX<sup>?</sup></p>\n<p>RAW_C_STRING_CONTENT :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">\"</code> ( ~ <em>IsolatedCR</em> <em>NUL</em> )<sup>* (non-greedy)</sup> <code class=\"hljs\">\"</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">#</code> RAW_C_STRING_CONTENT <code class=\"hljs\">#</code></p>\n</blockquote>\n<p>Raw C string literals do not process any escapes. They start with the\ncharacter <code class=\"hljs\">U+0063</code> (<code class=\"hljs\">c</code>), followed by <code class=\"hljs\">U+0072</code> (<code class=\"hljs\">r</code>), followed by fewer than 256\nof the character <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>), and a <code class=\"hljs\">U+0022</code> (double-quote) character.</p>\n<p>The <em>raw C string body</em> can contain any sequence of Unicode characters other than <code class=\"hljs\">U+0000</code> (NUL) and <code class=\"hljs\">U+000D</code> (CR).\nIt is terminated only by another <code class=\"hljs\">U+0022</code> (double-quote) character, followed by the same number of <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>) characters that preceded the opening <code class=\"hljs\">U+0022</code> (double-quote) character.</p>\n<p>All characters contained in the raw C string body represent themselves in UTF-8\nencoding. The characters <code class=\"hljs\">U+0022</code> (double-quote) (except when followed by at\nleast as many <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>) characters as were used to start the raw C string\nliteral) or <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) do not have any special meaning.</p>\n<blockquote>\n<p><strong>Edition Differences</strong>: Raw C string literals are accepted in the 2021\nedition or later. In earlier additions the token <code class=\"hljs\">cr\"\"</code> is lexed as <code class=\"hljs\">cr \"\"</code>,\nand <code class=\"hljs\">cr#\"\"#</code> is lexed as <code class=\"hljs\">cr #\"\"#</code> (which is non-grammatical).</p>\n</blockquote>\n<h4 id=\"examples-for-c-string-and-raw-c-string-literals\"><a class=\"header\" href=\"#examples-for-c-string-and-raw-c-string-literals\">Examples for C string and raw C string literals</a></h4>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>c<span class=\"hljs-string\">\"foo\"</span>; c<span class=\"hljs-string\">r\"foo\"</span>;                     <span class=\"hljs-comment\">// foo</span>\nc<span class=\"hljs-string\">\"\\\"foo\\\"\"</span>; c<span class=\"hljs-string\">r#\"\"foo\"\"#</span>;             <span class=\"hljs-comment\">// \"foo\"</span>\n\nc<span class=\"hljs-string\">\"foo #\\\"# bar\"</span>;\nc<span class=\"hljs-string\">r##\"foo #\"# bar\"##</span>;                 <span class=\"hljs-comment\">// foo #\"# bar</span>\n\nc<span class=\"hljs-string\">\"\\x52\"</span>; c<span class=\"hljs-string\">\"R\"</span>; c<span class=\"hljs-string\">r\"R\"</span>;                <span class=\"hljs-comment\">// R</span>\nc<span class=\"hljs-string\">\"\\\\x52\"</span>; c<span class=\"hljs-string\">r\"\\x52\"</span>;                  <span class=\"hljs-comment\">// \\x52</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"number-literals\"><a class=\"header\" href=\"#number-literals\">Number literals</a></h3>\n<p>A <em>number literal</em> is either an <em>integer literal</em> or a <em>floating-point\nliteral</em>. The grammar for recognizing the two kinds of literals is mixed.</p>\n<h4 id=\"integer-literals\"><a class=\"header\" href=\"#integer-literals\">Integer literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nINTEGER_LITERAL :<br>\n&nbsp;&nbsp; ( DEC_LITERAL | BIN_LITERAL | OCT_LITERAL | HEX_LITERAL )\nSUFFIX_NO_E<sup>?</sup></p>\n<p>DEC_LITERAL :<br>\n&nbsp;&nbsp; DEC_DIGIT (DEC_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup></p>\n<p>BIN_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">0b</code> (BIN_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup> BIN_DIGIT (BIN_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup></p>\n<p>OCT_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">0o</code> (OCT_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup> OCT_DIGIT (OCT_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup></p>\n<p>HEX_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">0x</code> (HEX_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup> HEX_DIGIT (HEX_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup></p>\n<p>BIN_DIGIT : [<code class=\"hljs\">0</code>-<code class=\"hljs\">1</code>]</p>\n<p>OCT_DIGIT : [<code class=\"hljs\">0</code>-<code class=\"hljs\">7</code>]</p>\n<p>DEC_DIGIT : [<code class=\"hljs\">0</code>-<code class=\"hljs\">9</code>]</p>\n<p>HEX_DIGIT : [<code class=\"hljs\">0</code>-<code class=\"hljs\">9</code> <code class=\"hljs\">a</code>-<code class=\"hljs\">f</code> <code class=\"hljs\">A</code>-<code class=\"hljs\">F</code>]</p>\n</blockquote>\n<p>An <em>integer literal</em> has one of four forms:</p>\n<ul>\n<li>A <em>decimal literal</em> starts with a <em>decimal digit</em> and continues with any\nmixture of <em>decimal digits</em> and <em>underscores</em>.</li>\n<li>A <em>hex literal</em> starts with the character sequence <code class=\"hljs\">U+0030</code> <code class=\"hljs\">U+0078</code>\n(<code class=\"hljs\">0x</code>) and continues as any mixture (with at least one digit) of hex digits\nand underscores.</li>\n<li>An <em>octal literal</em> starts with the character sequence <code class=\"hljs\">U+0030</code> <code class=\"hljs\">U+006F</code>\n(<code class=\"hljs\">0o</code>) and continues as any mixture (with at least one digit) of octal digits\nand underscores.</li>\n<li>A <em>binary literal</em> starts with the character sequence <code class=\"hljs\">U+0030</code> <code class=\"hljs\">U+0062</code>\n(<code class=\"hljs\">0b</code>) and continues as any mixture (with at least one digit) of binary digits\nand underscores.</li>\n</ul>\n<p>Like any literal, an integer literal may be followed (immediately, without any spaces) by a suffix as described above.\nThe suffix may not begin with <code class=\"hljs\">e</code> or <code class=\"hljs\">E</code>, as that would be interpreted as the exponent of a floating-point literal.\nSee <a href=\"expressions/literal-expr.html#integer-literal-expressions\">Integer literal expressions</a> for the effect of these suffixes.</p>\n<p>Examples of integer literals which are accepted as literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#![allow(overflowing_literals)]</span>\n</span><span class=\"hljs-number\">123</span>;\n<span class=\"hljs-number\">123i32</span>;\n<span class=\"hljs-number\">123u32</span>;\n<span class=\"hljs-number\">123_u32</span>;\n\n<span class=\"hljs-number\">0xff</span>;\n<span class=\"hljs-number\">0xff_u8</span>;\n<span class=\"hljs-number\">0x01_f32</span>; <span class=\"hljs-comment\">// integer 7986, not floating-point 1.0</span>\n<span class=\"hljs-number\">0x01_e3</span>;  <span class=\"hljs-comment\">// integer 483, not floating-point 1000.0</span>\n\n<span class=\"hljs-number\">0o70</span>;\n<span class=\"hljs-number\">0o70_i16</span>;\n\n<span class=\"hljs-number\">0b1111_1111_1001_0000</span>;\n<span class=\"hljs-number\">0b1111_1111_1001_0000i64</span>;\n<span class=\"hljs-number\">0b________1</span>;\n\n<span class=\"hljs-number\">0usize</span>;\n\n<span class=\"hljs-comment\">// These are too big for their type, but are accepted as literal expressions.</span>\n<span class=\"hljs-number\">128_i8</span>;\n<span class=\"hljs-number\">256_u8</span>;\n\n<span class=\"hljs-comment\">// This is an integer literal, accepted as a floating-point literal expression.</span>\n<span class=\"hljs-number\">5f32</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Note that <code class=\"hljs\">-1i8</code>, for example, is analyzed as two tokens: <code class=\"hljs\">-</code> followed by <code class=\"hljs\">1i8</code>.</p>\n<p>Examples of integer literals which are not accepted as literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(FALSE)]</span> {\n</span><span class=\"hljs-number\">0</span>invalidSuffix;\n<span class=\"hljs-number\">123</span>AFB43;\n<span class=\"hljs-number\">0b010</span>a;\n<span class=\"hljs-number\">0xAB_CD_EF_</span>GH;\n<span class=\"hljs-number\">0b1111_f32</span>;\n<span class=\"boring\">}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<h4 id=\"tuple-index\"><a class=\"header\" href=\"#tuple-index\">Tuple index</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nTUPLE_INDEX: <br>\n&nbsp;&nbsp; INTEGER_LITERAL</p>\n</blockquote>\n<p>A tuple index is used to refer to the fields of <a href=\"types/tuple.html\">tuples</a>, <a href=\"items/structs.html\">tuple structs</a>, and\n<a href=\"items/enumerations.html\">tuple variants</a>.</p>\n<p>Tuple indices are compared with the literal token directly. Tuple indices\nstart with <code class=\"hljs\">0</code> and each successive index increments the value by <code class=\"hljs\">1</code> as a\ndecimal value. Thus, only decimal values will match, and the value must not\nhave any extra <code class=\"hljs\">0</code> prefix characters.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> example = (<span class=\"hljs-string\">\"dog\"</span>, <span class=\"hljs-string\">\"cat\"</span>, <span class=\"hljs-string\">\"horse\"</span>);\n<span class=\"hljs-keyword\">let</span> dog = example.<span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">let</span> cat = example.<span class=\"hljs-number\">1</span>;\n<span class=\"hljs-comment\">// The following examples are invalid.</span>\n<span class=\"hljs-keyword\">let</span> cat = example.<span class=\"hljs-number\">01</span>;  <span class=\"hljs-comment\">// ERROR no field named `01`</span>\n<span class=\"hljs-keyword\">let</span> horse = example.<span class=\"hljs-number\">0b10</span>;  <span class=\"hljs-comment\">// ERROR no field named `0b10`</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p><strong>Note</strong>: Tuple indices may include certain suffixes, but this is not intended to be valid, and may be removed in a future version.\nSee <a href=\"https://github.com/rust-lang/rust/issues/60210\">https://github.com/rust-lang/rust/issues/60210</a> for more information.</p>\n</blockquote>\n<h4 id=\"floating-point-literals\"><a class=\"header\" href=\"#floating-point-literals\">Floating-point literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nFLOAT_LITERAL :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; DEC_LITERAL <code class=\"hljs\">.</code>\n<em>(not immediately followed by <code class=\"hljs\">.</code>, <code class=\"hljs\">_</code> or an XID_Start character)</em><br>\n&nbsp;&nbsp; | DEC_LITERAL <code class=\"hljs\">.</code> DEC_LITERAL SUFFIX_NO_E<sup>?</sup><br>\n&nbsp;&nbsp; | DEC_LITERAL (<code class=\"hljs\">.</code> DEC_LITERAL)<sup>?</sup> FLOAT_EXPONENT SUFFIX<sup>?</sup></p>\n<p>FLOAT_EXPONENT :<br>\n&nbsp;&nbsp; (<code class=\"hljs\">e</code>|<code class=\"hljs\">E</code>) (<code class=\"hljs\">+</code>|<code class=\"hljs\">-</code>)<sup>?</sup>\n(DEC_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup> DEC_DIGIT (DEC_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup></p>\n</blockquote>\n<p>A <em>floating-point literal</em> has one of two forms:</p>\n<ul>\n<li>A <em>decimal literal</em> followed by a period character <code class=\"hljs\">U+002E</code> (<code class=\"hljs\">.</code>). This is\noptionally followed by another decimal literal, with an optional <em>exponent</em>.</li>\n<li>A single <em>decimal literal</em> followed by an <em>exponent</em>.</li>\n</ul>\n<p>Like integer literals, a floating-point literal may be followed by a\nsuffix, so long as the pre-suffix part does not end with <code class=\"hljs\">U+002E</code> (<code class=\"hljs\">.</code>).\nThe suffix may not begin with <code class=\"hljs\">e</code> or <code class=\"hljs\">E</code> if the literal does not include an exponent.\nSee <a href=\"expressions/literal-expr.html#floating-point-literal-expressions\">Floating-point literal expressions</a> for the effect of these suffixes.</p>\n<p>Examples of floating-point literals which are accepted as literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-number\">123.0f64</span>;\n<span class=\"hljs-number\">0.1f64</span>;\n<span class=\"hljs-number\">0.1f32</span>;\n<span class=\"hljs-number\">12E+99_f64</span>;\n<span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">f64</span> = <span class=\"hljs-number\">2</span>.;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This last example is different because it is not possible to use the suffix\nsyntax with a floating point literal ending in a period. <code class=\"hljs\">2.f64</code> would attempt\nto call a method named <code class=\"hljs\">f64</code> on <code class=\"hljs\">2</code>.</p>\n<p>Note that <code class=\"hljs\">-1.0</code>, for example, is analyzed as two tokens: <code class=\"hljs\">-</code> followed by <code class=\"hljs\">1.0</code>.</p>\n<p>Examples of floating-point literals which are not accepted as literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(FALSE)]</span> {\n</span><span class=\"hljs-number\">2.0</span>f80;\n<span class=\"hljs-number\">2e5</span>f80;\n<span class=\"hljs-number\">2e5</span>e6;\n<span class=\"hljs-number\">2.0e5</span>e6;\n<span class=\"hljs-number\">1.3e10u64</span>;\n<span class=\"boring\">}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<h4 id=\"reserved-forms-similar-to-number-literals\"><a class=\"header\" href=\"#reserved-forms-similar-to-number-literals\">Reserved forms similar to number literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nRESERVED_NUMBER :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; BIN_LITERAL [<code class=\"hljs\">2</code>-<code class=\"hljs\">9</code>​]<br>\n&nbsp;&nbsp; | OCT_LITERAL [<code class=\"hljs\">8</code>-<code class=\"hljs\">9</code>​]<br>\n&nbsp;&nbsp; | ( BIN_LITERAL | OCT_LITERAL | HEX_LITERAL ) <code class=\"hljs\">.</code> <br>\n&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <em>(not immediately followed by <code class=\"hljs\">.</code>, <code class=\"hljs\">_</code> or an XID_Start character)</em><br>\n&nbsp;&nbsp; | ( BIN_LITERAL | OCT_LITERAL ) (<code class=\"hljs\">e</code>|<code class=\"hljs\">E</code>)<br>\n&nbsp;&nbsp; | <code class=\"hljs\">0b</code> <code class=\"hljs\">_</code><sup>*</sup> <em>end of input or not BIN_DIGIT</em><br>\n&nbsp;&nbsp; | <code class=\"hljs\">0o</code> <code class=\"hljs\">_</code><sup>*</sup> <em>end of input or not OCT_DIGIT</em><br>\n&nbsp;&nbsp; | <code class=\"hljs\">0x</code> <code class=\"hljs\">_</code><sup>*</sup> <em>end of input or not HEX_DIGIT</em><br>\n&nbsp;&nbsp; | DEC_LITERAL ( . DEC_LITERAL)<sup>?</sup> (<code class=\"hljs\">e</code>|<code class=\"hljs\">E</code>) (<code class=\"hljs\">+</code>|<code class=\"hljs\">-</code>)<sup>?</sup> <em>end of input or not DEC_DIGIT</em></p>\n</blockquote>\n<p>The following lexical forms similar to number literals are <em>reserved forms</em>.\nDue to the possible ambiguity these raise, they are rejected by the tokenizer instead of being interpreted as separate tokens.</p>\n<ul>\n<li>\n<p>An unsuffixed binary or octal literal followed, without intervening whitespace, by a decimal digit out of the range for its radix.</p>\n</li>\n<li>\n<p>An unsuffixed binary, octal, or hexadecimal literal followed, without intervening whitespace, by a period character (with the same restrictions on what follows the period as for floating-point literals).</p>\n</li>\n<li>\n<p>An unsuffixed binary or octal literal followed, without intervening whitespace, by the character <code class=\"hljs\">e</code> or <code class=\"hljs\">E</code>.</p>\n</li>\n<li>\n<p>Input which begins with one of the radix prefixes but is not a valid binary, octal, or hexadecimal literal (because it contains no digits).</p>\n</li>\n<li>\n<p>Input which has the form of a floating-point literal with no digits in the exponent.</p>\n</li>\n</ul>\n<p>Examples of reserved forms:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-number\">0b010</span>2;  <span class=\"hljs-comment\">// this is not `0b010` followed by `2`</span>\n<span class=\"hljs-number\">0o127</span>9;  <span class=\"hljs-comment\">// this is not `0o127` followed by `9`</span>\n<span class=\"hljs-number\">0x80</span>.<span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// this is not `0x80` followed by `.` and `0`</span>\n<span class=\"hljs-number\">0b101</span>e;  <span class=\"hljs-comment\">// this is not a suffixed literal, or `0b101` followed by `e`</span>\n<span class=\"hljs-number\">0</span>b;      <span class=\"hljs-comment\">// this is not an integer literal, or `0` followed by `b`</span>\n<span class=\"hljs-number\">0b_</span>;     <span class=\"hljs-comment\">// this is not an integer literal, or `0` followed by `b_`</span>\n<span class=\"hljs-number\">2</span>e;      <span class=\"hljs-comment\">// this is not a floating-point literal, or `2` followed by `e`</span>\n<span class=\"hljs-number\">2.0</span>e;    <span class=\"hljs-comment\">// this is not a floating-point literal, or `2.0` followed by `e`</span>\n<span class=\"hljs-number\">2</span>em;     <span class=\"hljs-comment\">// this is not a suffixed literal, or `2` followed by `em`</span>\n<span class=\"hljs-number\">2.0</span>em;   <span class=\"hljs-comment\">// this is not a suffixed literal, or `2.0` followed by `em`</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"lifetimes-and-loop-labels\"><a class=\"header\" href=\"#lifetimes-and-loop-labels\">Lifetimes and loop labels</a></h2>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nLIFETIME_TOKEN :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">'</code> <a href=\"identifiers.html\">IDENTIFIER_OR_KEYWORD</a>\n<em>(not immediately followed by <code class=\"hljs\">'</code>)</em><br>\n&nbsp;&nbsp; | <code class=\"hljs\">'_</code>\n<em>(not immediately followed by <code class=\"hljs\">'</code>)</em></p>\n<p>LIFETIME_OR_LABEL :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">'</code> <a href=\"identifiers.html\">NON_KEYWORD_IDENTIFIER</a>\n<em>(not immediately followed by <code class=\"hljs\">'</code>)</em></p>\n</blockquote>\n<p>Lifetime parameters and <a href=\"expressions/loop-expr.html\">loop labels</a> use LIFETIME_OR_LABEL tokens. Any\nLIFETIME_TOKEN will be accepted by the lexer, and for example, can be used in\nmacros.</p>\n<h2 id=\"punctuation\"><a class=\"header\" href=\"#punctuation\">Punctuation</a></h2>\n<p>Punctuation symbol tokens are listed here for completeness. Their individual\nusages and meanings are defined in the linked pages.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Name</th><th>Usage</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">+</code></td><td>Plus</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Addition</a>, <a href=\"trait-bounds.html\">Trait Bounds</a>, <a href=\"macros-by-example.html\">Macro Kleene Matcher</a></td></tr>\n<tr><td><code class=\"hljs\">-</code></td><td>Minus</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Subtraction</a>, <a href=\"expressions/operator-expr.html#negation-operators\">Negation</a></td></tr>\n<tr><td><code class=\"hljs\">*</code></td><td>Star</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Multiplication</a>, <a href=\"expressions/operator-expr.html#the-dereference-operator\">Dereference</a>, <a href=\"types/pointer.html#raw-pointers-const-and-mut\">Raw Pointers</a>, <a href=\"macros-by-example.html\">Macro Kleene Matcher</a>, <a href=\"items/use-declarations.html\">Use wildcards</a></td></tr>\n<tr><td><code class=\"hljs\">/</code></td><td>Slash</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Division</a></td></tr>\n<tr><td><code class=\"hljs\">%</code></td><td>Percent</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Remainder</a></td></tr>\n<tr><td><code class=\"hljs\">^</code></td><td>Caret</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Bitwise and Logical XOR</a></td></tr>\n<tr><td><code class=\"hljs\">!</code></td><td>Not</td><td><a href=\"expressions/operator-expr.html#negation-operators\">Bitwise and Logical NOT</a>, <a href=\"macros-by-example.html\">Macro Calls</a>, <a href=\"attributes.html\">Inner Attributes</a>, <a href=\"types/never.html\">Never Type</a>, <a href=\"items/implementations.html\">Negative impls</a></td></tr>\n<tr><td><code class=\"hljs\">&amp;</code></td><td>And</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Bitwise and Logical AND</a>, <a href=\"expressions/operator-expr.html#borrow-operators\">Borrow</a>, <a href=\"types/pointer.html\">References</a>, <a href=\"patterns.html#reference-patterns\">Reference patterns</a></td></tr>\n<tr><td><code class=\"hljs\">|</code></td><td>Or</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Bitwise and Logical OR</a>, <a href=\"expressions/closure-expr.html\">Closures</a>, Patterns in <a href=\"expressions/match-expr.html\">match</a>, <a href=\"expressions/if-expr.html#if-let-expressions\">if let</a>, and <a href=\"expressions/loop-expr.html#predicate-pattern-loops\">while let</a></td></tr>\n<tr><td><code class=\"hljs\">&amp;&amp;</code></td><td>AndAnd</td><td><a href=\"expressions/operator-expr.html#lazy-boolean-operators\">Lazy AND</a>, <a href=\"expressions/operator-expr.html#borrow-operators\">Borrow</a>, <a href=\"types/pointer.html\">References</a>, <a href=\"patterns.html#reference-patterns\">Reference patterns</a></td></tr>\n<tr><td><code class=\"hljs\">||</code></td><td>OrOr</td><td><a href=\"expressions/operator-expr.html#lazy-boolean-operators\">Lazy OR</a>, <a href=\"expressions/closure-expr.html\">Closures</a></td></tr>\n<tr><td><code class=\"hljs\">&lt;&lt;</code></td><td>Shl</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Shift Left</a>, <a href=\"items/generics.html\">Nested Generics</a></td></tr>\n<tr><td><code class=\"hljs\">&gt;&gt;</code></td><td>Shr</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Shift Right</a>, <a href=\"items/generics.html\">Nested Generics</a></td></tr>\n<tr><td><code class=\"hljs\">+=</code></td><td>PlusEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Addition assignment</a></td></tr>\n<tr><td><code class=\"hljs\">-=</code></td><td>MinusEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Subtraction assignment</a></td></tr>\n<tr><td><code class=\"hljs\">*=</code></td><td>StarEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Multiplication assignment</a></td></tr>\n<tr><td><code class=\"hljs\">/=</code></td><td>SlashEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Division assignment</a></td></tr>\n<tr><td><code class=\"hljs\">%=</code></td><td>PercentEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Remainder assignment</a></td></tr>\n<tr><td><code class=\"hljs\">^=</code></td><td>CaretEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Bitwise XOR assignment</a></td></tr>\n<tr><td><code class=\"hljs\">&amp;=</code></td><td>AndEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Bitwise And assignment</a></td></tr>\n<tr><td><code class=\"hljs\">|=</code></td><td>OrEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Bitwise Or assignment</a></td></tr>\n<tr><td><code class=\"hljs\">&lt;&lt;=</code></td><td>ShlEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Shift Left assignment</a></td></tr>\n<tr><td><code class=\"hljs\">&gt;&gt;=</code></td><td>ShrEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Shift Right assignment</a>, <a href=\"items/generics.html\">Nested Generics</a></td></tr>\n<tr><td><code class=\"hljs\">=</code></td><td>Eq</td><td><a href=\"expressions/operator-expr.html#assignment-expressions\">Assignment</a>, <a href=\"attributes.html\">Attributes</a>, Various type definitions</td></tr>\n<tr><td><code class=\"hljs\">==</code></td><td>EqEq</td><td><a href=\"expressions/operator-expr.html#comparison-operators\">Equal</a></td></tr>\n<tr><td><code class=\"hljs\">!=</code></td><td>Ne</td><td><a href=\"expressions/operator-expr.html#comparison-operators\">Not Equal</a></td></tr>\n<tr><td><code class=\"hljs\">&gt;</code></td><td>Gt</td><td><a href=\"expressions/operator-expr.html#comparison-operators\">Greater than</a>, <a href=\"items/generics.html\">Generics</a>, <a href=\"paths.html\">Paths</a></td></tr>\n<tr><td><code class=\"hljs\">&lt;</code></td><td>Lt</td><td><a href=\"expressions/operator-expr.html#comparison-operators\">Less than</a>, <a href=\"items/generics.html\">Generics</a>, <a href=\"paths.html\">Paths</a></td></tr>\n<tr><td><code class=\"hljs\">&gt;=</code></td><td>Ge</td><td><a href=\"expressions/operator-expr.html#comparison-operators\">Greater than or equal to</a>, <a href=\"items/generics.html\">Generics</a></td></tr>\n<tr><td><code class=\"hljs\">&lt;=</code></td><td>Le</td><td><a href=\"expressions/operator-expr.html#comparison-operators\">Less than or equal to</a></td></tr>\n<tr><td><code class=\"hljs\">@</code></td><td>At</td><td><a href=\"patterns.html#identifier-patterns\">Subpattern binding</a></td></tr>\n<tr><td><code class=\"hljs\">_</code></td><td>Underscore</td><td><a href=\"patterns.html#wildcard-pattern\">Wildcard patterns</a>, <a href=\"types/inferred.html\">Inferred types</a>, Unnamed items in <a href=\"items/constant-items.html\">constants</a>, <a href=\"items/extern-crates.html\">extern crates</a>, <a href=\"items/use-declarations.html\">use declarations</a>, and <a href=\"expressions/underscore-expr.html\">destructuring assignment</a></td></tr>\n<tr><td><code class=\"hljs\">.</code></td><td>Dot</td><td><a href=\"expressions/field-expr.html\">Field access</a>, <a href=\"expressions/tuple-expr.html#tuple-indexing-expressions\">Tuple index</a></td></tr>\n<tr><td><code class=\"hljs\">..</code></td><td>DotDot</td><td><a href=\"expressions/range-expr.html\">Range</a>, <a href=\"expressions/struct-expr.html\">Struct expressions</a>, <a href=\"patterns.html\">Patterns</a>, <a href=\"patterns.html#range-patterns\">Range Patterns</a></td></tr>\n<tr><td><code class=\"hljs\">...</code></td><td>DotDotDot</td><td><a href=\"items/external-blocks.html\">Variadic functions</a>, <a href=\"patterns.html#range-patterns\">Range patterns</a></td></tr>\n<tr><td><code class=\"hljs\">..=</code></td><td>DotDotEq</td><td><a href=\"expressions/range-expr.html\">Inclusive Range</a>, <a href=\"patterns.html#range-patterns\">Range patterns</a></td></tr>\n<tr><td><code class=\"hljs\">,</code></td><td>Comma</td><td>Various separators</td></tr>\n<tr><td><code class=\"hljs\">;</code></td><td>Semi</td><td>Terminator for various items and statements, <a href=\"types/array.html\">Array types</a></td></tr>\n<tr><td><code class=\"hljs\">:</code></td><td>Colon</td><td>Various separators</td></tr>\n<tr><td><code class=\"hljs\">::</code></td><td>PathSep</td><td><a href=\"paths.html\">Path separator</a></td></tr>\n<tr><td><code class=\"hljs\">-&gt;</code></td><td>RArrow</td><td><a href=\"items/functions.html\">Function return type</a>, <a href=\"expressions/closure-expr.html\">Closure return type</a>, <a href=\"types/function-pointer.html\">Function pointer type</a></td></tr>\n<tr><td><code class=\"hljs\">=&gt;</code></td><td>FatArrow</td><td><a href=\"expressions/match-expr.html\">Match arms</a>, <a href=\"macros-by-example.html\">Macros</a></td></tr>\n<tr><td><code class=\"hljs\">&lt;-</code></td><td>LArrow</td><td>The left arrow symbol has been unused since before Rust 1.0, but it is still treated as a single token</td></tr>\n<tr><td><code class=\"hljs\">#</code></td><td>Pound</td><td><a href=\"attributes.html\">Attributes</a></td></tr>\n<tr><td><code class=\"hljs\">$</code></td><td>Dollar</td><td><a href=\"macros-by-example.html\">Macros</a></td></tr>\n<tr><td><code class=\"hljs\">?</code></td><td>Question</td><td><a href=\"expressions/operator-expr.html#the-question-mark-operator\">Question mark operator</a>, <a href=\"trait-bounds.html#sized\">Questionably sized</a>, <a href=\"macros-by-example.html\">Macro Kleene Matcher</a></td></tr>\n<tr><td><code class=\"hljs\">~</code></td><td>Tilde</td><td>The tilde operator has been unused since before Rust 1.0, but its token may still be used</td></tr>\n</tbody></table>\n</div>\n<h2 id=\"delimiters\"><a class=\"header\" href=\"#delimiters\">Delimiters</a></h2>\n<p>Bracket punctuation is used in various parts of the grammar. An open bracket\nmust always be paired with a close bracket. Brackets and the tokens within\nthem are referred to as \"token trees\" in <a href=\"macros-by-example.html\">macros</a>.  The three types of brackets are:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Bracket</th><th>Type</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">{</code> <code class=\"hljs\">}</code></td><td>Curly braces</td></tr>\n<tr><td><code class=\"hljs\">[</code> <code class=\"hljs\">]</code></td><td>Square brackets</td></tr>\n<tr><td><code class=\"hljs\">(</code> <code class=\"hljs\">)</code></td><td>Parentheses</td></tr>\n</tbody></table>\n</div>\n<h2 id=\"reserved-prefixes\"><a class=\"header\" href=\"#reserved-prefixes\">Reserved prefixes</a></h2>\n<blockquote>\n<p><strong><sup>Lexer 2021+</sup></strong><br>\nRESERVED_TOKEN_DOUBLE_QUOTE : ( IDENTIFIER_OR_KEYWORD <sub><em>Except <code class=\"hljs\">b</code> or <code class=\"hljs\">c</code> or <code class=\"hljs\">r</code> or <code class=\"hljs\">br</code> or <code class=\"hljs\">cr</code></em></sub> | <code class=\"hljs\">_</code> ) <code class=\"hljs\">\"</code><br>\nRESERVED_TOKEN_SINGLE_QUOTE : ( IDENTIFIER_OR_KEYWORD <sub><em>Except <code class=\"hljs\">b</code></em></sub> | <code class=\"hljs\">_</code> ) <code class=\"hljs\">'</code><br>\nRESERVED_TOKEN_POUND : ( IDENTIFIER_OR_KEYWORD <sub><em>Except <code class=\"hljs\">r</code> or <code class=\"hljs\">br</code> or <code class=\"hljs\">cr</code></em></sub> | <code class=\"hljs\">_</code> ) <code class=\"hljs\">#</code></p>\n</blockquote>\n<p>Some lexical forms known as <em>reserved prefixes</em> are reserved for future use.</p>\n<p>Source input which would otherwise be lexically interpreted as a non-raw identifier (or a keyword or <code class=\"hljs\">_</code>) which is immediately followed by a <code class=\"hljs\">#</code>, <code class=\"hljs\">'</code>, or <code class=\"hljs\">\"</code> character (without intervening whitespace) is identified as a reserved prefix.</p>\n<p>Note that raw identifiers, raw string literals, and raw byte string literals may contain a <code class=\"hljs\">#</code> character but are not interpreted as containing a reserved prefix.</p>\n<p>Similarly the <code class=\"hljs\">r</code>, <code class=\"hljs\">b</code>, <code class=\"hljs\">br</code>, <code class=\"hljs\">c</code>, and <code class=\"hljs\">cr</code> prefixes used in raw string literals, byte literals, byte string literals, raw byte string literals, C string literals, and raw C string literals are not interpreted as reserved prefixes.</p>\n<blockquote>\n<p><strong>Edition Differences</strong>: Starting with the 2021 edition, reserved prefixes are reported as an error by the lexer (in particular, they cannot be passed to macros).</p>\n<p>Before the 2021 edition, reserved prefixes are accepted by the lexer and interpreted as multiple tokens (for example, one token for the identifier or keyword, followed by a <code class=\"hljs\">#</code> token).</p>\n<p>Examples accepted in all editions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">macro_rules!</span> lexes {($($_:tt)*) =&gt; {}}\nlexes!{a #foo}\nlexes!{<span class=\"hljs-keyword\">continue</span> <span class=\"hljs-symbol\">'foo</span>}\nlexes!{<span class=\"hljs-keyword\">match</span> <span class=\"hljs-string\">\"...\"</span> {}}\nlexes!{r#<span class=\"hljs-keyword\">let</span>#foo}         <span class=\"hljs-comment\">// three tokens: r#let # foo</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Examples accepted before the 2021 edition but rejected later:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2018 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">macro_rules!</span> lexes {($($_:tt)*) =&gt; {}}\nlexes!{a#foo}\nlexes!{<span class=\"hljs-keyword\">continue</span><span class=\"hljs-symbol\">'foo</span>}\nlexes!{<span class=\"hljs-keyword\">match</span><span class=\"hljs-string\">\"...\"</span> {}}\n<span class=\"boring\">}</span></code></pre></pre>\n</blockquote>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"macros\"><a class=\"header\" href=\"#macros\">Macros</a></h1>\n<p>The functionality and syntax of Rust can be extended with custom definitions\ncalled macros. They are given names, and invoked through a consistent\nsyntax: <code class=\"hljs\">some_extension!(...)</code>.</p>\n<p>There are two ways to define new macros:</p>\n<ul>\n<li><a href=\"macros-by-example.html\">Macros by Example</a> define new syntax in a higher-level, declarative way.</li>\n<li><a href=\"procedural-macros.html\">Procedural Macros</a> define function-like macros, custom derives, and custom\nattributes using functions that operate on input tokens.</li>\n</ul>\n<h2 id=\"macro-invocation\"><a class=\"header\" href=\"#macro-invocation\">Macro Invocation</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>MacroInvocation</em> :<br>\n&nbsp;&nbsp; <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a> <code class=\"hljs\">!</code> <em>DelimTokenTree</em></p>\n<p><em>DelimTokenTree</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp;  <code class=\"hljs\">(</code> <em>TokenTree</em><sup>*</sup> <code class=\"hljs\">)</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">[</code> <em>TokenTree</em><sup>*</sup> <code class=\"hljs\">]</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">{</code> <em>TokenTree</em><sup>*</sup> <code class=\"hljs\">}</code></p>\n<p><em>TokenTree</em> :<br>\n&nbsp;&nbsp; <a href=\"tokens.html\"><em>Token</em></a><sub><em>except <a href=\"tokens.html#delimiters\">delimiters</a></em></sub> | <em>DelimTokenTree</em></p>\n<p><em>MacroInvocationSemi</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a> <code class=\"hljs\">!</code> <code class=\"hljs\">(</code> <em>TokenTree</em><sup>*</sup> <code class=\"hljs\">)</code> <code class=\"hljs\">;</code><br>\n&nbsp;&nbsp; | <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a> <code class=\"hljs\">!</code> <code class=\"hljs\">[</code> <em>TokenTree</em><sup>*</sup> <code class=\"hljs\">]</code> <code class=\"hljs\">;</code><br>\n&nbsp;&nbsp; | <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a> <code class=\"hljs\">!</code> <code class=\"hljs\">{</code> <em>TokenTree</em><sup>*</sup> <code class=\"hljs\">}</code></p>\n</blockquote>\n<p>A macro invocation expands a macro at compile time and replaces the\ninvocation with the result of the macro. Macros may be invoked in the\nfollowing situations:</p>\n<ul>\n<li><a href=\"expressions.html\">Expressions</a> and <a href=\"statements.html\">statements</a></li>\n<li><a href=\"patterns.html\">Patterns</a></li>\n<li><a href=\"types.html\">Types</a></li>\n<li><a href=\"items.html\">Items</a> including <a href=\"items/associated-items.html\">associated items</a></li>\n<li><a href=\"macros-by-example.html\"><code class=\"hljs\">macro_rules</code></a> transcribers</li>\n<li><a href=\"items/external-blocks.html\">External blocks</a></li>\n</ul>\n<p>When used as an item or a statement, the <em>MacroInvocationSemi</em> form is used\nwhere a semicolon is required at the end when not using curly braces.\n<a href=\"visibility-and-privacy.html\">Visibility qualifiers</a> are never allowed before a macro invocation or\n<a href=\"macros-by-example.html\"><code class=\"hljs\">macro_rules</code></a> definition.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Used as an expression.</span>\n<span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];\n\n<span class=\"hljs-comment\">// Used as a statement.</span>\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello!\"</span>);\n\n<span class=\"hljs-comment\">// Used in a pattern.</span>\n<span class=\"hljs-built_in\">macro_rules!</span> pat {\n    ($i:ident) =&gt; (<span class=\"hljs-literal\">Some</span>($i))\n}\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> pat!(x) = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-built_in\">assert_eq!</span>(x, <span class=\"hljs-number\">1</span>);\n}\n\n<span class=\"hljs-comment\">// Used in a type.</span>\n<span class=\"hljs-built_in\">macro_rules!</span> Tuple {\n    { $A:ty, $B:ty } =&gt; { ($A, $B) };\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">N2</span></span> = Tuple!(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>);\n\n<span class=\"hljs-comment\">// Used as an item.</span>\n<span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cell::RefCell;\n</span>thread_local!(<span class=\"hljs-keyword\">static</span> FOO: RefCell&lt;<span class=\"hljs-built_in\">u32</span>&gt; = RefCell::new(<span class=\"hljs-number\">1</span>));\n\n<span class=\"hljs-comment\">// Used as an associated item.</span>\n<span class=\"hljs-built_in\">macro_rules!</span> const_maker {\n    ($t:ty, $v:tt) =&gt; { <span class=\"hljs-keyword\">const</span> CONST: $t = $v; };\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">T</span></span> {\n    const_maker!{<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-number\">7</span>}\n}\n\n<span class=\"hljs-comment\">// Macro calls within macros.</span>\n<span class=\"hljs-built_in\">macro_rules!</span> example {\n    () =&gt; { <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Macro call in a macro!\"</span>) };\n}\n<span class=\"hljs-comment\">// Outer macro `example` is expanded, then inner macro `println` is expanded.</span>\nexample!();\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"macros-by-example\"><a class=\"header\" href=\"#macros-by-example\">Macros By Example</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>MacroRulesDefinition</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">macro_rules</code> <code class=\"hljs\">!</code> <a href=\"identifiers.html\">IDENTIFIER</a> <em>MacroRulesDef</em></p>\n<p><em>MacroRulesDef</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">(</code> <em>MacroRules</em> <code class=\"hljs\">)</code> <code class=\"hljs\">;</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">[</code> <em>MacroRules</em> <code class=\"hljs\">]</code> <code class=\"hljs\">;</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">{</code> <em>MacroRules</em> <code class=\"hljs\">}</code></p>\n<p><em>MacroRules</em> :<br>\n&nbsp;&nbsp; <em>MacroRule</em> ( <code class=\"hljs\">;</code> <em>MacroRule</em> )<sup>*</sup> <code class=\"hljs\">;</code><sup>?</sup></p>\n<p><em>MacroRule</em> :<br>\n&nbsp;&nbsp; <em>MacroMatcher</em> <code class=\"hljs\">=&gt;</code> <em>MacroTranscriber</em></p>\n<p><em>MacroMatcher</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">(</code> <em>MacroMatch</em><sup>*</sup> <code class=\"hljs\">)</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">[</code> <em>MacroMatch</em><sup>*</sup> <code class=\"hljs\">]</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">{</code> <em>MacroMatch</em><sup>*</sup> <code class=\"hljs\">}</code></p>\n<p><em>MacroMatch</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"tokens.html\"><em>Token</em></a><sub><em>except <code class=\"hljs\">$</code> and <a href=\"tokens.html#delimiters\">delimiters</a></em></sub><br>\n&nbsp;&nbsp; | <em>MacroMatcher</em><br>\n&nbsp;&nbsp; | <code class=\"hljs\">$</code> ( <a href=\"identifiers.html\">IDENTIFIER_OR_KEYWORD</a> <sub><em>except <code class=\"hljs\">crate</code></em></sub> | <a href=\"identifiers.html\">RAW_IDENTIFIER</a> | <code class=\"hljs\">_</code> ) <code class=\"hljs\">:</code> <em>MacroFragSpec</em><br>\n&nbsp;&nbsp; | <code class=\"hljs\">$</code> <code class=\"hljs\">(</code> <em>MacroMatch</em><sup>+</sup> <code class=\"hljs\">)</code> <em>MacroRepSep</em><sup>?</sup> <em>MacroRepOp</em></p>\n<p><em>MacroFragSpec</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">block</code> | <code class=\"hljs\">expr</code> | <code class=\"hljs\">ident</code> | <code class=\"hljs\">item</code> | <code class=\"hljs\">lifetime</code> | <code class=\"hljs\">literal</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">meta</code> | <code class=\"hljs\">pat</code> | <code class=\"hljs\">pat_param</code> | <code class=\"hljs\">path</code> | <code class=\"hljs\">stmt</code> | <code class=\"hljs\">tt</code> | <code class=\"hljs\">ty</code> | <code class=\"hljs\">vis</code></p>\n<p><em>MacroRepSep</em> :<br>\n&nbsp;&nbsp; <a href=\"tokens.html\"><em>Token</em></a><sub><em>except <a href=\"tokens.html#delimiters\">delimiters</a> and MacroRepOp</em></sub></p>\n<p><em>MacroRepOp</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">*</code> | <code class=\"hljs\">+</code> | <code class=\"hljs\">?</code></p>\n<p><em>MacroTranscriber</em> :<br>\n&nbsp;&nbsp; <a href=\"macros.html\"><em>DelimTokenTree</em></a></p>\n</blockquote>\n<p><code class=\"hljs\">macro_rules</code> allows users to define syntax extension in a declarative way.  We\ncall such extensions \"macros by example\" or simply \"macros\".</p>\n<p>Each macro by example has a name, and one or more <em>rules</em>. Each rule has two\nparts: a <em>matcher</em>, describing the syntax that it matches, and a <em>transcriber</em>,\ndescribing the syntax that will replace a successfully matched invocation. Both\nthe matcher and the transcriber must be surrounded by delimiters. Macros can\nexpand to expressions, statements, items (including traits, impls, and foreign\nitems), types, or patterns.</p>\n<h2 id=\"transcribing\"><a class=\"header\" href=\"#transcribing\">Transcribing</a></h2>\n<p>When a macro is invoked, the macro expander looks up macro invocations by name,\nand tries each macro rule in turn. It transcribes the first successful match; if\nthis results in an error, then future matches are not tried. When matching, no\nlookahead is performed; if the compiler cannot unambiguously determine how to\nparse the macro invocation one token at a time, then it is an error. In the\nfollowing example, the compiler does not look ahead past the identifier to see\nif the following token is a <code class=\"hljs\">)</code>, even though that would allow it to parse the\ninvocation unambiguously:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">macro_rules!</span> ambiguity {\n    ($($i:ident)* $j:ident) =&gt; { };\n}\n\nambiguity!(error); <span class=\"hljs-comment\">// Error: local ambiguity</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In both the matcher and the transcriber, the <code class=\"hljs\">$</code> token is used to invoke special\nbehaviours from the macro engine (described below in <a href=\"macros-by-example.html#metavariables\">Metavariables</a> and\n<a href=\"macros-by-example.html#repetitions\">Repetitions</a>). Tokens that aren't part of such an invocation are matched and\ntranscribed literally, with one exception. The exception is that the outer\ndelimiters for the matcher will match any pair of delimiters. Thus, for\ninstance, the matcher <code class=\"hljs\">(())</code> will match <code class=\"hljs\">{()}</code> but not <code class=\"hljs\">{{}}</code>. The character\n<code class=\"hljs\">$</code> cannot be matched or transcribed literally.</p>\n<h3 id=\"forwarding-a-matched-fragment\"><a class=\"header\" href=\"#forwarding-a-matched-fragment\">Forwarding a matched fragment</a></h3>\n<p>When forwarding a matched fragment to another macro-by-example, matchers in\nthe second macro will see an opaque AST of the fragment type. The second macro\ncan't use literal tokens to match the fragments in the matcher, only a\nfragment specifier of the same type. The <code class=\"hljs\">ident</code>, <code class=\"hljs\">lifetime</code>, and <code class=\"hljs\">tt</code>\nfragment types are an exception, and <em>can</em> be matched by literal tokens. The\nfollowing illustrates this restriction:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">macro_rules!</span> foo {\n    ($l:expr) =&gt; { bar!($l); }\n<span class=\"hljs-comment\">// ERROR:               ^^ no rules expected this token in macro call</span>\n}\n\n<span class=\"hljs-built_in\">macro_rules!</span> bar {\n    (<span class=\"hljs-number\">3</span>) =&gt; {}\n}\n\nfoo!(<span class=\"hljs-number\">3</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The following illustrates how tokens can be directly matched after matching a\n<code class=\"hljs\">tt</code> fragment:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// compiles OK</span>\n<span class=\"hljs-built_in\">macro_rules!</span> foo {\n    ($l:tt) =&gt; { bar!($l); }\n}\n\n<span class=\"hljs-built_in\">macro_rules!</span> bar {\n    (<span class=\"hljs-number\">3</span>) =&gt; {}\n}\n\nfoo!(<span class=\"hljs-number\">3</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"metavariables\"><a class=\"header\" href=\"#metavariables\">Metavariables</a></h2>\n<p>In the matcher, <code class=\"hljs\">$</code> <em>name</em> <code class=\"hljs\">:</code> <em>fragment-specifier</em> matches a Rust syntax\nfragment of the kind specified and binds it to the metavariable <code class=\"hljs\">$</code><em>name</em>. Valid\nfragment specifiers are:</p>\n<ul>\n<li><code class=\"hljs\">item</code>: an <a href=\"items.html\"><em>Item</em></a></li>\n<li><code class=\"hljs\">block</code>: a <a href=\"expressions/block-expr.html\"><em>BlockExpression</em></a></li>\n<li><code class=\"hljs\">stmt</code>: a <a href=\"statements.html\"><em>Statement</em></a> without the trailing semicolon (except for item\nstatements that require semicolons)</li>\n<li><code class=\"hljs\">pat_param</code>: a <a href=\"patterns.html\"><em>PatternNoTopAlt</em></a></li>\n<li><code class=\"hljs\">pat</code>: at least any <a href=\"patterns.html\"><em>PatternNoTopAlt</em></a>, and possibly more depending on edition</li>\n<li><code class=\"hljs\">expr</code>: an <a href=\"expressions.html\"><em>Expression</em></a></li>\n<li><code class=\"hljs\">ty</code>: a <a href=\"types.html#type-expressions\"><em>Type</em></a></li>\n<li><code class=\"hljs\">ident</code>: an <a href=\"identifiers.html\">IDENTIFIER_OR_KEYWORD</a> or <a href=\"identifiers.html\">RAW_IDENTIFIER</a></li>\n<li><code class=\"hljs\">path</code>: a <a href=\"paths.html#paths-in-types\"><em>TypePath</em></a> style path</li>\n<li><code class=\"hljs\">tt</code>: a <a href=\"macros.html#macro-invocation\"><em>TokenTree</em></a>&nbsp;(a single <a href=\"tokens.html\">token</a> or tokens in matching delimiters <code class=\"hljs\">()</code>, <code class=\"hljs\">[]</code>, or <code class=\"hljs\">{}</code>)</li>\n<li><code class=\"hljs\">meta</code>: an <a href=\"attributes.html\"><em>Attr</em></a>, the contents of an attribute</li>\n<li><code class=\"hljs\">lifetime</code>: a <a href=\"tokens.html#lifetimes-and-loop-labels\">LIFETIME_TOKEN</a></li>\n<li><code class=\"hljs\">vis</code>: a possibly empty <a href=\"visibility-and-privacy.html\"><em>Visibility</em></a> qualifier</li>\n<li><code class=\"hljs\">literal</code>: matches <code class=\"hljs\">-</code><sup>?</sup><a href=\"expressions/literal-expr.html\"><em>LiteralExpression</em></a></li>\n</ul>\n<p>In the transcriber, metavariables are referred to simply by <code class=\"hljs\">$</code><em>name</em>, since\nthe fragment kind is specified in the matcher. Metavariables are replaced with\nthe syntax element that matched them. The keyword metavariable <code class=\"hljs\">$crate</code> can be\nused to refer to the current crate; see <a href=\"macros-by-example.html#hygiene\">Hygiene</a> below. Metavariables can be\ntranscribed more than once or not at all.</p>\n<p>For reasons of backwards compatibility, though <code class=\"hljs\">_</code> <a href=\"expressions/underscore-expr.html\">is also an\nexpression</a>, a standalone underscore is not matched by\nthe <code class=\"hljs\">expr</code> fragment specifier. However, <code class=\"hljs\">_</code> is matched by the <code class=\"hljs\">expr</code> fragment\nspecifier when it appears as a subexpression.\nFor the same reason, a standalone <a href=\"expressions/block-expr.html#const-blocks\">const block</a> is not matched but it is matched when appearing as a subexpression.</p>\n<blockquote>\n<p><strong>Edition Differences</strong>: Starting with the 2021 edition, <code class=\"hljs\">pat</code> fragment-specifiers match top-level or-patterns (that is, they accept <a href=\"patterns.html\"><em>Pattern</em></a>).</p>\n<p>Before the 2021 edition, they match exactly the same fragments as <code class=\"hljs\">pat_param</code> (that is, they accept <a href=\"patterns.html\"><em>PatternNoTopAlt</em></a>).</p>\n<p>The relevant edition is the one in effect for the <code class=\"hljs\">macro_rules!</code> definition.</p>\n</blockquote>\n<h2 id=\"repetitions\"><a class=\"header\" href=\"#repetitions\">Repetitions</a></h2>\n<p>In both the matcher and transcriber, repetitions are indicated by placing the\ntokens to be repeated inside <code class=\"hljs\">$(</code>…<code class=\"hljs\">)</code>, followed by a repetition operator,\noptionally with a separator token between. The separator token can be any token\nother than a delimiter or one of the repetition operators, but <code class=\"hljs\">;</code> and <code class=\"hljs\">,</code> are\nthe most common. For instance, <code class=\"hljs\">$( $i:ident ),*</code> represents any number of\nidentifiers separated by commas. Nested repetitions are permitted.</p>\n<p>The repetition operators are:</p>\n<ul>\n<li><code class=\"hljs\">*</code> — indicates any number of repetitions.</li>\n<li><code class=\"hljs\">+</code> — indicates any number but at least one.</li>\n<li><code class=\"hljs\">?</code> — indicates an optional fragment with zero or one occurrence.</li>\n</ul>\n<p>Since <code class=\"hljs\">?</code> represents at most one occurrence, it cannot be used with a\nseparator.</p>\n<p>The repeated fragment both matches and transcribes to the specified number of\nthe fragment, separated by the separator token. Metavariables are matched to\nevery repetition of their corresponding fragment. For instance, the <code class=\"hljs\">$( $i:ident ),*</code> example above matches <code class=\"hljs\">$i</code> to all of the identifiers in the list.</p>\n<p>During transcription, additional restrictions apply to repetitions so that the\ncompiler knows how to expand them properly:</p>\n<ol>\n<li>A metavariable must appear in exactly the same number, kind, and nesting\norder of repetitions in the transcriber as it did in the matcher. So for the\nmatcher <code class=\"hljs\">$( $i:ident ),*</code>, the transcribers <code class=\"hljs\">=&gt; { $i }</code>,\n<code class=\"hljs\">=&gt; { $( $( $i)* )* }</code>, and <code class=\"hljs\">=&gt; { $( $i )+ }</code> are all illegal, but\n<code class=\"hljs\">=&gt; { $( $i );* }</code> is correct and replaces a comma-separated list of\nidentifiers with a semicolon-separated list.</li>\n<li>Each repetition in the transcriber must contain at least one metavariable to\ndecide how many times to expand it. If multiple metavariables appear in the\nsame repetition, they must be bound to the same number of fragments. For\ninstance, <code class=\"hljs\">( $( $i:ident ),* ; $( $j:ident ),* ) =&gt; (( $( ($i,$j) ),* ))</code> must\nbind the same number of <code class=\"hljs\">$i</code> fragments as <code class=\"hljs\">$j</code> fragments. This means that\ninvoking the macro with <code class=\"hljs\">(a, b, c; d, e, f)</code> is legal and expands to\n<code class=\"hljs\">((a,d), (b,e), (c,f))</code>, but <code class=\"hljs\">(a, b, c; d, e)</code> is illegal because it does\nnot have the same number. This requirement applies to every layer of nested\nrepetitions.</li>\n</ol>\n<h2 id=\"scoping-exporting-and-importing\"><a class=\"header\" href=\"#scoping-exporting-and-importing\">Scoping, Exporting, and Importing</a></h2>\n<p>For historical reasons, the scoping of macros by example does not work entirely\nlike items. Macros have two forms of scope: textual scope, and path-based scope.\nTextual scope is based on the order that things appear in source files, or even\nacross multiple files, and is the default scoping. It is explained further below.\nPath-based scope works exactly the same way that item scoping does. The scoping,\nexporting, and importing of macros is controlled largely by attributes.</p>\n<p>When a macro is invoked by an unqualified identifier (not part of a multi-part\npath), it is first looked up in textual scoping. If this does not yield any\nresults, then it is looked up in path-based scoping. If the macro's name is\nqualified with a path, then it is only looked up in path-based scoping.</p>\n<!-- ignore: requires external crates -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> lazy_static::lazy_static; <span class=\"hljs-comment\">// Path-based import.</span>\n\n<span class=\"hljs-built_in\">macro_rules!</span> lazy_static { <span class=\"hljs-comment\">// Textual definition.</span>\n    (lazy) =&gt; {};\n}\n\nlazy_static!{lazy} <span class=\"hljs-comment\">// Textual lookup finds our macro first.</span>\nself::lazy_static!{} <span class=\"hljs-comment\">// Path-based lookup ignores our macro, finds imported one.</span></code></pre>\n<h3 id=\"textual-scope\"><a class=\"header\" href=\"#textual-scope\">Textual Scope</a></h3>\n<p>Textual scope is based largely on the order that things appear in source files,\nand works similarly to the scope of local variables declared with <code class=\"hljs\">let</code> except\nit also applies at the module level. When <code class=\"hljs\">macro_rules!</code> is used to define a\nmacro, the macro enters the scope after the definition (note that it can still\nbe used recursively, since names are looked up from the invocation site), up\nuntil its surrounding scope, typically a module, is closed. This can enter child\nmodules and even span across multiple files:</p>\n<!-- ignore: requires external modules -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">//// src/lib.rs</span>\n<span class=\"hljs-keyword\">mod</span> has_macro {\n    <span class=\"hljs-comment\">// m!{} // Error: m is not in scope.</span>\n\n    <span class=\"hljs-built_in\">macro_rules!</span> m {\n        () =&gt; {};\n    }\n    m!{} <span class=\"hljs-comment\">// OK: appears after declaration of m.</span>\n\n    <span class=\"hljs-keyword\">mod</span> uses_macro;\n}\n\n<span class=\"hljs-comment\">// m!{} // Error: m is not in scope.</span>\n\n<span class=\"hljs-comment\">//// src/has_macro/uses_macro.rs</span>\n\nm!{} <span class=\"hljs-comment\">// OK: appears after declaration of m in src/lib.rs</span></code></pre>\n<p>It is not an error to define a macro multiple times; the most recent declaration\nwill shadow the previous one unless it has gone out of scope.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">macro_rules!</span> m {\n    (<span class=\"hljs-number\">1</span>) =&gt; {};\n}\n\nm!(<span class=\"hljs-number\">1</span>);\n\n<span class=\"hljs-keyword\">mod</span> inner {\n    m!(<span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-built_in\">macro_rules!</span> m {\n        (<span class=\"hljs-number\">2</span>) =&gt; {};\n    }\n    <span class=\"hljs-comment\">// m!(1); // Error: no rule matches '1'</span>\n    m!(<span class=\"hljs-number\">2</span>);\n\n    <span class=\"hljs-built_in\">macro_rules!</span> m {\n        (<span class=\"hljs-number\">3</span>) =&gt; {};\n    }\n    m!(<span class=\"hljs-number\">3</span>);\n}\n\nm!(<span class=\"hljs-number\">1</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Macros can be declared and used locally inside functions as well, and work\nsimilarly:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n    <span class=\"hljs-comment\">// m!(); // Error: m is not in scope.</span>\n    <span class=\"hljs-built_in\">macro_rules!</span> m {\n        () =&gt; {};\n    }\n    m!();\n}\n\n\n<span class=\"hljs-comment\">// m!(); // Error: m is not in scope.</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"the-macro_use-attribute\"><a class=\"header\" href=\"#the-macro_use-attribute\">The <code>macro_use</code> attribute</a></h3>\n<p>The <em><code class=\"hljs\">macro_use</code> attribute</em> has two purposes. First, it can be used to make a\nmodule's macro scope not end when the module is closed, by applying it to a\nmodule:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[macro_use]</span>\n<span class=\"hljs-keyword\">mod</span> inner {\n    <span class=\"hljs-built_in\">macro_rules!</span> m {\n        () =&gt; {};\n    }\n}\n\nm!();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Second, it can be used to import macros from another crate, by attaching it to\nan <code class=\"hljs\">extern crate</code> declaration appearing in the crate's root module. Macros\nimported this way are imported into the <a href=\"names/preludes.html#macro_use-prelude\"><code class=\"hljs\">macro_use</code> prelude</a>, not textually,\nwhich means that they can be shadowed by any other name. While macros imported\nby <code class=\"hljs\">#[macro_use]</code> can be used before the import statement, in case of a\nconflict, the last macro imported wins. Optionally, a list of macros to import\ncan be specified using the <a href=\"attributes.html#meta-item-attribute-syntax\"><em>MetaListIdents</em></a> syntax; this is not supported\nwhen <code class=\"hljs\">#[macro_use]</code> is applied to a module.</p>\n<!-- ignore: requires external crates -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[macro_use(lazy_static)]</span> <span class=\"hljs-comment\">// Or #[macro_use] to import all macros.</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> lazy_static;\n\nlazy_static!{}\n<span class=\"hljs-comment\">// self::lazy_static!{} // Error: lazy_static is not defined in `self`</span></code></pre>\n<p>Macros to be imported with <code class=\"hljs\">#[macro_use]</code> must be exported with\n<code class=\"hljs\">#[macro_export]</code>, which is described below.</p>\n<h3 id=\"path-based-scope\"><a class=\"header\" href=\"#path-based-scope\">Path-Based Scope</a></h3>\n<p>By default, a macro has no path-based scope. However, if it has the\n<code class=\"hljs\">#[macro_export]</code> attribute, then it is declared in the crate root scope and can\nbe referred to normally as such:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>self::m!();\nm!(); <span class=\"hljs-comment\">// OK: Path-based lookup finds m in the current module.</span>\n\n<span class=\"hljs-keyword\">mod</span> inner {\n    super::m!();\n    crate::m!();\n}\n\n<span class=\"hljs-keyword\">mod</span> mac {\n    <span class=\"hljs-meta\">#[macro_export]</span>\n    <span class=\"hljs-built_in\">macro_rules!</span> m {\n        () =&gt; {};\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Macros labeled with <code class=\"hljs\">#[macro_export]</code> are always <code class=\"hljs\">pub</code> and can be referred to\nby other crates, either by path or by <code class=\"hljs\">#[macro_use]</code> as described above.</p>\n<h2 id=\"hygiene\"><a class=\"header\" href=\"#hygiene\">Hygiene</a></h2>\n<p>By default, all identifiers referred to in a macro are expanded as-is, and are\nlooked up at the macro's invocation site. This can lead to issues if a macro\nrefers to an item or macro which isn't in scope at the invocation site. To\nalleviate this, the <code class=\"hljs\">$crate</code> metavariable can be used at the start of a path to\nforce lookup to occur inside the crate defining the macro.</p>\n<!-- ignore: requires external crates -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">//// Definitions in the `helper_macro` crate.</span>\n<span class=\"hljs-meta\">#[macro_export]</span>\n<span class=\"hljs-built_in\">macro_rules!</span> helped {\n    <span class=\"hljs-comment\">// () =&gt; { helper!() } // This might lead to an error due to 'helper' not being in scope.</span>\n    () =&gt; { $crate::helper!() }\n}\n\n<span class=\"hljs-meta\">#[macro_export]</span>\n<span class=\"hljs-built_in\">macro_rules!</span> helper {\n    () =&gt; { () }\n}\n\n<span class=\"hljs-comment\">//// Usage in another crate.</span>\n<span class=\"hljs-comment\">// Note that `helper_macro::helper` is not imported!</span>\n<span class=\"hljs-keyword\">use</span> helper_macro::helped;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">unit</span></span>() {\n    helped!();\n}</code></pre>\n<p>Note that, because <code class=\"hljs\">$crate</code> refers to the current crate, it must be used with a\nfully qualified module path when referring to non-macro items:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> inner {\n    <span class=\"hljs-meta\">#[macro_export]</span>\n    <span class=\"hljs-built_in\">macro_rules!</span> call_foo {\n        () =&gt; { $crate::inner::foo() };\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Additionally, even though <code class=\"hljs\">$crate</code> allows a macro to refer to items within its\nown crate when expanding, its use has no effect on visibility. An item or macro\nreferred to must still be visible from the invocation site. In the following\nexample, any attempt to invoke <code class=\"hljs\">call_foo!()</code> from outside its crate will fail\nbecause <code class=\"hljs\">foo()</code> is not public.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[macro_export]</span>\n<span class=\"hljs-built_in\">macro_rules!</span> call_foo {\n    () =&gt; { $crate::foo() };\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p><strong>Version &amp; Edition Differences</strong>: Prior to Rust 1.30, <code class=\"hljs\">$crate</code> and\n<code class=\"hljs\">local_inner_macros</code> (below) were unsupported. They were added alongside\npath-based imports of macros (described above), to ensure that helper macros\ndid not need to be manually imported by users of a macro-exporting crate.\nCrates written for earlier versions of Rust that use helper macros need to be\nmodified to use <code class=\"hljs\">$crate</code> or <code class=\"hljs\">local_inner_macros</code> to work well with path-based\nimports.</p>\n</blockquote>\n<p>When a macro is exported, the <code class=\"hljs\">#[macro_export]</code> attribute can have the\n<code class=\"hljs\">local_inner_macros</code> keyword added to automatically prefix all contained macro\ninvocations with <code class=\"hljs\">$crate::</code>. This is intended primarily as a tool to migrate\ncode written before <code class=\"hljs\">$crate</code> was added to the language to work with Rust 2018's\npath-based imports of macros. Its use is discouraged in new code.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[macro_export(local_inner_macros)]</span>\n<span class=\"hljs-built_in\">macro_rules!</span> helped {\n    () =&gt; { helper!() } <span class=\"hljs-comment\">// Automatically converted to $crate::helper!().</span>\n}\n\n<span class=\"hljs-meta\">#[macro_export]</span>\n<span class=\"hljs-built_in\">macro_rules!</span> helper {\n    () =&gt; { () }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"follow-set-ambiguity-restrictions\"><a class=\"header\" href=\"#follow-set-ambiguity-restrictions\">Follow-set Ambiguity Restrictions</a></h2>\n<p>The parser used by the macro system is reasonably powerful, but it is limited in\norder to prevent ambiguity in current or future versions of the language. In\nparticular, in addition to the rule about ambiguous expansions, a nonterminal\nmatched by a metavariable must be followed by a token which has been decided can\nbe safely used after that kind of match.</p>\n<p>As an example, a macro matcher like <code class=\"hljs\">$i:expr [ , ]</code> could in theory be accepted\nin Rust today, since <code class=\"hljs\">[,]</code> cannot be part of a legal expression and therefore\nthe parse would always be unambiguous. However, because <code class=\"hljs\">[</code> can start trailing\nexpressions, <code class=\"hljs\">[</code> is not a character which can safely be ruled out as coming\nafter an expression. If <code class=\"hljs\">[,]</code> were accepted in a later version of Rust, this\nmatcher would become ambiguous or would misparse, breaking working code.\nMatchers like <code class=\"hljs\">$i:expr,</code> or <code class=\"hljs\">$i:expr;</code> would be legal, however, because <code class=\"hljs\">,</code> and\n<code class=\"hljs\">;</code> are legal expression separators. The specific rules are:</p>\n<ul>\n<li><code class=\"hljs\">expr</code> and <code class=\"hljs\">stmt</code> may only be followed by one of: <code class=\"hljs\">=&gt;</code>, <code class=\"hljs\">,</code>, or <code class=\"hljs\">;</code>.</li>\n<li><code class=\"hljs\">pat_param</code> may only be followed by one of: <code class=\"hljs\">=&gt;</code>, <code class=\"hljs\">,</code>, <code class=\"hljs\">=</code>, <code class=\"hljs\">|</code>, <code class=\"hljs\">if</code>, or <code class=\"hljs\">in</code>.</li>\n<li><code class=\"hljs\">pat</code> may only be followed by one of: <code class=\"hljs\">=&gt;</code>, <code class=\"hljs\">,</code>, <code class=\"hljs\">=</code>, <code class=\"hljs\">if</code>, or <code class=\"hljs\">in</code>.</li>\n<li><code class=\"hljs\">path</code> and <code class=\"hljs\">ty</code> may only be followed by one of: <code class=\"hljs\">=&gt;</code>, <code class=\"hljs\">,</code>, <code class=\"hljs\">=</code>, <code class=\"hljs\">|</code>, <code class=\"hljs\">;</code>,\n<code class=\"hljs\">:</code>, <code class=\"hljs\">&gt;</code>, <code class=\"hljs\">&gt;&gt;</code>, <code class=\"hljs\">[</code>, <code class=\"hljs\">{</code>, <code class=\"hljs\">as</code>, <code class=\"hljs\">where</code>, or a macro variable of <code class=\"hljs\">block</code>\nfragment specifier.</li>\n<li><code class=\"hljs\">vis</code> may only be followed by one of: <code class=\"hljs\">,</code>, an identifier other than a\nnon-raw <code class=\"hljs\">priv</code>, any token that can begin a type, or a metavariable with a\n<code class=\"hljs\">ident</code>, <code class=\"hljs\">ty</code>, or <code class=\"hljs\">path</code> fragment specifier.</li>\n<li>All other fragment specifiers have no restrictions.</li>\n</ul>\n<blockquote>\n<p><strong>Edition Differences</strong>: Before the 2021 edition, <code class=\"hljs\">pat</code> may also be followed by <code class=\"hljs\">|</code>.</p>\n</blockquote>\n<p>When repetitions are involved, then the rules apply to every possible number of\nexpansions, taking separators into account. This means:</p>\n<ul>\n<li>If the repetition includes a separator, that separator must be able to\nfollow the contents of the repetition.</li>\n<li>If the repetition can repeat multiple times (<code class=\"hljs\">*</code> or <code class=\"hljs\">+</code>), then the contents\nmust be able to follow themselves.</li>\n<li>The contents of the repetition must be able to follow whatever comes\nbefore, and whatever comes after must be able to follow the contents of the\nrepetition.</li>\n<li>If the repetition can match zero times (<code class=\"hljs\">*</code> or <code class=\"hljs\">?</code>), then whatever comes\nafter must be able to follow whatever comes before.</li>\n</ul>\n<p>For more detail, see the <a href=\"macro-ambiguity.html\">formal specification</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"procedural-macros\"><a class=\"header\" href=\"#procedural-macros\">Procedural Macros</a></h2>\n<p><em>Procedural macros</em> allow creating syntax extensions as execution of a function.\nProcedural macros come in one of three flavors:</p>\n<ul>\n<li><a href=\"procedural-macros.html#function-like-procedural-macros\">Function-like macros</a> - <code class=\"hljs\">custom!(...)</code></li>\n<li><a href=\"procedural-macros.html#derive-macros\">Derive macros</a> - <code class=\"hljs\">#[derive(CustomDerive)]</code></li>\n<li><a href=\"procedural-macros.html#attribute-macros\">Attribute macros</a> - <code class=\"hljs\">#[CustomAttribute]</code></li>\n</ul>\n<p>Procedural macros allow you to run code at compile time that operates over Rust\nsyntax, both consuming and producing Rust syntax. You can sort of think of\nprocedural macros as functions from an AST to another AST.</p>\n<p>Procedural macros must be defined in a crate with the <a href=\"linkage.html\">crate type</a> of\n<code class=\"hljs\">proc-macro</code>.</p>\n<blockquote>\n<p><strong>Note</strong>: When using Cargo, Procedural macro crates are defined with the\n<code class=\"hljs\">proc-macro</code> key in your manifest:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[lib]</span>\n<span class=\"hljs-attr\">proc-macro</span> = <span class=\"hljs-literal\">true</span>\n</code></pre>\n</blockquote>\n<p>As functions, they must either return syntax, panic, or loop endlessly. Returned\nsyntax either replaces or adds the syntax depending on the kind of procedural\nmacro. Panics are caught by the compiler and are turned into a compiler error.\nEndless loops are not caught by the compiler which hangs the compiler.</p>\n<p>Procedural macros run during compilation, and thus have the same resources that\nthe compiler has. For example, standard input, error, and output are the same\nthat the compiler has access to. Similarly, file access is the same. Because\nof this, procedural macros have the same security concerns that <a href=\"../cargo/reference/build-scripts.html\">Cargo's\nbuild scripts</a> have.</p>\n<p>Procedural macros have two ways of reporting errors. The first is to panic. The\nsecond is to emit a <a href=\"../std/macro.compile_error.html\"><code class=\"hljs\">compile_error</code></a> macro invocation.</p>\n<h3 id=\"the-proc_macro-crate\"><a class=\"header\" href=\"#the-proc_macro-crate\">The <code>proc_macro</code> crate</a></h3>\n<p>Procedural macro crates almost always will link to the compiler-provided\n<a href=\"../proc_macro/index.html\"><code class=\"hljs\">proc_macro</code> crate</a>. The <code class=\"hljs\">proc_macro</code> crate provides types required for\nwriting procedural macros and facilities to make it easier.</p>\n<p>This crate primarily contains a <a href=\"../proc_macro/struct.TokenStream.html\"><code class=\"hljs\">TokenStream</code></a> type. Procedural macros operate\nover <em>token streams</em> instead of AST nodes, which is a far more stable interface\nover time for both the compiler and for procedural macros to target. A\n<em>token stream</em> is roughly equivalent to <code class=\"hljs\">Vec&lt;TokenTree&gt;</code> where a <code class=\"hljs\">TokenTree</code>\ncan roughly be thought of as lexical token. For example <code class=\"hljs\">foo</code> is an <code class=\"hljs\">Ident</code>\ntoken, <code class=\"hljs\">.</code> is a <code class=\"hljs\">Punct</code> token, and <code class=\"hljs\">1.2</code> is a <code class=\"hljs\">Literal</code> token. The <code class=\"hljs\">TokenStream</code>\ntype, unlike <code class=\"hljs\">Vec&lt;TokenTree&gt;</code>, is cheap to clone.</p>\n<p>All tokens have an associated <code class=\"hljs\">Span</code>. A <code class=\"hljs\">Span</code> is an opaque value that cannot\nbe modified but can be manufactured. <code class=\"hljs\">Span</code>s represent an extent of source\ncode within a program and are primarily used for error reporting. While you\ncannot modify a <code class=\"hljs\">Span</code> itself, you can always change the <code class=\"hljs\">Span</code> <em>associated</em>\nwith any token, such as through getting a <code class=\"hljs\">Span</code> from another token.</p>\n<h3 id=\"procedural-macro-hygiene\"><a class=\"header\" href=\"#procedural-macro-hygiene\">Procedural macro hygiene</a></h3>\n<p>Procedural macros are <em>unhygienic</em>. This means they behave as if the output\ntoken stream was simply written inline to the code it's next to. This means that\nit's affected by external items and also affects external imports.</p>\n<p>Macro authors need to be careful to ensure their macros work in as many contexts\nas possible given this limitation. This often includes using absolute paths to\nitems in libraries (for example, <code class=\"hljs\">::std::option::Option</code> instead of <code class=\"hljs\">Option</code>) or\nby ensuring that generated functions have names that are unlikely to clash with\nother functions (like <code class=\"hljs\">__internal_foo</code> instead of <code class=\"hljs\">foo</code>).</p>\n<h3 id=\"function-like-procedural-macros\"><a class=\"header\" href=\"#function-like-procedural-macros\">Function-like procedural macros</a></h3>\n<p><em>Function-like procedural macros</em> are procedural macros that are invoked using\nthe macro invocation operator (<code class=\"hljs\">!</code>).</p>\n<p>These macros are defined by a <a href=\"visibility-and-privacy.html\">public</a> <a href=\"items/functions.html\">function</a> with the <code class=\"hljs\">proc_macro</code>\n<a href=\"attributes.html\">attribute</a> and a signature of <code class=\"hljs\">(TokenStream) -&gt; TokenStream</code>. The input\n<a href=\"../proc_macro/struct.TokenStream.html\"><code class=\"hljs\">TokenStream</code></a> is what is inside the delimiters of the macro invocation and the\noutput <a href=\"../proc_macro/struct.TokenStream.html\"><code class=\"hljs\">TokenStream</code></a> replaces the entire macro invocation.</p>\n<p>For example, the following macro definition ignores its input and outputs a\nfunction <code class=\"hljs\">answer</code> into its scope.</p>\n<!-- ignore: test doesn't support proc-macro -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![crate_type = <span class=\"hljs-meta-string\">\"proc-macro\"</span>]</span>\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> proc_macro;\n<span class=\"hljs-keyword\">use</span> proc_macro::TokenStream;\n\n<span class=\"hljs-meta\">#[proc_macro]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">make_answer</span></span>(_item: TokenStream) -&gt; TokenStream {\n    <span class=\"hljs-string\">\"fn answer() -&gt; u32 { 42 }\"</span>.parse().unwrap()\n}</code></pre>\n<p>And then we use it in a binary crate to print \"42\" to standard output.</p>\n<!-- ignore: requires external crates -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> proc_macro_examples;\n<span class=\"hljs-keyword\">use</span> proc_macro_examples::make_answer;\n\nmake_answer!();\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, answer());\n}</code></pre>\n<p>Function-like procedural macros may be invoked in any macro invocation\nposition, which includes <a href=\"statements.html\">statements</a>, <a href=\"expressions.html\">expressions</a>, <a href=\"patterns.html\">patterns</a>, <a href=\"types.html#type-expressions\">type\nexpressions</a>, <a href=\"items.html\">item</a> positions, including items in <a href=\"items/external-blocks.html\"><code class=\"hljs\">extern</code> blocks</a>, inherent\nand trait <a href=\"items/implementations.html\">implementations</a>, and <a href=\"items/traits.html\">trait definitions</a>.</p>\n<h3 id=\"derive-macros\"><a class=\"header\" href=\"#derive-macros\">Derive macros</a></h3>\n<p><em>Derive macros</em> define new inputs for the <a href=\"attributes/derive.html\"><code class=\"hljs\">derive</code> attribute</a>. These macros\ncan create new <a href=\"items.html\">items</a> given the token stream of a <a href=\"items/structs.html\">struct</a>, <a href=\"items/enumerations.html\">enum</a>, or <a href=\"items/unions.html\">union</a>.\nThey can also define <a href=\"procedural-macros.html#derive-macro-helper-attributes\">derive macro helper attributes</a>.</p>\n<p>Custom derive macros are defined by a <a href=\"visibility-and-privacy.html\">public</a> <a href=\"items/functions.html\">function</a> with the\n<code class=\"hljs\">proc_macro_derive</code> attribute and a signature of <code class=\"hljs\">(TokenStream) -&gt; TokenStream</code>.</p>\n<p>The input <a href=\"../proc_macro/struct.TokenStream.html\"><code class=\"hljs\">TokenStream</code></a> is the token stream of the item that has the <code class=\"hljs\">derive</code>\nattribute on it. The output <a href=\"../proc_macro/struct.TokenStream.html\"><code class=\"hljs\">TokenStream</code></a> must be a set of items that are\nthen appended to the <a href=\"items/modules.html\">module</a> or <a href=\"expressions/block-expr.html\">block</a> that the item from the input\n<a href=\"../proc_macro/struct.TokenStream.html\"><code class=\"hljs\">TokenStream</code></a> is in.</p>\n<p>The following is an example of a derive macro. Instead of doing anything\nuseful with its input, it just appends a function <code class=\"hljs\">answer</code>.</p>\n<!-- ignore: test doesn't support proc-macro -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![crate_type = <span class=\"hljs-meta-string\">\"proc-macro\"</span>]</span>\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> proc_macro;\n<span class=\"hljs-keyword\">use</span> proc_macro::TokenStream;\n\n<span class=\"hljs-meta\">#[proc_macro_derive(AnswerFn)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">derive_answer_fn</span></span>(_item: TokenStream) -&gt; TokenStream {\n    <span class=\"hljs-string\">\"fn answer() -&gt; u32 { 42 }\"</span>.parse().unwrap()\n}</code></pre>\n<p>And then using said derive macro:</p>\n<!-- ignore: requires external crates -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> proc_macro_examples;\n<span class=\"hljs-keyword\">use</span> proc_macro_examples::AnswerFn;\n\n<span class=\"hljs-meta\">#[derive(AnswerFn)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">42</span>, answer());\n}</code></pre>\n<h4 id=\"derive-macro-helper-attributes\"><a class=\"header\" href=\"#derive-macro-helper-attributes\">Derive macro helper attributes</a></h4>\n<p>Derive macros can add additional <a href=\"attributes.html\">attributes</a> into the scope of the <a href=\"items.html\">item</a>\nthey are on. Said attributes are called <em>derive macro helper attributes</em>. These\nattributes are <a href=\"attributes.html#active-and-inert-attributes\">inert</a>, and their only purpose is to be fed into the derive\nmacro that defined them. That said, they can be seen by all macros.</p>\n<p>The way to define helper attributes is to put an <code class=\"hljs\">attributes</code> key in the\n<code class=\"hljs\">proc_macro_derive</code> macro with a comma separated list of identifiers that are\nthe names of the helper attributes.</p>\n<p>For example, the following derive macro defines a helper attribute\n<code class=\"hljs\">helper</code>, but ultimately doesn't do anything with it.</p>\n<!-- ignore: test doesn't support proc-macro -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![crate_type=<span class=\"hljs-meta-string\">\"proc-macro\"</span>]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> proc_macro;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> proc_macro::TokenStream;\n</span>\n<span class=\"hljs-meta\">#[proc_macro_derive(HelperAttr, attributes(helper))]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">derive_helper_attr</span></span>(_item: TokenStream) -&gt; TokenStream {\n    TokenStream::new()\n}</code></pre>\n<p>And then usage on the derive macro on a struct:</p>\n<!-- ignore: requires external crates -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[derive(HelperAttr)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span> {\n    <span class=\"hljs-meta\">#[helper]</span> field: ()\n}</code></pre>\n<h3 id=\"attribute-macros\"><a class=\"header\" href=\"#attribute-macros\">Attribute macros</a></h3>\n<p><em>Attribute macros</em> define new <a href=\"attributes.html\">outer attributes</a> which can be\nattached to <a href=\"items.html\">items</a>, including items in <a href=\"items/external-blocks.html\"><code class=\"hljs\">extern</code> blocks</a>, inherent and trait\n<a href=\"items/implementations.html\">implementations</a>, and <a href=\"items/traits.html\">trait definitions</a>.</p>\n<p>Attribute macros are defined by a <a href=\"visibility-and-privacy.html\">public</a> <a href=\"items/functions.html\">function</a> with the\n<code class=\"hljs\">proc_macro_attribute</code> <a href=\"attributes.html\">attribute</a> that has a signature of <code class=\"hljs\">(TokenStream, TokenStream) -&gt; TokenStream</code>. The first <a href=\"../proc_macro/struct.TokenStream.html\"><code class=\"hljs\">TokenStream</code></a> is the delimited token\ntree following the attribute's name, not including the outer delimiters. If\nthe attribute is written as a bare attribute name, the attribute\n<a href=\"../proc_macro/struct.TokenStream.html\"><code class=\"hljs\">TokenStream</code></a> is empty. The second <a href=\"../proc_macro/struct.TokenStream.html\"><code class=\"hljs\">TokenStream</code></a> is the rest of the <a href=\"items.html\">item</a>\nincluding other <a href=\"attributes.html\">attributes</a> on the <a href=\"items.html\">item</a>. The returned <a href=\"../proc_macro/struct.TokenStream.html\"><code class=\"hljs\">TokenStream</code></a>\nreplaces the <a href=\"items.html\">item</a> with an arbitrary number of <a href=\"items.html\">items</a>.</p>\n<p>For example, this attribute macro takes the input stream and returns it as is,\neffectively being the no-op of attributes.</p>\n<!-- ignore: test doesn't support proc-macro -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![crate_type = <span class=\"hljs-meta-string\">\"proc-macro\"</span>]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> proc_macro;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> proc_macro::TokenStream;\n</span>\n<span class=\"hljs-meta\">#[proc_macro_attribute]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">return_as_is</span></span>(_attr: TokenStream, item: TokenStream) -&gt; TokenStream {\n    item\n}</code></pre>\n<p>This following example shows the stringified <a href=\"../proc_macro/struct.TokenStream.html\"><code class=\"hljs\">TokenStream</code>s</a> that the attribute\nmacros see. The output will show in the output of the compiler. The output is\nshown in the comments after the function prefixed with \"out:\".</p>\n<!-- ignore: test doesn't support proc-macro -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-comment\">// my-macro/src/lib.rs</span>\n<span class=\"boring\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> proc_macro;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> proc_macro::TokenStream;\n</span>\n<span class=\"hljs-meta\">#[proc_macro_attribute]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">show_streams</span></span>(attr: TokenStream, item: TokenStream) -&gt; TokenStream {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"attr: \\\"{attr}\\\"\"</span>);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"item: \\\"{item}\\\"\"</span>);\n    item\n}</code></pre>\n<!-- ignore: requires external crates -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// src/lib.rs</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> my_macro;\n\n<span class=\"hljs-keyword\">use</span> my_macro::show_streams;\n\n<span class=\"hljs-comment\">// Example: Basic function</span>\n<span class=\"hljs-meta\">#[show_streams]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">invoke1</span></span>() {}\n<span class=\"hljs-comment\">// out: attr: \"\"</span>\n<span class=\"hljs-comment\">// out: item: \"fn invoke1() {}\"</span>\n\n<span class=\"hljs-comment\">// Example: Attribute with input</span>\n<span class=\"hljs-meta\">#[show_streams(bar)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">invoke2</span></span>() {}\n<span class=\"hljs-comment\">// out: attr: \"bar\"</span>\n<span class=\"hljs-comment\">// out: item: \"fn invoke2() {}\"</span>\n\n<span class=\"hljs-comment\">// Example: Multiple tokens in the input</span>\n<span class=\"hljs-meta\">#[show_streams(multiple =&gt; tokens)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">invoke3</span></span>() {}\n<span class=\"hljs-comment\">// out: attr: \"multiple =&gt; tokens\"</span>\n<span class=\"hljs-comment\">// out: item: \"fn invoke3() {}\"</span>\n\n<span class=\"hljs-comment\">// Example:</span>\n<span class=\"hljs-meta\">#[show_streams { delimiters }]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">invoke4</span></span>() {}\n<span class=\"hljs-comment\">// out: attr: \"delimiters\"</span>\n<span class=\"hljs-comment\">// out: item: \"fn invoke4() {}\"</span></code></pre>\n<h3 id=\"declarative-macro-tokens-and-procedural-macro-tokens\"><a class=\"header\" href=\"#declarative-macro-tokens-and-procedural-macro-tokens\">Declarative macro tokens and procedural macro tokens</a></h3>\n<p>Declarative <code class=\"hljs\">macro_rules</code> macros and procedural macros use similar, but\ndifferent definitions for tokens (or rather <a href=\"../proc_macro/enum.TokenTree.html\"><code class=\"hljs\">TokenTree</code>s</a>.)</p>\n<p>Token trees in <code class=\"hljs\">macro_rules</code> (corresponding to <code class=\"hljs\">tt</code> matchers) are defined as</p>\n<ul>\n<li>Delimited groups (<code class=\"hljs\">(...)</code>, <code class=\"hljs\">{...}</code>, etc)</li>\n<li>All operators supported by the language, both single-character and\nmulti-character ones (<code class=\"hljs\">+</code>, <code class=\"hljs\">+=</code>).\n<ul>\n<li>Note that this set doesn't include the single quote <code class=\"hljs\">'</code>.</li>\n</ul>\n</li>\n<li>Literals (<code class=\"hljs\">\"string\"</code>, <code class=\"hljs\">1</code>, etc)\n<ul>\n<li>Note that negation (e.g. <code class=\"hljs\">-1</code>) is never a part of such literal tokens,\nbut a separate operator token.</li>\n</ul>\n</li>\n<li>Identifiers, including keywords (<code class=\"hljs\">ident</code>, <code class=\"hljs\">r#ident</code>, <code class=\"hljs\">fn</code>)</li>\n<li>Lifetimes (<code class=\"hljs\">'ident</code>)</li>\n<li>Metavariable substitutions in <code class=\"hljs\">macro_rules</code> (e.g. <code class=\"hljs\">$my_expr</code> in\n<code class=\"hljs\">macro_rules! mac { ($my_expr: expr) =&gt; { $my_expr } }</code> after the <code class=\"hljs\">mac</code>'s\nexpansion, which will be considered a single token tree regardless of the\npassed expression)</li>\n</ul>\n<p>Token trees in procedural macros are defined as</p>\n<ul>\n<li>Delimited groups (<code class=\"hljs\">(...)</code>, <code class=\"hljs\">{...}</code>, etc)</li>\n<li>All punctuation characters used in operators supported by the language (<code class=\"hljs\">+</code>,\nbut not <code class=\"hljs\">+=</code>), and also the single quote <code class=\"hljs\">'</code> character (typically used in\nlifetimes, see below for lifetime splitting and joining behavior)</li>\n<li>Literals (<code class=\"hljs\">\"string\"</code>, <code class=\"hljs\">1</code>, etc)\n<ul>\n<li>Negation (e.g. <code class=\"hljs\">-1</code>) is supported as a part of integer\nand floating point literals.</li>\n</ul>\n</li>\n<li>Identifiers, including keywords (<code class=\"hljs\">ident</code>, <code class=\"hljs\">r#ident</code>, <code class=\"hljs\">fn</code>)</li>\n</ul>\n<p>Mismatches between these two definitions are accounted for when token streams\nare passed to and from procedural macros. <br>\nNote that the conversions below may happen lazily, so they might not happen if\nthe tokens are not actually inspected.</p>\n<p>When passed to a proc-macro</p>\n<ul>\n<li>All multi-character operators are broken into single characters.</li>\n<li>Lifetimes are broken into a <code class=\"hljs\">'</code> character and an identifier.</li>\n<li>All metavariable substitutions are represented as their underlying token\nstreams.\n<ul>\n<li>Such token streams may be wrapped into delimited groups (<a href=\"../proc_macro/struct.Group.html\"><code class=\"hljs\">Group</code></a>) with\nimplicit delimiters (<a href=\"../proc_macro/enum.Delimiter.html#variant.None\"><code class=\"hljs\">Delimiter::None</code></a>) when it's necessary for\npreserving parsing priorities.</li>\n<li><code class=\"hljs\">tt</code> and <code class=\"hljs\">ident</code> substitutions are never wrapped into such groups and\nalways represented as their underlying token trees.</li>\n</ul>\n</li>\n</ul>\n<p>When emitted from a proc macro</p>\n<ul>\n<li>Punctuation characters are glued into multi-character operators\nwhen applicable.</li>\n<li>Single quotes <code class=\"hljs\">'</code> joined with identifiers are glued into lifetimes.</li>\n<li>Negative literals are converted into two tokens (the <code class=\"hljs\">-</code> and the literal)\npossibly wrapped into a delimited group (<a href=\"../proc_macro/struct.Group.html\"><code class=\"hljs\">Group</code></a>) with implicit delimiters\n(<a href=\"../proc_macro/enum.Delimiter.html#variant.None\"><code class=\"hljs\">Delimiter::None</code></a>) when it's necessary for preserving parsing priorities.</li>\n</ul>\n<p>Note that neither declarative nor procedural macros support doc comment tokens\n(e.g. <code class=\"hljs\">/// Doc</code>), so they are always converted to token streams representing\ntheir equivalent <code class=\"hljs\">#[doc = r\"str\"]</code> attributes when passed to macros.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"crates-and-source-files\"><a class=\"header\" href=\"#crates-and-source-files\">Crates and source files</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>Crate</em> :<br>\n&nbsp;&nbsp; <a href=\"attributes.html\"><em>InnerAttribute</em></a><sup>*</sup><br>\n&nbsp;&nbsp; <a href=\"items.html\"><em>Item</em></a><sup>*</sup></p>\n</blockquote>\n<blockquote>\n<p>Note: Although Rust, like any other language, can be implemented by an\ninterpreter as well as a compiler, the only existing implementation is a\ncompiler, and the language has always been designed to be compiled. For these\nreasons, this section assumes a compiler.</p>\n</blockquote>\n<p>Rust's semantics obey a <em>phase distinction</em> between compile-time and\nrun-time.<sup class=\"footnote-reference\"><a href=\"#phase-distinction\">1</a></sup> Semantic rules that have a <em>static\ninterpretation</em> govern the success or failure of compilation, while\nsemantic rules that have a <em>dynamic interpretation</em> govern the behavior of the\nprogram at run-time.</p>\n<p>The compilation model centers on artifacts called <em>crates</em>. Each compilation\nprocesses a single crate in source form, and if successful, produces a single\ncrate in binary form: either an executable or some sort of\nlibrary.<sup class=\"footnote-reference\"><a href=\"#cratesourcefile\">2</a></sup></p>\n<p>A <em>crate</em> is a unit of compilation and linking, as well as versioning,\ndistribution, and runtime loading. A crate contains a <em>tree</em> of nested\n<a href=\"items/modules.html\">module</a> scopes. The top level of this tree is a module that is\nanonymous (from the point of view of paths within the module) and any item\nwithin a crate has a canonical <a href=\"paths.html\">module path</a> denoting its location\nwithin the crate's module tree.</p>\n<p>The Rust compiler is always invoked with a single source file as input, and\nalways produces a single output crate. The processing of that source file may\nresult in other source files being loaded as modules. Source files have the\nextension <code class=\"hljs\">.rs</code>.</p>\n<p>A Rust source file describes a module, the name and location of which —\nin the module tree of the current crate — are defined from outside the\nsource file: either by an explicit <a href=\"items/modules.html\"><em>Module</em></a> item in a referencing\nsource file, or by the name of the crate itself. Every source file is a\nmodule, but not every module needs its own source file: <a href=\"items/modules.html\">module\ndefinitions</a> can be nested within one file.</p>\n<p>Each source file contains a sequence of zero or more <a href=\"items.html\"><em>Item</em></a> definitions, and\nmay optionally begin with any number of <a href=\"attributes.html\">attributes</a>\nthat apply to the containing module, most of which influence the behavior of\nthe compiler. The anonymous crate module can have additional attributes that\napply to the crate as a whole.</p>\n<blockquote>\n<p><strong>Note</strong>: The file's contents may be preceded by a <a href=\"input-format.html#shebang-removal\">shebang</a>.</p>\n</blockquote>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Specify the crate name.</span>\n<span class=\"hljs-meta\">#![crate_name = <span class=\"hljs-meta-string\">\"projx\"</span>]</span>\n\n<span class=\"hljs-comment\">// Specify the type of output artifact.</span>\n<span class=\"hljs-meta\">#![crate_type = <span class=\"hljs-meta-string\">\"lib\"</span>]</span>\n\n<span class=\"hljs-comment\">// Turn on a warning.</span>\n<span class=\"hljs-comment\">// This can be done in any module, not just the anonymous crate module.</span>\n<span class=\"hljs-meta\">#![warn(non_camel_case_types)]</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"preludes-and-no_std\"><a class=\"header\" href=\"#preludes-and-no_std\">Preludes and <code>no_std</code></a></h2>\n<p>This section has been moved to the <a href=\"names/preludes.html\">Preludes chapter</a>.</p>\n<!-- this is to appease the linkchecker, will remove once other books are updated -->\n<h2 id=\"main-functions\"><a class=\"header\" href=\"#main-functions\">Main Functions</a></h2>\n<p>A crate that contains a <code class=\"hljs\">main</code> <a href=\"items/functions.html\">function</a> can be compiled to an executable. If a\n<code class=\"hljs\">main</code> function is present, it must take no arguments, must not declare any\n<a href=\"trait-bounds.html\">trait or lifetime bounds</a>, must not have any <a href=\"items/generics.html#where-clauses\">where clauses</a>, and its return\ntype must implement the <a href=\"../std/process/trait.Termination.html\"><code class=\"hljs\">Termination</code></a> trait.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() -&gt; ! {\n    std::process::exit(<span class=\"hljs-number\">0</span>);\n}</code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() -&gt; <span class=\"hljs-keyword\">impl</span> std::process::Termination {\n    std::process::ExitCode::SUCCESS\n}</code></pre></pre>\n<p>The <code class=\"hljs\">main</code> function may be an import, e.g. from an external crate or from the current one.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">mod</span> foo {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>() {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, world!\"</span>);\n    }\n}\n<span class=\"hljs-keyword\">use</span> foo::bar <span class=\"hljs-keyword\">as</span> main;\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p><strong>Note</strong>: Types with implementations of <a href=\"../std/process/trait.Termination.html\"><code class=\"hljs\">Termination</code></a> in the standard library include:</p>\n<ul>\n<li><code class=\"hljs\">()</code></li>\n<li><a href=\"types/never.html\"><code class=\"hljs\">!</code></a></li>\n<li><a href=\"../std/convert/enum.Infallible.html\"><code class=\"hljs\">Infallible</code></a></li>\n<li><a href=\"../std/process/struct.ExitCode.html\"><code class=\"hljs\">ExitCode</code></a></li>\n<li><code class=\"hljs\">Result&lt;T, E&gt; where T: Termination, E: Debug</code></li>\n</ul>\n</blockquote>\n<!-- If the previous section needs updating (from \"must take no arguments\"\n  onwards, also update it in the testing.md file -->\n<h3 id=\"the-no_main-attribute\"><a class=\"header\" href=\"#the-no_main-attribute\">The <code>no_main</code> attribute</a></h3>\n<p>The <em><code class=\"hljs\">no_main</code> <a href=\"attributes.html\">attribute</a></em> may be applied at the crate level to disable\nemitting the <code class=\"hljs\">main</code> symbol for an executable binary. This is useful when some\nother object being linked to defines <code class=\"hljs\">main</code>.</p>\n<h2 id=\"the-crate_name-attribute\"><a class=\"header\" href=\"#the-crate_name-attribute\">The <code>crate_name</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">crate_name</code> <a href=\"attributes.html\">attribute</a></em> may be applied at the crate level to specify the\nname of the crate with the <a href=\"attributes.html#meta-item-attribute-syntax\"><em>MetaNameValueStr</em></a> syntax.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![crate_name = <span class=\"hljs-meta-string\">\"mycrate\"</span>]</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>The crate name must not be empty, and must only contain <a href=\"../std/primitive.char.html#method.is_alphanumeric\">Unicode alphanumeric</a>\nor <code class=\"hljs\">_</code> (U+005F) characters.</p>\n<div class=\"footnote-definition\" id=\"phase-distinction\"><sup class=\"footnote-definition-label\">1</sup>\n<p>This distinction would also exist in an interpreter.\nStatic checks like syntactic analysis, type checking, and lints should\nhappen before the program is executed regardless of when it is executed.</p>\n</div>\n<div class=\"footnote-definition\" id=\"cratesourcefile\"><sup class=\"footnote-definition-label\">2</sup>\n<p>A crate is somewhat analogous to an <em>assembly</em> in the\nECMA-335 CLI model, a <em>library</em> in the SML/NJ Compilation Manager, a <em>unit</em>\nin the Owens and Flatt module system, or a <em>configuration</em> in Mesa.</p>\n</div>\n<script>\n(function() {\n    var fragments = {\n        \"#preludes-and-no_std\": \"names/preludes.html\",\n    };\n    var target = fragments[window.location.hash];\n    if (target) {\n        var url = window.location.toString();\n        var base = url.substring(0, url.lastIndexOf('/'));\n        window.location.replace(base + \"/\" + target);\n    }\n})();\n</script>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"conditional-compilation\"><a class=\"header\" href=\"#conditional-compilation\">Conditional compilation</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ConfigurationPredicate</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>ConfigurationOption</em><br>\n&nbsp;&nbsp; | <em>ConfigurationAll</em><br>\n&nbsp;&nbsp; | <em>ConfigurationAny</em><br>\n&nbsp;&nbsp; | <em>ConfigurationNot</em></p>\n<p><em>ConfigurationOption</em> :<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a>&nbsp;(<code class=\"hljs\">=</code> (<a href=\"tokens.html#string-literals\">STRING_LITERAL</a> | <a href=\"tokens.html#raw-string-literals\">RAW_STRING_LITERAL</a>))<sup>?</sup></p>\n<p><em>ConfigurationAll</em><br>\n&nbsp;&nbsp; <code class=\"hljs\">all</code> <code class=\"hljs\">(</code> <em>ConfigurationPredicateList</em><sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>ConfigurationAny</em><br>\n&nbsp;&nbsp; <code class=\"hljs\">any</code> <code class=\"hljs\">(</code> <em>ConfigurationPredicateList</em><sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>ConfigurationNot</em><br>\n&nbsp;&nbsp; <code class=\"hljs\">not</code> <code class=\"hljs\">(</code> <em>ConfigurationPredicate</em> <code class=\"hljs\">)</code></p>\n<p><em>ConfigurationPredicateList</em><br>\n&nbsp;&nbsp; <em>ConfigurationPredicate</em> (<code class=\"hljs\">,</code> <em>ConfigurationPredicate</em>)<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n</blockquote>\n<p><em>Conditionally compiled source code</em> is source code that may or may not be\nconsidered a part of the source code depending on certain conditions. <!-- This\ndefinition is sort of vacuous --> Source code can be conditionally compiled\nusing the <a href=\"attributes.html\">attributes</a> <a href=\"conditional-compilation.html#the-cfg-attribute\"><code class=\"hljs\">cfg</code></a> and <a href=\"conditional-compilation.html#the-cfg_attr-attribute\"><code class=\"hljs\">cfg_attr</code></a> and the built-in <a href=\"conditional-compilation.html#the-cfg-macro\"><code class=\"hljs\">cfg</code> macro</a>.\nThese conditions are based on the target architecture of the compiled crate,\narbitrary values passed to the compiler, and a few other miscellaneous things\nfurther described below in detail.</p>\n<p>Each form of conditional compilation takes a <em>configuration predicate</em> that\nevaluates to true or false. The predicate is one of the following:</p>\n<ul>\n<li>A configuration option. It is true if the option is set and false if it is\nunset.</li>\n<li><code class=\"hljs\">all()</code> with a comma separated list of configuration predicates. It is false\nif at least one predicate is false. If there are no predicates, it is true.</li>\n<li><code class=\"hljs\">any()</code> with a comma separated list of configuration predicates. It is true\nif at least one predicate is true. If there are no predicates, it is false.</li>\n<li><code class=\"hljs\">not()</code> with a configuration predicate. It is true if its predicate is false\nand false if its predicate is true.</li>\n</ul>\n<p><em>Configuration options</em> are names and key-value pairs that are either set or\nunset. Names are written as a single identifier such as, for example, <code class=\"hljs\">unix</code>.\nKey-value pairs are written as an identifier, <code class=\"hljs\">=</code>, and then a string. For\nexample, <code class=\"hljs\">target_arch = \"x86_64\"</code> is a configuration option.</p>\n<blockquote>\n<p><strong>Note</strong>: Whitespace around the <code class=\"hljs\">=</code> is ignored. <code class=\"hljs\">foo=\"bar\"</code> and <code class=\"hljs\">foo = \"bar\"</code>\nare equivalent configuration options.</p>\n</blockquote>\n<p>Keys are not unique in the set of key-value configuration options. For example,\nboth <code class=\"hljs\">feature = \"std\"</code> and <code class=\"hljs\">feature = \"serde\"</code> can be set at the same time.</p>\n<h2 id=\"set-configuration-options\"><a class=\"header\" href=\"#set-configuration-options\">Set Configuration Options</a></h2>\n<p>Which configuration options are set is determined statically during the\ncompilation of the crate. Certain options are <em>compiler-set</em> based on data\nabout the compilation. Other options are <em>arbitrarily-set</em>, set based on input\npassed to the compiler outside of the code. It is not possible to set a\nconfiguration option from within the source code of the crate being compiled.</p>\n<blockquote>\n<p><strong>Note</strong>: For <code class=\"hljs\">rustc</code>, arbitrary-set configuration options are set using the\n<a href=\"../rustc/command-line-arguments.html#--cfg-configure-the-compilation-environment\"><code class=\"hljs\">--cfg</code></a> flag.</p>\n</blockquote>\n<blockquote>\n<p><strong>Note</strong>: Configuration options with the key <code class=\"hljs\">feature</code> are a convention used\nby <a href=\"../cargo/reference/features.html\">Cargo</a> for specifying compile-time options and optional\ndependencies.</p>\n</blockquote>\n<div class=\"warning\">\n<p>Warning: It is possible for arbitrarily-set configuration options to have the\nsame value as compiler-set configuration options. For example, it is possible\nto do <code class=\"hljs\">rustc --cfg \"unix\" program.rs</code> while compiling to a Windows target, and\nhave both <code class=\"hljs\">unix</code> and <code class=\"hljs\">windows</code> configuration options set at the same time. It\nis unwise to actually do this.</p>\n</div>\n<h3 id=\"target_arch\"><a class=\"header\" href=\"#target_arch\"><code>target_arch</code></a></h3>\n<p>Key-value option set once with the target's CPU architecture. The value is\nsimilar to the first element of the platform's target triple, but not\nidentical.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"x86\"</code></li>\n<li><code class=\"hljs\">\"x86_64\"</code></li>\n<li><code class=\"hljs\">\"mips\"</code></li>\n<li><code class=\"hljs\">\"powerpc\"</code></li>\n<li><code class=\"hljs\">\"powerpc64\"</code></li>\n<li><code class=\"hljs\">\"arm\"</code></li>\n<li><code class=\"hljs\">\"aarch64\"</code></li>\n</ul>\n<h3 id=\"target_feature\"><a class=\"header\" href=\"#target_feature\"><code>target_feature</code></a></h3>\n<p>Key-value option set for each platform feature available for the current\ncompilation target.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"avx\"</code></li>\n<li><code class=\"hljs\">\"avx2\"</code></li>\n<li><code class=\"hljs\">\"crt-static\"</code></li>\n<li><code class=\"hljs\">\"rdrand\"</code></li>\n<li><code class=\"hljs\">\"sse\"</code></li>\n<li><code class=\"hljs\">\"sse2\"</code></li>\n<li><code class=\"hljs\">\"sse4.1\"</code></li>\n</ul>\n<p>See the <a href=\"attributes/codegen.html#the-target_feature-attribute\"><code class=\"hljs\">target_feature</code> attribute</a> for more details on the available\nfeatures. An additional feature of <code class=\"hljs\">crt-static</code> is available to the\n<code class=\"hljs\">target_feature</code> option to indicate that a <a href=\"linkage.html#static-and-dynamic-c-runtimes\">static C runtime</a> is available.</p>\n<h3 id=\"target_os\"><a class=\"header\" href=\"#target_os\"><code>target_os</code></a></h3>\n<p>Key-value option set once with the target's operating system. This value is\nsimilar to the second and third element of the platform's target triple.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"windows\"</code></li>\n<li><code class=\"hljs\">\"macos\"</code></li>\n<li><code class=\"hljs\">\"ios\"</code></li>\n<li><code class=\"hljs\">\"linux\"</code></li>\n<li><code class=\"hljs\">\"android\"</code></li>\n<li><code class=\"hljs\">\"freebsd\"</code></li>\n<li><code class=\"hljs\">\"dragonfly\"</code></li>\n<li><code class=\"hljs\">\"openbsd\"</code></li>\n<li><code class=\"hljs\">\"netbsd\"</code></li>\n<li><code class=\"hljs\">\"none\"</code> (typical for embedded targets)</li>\n</ul>\n<h3 id=\"target_family\"><a class=\"header\" href=\"#target_family\"><code>target_family</code></a></h3>\n<p>Key-value option providing a more generic description of a target, such as the family of the\noperating systems or architectures that the target generally falls into. Any number of\n<code class=\"hljs\">target_family</code> key-value pairs can be set.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"unix\"</code></li>\n<li><code class=\"hljs\">\"windows\"</code></li>\n<li><code class=\"hljs\">\"wasm\"</code></li>\n</ul>\n<h3 id=\"unix-and-windows\"><a class=\"header\" href=\"#unix-and-windows\"><code>unix</code> and <code>windows</code></a></h3>\n<p><code class=\"hljs\">unix</code> is set if <code class=\"hljs\">target_family = \"unix\"</code> is set and <code class=\"hljs\">windows</code> is set if\n<code class=\"hljs\">target_family = \"windows\"</code> is set.</p>\n<h3 id=\"target_env\"><a class=\"header\" href=\"#target_env\"><code>target_env</code></a></h3>\n<p>Key-value option set with further disambiguating information about the target\nplatform with information about the ABI or <code class=\"hljs\">libc</code> used. For historical reasons,\nthis value is only defined as not the empty-string when actually needed for\ndisambiguation. Thus, for example, on many GNU platforms, this value will be\nempty. This value is similar to the fourth element of the platform's target\ntriple. One difference is that embedded ABIs such as <code class=\"hljs\">gnueabihf</code> will simply\ndefine <code class=\"hljs\">target_env</code> as <code class=\"hljs\">\"gnu\"</code>.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"\"</code></li>\n<li><code class=\"hljs\">\"gnu\"</code></li>\n<li><code class=\"hljs\">\"msvc\"</code></li>\n<li><code class=\"hljs\">\"musl\"</code></li>\n<li><code class=\"hljs\">\"sgx\"</code></li>\n</ul>\n<h3 id=\"target_abi\"><a class=\"header\" href=\"#target_abi\"><code>target_abi</code></a></h3>\n<p>Key-value option set to further disambiguate the <code class=\"hljs\">target_env</code> with information\nabout the target ABI. For historical reasons,\nthis value is only defined as not the empty-string when actually needed for\ndisambiguation. Thus, for example, on many GNU platforms, this value will be\nempty.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"\"</code></li>\n<li><code class=\"hljs\">\"llvm\"</code></li>\n<li><code class=\"hljs\">\"eabihf\"</code></li>\n<li><code class=\"hljs\">\"abi64\"</code></li>\n<li><code class=\"hljs\">\"sim\"</code></li>\n<li><code class=\"hljs\">\"macabi\"</code></li>\n</ul>\n<h3 id=\"target_endian\"><a class=\"header\" href=\"#target_endian\"><code>target_endian</code></a></h3>\n<p>Key-value option set once with either a value of \"little\" or \"big\" depending\non the endianness of the target's CPU.</p>\n<h3 id=\"target_pointer_width\"><a class=\"header\" href=\"#target_pointer_width\"><code>target_pointer_width</code></a></h3>\n<p>Key-value option set once with the target's pointer width in bits.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"16\"</code></li>\n<li><code class=\"hljs\">\"32\"</code></li>\n<li><code class=\"hljs\">\"64\"</code></li>\n</ul>\n<h3 id=\"target_vendor\"><a class=\"header\" href=\"#target_vendor\"><code>target_vendor</code></a></h3>\n<p>Key-value option set once with the vendor of the target.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"apple\"</code></li>\n<li><code class=\"hljs\">\"fortanix\"</code></li>\n<li><code class=\"hljs\">\"pc\"</code></li>\n<li><code class=\"hljs\">\"unknown\"</code></li>\n</ul>\n<h3 id=\"target_has_atomic\"><a class=\"header\" href=\"#target_has_atomic\"><code>target_has_atomic</code></a></h3>\n<p>Key-value option set for each bit width that the target supports\natomic loads, stores, and compare-and-swap operations.</p>\n<p>When this cfg is present, all of the stable <a href=\"../core/sync/atomic/index.html\"><code class=\"hljs\">core::sync::atomic</code></a> APIs are available for\nthe relevant atomic width.</p>\n<p>Possible values:</p>\n<ul>\n<li><code class=\"hljs\">\"8\"</code></li>\n<li><code class=\"hljs\">\"16\"</code></li>\n<li><code class=\"hljs\">\"32\"</code></li>\n<li><code class=\"hljs\">\"64\"</code></li>\n<li><code class=\"hljs\">\"128\"</code></li>\n<li><code class=\"hljs\">\"ptr\"</code></li>\n</ul>\n<h3 id=\"test\"><a class=\"header\" href=\"#test\"><code>test</code></a></h3>\n<p>Enabled when compiling the test harness. Done with <code class=\"hljs\">rustc</code> by using the\n<a href=\"../rustc/command-line-arguments.html#--test-build-a-test-harness\"><code class=\"hljs\">--test</code></a> flag. See <a href=\"attributes/testing.html\">Testing</a> for more on testing support.</p>\n<h3 id=\"debug_assertions\"><a class=\"header\" href=\"#debug_assertions\"><code>debug_assertions</code></a></h3>\n<p>Enabled by default when compiling without optimizations.\nThis can be used to enable extra debugging code in development but not in\nproduction.  For example, it controls the behavior of the standard library's\n<a href=\"../std/macro.debug_assert.html\"><code class=\"hljs\">debug_assert!</code></a> macro.</p>\n<h3 id=\"proc_macro\"><a class=\"header\" href=\"#proc_macro\"><code>proc_macro</code></a></h3>\n<p>Set when the crate being compiled is being compiled with the <code class=\"hljs\">proc_macro</code>\n<a href=\"linkage.html\">crate type</a>.</p>\n<h3 id=\"panic\"><a class=\"header\" href=\"#panic\"><code>panic</code></a></h3>\n<p>Key-value option set depending on the panic strategy. Note that more values may be added in the future.</p>\n<p>Example values:</p>\n<ul>\n<li><code class=\"hljs\">\"abort\"</code></li>\n<li><code class=\"hljs\">\"unwind\"</code></li>\n</ul>\n<h2 id=\"forms-of-conditional-compilation\"><a class=\"header\" href=\"#forms-of-conditional-compilation\">Forms of conditional compilation</a></h2>\n<h3 id=\"the-cfg-attribute\"><a class=\"header\" href=\"#the-cfg-attribute\">The <code>cfg</code> attribute</a></h3>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>CfgAttrAttribute</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">cfg</code> <code class=\"hljs\">(</code> <em>ConfigurationPredicate</em> <code class=\"hljs\">)</code></p>\n</blockquote>\n<!-- should we say they're active attributes here? -->\n<p>The <code class=\"hljs\">cfg</code> <a href=\"attributes.html\">attribute</a> conditionally includes the thing it is attached to based\non a configuration predicate.</p>\n<p>It is written as <code class=\"hljs\">cfg</code>, <code class=\"hljs\">(</code>, a configuration predicate, and finally <code class=\"hljs\">)</code>.</p>\n<p>If the predicate is true, the thing is rewritten to not have the <code class=\"hljs\">cfg</code> attribute\non it. If the predicate is false, the thing is removed from the source code.</p>\n<p>When a crate-level <code class=\"hljs\">cfg</code> has a false predicate, the behavior is slightly\ndifferent: any crate attributes preceding the <code class=\"hljs\">cfg</code> are kept, and any crate\nattributes following the <code class=\"hljs\">cfg</code> are removed. This allows <code class=\"hljs\">#![no_std]</code> and\n<code class=\"hljs\">#![no_core]</code> crates to avoid linking <code class=\"hljs\">std</code>/<code class=\"hljs\">core</code> even if a <code class=\"hljs\">#![cfg(...)]</code> has\nremoved the entire crate.</p>\n<p>Some examples on functions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// The function is only included in the build when compiling for macOS</span>\n<span class=\"hljs-meta\">#[cfg(target_os = <span class=\"hljs-meta-string\">\"macos\"</span>)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">macos_only</span></span>() {\n  <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-comment\">// This function is only included when either foo or bar is defined</span>\n<span class=\"hljs-meta\">#[cfg(any(foo, bar))]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">needs_foo_or_bar</span></span>() {\n  <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-comment\">// This function is only included when compiling for a unixish OS with a 32-bit</span>\n<span class=\"hljs-comment\">// architecture</span>\n<span class=\"hljs-meta\">#[cfg(all(unix, target_pointer_width = <span class=\"hljs-meta-string\">\"32\"</span>))]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">on_32bit_unix</span></span>() {\n  <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-comment\">// This function is only included when foo is not defined</span>\n<span class=\"hljs-meta\">#[cfg(not(foo))]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">needs_not_foo</span></span>() {\n  <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-comment\">// This function is only included when the panic strategy is set to unwind</span>\n<span class=\"hljs-meta\">#[cfg(panic = <span class=\"hljs-meta-string\">\"unwind\"</span>)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">when_unwinding</span></span>() {\n  <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The <code class=\"hljs\">cfg</code> attribute is allowed anywhere attributes are allowed.</p>\n<h3 id=\"the-cfg_attr-attribute\"><a class=\"header\" href=\"#the-cfg_attr-attribute\">The <code>cfg_attr</code> attribute</a></h3>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>CfgAttrAttribute</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">cfg_attr</code> <code class=\"hljs\">(</code> <em>ConfigurationPredicate</em> <code class=\"hljs\">,</code> <em>CfgAttrs</em><sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>CfgAttrs</em> :<br>\n&nbsp;&nbsp; <a href=\"attributes.html\"><em>Attr</em></a>&nbsp;(<code class=\"hljs\">,</code> <a href=\"attributes.html\"><em>Attr</em></a>)<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n</blockquote>\n<p>The <code class=\"hljs\">cfg_attr</code> <a href=\"attributes.html\">attribute</a> conditionally includes <a href=\"attributes.html\">attributes</a> based on a\nconfiguration predicate.</p>\n<p>When the configuration predicate is true, this attribute expands out to the\nattributes listed after the predicate. For example, the following module will\neither be found at <code class=\"hljs\">linux.rs</code> or <code class=\"hljs\">windows.rs</code> based on the target.</p>\n<!-- ignore: `mod` needs multiple files -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[cfg_attr(target_os = <span class=\"hljs-meta-string\">\"linux\"</span>, path = <span class=\"hljs-meta-string\">\"linux.rs\"</span>)]</span>\n<span class=\"hljs-meta\">#[cfg_attr(windows, path = <span class=\"hljs-meta-string\">\"windows.rs\"</span>)]</span>\n<span class=\"hljs-keyword\">mod</span> os;</code></pre>\n<p>Zero, one, or more attributes may be listed. Multiple attributes will each be\nexpanded into separate attributes. For example:</p>\n<!-- ignore: fake attributes -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[cfg_attr(feature = <span class=\"hljs-meta-string\">\"magic\"</span>, sparkles, crackles)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bewitched</span></span>() {}\n\n<span class=\"hljs-comment\">// When the `magic` feature flag is enabled, the above will expand to:</span>\n<span class=\"hljs-meta\">#[sparkles]</span>\n<span class=\"hljs-meta\">#[crackles]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bewitched</span></span>() {}</code></pre>\n<blockquote>\n<p><strong>Note</strong>: The <code class=\"hljs\">cfg_attr</code> can expand to another <code class=\"hljs\">cfg_attr</code>. For example,\n<code class=\"hljs\">#[cfg_attr(target_os = \"linux\", cfg_attr(feature = \"multithreaded\", some_other_attribute))]</code>\nis valid. This example would be equivalent to\n<code class=\"hljs\">#[cfg_attr(all(target_os = \"linux\", feature =\"multithreaded\"), some_other_attribute)]</code>.</p>\n</blockquote>\n<p>The <code class=\"hljs\">cfg_attr</code> attribute is allowed anywhere attributes are allowed.</p>\n<h3 id=\"the-cfg-macro\"><a class=\"header\" href=\"#the-cfg-macro\">The <code>cfg</code> macro</a></h3>\n<p>The built-in <code class=\"hljs\">cfg</code> macro takes in a single configuration predicate and evaluates\nto the <code class=\"hljs\">true</code> literal when the predicate is true and the <code class=\"hljs\">false</code> literal when\nit is false.</p>\n<p>For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> machine_kind = <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">cfg!</span>(unix) {\n  <span class=\"hljs-string\">\"unix\"</span>\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">cfg!</span>(windows) {\n  <span class=\"hljs-string\">\"windows\"</span>\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-string\">\"unknown\"</span>\n};\n\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"I'm running on a {} machine!\"</span>, machine_kind);\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"items\"><a class=\"header\" href=\"#items\">Items</a></h1>\n<blockquote>\n<p><strong><sup>Syntax:<sup></sup></sup></strong><br>\n<em>Item</em>:<br>\n&nbsp;&nbsp; <a href=\"attributes.html\"><em>OuterAttribute</em></a><sup>*</sup><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>VisItem</em><br>\n&nbsp;&nbsp; | <em>MacroItem</em></p>\n<p><em>VisItem</em>:<br>\n&nbsp;&nbsp; <a href=\"visibility-and-privacy.html\"><em>Visibility</em></a><sup>?</sup><br>\n&nbsp;&nbsp; (<br>\n&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;  <a href=\"items/modules.html\"><em>Module</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"items/extern-crates.html\"><em>ExternCrate</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"items/use-declarations.html\"><em>UseDeclaration</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"items/functions.html\"><em>Function</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"items/type-aliases.html\"><em>TypeAlias</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"items/structs.html\"><em>Struct</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"items/enumerations.html\"><em>Enumeration</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"items/unions.html\"><em>Union</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"items/constant-items.html\"><em>ConstantItem</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"items/static-items.html\"><em>StaticItem</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"items/traits.html\"><em>Trait</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"items/implementations.html\"><em>Implementation</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"items/external-blocks.html\"><em>ExternBlock</em></a><br>\n&nbsp;&nbsp; )</p>\n<p><em>MacroItem</em>:<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"macros.html#macro-invocation\"><em>MacroInvocationSemi</em></a><br>\n&nbsp;&nbsp; | <a href=\"macros-by-example.html\"><em>MacroRulesDefinition</em></a></p>\n</blockquote>\n<p>An <em>item</em> is a component of a crate. Items are organized within a crate by a\nnested set of <a href=\"items/modules.html\">modules</a>. Every crate has a single \"outermost\" anonymous module;\nall further items within the crate have <a href=\"paths.html\">paths</a> within the module tree of the\ncrate.</p>\n<p>Items are entirely determined at compile-time, generally remain fixed during\nexecution, and may reside in read-only memory.</p>\n<p>There are several kinds of items:</p>\n<ul>\n<li><a href=\"items/modules.html\">modules</a></li>\n<li><a href=\"items/extern-crates.html\"><code class=\"hljs\">extern crate</code> declarations</a></li>\n<li><a href=\"items/use-declarations.html\"><code class=\"hljs\">use</code> declarations</a></li>\n<li><a href=\"items/functions.html\">function definitions</a></li>\n<li><a href=\"items/type-aliases.html\">type definitions</a></li>\n<li><a href=\"items/structs.html\">struct definitions</a></li>\n<li><a href=\"items/enumerations.html\">enumeration definitions</a></li>\n<li><a href=\"items/unions.html\">union definitions</a></li>\n<li><a href=\"items/constant-items.html\">constant items</a></li>\n<li><a href=\"items/static-items.html\">static items</a></li>\n<li><a href=\"items/traits.html\">trait definitions</a></li>\n<li><a href=\"items/implementations.html\">implementations</a></li>\n<li><a href=\"items/external-blocks.html\"><code class=\"hljs\">extern</code> blocks</a></li>\n</ul>\n<p>Items may be declared in the <a href=\"crates-and-source-files.html\">root of the crate</a>, a <a href=\"items/modules.html\">module</a>, or a <a href=\"expressions/block-expr.html\">block expression</a>.\nA subset of items, called <a href=\"items/associated-items.html\">associated items</a>, may be declared in <a href=\"items/traits.html\">traits</a> and <a href=\"items/implementations.html\">implementations</a>.\nA subset of items, called external items, may be declared in <a href=\"items/external-blocks.html\"><code class=\"hljs\">extern</code> blocks</a>.</p>\n<p>Items may be defined in any order, with the exception of <a href=\"macros-by-example.html\"><code class=\"hljs\">macro_rules</code></a> which has its own scoping behavior.\n<a href=\"names/name-resolution.html\">Name resolution</a> of item names allows items to be defined before or after where the item is referred to in the module or block.</p>\n<p>See <a href=\"names/scopes.html#item-scopes\">item scopes</a> for information on the scoping rules of items.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"modules\"><a class=\"header\" href=\"#modules\">Modules</a></h1>\n<blockquote>\n<p><strong><sup>Syntax:</sup></strong><br>\n<em>Module</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">unsafe</code><sup>?</sup> <code class=\"hljs\">mod</code> <a href=\"items/../identifiers.html\">IDENTIFIER</a> <code class=\"hljs\">;</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">unsafe</code><sup>?</sup> <code class=\"hljs\">mod</code> <a href=\"items/../identifiers.html\">IDENTIFIER</a> <code class=\"hljs\">{</code><br>\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"items/../attributes.html\"><em>InnerAttribute</em></a><sup>*</sup><br>\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"items/../items.html\"><em>Item</em></a><sup>*</sup><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">}</code></p>\n</blockquote>\n<p>A module is a container for zero or more <a href=\"items/../items.html\">items</a>.</p>\n<p>A <em>module item</em> is a module, surrounded in braces, named, and prefixed with the\nkeyword <code class=\"hljs\">mod</code>. A module item introduces a new, named module into the tree of\nmodules making up a crate. Modules can nest arbitrarily.</p>\n<p>An example of a module:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">mod</span> math {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Complex</span></span> = (<span class=\"hljs-built_in\">f64</span>, <span class=\"hljs-built_in\">f64</span>);\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">sin</span></span>(f: <span class=\"hljs-built_in\">f64</span>) -&gt; <span class=\"hljs-built_in\">f64</span> {\n        <span class=\"hljs-comment\">/* ... */</span>\n<span class=\"boring\">      <span class=\"hljs-built_in\">unimplemented!</span>();\n</span>    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">cos</span></span>(f: <span class=\"hljs-built_in\">f64</span>) -&gt; <span class=\"hljs-built_in\">f64</span> {\n        <span class=\"hljs-comment\">/* ... */</span>\n<span class=\"boring\">      <span class=\"hljs-built_in\">unimplemented!</span>();\n</span>    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">tan</span></span>(f: <span class=\"hljs-built_in\">f64</span>) -&gt; <span class=\"hljs-built_in\">f64</span> {\n        <span class=\"hljs-comment\">/* ... */</span>\n<span class=\"boring\">      <span class=\"hljs-built_in\">unimplemented!</span>();\n</span>    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Modules and types share the same namespace. Declaring a named type with the\nsame name as a module in scope is forbidden: that is, a type definition, trait,\nstruct, enumeration, union, type parameter or crate can't shadow the name of a\nmodule in scope, or vice versa. Items brought into scope with <code class=\"hljs\">use</code> also have\nthis restriction.</p>\n<p>The <code class=\"hljs\">unsafe</code> keyword is syntactically allowed to appear before the <code class=\"hljs\">mod</code>\nkeyword, but it is rejected at a semantic level. This allows macros to consume\nthe syntax and make use of the <code class=\"hljs\">unsafe</code> keyword, before removing it from the\ntoken stream.</p>\n<h2 id=\"module-source-filenames\"><a class=\"header\" href=\"#module-source-filenames\">Module Source Filenames</a></h2>\n<p>A module without a body is loaded from an external file. When the module does\nnot have a <code class=\"hljs\">path</code> attribute, the path to the file mirrors the logical <a href=\"items/../paths.html\">module\npath</a>. Ancestor module path components are directories, and the module's\ncontents are in a file with the name of the module plus the <code class=\"hljs\">.rs</code> extension.\nFor example, the following module structure can have this corresponding\nfilesystem structure:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Module Path</th><th>Filesystem Path</th><th>File Contents</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">crate</code></td><td><code class=\"hljs\">lib.rs</code></td><td><code class=\"hljs\">mod util;</code></td></tr>\n<tr><td><code class=\"hljs\">crate::util</code></td><td><code class=\"hljs\">util.rs</code></td><td><code class=\"hljs\">mod config;</code></td></tr>\n<tr><td><code class=\"hljs\">crate::util::config</code></td><td><code class=\"hljs\">util/config.rs</code></td><td></td></tr>\n</tbody></table>\n</div>\n<p>Module filenames may also be the name of the module as a directory with the\ncontents in a file named <code class=\"hljs\">mod.rs</code> within that directory. The above example can\nalternately be expressed with <code class=\"hljs\">crate::util</code>'s contents in a file named\n<code class=\"hljs\">util/mod.rs</code>. It is not allowed to have both <code class=\"hljs\">util.rs</code> and <code class=\"hljs\">util/mod.rs</code>.</p>\n<blockquote>\n<p><strong>Note</strong>: Prior to <code class=\"hljs\">rustc</code> 1.30, using <code class=\"hljs\">mod.rs</code> files was the way to load\na module with nested children. It is encouraged to use the new naming\nconvention as it is more consistent, and avoids having many files named\n<code class=\"hljs\">mod.rs</code> within a project.</p>\n</blockquote>\n<h3 id=\"the-path-attribute\"><a class=\"header\" href=\"#the-path-attribute\">The <code>path</code> attribute</a></h3>\n<p>The directories and files used for loading external file modules can be\ninfluenced with the <code class=\"hljs\">path</code> attribute.</p>\n<p>For <code class=\"hljs\">path</code> attributes on modules not inside inline module blocks, the file\npath is relative to the directory the source file is located. For example, the\nfollowing code snippet would use the paths shown based on where it is located:</p>\n<!-- ignore: requires external files -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[path = <span class=\"hljs-meta-string\">\"foo.rs\"</span>]</span>\n<span class=\"hljs-keyword\">mod</span> c;</code></pre>\n<div class=\"table-wrapper\"><table><thead><tr><th>Source File</th><th><code class=\"hljs\">c</code>'s File Location</th><th><code class=\"hljs\">c</code>'s Module Path</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">src/a/b.rs</code></td><td><code class=\"hljs\">src/a/foo.rs</code></td><td><code class=\"hljs\">crate::a::b::c</code></td></tr>\n<tr><td><code class=\"hljs\">src/a/mod.rs</code></td><td><code class=\"hljs\">src/a/foo.rs</code></td><td><code class=\"hljs\">crate::a::c</code></td></tr>\n</tbody></table>\n</div>\n<p>For <code class=\"hljs\">path</code> attributes inside inline module blocks, the relative location of\nthe file path depends on the kind of source file the <code class=\"hljs\">path</code> attribute is\nlocated in. \"mod-rs\" source files are root modules (such as <code class=\"hljs\">lib.rs</code> or\n<code class=\"hljs\">main.rs</code>) and modules with files named <code class=\"hljs\">mod.rs</code>. \"non-mod-rs\" source files\nare all other module files. Paths for <code class=\"hljs\">path</code> attributes inside inline module\nblocks in a mod-rs file are relative to the directory of the mod-rs file\nincluding the inline module components as directories. For non-mod-rs files,\nit is the same except the path starts with a directory with the name of the\nnon-mod-rs module. For example, the following code snippet would use the paths\nshown based on where it is located:</p>\n<!-- ignore: requires external files -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">mod</span> inline {\n    <span class=\"hljs-meta\">#[path = <span class=\"hljs-meta-string\">\"other.rs\"</span>]</span>\n    <span class=\"hljs-keyword\">mod</span> inner;\n}</code></pre>\n<div class=\"table-wrapper\"><table><thead><tr><th>Source File</th><th><code class=\"hljs\">inner</code>'s File Location</th><th><code class=\"hljs\">inner</code>'s Module Path</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">src/a/b.rs</code></td><td><code class=\"hljs\">src/a/b/inline/other.rs</code></td><td><code class=\"hljs\">crate::a::b::inline::inner</code></td></tr>\n<tr><td><code class=\"hljs\">src/a/mod.rs</code></td><td><code class=\"hljs\">src/a/inline/other.rs</code></td><td><code class=\"hljs\">crate::a::inline::inner</code></td></tr>\n</tbody></table>\n</div>\n<p>An example of combining the above rules of <code class=\"hljs\">path</code> attributes on inline modules\nand nested modules within (applies to both mod-rs and non-mod-rs files):</p>\n<!-- ignore: requires external files -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[path = <span class=\"hljs-meta-string\">\"thread_files\"</span>]</span>\n<span class=\"hljs-keyword\">mod</span> thread {\n    <span class=\"hljs-comment\">// Load the `local_data` module from `thread_files/tls.rs` relative to</span>\n    <span class=\"hljs-comment\">// this source file's directory.</span>\n    <span class=\"hljs-meta\">#[path = <span class=\"hljs-meta-string\">\"tls.rs\"</span>]</span>\n    <span class=\"hljs-keyword\">mod</span> local_data;\n}</code></pre>\n<h2 id=\"attributes-on-modules\"><a class=\"header\" href=\"#attributes-on-modules\">Attributes on Modules</a></h2>\n<p>Modules, like all items, accept outer attributes. They also accept inner\nattributes: either after <code class=\"hljs\">{</code> for a module with a body, or at the beginning of the\nsource file, after the optional BOM and shebang.</p>\n<p>The built-in attributes that have meaning on a module are <a href=\"items/../conditional-compilation.html\"><code class=\"hljs\">cfg</code></a>,\n<a href=\"items/../attributes/diagnostics.html#the-deprecated-attribute\"><code class=\"hljs\">deprecated</code></a>, <a href=\"items/../../rustdoc/the-doc-attribute.html\"><code class=\"hljs\">doc</code></a>, <a href=\"items/../attributes/diagnostics.html#lint-check-attributes\">the lint check attributes</a>, <a href=\"items/modules.html#the-path-attribute\"><code class=\"hljs\">path</code></a>, and\n<a href=\"items/../names/preludes.html#the-no_implicit_prelude-attribute\"><code class=\"hljs\">no_implicit_prelude</code></a>. Modules also accept macro attributes.</p>\n<script>\n(function() {\n    var fragments = {\n        \"#prelude-items\": \"../names/preludes.html\",\n    };\n    var target = fragments[window.location.hash];\n    if (target) {\n        var url = window.location.toString();\n        var base = url.substring(0, url.lastIndexOf('/'));\n        window.location.replace(base + \"/\" + target);\n    }\n})();\n</script>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"extern-crate-declarations\"><a class=\"header\" href=\"#extern-crate-declarations\">Extern crate declarations</a></h1>\n<blockquote>\n<p><strong><sup>Syntax:<sup></sup></sup></strong><br>\n<em>ExternCrate</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">extern</code> <code class=\"hljs\">crate</code> <em>CrateRef</em> <em>AsClause</em><sup>?</sup> <code class=\"hljs\">;</code></p>\n<p><em>CrateRef</em> :<br>\n&nbsp;&nbsp; <a href=\"items/../identifiers.html\">IDENTIFIER</a> | <code class=\"hljs\">self</code></p>\n<p><em>AsClause</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">as</code> ( <a href=\"items/../identifiers.html\">IDENTIFIER</a> | <code class=\"hljs\">_</code> )</p>\n</blockquote>\n<p>An <em><code class=\"hljs\">extern crate</code> declaration</em> specifies a dependency on an external crate.\nThe external crate is then bound into the declaring scope as the <a href=\"items/../identifiers.html\">identifier</a>\nprovided in the <code class=\"hljs\">extern crate</code> declaration. Additionally, if the <code class=\"hljs\">extern crate</code> appears in the crate root, then the crate name is also added to the\n<a href=\"items/../names/preludes.html#extern-prelude\">extern prelude</a>, making it automatically in scope in all modules. The <code class=\"hljs\">as</code>\nclause can be used to bind the imported crate to a different name.</p>\n<p>The external crate is resolved to a specific <code class=\"hljs\">soname</code> at compile time, and a\nruntime linkage requirement to that <code class=\"hljs\">soname</code> is passed to the linker for\nloading at runtime. The <code class=\"hljs\">soname</code> is resolved at compile time by scanning the\ncompiler's library path and matching the optional <code class=\"hljs\">crate_name</code> provided against\nthe <a href=\"items/../crates-and-source-files.html#the-crate_name-attribute\"><code class=\"hljs\">crate_name</code> attributes</a> that were declared on the external crate when it was\ncompiled. If no <code class=\"hljs\">crate_name</code> is provided, a default <code class=\"hljs\">name</code> attribute is assumed,\nequal to the <a href=\"items/../identifiers.html\">identifier</a> given in the <code class=\"hljs\">extern crate</code> declaration.</p>\n<p>The <code class=\"hljs\">self</code> crate may be imported which creates a binding to the current crate.\nIn this case the <code class=\"hljs\">as</code> clause must be used to specify the name to bind it to.</p>\n<p>Three examples of <code class=\"hljs\">extern crate</code> declarations:</p>\n<!-- ignore: requires external crates -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> pcre;\n\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> std; <span class=\"hljs-comment\">// equivalent to: extern crate std as std;</span>\n\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> std <span class=\"hljs-keyword\">as</span> ruststd; <span class=\"hljs-comment\">// linking to 'std' under another name</span></code></pre>\n<p>When naming Rust crates, hyphens are disallowed. However, Cargo packages may\nmake use of them. In such case, when <code class=\"hljs\">Cargo.toml</code> doesn't specify a crate name,\nCargo will transparently replace <code class=\"hljs\">-</code> with <code class=\"hljs\">_</code> (Refer to <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0940-hyphens-considered-harmful.md\">RFC 940</a> for more\ndetails).</p>\n<p>Here is an example:</p>\n<!-- ignore: requires external crates -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// Importing the Cargo package hello-world</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> hello_world; <span class=\"hljs-comment\">// hyphen replaced with an underscore</span></code></pre>\n<h2 id=\"extern-prelude\"><a class=\"header\" href=\"#extern-prelude\">Extern Prelude</a></h2>\n<p>This section has been moved to <a href=\"items/../names/preludes.html#extern-prelude\">Preludes —&nbsp;Extern Prelude</a>.</p>\n<!-- this is to appease the linkchecker, will remove once other books are updated -->\n<h2 id=\"underscore-imports\"><a class=\"header\" href=\"#underscore-imports\">Underscore Imports</a></h2>\n<p>An external crate dependency can be declared without binding its name in scope\nby using an underscore with the form <code class=\"hljs\">extern crate foo as _</code>. This may be\nuseful for crates that only need to be linked, but are never referenced, and\nwill avoid being reported as unused.</p>\n<p>The <a href=\"items/../macros-by-example.html#the-macro_use-attribute\"><code class=\"hljs\">macro_use</code> attribute</a> works as usual and imports the macro names\ninto the <a href=\"items/../names/preludes.html#macro_use-prelude\"><code class=\"hljs\">macro_use</code> prelude</a>.</p>\n<h2 id=\"the-no_link-attribute\"><a class=\"header\" href=\"#the-no_link-attribute\">The <code>no_link</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">no_link</code> attribute</em> may be specified on an <code class=\"hljs\">extern crate</code> item to\nprevent linking the crate into the output. This is commonly used to load a\ncrate to access only its macros.</p>\n<script>\n(function() {\n    var fragments = {\n        \"#extern-prelude\": \"../names/preludes.html#extern-prelude\",\n    };\n    var target = fragments[window.location.hash];\n    if (target) {\n        var url = window.location.toString();\n        var base = url.substring(0, url.lastIndexOf('/'));\n        window.location.replace(base + \"/\" + target);\n    }\n})();\n</script>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"use-declarations\"><a class=\"header\" href=\"#use-declarations\">Use declarations</a></h1>\n<blockquote>\n<p><strong><sup>Syntax:</sup></strong><br>\n<em>UseDeclaration</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">use</code> <em>UseTree</em> <code class=\"hljs\">;</code></p>\n<p><em>UseTree</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; (<a href=\"items/../paths.html#simple-paths\"><em>SimplePath</em></a><sup>?</sup> <code class=\"hljs\">::</code>)<sup>?</sup> <code class=\"hljs\">*</code><br>\n&nbsp;&nbsp; | (<a href=\"items/../paths.html#simple-paths\"><em>SimplePath</em></a><sup>?</sup> <code class=\"hljs\">::</code>)<sup>?</sup> <code class=\"hljs\">{</code> (<em>UseTree</em> ( <code class=\"hljs\">,</code>  <em>UseTree</em> )<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup>)<sup>?</sup> <code class=\"hljs\">}</code><br>\n&nbsp;&nbsp; | <a href=\"items/../paths.html#simple-paths\"><em>SimplePath</em></a>&nbsp;( <code class=\"hljs\">as</code> ( <a href=\"items/../identifiers.html\">IDENTIFIER</a> | <code class=\"hljs\">_</code> ) )<sup>?</sup></p>\n</blockquote>\n<p>A <em>use declaration</em> creates one or more local name bindings synonymous with\nsome other <a href=\"items/../paths.html\">path</a>. Usually a <code class=\"hljs\">use</code> declaration is used to shorten the path\nrequired to refer to a module item. These declarations may appear in <a href=\"items/modules.html\">modules</a>\nand <a href=\"items/../expressions/block-expr.html\">blocks</a>, usually at the top.</p>\n<p>Use declarations support a number of convenient shortcuts:</p>\n<ul>\n<li>Simultaneously binding a list of paths with a common prefix, using the\nglob-like brace syntax <code class=\"hljs\">use a::b::{c, d, e::f, g::h::i};</code></li>\n<li>Simultaneously binding a list of paths with a common prefix and their common\nparent module, using the <code class=\"hljs\">self</code> keyword, such as <code class=\"hljs\">use a::b::{self, c, d::e};</code></li>\n<li>Rebinding the target name as a new local name, using the syntax <code class=\"hljs\">use p::q::r as x;</code>. This can also be used with the last two features:\n<code class=\"hljs\">use a::b::{self as ab, c as abc}</code>.</li>\n<li>Binding all paths matching a given prefix, using the asterisk wildcard syntax\n<code class=\"hljs\">use a::b::*;</code>.</li>\n<li>Nesting groups of the previous features multiple times, such as\n<code class=\"hljs\">use a::b::{self as ab, c, d::{*, e::f}};</code></li>\n</ul>\n<p>An example of <code class=\"hljs\">use</code> declarations:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-keyword\">use</span> std::collections::hash_map::{<span class=\"hljs-keyword\">self</span>, HashMap};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T&gt;(_: T){}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>(map1: HashMap&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">usize</span>&gt;, map2: hash_map::HashMap&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">usize</span>&gt;){}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// use declarations can also exist inside of functions</span>\n    <span class=\"hljs-keyword\">use</span> std::option::<span class=\"hljs-built_in\">Option</span>::{<span class=\"hljs-literal\">Some</span>, <span class=\"hljs-literal\">None</span>};\n\n    <span class=\"hljs-comment\">// Equivalent to 'foo(vec![std::option::Option::Some(1.0f64),</span>\n    <span class=\"hljs-comment\">// std::option::Option::None]);'</span>\n    foo(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">1.0f64</span>), <span class=\"hljs-literal\">None</span>]);\n\n    <span class=\"hljs-comment\">// Both `hash_map` and `HashMap` are in scope.</span>\n    <span class=\"hljs-keyword\">let</span> map1 = HashMap::new();\n    <span class=\"hljs-keyword\">let</span> map2 = hash_map::HashMap::new();\n    bar(map1, map2);\n}</code></pre></pre>\n<h2 id=\"use-visibility\"><a class=\"header\" href=\"#use-visibility\"><code>use</code> Visibility</a></h2>\n<p>Like items, <code class=\"hljs\">use</code> declarations are private to the containing module, by\ndefault. Also like items, a <code class=\"hljs\">use</code> declaration can be public, if qualified by\nthe <code class=\"hljs\">pub</code> keyword. Such a <code class=\"hljs\">use</code> declaration serves to <em>re-export</em> a name. A\npublic <code class=\"hljs\">use</code> declaration can therefore <em>redirect</em> some public name to a\ndifferent target definition: even a definition with a private canonical path,\ninside a different module. If a sequence of such redirections form a cycle or\ncannot be resolved unambiguously, they represent a compile-time error.</p>\n<p>An example of re-exporting:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-keyword\">mod</span> quux {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">use</span> self::foo::{bar, baz};\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> foo {\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>() {}\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">baz</span></span>() {}\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    quux::bar();\n    quux::baz();\n}</code></pre></pre>\n<p>In this example, the module <code class=\"hljs\">quux</code> re-exports two public names defined in\n<code class=\"hljs\">foo</code>.</p>\n<h2 id=\"use-paths\"><a class=\"header\" href=\"#use-paths\"><code>use</code> Paths</a></h2>\n<blockquote>\n<p><strong>Note</strong>: This section is incomplete.</p>\n</blockquote>\n<p>Some examples of what will and will not work for <code class=\"hljs\">use</code> items:</p>\n<!-- Note: This example works as-is in either 2015 or 2018. -->\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused_imports)]</span>\n</span><span class=\"hljs-keyword\">use</span> std::path::{<span class=\"hljs-keyword\">self</span>, Path, PathBuf};  <span class=\"hljs-comment\">// good: std is a crate name</span>\n<span class=\"hljs-keyword\">use</span> crate::foo::baz::foobaz;    <span class=\"hljs-comment\">// good: foo is at the root of the crate</span>\n\n<span class=\"hljs-keyword\">mod</span> foo {\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> example {\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> iter {}\n    }\n\n    <span class=\"hljs-keyword\">use</span> crate::foo::example::iter; <span class=\"hljs-comment\">// good: foo is at crate root</span>\n<span class=\"hljs-comment\">//  use example::iter;      // bad in 2015 edition: relative paths are not allowed without `self`; good in 2018 edition</span>\n    <span class=\"hljs-keyword\">use</span> self::baz::foobaz;  <span class=\"hljs-comment\">// good: self refers to module 'foo'</span>\n    <span class=\"hljs-keyword\">use</span> crate::foo::bar::foobar;   <span class=\"hljs-comment\">// good: foo is at crate root</span>\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> bar {\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foobar</span></span>() { }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> baz {\n        <span class=\"hljs-keyword\">use</span> super::bar::foobar; <span class=\"hljs-comment\">// good: super refers to module 'foo'</span>\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foobaz</span></span>() { }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</code></pre></pre>\n<blockquote>\n<p><strong>Edition Differences</strong>: In the 2015 edition, <code class=\"hljs\">use</code> paths also allow\naccessing items in the crate root. Using the example above, the following\n<code class=\"hljs\">use</code> paths work in 2015 but not 2018:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2015 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> foo {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> example { <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> iter {} }\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> baz { <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foobaz</span></span>() {} }\n</span><span class=\"boring\">}\n</span><span class=\"hljs-keyword\">use</span> foo::example::iter;\n<span class=\"hljs-keyword\">use</span> ::foo::baz::foobaz;\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p>The 2015 edition does not allow use declarations to reference the <a href=\"items/../names/preludes.html#extern-prelude\">extern prelude</a>.\nThus <a href=\"items/extern-crates.html\"><code class=\"hljs\">extern crate</code></a> declarations are still required in 2015 to\nreference an external crate in a use declaration. Beginning with the 2018\nedition, use declarations can specify an external crate dependency the same\nway <code class=\"hljs\">extern crate</code> can.</p>\n<p>In the 2018 edition, if an in-scope item has the same name as an external\ncrate, then <code class=\"hljs\">use</code> of that crate name requires a leading <code class=\"hljs\">::</code> to\nunambiguously select the crate name. This is to retain compatibility with\npotential future changes. <!-- uniform_paths future-proofing --></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-comment\">// use std::fs; // Error, this is ambiguous.</span>\n<span class=\"hljs-keyword\">use</span> ::std::fs;  <span class=\"hljs-comment\">// Imports from the `std` crate, not the module below.</span>\n<span class=\"hljs-keyword\">use</span> self::std::fs <span class=\"hljs-keyword\">as</span> self_fs;  <span class=\"hljs-comment\">// Imports the module below.</span>\n\n<span class=\"hljs-keyword\">mod</span> std {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> fs {}\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n</blockquote>\n<h2 id=\"underscore-imports-1\"><a class=\"header\" href=\"#underscore-imports-1\">Underscore Imports</a></h2>\n<p>Items can be imported without binding to a name by using an underscore with\nthe form <code class=\"hljs\">use path as _</code>. This is particularly useful to import a trait so\nthat its methods may be used without importing the trait's symbol, for example\nif the trait's symbol may conflict with another symbol. Another example is to\nlink an external crate without importing its name.</p>\n<p>Asterisk glob imports will import items imported with <code class=\"hljs\">_</code> in their unnameable\nform.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-keyword\">mod</span> foo {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Zoo</span></span> {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">zoo</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {}\n    }\n\n    <span class=\"hljs-keyword\">impl</span>&lt;T&gt; Zoo <span class=\"hljs-keyword\">for</span> T {}\n}\n\n<span class=\"hljs-keyword\">use</span> self::foo::Zoo <span class=\"hljs-keyword\">as</span> _;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Zoo</span></span>;  <span class=\"hljs-comment\">// Underscore import avoids name conflict with this item.</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> z = Zoo;\n    z.zoo();\n}</code></pre></pre>\n<p>The unique, unnameable symbols are created after macro expansion so that\nmacros may safely emit multiple references to <code class=\"hljs\">_</code> imports. For example, the\nfollowing should not produce an error:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">macro_rules!</span> m {\n    ($item: item) =&gt; { $item $item }\n}\n\nm!(<span class=\"hljs-keyword\">use</span> std <span class=\"hljs-keyword\">as</span> _;);\n<span class=\"hljs-comment\">// This expands to:</span>\n<span class=\"hljs-comment\">// use std as _;</span>\n<span class=\"hljs-comment\">// use std as _;</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"functions\"><a class=\"header\" href=\"#functions\">Functions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>Function</em> :<br>\n&nbsp;&nbsp; <em>FunctionQualifiers</em> <code class=\"hljs\">fn</code> <a href=\"items/../identifiers.html\">IDENTIFIER</a>&nbsp;<a href=\"items/generics.html\"><em>GenericParams</em></a><sup>?</sup><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">(</code> <em>FunctionParameters</em><sup>?</sup> <code class=\"hljs\">)</code><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>FunctionReturnType</em><sup>?</sup> <a href=\"items/generics.html#where-clauses\"><em>WhereClause</em></a><sup>?</sup><br>\n&nbsp;&nbsp; &nbsp;&nbsp; ( <a href=\"items/../expressions/block-expr.html\"><em>BlockExpression</em></a> | <code class=\"hljs\">;</code> )</p>\n<p><em>FunctionQualifiers</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">const</code><sup>?</sup> <code class=\"hljs\">async</code><sup class=\"footnote-reference\"><a href=\"#async-edition\">1</a></sup><sup>?</sup> <code class=\"hljs\">unsafe</code><sup>?</sup> (<code class=\"hljs\">extern</code> <em>Abi</em><sup>?</sup>)<sup>?</sup></p>\n<p><em>Abi</em> :<br>\n&nbsp;&nbsp; <a href=\"items/../tokens.html#string-literals\">STRING_LITERAL</a> | <a href=\"items/../tokens.html#raw-string-literals\">RAW_STRING_LITERAL</a></p>\n<p><em>FunctionParameters</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>SelfParam</em> <code class=\"hljs\">,</code><sup>?</sup><br>\n&nbsp;&nbsp; | (<em>SelfParam</em> <code class=\"hljs\">,</code>)<sup>?</sup> <em>FunctionParam</em> (<code class=\"hljs\">,</code> <em>FunctionParam</em>)<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n<p><em>SelfParam</em> :<br>\n&nbsp;&nbsp; <a href=\"items/../attributes.html\"><em>OuterAttribute</em></a><sup>*</sup> ( <em>ShorthandSelf</em> | <em>TypedSelf</em> )</p>\n<p><em>ShorthandSelf</em> :<br>\n&nbsp;&nbsp;  (<code class=\"hljs\">&amp;</code> | <code class=\"hljs\">&amp;</code> <a href=\"items/../trait-bounds.html\"><em>Lifetime</em></a>)<sup>?</sup> <code class=\"hljs\">mut</code><sup>?</sup> <code class=\"hljs\">self</code></p>\n<p><em>TypedSelf</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">mut</code><sup>?</sup> <code class=\"hljs\">self</code> <code class=\"hljs\">:</code> <a href=\"items/../types.html#type-expressions\"><em>Type</em></a></p>\n<p><em>FunctionParam</em> :<br>\n&nbsp;&nbsp; <a href=\"items/../attributes.html\"><em>OuterAttribute</em></a><sup>*</sup> (\n<em>FunctionParamPattern</em> | <code class=\"hljs\">...</code> | <a href=\"items/../types.html#type-expressions\"><em>Type</em></a> <sup class=\"footnote-reference\"><a href=\"#fn-param-2015\">2</a></sup>\n)</p>\n<p><em>FunctionParamPattern</em> :<br>\n&nbsp;&nbsp; <a href=\"items/../patterns.html\"><em>PatternNoTopAlt</em></a> <code class=\"hljs\">:</code> ( <a href=\"items/../types.html#type-expressions\"><em>Type</em></a> | <code class=\"hljs\">...</code> )</p>\n<p><em>FunctionReturnType</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">-&gt;</code> <a href=\"items/../types.html#type-expressions\"><em>Type</em></a></p>\n<div class=\"footnote-definition\" id=\"async-edition\"><sup class=\"footnote-definition-label\">1</sup>\n<p>The <code class=\"hljs\">async</code> qualifier is not allowed in the 2015 edition.</p>\n</div>\n<div class=\"footnote-definition\" id=\"fn-param-2015\"><sup class=\"footnote-definition-label\">2</sup>\n<p>Function parameters with only a type are only allowed\nin an associated function of a <a href=\"items/traits.html\">trait item</a> in the 2015 edition.</p>\n</div>\n</blockquote>\n<p>A <em>function</em> consists of a <a href=\"items/../expressions/block-expr.html\">block</a>, along with a name, a set of parameters, and an output type.\nOther than a name, all these are optional.\nFunctions are declared with the keyword <code class=\"hljs\">fn</code>.\nFunctions may declare a set of <em>input</em> <a href=\"items/../variables.html\"><em>variables</em></a> as parameters, through which the caller passes arguments into the function, and the <em>output</em> <a href=\"items/../types.html#type-expressions\"><em>type</em></a> of the value the function will return to its caller on completion.\nIf the output type is not explicitly stated, it is the <a href=\"items/../types/tuple.html\">unit type</a>.</p>\n<p>When referred to, a <em>function</em> yields a first-class <em>value</em> of the corresponding zero-sized <a href=\"items/../types/function-item.html\"><em>function item type</em></a>, which when called evaluates to a direct call to the function.</p>\n<p>For example, this is a simple function:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">answer_to_life_the_universe_and_everything</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">42</span>;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"function-parameters\"><a class=\"header\" href=\"#function-parameters\">Function parameters</a></h2>\n<p>Function parameters are irrefutable <a href=\"items/../patterns.html\">patterns</a>, so any pattern that is valid in\nan else-less <code class=\"hljs\">let</code> binding is also valid as a parameter:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first</span></span>((value, _): (<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>)) -&gt; <span class=\"hljs-built_in\">i32</span> { value }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If the first parameter is a <em>SelfParam</em>, this indicates that the function is a\n<a href=\"items/associated-items.html#methods\">method</a>. Functions with a self parameter may only appear as an <a href=\"items/associated-items.html#associated-functions-and-methods\">associated\nfunction</a> in a <a href=\"items/traits.html\">trait</a> or <a href=\"items/implementations.html\">implementation</a>.</p>\n<p>A parameter with the <code class=\"hljs\">...</code> token indicates a <a href=\"items/external-blocks.html#variadic-functions\">variadic function</a>, and may only\nbe used as the last parameter of an <a href=\"items/external-blocks.html\">external block</a> function. The variadic\nparameter may have an optional identifier, such as <code class=\"hljs\">args: ...</code>.</p>\n<h2 id=\"function-body\"><a class=\"header\" href=\"#function-body\">Function body</a></h2>\n<p>The block of a function is conceptually wrapped in a block that binds the\nargument patterns and then <code class=\"hljs\">return</code>s the value of the function's block. This\nmeans that the tail expression of the block, if evaluated, ends up being\nreturned to the caller. As usual, an explicit return expression within\nthe body of the function will short-cut that implicit return, if reached.</p>\n<p>For example, the function above behaves as if it was written as:</p>\n<!-- ignore: example expansion -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// argument_0 is the actual first argument passed from the caller</span>\n<span class=\"hljs-keyword\">let</span> (value, _) = argument_0;\n<span class=\"hljs-keyword\">return</span> {\n    value\n};</code></pre>\n<p>Functions without a body block are terminated with a semicolon. This form\nmay only appear in a <a href=\"items/traits.html\">trait</a> or <a href=\"items/external-blocks.html\">external block</a>.</p>\n<h2 id=\"generic-functions\"><a class=\"header\" href=\"#generic-functions\">Generic functions</a></h2>\n<p>A <em>generic function</em> allows one or more <em>parameterized types</em> to appear in its\nsignature. Each type parameter must be explicitly declared in an\nangle-bracket-enclosed and comma-separated list, following the function name.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// foo is generic over A and B</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;A, B&gt;(x: A, y: B) {\n<span class=\"boring\">}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>Inside the function signature and body, the name of the type parameter can be\nused as a type name. <a href=\"items/traits.html\">Trait</a> bounds can be specified for type\nparameters to allow methods with that trait to be called on values of that\ntype. This is specified using the <code class=\"hljs\">where</code> syntax:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fmt::<span class=\"hljs-built_in\">Debug</span>;\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T&gt;(x: T) <span class=\"hljs-keyword\">where</span> T: <span class=\"hljs-built_in\">Debug</span> {\n<span class=\"boring\">}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>When a generic function is referenced, its type is instantiated based on the\ncontext of the reference. For example, calling the <code class=\"hljs\">foo</code> function here:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::fmt::<span class=\"hljs-built_in\">Debug</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T&gt;(x: &amp;[T]) <span class=\"hljs-keyword\">where</span> T: <span class=\"hljs-built_in\">Debug</span> {\n    <span class=\"hljs-comment\">// details elided</span>\n}\n\nfoo(&amp;[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>will instantiate type parameter <code class=\"hljs\">T</code> with <code class=\"hljs\">i32</code>.</p>\n<p>The type parameters can also be explicitly supplied in a trailing <a href=\"items/../paths.html\">path</a>\ncomponent after the function name. This might be necessary if there is not\nsufficient context to determine the type parameters. For example,\n<code class=\"hljs\">mem::size_of::&lt;u32&gt;() == 4</code>.</p>\n<h2 id=\"extern-function-qualifier\"><a class=\"header\" href=\"#extern-function-qualifier\">Extern function qualifier</a></h2>\n<p>The <code class=\"hljs\">extern</code> function qualifier allows providing function <em>definitions</em> that can\nbe called with a particular ABI:</p>\n<!-- ignore: fake ABI -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"ABI\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() { <span class=\"hljs-comment\">/* ... */</span> }</code></pre>\n<p>These are often used in combination with <a href=\"items/external-blocks.html\">external block</a> items which provide\nfunction <em>declarations</em> that can be used to call functions without providing\ntheir <em>definition</em>:</p>\n<!-- ignore: fake ABI -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"ABI\"</span> {\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(); <span class=\"hljs-comment\">/* no body */</span>\n}\n<span class=\"hljs-keyword\">unsafe</span> { foo() }</code></pre>\n<p>When <code class=\"hljs\">\"extern\" Abi?*</code> is omitted from <code class=\"hljs\">FunctionQualifiers</code> in function items,\nthe ABI <code class=\"hljs\">\"Rust\"</code> is assigned. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>is equivalent to:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"Rust\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Functions can be called by foreign code, and using an ABI that\ndiffers from Rust allows, for example, to provide functions that can be\ncalled from other programming languages like C:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Declares a function with the \"C\" ABI</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new_i32</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">0</span> }\n\n<span class=\"hljs-comment\">// Declares a function with the \"stdcall\" ABI</span>\n<span class=\"boring\"><span class=\"hljs-meta\">#[cfg(target_arch = <span class=\"hljs-meta-string\">\"x86_64\"</span>)]</span>\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"stdcall\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new_i32_stdcall</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">0</span> }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Just as with <a href=\"items/external-blocks.html\">external block</a>, when the <code class=\"hljs\">extern</code> keyword is used and the <code class=\"hljs\">\"ABI\"</code>\nis omitted, the ABI used defaults to <code class=\"hljs\">\"C\"</code>. That is, this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new_i32</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">0</span> }\n<span class=\"hljs-keyword\">let</span> fptr: <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> = new_i32;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>is equivalent to:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new_i32</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">0</span> }\n<span class=\"hljs-keyword\">let</span> fptr: <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> = new_i32;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Functions with an ABI that differs from <code class=\"hljs\">\"Rust\"</code> do not support unwinding in the\nexact same way that Rust does. Therefore, unwinding past the end of functions\nwith such ABIs causes the process to abort.</p>\n<blockquote>\n<p><strong>Note</strong>: The LLVM backend of the <code class=\"hljs\">rustc</code> implementation\naborts the process by executing an illegal instruction.</p>\n</blockquote>\n<h2 id=\"const-functions\"><a class=\"header\" href=\"#const-functions\">Const functions</a></h2>\n<p>Functions qualified with the <code class=\"hljs\">const</code> keyword are <a href=\"items/../const_eval.html#const-functions\">const functions</a>, as are\n<a href=\"items/structs.html\">tuple struct</a> and <a href=\"items/enumerations.html\">tuple variant</a> constructors. <em>Const functions</em>  can be\ncalled from within <a href=\"items/../const_eval.html#const-context\">const contexts</a>.</p>\n<p>Const functions may use the <a href=\"items/functions.html#extern-function-qualifier\"><code class=\"hljs\">extern</code></a> function qualifier, but only with the <code class=\"hljs\">\"Rust\"</code> and <code class=\"hljs\">\"C\"</code> ABIs.</p>\n<p>Const functions are not allowed to be <a href=\"items/functions.html#async-functions\">async</a>.</p>\n<h2 id=\"async-functions\"><a class=\"header\" href=\"#async-functions\">Async functions</a></h2>\n<p>Functions may be qualified as async, and this can also be combined with the\n<code class=\"hljs\">unsafe</code> qualifier:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">regular_example</span></span>() { }\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">unsafe_example</span></span>() { }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Async functions do no work when called: instead, they\ncapture their arguments into a future. When polled, that future will\nexecute the function's body.</p>\n<p>An async function is roughly equivalent to a function\nthat returns <a href=\"items/../types/impl-trait.html\"><code class=\"hljs\">impl Future</code></a> and with an <a href=\"items/../expressions/block-expr.html#async-blocks\"><code class=\"hljs\">async move</code> block</a> as\nits body:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Source</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example</span></span>(x: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">usize</span> {\n    x.len()\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>is roughly equivalent to:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::future::Future;\n</span><span class=\"hljs-comment\">// Desugared</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-keyword\">impl</span> Future&lt;Output = <span class=\"hljs-built_in\">usize</span>&gt; + <span class=\"hljs-symbol\">'a</span> {\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">move</span> { x.len() }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The actual desugaring is more complex:</p>\n<ul>\n<li>The return type in the desugaring is assumed to capture all lifetime\nparameters from the <code class=\"hljs\">async fn</code> declaration. This can be seen in the\ndesugared example above, which explicitly outlives, and hence\ncaptures, <code class=\"hljs\">'a</code>.</li>\n<li>The <a href=\"items/../expressions/block-expr.html#async-blocks\"><code class=\"hljs\">async move</code> block</a> in the body captures all function\nparameters, including those that are unused or bound to a <code class=\"hljs\">_</code>\npattern. This ensures that function parameters are dropped in the\nsame order as they would be if the function were not async, except\nthat the drop occurs when the returned future has been fully\nawaited.</li>\n</ul>\n<p>For more information on the effect of async, see <a href=\"items/../expressions/block-expr.html#async-blocks\"><code class=\"hljs\">async</code> blocks</a>.</p>\n<blockquote>\n<p><strong>Edition differences</strong>: Async functions are only available beginning with\nRust 2018.</p>\n</blockquote>\n<h3 id=\"combining-async-and-unsafe\"><a class=\"header\" href=\"#combining-async-and-unsafe\">Combining <code>async</code> and <code>unsafe</code></a></h3>\n<p>It is legal to declare a function that is both async and unsafe. The\nresulting function is unsafe to call and (like any async function)\nreturns a future. This future is just an ordinary future and thus an\n<code class=\"hljs\">unsafe</code> context is not required to \"await\" it:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Returns a future that, when awaited, dereferences `x`.</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Soundness condition: `x` must be safe to dereference until</span>\n<span class=\"hljs-comment\">// the resulting future is complete.</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">unsafe_example</span></span>(x: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n  *x\n}\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">safe_example</span></span>() {\n    <span class=\"hljs-comment\">// An `unsafe` block is required to invoke the function initially:</span>\n    <span class=\"hljs-keyword\">let</span> p = <span class=\"hljs-number\">22</span>;\n    <span class=\"hljs-keyword\">let</span> future = <span class=\"hljs-keyword\">unsafe</span> { unsafe_example(&amp;p) };\n\n    <span class=\"hljs-comment\">// But no `unsafe` block required here. This will</span>\n    <span class=\"hljs-comment\">// read the value of `p`:</span>\n    <span class=\"hljs-keyword\">let</span> q = future.<span class=\"hljs-keyword\">await</span>;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Note that this behavior is a consequence of the desugaring to a\nfunction that returns an <code class=\"hljs\">impl Future</code> -- in this case, the function\nwe desugar to is an <code class=\"hljs\">unsafe</code> function, but the return value remains\nthe same.</p>\n<p>Unsafe is used on an async function in precisely the same way that it\nis used on other functions: it indicates that the function imposes\nsome additional obligations on its caller to ensure soundness. As in any\nother unsafe function, these conditions may extend beyond the initial\ncall itself -- in the snippet above, for example, the <code class=\"hljs\">unsafe_example</code>\nfunction took a pointer <code class=\"hljs\">x</code> as argument, and then (when awaited)\ndereferenced that pointer. This implies that <code class=\"hljs\">x</code> would have to be\nvalid until the future is finished executing, and it is the caller's\nresponsibility to ensure that.</p>\n<h2 id=\"attributes-on-functions\"><a class=\"header\" href=\"#attributes-on-functions\">Attributes on functions</a></h2>\n<p><a href=\"items/../attributes.html\">Outer attributes</a> are allowed on functions. <a href=\"items/../attributes.html\">Inner\nattributes</a> are allowed directly after the <code class=\"hljs\">{</code> inside its <a href=\"items/../expressions/block-expr.html\">block</a>.</p>\n<p>This example shows an inner attribute on a function. The function is documented\nwith just the word \"Example\".</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">documented</span></span>() {\n    <span class=\"hljs-meta\">#![doc = <span class=\"hljs-meta-string\">\"Example\"</span>]</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p>Note: Except for lints, it is idiomatic to only use outer attributes on\nfunction items.</p>\n</blockquote>\n<p>The attributes that have meaning on a function are <a href=\"items/../conditional-compilation.html#the-cfg-attribute\"><code class=\"hljs\">cfg</code></a>, <a href=\"items/../conditional-compilation.html#the-cfg_attr-attribute\"><code class=\"hljs\">cfg_attr</code></a>, <a href=\"items/../attributes/diagnostics.html#the-deprecated-attribute\"><code class=\"hljs\">deprecated</code></a>,\n<a href=\"items/../../rustdoc/the-doc-attribute.html\"><code class=\"hljs\">doc</code></a>, <a href=\"items/../abi.html#the-export_name-attribute\"><code class=\"hljs\">export_name</code></a>, <a href=\"items/../abi.html#the-link_section-attribute\"><code class=\"hljs\">link_section</code></a>, <a href=\"items/../abi.html#the-no_mangle-attribute\"><code class=\"hljs\">no_mangle</code></a>, <a href=\"items/../attributes/diagnostics.html#lint-check-attributes\">the lint check\nattributes</a>, <a href=\"items/../attributes/diagnostics.html#the-must_use-attribute\"><code class=\"hljs\">must_use</code></a>, <a href=\"items/../procedural-macros.html\">the procedural macro attributes</a>, <a href=\"items/../attributes/testing.html\">the testing\nattributes</a>, and <a href=\"items/../attributes/codegen.html#optimization-hints\">the optimization hint attributes</a>. Functions also accept\nattributes macros.</p>\n<h2 id=\"attributes-on-function-parameters\"><a class=\"header\" href=\"#attributes-on-function-parameters\">Attributes on function parameters</a></h2>\n<p><a href=\"items/../attributes.html\">Outer attributes</a> are allowed on function parameters and the\npermitted <a href=\"items/../attributes.html#built-in-attributes-index\">built-in attributes</a> are restricted to <code class=\"hljs\">cfg</code>, <code class=\"hljs\">cfg_attr</code>, <code class=\"hljs\">allow</code>,\n<code class=\"hljs\">warn</code>, <code class=\"hljs\">deny</code>, and <code class=\"hljs\">forbid</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">len</span></span>(\n    <span class=\"hljs-meta\">#[cfg(windows)]</span> slice: &amp;[<span class=\"hljs-built_in\">u16</span>],\n    <span class=\"hljs-meta\">#[cfg(not(windows))]</span> slice: &amp;[<span class=\"hljs-built_in\">u8</span>],\n) -&gt; <span class=\"hljs-built_in\">usize</span> {\n    slice.len()\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Inert helper attributes used by procedural macro attributes applied to items are also\nallowed but be careful to not include these inert attributes in your final <code class=\"hljs\">TokenStream</code>.</p>\n<p>For example, the following code defines an inert <code class=\"hljs\">some_inert_attribute</code> attribute that\nis not formally defined anywhere and the <code class=\"hljs\">some_proc_macro_attribute</code> procedural macro is\nresponsible for detecting its presence and removing it from the output token stream.</p>\n<!-- ignore: requires proc macro -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[some_proc_macro_attribute]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo_oof</span></span>(<span class=\"hljs-meta\">#[some_inert_attribute]</span> arg: <span class=\"hljs-built_in\">u8</span>) {\n}</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"type-aliases\"><a class=\"header\" href=\"#type-aliases\">Type aliases</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>TypeAlias</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">type</code> <a href=\"items/../identifiers.html\">IDENTIFIER</a>&nbsp;<a href=\"items/generics.html\"><em>GenericParams</em></a><sup>?</sup>\n( <code class=\"hljs\">:</code> <a href=\"items/../trait-bounds.html\"><em>TypeParamBounds</em></a> )<sup>?</sup>\n<a href=\"items/generics.html#where-clauses\"><em>WhereClause</em></a><sup>?</sup> ( <code class=\"hljs\">=</code> <a href=\"items/../types.html#type-expressions\"><em>Type</em></a> <a href=\"items/generics.html#where-clauses\"><em>WhereClause</em></a><sup>?</sup>)<sup>?</sup> <code class=\"hljs\">;</code></p>\n</blockquote>\n<p>A <em>type alias</em> defines a new name for an existing <a href=\"items/../types.html\">type</a>. Type aliases are\ndeclared with the keyword <code class=\"hljs\">type</code>. Every value has a single, specific type, but\nmay implement several different traits, or be compatible with several different\ntype constraints.</p>\n<p>For example, the following defines the type <code class=\"hljs\">Point</code> as a synonym for the type\n<code class=\"hljs\">(u8, u8)</code>, the type of pairs of unsigned 8 bit integers:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Point</span></span> = (<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u8</span>);\n<span class=\"hljs-keyword\">let</span> p: Point = (<span class=\"hljs-number\">41</span>, <span class=\"hljs-number\">68</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A type alias to a tuple-struct or unit-struct cannot be used to qualify that type's constructor:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyStruct</span></span>(<span class=\"hljs-built_in\">u32</span>);\n\n<span class=\"hljs-keyword\">use</span> MyStruct <span class=\"hljs-keyword\">as</span> UseAlias;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">TypeAlias</span></span> = MyStruct;\n\n<span class=\"hljs-keyword\">let</span> _ = UseAlias(<span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// OK</span>\n<span class=\"hljs-keyword\">let</span> _ = TypeAlias(<span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// Doesn't work</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A type alias, when not used as an associated type, must include a <a href=\"items/../types.html#type-expressions\"><em>Type</em></a> and\nmay not include <a href=\"items/../trait-bounds.html\"><em>TypeParamBounds</em></a>.</p>\n<p>A type alias, when used as an <a href=\"items/associated-items.html#associated-types\">associated type</a> in a <a href=\"items/traits.html\">trait</a>, must not include a\n<a href=\"items/../types.html#type-expressions\"><em>Type</em></a> specification but may include <a href=\"items/../trait-bounds.html\"><em>TypeParamBounds</em></a>.</p>\n<p>A type alias, when used as an <a href=\"items/associated-items.html#associated-types\">associated type</a> in a <a href=\"items/implementations.html#trait-implementations\">trait impl</a>, must include\na <a href=\"items/../types.html#type-expressions\"><em>Type</em></a> specification and may not include <a href=\"items/../trait-bounds.html\"><em>TypeParamBounds</em></a>.</p>\n<p>Where clauses before the equals sign on a type alias in a <a href=\"items/implementations.html#trait-implementations\">trait impl</a> (like\n<code class=\"hljs\">type TypeAlias&lt;T&gt; where T: Foo = Bar&lt;T&gt;</code>) are deprecated. Where clauses after\nthe equals sign (like <code class=\"hljs\">type TypeAlias&lt;T&gt; = Bar&lt;T&gt; where T: Foo</code>) are preferred.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"structs\"><a class=\"header\" href=\"#structs\">Structs</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>Struct</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>StructStruct</em><br>\n&nbsp;&nbsp; | <em>TupleStruct</em></p>\n<p><em>StructStruct</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">struct</code>\n<a href=\"items/../identifiers.html\">IDENTIFIER</a>&nbsp;\n<a href=\"items/generics.html\"><em>GenericParams</em></a><sup>?</sup>\n<a href=\"items/generics.html#where-clauses\"><em>WhereClause</em></a><sup>?</sup>\n( <code class=\"hljs\">{</code> <em>StructFields</em><sup>?</sup> <code class=\"hljs\">}</code> | <code class=\"hljs\">;</code> )</p>\n<p><em>TupleStruct</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">struct</code>\n<a href=\"items/../identifiers.html\">IDENTIFIER</a>&nbsp;\n<a href=\"items/generics.html\"><em>GenericParams</em></a><sup>?</sup>\n<code class=\"hljs\">(</code> <em>TupleFields</em><sup>?</sup> <code class=\"hljs\">)</code>\n<a href=\"items/generics.html#where-clauses\"><em>WhereClause</em></a><sup>?</sup>\n<code class=\"hljs\">;</code></p>\n<p><em>StructFields</em> :<br>\n&nbsp;&nbsp; <em>StructField</em> (<code class=\"hljs\">,</code> <em>StructField</em>)<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n<p><em>StructField</em> :<br>\n&nbsp;&nbsp; <a href=\"items/../attributes.html\"><em>OuterAttribute</em></a><sup>*</sup><br>\n&nbsp;&nbsp; <a href=\"items/../visibility-and-privacy.html\"><em>Visibility</em></a><sup>?</sup><br>\n&nbsp;&nbsp; <a href=\"items/../identifiers.html\">IDENTIFIER</a> <code class=\"hljs\">:</code> <a href=\"items/../types.html#type-expressions\"><em>Type</em></a></p>\n<p><em>TupleFields</em> :<br>\n&nbsp;&nbsp; <em>TupleField</em> (<code class=\"hljs\">,</code> <em>TupleField</em>)<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n<p><em>TupleField</em> :<br>\n&nbsp;&nbsp; <a href=\"items/../attributes.html\"><em>OuterAttribute</em></a><sup>*</sup><br>\n&nbsp;&nbsp; <a href=\"items/../visibility-and-privacy.html\"><em>Visibility</em></a><sup>?</sup><br>\n&nbsp;&nbsp; <a href=\"items/../types.html#type-expressions\"><em>Type</em></a></p>\n</blockquote>\n<p>A <em>struct</em> is a nominal <a href=\"items/../types/struct.html\">struct type</a> defined with the keyword <code class=\"hljs\">struct</code>.</p>\n<p>An example of a <code class=\"hljs\">struct</code> item and its use:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span> {x: <span class=\"hljs-built_in\">i32</span>, y: <span class=\"hljs-built_in\">i32</span>}\n<span class=\"hljs-keyword\">let</span> p = Point {x: <span class=\"hljs-number\">10</span>, y: <span class=\"hljs-number\">11</span>};\n<span class=\"hljs-keyword\">let</span> px: <span class=\"hljs-built_in\">i32</span> = p.x;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A <em>tuple struct</em> is a nominal <a href=\"items/../types/tuple.html\">tuple type</a>, also defined with the keyword\n<code class=\"hljs\">struct</code>. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span>(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>);\n<span class=\"hljs-keyword\">let</span> p = Point(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>);\n<span class=\"hljs-keyword\">let</span> px: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-keyword\">match</span> p { Point(x, _) =&gt; x };\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A <em>unit-like struct</em> is a struct without any fields, defined by leaving off the\nlist of fields entirely. Such a struct implicitly defines a constant of its\ntype with the same name. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Cookie</span></span>;\n<span class=\"hljs-keyword\">let</span> c = [Cookie, Cookie {}, Cookie, Cookie {}];\n<span class=\"boring\">}</span></code></pre></pre>\n<p>is equivalent to</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Cookie</span></span> {}\n<span class=\"hljs-keyword\">const</span> Cookie: Cookie = Cookie {};\n<span class=\"hljs-keyword\">let</span> c = [Cookie, Cookie {}, Cookie, Cookie {}];\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The precise memory layout of a struct is not specified. One can specify a\nparticular layout using the <a href=\"items/../type-layout.html#representations\"><code class=\"hljs\">repr</code> attribute</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"enumerations\"><a class=\"header\" href=\"#enumerations\">Enumerations</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>Enumeration</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">enum</code>\n<a href=\"items/../identifiers.html\">IDENTIFIER</a>&nbsp;\n<a href=\"items/generics.html\"><em>GenericParams</em></a><sup>?</sup>\n<a href=\"items/generics.html#where-clauses\"><em>WhereClause</em></a><sup>?</sup>\n<code class=\"hljs\">{</code> <em>EnumItems</em><sup>?</sup> <code class=\"hljs\">}</code></p>\n<p><em>EnumItems</em> :<br>\n&nbsp;&nbsp; <em>EnumItem</em> ( <code class=\"hljs\">,</code> <em>EnumItem</em> )<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n<p><em>EnumItem</em> :<br>\n&nbsp;&nbsp; <em>OuterAttribute</em><sup>*</sup> <a href=\"items/../visibility-and-privacy.html\"><em>Visibility</em></a><sup>?</sup><br>\n&nbsp;&nbsp; <a href=\"items/../identifiers.html\">IDENTIFIER</a>&nbsp;( <em>EnumItemTuple</em> | <em>EnumItemStruct</em> )<sup>?</sup>\n<em>EnumItemDiscriminant</em><sup>?</sup></p>\n<p><em>EnumItemTuple</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">(</code> <a href=\"items/structs.html\"><em>TupleFields</em></a><sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>EnumItemStruct</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">{</code> <a href=\"items/structs.html\"><em>StructFields</em></a><sup>?</sup> <code class=\"hljs\">}</code></p>\n<p><em>EnumItemDiscriminant</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">=</code> <a href=\"items/../expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p>An <em>enumeration</em>, also referred to as an <em>enum</em>, is a simultaneous definition of a\nnominal <a href=\"items/../types/enum.html\">enumerated type</a> as well as a set of <em>constructors</em>, that can be used\nto create or pattern-match values of the corresponding enumerated type.</p>\n<p>Enumerations are declared with the keyword <code class=\"hljs\">enum</code>.</p>\n<p>An example of an <code class=\"hljs\">enum</code> item and its use:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Animal</span></span> {\n    Dog,\n    Cat,\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> a: Animal = Animal::Dog;\na = Animal::Cat;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Enum constructors can have either named or unnamed fields:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Animal</span></span> {\n    Dog(<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">f64</span>),\n    Cat { name: <span class=\"hljs-built_in\">String</span>, weight: <span class=\"hljs-built_in\">f64</span> },\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> a: Animal = Animal::Dog(<span class=\"hljs-string\">\"Cocoa\"</span>.to_string(), <span class=\"hljs-number\">37.2</span>);\na = Animal::Cat { name: <span class=\"hljs-string\">\"Spotty\"</span>.to_string(), weight: <span class=\"hljs-number\">2.7</span> };\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In this example, <code class=\"hljs\">Cat</code> is a <em>struct-like enum variant</em>, whereas <code class=\"hljs\">Dog</code> is simply\ncalled an enum variant.</p>\n<p>An enum where no constructors contain fields are called a\n<em><span id=\"field-less-enum\">field-less enum</span></em>. For example, this is a fieldless enum:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Fieldless</span></span> {\n    Tuple(),\n    Struct{},\n    Unit,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If a field-less enum only contains unit variants, the enum is called an\n<em><span id=\"unit-only-enum\">unit-only enum</span></em>. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Enum</span></span> {\n    Foo = <span class=\"hljs-number\">3</span>,\n    Bar = <span class=\"hljs-number\">2</span>,\n    Baz = <span class=\"hljs-number\">1</span>,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span id=\"custom-discriminant-values-for-fieldless-enumerations\"></span></p>\n<h2 id=\"discriminants\"><a class=\"header\" href=\"#discriminants\">Discriminants</a></h2>\n<p>Each enum instance has a <em>discriminant</em>: an integer logically associated to it\nthat is used to determine which variant it holds.</p>\n<p>Under the <a href=\"items/../type-layout.html#the-default-representation\">default representation</a>, the discriminant is interpreted as\nan <code class=\"hljs\">isize</code> value. However, the compiler is allowed to use a smaller type (or\nanother means of distinguishing variants) in its actual memory layout.</p>\n<h3 id=\"assigning-discriminant-values\"><a class=\"header\" href=\"#assigning-discriminant-values\">Assigning discriminant values</a></h3>\n<h4 id=\"explicit-discriminants\"><a class=\"header\" href=\"#explicit-discriminants\">Explicit discriminants</a></h4>\n<p>In two circumstances, the discriminant of a variant may be explicitly set by\nfollowing the variant name with <code class=\"hljs\">=</code> and a <a href=\"items/../const_eval.html#constant-expressions\">constant expression</a>:</p>\n<ol>\n<li>\n<p>if the enumeration is \"<a href=\"items/enumerations.html#unit-only-enum\">unit-only</a>\".</p>\n</li>\n<li>\n<p>if a <a href=\"items/../type-layout.html#primitive-representations\">primitive representation</a> is used. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[repr(u8)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Enum</span></span> {\n    Unit = <span class=\"hljs-number\">3</span>,\n    Tuple(<span class=\"hljs-built_in\">u16</span>),\n    Struct {\n        a: <span class=\"hljs-built_in\">u8</span>,\n        b: <span class=\"hljs-built_in\">u16</span>,\n    } = <span class=\"hljs-number\">1</span>,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n</li>\n</ol>\n<h4 id=\"implicit-discriminants\"><a class=\"header\" href=\"#implicit-discriminants\">Implicit discriminants</a></h4>\n<p>If a discriminant for a variant is not specified, then it is set to one higher\nthan the discriminant of the previous variant in the declaration. If the\ndiscriminant of the first variant in the declaration is unspecified, then\nit is set to zero.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Foo</span></span> {\n    Bar,            <span class=\"hljs-comment\">// 0</span>\n    Baz = <span class=\"hljs-number\">123</span>,      <span class=\"hljs-comment\">// 123</span>\n    Quux,           <span class=\"hljs-comment\">// 124</span>\n}\n\n<span class=\"hljs-keyword\">let</span> baz_discriminant = Foo::Baz <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">u32</span>;\n<span class=\"hljs-built_in\">assert_eq!</span>(baz_discriminant, <span class=\"hljs-number\">123</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h4 id=\"restrictions\"><a class=\"header\" href=\"#restrictions\">Restrictions</a></h4>\n<p>It is an error when two variants share the same discriminant.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">SharedDiscriminantError</span></span> {\n    SharedA = <span class=\"hljs-number\">1</span>,\n    SharedB = <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">SharedDiscriminantError2</span></span> {\n    Zero,       <span class=\"hljs-comment\">// 0</span>\n    One,        <span class=\"hljs-comment\">// 1</span>\n    OneToo = <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\">// 1 (collision with previous!)</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>It is also an error to have an unspecified discriminant where the previous\ndiscriminant is the maximum value for the size of the discriminant.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[repr(u8)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">OverflowingDiscriminantError</span></span> {\n    Max = <span class=\"hljs-number\">255</span>,\n    MaxPlusOne <span class=\"hljs-comment\">// Would be 256, but that overflows the enum.</span>\n}\n\n<span class=\"hljs-meta\">#[repr(u8)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">OverflowingDiscriminantError2</span></span> {\n    MaxMinusOne = <span class=\"hljs-number\">254</span>, <span class=\"hljs-comment\">// 254</span>\n    Max,               <span class=\"hljs-comment\">// 255</span>\n    MaxPlusOne         <span class=\"hljs-comment\">// Would be 256, but that overflows the enum.</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"accessing-discriminant\"><a class=\"header\" href=\"#accessing-discriminant\">Accessing discriminant</a></h3>\n<h4 id=\"via-memdiscriminant\"><a class=\"header\" href=\"#via-memdiscriminant\">Via <code>mem::discriminant</code></a></h4>\n<p><a href=\"items/../../std/mem/fn.discriminant.html\"><code class=\"hljs\">mem::discriminant</code></a> returns an opaque reference to the discriminant of\nan enum value which can be compared. This cannot be used to get the value\nof the discriminant.</p>\n<h4 id=\"casting\"><a class=\"header\" href=\"#casting\">Casting</a></h4>\n<p>If an enumeration is <a href=\"items/enumerations.html#unit-only-enum\">unit-only</a> (with no tuple and struct variants), then its\ndiscriminant can be directly accessed with a <a href=\"items/../expressions/operator-expr.html#semantics\">numeric cast</a>; e.g.:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Enum</span></span> {\n    Foo,\n    Bar,\n    Baz,\n}\n\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, Enum::Foo <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">isize</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, Enum::Bar <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">isize</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">2</span>, Enum::Baz <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">isize</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><a href=\"items/enumerations.html#field-less-enum\">Field-less enums</a> can be casted if they do not have explicit discriminants, or where only unit variants are explicit.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Fieldless</span></span> {\n    Tuple(),\n    Struct{},\n    Unit,\n}\n\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, Fieldless::Tuple() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">isize</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, Fieldless::Struct{} <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">isize</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">2</span>, Fieldless::Unit <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">isize</span>);\n\n<span class=\"hljs-meta\">#[repr(u8)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">FieldlessWithDiscrimants</span></span> {\n    First = <span class=\"hljs-number\">10</span>,\n    Tuple(),\n    Second = <span class=\"hljs-number\">20</span>,\n    Struct{},\n    Unit,\n}\n\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">10</span>, FieldlessWithDiscrimants::First <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">u8</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">11</span>, FieldlessWithDiscrimants::Tuple() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">u8</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">20</span>, FieldlessWithDiscrimants::Second <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">u8</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">21</span>, FieldlessWithDiscrimants::Struct{} <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">u8</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">22</span>, FieldlessWithDiscrimants::Unit <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">u8</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h4 id=\"pointer-casting\"><a class=\"header\" href=\"#pointer-casting\">Pointer casting</a></h4>\n<p>If the enumeration specifies a <a href=\"items/../type-layout.html#primitive-representations\">primitive representation</a>, then the\ndiscriminant may be reliably accessed via unsafe pointer casting:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[repr(u8)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Enum</span></span> {\n    Unit,\n    Tuple(<span class=\"hljs-built_in\">bool</span>),\n    Struct{a: <span class=\"hljs-built_in\">bool</span>},\n}\n\n<span class=\"hljs-keyword\">impl</span> Enum {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">discriminant</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">u8</span> {\n        <span class=\"hljs-keyword\">unsafe</span> { *(<span class=\"hljs-keyword\">self</span> <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">Self</span> <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>) }\n    }\n}\n\n<span class=\"hljs-keyword\">let</span> unit_like = Enum::Unit;\n<span class=\"hljs-keyword\">let</span> tuple_like = Enum::Tuple(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">let</span> struct_like = Enum::Struct{a: <span class=\"hljs-literal\">false</span>};\n\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, unit_like.discriminant());\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, tuple_like.discriminant());\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">2</span>, struct_like.discriminant());\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"zero-variant-enums\"><a class=\"header\" href=\"#zero-variant-enums\">Zero-variant enums</a></h2>\n<p>Enums with zero variants are known as <em>zero-variant enums</em>. As they have\nno valid values, they cannot be instantiated.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">ZeroVariants</span></span> {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Zero-variant enums are equivalent to the <a href=\"items/../types/never.html\">never type</a>, but they cannot be\ncoerced into other types.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">ZeroVariants</span></span> {}\n</span><span class=\"hljs-keyword\">let</span> x: ZeroVariants = <span class=\"hljs-built_in\">panic!</span>();\n<span class=\"hljs-keyword\">let</span> y: <span class=\"hljs-built_in\">u32</span> = x; <span class=\"hljs-comment\">// mismatched type error</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"variant-visibility\"><a class=\"header\" href=\"#variant-visibility\">Variant visibility</a></h2>\n<p>Enum variants syntactically allow a <a href=\"items/../visibility-and-privacy.html\"><em>Visibility</em></a> annotation, but this is\nrejected when the enum is validated. This allows items to be parsed with a\nunified syntax across different contexts where they are used.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">macro_rules!</span> mac_variant {\n    ($vis:vis $name:ident) =&gt; {\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> $<span class=\"hljs-title\">name</span></span> {\n            $vis Unit,\n\n            $vis Tuple(<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u16</span>),\n\n            $vis Struct { f: <span class=\"hljs-built_in\">u8</span> },\n        }\n    }\n}\n\n<span class=\"hljs-comment\">// Empty `vis` is allowed.</span>\nmac_variant! { E }\n\n<span class=\"hljs-comment\">// This is allowed, since it is removed before being validated.</span>\n<span class=\"hljs-meta\">#[cfg(FALSE)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">E</span></span> {\n    <span class=\"hljs-keyword\">pub</span> U,\n    <span class=\"hljs-keyword\">pub</span>(<span class=\"hljs-keyword\">crate</span>) T(<span class=\"hljs-built_in\">u8</span>),\n    <span class=\"hljs-keyword\">pub</span>(<span class=\"hljs-keyword\">super</span>) T { f: <span class=\"hljs-built_in\">String</span> }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unions\"><a class=\"header\" href=\"#unions\">Unions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>Union</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">union</code> <a href=\"items/../identifiers.html\">IDENTIFIER</a>&nbsp;<a href=\"items/generics.html\"><em>GenericParams</em></a><sup>?</sup> <a href=\"items/generics.html#where-clauses\"><em>WhereClause</em></a><sup>?</sup>\n<code class=\"hljs\">{</code><a href=\"items/structs.html\"><em>StructFields</em></a> <code class=\"hljs\">}</code></p>\n</blockquote>\n<p>A union declaration uses the same syntax as a struct declaration, except with\n<code class=\"hljs\">union</code> in place of <code class=\"hljs\">struct</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">MyUnion</span></span> {\n    f1: <span class=\"hljs-built_in\">u32</span>,\n    f2: <span class=\"hljs-built_in\">f32</span>,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The key property of unions is that all fields of a union share common storage.\nAs a result, writes to one field of a union can overwrite its other fields, and\nsize of a union is determined by the size of its largest field.</p>\n<p>Union field types are restricted to the following subset of types:</p>\n<ul>\n<li><code class=\"hljs\">Copy</code> types</li>\n<li>References (<code class=\"hljs\">&amp;T</code> and <code class=\"hljs\">&amp;mut T</code> for arbitrary <code class=\"hljs\">T</code>)</li>\n<li><code class=\"hljs\">ManuallyDrop&lt;T&gt;</code> (for arbitrary <code class=\"hljs\">T</code>)</li>\n<li>Tuples and arrays containing only allowed union field types</li>\n</ul>\n<p>This restriction ensures, in particular, that union fields never need to be\ndropped. Like for structs and enums, it is possible to <code class=\"hljs\">impl Drop</code> for a union\nto manually define what happens when it gets dropped.</p>\n<h2 id=\"initialization-of-a-union\"><a class=\"header\" href=\"#initialization-of-a-union\">Initialization of a union</a></h2>\n<p>A value of a union type can be created using the same syntax that is used for\nstruct types, except that it must specify exactly one field:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">MyUnion</span></span> { f1: <span class=\"hljs-built_in\">u32</span>, f2: <span class=\"hljs-built_in\">f32</span> }\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">let</span> u = MyUnion { f1: <span class=\"hljs-number\">1</span> };\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The expression above creates a value of type <code class=\"hljs\">MyUnion</code> and initializes the\nstorage using field <code class=\"hljs\">f1</code>. The union can be accessed using the same syntax as\nstruct fields:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">MyUnion</span></span> { f1: <span class=\"hljs-built_in\">u32</span>, f2: <span class=\"hljs-built_in\">f32</span> }\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> u = MyUnion { f1: <span class=\"hljs-number\">1</span> };\n</span><span class=\"hljs-keyword\">let</span> f = <span class=\"hljs-keyword\">unsafe</span> { u.f1 };\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"reading-and-writing-union-fields\"><a class=\"header\" href=\"#reading-and-writing-union-fields\">Reading and writing union fields</a></h2>\n<p>Unions have no notion of an \"active field\". Instead, every union access just\ninterprets the storage as the type of the field used for the access. Reading a\nunion field reads the bits of the union at the field's type. Fields might have a\nnon-zero offset (except when <a href=\"items/../type-layout.html#reprc-unions\">the C representation</a> is used); in that case the\nbits starting at the offset of the fields are read. It is the programmer's\nresponsibility to make sure that the data is valid at the field's type. Failing\nto do so results in <a href=\"items/../behavior-considered-undefined.html\">undefined behavior</a>. For example, reading the value <code class=\"hljs\">3</code>\nfrom a field of the <a href=\"items/../types/boolean.html\">boolean type</a> is undefined behavior. Effectively,\nwriting to and then reading from a union with <a href=\"items/../type-layout.html#reprc-unions\">the C representation</a> is\nanalogous to a <a href=\"items/../../std/mem/fn.transmute.html\"><code class=\"hljs\">transmute</code></a> from the type used for writing to the type used for\nreading.</p>\n<p>Consequently, all reads of union fields have to be placed in <code class=\"hljs\">unsafe</code> blocks:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">MyUnion</span></span> { f1: <span class=\"hljs-built_in\">u32</span>, f2: <span class=\"hljs-built_in\">f32</span> }\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> u = MyUnion { f1: <span class=\"hljs-number\">1</span> };\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">unsafe</span> {\n    <span class=\"hljs-keyword\">let</span> f = u.f1;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Commonly, code using unions will provide safe wrappers around unsafe union\nfield accesses.</p>\n<p>In contrast, writes to union fields are safe, since they just overwrite\narbitrary data, but cannot cause undefined behavior. (Note that union field\ntypes can never have drop glue, so a union field write will never implicitly\ndrop anything.)</p>\n<h2 id=\"pattern-matching-on-unions\"><a class=\"header\" href=\"#pattern-matching-on-unions\">Pattern matching on unions</a></h2>\n<p>Another way to access union fields is to use pattern matching. Pattern matching\non union fields uses the same syntax as struct patterns, except that the pattern\nmust specify exactly one field. Since pattern matching is like reading the union\nwith a particular field, it has to be placed in <code class=\"hljs\">unsafe</code> blocks as well.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">MyUnion</span></span> { f1: <span class=\"hljs-built_in\">u32</span>, f2: <span class=\"hljs-built_in\">f32</span> }\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(u: MyUnion) {\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-keyword\">match</span> u {\n            MyUnion { f1: <span class=\"hljs-number\">10</span> } =&gt; { <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"ten\"</span>); }\n            MyUnion { f2 } =&gt; { <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, f2); }\n        }\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Pattern matching may match a union as a field of a larger structure. In\nparticular, when using a Rust union to implement a C tagged union via FFI, this\nallows matching on the tag and the corresponding field simultaneously:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[repr(u32)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Tag</span></span> { I, F }\n\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">U</span></span> {\n    i: <span class=\"hljs-built_in\">i32</span>,\n    f: <span class=\"hljs-built_in\">f32</span>,\n}\n\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Value</span></span> {\n    tag: Tag,\n    u: U,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">is_zero</span></span>(v: Value) -&gt; <span class=\"hljs-built_in\">bool</span> {\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-keyword\">match</span> v {\n            Value { tag: Tag::I, u: U { i: <span class=\"hljs-number\">0</span> } } =&gt; <span class=\"hljs-literal\">true</span>,\n            Value { tag: Tag::F, u: U { f: num } } <span class=\"hljs-keyword\">if</span> num == <span class=\"hljs-number\">0.0</span> =&gt; <span class=\"hljs-literal\">true</span>,\n            _ =&gt; <span class=\"hljs-literal\">false</span>,\n        }\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"references-to-union-fields\"><a class=\"header\" href=\"#references-to-union-fields\">References to union fields</a></h2>\n<p>Since union fields share common storage, gaining write access to one field of a\nunion can give write access to all its remaining fields. Borrow checking rules\nhave to be adjusted to account for this fact. As a result, if one field of a\nunion is borrowed, all its remaining fields are borrowed as well for the same\nlifetime.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">MyUnion</span></span> { f1: <span class=\"hljs-built_in\">u32</span>, f2: <span class=\"hljs-built_in\">f32</span> }\n</span><span class=\"hljs-comment\">// ERROR: cannot borrow `u` (via `u.f2`) as mutable more than once at a time</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">test</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> u = MyUnion { f1: <span class=\"hljs-number\">1</span> };\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-keyword\">let</span> b1 = &amp;<span class=\"hljs-keyword\">mut</span> u.f1;\n<span class=\"hljs-comment\">//                    ---- first mutable borrow occurs here (via `u.f1`)</span>\n        <span class=\"hljs-keyword\">let</span> b2 = &amp;<span class=\"hljs-keyword\">mut</span> u.f2;\n<span class=\"hljs-comment\">//                    ^^^^ second mutable borrow occurs here (via `u.f2`)</span>\n        *b1 = <span class=\"hljs-number\">5</span>;\n    }\n<span class=\"hljs-comment\">//  - first borrow ends here</span>\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-keyword\">unsafe</span> { u.f1 }, <span class=\"hljs-number\">5</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>As you could see, in many aspects (except for layouts, safety, and ownership)\nunions behave exactly like structs, largely as a consequence of inheriting\ntheir syntactic shape from structs. This is also true for many unmentioned\naspects of Rust language (such as privacy, name resolution, type inference,\ngenerics, trait implementations, inherent implementations, coherence, pattern\nchecking, etc etc etc).</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"constant-items\"><a class=\"header\" href=\"#constant-items\">Constant items</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ConstantItem</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">const</code> ( <a href=\"items/../identifiers.html\">IDENTIFIER</a> | <code class=\"hljs\">_</code> ) <code class=\"hljs\">:</code> <a href=\"items/../types.html#type-expressions\"><em>Type</em></a> ( <code class=\"hljs\">=</code> <a href=\"items/../expressions.html\"><em>Expression</em></a> )<sup>?</sup> <code class=\"hljs\">;</code></p>\n</blockquote>\n<p>A <em>constant item</em> is an optionally named <em><a href=\"items/../const_eval.html#constant-expressions\">constant value</a></em> which is not associated\nwith a specific memory location in the program. Constants are essentially inlined\nwherever they are used, meaning that they are copied directly into the relevant\ncontext when used. This includes usage of constants from external crates, and\nnon-<a href=\"items/../special-types-and-traits.html#copy\"><code class=\"hljs\">Copy</code></a> types. References to the same constant are not necessarily\nguaranteed to refer to the same memory address.</p>\n<p>Constants must be explicitly typed. The type must have a <code class=\"hljs\">'static</code> lifetime: any\nreferences in the initializer must have <code class=\"hljs\">'static</code> lifetimes.</p>\n<p>Constants may refer to the address of other constants, in which case the\naddress will have elided lifetimes where applicable, otherwise – in most cases\n– defaulting to the <code class=\"hljs\">static</code> lifetime. (See <a href=\"items/../lifetime-elision.html#static-lifetime-elision\">static lifetime\nelision</a>.) The compiler is, however, still at liberty to translate the constant\nmany times, so the address referred to may not be stable.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">const</span> BIT1: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">const</span> BIT2: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-keyword\">const</span> BITS: [<span class=\"hljs-built_in\">u32</span>; <span class=\"hljs-number\">2</span>] = [BIT1, BIT2];\n<span class=\"hljs-keyword\">const</span> STRING: &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">\"bitstring\"</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BitsNStrings</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    mybits: [<span class=\"hljs-built_in\">u32</span>; <span class=\"hljs-number\">2</span>],\n    mystring: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n}\n\n<span class=\"hljs-keyword\">const</span> BITS_N_STRINGS: BitsNStrings&lt;<span class=\"hljs-symbol\">'static</span>&gt; = BitsNStrings {\n    mybits: BITS,\n    mystring: STRING,\n};\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The constant expression may only be omitted in a <a href=\"items/traits.html\">trait definition</a>.</p>\n<h2 id=\"constants-with-destructors\"><a class=\"header\" href=\"#constants-with-destructors\">Constants with Destructors</a></h2>\n<p>Constants can contain destructors. Destructors are run when the value goes out\nof scope.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">TypeWithDestructor</span></span>(<span class=\"hljs-built_in\">i32</span>);\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> TypeWithDestructor {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Dropped. Held {}.\"</span>, <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>);\n    }\n}\n\n<span class=\"hljs-keyword\">const</span> ZERO_WITH_DESTRUCTOR: TypeWithDestructor = TypeWithDestructor(<span class=\"hljs-number\">0</span>);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">create_and_drop_zero_with_destructor</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = ZERO_WITH_DESTRUCTOR;\n    <span class=\"hljs-comment\">// x gets dropped at end of function, calling drop.</span>\n    <span class=\"hljs-comment\">// prints \"Dropped. Held 0.\".</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"unnamed-constant\"><a class=\"header\" href=\"#unnamed-constant\">Unnamed constant</a></h2>\n<p>Unlike an <a href=\"items/../items/associated-items.html#associated-constants\">associated constant</a>, a <a href=\"items/../glossary.html#free-item\">free</a> constant may be unnamed by using\nan underscore instead of the name. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">const</span> _: () =  { <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">_SameNameTwice</span></span>; };\n\n<span class=\"hljs-comment\">// OK although it is the same name as above:</span>\n<span class=\"hljs-keyword\">const</span> _: () =  { <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">_SameNameTwice</span></span>; };\n<span class=\"boring\">}</span></code></pre></pre>\n<p>As with <a href=\"items/use-declarations.html#underscore-imports\">underscore imports</a>, macros may safely emit the same unnamed constant in\nthe same scope more than once. For example, the following should not produce an error:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">macro_rules!</span> m {\n    ($item: item) =&gt; { $item $item }\n}\n\nm!(<span class=\"hljs-keyword\">const</span> _: () = (););\n<span class=\"hljs-comment\">// This expands to:</span>\n<span class=\"hljs-comment\">// const _: () = ();</span>\n<span class=\"hljs-comment\">// const _: () = ();</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"evaluation\"><a class=\"header\" href=\"#evaluation\">Evaluation</a></h2>\n<p><a href=\"items/../glossary.html#free-item\">Free</a> constants are always <a href=\"items/../const_eval.html\">evaluated</a> at compile-time to surface\npanics. This happens even within an unused function:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Compile-time panic</span>\n<span class=\"hljs-keyword\">const</span> PANIC: () = std::<span class=\"hljs-built_in\">unimplemented!</span>();\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">unused_generic_function</span></span>&lt;T&gt;() {\n    <span class=\"hljs-comment\">// A failing compile-time assertion</span>\n    <span class=\"hljs-keyword\">const</span> _: () = <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-built_in\">usize</span>::BITS == <span class=\"hljs-number\">0</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"static-items\"><a class=\"header\" href=\"#static-items\">Static items</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>StaticItem</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">static</code> <code class=\"hljs\">mut</code><sup>?</sup> <a href=\"items/../identifiers.html\">IDENTIFIER</a> <code class=\"hljs\">:</code> <a href=\"items/../types.html#type-expressions\"><em>Type</em></a>\n( <code class=\"hljs\">=</code> <a href=\"items/../expressions.html\"><em>Expression</em></a> )<sup>?</sup> <code class=\"hljs\">;</code></p>\n</blockquote>\n<p>A <em>static item</em> is similar to a <a href=\"items/constant-items.html\">constant</a>, except that it represents a precise\nmemory location in the program. All references to the static refer to the same\nmemory location. Static items have the <code class=\"hljs\">static</code> lifetime, which outlives all\nother lifetimes in a Rust program. Static items do not call <a href=\"items/../destructors.html\"><code class=\"hljs\">drop</code></a> at the\nend of the program.</p>\n<p>The static initializer is a <a href=\"items/../const_eval.html#constant-expressions\">constant expression</a> evaluated at compile time.\nStatic initializers may refer to other statics.</p>\n<p>Non-<code class=\"hljs\">mut</code> static items that contain a type that is not <a href=\"items/../interior-mutability.html\">interior mutable</a> may\nbe placed in read-only memory.</p>\n<p>All access to a static is safe, but there are a number of restrictions on\nstatics:</p>\n<ul>\n<li>The type must have the <code class=\"hljs\">Sync</code> trait bound to allow thread-safe access.</li>\n<li>Constants cannot refer to statics.</li>\n</ul>\n<p>The initializer expression must be omitted in an <a href=\"items/external-blocks.html\">external block</a>, and must be\nprovided for free static items.</p>\n<h2 id=\"statics--generics\"><a class=\"header\" href=\"#statics--generics\">Statics &amp; generics</a></h2>\n<p>A static item defined in a generic scope (for example in a blanket or default\nimplementation) will result in exactly one static item being defined, as if\nthe static definition was pulled out of the current scope into the module.\nThere will <em>not</em> be one item per monomorphization.</p>\n<p>This code:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-keyword\">use</span> std::sync::atomic::{AtomicUsize, Ordering};\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Tr</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">default_impl</span></span>() {\n        <span class=\"hljs-keyword\">static</span> COUNTER: AtomicUsize = AtomicUsize::new(<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"default_impl: counter was {}\"</span>, COUNTER.fetch_add(<span class=\"hljs-number\">1</span>, Ordering::Relaxed));\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">blanket_impl</span></span>();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Ty1</span></span> {}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Ty2</span></span> {}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Tr <span class=\"hljs-keyword\">for</span> T {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">blanket_impl</span></span>() {\n        <span class=\"hljs-keyword\">static</span> COUNTER: AtomicUsize = AtomicUsize::new(<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"blanket_impl: counter was {}\"</span>, COUNTER.fetch_add(<span class=\"hljs-number\">1</span>, Ordering::Relaxed));\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    &lt;Ty1 <span class=\"hljs-keyword\">as</span> Tr&gt;::default_impl();\n    &lt;Ty2 <span class=\"hljs-keyword\">as</span> Tr&gt;::default_impl();\n    &lt;Ty1 <span class=\"hljs-keyword\">as</span> Tr&gt;::blanket_impl();\n    &lt;Ty2 <span class=\"hljs-keyword\">as</span> Tr&gt;::blanket_impl();\n}</code></pre></pre>\n<p>prints</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">default_impl: counter was 0\ndefault_impl: counter was 1\nblanket_impl: counter was 0\nblanket_impl: counter was 1\n</code></pre>\n<h2 id=\"mutable-statics\"><a class=\"header\" href=\"#mutable-statics\">Mutable statics</a></h2>\n<p>If a static item is declared with the <code class=\"hljs\">mut</code> keyword, then it is allowed to be\nmodified by the program. One of Rust's goals is to make concurrency bugs hard\nto run into, and this is obviously a very large source of race conditions or\nother bugs. For this reason, an <code class=\"hljs\">unsafe</code> block is required when either reading\nor writing a mutable static variable. Care should be taken to ensure that\nmodifications to a mutable static are safe with respect to other threads\nrunning in the same process.</p>\n<p>Mutable statics are still very useful, however. They can be used with C\nlibraries and can also be bound from C libraries in an <code class=\"hljs\">extern</code> block.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">atomic_add</span></span>(_: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u32</span>, _: <span class=\"hljs-built_in\">u32</span>) -&gt; <span class=\"hljs-built_in\">u32</span> { <span class=\"hljs-number\">2</span> }\n</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">mut</span> LEVELS: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-comment\">// This violates the idea of no shared state, and this doesn't internally</span>\n<span class=\"hljs-comment\">// protect against races, so this function is `unsafe`</span>\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bump_levels_unsafe1</span></span>() -&gt; <span class=\"hljs-built_in\">u32</span> {\n    <span class=\"hljs-keyword\">let</span> ret = LEVELS;\n    LEVELS += <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">return</span> ret;\n}\n\n<span class=\"hljs-comment\">// Assuming that we have an atomic_add function which returns the old value,</span>\n<span class=\"hljs-comment\">// this function is \"safe\" but the meaning of the return value may not be what</span>\n<span class=\"hljs-comment\">// callers expect, so it's still marked as `unsafe`</span>\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bump_levels_unsafe2</span></span>() -&gt; <span class=\"hljs-built_in\">u32</span> {\n    <span class=\"hljs-keyword\">return</span> atomic_add(&amp;<span class=\"hljs-keyword\">mut</span> LEVELS, <span class=\"hljs-number\">1</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Mutable statics have the same restrictions as normal statics, except that the\ntype does not have to implement the <code class=\"hljs\">Sync</code> trait.</p>\n<h2 id=\"using-statics-or-consts\"><a class=\"header\" href=\"#using-statics-or-consts\">Using Statics or Consts</a></h2>\n<p>It can be confusing whether or not you should use a constant item or a static\nitem. Constants should, in general, be preferred over statics unless one of the\nfollowing are true:</p>\n<ul>\n<li>Large amounts of data are being stored</li>\n<li>The single-address property of statics is required.</li>\n<li>Interior mutability is required.</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"traits\"><a class=\"header\" href=\"#traits\">Traits</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>Trait</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">unsafe</code><sup>?</sup> <code class=\"hljs\">trait</code> <a href=\"items/../identifiers.html\">IDENTIFIER</a>&nbsp;\n<a href=\"items/generics.html\"><em>GenericParams</em></a><sup>?</sup>\n( <code class=\"hljs\">:</code> <a href=\"items/../trait-bounds.html\"><em>TypeParamBounds</em></a><sup>?</sup> )<sup>?</sup>\n<a href=\"items/generics.html#where-clauses\"><em>WhereClause</em></a><sup>?</sup> <code class=\"hljs\">{</code><br>\n&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"items/../attributes.html\"><em>InnerAttribute</em></a><sup>*</sup><br>\n&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"items/associated-items.html\"><em>AssociatedItem</em></a><sup>*</sup><br>\n&nbsp;&nbsp; <code class=\"hljs\">}</code></p>\n</blockquote>\n<p>A <em>trait</em> describes an abstract interface that types can implement. This\ninterface consists of <a href=\"items/associated-items.html\">associated items</a>, which come in three varieties:</p>\n<ul>\n<li><a href=\"items/associated-items.html#associated-functions-and-methods\">functions</a></li>\n<li><a href=\"items/associated-items.html#associated-types\">types</a></li>\n<li><a href=\"items/associated-items.html#associated-constants\">constants</a></li>\n</ul>\n<p>All traits define an implicit type parameter <code class=\"hljs\">Self</code> that refers to \"the type\nthat is implementing this interface\". Traits may also contain additional type\nparameters. These type parameters, including <code class=\"hljs\">Self</code>, may be constrained by\nother traits and so forth <a href=\"items/generics.html\">as usual</a>.</p>\n<p>Traits are implemented for specific types through separate <a href=\"items/implementations.html\">implementations</a>.</p>\n<p>Trait functions may omit the function body by replacing it with a semicolon.\nThis indicates that the implementation must define the function. If the trait\nfunction defines a body, this definition acts as a default for any\nimplementation which does not override it. Similarly, associated constants may\nomit the equals sign and expression to indicate implementations must define\nthe constant value. Associated types must never define the type, the type may\nonly be specified in an implementation.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Examples of associated trait items with and without definitions.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Example</span></span> {\n    <span class=\"hljs-keyword\">const</span> CONST_NO_DEFAULT: <span class=\"hljs-built_in\">i32</span>;\n    <span class=\"hljs-keyword\">const</span> CONST_WITH_DEFAULT: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">99</span>;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">TypeNoDefault</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">method_without_default</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">method_with_default</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {}\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Trait functions are not allowed to be <a href=\"items/functions.html#const-functions\"><code class=\"hljs\">const</code></a>.</p>\n<h2 id=\"trait-bounds\"><a class=\"header\" href=\"#trait-bounds\">Trait bounds</a></h2>\n<p>Generic items may use traits as <a href=\"items/../trait-bounds.html\">bounds</a> on their type parameters.</p>\n<h2 id=\"generic-traits\"><a class=\"header\" href=\"#generic-traits\">Generic Traits</a></h2>\n<p>Type parameters can be specified for a trait to make it generic. These appear\nafter the trait name, using the same syntax used in <a href=\"items/functions.html#generic-functions\">generic functions</a>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Seq</span></span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">len</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">u32</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">elt_at</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, n: <span class=\"hljs-built_in\">u32</span>) -&gt; T;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">iter</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F) <span class=\"hljs-keyword\">where</span> F: <span class=\"hljs-built_in\">Fn</span>(T);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"object-safety\"><a class=\"header\" href=\"#object-safety\">Object Safety</a></h2>\n<p>Object safe traits can be the base trait of a <a href=\"items/../types/trait-object.html\">trait object</a>. A trait is\n<em>object safe</em> if it has the following qualities (defined in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0255-object-safety.md\">RFC 255</a>):</p>\n<ul>\n<li>All <a href=\"items/traits.html#supertraits\">supertraits</a> must also be object safe.</li>\n<li><code class=\"hljs\">Sized</code> must not be a <a href=\"items/traits.html#supertraits\">supertrait</a>. In other words, it must not require <code class=\"hljs\">Self: Sized</code>.</li>\n<li>It must not have any associated constants.</li>\n<li>It must not have any associated types with generics.</li>\n<li>All associated functions must either be dispatchable from a trait object or be explicitly non-dispatchable:\n<ul>\n<li>Dispatchable functions must:\n<ul>\n<li>Not have any type parameters (although lifetime parameters are allowed).</li>\n<li>Be a <a href=\"items/associated-items.html#methods\">method</a> that does not use <code class=\"hljs\">Self</code> except in the type of the receiver.</li>\n<li>Have a receiver with one of the following types:\n<ul>\n<li><code class=\"hljs\">&amp;Self</code> (i.e. <code class=\"hljs\">&amp;self</code>)</li>\n<li><code class=\"hljs\">&amp;mut Self</code> (i.e <code class=\"hljs\">&amp;mut self</code>)</li>\n<li><a href=\"items/../special-types-and-traits.html#boxt\"><code class=\"hljs\">Box&lt;Self&gt;</code></a></li>\n<li><a href=\"items/../special-types-and-traits.html#rct\"><code class=\"hljs\">Rc&lt;Self&gt;</code></a></li>\n<li><a href=\"items/../special-types-and-traits.html#arct\"><code class=\"hljs\">Arc&lt;Self&gt;</code></a></li>\n<li><a href=\"items/../special-types-and-traits.html#pinp\"><code class=\"hljs\">Pin&lt;P&gt;</code></a> where <code class=\"hljs\">P</code> is one of the types above</li>\n</ul>\n</li>\n<li>Not have an opaque return type; that is,\n<ul>\n<li>Not be an <code class=\"hljs\">async fn</code> (which has a hidden <code class=\"hljs\">Future</code> type).</li>\n<li>Not have a return position <code class=\"hljs\">impl Trait</code> type (<code class=\"hljs\">fn example(&amp;self) -&gt; impl Trait</code>).</li>\n</ul>\n</li>\n<li>Not have a <code class=\"hljs\">where Self: Sized</code> bound (receiver type of <code class=\"hljs\">Self</code> (i.e. <code class=\"hljs\">self</code>) implies this).</li>\n</ul>\n</li>\n<li>Explicitly non-dispatchable functions require:\n<ul>\n<li>Have a <code class=\"hljs\">where Self: Sized</code> bound (receiver type of <code class=\"hljs\">Self</code> (i.e. <code class=\"hljs\">self</code>) implies this).</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::rc::Rc;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::sync::Arc;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::pin::Pin;\n</span><span class=\"hljs-comment\">// Examples of object safe methods.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">TraitMethods</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_ref</span></span>(<span class=\"hljs-keyword\">self</span>: &amp;<span class=\"hljs-keyword\">Self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_ref_mut</span></span>(<span class=\"hljs-keyword\">self</span>: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">Self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_box</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_rc</span></span>(<span class=\"hljs-keyword\">self</span>: Rc&lt;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_arc</span></span>(<span class=\"hljs-keyword\">self</span>: Arc&lt;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_pin</span></span>(<span class=\"hljs-keyword\">self</span>: Pin&lt;&amp;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">with_lifetime</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(<span class=\"hljs-keyword\">self</span>: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">Self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">nested_pin</span></span>(<span class=\"hljs-keyword\">self</span>: Pin&lt;Arc&lt;<span class=\"hljs-keyword\">Self</span>&gt;&gt;) {}\n}\n<span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> TraitMethods <span class=\"hljs-keyword\">for</span> S {}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> t: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> TraitMethods&gt; = <span class=\"hljs-built_in\">Box</span>::new(S);\n</span><span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// This trait is object-safe, but these methods cannot be dispatched on a trait object.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">NonDispatchable</span></span> {\n    <span class=\"hljs-comment\">// Non-methods cannot be dispatched.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-built_in\">Sized</span> {}\n    <span class=\"hljs-comment\">// Self type isn't known until runtime.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-keyword\">Self</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-built_in\">Sized</span>;\n    <span class=\"hljs-comment\">// `other` may be a different concrete type of the receiver.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">param</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, other: <span class=\"hljs-keyword\">Self</span>) <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-built_in\">Sized</span> {}\n    <span class=\"hljs-comment\">// Generics are not compatible with vtables.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">typed</span></span>&lt;T&gt;(&amp;<span class=\"hljs-keyword\">self</span>, x: T) <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-built_in\">Sized</span> {}\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n<span class=\"hljs-keyword\">impl</span> NonDispatchable <span class=\"hljs-keyword\">for</span> S {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-keyword\">Self</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-built_in\">Sized</span> { S }\n}\n<span class=\"hljs-keyword\">let</span> obj: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> NonDispatchable&gt; = <span class=\"hljs-built_in\">Box</span>::new(S);\nobj.returns(); <span class=\"hljs-comment\">// ERROR: cannot call with Self return</span>\nobj.param(S);  <span class=\"hljs-comment\">// ERROR: cannot call with Self parameter</span>\nobj.typed(<span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// ERROR: cannot call with generic type</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::rc::Rc;\n</span><span class=\"hljs-comment\">// Examples of non-object safe traits.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">NotObjectSafe</span></span> {\n    <span class=\"hljs-keyword\">const</span> CONST: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// ERROR: cannot have associated const</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}  <span class=\"hljs-comment\">// ERROR: associated function without Sized</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-keyword\">Self</span>; <span class=\"hljs-comment\">// ERROR: Self in return type</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">typed</span></span>&lt;T&gt;(&amp;<span class=\"hljs-keyword\">self</span>, x: T) {} <span class=\"hljs-comment\">// ERROR: has generic type parameters</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">nested</span></span>(<span class=\"hljs-keyword\">self</span>: Rc&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;&gt;) {} <span class=\"hljs-comment\">// ERROR: nested receiver not yet supported</span>\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n<span class=\"hljs-keyword\">impl</span> NotObjectSafe <span class=\"hljs-keyword\">for</span> S {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-keyword\">Self</span> { S }\n}\n<span class=\"hljs-keyword\">let</span> obj: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> NotObjectSafe&gt; = <span class=\"hljs-built_in\">Box</span>::new(S); <span class=\"hljs-comment\">// ERROR</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Self: Sized traits are not object-safe.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">TraitWithSize</span></span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-built_in\">Sized</span> {}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n<span class=\"hljs-keyword\">impl</span> TraitWithSize <span class=\"hljs-keyword\">for</span> S {}\n<span class=\"hljs-keyword\">let</span> obj: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> TraitWithSize&gt; = <span class=\"hljs-built_in\">Box</span>::new(S); <span class=\"hljs-comment\">// ERROR</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Not object safe if `Self` is a type argument.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Super</span></span>&lt;A&gt; {}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">WithSelf</span></span>: Super&lt;<span class=\"hljs-keyword\">Self</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-built_in\">Sized</span> {}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n<span class=\"hljs-keyword\">impl</span>&lt;A&gt; Super&lt;A&gt; <span class=\"hljs-keyword\">for</span> S {}\n<span class=\"hljs-keyword\">impl</span> WithSelf <span class=\"hljs-keyword\">for</span> S {}\n<span class=\"hljs-keyword\">let</span> obj: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> WithSelf&gt; = <span class=\"hljs-built_in\">Box</span>::new(S); <span class=\"hljs-comment\">// ERROR: cannot use `Self` type parameter</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"supertraits\"><a class=\"header\" href=\"#supertraits\">Supertraits</a></h2>\n<p><strong>Supertraits</strong> are traits that are required to be implemented for a type to\nimplement a specific trait. Furthermore, anywhere a <a href=\"items/generics.html\">generic</a> or <a href=\"items/../types/trait-object.html\">trait object</a>\nis bounded by a trait, it has access to the associated items of its supertraits.</p>\n<p>Supertraits are declared by trait bounds on the <code class=\"hljs\">Self</code> type of a trait and\ntransitively the supertraits of the traits declared in those trait bounds. It is\nan error for a trait to be its own supertrait.</p>\n<p>The trait with a supertrait is called a <strong>subtrait</strong> of its supertrait.</p>\n<p>The following is an example of declaring <code class=\"hljs\">Shape</code> to be a supertrait of <code class=\"hljs\">Circle</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Circle</span></span> : Shape { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">radius</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>And the following is the same example, except using <a href=\"items/generics.html#where-clauses\">where clauses</a>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Circle</span></span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: Shape { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">radius</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This next example gives <code class=\"hljs\">radius</code> a default implementation using the <code class=\"hljs\">area</code>\nfunction from <code class=\"hljs\">Shape</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Circle</span></span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: Shape {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">radius</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span> {\n        <span class=\"hljs-comment\">// A = pi * r^2</span>\n        <span class=\"hljs-comment\">// so algebraically,</span>\n        <span class=\"hljs-comment\">// r = sqrt(A / pi)</span>\n        (<span class=\"hljs-keyword\">self</span>.area() /std::<span class=\"hljs-built_in\">f64</span>::consts::PI).sqrt()\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This next example calls a supertrait method on a generic parameter.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Circle</span></span> : Shape { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">radius</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">print_area_and_radius</span></span>&lt;C: Circle&gt;(c: C) {\n    <span class=\"hljs-comment\">// Here we call the area method from the supertrait `Shape` of `Circle`.</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Area: {}\"</span>, c.area());\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Radius: {}\"</span>, c.radius());\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Similarly, here is an example of calling supertrait methods on trait objects.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Circle</span></span> : Shape { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">radius</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span>; }\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">UnitCircle</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Shape <span class=\"hljs-keyword\">for</span> UnitCircle { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span> { std::<span class=\"hljs-built_in\">f64</span>::consts::PI } }\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Circle <span class=\"hljs-keyword\">for</span> UnitCircle { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">radius</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span> { <span class=\"hljs-number\">1.0</span> } }\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> circle = UnitCircle;\n</span><span class=\"hljs-keyword\">let</span> circle = <span class=\"hljs-built_in\">Box</span>::new(circle) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Circle&gt;;\n<span class=\"hljs-keyword\">let</span> nonsense = circle.radius() * circle.area();\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"unsafe-traits\"><a class=\"header\" href=\"#unsafe-traits\">Unsafe traits</a></h2>\n<p>Traits items that begin with the <code class=\"hljs\">unsafe</code> keyword indicate that <em>implementing</em> the\ntrait may be <a href=\"items/../unsafety.html\">unsafe</a>. It is safe to use a correctly implemented unsafe trait.\nThe <a href=\"items/implementations.html#trait-implementations\">trait implementation</a> must also begin with the <code class=\"hljs\">unsafe</code> keyword.</p>\n<p><a href=\"items/../special-types-and-traits.html#sync\"><code class=\"hljs\">Sync</code></a> and <a href=\"items/../special-types-and-traits.html#send\"><code class=\"hljs\">Send</code></a> are examples of unsafe traits.</p>\n<h2 id=\"parameter-patterns\"><a class=\"header\" href=\"#parameter-patterns\">Parameter patterns</a></h2>\n<p>Function or method declarations without a body only allow <a href=\"items/../identifiers.html\">IDENTIFIER</a> or\n<code class=\"hljs\">_</code> <a href=\"items/../patterns.html#wildcard-pattern\">wild card</a> patterns. <code class=\"hljs\">mut</code> <a href=\"items/../identifiers.html\">IDENTIFIER</a> is currently\nallowed, but it is deprecated and will become a hard error in the future.</p>\n<!-- https://github.com/rust-lang/rust/issues/35203 -->\n<p>In the 2015 edition, the pattern for a trait function or method parameter is\noptional:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2015 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// 2015 Edition</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">T</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(<span class=\"hljs-built_in\">i32</span>);  <span class=\"hljs-comment\">// Parameter identifiers are not required.</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The kinds of patterns for parameters is limited to one of the following:</p>\n<ul>\n<li><a href=\"items/../identifiers.html\">IDENTIFIER</a></li>\n<li><code class=\"hljs\">mut</code> <a href=\"items/../identifiers.html\">IDENTIFIER</a></li>\n<li><a href=\"items/../patterns.html#wildcard-pattern\"><code class=\"hljs\">_</code></a></li>\n<li><code class=\"hljs\">&amp;</code> <a href=\"items/../identifiers.html\">IDENTIFIER</a></li>\n<li><code class=\"hljs\">&amp;&amp;</code> <a href=\"items/../identifiers.html\">IDENTIFIER</a></li>\n</ul>\n<p>Beginning in the 2018 edition, function or method parameter patterns are no\nlonger optional. Also, all irrefutable patterns are allowed as long as there\nis a body. Without a body, the limitations listed above are still in effect.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">T</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f1</span></span>((a, b): (<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>)) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f2</span></span>(_: (<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>));  <span class=\"hljs-comment\">// Cannot use tuple pattern without a body.</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"item-visibility\"><a class=\"header\" href=\"#item-visibility\">Item visibility</a></h2>\n<p>Trait items syntactically allow a <a href=\"items/../visibility-and-privacy.html\"><em>Visibility</em></a> annotation, but this is\nrejected when the trait is validated. This allows items to be parsed with a\nunified syntax across different contexts where they are used. As an example,\nan empty <code class=\"hljs\">vis</code> macro fragment specifier can be used for trait items, where the\nmacro rule may be used in other situations where visibility is allowed.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-built_in\">macro_rules!</span> create_method {\n    ($vis:vis $name:ident) =&gt; {\n        $vis <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> $<span class=\"hljs-title\">name</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {}\n    };\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">T1</span></span> {\n    <span class=\"hljs-comment\">// Empty `vis` is allowed.</span>\n    create_method! { method_of_t1 }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> S {\n    <span class=\"hljs-comment\">// Visibility is allowed here.</span>\n    create_method! { <span class=\"hljs-keyword\">pub</span> method_of_s }\n}\n\n<span class=\"hljs-keyword\">impl</span> T1 <span class=\"hljs-keyword\">for</span> S {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> s = S;\n    s.method_of_t1();\n    s.method_of_s();\n}</code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"implementations\"><a class=\"header\" href=\"#implementations\">Implementations</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>Implementation</em> :<br>\n&nbsp;&nbsp; <em>InherentImpl</em> | <em>TraitImpl</em></p>\n<p><em>InherentImpl</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">impl</code> <a href=\"items/generics.html\"><em>GenericParams</em></a><sup>?</sup>&nbsp;<a href=\"items/../types.html#type-expressions\"><em>Type</em></a>&nbsp;<a href=\"items/generics.html#where-clauses\"><em>WhereClause</em></a><sup>?</sup> <code class=\"hljs\">{</code><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"items/../attributes.html\"><em>InnerAttribute</em></a><sup>*</sup><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"items/associated-items.html\"><em>AssociatedItem</em></a><sup>*</sup><br>\n&nbsp;&nbsp; <code class=\"hljs\">}</code></p>\n<p><em>TraitImpl</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">unsafe</code><sup>?</sup> <code class=\"hljs\">impl</code> <a href=\"items/generics.html\"><em>GenericParams</em></a><sup>?</sup> <code class=\"hljs\">!</code><sup>?</sup>\n<a href=\"items/../paths.html#paths-in-types\"><em>TypePath</em></a> <code class=\"hljs\">for</code> <a href=\"items/../types.html#type-expressions\"><em>Type</em></a><br>\n&nbsp;&nbsp; <a href=\"items/generics.html#where-clauses\"><em>WhereClause</em></a><sup>?</sup><br>\n&nbsp;&nbsp; <code class=\"hljs\">{</code><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"items/../attributes.html\"><em>InnerAttribute</em></a><sup>*</sup><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"items/associated-items.html\"><em>AssociatedItem</em></a><sup>*</sup><br>\n&nbsp;&nbsp; <code class=\"hljs\">}</code></p>\n</blockquote>\n<p>An <em>implementation</em> is an item that associates items with an <em>implementing type</em>.\nImplementations are defined with the keyword <code class=\"hljs\">impl</code> and contain functions\nthat belong to an instance of the type that is being implemented or to the\ntype statically.</p>\n<p>There are two types of implementations:</p>\n<ul>\n<li>inherent implementations</li>\n<li><a href=\"items/traits.html\">trait</a> implementations</li>\n</ul>\n<h2 id=\"inherent-implementations\"><a class=\"header\" href=\"#inherent-implementations\">Inherent Implementations</a></h2>\n<p>An inherent implementation is defined as the sequence of the <code class=\"hljs\">impl</code> keyword,\ngeneric type declarations, a path to a nominal type, a where clause, and a\nbracketed set of associable items.</p>\n<p>The nominal type is called the <em>implementing type</em> and the associable items are\nthe <em>associated items</em> to the implementing type.</p>\n<p>Inherent implementations associate the contained items to the\nimplementing type.  Inherent implementations can contain <a href=\"items/associated-items.html#associated-functions-and-methods\">associated\nfunctions</a> (including <a href=\"items/associated-items.html#methods\">methods</a>) and <a href=\"items/associated-items.html#associated-constants\">associated constants</a>. They cannot\ncontain associated type aliases.</p>\n<p>The <a href=\"items/../paths.html\">path</a> to an associated item is any path to the implementing type,\nfollowed by the associated item's identifier as the final path\ncomponent.</p>\n<p>A type can also have multiple inherent implementations. An implementing type\nmust be defined within the same crate as the original type definition.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> color {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Color</span></span>(<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-built_in\">u8</span>);\n\n    <span class=\"hljs-keyword\">impl</span> Color {\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">const</span> WHITE: Color = Color(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>);\n    }\n}\n\n<span class=\"hljs-keyword\">mod</span> values {\n    <span class=\"hljs-keyword\">use</span> super::color::Color;\n    <span class=\"hljs-keyword\">impl</span> Color {\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">red</span></span>() -&gt; Color {\n            Color(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">use</span> self::color::Color;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// Actual path to the implementing type and impl in the same module.</span>\n    color::Color::WHITE;\n\n    <span class=\"hljs-comment\">// Impl blocks in different modules are still accessed through a path to the type.</span>\n    color::Color::red();\n\n    <span class=\"hljs-comment\">// Re-exported paths to the implementing type also work.</span>\n    Color::red();\n\n    <span class=\"hljs-comment\">// Does not work, because use in `values` is not pub.</span>\n    <span class=\"hljs-comment\">// values::Color::red();</span>\n}</code></pre></pre>\n<h2 id=\"trait-implementations\"><a class=\"header\" href=\"#trait-implementations\">Trait Implementations</a></h2>\n<p>A <em>trait implementation</em> is defined like an inherent implementation except that\nthe optional generic type declarations are followed by a <a href=\"items/traits.html\">trait</a>, followed\nby the keyword <code class=\"hljs\">for</code>, followed by a path to a nominal type.</p>\n<!-- To understand this, you have to back-reference to the previous section. :( -->\n<p>The trait is known as the <em>implemented trait</em>. The implementing type\nimplements the implemented trait.</p>\n<p>A trait implementation must define all non-default associated items declared\nby the implemented trait, may redefine default associated items defined by the\nimplemented trait, and cannot define any other items.</p>\n<p>The path to the associated items is <code class=\"hljs\">&lt;</code> followed by a path to the implementing\ntype followed by <code class=\"hljs\">as</code> followed by a path to the trait followed by <code class=\"hljs\">&gt;</code> as a path\ncomponent followed by the associated item's path component.</p>\n<p><a href=\"items/traits.html#unsafe-traits\">Unsafe traits</a> require the trait implementation to begin with the <code class=\"hljs\">unsafe</code>\nkeyword.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Copy, Clone)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span> {x: <span class=\"hljs-built_in\">f64</span>, y: <span class=\"hljs-built_in\">f64</span>};\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Surface</span></span> = <span class=\"hljs-built_in\">i32</span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BoundingBox</span></span> {x: <span class=\"hljs-built_in\">f64</span>, y: <span class=\"hljs-built_in\">f64</span>, width: <span class=\"hljs-built_in\">f64</span>, height: <span class=\"hljs-built_in\">f64</span>};\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, s: Surface); <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bounding_box</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; BoundingBox; }\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_draw_circle</span></span>(s: Surface, c: Circle) { }\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Circle</span></span> {\n    radius: <span class=\"hljs-built_in\">f64</span>,\n    center: Point,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Copy</span> <span class=\"hljs-keyword\">for</span> Circle {}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Clone</span> <span class=\"hljs-keyword\">for</span> Circle {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">clone</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; Circle { *<span class=\"hljs-keyword\">self</span> }\n}\n\n<span class=\"hljs-keyword\">impl</span> Shape <span class=\"hljs-keyword\">for</span> Circle {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, s: Surface) { do_draw_circle(s, *<span class=\"hljs-keyword\">self</span>); }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bounding_box</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; BoundingBox {\n        <span class=\"hljs-keyword\">let</span> r = <span class=\"hljs-keyword\">self</span>.radius;\n        BoundingBox {\n            x: <span class=\"hljs-keyword\">self</span>.center.x - r,\n            y: <span class=\"hljs-keyword\">self</span>.center.y - r,\n            width: <span class=\"hljs-number\">2.0</span> * r,\n            height: <span class=\"hljs-number\">2.0</span> * r,\n        }\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"trait-implementation-coherence\"><a class=\"header\" href=\"#trait-implementation-coherence\">Trait Implementation Coherence</a></h3>\n<p>A trait implementation is considered incoherent if either the orphan rules check fails\nor there are overlapping implementation instances.</p>\n<p>Two trait implementations overlap when there is a non-empty intersection of the\ntraits the implementation is for, the implementations can be instantiated with\nthe same type. <!-- This is probably wrong? Source: No two implementations can\nbe instantiable with the same set of types for the input type parameters. --></p>\n<h4 id=\"orphan-rules\"><a class=\"header\" href=\"#orphan-rules\">Orphan rules</a></h4>\n<p>Given <code class=\"hljs\">impl&lt;P1..=Pn&gt; Trait&lt;T1..=Tn&gt; for T0</code>, an <code class=\"hljs\">impl</code> is valid only if at\nleast one of the following is true:</p>\n<ul>\n<li><code class=\"hljs\">Trait</code> is a <a href=\"items/../glossary.html#local-trait\">local trait</a></li>\n<li>All of\n<ul>\n<li>At least one of the types <code class=\"hljs\">T0..=Tn</code> must be a <a href=\"items/../glossary.html#local-type\">local type</a>. Let <code class=\"hljs\">Ti</code> be the\nfirst such type.</li>\n<li>No <a href=\"items/../glossary.html#uncovered-type\">uncovered type</a> parameters <code class=\"hljs\">P1..=Pn</code> may appear in <code class=\"hljs\">T0..Ti</code> (excluding\n<code class=\"hljs\">Ti</code>)</li>\n</ul>\n</li>\n</ul>\n<p>Only the appearance of <em>uncovered</em> type parameters is restricted.\nNote that for the purposes of coherence, <a href=\"items/../glossary.html#fundamental-type-constructors\">fundamental types</a> are\nspecial. The <code class=\"hljs\">T</code> in <code class=\"hljs\">Box&lt;T&gt;</code> is not considered covered, and <code class=\"hljs\">Box&lt;LocalType&gt;</code>\nis considered local.</p>\n<h2 id=\"generic-implementations\"><a class=\"header\" href=\"#generic-implementations\">Generic Implementations</a></h2>\n<p>An implementation can take <a href=\"items/generics.html\">generic parameters</a>, which can be used in the rest\nof the implementation. Implementation parameters are written directly after the\n<code class=\"hljs\">impl</code> keyword.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Seq</span></span>&lt;T&gt; { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">dummy</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, _: T) { } }\n</span><span class=\"hljs-keyword\">impl</span>&lt;T&gt; Seq&lt;T&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-comment\">/* ... */</span>\n}\n<span class=\"hljs-keyword\">impl</span> Seq&lt;<span class=\"hljs-built_in\">bool</span>&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">u32</span> {\n    <span class=\"hljs-comment\">/* Treat the integer as a sequence of bits */</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Generic parameters <em>constrain</em> an implementation if the parameter appears at\nleast once in one of:</p>\n<ul>\n<li>The implemented trait, if it has one</li>\n<li>The implementing type</li>\n<li>As an <a href=\"items/associated-items.html#associated-types\">associated type</a> in the <a href=\"items/../trait-bounds.html\">bounds</a> of a type that contains another\nparameter that constrains the implementation</li>\n</ul>\n<p>Type and const parameters must always constrain the implementation. Lifetimes\nmust constrain the implementation if the lifetime is used in an associated type.</p>\n<p>Examples of constraining situations:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span>{}\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">GenericTrait</span></span>&lt;T&gt; {}\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">HasAssocType</span></span> { <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Ty</span></span>; }\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">GenericStruct</span></span>&lt;T&gt;(T);\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ConstGenericStruct</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;([(); N]);\n</span><span class=\"hljs-comment\">// T constrains by being an argument to GenericTrait.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; GenericTrait&lt;T&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-comment\">/* ... */</span> }\n\n<span class=\"hljs-comment\">// T constrains by being an argument to GenericStruct</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Trait <span class=\"hljs-keyword\">for</span> GenericStruct&lt;T&gt; { <span class=\"hljs-comment\">/* ... */</span> }\n\n<span class=\"hljs-comment\">// Likewise, N constrains by being an argument to ConstGenericStruct</span>\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt; Trait <span class=\"hljs-keyword\">for</span> ConstGenericStruct&lt;N&gt; { <span class=\"hljs-comment\">/* ... */</span> }\n\n<span class=\"hljs-comment\">// T constrains by being in an associated type in a bound for type `U` which is</span>\n<span class=\"hljs-comment\">// itself a generic parameter constraining the trait.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T, U&gt; GenericTrait&lt;U&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">u32</span> <span class=\"hljs-keyword\">where</span> U: HasAssocType&lt;Ty = T&gt; { <span class=\"hljs-comment\">/* ... */</span> }\n\n<span class=\"hljs-comment\">// Like previous, except the type is `(U, isize)`. `U` appears inside the type</span>\n<span class=\"hljs-comment\">// that includes `T`, and is not the type itself.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T, U&gt; GenericStruct&lt;U&gt; <span class=\"hljs-keyword\">where</span> (U, <span class=\"hljs-built_in\">isize</span>): HasAssocType&lt;Ty = T&gt; { <span class=\"hljs-comment\">/* ... */</span> }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Examples of non-constraining situations:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// The rest of these are errors, since they have type or const parameters that</span>\n<span class=\"hljs-comment\">// do not constrain.</span>\n\n<span class=\"hljs-comment\">// T does not constrain since it does not appear at all.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Struct { <span class=\"hljs-comment\">/* ... */</span> }\n\n<span class=\"hljs-comment\">// N does not constrain for the same reason.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt; Struct { <span class=\"hljs-comment\">/* ... */</span> }\n\n<span class=\"hljs-comment\">// Usage of T inside the implementation does not constrain the impl.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Struct {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">uses_t</span></span>(t: &amp;T) { <span class=\"hljs-comment\">/* ... */</span> }\n}\n\n<span class=\"hljs-comment\">// T is used as an associated type in the bounds for U, but U does not constrain.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T, U&gt; Struct <span class=\"hljs-keyword\">where</span> U: HasAssocType&lt;Ty = T&gt; { <span class=\"hljs-comment\">/* ... */</span> }\n\n<span class=\"hljs-comment\">// T is used in the bounds, but not as an associated type, so it does not constrain.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T, U&gt; GenericTrait&lt;U&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">u32</span> <span class=\"hljs-keyword\">where</span> U: GenericTrait&lt;T&gt; {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Example of an allowed unconstraining lifetime parameter:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n</span><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; Struct {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Example of a disallowed unconstraining lifetime parameter:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">HasAssocType</span></span> { <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Ty</span></span>; }\n</span><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; HasAssocType <span class=\"hljs-keyword\">for</span> Struct {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Ty</span></span> = &amp;<span class=\"hljs-symbol\">'a</span> Struct;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"attributes-on-implementations\"><a class=\"header\" href=\"#attributes-on-implementations\">Attributes on Implementations</a></h2>\n<p>Implementations may contain outer <a href=\"items/../attributes.html\">attributes</a> before the <code class=\"hljs\">impl</code> keyword and\ninner <a href=\"items/../attributes.html\">attributes</a> inside the brackets that contain the associated items. Inner\nattributes must come before any associated items. The attributes that have\nmeaning here are <a href=\"items/../conditional-compilation.html\"><code class=\"hljs\">cfg</code></a>, <a href=\"items/../attributes/diagnostics.html#the-deprecated-attribute\"><code class=\"hljs\">deprecated</code></a>, <a href=\"items/../../rustdoc/the-doc-attribute.html\"><code class=\"hljs\">doc</code></a>, and <a href=\"items/../attributes/diagnostics.html#lint-check-attributes\">the lint check\nattributes</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"external-blocks\"><a class=\"header\" href=\"#external-blocks\">External blocks</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ExternBlock</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">unsafe</code><sup>?</sup> <code class=\"hljs\">extern</code> <a href=\"items/functions.html\"><em>Abi</em></a><sup>?</sup> <code class=\"hljs\">{</code><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"items/../attributes.html\"><em>InnerAttribute</em></a><sup>*</sup><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>ExternalItem</em><sup>*</sup><br>\n&nbsp;&nbsp; <code class=\"hljs\">}</code></p>\n<p><em>ExternalItem</em> :<br>\n&nbsp;&nbsp; <a href=\"items/../attributes.html\"><em>OuterAttribute</em></a><sup>*</sup> (<br>\n&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <a href=\"items/../macros.html#macro-invocation\"><em>MacroInvocationSemi</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | ( <a href=\"items/../visibility-and-privacy.html\"><em>Visibility</em></a><sup>?</sup> ( <a href=\"items/static-items.html\"><em>StaticItem</em></a> | <a href=\"items/functions.html\"><em>Function</em></a> ) )<br>\n&nbsp;&nbsp; )</p>\n</blockquote>\n<p>External blocks provide <em>declarations</em> of items that are not <em>defined</em> in the\ncurrent crate and are the basis of Rust's foreign function interface. These are\nakin to unchecked imports.</p>\n<p>Two kinds of item <em>declarations</em> are allowed in external blocks: <a href=\"items/functions.html\">functions</a> and\n<a href=\"items/static-items.html\">statics</a>. Calling functions or accessing statics that are declared in external\nblocks is only allowed in an <code class=\"hljs\">unsafe</code> context.</p>\n<p>The <code class=\"hljs\">unsafe</code> keyword is syntactically allowed to appear before the <code class=\"hljs\">extern</code>\nkeyword, but it is rejected at a semantic level. This allows macros to consume\nthe syntax and make use of the <code class=\"hljs\">unsafe</code> keyword, before removing it from the\ntoken stream.</p>\n<h2 id=\"functions-1\"><a class=\"header\" href=\"#functions-1\">Functions</a></h2>\n<p>Functions within external blocks are declared in the same way as other Rust\nfunctions, with the exception that they must not have a body and are instead\nterminated by a semicolon. Patterns are not allowed in parameters, only\n<a href=\"items/../identifiers.html\">IDENTIFIER</a> or <code class=\"hljs\">_</code> may be used. Function qualifiers (<code class=\"hljs\">const</code>, <code class=\"hljs\">async</code>,\n<code class=\"hljs\">unsafe</code>, and <code class=\"hljs\">extern</code>) are not allowed.</p>\n<p>Functions within external blocks may be called by Rust code, just like\nfunctions defined in Rust. The Rust compiler automatically translates between\nthe Rust ABI and the foreign ABI.</p>\n<p>A function declared in an extern block is implicitly <code class=\"hljs\">unsafe</code>. When coerced to\na function pointer, a function declared in an extern block has type <code class=\"hljs\">unsafe extern \"abi\" for&lt;'l1, ..., 'lm&gt; fn(A1, ..., An) -&gt; R</code>, where <code class=\"hljs\">'l1</code>, ... <code class=\"hljs\">'lm</code>\nare its lifetime parameters, <code class=\"hljs\">A1</code>, ..., <code class=\"hljs\">An</code> are the declared types of its\nparameters and <code class=\"hljs\">R</code> is the declared return type.</p>\n<h2 id=\"statics\"><a class=\"header\" href=\"#statics\">Statics</a></h2>\n<p>Statics within external blocks are declared in the same way as <a href=\"items/static-items.html\">statics</a> outside of external blocks,\nexcept that they do not have an expression initializing their value.\nIt is <code class=\"hljs\">unsafe</code> to access a static item declared in an extern block, whether or\nnot it's mutable, because there is nothing guaranteeing that the bit pattern at the static's\nmemory is valid for the type it is declared with, since some arbitrary (e.g. C) code is in charge\nof initializing the static.</p>\n<p>Extern statics can be either immutable or mutable just like <a href=\"items/static-items.html\">statics</a> outside of external blocks.\nAn immutable static <em>must</em> be initialized before any Rust code is executed. It is not enough for\nthe static to be initialized before Rust code reads from it.</p>\n<h2 id=\"abi\"><a class=\"header\" href=\"#abi\">ABI</a></h2>\n<p>By default external blocks assume that the library they are calling uses the\nstandard C ABI on the specific platform. Other ABIs may be specified using an\n<code class=\"hljs\">abi</code> string, as shown here:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Interface to the Windows API</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"stdcall\"</span> { }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>There are three ABI strings which are cross-platform, and which all compilers\nare guaranteed to support:</p>\n<ul>\n<li><code class=\"hljs\">extern \"Rust\"</code> -- The default ABI when you write a normal <code class=\"hljs\">fn foo()</code> in any\nRust code.</li>\n<li><code class=\"hljs\">extern \"C\"</code> -- This is the same as <code class=\"hljs\">extern fn foo()</code>; whatever the default\nyour C compiler supports.</li>\n<li><code class=\"hljs\">extern \"system\"</code> -- Usually the same as <code class=\"hljs\">extern \"C\"</code>, except on Win32, in\nwhich case it's <code class=\"hljs\">\"stdcall\"</code>, or what you should use to link to the Windows\nAPI itself</li>\n</ul>\n<p>There are also some platform-specific ABI strings:</p>\n<ul>\n<li><code class=\"hljs\">extern \"cdecl\"</code> -- The default for x86_32 C code.</li>\n<li><code class=\"hljs\">extern \"stdcall\"</code> -- The default for the Win32 API on x86_32.</li>\n<li><code class=\"hljs\">extern \"win64\"</code> -- The default for C code on x86_64 Windows.</li>\n<li><code class=\"hljs\">extern \"sysv64\"</code> -- The default for C code on non-Windows x86_64.</li>\n<li><code class=\"hljs\">extern \"aapcs\"</code> -- The default for ARM.</li>\n<li><code class=\"hljs\">extern \"fastcall\"</code> -- The <code class=\"hljs\">fastcall</code> ABI -- corresponds to MSVC's\n<code class=\"hljs\">__fastcall</code> and GCC and clang's <code class=\"hljs\">__attribute__((fastcall))</code></li>\n<li><code class=\"hljs\">extern \"vectorcall\"</code> -- The <code class=\"hljs\">vectorcall</code> ABI -- corresponds to MSVC's\n<code class=\"hljs\">__vectorcall</code> and clang's <code class=\"hljs\">__attribute__((vectorcall))</code></li>\n<li><code class=\"hljs\">extern \"thiscall\"</code> -- The default for C++ member functions on MSVC -- corresponds to MSVC's\n<code class=\"hljs\">__thiscall</code> and GCC and clang's <code class=\"hljs\">__attribute__((thiscall))</code></li>\n<li><code class=\"hljs\">extern \"efiapi\"</code> -- The ABI used for <a href=\"https://uefi.org/specifications\">UEFI</a> functions.</li>\n</ul>\n<h2 id=\"variadic-functions\"><a class=\"header\" href=\"#variadic-functions\">Variadic functions</a></h2>\n<p>Functions within external blocks may be variadic by specifying <code class=\"hljs\">...</code> as the\nlast argument. The variadic parameter may optionally be specified with an\nidentifier.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(...);\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>(x: <span class=\"hljs-built_in\">i32</span>, ...);\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">with_name</span></span>(format: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>, args: ...);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"attributes-on-extern-blocks\"><a class=\"header\" href=\"#attributes-on-extern-blocks\">Attributes on extern blocks</a></h2>\n<p>The following <a href=\"items/../attributes.html\">attributes</a> control the behavior of external blocks.</p>\n<h3 id=\"the-link-attribute\"><a class=\"header\" href=\"#the-link-attribute\">The <code>link</code> attribute</a></h3>\n<p>The <em><code class=\"hljs\">link</code> attribute</em> specifies the name of a native library that the\ncompiler should link with for the items within an <code class=\"hljs\">extern</code> block. It uses the\n<a href=\"items/../attributes.html#meta-item-attribute-syntax\"><em>MetaListNameValueStr</em></a> syntax to specify its inputs. The <code class=\"hljs\">name</code> key is the\nname of the native library to link. The <code class=\"hljs\">kind</code> key is an optional value which\nspecifies the kind of library with the following possible values:</p>\n<ul>\n<li><code class=\"hljs\">dylib</code> — Indicates a dynamic library. This is the default if <code class=\"hljs\">kind</code> is not\nspecified.</li>\n<li><code class=\"hljs\">static</code> — Indicates a static library.</li>\n<li><code class=\"hljs\">framework</code> — Indicates a macOS framework. This is only valid for macOS\ntargets.</li>\n<li><code class=\"hljs\">raw-dylib</code> — Indicates a dynamic library where the compiler will generate\nan import library to link against (see <a href=\"items/external-blocks.html#dylib-versus-raw-dylib\"><code class=\"hljs\">dylib</code> versus <code class=\"hljs\">raw-dylib</code></a> below\nfor details). This is only valid for Windows targets.</li>\n</ul>\n<p>The <code class=\"hljs\">name</code> key must be included if <code class=\"hljs\">kind</code> is specified.</p>\n<p>The optional <code class=\"hljs\">modifiers</code> argument is a way to specify linking modifiers for the\nlibrary to link.\nModifiers are specified as a comma-delimited string with each modifier prefixed\nwith either a <code class=\"hljs\">+</code> or <code class=\"hljs\">-</code> to indicate that the modifier is enabled or disabled,\nrespectively.\nSpecifying multiple <code class=\"hljs\">modifiers</code> arguments in a single <code class=\"hljs\">link</code> attribute,\nor multiple identical modifiers in the same <code class=\"hljs\">modifiers</code> argument is not currently supported. <br>\nExample: <code class=\"hljs\">#[link(name = \"mylib\", kind = \"static\", modifiers = \"+whole-archive\")]</code>.</p>\n<p>The <code class=\"hljs\">wasm_import_module</code> key may be used to specify the <a href=\"https://webassembly.github.io/spec/core/syntax/modules.html\">WebAssembly module</a>\nname for the items within an <code class=\"hljs\">extern</code> block when importing symbols from the\nhost environment. The default module name is <code class=\"hljs\">env</code> if <code class=\"hljs\">wasm_import_module</code> is\nnot specified.</p>\n<!-- ignore: requires extern linking -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[link(name = <span class=\"hljs-meta-string\">\"crypto\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> {\n    <span class=\"hljs-comment\">// …</span>\n}\n\n<span class=\"hljs-meta\">#[link(name = <span class=\"hljs-meta-string\">\"CoreFoundation\"</span>, kind = <span class=\"hljs-meta-string\">\"framework\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> {\n    <span class=\"hljs-comment\">// …</span>\n}\n\n<span class=\"hljs-meta\">#[link(wasm_import_module = <span class=\"hljs-meta-string\">\"foo\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> {\n    <span class=\"hljs-comment\">// …</span>\n}</code></pre>\n<p>It is valid to add the <code class=\"hljs\">link</code> attribute on an empty extern block. You can use\nthis to satisfy the linking requirements of extern blocks elsewhere in your\ncode (including upstream crates) instead of adding the attribute to each extern\nblock.</p>\n<h4 id=\"linking-modifiers-bundle\"><a class=\"header\" href=\"#linking-modifiers-bundle\">Linking modifiers: <code>bundle</code></a></h4>\n<p>This modifier is only compatible with the <code class=\"hljs\">static</code> linking kind.\nUsing any other kind will result in a compiler error.</p>\n<p>When building a rlib or staticlib <code class=\"hljs\">+bundle</code> means that the native static library\nwill be packed into the rlib or staticlib archive, and then retrieved from there\nduring linking of the final binary.</p>\n<p>When building a rlib <code class=\"hljs\">-bundle</code> means that the native static library is registered as a dependency\nof that rlib \"by name\", and object files from it are included only during linking of the final\nbinary, the file search by that name is also performed during final linking. <br>\nWhen building a staticlib <code class=\"hljs\">-bundle</code> means that the native static library is simply not included\ninto the archive and some higher level build system will need to add it later during linking of\nthe final binary.</p>\n<p>This modifier has no effect when building other targets like executables or dynamic libraries.</p>\n<p>The default for this modifier is <code class=\"hljs\">+bundle</code>.</p>\n<p>More implementation details about this modifier can be found in\n<a href=\"items/../../rustc/command-line-arguments.html#linking-modifiers-bundle\"><code class=\"hljs\">bundle</code> documentation for rustc</a>.</p>\n<h4 id=\"linking-modifiers-whole-archive\"><a class=\"header\" href=\"#linking-modifiers-whole-archive\">Linking modifiers: <code>whole-archive</code></a></h4>\n<p>This modifier is only compatible with the <code class=\"hljs\">static</code> linking kind.\nUsing any other kind will result in a compiler error.</p>\n<p><code class=\"hljs\">+whole-archive</code> means that the static library is linked as a whole archive\nwithout throwing any object files away.</p>\n<p>The default for this modifier is <code class=\"hljs\">-whole-archive</code>.</p>\n<p>More implementation details about this modifier can be found in\n<a href=\"items/../../rustc/command-line-arguments.html#linking-modifiers-whole-archive\"><code class=\"hljs\">whole-archive</code> documentation for rustc</a>.</p>\n<h3 id=\"linking-modifiers-verbatim\"><a class=\"header\" href=\"#linking-modifiers-verbatim\">Linking modifiers: <code>verbatim</code></a></h3>\n<p>This modifier is compatible with all linking kinds.</p>\n<p><code class=\"hljs\">+verbatim</code> means that rustc itself won't add any target-specified library prefixes or suffixes\n(like <code class=\"hljs\">lib</code> or <code class=\"hljs\">.a</code>) to the library name, and will try its best to ask for the same thing from the\nlinker.</p>\n<p><code class=\"hljs\">-verbatim</code> means that rustc will either add a target-specific prefix and suffix to the library\nname before passing it to linker, or won't prevent linker from implicitly adding it.</p>\n<p>The default for this modifier is <code class=\"hljs\">-verbatim</code>.</p>\n<p>More implementation details about this modifier can be found in\n<a href=\"items/../../rustc/command-line-arguments.html#linking-modifiers-verbatim\"><code class=\"hljs\">verbatim</code> documentation for rustc</a>.</p>\n<h4 id=\"dylib-versus-raw-dylib\"><a class=\"header\" href=\"#dylib-versus-raw-dylib\"><code>dylib</code> versus <code>raw-dylib</code></a></h4>\n<p>On Windows, linking against a dynamic library requires that an import library\nis provided to the linker: this is a special static library that declares all\nof the symbols exported by the dynamic library in such a way that the linker\nknows that they have to be dynamically loaded at runtime.</p>\n<p>Specifying <code class=\"hljs\">kind = \"dylib\"</code> instructs the Rust compiler to link an import\nlibrary based on the <code class=\"hljs\">name</code> key. The linker will then use its normal library\nresolution logic to find that import library. Alternatively, specifying\n<code class=\"hljs\">kind = \"raw-dylib\"</code> instructs the compiler to generate an import library\nduring compilation and provide that to the linker instead.</p>\n<p><code class=\"hljs\">raw-dylib</code> is only supported on Windows. Using it when targeting other\nplatforms will result in a compiler error.</p>\n<h4 id=\"the-import_name_type-key\"><a class=\"header\" href=\"#the-import_name_type-key\">The <code>import_name_type</code> key</a></h4>\n<p>On x86 Windows, names of functions are \"decorated\" (i.e., have a specific prefix\nand/or suffix added) to indicate their calling convention. For example, a\n<code class=\"hljs\">stdcall</code> calling convention function with the name <code class=\"hljs\">fn1</code> that has no arguments\nwould be decorated as <code class=\"hljs\">_fn1@0</code>. However, the <a href=\"https://learn.microsoft.com/windows/win32/debug/pe-format#import-name-type\">PE Format</a> does also permit names\nto have no prefix or be undecorated. Additionally, the MSVC and GNU toolchains\nuse different decorations for the same calling conventions which means, by\ndefault, some Win32 functions cannot be called using the <code class=\"hljs\">raw-dylib</code> link kind\nvia the GNU toolchain.</p>\n<p>To allow for these differences, when using the <code class=\"hljs\">raw-dylib</code> link kind you may\nalso specify the <code class=\"hljs\">import_name_type</code> key with one of the following values to\nchange how functions are named in the generated import library:</p>\n<ul>\n<li><code class=\"hljs\">decorated</code>: The function name will be fully-decorated using the MSVC\ntoolchain format.</li>\n<li><code class=\"hljs\">noprefix</code>: The function name will be decorated using the MSVC toolchain\nformat, but skipping the leading <code class=\"hljs\">?</code>, <code class=\"hljs\">@</code>, or optionally <code class=\"hljs\">_</code>.</li>\n<li><code class=\"hljs\">undecorated</code>: The function name will not be decorated.</li>\n</ul>\n<p>If the <code class=\"hljs\">import_name_type</code> key is not specified, then the function name will be\nfully-decorated using the target toolchain's format.</p>\n<p>Variables are never decorated and so the <code class=\"hljs\">import_name_type</code> key has no effect on\nhow they are named in the generated import library.</p>\n<p>The <code class=\"hljs\">import_name_type</code> key is only supported on x86 Windows. Using it when\ntargeting other platforms will result in a compiler error.</p>\n<h3 id=\"the-link_name-attribute\"><a class=\"header\" href=\"#the-link_name-attribute\">The <code>link_name</code> attribute</a></h3>\n<p>The <em><code class=\"hljs\">link_name</code> attribute</em> may be specified on declarations inside an <code class=\"hljs\">extern</code>\nblock to indicate the symbol to import for the given function or static. It\nuses the <a href=\"items/../attributes.html#meta-item-attribute-syntax\"><em>MetaNameValueStr</em></a> syntax to specify the name of the symbol.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">extern</span> {\n    <span class=\"hljs-meta\">#[link_name = <span class=\"hljs-meta-string\">\"actual_symbol_name\"</span>]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">name_in_rust</span></span>();\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Using this attribute with the <code class=\"hljs\">link_ordinal</code> attribute will result in a\ncompiler error.</p>\n<h3 id=\"the-link_ordinal-attribute\"><a class=\"header\" href=\"#the-link_ordinal-attribute\">The <code>link_ordinal</code> attribute</a></h3>\n<p>The <em><code class=\"hljs\">link_ordinal</code> attribute</em> can be applied on declarations inside an <code class=\"hljs\">extern</code>\nblock to indicate the numeric ordinal to use when generating the import library\nto link against. An ordinal is a unique number per symbol exported by a dynamic\nlibrary on Windows and can be used when the library is being loaded to find\nthat symbol rather than having to look it up by name.</p>\n<div class=\"warning\">\n<p>Warning: <code class=\"hljs\">link_ordinal</code> should only be used in cases where the ordinal of the\nsymbol is known to be stable: if the ordinal of a symbol is not explicitly set\nwhen its containing binary is built then one will be automatically assigned to\nit, and that assigned ordinal may change between builds of the binary.</p>\n</div>\n<!-- ignore: Only works on x86 Windows -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[link(name = <span class=\"hljs-meta-string\">\"exporter\"</span>, kind = <span class=\"hljs-meta-string\">\"raw-dylib\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"stdcall\"</span> {\n    <span class=\"hljs-meta\">#[link_ordinal(15)]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">imported_function_stdcall</span></span>(i: <span class=\"hljs-built_in\">i32</span>);\n}</code></pre>\n<p>This attribute is only used with the <code class=\"hljs\">raw-dylib</code> linking kind.\nUsing any other kind will result in a compiler error.</p>\n<p>Using this attribute with the <code class=\"hljs\">link_name</code> attribute will result in a\ncompiler error.</p>\n<h3 id=\"attributes-on-function-parameters-1\"><a class=\"header\" href=\"#attributes-on-function-parameters-1\">Attributes on function parameters</a></h3>\n<p>Attributes on extern function parameters follow the same rules and\nrestrictions as <a href=\"items/functions.html#attributes-on-function-parameters\">regular function parameters</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"generic-parameters\"><a class=\"header\" href=\"#generic-parameters\">Generic parameters</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>GenericParams</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">&lt;</code> <code class=\"hljs\">&gt;</code><br>\n&nbsp;&nbsp;  | <code class=\"hljs\">&lt;</code> (<em>GenericParam</em> <code class=\"hljs\">,</code>)<sup>*</sup> <em>GenericParam</em> <code class=\"hljs\">,</code><sup>?</sup> <code class=\"hljs\">&gt;</code></p>\n<p><em>GenericParam</em> :<br>\n&nbsp;&nbsp; <a href=\"items/../attributes.html\"><em>OuterAttribute</em></a><sup>*</sup> ( <em>LifetimeParam</em> | <em>TypeParam</em> | <em>ConstParam</em> )</p>\n<p><em>LifetimeParam</em> :<br>\n&nbsp;&nbsp; <a href=\"items/../tokens.html#lifetimes-and-loop-labels\">LIFETIME_OR_LABEL</a>&nbsp;( <code class=\"hljs\">:</code> <a href=\"items/../trait-bounds.html\"><em>LifetimeBounds</em></a> )<sup>?</sup></p>\n<p><em>TypeParam</em> :<br>\n&nbsp;&nbsp; <a href=\"items/../identifiers.html\">IDENTIFIER</a>&nbsp;( <code class=\"hljs\">:</code> <a href=\"items/../trait-bounds.html\"><em>TypeParamBounds</em></a><sup>?</sup> )<sup>?</sup> ( <code class=\"hljs\">=</code> <a href=\"items/../types.html#type-expressions\"><em>Type</em></a> )<sup>?</sup></p>\n<p><em>ConstParam</em>:<br>\n&nbsp;&nbsp; <code class=\"hljs\">const</code> <a href=\"items/../identifiers.html\">IDENTIFIER</a> <code class=\"hljs\">:</code> <a href=\"items/../types.html#type-expressions\"><em>Type</em></a> ( <code class=\"hljs\">=</code> <em><a href=\"items/../expressions/block-expr.html\">Block</a></em> | <a href=\"items/../identifiers.html\">IDENTIFIER</a> | -<sup>?</sup><a href=\"items/../expressions/literal-expr.html\">LITERAL</a> )<sup>?</sup></p>\n</blockquote>\n<p><a href=\"items/functions.html\">Functions</a>, <a href=\"items/type-aliases.html\">type aliases</a>, <a href=\"items/structs.html\">structs</a>, <a href=\"items/enumerations.html\">enumerations</a>, <a href=\"items/unions.html\">unions</a>, <a href=\"items/traits.html\">traits</a>, and\n<a href=\"items/implementations.html\">implementations</a> may be <em>parameterized</em> by types, constants, and lifetimes. These\nparameters are listed in angle <span class=\"parenthetical\">brackets (<code class=\"hljs\">&lt;...&gt;</code>)</span>,\nusually immediately after the name of the item and before its definition. For\nimplementations, which don't have a name, they come directly after <code class=\"hljs\">impl</code>.\nThe order of generic parameters is restricted to lifetime parameters and then type and const parameters intermixed.\nThe same parameter name may not be declared more than once in a <em>GenericParams</em> list.</p>\n<p>Some examples of items with type, const, and lifetime parameters:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;() {}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">A</span></span>&lt;U&gt; {}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Ref</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-keyword\">where</span> T: <span class=\"hljs-symbol\">'a</span> { r: &amp;<span class=\"hljs-symbol\">'a</span> T }\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">InnerArray</span></span>&lt;T, <span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;([T; N]);\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">EitherOrderWorks</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">bool</span>, U&gt;(U);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Generic parameters are in scope within the item definition where they are\ndeclared. They are not in scope for items declared within the body of a\nfunction as described in <a href=\"items/../statements.html#item-declarations\">item declarations</a>.\nSee <a href=\"items/../names/scopes.html#generic-parameter-scopes\">generic parameter scopes</a> for more details.</p>\n<p><a href=\"items/../types/pointer.html#shared-references-\">References</a>, <a href=\"items/../types/pointer.html#raw-pointers-const-and-mut\">raw pointers</a>, <a href=\"items/../types/array.html\">arrays</a>, <a href=\"items/../types/slice.html\">slices</a>, <a href=\"items/../types/tuple.html\">tuples</a>, and\n<a href=\"items/../types/function-pointer.html\">function pointers</a> have lifetime or type parameters as well, but are not\nreferred to with path syntax.</p>\n<h3 id=\"const-generics\"><a class=\"header\" href=\"#const-generics\">Const generics</a></h3>\n<p><em>Const generic parameters</em> allow items to be generic over constant values. The\nconst identifier introduces a name for the constant parameter, and all\ninstances of the item must be instantiated with a value of the given type.</p>\n<!-- TODO: update above to say \"introduces a name in the [value namespace]\"\n    once namespaces are added. -->\n<p>The only allowed types of const parameters are <code class=\"hljs\">u8</code>, <code class=\"hljs\">u16</code>, <code class=\"hljs\">u32</code>, <code class=\"hljs\">u64</code>, <code class=\"hljs\">u128</code>, <code class=\"hljs\">usize</code>,\n<code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">i128</code>, <code class=\"hljs\">isize</code>, <code class=\"hljs\">char</code> and <code class=\"hljs\">bool</code>.</p>\n<p>Const parameters can be used anywhere a <a href=\"items/constant-items.html\">const item</a> can be used, with the\nexception that when used in a <a href=\"items/../types.html\">type</a> or <a href=\"items/../expressions/array-expr.html\">array repeat expression</a>, it must be\nstandalone (as described below). That is, they are allowed in the following\nplaces:</p>\n<ol>\n<li>As an applied const to any type which forms a part of the signature of the\nitem in question.</li>\n<li>As part of a const expression used to define an <a href=\"items/associated-items.html#associated-constants\">associated const</a>, or as a\nparameter to an <a href=\"items/associated-items.html#associated-types\">associated type</a>.</li>\n<li>As a value in any runtime expression in the body of any functions in the\nitem.</li>\n<li>As a parameter to any type used in the body of any functions in the item.</li>\n<li>As a part of the type of any fields in the item.</li>\n</ol>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Examples where const generic parameters can be used.</span>\n\n<span class=\"hljs-comment\">// Used in the signature of the item itself.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;(arr: [<span class=\"hljs-built_in\">i32</span>; N]) {\n    <span class=\"hljs-comment\">// Used as a type within a function body.</span>\n    <span class=\"hljs-keyword\">let</span> x: [<span class=\"hljs-built_in\">i32</span>; N];\n    <span class=\"hljs-comment\">// Used as an expression.</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, N * <span class=\"hljs-number\">2</span>);\n}\n\n<span class=\"hljs-comment\">// Used as a field of a struct.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;([<span class=\"hljs-built_in\">i32</span>; N]);\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt; Foo&lt;N&gt; {\n    <span class=\"hljs-comment\">// Used as an associated constant.</span>\n    <span class=\"hljs-keyword\">const</span> CONST: <span class=\"hljs-built_in\">usize</span> = N * <span class=\"hljs-number\">4</span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Output</span></span>;\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt; Trait <span class=\"hljs-keyword\">for</span> Foo&lt;N&gt; {\n    <span class=\"hljs-comment\">// Used as an associated type.</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Output</span></span> = [<span class=\"hljs-built_in\">i32</span>; N];\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Examples where const generic parameters cannot be used.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;() {\n    <span class=\"hljs-comment\">// Cannot use in item definitions within a function body.</span>\n    <span class=\"hljs-keyword\">const</span> BAD_CONST: [<span class=\"hljs-built_in\">usize</span>; N] = [<span class=\"hljs-number\">1</span>; N];\n    <span class=\"hljs-keyword\">static</span> BAD_STATIC: [<span class=\"hljs-built_in\">usize</span>; N] = [<span class=\"hljs-number\">1</span>; N];\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">inner</span></span>(bad_arg: [<span class=\"hljs-built_in\">usize</span>; N]) {\n        <span class=\"hljs-keyword\">let</span> bad_value = N * <span class=\"hljs-number\">2</span>;\n    }\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">BadAlias</span></span> = [<span class=\"hljs-built_in\">usize</span>; N];\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BadStruct</span></span>([<span class=\"hljs-built_in\">usize</span>; N]);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>As a further restriction, const parameters may only appear as a standalone\nargument inside of a <a href=\"items/../types.html\">type</a> or <a href=\"items/../expressions/array-expr.html\">array repeat expression</a>. In those contexts,\nthey may only be used as a single segment <a href=\"items/../expressions/path-expr.html\">path expression</a>, possibly inside a\n<a href=\"items/../expressions/block-expr.html\">block</a> (such as <code class=\"hljs\">N</code> or <code class=\"hljs\">{N}</code>). That is, they cannot be combined with other\nexpressions.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Examples where const parameters may not be used.</span>\n\n<span class=\"hljs-comment\">// Not allowed to combine in other expressions in types, such as the</span>\n<span class=\"hljs-comment\">// arithmetic expression in the return type here.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bad_function</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;() -&gt; [<span class=\"hljs-built_in\">u8</span>; {N + <span class=\"hljs-number\">1</span>}] {\n    <span class=\"hljs-comment\">// Similarly not allowed for array repeat expressions.</span>\n    [<span class=\"hljs-number\">1</span>; {N + <span class=\"hljs-number\">1</span>}]\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A const argument in a <a href=\"items/../paths.html\">path</a> specifies the const value to use for that item.\nThe argument must be a <a href=\"items/../const_eval.html#constant-expressions\">const expression</a> of the type ascribed to the const\nparameter. The const expression must be a <a href=\"items/../expressions/block-expr.html\">block expression</a>\n(surrounded with braces) unless it is a single path segment (an <a href=\"items/../identifiers.html\">IDENTIFIER</a>)\nor a <a href=\"items/../expressions/literal-expr.html\">literal</a> (with a possibly leading <code class=\"hljs\">-</code> token).</p>\n<blockquote>\n<p><strong>Note</strong>: This syntactic restriction is necessary to avoid requiring\ninfinite lookahead when parsing an expression inside of a type.</p>\n</blockquote>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">double</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">i32</span>&gt;() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"doubled: {}\"</span>, N * <span class=\"hljs-number\">2</span>);\n}\n\n<span class=\"hljs-keyword\">const</span> SOME_CONST: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">12</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example</span></span>() {\n    <span class=\"hljs-comment\">// Example usage of a const argument.</span>\n    double::&lt;<span class=\"hljs-number\">9</span>&gt;();\n    double::&lt;-<span class=\"hljs-number\">123</span>&gt;();\n    double::&lt;{<span class=\"hljs-number\">7</span> + <span class=\"hljs-number\">8</span>}&gt;();\n    double::&lt;SOME_CONST&gt;();\n    double::&lt;{ SOME_CONST + <span class=\"hljs-number\">5</span> }&gt;();\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When there is ambiguity if a generic argument could be resolved as either a\ntype or const argument, it is always resolved as a type. Placing the argument\nin a block expression can force it to be interpreted as a const argument.</p>\n<!-- TODO: Rewrite the paragraph above to be in terms of namespaces, once\n    namespaces are introduced, and it is clear which namespace each parameter\n    lives in. -->\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">N</span></span> = <span class=\"hljs-built_in\">u32</span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;;\n<span class=\"hljs-comment\">// The following is an error, because `N` is interpreted as the type alias `N`.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;() -&gt; Foo&lt;N&gt; { todo!() } <span class=\"hljs-comment\">// ERROR</span>\n<span class=\"hljs-comment\">// Can be fixed by wrapping in braces to force it to be interpreted as the `N`</span>\n<span class=\"hljs-comment\">// const parameter:</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;() -&gt; Foo&lt;{ N }&gt; { todo!() } <span class=\"hljs-comment\">// ok</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Unlike type and lifetime parameters, const parameters can be declared without\nbeing used inside of a parameterized item, with the exception of\nimplementations as described in <a href=\"items/implementations.html#generic-implementations\">generic implementations</a>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// ok</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Bar</span></span>&lt;<span class=\"hljs-keyword\">const</span> M: <span class=\"hljs-built_in\">usize</span>&gt; { A, B }\n\n<span class=\"hljs-comment\">// ERROR: unused parameter</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Baz</span></span>&lt;T&gt;;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Biz</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Unconstrained</span></span>;\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt; Unconstrained {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When resolving a trait bound obligation, the exhaustiveness of all\nimplementations of const parameters is not considered when determining if the\nbound is satisfied. For example, in the following, even though all possible\nconst values for the <code class=\"hljs\">bool</code> type are implemented, it is still an error that\nthe trait bound is not satisfied:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;<span class=\"hljs-keyword\">const</span> B: <span class=\"hljs-built_in\">bool</span>&gt;;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Bar</span></span> {}\n<span class=\"hljs-keyword\">impl</span> Bar <span class=\"hljs-keyword\">for</span> Foo&lt;<span class=\"hljs-literal\">true</span>&gt; {}\n<span class=\"hljs-keyword\">impl</span> Bar <span class=\"hljs-keyword\">for</span> Foo&lt;<span class=\"hljs-literal\">false</span>&gt; {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">needs_bar</span></span>(_: <span class=\"hljs-keyword\">impl</span> Bar) {}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">generic</span></span>&lt;<span class=\"hljs-keyword\">const</span> B: <span class=\"hljs-built_in\">bool</span>&gt;() {\n    <span class=\"hljs-keyword\">let</span> v = Foo::&lt;B&gt;;\n    needs_bar(v); <span class=\"hljs-comment\">// ERROR: trait bound `Foo&lt;B&gt;: Bar` is not satisfied</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"where-clauses\"><a class=\"header\" href=\"#where-clauses\">Where clauses</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>WhereClause</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">where</code> ( <em>WhereClauseItem</em> <code class=\"hljs\">,</code> )<sup>*</sup> <em>WhereClauseItem</em> <sup>?</sup></p>\n<p><em>WhereClauseItem</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>LifetimeWhereClauseItem</em><br>\n&nbsp;&nbsp; | <em>TypeBoundWhereClauseItem</em></p>\n<p><em>LifetimeWhereClauseItem</em> :<br>\n&nbsp;&nbsp; <a href=\"items/../trait-bounds.html\"><em>Lifetime</em></a> <code class=\"hljs\">:</code> <a href=\"items/../trait-bounds.html\"><em>LifetimeBounds</em></a></p>\n<p><em>TypeBoundWhereClauseItem</em> :<br>\n&nbsp;&nbsp; <a href=\"items/../trait-bounds.html#higher-ranked-trait-bounds\"><em>ForLifetimes</em></a><sup>?</sup> <a href=\"items/../types.html#type-expressions\"><em>Type</em></a> <code class=\"hljs\">:</code> <a href=\"items/../trait-bounds.html\"><em>TypeParamBounds</em></a><sup>?</sup></p>\n</blockquote>\n<p><em>Where clauses</em> provide another way to specify bounds on type and lifetime\nparameters as well as a way to specify bounds on types that aren't type\nparameters.</p>\n<p>The <code class=\"hljs\">for</code> keyword can be used to introduce <a href=\"items/../trait-bounds.html#higher-ranked-trait-bounds\">higher-ranked lifetimes</a>. It only\nallows <a href=\"items/generics.html#generic-parameters\"><em>LifetimeParam</em></a> parameters.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">A</span></span>&lt;T&gt;\n<span class=\"hljs-keyword\">where</span>\n    T: <span class=\"hljs-built_in\">Iterator</span>,            <span class=\"hljs-comment\">// Could use A&lt;T: Iterator&gt; instead</span>\n    T::Item: <span class=\"hljs-built_in\">Copy</span>,          <span class=\"hljs-comment\">// Bound on an associated type</span>\n    <span class=\"hljs-built_in\">String</span>: <span class=\"hljs-built_in\">PartialEq</span>&lt;T&gt;,   <span class=\"hljs-comment\">// Bound on `String`, using the type parameter</span>\n    <span class=\"hljs-built_in\">i32</span>: <span class=\"hljs-built_in\">Default</span>,           <span class=\"hljs-comment\">// Allowed, but not useful</span>\n{\n    f: T,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"attributes\"><a class=\"header\" href=\"#attributes\">Attributes</a></h2>\n<p>Generic lifetime and type parameters allow <a href=\"items/../attributes.html\">attributes</a> on them. There are no\nbuilt-in attributes that do anything in this position, although custom derive\nattributes may give meaning to it.</p>\n<p>This example shows using a custom derive attribute to modify the meaning of a\ngeneric parameter.</p>\n<!-- ignore: requires proc macro derive -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// Assume that the derive for MyFlexibleClone declared `my_flexible_clone` as</span>\n<span class=\"hljs-comment\">// an attribute it understands.</span>\n<span class=\"hljs-meta\">#[derive(MyFlexibleClone)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;<span class=\"hljs-meta\">#[my_flexible_clone(unbounded)]</span> H&gt; {\n    a: *<span class=\"hljs-keyword\">const</span> H\n}</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"associated-items\"><a class=\"header\" href=\"#associated-items\">Associated Items</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>AssociatedItem</em> :<br>\n&nbsp;&nbsp; <a href=\"items/../attributes.html\"><em>OuterAttribute</em></a><sup>*</sup> (<br>\n&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <a href=\"items/../macros.html#macro-invocation\"><em>MacroInvocationSemi</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | ( <a href=\"items/../visibility-and-privacy.html\"><em>Visibility</em></a><sup>?</sup> ( <a href=\"items/type-aliases.html\"><em>TypeAlias</em></a> | <a href=\"items/constant-items.html\"><em>ConstantItem</em></a> | <a href=\"items/functions.html\"><em>Function</em></a> ) )<br>\n&nbsp;&nbsp; )</p>\n</blockquote>\n<p><em>Associated Items</em> are the items declared in <a href=\"items/traits.html\">traits</a> or defined in\n<a href=\"items/implementations.html\">implementations</a>. They are called this because they are defined on an associate\ntype — the type in the implementation. They are a subset of the kinds of\nitems you can declare in a module. Specifically, there are <a href=\"items/associated-items.html#associated-functions-and-methods\">associated\nfunctions</a> (including methods), <a href=\"items/associated-items.html#associated-types\">associated types</a>, and <a href=\"items/associated-items.html#associated-constants\">associated constants</a>.</p>\n<p>Associated items are useful when the associated item logically is related to the\nassociating item. For example, the <code class=\"hljs\">is_some</code> method on <code class=\"hljs\">Option</code> is intrinsically\nrelated to Options, so should be associated.</p>\n<p>Every associated item kind comes in two varieties: definitions that contain the\nactual implementation and declarations that declare signatures for\ndefinitions.</p>\n<p>It is the declarations that make up the contract of traits and what is available\non generic types.</p>\n<h2 id=\"associated-functions-and-methods\"><a class=\"header\" href=\"#associated-functions-and-methods\">Associated functions and methods</a></h2>\n<p><em>Associated functions</em> are <a href=\"items/functions.html\">functions</a> associated with a type.</p>\n<p>An <em>associated function declaration</em> declares a signature for an associated\nfunction definition. It is written as a function item, except the\nfunction body is replaced with a <code class=\"hljs\">;</code>.</p>\n<p>The identifier is the name of the function. The generics, parameter list,\nreturn type, and where clause of the associated function must be the same as the\nassociated function declarations's.</p>\n<p>An <em>associated function definition</em> defines a function associated with another\ntype. It is written the same as a <a href=\"items/../types/function-item.html\">function item</a>.</p>\n<p>An example of a common associated function is a <code class=\"hljs\">new</code> function that returns\na value of the type the associated function is associated with.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span> {\n    field: <span class=\"hljs-built_in\">i32</span>\n}\n\n<span class=\"hljs-keyword\">impl</span> Struct {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Struct {\n        Struct {\n            field: <span class=\"hljs-number\">0i32</span>\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span> </span>() {\n    <span class=\"hljs-keyword\">let</span> _<span class=\"hljs-keyword\">struct</span> = Struct::new();\n}</code></pre></pre>\n<p>When the associated function is declared on a trait, the function can also be\ncalled with a <a href=\"items/../paths.html\">path</a> that is a path to the trait appended by the name of the\ntrait. When this happens, it is substituted for <code class=\"hljs\">&lt;_ as Trait&gt;::function_name</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Num</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">from_i32</span></span>(n: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-keyword\">Self</span>;\n}\n\n<span class=\"hljs-keyword\">impl</span> Num <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">f64</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">from_i32</span></span>(n: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">f64</span> { n <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span> }\n}\n\n<span class=\"hljs-comment\">// These 4 are all equivalent in this case.</span>\n<span class=\"hljs-keyword\">let</span> _: <span class=\"hljs-built_in\">f64</span> = Num::from_i32(<span class=\"hljs-number\">42</span>);\n<span class=\"hljs-keyword\">let</span> _: <span class=\"hljs-built_in\">f64</span> = &lt;_ <span class=\"hljs-keyword\">as</span> Num&gt;::from_i32(<span class=\"hljs-number\">42</span>);\n<span class=\"hljs-keyword\">let</span> _: <span class=\"hljs-built_in\">f64</span> = &lt;<span class=\"hljs-built_in\">f64</span> <span class=\"hljs-keyword\">as</span> Num&gt;::from_i32(<span class=\"hljs-number\">42</span>);\n<span class=\"hljs-keyword\">let</span> _: <span class=\"hljs-built_in\">f64</span> = <span class=\"hljs-built_in\">f64</span>::from_i32(<span class=\"hljs-number\">42</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"methods\"><a class=\"header\" href=\"#methods\">Methods</a></h3>\n<p>Associated functions whose first parameter is named <code class=\"hljs\">self</code> are called <em>methods</em>\nand may be invoked using the <a href=\"items/../expressions/method-call-expr.html\">method call operator</a>, for example, <code class=\"hljs\">x.foo()</code>, as\nwell as the usual function call notation.</p>\n<p>If the type of the <code class=\"hljs\">self</code> parameter is specified, it is limited to types resolving\nto one generated by the following grammar (where <code class=\"hljs\">'lt</code> denotes some arbitrary\nlifetime):</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">P = &amp;'lt S | &amp;'lt mut S | Box&lt;S&gt; | Rc&lt;S&gt; | Arc&lt;S&gt; | Pin&lt;P&gt;\nS = Self | P\n</code></pre>\n<p>The <code class=\"hljs\">Self</code> terminal in this grammar denotes a type resolving to the implementing type.\nThis can also include the contextual type alias <code class=\"hljs\">Self</code>, other type aliases,\nor associated type projections resolving to the implementing type.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::rc::Rc;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::sync::Arc;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::pin::Pin;\n</span><span class=\"hljs-comment\">// Examples of methods implemented on struct `Example`.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Example</span></span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Alias</span></span> = Example;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> { <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Output</span></span>; }\n<span class=\"hljs-keyword\">impl</span> Trait <span class=\"hljs-keyword\">for</span> Example { <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Output</span></span> = Example; }\n<span class=\"hljs-keyword\">impl</span> Example {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_value</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-keyword\">Self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_ref</span></span>(<span class=\"hljs-keyword\">self</span>: &amp;<span class=\"hljs-keyword\">Self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_ref_mut</span></span>(<span class=\"hljs-keyword\">self</span>: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">Self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_box</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_rc</span></span>(<span class=\"hljs-keyword\">self</span>: Rc&lt;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_arc</span></span>(<span class=\"hljs-keyword\">self</span>: Arc&lt;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">by_pin</span></span>(<span class=\"hljs-keyword\">self</span>: Pin&lt;&amp;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">explicit_type</span></span>(<span class=\"hljs-keyword\">self</span>: Arc&lt;Example&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">with_lifetime</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(<span class=\"hljs-keyword\">self</span>: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">Self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">nested</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(<span class=\"hljs-keyword\">self</span>: &amp;<span class=\"hljs-keyword\">mut</span> &amp;<span class=\"hljs-symbol\">'a</span> Arc&lt;Rc&lt;<span class=\"hljs-built_in\">Box</span>&lt;Alias&gt;&gt;&gt;) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">via_projection</span></span>(<span class=\"hljs-keyword\">self</span>: &lt;Example <span class=\"hljs-keyword\">as</span> Trait&gt;::Output) {}\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Shorthand syntax can be used without specifying a type, which have the\nfollowing equivalents:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Shorthand</th><th>Equivalent</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">self</code></td><td><code class=\"hljs\">self: Self</code></td></tr>\n<tr><td><code class=\"hljs\">&amp;'lifetime self</code></td><td><code class=\"hljs\">self: &amp;'lifetime Self</code></td></tr>\n<tr><td><code class=\"hljs\">&amp;'lifetime mut self</code></td><td><code class=\"hljs\">self: &amp;'lifetime mut Self</code></td></tr>\n</tbody></table>\n</div>\n<blockquote>\n<p><strong>Note</strong>: Lifetimes can be, and usually are, elided with this shorthand.</p>\n</blockquote>\n<p>If the <code class=\"hljs\">self</code> parameter is prefixed with <code class=\"hljs\">mut</code>, it becomes a mutable variable,\nsimilar to regular parameters using a <code class=\"hljs\">mut</code> <a href=\"items/../patterns.html#identifier-patterns\">identifier pattern</a>. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Changer</span></span>: <span class=\"hljs-built_in\">Sized</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">change</span></span>(<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">modify</span></span>(<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) {}\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>As an example of methods on a trait, consider the following:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Surface</span></span> = <span class=\"hljs-built_in\">i32</span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">BoundingBox</span></span> = <span class=\"hljs-built_in\">i32</span>;\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, surface: Surface);\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bounding_box</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; BoundingBox;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This defines a trait with two methods. All values that have <a href=\"items/implementations.html\">implementations</a>\nof this trait while the trait is in scope can have their <code class=\"hljs\">draw</code> and\n<code class=\"hljs\">bounding_box</code> methods called.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Surface</span></span> = <span class=\"hljs-built_in\">i32</span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">BoundingBox</span></span> = <span class=\"hljs-built_in\">i32</span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, surface: Surface);\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bounding_box</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; BoundingBox;\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Circle</span></span> {\n    <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-keyword\">impl</span> Shape <span class=\"hljs-keyword\">for</span> Circle {\n    <span class=\"hljs-comment\">// ...</span>\n<span class=\"boring\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, _: Surface) {}\n</span><span class=\"boring\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bounding_box</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; BoundingBox { <span class=\"hljs-number\">0i32</span> }\n</span>}\n\n<span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Circle {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Circle { Circle{} }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">let</span> circle_shape = Circle::new();\n<span class=\"hljs-keyword\">let</span> bounding_box = circle_shape.bounding_box();\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p><strong>Edition Differences</strong>: In the 2015 edition, it is possible to declare trait\nmethods with anonymous parameters (e.g. <code class=\"hljs\">fn foo(u8)</code>). This is deprecated and\nan error as of the 2018 edition. All parameters must have an argument name.</p>\n</blockquote>\n<h4 id=\"attributes-on-method-parameters\"><a class=\"header\" href=\"#attributes-on-method-parameters\">Attributes on method parameters</a></h4>\n<p>Attributes on method parameters follow the same rules and restrictions as\n<a href=\"items/functions.html#attributes-on-function-parameters\">regular function parameters</a>.</p>\n<h2 id=\"associated-types\"><a class=\"header\" href=\"#associated-types\">Associated Types</a></h2>\n<p><em>Associated types</em> are <a href=\"items/type-aliases.html\">type aliases</a> associated with another type. Associated\ntypes cannot be defined in <a href=\"items/implementations.html#inherent-implementations\">inherent implementations</a> nor can they be given a\ndefault implementation in traits.</p>\n<p>An <em>associated type declaration</em> declares a signature for associated type\ndefinitions. It is written in one of the following forms, where <code class=\"hljs\">Assoc</code> is the\nname of the associated type, <code class=\"hljs\">Params</code> is a comma-separated list of type,\nlifetime or const parameters, <code class=\"hljs\">Bounds</code> is a plus-separated list of trait bounds\nthat the associated type must meet, and <code class=\"hljs\">WhereBounds</code> is a comma-separated list\nof bounds that the parameters must meet:</p>\n<!-- ignore: illustrative example forms -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>: Bounds;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>&lt;Params&gt;;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>&lt;Params&gt;: Bounds;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>&lt;Params&gt; <span class=\"hljs-keyword\">where</span> WhereBounds;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>&lt;Params&gt;: Bounds <span class=\"hljs-keyword\">where</span> WhereBounds;</code></pre>\n<p>The identifier is the name of the declared type alias. The optional trait bounds\nmust be fulfilled by the implementations of the type alias.\nThere is an implicit <a href=\"items/../special-types-and-traits.html#sized\"><code class=\"hljs\">Sized</code></a> bound on associated types that can be relaxed using the special <code class=\"hljs\">?Sized</code> bound.</p>\n<p>An <em>associated type definition</em> defines a type alias for the implementation\nof a trait on a type. They are written similarly to an <em>associated type declaration</em>,\nbut cannot contain <code class=\"hljs\">Bounds</code>, but instead must contain a <code class=\"hljs\">Type</code>:</p>\n<!-- ignore: illustrative example forms -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span> = Type;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>&lt;Params&gt; = Type; <span class=\"hljs-comment\">// the type `Type` here may reference `Params`</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>&lt;Params&gt; = Type <span class=\"hljs-keyword\">where</span> WhereBounds;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>&lt;Params&gt; <span class=\"hljs-keyword\">where</span> WhereBounds = Type; <span class=\"hljs-comment\">// deprecated, prefer the form above</span></code></pre>\n<p>If a type <code class=\"hljs\">Item</code> has an associated type <code class=\"hljs\">Assoc</code> from a trait <code class=\"hljs\">Trait</code>, then\n<code class=\"hljs\">&lt;Item as Trait&gt;::Assoc</code> is a type that is an alias of the type specified in the\nassociated type definition. Furthermore, if <code class=\"hljs\">Item</code> is a type parameter, then\n<code class=\"hljs\">Item::Assoc</code> can be used in type parameters.</p>\n<p>Associated types may include <a href=\"items/generics.html\">generic parameters</a> and <a href=\"items/generics.html#where-clauses\">where clauses</a>; these are\noften referred to as <em>generic associated types</em>, or <em>GATs</em>. If the type <code class=\"hljs\">Thing</code>\nhas an associated type <code class=\"hljs\">Item</code> from a trait <code class=\"hljs\">Trait</code> with the generics <code class=\"hljs\">&lt;'a&gt;</code> , the\ntype can be named like <code class=\"hljs\">&lt;Thing as Trait&gt;::Item&lt;'x&gt;</code>, where <code class=\"hljs\">'x</code> is some lifetime\nin scope. In this case, <code class=\"hljs\">'x</code> will be used wherever <code class=\"hljs\">'a</code> appears in the associated\ntype definitions on impls.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">AssociatedType</span></span> {\n    <span class=\"hljs-comment\">// Associated type declaration</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">OtherStruct</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> AssociatedType <span class=\"hljs-keyword\">for</span> Struct {\n    <span class=\"hljs-comment\">// Associated type definition</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Assoc</span></span> = OtherStruct;\n}\n\n<span class=\"hljs-keyword\">impl</span> OtherStruct {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; OtherStruct {\n        OtherStruct\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// Usage of the associated type to refer to OtherStruct as &lt;Struct as AssociatedType&gt;::Assoc</span>\n    <span class=\"hljs-keyword\">let</span> _other_struct: OtherStruct = &lt;Struct <span class=\"hljs-keyword\">as</span> AssociatedType&gt;::Assoc::new();\n}</code></pre></pre>\n<p>An example of associated types with generics and where clauses:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ArrayLender</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> [T; <span class=\"hljs-number\">16</span>]);\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Lend</span></span> {\n    <span class=\"hljs-comment\">// Generic associated type declaration</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Lender</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-symbol\">'a</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">lend</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; Self::Lender&lt;<span class=\"hljs-symbol\">'a</span>&gt;;\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Lend <span class=\"hljs-keyword\">for</span> [T; <span class=\"hljs-number\">16</span>] {\n    <span class=\"hljs-comment\">// Generic associated type definition</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Lender</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; = ArrayLender&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-symbol\">'a</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">lend</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; Self::Lender&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n        ArrayLender(<span class=\"hljs-keyword\">self</span>)\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">borrow</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: Lend&gt;(array: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> T) -&gt; &lt;T <span class=\"hljs-keyword\">as</span> Lend&gt;::Lender&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    array.lend()\n}\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> array = [<span class=\"hljs-number\">0usize</span>; <span class=\"hljs-number\">16</span>];\n    <span class=\"hljs-keyword\">let</span> lender = borrow(&amp;<span class=\"hljs-keyword\">mut</span> array);\n}</code></pre></pre>\n<h3 id=\"associated-types-container-example\"><a class=\"header\" href=\"#associated-types-container-example\">Associated Types Container Example</a></h3>\n<p>Consider the following example of a <code class=\"hljs\">Container</code> trait. Notice that the type is\navailable for use in the method signatures:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Container</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">E</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">empty</span></span>() -&gt; <span class=\"hljs-keyword\">Self</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">insert</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, elem: Self::E);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In order for a type to implement this trait, it must not only provide\nimplementations for every method, but it must specify the type <code class=\"hljs\">E</code>. Here's an\nimplementation of <code class=\"hljs\">Container</code> for the standard library type <code class=\"hljs\">Vec</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Container</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">E</span></span>;\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">empty</span></span>() -&gt; <span class=\"hljs-keyword\">Self</span>;\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">insert</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, elem: Self::E);\n</span><span class=\"boring\">}\n</span><span class=\"hljs-keyword\">impl</span>&lt;T&gt; Container <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">E</span></span> = T;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">empty</span></span>() -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; { <span class=\"hljs-built_in\">Vec</span>::new() }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">insert</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, x: T) { <span class=\"hljs-keyword\">self</span>.push(x); }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"relationship-between-bounds-and-wherebounds\"><a class=\"header\" href=\"#relationship-between-bounds-and-wherebounds\">Relationship between <code>Bounds</code> and <code>WhereBounds</code></a></h3>\n<p>In this example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fmt::<span class=\"hljs-built_in\">Debug</span>;\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Example</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Output</span></span>&lt;T&gt;: <span class=\"hljs-built_in\">Ord</span> <span class=\"hljs-keyword\">where</span> T: <span class=\"hljs-built_in\">Debug</span>;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Given a reference to the associated type like <code class=\"hljs\">&lt;X as Example&gt;::Output&lt;Y&gt;</code>, the associated type itself must be <code class=\"hljs\">Ord</code>, and the type <code class=\"hljs\">Y</code> must be <code class=\"hljs\">Debug</code>.</p>\n<h3 id=\"required-where-clauses-on-generic-associated-types\"><a class=\"header\" href=\"#required-where-clauses-on-generic-associated-types\">Required where clauses on generic associated types</a></h3>\n<p>Generic associated type declarations on traits currently may require a list of\nwhere clauses, dependent on functions in the trait and how the GAT is used. These\nrules may be loosened in the future; updates can be found <a href=\"https://rust-lang.github.io/generic-associated-types-initiative/explainer/required_bounds.html\">on the generic\nassociated types initiative repository</a>.</p>\n<p>In a few words, these where clauses are required in order to maximize the allowed\ndefinitions of the associated type in impls. To do this, any clauses that <em>can be\nproven to hold</em> on functions (using the parameters of the function or trait)\nwhere a GAT appears as an input or output must also be written on the GAT itself.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">LendingIterator</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span>&lt;<span class=\"hljs-symbol\">'x</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-symbol\">'x</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; Self::Item&lt;<span class=\"hljs-symbol\">'a</span>&gt;;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In the above, on the <code class=\"hljs\">next</code> function, we can prove that <code class=\"hljs\">Self: 'a</code>, because of\nthe implied bounds from <code class=\"hljs\">&amp;'a mut self</code>; therefore, we must write the equivalent\nbound on the GAT itself: <code class=\"hljs\">where Self: 'x</code>.</p>\n<p>When there are multiple functions in a trait that use the GAT, then the\n<em>intersection</em> of the bounds from the different functions are used, rather than\nthe union.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Check</span></span>&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Checker</span></span>&lt;<span class=\"hljs-symbol\">'x</span>&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">create_checker</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(item: &amp;<span class=\"hljs-symbol\">'a</span> T) -&gt; Self::Checker&lt;<span class=\"hljs-symbol\">'a</span>&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_check</span></span>(checker: Self::Checker&lt;<span class=\"hljs-symbol\">'_</span>&gt;);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In this example, no bounds are required on the <code class=\"hljs\">type Checker&lt;'a&gt;;</code>. While we\nknow that <code class=\"hljs\">T: 'a</code> on <code class=\"hljs\">create_checker</code>, we do not know that on <code class=\"hljs\">do_check</code>. However,\nif <code class=\"hljs\">do_check</code> was commented out, then the <code class=\"hljs\">where T: 'x</code> bound would be required\non <code class=\"hljs\">Checker</code>.</p>\n<p>The bounds on associated types also propagate required where clauses.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Iterable</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-symbol\">'a</span>;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Iterator</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;: <span class=\"hljs-built_in\">Iterator</span>&lt;Item = Self::Item&lt;<span class=\"hljs-symbol\">'a</span>&gt;&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">Self</span>: <span class=\"hljs-symbol\">'a</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">iter</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">self</span>) -&gt; Self::<span class=\"hljs-built_in\">Iterator</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Here, <code class=\"hljs\">where Self: 'a</code> is required on <code class=\"hljs\">Item</code> because of <code class=\"hljs\">iter</code>. However, <code class=\"hljs\">Item</code>\nis used in the bounds of <code class=\"hljs\">Iterator</code>, the <code class=\"hljs\">where Self: 'a</code> clause is also required\nthere.</p>\n<p>Finally, any explicit uses of <code class=\"hljs\">'static</code> on GATs in the trait do not count towards\nthe required bounds.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">StaticReturn</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Y</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; Self::Y&lt;<span class=\"hljs-symbol\">'static</span>&gt;;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"associated-constants\"><a class=\"header\" href=\"#associated-constants\">Associated Constants</a></h2>\n<p><em>Associated constants</em> are <a href=\"items/constant-items.html\">constants</a> associated with a type.</p>\n<p>An <em>associated constant declaration</em> declares a signature for associated\nconstant definitions. It is written as <code class=\"hljs\">const</code>, then an identifier,\nthen <code class=\"hljs\">:</code>, then a type, finished by a <code class=\"hljs\">;</code>.</p>\n<p>The identifier is the name of the constant used in the path. The type is the\ntype that the definition has to implement.</p>\n<p>An <em>associated constant definition</em> defines a constant associated with a\ntype. It is written the same as a <a href=\"items/constant-items.html\">constant item</a>.</p>\n<p>Associated constant definitions undergo <a href=\"items/../const_eval.html\">constant evaluation</a> only when\nreferenced. Further, definitions that include <a href=\"items/generics.html\">generic parameters</a> are\nevaluated after monomorphization.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust compile_fail edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">GenericStruct</span></span>&lt;<span class=\"hljs-keyword\">const</span> ID: <span class=\"hljs-built_in\">i32</span>&gt;;\n\n<span class=\"hljs-keyword\">impl</span> Struct {\n    <span class=\"hljs-comment\">// Definition not immediately evaluated</span>\n    <span class=\"hljs-keyword\">const</span> PANIC: () = <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"compile-time panic\"</span>);\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-keyword\">const</span> ID: <span class=\"hljs-built_in\">i32</span>&gt; GenericStruct&lt;ID&gt; {\n    <span class=\"hljs-comment\">// Definition not immediately evaluated</span>\n    <span class=\"hljs-keyword\">const</span> NON_ZERO: () = <span class=\"hljs-keyword\">if</span> ID == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"contradiction\"</span>)\n    };\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// Referencing Struct::PANIC causes compilation error</span>\n    <span class=\"hljs-keyword\">let</span> _ = Struct::PANIC;\n\n    <span class=\"hljs-comment\">// Fine, ID is not 0</span>\n    <span class=\"hljs-keyword\">let</span> _ = GenericStruct::&lt;<span class=\"hljs-number\">1</span>&gt;::NON_ZERO;\n\n    <span class=\"hljs-comment\">// Compilation error from evaluating NON_ZERO with ID=0</span>\n    <span class=\"hljs-keyword\">let</span> _ = GenericStruct::&lt;<span class=\"hljs-number\">0</span>&gt;::NON_ZERO;\n}</code></pre></pre>\n<h3 id=\"associated-constants-examples\"><a class=\"header\" href=\"#associated-constants-examples\">Associated Constants Examples</a></h3>\n<p>A basic example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">ConstantId</span></span> {\n    <span class=\"hljs-keyword\">const</span> ID: <span class=\"hljs-built_in\">i32</span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> ConstantId <span class=\"hljs-keyword\">for</span> Struct {\n    <span class=\"hljs-keyword\">const</span> ID: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, Struct::ID);\n}</code></pre></pre>\n<p>Using default values:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">ConstantIdDefault</span></span> {\n    <span class=\"hljs-keyword\">const</span> ID: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">OtherStruct</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> ConstantIdDefault <span class=\"hljs-keyword\">for</span> Struct {}\n\n<span class=\"hljs-keyword\">impl</span> ConstantIdDefault <span class=\"hljs-keyword\">for</span> OtherStruct {\n    <span class=\"hljs-keyword\">const</span> ID: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">5</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, Struct::ID);\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">5</span>, OtherStruct::ID);\n}</code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><script>\n(function() {\n    var fragments = {\n        \"#cold-attribute\": \"attributes/codegen.html#the-cold-attribute\",\n        \"#conditional-compilation\": \"conditional-compilation.html\",\n        \"#deprecation\": \"attributes/diagnostics.html#the-deprecated-attribute\",\n        \"#derive\": \"attributes/derive.html\",\n        \"#documentation\": \"../rustdoc/the-doc-attribute.html\",\n        \"#ffi-attributes\": \"attributes.html#built-in-attributes-index\",\n        \"#inline-attribute\": \"attributes/codegen.html#the-inline-attribute\",\n        \"#lint-check-attributes\": \"attributes/diagnostics.html#lint-check-attributes\",\n        \"#macro-related-attributes\": \"attributes.html#built-in-attributes-index\",\n        \"#miscellaneous-attributes\": \"attributes.html#built-in-attributes-index\",\n        \"#must_use\": \"attributes/diagnostics.html#the-must_use-attribute\",\n        \"#optimization-hints\": \"attributes/codegen.html#optimization-hints\",\n        \"#path\": \"items/modules.html#the-path-attribute\",\n        \"#preludes\": \"crates-and-source-files.html#preludes-and-no_std\",\n        \"#testing\": \"attributes/testing.html\",\n        \"#tool-lint-attributes\": \"attributes/diagnostics.html#tool-lint-attributes\",\n        \"#crate-only-attributes\": \"attributes.html#built-in-attributes-index\",\n    };\n    var target = fragments[window.location.hash];\n    if (target) {\n        var url = window.location.toString();\n        var base = url.substring(0, url.lastIndexOf('/'));\n        window.location.replace(base + \"/\" + target);\n    }\n})();\n</script>\n<h1 id=\"attributes-1\"><a class=\"header\" href=\"#attributes-1\">Attributes</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>InnerAttribute</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">#</code> <code class=\"hljs\">!</code> <code class=\"hljs\">[</code> <em>Attr</em> <code class=\"hljs\">]</code></p>\n<p><em>OuterAttribute</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">#</code> <code class=\"hljs\">[</code> <em>Attr</em> <code class=\"hljs\">]</code></p>\n<p><em>Attr</em> :<br>\n&nbsp;&nbsp; <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a> <em>AttrInput</em><sup>?</sup></p>\n<p><em>AttrInput</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"macros.html\"><em>DelimTokenTree</em></a><br>\n&nbsp;&nbsp; | <code class=\"hljs\">=</code> <a href=\"expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p>An <em>attribute</em> is a general, free-form metadatum that is interpreted according\nto name, convention, language, and compiler version. Attributes are modeled\non Attributes in <a href=\"https://www.ecma-international.org/publications-and-standards/standards/ecma-335/\">ECMA-335</a>, with the syntax coming from <a href=\"https://www.ecma-international.org/publications-and-standards/standards/ecma-334/\">ECMA-334</a> (C#).</p>\n<p><em>Inner attributes</em>, written with a bang (<code class=\"hljs\">!</code>) after the hash (<code class=\"hljs\">#</code>), apply to the\nitem that the attribute is declared within. <em>Outer attributes</em>, written without\nthe bang after the hash, apply to the thing that follows the attribute.</p>\n<p>The attribute consists of a path to the attribute, followed by an optional\ndelimited token tree whose interpretation is defined by the attribute.\nAttributes other than macro attributes also allow the input to be an equals\nsign (<code class=\"hljs\">=</code>) followed by an expression. See the <a href=\"attributes.html#meta-item-attribute-syntax\">meta item\nsyntax</a> below for more details.</p>\n<p>Attributes can be classified into the following kinds:</p>\n<ul>\n<li><a href=\"attributes.html#built-in-attributes-index\">Built-in attributes</a></li>\n<li><a href=\"procedural-macros.html#attribute-macros\">Macro attributes</a></li>\n<li><a href=\"procedural-macros.html#derive-macro-helper-attributes\">Derive macro helper attributes</a></li>\n<li><a href=\"attributes.html#tool-attributes\">Tool attributes</a></li>\n</ul>\n<p>Attributes may be applied to many things in the language:</p>\n<ul>\n<li>All <a href=\"items.html\">item declarations</a> accept outer attributes while <a href=\"items/external-blocks.html\">external blocks</a>,\n<a href=\"items/functions.html\">functions</a>, <a href=\"items/implementations.html\">implementations</a>, and <a href=\"items/modules.html\">modules</a> accept inner attributes.</li>\n<li>Most <a href=\"statements.html\">statements</a> accept outer attributes (see <a href=\"expressions.html#expression-attributes\">Expression Attributes</a> for\nlimitations on expression statements).</li>\n<li><a href=\"expressions/block-expr.html\">Block expressions</a> accept outer and inner attributes, but only when they are\nthe outer expression of an <a href=\"statements.html#expression-statements\">expression statement</a> or the final expression of\nanother block expression.</li>\n<li><a href=\"items/enumerations.html\">Enum</a> variants and <a href=\"items/structs.html\">struct</a> and <a href=\"items/unions.html\">union</a> fields accept outer attributes.</li>\n<li><a href=\"expressions/match-expr.html\">Match expression arms</a> accept outer attributes.</li>\n<li><a href=\"items/generics.html\">Generic lifetime or type parameter</a> accept outer attributes.</li>\n<li>Expressions accept outer attributes in limited situations, see <a href=\"expressions.html#expression-attributes\">Expression\nAttributes</a> for details.</li>\n<li><a href=\"items/functions.html\">Function</a>, <a href=\"expressions/closure-expr.html\">closure</a> and <a href=\"types/function-pointer.html\">function pointer</a>\nparameters accept outer attributes. This includes attributes on variadic parameters\ndenoted with <code class=\"hljs\">...</code> in function pointers and <a href=\"items/external-blocks.html#variadic-functions\">external blocks</a>.</li>\n</ul>\n<p>Some examples of attributes:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// General metadata applied to the enclosing module or crate.</span>\n<span class=\"hljs-meta\">#![crate_type = <span class=\"hljs-meta-string\">\"lib\"</span>]</span>\n\n<span class=\"hljs-comment\">// A function marked as a unit test</span>\n<span class=\"hljs-meta\">#[test]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">test_foo</span></span>() {\n    <span class=\"hljs-comment\">/* ... */</span>\n}\n\n<span class=\"hljs-comment\">// A conditionally-compiled module</span>\n<span class=\"hljs-meta\">#[cfg(target_os = <span class=\"hljs-meta-string\">\"linux\"</span>)]</span>\n<span class=\"hljs-keyword\">mod</span> bar {\n    <span class=\"hljs-comment\">/* ... */</span>\n}\n\n<span class=\"hljs-comment\">// A lint attribute used to suppress a warning/error</span>\n<span class=\"hljs-meta\">#[allow(non_camel_case_types)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">int8_t</span></span> = <span class=\"hljs-built_in\">i8</span>;\n\n<span class=\"hljs-comment\">// Inner attribute applies to the entire function.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">some_unused_variables</span></span>() {\n  <span class=\"hljs-meta\">#![allow(unused_variables)]</span>\n\n  <span class=\"hljs-keyword\">let</span> x = ();\n  <span class=\"hljs-keyword\">let</span> y = ();\n  <span class=\"hljs-keyword\">let</span> z = ();\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"meta-item-attribute-syntax\"><a class=\"header\" href=\"#meta-item-attribute-syntax\">Meta Item Attribute Syntax</a></h2>\n<p>A \"meta item\" is the syntax used for the <em>Attr</em> rule by most <a href=\"attributes.html#built-in-attributes-index\">built-in\nattributes</a>. It has the following grammar:</p>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>MetaItem</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a><br>\n&nbsp;&nbsp; | <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a> <code class=\"hljs\">=</code> <a href=\"expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a> <code class=\"hljs\">(</code> <em>MetaSeq</em><sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>MetaSeq</em> :<br>\n&nbsp;&nbsp; <em>MetaItemInner</em> ( <code class=\"hljs\">,</code> MetaItemInner )<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n<p><em>MetaItemInner</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>MetaItem</em><br>\n&nbsp;&nbsp; | <a href=\"expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p>Expressions in meta items must macro-expand to literal expressions, which must not\ninclude integer or float type suffixes. Expressions which are not literal expressions\nwill be syntactically accepted (and can be passed to proc-macros), but will be rejected after parsing.</p>\n<p>Note that if the attribute appears within another macro, it will be expanded\nafter that outer macro. For example, the following code will expand the\n<code class=\"hljs\">Serialize</code> proc-macro first, which must preserve the <code class=\"hljs\">include_str!</code> call in\norder for it to be expanded:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[derive(Serialize)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n    <span class=\"hljs-meta\">#[doc = include_str!(<span class=\"hljs-meta-string\">\"x.md\"</span>)]</span>\n    x: <span class=\"hljs-built_in\">u32</span>\n}</code></pre>\n<p>Additionally, macros in attributes will be expanded only after all other attributes applied to the item:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[macro_attr1]</span> <span class=\"hljs-comment\">// expanded first</span>\n<span class=\"hljs-meta\">#[doc = mac!()]</span> <span class=\"hljs-comment\">// `mac!` is expanded fourth.</span>\n<span class=\"hljs-meta\">#[macro_attr2]</span> <span class=\"hljs-comment\">// expanded second</span>\n<span class=\"hljs-meta\">#[derive(MacroDerive1, MacroDerive2)]</span> <span class=\"hljs-comment\">// expanded third</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}</code></pre>\n<p>Various built-in attributes use different subsets of the meta item syntax to\nspecify their inputs. The following grammar rules show some commonly used\nforms:</p>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>MetaWord</em>:<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a></p>\n<p><em>MetaNameValueStr</em>:<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a> <code class=\"hljs\">=</code> (<a href=\"tokens.html#string-literals\">STRING_LITERAL</a> | <a href=\"tokens.html#raw-string-literals\">RAW_STRING_LITERAL</a>)</p>\n<p><em>MetaListPaths</em>:<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a> <code class=\"hljs\">(</code> ( <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a> (<code class=\"hljs\">,</code> <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a>)* <code class=\"hljs\">,</code><sup>?</sup> )<sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>MetaListIdents</em>:<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a> <code class=\"hljs\">(</code> ( <a href=\"identifiers.html\">IDENTIFIER</a> (<code class=\"hljs\">,</code> <a href=\"identifiers.html\">IDENTIFIER</a>)* <code class=\"hljs\">,</code><sup>?</sup> )<sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>MetaListNameValueStr</em>:<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a> <code class=\"hljs\">(</code> ( <em>MetaNameValueStr</em> (<code class=\"hljs\">,</code> <em>MetaNameValueStr</em>)* <code class=\"hljs\">,</code><sup>?</sup> )<sup>?</sup> <code class=\"hljs\">)</code></p>\n</blockquote>\n<p>Some examples of meta items are:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Style</th><th>Example</th></tr></thead><tbody>\n<tr><td><em>MetaWord</em></td><td><code class=\"hljs\">no_std</code></td></tr>\n<tr><td><em>MetaNameValueStr</em></td><td><code class=\"hljs\">doc = \"example\"</code></td></tr>\n<tr><td><em>MetaListPaths</em></td><td><code class=\"hljs\">allow(unused, clippy::inline_always)</code></td></tr>\n<tr><td><em>MetaListIdents</em></td><td><code class=\"hljs\">macro_use(foo, bar)</code></td></tr>\n<tr><td><em>MetaListNameValueStr</em></td><td><code class=\"hljs\">link(name = \"CoreFoundation\", kind = \"framework\")</code></td></tr>\n</tbody></table>\n</div>\n<h2 id=\"active-and-inert-attributes\"><a class=\"header\" href=\"#active-and-inert-attributes\">Active and inert attributes</a></h2>\n<p>An attribute is either active or inert. During attribute processing, <em>active\nattributes</em> remove themselves from the thing they are on while <em>inert attributes</em>\nstay on.</p>\n<p>The <a href=\"conditional-compilation.html#the-cfg-attribute\"><code class=\"hljs\">cfg</code></a> and <a href=\"conditional-compilation.html#the-cfg_attr-attribute\"><code class=\"hljs\">cfg_attr</code></a> attributes are active. The <a href=\"attributes/testing.html#the-test-attribute\"><code class=\"hljs\">test</code></a> attribute is\ninert when compiling for tests and active otherwise. <a href=\"procedural-macros.html#attribute-macros\">Attribute macros</a> are\nactive. All other attributes are inert.</p>\n<h2 id=\"tool-attributes\"><a class=\"header\" href=\"#tool-attributes\">Tool attributes</a></h2>\n<p>The compiler may allow attributes for external tools where each tool resides\nin its own namespace in the <a href=\"names/preludes.html#tool-prelude\">tool prelude</a>. The first segment of the attribute\npath is the name of the tool, with one or more additional segments whose\ninterpretation is up to the tool.</p>\n<p>When a tool is not in use, the tool's attributes are accepted without a\nwarning. When the tool is in use, the tool is responsible for processing and\ninterpretation of its attributes.</p>\n<p>Tool attributes are not available if the <a href=\"names/preludes.html#the-no_implicit_prelude-attribute\"><code class=\"hljs\">no_implicit_prelude</code></a> attribute is\nused.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Tells the rustfmt tool to not format the following element.</span>\n<span class=\"hljs-meta\">#[rustfmt::skip]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span> {\n}\n\n<span class=\"hljs-comment\">// Controls the \"cyclomatic complexity\" threshold for the clippy tool.</span>\n<span class=\"hljs-meta\">#[clippy::cyclomatic_complexity = <span class=\"hljs-meta-string\">\"100\"</span>]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p>Note: <code class=\"hljs\">rustc</code> currently recognizes the tools \"clippy\", \"rustfmt\" and \"diagnostic\".</p>\n</blockquote>\n<h2 id=\"built-in-attributes-index\"><a class=\"header\" href=\"#built-in-attributes-index\">Built-in attributes index</a></h2>\n<p>The following is an index of all built-in attributes.</p>\n<ul>\n<li>Conditional compilation\n<ul>\n<li><a href=\"conditional-compilation.html#the-cfg-attribute\"><code class=\"hljs\">cfg</code></a> —&nbsp;Controls conditional compilation.</li>\n<li><a href=\"conditional-compilation.html#the-cfg_attr-attribute\"><code class=\"hljs\">cfg_attr</code></a> —&nbsp;Conditionally includes attributes.</li>\n</ul>\n</li>\n<li>Testing\n<ul>\n<li><a href=\"attributes/testing.html#the-test-attribute\"><code class=\"hljs\">test</code></a> —&nbsp;Marks a function as a test.</li>\n<li><a href=\"attributes/testing.html#the-ignore-attribute\"><code class=\"hljs\">ignore</code></a> —&nbsp;Disables a test function.</li>\n<li><a href=\"attributes/testing.html#the-should_panic-attribute\"><code class=\"hljs\">should_panic</code></a> —&nbsp;Indicates a test should generate a panic.</li>\n</ul>\n</li>\n<li>Derive\n<ul>\n<li><a href=\"attributes/derive.html\"><code class=\"hljs\">derive</code></a> —&nbsp;Automatic trait implementations.</li>\n<li><a href=\"attributes/derive.html#the-automatically_derived-attribute\"><code class=\"hljs\">automatically_derived</code></a> —&nbsp;Marker for implementations created by\n<code class=\"hljs\">derive</code>.</li>\n</ul>\n</li>\n<li>Macros\n<ul>\n<li><a href=\"macros-by-example.html#path-based-scope\"><code class=\"hljs\">macro_export</code></a> — Exports a <code class=\"hljs\">macro_rules</code> macro for cross-crate usage.</li>\n<li><a href=\"macros-by-example.html#the-macro_use-attribute\"><code class=\"hljs\">macro_use</code></a> — Expands macro visibility, or imports macros from other\ncrates.</li>\n<li><a href=\"procedural-macros.html#function-like-procedural-macros\"><code class=\"hljs\">proc_macro</code></a> — Defines a function-like macro.</li>\n<li><a href=\"procedural-macros.html#derive-macros\"><code class=\"hljs\">proc_macro_derive</code></a> — Defines a derive macro.</li>\n<li><a href=\"procedural-macros.html#attribute-macros\"><code class=\"hljs\">proc_macro_attribute</code></a> — Defines an attribute macro.</li>\n</ul>\n</li>\n<li>Diagnostics\n<ul>\n<li><a href=\"attributes/diagnostics.html#lint-check-attributes\"><code class=\"hljs\">allow</code></a>, <a href=\"attributes/diagnostics.html#lint-check-attributes\"><code class=\"hljs\">warn</code></a>, <a href=\"attributes/diagnostics.html#lint-check-attributes\"><code class=\"hljs\">deny</code></a>, <a href=\"attributes/diagnostics.html#lint-check-attributes\"><code class=\"hljs\">forbid</code></a> —&nbsp;Alters the default lint level.</li>\n<li><a href=\"attributes/diagnostics.html#the-deprecated-attribute\"><code class=\"hljs\">deprecated</code></a> —&nbsp;Generates deprecation notices.</li>\n<li><a href=\"attributes/diagnostics.html#the-must_use-attribute\"><code class=\"hljs\">must_use</code></a> — Generates a lint for unused values.</li>\n<li><a href=\"attributes/diagnostics.html#the-diagnosticon_unimplemented-attribute\"><code class=\"hljs\">diagnostic::on_unimplemented</code></a> — Hints the compiler to emit a certain error\nmessage if a trait is not implemented.</li>\n</ul>\n</li>\n<li>ABI, linking, symbols, and FFI\n<ul>\n<li><a href=\"items/external-blocks.html#the-link-attribute\"><code class=\"hljs\">link</code></a> — Specifies a native library to link with an <code class=\"hljs\">extern</code> block.</li>\n<li><a href=\"items/external-blocks.html#the-link_name-attribute\"><code class=\"hljs\">link_name</code></a> — Specifies the name of the symbol for functions or statics\nin an <code class=\"hljs\">extern</code> block.</li>\n<li><a href=\"items/external-blocks.html#the-link_ordinal-attribute\"><code class=\"hljs\">link_ordinal</code></a> — Specifies the ordinal of the symbol for functions or\nstatics in an <code class=\"hljs\">extern</code> block.</li>\n<li><a href=\"items/extern-crates.html#the-no_link-attribute\"><code class=\"hljs\">no_link</code></a> —&nbsp;Prevents linking an extern crate.</li>\n<li><a href=\"type-layout.html#representations\"><code class=\"hljs\">repr</code></a> —&nbsp;Controls type layout.</li>\n<li><a href=\"linkage.html\"><code class=\"hljs\">crate_type</code></a> — Specifies the type of crate (library, executable, etc.).</li>\n<li><a href=\"crates-and-source-files.html#the-no_main-attribute\"><code class=\"hljs\">no_main</code></a> —&nbsp;Disables emitting the <code class=\"hljs\">main</code> symbol.</li>\n<li><a href=\"abi.html#the-export_name-attribute\"><code class=\"hljs\">export_name</code></a> —&nbsp;Specifies the exported symbol name for a function or\nstatic.</li>\n<li><a href=\"abi.html#the-link_section-attribute\"><code class=\"hljs\">link_section</code></a> —&nbsp;Specifies the section of an object file to use for a\nfunction or static.</li>\n<li><a href=\"abi.html#the-no_mangle-attribute\"><code class=\"hljs\">no_mangle</code></a> —&nbsp;Disables symbol name encoding.</li>\n<li><a href=\"abi.html#the-used-attribute\"><code class=\"hljs\">used</code></a> — Forces the compiler to keep a static item in the output\nobject file.</li>\n<li><a href=\"crates-and-source-files.html#the-crate_name-attribute\"><code class=\"hljs\">crate_name</code></a> — Specifies the crate name.</li>\n</ul>\n</li>\n<li>Code generation\n<ul>\n<li><a href=\"attributes/codegen.html#the-inline-attribute\"><code class=\"hljs\">inline</code></a> — Hint to inline code.</li>\n<li><a href=\"attributes/codegen.html#the-cold-attribute\"><code class=\"hljs\">cold</code></a> — Hint that a function is unlikely to be called.</li>\n<li><a href=\"attributes/codegen.html#the-no_builtins-attribute\"><code class=\"hljs\">no_builtins</code></a> — Disables use of certain built-in functions.</li>\n<li><a href=\"attributes/codegen.html#the-target_feature-attribute\"><code class=\"hljs\">target_feature</code></a> —&nbsp;Configure platform-specific code generation.</li>\n<li><a href=\"attributes/codegen.html#the-track_caller-attribute\"><code class=\"hljs\">track_caller</code></a> - Pass the parent call location to <code class=\"hljs\">std::panic::Location::caller()</code>.</li>\n<li><a href=\"attributes/codegen.html#the-instruction_set-attribute\"><code class=\"hljs\">instruction_set</code></a> - Specify the instruction set used to generate a functions code</li>\n</ul>\n</li>\n<li>Documentation\n<ul>\n<li><code class=\"hljs\">doc</code> —&nbsp;Specifies documentation. See <a href=\"../rustdoc/the-doc-attribute.html\">The Rustdoc Book</a> for more\ninformation. <a href=\"comments.html#doc-comments\">Doc comments</a> are transformed into <code class=\"hljs\">doc</code> attributes.</li>\n</ul>\n</li>\n<li>Preludes\n<ul>\n<li><a href=\"names/preludes.html#the-no_std-attribute\"><code class=\"hljs\">no_std</code></a> — Removes std from the prelude.</li>\n<li><a href=\"names/preludes.html#the-no_implicit_prelude-attribute\"><code class=\"hljs\">no_implicit_prelude</code></a> —&nbsp;Disables prelude lookups within a module.</li>\n</ul>\n</li>\n<li>Modules\n<ul>\n<li><a href=\"items/modules.html#the-path-attribute\"><code class=\"hljs\">path</code></a> —&nbsp;Specifies the filename for a module.</li>\n</ul>\n</li>\n<li>Limits\n<ul>\n<li><a href=\"attributes/limits.html#the-recursion_limit-attribute\"><code class=\"hljs\">recursion_limit</code></a> —&nbsp;Sets the maximum recursion limit for certain\ncompile-time operations.</li>\n<li><a href=\"attributes/limits.html#the-type_length_limit-attribute\"><code class=\"hljs\">type_length_limit</code></a> —&nbsp;Sets the maximum size of a polymorphic type.</li>\n</ul>\n</li>\n<li>Runtime\n<ul>\n<li><a href=\"runtime.html#the-panic_handler-attribute\"><code class=\"hljs\">panic_handler</code></a> —&nbsp;Sets the function to handle panics.</li>\n<li><a href=\"runtime.html#the-global_allocator-attribute\"><code class=\"hljs\">global_allocator</code></a> — Sets the global memory allocator.</li>\n<li><a href=\"runtime.html#the-windows_subsystem-attribute\"><code class=\"hljs\">windows_subsystem</code></a> — Specifies the windows subsystem to link with.</li>\n</ul>\n</li>\n<li>Features\n<ul>\n<li><code class=\"hljs\">feature</code> — Used to enable unstable or experimental compiler features. See\n<a href=\"../unstable-book/index.html\">The Unstable Book</a> for features implemented in <code class=\"hljs\">rustc</code>.</li>\n</ul>\n</li>\n<li>Type System\n<ul>\n<li><a href=\"attributes/type_system.html#the-non_exhaustive-attribute\"><code class=\"hljs\">non_exhaustive</code></a> — Indicate that a type will have more fields/variants\nadded in future.</li>\n</ul>\n</li>\n<li>Debugger\n<ul>\n<li><a href=\"attributes/debugger.html#the-debugger_visualizer-attribute\"><code class=\"hljs\">debugger_visualizer</code></a> — Embeds a file that specifies debugger output for a type.</li>\n<li><a href=\"attributes/debugger.html#the-collapse_debuginfo-attribute\"><code class=\"hljs\">collapse_debuginfo</code></a> — Controls how macro invocations are encoded in debuginfo.</li>\n</ul>\n</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"testing-attributes\"><a class=\"header\" href=\"#testing-attributes\">Testing attributes</a></h1>\n<p>The following <a href=\"attributes/../attributes.html\">attributes</a> are used for specifying functions for performing\ntests. Compiling a crate in \"test\" mode enables building the test functions\nalong with a test harness for executing the tests. Enabling the test mode also\nenables the <a href=\"attributes/../conditional-compilation.html#test\"><code class=\"hljs\">test</code> conditional compilation option</a>.</p>\n<h2 id=\"the-test-attribute\"><a class=\"header\" href=\"#the-test-attribute\">The <code>test</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">test</code> attribute</em> marks a function to be executed as a test. These\nfunctions are only compiled when in test mode. Test functions must be free,\nmonomorphic functions that take no arguments, and the return type must implement the <a href=\"attributes/../../std/process/trait.Termination.html\"><code class=\"hljs\">Termination</code></a> trait, for example:</p>\n<ul>\n<li><code class=\"hljs\">()</code></li>\n<li><code class=\"hljs\">Result&lt;T, E&gt; where T: Termination, E: Debug</code></li>\n<li><code class=\"hljs\">!</code></li>\n</ul>\n<!-- If the previous section needs updating (from \"must take no arguments\"\n  onwards, also update it in the crates-and-source-files.md file -->\n<blockquote>\n<p>Note: The test mode is enabled by passing the <code class=\"hljs\">--test</code> argument to <code class=\"hljs\">rustc</code>\nor using <code class=\"hljs\">cargo test</code>.</p>\n</blockquote>\n<p>The test harness calls the returned value's <a href=\"attributes/../../std/process/trait.Termination.html#tymethod.report\"><code class=\"hljs\">report</code></a> method, and classifies the test as passed or failed depending on whether the resulting <a href=\"attributes/../../std/process/struct.ExitCode.html\"><code class=\"hljs\">ExitCode</code></a> represents successful termination.\nIn particular:</p>\n<ul>\n<li>Tests that return <code class=\"hljs\">()</code> pass as long as they terminate and do not panic.</li>\n<li>Tests that return a <code class=\"hljs\">Result&lt;(), E&gt;</code> pass as long as they return <code class=\"hljs\">Ok(())</code>.</li>\n<li>Tests that return <code class=\"hljs\">ExitCode::SUCCESS</code> pass, and tests that return <code class=\"hljs\">ExitCode::FAILURE</code> fail.</li>\n<li>Tests that do not terminate neither pass nor fail.</li>\n</ul>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">setup_the_thing</span></span>() -&gt; io::<span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; { <span class=\"hljs-literal\">Ok</span>(<span class=\"hljs-number\">1</span>) }\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_the_thing</span></span>(s: &amp;<span class=\"hljs-built_in\">i32</span>) -&gt; io::<span class=\"hljs-built_in\">Result</span>&lt;()&gt; { <span class=\"hljs-literal\">Ok</span>(()) }\n</span><span class=\"hljs-meta\">#[test]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">test_the_thing</span></span>() -&gt; io::<span class=\"hljs-built_in\">Result</span>&lt;()&gt; {\n    <span class=\"hljs-keyword\">let</span> state = setup_the_thing()?; <span class=\"hljs-comment\">// expected to succeed</span>\n    do_the_thing(&amp;state)?;          <span class=\"hljs-comment\">// expected to succeed</span>\n    <span class=\"hljs-literal\">Ok</span>(())\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"the-ignore-attribute\"><a class=\"header\" href=\"#the-ignore-attribute\">The <code>ignore</code> attribute</a></h2>\n<p>A function annotated with the <code class=\"hljs\">test</code> attribute can also be annotated with the\n<code class=\"hljs\">ignore</code> attribute. The <em><code class=\"hljs\">ignore</code> attribute</em> tells the test harness to not\nexecute that function as a test. It will still be compiled when in test mode.</p>\n<p>The <code class=\"hljs\">ignore</code> attribute may optionally be written with the <a href=\"attributes/../attributes.html#meta-item-attribute-syntax\"><em>MetaNameValueStr</em></a>\nsyntax to specify a reason why the test is ignored.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[test]</span>\n<span class=\"hljs-meta\">#[ignore = <span class=\"hljs-meta-string\">\"not yet implemented\"</span>]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">mytest</span></span>() {\n    <span class=\"hljs-comment\">// …</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p><strong>Note</strong>: The <code class=\"hljs\">rustc</code> test harness supports the <code class=\"hljs\">--include-ignored</code> flag to\nforce ignored tests to be run.</p>\n</blockquote>\n<h2 id=\"the-should_panic-attribute\"><a class=\"header\" href=\"#the-should_panic-attribute\">The <code>should_panic</code> attribute</a></h2>\n<p>A function annotated with the <code class=\"hljs\">test</code> attribute that returns <code class=\"hljs\">()</code> can also be\nannotated with the <code class=\"hljs\">should_panic</code> attribute. The <em><code class=\"hljs\">should_panic</code> attribute</em>\nmakes the test only pass if it actually panics.</p>\n<p>The <code class=\"hljs\">should_panic</code> attribute may optionally take an input string that must\nappear within the panic message. If the string is not found in the message,\nthen the test will fail. The string may be passed using the\n<a href=\"attributes/../attributes.html#meta-item-attribute-syntax\"><em>MetaNameValueStr</em></a> syntax or the <a href=\"attributes/../attributes.html#meta-item-attribute-syntax\"><em>MetaListNameValueStr</em></a> syntax with an\n<code class=\"hljs\">expected</code> field.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[test]</span>\n<span class=\"hljs-meta\">#[should_panic(expected = <span class=\"hljs-meta-string\">\"values don't match\"</span>)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">mytest</span></span>() {\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"values don't match\"</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"derive\"><a class=\"header\" href=\"#derive\">Derive</a></h1>\n<p>The <em><code class=\"hljs\">derive</code> attribute</em> allows new <a href=\"attributes/../items.html\">items</a> to be automatically generated for\ndata structures. It uses the <a href=\"attributes/../attributes.html#meta-item-attribute-syntax\"><em>MetaListPaths</em></a> syntax to specify a list of\ntraits to implement or paths to <a href=\"attributes/../procedural-macros.html#derive-macros\">derive macros</a> to process.</p>\n<p>For example, the following will create an <a href=\"attributes/../items/implementations.html\"><code class=\"hljs\">impl</code> item</a> for the\n<a href=\"attributes/../../std/cmp/trait.PartialEq.html\"><code class=\"hljs\">PartialEq</code></a> and <a href=\"attributes/../../std/clone/trait.Clone.html\"><code class=\"hljs\">Clone</code></a> traits for <code class=\"hljs\">Foo</code>, and the type parameter <code class=\"hljs\">T</code> will be\ngiven the <code class=\"hljs\">PartialEq</code> or <code class=\"hljs\">Clone</code> constraints for the appropriate <code class=\"hljs\">impl</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[derive(PartialEq, Clone)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;T&gt; {\n    a: <span class=\"hljs-built_in\">i32</span>,\n    b: T,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The generated <code class=\"hljs\">impl</code> for <code class=\"hljs\">PartialEq</code> is equivalent to</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;T&gt; { a: <span class=\"hljs-built_in\">i32</span>, b: T }\n</span><span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">PartialEq</span>&gt; <span class=\"hljs-built_in\">PartialEq</span> <span class=\"hljs-keyword\">for</span> Foo&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eq</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;Foo&lt;T&gt;) -&gt; <span class=\"hljs-built_in\">bool</span> {\n        <span class=\"hljs-keyword\">self</span>.a == other.a &amp;&amp; <span class=\"hljs-keyword\">self</span>.b == other.b\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>You can implement <code class=\"hljs\">derive</code> for your own traits through <a href=\"attributes/../procedural-macros.html#derive-macros\">procedural macros</a>.</p>\n<h2 id=\"the-automatically_derived-attribute\"><a class=\"header\" href=\"#the-automatically_derived-attribute\">The <code>automatically_derived</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">automatically_derived</code> attribute</em> is automatically added to\n<a href=\"attributes/../items/implementations.html\">implementations</a> created by the <code class=\"hljs\">derive</code> attribute for built-in traits. It\nhas no direct effect, but it may be used by tools and diagnostic lints to\ndetect these automatically generated implementations.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"diagnostic-attributes\"><a class=\"header\" href=\"#diagnostic-attributes\">Diagnostic attributes</a></h1>\n<p>The following <a href=\"attributes/../attributes.html\">attributes</a> are used for controlling or generating diagnostic\nmessages during compilation.</p>\n<h2 id=\"lint-check-attributes\"><a class=\"header\" href=\"#lint-check-attributes\">Lint check attributes</a></h2>\n<p>A lint check names a potentially undesirable coding pattern, such as\nunreachable code or omitted documentation. The lint attributes <code class=\"hljs\">allow</code>,\n<code class=\"hljs\">warn</code>, <code class=\"hljs\">deny</code>, and <code class=\"hljs\">forbid</code> use the <a href=\"attributes/../attributes.html#meta-item-attribute-syntax\"><em>MetaListPaths</em></a> syntax to specify a\nlist of lint names to change the lint level for the entity to which the\nattribute applies.</p>\n<p>For any lint check <code class=\"hljs\">C</code>:</p>\n<ul>\n<li><code class=\"hljs\">allow(C)</code> overrides the check for <code class=\"hljs\">C</code> so that violations will go\nunreported,</li>\n<li><code class=\"hljs\">warn(C)</code> warns about violations of <code class=\"hljs\">C</code> but continues compilation.</li>\n<li><code class=\"hljs\">deny(C)</code> signals an error after encountering a violation of <code class=\"hljs\">C</code>,</li>\n<li><code class=\"hljs\">forbid(C)</code> is the same as <code class=\"hljs\">deny(C)</code>, but also forbids changing the lint\nlevel afterwards,</li>\n</ul>\n<blockquote>\n<p>Note: The lint checks supported by <code class=\"hljs\">rustc</code> can be found via <code class=\"hljs\">rustc -W help</code>,\nalong with their default settings and are documented in the <a href=\"attributes/../../rustc/lints/index.html\">rustc book</a>.</p>\n</blockquote>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> m1 {\n    <span class=\"hljs-comment\">// Missing documentation is ignored here</span>\n    <span class=\"hljs-meta\">#[allow(missing_docs)]</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">undocumented_one</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">1</span> }\n\n    <span class=\"hljs-comment\">// Missing documentation signals a warning here</span>\n    <span class=\"hljs-meta\">#[warn(missing_docs)]</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">undocumented_too</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">2</span> }\n\n    <span class=\"hljs-comment\">// Missing documentation signals an error here</span>\n    <span class=\"hljs-meta\">#[deny(missing_docs)]</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">undocumented_end</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">3</span> }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Lint attributes can override the level specified from a previous attribute, as\nlong as the level does not attempt to change a forbidden lint. Previous\nattributes are those from a higher level in the syntax tree, or from a\nprevious attribute on the same entity as listed in left-to-right source order.</p>\n<p>This example shows how one can use <code class=\"hljs\">allow</code> and <code class=\"hljs\">warn</code> to toggle a particular\ncheck on and off:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[warn(missing_docs)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> m2 {\n    <span class=\"hljs-meta\">#[allow(missing_docs)]</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> nested {\n        <span class=\"hljs-comment\">// Missing documentation is ignored here</span>\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">undocumented_one</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">1</span> }\n\n        <span class=\"hljs-comment\">// Missing documentation signals a warning here,</span>\n        <span class=\"hljs-comment\">// despite the allow above.</span>\n        <span class=\"hljs-meta\">#[warn(missing_docs)]</span>\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">undocumented_two</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">2</span> }\n    }\n\n    <span class=\"hljs-comment\">// Missing documentation signals a warning here</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">undocumented_too</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">3</span> }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This example shows how one can use <code class=\"hljs\">forbid</code> to disallow uses of <code class=\"hljs\">allow</code> for\nthat lint check:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[forbid(missing_docs)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> m3 {\n    <span class=\"hljs-comment\">// Attempting to toggle warning signals an error here</span>\n    <span class=\"hljs-meta\">#[allow(missing_docs)]</span>\n    <span class=\"hljs-comment\">/// Returns 2.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">undocumented_too</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">2</span> }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p>Note: <code class=\"hljs\">rustc</code> allows setting lint levels on the\n<a href=\"attributes/../../rustc/lints/levels.html#via-compiler-flag\">command-line</a>, and also supports <a href=\"attributes/../../rustc/lints/levels.html#capping-lints\">setting\ncaps</a> on the lints that are reported.</p>\n</blockquote>\n<h3 id=\"lint-groups\"><a class=\"header\" href=\"#lint-groups\">Lint groups</a></h3>\n<p>Lints may be organized into named groups so that the level of related lints\ncan be adjusted together. Using a named group is equivalent to listing out the\nlints within that group.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// This allows all lints in the \"unused\" group.</span>\n<span class=\"hljs-meta\">#[allow(unused)]</span>\n<span class=\"hljs-comment\">// This overrides the \"unused_must_use\" lint from the \"unused\"</span>\n<span class=\"hljs-comment\">// group to deny.</span>\n<span class=\"hljs-meta\">#[deny(unused_must_use)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example</span></span>() {\n    <span class=\"hljs-comment\">// This does not generate a warning because the \"unused_variables\"</span>\n    <span class=\"hljs-comment\">// lint is in the \"unused\" group.</span>\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-comment\">// This generates an error because the result is unused and</span>\n    <span class=\"hljs-comment\">// \"unused_must_use\" is marked as \"deny\".</span>\n    std::fs::remove_file(<span class=\"hljs-string\">\"some_file\"</span>); <span class=\"hljs-comment\">// ERROR: unused `Result` that must be used</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>There is a special group named \"warnings\" which includes all lints at the\n\"warn\" level. The \"warnings\" group ignores attribute order and applies to all\nlints that would otherwise warn within the entity.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">an_unsafe_fn</span></span>() {}\n</span><span class=\"hljs-comment\">// The order of these two attributes does not matter.</span>\n<span class=\"hljs-meta\">#[deny(warnings)]</span>\n<span class=\"hljs-comment\">// The unsafe_code lint is normally \"allow\" by default.</span>\n<span class=\"hljs-meta\">#[warn(unsafe_code)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example_err</span></span>() {\n    <span class=\"hljs-comment\">// This is an error because the `unsafe_code` warning has</span>\n    <span class=\"hljs-comment\">// been lifted to \"deny\".</span>\n    <span class=\"hljs-keyword\">unsafe</span> { an_unsafe_fn() } <span class=\"hljs-comment\">// ERROR: usage of `unsafe` block</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"tool-lint-attributes\"><a class=\"header\" href=\"#tool-lint-attributes\">Tool lint attributes</a></h3>\n<p>Tool lints allows using scoped lints, to <code class=\"hljs\">allow</code>, <code class=\"hljs\">warn</code>, <code class=\"hljs\">deny</code> or <code class=\"hljs\">forbid</code>\nlints of certain tools.</p>\n<p>Tool lints only get checked when the associated tool is active. If a lint\nattribute, such as <code class=\"hljs\">allow</code>, references a nonexistent tool lint, the compiler\nwill not warn about the nonexistent lint until you use the tool.</p>\n<p>Otherwise, they work just like regular lint attributes:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-comment\">// set the entire `pedantic` clippy lint group to warn</span>\n<span class=\"hljs-meta\">#![warn(clippy::pedantic)]</span>\n<span class=\"hljs-comment\">// silence warnings from the `filter_map` clippy lint</span>\n<span class=\"hljs-meta\">#![allow(clippy::filter_map)]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-comment\">// silence the `cmp_nan` clippy lint just for this function</span>\n<span class=\"hljs-meta\">#[allow(clippy::cmp_nan)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n    <span class=\"hljs-comment\">// ...</span>\n}</code></pre></pre>\n<blockquote>\n<p>Note: <code class=\"hljs\">rustc</code> currently recognizes the tool lints for \"<a href=\"https://github.com/rust-lang/rust-clippy\">clippy</a>\" and \"<a href=\"attributes/../../rustdoc/lints.html\">rustdoc</a>\".</p>\n</blockquote>\n<h2 id=\"the-deprecated-attribute\"><a class=\"header\" href=\"#the-deprecated-attribute\">The <code>deprecated</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">deprecated</code> attribute</em> marks an item as deprecated. <code class=\"hljs\">rustc</code> will issue\nwarnings on usage of <code class=\"hljs\">#[deprecated]</code> items. <code class=\"hljs\">rustdoc</code> will show item\ndeprecation, including the <code class=\"hljs\">since</code> version and <code class=\"hljs\">note</code>, if available.</p>\n<p>The <code class=\"hljs\">deprecated</code> attribute has several forms:</p>\n<ul>\n<li><code class=\"hljs\">deprecated</code> —&nbsp;Issues a generic message.</li>\n<li><code class=\"hljs\">deprecated = \"message\"</code> —&nbsp;Includes the given string in the deprecation\nmessage.</li>\n<li><a href=\"attributes/../attributes.html#meta-item-attribute-syntax\"><em>MetaListNameValueStr</em></a> syntax with two optional fields:\n<ul>\n<li><code class=\"hljs\">since</code> —&nbsp;Specifies a version number when the item was deprecated. <code class=\"hljs\">rustc</code>\ndoes not currently interpret the string, but external tools like <a href=\"https://github.com/rust-lang/rust-clippy\">Clippy</a>\nmay check the validity of the value.</li>\n<li><code class=\"hljs\">note</code> —&nbsp;Specifies a string that should be included in the deprecation\nmessage. This is typically used to provide an explanation about the\ndeprecation and preferred alternatives.</li>\n</ul>\n</li>\n</ul>\n<p>The <code class=\"hljs\">deprecated</code> attribute may be applied to any <a href=\"attributes/../items.html\">item</a>, <a href=\"attributes/../items/traits.html\">trait item</a>, <a href=\"attributes/../items/enumerations.html\">enum\nvariant</a>, <a href=\"attributes/../items/structs.html\">struct field</a>, <a href=\"attributes/../items/external-blocks.html\">external block item</a>, or <a href=\"attributes/../macros-by-example.html\">macro definition</a>. It\ncannot be applied to <a href=\"attributes/../items/implementations.html#trait-implementations\">trait implementation items</a>. When applied to an item\ncontaining other items, such as a <a href=\"attributes/../items/modules.html\">module</a> or <a href=\"attributes/../items/implementations.html\">implementation</a>, all child\nitems inherit the deprecation attribute.</p>\n<!-- NOTE: It is only rejected for trait impl items\n(AnnotationKind::Prohibited). In all other locations, it is silently ignored.\nTuple struct fields are ignored.\n-->\n<p>Here is an example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[deprecated(since = <span class=\"hljs-meta-string\">\"5.2.0\"</span>, note = <span class=\"hljs-meta-string\">\"foo was rarely used. Users should instead use bar\"</span>)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1270-deprecation.md\">RFC</a> contains motivations and more details.</p>\n<h2 id=\"the-must_use-attribute\"><a class=\"header\" href=\"#the-must_use-attribute\">The <code>must_use</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">must_use</code> attribute</em> is used to issue a diagnostic warning when a value\nis not \"used\". It can be applied to user-defined composite types\n(<a href=\"attributes/../items/structs.html\"><code class=\"hljs\">struct</code>s</a>, <a href=\"attributes/../items/enumerations.html\"><code class=\"hljs\">enum</code>s</a>, and <a href=\"attributes/../items/unions.html\"><code class=\"hljs\">union</code>s</a>), <a href=\"attributes/../items/functions.html\">functions</a>,\nand <a href=\"attributes/../items/traits.html\">traits</a>.</p>\n<p>The <code class=\"hljs\">must_use</code> attribute may include a message by using the\n<a href=\"attributes/../attributes.html#meta-item-attribute-syntax\"><em>MetaNameValueStr</em></a> syntax such as <code class=\"hljs\">#[must_use = \"example message\"]</code>. The\nmessage will be given alongside the warning.</p>\n<p>When used on user-defined composite types, if the <a href=\"attributes/../expressions.html\">expression</a> of an\n<a href=\"attributes/../statements.html#expression-statements\">expression statement</a> has that type, then the <code class=\"hljs\">unused_must_use</code> lint is\nviolated.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[must_use]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MustUse</span></span> {\n    <span class=\"hljs-comment\">// some fields</span>\n}\n\n<span class=\"boring\"><span class=\"hljs-keyword\">impl</span> MustUse {\n</span><span class=\"boring\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; MustUse { MustUse {} }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-comment\">// Violates the `unused_must_use` lint.</span>\nMustUse::new();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When used on a function, if the <a href=\"attributes/../expressions.html\">expression</a> of an <a href=\"attributes/../statements.html#expression-statements\">expression statement</a> is a\n<a href=\"attributes/../expressions/call-expr.html\">call expression</a> to that function, then the <code class=\"hljs\">unused_must_use</code> lint is\nviolated.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[must_use]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">five</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">5i32</span> }\n\n<span class=\"hljs-comment\">// Violates the unused_must_use lint.</span>\nfive();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When used on a <a href=\"attributes/../items/traits.html\">trait declaration</a>, a <a href=\"attributes/../expressions/call-expr.html\">call expression</a> of an <a href=\"attributes/../statements.html#expression-statements\">expression\nstatement</a> to a function that returns an <a href=\"attributes/../types/impl-trait.html\">impl trait</a> or a <a href=\"attributes/../types/trait-object.html\">dyn trait</a> of that trait violates\nthe <code class=\"hljs\">unused_must_use</code> lint.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[must_use]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Critical</span></span> {}\n<span class=\"hljs-keyword\">impl</span> Critical <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i32</span> {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">get_critical</span></span>() -&gt; <span class=\"hljs-keyword\">impl</span> Critical {\n    <span class=\"hljs-number\">4i32</span>\n}\n\n<span class=\"hljs-comment\">// Violates the `unused_must_use` lint.</span>\nget_critical();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When used on a function in a trait declaration, then the behavior also applies\nwhen the call expression is a function from an implementation of the trait.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {\n    <span class=\"hljs-meta\">#[must_use]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">use_me</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">i32</span>;\n}\n\n<span class=\"hljs-keyword\">impl</span> Trait <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i32</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">use_me</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">0i32</span> }\n}\n\n<span class=\"hljs-comment\">// Violates the `unused_must_use` lint.</span>\n<span class=\"hljs-number\">5i32</span>.use_me();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When used on a function in a trait implementation, the attribute does nothing.</p>\n<blockquote>\n<p>Note: Trivial no-op expressions containing the value will not violate the\nlint. Examples include wrapping the value in a type that does not implement\n<a href=\"attributes/../special-types-and-traits.html#drop\"><code class=\"hljs\">Drop</code></a> and then not using that type and being the final expression of a\n<a href=\"attributes/../expressions/block-expr.html\">block expression</a> that is not used.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[must_use]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">five</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">5i32</span> }\n\n<span class=\"hljs-comment\">// None of these violate the unused_must_use lint.</span>\n(five(),);\n<span class=\"hljs-literal\">Some</span>(five());\n{ five() };\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">true</span> { five() } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-number\">0i32</span> };\n<span class=\"hljs-keyword\">match</span> <span class=\"hljs-literal\">true</span> {\n    _ =&gt; five()\n};\n<span class=\"boring\">}</span></code></pre></pre>\n</blockquote>\n<blockquote>\n<p>Note: It is idiomatic to use a <a href=\"attributes/../statements.html#let-statements\">let statement</a> with a pattern of <code class=\"hljs\">_</code>\nwhen a must-used value is purposely discarded.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[must_use]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">five</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">5i32</span> }\n\n<span class=\"hljs-comment\">// Does not violate the unused_must_use lint.</span>\n<span class=\"hljs-keyword\">let</span> _ = five();\n<span class=\"boring\">}</span></code></pre></pre>\n</blockquote>\n<h2 id=\"the-diagnostic-tool-attribute-namespace\"><a class=\"header\" href=\"#the-diagnostic-tool-attribute-namespace\">The <code>diagnostic</code> tool attribute namespace</a></h2>\n<p>The <code class=\"hljs\">#[diagnostic]</code> attribute namespace is a home for attributes to influence compile-time error messages.\nThe hints provided by these attributes are not guaranteed to be used.\nUnknown attributes in this namespace are accepted, though they may emit warnings for unused attributes.\nAdditionally, invalid inputs to known attributes will typically be a warning (see the attribute definitions for details).\nThis is meant to allow adding or discarding attributes and changing inputs in the future to allow changes without the need to keep the non-meaningful attributes or options working.</p>\n<h3 id=\"the-diagnosticon_unimplemented-attribute\"><a class=\"header\" href=\"#the-diagnosticon_unimplemented-attribute\">The <code>diagnostic::on_unimplemented</code> attribute</a></h3>\n<p>The <code class=\"hljs\">#[diagnostic::on_unimplemented]</code> attribute is a hint to the compiler to supplement the error message that would normally be generated in scenarios where a trait is required but not implemented on a type.\nThe attribute should be placed on a <a href=\"attributes/../items/traits.html\">trait declaration</a>, though it is not an error to be located in other positions.\nThe attribute uses the <a href=\"attributes/../attributes.html#meta-item-attribute-syntax\"><em>MetaListNameValueStr</em></a> syntax to specify its inputs, though any malformed input to the attribute is not considered as an error to provide both forwards and backwards compatibility.\nThe following keys have the given meaning:</p>\n<ul>\n<li><code class=\"hljs\">message</code> — The text for the top level error message.</li>\n<li><code class=\"hljs\">label</code> — The text for the label shown inline in the broken code in the error message.</li>\n<li><code class=\"hljs\">note</code> — Provides additional notes.</li>\n</ul>\n<p>The <code class=\"hljs\">note</code> option can appear several times, which results in several note messages being emitted.\nIf any of the other options appears several times the first occurrence of the relevant option specifies the actually used value.\nAny other occurrence generates an lint warning.\nFor any other non-existing option a lint-warning is generated.</p>\n<p>All three options accept a string as an argument, interpreted using the same formatting as a <a href=\"attributes/../../std/fmt/index.html\"><code class=\"hljs\">std::fmt</code></a> string.\nFormat parameters with the given named parameter will be replaced with the following text:</p>\n<ul>\n<li><code class=\"hljs\">{Self}</code> — The name of the type implementing the trait.</li>\n<li><code class=\"hljs\">{</code> <em>GenericParameterName</em> <code class=\"hljs\">}</code> — The name of the generic argument's type for the given generic parameter.</li>\n</ul>\n<p>Any other format parameter will generate a warning, but will otherwise be included in the string as-is.</p>\n<p>Invalid format strings may generate a warning, but are otherwise allowed, but may not display as intended.\nFormat specifiers may generate a warning, but are otherwise ignored.</p>\n<p>In this example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust compile_fail E0277 edition2021 hljs\"><span class=\"hljs-meta\">#[diagnostic::on_unimplemented(\n    message = <span class=\"hljs-meta-string\">\"My Message for `ImportantTrait&lt;{A}&gt;` implemented for `{Self}`\"</span>,\n    label = <span class=\"hljs-meta-string\">\"My Label\"</span>,\n    note = <span class=\"hljs-meta-string\">\"Note 1\"</span>,\n    note = <span class=\"hljs-meta-string\">\"Note 2\"</span>\n)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">ImportantTrait</span></span>&lt;A&gt; {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">use_my_trait</span></span>(_: <span class=\"hljs-keyword\">impl</span> ImportantTrait&lt;<span class=\"hljs-built_in\">i32</span>&gt;) {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    use_my_trait(<span class=\"hljs-built_in\">String</span>::new());\n}</code></pre></pre>\n<p>the compiler may generate an error message which looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error[E0277]: My Message for `ImportantTrait&lt;i32&gt;` implemented for `String`\n  --&gt; src/main.rs:14:18\n   |\n14 |     use_my_trait(String::new());\n   |     ------------ ^^^^^^^^^^^^^ My Label\n   |     |\n   |     required by a bound introduced by this call\n   |\n   = help: the trait `ImportantTrait&lt;i32&gt;` is not implemented for `String`\n   = note: Note 1\n   = note: Note 2\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"code-generation-attributes\"><a class=\"header\" href=\"#code-generation-attributes\">Code generation attributes</a></h1>\n<p>The following <a href=\"attributes/../attributes.html\">attributes</a> are used for controlling code generation.</p>\n<h2 id=\"optimization-hints\"><a class=\"header\" href=\"#optimization-hints\">Optimization hints</a></h2>\n<p>The <code class=\"hljs\">cold</code> and <code class=\"hljs\">inline</code> <a href=\"attributes/../attributes.html\">attributes</a> give suggestions to generate code in a\nway that may be faster than what it would do without the hint. The attributes\nare only hints, and may be ignored.</p>\n<p>Both attributes can be used on <a href=\"attributes/../items/functions.html\">functions</a>. When applied to a function in a\n<a href=\"attributes/../items/traits.html\">trait</a>, they apply only to that function when used as a default function for\na trait implementation and not to all trait implementations. The attributes\nhave no effect on a trait function without a body.</p>\n<h3 id=\"the-inline-attribute\"><a class=\"header\" href=\"#the-inline-attribute\">The <code>inline</code> attribute</a></h3>\n<p>The <em><code class=\"hljs\">inline</code> <a href=\"attributes/../attributes.html\">attribute</a></em> suggests that a copy of the attributed function\nshould be placed in the caller, rather than generating code to call the\nfunction where it is defined.</p>\n<blockquote>\n<p><em><strong>Note</strong></em>: The <code class=\"hljs\">rustc</code> compiler automatically inlines functions based on\ninternal heuristics. Incorrectly inlining functions can make the program\nslower, so this attribute should be used with care.</p>\n</blockquote>\n<p>There are three ways to use the inline attribute:</p>\n<ul>\n<li><code class=\"hljs\">#[inline]</code> <em>suggests</em> performing an inline expansion.</li>\n<li><code class=\"hljs\">#[inline(always)]</code> <em>suggests</em> that an inline expansion should always be\nperformed.</li>\n<li><code class=\"hljs\">#[inline(never)]</code> <em>suggests</em> that an inline expansion should never be\nperformed.</li>\n</ul>\n<blockquote>\n<p><em><strong>Note</strong></em>: <code class=\"hljs\">#[inline]</code> in every form is a hint, with no <em>requirements</em>\non the language to place a copy of the attributed function in the caller.</p>\n</blockquote>\n<h3 id=\"the-cold-attribute\"><a class=\"header\" href=\"#the-cold-attribute\">The <code>cold</code> attribute</a></h3>\n<p>The <em><code class=\"hljs\">cold</code> <a href=\"attributes/../attributes.html\">attribute</a></em> suggests that the attributed function is unlikely to\nbe called.</p>\n<h2 id=\"the-no_builtins-attribute\"><a class=\"header\" href=\"#the-no_builtins-attribute\">The <code>no_builtins</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">no_builtins</code> <a href=\"attributes/../attributes.html\">attribute</a></em> may be applied at the crate level to disable\noptimizing certain code patterns to invocations of library functions that are\nassumed to exist.</p>\n<h2 id=\"the-target_feature-attribute\"><a class=\"header\" href=\"#the-target_feature-attribute\">The <code>target_feature</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">target_feature</code> <a href=\"attributes/../attributes.html\">attribute</a></em> may be applied to a function to\nenable code generation of that function for specific platform architecture\nfeatures. It uses the <a href=\"attributes/../attributes.html#meta-item-attribute-syntax\"><em>MetaListNameValueStr</em></a> syntax with a single key of\n<code class=\"hljs\">enable</code> whose value is a string of comma-separated feature names to enable.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(target_feature = <span class=\"hljs-meta-string\">\"avx2\"</span>)]</span>\n</span><span class=\"hljs-meta\">#[target_feature(enable = <span class=\"hljs-meta-string\">\"avx2\"</span>)]</span>\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo_avx2</span></span>() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Each <a href=\"attributes/../conditional-compilation.html#target_arch\">target architecture</a> has a set of features that may be enabled. It is an\nerror to specify a feature for a target architecture that the crate is not\nbeing compiled for.</p>\n<p>It is <a href=\"attributes/../behavior-considered-undefined.html\">undefined behavior</a> to call a function that is compiled with a feature\nthat is not supported on the current platform the code is running on, <em>except</em>\nif the platform explicitly documents this to be safe.</p>\n<p>Functions marked with <code class=\"hljs\">target_feature</code> are not inlined into a context that\ndoes not support the given features. The <code class=\"hljs\">#[inline(always)]</code> attribute may not\nbe used with a <code class=\"hljs\">target_feature</code> attribute.</p>\n<h3 id=\"available-features\"><a class=\"header\" href=\"#available-features\">Available features</a></h3>\n<p>The following is a list of the available feature names.</p>\n<h4 id=\"x86-or-x86_64\"><a class=\"header\" href=\"#x86-or-x86_64\"><code>x86</code> or <code>x86_64</code></a></h4>\n<p>Executing code with unsupported features is undefined behavior on this platform.\nHence this platform requires that <code class=\"hljs\">#[target_feature]</code> is only applied to <a href=\"attributes/../unsafe-keyword.html\"><code class=\"hljs\">unsafe</code>\nfunctions</a>.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Feature</th><th>Implicitly Enables</th><th>Description</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">adx</code></td><td></td><td><a href=\"https://en.wikipedia.org/wiki/Intel_ADX\">ADX</a> —&nbsp;Multi-Precision Add-Carry Instruction Extensions</td></tr>\n<tr><td><code class=\"hljs\">aes</code></td><td><code class=\"hljs\">sse2</code></td><td><a href=\"https://en.wikipedia.org/wiki/AES_instruction_set\">AES</a> —&nbsp;Advanced Encryption Standard</td></tr>\n<tr><td><code class=\"hljs\">avx</code></td><td><code class=\"hljs\">sse4.2</code></td><td><a href=\"https://en.wikipedia.org/wiki/Advanced_Vector_Extensions\">AVX</a> —&nbsp;Advanced Vector Extensions</td></tr>\n<tr><td><code class=\"hljs\">avx2</code></td><td><code class=\"hljs\">avx</code></td><td><a href=\"https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#AVX2\">AVX2</a> —&nbsp;Advanced Vector Extensions 2</td></tr>\n<tr><td><code class=\"hljs\">bmi1</code></td><td></td><td><a href=\"https://en.wikipedia.org/wiki/Bit_Manipulation_Instruction_Sets\">BMI1</a> —&nbsp;Bit Manipulation Instruction Sets</td></tr>\n<tr><td><code class=\"hljs\">bmi2</code></td><td></td><td><a href=\"https://en.wikipedia.org/wiki/Bit_Manipulation_Instruction_Sets#BMI2\">BMI2</a> —&nbsp;Bit Manipulation Instruction Sets 2</td></tr>\n<tr><td><code class=\"hljs\">cmpxchg16b</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/cmpxchg8b:cmpxchg16b\"><code class=\"hljs\">cmpxchg16b</code></a> - Compares and exchange 16 bytes (128 bits) of data atomically</td></tr>\n<tr><td><code class=\"hljs\">f16c</code></td><td><code class=\"hljs\">avx</code></td><td><a href=\"https://en.wikipedia.org/wiki/F16C\">F16C</a> — 16-bit floating point conversion instructions</td></tr>\n<tr><td><code class=\"hljs\">fma</code></td><td><code class=\"hljs\">avx</code></td><td><a href=\"https://en.wikipedia.org/wiki/FMA_instruction_set\">FMA3</a> —&nbsp;Three-operand fused multiply-add</td></tr>\n<tr><td><code class=\"hljs\">fxsr</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/fxsave\"><code class=\"hljs\">fxsave</code></a> and <a href=\"https://www.felixcloutier.com/x86/fxrstor\"><code class=\"hljs\">fxrstor</code></a> —&nbsp;Save and restore x87 FPU, MMX Technology, and SSE State</td></tr>\n<tr><td><code class=\"hljs\">lzcnt</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/lzcnt\"><code class=\"hljs\">lzcnt</code></a> —&nbsp;Leading zeros count</td></tr>\n<tr><td><code class=\"hljs\">movbe</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/movbe\"><code class=\"hljs\">movbe</code></a> - Move data after swapping bytes</td></tr>\n<tr><td><code class=\"hljs\">pclmulqdq</code></td><td><code class=\"hljs\">sse2</code></td><td><a href=\"https://www.felixcloutier.com/x86/pclmulqdq\"><code class=\"hljs\">pclmulqdq</code></a> — Packed carry-less multiplication quadword</td></tr>\n<tr><td><code class=\"hljs\">popcnt</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/popcnt\"><code class=\"hljs\">popcnt</code></a> —&nbsp;Count of bits set to 1</td></tr>\n<tr><td><code class=\"hljs\">rdrand</code></td><td></td><td><a href=\"https://en.wikipedia.org/wiki/RdRand\"><code class=\"hljs\">rdrand</code></a> —&nbsp;Read random number</td></tr>\n<tr><td><code class=\"hljs\">rdseed</code></td><td></td><td><a href=\"https://en.wikipedia.org/wiki/RdRand\"><code class=\"hljs\">rdseed</code></a> —&nbsp;Read random seed</td></tr>\n<tr><td><code class=\"hljs\">sha</code></td><td><code class=\"hljs\">sse2</code></td><td><a href=\"https://en.wikipedia.org/wiki/Intel_SHA_extensions\">SHA</a> —&nbsp;Secure Hash Algorithm</td></tr>\n<tr><td><code class=\"hljs\">sse</code></td><td></td><td><a href=\"https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions\">SSE</a> —&nbsp;Streaming <abbr title=\"Single Instruction Multiple Data\">SIMD</abbr> Extensions</td></tr>\n<tr><td><code class=\"hljs\">sse2</code></td><td><code class=\"hljs\">sse</code></td><td><a href=\"https://en.wikipedia.org/wiki/SSE2\">SSE2</a> —&nbsp;Streaming SIMD Extensions 2</td></tr>\n<tr><td><code class=\"hljs\">sse3</code></td><td><code class=\"hljs\">sse2</code></td><td><a href=\"https://en.wikipedia.org/wiki/SSE3\">SSE3</a> —&nbsp;Streaming SIMD Extensions 3</td></tr>\n<tr><td><code class=\"hljs\">sse4.1</code></td><td><code class=\"hljs\">ssse3</code></td><td><a href=\"https://en.wikipedia.org/wiki/SSE4#SSE4.1\">SSE4.1</a> —&nbsp;Streaming SIMD Extensions 4.1</td></tr>\n<tr><td><code class=\"hljs\">sse4.2</code></td><td><code class=\"hljs\">sse4.1</code></td><td><a href=\"https://en.wikipedia.org/wiki/SSE4#SSE4.2\">SSE4.2</a> —&nbsp;Streaming SIMD Extensions 4.2</td></tr>\n<tr><td><code class=\"hljs\">ssse3</code></td><td><code class=\"hljs\">sse3</code></td><td><a href=\"https://en.wikipedia.org/wiki/SSSE3\">SSSE3</a> —&nbsp;Supplemental Streaming SIMD Extensions 3</td></tr>\n<tr><td><code class=\"hljs\">xsave</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/xsave\"><code class=\"hljs\">xsave</code></a> —&nbsp;Save processor extended states</td></tr>\n<tr><td><code class=\"hljs\">xsavec</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/xsavec\"><code class=\"hljs\">xsavec</code></a> —&nbsp;Save processor extended states with compaction</td></tr>\n<tr><td><code class=\"hljs\">xsaveopt</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/xsaveopt\"><code class=\"hljs\">xsaveopt</code></a> —&nbsp;Save processor extended states optimized</td></tr>\n<tr><td><code class=\"hljs\">xsaves</code></td><td></td><td><a href=\"https://www.felixcloutier.com/x86/xsaves\"><code class=\"hljs\">xsaves</code></a> —&nbsp;Save processor extended states supervisor</td></tr>\n</tbody></table>\n</div><!-- Keep links near each table to make it easier to move and update. -->\n<h4 id=\"aarch64\"><a class=\"header\" href=\"#aarch64\"><code>aarch64</code></a></h4>\n<p>This platform requires that <code class=\"hljs\">#[target_feature]</code> is only applied to <a href=\"attributes/../unsafe-keyword.html\"><code class=\"hljs\">unsafe</code>\nfunctions</a>.</p>\n<p>Further documentation on these features can be found in the <a href=\"https://developer.arm.com/documentation/ddi0487/latest\">ARM Architecture\nReference Manual</a>, or elsewhere on <a href=\"https://developer.arm.com\">developer.arm.com</a>.</p>\n<blockquote>\n<p><em><strong>Note</strong></em>: The following pairs of features should both be marked as enabled\nor disabled together if used:</p>\n<ul>\n<li><code class=\"hljs\">paca</code> and <code class=\"hljs\">pacg</code>, which LLVM currently implements as one feature.</li>\n</ul>\n</blockquote>\n<div class=\"table-wrapper\"><table><thead><tr><th>Feature</th><th>Implicitly Enables</th><th>Feature Name</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">aes</code></td><td><code class=\"hljs\">neon</code></td><td>FEAT_AES &amp; FEAT_PMULL - Advanced <abbr title=\"Single Instruction Multiple Data\">SIMD</abbr> AES &amp; PMULL instructions</td></tr>\n<tr><td><code class=\"hljs\">bf16</code></td><td></td><td>FEAT_BF16 - BFloat16 instructions</td></tr>\n<tr><td><code class=\"hljs\">bti</code></td><td></td><td>FEAT_BTI - Branch Target Identification</td></tr>\n<tr><td><code class=\"hljs\">crc</code></td><td></td><td>FEAT_CRC - CRC32 checksum instructions</td></tr>\n<tr><td><code class=\"hljs\">dit</code></td><td></td><td>FEAT_DIT - Data Independent Timing instructions</td></tr>\n<tr><td><code class=\"hljs\">dotprod</code></td><td></td><td>FEAT_DotProd - Advanced SIMD Int8 dot product instructions</td></tr>\n<tr><td><code class=\"hljs\">dpb</code></td><td></td><td>FEAT_DPB - Data cache clean to point of persistence</td></tr>\n<tr><td><code class=\"hljs\">dpb2</code></td><td></td><td>FEAT_DPB2 - Data cache clean to point of deep persistence</td></tr>\n<tr><td><code class=\"hljs\">f32mm</code></td><td><code class=\"hljs\">sve</code></td><td>FEAT_F32MM - SVE single-precision FP matrix multiply instruction</td></tr>\n<tr><td><code class=\"hljs\">f64mm</code></td><td><code class=\"hljs\">sve</code></td><td>FEAT_F64MM - SVE double-precision FP matrix multiply instruction</td></tr>\n<tr><td><code class=\"hljs\">fcma</code></td><td><code class=\"hljs\">neon</code></td><td>FEAT_FCMA - Floating point complex number support</td></tr>\n<tr><td><code class=\"hljs\">fhm</code></td><td><code class=\"hljs\">fp16</code></td><td>FEAT_FHM - Half-precision FP FMLAL instructions</td></tr>\n<tr><td><code class=\"hljs\">flagm</code></td><td></td><td>FEAT_FlagM - Conditional flag manipulation</td></tr>\n<tr><td><code class=\"hljs\">fp16</code></td><td><code class=\"hljs\">neon</code></td><td>FEAT_FP16 - Half-precision FP data processing</td></tr>\n<tr><td><code class=\"hljs\">frintts</code></td><td></td><td>FEAT_FRINTTS - Floating-point to int helper instructions</td></tr>\n<tr><td><code class=\"hljs\">i8mm</code></td><td></td><td>FEAT_I8MM - Int8 Matrix Multiplication</td></tr>\n<tr><td><code class=\"hljs\">jsconv</code></td><td><code class=\"hljs\">neon</code></td><td>FEAT_JSCVT - JavaScript conversion instruction</td></tr>\n<tr><td><code class=\"hljs\">lse</code></td><td></td><td>FEAT_LSE - Large System Extension</td></tr>\n<tr><td><code class=\"hljs\">lor</code></td><td></td><td>FEAT_LOR - Limited Ordering Regions extension</td></tr>\n<tr><td><code class=\"hljs\">mte</code></td><td></td><td>FEAT_MTE &amp; FEAT_MTE2 - Memory Tagging Extension</td></tr>\n<tr><td><code class=\"hljs\">neon</code></td><td></td><td>FEAT_FP &amp; FEAT_AdvSIMD - Floating Point and Advanced SIMD extension</td></tr>\n<tr><td><code class=\"hljs\">pan</code></td><td></td><td>FEAT_PAN - Privileged Access-Never extension</td></tr>\n<tr><td><code class=\"hljs\">paca</code></td><td></td><td>FEAT_PAuth - Pointer Authentication (address authentication)</td></tr>\n<tr><td><code class=\"hljs\">pacg</code></td><td></td><td>FEAT_PAuth - Pointer Authentication (generic authentication)</td></tr>\n<tr><td><code class=\"hljs\">pmuv3</code></td><td></td><td>FEAT_PMUv3 - Performance Monitors extension (v3)</td></tr>\n<tr><td><code class=\"hljs\">rand</code></td><td></td><td>FEAT_RNG - Random Number Generator</td></tr>\n<tr><td><code class=\"hljs\">ras</code></td><td></td><td>FEAT_RAS &amp; FEAT_RASv1p1 - Reliability, Availability and Serviceability extension</td></tr>\n<tr><td><code class=\"hljs\">rcpc</code></td><td></td><td>FEAT_LRCPC - Release consistent Processor Consistent</td></tr>\n<tr><td><code class=\"hljs\">rcpc2</code></td><td><code class=\"hljs\">rcpc</code></td><td>FEAT_LRCPC2 - RcPc with immediate offsets</td></tr>\n<tr><td><code class=\"hljs\">rdm</code></td><td></td><td>FEAT_RDM - Rounding Double Multiply accumulate</td></tr>\n<tr><td><code class=\"hljs\">sb</code></td><td></td><td>FEAT_SB - Speculation Barrier</td></tr>\n<tr><td><code class=\"hljs\">sha2</code></td><td><code class=\"hljs\">neon</code></td><td>FEAT_SHA1 &amp; FEAT_SHA256 - Advanced SIMD SHA instructions</td></tr>\n<tr><td><code class=\"hljs\">sha3</code></td><td><code class=\"hljs\">sha2</code></td><td>FEAT_SHA512 &amp; FEAT_SHA3 - Advanced SIMD SHA instructions</td></tr>\n<tr><td><code class=\"hljs\">sm4</code></td><td><code class=\"hljs\">neon</code></td><td>FEAT_SM3 &amp; FEAT_SM4 - Advanced SIMD SM3/4 instructions</td></tr>\n<tr><td><code class=\"hljs\">spe</code></td><td></td><td>FEAT_SPE - Statistical Profiling Extension</td></tr>\n<tr><td><code class=\"hljs\">ssbs</code></td><td></td><td>FEAT_SSBS &amp; FEAT_SSBS2 - Speculative Store Bypass Safe</td></tr>\n<tr><td><code class=\"hljs\">sve</code></td><td><code class=\"hljs\">fp16</code></td><td>FEAT_SVE - Scalable Vector Extension</td></tr>\n<tr><td><code class=\"hljs\">sve2</code></td><td><code class=\"hljs\">sve</code></td><td>FEAT_SVE2 - Scalable Vector Extension 2</td></tr>\n<tr><td><code class=\"hljs\">sve2-aes</code></td><td><code class=\"hljs\">sve2</code>, <code class=\"hljs\">aes</code></td><td>FEAT_SVE_AES - SVE AES instructions</td></tr>\n<tr><td><code class=\"hljs\">sve2-sm4</code></td><td><code class=\"hljs\">sve2</code>, <code class=\"hljs\">sm4</code></td><td>FEAT_SVE_SM4 - SVE SM4 instructions</td></tr>\n<tr><td><code class=\"hljs\">sve2-sha3</code></td><td><code class=\"hljs\">sve2</code>, <code class=\"hljs\">sha3</code></td><td>FEAT_SVE_SHA3 - SVE SHA3 instructions</td></tr>\n<tr><td><code class=\"hljs\">sve2-bitperm</code></td><td><code class=\"hljs\">sve2</code></td><td>FEAT_SVE_BitPerm - SVE Bit Permute</td></tr>\n<tr><td><code class=\"hljs\">tme</code></td><td></td><td>FEAT_TME - Transactional Memory Extension</td></tr>\n<tr><td><code class=\"hljs\">vh</code></td><td></td><td>FEAT_VHE - Virtualization Host Extensions</td></tr>\n</tbody></table>\n</div>\n<h4 id=\"riscv32-or-riscv64\"><a class=\"header\" href=\"#riscv32-or-riscv64\"><code>riscv32</code> or <code>riscv64</code></a></h4>\n<p>This platform requires that <code class=\"hljs\">#[target_feature]</code> is only applied to <a href=\"attributes/../unsafe-keyword.html\"><code class=\"hljs\">unsafe</code>\nfunctions</a>.</p>\n<p>Further documentation on these features can be found in their respective\nspecification. Many specifications are described in the <a href=\"https://github.com/riscv/riscv-isa-manual\">RISC-V ISA Manual</a> or\nin another manual hosted on the <a href=\"https://github.com/riscv\">RISC-V GitHub Account</a>.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Feature</th><th>Implicitly Enables</th><th>Description</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">a</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-isa-manual/blob/de46343a245c6ee1f7b1a40c92fe1a86bd4f4978/src/a-st-ext.adoc\">A</a> —&nbsp;Atomic instructions</td></tr>\n<tr><td><code class=\"hljs\">c</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-isa-manual/blob/de46343a245c6ee1f7b1a40c92fe1a86bd4f4978/src/c-st-ext.adoc\">C</a> —&nbsp;Compressed instructions</td></tr>\n<tr><td><code class=\"hljs\">m</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-isa-manual/blob/de46343a245c6ee1f7b1a40c92fe1a86bd4f4978/src/m-st-ext.adoc\">M</a> —&nbsp;Integer Multiplication and Division instructions</td></tr>\n<tr><td><code class=\"hljs\">zb</code></td><td><code class=\"hljs\">zba</code>, <code class=\"hljs\">zbc</code>, <code class=\"hljs\">zbs</code></td><td><a href=\"https://github.com/riscv/riscv-bitmanip\">Zb</a> —&nbsp;Bit Manipulation instructions</td></tr>\n<tr><td><code class=\"hljs\">zba</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zba.adoc\">Zba</a> —&nbsp;Address Generation instructions</td></tr>\n<tr><td><code class=\"hljs\">zbb</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbb.adoc\">Zbb</a> — Basic bit-manipulation</td></tr>\n<tr><td><code class=\"hljs\">zbc</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbc.adoc\">Zbc</a> —&nbsp;Carry-less multiplication</td></tr>\n<tr><td><code class=\"hljs\">zbkb</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbkb.adoc\">Zbkb</a> —&nbsp;Bit Manipulation Instructions for Cryptography</td></tr>\n<tr><td><code class=\"hljs\">zbkc</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbc.adoc\">Zbkc</a> —&nbsp;Carry-less multiplication for Cryptography</td></tr>\n<tr><td><code class=\"hljs\">zbkx</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbkx.adoc\">Zbkx</a> —&nbsp;Crossbar permutations</td></tr>\n<tr><td><code class=\"hljs\">zbs</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbs.adoc\">Zbs</a> — Single-bit instructions</td></tr>\n<tr><td><code class=\"hljs\">zk</code></td><td><code class=\"hljs\">zkn</code>, <code class=\"hljs\">zkr</code>, <code class=\"hljs\">zks</code>, <code class=\"hljs\">zkt</code>, <code class=\"hljs\">zbkb</code>, <code class=\"hljs\">zbkc</code>, <code class=\"hljs\">zkbx</code></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zk.adoc\">Zk</a> —&nbsp;Scalar Cryptography</td></tr>\n<tr><td><code class=\"hljs\">zkn</code></td><td><code class=\"hljs\">zknd</code>, <code class=\"hljs\">zkne</code>, <code class=\"hljs\">zknh</code>, <code class=\"hljs\">zbkb</code>, <code class=\"hljs\">zbkc</code>, <code class=\"hljs\">zkbx</code></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zkn.adoc\">Zkn</a> —&nbsp;NIST Algorithm suite extension</td></tr>\n<tr><td><code class=\"hljs\">zknd</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zknd.adoc\">Zknd</a> —&nbsp;NIST Suite: AES Decryption</td></tr>\n<tr><td><code class=\"hljs\">zkne</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zkne.adoc\">Zkne</a> —&nbsp;NIST Suite: AES Encryption</td></tr>\n<tr><td><code class=\"hljs\">zknh</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zknh.adoc\">Zknh</a> —&nbsp;NIST Suite: Hash Function Instructions</td></tr>\n<tr><td><code class=\"hljs\">zkr</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zkr.adoc\">Zkr</a> —&nbsp;Entropy Source Extension</td></tr>\n<tr><td><code class=\"hljs\">zks</code></td><td><code class=\"hljs\">zksed</code>, <code class=\"hljs\">zksh</code>, <code class=\"hljs\">zbkb</code>, <code class=\"hljs\">zbkc</code>, <code class=\"hljs\">zkbx</code></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zks.adoc\">Zks</a> —&nbsp;ShangMi Algorithm Suite</td></tr>\n<tr><td><code class=\"hljs\">zksed</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zksed.adoc\">Zksed</a> —&nbsp;ShangMi Suite: SM4 Block Cipher Instructions</td></tr>\n<tr><td><code class=\"hljs\">zksh</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zksh.adoc\">Zksh</a> —&nbsp;ShangMi Suite: SM3 Hash Function Instructions</td></tr>\n<tr><td><code class=\"hljs\">zkt</code></td><td></td><td><a href=\"https://github.com/riscv/riscv-crypto/blob/e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-zkt.adoc\">Zkt</a> —&nbsp;Data Independent Execution Latency Subset</td></tr>\n</tbody></table>\n</div><!-- Keep links near each table to make it easier to move and update. -->\n<h4 id=\"wasm32-or-wasm64\"><a class=\"header\" href=\"#wasm32-or-wasm64\"><code>wasm32</code> or <code>wasm64</code></a></h4>\n<p><code class=\"hljs\">#[target_feature]</code> may be used with both safe and\n<a href=\"attributes/../unsafe-keyword.html\"><code class=\"hljs\">unsafe</code> functions</a> on Wasm platforms. It is impossible to\ncause undefined behavior via the <code class=\"hljs\">#[target_feature]</code> attribute because\nattempting to use instructions unsupported by the Wasm engine will fail at load\ntime without the risk of being interpreted in a way different from what the\ncompiler expected.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Feature</th><th>Description</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">bulk-memory</code></td><td><a href=\"https://github.com/WebAssembly/bulk-memory-operations\">WebAssembly bulk memory operations proposal</a></td></tr>\n<tr><td><code class=\"hljs\">extended-const</code></td><td><a href=\"https://github.com/WebAssembly/extended-const\">WebAssembly extended const expressions proposal</a></td></tr>\n<tr><td><code class=\"hljs\">mutable-globals</code></td><td><a href=\"https://github.com/WebAssembly/mutable-global\">WebAssembly mutable global proposal</a></td></tr>\n<tr><td><code class=\"hljs\">nontrapping-fptoint</code></td><td><a href=\"https://github.com/WebAssembly/nontrapping-float-to-int-conversions\">WebAssembly non-trapping float-to-int conversion proposal</a></td></tr>\n<tr><td><code class=\"hljs\">sign-ext</code></td><td><a href=\"https://github.com/WebAssembly/sign-extension-ops\">WebAssembly sign extension operators Proposal</a></td></tr>\n<tr><td><code class=\"hljs\">simd128</code></td><td><a href=\"https://github.com/webassembly/simd\">WebAssembly simd proposal</a></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"additional-information\"><a class=\"header\" href=\"#additional-information\">Additional information</a></h3>\n<p>See the <a href=\"attributes/../conditional-compilation.html#target_feature\"><code class=\"hljs\">target_feature</code> conditional compilation option</a> for selectively\nenabling or disabling compilation of code based on compile-time settings. Note\nthat this option is not affected by the <code class=\"hljs\">target_feature</code> attribute, and is\nonly driven by the features enabled for the entire crate.</p>\n<p>See the <a href=\"attributes/../../std/arch/macro.is_x86_feature_detected.html\"><code class=\"hljs\">is_x86_feature_detected</code></a> or <a href=\"attributes/../../std/arch/macro.is_aarch64_feature_detected.html\"><code class=\"hljs\">is_aarch64_feature_detected</code></a> macros\nin the standard library for runtime feature detection on these platforms.</p>\n<blockquote>\n<p>Note: <code class=\"hljs\">rustc</code> has a default set of features enabled for each target and CPU.\nThe CPU may be chosen with the <a href=\"attributes/../../rustc/codegen-options/index.html#target-cpu\"><code class=\"hljs\">-C target-cpu</code></a> flag. Individual features\nmay be enabled or disabled for an entire crate with the\n<a href=\"attributes/../../rustc/codegen-options/index.html#target-feature\"><code class=\"hljs\">-C target-feature</code></a> flag.</p>\n</blockquote>\n<h2 id=\"the-track_caller-attribute\"><a class=\"header\" href=\"#the-track_caller-attribute\">The <code>track_caller</code> attribute</a></h2>\n<p>The <code class=\"hljs\">track_caller</code> attribute may be applied to any function with <a href=\"attributes/../items/external-blocks.html#abi\"><code class=\"hljs\">\"Rust\"</code> ABI</a>\nwith the exception of the entry point <code class=\"hljs\">fn main</code>. When applied to functions and methods in\ntrait declarations, the attribute applies to all implementations. If the trait provides a\ndefault implementation with the attribute, then the attribute also applies to override implementations.</p>\n<p>When applied to a function in an <code class=\"hljs\">extern</code> block the attribute must also be applied to any linked\nimplementations, otherwise undefined behavior results. When applied to a function which is made\navailable to an <code class=\"hljs\">extern</code> block, the declaration in the <code class=\"hljs\">extern</code> block must also have the attribute,\notherwise undefined behavior results.</p>\n<h3 id=\"behavior\"><a class=\"header\" href=\"#behavior\">Behavior</a></h3>\n<p>Applying the attribute to a function <code class=\"hljs\">f</code> allows code within <code class=\"hljs\">f</code> to get a hint of the <a href=\"attributes/../../core/panic/struct.Location.html\"><code class=\"hljs\">Location</code></a> of\nthe \"topmost\" tracked call that led to <code class=\"hljs\">f</code>'s invocation. At the point of observation, an\nimplementation behaves as if it walks up the stack from <code class=\"hljs\">f</code>'s frame to find the nearest frame of an\n<em>unattributed</em> function <code class=\"hljs\">outer</code>, and it returns the <a href=\"attributes/../../core/panic/struct.Location.html\"><code class=\"hljs\">Location</code></a> of the tracked call in <code class=\"hljs\">outer</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[track_caller]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, std::panic::Location::caller());\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p>Note: <code class=\"hljs\">core</code> provides <a href=\"attributes/../../core/panic/struct.Location.html#method.caller\"><code class=\"hljs\">core::panic::Location::caller</code></a> for observing caller locations. It wraps\nthe <a href=\"attributes/../../core/intrinsics/fn.caller_location.html\"><code class=\"hljs\">core::intrinsics::caller_location</code></a> intrinsic implemented by <code class=\"hljs\">rustc</code>.</p>\n</blockquote>\n<blockquote>\n<p>Note: because the resulting <code class=\"hljs\">Location</code> is a hint, an implementation may halt its walk up the stack\nearly. See <a href=\"attributes/codegen.html#limitations\">Limitations</a> for important caveats.</p>\n</blockquote>\n<h4 id=\"examples-2\"><a class=\"header\" href=\"#examples-2\">Examples</a></h4>\n<p>When <code class=\"hljs\">f</code> is called directly by <code class=\"hljs\">calls_f</code>, code in <code class=\"hljs\">f</code> observes its callsite within <code class=\"hljs\">calls_f</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[track_caller]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, std::panic::Location::caller());\n</span><span class=\"boring\">}\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">calls_f</span></span>() {\n    f(); <span class=\"hljs-comment\">// &lt;-- f() prints this location</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When <code class=\"hljs\">f</code> is called by another attributed function <code class=\"hljs\">g</code> which is in turn called by <code class=\"hljs\">calls_g</code>, code in\nboth <code class=\"hljs\">f</code> and <code class=\"hljs\">g</code> observes <code class=\"hljs\">g</code>'s callsite within <code class=\"hljs\">calls_g</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[track_caller]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, std::panic::Location::caller());\n</span><span class=\"boring\">}\n</span><span class=\"hljs-meta\">#[track_caller]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">g</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, std::panic::Location::caller());\n    f();\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">calls_g</span></span>() {\n    g(); <span class=\"hljs-comment\">// &lt;-- g() prints this location twice, once itself and once from f()</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When <code class=\"hljs\">g</code> is called by another attributed function <code class=\"hljs\">h</code> which is in turn called by <code class=\"hljs\">calls_h</code>, all code\nin <code class=\"hljs\">f</code>, <code class=\"hljs\">g</code>, and <code class=\"hljs\">h</code> observes <code class=\"hljs\">h</code>'s callsite within <code class=\"hljs\">calls_h</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[track_caller]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, std::panic::Location::caller());\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[track_caller]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">g</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, std::panic::Location::caller());\n</span><span class=\"boring\">    f();\n</span><span class=\"boring\">}\n</span><span class=\"hljs-meta\">#[track_caller]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">h</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, std::panic::Location::caller());\n    g();\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">calls_h</span></span>() {\n    h(); <span class=\"hljs-comment\">// &lt;-- prints this location three times, once itself, once from g(), once from f()</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>And so on.</p>\n<h3 id=\"limitations\"><a class=\"header\" href=\"#limitations\">Limitations</a></h3>\n<p>This information is a hint and implementations are not required to preserve it.</p>\n<p>In particular, coercing a function with <code class=\"hljs\">#[track_caller]</code> to a function pointer creates a shim which\nappears to observers to have been called at the attributed function's definition site, losing actual\ncaller information across virtual calls. A common example of this coercion is the creation of a\ntrait object whose methods are attributed.</p>\n<blockquote>\n<p>Note: The aforementioned shim for function pointers is necessary because <code class=\"hljs\">rustc</code> implements\n<code class=\"hljs\">track_caller</code> in a codegen context by appending an implicit parameter to the function ABI, but\nthis would be unsound for an indirect call because the parameter is not a part of the function's\ntype and a given function pointer type may or may not refer to a function with the attribute. The\ncreation of a shim hides the implicit parameter from callers of the function pointer, preserving\nsoundness.</p>\n</blockquote>\n<h2 id=\"the-instruction_set-attribute\"><a class=\"header\" href=\"#the-instruction_set-attribute\">The <code>instruction_set</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">instruction_set</code> <a href=\"attributes/../attributes.html\">attribute</a></em> may be applied to a function to control which instruction set the function will be generated for.\nThis allows mixing more than one instruction set in a single program on CPU architectures that support it.\nIt uses the <a href=\"attributes/../attributes.html#meta-item-attribute-syntax\"><em>MetaListPath</em></a> syntax, and a path comprised of the architecture family name and instruction set name.</p>\n<p>It is a compilation error to use the <code class=\"hljs\">instruction_set</code> attribute on a target that does not support it.</p>\n<h3 id=\"on-arm\"><a class=\"header\" href=\"#on-arm\">On ARM</a></h3>\n<p>For the <code class=\"hljs\">ARMv4T</code> and <code class=\"hljs\">ARMv5te</code> architectures, the following are supported:</p>\n<ul>\n<li><code class=\"hljs\">arm::a32</code> - Generate the function as A32 \"ARM\" code.</li>\n<li><code class=\"hljs\">arm::t32</code> - Generate the function as T32 \"Thumb\" code.</li>\n</ul>\n<!-- ignore: arm-only -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[instruction_set(arm::a32)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo_arm_code</span></span>() {}\n\n<span class=\"hljs-meta\">#[instruction_set(arm::t32)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar_thumb_code</span></span>() {}</code></pre>\n<p>Using the <code class=\"hljs\">instruction_set</code> attribute has the following effects:</p>\n<ul>\n<li>If the address of the function is taken as a function pointer, the low bit of the address will be set to 0 (arm) or 1 (thumb) depending on the instruction set.</li>\n<li>Any inline assembly in the function must use the specified instruction set instead of the target default.</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"limits\"><a class=\"header\" href=\"#limits\">Limits</a></h1>\n<p>The following <a href=\"attributes/../attributes.html\">attributes</a> affect compile-time limits.</p>\n<h2 id=\"the-recursion_limit-attribute\"><a class=\"header\" href=\"#the-recursion_limit-attribute\">The <code>recursion_limit</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">recursion_limit</code> attribute</em> may be applied at the <a href=\"attributes/../crates-and-source-files.html\">crate</a> level to set the\nmaximum depth for potentially infinitely-recursive compile-time operations\nlike macro expansion or auto-dereference. It uses the <a href=\"attributes/../attributes.html#meta-item-attribute-syntax\"><em>MetaNameValueStr</em></a>\nsyntax to specify the recursion depth.</p>\n<blockquote>\n<p>Note: The default in <code class=\"hljs\">rustc</code> is 128.</p>\n</blockquote>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![recursion_limit = <span class=\"hljs-meta-string\">\"4\"</span>]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">macro_rules!</span> a {\n    () =&gt; { a!(<span class=\"hljs-number\">1</span>); };\n    (<span class=\"hljs-number\">1</span>) =&gt; { a!(<span class=\"hljs-number\">2</span>); };\n    (<span class=\"hljs-number\">2</span>) =&gt; { a!(<span class=\"hljs-number\">3</span>); };\n    (<span class=\"hljs-number\">3</span>) =&gt; { a!(<span class=\"hljs-number\">4</span>); };\n    (<span class=\"hljs-number\">4</span>) =&gt; { };\n}\n\n<span class=\"hljs-comment\">// This fails to expand because it requires a recursion depth greater than 4.</span>\na!{}\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![recursion_limit = <span class=\"hljs-meta-string\">\"1\"</span>]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// This fails because it requires two recursive steps to auto-dereference.</span>\n(|_: &amp;<span class=\"hljs-built_in\">u8</span>| {})(&amp;&amp;&amp;<span class=\"hljs-number\">1</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"the-type_length_limit-attribute\"><a class=\"header\" href=\"#the-type_length_limit-attribute\">The <code>type_length_limit</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">type_length_limit</code> attribute</em> limits the maximum number of type\nsubstitutions made when constructing a concrete type during monomorphization.\nIt is applied at the <a href=\"attributes/../crates-and-source-files.html\">crate</a> level, and uses the <a href=\"attributes/../attributes.html#meta-item-attribute-syntax\"><em>MetaNameValueStr</em></a> syntax\nto set the limit based on the number of type substitutions.</p>\n<blockquote>\n<p>Note: The default in <code class=\"hljs\">rustc</code> is 1048576.</p>\n</blockquote>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![type_length_limit = <span class=\"hljs-meta-string\">\"4\"</span>]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>&lt;T&gt;(x: T) {}\n\n<span class=\"hljs-comment\">// This fails to compile because monomorphizing to</span>\n<span class=\"hljs-comment\">// `f::&lt;((((i32,), i32), i32), i32)&gt;` requires more than 4 type elements.</span>\nf(((((<span class=\"hljs-number\">1</span>,), <span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">4</span>));\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"type-system-attributes\"><a class=\"header\" href=\"#type-system-attributes\">Type system attributes</a></h1>\n<p>The following <a href=\"attributes/../attributes.html\">attributes</a> are used for changing how a type can be used.</p>\n<h2 id=\"the-non_exhaustive-attribute\"><a class=\"header\" href=\"#the-non_exhaustive-attribute\">The <code>non_exhaustive</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">non_exhaustive</code> attribute</em> indicates that a type or variant may have\nmore fields or variants added in the future. It can be applied to\n<a href=\"attributes/../items/structs.html\"><code class=\"hljs\">struct</code>s</a>, <a href=\"attributes/../items/enumerations.html\"><code class=\"hljs\">enum</code>s</a>, and <code class=\"hljs\">enum</code> variants.</p>\n<p>The <code class=\"hljs\">non_exhaustive</code> attribute uses the <a href=\"attributes/../attributes.html#meta-item-attribute-syntax\"><em>MetaWord</em></a> syntax and thus does not\ntake any inputs.</p>\n<p>Within the defining crate, <code class=\"hljs\">non_exhaustive</code> has no effect.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[non_exhaustive]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n    <span class=\"hljs-keyword\">pub</span> window_width: <span class=\"hljs-built_in\">u16</span>,\n    <span class=\"hljs-keyword\">pub</span> window_height: <span class=\"hljs-built_in\">u16</span>,\n}\n\n<span class=\"hljs-meta\">#[non_exhaustive]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Token</span></span>;\n\n<span class=\"hljs-meta\">#[non_exhaustive]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Id</span></span>(<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-built_in\">u64</span>);\n\n<span class=\"hljs-meta\">#[non_exhaustive]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Error</span></span> {\n    Message(<span class=\"hljs-built_in\">String</span>),\n    Other,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Message</span></span> {\n    <span class=\"hljs-meta\">#[non_exhaustive]</span> <span class=\"hljs-built_in\">Send</span> { from: <span class=\"hljs-built_in\">u32</span>, to: <span class=\"hljs-built_in\">u32</span>, contents: <span class=\"hljs-built_in\">String</span> },\n    <span class=\"hljs-meta\">#[non_exhaustive]</span> Reaction(<span class=\"hljs-built_in\">u32</span>),\n    <span class=\"hljs-meta\">#[non_exhaustive]</span> Quit,\n}\n\n<span class=\"hljs-comment\">// Non-exhaustive structs can be constructed as normal within the defining crate.</span>\n<span class=\"hljs-keyword\">let</span> config = Config { window_width: <span class=\"hljs-number\">640</span>, window_height: <span class=\"hljs-number\">480</span> };\n<span class=\"hljs-keyword\">let</span> token = Token;\n<span class=\"hljs-keyword\">let</span> id = Id(<span class=\"hljs-number\">4</span>);\n\n<span class=\"hljs-comment\">// Non-exhaustive structs can be matched on exhaustively within the defining crate.</span>\n<span class=\"hljs-keyword\">let</span> Config { window_width, window_height } = config;\n<span class=\"hljs-keyword\">let</span> Token = token;\n<span class=\"hljs-keyword\">let</span> Id(id_number) = id;\n\n<span class=\"hljs-keyword\">let</span> error = Error::Other;\n<span class=\"hljs-keyword\">let</span> message = Message::Reaction(<span class=\"hljs-number\">3</span>);\n\n<span class=\"hljs-comment\">// Non-exhaustive enums can be matched on exhaustively within the defining crate.</span>\n<span class=\"hljs-keyword\">match</span> error {\n    Error::Message(<span class=\"hljs-keyword\">ref</span> s) =&gt; { },\n    Error::Other =&gt; { },\n}\n\n<span class=\"hljs-keyword\">match</span> message {\n    <span class=\"hljs-comment\">// Non-exhaustive variants can be matched on exhaustively within the defining crate.</span>\n    Message::<span class=\"hljs-built_in\">Send</span> { from, to, contents } =&gt; { },\n    Message::Reaction(id) =&gt; { },\n    Message::Quit =&gt; { },\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Outside of the defining crate, types annotated with <code class=\"hljs\">non_exhaustive</code> have limitations that\npreserve backwards compatibility when new fields or variants are added.</p>\n<p>Non-exhaustive types cannot be constructed outside of the defining crate:</p>\n<ul>\n<li>Non-exhaustive variants (<a href=\"attributes/../items/structs.html\"><code class=\"hljs\">struct</code></a> or <a href=\"attributes/../items/enumerations.html\"><code class=\"hljs\">enum</code> variant</a>) cannot be constructed\nwith a <a href=\"attributes/../expressions/struct-expr.html\"><em>StructExpression</em></a> (including with <a href=\"attributes/../expressions/struct-expr.html#functional-update-syntax\">functional update syntax</a>).</li>\n<li>The implicitly defined same-named constant of a <a href=\"attributes/../items/structs.html\">unit-like struct</a>,\nor the same-named constructor function of a <a href=\"attributes/../items/structs.html\">tuple struct</a>,\nhas a <a href=\"attributes/../visibility-and-privacy.html\">visibility</a> no greater than <code class=\"hljs\">pub(crate)</code>.\nThat is, if the struct’s visibility is <code class=\"hljs\">pub</code>, then the constant or constructor’s visibility\nis <code class=\"hljs\">pub(crate)</code>, and otherwise the visibility of the two items is the same\n(as is the case without <code class=\"hljs\">#[non_exhaustive]</code>).</li>\n<li><a href=\"attributes/../items/enumerations.html\"><code class=\"hljs\">enum</code></a> instances can be constructed.</li>\n</ul>\n<p>The following examples of construction do not compile when outside the defining crate:</p>\n<!-- ignore: requires external crates -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// These are types defined in an upstream crate that have been annotated as</span>\n<span class=\"hljs-comment\">// `#[non_exhaustive]`.</span>\n<span class=\"hljs-keyword\">use</span> upstream::{Config, Token, Id, Error, Message};\n\n<span class=\"hljs-comment\">// Cannot construct an instance of `Config`; if new fields were added in</span>\n<span class=\"hljs-comment\">// a new version of `upstream` then this would fail to compile, so it is</span>\n<span class=\"hljs-comment\">// disallowed.</span>\n<span class=\"hljs-keyword\">let</span> config = Config { window_width: <span class=\"hljs-number\">640</span>, window_height: <span class=\"hljs-number\">480</span> };\n\n<span class=\"hljs-comment\">// Cannot construct an instance of `Token`; if new fields were added, then</span>\n<span class=\"hljs-comment\">// it would not be a unit-like struct any more, so the same-named constant</span>\n<span class=\"hljs-comment\">// created by it being a unit-like struct is not public outside the crate;</span>\n<span class=\"hljs-comment\">// this code fails to compile.</span>\n<span class=\"hljs-keyword\">let</span> token = Token;\n\n<span class=\"hljs-comment\">// Cannot construct an instance of `Id`; if new fields were added, then</span>\n<span class=\"hljs-comment\">// its constructor function signature would change, so its constructor</span>\n<span class=\"hljs-comment\">// function is not public outside the crate; this code fails to compile.</span>\n<span class=\"hljs-keyword\">let</span> id = Id(<span class=\"hljs-number\">5</span>);\n\n<span class=\"hljs-comment\">// Can construct an instance of `Error`; new variants being introduced would</span>\n<span class=\"hljs-comment\">// not result in this failing to compile.</span>\n<span class=\"hljs-keyword\">let</span> error = Error::Message(<span class=\"hljs-string\">\"foo\"</span>.to_string());\n\n<span class=\"hljs-comment\">// Cannot construct an instance of `Message::Send` or `Message::Reaction`;</span>\n<span class=\"hljs-comment\">// if new fields were added in a new version of `upstream` then this would</span>\n<span class=\"hljs-comment\">// fail to compile, so it is disallowed.</span>\n<span class=\"hljs-keyword\">let</span> message = Message::<span class=\"hljs-built_in\">Send</span> { from: <span class=\"hljs-number\">0</span>, to: <span class=\"hljs-number\">1</span>, contents: <span class=\"hljs-string\">\"foo\"</span>.to_string(), };\n<span class=\"hljs-keyword\">let</span> message = Message::Reaction(<span class=\"hljs-number\">0</span>);\n\n<span class=\"hljs-comment\">// Cannot construct an instance of `Message::Quit`; if this were converted to</span>\n<span class=\"hljs-comment\">// a tuple-variant `upstream` then this would fail to compile.</span>\n<span class=\"hljs-keyword\">let</span> message = Message::Quit;</code></pre>\n<p>There are limitations when matching on non-exhaustive types outside of the defining crate:</p>\n<ul>\n<li>When pattern matching on a non-exhaustive variant (<a href=\"attributes/../items/structs.html\"><code class=\"hljs\">struct</code></a> or <a href=\"attributes/../items/enumerations.html\"><code class=\"hljs\">enum</code> variant</a>),\na <a href=\"attributes/../patterns.html#struct-patterns\"><em>StructPattern</em></a> must be used which must include a <code class=\"hljs\">..</code>. A tuple variant's constructor's\n<a href=\"attributes/../visibility-and-privacy.html\">visibility</a> is reduced to be no greater than <code class=\"hljs\">pub(crate)</code>.</li>\n<li>When pattern matching on a non-exhaustive <a href=\"attributes/../items/enumerations.html\"><code class=\"hljs\">enum</code></a>, matching on a variant does not\ncontribute towards the exhaustiveness of the arms.</li>\n</ul>\n<p>The following examples of matching do not compile when outside the defining crate:</p>\n<!-- ignore: requires external crates -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// These are types defined in an upstream crate that have been annotated as</span>\n<span class=\"hljs-comment\">// `#[non_exhaustive]`.</span>\n<span class=\"hljs-keyword\">use</span> upstream::{Config, Token, Id, Error, Message};\n\n<span class=\"hljs-comment\">// Cannot match on a non-exhaustive enum without including a wildcard arm.</span>\n<span class=\"hljs-keyword\">match</span> error {\n  Error::Message(<span class=\"hljs-keyword\">ref</span> s) =&gt; { },\n  Error::Other =&gt; { },\n  <span class=\"hljs-comment\">// would compile with: `_ =&gt; {},`</span>\n}\n\n<span class=\"hljs-comment\">// Cannot match on a non-exhaustive struct without a wildcard.</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Ok</span>(Config { window_width, window_height }) = config {\n    <span class=\"hljs-comment\">// would compile with: `..`</span>\n}\n\n<span class=\"hljs-comment\">// Cannot match a non-exhaustive unit-like or tuple struct except by using</span>\n<span class=\"hljs-comment\">// braced struct syntax with a wildcard.</span>\n<span class=\"hljs-comment\">// This would compile as `let Token { .. } = token;`</span>\n<span class=\"hljs-keyword\">let</span> Token = token;\n<span class=\"hljs-comment\">// This would compile as `let Id { 0: id_number, .. } = id;`</span>\n<span class=\"hljs-keyword\">let</span> Id(id_number) = id;\n\n<span class=\"hljs-keyword\">match</span> message {\n  <span class=\"hljs-comment\">// Cannot match on a non-exhaustive struct enum variant without including a wildcard.</span>\n  Message::<span class=\"hljs-built_in\">Send</span> { from, to, contents } =&gt; { },\n  <span class=\"hljs-comment\">// Cannot match on a non-exhaustive tuple or unit enum variant.</span>\n  Message::Reaction(<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span>) =&gt; { },\n  <span class=\"hljs-title\">Message</span></span>::Quit =&gt; { },\n}</code></pre>\n<p>It's also not allowed to cast non-exhaustive types from foreign crates.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> othercrate::NonExhaustiveEnum;\n\n<span class=\"hljs-comment\">// Cannot cast a non-exhaustive enum outside of its defining crate.</span>\n<span class=\"hljs-keyword\">let</span> _ = NonExhaustiveEnum::default() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">u8</span>;</code></pre>\n<p>Non-exhaustive types are always considered inhabited in downstream crates.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"debugger-attributes\"><a class=\"header\" href=\"#debugger-attributes\">Debugger attributes</a></h1>\n<p>The following <a href=\"attributes/../attributes.html\">attributes</a> are used for enhancing the debugging experience when using third-party debuggers like GDB or WinDbg.</p>\n<h2 id=\"the-debugger_visualizer-attribute\"><a class=\"header\" href=\"#the-debugger_visualizer-attribute\">The <code>debugger_visualizer</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">debugger_visualizer</code> attribute</em> can be used to embed a debugger visualizer file into the debug information.\nThis enables an improved debugger experience for displaying values in the debugger.\nIt uses the <a href=\"attributes/../attributes.html#meta-item-attribute-syntax\"><em>MetaListNameValueStr</em></a> syntax to specify its inputs, and must be specified as a crate attribute.</p>\n<h3 id=\"using-debugger_visualizer-with-natvis\"><a class=\"header\" href=\"#using-debugger_visualizer-with-natvis\">Using <code>debugger_visualizer</code> with Natvis</a></h3>\n<p>Natvis is an XML-based framework for Microsoft debuggers (such as Visual Studio and WinDbg) that uses declarative rules to customize the display of types.\nFor detailed information on the Natvis format, refer to Microsoft's <a href=\"https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects\">Natvis documentation</a>.</p>\n<p>This attribute only supports embedding Natvis files on <code class=\"hljs\">-windows-msvc</code> targets.</p>\n<p>The path to the Natvis file is specified with the <code class=\"hljs\">natvis_file</code> key, which is a path relative to the crate source file:</p>\n<!-- ignore: requires external files, and msvc -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#![debugger_visualizer(natvis_file = <span class=\"hljs-meta-string\">\"Rectangle.natvis\"</span>)]</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">FancyRect</span></span> {\n    x: <span class=\"hljs-built_in\">f32</span>,\n    y: <span class=\"hljs-built_in\">f32</span>,\n    dx: <span class=\"hljs-built_in\">f32</span>,\n    dy: <span class=\"hljs-built_in\">f32</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> fancy_rect = FancyRect { x: <span class=\"hljs-number\">10.0</span>, y: <span class=\"hljs-number\">10.0</span>, dx: <span class=\"hljs-number\">5.0</span>, dy: <span class=\"hljs-number\">5.0</span> };\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"set breakpoint here\"</span>);\n}</code></pre>\n<p>and <code class=\"hljs\">Rectangle.natvis</code> contains:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-xml hljs\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AutoVisualizer</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Type</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">\"foo::FancyRect\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DisplayString</span>&gt;</span>({x},{y}) + ({dx}, {dy})<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DisplayString</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Expand</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Synthetic</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">\"LowerLeft\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DisplayString</span>&gt;</span>({x}, {y})<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DisplayString</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Synthetic</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Synthetic</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">\"UpperLeft\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DisplayString</span>&gt;</span>({x}, {y + dy})<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DisplayString</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Synthetic</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Synthetic</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">\"UpperRight\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DisplayString</span>&gt;</span>({x + dx}, {y + dy})<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DisplayString</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Synthetic</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Synthetic</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">\"LowerRight\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DisplayString</span>&gt;</span>({x + dx}, {y})<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DisplayString</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Synthetic</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Expand</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Type</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">AutoVisualizer</span>&gt;</span>\n</code></pre>\n<p>When viewed under WinDbg, the <code class=\"hljs\">fancy_rect</code> variable would be shown as follows:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">&gt; Variables:\n  &gt; fancy_rect: (10.0, 10.0) + (5.0, 5.0)\n    &gt; LowerLeft: (10.0, 10.0)\n    &gt; UpperLeft: (10.0, 15.0)\n    &gt; UpperRight: (15.0, 15.0)\n    &gt; LowerRight: (15.0, 10.0)\n</code></pre>\n<h3 id=\"using-debugger_visualizer-with-gdb\"><a class=\"header\" href=\"#using-debugger_visualizer-with-gdb\">Using <code>debugger_visualizer</code> with GDB</a></h3>\n<p>GDB supports the use of a structured Python script, called a <em>pretty printer</em>, that describes how a type should be visualized in the debugger view.\nFor detailed information on pretty printers, refer to GDB's <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Pretty-Printing.html\">pretty printing documentation</a>.</p>\n<p>Embedded pretty printers are not automatically loaded when debugging a binary under GDB.\nThere are two ways to enable auto-loading embedded pretty printers:</p>\n<ol>\n<li>Launch GDB with extra arguments to explicitly add a directory or binary to the auto-load safe path: <code class=\"hljs\">gdb -iex \"add-auto-load-safe-path safe-path path/to/binary\" path/to/binary</code>\nFor more information, see GDB's <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Auto_002dloading-safe-path.html\">auto-loading documentation</a>.</li>\n<li>Create a file named <code class=\"hljs\">gdbinit</code> under <code class=\"hljs\">$HOME/.config/gdb</code> (you may need to create the directory if it doesn't already exist). Add the following line to that file: <code class=\"hljs\">add-auto-load-safe-path path/to/binary</code>.</li>\n</ol>\n<p>These scripts are embedded using the <code class=\"hljs\">gdb_script_file</code> key, which is a path relative to the crate source file.</p>\n<!-- ignore: requires external files -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#![debugger_visualizer(gdb_script_file = <span class=\"hljs-meta-string\">\"printer.py\"</span>)]</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Person</span></span> {\n    name: <span class=\"hljs-built_in\">String</span>,\n    age: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> bob = Person { name: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Bob\"</span>), age: <span class=\"hljs-number\">10</span> };\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"set breakpoint here\"</span>);\n}</code></pre>\n<p>and <code class=\"hljs\">printer.py</code> contains:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-python hljs\"><span class=\"hljs-keyword\">import</span> gdb\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PersonPrinter</span>:</span>\n    <span class=\"hljs-string\">\"Print a Person\"</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, val</span>):</span>\n        self.val = val\n        self.name = val[<span class=\"hljs-string\">\"name\"</span>]\n        self.age = int(val[<span class=\"hljs-string\">\"age\"</span>])\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">to_string</span>(<span class=\"hljs-params\">self</span>):</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"{} is {} years old.\"</span>.format(self.name, self.age)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">lookup</span>(<span class=\"hljs-params\">val</span>):</span>\n    lookup_tag = val.type.tag\n    <span class=\"hljs-keyword\">if</span> lookup_tag <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">\"foo::Person\"</span> == lookup_tag:\n        <span class=\"hljs-keyword\">return</span> PersonPrinter(val)\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\ngdb.current_objfile().pretty_printers.append(lookup)\n</code></pre>\n<p>When the crate's debug executable is passed into GDB<sup class=\"footnote-reference\"><a href=\"#rust-gdb\">1</a></sup>, <code class=\"hljs\">print bob</code> will display:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">\"Bob\" is 10 years old.\n</code></pre>\n<div class=\"footnote-definition\" id=\"rust-gdb\"><sup class=\"footnote-definition-label\">1</sup>\n<p>Note: This assumes you are using the <code class=\"hljs\">rust-gdb</code> script which configures pretty-printers for standard library types like <code class=\"hljs\">String</code>.</p>\n</div>\n<h2 id=\"the-collapse_debuginfo-attribute\"><a class=\"header\" href=\"#the-collapse_debuginfo-attribute\">The <code>collapse_debuginfo</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">collapse_debuginfo</code> <a href=\"attributes/../attributes.html\">attribute</a></em> controls whether code locations from a macro definition are collapsed into a single location associated with the macro's call site,\nwhen generating debuginfo for code calling this macro.</p>\n<p>The attribute uses the <a href=\"attributes/../attributes.html#meta-item-attribute-syntax\"><em>MetaListIdents</em></a> syntax to specify its inputs, and can only be applied to macro definitions.</p>\n<p>Accepted options:</p>\n<ul>\n<li><code class=\"hljs\">#[collapse_debuginfo(yes)]</code> — code locations in debuginfo are collapsed.</li>\n<li><code class=\"hljs\">#[collapse_debuginfo(no)]</code> — code locations in debuginfo are not collapsed.</li>\n<li><code class=\"hljs\">#[collapse_debuginfo(external)]</code> — code locations in debuginfo are collapsed only if the macro comes from a different crate.</li>\n</ul>\n<p>The <code class=\"hljs\">external</code> behavior is the default for macros that don't have this attribute, unless they are built-in macros.\nFor built-in macros the default is <code class=\"hljs\">yes</code>.</p>\n<blockquote>\n<p><strong>Note</strong>: <code class=\"hljs\">rustc</code> has a <code class=\"hljs\">-C collapse-macro-debuginfo</code> CLI option to override both the default collapsing behavior and <code class=\"hljs\">#[collapse_debuginfo]</code> attributes.</p>\n</blockquote>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[collapse_debuginfo(yes)]</span>\n<span class=\"hljs-built_in\">macro_rules!</span> example {\n    () =&gt; {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hello!\"</span>);\n    };\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"statements-and-expressions\"><a class=\"header\" href=\"#statements-and-expressions\">Statements and expressions</a></h1>\n<p>Rust is <em>primarily</em> an expression language.\nThis means that most forms of value-producing or effect-causing evaluation are directed by the uniform syntax category of <em>expressions</em>.\nEach kind of expression can typically <em>nest</em> within each other kind of expression, and rules for evaluation of expressions involve specifying both the value produced by the expression and the order in which its sub-expressions are themselves evaluated.</p>\n<p>In contrast, statements serve <em>mostly</em> to contain and explicitly sequence expression evaluation.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"statements\"><a class=\"header\" href=\"#statements\">Statements</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>Statement</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">;</code><br>\n&nbsp;&nbsp; | <a href=\"items.html\"><em>Item</em></a><br>\n&nbsp;&nbsp; | <a href=\"statements.html#let-statements\"><em>LetStatement</em></a><br>\n&nbsp;&nbsp; | <a href=\"statements.html#expression-statements\"><em>ExpressionStatement</em></a><br>\n&nbsp;&nbsp; | <a href=\"macros.html#macro-invocation\"><em>MacroInvocationSemi</em></a></p>\n</blockquote>\n<p>A <em>statement</em> is a component of a <a href=\"expressions/block-expr.html\">block</a>, which is in turn a component of an outer <a href=\"expressions.html\">expression</a> or <a href=\"items/functions.html\">function</a>.</p>\n<p>Rust has two kinds of statement: <a href=\"statements.html#declaration-statements\">declaration statements</a> and <a href=\"statements.html#expression-statements\">expression statements</a>.</p>\n<h2 id=\"declaration-statements\"><a class=\"header\" href=\"#declaration-statements\">Declaration statements</a></h2>\n<p>A <em>declaration statement</em> is one that introduces one or more <em>names</em> into the enclosing statement block.\nThe declared names may denote new variables or new <a href=\"items.html\">items</a>.</p>\n<p>The two kinds of declaration statements are item declarations and <code class=\"hljs\">let</code> statements.</p>\n<h3 id=\"item-declarations\"><a class=\"header\" href=\"#item-declarations\">Item declarations</a></h3>\n<p>An <em>item declaration statement</em> has a syntactic form identical to an <a href=\"items.html\">item declaration</a> within a <a href=\"items/modules.html\">module</a>.\nDeclaring an item within a statement block restricts its <a href=\"names/scopes.html\">scope</a> to the block containing the statement.\nThe item is not given a <a href=\"paths.html#canonical-paths\">canonical path</a> nor are any sub-items it may declare.\nThe exception to this is that associated items defined by <a href=\"items/implementations.html\">implementations</a> are still accessible in outer scopes as long as the item and, if applicable, trait are accessible.\nIt is otherwise identical in meaning to declaring the item inside a module.</p>\n<p>There is no implicit capture of the containing function's generic parameters, parameters, and local variables.\nFor example, <code class=\"hljs\">inner</code> may not access <code class=\"hljs\">outer_var</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">outer</span></span>() {\n  <span class=\"hljs-keyword\">let</span> outer_var = <span class=\"hljs-literal\">true</span>;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">inner</span></span>() { <span class=\"hljs-comment\">/* outer_var is not in scope here */</span> }\n\n  inner();\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"let-statements\"><a class=\"header\" href=\"#let-statements\"><code>let</code> statements</a></h3>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>LetStatement</em> :<br>\n&nbsp;&nbsp; <a href=\"attributes.html\"><em>OuterAttribute</em></a><sup>*</sup> <code class=\"hljs\">let</code> <a href=\"patterns.html\"><em>PatternNoTopAlt</em></a>\n( <code class=\"hljs\">:</code> <a href=\"types.html\"><em>Type</em></a> )<sup>?</sup> (<code class=\"hljs\">=</code> <a href=\"expressions.html\"><em>Expression</em></a> <a href=\"statements.html#let-else-restriction\">†</a>\n( <code class=\"hljs\">else</code> <a href=\"expressions/block-expr.html\"><em>BlockExpression</em></a>) <sup>?</sup> ) <sup>?</sup> <code class=\"hljs\">;</code></p>\n<p><span id=\"let-else-restriction\">† When an <code class=\"hljs\">else</code> block is specified, the\n<em>Expression</em> must not be a <a href=\"expressions/operator-expr.html#lazy-boolean-operators\"><em>LazyBooleanExpression</em></a>, or end with a <code class=\"hljs\">}</code>.</span></p>\n</blockquote>\n<p>A <em><code class=\"hljs\">let</code> statement</em> introduces a new set of <a href=\"variables.html\">variables</a>, given by a <a href=\"patterns.html\">pattern</a>.\nThe pattern is followed optionally by a type annotation and then either ends, or is followed by an initializer expression plus an optional <code class=\"hljs\">else</code> block.\nWhen no type annotation is given, the compiler will infer the type, or signal an error if insufficient type information is available for definite inference.\nAny variables introduced by a variable declaration are visible from the point of declaration until the end of the enclosing block scope, except when they are shadowed by another variable declaration.</p>\n<p>If an <code class=\"hljs\">else</code> block is not present, the pattern must be irrefutable.\nIf an <code class=\"hljs\">else</code> block is present, the pattern may be refutable.\nIf the pattern does not match (this requires it to be refutable), the <code class=\"hljs\">else</code> block is executed.\nThe <code class=\"hljs\">else</code> block must always diverge (evaluate to the <a href=\"types/never.html\">never type</a>).</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> (<span class=\"hljs-keyword\">mut</span> v, w) = (<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">42</span>); <span class=\"hljs-comment\">// The bindings may be mut or const</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(t) = v.pop() <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// Refutable patterns require an else block</span>\n    <span class=\"hljs-built_in\">panic!</span>(); <span class=\"hljs-comment\">// The else block must diverge</span>\n};\n<span class=\"hljs-keyword\">let</span> [u, v] = [v[<span class=\"hljs-number\">0</span>], v[<span class=\"hljs-number\">1</span>]] <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// This pattern is irrefutable, so the compiler</span>\n                                 <span class=\"hljs-comment\">// will lint as the else block is redundant.</span>\n    <span class=\"hljs-built_in\">panic!</span>();\n};\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"expression-statements\"><a class=\"header\" href=\"#expression-statements\">Expression statements</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ExpressionStatement</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions.html\"><em>ExpressionWithoutBlock</em></a> <code class=\"hljs\">;</code><br>\n&nbsp;&nbsp; | <a href=\"expressions.html\"><em>ExpressionWithBlock</em></a> <code class=\"hljs\">;</code><sup>?</sup></p>\n</blockquote>\n<p>An <em>expression statement</em> is one that evaluates an <a href=\"expressions.html\">expression</a> and ignores its result.\nAs a rule, an expression statement's purpose is to trigger the effects of evaluating its expression.</p>\n<p>An expression that consists of only a <a href=\"expressions/block-expr.html\">block expression</a> or control flow expression, if used in a context where a statement is permitted, can omit the trailing semicolon.\nThis can cause an ambiguity between it being parsed as a standalone statement and as a part of another expression;\nin this case, it is parsed as a statement.\nThe type of <a href=\"expressions.html\"><em>ExpressionWithBlock</em></a> expressions when used as statements must be the unit type.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> v = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n</span>v.pop();          <span class=\"hljs-comment\">// Ignore the element returned from pop</span>\n<span class=\"hljs-keyword\">if</span> v.is_empty() {\n    v.push(<span class=\"hljs-number\">5</span>);\n} <span class=\"hljs-keyword\">else</span> {\n    v.remove(<span class=\"hljs-number\">0</span>);\n}                 <span class=\"hljs-comment\">// Semicolon can be omitted.</span>\n[<span class=\"hljs-number\">1</span>];              <span class=\"hljs-comment\">// Separate expression statement, not an indexing expression.</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When the trailing semicolon is omitted, the result must be type <code class=\"hljs\">()</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// bad: the block's type is i32, not ()</span>\n<span class=\"hljs-comment\">// Error: expected `()` because of default return type</span>\n<span class=\"hljs-comment\">// if true {</span>\n<span class=\"hljs-comment\">//   1</span>\n<span class=\"hljs-comment\">// }</span>\n\n<span class=\"hljs-comment\">// good: the block's type is i32</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">true</span> {\n  <span class=\"hljs-number\">1</span>\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-number\">2</span>\n};\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"attributes-on-statements\"><a class=\"header\" href=\"#attributes-on-statements\">Attributes on Statements</a></h2>\n<p>Statements accept <a href=\"attributes.html\">outer attributes</a>.\nThe attributes that have meaning on a statement are <a href=\"conditional-compilation.html\"><code class=\"hljs\">cfg</code></a>, and <a href=\"attributes/diagnostics.html#lint-check-attributes\">the lint check attributes</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"expressions\"><a class=\"header\" href=\"#expressions\">Expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>Expression</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>ExpressionWithoutBlock</em><br>\n&nbsp;&nbsp; | <em>ExpressionWithBlock</em></p>\n<p><em>ExpressionWithoutBlock</em> :<br>\n&nbsp;&nbsp; <a href=\"attributes.html\"><em>OuterAttribute</em></a><sup>*</sup><a href=\"expressions.html#expression-attributes\">†</a><br>\n&nbsp;&nbsp; (<br>\n&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/literal-expr.html\"><em>LiteralExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/path-expr.html\"><em>PathExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/operator-expr.html\"><em>OperatorExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/grouped-expr.html\"><em>GroupedExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/array-expr.html\"><em>ArrayExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/await-expr.html\"><em>AwaitExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/array-expr.html#array-and-slice-indexing-expressions\"><em>IndexExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/tuple-expr.html\"><em>TupleExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/tuple-expr.html#tuple-indexing-expressions\"><em>TupleIndexingExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/struct-expr.html\"><em>StructExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/call-expr.html\"><em>CallExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/method-call-expr.html\"><em>MethodCallExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/field-expr.html\"><em>FieldExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/closure-expr.html\"><em>ClosureExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/block-expr.html#async-blocks\"><em>AsyncBlockExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/loop-expr.html#continue-expressions\"><em>ContinueExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/loop-expr.html#break-expressions\"><em>BreakExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/range-expr.html\"><em>RangeExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/return-expr.html\"><em>ReturnExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/underscore-expr.html\"><em>UnderscoreExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"macros.html#macro-invocation\"><em>MacroInvocation</em></a><br>\n&nbsp;&nbsp; )</p>\n<p><em>ExpressionWithBlock</em> :<br>\n&nbsp;&nbsp; <a href=\"attributes.html\"><em>OuterAttribute</em></a><sup>*</sup><a href=\"expressions.html#expression-attributes\">†</a><br>\n&nbsp;&nbsp; (<br>\n&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/block-expr.html\"><em>BlockExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/block-expr.html#const-blocks\"><em>ConstBlockExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/block-expr.html#unsafe-blocks\"><em>UnsafeBlockExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/loop-expr.html\"><em>LoopExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/if-expr.html#if-expressions\"><em>IfExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/if-expr.html#if-let-expressions\"><em>IfLetExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/match-expr.html\"><em>MatchExpression</em></a><br>\n&nbsp;&nbsp; )</p>\n</blockquote>\n<p>An expression may have two roles: it always produces a <em>value</em>, and it may have <em>effects</em> (otherwise known as \"side effects\").\nAn expression <em>evaluates to</em> a value, and has effects during <em>evaluation</em>.\nMany expressions contain sub-expressions, called the <em>operands</em> of the expression.\nThe meaning of each kind of expression dictates several things:</p>\n<ul>\n<li>Whether or not to evaluate the operands when evaluating the expression</li>\n<li>The order in which to evaluate the operands</li>\n<li>How to combine the operands' values to obtain the value of the expression</li>\n</ul>\n<p>In this way, the structure of expressions dictates the structure of execution.\nBlocks are just another kind of expression, so blocks, statements, expressions, and blocks again can recursively nest inside each other to an arbitrary depth.</p>\n<blockquote>\n<p><strong>Note</strong>: We give names to the operands of expressions so that we may discuss them, but these names are not stable and may be changed.</p>\n</blockquote>\n<h2 id=\"expression-precedence\"><a class=\"header\" href=\"#expression-precedence\">Expression precedence</a></h2>\n<p>The precedence of Rust operators and expressions is ordered as follows, going from strong to weak.\nBinary Operators at the same precedence level are grouped in the order given by their associativity.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Operator/Expression</th><th>Associativity</th></tr></thead><tbody>\n<tr><td>Paths</td><td></td></tr>\n<tr><td>Method calls</td><td></td></tr>\n<tr><td>Field expressions</td><td>left to right</td></tr>\n<tr><td>Function calls, array indexing</td><td></td></tr>\n<tr><td><code class=\"hljs\">?</code></td><td></td></tr>\n<tr><td>Unary <code class=\"hljs\">-</code> <code class=\"hljs\">*</code> <code class=\"hljs\">!</code> <code class=\"hljs\">&amp;</code> <code class=\"hljs\">&amp;mut</code></td><td></td></tr>\n<tr><td><code class=\"hljs\">as</code></td><td>left to right</td></tr>\n<tr><td><code class=\"hljs\">*</code> <code class=\"hljs\">/</code> <code class=\"hljs\">%</code></td><td>left to right</td></tr>\n<tr><td><code class=\"hljs\">+</code> <code class=\"hljs\">-</code></td><td>left to right</td></tr>\n<tr><td><code class=\"hljs\">&lt;&lt;</code> <code class=\"hljs\">&gt;&gt;</code></td><td>left to right</td></tr>\n<tr><td><code class=\"hljs\">&amp;</code></td><td>left to right</td></tr>\n<tr><td><code class=\"hljs\">^</code></td><td>left to right</td></tr>\n<tr><td><code class=\"hljs\">|</code></td><td>left to right</td></tr>\n<tr><td><code class=\"hljs\">==</code> <code class=\"hljs\">!=</code> <code class=\"hljs\">&lt;</code> <code class=\"hljs\">&gt;</code> <code class=\"hljs\">&lt;=</code> <code class=\"hljs\">&gt;=</code></td><td>Require parentheses</td></tr>\n<tr><td><code class=\"hljs\">&amp;&amp;</code></td><td>left to right</td></tr>\n<tr><td><code class=\"hljs\">||</code></td><td>left to right</td></tr>\n<tr><td><code class=\"hljs\">..</code> <code class=\"hljs\">..=</code></td><td>Require parentheses</td></tr>\n<tr><td><code class=\"hljs\">=</code> <code class=\"hljs\">+=</code> <code class=\"hljs\">-=</code> <code class=\"hljs\">*=</code> <code class=\"hljs\">/=</code> <code class=\"hljs\">%=</code> <br> <code class=\"hljs\">&amp;=</code> <code class=\"hljs\">|=</code> <code class=\"hljs\">^=</code> <code class=\"hljs\">&lt;&lt;=</code> <code class=\"hljs\">&gt;&gt;=</code></td><td>right to left</td></tr>\n<tr><td><code class=\"hljs\">return</code> <code class=\"hljs\">break</code> closures</td><td></td></tr>\n</tbody></table>\n</div>\n<h2 id=\"evaluation-order-of-operands\"><a class=\"header\" href=\"#evaluation-order-of-operands\">Evaluation order of operands</a></h2>\n<p>The following list of expressions all evaluate their operands the same way, as described after the list.\nOther expressions either don't take operands or evaluate them conditionally as described on their respective pages.</p>\n<ul>\n<li>Dereference expression</li>\n<li>Error propagation expression</li>\n<li>Negation expression</li>\n<li>Arithmetic and logical binary operators</li>\n<li>Comparison operators</li>\n<li>Type cast expression</li>\n<li>Grouped expression</li>\n<li>Array expression</li>\n<li>Await expression</li>\n<li>Index expression</li>\n<li>Tuple expression</li>\n<li>Tuple index expression</li>\n<li>Struct expression</li>\n<li>Call expression</li>\n<li>Method call expression</li>\n<li>Field expression</li>\n<li>Break expression</li>\n<li>Range expression</li>\n<li>Return expression</li>\n</ul>\n<p>The operands of these expressions are evaluated prior to applying the effects of the expression.\nExpressions taking multiple operands are evaluated left to right as written in the source code.</p>\n<blockquote>\n<p><strong>Note</strong>: Which subexpressions are the operands of an expression is\ndetermined by expression precedence as per the previous section.</p>\n</blockquote>\n<p>For example, the two <code class=\"hljs\">next</code> method calls will always be called in the same order:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-comment\">// Using vec instead of array to avoid references</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">// since there is no stable owned array iterator</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">// at the time this example was written.</span>\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> one_two = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>].into_iter();\n<span class=\"hljs-built_in\">assert_eq!</span>(\n    (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>),\n    (one_two.next().unwrap(), one_two.next().unwrap())\n);\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p><strong>Note</strong>: Since this is applied recursively, these expressions are also evaluated from innermost to outermost, ignoring siblings until there are no inner subexpressions.</p>\n</blockquote>\n<h2 id=\"place-expressions-and-value-expressions\"><a class=\"header\" href=\"#place-expressions-and-value-expressions\">Place Expressions and Value Expressions</a></h2>\n<p>Expressions are divided into two main categories: place expressions and value expressions;\nthere is also a third, minor category of expressions called assignee expressions.\nWithin each expression, operands may likewise occur in either place context or value context.\nThe evaluation of an expression depends both on its own category and the context it occurs within.</p>\n<p>A <em>place expression</em> is an expression that represents a memory location.\nThese expressions are <a href=\"expressions/path-expr.html\">paths</a> which refer to local variables, <a href=\"items/static-items.html\">static variables</a>, <a href=\"expressions/operator-expr.html#the-dereference-operator\">dereferences</a> (<code class=\"hljs\">*expr</code>), <a href=\"expressions/array-expr.html#array-and-slice-indexing-expressions\">array indexing</a> expressions (<code class=\"hljs\">expr[expr]</code>), <a href=\"expressions/field-expr.html\">field</a> references (<code class=\"hljs\">expr.f</code>) and parenthesized place expressions.\nAll other expressions are value expressions.</p>\n<p>A <em>value expression</em> is an expression that represents an actual value.</p>\n<p>The following contexts are <em>place expression</em> contexts:</p>\n<ul>\n<li>The left operand of a <a href=\"expressions/operator-expr.html#compound-assignment-expressions\">compound assignment</a> expression.</li>\n<li>The operand of a unary <a href=\"expressions/operator-expr.html#borrow-operators\">borrow</a>, <a href=\"expressions/operator-expr.html#raw-address-of-operators\">address-of</a> or <a href=\"expressions/operator-expr.html#the-dereference-operator\">dereference</a> operator.</li>\n<li>The operand of a field expression.</li>\n<li>The indexed operand of an array indexing expression.</li>\n<li>The operand of any <a href=\"expressions.html#implicit-borrows\">implicit borrow</a>.</li>\n<li>The initializer of a <a href=\"statements.html#let-statements\">let statement</a>.</li>\n<li>The <a href=\"glossary.html#scrutinee\">scrutinee</a> of an <a href=\"expressions/if-expr.html#if-let-expressions\"><code class=\"hljs\">if let</code></a>, <a href=\"expressions/match-expr.html\"><code class=\"hljs\">match</code></a>, or <a href=\"expressions/loop-expr.html#predicate-pattern-loops\"><code class=\"hljs\">while let</code></a>\nexpression.</li>\n<li>The base of a <a href=\"expressions/struct-expr.html#functional-update-syntax\">functional update</a> struct expression.</li>\n</ul>\n<blockquote>\n<p>Note: Historically, place expressions were called <em>lvalues</em> and value expressions were called <em>rvalues</em>.</p>\n</blockquote>\n<p>An <em>assignee expression</em> is an expression that appears in the left operand of an <a href=\"expressions/operator-expr.html#assignment-expressions\">assignment</a> expression.\nExplicitly, the assignee expressions are:</p>\n<ul>\n<li>Place expressions.</li>\n<li><a href=\"expressions/underscore-expr.html\">Underscores</a>.</li>\n<li><a href=\"expressions/tuple-expr.html\">Tuples</a> of assignee expressions.</li>\n<li><a href=\"expressions/array-expr.html\">Slices</a> of assignee expressions.</li>\n<li><a href=\"expressions/struct-expr.html\">Tuple structs</a> of assignee expressions.</li>\n<li><a href=\"expressions/struct-expr.html\">Structs</a> of assignee expressions (with optionally named\nfields).</li>\n<li><a href=\"expressions/struct-expr.html\">Unit structs</a>.</li>\n</ul>\n<p>Arbitrary parenthesisation is permitted inside assignee expressions.</p>\n<h3 id=\"moved-and-copied-types\"><a class=\"header\" href=\"#moved-and-copied-types\">Moved and copied types</a></h3>\n<p>When a place expression is evaluated in a value expression context, or is bound by value in a pattern, it denotes the value held <em>in</em> that memory location.\nIf the type of that value implements <a href=\"special-types-and-traits.html#copy\"><code class=\"hljs\">Copy</code></a>, then the value will be copied.\nIn the remaining situations, if that type is <a href=\"special-types-and-traits.html#sized\"><code class=\"hljs\">Sized</code></a>, then it may be possible to move the value.\nOnly the following place expressions may be moved out of:</p>\n<ul>\n<li><a href=\"variables.html\">Variables</a> which are not currently borrowed.</li>\n<li><a href=\"expressions.html#temporaries\">Temporary values</a>.</li>\n<li><a href=\"expressions/field-expr.html\">Fields</a> of a place expression which can be moved out of and don't implement <a href=\"special-types-and-traits.html#drop\"><code class=\"hljs\">Drop</code></a>.</li>\n<li>The result of <a href=\"expressions/operator-expr.html#the-dereference-operator\">dereferencing</a> an expression with type <a href=\"../std/boxed/struct.Box.html\"><code class=\"hljs\">Box&lt;T&gt;</code></a> and that can also be moved out of.</li>\n</ul>\n<p>After moving out of a place expression that evaluates to a local variable, the location is deinitialized and cannot be read from again until it is reinitialized.\nIn all other cases, trying to use a place expression in a value expression context is an error.</p>\n<h3 id=\"mutability\"><a class=\"header\" href=\"#mutability\">Mutability</a></h3>\n<p>For a place expression to be <a href=\"expressions/operator-expr.html#assignment-expressions\">assigned</a> to, mutably <a href=\"expressions/operator-expr.html#borrow-operators\">borrowed</a>, <a href=\"expressions.html#implicit-borrows\">implicitly mutably borrowed</a>, or bound to a pattern containing <code class=\"hljs\">ref mut</code>, it must be <em>mutable</em>.\nWe call these <em>mutable place expressions</em>.\nIn contrast, other place expressions are called <em>immutable place expressions</em>.</p>\n<p>The following expressions can be mutable place expression contexts:</p>\n<ul>\n<li>Mutable <a href=\"variables.html\">variables</a> which are not currently borrowed.</li>\n<li><a href=\"items/static-items.html#mutable-statics\">Mutable <code class=\"hljs\">static</code> items</a>.</li>\n<li><a href=\"expressions.html#temporaries\">Temporary values</a>.</li>\n<li><a href=\"expressions/field-expr.html\">Fields</a>: this evaluates the subexpression in a mutable place expression context.</li>\n<li><a href=\"expressions/operator-expr.html#the-dereference-operator\">Dereferences</a> of a <code class=\"hljs\">*mut T</code> pointer.</li>\n<li>Dereference of a variable, or field of a variable, with type <code class=\"hljs\">&amp;mut T</code>.\nNote: This is an exception to the requirement of the next rule.</li>\n<li>Dereferences of a type that implements <code class=\"hljs\">DerefMut</code>:\nthis then requires that the value being dereferenced is evaluated in a mutable place expression context.</li>\n<li><a href=\"expressions/array-expr.html#array-and-slice-indexing-expressions\">Array indexing</a> of a type that implements <code class=\"hljs\">IndexMut</code>:\nthis then evaluates the value being indexed, but not the index, in mutable place expression context.</li>\n</ul>\n<h3 id=\"temporaries\"><a class=\"header\" href=\"#temporaries\">Temporaries</a></h3>\n<p>When using a value expression in most place expression contexts, a temporary unnamed memory location is created and initialized to that value.\nThe expression evaluates to that location instead, except if <a href=\"destructors.html#constant-promotion\">promoted</a> to a <code class=\"hljs\">static</code>.\nThe <a href=\"destructors.html#drop-scopes\">drop scope</a> of the temporary is usually the end of the enclosing statement.</p>\n<h3 id=\"implicit-borrows\"><a class=\"header\" href=\"#implicit-borrows\">Implicit Borrows</a></h3>\n<p>Certain expressions will treat an expression as a place expression by implicitly borrowing it.\nFor example, it is possible to compare two unsized <a href=\"types/slice.html\">slices</a> for equality directly, because the <code class=\"hljs\">==</code> operator implicitly borrows its operands:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> c = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> d = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n</span><span class=\"hljs-keyword\">let</span> a: &amp;[<span class=\"hljs-built_in\">i32</span>];\n<span class=\"hljs-keyword\">let</span> b: &amp;[<span class=\"hljs-built_in\">i32</span>];\n<span class=\"boring\">a = &amp;c;\n</span><span class=\"boring\">b = &amp;d;\n</span><span class=\"hljs-comment\">// ...</span>\n*a == *b;\n<span class=\"hljs-comment\">// Equivalent form:</span>\n::std::cmp::<span class=\"hljs-built_in\">PartialEq</span>::eq(&amp;*a, &amp;*b);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Implicit borrows may be taken in the following expressions:</p>\n<ul>\n<li>Left operand in <a href=\"expressions/method-call-expr.html\">method-call</a> expressions.</li>\n<li>Left operand in <a href=\"expressions/field-expr.html\">field</a> expressions.</li>\n<li>Left operand in <a href=\"expressions/call-expr.html\">call expressions</a>.</li>\n<li>Left operand in <a href=\"expressions/array-expr.html#array-and-slice-indexing-expressions\">array indexing</a> expressions.</li>\n<li>Operand of the <a href=\"expressions/operator-expr.html#the-dereference-operator\">dereference operator</a> (<code class=\"hljs\">*</code>).</li>\n<li>Operands of <a href=\"expressions/operator-expr.html#comparison-operators\">comparison</a>.</li>\n<li>Left operands of the <a href=\"expressions/operator-expr.html#compound-assignment-expressions\">compound assignment</a>.</li>\n</ul>\n<h2 id=\"overloading-traits\"><a class=\"header\" href=\"#overloading-traits\">Overloading Traits</a></h2>\n<p>Many of the following operators and expressions can also be overloaded for other types using traits in <code class=\"hljs\">std::ops</code> or <code class=\"hljs\">std::cmp</code>.\nThese traits also exist in <code class=\"hljs\">core::ops</code> and <code class=\"hljs\">core::cmp</code> with the same names.</p>\n<h2 id=\"expression-attributes\"><a class=\"header\" href=\"#expression-attributes\">Expression Attributes</a></h2>\n<p><a href=\"attributes.html\">Outer attributes</a> before an expression are allowed only in a few specific cases:</p>\n<ul>\n<li>Before an expression used as a <a href=\"statements.html\">statement</a>.</li>\n<li>Elements of <a href=\"expressions/array-expr.html\">array expressions</a>, <a href=\"expressions/tuple-expr.html\">tuple expressions</a>, <a href=\"expressions/call-expr.html\">call expressions</a>, and tuple-style <a href=\"expressions/struct-expr.html\">struct</a> expressions.</li>\n<li>The tail expression of <a href=\"expressions/block-expr.html\">block expressions</a>.</li>\n</ul>\n<!-- Keep list in sync with block-expr.md -->\n<p>They are never allowed before:</p>\n<ul>\n<li><a href=\"expressions/range-expr.html\">Range</a> expressions.</li>\n<li>Binary operator expressions (<a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\"><em>ArithmeticOrLogicalExpression</em></a>, <a href=\"expressions/operator-expr.html#comparison-operators\"><em>ComparisonExpression</em></a>, <a href=\"expressions/operator-expr.html#lazy-boolean-operators\"><em>LazyBooleanExpression</em></a>, <a href=\"expressions/operator-expr.html#type-cast-expressions\"><em>TypeCastExpression</em></a>, <a href=\"expressions/operator-expr.html#assignment-expressions\"><em>AssignmentExpression</em></a>, <a href=\"expressions/operator-expr.html#compound-assignment-expressions\"><em>CompoundAssignmentExpression</em></a>).</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"literal-expressions\"><a class=\"header\" href=\"#literal-expressions\">Literal expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>LiteralExpression</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/../tokens.html#character-literals\">CHAR_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../tokens.html#string-literals\">STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../tokens.html#raw-string-literals\">RAW_STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../tokens.html#byte-literals\">BYTE_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../tokens.html#byte-string-literals\">BYTE_STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../tokens.html#raw-byte-string-literals\">RAW_BYTE_STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../tokens.html#c-string-literals\">C_STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../tokens.html#raw-c-string-literals\">RAW_C_STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../tokens.html#integer-literals\">INTEGER_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../tokens.html#floating-point-literals\">FLOAT_LITERAL</a><br>\n&nbsp;&nbsp; | <code class=\"hljs\">true</code> | <code class=\"hljs\">false</code></p>\n</blockquote>\n<p>A <em>literal expression</em> is an expression consisting of a single token, rather than a sequence of tokens, that immediately and directly denotes the value it evaluates to, rather than referring to it by name or some other evaluation rule.</p>\n<p>A literal is a form of <a href=\"expressions/../const_eval.html#constant-expressions\">constant expression</a>, so is evaluated (primarily) at compile time.</p>\n<p>Each of the lexical <a href=\"expressions/../tokens.html#literals\">literal</a> forms described earlier can make up a literal expression, as can the keywords <code class=\"hljs\">true</code> and <code class=\"hljs\">false</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-string\">\"hello\"</span>;   <span class=\"hljs-comment\">// string type</span>\n<span class=\"hljs-string\">'5'</span>;       <span class=\"hljs-comment\">// character type</span>\n<span class=\"hljs-number\">5</span>;         <span class=\"hljs-comment\">// integer type</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In the descriptions below, the <em>string representation</em> of a token is the sequence of characters from the input which matched the token's production in a <em>Lexer</em> grammar snippet.</p>\n<blockquote>\n<p><strong>Note</strong>: this string representation never includes a character <code class=\"hljs\">U+000D</code> (CR) immediately followed by <code class=\"hljs\">U+000A</code> (LF): this pair would have been previously transformed into a single <code class=\"hljs\">U+000A</code> (LF).</p>\n</blockquote>\n<h2 id=\"escapes\"><a class=\"header\" href=\"#escapes\">Escapes</a></h2>\n<p>The descriptions of textual literal expressions below make use of several forms of <em>escape</em>.</p>\n<p>Each form of escape is characterised by:</p>\n<ul>\n<li>an <em>escape sequence</em>: a sequence of characters, which always begins with <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>)</li>\n<li>an <em>escaped value</em>: either a single character or an empty sequence of characters</li>\n</ul>\n<p>In the definitions of escapes below:</p>\n<ul>\n<li>An <em>octal digit</em> is any of the characters in the range [<code class=\"hljs\">0</code>-<code class=\"hljs\">7</code>].</li>\n<li>A <em>hexadecimal digit</em> is any of the characters in the ranges [<code class=\"hljs\">0</code>-<code class=\"hljs\">9</code>], [<code class=\"hljs\">a</code>-<code class=\"hljs\">f</code>], or [<code class=\"hljs\">A</code>-<code class=\"hljs\">F</code>].</li>\n</ul>\n<h3 id=\"simple-escapes\"><a class=\"header\" href=\"#simple-escapes\">Simple escapes</a></h3>\n<p>Each sequence of characters occurring in the first column of the following table is an escape sequence.</p>\n<p>In each case, the escaped value is the character given in the corresponding entry in the second column.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Escape sequence</th><th>Escaped value</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">\\0</code></td><td>U+0000 (NUL)</td></tr>\n<tr><td><code class=\"hljs\">\\t</code></td><td>U+0009 (HT)</td></tr>\n<tr><td><code class=\"hljs\">\\n</code></td><td>U+000A (LF)</td></tr>\n<tr><td><code class=\"hljs\">\\r</code></td><td>U+000D (CR)</td></tr>\n<tr><td><code class=\"hljs\">\\\"</code></td><td>U+0022 (QUOTATION MARK)</td></tr>\n<tr><td><code class=\"hljs\">\\'</code></td><td>U+0027 (APOSTROPHE)</td></tr>\n<tr><td><code class=\"hljs\">\\\\</code></td><td>U+005C (REVERSE SOLIDUS)</td></tr>\n</tbody></table>\n</div>\n<h3 id=\"8-bit-escapes\"><a class=\"header\" href=\"#8-bit-escapes\">8-bit escapes</a></h3>\n<p>The escape sequence consists of <code class=\"hljs\">\\x</code> followed by two hexadecimal digits.</p>\n<p>The escaped value is the character whose <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a> is the result of interpreting the final two characters in the escape sequence as a hexadecimal integer, as if by <a href=\"expressions/../../core/primitive.u8.html#method.from_str_radix\"><code class=\"hljs\">u8::from_str_radix</code></a> with radix 16.</p>\n<blockquote>\n<p><strong>Note</strong>: the escaped value therefore has a <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a> in the range of <a href=\"expressions/../types/numeric.html\"><code class=\"hljs\">u8</code></a>.</p>\n</blockquote>\n<h3 id=\"7-bit-escapes\"><a class=\"header\" href=\"#7-bit-escapes\">7-bit escapes</a></h3>\n<p>The escape sequence consists of <code class=\"hljs\">\\x</code> followed by an octal digit then a hexadecimal digit.</p>\n<p>The escaped value is the character whose <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a> is the result of interpreting the final two characters in the escape sequence as a hexadecimal integer, as if by <a href=\"expressions/../../core/primitive.u8.html#method.from_str_radix\"><code class=\"hljs\">u8::from_str_radix</code></a> with radix 16.</p>\n<h3 id=\"unicode-escapes-1\"><a class=\"header\" href=\"#unicode-escapes-1\">Unicode escapes</a></h3>\n<p>The escape sequence consists of <code class=\"hljs\">\\u{</code>, followed by a sequence of characters each of which is a hexadecimal digit or <code class=\"hljs\">_</code>, followed by <code class=\"hljs\">}</code>.</p>\n<p>The escaped value is the character whose <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a> is the result of interpreting the hexadecimal digits contained in the escape sequence as a hexadecimal integer, as if by <a href=\"expressions/../../core/primitive.u32.html#method.from_str_radix\"><code class=\"hljs\">u32::from_str_radix</code></a> with radix 16.</p>\n<blockquote>\n<p><strong>Note</strong>: the permitted forms of a <a href=\"expressions/../tokens.html#character-literals\">CHAR_LITERAL</a> or <a href=\"expressions/../tokens.html#string-literals\">STRING_LITERAL</a> token ensure that there is such a character.</p>\n</blockquote>\n<h3 id=\"string-continuation-escapes\"><a class=\"header\" href=\"#string-continuation-escapes\">String continuation escapes</a></h3>\n<p>The escape sequence consists of <code class=\"hljs\">\\</code> followed immediately by <code class=\"hljs\">U+000A</code> (LF), and all following whitespace characters before the next non-whitespace character.\nFor this purpose, the whitespace characters are <code class=\"hljs\">U+0009</code> (HT), <code class=\"hljs\">U+000A</code> (LF), <code class=\"hljs\">U+000D</code> (CR), and <code class=\"hljs\">U+0020</code> (SPACE).</p>\n<p>The escaped value is an empty sequence of characters.</p>\n<blockquote>\n<p><strong>Note</strong>: The effect of this form of escape is that a string continuation skips following whitespace, including additional newlines.\nThus <code class=\"hljs\">a</code>, <code class=\"hljs\">b</code> and <code class=\"hljs\">c</code> are equal:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-string\">\"foobar\"</span>;\n<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-string\">\"foo\\\n         bar\"</span>;\n<span class=\"hljs-keyword\">let</span> c = <span class=\"hljs-string\">\"foo\\\n\n     bar\"</span>;\n\n<span class=\"hljs-built_in\">assert_eq!</span>(a, b);\n<span class=\"hljs-built_in\">assert_eq!</span>(b, c);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Skipping additional newlines (as in example c) is potentially confusing and unexpected.\nThis behavior may be adjusted in the future.\nUntil a decision is made, it is recommended to avoid relying on skipping multiple newlines with line continuations.\nSee <a href=\"https://github.com/rust-lang/reference/pull/1042\">this issue</a> for more information.</p>\n</blockquote>\n<h2 id=\"character-literal-expressions\"><a class=\"header\" href=\"#character-literal-expressions\">Character literal expressions</a></h2>\n<p>A character literal expression consists of a single <a href=\"expressions/../tokens.html#character-literals\">CHAR_LITERAL</a> token.</p>\n<p>The expression's type is the primitive <a href=\"expressions/../types/textual.html\"><code class=\"hljs\">char</code></a> type.</p>\n<p>The token must not have a suffix.</p>\n<p>The token's <em>literal content</em> is the sequence of characters following the first <code class=\"hljs\">U+0027</code> (<code class=\"hljs\">'</code>) and preceding the last <code class=\"hljs\">U+0027</code> (<code class=\"hljs\">'</code>) in the string representation of the token.</p>\n<p>The literal expression's <em>represented character</em> is derived from the literal content as follows:</p>\n<ul>\n<li>\n<p>If the literal content is one of the following forms of escape sequence, the represented character is the escape sequence's escaped value:</p>\n<ul>\n<li><a href=\"expressions/literal-expr.html#simple-escapes\">Simple escapes</a></li>\n<li><a href=\"expressions/literal-expr.html#7-bit-escapes\">7-bit escapes</a></li>\n<li><a href=\"expressions/literal-expr.html#unicode-escapes\">Unicode escapes</a></li>\n</ul>\n</li>\n<li>\n<p>Otherwise the represented character is the single character that makes up the literal content.</p>\n</li>\n</ul>\n<p>The expression's value is the <a href=\"expressions/../types/textual.html\"><code class=\"hljs\">char</code></a> corresponding to the represented character's <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a>.</p>\n<blockquote>\n<p><strong>Note</strong>: the permitted forms of a <a href=\"expressions/../tokens.html#character-literals\">CHAR_LITERAL</a> token ensure that these rules always produce a single character.</p>\n</blockquote>\n<p>Examples of character literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-string\">'R'</span>;                               <span class=\"hljs-comment\">// R</span>\n<span class=\"hljs-string\">'\\''</span>;                              <span class=\"hljs-comment\">// '</span>\n<span class=\"hljs-string\">'\\x52'</span>;                            <span class=\"hljs-comment\">// R</span>\n'\\u{<span class=\"hljs-number\">00E6</span>}';                        <span class=\"hljs-comment\">// LATIN SMALL LETTER AE (U+00E6)</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"string-literal-expressions\"><a class=\"header\" href=\"#string-literal-expressions\">String literal expressions</a></h2>\n<p>A string literal expression consists of a single <a href=\"expressions/../tokens.html#string-literals\">STRING_LITERAL</a> or <a href=\"expressions/../tokens.html#raw-string-literals\">RAW_STRING_LITERAL</a> token.</p>\n<p>The expression's type is a shared reference (with <code class=\"hljs\">static</code> lifetime) to the primitive <a href=\"expressions/../types/textual.html\"><code class=\"hljs\">str</code></a> type.\nThat is, the type is <code class=\"hljs\">&amp;'static str</code>.</p>\n<p>The token must not have a suffix.</p>\n<p>The token's <em>literal content</em> is the sequence of characters following the first <code class=\"hljs\">U+0022</code> (<code class=\"hljs\">\"</code>) and preceding the last <code class=\"hljs\">U+0022</code> (<code class=\"hljs\">\"</code>) in the string representation of the token.</p>\n<p>The literal expression's <em>represented string</em> is a sequence of characters derived from the literal content as follows:</p>\n<ul>\n<li>\n<p>If the token is a <a href=\"expressions/../tokens.html#string-literals\">STRING_LITERAL</a>, each escape sequence of any of the following forms occurring in the literal content is replaced by the escape sequence's escaped value.</p>\n<ul>\n<li><a href=\"expressions/literal-expr.html#simple-escapes\">Simple escapes</a></li>\n<li><a href=\"expressions/literal-expr.html#7-bit-escapes\">7-bit escapes</a></li>\n<li><a href=\"expressions/literal-expr.html#unicode-escapes\">Unicode escapes</a></li>\n<li><a href=\"expressions/literal-expr.html#string-continuation-escapes\">String continuation escapes</a></li>\n</ul>\n<p>These replacements take place in left-to-right order.\nFor example, the token <code class=\"hljs\">\"\\\\x41\"</code> is converted to the characters <code class=\"hljs\">\\</code> <code class=\"hljs\">x</code> <code class=\"hljs\">4</code> <code class=\"hljs\">1</code>.</p>\n</li>\n<li>\n<p>If the token is a <a href=\"expressions/../tokens.html#raw-string-literals\">RAW_STRING_LITERAL</a>, the represented string is identical to the literal content.</p>\n</li>\n</ul>\n<p>The expression's value is a reference to a statically allocated <a href=\"expressions/../types/textual.html\"><code class=\"hljs\">str</code></a> containing the UTF-8 encoding of the represented string.</p>\n<p>Examples of string literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-string\">\"foo\"</span>; <span class=\"hljs-string\">r\"foo\"</span>;                     <span class=\"hljs-comment\">// foo</span>\n<span class=\"hljs-string\">\"\\\"foo\\\"\"</span>; <span class=\"hljs-string\">r#\"\"foo\"\"#</span>;             <span class=\"hljs-comment\">// \"foo\"</span>\n\n<span class=\"hljs-string\">\"foo #\\\"# bar\"</span>;\n<span class=\"hljs-string\">r##\"foo #\"# bar\"##</span>;                <span class=\"hljs-comment\">// foo #\"# bar</span>\n\n<span class=\"hljs-string\">\"\\x52\"</span>; <span class=\"hljs-string\">\"R\"</span>; <span class=\"hljs-string\">r\"R\"</span>;                 <span class=\"hljs-comment\">// R</span>\n<span class=\"hljs-string\">\"\\\\x52\"</span>; <span class=\"hljs-string\">r\"\\x52\"</span>;                  <span class=\"hljs-comment\">// \\x52</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"byte-literal-expressions\"><a class=\"header\" href=\"#byte-literal-expressions\">Byte literal expressions</a></h2>\n<p>A byte literal expression consists of a single <a href=\"expressions/../tokens.html#byte-literals\">BYTE_LITERAL</a> token.</p>\n<p>The expression's type is the primitive <a href=\"expressions/../types/numeric.html\"><code class=\"hljs\">u8</code></a> type.</p>\n<p>The token must not have a suffix.</p>\n<p>The token's <em>literal content</em> is the sequence of characters following the first <code class=\"hljs\">U+0027</code> (<code class=\"hljs\">'</code>) and preceding the last <code class=\"hljs\">U+0027</code> (<code class=\"hljs\">'</code>) in the string representation of the token.</p>\n<p>The literal expression's <em>represented character</em> is derived from the literal content as follows:</p>\n<ul>\n<li>\n<p>If the literal content is one of the following forms of escape sequence, the represented character is the escape sequence's escaped value:</p>\n<ul>\n<li><a href=\"expressions/literal-expr.html#simple-escapes\">Simple escapes</a></li>\n<li><a href=\"expressions/literal-expr.html#8-bit-escapes\">8-bit escapes</a></li>\n</ul>\n</li>\n<li>\n<p>Otherwise the represented character is the single character that makes up the literal content.</p>\n</li>\n</ul>\n<p>The expression's value is the represented character's <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a>.</p>\n<blockquote>\n<p><strong>Note</strong>: the permitted forms of a <a href=\"expressions/../tokens.html#byte-literals\">BYTE_LITERAL</a> token ensure that these rules always produce a single character, whose Unicode scalar value is in the range of <a href=\"expressions/../types/numeric.html\"><code class=\"hljs\">u8</code></a>.</p>\n</blockquote>\n<p>Examples of byte literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-string\">b'R'</span>;                              <span class=\"hljs-comment\">// 82</span>\n<span class=\"hljs-string\">b'\\''</span>;                             <span class=\"hljs-comment\">// 39</span>\n<span class=\"hljs-string\">b'\\x52'</span>;                           <span class=\"hljs-comment\">// 82</span>\n<span class=\"hljs-string\">b'\\xA0'</span>;                           <span class=\"hljs-comment\">// 160</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"byte-string-literal-expressions\"><a class=\"header\" href=\"#byte-string-literal-expressions\">Byte string literal expressions</a></h2>\n<p>A byte string literal expression consists of a single <a href=\"expressions/../tokens.html#byte-string-literals\">BYTE_STRING_LITERAL</a> or <a href=\"expressions/../tokens.html#raw-byte-string-literals\">RAW_BYTE_STRING_LITERAL</a> token.</p>\n<p>The expression's type is a shared reference (with <code class=\"hljs\">static</code> lifetime) to an array whose element type is <a href=\"expressions/../types/numeric.html\"><code class=\"hljs\">u8</code></a>.\nThat is, the type is <code class=\"hljs\">&amp;'static [u8; N]</code>, where <code class=\"hljs\">N</code> is the number of bytes in the represented string described below.</p>\n<p>The token must not have a suffix.</p>\n<p>The token's <em>literal content</em> is the sequence of characters following the first <code class=\"hljs\">U+0022</code> (<code class=\"hljs\">\"</code>) and preceding the last <code class=\"hljs\">U+0022</code> (<code class=\"hljs\">\"</code>) in the string representation of the token.</p>\n<p>The literal expression's <em>represented string</em> is a sequence of characters derived from the literal content as follows:</p>\n<ul>\n<li>\n<p>If the token is a <a href=\"expressions/../tokens.html#byte-string-literals\">BYTE_STRING_LITERAL</a>, each escape sequence of any of the following forms occurring in the literal content is replaced by the escape sequence's escaped value.</p>\n<ul>\n<li><a href=\"expressions/literal-expr.html#simple-escapes\">Simple escapes</a></li>\n<li><a href=\"expressions/literal-expr.html#8-bit-escapes\">8-bit escapes</a></li>\n<li><a href=\"expressions/literal-expr.html#string-continuation-escapes\">String continuation escapes</a></li>\n</ul>\n<p>These replacements take place in left-to-right order.\nFor example, the token <code class=\"hljs\">b\"\\\\x41\"</code> is converted to the characters <code class=\"hljs\">\\</code> <code class=\"hljs\">x</code> <code class=\"hljs\">4</code> <code class=\"hljs\">1</code>.</p>\n</li>\n<li>\n<p>If the token is a <a href=\"expressions/../tokens.html#raw-byte-string-literals\">RAW_BYTE_STRING_LITERAL</a>, the represented string is identical to the literal content.</p>\n</li>\n</ul>\n<p>The expression's value is a reference to a statically allocated array containing the <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar values</a> of the characters in the represented string, in the same order.</p>\n<blockquote>\n<p><strong>Note</strong>: the permitted forms of <a href=\"expressions/../tokens.html#byte-string-literals\">BYTE_STRING_LITERAL</a> and <a href=\"expressions/../tokens.html#raw-byte-string-literals\">RAW_BYTE_STRING_LITERAL</a> tokens ensure that these rules always produce array element values in the range of <a href=\"expressions/../types/numeric.html\"><code class=\"hljs\">u8</code></a>.</p>\n</blockquote>\n<p>Examples of byte string literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-string\">b\"foo\"</span>; b<span class=\"hljs-string\">r\"foo\"</span>;                     <span class=\"hljs-comment\">// foo</span>\n<span class=\"hljs-string\">b\"\\\"foo\\\"\"</span>; b<span class=\"hljs-string\">r#\"\"foo\"\"#</span>;             <span class=\"hljs-comment\">// \"foo\"</span>\n\n<span class=\"hljs-string\">b\"foo #\\\"# bar\"</span>;\nb<span class=\"hljs-string\">r##\"foo #\"# bar\"##</span>;                 <span class=\"hljs-comment\">// foo #\"# bar</span>\n\n<span class=\"hljs-string\">b\"\\x52\"</span>; <span class=\"hljs-string\">b\"R\"</span>; b<span class=\"hljs-string\">r\"R\"</span>;                <span class=\"hljs-comment\">// R</span>\n<span class=\"hljs-string\">b\"\\\\x52\"</span>; b<span class=\"hljs-string\">r\"\\x52\"</span>;                  <span class=\"hljs-comment\">// \\x52</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"c-string-literal-expressions\"><a class=\"header\" href=\"#c-string-literal-expressions\">C string literal expressions</a></h2>\n<p>A C string literal expression consists of a single <a href=\"expressions/../tokens.html#c-string-literals\">C_STRING_LITERAL</a> or <a href=\"expressions/../tokens.html#raw-c-string-literals\">RAW_C_STRING_LITERAL</a> token.</p>\n<p>The expression's type is a shared reference (with <code class=\"hljs\">static</code> lifetime) to the standard library <a href=\"expressions/../../core/ffi/struct.CStr.html\">CStr</a> type.\nThat is, the type is <code class=\"hljs\">&amp;'static core::ffi::CStr</code>.</p>\n<p>The token must not have a suffix.</p>\n<p>The token's <em>literal content</em> is the sequence of characters following the first <code class=\"hljs\">\"</code> and preceding the last <code class=\"hljs\">\"</code> in the string representation of the token.</p>\n<p>The literal expression's <em>represented bytes</em> are a sequence of bytes derived from the literal content as follows:</p>\n<ul>\n<li>\n<p>If the token is a <a href=\"expressions/../tokens.html#c-string-literals\">C_STRING_LITERAL</a>, the literal content is treated as a sequence of items, each of which is either a single Unicode character other than <code class=\"hljs\">\\</code> or an <a href=\"expressions/literal-expr.html#escapes\">escape</a>.\nThe sequence of items is converted to a sequence of bytes as follows:</p>\n<ul>\n<li>Each single Unicode character contributes its UTF-8 representation.</li>\n<li>Each <a href=\"expressions/literal-expr.html#simple-escapes\">simple escape</a> contributes the <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a> of its escaped value.</li>\n<li>Each <a href=\"expressions/literal-expr.html#8-bit-escapes\">8-bit escape</a> contributes a single byte containing the <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a> of its escaped value.</li>\n<li>Each <a href=\"expressions/literal-expr.html#unicode-escapes\">unicode escape</a> contributes the UTF-8 representation of its escaped value.</li>\n<li>Each <a href=\"expressions/literal-expr.html#string-continuation-escapes\">string continuation escape</a> contributes no bytes.</li>\n</ul>\n</li>\n<li>\n<p>If the token is a <a href=\"expressions/../tokens.html#raw-c-string-literals\">RAW_C_STRING_LITERAL</a>, the represented bytes are the UTF-8 encoding of the literal content.</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: the permitted forms of <a href=\"expressions/../tokens.html#c-string-literals\">C_STRING_LITERAL</a> and <a href=\"expressions/../tokens.html#raw-c-string-literals\">RAW_C_STRING_LITERAL</a> tokens ensure that the represented bytes never include a null byte.</p>\n</blockquote>\n<p>The expression's value is a reference to a statically allocated <a href=\"expressions/../../core/ffi/struct.CStr.html\">CStr</a> whose array of bytes contains the represented bytes followed by a null byte.</p>\n<p>Examples of C string literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>c<span class=\"hljs-string\">\"foo\"</span>; c<span class=\"hljs-string\">r\"foo\"</span>;                     <span class=\"hljs-comment\">// foo</span>\nc<span class=\"hljs-string\">\"\\\"foo\\\"\"</span>; c<span class=\"hljs-string\">r#\"\"foo\"\"#</span>;             <span class=\"hljs-comment\">// \"foo\"</span>\n\nc<span class=\"hljs-string\">\"foo #\\\"# bar\"</span>;\nc<span class=\"hljs-string\">r##\"foo #\"# bar\"##</span>;                 <span class=\"hljs-comment\">// foo #\"# bar</span>\n\nc<span class=\"hljs-string\">\"\\x52\"</span>; c<span class=\"hljs-string\">\"R\"</span>; c<span class=\"hljs-string\">r\"R\"</span>;                <span class=\"hljs-comment\">// R</span>\nc<span class=\"hljs-string\">\"\\\\x52\"</span>; c<span class=\"hljs-string\">r\"\\x52\"</span>;                  <span class=\"hljs-comment\">// \\x52</span>\n\nc<span class=\"hljs-string\">\"æ\"</span>;                                <span class=\"hljs-comment\">// LATIN SMALL LETTER AE (U+00E6)</span>\nc<span class=\"hljs-string\">\"\\u{00E6}\"</span>;                         <span class=\"hljs-comment\">// LATIN SMALL LETTER AE (U+00E6)</span>\nc<span class=\"hljs-string\">\"\\xC3\\xA6\"</span>;                         <span class=\"hljs-comment\">// LATIN SMALL LETTER AE (U+00E6)</span>\n\nc<span class=\"hljs-string\">\"\\xE6\"</span>.to_bytes();                  <span class=\"hljs-comment\">// [230]</span>\nc<span class=\"hljs-string\">\"\\u{00E6}\"</span>.to_bytes();              <span class=\"hljs-comment\">// [195, 166]</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"integer-literal-expressions\"><a class=\"header\" href=\"#integer-literal-expressions\">Integer literal expressions</a></h2>\n<p>An integer literal expression consists of a single <a href=\"expressions/../tokens.html#integer-literals\">INTEGER_LITERAL</a> token.</p>\n<p>If the token has a <a href=\"expressions/../tokens.html#suffixes\">suffix</a>, the suffix must be the name of one of the <a href=\"expressions/../types/numeric.html\">primitive integer types</a>: <code class=\"hljs\">u8</code>, <code class=\"hljs\">i8</code>, <code class=\"hljs\">u16</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">u32</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">u64</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">u128</code>, <code class=\"hljs\">i128</code>, <code class=\"hljs\">usize</code>, or <code class=\"hljs\">isize</code>, and the expression has that type.</p>\n<p>If the token has no suffix, the expression's type is determined by type inference:</p>\n<ul>\n<li>\n<p>If an integer type can be <em>uniquely</em> determined from the surrounding program context, the expression has that type.</p>\n</li>\n<li>\n<p>If the program context under-constrains the type, it defaults to the signed 32-bit integer <code class=\"hljs\">i32</code>.</p>\n</li>\n<li>\n<p>If the program context over-constrains the type, it is considered a static type error.</p>\n</li>\n</ul>\n<p>Examples of integer literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-number\">123</span>;                               <span class=\"hljs-comment\">// type i32</span>\n<span class=\"hljs-number\">123i32</span>;                            <span class=\"hljs-comment\">// type i32</span>\n<span class=\"hljs-number\">123u32</span>;                            <span class=\"hljs-comment\">// type u32</span>\n<span class=\"hljs-number\">123_u32</span>;                           <span class=\"hljs-comment\">// type u32</span>\n<span class=\"hljs-keyword\">let</span> a: <span class=\"hljs-built_in\">u64</span> = <span class=\"hljs-number\">123</span>;                  <span class=\"hljs-comment\">// type u64</span>\n\n<span class=\"hljs-number\">0xff</span>;                              <span class=\"hljs-comment\">// type i32</span>\n<span class=\"hljs-number\">0xff_u8</span>;                           <span class=\"hljs-comment\">// type u8</span>\n\n<span class=\"hljs-number\">0o70</span>;                              <span class=\"hljs-comment\">// type i32</span>\n<span class=\"hljs-number\">0o70_i16</span>;                          <span class=\"hljs-comment\">// type i16</span>\n\n<span class=\"hljs-number\">0b1111_1111_1001_0000</span>;             <span class=\"hljs-comment\">// type i32</span>\n<span class=\"hljs-number\">0b1111_1111_1001_0000i64</span>;          <span class=\"hljs-comment\">// type i64</span>\n\n<span class=\"hljs-number\">0usize</span>;                            <span class=\"hljs-comment\">// type usize</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The value of the expression is determined from the string representation of the token as follows:</p>\n<ul>\n<li>\n<p>An integer radix is chosen by inspecting the first two characters of the string, as follows:</p>\n<ul>\n<li><code class=\"hljs\">0b</code> indicates radix 2</li>\n<li><code class=\"hljs\">0o</code> indicates radix 8</li>\n<li><code class=\"hljs\">0x</code> indicates radix 16</li>\n<li>otherwise the radix is 10.</li>\n</ul>\n</li>\n<li>\n<p>If the radix is not 10, the first two characters are removed from the string.</p>\n</li>\n<li>\n<p>Any suffix is removed from the string.</p>\n</li>\n<li>\n<p>Any underscores are removed from the string.</p>\n</li>\n<li>\n<p>The string is converted to a <code class=\"hljs\">u128</code> value as if by <a href=\"expressions/../../core/primitive.u128.html#method.from_str_radix\"><code class=\"hljs\">u128::from_str_radix</code></a> with the chosen radix.\nIf the value does not fit in <code class=\"hljs\">u128</code>, it is a compiler error.</p>\n</li>\n<li>\n<p>The <code class=\"hljs\">u128</code> value is converted to the expression's type via a <a href=\"expressions/operator-expr.html#numeric-cast\">numeric cast</a>.</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: The final cast will truncate the value of the literal if it does not fit in the expression's type.\n<code class=\"hljs\">rustc</code> includes a <a href=\"expressions/../attributes/diagnostics.html#lint-check-attributes\">lint check</a> named <code class=\"hljs\">overflowing_literals</code>, defaulting to <code class=\"hljs\">deny</code>, which rejects expressions where this occurs.</p>\n</blockquote>\n<blockquote>\n<p><strong>Note</strong>: <code class=\"hljs\">-1i8</code>, for example, is an application of the <a href=\"expressions/operator-expr.html#negation-operators\">negation operator</a> to the literal expression <code class=\"hljs\">1i8</code>, not a single integer literal expression.\nSee <a href=\"expressions/operator-expr.html#overflow\">Overflow</a> for notes on representing the most negative value for a signed type.</p>\n</blockquote>\n<h2 id=\"floating-point-literal-expressions\"><a class=\"header\" href=\"#floating-point-literal-expressions\">Floating-point literal expressions</a></h2>\n<p>A floating-point literal expression has one of two forms:</p>\n<ul>\n<li>a single <a href=\"expressions/../tokens.html#floating-point-literals\">FLOAT_LITERAL</a> token</li>\n<li>a single <a href=\"expressions/../tokens.html#integer-literals\">INTEGER_LITERAL</a> token which has a suffix and no radix indicator</li>\n</ul>\n<p>If the token has a <a href=\"expressions/../tokens.html#suffixes\">suffix</a>, the suffix must be the name of one of the <a href=\"expressions/../types/numeric.html#floating-point-types\">primitive floating-point types</a>: <code class=\"hljs\">f32</code> or <code class=\"hljs\">f64</code>, and the expression has that type.</p>\n<p>If the token has no suffix, the expression's type is determined by type inference:</p>\n<ul>\n<li>\n<p>If a floating-point type can be <em>uniquely</em> determined from the surrounding program context, the expression has that type.</p>\n</li>\n<li>\n<p>If the program context under-constrains the type, it defaults to <code class=\"hljs\">f64</code>.</p>\n</li>\n<li>\n<p>If the program context over-constrains the type, it is considered a static type error.</p>\n</li>\n</ul>\n<p>Examples of floating-point literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-number\">123.0f64</span>;        <span class=\"hljs-comment\">// type f64</span>\n<span class=\"hljs-number\">0.1f64</span>;          <span class=\"hljs-comment\">// type f64</span>\n<span class=\"hljs-number\">0.1f32</span>;          <span class=\"hljs-comment\">// type f32</span>\n<span class=\"hljs-number\">12E+99_f64</span>;      <span class=\"hljs-comment\">// type f64</span>\n<span class=\"hljs-number\">5f32</span>;            <span class=\"hljs-comment\">// type f32</span>\n<span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">f64</span> = <span class=\"hljs-number\">2</span>.; <span class=\"hljs-comment\">// type f64</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The value of the expression is determined from the string representation of the token as follows:</p>\n<ul>\n<li>\n<p>Any suffix is removed from the string.</p>\n</li>\n<li>\n<p>Any underscores are removed from the string.</p>\n</li>\n<li>\n<p>The string is converted to the expression's type as if by <a href=\"expressions/../../core/primitive.f32.html#method.from_str\"><code class=\"hljs\">f32::from_str</code></a> or <a href=\"expressions/../../core/primitive.f64.html#method.from_str\"><code class=\"hljs\">f64::from_str</code></a>.</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: <code class=\"hljs\">-1.0</code>, for example, is an application of the <a href=\"expressions/operator-expr.html#negation-operators\">negation operator</a> to the literal expression <code class=\"hljs\">1.0</code>, not a single floating-point literal expression.</p>\n</blockquote>\n<blockquote>\n<p><strong>Note</strong>: <code class=\"hljs\">inf</code> and <code class=\"hljs\">NaN</code> are not literal tokens.\nThe <a href=\"expressions/../../core/primitive.f32.html#associatedconstant.INFINITY\"><code class=\"hljs\">f32::INFINITY</code></a>, <a href=\"expressions/../../core/primitive.f64.html#associatedconstant.INFINITY\"><code class=\"hljs\">f64::INFINITY</code></a>, <a href=\"expressions/../../core/primitive.f32.html#associatedconstant.NAN\"><code class=\"hljs\">f32::NAN</code></a>, and <a href=\"expressions/../../core/primitive.f64.html#associatedconstant.NAN\"><code class=\"hljs\">f64::NAN</code></a> constants can be used instead of literal expressions.\nIn <code class=\"hljs\">rustc</code>, a literal large enough to be evaluated as infinite will trigger the <code class=\"hljs\">overflowing_literals</code> lint check.</p>\n</blockquote>\n<h2 id=\"boolean-literal-expressions\"><a class=\"header\" href=\"#boolean-literal-expressions\">Boolean literal expressions</a></h2>\n<p>A boolean literal expression consists of one of the keywords <code class=\"hljs\">true</code> or <code class=\"hljs\">false</code>.</p>\n<p>The expression's type is the primitive <a href=\"expressions/../types/boolean.html\">boolean type</a>, and its value is:</p>\n<ul>\n<li>true if the keyword is <code class=\"hljs\">true</code></li>\n<li>false if the keyword is <code class=\"hljs\">false</code></li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"path-expressions\"><a class=\"header\" href=\"#path-expressions\">Path expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>PathExpression</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/../paths.html#paths-in-expressions\"><em>PathInExpression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../paths.html#qualified-paths\"><em>QualifiedPathInExpression</em></a></p>\n</blockquote>\n<p>A <a href=\"expressions/../paths.html\">path</a> used as an expression context denotes either a local variable or an item.\nPath expressions that resolve to local or static variables are <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">place expressions</a>, other paths are <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">value expressions</a>.\nUsing a <a href=\"expressions/../items/static-items.html#mutable-statics\"><code class=\"hljs\">static mut</code></a> variable requires an <a href=\"expressions/block-expr.html#unsafe-blocks\"><code class=\"hljs\">unsafe</code> block</a>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> globals {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">static</span> STATIC_VAR: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">5</span>;\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">mut</span> STATIC_MUT_VAR: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">7</span>;\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> local_var = <span class=\"hljs-number\">3</span>;\n</span>local_var;\nglobals::STATIC_VAR;\n<span class=\"hljs-keyword\">unsafe</span> { globals::STATIC_MUT_VAR };\n<span class=\"hljs-keyword\">let</span> some_constructor = Some::&lt;<span class=\"hljs-built_in\">i32</span>&gt;;\n<span class=\"hljs-keyword\">let</span> push_integer = <span class=\"hljs-built_in\">Vec</span>::&lt;<span class=\"hljs-built_in\">i32</span>&gt;::push;\n<span class=\"hljs-keyword\">let</span> slice_reverse = &lt;[<span class=\"hljs-built_in\">i32</span>]&gt;::reverse;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Evaluation of associated constants is handled the same way as <a href=\"expressions/block-expr.html#const-blocks\"><code class=\"hljs\">const</code> blocks</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"block-expressions\"><a class=\"header\" href=\"#block-expressions\">Block expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>BlockExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">{</code><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/../attributes.html\"><em>InnerAttribute</em></a><sup>*</sup><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>Statements</em><sup>?</sup><br>\n&nbsp;&nbsp; <code class=\"hljs\">}</code></p>\n<p><em>Statements</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/../statements.html\"><em>Statement</em></a><sup>+</sup><br>\n&nbsp;&nbsp; | <a href=\"expressions/../statements.html\"><em>Statement</em></a><sup>+</sup> <a href=\"expressions/../expressions.html\"><em>ExpressionWithoutBlock</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>ExpressionWithoutBlock</em></a></p>\n</blockquote>\n<p>A <em>block expression</em>, or <em>block</em>, is a control flow expression and anonymous namespace scope for items and variable declarations.\nAs a control flow expression, a block sequentially executes its component non-item declaration statements and then its final optional expression.\nAs an anonymous namespace scope, item declarations are only in scope inside the block itself and variables declared by <code class=\"hljs\">let</code> statements are in scope from the next statement until the end of the block.\nSee the <a href=\"expressions/../names/scopes.html\">scopes</a> chapter for more details.</p>\n<p>The syntax for a block is <code class=\"hljs\">{</code>, then any <a href=\"expressions/../attributes.html\">inner attributes</a>, then any number of <a href=\"expressions/../statements.html\">statements</a>, then an optional expression, called the final operand, and finally a <code class=\"hljs\">}</code>.</p>\n<p>Statements are usually required to be followed by a semicolon, with two exceptions:</p>\n<ol>\n<li>Item declaration statements do not need to be followed by a semicolon.</li>\n<li>Expression statements usually require a following semicolon except if its outer expression is a flow control expression.</li>\n</ol>\n<p>Furthermore, extra semicolons between statements are allowed, but these semicolons do not affect semantics.</p>\n<p>When evaluating a block expression, each statement, except for item declaration statements, is executed sequentially.\nThen the final operand is executed, if given.</p>\n<p>The type of a block is the type of the final operand, or <code class=\"hljs\">()</code> if the final operand is omitted.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fn_call</span></span>() {}\n</span><span class=\"hljs-keyword\">let</span> _: () = {\n    fn_call();\n};\n\n<span class=\"hljs-keyword\">let</span> five: <span class=\"hljs-built_in\">i32</span> = {\n    fn_call();\n    <span class=\"hljs-number\">5</span>\n};\n\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">5</span>, five);\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p>Note: As a control flow expression, if a block expression is the outer expression of an expression statement, the expected type is <code class=\"hljs\">()</code> unless it is followed immediately by a semicolon.</p>\n</blockquote>\n<p>Blocks are always <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">value expressions</a> and evaluate the last operand in value expression context.</p>\n<blockquote>\n<p><strong>Note</strong>: This can be used to force moving a value if really needed.\nFor example, the following example fails on the call to <code class=\"hljs\">consume_self</code> because the struct was moved out of <code class=\"hljs\">s</code> in the block expression.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> Struct {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">consume_self</span></span>(<span class=\"hljs-keyword\">self</span>) {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">borrow_self</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">move_by_block_expression</span></span>() {\n    <span class=\"hljs-keyword\">let</span> s = Struct;\n\n    <span class=\"hljs-comment\">// Move the value out of `s` in the block expression.</span>\n    (&amp;{ s }).borrow_self();\n\n    <span class=\"hljs-comment\">// Fails to execute because `s` is moved out of.</span>\n    s.consume_self();\n}\n<span class=\"boring\">}</span></code></pre></pre>\n</blockquote>\n<h2 id=\"async-blocks\"><a class=\"header\" href=\"#async-blocks\"><code>async</code> blocks</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>AsyncBlockExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">async</code> <code class=\"hljs\">move</code><sup>?</sup> <em>BlockExpression</em></p>\n</blockquote>\n<p>An <em>async block</em> is a variant of a block expression which evaluates to a future.\nThe final expression of the block, if present, determines the result value of the future.</p>\n<p>Executing an async block is similar to executing a closure expression:\nits immediate effect is to produce and return an anonymous type.\nWhereas closures return a type that implements one or more of the <a href=\"expressions/../../std/ops/trait.Fn.html\"><code class=\"hljs\">std::ops::Fn</code></a> traits, however, the type returned for an async block implements the <a href=\"expressions/../../std/future/trait.Future.html\"><code class=\"hljs\">std::future::Future</code></a> trait.\nThe actual data format for this type is unspecified.</p>\n<blockquote>\n<p><strong>Note:</strong> The future type that rustc generates is roughly equivalent to an enum with one variant per <code class=\"hljs\">await</code> point, where each variant stores the data needed to resume from its corresponding point.</p>\n</blockquote>\n<blockquote>\n<p><strong>Edition differences</strong>: Async blocks are only available beginning with Rust 2018.</p>\n</blockquote>\n<h3 id=\"capture-modes\"><a class=\"header\" href=\"#capture-modes\">Capture modes</a></h3>\n<p>Async blocks capture variables from their environment using the same <a href=\"expressions/../types/closure.html#capture-modes\">capture modes</a> as closures.\nLike closures, when written <code class=\"hljs\">async { .. }</code> the capture mode for each variable will be inferred from the content of the block.\n<code class=\"hljs\">async move { .. }</code> blocks however will move all referenced variables into the resulting future.</p>\n<h3 id=\"async-context\"><a class=\"header\" href=\"#async-context\">Async context</a></h3>\n<p>Because async blocks construct a future, they define an <strong>async context</strong> which can in turn contain <a href=\"expressions/await-expr.html\"><code class=\"hljs\">await</code> expressions</a>.\nAsync contexts are established by async blocks as well as the bodies of async functions, whose semantics are defined in terms of async blocks.</p>\n<h3 id=\"control-flow-operators\"><a class=\"header\" href=\"#control-flow-operators\">Control-flow operators</a></h3>\n<p>Async blocks act like a function boundary, much like closures.\nTherefore, the <code class=\"hljs\">?</code> operator and <code class=\"hljs\">return</code> expressions both affect the output of the future, not the enclosing function or other context.\nThat is, <code class=\"hljs\">return &lt;expr&gt;</code> from within an async block will return the result of <code class=\"hljs\">&lt;expr&gt;</code> as the output of the future.\nSimilarly, if <code class=\"hljs\">&lt;expr&gt;?</code> propagates an error, that error is propagated as the result of the future.</p>\n<p>Finally, the <code class=\"hljs\">break</code> and <code class=\"hljs\">continue</code> keywords cannot be used to branch out from an async block.\nTherefore the following is illegal:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">loop</span> {\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">move</span> {\n        <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// error[E0267]: `break` inside of an `async` block</span>\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"const-blocks\"><a class=\"header\" href=\"#const-blocks\"><code>const</code> blocks</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ConstBlockExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">const</code> <em>BlockExpression</em></p>\n</blockquote>\n<p>A <em>const block</em> is a variant of a block expression whose body evaluates at compile-time instead of at runtime.</p>\n<p>Const blocks allows you to define a constant value without having to define new <a href=\"expressions/../items/constant-items.html\">constant items</a>, and thus they are also sometimes referred as <em>inline consts</em>.\nIt also supports type inference so there is no need to specify the type, unlike <a href=\"expressions/../items/constant-items.html\">constant items</a>.</p>\n<p>Const blocks have the ability to reference generic parameters in scope, unlike <a href=\"expressions/../glossary.html#free-item\">free</a> constant items.\nThey are desugared to constant items with generic parameters in scope (similar to associated constants, but without a trait or type they are associated with).\nFor example, this code:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T&gt;() -&gt; <span class=\"hljs-built_in\">usize</span> {\n    <span class=\"hljs-keyword\">const</span> { std::mem::size_of::&lt;T&gt;() + <span class=\"hljs-number\">1</span> }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>is equivalent to:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T&gt;() -&gt; <span class=\"hljs-built_in\">usize</span> {\n    {\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Const</span></span>&lt;T&gt;(T);\n        <span class=\"hljs-keyword\">impl</span>&lt;T&gt; Const&lt;T&gt; {\n            <span class=\"hljs-keyword\">const</span> CONST: <span class=\"hljs-built_in\">usize</span> = std::mem::size_of::&lt;T&gt;() + <span class=\"hljs-number\">1</span>;\n        }\n        Const::&lt;T&gt;::CONST\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If the const block expression is executed at runtime, then the constant is guaranteed to be evaluated, even if its return value is ignored:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T&gt;() -&gt; <span class=\"hljs-built_in\">usize</span> {\n    <span class=\"hljs-comment\">// If this code ever gets executed, then the assertion has definitely</span>\n    <span class=\"hljs-comment\">// been evaluated at compile-time.</span>\n    <span class=\"hljs-keyword\">const</span> { <span class=\"hljs-built_in\">assert!</span>(std::mem::size_of::&lt;T&gt;() &gt; <span class=\"hljs-number\">0</span>); }\n    <span class=\"hljs-comment\">// Here we can have unsafe code relying on the type being non-zero-sized.</span>\n    <span class=\"hljs-comment\">/* ... */</span>\n    <span class=\"hljs-number\">42</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If the const block expression is not executed at runtime, it may or may not be evaluated:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">false</span> {\n    <span class=\"hljs-comment\">// The panic may or may not occur when the program is built.</span>\n    <span class=\"hljs-keyword\">const</span> { <span class=\"hljs-built_in\">panic!</span>(); }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"unsafe-blocks\"><a class=\"header\" href=\"#unsafe-blocks\"><code>unsafe</code> blocks</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>UnsafeBlockExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">unsafe</code> <em>BlockExpression</em></p>\n</blockquote>\n<p><em>See <a href=\"expressions/../unsafe-blocks.html\"><code class=\"hljs\">unsafe</code> block</a> for more information on when to use <code class=\"hljs\">unsafe</code></em></p>\n<p>A block of code can be prefixed with the <code class=\"hljs\">unsafe</code> keyword to permit <a href=\"expressions/../unsafety.html\">unsafe operations</a>.\nExamples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">unsafe</span> {\n    <span class=\"hljs-keyword\">let</span> b = [<span class=\"hljs-number\">13u8</span>, <span class=\"hljs-number\">17u8</span>];\n    <span class=\"hljs-keyword\">let</span> a = &amp;b[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>;\n    <span class=\"hljs-built_in\">assert_eq!</span>(*a, <span class=\"hljs-number\">13</span>);\n    <span class=\"hljs-built_in\">assert_eq!</span>(*a.offset(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">17</span>);\n}\n\n<span class=\"boring\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">an_unsafe_fn</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">10</span> }\n</span><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-keyword\">unsafe</span> { an_unsafe_fn() };\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"labelled-block-expressions\"><a class=\"header\" href=\"#labelled-block-expressions\">Labelled block expressions</a></h2>\n<p>Labelled block expressions are documented in the <a href=\"expressions/loop-expr.html#labelled-block-expressions\">Loops and other breakable expressions</a> section.</p>\n<h2 id=\"attributes-on-block-expressions\"><a class=\"header\" href=\"#attributes-on-block-expressions\">Attributes on block expressions</a></h2>\n<p><a href=\"expressions/../attributes.html\">Inner attributes</a> are allowed directly after the opening brace of a block expression in the following situations:</p>\n<ul>\n<li><a href=\"expressions/../items/functions.html\">Function</a> and <a href=\"expressions/../items/associated-items.html#methods\">method</a> bodies.</li>\n<li>Loop bodies (<a href=\"expressions/loop-expr.html#infinite-loops\"><code class=\"hljs\">loop</code></a>, <a href=\"expressions/loop-expr.html#predicate-loops\"><code class=\"hljs\">while</code></a>, <a href=\"expressions/loop-expr.html#predicate-pattern-loops\"><code class=\"hljs\">while let</code></a>, and <a href=\"expressions/loop-expr.html#iterator-loops\"><code class=\"hljs\">for</code></a>).</li>\n<li>Block expressions used as a <a href=\"expressions/../statements.html\">statement</a>.</li>\n<li>Block expressions as elements of <a href=\"expressions/array-expr.html\">array expressions</a>, <a href=\"expressions/tuple-expr.html\">tuple expressions</a>,\n<a href=\"expressions/call-expr.html\">call expressions</a>, and tuple-style <a href=\"expressions/struct-expr.html\">struct</a> expressions.</li>\n<li>A block expression as the tail expression of another block expression.</li>\n</ul>\n<!-- Keep list in sync with expressions.md -->\n<p>The attributes that have meaning on a block expression are <a href=\"expressions/../conditional-compilation.html\"><code class=\"hljs\">cfg</code></a> and <a href=\"expressions/../attributes/diagnostics.html#lint-check-attributes\">the lint check attributes</a>.</p>\n<p>For example, this function returns <code class=\"hljs\">true</code> on unix platforms and <code class=\"hljs\">false</code> on other platforms.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">is_unix_platform</span></span>() -&gt; <span class=\"hljs-built_in\">bool</span> {\n    <span class=\"hljs-meta\">#[cfg(unix)]</span> { <span class=\"hljs-literal\">true</span> }\n    <span class=\"hljs-meta\">#[cfg(not(unix))]</span> { <span class=\"hljs-literal\">false</span> }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"operator-expressions\"><a class=\"header\" href=\"#operator-expressions\">Operator expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>OperatorExpression</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/operator-expr.html#borrow-operators\"><em>BorrowExpression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/operator-expr.html#the-dereference-operator\"><em>DereferenceExpression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/operator-expr.html#the-question-mark-operator\"><em>ErrorPropagationExpression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/operator-expr.html#negation-operators\"><em>NegationExpression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\"><em>ArithmeticOrLogicalExpression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/operator-expr.html#comparison-operators\"><em>ComparisonExpression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/operator-expr.html#lazy-boolean-operators\"><em>LazyBooleanExpression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/operator-expr.html#type-cast-expressions\"><em>TypeCastExpression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/operator-expr.html#assignment-expressions\"><em>AssignmentExpression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/operator-expr.html#compound-assignment-expressions\"><em>CompoundAssignmentExpression</em></a></p>\n</blockquote>\n<p>Operators are defined for built in types by the Rust language.\nMany of the following operators can also be overloaded using traits in <code class=\"hljs\">std::ops</code> or <code class=\"hljs\">std::cmp</code>.</p>\n<h2 id=\"overflow\"><a class=\"header\" href=\"#overflow\">Overflow</a></h2>\n<p>Integer operators will panic when they overflow when compiled in debug mode.\nThe <code class=\"hljs\">-C debug-assertions</code> and <code class=\"hljs\">-C overflow-checks</code> compiler flags can be used to control this more directly.\nThe following things are considered to be overflow:</p>\n<ul>\n<li>When <code class=\"hljs\">+</code>, <code class=\"hljs\">*</code> or binary <code class=\"hljs\">-</code> create a value greater than the maximum value, or less than the minimum value that can be stored.</li>\n<li>Applying unary <code class=\"hljs\">-</code> to the most negative value of any signed integer type, unless the operand is a <a href=\"expressions/literal-expr.html#integer-literal-expressions\">literal expression</a> (or a literal expression standing alone inside one or more <a href=\"expressions/grouped-expr.html\">grouped expressions</a>).</li>\n<li>Using <code class=\"hljs\">/</code> or <code class=\"hljs\">%</code>, where the left-hand argument is the smallest integer of a signed integer type and the right-hand argument is <code class=\"hljs\">-1</code>.\nThese checks occur even when <code class=\"hljs\">-C overflow-checks</code> is disabled, for legacy reasons.</li>\n<li>Using <code class=\"hljs\">&lt;&lt;</code> or <code class=\"hljs\">&gt;&gt;</code> where the right-hand argument is greater than or equal to the number of bits in the type of the left-hand argument, or is negative.</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: The exception for literal expressions behind unary <code class=\"hljs\">-</code> means that forms such as <code class=\"hljs\">-128_i8</code> or <code class=\"hljs\">let j: i8 = -(128)</code> never cause a panic and have the expected value of -128.</p>\n<p>In these cases, the literal expression already has the most negative value for its type (for example, <code class=\"hljs\">128_i8</code> has the value -128) because integer literals are truncated to their type per the description in <a href=\"expressions/literal-expr.html#integer-literal-expressions\">Integer literal expressions</a>.</p>\n<p>Negation of these most negative values leaves the value unchanged due to two's complement overflow conventions.</p>\n<p>In <code class=\"hljs\">rustc</code>, these most negative expressions are also ignored by the <code class=\"hljs\">overflowing_literals</code> lint check.</p>\n</blockquote>\n<h2 id=\"borrow-operators\"><a class=\"header\" href=\"#borrow-operators\">Borrow operators</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>BorrowExpression</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; (<code class=\"hljs\">&amp;</code>|<code class=\"hljs\">&amp;&amp;</code>) <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | (<code class=\"hljs\">&amp;</code>|<code class=\"hljs\">&amp;&amp;</code>) <code class=\"hljs\">mut</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p>The <code class=\"hljs\">&amp;</code> (shared borrow) and <code class=\"hljs\">&amp;mut</code> (mutable borrow) operators are unary prefix operators.\nWhen applied to a <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">place expression</a>, this expressions produces a reference (pointer) to the location that the value refers to.\nThe memory location is also placed into a borrowed state for the duration of the reference.\nFor a shared borrow (<code class=\"hljs\">&amp;</code>), this implies that the place may not be mutated, but it may be read or shared again.\nFor a mutable borrow (<code class=\"hljs\">&amp;mut</code>), the place may not be accessed in any way until the borrow expires.\n<code class=\"hljs\">&amp;mut</code> evaluates its operand in a mutable place expression context.\nIf the <code class=\"hljs\">&amp;</code> or <code class=\"hljs\">&amp;mut</code> operators are applied to a <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">value expression</a>, then a <a href=\"expressions/../expressions.html#temporaries\">temporary value</a> is created.</p>\n<p>These operators cannot be overloaded.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>{\n    <span class=\"hljs-comment\">// a temporary with value 7 is created that lasts for this scope.</span>\n    <span class=\"hljs-keyword\">let</span> shared_reference = &amp;<span class=\"hljs-number\">7</span>;\n}\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> array = [-<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>];\n{\n    <span class=\"hljs-comment\">// Mutably borrows `array` for this scope.</span>\n    <span class=\"hljs-comment\">// `array` may only be used through `mutable_reference`.</span>\n    <span class=\"hljs-keyword\">let</span> mutable_reference = &amp;<span class=\"hljs-keyword\">mut</span> array;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Even though <code class=\"hljs\">&amp;&amp;</code> is a single token (<a href=\"expressions/operator-expr.html#lazy-boolean-operators\">the lazy 'and' operator</a>), when used in the context of borrow expressions it works as two borrows:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// same meanings:</span>\n<span class=\"hljs-keyword\">let</span> a = &amp;&amp;  <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">let</span> a = &amp; &amp; <span class=\"hljs-number\">10</span>;\n\n<span class=\"hljs-comment\">// same meanings:</span>\n<span class=\"hljs-keyword\">let</span> a = &amp;&amp;&amp;&amp;  <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">let</span> a = &amp;&amp; &amp;&amp; <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">let</span> a = &amp; &amp; &amp; &amp; <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-number\">10</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"raw-address-of-operators\"><a class=\"header\" href=\"#raw-address-of-operators\">Raw address-of operators</a></h3>\n<p>Related to the borrow operators are the <em>raw address-of operators</em>, which do not have first-class syntax, but are exposed via the macros <a href=\"expressions/../../std/ptr/macro.addr_of.html\"><code class=\"hljs\">ptr::addr_of!(expr)</code></a> and <a href=\"expressions/../../std/ptr/macro.addr_of_mut.html\"><code class=\"hljs\">ptr::addr_of_mut!(expr)</code></a>.\nThe expression <code class=\"hljs\">expr</code> is evaluated in place expression context.\n<code class=\"hljs\">ptr::addr_of!(expr)</code> then creates a const raw pointer of type <code class=\"hljs\">*const T</code> to the given place, and <code class=\"hljs\">ptr::addr_of_mut!(expr)</code> creates a mutable raw pointer of type <code class=\"hljs\">*mut T</code>.</p>\n<p>The raw address-of operators must be used instead of a borrow operator whenever the place expression could evaluate to a place that is not properly aligned or does not store a valid value as determined by its type, or whenever creating a reference would introduce incorrect aliasing assumptions.\nIn those situations, using a borrow operator would cause <a href=\"expressions/../behavior-considered-undefined.html\">undefined behavior</a> by creating an invalid reference, but a raw pointer may still be constructed using an address-of operator.</p>\n<p>The following is an example of creating a raw pointer to an unaligned place through a <code class=\"hljs\">packed</code> struct:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::ptr;\n\n<span class=\"hljs-meta\">#[repr(packed)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Packed</span></span> {\n    f1: <span class=\"hljs-built_in\">u8</span>,\n    f2: <span class=\"hljs-built_in\">u16</span>,\n}\n\n<span class=\"hljs-keyword\">let</span> packed = Packed { f1: <span class=\"hljs-number\">1</span>, f2: <span class=\"hljs-number\">2</span> };\n<span class=\"hljs-comment\">// `&amp;packed.f2` would create an unaligned reference, and thus be Undefined Behavior!</span>\n<span class=\"hljs-keyword\">let</span> raw_f2 = ptr::addr_of!(packed.f2);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-keyword\">unsafe</span> { raw_f2.read_unaligned() }, <span class=\"hljs-number\">2</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The following is an example of creating a raw pointer to a place that does not contain a valid value:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::{ptr, mem::MaybeUninit};\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Demo</span></span> {\n    field: <span class=\"hljs-built_in\">bool</span>,\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> uninit = MaybeUninit::&lt;Demo&gt;::uninit();\n<span class=\"hljs-comment\">// `&amp;uninit.as_mut().field` would create a reference to an uninitialized `bool`,</span>\n<span class=\"hljs-comment\">// and thus be Undefined Behavior!</span>\n<span class=\"hljs-keyword\">let</span> f1_ptr = <span class=\"hljs-keyword\">unsafe</span> { ptr::addr_of_mut!((*uninit.as_mut_ptr()).field) };\n<span class=\"hljs-keyword\">unsafe</span> { f1_ptr.write(<span class=\"hljs-literal\">true</span>); }\n<span class=\"hljs-keyword\">let</span> init = <span class=\"hljs-keyword\">unsafe</span> { uninit.assume_init() };\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"the-dereference-operator\"><a class=\"header\" href=\"#the-dereference-operator\">The dereference operator</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>DereferenceExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">*</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p>The <code class=\"hljs\">*</code> (dereference) operator is also a unary prefix operator.\nWhen applied to a <a href=\"expressions/../types/pointer.html\">pointer</a> it denotes the pointed-to location.\nIf the expression is of type <code class=\"hljs\">&amp;mut T</code> or <code class=\"hljs\">*mut T</code>, and is either a local variable, a (nested) field of a local variable or is a mutable <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">place expression</a>, then the resulting memory location can be assigned to.\nDereferencing a raw pointer requires <code class=\"hljs\">unsafe</code>.</p>\n<p>On non-pointer types <code class=\"hljs\">*x</code> is equivalent to <code class=\"hljs\">*std::ops::Deref::deref(&amp;x)</code> in an <a href=\"expressions/../expressions.html#mutability\">immutable place expression context</a> and <code class=\"hljs\">*std::ops::DerefMut::deref_mut(&amp;mut x)</code> in a mutable place expression context.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = &amp;<span class=\"hljs-number\">7</span>;\n<span class=\"hljs-built_in\">assert_eq!</span>(*x, <span class=\"hljs-number\">7</span>);\n<span class=\"hljs-keyword\">let</span> y = &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-number\">9</span>;\n*y = <span class=\"hljs-number\">11</span>;\n<span class=\"hljs-built_in\">assert_eq!</span>(*y, <span class=\"hljs-number\">11</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"the-question-mark-operator\"><a class=\"header\" href=\"#the-question-mark-operator\">The question mark operator</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ErrorPropagationExpression</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">?</code></p>\n</blockquote>\n<p>The question mark operator (<code class=\"hljs\">?</code>) unwraps valid values or returns erroneous values, propagating them to the calling function.\nIt is a unary postfix operator that can only be applied to the types <code class=\"hljs\">Result&lt;T, E&gt;</code> and <code class=\"hljs\">Option&lt;T&gt;</code>.</p>\n<p>When applied to values of the <code class=\"hljs\">Result&lt;T, E&gt;</code> type, it propagates errors.\nIf the value is <code class=\"hljs\">Err(e)</code>, then it will return <code class=\"hljs\">Err(From::from(e))</code> from the enclosing function or closure.\nIf applied to <code class=\"hljs\">Ok(x)</code>, then it will unwrap the value to evaluate to <code class=\"hljs\">x</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::num::ParseIntError;\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">try_to_parse</span></span>() -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">i32</span>, ParseIntError&gt; {\n    <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-string\">\"123\"</span>.parse()?; <span class=\"hljs-comment\">// x = 123</span>\n    <span class=\"hljs-keyword\">let</span> y: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-string\">\"24a\"</span>.parse()?; <span class=\"hljs-comment\">// returns an Err() immediately</span>\n    <span class=\"hljs-literal\">Ok</span>(x + y)                    <span class=\"hljs-comment\">// Doesn't run.</span>\n}\n\n<span class=\"hljs-keyword\">let</span> res = try_to_parse();\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{:?}\"</span>, res);\n<span class=\"boring\"><span class=\"hljs-built_in\">assert!</span>(res.is_err())\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>When applied to values of the <code class=\"hljs\">Option&lt;T&gt;</code> type, it propagates <code class=\"hljs\">None</code>s.\nIf the value is <code class=\"hljs\">None</code>, then it will return <code class=\"hljs\">None</code>.\nIf applied to <code class=\"hljs\">Some(x)</code>, then it will unwrap the value to evaluate to <code class=\"hljs\">x</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">try_option_some</span></span>() -&gt; <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">u8</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> val = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">1</span>)?;\n    <span class=\"hljs-literal\">Some</span>(val)\n}\n<span class=\"hljs-built_in\">assert_eq!</span>(try_option_some(), <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">1</span>));\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">try_option_none</span></span>() -&gt; <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">u8</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> val = <span class=\"hljs-literal\">None</span>?;\n    <span class=\"hljs-literal\">Some</span>(val)\n}\n<span class=\"hljs-built_in\">assert_eq!</span>(try_option_none(), <span class=\"hljs-literal\">None</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><code class=\"hljs\">?</code> cannot be overloaded.</p>\n<h2 id=\"negation-operators\"><a class=\"header\" href=\"#negation-operators\">Negation operators</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>NegationExpression</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">-</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <code class=\"hljs\">!</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p>These are the last two unary operators.\nThis table summarizes the behavior of them on primitive types and which traits are used to overload these operators for other types.\nRemember that signed integers are always represented using two's complement.\nThe operands of all of these operators are evaluated in <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">value expression context</a> so are moved or copied.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Integer</th><th><code class=\"hljs\">bool</code></th><th>Floating Point</th><th>Overloading Trait</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">-</code></td><td>Negation*</td><td></td><td>Negation</td><td><code class=\"hljs\">std::ops::Neg</code></td></tr>\n<tr><td><code class=\"hljs\">!</code></td><td>Bitwise NOT</td><td><a href=\"expressions/../types/boolean.html#logical-not\">Logical NOT</a></td><td></td><td><code class=\"hljs\">std::ops::Not</code></td></tr>\n</tbody></table>\n</div>\n<p>* Only for signed integer types.</p>\n<p>Here are some example of these operators</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">6</span>;\n<span class=\"hljs-built_in\">assert_eq!</span>(-x, -<span class=\"hljs-number\">6</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(!x, -<span class=\"hljs-number\">7</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-literal\">true</span>, !<span class=\"hljs-literal\">false</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"arithmetic-and-logical-binary-operators\"><a class=\"header\" href=\"#arithmetic-and-logical-binary-operators\">Arithmetic and Logical Binary Operators</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ArithmeticOrLogicalExpression</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">+</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">-</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">*</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">/</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">%</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">&amp;</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">|</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">^</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">&lt;&lt;</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">&gt;&gt;</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p>Binary operators expressions are all written with infix notation.\nThis table summarizes the behavior of arithmetic and logical binary operators on primitive types and which traits are used to overload these operators for other types.\nRemember that signed integers are always represented using two's complement.\nThe operands of all of these operators are evaluated in <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">value expression context</a> so are moved or copied.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Integer</th><th><code class=\"hljs\">bool</code></th><th>Floating Point</th><th>Overloading Trait</th><th>Overloading Compound Assignment Trait</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">+</code></td><td>Addition</td><td></td><td>Addition</td><td><code class=\"hljs\">std::ops::Add</code></td><td><code class=\"hljs\">std::ops::AddAssign</code></td></tr>\n<tr><td><code class=\"hljs\">-</code></td><td>Subtraction</td><td></td><td>Subtraction</td><td><code class=\"hljs\">std::ops::Sub</code></td><td><code class=\"hljs\">std::ops::SubAssign</code></td></tr>\n<tr><td><code class=\"hljs\">*</code></td><td>Multiplication</td><td></td><td>Multiplication</td><td><code class=\"hljs\">std::ops::Mul</code></td><td><code class=\"hljs\">std::ops::MulAssign</code></td></tr>\n<tr><td><code class=\"hljs\">/</code></td><td>Division*†</td><td></td><td>Division</td><td><code class=\"hljs\">std::ops::Div</code></td><td><code class=\"hljs\">std::ops::DivAssign</code></td></tr>\n<tr><td><code class=\"hljs\">%</code></td><td>Remainder**†</td><td></td><td>Remainder</td><td><code class=\"hljs\">std::ops::Rem</code></td><td><code class=\"hljs\">std::ops::RemAssign</code></td></tr>\n<tr><td><code class=\"hljs\">&amp;</code></td><td>Bitwise AND</td><td><a href=\"expressions/../types/boolean.html#logical-and\">Logical AND</a></td><td></td><td><code class=\"hljs\">std::ops::BitAnd</code></td><td><code class=\"hljs\">std::ops::BitAndAssign</code></td></tr>\n<tr><td><code class=\"hljs\">|</code></td><td>Bitwise OR</td><td><a href=\"expressions/../types/boolean.html#logical-or\">Logical OR</a></td><td></td><td><code class=\"hljs\">std::ops::BitOr</code></td><td><code class=\"hljs\">std::ops::BitOrAssign</code></td></tr>\n<tr><td><code class=\"hljs\">^</code></td><td>Bitwise XOR</td><td><a href=\"expressions/../types/boolean.html#logical-xor\">Logical XOR</a></td><td></td><td><code class=\"hljs\">std::ops::BitXor</code></td><td><code class=\"hljs\">std::ops::BitXorAssign</code></td></tr>\n<tr><td><code class=\"hljs\">&lt;&lt;</code></td><td>Left Shift</td><td></td><td></td><td><code class=\"hljs\">std::ops::Shl</code></td><td><code class=\"hljs\">std::ops::ShlAssign</code></td></tr>\n<tr><td><code class=\"hljs\">&gt;&gt;</code></td><td>Right Shift***</td><td></td><td></td><td><code class=\"hljs\">std::ops::Shr</code></td><td><code class=\"hljs\">std::ops::ShrAssign</code></td></tr>\n</tbody></table>\n</div>\n<p>* Integer division rounds towards zero.</p>\n<p>** Rust uses a remainder defined with <a href=\"https://en.wikipedia.org/wiki/Modulo_operation#Variants_of_the_definition\">truncating division</a>. Given <code class=\"hljs\">remainder = dividend % divisor</code>, the remainder will have the same sign as the dividend.</p>\n<p>*** Arithmetic right shift on signed integer types, logical right shift on\nunsigned integer types.</p>\n<p>† For integer types, division by zero panics.</p>\n<p>Here are examples of these operators being used.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">5.5</span> - <span class=\"hljs-number\">1.25</span>, <span class=\"hljs-number\">4.25</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(-<span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">14</span>, -<span class=\"hljs-number\">70</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">14</span> / <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">100</span> % <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0b1010</span> &amp; <span class=\"hljs-number\">0b1100</span>, <span class=\"hljs-number\">0b1000</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0b1010</span> | <span class=\"hljs-number\">0b1100</span>, <span class=\"hljs-number\">0b1110</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0b1010</span> ^ <span class=\"hljs-number\">0b1100</span>, <span class=\"hljs-number\">0b110</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">13</span> &lt;&lt; <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">104</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(-<span class=\"hljs-number\">10</span> &gt;&gt; <span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">3</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"comparison-operators\"><a class=\"header\" href=\"#comparison-operators\">Comparison Operators</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ComparisonExpression</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">==</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">!=</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">&gt;</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">&lt;</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">&gt;=</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">&lt;=</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p>Comparison operators are also defined both for primitive types and many types in the standard library.\nParentheses are required when chaining comparison operators. For example, the expression <code class=\"hljs\">a == b == c</code> is invalid and may be written as <code class=\"hljs\">(a == b) == c</code>.</p>\n<p>Unlike arithmetic and logical operators, the traits for overloading these operators are used more generally to show how a type may be compared and will likely be assumed to define actual comparisons by functions that use these traits as bounds.\nMany functions and macros in the standard library can then use that assumption (although not to ensure safety).\nUnlike the arithmetic and logical operators above, these operators implicitly take shared borrows of their operands, evaluating them in <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">place expression context</a>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">1</span>;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">1</span>;\n</span>a == b;\n<span class=\"hljs-comment\">// is equivalent to</span>\n::std::cmp::<span class=\"hljs-built_in\">PartialEq</span>::eq(&amp;a, &amp;b);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This means that the operands don't have to be moved out of.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Meaning</th><th>Overloading method</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">==</code></td><td>Equal</td><td><code class=\"hljs\">std::cmp::PartialEq::eq</code></td></tr>\n<tr><td><code class=\"hljs\">!=</code></td><td>Not equal</td><td><code class=\"hljs\">std::cmp::PartialEq::ne</code></td></tr>\n<tr><td><code class=\"hljs\">&gt;</code></td><td>Greater than</td><td><code class=\"hljs\">std::cmp::PartialOrd::gt</code></td></tr>\n<tr><td><code class=\"hljs\">&lt;</code></td><td>Less than</td><td><code class=\"hljs\">std::cmp::PartialOrd::lt</code></td></tr>\n<tr><td><code class=\"hljs\">&gt;=</code></td><td>Greater than or equal to</td><td><code class=\"hljs\">std::cmp::PartialOrd::ge</code></td></tr>\n<tr><td><code class=\"hljs\">&lt;=</code></td><td>Less than or equal to</td><td><code class=\"hljs\">std::cmp::PartialOrd::le</code></td></tr>\n</tbody></table>\n</div>\n<p>Here are examples of the comparison operators being used.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-number\">123</span> == <span class=\"hljs-number\">123</span>);\n<span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-number\">23</span> != -<span class=\"hljs-number\">12</span>);\n<span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-number\">12.5</span> &gt; <span class=\"hljs-number\">12.2</span>);\n<span class=\"hljs-built_in\">assert!</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>] &lt; [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\n<span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-string\">'A'</span> &lt;= <span class=\"hljs-string\">'B'</span>);\n<span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-string\">\"World\"</span> &gt;= <span class=\"hljs-string\">\"Hello\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"lazy-boolean-operators\"><a class=\"header\" href=\"#lazy-boolean-operators\">Lazy boolean operators</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>LazyBooleanExpression</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">||</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">&amp;&amp;</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p>The operators <code class=\"hljs\">||</code> and <code class=\"hljs\">&amp;&amp;</code> may be applied to operands of boolean type.\nThe <code class=\"hljs\">||</code> operator denotes logical 'or', and the <code class=\"hljs\">&amp;&amp;</code> operator denotes logical 'and'.\nThey differ from <code class=\"hljs\">|</code> and <code class=\"hljs\">&amp;</code> in that the right-hand operand is only evaluated when the left-hand operand does not already determine the result of the expression.\nThat is, <code class=\"hljs\">||</code> only evaluates its right-hand operand when the left-hand operand evaluates to <code class=\"hljs\">false</code>, and <code class=\"hljs\">&amp;&amp;</code> only when it evaluates to <code class=\"hljs\">true</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-literal\">false</span> || <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-literal\">false</span> &amp;&amp; <span class=\"hljs-built_in\">panic!</span>(); <span class=\"hljs-comment\">// false, doesn't evaluate `panic!()`</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"type-cast-expressions\"><a class=\"header\" href=\"#type-cast-expressions\">Type cast expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>TypeCastExpression</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">as</code> <a href=\"expressions/../types.html#type-expressions\"><em>TypeNoBounds</em></a></p>\n</blockquote>\n<p>A type cast expression is denoted with the binary operator <code class=\"hljs\">as</code>.</p>\n<p>Executing an <code class=\"hljs\">as</code> expression casts the value on the left-hand side to the type on the right-hand side.</p>\n<p>An example of an <code class=\"hljs\">as</code> expression:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">sum</span></span>(values: &amp;[<span class=\"hljs-built_in\">f64</span>]) -&gt; <span class=\"hljs-built_in\">f64</span> { <span class=\"hljs-number\">0.0</span> }\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">len</span></span>(values: &amp;[<span class=\"hljs-built_in\">f64</span>]) -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">0</span> }\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">average</span></span>(values: &amp;[<span class=\"hljs-built_in\">f64</span>]) -&gt; <span class=\"hljs-built_in\">f64</span> {\n    <span class=\"hljs-keyword\">let</span> sum: <span class=\"hljs-built_in\">f64</span> = sum(values);\n    <span class=\"hljs-keyword\">let</span> size: <span class=\"hljs-built_in\">f64</span> = len(values) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span>;\n    sum / size\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><code class=\"hljs\">as</code> can be used to explicitly perform <a href=\"expressions/../type-coercions.html\">coercions</a>, as well as the following additional casts.\nAny cast that does not fit either a coercion rule or an entry in the table is a compiler error.\nHere <code class=\"hljs\">*T</code> means either <code class=\"hljs\">*const T</code> or <code class=\"hljs\">*mut T</code>. <code class=\"hljs\">m</code> stands for optional <code class=\"hljs\">mut</code> in\nreference types and <code class=\"hljs\">mut</code> or <code class=\"hljs\">const</code> in pointer types.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Type of <code class=\"hljs\">e</code></th><th><code class=\"hljs\">U</code></th><th>Cast performed by <code class=\"hljs\">e as U</code></th></tr></thead><tbody>\n<tr><td>Integer or Float type</td><td>Integer or Float type</td><td>Numeric cast</td></tr>\n<tr><td>Enumeration</td><td>Integer type</td><td>Enum cast</td></tr>\n<tr><td><code class=\"hljs\">bool</code> or <code class=\"hljs\">char</code></td><td>Integer type</td><td>Primitive to integer cast</td></tr>\n<tr><td><code class=\"hljs\">u8</code></td><td><code class=\"hljs\">char</code></td><td><code class=\"hljs\">u8</code> to <code class=\"hljs\">char</code> cast</td></tr>\n<tr><td><code class=\"hljs\">*T</code></td><td><code class=\"hljs\">*V</code> where <code class=\"hljs\">V: Sized</code> *</td><td>Pointer to pointer cast</td></tr>\n<tr><td><code class=\"hljs\">*T</code> where <code class=\"hljs\">T: Sized</code></td><td>Integer type</td><td>Pointer to address cast</td></tr>\n<tr><td>Integer type</td><td><code class=\"hljs\">*V</code> where <code class=\"hljs\">V: Sized</code></td><td>Address to pointer cast</td></tr>\n<tr><td><code class=\"hljs\">&amp;m₁ T</code></td><td><code class=\"hljs\">*m₂ T</code> **</td><td>Reference to pointer cast</td></tr>\n<tr><td><code class=\"hljs\">&amp;m₁ [T; n]</code></td><td><code class=\"hljs\">*m₂ T</code> **</td><td>Array to pointer cast</td></tr>\n<tr><td><a href=\"expressions/../types/function-item.html\">Function item</a></td><td><a href=\"expressions/../types/function-pointer.html\">Function pointer</a></td><td>Function item to function pointer cast</td></tr>\n<tr><td><a href=\"expressions/../types/function-item.html\">Function item</a></td><td><code class=\"hljs\">*V</code> where <code class=\"hljs\">V: Sized</code></td><td>Function item to pointer cast</td></tr>\n<tr><td><a href=\"expressions/../types/function-item.html\">Function item</a></td><td>Integer</td><td>Function item to address cast</td></tr>\n<tr><td><a href=\"expressions/../types/function-pointer.html\">Function pointer</a></td><td><code class=\"hljs\">*V</code> where <code class=\"hljs\">V: Sized</code></td><td>Function pointer to pointer cast</td></tr>\n<tr><td><a href=\"expressions/../types/function-pointer.html\">Function pointer</a></td><td>Integer</td><td>Function pointer to address cast</td></tr>\n<tr><td>Closure ***</td><td>Function pointer</td><td>Closure to function pointer cast</td></tr>\n</tbody></table>\n</div>\n<p>* or <code class=\"hljs\">T</code> and <code class=\"hljs\">V</code> are compatible unsized types, e.g., both slices, both the same trait object.</p>\n<p>** only when <code class=\"hljs\">m₁</code> is <code class=\"hljs\">mut</code> or <code class=\"hljs\">m₂</code> is <code class=\"hljs\">const</code>. Casting <code class=\"hljs\">mut</code> reference to\n<code class=\"hljs\">const</code> pointer is allowed.</p>\n<p>*** only for closures that do not capture (close over) any local variables</p>\n<h3 id=\"semantics\"><a class=\"header\" href=\"#semantics\">Semantics</a></h3>\n<h4 id=\"numeric-cast\"><a class=\"header\" href=\"#numeric-cast\">Numeric cast</a></h4>\n<ul>\n<li>Casting between two integers of the same size (e.g. i32 -&gt; u32) is a no-op\n(Rust uses 2's complement for negative values of fixed integers)</li>\n<li>Casting from a larger integer to a smaller integer (e.g. u32 -&gt; u8) will\ntruncate</li>\n<li>Casting from a smaller integer to a larger integer (e.g. u8 -&gt; u32) will\n<ul>\n<li>zero-extend if the source is unsigned</li>\n<li>sign-extend if the source is signed</li>\n</ul>\n</li>\n<li>Casting from a float to an integer will round the float towards zero\n<ul>\n<li><code class=\"hljs\">NaN</code> will return <code class=\"hljs\">0</code></li>\n<li>Values larger than the maximum integer value, including <code class=\"hljs\">INFINITY</code>, will saturate to the maximum value of the integer type.</li>\n<li>Values smaller than the minimum integer value, including <code class=\"hljs\">NEG_INFINITY</code>, will saturate to the minimum value of the integer type.</li>\n</ul>\n</li>\n<li>Casting from an integer to float will produce the closest possible float *\n<ul>\n<li>if necessary, rounding is according to <code class=\"hljs\">roundTiesToEven</code> mode ***</li>\n<li>on overflow, infinity (of the same sign as the input) is produced</li>\n<li>note: with the current set of numeric types, overflow can only happen\non <code class=\"hljs\">u128 as f32</code> for values greater or equal to <code class=\"hljs\">f32::MAX + (0.5 ULP)</code></li>\n</ul>\n</li>\n<li>Casting from an f32 to an f64 is perfect and lossless</li>\n<li>Casting from an f64 to an f32 will produce the closest possible f32 **\n<ul>\n<li>if necessary, rounding is according to <code class=\"hljs\">roundTiesToEven</code> mode ***</li>\n<li>on overflow, infinity (of the same sign as the input) is produced</li>\n</ul>\n</li>\n</ul>\n<p>* if integer-to-float casts with this rounding mode and overflow behavior are\nnot supported natively by the hardware, these casts will likely be slower than\nexpected.</p>\n<p>** if f64-to-f32 casts with this rounding mode and overflow behavior are not\nsupported natively by the hardware, these casts will likely be slower than\nexpected.</p>\n<p>*** as defined in IEEE 754-2008 §4.3.1: pick the nearest floating point\nnumber, preferring the one with an even least significant digit if exactly\nhalfway between two floating point numbers.</p>\n<h4 id=\"enum-cast\"><a class=\"header\" href=\"#enum-cast\">Enum cast</a></h4>\n<p>Casts an enum to its discriminant, then uses a numeric cast if needed.\nCasting is limited to the following kinds of enumerations:</p>\n<ul>\n<li><a href=\"expressions/../items/enumerations.html#unit-only-enum\">Unit-only enums</a></li>\n<li><a href=\"expressions/../items/enumerations.html#field-less-enum\">Field-less enums</a> without <a href=\"expressions/../items/enumerations.html#explicit-discriminants\">explicit discriminants</a>, or where only unit-variants have explicit discriminants</li>\n</ul>\n<h4 id=\"primitive-to-integer-cast\"><a class=\"header\" href=\"#primitive-to-integer-cast\">Primitive to integer cast</a></h4>\n<ul>\n<li><code class=\"hljs\">false</code> casts to <code class=\"hljs\">0</code>, <code class=\"hljs\">true</code> casts to <code class=\"hljs\">1</code></li>\n<li><code class=\"hljs\">char</code> casts to the value of the code point, then uses a numeric cast if needed.</li>\n</ul>\n<h4 id=\"u8-to-char-cast\"><a class=\"header\" href=\"#u8-to-char-cast\"><code>u8</code> to <code>char</code> cast</a></h4>\n<p>Casts to the <code class=\"hljs\">char</code> with the corresponding code point.</p>\n<h4 id=\"pointer-to-address-cast\"><a class=\"header\" href=\"#pointer-to-address-cast\">Pointer to address cast</a></h4>\n<p>Casting from a raw pointer to an integer produces the machine address of the referenced memory.\nIf the integer type is smaller than the pointer type, the address may be truncated; using <code class=\"hljs\">usize</code> avoids this.</p>\n<h4 id=\"address-to-pointer-cast\"><a class=\"header\" href=\"#address-to-pointer-cast\">Address to pointer cast</a></h4>\n<p>Casting from an integer to a raw pointer interprets the integer as a memory address and produces a pointer referencing that memory.</p>\n<div class=\"warning\">\n<p>Warning:\nThis interacts with the Rust memory model, which is still under development.\nA pointer obtained from this cast may suffer additional restrictions even if it is bitwise equal to a valid pointer.\nDereferencing such a pointer may be <a href=\"expressions/../behavior-considered-undefined.html\">undefined behavior</a> if aliasing rules are not followed.</p>\n</div>\n<p>A trivial example of sound address arithmetic:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> values: [<span class=\"hljs-built_in\">i32</span>; <span class=\"hljs-number\">2</span>] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>];\n<span class=\"hljs-keyword\">let</span> p1: *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">i32</span> = values.as_mut_ptr();\n<span class=\"hljs-keyword\">let</span> first_address = p1 <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span>;\n<span class=\"hljs-keyword\">let</span> second_address = first_address + <span class=\"hljs-number\">4</span>; <span class=\"hljs-comment\">// 4 == size_of::&lt;i32&gt;()</span>\n<span class=\"hljs-keyword\">let</span> p2 = second_address <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">i32</span>;\n<span class=\"hljs-keyword\">unsafe</span> {\n    *p2 += <span class=\"hljs-number\">1</span>;\n}\n<span class=\"hljs-built_in\">assert_eq!</span>(values[<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">3</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h4 id=\"pointer-to-pointer-cast\"><a class=\"header\" href=\"#pointer-to-pointer-cast\">Pointer-to-pointer cast</a></h4>\n<p><code class=\"hljs\">*const T</code> / <code class=\"hljs\">*mut T</code> can be cast to <code class=\"hljs\">*const U</code> / <code class=\"hljs\">*mut U</code> with the following behavior:</p>\n<ul>\n<li>\n<p>If <code class=\"hljs\">T</code> and <code class=\"hljs\">U</code> are both sized, the pointer is returned unchanged.</p>\n</li>\n<li>\n<p>If <code class=\"hljs\">T</code> and <code class=\"hljs\">U</code> are both unsized, the pointer is also returned unchanged.\nIn particular, the metadata is preserved exactly.</p>\n<p>For instance, a cast from <code class=\"hljs\">*const [T]</code> to <code class=\"hljs\">*const [U]</code> preserves the number of elements.\nNote that, as a consequence, such casts do not necessarily preserve the size of the pointer's referent\n(e.g., casting <code class=\"hljs\">*const [u16]</code> to <code class=\"hljs\">*const [u8]</code> will result in a raw pointer which refers to an object of half the size of the original).\nThe same holds for <code class=\"hljs\">str</code> and any compound type whose unsized tail is a slice type,\nsuch as <code class=\"hljs\">struct Foo(i32, [u8])</code> or <code class=\"hljs\">(u64, Foo)</code>.</p>\n</li>\n<li>\n<p>If <code class=\"hljs\">T</code> is unsized and <code class=\"hljs\">U</code> is sized, the cast discards all metadata that completes the wide pointer <code class=\"hljs\">T</code> and produces a thin pointer <code class=\"hljs\">U</code> consisting of the data part of the unsized pointer.</p>\n</li>\n</ul>\n<h2 id=\"assignment-expressions\"><a class=\"header\" href=\"#assignment-expressions\">Assignment expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>AssignmentExpression</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">=</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p>An <em>assignment expression</em> moves a value into a specified place.</p>\n<p>An assignment expression consists of a <a href=\"expressions/../expressions.html#mutability\">mutable</a> <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">assignee expression</a>, the <em>assignee operand</em>, followed by an equals sign (<code class=\"hljs\">=</code>) and a <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">value expression</a>, the <em>assigned value operand</em>.\nIn its most basic form, an assignee expression is a <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">place expression</a>, and we discuss this case first.\nThe more general case of destructuring assignment is discussed below, but this case always decomposes into sequential assignments to place expressions, which may be considered the more fundamental case.</p>\n<h3 id=\"basic-assignments\"><a class=\"header\" href=\"#basic-assignments\">Basic assignments</a></h3>\n<p>Evaluating assignment expressions begins by evaluating its operands.\nThe assigned value operand is evaluated first, followed by the assignee expression.\nFor destructuring assignment, subexpressions of the assignee expression are evaluated left-to-right.</p>\n<blockquote>\n<p><strong>Note</strong>: This is different than other expressions in that the right operand is evaluated before the left one.</p>\n</blockquote>\n<p>It then has the effect of first <a href=\"expressions/../destructors.html\">dropping</a> the value at the assigned place, unless the place is an uninitialized local variable or an uninitialized field of a local variable.\nNext it either <a href=\"expressions/../expressions.html#moved-and-copied-types\">copies or moves</a> the assigned value to the assigned place.</p>\n<p>An assignment expression always produces <a href=\"expressions/../types/tuple.html\">the unit value</a>.</p>\n<p>Example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">0</span>;\nx = y;\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"destructuring-assignments\"><a class=\"header\" href=\"#destructuring-assignments\">Destructuring assignments</a></h3>\n<p>Destructuring assignment is a counterpart to destructuring pattern matches for variable declaration, permitting assignment to complex values, such as tuples or structs.\nFor instance, we may swap two mutable variables:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> (<span class=\"hljs-keyword\">mut</span> a, <span class=\"hljs-keyword\">mut</span> b) = (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\n<span class=\"hljs-comment\">// Swap `a` and `b` using destructuring assignment.</span>\n(b, a) = (a, b);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In contrast to destructuring declarations using <code class=\"hljs\">let</code>, patterns may not appear on the left-hand side of an assignment due to syntactic ambiguities.\nInstead, a group of expressions that correspond to patterns are designated to be <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">assignee expressions</a>, and permitted on the left-hand side of an assignment.\nAssignee expressions are then desugared to pattern matches followed by sequential assignment.\nThe desugared patterns must be irrefutable: in particular, this means that only slice patterns whose length is known at compile-time, and the trivial slice <code class=\"hljs\">[..]</code>, are permitted for destructuring assignment.</p>\n<p>The desugaring method is straightforward, and is illustrated best by example.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span> { x: <span class=\"hljs-built_in\">u32</span>, y: <span class=\"hljs-built_in\">u32</span> }\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> (<span class=\"hljs-keyword\">mut</span> a, <span class=\"hljs-keyword\">mut</span> b) = (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n</span>(a, b) = (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\n\n[a, b] = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n\nStruct { x: a, y: b } = Struct { x: <span class=\"hljs-number\">3</span>, y: <span class=\"hljs-number\">4</span>};\n\n<span class=\"hljs-comment\">// desugars to:</span>\n\n{\n    <span class=\"hljs-keyword\">let</span> (_a, _b) = (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\n    a = _a;\n    b = _b;\n}\n\n{\n    <span class=\"hljs-keyword\">let</span> [_a, _b] = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n    a = _a;\n    b = _b;\n}\n\n{\n    <span class=\"hljs-keyword\">let</span> Struct { x: _a, y: _b } = Struct { x: <span class=\"hljs-number\">3</span>, y: <span class=\"hljs-number\">4</span>};\n    a = _a;\n    b = _b;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Identifiers are not forbidden from being used multiple times in a single assignee expression.</p>\n<p><a href=\"expressions/./underscore-expr.html\">Underscore expressions</a> and empty <a href=\"expressions/./range-expr.html\">range expressions</a> may be used to ignore certain values, without binding them.</p>\n<p>Note that default binding modes do not apply for the desugared expression.</p>\n<h2 id=\"compound-assignment-expressions\"><a class=\"header\" href=\"#compound-assignment-expressions\">Compound assignment expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>CompoundAssignmentExpression</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">+=</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">-=</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">*=</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">/=</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">%=</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">&amp;=</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">|=</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">^=</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">&lt;&lt;=</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">&gt;&gt;=</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p><em>Compound assignment expressions</em> combine arithmetic and logical binary operators with assignment expressions.</p>\n<p>For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = <span class=\"hljs-number\">5</span>;\nx += <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-built_in\">assert!</span>(x == <span class=\"hljs-number\">6</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The syntax of compound assignment is a <a href=\"expressions/../expressions.html#mutability\">mutable</a> <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">place expression</a>, the <em>assigned operand</em>, then one of the operators followed by an <code class=\"hljs\">=</code> as a single token (no whitespace), and then a <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">value expression</a>, the <em>modifying operand</em>.</p>\n<p>Unlike other place operands, the assigned place operand must be a place expression.\nAttempting to use a value expression is a compiler error rather than promoting it to a temporary.</p>\n<p>Evaluation of compound assignment expressions depends on the types of the operators.</p>\n<p>If both types are primitives, then the modifying operand will be evaluated first followed by the assigned operand.\nIt will then set the value of the assigned operand's place to the value of performing the operation of the operator with the values of the assigned operand and modifying operand.</p>\n<blockquote>\n<p><strong>Note</strong>: This is different than other expressions in that the right operand is evaluated before the left one.</p>\n</blockquote>\n<p>Otherwise, this expression is syntactic sugar for calling the function of the overloading compound assignment trait of the operator (see the table earlier in this chapter).\nA mutable borrow of the assigned operand is automatically taken.</p>\n<p>For example, the following expression statements in <code class=\"hljs\">example</code> are equivalent:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Addable</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::ops::AddAssign;\n</span>\n<span class=\"hljs-keyword\">impl</span> AddAssign&lt;Addable&gt; <span class=\"hljs-keyword\">for</span> Addable {\n    <span class=\"hljs-comment\">/* */</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_assign</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, other: Addable) {}\n</span>}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example</span></span>() {\n<span class=\"boring\"><span class=\"hljs-keyword\">let</span> (<span class=\"hljs-keyword\">mut</span> a1, a2) = (Addable, Addable);\n</span>  a1 += a2;\n\n<span class=\"boring\"><span class=\"hljs-keyword\">let</span> (<span class=\"hljs-keyword\">mut</span> a1, a2) = (Addable, Addable);\n</span>  AddAssign::add_assign(&amp;<span class=\"hljs-keyword\">mut</span> a1, a2);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Like assignment expressions, compound assignment expressions always produce <a href=\"expressions/../types/tuple.html\">the unit value</a>.</p>\n<div class=\"warning\">\n<p>Warning: The evaluation order of operands swaps depending on the types of the operands:\nwith primitive types the right-hand side will get evaluated first, while with non-primitive types the left-hand side will get evaluated first.\nTry not to write code that depends on the evaluation order of operands in compound assignment expressions.\nSee <a href=\"https://github.com/rust-lang/rust/blob/1.58.0/src/test/ui/expr/compound-assignment/eval-order.rs\">this test</a> for an example of using this dependency.</p>\n</div>\n<script>\n(function() {\n    var fragments = {\n        \"#slice-dst-pointer-to-pointer-cast\": \"operator-expr.html#pointer-to-pointer-cast\",\n    };\n    var target = fragments[window.location.hash];\n    if (target) {\n        var url = window.location.toString();\n        var base = url.substring(0, url.lastIndexOf('/'));\n        window.location.replace(base + \"/\" + target);\n    }\n})();\n</script>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"grouped-expressions\"><a class=\"header\" href=\"#grouped-expressions\">Grouped expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>GroupedExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">(</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">)</code></p>\n</blockquote>\n<p>A <em>parenthesized expression</em> wraps a single expression, evaluating to that expression.\nThe syntax for a parenthesized expression is a <code class=\"hljs\">(</code>, then an expression, called the <em>enclosed operand</em>, and then a <code class=\"hljs\">)</code>.</p>\n<p>Parenthesized expressions evaluate to the value of the enclosed operand.\nUnlike other expressions, parenthesized expressions are both <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">place expressions and value expressions</a>.\nWhen the enclosed operand is a place expression, it is a place expression and when the enclosed operand is a value expression, it is a value expression.</p>\n<p>Parentheses can be used to explicitly modify the precedence order of subexpressions within an expression.</p>\n<p>An example of a parenthesized expression:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">4</span>; <span class=\"hljs-comment\">// not parenthesized</span>\n<span class=\"hljs-keyword\">let</span> y: <span class=\"hljs-built_in\">i32</span> = (<span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span>) * <span class=\"hljs-number\">4</span>; <span class=\"hljs-comment\">// parenthesized</span>\n<span class=\"hljs-built_in\">assert_eq!</span>(x, <span class=\"hljs-number\">14</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(y, <span class=\"hljs-number\">20</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>An example of a necessary use of parentheses is when calling a function pointer that is a member of a struct:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">A</span></span> {\n</span><span class=\"boring\">   f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>() -&gt; &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> A {\n</span><span class=\"boring\">   <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">       <span class=\"hljs-string\">\"The method f\"</span>\n</span><span class=\"boring\">   }\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> a = A{f: || <span class=\"hljs-string\">\"The field f\"</span>};\n</span><span class=\"boring\">\n</span><span class=\"hljs-built_in\">assert_eq!</span>( a.f (), <span class=\"hljs-string\">\"The method f\"</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>((a.f)(), <span class=\"hljs-string\">\"The field f\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"array-and-array-index-expressions\"><a class=\"header\" href=\"#array-and-array-index-expressions\">Array and array index expressions</a></h1>\n<h2 id=\"array-expressions\"><a class=\"header\" href=\"#array-expressions\">Array expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ArrayExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">[</code> <em>ArrayElements</em><sup>?</sup> <code class=\"hljs\">]</code></p>\n<p><em>ArrayElements</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> ( <code class=\"hljs\">,</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a> )<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup><br>\n&nbsp;&nbsp; | <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">;</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p><em>Array expressions</em> construct <a href=\"expressions/../types/array.html\">arrays</a>.\nArray expressions come in two forms.</p>\n<p>The first form lists out every value in the array.\nThe syntax for this form is a comma-separated list of expressions of uniform type enclosed in square brackets.\nThis produces an array containing each of these values in the order they are written.</p>\n<p>The syntax for the second form is two expressions separated by a semicolon (<code class=\"hljs\">;</code>) enclosed in square brackets.\nThe expression before the <code class=\"hljs\">;</code> is called the <em>repeat operand</em>.\nThe expression after the <code class=\"hljs\">;</code> is called the <em>length operand</em>.\nIt must have type <code class=\"hljs\">usize</code> and be a <a href=\"expressions/../const_eval.html#constant-expressions\">constant expression</a>, such as a <a href=\"expressions/../tokens.html#literals\">literal</a> or a <a href=\"expressions/../items/constant-items.html\">constant item</a>.\nAn array expression of this form creates an array with the length of the value of the length operand with each element being a copy of the repeat operand.\nThat is, <code class=\"hljs\">[a; b]</code> creates an array containing <code class=\"hljs\">b</code> copies of the value of <code class=\"hljs\">a</code>.\nIf the length operand has a value greater than 1 then this requires that the type of the repeat operand is <a href=\"expressions/../special-types-and-traits.html#copy\"><code class=\"hljs\">Copy</code></a> or that it must be a <a href=\"expressions/path-expr.html\">path</a> to a constant item.</p>\n<p>When the repeat operand is a constant item, it is evaluated the length operand's value times.\nIf that value is <code class=\"hljs\">0</code>, then the constant item is not evaluated at all.\nFor expressions that are not a constant item, it is evaluated exactly once, and then the result is copied the length operand's value times.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n[<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-string\">\"d\"</span>];\n[<span class=\"hljs-number\">0</span>; <span class=\"hljs-number\">128</span>];              <span class=\"hljs-comment\">// array with 128 zeros</span>\n[<span class=\"hljs-number\">0u8</span>, <span class=\"hljs-number\">0u8</span>, <span class=\"hljs-number\">0u8</span>, <span class=\"hljs-number\">0u8</span>,];\n[[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]]; <span class=\"hljs-comment\">// 2D array</span>\n<span class=\"hljs-keyword\">const</span> EMPTY: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; = <span class=\"hljs-built_in\">Vec</span>::new();\n[EMPTY; <span class=\"hljs-number\">2</span>];\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"array-and-slice-indexing-expressions\"><a class=\"header\" href=\"#array-and-slice-indexing-expressions\">Array and slice indexing expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>IndexExpression</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">[</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">]</code></p>\n</blockquote>\n<p><a href=\"expressions/../types/array.html\">Array</a> and <a href=\"expressions/../types/slice.html\">slice</a>-typed values can be indexed by writing a square-bracket-enclosed expression of type <code class=\"hljs\">usize</code> (the index) after them.\nWhen the array is mutable, the resulting <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">memory location</a> can be assigned to.</p>\n<p>For other types an index expression <code class=\"hljs\">a[b]</code> is equivalent to <code class=\"hljs\">*std::ops::Index::index(&amp;a, b)</code>, or <code class=\"hljs\">*std::ops::IndexMut::index_mut(&amp;mut a, b)</code> in a mutable place expression context.\nJust as with methods, Rust will also insert dereference operations on <code class=\"hljs\">a</code> repeatedly to find an implementation.</p>\n<p>Indices are zero-based for arrays and slices.\nArray access is a <a href=\"expressions/../const_eval.html#constant-expressions\">constant expression</a>, so bounds can be checked at compile-time with a constant index value.\nOtherwise a check will be performed at run-time that will put the thread in a <em>panicked state</em> if it fails.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust should_panic edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// lint is deny by default.</span>\n<span class=\"hljs-meta\">#![warn(unconditional_panic)]</span>\n\n([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>])[<span class=\"hljs-number\">2</span>];        <span class=\"hljs-comment\">// Evaluates to 3</span>\n\n<span class=\"hljs-keyword\">let</span> b = [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]];\nb[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>];                  <span class=\"hljs-comment\">// multidimensional array indexing</span>\n\n<span class=\"hljs-keyword\">let</span> x = ([<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>])[<span class=\"hljs-number\">10</span>]; <span class=\"hljs-comment\">// warning: index out of bounds</span>\n\n<span class=\"hljs-keyword\">let</span> n = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">let</span> y = ([<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>])[n];  <span class=\"hljs-comment\">// panics</span>\n\n<span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>];\narr[<span class=\"hljs-number\">10</span>];                  <span class=\"hljs-comment\">// warning: index out of bounds</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The array index expression can be implemented for types other than arrays and slices by implementing the <a href=\"expressions/../../std/ops/trait.Index.html\">Index</a> and <a href=\"expressions/../../std/ops/trait.IndexMut.html\">IndexMut</a> traits.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"tuple-and-tuple-indexing-expressions\"><a class=\"header\" href=\"#tuple-and-tuple-indexing-expressions\">Tuple and tuple indexing expressions</a></h1>\n<h2 id=\"tuple-expressions\"><a class=\"header\" href=\"#tuple-expressions\">Tuple expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>TupleExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">(</code> <em>TupleElements</em><sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>TupleElements</em> :<br>\n&nbsp;&nbsp; ( <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">,</code> )<sup>+</sup> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><sup>?</sup></p>\n</blockquote>\n<p>A <em>tuple expression</em> constructs <a href=\"expressions/../types/tuple.html\">tuple values</a>.</p>\n<p>The syntax for tuple expressions is a parenthesized, comma separated list of expressions, called the <em>tuple initializer operands</em>.\n1-ary tuple expressions require a comma after their tuple initializer operand to be disambiguated with a <a href=\"expressions/grouped-expr.html\">parenthetical expression</a>.</p>\n<p>Tuple expressions are a <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">value expression</a> that evaluate into a newly constructed value of a tuple type.\nThe number of tuple initializer operands is the arity of the constructed tuple.\nTuple expressions without any tuple initializer operands produce the unit tuple.\nFor other tuple expressions, the first written tuple initializer operand initializes the field <code class=\"hljs\">0</code> and subsequent operands initializes the next highest field.\nFor example, in the tuple expression <code class=\"hljs\">('a', 'b', 'c')</code>, <code class=\"hljs\">'a'</code> initializes the value of the field <code class=\"hljs\">0</code>, <code class=\"hljs\">'b'</code> field <code class=\"hljs\">1</code>, and <code class=\"hljs\">'c'</code> field <code class=\"hljs\">2</code>.</p>\n<p>Examples of tuple expressions and their types:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Expression</th><th>Type</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">()</code></td><td><code class=\"hljs\">()</code> (unit)</td></tr>\n<tr><td><code class=\"hljs\">(0.0, 4.5)</code></td><td><code class=\"hljs\">(f64, f64)</code></td></tr>\n<tr><td><code class=\"hljs\">(\"x\".to_string(), )</code></td><td><code class=\"hljs\">(String, )</code></td></tr>\n<tr><td><code class=\"hljs\">(\"a\", 4usize, true)</code></td><td><code class=\"hljs\">(&amp;'static str, usize, bool)</code></td></tr>\n</tbody></table>\n</div>\n<h2 id=\"tuple-indexing-expressions\"><a class=\"header\" href=\"#tuple-indexing-expressions\">Tuple indexing expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>TupleIndexingExpression</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">.</code> <a href=\"expressions/../tokens.html#tuple-index\">TUPLE_INDEX</a></p>\n</blockquote>\n<p>A <em>tuple indexing expression</em> accesses fields of <a href=\"expressions/../types/tuple.html\">tuples</a> and <a href=\"expressions/../types/struct.html\">tuple structs</a>.</p>\n<p>The syntax for a tuple index expression is an expression, called the <em>tuple operand</em>, then a <code class=\"hljs\">.</code>, then finally a tuple index.\nThe syntax for the <em>tuple index</em> is a <a href=\"expressions/../tokens.html#integer-literals\">decimal literal</a> with no leading zeros, underscores, or suffix.\nFor example <code class=\"hljs\">0</code> and <code class=\"hljs\">2</code> are valid tuple indices but not <code class=\"hljs\">01</code>, <code class=\"hljs\">0_</code>, nor <code class=\"hljs\">0i32</code>.</p>\n<p>The type of the tuple operand must be a <a href=\"expressions/../types/tuple.html\">tuple type</a> or a <a href=\"expressions/../types/struct.html\">tuple struct</a>.\nThe tuple index must be a name of a field of the type of the tuple operand.</p>\n<p>Evaluation of tuple index expressions has no side effects beyond evaluation of its tuple operand.\nAs a <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">place expression</a>, it evaluates to the location of the field of the tuple operand with the same name as the tuple index.</p>\n<p>Examples of tuple indexing expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Indexing a tuple</span>\n<span class=\"hljs-keyword\">let</span> pair = (<span class=\"hljs-string\">\"a string\"</span>, <span class=\"hljs-number\">2</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(pair.<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n\n<span class=\"hljs-comment\">// Indexing a tuple struct</span>\n<span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span>(<span class=\"hljs-built_in\">f32</span>, <span class=\"hljs-built_in\">f32</span>);\n</span><span class=\"hljs-keyword\">let</span> point = Point(<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">0.0</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(point.<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1.0</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(point.<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0.0</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p><strong>Note</strong>: Unlike field access expressions, tuple index expressions can be the function operand of a <a href=\"expressions/./call-expr.html\">call expression</a> as it cannot be confused with a method call since method names cannot be numbers.</p>\n</blockquote>\n<blockquote>\n<p><strong>Note</strong>: Although arrays and slices also have elements, you must use an <a href=\"expressions/array-expr.html#array-and-slice-indexing-expressions\">array or slice indexing expression</a> or a <a href=\"expressions/../patterns.html#slice-patterns\">slice pattern</a> to access their elements.</p>\n</blockquote>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"struct-expressions\"><a class=\"header\" href=\"#struct-expressions\">Struct expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>StructExpression</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>StructExprStruct</em><br>\n&nbsp;&nbsp; | <em>StructExprTuple</em><br>\n&nbsp;&nbsp; | <em>StructExprUnit</em></p>\n<p><em>StructExprStruct</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../paths.html#paths-in-expressions\"><em>PathInExpression</em></a> <code class=\"hljs\">{</code> (<em>StructExprFields</em> | <em>StructBase</em>)<sup>?</sup> <code class=\"hljs\">}</code></p>\n<p><em>StructExprFields</em> :<br>\n&nbsp;&nbsp; <em>StructExprField</em> (<code class=\"hljs\">,</code> <em>StructExprField</em>)<sup>*</sup> (<code class=\"hljs\">,</code> <em>StructBase</em> | <code class=\"hljs\">,</code><sup>?</sup>)</p>\n<p><em>StructExprField</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../attributes.html\"><em>OuterAttribute</em></a> <sup>*</sup><br>\n&nbsp;&nbsp; (<br>\n&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/../identifiers.html\">IDENTIFIER</a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | (<a href=\"expressions/../identifiers.html\">IDENTIFIER</a> | <a href=\"expressions/../tokens.html#tuple-index\">TUPLE_INDEX</a>) <code class=\"hljs\">:</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><br>\n&nbsp;&nbsp; )</p>\n<p><em>StructBase</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">..</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a></p>\n<p><em>StructExprTuple</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../paths.html#paths-in-expressions\"><em>PathInExpression</em></a> <code class=\"hljs\">(</code><br>\n&nbsp;&nbsp; &nbsp;&nbsp; ( <a href=\"expressions/../expressions.html\"><em>Expression</em></a> (<code class=\"hljs\">,</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a>)<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup> )<sup>?</sup><br>\n&nbsp;&nbsp; <code class=\"hljs\">)</code></p>\n<p><em>StructExprUnit</em> : <a href=\"expressions/../paths.html#paths-in-expressions\"><em>PathInExpression</em></a></p>\n</blockquote>\n<p>A <em>struct expression</em> creates a struct, enum, or union value.\nIt consists of a path to a <a href=\"expressions/../items/structs.html\">struct</a>, <a href=\"expressions/../items/enumerations.html\">enum variant</a>, or <a href=\"expressions/../items/unions.html\">union</a> item followed by the values for the fields of the item.\nThere are three forms of struct expressions: struct, tuple, and unit.</p>\n<p>The following are examples of struct expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span> { x: <span class=\"hljs-built_in\">f64</span>, y: <span class=\"hljs-built_in\">f64</span> }\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NothingInMe</span></span> { }\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">TuplePoint</span></span>(<span class=\"hljs-built_in\">f64</span>, <span class=\"hljs-built_in\">f64</span>);\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> game { <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">User</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; { <span class=\"hljs-keyword\">pub</span> name: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>, <span class=\"hljs-keyword\">pub</span> age: <span class=\"hljs-built_in\">u32</span>, <span class=\"hljs-keyword\">pub</span> score: <span class=\"hljs-built_in\">usize</span> } }\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Cookie</span></span>; <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">some_fn</span></span>&lt;T&gt;(t: T) {}\n</span>Point {x: <span class=\"hljs-number\">10.0</span>, y: <span class=\"hljs-number\">20.0</span>};\nNothingInMe {};\nTuplePoint(<span class=\"hljs-number\">10.0</span>, <span class=\"hljs-number\">20.0</span>);\nTuplePoint { <span class=\"hljs-number\">0</span>: <span class=\"hljs-number\">10.0</span>, <span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">20.0</span> }; <span class=\"hljs-comment\">// Results in the same value as the above line</span>\n<span class=\"hljs-keyword\">let</span> u = game::User {name: <span class=\"hljs-string\">\"Joe\"</span>, age: <span class=\"hljs-number\">35</span>, score: <span class=\"hljs-number\">100_000</span>};\nsome_fn::&lt;Cookie&gt;(Cookie);\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"field-struct-expression\"><a class=\"header\" href=\"#field-struct-expression\">Field struct expression</a></h2>\n<p>A struct expression with fields enclosed in curly braces allows you to specify the value for each individual field in any order.\nThe field name is separated from its value with a colon.</p>\n<p>A value of a <a href=\"expressions/../items/unions.html\">union</a> type can only be created using this syntax, and it must specify exactly one field.</p>\n<h2 id=\"functional-update-syntax\"><a class=\"header\" href=\"#functional-update-syntax\">Functional update syntax</a></h2>\n<p>A struct expression that constructs a value of a struct type can terminate with the syntax <code class=\"hljs\">..</code> followed by an expression to denote a functional update.\nThe expression following <code class=\"hljs\">..</code> (the base) must have the same struct type as the new struct type being formed.</p>\n<p>The entire expression uses the given values for the fields that were specified and moves or copies the remaining fields from the base expression.\nAs with all struct expressions, all of the fields of the struct must be <a href=\"expressions/../visibility-and-privacy.html\">visible</a>, even those not explicitly named.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point3d</span></span> { x: <span class=\"hljs-built_in\">i32</span>, y: <span class=\"hljs-built_in\">i32</span>, z: <span class=\"hljs-built_in\">i32</span> }\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> base = Point3d {x: <span class=\"hljs-number\">1</span>, y: <span class=\"hljs-number\">2</span>, z: <span class=\"hljs-number\">3</span>};\n<span class=\"hljs-keyword\">let</span> y_ref = &amp;<span class=\"hljs-keyword\">mut</span> base.y;\nPoint3d {y: <span class=\"hljs-number\">0</span>, z: <span class=\"hljs-number\">10</span>, .. base}; <span class=\"hljs-comment\">// OK, only base.x is accessed</span>\n<span class=\"hljs-built_in\">drop</span>(y_ref);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Struct expressions with curly braces can't be used directly in a <a href=\"expressions/loop-expr.html\">loop</a> or <a href=\"expressions/if-expr.html#if-expressions\">if</a> expression's head, or in the <a href=\"expressions/../glossary.html#scrutinee\">scrutinee</a> of an <a href=\"expressions/if-expr.html#if-let-expressions\">if let</a> or <a href=\"expressions/match-expr.html\">match</a> expression.\nHowever, struct expressions can be used in these situations if they are within another expression, for example inside <a href=\"expressions/grouped-expr.html\">parentheses</a>.</p>\n<p>The field names can be decimal integer values to specify indices for constructing tuple structs.\nThis can be used with base structs to fill out the remaining indices not specified:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Color</span></span>(<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u8</span>);\n<span class=\"hljs-keyword\">let</span> c1 = Color(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);  <span class=\"hljs-comment\">// Typical way of creating a tuple struct.</span>\n<span class=\"hljs-keyword\">let</span> c2 = Color{<span class=\"hljs-number\">0</span>: <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">2</span>: <span class=\"hljs-number\">0</span>};  <span class=\"hljs-comment\">// Specifying fields by index.</span>\n<span class=\"hljs-keyword\">let</span> c3 = Color{<span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">0</span>, ..c2};  <span class=\"hljs-comment\">// Fill out all other fields using a base struct.</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"struct-field-init-shorthand\"><a class=\"header\" href=\"#struct-field-init-shorthand\">Struct field init shorthand</a></h3>\n<p>When initializing a data structure (struct, enum, union) with named (but not numbered) fields, it is allowed to write <code class=\"hljs\">fieldname</code> as a shorthand for <code class=\"hljs\">fieldname: fieldname</code>.\nThis allows a compact syntax with less duplication.\nFor example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point3d</span></span> { x: <span class=\"hljs-built_in\">i32</span>, y: <span class=\"hljs-built_in\">i32</span>, z: <span class=\"hljs-built_in\">i32</span> }\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">0</span>;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> y_value = <span class=\"hljs-number\">0</span>;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> z = <span class=\"hljs-number\">0</span>;\n</span>Point3d { x: x, y: y_value, z: z };\nPoint3d { x, y: y_value, z };\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"tuple-struct-expression\"><a class=\"header\" href=\"#tuple-struct-expression\">Tuple struct expression</a></h2>\n<p>A struct expression with fields enclosed in parentheses constructs a tuple struct.\nThough it is listed here as a specific expression for completeness, it is equivalent to a <a href=\"expressions/call-expr.html\">call expression</a> to the tuple struct's constructor. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Position</span></span>(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>);\nPosition(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);  <span class=\"hljs-comment\">// Typical way of creating a tuple struct.</span>\n<span class=\"hljs-keyword\">let</span> c = Position;  <span class=\"hljs-comment\">// `c` is a function that takes 3 arguments.</span>\n<span class=\"hljs-keyword\">let</span> pos = c(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>);  <span class=\"hljs-comment\">// Creates a `Position` value.</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"unit-struct-expression\"><a class=\"header\" href=\"#unit-struct-expression\">Unit struct expression</a></h2>\n<p>A unit struct expression is just the path to a unit struct item.\nThis refers to the unit struct's implicit constant of its value.\nThe unit struct value can also be constructed with a fieldless struct expression. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Gamma</span></span>;\n<span class=\"hljs-keyword\">let</span> a = Gamma;  <span class=\"hljs-comment\">// Gamma unit value.</span>\n<span class=\"hljs-keyword\">let</span> b = Gamma{};  <span class=\"hljs-comment\">// Exact same value as `a`.</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"call-expressions\"><a class=\"header\" href=\"#call-expressions\">Call expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>CallExpression</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">(</code> <em>CallParams</em><sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>CallParams</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a>&nbsp;( <code class=\"hljs\">,</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a> )<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n</blockquote>\n<p>A <em>call expression</em> calls a function.\nThe syntax of a call expression is an expression, called the <em>function operand</em>, followed by a parenthesized comma-separated list of expression, called the <em>argument operands</em>.\nIf the function eventually returns, then the expression completes.\nFor <a href=\"expressions/../types/function-item.html\">non-function types</a>, the expression <code class=\"hljs\">f(...)</code> uses the method on one of the <a href=\"expressions/../../std/ops/trait.Fn.html\"><code class=\"hljs\">std::ops::Fn</code></a>, <a href=\"expressions/../../std/ops/trait.FnMut.html\"><code class=\"hljs\">std::ops::FnMut</code></a> or <a href=\"expressions/../../std/ops/trait.FnOnce.html\"><code class=\"hljs\">std::ops::FnOnce</code></a> traits, which differ in whether they take the type by reference, mutable reference, or take ownership respectively.\nAn automatic borrow will be taken if needed.\nThe function operand will also be <a href=\"expressions/field-expr.html#automatic-dereferencing\">automatically dereferenced</a> as required.</p>\n<p>Some examples of call expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add</span></span>(x: <span class=\"hljs-built_in\">i32</span>, y: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">0</span> }\n</span><span class=\"hljs-keyword\">let</span> three: <span class=\"hljs-built_in\">i32</span> = add(<span class=\"hljs-number\">1i32</span>, <span class=\"hljs-number\">2i32</span>);\n<span class=\"hljs-keyword\">let</span> name: &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span> = (|| <span class=\"hljs-string\">\"Rust\"</span>)();\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"disambiguating-function-calls\"><a class=\"header\" href=\"#disambiguating-function-calls\">Disambiguating Function Calls</a></h2>\n<p>All function calls are sugar for a more explicit <a href=\"expressions/../paths.html#qualified-paths\">fully-qualified syntax</a>.\nFunction calls may need to be fully qualified, depending on the ambiguity of a call in light of in-scope items.</p>\n<blockquote>\n<p><strong>Note</strong>: In the past, the terms \"Unambiguous Function Call Syntax\", \"Universal Function Call Syntax\", or \"UFCS\", have been used in documentation, issues, RFCs, and other community writings.\nHowever, these terms lack descriptive power and potentially confuse the issue at hand.\nWe mention them here for searchability's sake.</p>\n</blockquote>\n<p>Several situations often occur which result in ambiguities about the receiver or referent of method or associated function calls.\nThese situations may include:</p>\n<ul>\n<li>Multiple in-scope traits define methods with the same name for the same types</li>\n<li>Auto-<code class=\"hljs\">deref</code> is undesirable; for example, distinguishing between methods on a smart pointer itself and the pointer's referent</li>\n<li>Methods which take no arguments, like <a href=\"expressions/../../std/default/trait.Default.html#tymethod.default\"><code class=\"hljs\">default()</code></a>, and return properties of a type, like <a href=\"expressions/../../std/mem/fn.size_of.html\"><code class=\"hljs\">size_of()</code></a></li>\n</ul>\n<p>To resolve the ambiguity, the programmer may refer to their desired method or function using more specific paths, types, or traits.</p>\n<p>For example,</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Pretty</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">print</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Ugly</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">print</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n<span class=\"hljs-keyword\">impl</span> Pretty <span class=\"hljs-keyword\">for</span> Foo {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">print</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {}\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Bar</span></span>;\n<span class=\"hljs-keyword\">impl</span> Pretty <span class=\"hljs-keyword\">for</span> Bar {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">print</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {}\n}\n<span class=\"hljs-keyword\">impl</span> Ugly <span class=\"hljs-keyword\">for</span> Bar {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">print</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> f = Foo;\n    <span class=\"hljs-keyword\">let</span> b = Bar;\n\n    <span class=\"hljs-comment\">// we can do this because we only have one item called `print` for `Foo`s</span>\n    f.print();\n    <span class=\"hljs-comment\">// more explicit, and, in the case of `Foo`, not necessary</span>\n    Foo::print(&amp;f);\n    <span class=\"hljs-comment\">// if you're not into the whole brevity thing</span>\n    &lt;Foo <span class=\"hljs-keyword\">as</span> Pretty&gt;::print(&amp;f);\n\n    <span class=\"hljs-comment\">// b.print(); // Error: multiple 'print' found</span>\n    <span class=\"hljs-comment\">// Bar::print(&amp;b); // Still an error: multiple `print` found</span>\n\n    <span class=\"hljs-comment\">// necessary because of in-scope items defining `print`</span>\n    &lt;Bar <span class=\"hljs-keyword\">as</span> Pretty&gt;::print(&amp;b);\n}</code></pre></pre>\n<p>Refer to <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0132-ufcs.md\">RFC 132</a> for further details and motivations.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"method-call-expressions\"><a class=\"header\" href=\"#method-call-expressions\">Method-call expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>MethodCallExpression</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">.</code> <a href=\"expressions/../paths.html#paths-in-expressions\"><em>PathExprSegment</em></a> <code class=\"hljs\">(</code><a href=\"expressions/call-expr.html\"><em>CallParams</em></a><sup>?</sup> <code class=\"hljs\">)</code></p>\n</blockquote>\n<p>A <em>method call</em> consists of an expression (the <em>receiver</em>) followed by a single dot, an expression path segment, and a parenthesized expression-list.\nMethod calls are resolved to associated <a href=\"expressions/../items/associated-items.html#methods\">methods</a> on specific traits, either statically dispatching to a method if the exact <code class=\"hljs\">self</code>-type of the left-hand-side is known, or dynamically dispatching if the left-hand-side expression is an indirect <a href=\"expressions/../types/trait-object.html\">trait object</a>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> pi: <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">f32</span>, _&gt; = <span class=\"hljs-string\">\"3.14\"</span>.parse();\n<span class=\"hljs-keyword\">let</span> log_pi = pi.unwrap_or(<span class=\"hljs-number\">1.0</span>).log(<span class=\"hljs-number\">2.72</span>);\n<span class=\"boring\"><span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-number\">1.14</span> &lt; log_pi &amp;&amp; log_pi &lt; <span class=\"hljs-number\">1.15</span>)\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>When looking up a method call, the receiver may be automatically dereferenced or borrowed in order to call a method.\nThis requires a more complex lookup process than for other functions, since there may be a number of possible methods to call.\nThe following procedure is used:</p>\n<p>The first step is to build a list of candidate receiver types.\nObtain these by repeatedly <a href=\"expressions/operator-expr.html#the-dereference-operator\">dereferencing</a> the receiver expression's type, adding each type encountered to the list, then finally attempting an <a href=\"expressions/../type-coercions.html#unsized-coercions\">unsized coercion</a> at the end, and adding the result type if that is successful.\nThen, for each candidate <code class=\"hljs\">T</code>, add <code class=\"hljs\">&amp;T</code> and <code class=\"hljs\">&amp;mut T</code> to the list immediately after <code class=\"hljs\">T</code>.</p>\n<p>For instance, if the receiver has type <code class=\"hljs\">Box&lt;[i32;2]&gt;</code>, then the candidate types will be <code class=\"hljs\">Box&lt;[i32;2]&gt;</code>, <code class=\"hljs\">&amp;Box&lt;[i32;2]&gt;</code>, <code class=\"hljs\">&amp;mut Box&lt;[i32;2]&gt;</code>, <code class=\"hljs\">[i32; 2]</code> (by dereferencing), <code class=\"hljs\">&amp;[i32; 2]</code>, <code class=\"hljs\">&amp;mut [i32; 2]</code>, <code class=\"hljs\">[i32]</code> (by unsized coercion), <code class=\"hljs\">&amp;[i32]</code>, and finally <code class=\"hljs\">&amp;mut [i32]</code>.</p>\n<p>Then, for each candidate type <code class=\"hljs\">T</code>, search for a <a href=\"expressions/../visibility-and-privacy.html\">visible</a> method with a receiver of that type in the following places:</p>\n<ol>\n<li><code class=\"hljs\">T</code>'s inherent methods (methods implemented directly on <code class=\"hljs\">T</code>).</li>\n<li>Any of the methods provided by a <a href=\"expressions/../visibility-and-privacy.html\">visible</a> trait implemented by <code class=\"hljs\">T</code>.\nIf <code class=\"hljs\">T</code> is a type parameter, methods provided by trait bounds on <code class=\"hljs\">T</code> are looked up first.\nThen all remaining methods in scope are looked up.</li>\n</ol>\n<blockquote>\n<p>Note: the lookup is done for each type in order, which can occasionally lead to surprising results.\nThe below code will print \"In trait impl!\", because <code class=\"hljs\">&amp;self</code> methods are looked up first, the trait method is found before the struct's <code class=\"hljs\">&amp;mut self</code> method is found.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Bar</span></span> {\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n}\n\n<span class=\"hljs-keyword\">impl</span> Foo {\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"In struct impl!\"</span>)\n  }\n}\n\n<span class=\"hljs-keyword\">impl</span> Bar <span class=\"hljs-keyword\">for</span> Foo {\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"In trait impl!\"</span>)\n  }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> f = Foo{};\n  f.bar();\n}</code></pre></pre>\n</blockquote>\n<p>If this results in multiple possible candidates, then it is an error, and the receiver must be <a href=\"expressions/call-expr.html#disambiguating-function-calls\">converted</a> to an appropriate receiver type to make the method call.</p>\n<p>This process does not take into account the mutability or lifetime of the receiver, or whether a method is <code class=\"hljs\">unsafe</code>.\nOnce a method is looked up, if it can't be called for one (or more) of those reasons, the result is a compiler error.</p>\n<p>If a step is reached where there is more than one possible method, such as where generic methods or traits are considered the same, then it is a compiler error.\nThese cases require a <a href=\"expressions/call-expr.html#disambiguating-function-calls\">disambiguating function call syntax</a> for method and function invocation.</p>\n<blockquote>\n<p><strong>Edition Differences</strong>: Before the 2021 edition, during the search for visible methods, if the candidate receiver type is an <a href=\"expressions/../types/array.html\">array type</a>, methods provided by the standard library <a href=\"expressions/../../std/iter/trait.IntoIterator.html\"><code class=\"hljs\">IntoIterator</code></a> trait are ignored.</p>\n<p>The edition used for this purpose is determined by the token representing the method name.</p>\n<p>This special case may be removed in the future.</p>\n</blockquote>\n<div class=\"warning\">\n<p><em><strong>Warning:</strong></em> For <a href=\"expressions/../types/trait-object.html\">trait objects</a>, if there is an inherent method of the same name as a trait method, it will give a compiler error when trying to call the method in a method call expression.\nInstead, you can call the method using <a href=\"expressions/call-expr.html#disambiguating-function-calls\">disambiguating function call syntax</a>, in which case it calls the trait method, not the inherent method.\nThere is no way to call the inherent method.\nJust don't define inherent methods on trait objects with the same name as a trait method and you'll be fine.</p>\n</div>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"field-access-expressions\"><a class=\"header\" href=\"#field-access-expressions\">Field access expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>FieldExpression</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">.</code> <a href=\"expressions/../identifiers.html\">IDENTIFIER</a></p>\n</blockquote>\n<p>A <em>field expression</em> is a <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">place expression</a> that evaluates to the location of a field of a <a href=\"expressions/../items/structs.html\">struct</a> or <a href=\"expressions/../items/unions.html\">union</a>.\nWhen the operand is <a href=\"expressions/../expressions.html#mutability\">mutable</a>, the field expression is also mutable.</p>\n<p>The syntax for a field expression is an expression, called the <em>container operand</em>, then a <code class=\"hljs\">.</code>, and finally an <a href=\"expressions/../identifiers.html\">identifier</a>.\nField expressions cannot be followed by a parenthetical comma-separated list of expressions, as that is instead parsed as a <a href=\"expressions/method-call-expr.html\">method call expression</a>.\nThat is, they cannot be the function operand of a <a href=\"expressions/call-expr.html\">call expression</a>.</p>\n<blockquote>\n<p><strong>Note</strong>: Wrap the field expression in a <a href=\"expressions/grouped-expr.html\">parenthesized expression</a> to use it in a call expression.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">HoldsCallable</span></span>&lt;F: <span class=\"hljs-built_in\">Fn</span>()&gt; { callable: F }\n</span><span class=\"hljs-keyword\">let</span> holds_callable = HoldsCallable { callable: || () };\n\n<span class=\"hljs-comment\">// Invalid: Parsed as calling the method \"callable\"</span>\n<span class=\"hljs-comment\">// holds_callable.callable();</span>\n\n<span class=\"hljs-comment\">// Valid</span>\n(holds_callable.callable)();\n<span class=\"boring\">}</span></code></pre></pre>\n</blockquote>\n<p>Examples:</p>\n<!-- ignore: needs lots of support code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">mystruct.myfield;\nfoo().x;\n(Struct {a: <span class=\"hljs-number\">10</span>, b: <span class=\"hljs-number\">20</span>}).a;\n(mystruct.function_field)() <span class=\"hljs-comment\">// Call expression containing a field expression</span></code></pre>\n<h2 id=\"automatic-dereferencing\"><a class=\"header\" href=\"#automatic-dereferencing\">Automatic dereferencing</a></h2>\n<p>If the type of the container operand implements <a href=\"expressions/../special-types-and-traits.html#deref-and-derefmut\"><code class=\"hljs\">Deref</code></a> or <a href=\"expressions/../special-types-and-traits.html#deref-and-derefmut\"><code class=\"hljs\">DerefMut</code></a> depending on whether the operand is <a href=\"expressions/../expressions.html#mutability\">mutable</a>, it is <em>automatically dereferenced</em> as many times as necessary to make the field access possible.\nThis process is also called <em>autoderef</em> for short.</p>\n<h2 id=\"borrowing\"><a class=\"header\" href=\"#borrowing\">Borrowing</a></h2>\n<p>The fields of a struct or a reference to a struct are treated as separate entities when borrowing.\nIf the struct does not implement <a href=\"expressions/../special-types-and-traits.html#drop\"><code class=\"hljs\">Drop</code></a> and is stored in a local variable, this also applies to moving out of each of its fields.\nThis also does not apply if automatic dereferencing is done though user-defined types other than <a href=\"expressions/../special-types-and-traits.html#boxt\"><code class=\"hljs\">Box</code></a>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">A</span></span> { f1: <span class=\"hljs-built_in\">String</span>, f2: <span class=\"hljs-built_in\">String</span>, f3: <span class=\"hljs-built_in\">String</span> }\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x: A;\n<span class=\"boring\">x = A {\n</span><span class=\"boring\">    f1: <span class=\"hljs-string\">\"f1\"</span>.to_string(),\n</span><span class=\"boring\">    f2: <span class=\"hljs-string\">\"f2\"</span>.to_string(),\n</span><span class=\"boring\">    f3: <span class=\"hljs-string\">\"f3\"</span>.to_string()\n</span><span class=\"boring\">};\n</span><span class=\"hljs-keyword\">let</span> a: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">String</span> = &amp;<span class=\"hljs-keyword\">mut</span> x.f1; <span class=\"hljs-comment\">// x.f1 borrowed mutably</span>\n<span class=\"hljs-keyword\">let</span> b: &amp;<span class=\"hljs-built_in\">String</span> = &amp;x.f2;         <span class=\"hljs-comment\">// x.f2 borrowed immutably</span>\n<span class=\"hljs-keyword\">let</span> c: &amp;<span class=\"hljs-built_in\">String</span> = &amp;x.f2;         <span class=\"hljs-comment\">// Can borrow again</span>\n<span class=\"hljs-keyword\">let</span> d: <span class=\"hljs-built_in\">String</span> = x.f3;           <span class=\"hljs-comment\">// Move out of x.f3</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"closure-expressions\"><a class=\"header\" href=\"#closure-expressions\">Closure expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ClosureExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">move</code><sup>?</sup><br>\n&nbsp;&nbsp; ( <code class=\"hljs\">||</code> | <code class=\"hljs\">|</code> <em>ClosureParameters</em><sup>?</sup> <code class=\"hljs\">|</code> )<br>\n&nbsp;&nbsp; (<a href=\"expressions/../expressions.html\"><em>Expression</em></a> | <code class=\"hljs\">-&gt;</code> <a href=\"expressions/../types.html#type-expressions\"><em>TypeNoBounds</em></a>&nbsp;<a href=\"expressions/block-expr.html\"><em>BlockExpression</em></a>)</p>\n<p><em>ClosureParameters</em> :<br>\n&nbsp;&nbsp; <em>ClosureParam</em> (<code class=\"hljs\">,</code> <em>ClosureParam</em>)<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n<p><em>ClosureParam</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../attributes.html\"><em>OuterAttribute</em></a><sup>*</sup> <a href=\"expressions/../patterns.html\"><em>PatternNoTopAlt</em></a>&nbsp;( <code class=\"hljs\">:</code> <a href=\"expressions/../types.html#type-expressions\"><em>Type</em></a> )<sup>?</sup></p>\n</blockquote>\n<p>A <em>closure expression</em>, also known as a lambda expression or a lambda, defines a <a href=\"expressions/../types/closure.html\">closure type</a> and evaluates to a value of that type.\nThe syntax for a closure expression is an optional <code class=\"hljs\">move</code> keyword, then a pipe-symbol-delimited (<code class=\"hljs\">|</code>) comma-separated list of <a href=\"expressions/../patterns.html\">patterns</a>, called the <em>closure parameters</em> each optionally followed by a <code class=\"hljs\">:</code> and a type, then an optional <code class=\"hljs\">-&gt;</code> and type, called the <em>return type</em>, and then an expression, called the <em>closure body operand</em>.\nThe optional type after each pattern is a type annotation for the pattern.\nIf there is a return type, the closure body must be a <a href=\"expressions/block-expr.html\">block</a>.</p>\n<p>A closure expression denotes a function that maps a list of parameters onto the expression that follows the parameters.\nJust like a <a href=\"expressions/../statements.html#let-statements\"><code class=\"hljs\">let</code> binding</a>, the closure parameters are irrefutable <a href=\"expressions/../patterns.html\">patterns</a>, whose type annotation is optional and will be inferred from context if not given.\nEach closure expression has a unique, anonymous type.</p>\n<p>Significantly, closure expressions <em>capture their environment</em>, which regular <a href=\"expressions/../items/functions.html\">function definitions</a> do not.\nWithout the <code class=\"hljs\">move</code> keyword, the closure expression <a href=\"expressions/../types/closure.html#capture-modes\">infers how it captures each variable from its environment</a>, preferring to capture by shared reference, effectively borrowing all outer variables mentioned inside the closure's body.\nIf needed the compiler will infer that instead mutable references should be taken, or that the values should be moved or copied (depending on their type) from the environment.\nA closure can be forced to capture its environment by copying or moving values by prefixing it with the <code class=\"hljs\">move</code> keyword.\nThis is often used to ensure that the closure's lifetime is <code class=\"hljs\">'static</code>.</p>\n<h2 id=\"closure-trait-implementations\"><a class=\"header\" href=\"#closure-trait-implementations\">Closure trait implementations</a></h2>\n<p>Which traits the closure type implement depends on how variables are captured and the types of the captured variables.\nSee the <a href=\"expressions/../types/closure.html#call-traits-and-coercions\">call traits and coercions</a> chapter for how and when a closure implements <code class=\"hljs\">Fn</code>, <code class=\"hljs\">FnMut</code>, and <code class=\"hljs\">FnOnce</code>.\nThe closure type implements <a href=\"expressions/../special-types-and-traits.html#send\"><code class=\"hljs\">Send</code></a> and <a href=\"expressions/../special-types-and-traits.html#sync\"><code class=\"hljs\">Sync</code></a> if the type of every captured variable also implements the trait.</p>\n<h2 id=\"example\"><a class=\"header\" href=\"#example\">Example</a></h2>\n<p>In this example, we define a function <code class=\"hljs\">ten_times</code> that takes a higher-order function argument, and we then call it with a closure expression as an argument, followed by a closure expression that moves values from its environment.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">ten_times</span></span>&lt;F&gt;(f: F) <span class=\"hljs-keyword\">where</span> F: <span class=\"hljs-built_in\">Fn</span>(<span class=\"hljs-built_in\">i32</span>) {\n    <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">10</span> {\n        f(index);\n    }\n}\n\nten_times(|j| <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hello, {}\"</span>, j));\n<span class=\"hljs-comment\">// With type annotations</span>\nten_times(|j: <span class=\"hljs-built_in\">i32</span>| -&gt; () { <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hello, {}\"</span>, j) });\n\n<span class=\"hljs-keyword\">let</span> word = <span class=\"hljs-string\">\"konnichiwa\"</span>.to_owned();\nten_times(<span class=\"hljs-keyword\">move</span> |j| <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}, {}\"</span>, word, j));\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"attributes-on-closure-parameters\"><a class=\"header\" href=\"#attributes-on-closure-parameters\">Attributes on closure parameters</a></h2>\n<p>Attributes on closure parameters follow the same rules and restrictions as <a href=\"expressions/../items/functions.html#attributes-on-function-parameters\">regular function parameters</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"loops-and-other-breakable-expressions\"><a class=\"header\" href=\"#loops-and-other-breakable-expressions\">Loops and other breakable expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>LoopExpression</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/loop-expr.html#loop-labels\"><em>LoopLabel</em></a><sup>?</sup> (<br>\n&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/loop-expr.html#infinite-loops\"><em>InfiniteLoopExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/loop-expr.html#predicate-loops\"><em>PredicateLoopExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/loop-expr.html#predicate-pattern-loops\"><em>PredicatePatternLoopExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/loop-expr.html#iterator-loops\"><em>IteratorLoopExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"expressions/loop-expr.html#labelled-block-expressions\"><em>LabelBlockExpression</em></a><br>\n&nbsp;&nbsp; )</p>\n</blockquote>\n<p>Rust supports five loop expressions:</p>\n<ul>\n<li>A <a href=\"expressions/loop-expr.html#infinite-loops\"><code class=\"hljs\">loop</code> expression</a> denotes an infinite loop.</li>\n<li>A <a href=\"expressions/loop-expr.html#predicate-loops\"><code class=\"hljs\">while</code> expression</a> loops until a predicate is false.</li>\n<li>A <a href=\"expressions/loop-expr.html#predicate-pattern-loops\"><code class=\"hljs\">while let</code> expression</a> tests a pattern.</li>\n<li>A <a href=\"expressions/loop-expr.html#iterator-loops\"><code class=\"hljs\">for</code> expression</a> extracts values from an iterator, looping until the iterator is empty.</li>\n<li>A <a href=\"expressions/loop-expr.html#labelled-block-expressions\">labelled block expression</a> runs a loop exactly once, but allows exiting the loop early with <code class=\"hljs\">break</code>.</li>\n</ul>\n<p>All five types of loop support <a href=\"expressions/loop-expr.html#break-expressions\"><code class=\"hljs\">break</code> expressions</a>, and <a href=\"expressions/loop-expr.html#loop-labels\">labels</a>.\nAll except labelled block expressions support <a href=\"expressions/loop-expr.html#continue-expressions\"><code class=\"hljs\">continue</code> expressions</a>.\nOnly <code class=\"hljs\">loop</code> and labelled block expressions support <a href=\"expressions/loop-expr.html#break-and-loop-values\">evaluation to non-trivial values</a>.</p>\n<h2 id=\"infinite-loops\"><a class=\"header\" href=\"#infinite-loops\">Infinite loops</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>InfiniteLoopExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">loop</code> <a href=\"expressions/block-expr.html\"><em>BlockExpression</em></a></p>\n</blockquote>\n<p>A <code class=\"hljs\">loop</code> expression repeats execution of its body continuously:\n<code class=\"hljs\">loop { println!(\"I live.\"); }</code>.</p>\n<p>A <code class=\"hljs\">loop</code> expression without an associated <code class=\"hljs\">break</code> expression is diverging and has type <a href=\"expressions/../types/never.html\"><code class=\"hljs\">!</code></a>.\nA <code class=\"hljs\">loop</code> expression containing associated <a href=\"expressions/loop-expr.html#break-expressions\"><code class=\"hljs\">break</code> expression(s)</a> may terminate, and must have type compatible with the value of the <code class=\"hljs\">break</code> expression(s).</p>\n<h2 id=\"predicate-loops\"><a class=\"header\" href=\"#predicate-loops\">Predicate loops</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>PredicateLoopExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">while</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><sub><em>except struct expression</em></sub> <a href=\"expressions/block-expr.html\"><em>BlockExpression</em></a></p>\n</blockquote>\n<p>A <code class=\"hljs\">while</code> loop begins by evaluating the <a href=\"expressions/../types/boolean.html\">boolean</a> loop conditional operand.\nIf the loop conditional operand evaluates to <code class=\"hljs\">true</code>, the loop body block executes, then control returns to the loop conditional operand.\nIf the loop conditional expression evaluates to <code class=\"hljs\">false</code>, the <code class=\"hljs\">while</code> expression completes.</p>\n<p>An example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> i = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-keyword\">while</span> i &lt; <span class=\"hljs-number\">10</span> {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hello\"</span>);\n    i = i + <span class=\"hljs-number\">1</span>;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"predicate-pattern-loops\"><a class=\"header\" href=\"#predicate-pattern-loops\">Predicate pattern loops</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<a href=\"expressions/loop-expr.html#predicate-pattern-loops\"><em>PredicatePatternLoopExpression</em></a> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">while</code> <code class=\"hljs\">let</code> <a href=\"expressions/../patterns.html\"><em>Pattern</em></a> <code class=\"hljs\">=</code> <a href=\"expressions/match-expr.html\"><em>Scrutinee</em></a><sub><em>except lazy boolean operator expression</em></sub>\n<a href=\"expressions/block-expr.html\"><em>BlockExpression</em></a></p>\n</blockquote>\n<p>A <code class=\"hljs\">while let</code> loop is semantically similar to a <code class=\"hljs\">while</code> loop but in place of a condition expression it expects the keyword <code class=\"hljs\">let</code> followed by a pattern, an <code class=\"hljs\">=</code>, a <a href=\"expressions/../glossary.html#scrutinee\">scrutinee</a> expression and a block expression.\nIf the value of the scrutinee matches the pattern, the loop body block executes then control returns to the pattern matching statement.\nOtherwise, the while expression completes.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(y) = x.pop() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"y = {}\"</span>, y);\n}\n\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> _ = <span class=\"hljs-number\">5</span> {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Irrefutable patterns are always true\"</span>);\n    <span class=\"hljs-keyword\">break</span>;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A <code class=\"hljs\">while let</code> loop is equivalent to a <code class=\"hljs\">loop</code> expression containing a <a href=\"expressions/match-expr.html\"><code class=\"hljs\">match</code> expression</a> as follows.</p>\n<!-- ignore: expansion example -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-symbol\">'label</span>: <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> PATS = EXPR {\n    <span class=\"hljs-comment\">/* loop body */</span>\n}</code></pre>\n<p>is equivalent to</p>\n<!-- ignore: expansion example -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-symbol\">'label</span>: <span class=\"hljs-keyword\">loop</span> {\n    <span class=\"hljs-keyword\">match</span> EXPR {\n        PATS =&gt; { <span class=\"hljs-comment\">/* loop body */</span> },\n        _ =&gt; <span class=\"hljs-keyword\">break</span>,\n    }\n}</code></pre>\n<p>Multiple patterns may be specified with the <code class=\"hljs\">|</code> operator.\nThis has the same semantics as with <code class=\"hljs\">|</code> in <code class=\"hljs\">match</code> expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> vals = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>];\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(v @ <span class=\"hljs-number\">1</span>) | <span class=\"hljs-literal\">Some</span>(v @ <span class=\"hljs-number\">2</span>) = vals.pop() {\n    <span class=\"hljs-comment\">// Prints 2, 2, then 1</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, v);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>As is the case in <a href=\"expressions/if-expr.html#if-let-expressions\"><code class=\"hljs\">if let</code> expressions</a>, the scrutinee cannot be a <a href=\"expressions/operator-expr.html#lazy-boolean-operators\">lazy boolean operator expression</a>.</p>\n<h2 id=\"iterator-loops\"><a class=\"header\" href=\"#iterator-loops\">Iterator loops</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>IteratorLoopExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">for</code> <a href=\"expressions/../patterns.html\"><em>Pattern</em></a> <code class=\"hljs\">in</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><sub><em>except struct expression</em></sub>\n<a href=\"expressions/block-expr.html\"><em>BlockExpression</em></a></p>\n</blockquote>\n<p>A <code class=\"hljs\">for</code> expression is a syntactic construct for looping over elements provided by an implementation of <code class=\"hljs\">std::iter::IntoIterator</code>.\nIf the iterator yields a value, that value is matched against the irrefutable pattern, the body of the loop is executed, and then control returns to the head of the <code class=\"hljs\">for</code> loop.\nIf the iterator is empty, the <code class=\"hljs\">for</code> expression completes.</p>\n<p>An example of a <code class=\"hljs\">for</code> loop over the contents of an array:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> v = &amp;[<span class=\"hljs-string\">\"apples\"</span>, <span class=\"hljs-string\">\"cake\"</span>, <span class=\"hljs-string\">\"coffee\"</span>];\n\n<span class=\"hljs-keyword\">for</span> text <span class=\"hljs-keyword\">in</span> v {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"I like {}.\"</span>, text);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>An example of a for loop over a series of integers:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> sum = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">11</span> {\n    sum += n;\n}\n<span class=\"hljs-built_in\">assert_eq!</span>(sum, <span class=\"hljs-number\">55</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A <code class=\"hljs\">for</code> loop is equivalent to a <code class=\"hljs\">loop</code> expression containing a <a href=\"expressions/match-expr.html\"><code class=\"hljs\">match</code> expression</a> as follows:</p>\n<!-- ignore: expansion example -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-symbol\">'label</span>: <span class=\"hljs-keyword\">for</span> PATTERN <span class=\"hljs-keyword\">in</span> iter_expr {\n    <span class=\"hljs-comment\">/* loop body */</span>\n}</code></pre>\n<p>is equivalent to</p>\n<!-- ignore: expansion example -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">{\n    <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">match</span> <span class=\"hljs-built_in\">IntoIterator</span>::into_iter(iter_expr) {\n        <span class=\"hljs-keyword\">mut</span> iter =&gt; <span class=\"hljs-symbol\">'label</span>: <span class=\"hljs-keyword\">loop</span> {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> next;\n            <span class=\"hljs-keyword\">match</span> <span class=\"hljs-built_in\">Iterator</span>::next(&amp;<span class=\"hljs-keyword\">mut</span> iter) {\n                <span class=\"hljs-built_in\">Option</span>::<span class=\"hljs-literal\">Some</span>(val) =&gt; next = val,\n                <span class=\"hljs-built_in\">Option</span>::<span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">break</span>,\n            };\n            <span class=\"hljs-keyword\">let</span> PATTERN = next;\n            <span class=\"hljs-keyword\">let</span> () = { <span class=\"hljs-comment\">/* loop body */</span> };\n        },\n    };\n    result\n}</code></pre>\n<p><code class=\"hljs\">IntoIterator</code>, <code class=\"hljs\">Iterator</code>, and <code class=\"hljs\">Option</code> are always the standard library items here, not whatever those names resolve to in the current scope.\nThe variable names <code class=\"hljs\">next</code>, <code class=\"hljs\">iter</code>, and <code class=\"hljs\">val</code> are for exposition only, they do not actually have names the user can type.</p>\n<blockquote>\n<p><strong>Note</strong>: that the outer <code class=\"hljs\">match</code> is used to ensure that any <a href=\"expressions/../expressions.html#temporaries\">temporary values</a> in <code class=\"hljs\">iter_expr</code> don't get dropped before the loop is finished.\n<code class=\"hljs\">next</code> is declared before being assigned because it results in types being inferred correctly more often.</p>\n</blockquote>\n<h2 id=\"loop-labels\"><a class=\"header\" href=\"#loop-labels\">Loop labels</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>LoopLabel</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../tokens.html#lifetimes-and-loop-labels\">LIFETIME_OR_LABEL</a> <code class=\"hljs\">:</code></p>\n</blockquote>\n<p>A loop expression may optionally have a <em>label</em>. The label is written as a lifetime preceding the loop expression, as in <code class=\"hljs\">'foo: loop { break 'foo; }</code>, <code class=\"hljs\">'bar: while false {}</code>, <code class=\"hljs\">'humbug: for _ in 0..0 {}</code>.\nIf a label is present, then labeled <code class=\"hljs\">break</code> and <code class=\"hljs\">continue</code> expressions nested within this loop may exit out of this loop or return control to its head.\nSee <a href=\"expressions/loop-expr.html#break-expressions\">break expressions</a> and <a href=\"expressions/loop-expr.html#continue-expressions\">continue expressions</a>.</p>\n<p>Labels follow the hygiene and shadowing rules of local variables. For example, this code will print \"outer loop\":</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-symbol\">'a</span>: <span class=\"hljs-keyword\">loop</span> {\n    <span class=\"hljs-symbol\">'a</span>: <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'a</span>;\n    }\n    <span class=\"hljs-built_in\">print!</span>(<span class=\"hljs-string\">\"outer loop\"</span>);\n    <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'a</span>;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"break-expressions\"><a class=\"header\" href=\"#break-expressions\"><code>break</code> expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>BreakExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">break</code> <a href=\"expressions/../tokens.html#lifetimes-and-loop-labels\">LIFETIME_OR_LABEL</a><sup>?</sup> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><sup>?</sup></p>\n</blockquote>\n<p>When <code class=\"hljs\">break</code> is encountered, execution of the associated loop body is immediately terminated, for example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> last = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">100</span> {\n    <span class=\"hljs-keyword\">if</span> x &gt; <span class=\"hljs-number\">12</span> {\n        <span class=\"hljs-keyword\">break</span>;\n    }\n    last = x;\n}\n<span class=\"hljs-built_in\">assert_eq!</span>(last, <span class=\"hljs-number\">12</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A <code class=\"hljs\">break</code> expression is normally associated with the innermost <code class=\"hljs\">loop</code>, <code class=\"hljs\">for</code> or <code class=\"hljs\">while</code> loop enclosing the <code class=\"hljs\">break</code> expression,\nbut a <a href=\"expressions/loop-expr.html#loop-labels\">label</a> can be used to specify which enclosing loop is affected.\nExample:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-symbol\">'outer</span>: <span class=\"hljs-keyword\">loop</span> {\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">true</span> {\n        <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'outer</span>;\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A <code class=\"hljs\">break</code> expression is only permitted in the body of a loop, and has one of the forms <code class=\"hljs\">break</code>, <code class=\"hljs\">break 'label</code> or (<a href=\"expressions/loop-expr.html#break-and-loop-values\">see below</a>) <code class=\"hljs\">break EXPR</code> or <code class=\"hljs\">break 'label EXPR</code>.</p>\n<h2 id=\"labelled-block-expressions-1\"><a class=\"header\" href=\"#labelled-block-expressions-1\">Labelled block expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>LabelBlockExpression</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/block-expr.html\"><em>BlockExpression</em></a></p>\n</blockquote>\n<p>Labelled block expressions are exactly like block expressions, except that they allow using <code class=\"hljs\">break</code> expressions within the block.\nUnlike loops, <code class=\"hljs\">break</code> expressions within a labelled block expression <em>must</em> have a label (i.e. the label is not optional).\nSimilarly, labelled block expressions <em>must</em> begin with a label.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_thing</span></span>() {}\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">condition_not_met</span></span>() -&gt; <span class=\"hljs-built_in\">bool</span> { <span class=\"hljs-literal\">true</span> }\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_next_thing</span></span>() {}\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_last_thing</span></span>() {}\n</span><span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-symbol\">'block</span>: {\n    do_thing();\n    <span class=\"hljs-keyword\">if</span> condition_not_met() {\n        <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'block</span> <span class=\"hljs-number\">1</span>;\n    }\n    do_next_thing();\n    <span class=\"hljs-keyword\">if</span> condition_not_met() {\n        <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'block</span> <span class=\"hljs-number\">2</span>;\n    }\n    do_last_thing();\n    <span class=\"hljs-number\">3</span>\n};\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"continue-expressions\"><a class=\"header\" href=\"#continue-expressions\"><code>continue</code> expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ContinueExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">continue</code> <a href=\"expressions/../tokens.html#lifetimes-and-loop-labels\">LIFETIME_OR_LABEL</a><sup>?</sup></p>\n</blockquote>\n<p>When <code class=\"hljs\">continue</code> is encountered, the current iteration of the associated loop body is immediately terminated, returning control to the loop <em>head</em>.\nIn the case of a <code class=\"hljs\">while</code> loop, the head is the conditional expression controlling the loop.\nIn the case of a <code class=\"hljs\">for</code> loop, the head is the call-expression controlling the loop.</p>\n<p>Like <code class=\"hljs\">break</code>, <code class=\"hljs\">continue</code> is normally associated with the innermost enclosing loop, but <code class=\"hljs\">continue 'label</code> may be used to specify the loop affected.\nA <code class=\"hljs\">continue</code> expression is only permitted in the body of a loop.</p>\n<h2 id=\"break-and-loop-values\"><a class=\"header\" href=\"#break-and-loop-values\"><code>break</code> and loop values</a></h2>\n<p>When associated with a <code class=\"hljs\">loop</code>, a break expression may be used to return a value from that loop, via one of the forms <code class=\"hljs\">break EXPR</code> or <code class=\"hljs\">break 'label EXPR</code>, where <code class=\"hljs\">EXPR</code> is an expression whose result is returned from the <code class=\"hljs\">loop</code>.\nFor example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> (<span class=\"hljs-keyword\">mut</span> a, <span class=\"hljs-keyword\">mut</span> b) = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);\n<span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">loop</span> {\n    <span class=\"hljs-keyword\">if</span> b &gt; <span class=\"hljs-number\">10</span> {\n        <span class=\"hljs-keyword\">break</span> b;\n    }\n    <span class=\"hljs-keyword\">let</span> c = a + b;\n    a = b;\n    b = c;\n};\n<span class=\"hljs-comment\">// first number in Fibonacci sequence over 10:</span>\n<span class=\"hljs-built_in\">assert_eq!</span>(result, <span class=\"hljs-number\">13</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In the case a <code class=\"hljs\">loop</code> has an associated <code class=\"hljs\">break</code>, it is not considered diverging, and the <code class=\"hljs\">loop</code> must have a type compatible with each <code class=\"hljs\">break</code> expression.\n<code class=\"hljs\">break</code> without an expression is considered identical to <code class=\"hljs\">break</code> with expression <code class=\"hljs\">()</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"range-expressions\"><a class=\"header\" href=\"#range-expressions\">Range expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>RangeExpression</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>RangeExpr</em><br>\n&nbsp;&nbsp; | <em>RangeFromExpr</em><br>\n&nbsp;&nbsp; | <em>RangeToExpr</em><br>\n&nbsp;&nbsp; | <em>RangeFullExpr</em><br>\n&nbsp;&nbsp; | <em>RangeInclusiveExpr</em><br>\n&nbsp;&nbsp; | <em>RangeToInclusiveExpr</em></p>\n<p><em>RangeExpr</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">..</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a></p>\n<p><em>RangeFromExpr</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">..</code></p>\n<p><em>RangeToExpr</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">..</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a></p>\n<p><em>RangeFullExpr</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">..</code></p>\n<p><em>RangeInclusiveExpr</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">..=</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a></p>\n<p><em>RangeToInclusiveExpr</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">..=</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p>The <code class=\"hljs\">..</code> and <code class=\"hljs\">..=</code> operators will construct an object of one of the <code class=\"hljs\">std::ops::Range</code> (or <code class=\"hljs\">core::ops::Range</code>) variants, according to the following table:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Production</th><th>Syntax</th><th>Type</th><th>Range</th></tr></thead><tbody>\n<tr><td><em>RangeExpr</em></td><td>start<code class=\"hljs\">..</code>end</td><td><a href=\"https://doc.rust-lang.org/std/ops/struct.Range.html\">std::ops::Range</a></td><td>start ≤ x &lt; end</td></tr>\n<tr><td><em>RangeFromExpr</em></td><td>start<code class=\"hljs\">..</code></td><td><a href=\"https://doc.rust-lang.org/std/ops/struct.RangeFrom.html\">std::ops::RangeFrom</a></td><td>start ≤ x</td></tr>\n<tr><td><em>RangeToExpr</em></td><td><code class=\"hljs\">..</code>end</td><td><a href=\"https://doc.rust-lang.org/std/ops/struct.RangeTo.html\">std::ops::RangeTo</a></td><td>x &lt; end</td></tr>\n<tr><td><em>RangeFullExpr</em></td><td><code class=\"hljs\">..</code></td><td><a href=\"https://doc.rust-lang.org/std/ops/struct.RangeFull.html\">std::ops::RangeFull</a></td><td>-</td></tr>\n<tr><td><em>RangeInclusiveExpr</em></td><td>start<code class=\"hljs\">..=</code>end</td><td><a href=\"https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html\">std::ops::RangeInclusive</a></td><td>start ≤ x ≤ end</td></tr>\n<tr><td><em>RangeToInclusiveExpr</em></td><td><code class=\"hljs\">..=</code>end</td><td><a href=\"https://doc.rust-lang.org/std/ops/struct.RangeToInclusive.html\">std::ops::RangeToInclusive</a></td><td>x ≤ end</td></tr>\n</tbody></table>\n</div>\n<p>Examples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">2</span>;   <span class=\"hljs-comment\">// std::ops::Range</span>\n<span class=\"hljs-number\">3</span>..;    <span class=\"hljs-comment\">// std::ops::RangeFrom</span>\n..<span class=\"hljs-number\">4</span>;    <span class=\"hljs-comment\">// std::ops::RangeTo</span>\n..;     <span class=\"hljs-comment\">// std::ops::RangeFull</span>\n<span class=\"hljs-number\">5</span>..=<span class=\"hljs-number\">6</span>;  <span class=\"hljs-comment\">// std::ops::RangeInclusive</span>\n..=<span class=\"hljs-number\">7</span>;   <span class=\"hljs-comment\">// std::ops::RangeToInclusive</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The following expressions are equivalent.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = std::ops::Range {start: <span class=\"hljs-number\">0</span>, end: <span class=\"hljs-number\">10</span>};\n<span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">10</span>;\n\n<span class=\"hljs-built_in\">assert_eq!</span>(x, y);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Ranges can be used in <code class=\"hljs\">for</code> loops:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">11</span> {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, i);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"if-and-if-let-expressions\"><a class=\"header\" href=\"#if-and-if-let-expressions\"><code>if</code> and <code>if let</code> expressions</a></h1>\n<h2 id=\"if-expressions\"><a class=\"header\" href=\"#if-expressions\"><code>if</code> expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>IfExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">if</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><sub><em>except struct expression</em></sub> <a href=\"expressions/block-expr.html\"><em>BlockExpression</em></a><br>\n&nbsp;&nbsp; (<code class=\"hljs\">else</code> (\n<a href=\"expressions/block-expr.html\"><em>BlockExpression</em></a>\n| <em>IfExpression</em>\n| <em>IfLetExpression</em> ) )<sup>?</sup></p>\n</blockquote>\n<p>An <code class=\"hljs\">if</code> expression is a conditional branch in program control.\nThe syntax of an <code class=\"hljs\">if</code> expression is a condition operand, followed by a consequent block, any number of <code class=\"hljs\">else if</code> conditions and blocks, and an optional trailing <code class=\"hljs\">else</code> block.\nThe condition operands must have the <a href=\"expressions/../types/boolean.html\">boolean type</a>.\nIf a condition operand evaluates to <code class=\"hljs\">true</code>, the consequent block is executed and any subsequent <code class=\"hljs\">else if</code> or <code class=\"hljs\">else</code> block is skipped.\nIf a condition operand evaluates to <code class=\"hljs\">false</code>, the consequent block is skipped and any subsequent <code class=\"hljs\">else if</code> condition is evaluated.\nIf all <code class=\"hljs\">if</code> and <code class=\"hljs\">else if</code> conditions evaluate to <code class=\"hljs\">false</code> then any <code class=\"hljs\">else</code> block is executed.\nAn if expression evaluates to the same value as the executed block, or <code class=\"hljs\">()</code> if no block is evaluated.\nAn <code class=\"hljs\">if</code> expression must have the same type in all situations.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">3</span>;\n</span><span class=\"hljs-keyword\">if</span> x == <span class=\"hljs-number\">4</span> {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"x is four\"</span>);\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> x == <span class=\"hljs-number\">3</span> {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"x is three\"</span>);\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"x is something else\"</span>);\n}\n\n<span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">12</span> * <span class=\"hljs-number\">15</span> &gt; <span class=\"hljs-number\">150</span> {\n    <span class=\"hljs-string\">\"Bigger\"</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-string\">\"Smaller\"</span>\n};\n<span class=\"hljs-built_in\">assert_eq!</span>(y, <span class=\"hljs-string\">\"Bigger\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"if-let-expressions\"><a class=\"header\" href=\"#if-let-expressions\"><code>if let</code> expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>IfLetExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">if</code> <code class=\"hljs\">let</code> <a href=\"expressions/../patterns.html\"><em>Pattern</em></a> <code class=\"hljs\">=</code> <a href=\"expressions/match-expr.html\"><em>Scrutinee</em></a><sub><em>except lazy boolean operator expression</em></sub>\n<a href=\"expressions/block-expr.html\"><em>BlockExpression</em></a><br>\n&nbsp;&nbsp; (<code class=\"hljs\">else</code> (\n<a href=\"expressions/block-expr.html\"><em>BlockExpression</em></a>\n| <em>IfExpression</em>\n| <em>IfLetExpression</em> ) )<sup>?</sup></p>\n</blockquote>\n<p>An <code class=\"hljs\">if let</code> expression is semantically similar to an <code class=\"hljs\">if</code> expression but in place of a condition operand it expects the keyword <code class=\"hljs\">let</code> followed by a pattern, an <code class=\"hljs\">=</code> and a <a href=\"expressions/../glossary.html#scrutinee\">scrutinee</a> operand.\nIf the value of the scrutinee matches the pattern, the corresponding block will execute.\nOtherwise, flow proceeds to the following <code class=\"hljs\">else</code> block if it exists.\nLike <code class=\"hljs\">if</code> expressions, <code class=\"hljs\">if let</code> expressions have a value determined by the block that is evaluated.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> dish = (<span class=\"hljs-string\">\"Ham\"</span>, <span class=\"hljs-string\">\"Eggs\"</span>);\n\n<span class=\"hljs-comment\">// this body will be skipped because the pattern is refuted</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> (<span class=\"hljs-string\">\"Bacon\"</span>, b) = dish {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Bacon is served with {}\"</span>, b);\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// This block is evaluated instead.</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"No bacon will be served\"</span>);\n}\n\n<span class=\"hljs-comment\">// this body will execute</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> (<span class=\"hljs-string\">\"Ham\"</span>, b) = dish {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Ham is served with {}\"</span>, b);\n}\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> _ = <span class=\"hljs-number\">5</span> {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Irrefutable patterns are always true\"</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><code class=\"hljs\">if</code> and <code class=\"hljs\">if let</code> expressions can be intermixed:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">3</span>);\n<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">1</span>) = x {\n    <span class=\"hljs-number\">1</span>\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> x == <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">2</span>) {\n    <span class=\"hljs-number\">2</span>\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(y) = x {\n    y\n} <span class=\"hljs-keyword\">else</span> {\n    -<span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-built_in\">assert_eq!</span>(a, <span class=\"hljs-number\">3</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>An <code class=\"hljs\">if let</code> expression is equivalent to a <a href=\"expressions/match-expr.html\"><code class=\"hljs\">match</code> expression</a> as follows:</p>\n<!-- ignore: expansion example -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> PATS = EXPR {\n    <span class=\"hljs-comment\">/* body */</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">/*else */</span>\n}</code></pre>\n<p>is equivalent to</p>\n<!-- ignore: expansion example -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">match</span> EXPR {\n    PATS =&gt; { <span class=\"hljs-comment\">/* body */</span> },\n    _ =&gt; { <span class=\"hljs-comment\">/* else */</span> },    <span class=\"hljs-comment\">// () if there is no else</span>\n}</code></pre>\n<p>Multiple patterns may be specified with the <code class=\"hljs\">|</code> operator. This has the same semantics as with <code class=\"hljs\">|</code> in <code class=\"hljs\">match</code> expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">E</span></span> {\n    X(<span class=\"hljs-built_in\">u8</span>),\n    Y(<span class=\"hljs-built_in\">u8</span>),\n    Z(<span class=\"hljs-built_in\">u8</span>),\n}\n<span class=\"hljs-keyword\">let</span> v = E::Y(<span class=\"hljs-number\">12</span>);\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> E::X(n) | E::Y(n) = v {\n    <span class=\"hljs-built_in\">assert_eq!</span>(n, <span class=\"hljs-number\">12</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The expression cannot be a <a href=\"expressions/operator-expr.html#lazy-boolean-operators\">lazy boolean operator expression</a>.\nUse of a lazy boolean operator is ambiguous with a planned feature change of the language (the implementation of if-let chains - see <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2497-if-let-chains.md#rollout-plan-and-transitioning-to-rust-2018\">eRFC 2947</a>).\nWhen lazy boolean operator expression is desired, this can be achieved by using parenthesis as below:</p>\n<!-- ignore: pseudo code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// Before...</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> PAT = EXPR &amp;&amp; EXPR { .. }\n\n<span class=\"hljs-comment\">// After...</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> PAT = ( EXPR &amp;&amp; EXPR ) { .. }\n\n<span class=\"hljs-comment\">// Before...</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> PAT = EXPR || EXPR { .. }\n\n<span class=\"hljs-comment\">// After...</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> PAT = ( EXPR || EXPR ) { .. }</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"match-expressions\"><a class=\"header\" href=\"#match-expressions\"><code>match</code> expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>MatchExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">match</code> <em>Scrutinee</em> <code class=\"hljs\">{</code><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/../attributes.html\"><em>InnerAttribute</em></a><sup>*</sup><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>MatchArms</em><sup>?</sup><br>\n&nbsp;&nbsp; <code class=\"hljs\">}</code></p>\n<p><em>Scrutinee</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a><sub><em>except struct expression</em></sub></p>\n<p><em>MatchArms</em> :<br>\n&nbsp;&nbsp; ( <em>MatchArm</em> <code class=\"hljs\">=&gt;</code>\n( <a href=\"expressions/../expressions.html\"><em>ExpressionWithoutBlock</em></a> <code class=\"hljs\">,</code>\n| <a href=\"expressions/../expressions.html\"><em>ExpressionWithBlock</em></a> <code class=\"hljs\">,</code><sup>?</sup> )\n)<sup>*</sup><br>\n&nbsp;&nbsp; <em>MatchArm</em> <code class=\"hljs\">=&gt;</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">,</code><sup>?</sup></p>\n<p><em>MatchArm</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../attributes.html\"><em>OuterAttribute</em></a><sup>*</sup> <a href=\"expressions/../patterns.html\"><em>Pattern</em></a> <em>MatchArmGuard</em><sup>?</sup></p>\n<p><em>MatchArmGuard</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">if</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p>A <em><code class=\"hljs\">match</code> expression</em> branches on a pattern.\nThe exact form of matching that occurs depends on the <a href=\"expressions/../patterns.html\">pattern</a>.\nA <code class=\"hljs\">match</code> expression has a <em><a href=\"expressions/../glossary.html#scrutinee\">scrutinee</a> expression</em>, which is the value to compare to the patterns.\nThe scrutinee expression and the patterns must have the same type.</p>\n<p>A <code class=\"hljs\">match</code> behaves differently depending on whether or not the scrutinee expression is a <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">place expression or value expression</a>.\nIf the scrutinee expression is a <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">value expression</a>, it is first evaluated into a temporary location, and the resulting value is sequentially compared to the patterns in the arms until a match is found.\nThe first arm with a matching pattern is chosen as the branch target of the <code class=\"hljs\">match</code>, any variables bound by the pattern are assigned to local variables in the arm's block, and control enters the block.</p>\n<p>When the scrutinee expression is a <a href=\"expressions/../expressions.html#place-expressions-and-value-expressions\">place expression</a>, the match does not allocate a temporary location;\nhowever, a by-value binding may copy or move from the memory location.\nWhen possible, it is preferable to match on place expressions, as the lifetime of these matches inherits the lifetime of the place expression rather than being restricted to the inside of the match.</p>\n<p>An example of a <code class=\"hljs\">match</code> expression:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-keyword\">match</span> x {\n    <span class=\"hljs-number\">1</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"one\"</span>),\n    <span class=\"hljs-number\">2</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"two\"</span>),\n    <span class=\"hljs-number\">3</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"three\"</span>),\n    <span class=\"hljs-number\">4</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"four\"</span>),\n    <span class=\"hljs-number\">5</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"five\"</span>),\n    _ =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"something else\"</span>),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Variables bound within the pattern are scoped to the match guard and the arm's expression.\nThe <a href=\"expressions/../patterns.html#binding-modes\">binding mode</a> (move, copy, or reference) depends on the pattern.</p>\n<p>Multiple match patterns may be joined with the <code class=\"hljs\">|</code> operator.\nEach pattern will be tested in left-to-right sequence until a successful match is found.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">9</span>;\n<span class=\"hljs-keyword\">let</span> message = <span class=\"hljs-keyword\">match</span> x {\n    <span class=\"hljs-number\">0</span> | <span class=\"hljs-number\">1</span>  =&gt; <span class=\"hljs-string\">\"not many\"</span>,\n    <span class=\"hljs-number\">2</span> ..= <span class=\"hljs-number\">9</span> =&gt; <span class=\"hljs-string\">\"a few\"</span>,\n    _      =&gt; <span class=\"hljs-string\">\"lots\"</span>\n};\n\n<span class=\"hljs-built_in\">assert_eq!</span>(message, <span class=\"hljs-string\">\"a few\"</span>);\n\n<span class=\"hljs-comment\">// Demonstration of pattern match order.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>);\n\n<span class=\"hljs-keyword\">match</span> S(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>) {\n    S(z @ <span class=\"hljs-number\">1</span>, _) | S(_, z @ <span class=\"hljs-number\">2</span>) =&gt; <span class=\"hljs-built_in\">assert_eq!</span>(z, <span class=\"hljs-number\">1</span>),\n    _ =&gt; <span class=\"hljs-built_in\">panic!</span>(),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p>Note: The <code class=\"hljs\">2..=9</code> is a <a href=\"expressions/../patterns.html#range-patterns\">Range Pattern</a>, not a <a href=\"expressions/range-expr.html\">Range Expression</a>.\nThus, only those types of ranges supported by range patterns can be used in match arms.</p>\n</blockquote>\n<p>Every binding in each <code class=\"hljs\">|</code> separated pattern must appear in all of the patterns in the arm.\nEvery binding of the same name must have the same type, and have the same binding mode.</p>\n<h2 id=\"match-guards\"><a class=\"header\" href=\"#match-guards\">Match guards</a></h2>\n<p>Match arms can accept <em>match guards</em> to further refine the criteria for matching a case.\nPattern guards appear after the pattern and consist of a <code class=\"hljs\">bool</code>-typed expression following the <code class=\"hljs\">if</code> keyword.</p>\n<p>When the pattern matches successfully, the pattern guard expression is executed.\nIf the expression evaluates to true, the pattern is successfully matched against.\nOtherwise, the next pattern, including other matches with the <code class=\"hljs\">|</code> operator in the same arm, is tested.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> maybe_digit = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">process_digit</span></span>(i: <span class=\"hljs-built_in\">i32</span>) { }\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">process_other</span></span>(i: <span class=\"hljs-built_in\">i32</span>) { }\n</span><span class=\"hljs-keyword\">let</span> message = <span class=\"hljs-keyword\">match</span> maybe_digit {\n    <span class=\"hljs-literal\">Some</span>(x) <span class=\"hljs-keyword\">if</span> x &lt; <span class=\"hljs-number\">10</span> =&gt; process_digit(x),\n    <span class=\"hljs-literal\">Some</span>(x) =&gt; process_other(x),\n    <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(),\n};\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p>Note: Multiple matches using the <code class=\"hljs\">|</code> operator can cause the pattern guard and the side effects it has to execute multiple times.\nFor example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cell::Cell;\n</span><span class=\"hljs-keyword\">let</span> i : Cell&lt;<span class=\"hljs-built_in\">i32</span>&gt; = Cell::new(<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">match</span> <span class=\"hljs-number\">1</span> {\n    <span class=\"hljs-number\">1</span> | _ <span class=\"hljs-keyword\">if</span> { i.set(i.get() + <span class=\"hljs-number\">1</span>); <span class=\"hljs-literal\">false</span> } =&gt; {}\n    _ =&gt; {}\n}\n<span class=\"hljs-built_in\">assert_eq!</span>(i.get(), <span class=\"hljs-number\">2</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n</blockquote>\n<p>A pattern guard may refer to the variables bound within the pattern they follow.\nBefore evaluating the guard, a shared reference is taken to the part of the scrutinee the variable matches on.\nWhile evaluating the guard, this shared reference is then used when accessing the variable.\nOnly when the guard evaluates to true is the value moved, or copied, from the scrutinee into the variable.\nThis allows shared borrows to be used inside guards without moving out of the scrutinee in case guard fails to match.\nMoreover, by holding a shared reference while evaluating the guard, mutation inside guards is also prevented.</p>\n<h2 id=\"attributes-on-match-arms\"><a class=\"header\" href=\"#attributes-on-match-arms\">Attributes on match arms</a></h2>\n<p>Outer attributes are allowed on match arms.\nThe only attributes that have meaning on match arms are <a href=\"expressions/../conditional-compilation.html\"><code class=\"hljs\">cfg</code></a> and the <a href=\"expressions/../attributes/diagnostics.html#lint-check-attributes\">lint check attributes</a>.</p>\n<p><a href=\"expressions/../attributes.html\">Inner attributes</a> are allowed directly after the opening brace of the match expression in the same expression contexts as <a href=\"expressions/block-expr.html#attributes-on-block-expressions\">attributes on block expressions</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"return-expressions\"><a class=\"header\" href=\"#return-expressions\"><code>return</code> expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ReturnExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">return</code> <a href=\"expressions/../expressions.html\"><em>Expression</em></a><sup>?</sup></p>\n</blockquote>\n<p>Return expressions are denoted with the keyword <code class=\"hljs\">return</code>.\nEvaluating a <code class=\"hljs\">return</code> expression moves its argument into the designated output location for the current function call, destroys the current function activation frame, and transfers control to the caller frame.</p>\n<p>An example of a <code class=\"hljs\">return</code> expression:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">max</span></span>(a: <span class=\"hljs-built_in\">i32</span>, b: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    <span class=\"hljs-keyword\">if</span> a &gt; b {\n        <span class=\"hljs-keyword\">return</span> a;\n    }\n    <span class=\"hljs-keyword\">return</span> b;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"await-expressions\"><a class=\"header\" href=\"#await-expressions\">Await expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>AwaitExpression</em> :<br>\n&nbsp;&nbsp; <a href=\"expressions/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">.</code> <code class=\"hljs\">await</code></p>\n</blockquote>\n<p>An <code class=\"hljs\">await</code> expression is a syntactic construct for suspending a computation\nprovided by an implementation of <code class=\"hljs\">std::future::IntoFuture</code> until the given\nfuture is ready to produce a value.\nThe syntax for an await expression is an expression with a type that implements the <a href=\"expressions/../../std/future/trait.IntoFuture.html\"><code class=\"hljs\">IntoFuture</code></a> trait, called the <em>future operand</em>, then the token <code class=\"hljs\">.</code>, and then the <code class=\"hljs\">await</code> keyword.\nAwait expressions are legal only within an <a href=\"expressions/../expressions/block-expr.html#async-context\">async context</a>, like an <a href=\"expressions/../items/functions.html#async-functions\"><code class=\"hljs\">async fn</code></a> or an <a href=\"expressions/block-expr.html#async-blocks\"><code class=\"hljs\">async</code> block</a>.</p>\n<p>More specifically, an await expression has the following effect.</p>\n<ol>\n<li>Create a future by calling <a href=\"expressions/../../std/future/trait.IntoFuture.html#tymethod.into_future\"><code class=\"hljs\">IntoFuture::into_future</code></a> on the future operand.</li>\n<li>Evaluate the future to a <a href=\"expressions/../../std/future/trait.Future.html\">future</a> <code class=\"hljs\">tmp</code>;</li>\n<li>Pin <code class=\"hljs\">tmp</code> using <a href=\"expressions/../../std/pin/struct.Pin.html#method.new_unchecked\"><code class=\"hljs\">Pin::new_unchecked</code></a>;</li>\n<li>This pinned future is then polled by calling the <a href=\"expressions/../../std/future/trait.Future.html#tymethod.poll\"><code class=\"hljs\">Future::poll</code></a> method and passing it the current <a href=\"expressions/await-expr.html#task-context\">task context</a>;</li>\n<li>If the call to <code class=\"hljs\">poll</code> returns <a href=\"expressions/../../std/task/enum.Poll.html#variant.Pending\"><code class=\"hljs\">Poll::Pending</code></a>, then the future returns <code class=\"hljs\">Poll::Pending</code>, suspending its state so that, when the surrounding async context is re-polled,execution returns to step 3;</li>\n<li>Otherwise the call to <code class=\"hljs\">poll</code> must have returned <a href=\"expressions/../../std/task/enum.Poll.html#variant.Ready\"><code class=\"hljs\">Poll::Ready</code></a>, in which case the value contained in the <a href=\"expressions/../../std/task/enum.Poll.html#variant.Ready\"><code class=\"hljs\">Poll::Ready</code></a> variant is used as the result of the <code class=\"hljs\">await</code> expression itself.</li>\n</ol>\n<blockquote>\n<p><strong>Edition differences</strong>: Await expressions are only available beginning with Rust 2018.</p>\n</blockquote>\n<h2 id=\"task-context\"><a class=\"header\" href=\"#task-context\">Task context</a></h2>\n<p>The task context refers to the <a href=\"expressions/../../std/task/struct.Context.html\"><code class=\"hljs\">Context</code></a> which was supplied to the current <a href=\"expressions/../expressions/block-expr.html#async-context\">async context</a> when the async context itself was polled.\nBecause <code class=\"hljs\">await</code> expressions are only legal in an async context, there must be some task context available.</p>\n<h2 id=\"approximate-desugaring\"><a class=\"header\" href=\"#approximate-desugaring\">Approximate desugaring</a></h2>\n<p>Effectively, an await expression is roughly equivalent to the following non-normative desugaring:</p>\n<!-- ignore: example expansion -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">match</span> operand.into_future() {\n    <span class=\"hljs-keyword\">mut</span> pinned =&gt; <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> pin = <span class=\"hljs-keyword\">unsafe</span> { Pin::new_unchecked(&amp;<span class=\"hljs-keyword\">mut</span> pinned) };\n        <span class=\"hljs-keyword\">match</span> Pin::future::poll(Pin::borrow(&amp;<span class=\"hljs-keyword\">mut</span> pin), &amp;<span class=\"hljs-keyword\">mut</span> current_context) {\n            Poll::Ready(r) =&gt; <span class=\"hljs-keyword\">break</span> r,\n            Poll::Pending =&gt; <span class=\"hljs-keyword\">yield</span> Poll::Pending,\n        }\n    }\n}</code></pre>\n<p>where the <code class=\"hljs\">yield</code> pseudo-code returns <code class=\"hljs\">Poll::Pending</code> and, when re-invoked, resumes execution from that point.\nThe variable <code class=\"hljs\">current_context</code> refers to the context taken from the async environment.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"_-expressions\"><a class=\"header\" href=\"#_-expressions\"><code>_</code> expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>UnderscoreExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">_</code></p>\n</blockquote>\n<p>Underscore expressions, denoted with the symbol <code class=\"hljs\">_</code>, are used to signify a\nplaceholder in a destructuring assignment. They may only appear in the left-hand\nside of an assignment.</p>\n<p>Note that this is distinct from the <a href=\"expressions/../patterns.html#wildcard-pattern\">wildcard pattern</a>.</p>\n<p>An example of an <code class=\"hljs\">_</code> expression:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> p = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> a = <span class=\"hljs-number\">0</span>;\n(_, a) = p;\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"patterns\"><a class=\"header\" href=\"#patterns\">Patterns</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>Pattern</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">|</code><sup>?</sup> <em>PatternNoTopAlt</em>  ( <code class=\"hljs\">|</code> <em>PatternNoTopAlt</em> )<sup>*</sup></p>\n<p><em>PatternNoTopAlt</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>PatternWithoutRange</em><br>\n&nbsp;&nbsp; | <a href=\"patterns.html#range-patterns\"><em>RangePattern</em></a></p>\n<p><em>PatternWithoutRange</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"patterns.html#literal-patterns\"><em>LiteralPattern</em></a><br>\n&nbsp;&nbsp; | <a href=\"patterns.html#identifier-patterns\"><em>IdentifierPattern</em></a><br>\n&nbsp;&nbsp; | <a href=\"patterns.html#wildcard-pattern\"><em>WildcardPattern</em></a><br>\n&nbsp;&nbsp; | <a href=\"patterns.html#rest-patterns\"><em>RestPattern</em></a><br>\n&nbsp;&nbsp; | <a href=\"patterns.html#reference-patterns\"><em>ReferencePattern</em></a><br>\n&nbsp;&nbsp; | <a href=\"patterns.html#struct-patterns\"><em>StructPattern</em></a><br>\n&nbsp;&nbsp; | <a href=\"patterns.html#tuple-struct-patterns\"><em>TupleStructPattern</em></a><br>\n&nbsp;&nbsp; | <a href=\"patterns.html#tuple-patterns\"><em>TuplePattern</em></a><br>\n&nbsp;&nbsp; | <a href=\"patterns.html#grouped-patterns\"><em>GroupedPattern</em></a><br>\n&nbsp;&nbsp; | <a href=\"patterns.html#slice-patterns\"><em>SlicePattern</em></a><br>\n&nbsp;&nbsp; | <a href=\"patterns.html#path-patterns\"><em>PathPattern</em></a><br>\n&nbsp;&nbsp; | <a href=\"macros.html#macro-invocation\"><em>MacroInvocation</em></a></p>\n</blockquote>\n<p>Patterns are used to match values against structures and to, optionally, bind variables to values inside these structures.\nThey are also used in variable declarations and parameters for functions and closures.</p>\n<p>The pattern in the following example does four things:</p>\n<ul>\n<li>Tests if <code class=\"hljs\">person</code> has the <code class=\"hljs\">car</code> field filled with something.</li>\n<li>Tests if the person's <code class=\"hljs\">age</code> field is between 13 and 19, and binds its value to the <code class=\"hljs\">person_age</code> variable.</li>\n<li>Binds a reference to the <code class=\"hljs\">name</code> field to the variable <code class=\"hljs\">person_name</code>.</li>\n<li>Ignores the rest of the fields of <code class=\"hljs\">person</code>.\nThe remaining fields can have any value and are not bound to any variables.</li>\n</ul>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Car</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Computer</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Person</span></span> {\n</span><span class=\"boring\">    name: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    car: <span class=\"hljs-built_in\">Option</span>&lt;Car&gt;,\n</span><span class=\"boring\">    computer: <span class=\"hljs-built_in\">Option</span>&lt;Computer&gt;,\n</span><span class=\"boring\">    age: <span class=\"hljs-built_in\">u8</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> person = Person {\n</span><span class=\"boring\">    name: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"John\"</span>),\n</span><span class=\"boring\">    car: <span class=\"hljs-literal\">Some</span>(Car),\n</span><span class=\"boring\">    computer: <span class=\"hljs-literal\">None</span>,\n</span><span class=\"boring\">    age: <span class=\"hljs-number\">15</span>,\n</span><span class=\"boring\">};\n</span><span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span>\n    Person {\n        car: <span class=\"hljs-literal\">Some</span>(_),\n        age: person_age @ <span class=\"hljs-number\">13</span>..=<span class=\"hljs-number\">19</span>,\n        name: <span class=\"hljs-keyword\">ref</span> person_name,\n        ..\n    } = person\n{\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{} has a car and is {} years old.\"</span>, person_name, person_age);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Patterns are used in:</p>\n<ul>\n<li><a href=\"statements.html#let-statements\"><code class=\"hljs\">let</code> declarations</a></li>\n<li><a href=\"items/functions.html\">Function</a> and <a href=\"expressions/closure-expr.html\">closure</a> parameters</li>\n<li><a href=\"expressions/match-expr.html\"><code class=\"hljs\">match</code> expressions</a></li>\n<li><a href=\"expressions/if-expr.html\"><code class=\"hljs\">if let</code> expressions</a></li>\n<li><a href=\"expressions/loop-expr.html#predicate-pattern-loops\"><code class=\"hljs\">while let</code> expressions</a></li>\n<li><a href=\"expressions/loop-expr.html#iterator-loops\"><code class=\"hljs\">for</code> expressions</a></li>\n</ul>\n<h2 id=\"destructuring\"><a class=\"header\" href=\"#destructuring\">Destructuring</a></h2>\n<p>Patterns can be used to <em>destructure</em> <a href=\"items/structs.html\">structs</a>, <a href=\"items/enumerations.html\">enums</a>, and <a href=\"types/tuple.html\">tuples</a>.\nDestructuring breaks up a value into its component pieces.\nThe syntax used is almost the same as when creating such values.\nIn a pattern whose <a href=\"glossary.html#scrutinee\">scrutinee</a> expression has a <code class=\"hljs\">struct</code>, <code class=\"hljs\">enum</code> or <code class=\"hljs\">tuple</code> type, a placeholder (<code class=\"hljs\">_</code>) stands in for a <em>single</em> data field, whereas a wildcard <code class=\"hljs\">..</code>  stands in for <em>all</em> the remaining fields of a particular variant.\nWhen destructuring a data structure with named (but not numbered) fields, it is allowed to write <code class=\"hljs\">fieldname</code> as a shorthand for <code class=\"hljs\">fieldname: fieldname</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Message</span></span> {\n</span><span class=\"boring\">    Quit,\n</span><span class=\"boring\">    WriteString(<span class=\"hljs-built_in\">String</span>),\n</span><span class=\"boring\">    Move { x: <span class=\"hljs-built_in\">i32</span>, y: <span class=\"hljs-built_in\">i32</span> },\n</span><span class=\"boring\">    ChangeColor(<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u8</span>),\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> message = Message::Quit;\n</span><span class=\"hljs-keyword\">match</span> message {\n    Message::Quit =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Quit\"</span>),\n    Message::WriteString(write) =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, &amp;write),\n    Message::Move{ x, y: <span class=\"hljs-number\">0</span> } =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"move {} horizontally\"</span>, x),\n    Message::Move{ .. } =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"other move\"</span>),\n    Message::ChangeColor { <span class=\"hljs-number\">0</span>: red, <span class=\"hljs-number\">1</span>: green, <span class=\"hljs-number\">2</span>: _ } =&gt; {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"color change, red: {}, green: {}\"</span>, red, green);\n    }\n};\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"refutability\"><a class=\"header\" href=\"#refutability\">Refutability</a></h2>\n<p>A pattern is said to be <em>refutable</em> when it has the possibility of not being matched by the value it is being matched against.\n<em>Irrefutable</em> patterns, on the other hand, always match the value they are being matched against.\nExamples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> (x, y) = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);               <span class=\"hljs-comment\">// \"(x, y)\" is an irrefutable pattern</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> (a, <span class=\"hljs-number\">3</span>) = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>) {           <span class=\"hljs-comment\">// \"(a, 3)\" is refutable, and will not match</span>\n    <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Shouldn't reach here\"</span>);\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> (a, <span class=\"hljs-number\">4</span>) = (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>) {    <span class=\"hljs-comment\">// \"(a, 4)\" is refutable, and will match</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Matched ({}, 4)\"</span>, a);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"literal-patterns\"><a class=\"header\" href=\"#literal-patterns\">Literal patterns</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>LiteralPattern</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">true</code> | <code class=\"hljs\">false</code><br>\n&nbsp;&nbsp; | <a href=\"tokens.html#character-literals\">CHAR_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"tokens.html#byte-literals\">BYTE_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"tokens.html#string-literals\">STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"tokens.html#raw-string-literals\">RAW_STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"tokens.html#byte-string-literals\">BYTE_STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"tokens.html#raw-byte-string-literals\">RAW_BYTE_STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"tokens.html#c-string-literals\">C_STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"tokens.html#raw-c-string-literals\">RAW_C_STRING_LITERAL</a><br>\n&nbsp;&nbsp; | <code class=\"hljs\">-</code><sup>?</sup> <a href=\"tokens.html#integer-literals\">INTEGER_LITERAL</a><br>\n&nbsp;&nbsp; | <code class=\"hljs\">-</code><sup>?</sup> <a href=\"tokens.html#floating-point-literals\">FLOAT_LITERAL</a></p>\n</blockquote>\n<p><em>Literal patterns</em> match exactly the same value as what is created by the literal.\nSince negative numbers are not <a href=\"expressions/literal-expr.html\">literals</a>, literal patterns also accept an optional minus sign before the literal, which acts like the negation operator.</p>\n<div class=\"warning\">\n<p>C string and raw C string literals are accepted in literal patterns, but <code class=\"hljs\">&amp;CStr</code>\ndoesn't implement structural equality (<code class=\"hljs\">#[derive(Eq, PartialEq)]</code>) and therefore\nany such <code class=\"hljs\">match</code> on a <code class=\"hljs\">&amp;CStr</code> will be rejected with a type error.</p>\n</div>\n<p>Literal patterns are always refutable.</p>\n<p>Examples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> -<span class=\"hljs-number\">2</span>..<span class=\"hljs-number\">5</span> {\n    <span class=\"hljs-keyword\">match</span> i {\n        -<span class=\"hljs-number\">1</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"It's minus one\"</span>),\n        <span class=\"hljs-number\">1</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"It's a one\"</span>),\n        <span class=\"hljs-number\">2</span>|<span class=\"hljs-number\">4</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"It's either a two or a four\"</span>),\n        _ =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Matched none of the arms\"</span>),\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"identifier-patterns\"><a class=\"header\" href=\"#identifier-patterns\">Identifier patterns</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>IdentifierPattern</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">ref</code><sup>?</sup> <code class=\"hljs\">mut</code><sup>?</sup> <a href=\"identifiers.html\">IDENTIFIER</a> (<code class=\"hljs\">@</code> <a href=\"patterns.html#patterns\"><em>PatternNoTopAlt</em></a> ) <sup>?</sup></p>\n</blockquote>\n<p>Identifier patterns bind the value they match to a variable.\nThe identifier must be unique within the pattern.\nThe variable will shadow any variables of the same name in scope.\nThe <a href=\"names/scopes.html\">scope</a> of the new binding depends on the context of where the pattern is used (such as a <code class=\"hljs\">let</code> binding or a <code class=\"hljs\">match</code> arm).</p>\n<p>Patterns that consist of only an identifier, possibly with a <code class=\"hljs\">mut</code>, match any value and bind it to that identifier.\nThis is the most commonly used pattern in variable declarations and parameters for functions and closures.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> variable = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">sum</span></span>(x: <span class=\"hljs-built_in\">i32</span>, y: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n<span class=\"boring\">   x + y\n</span><span class=\"boring\">}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>To bind the matched value of a pattern to a variable, use the syntax <code class=\"hljs\">variable @ subpattern</code>.\nFor example, the following binds the value 2 to <code class=\"hljs\">e</code> (not the entire range: the range here is a range subpattern).</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-keyword\">match</span> x {\n    e @ <span class=\"hljs-number\">1</span> ..= <span class=\"hljs-number\">5</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"got a range element {}\"</span>, e),\n    _ =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"anything\"</span>),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>By default, identifier patterns bind a variable to a copy of or move from the matched value depending on whether the matched value implements <a href=\"special-types-and-traits.html#copy\"><code class=\"hljs\">Copy</code></a>.\nThis can be changed to bind to a reference by using the <code class=\"hljs\">ref</code> keyword, or to a mutable reference using <code class=\"hljs\">ref mut</code>. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">10</span>);\n</span><span class=\"hljs-keyword\">match</span> a {\n    <span class=\"hljs-literal\">None</span> =&gt; (),\n    <span class=\"hljs-literal\">Some</span>(value) =&gt; (),\n}\n\n<span class=\"hljs-keyword\">match</span> a {\n    <span class=\"hljs-literal\">None</span> =&gt; (),\n    <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-keyword\">ref</span> value) =&gt; (),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In the first match expression, the value is copied (or moved).\nIn the second match, a reference to the same memory location is bound to the variable value.\nThis syntax is needed because in destructuring subpatterns the <code class=\"hljs\">&amp;</code> operator can't be applied to the value's fields.\nFor example, the following is not valid:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Person</span></span> {\n</span><span class=\"boring\">   name: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">   age: <span class=\"hljs-built_in\">u8</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> value = Person { name: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"John\"</span>), age: <span class=\"hljs-number\">23</span> };\n</span><span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> Person { name: &amp;person_name, age: <span class=\"hljs-number\">18</span>..=<span class=\"hljs-number\">150</span> } = value { }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>To make it valid, write the following:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Person</span></span> {\n</span><span class=\"boring\">   name: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">   age: <span class=\"hljs-built_in\">u8</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> value = Person { name: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"John\"</span>), age: <span class=\"hljs-number\">23</span> };\n</span><span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> Person {name: <span class=\"hljs-keyword\">ref</span> person_name, age: <span class=\"hljs-number\">18</span>..=<span class=\"hljs-number\">150</span> } = value { }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Thus, <code class=\"hljs\">ref</code> is not something that is being matched against.\nIts objective is exclusively to make the matched binding a reference, instead of potentially copying or moving what was matched.</p>\n<p><a href=\"patterns.html#path-patterns\">Path patterns</a> take precedence over identifier patterns.\nIt is an error if <code class=\"hljs\">ref</code> or <code class=\"hljs\">ref mut</code> is specified and the identifier shadows a constant.</p>\n<p>Identifier patterns are irrefutable if the <code class=\"hljs\">@</code> subpattern is irrefutable or the subpattern is not specified.</p>\n<h3 id=\"binding-modes\"><a class=\"header\" href=\"#binding-modes\">Binding modes</a></h3>\n<p>To service better ergonomics, patterns operate in different <em>binding modes</em> in order to make it easier to bind references to values.\nWhen a reference value is matched by a non-reference pattern, it will be automatically treated as a <code class=\"hljs\">ref</code> or <code class=\"hljs\">ref mut</code> binding.\nExample:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x: &amp;<span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; = &amp;<span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">3</span>);\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(y) = x {\n    <span class=\"hljs-comment\">// y was converted to `ref y` and its type is &amp;i32</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><em>Non-reference patterns</em> include all patterns except bindings, <a href=\"patterns.html#wildcard-pattern\">wildcard patterns</a> (<code class=\"hljs\">_</code>), <a href=\"patterns.html#path-patterns\"><code class=\"hljs\">const</code> patterns</a> of reference types, and <a href=\"patterns.html#reference-patterns\">reference patterns</a>.</p>\n<p>If a binding pattern does not explicitly have <code class=\"hljs\">ref</code>, <code class=\"hljs\">ref mut</code>, or <code class=\"hljs\">mut</code>, then it uses the <em>default binding mode</em> to determine how the variable is bound.\nThe default binding mode starts in \"move\" mode which uses move semantics.\nWhen matching a pattern, the compiler starts from the outside of the pattern and works inwards.\nEach time a reference is matched using a non-reference pattern, it will automatically dereference the value and update the default binding mode.\nReferences will set the default binding mode to <code class=\"hljs\">ref</code>.\nMutable references will set the mode to <code class=\"hljs\">ref mut</code> unless the mode is already <code class=\"hljs\">ref</code> in which case it remains <code class=\"hljs\">ref</code>.\nIf the automatically dereferenced value is still a reference, it is dereferenced and this process repeats.</p>\n<p>Move bindings and reference bindings can be mixed together in the same pattern.\nDoing so will result in partial move of the object bound to and the object cannot be used afterwards.\nThis applies only if the type cannot be copied.</p>\n<p>In the example below, <code class=\"hljs\">name</code> is moved out of <code class=\"hljs\">person</code>.\nTrying to use <code class=\"hljs\">person</code> as a whole or <code class=\"hljs\">person.name</code> would result in an error because of <em>partial move</em>.</p>\n<p>Example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Person</span></span> {\n</span><span class=\"boring\">   name: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">   age: <span class=\"hljs-built_in\">u8</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> person = Person{ name: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"John\"</span>), age: <span class=\"hljs-number\">23</span> };\n</span><span class=\"hljs-comment\">// `name` is moved from person and `age` referenced</span>\n<span class=\"hljs-keyword\">let</span> Person { name, <span class=\"hljs-keyword\">ref</span> age } = person;\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"wildcard-pattern\"><a class=\"header\" href=\"#wildcard-pattern\">Wildcard pattern</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>WildcardPattern</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">_</code></p>\n</blockquote>\n<p>The <em>wildcard pattern</em> (an underscore symbol) matches any value.\nIt is used to ignore values when they don't matter.\nInside other patterns it matches a single data field (as opposed to the <code class=\"hljs\">..</code> which matches the remaining fields).\nUnlike identifier patterns, it does not copy, move or borrow the value it matches.</p>\n<p>Examples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">20</span>;\n</span><span class=\"hljs-keyword\">let</span> (a, _) = (<span class=\"hljs-number\">10</span>, x);   <span class=\"hljs-comment\">// the x is always matched by _</span>\n<span class=\"boring\"><span class=\"hljs-built_in\">assert_eq!</span>(a, <span class=\"hljs-number\">10</span>);\n</span>\n<span class=\"hljs-comment\">// ignore a function/closure param</span>\n<span class=\"hljs-keyword\">let</span> real_part = |a: <span class=\"hljs-built_in\">f64</span>, _: <span class=\"hljs-built_in\">f64</span>| { a };\n\n<span class=\"hljs-comment\">// ignore a field from a struct</span>\n<span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">RGBA</span></span> {\n</span><span class=\"boring\">   r: <span class=\"hljs-built_in\">f32</span>,\n</span><span class=\"boring\">   g: <span class=\"hljs-built_in\">f32</span>,\n</span><span class=\"boring\">   b: <span class=\"hljs-built_in\">f32</span>,\n</span><span class=\"boring\">   a: <span class=\"hljs-built_in\">f32</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> color = RGBA{r: <span class=\"hljs-number\">0.4</span>, g: <span class=\"hljs-number\">0.1</span>, b: <span class=\"hljs-number\">0.9</span>, a: <span class=\"hljs-number\">0.5</span>};\n</span><span class=\"hljs-keyword\">let</span> RGBA{r: red, g: green, b: blue, a: _} = color;\n<span class=\"boring\"><span class=\"hljs-built_in\">assert_eq!</span>(color.r, red);\n</span><span class=\"boring\"><span class=\"hljs-built_in\">assert_eq!</span>(color.g, green);\n</span><span class=\"boring\"><span class=\"hljs-built_in\">assert_eq!</span>(color.b, blue);\n</span>\n<span class=\"hljs-comment\">// accept any Some, with any value</span>\n<span class=\"boring\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">10</span>);\n</span><span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(_) = x {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The wildcard pattern is always irrefutable.</p>\n<h2 id=\"rest-patterns\"><a class=\"header\" href=\"#rest-patterns\">Rest patterns</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>RestPattern</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">..</code></p>\n</blockquote>\n<p>The <em>rest pattern</em> (the <code class=\"hljs\">..</code> token) acts as a variable-length pattern which matches zero or more elements that haven't been matched already before and after.\nIt may only be used in <a href=\"patterns.html#tuple-patterns\">tuple</a>, <a href=\"patterns.html#tuple-struct-patterns\">tuple struct</a>, and <a href=\"patterns.html#slice-patterns\">slice</a> patterns, and may only appear once as one of the elements in those patterns.\nIt is also allowed in an <a href=\"patterns.html#identifier-patterns\">identifier pattern</a> for <a href=\"patterns.html#slice-patterns\">slice patterns</a> only.</p>\n<p>The rest pattern is always irrefutable.</p>\n<p>Examples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> words = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>];\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> slice = &amp;words[..];\n</span><span class=\"hljs-keyword\">match</span> slice {\n    [] =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"slice is empty\"</span>),\n    [one] =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"single element {}\"</span>, one),\n    [head, tail @ ..] =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"head={} tail={:?}\"</span>, head, tail),\n}\n\n<span class=\"hljs-keyword\">match</span> slice {\n    <span class=\"hljs-comment\">// Ignore everything but the last element, which must be \"!\".</span>\n    [.., <span class=\"hljs-string\">\"!\"</span>] =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"!!!\"</span>),\n\n    <span class=\"hljs-comment\">// `start` is a slice of everything except the last element, which must be \"z\".</span>\n    [start @ .., <span class=\"hljs-string\">\"z\"</span>] =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"starts with: {:?}\"</span>, start),\n\n    <span class=\"hljs-comment\">// `end` is a slice of everything but the first element, which must be \"a\".</span>\n    [<span class=\"hljs-string\">\"a\"</span>, end @ ..] =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"ends with: {:?}\"</span>, end),\n\n    <span class=\"hljs-comment\">// 'whole' is the entire slice and `last` is the final element</span>\n    whole @ [.., last] =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"the last element of {:?} is {}\"</span>, whole, last),\n\n    rest =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{:?}\"</span>, rest),\n}\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> [.., penultimate, _] = slice {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"next to last is {}\"</span>, penultimate);\n}\n\n<span class=\"boring\"><span class=\"hljs-keyword\">let</span> tuple = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>);\n</span><span class=\"hljs-comment\">// Rest patterns may also be used in tuple and tuple struct patterns.</span>\n<span class=\"hljs-keyword\">match</span> tuple {\n    (<span class=\"hljs-number\">1</span>, .., y, z) =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"y={} z={}\"</span>, y, z),\n    (.., <span class=\"hljs-number\">5</span>) =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"tail must be 5\"</span>),\n    (..) =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"matches everything else\"</span>),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"range-patterns\"><a class=\"header\" href=\"#range-patterns\">Range patterns</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>RangePattern</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>RangeInclusivePattern</em><br>\n&nbsp;&nbsp; | <em>RangeFromPattern</em><br>\n&nbsp;&nbsp; | <em>RangeToInclusivePattern</em><br>\n&nbsp;&nbsp; | <em>ObsoleteRangePattern</em></p>\n<p><em>RangeExclusivePattern</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>RangePatternBound</em> <code class=\"hljs\">..</code> <em>RangePatternBound</em></p>\n<p><em>RangeInclusivePattern</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>RangePatternBound</em> <code class=\"hljs\">..=</code> <em>RangePatternBound</em></p>\n<p><em>RangeFromPattern</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>RangePatternBound</em> <code class=\"hljs\">..</code></p>\n<p><em>RangeToInclusivePattern</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">..=</code> <em>RangePatternBound</em></p>\n<p><em>ObsoleteRangePattern</em> :<br>\n&nbsp;&nbsp; <em>RangePatternBound</em> <code class=\"hljs\">...</code> <em>RangePatternBound</em></p>\n<p><em>RangePatternBound</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"tokens.html#character-literals\">CHAR_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"tokens.html#byte-literals\">BYTE_LITERAL</a><br>\n&nbsp;&nbsp; | <code class=\"hljs\">-</code><sup>?</sup> <a href=\"tokens.html#integer-literals\">INTEGER_LITERAL</a><br>\n&nbsp;&nbsp; | <code class=\"hljs\">-</code><sup>?</sup> <a href=\"tokens.html#floating-point-literals\">FLOAT_LITERAL</a><br>\n&nbsp;&nbsp; | <a href=\"expressions/path-expr.html\"><em>PathExpression</em></a></p>\n</blockquote>\n<p><em>Range patterns</em> match scalar values within the range defined by their bounds.\nThey comprise a <em>sigil</em> (one of <code class=\"hljs\">..</code>, <code class=\"hljs\">..=</code>, or <code class=\"hljs\">...</code>) and a bound on one or both sides.\nA bound on the left of the sigil is a <em>lower bound</em>.\nA bound on the right is an <em>upper bound</em>.</p>\n<p>A range pattern with both a lower and upper bound will match all values between and including both of its bounds.\nIt is written as its lower bound, followed by <code class=\"hljs\">..</code> for end-exclusive or <code class=\"hljs\">..=</code> for end-inclusive, followed by its upper bound.\nThe type of the range pattern is the type unification of its upper and lower bounds.</p>\n<p>For example, a pattern <code class=\"hljs\">'m'..='p'</code> will match only the values <code class=\"hljs\">'m'</code>, <code class=\"hljs\">'n'</code>, <code class=\"hljs\">'o'</code>, and <code class=\"hljs\">'p'</code>.\nSimilarly, <code class=\"hljs\">'m'..'p'</code> will match only <code class=\"hljs\">'m'</code>, <code class=\"hljs\">'n'</code> and <code class=\"hljs\">'o'</code>, specifically <strong>not</strong> including <code class=\"hljs\">'p'</code>.</p>\n<p>The lower bound cannot be greater than the upper bound.\nThat is, in <code class=\"hljs\">a..=b</code>, a ≤ b must be the case.\nFor example, it is an error to have a range pattern <code class=\"hljs\">10..=0</code>.</p>\n<p>A range pattern with only a lower bound will match any value greater than or equal to the lower bound.\nIt is written as its lower bound followed by <code class=\"hljs\">..</code>, and has the same type as its lower bound.\nFor example, <code class=\"hljs\">1..</code> will match 1, 9, or 9001, or 9007199254740991 (if it is of an appropriate size), but not 0, and not negative numbers for signed integers.</p>\n<p>A range pattern with only an upper bound matches any value less than or equal to the upper bound.\nIt is written as <code class=\"hljs\">..=</code> followed by its upper bound, and has the same type as its upper bound.\nFor example, <code class=\"hljs\">..=10</code> will match 10, 1, 0, and for signed integer types, all negative values.</p>\n<p>Range patterns with only one bound cannot be used as the top-level pattern for subpatterns in <a href=\"patterns.html#slice-patterns\">slice patterns</a>.</p>\n<p>The bounds is written as one of:</p>\n<ul>\n<li>A character, byte, integer, or float literal.</li>\n<li>A <code class=\"hljs\">-</code> followed by an integer or float literal.</li>\n<li>A <a href=\"expressions/path-expr.html\">path</a></li>\n</ul>\n<p>If the bounds is written as a path, after macro resolution, the path must resolve to a constant item of the type <code class=\"hljs\">char</code>, an integer type, or a float type.</p>\n<p>The type and value of the bounds is dependent upon how it is written out.\nIf the bounds is a <a href=\"expressions/path-expr.html\">path</a>, the pattern has the type and value of the <a href=\"items/constant-items.html\">constant</a> the path resolves to.\nFor float range patterns, the constant may not be a <code class=\"hljs\">NaN</code>.\nIf it is a literal, it has the type and value of the corresponding <a href=\"expressions/literal-expr.html\">literal expression</a>.\nIf is a literal preceded by a <code class=\"hljs\">-</code>, it has the same type as the corresponding <a href=\"expressions/literal-expr.html\">literal expression</a> and the value of <a href=\"expressions/operator-expr.html#negation-operators\">negating</a> the value of the corresponding literal expression.</p>\n<p>Examples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> c = <span class=\"hljs-string\">'f'</span>;\n</span><span class=\"hljs-keyword\">let</span> valid_variable = <span class=\"hljs-keyword\">match</span> c {\n    <span class=\"hljs-string\">'a'</span>..=<span class=\"hljs-string\">'z'</span> =&gt; <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">'A'</span>..=<span class=\"hljs-string\">'Z'</span> =&gt; <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">'α'</span>..=<span class=\"hljs-string\">'ω'</span> =&gt; <span class=\"hljs-literal\">true</span>,\n    _ =&gt; <span class=\"hljs-literal\">false</span>,\n};\n\n<span class=\"boring\"><span class=\"hljs-keyword\">let</span> ph = <span class=\"hljs-number\">10</span>;\n</span><span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, <span class=\"hljs-keyword\">match</span> ph {\n    <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">7</span> =&gt; <span class=\"hljs-string\">\"acid\"</span>,\n    <span class=\"hljs-number\">7</span> =&gt; <span class=\"hljs-string\">\"neutral\"</span>,\n    <span class=\"hljs-number\">8</span>..=<span class=\"hljs-number\">14</span> =&gt; <span class=\"hljs-string\">\"base\"</span>,\n    _ =&gt; <span class=\"hljs-built_in\">unreachable!</span>(),\n});\n\n<span class=\"boring\"><span class=\"hljs-keyword\">let</span> uint: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-number\">5</span>;\n</span><span class=\"hljs-keyword\">match</span> uint {\n    <span class=\"hljs-number\">0</span> =&gt; <span class=\"hljs-string\">\"zero!\"</span>,\n    <span class=\"hljs-number\">1</span>.. =&gt; <span class=\"hljs-string\">\"positive number!\"</span>,\n};\n\n<span class=\"hljs-comment\">// using paths to constants:</span>\n<span class=\"boring\"><span class=\"hljs-keyword\">const</span> TROPOSPHERE_MIN : <span class=\"hljs-built_in\">u8</span> = <span class=\"hljs-number\">6</span>;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">const</span> TROPOSPHERE_MAX : <span class=\"hljs-built_in\">u8</span> = <span class=\"hljs-number\">20</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">const</span> STRATOSPHERE_MIN : <span class=\"hljs-built_in\">u8</span> = TROPOSPHERE_MAX + <span class=\"hljs-number\">1</span>;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">const</span> STRATOSPHERE_MAX : <span class=\"hljs-built_in\">u8</span> = <span class=\"hljs-number\">50</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">const</span> MESOSPHERE_MIN : <span class=\"hljs-built_in\">u8</span> = STRATOSPHERE_MAX + <span class=\"hljs-number\">1</span>;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">const</span> MESOSPHERE_MAX : <span class=\"hljs-built_in\">u8</span> = <span class=\"hljs-number\">85</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> altitude = <span class=\"hljs-number\">70</span>;\n</span><span class=\"boring\">\n</span><span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, <span class=\"hljs-keyword\">match</span> altitude {\n    TROPOSPHERE_MIN..=TROPOSPHERE_MAX =&gt; <span class=\"hljs-string\">\"troposphere\"</span>,\n    STRATOSPHERE_MIN..=STRATOSPHERE_MAX =&gt; <span class=\"hljs-string\">\"stratosphere\"</span>,\n    MESOSPHERE_MIN..=MESOSPHERE_MAX =&gt; <span class=\"hljs-string\">\"mesosphere\"</span>,\n    _ =&gt; <span class=\"hljs-string\">\"outer space, maybe\"</span>,\n});\n\n<span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> binary {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">const</span> MEGA : <span class=\"hljs-built_in\">u64</span> = <span class=\"hljs-number\">1024</span>*<span class=\"hljs-number\">1024</span>;\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">const</span> GIGA : <span class=\"hljs-built_in\">u64</span> = <span class=\"hljs-number\">1024</span>*<span class=\"hljs-number\">1024</span>*<span class=\"hljs-number\">1024</span>;\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> n_items = <span class=\"hljs-number\">20_832_425</span>;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> bytes_per_item = <span class=\"hljs-number\">12</span>;\n</span><span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> size @ binary::MEGA..=binary::GIGA = n_items * bytes_per_item {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"It fits and occupies {} bytes\"</span>, size);\n}\n\n<span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">MaxValue</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">const</span> MAX: <span class=\"hljs-built_in\">u64</span>;\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> MaxValue <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">u8</span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">const</span> MAX: <span class=\"hljs-built_in\">u64</span> = (<span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">8</span>) - <span class=\"hljs-number\">1</span>;\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> MaxValue <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">u16</span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">const</span> MAX: <span class=\"hljs-built_in\">u64</span> = (<span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">16</span>) - <span class=\"hljs-number\">1</span>;\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> MaxValue <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">u32</span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">const</span> MAX: <span class=\"hljs-built_in\">u64</span> = (<span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">32</span>) - <span class=\"hljs-number\">1</span>;\n</span><span class=\"boring\">}\n</span><span class=\"hljs-comment\">// using qualified paths:</span>\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, <span class=\"hljs-keyword\">match</span> <span class=\"hljs-number\">0xfacade</span> {\n    <span class=\"hljs-number\">0</span> ..= &lt;<span class=\"hljs-built_in\">u8</span> <span class=\"hljs-keyword\">as</span> MaxValue&gt;::MAX =&gt; <span class=\"hljs-string\">\"fits in a u8\"</span>,\n    <span class=\"hljs-number\">0</span> ..= &lt;<span class=\"hljs-built_in\">u16</span> <span class=\"hljs-keyword\">as</span> MaxValue&gt;::MAX =&gt; <span class=\"hljs-string\">\"fits in a u16\"</span>,\n    <span class=\"hljs-number\">0</span> ..= &lt;<span class=\"hljs-built_in\">u32</span> <span class=\"hljs-keyword\">as</span> MaxValue&gt;::MAX =&gt; <span class=\"hljs-string\">\"fits in a u32\"</span>,\n    _ =&gt; <span class=\"hljs-string\">\"too big\"</span>,\n});\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Range patterns for fix-width integer and <code class=\"hljs\">char</code> types are irrefutable when they span the entire set of possible values of a type.\nFor example, <code class=\"hljs\">0u8..=255u8</code> is irrefutable.\nThe range of values for an integer type is the closed range from its minimum to maximum value.\nThe range of values for a <code class=\"hljs\">char</code> type are precisely those ranges containing all Unicode Scalar Values: <code class=\"hljs\">'\\u{0000}'..='\\u{D7FF}'</code> and <code class=\"hljs\">'\\u{E000}'..='\\u{10FFFF}'</code>.</p>\n<blockquote>\n<p><strong>Edition Differences</strong>: Before the 2021 edition, range patterns with both a lower and upper bound may also be written using <code class=\"hljs\">...</code> in place of <code class=\"hljs\">..=</code>, with the same meaning.</p>\n</blockquote>\n<h2 id=\"reference-patterns\"><a class=\"header\" href=\"#reference-patterns\">Reference patterns</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ReferencePattern</em> :<br>\n&nbsp;&nbsp; (<code class=\"hljs\">&amp;</code>|<code class=\"hljs\">&amp;&amp;</code>) <code class=\"hljs\">mut</code><sup>?</sup> <a href=\"patterns.html#patterns\"><em>PatternWithoutRange</em></a></p>\n</blockquote>\n<p>Reference patterns dereference the pointers that are being matched and, thus, borrow them.</p>\n<p>For example, these two matches on <code class=\"hljs\">x: &amp;i32</code> are equivalent:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> int_reference = &amp;<span class=\"hljs-number\">3</span>;\n\n<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-keyword\">match</span> *int_reference { <span class=\"hljs-number\">0</span> =&gt; <span class=\"hljs-string\">\"zero\"</span>, _ =&gt; <span class=\"hljs-string\">\"some\"</span> };\n<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-keyword\">match</span> int_reference { &amp;<span class=\"hljs-number\">0</span> =&gt; <span class=\"hljs-string\">\"zero\"</span>, _ =&gt; <span class=\"hljs-string\">\"some\"</span> };\n\n<span class=\"hljs-built_in\">assert_eq!</span>(a, b);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The grammar production for reference patterns has to match the token <code class=\"hljs\">&amp;&amp;</code> to match a reference to a reference because it is a token by itself, not two <code class=\"hljs\">&amp;</code> tokens.</p>\n<p>Adding the <code class=\"hljs\">mut</code> keyword dereferences a mutable reference. The mutability must match the mutability of the reference.</p>\n<p>Reference patterns are always irrefutable.</p>\n<h2 id=\"struct-patterns\"><a class=\"header\" href=\"#struct-patterns\">Struct patterns</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>StructPattern</em> :<br>\n&nbsp;&nbsp; <a href=\"paths.html#paths-in-expressions\"><em>PathInExpression</em></a> <code class=\"hljs\">{</code><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>StructPatternElements</em> <sup>?</sup><br>\n&nbsp;&nbsp; <code class=\"hljs\">}</code></p>\n<p><em>StructPatternElements</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>StructPatternFields</em> (<code class=\"hljs\">,</code> | <code class=\"hljs\">,</code> <em>StructPatternEtCetera</em>)<sup>?</sup><br>\n&nbsp;&nbsp; | <em>StructPatternEtCetera</em></p>\n<p><em>StructPatternFields</em> :<br>\n&nbsp;&nbsp; <em>StructPatternField</em> (<code class=\"hljs\">,</code> <em>StructPatternField</em>) <sup>*</sup></p>\n<p><em>StructPatternField</em> :<br>\n&nbsp;&nbsp; <a href=\"attributes.html\"><em>OuterAttribute</em></a> <sup>*</sup><br>\n&nbsp;&nbsp; (<br>\n&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <a href=\"tokens.html#tuple-index\">TUPLE_INDEX</a> <code class=\"hljs\">:</code> <a href=\"patterns.html#patterns\"><em>Pattern</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"identifiers.html\">IDENTIFIER</a> <code class=\"hljs\">:</code> <a href=\"patterns.html#patterns\"><em>Pattern</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <code class=\"hljs\">ref</code><sup>?</sup> <code class=\"hljs\">mut</code><sup>?</sup> <a href=\"identifiers.html\">IDENTIFIER</a><br>\n&nbsp;&nbsp; )</p>\n<p><em>StructPatternEtCetera</em> :<br>\n&nbsp;&nbsp; <a href=\"attributes.html\"><em>OuterAttribute</em></a> <sup>*</sup><br>\n&nbsp;&nbsp; <code class=\"hljs\">..</code></p>\n</blockquote>\n<p>Struct patterns match struct, enum, and union values that match all criteria defined by its subpatterns.\nThey are also used to <a href=\"patterns.html#destructuring\">destructure</a> a struct, enum, or union value.</p>\n<p>On a struct pattern, the fields are referenced by name, index (in the case of tuple structs) or ignored by use of <code class=\"hljs\">..</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span> {\n</span><span class=\"boring\">    x: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">    y: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> s = Point {x: <span class=\"hljs-number\">1</span>, y: <span class=\"hljs-number\">1</span>};\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">match</span> s {\n    Point {x: <span class=\"hljs-number\">10</span>, y: <span class=\"hljs-number\">20</span>} =&gt; (),\n    Point {y: <span class=\"hljs-number\">10</span>, x: <span class=\"hljs-number\">20</span>} =&gt; (),    <span class=\"hljs-comment\">// order doesn't matter</span>\n    Point {x: <span class=\"hljs-number\">10</span>, ..} =&gt; (),\n    Point {..} =&gt; (),\n}\n\n<span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PointTuple</span></span> (\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">);\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> t = PointTuple(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">match</span> t {\n    PointTuple {<span class=\"hljs-number\">0</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">20</span>} =&gt; (),\n    PointTuple {<span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>: <span class=\"hljs-number\">20</span>} =&gt; (),   <span class=\"hljs-comment\">// order doesn't matter</span>\n    PointTuple {<span class=\"hljs-number\">0</span>: <span class=\"hljs-number\">10</span>, ..} =&gt; (),\n    PointTuple {..} =&gt; (),\n}\n\n<span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Message</span></span> {\n</span><span class=\"boring\">    Quit,\n</span><span class=\"boring\">    Move { x: <span class=\"hljs-built_in\">i32</span>, y: <span class=\"hljs-built_in\">i32</span> },\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> m = Message::Quit;\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">match</span> m {\n    Message::Quit =&gt; (),\n    Message::Move {x: <span class=\"hljs-number\">10</span>, y: <span class=\"hljs-number\">20</span>} =&gt; (),\n    Message::Move {..} =&gt; (),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If <code class=\"hljs\">..</code> is not used, a struct pattern used to match a struct is required to specify all fields:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span> {\n</span><span class=\"boring\">   a: <span class=\"hljs-built_in\">i32</span>,\n</span><span class=\"boring\">   b: <span class=\"hljs-built_in\">char</span>,\n</span><span class=\"boring\">   c: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> struct_value = Struct{a: <span class=\"hljs-number\">10</span>, b: <span class=\"hljs-string\">'X'</span>, c: <span class=\"hljs-literal\">false</span>};\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">match</span> struct_value {\n    Struct{a: <span class=\"hljs-number\">10</span>, b: <span class=\"hljs-string\">'X'</span>, c: <span class=\"hljs-literal\">false</span>} =&gt; (),\n    Struct{a: <span class=\"hljs-number\">10</span>, b: <span class=\"hljs-string\">'X'</span>, <span class=\"hljs-keyword\">ref</span> c} =&gt; (),\n    Struct{a: <span class=\"hljs-number\">10</span>, b: <span class=\"hljs-string\">'X'</span>, <span class=\"hljs-keyword\">ref</span> <span class=\"hljs-keyword\">mut</span> c} =&gt; (),\n    Struct{a: <span class=\"hljs-number\">10</span>, b: <span class=\"hljs-string\">'X'</span>, c: _} =&gt; (),\n    Struct{a: _, b: _, c: _} =&gt; (),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A struct pattern used to match a union must specify exactly one field (see <a href=\"items/unions.html#pattern-matching-on-unions\">Pattern matching on unions</a>).</p>\n<p>The <code class=\"hljs\">ref</code> and/or <code class=\"hljs\">mut</code> <em>IDENTIFIER</em> syntax matches any value and binds it to a variable with the same name as the given field.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span> {\n</span><span class=\"boring\">   a: <span class=\"hljs-built_in\">i32</span>,\n</span><span class=\"boring\">   b: <span class=\"hljs-built_in\">char</span>,\n</span><span class=\"boring\">   c: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> struct_value = Struct{a: <span class=\"hljs-number\">10</span>, b: <span class=\"hljs-string\">'X'</span>, c: <span class=\"hljs-literal\">false</span>};\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">let</span> Struct{a: x, b: y, c: z} = struct_value;          <span class=\"hljs-comment\">// destructure all fields</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A struct pattern is refutable if the <em>PathInExpression</em> resolves to a constructor of an enum with more than one variant, or one of its subpatterns is refutable.</p>\n<h2 id=\"tuple-struct-patterns\"><a class=\"header\" href=\"#tuple-struct-patterns\">Tuple struct patterns</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>TupleStructPattern</em> :<br>\n&nbsp;&nbsp; <a href=\"paths.html#paths-in-expressions\"><em>PathInExpression</em></a> <code class=\"hljs\">(</code> <em>TupleStructItems</em><sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>TupleStructItems</em> :<br>\n&nbsp;&nbsp; <a href=\"patterns.html#patterns\"><em>Pattern</em></a>&nbsp;( <code class=\"hljs\">,</code> <a href=\"patterns.html#patterns\"><em>Pattern</em></a> )<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n</blockquote>\n<p>Tuple struct patterns match tuple struct and enum values that match all criteria defined by its subpatterns.\nThey are also used to <a href=\"patterns.html#destructuring\">destructure</a> a tuple struct or enum value.</p>\n<p>A tuple struct pattern is refutable if the <em>PathInExpression</em> resolves to a constructor of an enum with more than one variant, or one of its subpatterns is refutable.</p>\n<h2 id=\"tuple-patterns\"><a class=\"header\" href=\"#tuple-patterns\">Tuple patterns</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>TuplePattern</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">(</code> <em>TuplePatternItems</em><sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>TuplePatternItems</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"patterns.html#patterns\"><em>Pattern</em></a> <code class=\"hljs\">,</code><br>\n&nbsp;&nbsp; | <a href=\"patterns.html#rest-patterns\"><em>RestPattern</em></a><br>\n&nbsp;&nbsp; | <a href=\"patterns.html#patterns\"><em>Pattern</em></a>&nbsp;(<code class=\"hljs\">,</code> <a href=\"patterns.html#patterns\"><em>Pattern</em></a>)<sup>+</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n</blockquote>\n<p>Tuple patterns match tuple values that match all criteria defined by its subpatterns.\nThey are also used to <a href=\"patterns.html#destructuring\">destructure</a> a tuple.</p>\n<p>The form <code class=\"hljs\">(..)</code> with a single <a href=\"patterns.html#rest-patterns\"><em>RestPattern</em></a> is a special form that does not require a comma, and matches a tuple of any size.</p>\n<p>The tuple pattern is refutable when one of its subpatterns is refutable.</p>\n<p>An example of using tuple patterns:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> pair = (<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"ten\"</span>);\n<span class=\"hljs-keyword\">let</span> (a, b) = pair;\n\n<span class=\"hljs-built_in\">assert_eq!</span>(a, <span class=\"hljs-number\">10</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(b, <span class=\"hljs-string\">\"ten\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"grouped-patterns\"><a class=\"header\" href=\"#grouped-patterns\">Grouped patterns</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>GroupedPattern</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">(</code> <a href=\"patterns.html#patterns\"><em>Pattern</em></a> <code class=\"hljs\">)</code></p>\n</blockquote>\n<p>Enclosing a pattern in parentheses can be used to explicitly control the precedence of compound patterns.\nFor example, a reference pattern next to a range pattern such as <code class=\"hljs\">&amp;0..=5</code> is ambiguous and is not allowed, but can be expressed with parentheses.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> int_reference = &amp;<span class=\"hljs-number\">3</span>;\n<span class=\"hljs-keyword\">match</span> int_reference {\n    &amp;(<span class=\"hljs-number\">0</span>..=<span class=\"hljs-number\">5</span>) =&gt; (),\n    _ =&gt; (),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"slice-patterns\"><a class=\"header\" href=\"#slice-patterns\">Slice patterns</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>SlicePattern</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">[</code> <em>SlicePatternItems</em><sup>?</sup> <code class=\"hljs\">]</code></p>\n<p><em>SlicePatternItems</em> :<br>\n&nbsp;&nbsp; <a href=\"patterns.html#patterns\"><em>Pattern</em></a> (<code class=\"hljs\">,</code> <a href=\"patterns.html#patterns\"><em>Pattern</em></a>)<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n</blockquote>\n<p>Slice patterns can match both arrays of fixed size and slices of dynamic size.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Fixed size</span>\n<span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">match</span> arr {\n    [<span class=\"hljs-number\">1</span>, _, _] =&gt; <span class=\"hljs-string\">\"starts with one\"</span>,\n    [a, b, c] =&gt; <span class=\"hljs-string\">\"starts with something else\"</span>,\n};\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Dynamic size</span>\n<span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">match</span> v[..] {\n    [a, b] =&gt; { <span class=\"hljs-comment\">/* this arm will not apply because the length doesn't match */</span> }\n    [a, b, c] =&gt; { <span class=\"hljs-comment\">/* this arm will apply */</span> }\n    _ =&gt; { <span class=\"hljs-comment\">/* this wildcard is required, since the length is not known statically */</span> }\n};\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Slice patterns are irrefutable when matching an array as long as each element is irrefutable.\nWhen matching a slice, it is irrefutable only in the form with a single <code class=\"hljs\">..</code> <a href=\"patterns.html#rest-patterns\">rest pattern</a> or <a href=\"patterns.html#identifier-patterns\">identifier pattern</a> with the <code class=\"hljs\">..</code> rest pattern as a subpattern.</p>\n<p>Within a slice, a range pattern without both lower and upper bound must be enclosed in parentheses, as in <code class=\"hljs\">(a..)</code>, to clarify it is intended to match against a single slice element.\nA range pattern with both lower and upper bound, like <code class=\"hljs\">a..=b</code>, is not required to be enclosed in parentheses.</p>\n<h2 id=\"path-patterns\"><a class=\"header\" href=\"#path-patterns\">Path patterns</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>PathPattern</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/path-expr.html\"><em>PathExpression</em></a></p>\n</blockquote>\n<p><em>Path patterns</em> are patterns that refer either to constant values or\nto structs or enum variants that have no fields.</p>\n<p>Unqualified path patterns can refer to:</p>\n<ul>\n<li>enum variants</li>\n<li>structs</li>\n<li>constants</li>\n<li>associated constants</li>\n</ul>\n<p>Qualified path patterns can only refer to associated constants.</p>\n<p>Path patterns are irrefutable when they refer to structs or an enum variant when the enum has only one variant or a constant whose type is irrefutable.\nThey are refutable when they refer to refutable constants or enum variants for enums with multiple variants.</p>\n<h3 id=\"constant-patterns\"><a class=\"header\" href=\"#constant-patterns\">Constant patterns</a></h3>\n<p>When a constant <code class=\"hljs\">C</code> of type <code class=\"hljs\">T</code> is used as a pattern, we first check that <code class=\"hljs\">T: PartialEq</code>.\nFurthermore we require that the value of <code class=\"hljs\">C</code> <em>has (recursive) structural equality</em>, which is defined recursively as follows:</p>\n<ul>\n<li>Integers as well as <code class=\"hljs\">str</code>, <code class=\"hljs\">bool</code> and <code class=\"hljs\">char</code> values always have structural equality.</li>\n<li>Tuples, arrays, and slices have structural equality if all their fields/elements have structural equality.\n(In particular, <code class=\"hljs\">()</code> and <code class=\"hljs\">[]</code> always have structural equality.)</li>\n<li>References have structural equality if the value they point to has structural equality.</li>\n<li>A value of <code class=\"hljs\">struct</code> or <code class=\"hljs\">enum</code> type has structural equality if its <code class=\"hljs\">PartialEq</code> instance is derived via <code class=\"hljs\">#[derive(PartialEq)]</code>,\nand all fields (for enums: of the active variant) have structural equality.</li>\n<li>A raw pointer has structural equality if it was defined as a constant integer (and then cast/transmuted).</li>\n<li>A float value has structural equality if it is not a <code class=\"hljs\">NaN</code>.</li>\n<li>Nothing else has structural equality.</li>\n</ul>\n<p>In particular, the value of <code class=\"hljs\">C</code> must be known at pattern-building time (which is pre-monomorphization).\nThis means that associated consts that involve generic parameters cannot be used as patterns.</p>\n<p>After ensuring all conditions are met, the constant value is translated into a pattern, and now behaves exactly as-if that pattern had been written directly.\nIn particular, it fully participates in exhaustiveness checking.\n(For raw pointers, constants are the only way to write such patterns. Only <code class=\"hljs\">_</code> is ever considered exhaustive for these types.)</p>\n<h2 id=\"or-patterns\"><a class=\"header\" href=\"#or-patterns\">Or-patterns</a></h2>\n<p><em>Or-patterns</em> are patterns that match on one of two or more sub-patterns (for example <code class=\"hljs\">A | B | C</code>).\nThey can nest arbitrarily.\nSyntactically, or-patterns are allowed in any of the places where other patterns are allowed (represented by the <em>Pattern</em> production), with the exceptions of <code class=\"hljs\">let</code>-bindings and function and closure arguments (represented by the <em>PatternNoTopAlt</em> production).</p>\n<h3 id=\"static-semantics\"><a class=\"header\" href=\"#static-semantics\">Static semantics</a></h3>\n<ol>\n<li>\n<p>Given a pattern <code class=\"hljs\">p | q</code> at some depth for some arbitrary patterns <code class=\"hljs\">p</code> and <code class=\"hljs\">q</code>, the pattern is considered ill-formed if:</p>\n<ul>\n<li>the type inferred for <code class=\"hljs\">p</code> does not unify with the type inferred for <code class=\"hljs\">q</code>, or</li>\n<li>the same set of bindings are not introduced in <code class=\"hljs\">p</code> and <code class=\"hljs\">q</code>, or</li>\n<li>the type of any two bindings with the same name in <code class=\"hljs\">p</code> and <code class=\"hljs\">q</code> do not unify with respect to types or binding modes.</li>\n</ul>\n<p>Unification of types is in all instances aforementioned exact and implicit <a href=\"type-coercions.html\">type coercions</a> do not apply.</p>\n</li>\n<li>\n<p>When type checking an expression <code class=\"hljs\">match e_s { a_1 =&gt; e_1, ... a_n =&gt; e_n }</code>,\nfor each match arm <code class=\"hljs\">a_i</code> which contains a pattern of form <code class=\"hljs\">p_i | q_i</code>,\nthe pattern <code class=\"hljs\">p_i | q_i</code> is considered ill formed if,\nat the depth <code class=\"hljs\">d</code> where it exists the fragment of <code class=\"hljs\">e_s</code> at depth <code class=\"hljs\">d</code>,\nthe type of the expression fragment does not unify with <code class=\"hljs\">p_i | q_i</code>.</p>\n</li>\n<li>\n<p>With respect to exhaustiveness checking, a pattern <code class=\"hljs\">p | q</code> is considered to cover <code class=\"hljs\">p</code> as well as <code class=\"hljs\">q</code>.\nFor some constructor <code class=\"hljs\">c(x, ..)</code> the distributive law applies such that <code class=\"hljs\">c(p | q, ..rest)</code> covers the same set of value as <code class=\"hljs\">c(p, ..rest) | c(q, ..rest)</code> does.\nThis can be applied recursively until there are no more nested patterns of form <code class=\"hljs\">p | q</code> other than those that exist at the top level.</p>\n<p>Note that by <em>\"constructor\"</em> we do not refer to tuple struct patterns, but rather we refer to a pattern for any product type.\nThis includes enum variants, tuple structs, structs with named fields, arrays, tuples, and slices.</p>\n</li>\n</ol>\n<h3 id=\"dynamic-semantics\"><a class=\"header\" href=\"#dynamic-semantics\">Dynamic semantics</a></h3>\n<ol>\n<li>The dynamic semantics of pattern matching a scrutinee expression <code class=\"hljs\">e_s</code> against a pattern <code class=\"hljs\">c(p | q, ..rest)</code> at depth <code class=\"hljs\">d</code> where <code class=\"hljs\">c</code> is some constructor,\n<code class=\"hljs\">p</code> and <code class=\"hljs\">q</code> are arbitrary patterns,\nand <code class=\"hljs\">rest</code> is optionally any remaining potential factors in <code class=\"hljs\">c</code>,\nis defined as being the same as that of <code class=\"hljs\">c(p, ..rest) | c(q, ..rest)</code>.</li>\n</ol>\n<h3 id=\"precedence-with-other-undelimited-patterns\"><a class=\"header\" href=\"#precedence-with-other-undelimited-patterns\">Precedence with other undelimited patterns</a></h3>\n<p>As shown elsewhere in this chapter, there are several types of patterns that are syntactically undelimited, including identifier patterns, reference patterns, and or-patterns.\nOr-patterns always have the lowest-precedence.\nThis allows us to reserve syntactic space for a possible future type ascription feature and also to reduce ambiguity.\nFor example, <code class=\"hljs\">x @ A(..) | B(..)</code> will result in an error that <code class=\"hljs\">x</code> is not bound in all patterns.\n<code class=\"hljs\">&amp;A(x) | B(x)</code> will result in a type mismatch between <code class=\"hljs\">x</code> in the different subpatterns.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"type-system\"><a class=\"header\" href=\"#type-system\">Type system</a></h1>\n<div style=\"break-before: page; page-break-before: always;\"></div><script>\n(function() {\n    var fragments = {\n        \"#boolean-type\": \"types/boolean.html\",\n        \"#numeric-types\": \"types/numeric.html\",\n        \"#machine-types\": \"types/numeric.html\",\n        \"#machine-dependent-integer-types\": \"types/numeric.html#machine-dependent-integer-types\",\n        \"#textual-types\": \"types/textual.html\",\n        \"#never-type\": \"types/never.html\",\n        \"#tuple-types\": \"types/tuple.html\",\n        \"#array-and-slice-types\": \"types/array.html\",\n        \"#struct-types\": \"types/struct.html\",\n        \"#enumerated-types\": \"types/enum.html\",\n        \"#union-types\": \"types/union.html\",\n        \"#pointer-types\": \"types/pointer.html\",\n        \"#shared-references-\": \"types/pointer.html#shared-references-\",\n        \"#mutable-references-\": \"types/pointer.html#mutable-references-mut\",\n        \"#raw-pointers-const-and-mut\": \"types/pointer.html#raw-pointers-const-and-mut\",\n        \"#smart-pointers\": \"types/pointer.html#smart-pointers\",\n        \"#function-item-types\": \"types/function-item.html\",\n        \"#function-pointer-types\": \"types/function-pointer.html\",\n        \"#closure-types\": \"types/closure.html\",\n        \"#capture-modes\": \"types/closure.html#capture-modes\",\n        \"#unique-immutable-borrows-in-captures\": \"types/closure.html#unique-immutable-borrows-in-captures\",\n        \"#call-traits-and-coercions\": \"types/closure.html#call-traits-and-coercions\",\n        \"#other-traits\": \"types/closure.html#other-traits\",\n        \"#trait-objects\": \"types/trait-object.html\",\n        \"#trait-object-lifetime-bounds\": \"types/trait-object.html#trait-object-lifetime-bounds\",\n        \"#impl-trait\": \"types/impl-trait.html\",\n        \"#anonymous-type-parameters\": \"types/impl-trait.html#anonymous-type-parameters\",\n        \"#abstract-return-types\": \"types/impl-trait.html#abstract-return-types\",\n        \"#self-types\": \"paths.html#self-1\",\n        \"#inferred-type\": \"types/inferred.html\",\n        \"#type-parameters\": \"types/parameters.html\",\n    };\n    var target = fragments[window.location.hash];\n    if (target) {\n        var url = window.location.toString();\n        var base = url.substring(0, url.lastIndexOf('/'));\n        window.location.replace(base + \"/\" + target);\n    }\n})();\n</script>\n<h1 id=\"types\"><a class=\"header\" href=\"#types\">Types</a></h1>\n<p>Every variable, item, and value in a Rust program has a type. The <em>type</em> of a\n<em>value</em> defines the interpretation of the memory holding it and the operations\nthat may be performed on the value.</p>\n<p>Built-in types are tightly integrated into the language, in nontrivial ways\nthat are not possible to emulate in user-defined types. User-defined types have\nlimited capabilities.</p>\n<p>The list of types is:</p>\n<ul>\n<li>Primitive types:\n<ul>\n<li><a href=\"types/boolean.html\">Boolean</a> — <code class=\"hljs\">bool</code></li>\n<li><a href=\"types/numeric.html\">Numeric</a> — integer and float</li>\n<li><a href=\"types/textual.html\">Textual</a> — <code class=\"hljs\">char</code> and <code class=\"hljs\">str</code></li>\n<li><a href=\"types/never.html\">Never</a> — <code class=\"hljs\">!</code> — a type with no values</li>\n</ul>\n</li>\n<li>Sequence types:\n<ul>\n<li><a href=\"types/tuple.html\">Tuple</a></li>\n<li><a href=\"types/array.html\">Array</a></li>\n<li><a href=\"types/slice.html\">Slice</a></li>\n</ul>\n</li>\n<li>User-defined types:\n<ul>\n<li><a href=\"types/struct.html\">Struct</a></li>\n<li><a href=\"types/enum.html\">Enum</a></li>\n<li><a href=\"types/union.html\">Union</a></li>\n</ul>\n</li>\n<li>Function types:\n<ul>\n<li><a href=\"types/function-item.html\">Functions</a></li>\n<li><a href=\"types/closure.html\">Closures</a></li>\n</ul>\n</li>\n<li>Pointer types:\n<ul>\n<li><a href=\"types/pointer.html#shared-references-\">References</a></li>\n<li><a href=\"types/pointer.html#raw-pointers-const-and-mut\">Raw pointers</a></li>\n<li><a href=\"types/function-pointer.html\">Function pointers</a></li>\n</ul>\n</li>\n<li>Trait types:\n<ul>\n<li><a href=\"types/trait-object.html\">Trait objects</a></li>\n<li><a href=\"types/impl-trait.html\">Impl trait</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"type-expressions\"><a class=\"header\" href=\"#type-expressions\">Type expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>Type</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>TypeNoBounds</em><br>\n&nbsp;&nbsp; | <a href=\"types/impl-trait.html\"><em>ImplTraitType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/trait-object.html\"><em>TraitObjectType</em></a></p>\n<p><em>TypeNoBounds</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"types.html#parenthesized-types\"><em>ParenthesizedType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/impl-trait.html\"><em>ImplTraitTypeOneBound</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/trait-object.html\"><em>TraitObjectTypeOneBound</em></a><br>\n&nbsp;&nbsp; | <a href=\"paths.html#paths-in-types\"><em>TypePath</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/tuple.html#tuple-types\"><em>TupleType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/never.html\"><em>NeverType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/pointer.html#raw-pointers-const-and-mut\"><em>RawPointerType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/pointer.html#shared-references-\"><em>ReferenceType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/array.html\"><em>ArrayType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/slice.html\"><em>SliceType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/inferred.html\"><em>InferredType</em></a><br>\n&nbsp;&nbsp; | <a href=\"paths.html#qualified-paths\"><em>QualifiedPathInType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/function-pointer.html\"><em>BareFunctionType</em></a><br>\n&nbsp;&nbsp; | <a href=\"macros.html#macro-invocation\"><em>MacroInvocation</em></a></p>\n</blockquote>\n<p>A <em>type expression</em> as defined in the <em>Type</em> grammar rule above is the syntax\nfor referring to a type. It may refer to:</p>\n<ul>\n<li>Sequence types (<a href=\"types/tuple.html\">tuple</a>, <a href=\"types/array.html\">array</a>, <a href=\"types/slice.html\">slice</a>).</li>\n<li><a href=\"paths.html#paths-in-types\">Type paths</a> which can reference:\n<ul>\n<li>Primitive types (<a href=\"types/boolean.html\">boolean</a>, <a href=\"types/numeric.html\">numeric</a>, <a href=\"types/textual.html\">textual</a>).</li>\n<li>Paths to an <a href=\"items.html\">item</a> (<a href=\"types/struct.html\">struct</a>, <a href=\"types/enum.html\">enum</a>, <a href=\"types/union.html\">union</a>, <a href=\"items/type-aliases.html\">type alias</a>, <a href=\"types/trait-object.html\">trait</a>).</li>\n<li><a href=\"paths.html#self-1\"><code class=\"hljs\">Self</code> path</a> where <code class=\"hljs\">Self</code> is the implementing type.</li>\n<li>Generic <a href=\"types/parameters.html\">type parameters</a>.</li>\n</ul>\n</li>\n<li>Pointer types (<a href=\"types/pointer.html#shared-references-\">reference</a>, <a href=\"types/pointer.html#raw-pointers-const-and-mut\">raw pointer</a>, <a href=\"types/function-pointer.html\">function pointer</a>).</li>\n<li>The <a href=\"types/inferred.html\">inferred type</a> which asks the compiler to determine the type.</li>\n<li><a href=\"types.html#parenthesized-types\">Parentheses</a> which are used for disambiguation.</li>\n<li>Trait types: <a href=\"types/trait-object.html\">Trait objects</a> and <a href=\"types/impl-trait.html\">impl trait</a>.</li>\n<li>The <a href=\"types/never.html\">never</a> type.</li>\n<li><a href=\"macros.html\">Macros</a> which expand to a type expression.</li>\n</ul>\n<h3 id=\"parenthesized-types\"><a class=\"header\" href=\"#parenthesized-types\">Parenthesized types</a></h3>\n<blockquote>\n<p><em>ParenthesizedType</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">(</code> <a href=\"types.html#type-expressions\"><em>Type</em></a> <code class=\"hljs\">)</code></p>\n</blockquote>\n<p>In some situations the combination of types may be ambiguous. Use parentheses\naround a type to avoid ambiguity. For example, the <code class=\"hljs\">+</code> operator for <a href=\"trait-bounds.html\">type\nboundaries</a> within a <a href=\"types/pointer.html#shared-references-\">reference type</a> is unclear where the\nboundary applies, so the use of parentheses is required. Grammar rules that\nrequire this disambiguation use the <a href=\"types.html#type-expressions\"><em>TypeNoBounds</em></a> rule instead of\n<a href=\"types.html#type-expressions\"><em>Type</em></a>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::any::Any;\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">T</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; = &amp;<span class=\"hljs-symbol\">'a</span> (<span class=\"hljs-keyword\">dyn</span> Any + <span class=\"hljs-built_in\">Send</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"recursive-types\"><a class=\"header\" href=\"#recursive-types\">Recursive types</a></h2>\n<p>Nominal types — <a href=\"types/struct.html\">structs</a>, <a href=\"types/enum.html\">enumerations</a>, and <a href=\"types/union.html\">unions</a> — may be\nrecursive. That is, each <code class=\"hljs\">enum</code> variant or <code class=\"hljs\">struct</code> or <code class=\"hljs\">union</code> field may\nrefer, directly or indirectly, to the enclosing <code class=\"hljs\">enum</code> or <code class=\"hljs\">struct</code> type\nitself. Such recursion has restrictions:</p>\n<ul>\n<li>Recursive types must include a nominal type in the recursion (not mere <a href=\"items/type-aliases.html\">type\naliases</a>, or other structural types such as <a href=\"types/array.html\">arrays</a> or <a href=\"types/tuple.html\">tuples</a>). So <code class=\"hljs\">type Rec = &amp;'static [Rec]</code> is not allowed.</li>\n<li>The size of a recursive type must be finite; in other words the recursive\nfields of the type must be <a href=\"types/pointer.html\">pointer types</a>.</li>\n</ul>\n<p>An example of a <em>recursive</em> type and its use:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">List</span></span>&lt;T&gt; {\n    Nil,\n    Cons(T, <span class=\"hljs-built_in\">Box</span>&lt;List&lt;T&gt;&gt;)\n}\n\n<span class=\"hljs-keyword\">let</span> a: List&lt;<span class=\"hljs-built_in\">i32</span>&gt; = List::Cons(<span class=\"hljs-number\">7</span>, <span class=\"hljs-built_in\">Box</span>::new(List::Cons(<span class=\"hljs-number\">13</span>, <span class=\"hljs-built_in\">Box</span>::new(List::Nil))));\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"boolean-type\"><a class=\"header\" href=\"#boolean-type\">Boolean type</a></h1>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> b: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">true</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The <em>boolean type</em> or <em>bool</em> is a primitive data type that can take on one of\ntwo values, called <em>true</em> and <em>false</em>.</p>\n<p>Values of this type may be created using a <a href=\"types/../expressions/literal-expr.html\">literal expression</a> using the\nkeywords <code class=\"hljs\">true</code> and <code class=\"hljs\">false</code> corresponding to the value of the same name.</p>\n<p>This type is a part of the <a href=\"types/../names/preludes.html#language-prelude\">language prelude</a> with the <a href=\"types/../names.html\">name</a> <code class=\"hljs\">bool</code>.</p>\n<p>An object with the boolean type has a <a href=\"types/../type-layout.html#size-and-alignment\">size and alignment</a> of 1 each. The\nvalue false has the bit pattern <code class=\"hljs\">0x00</code> and the value true has the bit pattern\n<code class=\"hljs\">0x01</code>. It is <a href=\"types/../behavior-considered-undefined.html\">undefined behavior</a> for an object with the boolean type to have\nany other bit pattern.</p>\n<p>The boolean type is the type of many operands in various <a href=\"types/../expressions.html\">expressions</a>:</p>\n<ul>\n<li>The condition operand in <a href=\"types/../expressions/if-expr.html#if-expressions\">if expressions</a> and <a href=\"types/../expressions/loop-expr.html#predicate-loops\">while expressions</a></li>\n<li>The operands in <a href=\"types/../expressions/operator-expr.html#lazy-boolean-operators\">lazy boolean operator expressions</a></li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: The boolean type acts similarly to but is not an <a href=\"types/enum.html\">enumerated type</a>.\nIn practice, this mostly means that constructors are not associated to the type\n(e.g. <code class=\"hljs\">bool::true</code>).</p>\n</blockquote>\n<p>Like all primitives, the boolean type <a href=\"types/../items/implementations.html\">implements</a> the\n<a href=\"types/../items/traits.html\">traits</a> <a href=\"types/../special-types-and-traits.html#clone\"><code class=\"hljs\">Clone</code></a>, <a href=\"types/../special-types-and-traits.html#copy\"><code class=\"hljs\">Copy</code></a>, <a href=\"types/../special-types-and-traits.html#sized\"><code class=\"hljs\">Sized</code></a>,\n<a href=\"types/../special-types-and-traits.html#send\"><code class=\"hljs\">Send</code></a>, and <a href=\"types/../special-types-and-traits.html#sync\"><code class=\"hljs\">Sync</code></a>.</p>\n<blockquote>\n<p><strong>Note</strong>: See the <a href=\"types/../../std/primitive.bool.html\">standard library docs</a> for library operations.</p>\n</blockquote>\n<h2 id=\"operations-on-boolean-values\"><a class=\"header\" href=\"#operations-on-boolean-values\">Operations on boolean values</a></h2>\n<!-- This is washy wording --> When using certain operator expressions with a\n<p>boolean type for its operands, they evaluate using the rules of <a href=\"https://en.wikipedia.org/wiki/Boolean_algebra\">boolean logic</a>.</p>\n<h3 id=\"logical-not\"><a class=\"header\" href=\"#logical-not\">Logical not</a></h3>\n<div class=\"table-wrapper\"><table><thead><tr><th><code class=\"hljs\">b</code></th><th><a href=\"types/../expressions/operator-expr.html#negation-operators\"><code class=\"hljs\">!b</code></a></th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">false</code></td></tr>\n<tr><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">true</code></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"logical-or\"><a class=\"header\" href=\"#logical-or\">Logical or</a></h3>\n<div class=\"table-wrapper\"><table><thead><tr><th><code class=\"hljs\">a</code></th><th><code class=\"hljs\">b</code></th><th><a href=\"types/../expressions/operator-expr.html#arithmetic-and-logical-binary-operators\"><code class=\"hljs\">a | b</code></a></th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">true</code></td></tr>\n<tr><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">true</code></td></tr>\n<tr><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">true</code></td></tr>\n<tr><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">false</code></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"logical-and\"><a class=\"header\" href=\"#logical-and\">Logical and</a></h3>\n<div class=\"table-wrapper\"><table><thead><tr><th><code class=\"hljs\">a</code></th><th><code class=\"hljs\">b</code></th><th><a href=\"types/../expressions/operator-expr.html#arithmetic-and-logical-binary-operators\"><code class=\"hljs\">a &amp; b</code></a></th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">true</code></td></tr>\n<tr><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">false</code></td></tr>\n<tr><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">false</code></td></tr>\n<tr><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">false</code></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"logical-xor\"><a class=\"header\" href=\"#logical-xor\">Logical xor</a></h3>\n<div class=\"table-wrapper\"><table><thead><tr><th><code class=\"hljs\">a</code></th><th><code class=\"hljs\">b</code></th><th><a href=\"types/../expressions/operator-expr.html#arithmetic-and-logical-binary-operators\"><code class=\"hljs\">a ^ b</code></a></th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">false</code></td></tr>\n<tr><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">true</code></td></tr>\n<tr><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">true</code></td></tr>\n<tr><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">false</code></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"comparisons\"><a class=\"header\" href=\"#comparisons\">Comparisons</a></h3>\n<div class=\"table-wrapper\"><table><thead><tr><th><code class=\"hljs\">a</code></th><th><code class=\"hljs\">b</code></th><th><a href=\"types/../expressions/operator-expr.html#comparison-operators\"><code class=\"hljs\">a == b</code></a></th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">true</code></td></tr>\n<tr><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">false</code></td></tr>\n<tr><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">false</code></td></tr>\n<tr><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">true</code></td></tr>\n</tbody></table>\n</div><div class=\"table-wrapper\"><table><thead><tr><th><code class=\"hljs\">a</code></th><th><code class=\"hljs\">b</code></th><th><a href=\"types/../expressions/operator-expr.html#comparison-operators\"><code class=\"hljs\">a &gt; b</code></a></th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">false</code></td></tr>\n<tr><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">true</code></td></tr>\n<tr><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">true</code></td><td><code class=\"hljs\">false</code></td></tr>\n<tr><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">false</code></td><td><code class=\"hljs\">false</code></td></tr>\n</tbody></table>\n</div>\n<ul>\n<li><code class=\"hljs\">a != b</code> is the same as <code class=\"hljs\">!(a == b)</code></li>\n<li><code class=\"hljs\">a &gt;= b</code> is the same as <code class=\"hljs\">a == b | a &gt; b</code></li>\n<li><code class=\"hljs\">a &lt; b</code> is the same as <code class=\"hljs\">!(a &gt;= b)</code></li>\n<li><code class=\"hljs\">a &lt;= b</code> is the same as <code class=\"hljs\">a == b | a &lt; b</code></li>\n</ul>\n<h2 id=\"bit-validity\"><a class=\"header\" href=\"#bit-validity\">Bit validity</a></h2>\n<p>The single byte of a <code class=\"hljs\">bool</code> is guaranteed to be initialized (in other words,\n<code class=\"hljs\">transmute::&lt;bool, u8&gt;(...)</code> is always sound -- but since some bit patterns\nare invalid <code class=\"hljs\">bool</code>s, the inverse is not always sound).</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"numeric-types\"><a class=\"header\" href=\"#numeric-types\">Numeric types</a></h1>\n<h2 id=\"integer-types\"><a class=\"header\" href=\"#integer-types\">Integer types</a></h2>\n<p>The unsigned integer types consist of:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Type</th><th>Minimum</th><th>Maximum</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">u8</code></td><td>0</td><td>2<sup>8</sup>-1</td></tr>\n<tr><td><code class=\"hljs\">u16</code></td><td>0</td><td>2<sup>16</sup>-1</td></tr>\n<tr><td><code class=\"hljs\">u32</code></td><td>0</td><td>2<sup>32</sup>-1</td></tr>\n<tr><td><code class=\"hljs\">u64</code></td><td>0</td><td>2<sup>64</sup>-1</td></tr>\n<tr><td><code class=\"hljs\">u128</code></td><td>0</td><td>2<sup>128</sup>-1</td></tr>\n</tbody></table>\n</div>\n<p>The signed two's complement integer types consist of:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Type</th><th>Minimum</th><th>Maximum</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">i8</code></td><td>-(2<sup>7</sup>)</td><td>2<sup>7</sup>-1</td></tr>\n<tr><td><code class=\"hljs\">i16</code></td><td>-(2<sup>15</sup>)</td><td>2<sup>15</sup>-1</td></tr>\n<tr><td><code class=\"hljs\">i32</code></td><td>-(2<sup>31</sup>)</td><td>2<sup>31</sup>-1</td></tr>\n<tr><td><code class=\"hljs\">i64</code></td><td>-(2<sup>63</sup>)</td><td>2<sup>63</sup>-1</td></tr>\n<tr><td><code class=\"hljs\">i128</code></td><td>-(2<sup>127</sup>)</td><td>2<sup>127</sup>-1</td></tr>\n</tbody></table>\n</div>\n<h2 id=\"floating-point-types\"><a class=\"header\" href=\"#floating-point-types\">Floating-point types</a></h2>\n<p>The IEEE 754-2008 \"binary32\" and \"binary64\" floating-point types are <code class=\"hljs\">f32</code> and\n<code class=\"hljs\">f64</code>, respectively.</p>\n<h2 id=\"machine-dependent-integer-types\"><a class=\"header\" href=\"#machine-dependent-integer-types\">Machine-dependent integer types</a></h2>\n<p>The <code class=\"hljs\">usize</code> type is an unsigned integer type with the same number of bits as the\nplatform's pointer type. It can represent every memory address in the process.</p>\n<p>The <code class=\"hljs\">isize</code> type is a signed integer type with the same number of bits as the\nplatform's pointer type. The theoretical upper bound on object and array size\nis the maximum <code class=\"hljs\">isize</code> value. This ensures that <code class=\"hljs\">isize</code> can be used to calculate\ndifferences between pointers into an object or array and can address every byte\nwithin an object along with one byte past the end.</p>\n<p><code class=\"hljs\">usize</code> and <code class=\"hljs\">isize</code> are at least 16-bits wide.</p>\n<blockquote>\n<p><strong>Note</strong>: Many pieces of Rust code may assume that pointers, <code class=\"hljs\">usize</code>, and\n<code class=\"hljs\">isize</code> are either 32-bit or 64-bit. As a consequence, 16-bit\npointer support is limited and may require explicit care and acknowledgment\nfrom a library to support.</p>\n</blockquote>\n<h2 id=\"bit-validity-1\"><a class=\"header\" href=\"#bit-validity-1\">Bit validity</a></h2>\n<p>For every numeric type, <code class=\"hljs\">T</code>, the bit validity of <code class=\"hljs\">T</code> is equivalent to the bit\nvalidity of <code class=\"hljs\">[u8; size_of::&lt;T&gt;()]</code>. An uninitialized byte is not a valid <code class=\"hljs\">u8</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"textual-types\"><a class=\"header\" href=\"#textual-types\">Textual types</a></h1>\n<p>The types <code class=\"hljs\">char</code> and <code class=\"hljs\">str</code> hold textual data.</p>\n<p>A value of type <code class=\"hljs\">char</code> is a <a href=\"http://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a> (i.e. a code point that is\nnot a surrogate), represented as a 32-bit unsigned word in the 0x0000 to 0xD7FF\nor 0xE000 to 0x10FFFF range. It is immediate <a href=\"types/../behavior-considered-undefined.html\">Undefined Behavior</a> to create a\n<code class=\"hljs\">char</code> that falls outside this range. A <code class=\"hljs\">[char]</code> is effectively a UCS-4 / UTF-32\nstring of length 1.</p>\n<p>A value of type <code class=\"hljs\">str</code> is represented the same way as <code class=\"hljs\">[u8]</code>, a slice of\n8-bit unsigned bytes. However, the Rust standard library makes extra assumptions\nabout <code class=\"hljs\">str</code>: methods working on <code class=\"hljs\">str</code> assume and ensure that the data in there\nis valid UTF-8. Calling a <code class=\"hljs\">str</code> method with a non-UTF-8 buffer can cause\n<a href=\"types/../behavior-considered-undefined.html\">Undefined Behavior</a> now or in the future.</p>\n<p>Since <code class=\"hljs\">str</code> is a <a href=\"types/../dynamically-sized-types.html\">dynamically sized type</a>, it can only be instantiated through a\npointer type, such as <code class=\"hljs\">&amp;str</code>.</p>\n<h2 id=\"layout-and-bit-validity\"><a class=\"header\" href=\"#layout-and-bit-validity\">Layout and bit validity</a></h2>\n<p><code class=\"hljs\">char</code> is guaranteed to have the same size and alignment as <code class=\"hljs\">u32</code> on all platforms.</p>\n<p>Every byte of a <code class=\"hljs\">char</code> is guaranteed to be initialized (in other words,\n<code class=\"hljs\">transmute::&lt;char, [u8; size_of::&lt;char&gt;()]&gt;(...)</code> is always sound -- but since\nsome bit patterns are invalid <code class=\"hljs\">char</code>s, the inverse is not always sound).</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"never-type\"><a class=\"header\" href=\"#never-type\">Never type</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>NeverType</em> : <code class=\"hljs\">!</code></p>\n</blockquote>\n<p>The never type <code class=\"hljs\">!</code> is a type with no values, representing the result of\ncomputations that never complete. Expressions of type <code class=\"hljs\">!</code> can be coerced into\nany other type.</p>\n<p>The <code class=\"hljs\">!</code> type can <strong>only</strong> appear in function return types presently,\nindicating it is a diverging function that never returns.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() -&gt; ! {\n    <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"This call never returns.\"</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">no_return_extern_func</span></span>() -&gt; !;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"tuple-types\"><a class=\"header\" href=\"#tuple-types\">Tuple types</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>TupleType</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">(</code> <code class=\"hljs\">)</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">(</code> ( <a href=\"types/../types.html#type-expressions\"><em>Type</em></a> <code class=\"hljs\">,</code> )<sup>+</sup> <a href=\"types/../types.html#type-expressions\"><em>Type</em></a><sup>?</sup> <code class=\"hljs\">)</code></p>\n</blockquote>\n<p><em>Tuple types</em> are a family of structural types<sup class=\"footnote-reference\"><a href=\"#1\">1</a></sup> for heterogeneous lists of other types.</p>\n<p>The syntax for a tuple type is a parenthesized, comma-separated list of types.\n1-ary tuples require a comma after their element type to be disambiguated with a <a href=\"types/../types.html#parenthesized-types\">parenthesized type</a>.</p>\n<p>A tuple type has a number of fields equal to the length of the list of types.\nThis number of fields determines the <em>arity</em> of the tuple.\nA tuple with <code class=\"hljs\">n</code> fields is called an <em>n-ary tuple</em>.\nFor example, a tuple with 2 fields is a 2-ary tuple.</p>\n<p>Fields of tuples are named using increasing numeric names matching their position in the list of types.\nThe first field is <code class=\"hljs\">0</code>.\nThe second field is <code class=\"hljs\">1</code>.\nAnd so on.\nThe type of each field is the type of the same position in the tuple's list of types.</p>\n<p>For convenience and historical reasons, the tuple type with no fields (<code class=\"hljs\">()</code>) is often called <em>unit</em> or <em>the unit type</em>.\nIts one value is also called <em>unit</em> or <em>the unit value</em>.</p>\n<p>Some examples of tuple types:</p>\n<ul>\n<li><code class=\"hljs\">()</code> (unit)</li>\n<li><code class=\"hljs\">(f64, f64)</code></li>\n<li><code class=\"hljs\">(String, i32)</code></li>\n<li><code class=\"hljs\">(i32, String)</code> (different type from the previous example)</li>\n<li><code class=\"hljs\">(i32, f64, Vec&lt;String&gt;, Option&lt;bool&gt;)</code></li>\n</ul>\n<p>Values of this type are constructed using a <a href=\"types/../expressions/tuple-expr.html#tuple-expressions\">tuple expression</a>.\nFurthermore, various expressions will produce the unit value if there is no other meaningful value for it to evaluate to.\nTuple fields can be accessed by either a <a href=\"types/../expressions/tuple-expr.html#tuple-indexing-expressions\">tuple index expression</a> or <a href=\"types/../patterns.html#tuple-patterns\">pattern matching</a>.</p>\n<div class=\"footnote-definition\" id=\"1\"><sup class=\"footnote-definition-label\">1</sup>\n<p>Structural types are always equivalent if their internal types are equivalent.\nFor a nominal version of tuples, see <a href=\"types/./struct.html\">tuple structs</a>.</p>\n</div>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"array-types\"><a class=\"header\" href=\"#array-types\">Array types</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ArrayType</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">[</code> <a href=\"types/../types.html#type-expressions\"><em>Type</em></a> <code class=\"hljs\">;</code> <a href=\"types/../expressions.html\"><em>Expression</em></a> <code class=\"hljs\">]</code></p>\n</blockquote>\n<p>An array is a fixed-size sequence of <code class=\"hljs\">N</code> elements of type <code class=\"hljs\">T</code>. The array type\nis written as <code class=\"hljs\">[T; N]</code>. The size is a <a href=\"types/../const_eval.html#constant-expressions\">constant expression</a> that evaluates to a\n<a href=\"types/numeric.html#machine-dependent-integer-types\"><code class=\"hljs\">usize</code></a>.</p>\n<p>Examples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// A stack-allocated array</span>\n<span class=\"hljs-keyword\">let</span> array: [<span class=\"hljs-built_in\">i32</span>; <span class=\"hljs-number\">3</span>] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n<span class=\"hljs-comment\">// A heap-allocated array, coerced to a slice</span>\n<span class=\"hljs-keyword\">let</span> boxed_array: <span class=\"hljs-built_in\">Box</span>&lt;[<span class=\"hljs-built_in\">i32</span>]&gt; = <span class=\"hljs-built_in\">Box</span>::new([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>All elements of arrays are always initialized, and access to an array is\nalways bounds-checked in safe methods and operators.</p>\n<blockquote>\n<p>Note: The <a href=\"types/../../std/vec/struct.Vec.html\"><code class=\"hljs\">Vec&lt;T&gt;</code></a> standard library type provides a heap-allocated resizable\narray type.</p>\n</blockquote>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"slice-types\"><a class=\"header\" href=\"#slice-types\">Slice types</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>SliceType</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">[</code> <a href=\"types/../types.html#type-expressions\"><em>Type</em></a> <code class=\"hljs\">]</code></p>\n</blockquote>\n<p>A slice is a <a href=\"types/../dynamically-sized-types.html\">dynamically sized type</a> representing a 'view' into a sequence of\nelements of type <code class=\"hljs\">T</code>. The slice type is written as <code class=\"hljs\">[T]</code>.</p>\n<p>Slice types are generally used through pointer types. For example:</p>\n<ul>\n<li><code class=\"hljs\">&amp;[T]</code>: a 'shared slice', often just called a 'slice'. It doesn't own the\ndata it points to; it borrows it.</li>\n<li><code class=\"hljs\">&amp;mut [T]</code>: a 'mutable slice'. It mutably borrows the data it points to.</li>\n<li><code class=\"hljs\">Box&lt;[T]&gt;</code>: a 'boxed slice'</li>\n</ul>\n<p>Examples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// A heap-allocated array, coerced to a slice</span>\n<span class=\"hljs-keyword\">let</span> boxed_array: <span class=\"hljs-built_in\">Box</span>&lt;[<span class=\"hljs-built_in\">i32</span>]&gt; = <span class=\"hljs-built_in\">Box</span>::new([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);\n\n<span class=\"hljs-comment\">// A (shared) slice into an array</span>\n<span class=\"hljs-keyword\">let</span> slice: &amp;[<span class=\"hljs-built_in\">i32</span>] = &amp;boxed_array[..];\n<span class=\"boring\">}</span></code></pre></pre>\n<p>All elements of slices are always initialized, and access to a slice is always\nbounds-checked in safe methods and operators.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"struct-types\"><a class=\"header\" href=\"#struct-types\">Struct types</a></h1>\n<p>A <code class=\"hljs\">struct</code> <em>type</em> is a heterogeneous product of other types, called the\n<em>fields</em> of the type.<sup class=\"footnote-reference\"><a href=\"#structtype\">1</a></sup></p>\n<p>New instances of a <code class=\"hljs\">struct</code> can be constructed with a <a href=\"types/../expressions/struct-expr.html\">struct expression</a>.</p>\n<p>The memory layout of a <code class=\"hljs\">struct</code> is undefined by default to allow for compiler\noptimizations like field reordering, but it can be fixed with the\n<a href=\"types/../type-layout.html#representations\"><code class=\"hljs\">repr</code> attribute</a>. In either case, fields may be given in any order in a\ncorresponding struct <em>expression</em>; the resulting <code class=\"hljs\">struct</code> value will always\nhave the same memory layout.</p>\n<p>The fields of a <code class=\"hljs\">struct</code> may be qualified by <a href=\"types/../visibility-and-privacy.html\">visibility modifiers</a>, to allow\naccess to data in a struct outside a module.</p>\n<p>A <em>tuple struct</em> type is just like a struct type, except that the fields are\nanonymous.</p>\n<p>A <em>unit-like struct</em> type is like a struct type, except that it has no fields.\nThe one value constructed by the associated <a href=\"types/../expressions/struct-expr.html\">struct expression</a> is the only\nvalue that inhabits such a type.</p>\n<div class=\"footnote-definition\" id=\"structtype\"><sup class=\"footnote-definition-label\">1</sup>\n<p><code class=\"hljs\">struct</code> types are analogous to <code class=\"hljs\">struct</code> types in C, the\n<em>record</em> types of the ML family, or the <em>struct</em> types of the Lisp family.</p>\n</div>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"enumerated-types\"><a class=\"header\" href=\"#enumerated-types\">Enumerated types</a></h1>\n<p>An <em>enumerated type</em> is a nominal, heterogeneous disjoint union type, denoted\nby the name of an <a href=\"types/../items/enumerations.html\"><code class=\"hljs\">enum</code> item</a>. <sup class=\"footnote-reference\"><a href=\"#enumtype\">1</a></sup></p>\n<p>An <a href=\"types/../items/enumerations.html\"><code class=\"hljs\">enum</code> item</a> declares both the type and a number of <em>variants</em>, each of\nwhich is independently named and has the syntax of a struct, tuple struct or\nunit-like struct.</p>\n<p>New instances of an <code class=\"hljs\">enum</code> can be constructed with a <a href=\"types/../expressions/struct-expr.html\">struct expression</a>.</p>\n<p>Any <code class=\"hljs\">enum</code> value consumes as much memory as the largest variant for its\ncorresponding <code class=\"hljs\">enum</code> type, as well as the size needed to store a discriminant.</p>\n<p>Enum types cannot be denoted <em>structurally</em> as types, but must be denoted by\nnamed reference to an <a href=\"types/../items/enumerations.html\"><code class=\"hljs\">enum</code> item</a>.</p>\n<div class=\"footnote-definition\" id=\"enumtype\"><sup class=\"footnote-definition-label\">1</sup>\n<p>The <code class=\"hljs\">enum</code> type is analogous to a <code class=\"hljs\">data</code> constructor declaration in\nML, or a <em>pick ADT</em> in Limbo.</p>\n</div>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"union-types\"><a class=\"header\" href=\"#union-types\">Union types</a></h1>\n<p>A <em>union type</em> is a nominal, heterogeneous C-like union, denoted by the name of\na <a href=\"types/../items/unions.html\"><code class=\"hljs\">union</code> item</a>.</p>\n<p>Unions have no notion of an \"active field\". Instead, every union access\ntransmutes parts of the content of the union to the type of the accessed field.\nSince transmutes can cause unexpected or undefined behaviour, <code class=\"hljs\">unsafe</code> is\nrequired to read from a union field. Union field types are also restricted to a\nsubset of types which ensures that they never need dropping. See the <a href=\"types/../items/unions.html\">item</a>\ndocumentation for further details.</p>\n<p>The memory layout of a <code class=\"hljs\">union</code> is undefined by default (in particular, fields do\n<em>not</em> have to be at offset 0), but the <code class=\"hljs\">#[repr(...)]</code> attribute can be used to\nfix a layout.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"function-item-types\"><a class=\"header\" href=\"#function-item-types\">Function item types</a></h1>\n<p>When referred to, a function item, or the constructor of a tuple-like struct or\nenum variant, yields a zero-sized value of its <em>function item type</em>. That type\nexplicitly identifies the function - its name, its type arguments, and its\nearly-bound lifetime arguments (but not its late-bound lifetime arguments,\nwhich are only assigned when the function is called) - so the value does not\nneed to contain an actual function pointer, and no indirection is needed when\nthe function is called.</p>\n<p>There is no syntax that directly refers to a function item type, but the\ncompiler will display the type as something like <code class=\"hljs\">fn(u32) -&gt; i32 {fn_name}</code> in\nerror messages.</p>\n<p>Because the function item type explicitly identifies the function, the item\ntypes of different functions - different items, or the same item with different\ngenerics - are distinct, and mixing them will create a type error:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail E0308 edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T&gt;() { }\n<span class=\"hljs-keyword\">let</span> x = &amp;<span class=\"hljs-keyword\">mut</span> foo::&lt;<span class=\"hljs-built_in\">i32</span>&gt;;\n*x = foo::&lt;<span class=\"hljs-built_in\">u32</span>&gt;; <span class=\"hljs-comment\">//~ ERROR mismatched types</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>However, there is a <a href=\"types/../type-coercions.html\">coercion</a> from function items to <a href=\"types/function-pointer.html\">function pointers</a> with\nthe same signature, which is triggered not only when a function item is used\nwhen a function pointer is directly expected, but also when different function\nitem types with the same signature meet in different arms of the same <code class=\"hljs\">if</code> or\n<code class=\"hljs\">match</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> want_i32 = <span class=\"hljs-literal\">false</span>;\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T&gt;() { }\n</span>\n<span class=\"hljs-comment\">// `foo_ptr_1` has function pointer type `fn()` here</span>\n<span class=\"hljs-keyword\">let</span> foo_ptr_1: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>() = foo::&lt;<span class=\"hljs-built_in\">i32</span>&gt;;\n\n<span class=\"hljs-comment\">// ... and so does `foo_ptr_2` - this type-checks.</span>\n<span class=\"hljs-keyword\">let</span> foo_ptr_2 = <span class=\"hljs-keyword\">if</span> want_i32 {\n    foo::&lt;<span class=\"hljs-built_in\">i32</span>&gt;\n} <span class=\"hljs-keyword\">else</span> {\n    foo::&lt;<span class=\"hljs-built_in\">u32</span>&gt;\n};\n<span class=\"boring\">}</span></code></pre></pre>\n<p>All function items implement <a href=\"types/../../std/ops/trait.Fn.html\"><code class=\"hljs\">Fn</code></a>, <a href=\"types/../../std/ops/trait.FnMut.html\"><code class=\"hljs\">FnMut</code></a>, <a href=\"types/../../std/ops/trait.FnOnce.html\"><code class=\"hljs\">FnOnce</code></a>, <a href=\"types/../special-types-and-traits.html#copy\"><code class=\"hljs\">Copy</code></a>,\n<a href=\"types/../special-types-and-traits.html#clone\"><code class=\"hljs\">Clone</code></a>, <a href=\"types/../special-types-and-traits.html#send\"><code class=\"hljs\">Send</code></a>, and <a href=\"types/../special-types-and-traits.html#sync\"><code class=\"hljs\">Sync</code></a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"closure-types\"><a class=\"header\" href=\"#closure-types\">Closure types</a></h1>\n<p>A <a href=\"types/../expressions/closure-expr.html\">closure expression</a> produces a closure value with a unique, anonymous type\nthat cannot be written out. A closure type is approximately equivalent to a\nstruct which contains the captured variables. For instance, the following\nclosure:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>&lt;F : <span class=\"hljs-built_in\">FnOnce</span>() -&gt; <span class=\"hljs-built_in\">String</span>&gt; (g: F) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, g());\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"foo\"</span>);\n<span class=\"hljs-keyword\">let</span> t = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"bar\"</span>);\n\nf(|| {\n    s += &amp;t;\n    s\n});\n<span class=\"hljs-comment\">// Prints \"foobar\".</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>generates a closure type roughly like the following:</p>\n<!-- ignore: simplified, requires unboxed_closures, fn_traits -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Closure</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    s : <span class=\"hljs-built_in\">String</span>,\n    t : &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">String</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-built_in\">FnOnce</span>&lt;()&gt; <span class=\"hljs-keyword\">for</span> Closure&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Output</span></span> = <span class=\"hljs-built_in\">String</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">call_once</span></span>(<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n        <span class=\"hljs-keyword\">self</span>.s += &amp;*<span class=\"hljs-keyword\">self</span>.t;\n        <span class=\"hljs-keyword\">self</span>.s\n    }\n}</code></pre>\n<p>so that the call to <code class=\"hljs\">f</code> works as if it were:</p>\n<!-- ignore: continuation of above -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">f(Closure{s: s, t: &amp;t});</code></pre>\n<h2 id=\"capture-modes-1\"><a class=\"header\" href=\"#capture-modes-1\">Capture modes</a></h2>\n<p>The compiler prefers to capture a closed-over variable by immutable borrow,\nfollowed by unique immutable borrow (see below), by mutable borrow, and finally\nby move. It will pick the first choice of these that is compatible with how the\ncaptured variable is used inside the closure body. The compiler does not take\nsurrounding code into account, such as the lifetimes of involved variables, or\nof the closure itself.</p>\n<p>If the <code class=\"hljs\">move</code> keyword is used, then all captures are by move or, for <code class=\"hljs\">Copy</code>\ntypes, by copy, regardless of whether a borrow would work. The <code class=\"hljs\">move</code> keyword is\nusually used to allow the closure to outlive the captured values, such as if the\nclosure is being returned or used to spawn a new thread.</p>\n<p>Composite types such as structs, tuples, and enums are always captured entirely,\nnot by individual fields. It may be necessary to borrow into a local variable in\norder to capture a single field:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::collections::HashSet;\n</span><span class=\"boring\">\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SetVec</span></span> {\n    set: HashSet&lt;<span class=\"hljs-built_in\">u32</span>&gt;,\n    vec: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">u32</span>&gt;\n}\n\n<span class=\"hljs-keyword\">impl</span> SetVec {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">populate</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">let</span> vec = &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.vec;\n        <span class=\"hljs-keyword\">self</span>.set.iter().for_each(|&amp;n| {\n            vec.push(n);\n        })\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If, instead, the closure were to use <code class=\"hljs\">self.vec</code> directly, then it would attempt\nto capture <code class=\"hljs\">self</code> by mutable reference. But since <code class=\"hljs\">self.set</code> is already\nborrowed to iterate over, the code would not compile.</p>\n<h2 id=\"unique-immutable-borrows-in-captures\"><a class=\"header\" href=\"#unique-immutable-borrows-in-captures\">Unique immutable borrows in captures</a></h2>\n<p>Captures can occur by a special kind of borrow called a <em>unique immutable\nborrow</em>, which cannot be used anywhere else in the language and cannot be\nwritten out explicitly. It occurs when modifying the referent of a mutable\nreference, as in the following example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> b = <span class=\"hljs-literal\">false</span>;\n<span class=\"hljs-keyword\">let</span> x = &amp;<span class=\"hljs-keyword\">mut</span> b;\n{\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> c = || { *x = <span class=\"hljs-literal\">true</span>; };\n    <span class=\"hljs-comment\">// The following line is an error:</span>\n    <span class=\"hljs-comment\">// let y = &amp;x;</span>\n    c();\n}\n<span class=\"hljs-keyword\">let</span> z = &amp;x;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In this case, borrowing <code class=\"hljs\">x</code> mutably is not possible, because <code class=\"hljs\">x</code> is not <code class=\"hljs\">mut</code>.\nBut at the same time, borrowing <code class=\"hljs\">x</code> immutably would make the assignment illegal,\nbecause a <code class=\"hljs\">&amp; &amp;mut</code> reference might not be unique, so it cannot safely be used to\nmodify a value. So a unique immutable borrow is used: it borrows <code class=\"hljs\">x</code> immutably,\nbut like a mutable borrow, it must be unique. In the above example, uncommenting\nthe declaration of <code class=\"hljs\">y</code> will produce an error because it would violate the\nuniqueness of the closure's borrow of <code class=\"hljs\">x</code>; the declaration of z is valid because\nthe closure's lifetime has expired at the end of the block, releasing the borrow.</p>\n<h2 id=\"call-traits-and-coercions\"><a class=\"header\" href=\"#call-traits-and-coercions\">Call traits and coercions</a></h2>\n<p>Closure types all implement <a href=\"types/../../std/ops/trait.FnOnce.html\"><code class=\"hljs\">FnOnce</code></a>, indicating that they can be called once\nby consuming ownership of the closure. Additionally, some closures implement\nmore specific call traits:</p>\n<ul>\n<li>\n<p>A closure which does not move out of any captured variables implements\n<a href=\"types/../../std/ops/trait.FnMut.html\"><code class=\"hljs\">FnMut</code></a>, indicating that it can be called by mutable reference.</p>\n</li>\n<li>\n<p>A closure which does not mutate or move out of any captured variables\nimplements <a href=\"types/../../std/ops/trait.Fn.html\"><code class=\"hljs\">Fn</code></a>, indicating that it can be called by shared reference.</p>\n</li>\n</ul>\n<blockquote>\n<p>Note: <code class=\"hljs\">move</code> closures may still implement <a href=\"types/../../std/ops/trait.Fn.html\"><code class=\"hljs\">Fn</code></a> or <a href=\"types/../../std/ops/trait.FnMut.html\"><code class=\"hljs\">FnMut</code></a>, even though\nthey capture variables by move. This is because the traits implemented by a\nclosure type are determined by what the closure does with captured values,\nnot how it captures them.</p>\n</blockquote>\n<p><em>Non-capturing closures</em> are closures that don't capture anything from their\nenvironment. They can be coerced to function pointers (e.g., <code class=\"hljs\">fn()</code>)\nwith the matching signature.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> add = |x, y| x + y;\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = add(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>);\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Binop</span></span> = <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>;\n<span class=\"hljs-keyword\">let</span> bo: Binop = add;\nx = bo(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"other-traits\"><a class=\"header\" href=\"#other-traits\">Other traits</a></h2>\n<p>All closure types implement <a href=\"types/../special-types-and-traits.html#sized\"><code class=\"hljs\">Sized</code></a>. Additionally, closure types implement the\nfollowing traits if allowed to do so by the types of the captures it stores:</p>\n<ul>\n<li><a href=\"types/../special-types-and-traits.html#clone\"><code class=\"hljs\">Clone</code></a></li>\n<li><a href=\"types/../special-types-and-traits.html#copy\"><code class=\"hljs\">Copy</code></a></li>\n<li><a href=\"types/../special-types-and-traits.html#sync\"><code class=\"hljs\">Sync</code></a></li>\n<li><a href=\"types/../special-types-and-traits.html#send\"><code class=\"hljs\">Send</code></a></li>\n</ul>\n<p>The rules for <a href=\"types/../special-types-and-traits.html#send\"><code class=\"hljs\">Send</code></a> and <a href=\"types/../special-types-and-traits.html#sync\"><code class=\"hljs\">Sync</code></a> match those for normal struct types, while\n<a href=\"types/../special-types-and-traits.html#clone\"><code class=\"hljs\">Clone</code></a> and <a href=\"types/../special-types-and-traits.html#copy\"><code class=\"hljs\">Copy</code></a> behave as if <a href=\"types/../attributes/derive.html\">derived</a>. For <a href=\"types/../special-types-and-traits.html#clone\"><code class=\"hljs\">Clone</code></a>, the order of\ncloning of the captured variables is left unspecified.</p>\n<p>Because captures are often by reference, the following general rules arise:</p>\n<ul>\n<li>A closure is <a href=\"types/../special-types-and-traits.html#sync\"><code class=\"hljs\">Sync</code></a> if all captured variables are <a href=\"types/../special-types-and-traits.html#sync\"><code class=\"hljs\">Sync</code></a>.</li>\n<li>A closure is <a href=\"types/../special-types-and-traits.html#send\"><code class=\"hljs\">Send</code></a> if all variables captured by non-unique immutable\nreference are <a href=\"types/../special-types-and-traits.html#sync\"><code class=\"hljs\">Sync</code></a>, and all values captured by unique immutable or mutable\nreference, copy, or move are <a href=\"types/../special-types-and-traits.html#send\"><code class=\"hljs\">Send</code></a>.</li>\n<li>A closure is <a href=\"types/../special-types-and-traits.html#clone\"><code class=\"hljs\">Clone</code></a> or <a href=\"types/../special-types-and-traits.html#copy\"><code class=\"hljs\">Copy</code></a> if it does not capture any values by\nunique immutable or mutable reference, and if all values it captures by copy\nor move are <a href=\"types/../special-types-and-traits.html#clone\"><code class=\"hljs\">Clone</code></a> or <a href=\"types/../special-types-and-traits.html#copy\"><code class=\"hljs\">Copy</code></a>, respectively.</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"pointer-types\"><a class=\"header\" href=\"#pointer-types\">Pointer types</a></h1>\n<p>All pointers are explicit first-class values.\nThey can be moved or copied, stored into data structs, and returned from functions.</p>\n<h2 id=\"references--and-mut\"><a class=\"header\" href=\"#references--and-mut\">References (<code>&amp;</code> and <code>&amp;mut</code>)</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ReferenceType</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">&amp;</code> <a href=\"types/../trait-bounds.html\"><em>Lifetime</em></a><sup>?</sup> <code class=\"hljs\">mut</code><sup>?</sup> <a href=\"types/../types.html#type-expressions\"><em>TypeNoBounds</em></a></p>\n</blockquote>\n<h3 id=\"shared-references-\"><a class=\"header\" href=\"#shared-references-\">Shared references (<code>&amp;</code>)</a></h3>\n<p>Shared references point to memory which is owned by some other value.\nWhen a shared reference to a value is created, it prevents direct mutation of the value.\n<a href=\"types/../interior-mutability.html\">Interior mutability</a> provides an exception for this in certain circumstances.\nAs the name suggests, any number of shared references to a value may exist.\nA shared reference type is written <code class=\"hljs\">&amp;type</code>, or <code class=\"hljs\">&amp;'a type</code> when you need to specify an explicit lifetime.\nCopying a reference is a \"shallow\" operation:\nit involves only copying the pointer itself, that is, pointers are <code class=\"hljs\">Copy</code>.\nReleasing a reference has no effect on the value it points to, but referencing of a <a href=\"types/../expressions.html#temporaries\">temporary value</a> will keep it alive during the scope of the reference itself.</p>\n<h3 id=\"mutable-references-mut\"><a class=\"header\" href=\"#mutable-references-mut\">Mutable references (<code>&amp;mut</code>)</a></h3>\n<p>Mutable references point to memory which is owned by some other value.\nA mutable reference type is written <code class=\"hljs\">&amp;mut type</code> or <code class=\"hljs\">&amp;'a mut type</code>.\nA mutable reference (that hasn't been borrowed) is the only way to access the value it points to, so is not <code class=\"hljs\">Copy</code>.</p>\n<h2 id=\"raw-pointers-const-and-mut\"><a class=\"header\" href=\"#raw-pointers-const-and-mut\">Raw pointers (<code>*const</code> and <code>*mut</code>)</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>RawPointerType</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">*</code> ( <code class=\"hljs\">mut</code> | <code class=\"hljs\">const</code> ) <a href=\"types/../types.html#type-expressions\"><em>TypeNoBounds</em></a></p>\n</blockquote>\n<p>Raw pointers are pointers without safety or liveness guarantees.\nRaw pointers are written as <code class=\"hljs\">*const T</code> or <code class=\"hljs\">*mut T</code>.\nFor example <code class=\"hljs\">*const i32</code> means a raw pointer to a 32-bit integer.\nCopying or dropping a raw pointer has no effect on the lifecycle of any other value.\nDereferencing a raw pointer is an <a href=\"types/../unsafety.html\"><code class=\"hljs\">unsafe</code> operation</a>.\nThis can also be used to convert a raw pointer to a reference by reborrowing it (<code class=\"hljs\">&amp;*</code> or <code class=\"hljs\">&amp;mut *</code>).\nRaw pointers are generally discouraged;\nthey exist to support interoperability with foreign code, and writing performance-critical or low-level functions.</p>\n<p>When comparing raw pointers they are compared by their address, rather than by what they point to.\nWhen comparing raw pointers to <a href=\"types/../dynamically-sized-types.html\">dynamically sized types</a> they also have their additional data compared.</p>\n<p>Raw pointers can be created directly using <a href=\"types/../../core/ptr/macro.addr_of.html\"><code class=\"hljs\">core::ptr::addr_of!</code></a> for <code class=\"hljs\">*const</code> pointers and <a href=\"types/../../core/ptr/macro.addr_of_mut.html\"><code class=\"hljs\">core::ptr::addr_of_mut!</code></a> for <code class=\"hljs\">*mut</code> pointers.</p>\n<h2 id=\"smart-pointers\"><a class=\"header\" href=\"#smart-pointers\">Smart Pointers</a></h2>\n<p>The standard library contains additional 'smart pointer' types beyond references and raw pointers.</p>\n<h2 id=\"bit-validity-2\"><a class=\"header\" href=\"#bit-validity-2\">Bit validity</a></h2>\n<p>Despite pointers and references being similar to <code class=\"hljs\">usize</code>s in the machine code emitted on most platforms,\nthe semantics of transmuting a reference or pointer type to a non-pointer type is currently undecided.\nThus, it may not be valid to transmute a pointer or reference type, <code class=\"hljs\">P</code>, to a <code class=\"hljs\">[u8; size_of::&lt;P&gt;()]</code>.</p>\n<p>For thin raw pointers (i.e., for <code class=\"hljs\">P = *const T</code> or <code class=\"hljs\">P = *mut T</code> for <code class=\"hljs\">T: Sized</code>),\nthe inverse direction (transmuting from an integer or array of integers to <code class=\"hljs\">P</code>) is always valid.\nHowever, the pointer produced via such a transmutation may not be dereferenced (not even if <code class=\"hljs\">T</code> has size zero).</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"function-pointer-types\"><a class=\"header\" href=\"#function-pointer-types\">Function pointer types</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>BareFunctionType</em> :<br>\n&nbsp;&nbsp; <a href=\"types/../trait-bounds.html#higher-ranked-trait-bounds\"><em>ForLifetimes</em></a><sup>?</sup> <em>FunctionTypeQualifiers</em> <code class=\"hljs\">fn</code><br>\n&nbsp;&nbsp; &nbsp;&nbsp;  <code class=\"hljs\">(</code> <em>FunctionParametersMaybeNamedVariadic</em><sup>?</sup> <code class=\"hljs\">)</code> <em>BareFunctionReturnType</em><sup>?</sup></p>\n<p><em>FunctionTypeQualifiers</em>:<br>\n&nbsp;&nbsp; <code class=\"hljs\">unsafe</code><sup>?</sup> (<code class=\"hljs\">extern</code> <a href=\"types/../items/functions.html\"><em>Abi</em></a><sup>?</sup>)<sup>?</sup></p>\n<p><em>BareFunctionReturnType</em>:<br>\n&nbsp;&nbsp; <code class=\"hljs\">-&gt;</code> <a href=\"types/../types.html#type-expressions\"><em>TypeNoBounds</em></a></p>\n<p><em>FunctionParametersMaybeNamedVariadic</em> :<br>\n&nbsp;&nbsp; <em>MaybeNamedFunctionParameters</em> | <em>MaybeNamedFunctionParametersVariadic</em></p>\n<p><em>MaybeNamedFunctionParameters</em> :<br>\n&nbsp;&nbsp; <em>MaybeNamedParam</em> ( <code class=\"hljs\">,</code> <em>MaybeNamedParam</em> )<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n<p><em>MaybeNamedParam</em> :<br>\n&nbsp;&nbsp; <a href=\"types/../attributes.html\"><em>OuterAttribute</em></a><sup>*</sup> ( ( <a href=\"types/../identifiers.html\">IDENTIFIER</a> | <code class=\"hljs\">_</code> ) <code class=\"hljs\">:</code> )<sup>?</sup> <a href=\"types/../types.html#type-expressions\"><em>Type</em></a></p>\n<p><em>MaybeNamedFunctionParametersVariadic</em> :<br>\n&nbsp;&nbsp; ( <em>MaybeNamedParam</em> <code class=\"hljs\">,</code> )<sup>*</sup> <em>MaybeNamedParam</em> <code class=\"hljs\">,</code> <a href=\"types/../attributes.html\"><em>OuterAttribute</em></a><sup>*</sup> <code class=\"hljs\">...</code></p>\n</blockquote>\n<p>Function pointer types, written using the <code class=\"hljs\">fn</code> keyword, refer to a function\nwhose identity is not necessarily known at compile-time. They can be created\nvia a coercion from both <a href=\"types/function-item.html\">function items</a> and non-capturing <a href=\"types/closure.html\">closures</a>.</p>\n<p>The <code class=\"hljs\">unsafe</code> qualifier indicates that the type's value is an <a href=\"types/../unsafe-keyword.html\">unsafe\nfunction</a>, and the <code class=\"hljs\">extern</code> qualifier indicates it is an <a href=\"types/../items/functions.html#extern-function-qualifier\">extern function</a>.</p>\n<p>Variadic parameters can only be specified with <a href=\"types/../items/external-blocks.html\"><code class=\"hljs\">extern</code></a> function types with\nthe <code class=\"hljs\">\"C\"</code> or <code class=\"hljs\">\"cdecl\"</code> calling convention.</p>\n<p>An example where <code class=\"hljs\">Binop</code> is defined as a function pointer type:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add</span></span>(x: <span class=\"hljs-built_in\">i32</span>, y: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    x + y\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = add(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>);\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Binop</span></span> = <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>;\n<span class=\"hljs-keyword\">let</span> bo: Binop = add;\nx = bo(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"attributes-on-function-pointer-parameters\"><a class=\"header\" href=\"#attributes-on-function-pointer-parameters\">Attributes on function pointer parameters</a></h2>\n<p>Attributes on function pointer parameters follow the same rules and\nrestrictions as <a href=\"types/../items/functions.html#attributes-on-function-parameters\">regular function parameters</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"trait-objects\"><a class=\"header\" href=\"#trait-objects\">Trait objects</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>TraitObjectType</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">dyn</code><sup>?</sup> <a href=\"types/../trait-bounds.html\"><em>TypeParamBounds</em></a></p>\n<p><em>TraitObjectTypeOneBound</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">dyn</code><sup>?</sup> <a href=\"types/../trait-bounds.html\"><em>TraitBound</em></a></p>\n</blockquote>\n<p>A <em>trait object</em> is an opaque value of another type that implements a set of\ntraits. The set of traits is made up of an <a href=\"types/../items/traits.html#object-safety\">object safe</a> <em>base trait</em> plus any\nnumber of <a href=\"types/../special-types-and-traits.html#auto-traits\">auto traits</a>.</p>\n<p>Trait objects implement the base trait, its auto traits, and any <a href=\"types/../items/traits.html#supertraits\">supertraits</a>\nof the base trait.</p>\n<p>Trait objects are written as the keyword <code class=\"hljs\">dyn</code> followed by a set of trait\nbounds, but with the following restrictions on the trait bounds. All traits\nexcept the first trait must be auto traits, there may not be more than one\nlifetime, and opt-out bounds (e.g. <code class=\"hljs\">?Sized</code>) are not allowed. Furthermore,\npaths to traits may be parenthesized.</p>\n<p>For example, given a trait <code class=\"hljs\">Trait</code>, the following are all trait objects:</p>\n<ul>\n<li><code class=\"hljs\">dyn Trait</code></li>\n<li><code class=\"hljs\">dyn Trait + Send</code></li>\n<li><code class=\"hljs\">dyn Trait + Send + Sync</code></li>\n<li><code class=\"hljs\">dyn Trait + 'static</code></li>\n<li><code class=\"hljs\">dyn Trait + Send + 'static</code></li>\n<li><code class=\"hljs\">dyn Trait +</code></li>\n<li><code class=\"hljs\">dyn 'static + Trait</code>.</li>\n<li><code class=\"hljs\">dyn (Trait)</code></li>\n</ul>\n<blockquote>\n<p><strong>Edition Differences</strong>: Before the 2021 edition, the <code class=\"hljs\">dyn</code> keyword may be\nomitted.</p>\n<p>Note: For clarity, it is recommended to always use the <code class=\"hljs\">dyn</code> keyword on your\ntrait objects unless your codebase supports compiling with Rust 1.26 or lower.</p>\n</blockquote>\n<blockquote>\n<p><strong>Edition Differences</strong>: In the 2015 edition, if the first bound of the\ntrait object is a path that starts with <code class=\"hljs\">::</code>, then the <code class=\"hljs\">dyn</code> will be treated\nas a part of the path. The first path can be put in parenthesis to get\naround this. As such, if you want a trait object with the trait\n<code class=\"hljs\">::your_module::Trait</code>, you should write it as <code class=\"hljs\">dyn (::your_module::Trait)</code>.</p>\n<p>Beginning in the 2018 edition, <code class=\"hljs\">dyn</code> is a true keyword and is not allowed in\npaths, so the parentheses are not necessary.</p>\n</blockquote>\n<p>Two trait object types alias each other if the base traits alias each other and\nif the sets of auto traits are the same and the lifetime bounds are the same.\nFor example, <code class=\"hljs\">dyn Trait + Send + UnwindSafe</code> is the same as\n<code class=\"hljs\">dyn Trait + UnwindSafe + Send</code>.</p>\n<p>Due to the opaqueness of which concrete type the value is of, trait objects are\n<a href=\"types/../dynamically-sized-types.html\">dynamically sized types</a>. Like all\n<abbr title=\"dynamically sized types\">DSTs</abbr>, trait objects are used\nbehind some type of pointer; for example <code class=\"hljs\">&amp;dyn SomeTrait</code> or\n<code class=\"hljs\">Box&lt;dyn SomeTrait&gt;</code>. Each instance of a pointer to a trait object includes:</p>\n<ul>\n<li>a pointer to an instance of a type <code class=\"hljs\">T</code> that implements <code class=\"hljs\">SomeTrait</code></li>\n<li>a <em>virtual method table</em>, often just called a <em>vtable</em>, which contains, for\neach method of <code class=\"hljs\">SomeTrait</code> and its <a href=\"types/../items/traits.html#supertraits\">supertraits</a> that <code class=\"hljs\">T</code> implements, a\npointer to <code class=\"hljs\">T</code>'s implementation (i.e. a function pointer).</li>\n</ul>\n<p>The purpose of trait objects is to permit \"late binding\" of methods. Calling a\nmethod on a trait object results in virtual dispatch at runtime: that is, a\nfunction pointer is loaded from the trait object vtable and invoked indirectly.\nThe actual implementation for each vtable entry can vary on an object-by-object\nbasis.</p>\n<p>An example of a trait object:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Printable</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">stringify</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span>;\n}\n\n<span class=\"hljs-keyword\">impl</span> Printable <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i32</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">stringify</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> { <span class=\"hljs-keyword\">self</span>.to_string() }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">print</span></span>(a: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Printable&gt;) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, a.stringify());\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    print(<span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Printable&gt;);\n}</code></pre></pre>\n<p>In this example, the trait <code class=\"hljs\">Printable</code> occurs as a trait object in both the\ntype signature of <code class=\"hljs\">print</code>, and the cast expression in <code class=\"hljs\">main</code>.</p>\n<h2 id=\"trait-object-lifetime-bounds\"><a class=\"header\" href=\"#trait-object-lifetime-bounds\">Trait Object Lifetime Bounds</a></h2>\n<p>Since a trait object can contain references, the lifetimes of those references\nneed to be expressed as part of the trait object. This lifetime is written as\n<code class=\"hljs\">Trait + 'a</code>. There are <a href=\"types/../lifetime-elision.html#default-trait-object-lifetimes\">defaults</a> that allow this lifetime to usually be\ninferred with a sensible choice.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"impl-trait\"><a class=\"header\" href=\"#impl-trait\">Impl trait</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ImplTraitType</em> : <code class=\"hljs\">impl</code> <a href=\"types/../trait-bounds.html\"><em>TypeParamBounds</em></a></p>\n<p><em>ImplTraitTypeOneBound</em> : <code class=\"hljs\">impl</code> <a href=\"types/../trait-bounds.html\"><em>TraitBound</em></a></p>\n</blockquote>\n<p><code class=\"hljs\">impl Trait</code> provides ways to specify unnamed but concrete types that\nimplement a specific trait.\nIt can appear in two sorts of places: argument position (where it can act as an anonymous type parameter to functions), and return position (where it can act as an abstract return type).</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {}\n<span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Trait <span class=\"hljs-keyword\">for</span> () {}\n</span>\n<span class=\"hljs-comment\">// argument position: anonymous type parameter</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(arg: <span class=\"hljs-keyword\">impl</span> Trait) {\n}\n\n<span class=\"hljs-comment\">// return position: abstract return type</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>() -&gt; <span class=\"hljs-keyword\">impl</span> Trait {\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"anonymous-type-parameters\"><a class=\"header\" href=\"#anonymous-type-parameters\">Anonymous type parameters</a></h2>\n<blockquote>\n<p>Note: This is often called \"impl Trait in argument position\".\n(The term \"parameter\" is more correct here, but \"impl Trait in argument position\" is the phrasing used during the development of this feature, and it remains in parts of the implementation.)</p>\n</blockquote>\n<p>Functions can use <code class=\"hljs\">impl</code> followed by a set of trait bounds to declare a parameter as having an anonymous type.\nThe caller must provide a type that satisfies the bounds declared by the anonymous type parameter, and the function can only use the methods available through the trait bounds of the anonymous type parameter.</p>\n<p>For example, these two forms are almost equivalent:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {}\n\n<span class=\"hljs-comment\">// generic type parameter</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">with_generic_type</span></span>&lt;T: Trait&gt;(arg: T) {\n}\n\n<span class=\"hljs-comment\">// impl Trait in argument position</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">with_impl_trait</span></span>(arg: <span class=\"hljs-keyword\">impl</span> Trait) {\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>That is, <code class=\"hljs\">impl Trait</code> in argument position is syntactic sugar for a generic type parameter like <code class=\"hljs\">&lt;T: Trait&gt;</code>, except that the type is anonymous and doesn't appear in the <a href=\"types/../items/generics.html\"><em>GenericParams</em></a> list.</p>\n<blockquote>\n<p><strong>Note:</strong>\nFor function parameters, generic type parameters and <code class=\"hljs\">impl Trait</code> are not exactly equivalent.\nWith a generic parameter such as <code class=\"hljs\">&lt;T: Trait&gt;</code>, the caller has the option to explicitly specify the generic argument for <code class=\"hljs\">T</code> at the call site using <a href=\"types/../paths.html#paths-in-expressions\"><em>GenericArgs</em></a>, for example, <code class=\"hljs\">foo::&lt;usize&gt;(1)</code>.\nIf <code class=\"hljs\">impl Trait</code> is the type of <em>any</em> function parameter, then the caller can't ever provide any generic arguments when calling that function.\nThis includes generic arguments for the return type or any const generics.</p>\n<p>Therefore, changing the function signature from either one to the other can constitute a breaking change for the callers of a function.</p>\n</blockquote>\n<h2 id=\"abstract-return-types\"><a class=\"header\" href=\"#abstract-return-types\">Abstract return types</a></h2>\n<blockquote>\n<p>Note: This is often called \"impl Trait in return position\".</p>\n</blockquote>\n<p>Functions can use <code class=\"hljs\">impl Trait</code> to return an abstract return type.\nThese types stand in for another concrete type where the caller may only use the methods declared by the specified <code class=\"hljs\">Trait</code>.\nEach possible return value from the function must resolve to the same concrete type.</p>\n<p><code class=\"hljs\">impl Trait</code> in return position allows a function to return an unboxed abstract type.\nThis is particularly useful with <a href=\"types/closure.html\">closures</a> and iterators.\nFor example, closures have a unique, un-writable type.\nPreviously, the only way to return a closure from a function was to use a <a href=\"types/trait-object.html\">trait object</a>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns_closure</span></span>() -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>&gt; {\n    <span class=\"hljs-built_in\">Box</span>::new(|x| x + <span class=\"hljs-number\">1</span>)\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This could incur performance penalties from heap allocation and dynamic dispatch.\nIt wasn't possible to fully specify the type of the closure, only to use the <code class=\"hljs\">Fn</code> trait.\nThat means that the trait object is necessary.\nHowever, with <code class=\"hljs\">impl Trait</code>, it is possible to write this more simply:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns_closure</span></span>() -&gt; <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Fn</span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    |x| x + <span class=\"hljs-number\">1</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>which also avoids the drawbacks of using a boxed trait object.</p>\n<p>Similarly, the concrete types of iterators could become very complex, incorporating the types of all previous iterators in a chain.\nReturning <code class=\"hljs\">impl Iterator</code> means that a function only exposes the <code class=\"hljs\">Iterator</code> trait as a bound on its return type, instead of explicitly specifying all of the other iterator types involved.</p>\n<h2 id=\"return-position-impl-trait-in-traits-and-trait-implementations\"><a class=\"header\" href=\"#return-position-impl-trait-in-traits-and-trait-implementations\">Return-position <code>impl Trait</code> in traits and trait implementations</a></h2>\n<p>Functions in traits may also use <code class=\"hljs\">impl Trait</code> as a syntax for an anonymous associated type.</p>\n<p>Every <code class=\"hljs\">impl Trait</code> in the return type of an associated function in a trait is desugared to an anonymous associated type. The return type that appears in the implementation's function signature is used to determine the value of the associated type.</p>\n<h3 id=\"differences-between-generics-and-impl-trait-in-return-position\"><a class=\"header\" href=\"#differences-between-generics-and-impl-trait-in-return-position\">Differences between generics and <code>impl Trait</code> in return position</a></h3>\n<p>In argument position, <code class=\"hljs\">impl Trait</code> is very similar in semantics to a generic type parameter.\nHowever, there are significant differences between the two in return position.\nWith <code class=\"hljs\">impl Trait</code>, unlike with a generic type parameter, the function chooses the return type, and the caller cannot choose the return type.</p>\n<p>The function:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {}\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;T: Trait&gt;() -&gt; T {\n    <span class=\"hljs-comment\">// ...</span>\n<span class=\"boring\"><span class=\"hljs-built_in\">panic!</span>()\n</span>}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>allows the caller to determine the return type, <code class=\"hljs\">T</code>, and the function returns that type.</p>\n<p>The function:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Trait <span class=\"hljs-keyword\">for</span> () {}\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() -&gt; <span class=\"hljs-keyword\">impl</span> Trait {\n    <span class=\"hljs-comment\">// ...</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>doesn't allow the caller to determine the return type.\nInstead, the function chooses the return type, but only promises that it will implement <code class=\"hljs\">Trait</code>.</p>\n<h2 id=\"limitations-1\"><a class=\"header\" href=\"#limitations-1\">Limitations</a></h2>\n<p><code class=\"hljs\">impl Trait</code> can only appear as a parameter or return type of a non-<code class=\"hljs\">extern</code> function.\nIt cannot be the type of a <code class=\"hljs\">let</code> binding, field type, or appear inside a type alias.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"type-parameters\"><a class=\"header\" href=\"#type-parameters\">Type parameters</a></h1>\n<p>Within the body of an item that has type parameter declarations, the names of\nits type parameters are types:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">to_vec</span></span>&lt;A: <span class=\"hljs-built_in\">Clone</span>&gt;(xs: &amp;[A]) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;A&gt; {\n    <span class=\"hljs-keyword\">if</span> xs.is_empty() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">vec!</span>[];\n    }\n    <span class=\"hljs-keyword\">let</span> first: A = xs[<span class=\"hljs-number\">0</span>].clone();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> rest: <span class=\"hljs-built_in\">Vec</span>&lt;A&gt; = to_vec(&amp;xs[<span class=\"hljs-number\">1</span>..]);\n    rest.insert(<span class=\"hljs-number\">0</span>, first);\n    rest\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Here, <code class=\"hljs\">first</code> has type <code class=\"hljs\">A</code>, referring to <code class=\"hljs\">to_vec</code>'s <code class=\"hljs\">A</code> type parameter; and\n<code class=\"hljs\">rest</code> has type <code class=\"hljs\">Vec&lt;A&gt;</code>, a vector with element type <code class=\"hljs\">A</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"inferred-type\"><a class=\"header\" href=\"#inferred-type\">Inferred type</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>InferredType</em> : <code class=\"hljs\">_</code></p>\n</blockquote>\n<p>The inferred type asks the compiler to infer the type if possible based on the\nsurrounding information available. It cannot be used in item signatures. It is\noften used in generic arguments:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">Vec</span>&lt;_&gt; = (<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">10</span>).collect();\n<span class=\"boring\">}</span></code></pre></pre>\n<!--\n  What else should be said here?\n  The only documentation I am aware of is https://rustc-dev-guide.rust-lang.org/type-inference.html\n  There should be a broader discussion of type inference somewhere.\n-->\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"dynamically-sized-types\"><a class=\"header\" href=\"#dynamically-sized-types\">Dynamically Sized Types</a></h1>\n<p>Most types have a fixed size that is known at compile time and implement the\ntrait <a href=\"special-types-and-traits.html#sized\"><code class=\"hljs\">Sized</code></a>. A type with a size that is known only at run-time is\ncalled a <em>dynamically sized type</em> (<em>DST</em>) or, informally, an unsized type.\n<a href=\"types/slice.html\">Slices</a> and <a href=\"types/trait-object.html\">trait objects</a> are two examples of <abbr title=\"dynamically sized\ntypes\">DSTs</abbr>. Such types can only be used in certain cases:</p>\n<ul>\n<li><a href=\"types/pointer.html\">Pointer types</a> to <abbr title=\"dynamically sized types\">DSTs</abbr> are\nsized but have twice the size of pointers to sized types\n<ul>\n<li>Pointers to slices also store the number of elements of the slice.</li>\n<li>Pointers to trait objects also store a pointer to a vtable.</li>\n</ul>\n</li>\n<li><abbr title=\"dynamically sized types\">DSTs</abbr> can be provided as\ntype arguments to generic type parameters having the special <code class=\"hljs\">?Sized</code> bound.\nThey can also be used for associated type definitions when the corresponding associated type declaration has a <code class=\"hljs\">?Sized</code> bound.\nBy default, any type parameter or associated type has a <code class=\"hljs\">Sized</code> bound, unless it is relaxed using <code class=\"hljs\">?Sized</code>.</li>\n<li>Traits may be implemented for <abbr title=\"dynamically sized\ntypes\">DSTs</abbr>.\nUnlike with generic type parameters, <code class=\"hljs\">Self: ?Sized</code> is the default in trait definitions.</li>\n<li>Structs may contain a <abbr title=\"dynamically sized type\">DST</abbr> as the\nlast field; this makes the struct itself a\n<abbr title=\"dynamically sized type\">DST</abbr>.</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"variables.html\">variables</a>, function parameters, <a href=\"items/constant-items.html\">const</a> items, and <a href=\"items/static-items.html\">static</a> items must be\n<code class=\"hljs\">Sized</code>.</p>\n</blockquote>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"type-layout\"><a class=\"header\" href=\"#type-layout\">Type Layout</a></h1>\n<p>The layout of a type is its size, alignment, and the relative offsets of its\nfields. For enums, how the discriminant is laid out and interpreted is also part\nof type layout.</p>\n<p>Type layout can be changed with each compilation. Instead of trying to document\nexactly what is done, we only document what is guaranteed today.</p>\n<h2 id=\"size-and-alignment\"><a class=\"header\" href=\"#size-and-alignment\">Size and Alignment</a></h2>\n<p>All values have an alignment and size.</p>\n<p>The <em>alignment</em> of a value specifies what addresses are valid to store the value\nat. A value of alignment <code class=\"hljs\">n</code> must only be stored at an address that is a\nmultiple of n. For example, a value with an alignment of 2 must be stored at an\neven address, while a value with an alignment of 1 can be stored at any address.\nAlignment is measured in bytes, and must be at least 1, and always a power of 2.\nThe alignment of a value can be checked with the <a href=\"../std/mem/fn.align_of_val.html\"><code class=\"hljs\">align_of_val</code></a> function.</p>\n<p>The <em>size</em> of a value is the offset in bytes between successive elements in an\narray with that item type including alignment padding. The size of a value is\nalways a multiple of its alignment. Note that some types are zero-sized; 0 is\nconsidered a multiple of any alignment (for example, on some platforms, the type\n<code class=\"hljs\">[u16; 0]</code> has size 0 and alignment 2). The size of a value can be checked with\nthe <a href=\"../std/mem/fn.size_of_val.html\"><code class=\"hljs\">size_of_val</code></a> function.</p>\n<p>Types where all values have the same size and alignment, and both are known at\ncompile time, implement the <a href=\"../std/marker/trait.Sized.html\"><code class=\"hljs\">Sized</code></a> trait and can be checked with the\n<a href=\"../std/mem/fn.size_of.html\"><code class=\"hljs\">size_of</code></a> and <a href=\"../std/mem/fn.align_of.html\"><code class=\"hljs\">align_of</code></a> functions. Types that are not <a href=\"../std/marker/trait.Sized.html\"><code class=\"hljs\">Sized</code></a> are known\nas <a href=\"dynamically-sized-types.html\">dynamically sized types</a>. Since all values of a <code class=\"hljs\">Sized</code> type share the same\nsize and alignment, we refer to those shared values as the size of the type and\nthe alignment of the type respectively.</p>\n<h2 id=\"primitive-data-layout\"><a class=\"header\" href=\"#primitive-data-layout\">Primitive Data Layout</a></h2>\n<p>The size of most primitives is given in this table.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Type</th><th><code class=\"hljs\">size_of::&lt;Type&gt;()</code></th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">bool</code></td><td>1</td></tr>\n<tr><td><code class=\"hljs\">u8</code> / <code class=\"hljs\">i8</code></td><td>1</td></tr>\n<tr><td><code class=\"hljs\">u16</code> / <code class=\"hljs\">i16</code></td><td>2</td></tr>\n<tr><td><code class=\"hljs\">u32</code> / <code class=\"hljs\">i32</code></td><td>4</td></tr>\n<tr><td><code class=\"hljs\">u64</code> / <code class=\"hljs\">i64</code></td><td>8</td></tr>\n<tr><td><code class=\"hljs\">u128</code> / <code class=\"hljs\">i128</code></td><td>16</td></tr>\n<tr><td><code class=\"hljs\">usize</code> / <code class=\"hljs\">isize</code></td><td>See below</td></tr>\n<tr><td><code class=\"hljs\">f32</code></td><td>4</td></tr>\n<tr><td><code class=\"hljs\">f64</code></td><td>8</td></tr>\n<tr><td><code class=\"hljs\">char</code></td><td>4</td></tr>\n</tbody></table>\n</div>\n<p><code class=\"hljs\">usize</code> and <code class=\"hljs\">isize</code> have a size big enough to contain every address on the\ntarget platform. For example, on a 32 bit target, this is 4 bytes, and on a 64\nbit target, this is 8 bytes.</p>\n<p>The alignment of primitives is platform-specific.\nIn most cases, their alignment is equal to their size, but it may be less.\nIn particular, <code class=\"hljs\">i128</code> and <code class=\"hljs\">u128</code> are often aligned to 4 or 8 bytes even though\ntheir size is 16, and on many 32-bit platforms, <code class=\"hljs\">i64</code>, <code class=\"hljs\">u64</code>, and <code class=\"hljs\">f64</code> are only\naligned to 4 bytes, not 8.</p>\n<h2 id=\"pointers-and-references-layout\"><a class=\"header\" href=\"#pointers-and-references-layout\">Pointers and References Layout</a></h2>\n<p>Pointers and references have the same layout. Mutability of the pointer or\nreference does not change the layout.</p>\n<p>Pointers to sized types have the same size and alignment as <code class=\"hljs\">usize</code>.</p>\n<p>Pointers to unsized types are sized. The size and alignment is guaranteed to be\nat least equal to the size and alignment of a pointer.</p>\n<blockquote>\n<p>Note: Though you should not rely on this, all pointers to\n<abbr title=\"Dynamically Sized Types\">DSTs</abbr> are currently twice the\nsize of the size of <code class=\"hljs\">usize</code> and have the same alignment.</p>\n</blockquote>\n<h2 id=\"array-layout\"><a class=\"header\" href=\"#array-layout\">Array Layout</a></h2>\n<p>An array of <code class=\"hljs\">[T; N]</code> has a size of <code class=\"hljs\">size_of::&lt;T&gt;() * N</code> and the same alignment\nof <code class=\"hljs\">T</code>. Arrays are laid out so that the zero-based <code class=\"hljs\">nth</code> element of the array\nis offset from the start of the array by <code class=\"hljs\">n * size_of::&lt;T&gt;()</code> bytes.</p>\n<h2 id=\"slice-layout\"><a class=\"header\" href=\"#slice-layout\">Slice Layout</a></h2>\n<p>Slices have the same layout as the section of the array they slice.</p>\n<blockquote>\n<p>Note: This is about the raw <code class=\"hljs\">[T]</code> type, not pointers (<code class=\"hljs\">&amp;[T]</code>, <code class=\"hljs\">Box&lt;[T]&gt;</code>,\netc.) to slices.</p>\n</blockquote>\n<h2 id=\"str-layout\"><a class=\"header\" href=\"#str-layout\"><code>str</code> Layout</a></h2>\n<p>String slices are a UTF-8 representation of characters that have the same layout as slices of type <code class=\"hljs\">[u8]</code>.</p>\n<h2 id=\"tuple-layout\"><a class=\"header\" href=\"#tuple-layout\">Tuple Layout</a></h2>\n<p>Tuples are laid out according to the <a href=\"type-layout.html#the-rust-representation\"><code class=\"hljs\">Rust</code> representation</a>.</p>\n<p>The exception to this is the unit tuple (<code class=\"hljs\">()</code>), which is guaranteed as a\nzero-sized type to have a size of 0 and an alignment of 1.</p>\n<h2 id=\"trait-object-layout\"><a class=\"header\" href=\"#trait-object-layout\">Trait Object Layout</a></h2>\n<p>Trait objects have the same layout as the value the trait object is of.</p>\n<blockquote>\n<p>Note: This is about the raw trait object types, not pointers (<code class=\"hljs\">&amp;dyn Trait</code>,\n<code class=\"hljs\">Box&lt;dyn Trait&gt;</code>, etc.) to trait objects.</p>\n</blockquote>\n<h2 id=\"closure-layout\"><a class=\"header\" href=\"#closure-layout\">Closure Layout</a></h2>\n<p>Closures have no layout guarantees.</p>\n<h2 id=\"representations\"><a class=\"header\" href=\"#representations\">Representations</a></h2>\n<p>All user-defined composite types (<code class=\"hljs\">struct</code>s, <code class=\"hljs\">enum</code>s, and <code class=\"hljs\">union</code>s) have a\n<em>representation</em> that specifies what the layout is for the type. The possible\nrepresentations for a type are:</p>\n<ul>\n<li><a href=\"type-layout.html#the-rust-representation\"><code class=\"hljs\">Rust</code></a> (default)</li>\n<li><a href=\"type-layout.html#the-c-representation\"><code class=\"hljs\">C</code></a></li>\n<li>The <a href=\"type-layout.html#primitive-representations\">primitive representations</a></li>\n<li><a href=\"type-layout.html#the-transparent-representation\"><code class=\"hljs\">transparent</code></a></li>\n</ul>\n<p>The representation of a type can be changed by applying the <code class=\"hljs\">repr</code> attribute\nto it. The following example shows a struct with a <code class=\"hljs\">C</code> representation.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreeInts</span></span> {\n    first: <span class=\"hljs-built_in\">i16</span>,\n    second: <span class=\"hljs-built_in\">i8</span>,\n    third: <span class=\"hljs-built_in\">i32</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The alignment may be raised or lowered with the <code class=\"hljs\">align</code> and <code class=\"hljs\">packed</code> modifiers\nrespectively. They alter the representation specified in the attribute.\nIf no representation is specified, the default one is altered.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Default representation, alignment lowered to 2.</span>\n<span class=\"hljs-meta\">#[repr(packed(2))]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PackedStruct</span></span> {\n    first: <span class=\"hljs-built_in\">i16</span>,\n    second: <span class=\"hljs-built_in\">i8</span>,\n    third: <span class=\"hljs-built_in\">i32</span>\n}\n\n<span class=\"hljs-comment\">// C representation, alignment raised to 8</span>\n<span class=\"hljs-meta\">#[repr(C, align(8))]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">AlignedStruct</span></span> {\n    first: <span class=\"hljs-built_in\">i16</span>,\n    second: <span class=\"hljs-built_in\">i8</span>,\n    third: <span class=\"hljs-built_in\">i32</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p>Note: As a consequence of the representation being an attribute on the item,\nthe representation does not depend on generic parameters. Any two types with\nthe same name have the same representation. For example, <code class=\"hljs\">Foo&lt;Bar&gt;</code> and\n<code class=\"hljs\">Foo&lt;Baz&gt;</code> both have the same representation.</p>\n</blockquote>\n<p>The representation of a type can change the padding between fields, but does\nnot change the layout of the fields themselves. For example, a struct with a\n<code class=\"hljs\">C</code> representation that contains a struct <code class=\"hljs\">Inner</code> with the default\nrepresentation will not change the layout of <code class=\"hljs\">Inner</code>.</p>\n<h3 id=\"the-rust-representation\"><a class=\"header\" href=\"#the-rust-representation\"></a><a id=\"the-default-representation\"></a> The <code class=\"hljs\">Rust</code> Representation</h3>\n<p>The <code class=\"hljs\">Rust</code> representation is the default representation for nominal types\nwithout a <code class=\"hljs\">repr</code> attribute. Using this representation explicitly through a\n<code class=\"hljs\">repr</code> attribute is guaranteed to be the same as omitting the attribute\nentirely.</p>\n<p>The only data layout guarantees made by this representation are those required\nfor soundness. They are:</p>\n<ol>\n<li>The fields are properly aligned.</li>\n<li>The fields do not overlap.</li>\n<li>The alignment of the type is at least the maximum alignment of its fields.</li>\n</ol>\n<p>Formally, the first guarantee means that the offset of any field is divisible by\nthat field's alignment. The second guarantee means that the fields can be\nordered such that the offset plus the size of any field is less than or equal to\nthe offset of the next field in the ordering. The ordering does not have to be\nthe same as the order in which the fields are specified in the declaration of\nthe type.</p>\n<p>Be aware that the second guarantee does not imply that the fields have distinct\naddresses: zero-sized types may have the same address as other fields in the\nsame struct.</p>\n<p>There are no other guarantees of data layout made by this representation.</p>\n<h3 id=\"the-c-representation\"><a class=\"header\" href=\"#the-c-representation\">The <code>C</code> Representation</a></h3>\n<p>The <code class=\"hljs\">C</code> representation is designed for dual purposes. One purpose is for\ncreating types that are interoperable with the C Language. The second purpose is\nto create types that you can soundly perform operations on that rely on data\nlayout such as reinterpreting values as a different type.</p>\n<p>Because of this dual purpose, it is possible to create types that are not useful\nfor interfacing with the C programming language.</p>\n<p>This representation can be applied to structs, unions, and enums. The exception\nis <a href=\"items/enumerations.html#zero-variant-enums\">zero-variant enums</a> for which the <code class=\"hljs\">C</code> representation is an error.</p>\n<h4 id=\"reprc-structs\"><a class=\"header\" href=\"#reprc-structs\"><code>#[repr(C)]</code> Structs</a></h4>\n<p>The alignment of the struct is the alignment of the most-aligned field in it.</p>\n<p>The size and offset of fields is determined by the following algorithm.</p>\n<p>Start with a current offset of 0 bytes.</p>\n<p>For each field in declaration order in the struct, first determine the size and\nalignment of the field. If the current offset is not a multiple of the field's\nalignment, then add padding bytes to the current offset until it is a multiple\nof the field's alignment. The offset for the field is what the current offset\nis now. Then increase the current offset by the size of the field.</p>\n<p>Finally, the size of the struct is the current offset rounded up to the nearest\nmultiple of the struct's alignment.</p>\n<p>Here is this algorithm described in pseudocode.</p>\n<!-- ignore: pseudocode -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">/// Returns the amount of padding needed after `offset` to ensure that the</span>\n<span class=\"hljs-comment\">/// following address will be aligned to `alignment`.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">padding_needed_for</span></span>(offset: <span class=\"hljs-built_in\">usize</span>, alignment: <span class=\"hljs-built_in\">usize</span>) -&gt; <span class=\"hljs-built_in\">usize</span> {\n    <span class=\"hljs-keyword\">let</span> misalignment = offset % alignment;\n    <span class=\"hljs-keyword\">if</span> misalignment &gt; <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-comment\">// round up to next multiple of `alignment`</span>\n        alignment - misalignment\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// already a multiple of `alignment`</span>\n        <span class=\"hljs-number\">0</span>\n    }\n}\n\n<span class=\"hljs-keyword\">struct</span>.alignment = <span class=\"hljs-keyword\">struct</span>.fields().map(|field| field.alignment).max();\n\n<span class=\"hljs-keyword\">let</span> current_offset = 0;\n\n<span class=\"hljs-keyword\">for</span> field <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">struct</span>.fields_in_declaration_order() {\n    // Increase the current offset so that it's a multiple of the alignment\n    // of this field. For the first field, this will always be zero.\n    // The skipped bytes are called padding bytes.\n    current_offset += padding_needed_for(current_offset, field.alignment);\n\n    <span class=\"hljs-keyword\">struct</span>[field].offset = current_offset;\n\n    current_offset += field.size;\n}\n\n<span class=\"hljs-keyword\">struct</span>.size = current_offset + padding_needed_for(current_offset, <span class=\"hljs-keyword\">struct</span>.alignment);</code></pre>\n<div class=\"warning\">\n<p>Warning: This pseudocode uses a naive algorithm that ignores overflow issues for\nthe sake of clarity. To perform memory layout computations in actual code, use\n<a href=\"../std/alloc/struct.Layout.html\"><code class=\"hljs\">Layout</code></a>.</p>\n</div>\n<blockquote>\n<p>Note: This algorithm can produce zero-sized structs. In C, an empty struct\ndeclaration like <code class=\"hljs\">struct Foo { }</code> is illegal. However, both gcc and clang\nsupport options to enable such structs, and assign them size zero. C++, in\ncontrast, gives empty structs a size of 1, unless they are inherited from or\nthey are fields that have the <code class=\"hljs\">[[no_unique_address]]</code> attribute, in which\ncase they do not increase the overall size of the struct.</p>\n</blockquote>\n<h4 id=\"reprc-unions\"><a class=\"header\" href=\"#reprc-unions\"><code>#[repr(C)]</code> Unions</a></h4>\n<p>A union declared with <code class=\"hljs\">#[repr(C)]</code> will have the same size and alignment as an\nequivalent C union declaration in the C language for the target platform.\nThe union will have a size of the maximum size of all of its fields rounded to\nits alignment, and an alignment of the maximum alignment of all of its fields.\nThese maximums may come from different fields.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">Union</span></span> {\n    f1: <span class=\"hljs-built_in\">u16</span>,\n    f2: [<span class=\"hljs-built_in\">u8</span>; <span class=\"hljs-number\">4</span>],\n}\n\n<span class=\"hljs-built_in\">assert_eq!</span>(std::mem::size_of::&lt;Union&gt;(), <span class=\"hljs-number\">4</span>);  <span class=\"hljs-comment\">// From f2</span>\n<span class=\"hljs-built_in\">assert_eq!</span>(std::mem::align_of::&lt;Union&gt;(), <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// From f1</span>\n\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">SizeRoundedUp</span></span> {\n   a: <span class=\"hljs-built_in\">u32</span>,\n   b: [<span class=\"hljs-built_in\">u16</span>; <span class=\"hljs-number\">3</span>],\n}\n\n<span class=\"hljs-built_in\">assert_eq!</span>(std::mem::size_of::&lt;SizeRoundedUp&gt;(), <span class=\"hljs-number\">8</span>);  <span class=\"hljs-comment\">// Size of 6 from b,</span>\n                                                      <span class=\"hljs-comment\">// rounded up to 8 from</span>\n                                                      <span class=\"hljs-comment\">// alignment of a.</span>\n<span class=\"hljs-built_in\">assert_eq!</span>(std::mem::align_of::&lt;SizeRoundedUp&gt;(), <span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">// From a</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h4 id=\"reprc-field-less-enums\"><a class=\"header\" href=\"#reprc-field-less-enums\"><code>#[repr(C)]</code> Field-less Enums</a></h4>\n<p>For <a href=\"items/enumerations.html#field-less-enum\">field-less enums</a>, the <code class=\"hljs\">C</code> representation has the size and alignment of\nthe default <code class=\"hljs\">enum</code> size and alignment for the target platform's C ABI.</p>\n<blockquote>\n<p>Note: The enum representation in C is implementation defined, so this is\nreally a \"best guess\". In particular, this may be incorrect when the C code\nof interest is compiled with certain flags.</p>\n</blockquote>\n<div class=\"warning\">\n<p>Warning: There are crucial differences between an <code class=\"hljs\">enum</code> in the C language and\nRust's <a href=\"items/enumerations.html#field-less-enum\">field-less enums</a> with this representation. An <code class=\"hljs\">enum</code> in C is\nmostly a <code class=\"hljs\">typedef</code> plus some named constants; in other words, an object of an\n<code class=\"hljs\">enum</code> type can hold any integer value. For example, this is often used for\nbitflags in <code class=\"hljs\">C</code>. In contrast, Rust’s <a href=\"items/enumerations.html#field-less-enum\">field-less enums</a> can only legally hold\nthe discriminant values, everything else is <a href=\"behavior-considered-undefined.html\">undefined behavior</a>. Therefore,\nusing a field-less enum in FFI to model a C <code class=\"hljs\">enum</code> is often wrong.</p>\n</div>\n<h4 id=\"reprc-enums-with-fields\"><a class=\"header\" href=\"#reprc-enums-with-fields\"><code>#[repr(C)]</code> Enums With Fields</a></h4>\n<p>The representation of a <code class=\"hljs\">repr(C)</code> enum with fields is a <code class=\"hljs\">repr(C)</code> struct with\ntwo fields, also called a \"tagged union\" in C:</p>\n<ul>\n<li>a <code class=\"hljs\">repr(C)</code> version of the enum with all fields removed (\"the tag\")</li>\n<li>a <code class=\"hljs\">repr(C)</code> union of <code class=\"hljs\">repr(C)</code> structs for the fields of each variant that had\nthem (\"the payload\")</li>\n</ul>\n<blockquote>\n<p>Note: Due to the representation of <code class=\"hljs\">repr(C)</code> structs and unions, if a variant\nhas a single field there is no difference between putting that field directly\nin the union or wrapping it in a struct; any system which wishes to manipulate\nsuch an <code class=\"hljs\">enum</code>'s representation may therefore use whichever form is more\nconvenient or consistent for them.</p>\n</blockquote>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// This Enum has the same representation as ...</span>\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">MyEnum</span></span> {\n    A(<span class=\"hljs-built_in\">u32</span>),\n    B(<span class=\"hljs-built_in\">f32</span>, <span class=\"hljs-built_in\">u64</span>),\n    C { x: <span class=\"hljs-built_in\">u32</span>, y: <span class=\"hljs-built_in\">u8</span> },\n    D,\n }\n\n<span class=\"hljs-comment\">// ... this struct.</span>\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyEnumRepr</span></span> {\n    tag: MyEnumDiscriminant,\n    payload: MyEnumFields,\n}\n\n<span class=\"hljs-comment\">// This is the discriminant enum.</span>\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">MyEnumDiscriminant</span></span> { A, B, C, D }\n\n<span class=\"hljs-comment\">// This is the variant union.</span>\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">MyEnumFields</span></span> {\n    A: MyAFields,\n    B: MyBFields,\n    C: MyCFields,\n    D: MyDFields,\n}\n\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-meta\">#[derive(Copy, Clone)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyAFields</span></span>(<span class=\"hljs-built_in\">u32</span>);\n\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-meta\">#[derive(Copy, Clone)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyBFields</span></span>(<span class=\"hljs-built_in\">f32</span>, <span class=\"hljs-built_in\">u64</span>);\n\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-meta\">#[derive(Copy, Clone)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyCFields</span></span> { x: <span class=\"hljs-built_in\">u32</span>, y: <span class=\"hljs-built_in\">u8</span> }\n\n<span class=\"hljs-comment\">// This struct could be omitted (it is a zero-sized type), and it must be in</span>\n<span class=\"hljs-comment\">// C/C++ headers.</span>\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-meta\">#[derive(Copy, Clone)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyDFields</span></span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p>Note: <code class=\"hljs\">union</code>s with non-<code class=\"hljs\">Copy</code> fields are unstable, see <a href=\"https://github.com/rust-lang/rust/issues/55149\">55149</a>.</p>\n</blockquote>\n<h3 id=\"primitive-representations\"><a class=\"header\" href=\"#primitive-representations\">Primitive representations</a></h3>\n<p>The <em>primitive representations</em> are the representations with the same names as\nthe primitive integer types. That is: <code class=\"hljs\">u8</code>, <code class=\"hljs\">u16</code>, <code class=\"hljs\">u32</code>, <code class=\"hljs\">u64</code>, <code class=\"hljs\">u128</code>,\n<code class=\"hljs\">usize</code>, <code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">i128</code>, and <code class=\"hljs\">isize</code>.</p>\n<p>Primitive representations can only be applied to enumerations and have\ndifferent behavior whether the enum has fields or no fields. It is an error\nfor <a href=\"items/enumerations.html#zero-variant-enums\">zero-variant enums</a> to have a primitive representation. Combining\ntwo primitive representations together is an error.</p>\n<h4 id=\"primitive-representation-of-field-less-enums\"><a class=\"header\" href=\"#primitive-representation-of-field-less-enums\">Primitive Representation of Field-less Enums</a></h4>\n<p>For <a href=\"items/enumerations.html#field-less-enum\">field-less enums</a>, primitive representations set the size and alignment to\nbe the same as the primitive type of the same name. For example, a field-less\nenum with a <code class=\"hljs\">u8</code> representation can only have discriminants between 0 and 255\ninclusive.</p>\n<h4 id=\"primitive-representation-of-enums-with-fields\"><a class=\"header\" href=\"#primitive-representation-of-enums-with-fields\">Primitive Representation of Enums With Fields</a></h4>\n<p>The representation of a primitive representation enum is a <code class=\"hljs\">repr(C)</code> union of\n<code class=\"hljs\">repr(C)</code> structs for each variant with a field. The first field of each struct\nin the union is the primitive representation version of the enum with all fields\nremoved (\"the tag\") and the remaining fields are the fields of that variant.</p>\n<blockquote>\n<p>Note: This representation is unchanged if the tag is given its own member in\nthe union, should that make manipulation more clear for you (although to\nfollow the C++ standard the tag member should be wrapped in a <code class=\"hljs\">struct</code>).</p>\n</blockquote>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// This enum has the same representation as ...</span>\n<span class=\"hljs-meta\">#[repr(u8)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">MyEnum</span></span> {\n    A(<span class=\"hljs-built_in\">u32</span>),\n    B(<span class=\"hljs-built_in\">f32</span>, <span class=\"hljs-built_in\">u64</span>),\n    C { x: <span class=\"hljs-built_in\">u32</span>, y: <span class=\"hljs-built_in\">u8</span> },\n    D,\n }\n\n<span class=\"hljs-comment\">// ... this union.</span>\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">MyEnumRepr</span></span> {\n    A: MyVariantA,\n    B: MyVariantB,\n    C: MyVariantC,\n    D: MyVariantD,\n}\n\n<span class=\"hljs-comment\">// This is the discriminant enum.</span>\n<span class=\"hljs-meta\">#[repr(u8)]</span>\n<span class=\"hljs-meta\">#[derive(Copy, Clone)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">MyEnumDiscriminant</span></span> { A, B, C, D }\n\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-meta\">#[derive(Clone, Copy)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyVariantA</span></span>(MyEnumDiscriminant, <span class=\"hljs-built_in\">u32</span>);\n\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-meta\">#[derive(Clone, Copy)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyVariantB</span></span>(MyEnumDiscriminant, <span class=\"hljs-built_in\">f32</span>, <span class=\"hljs-built_in\">u64</span>);\n\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-meta\">#[derive(Clone, Copy)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyVariantC</span></span> { tag: MyEnumDiscriminant, x: <span class=\"hljs-built_in\">u32</span>, y: <span class=\"hljs-built_in\">u8</span> }\n\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-meta\">#[derive(Clone, Copy)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyVariantD</span></span>(MyEnumDiscriminant);\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p>Note: <code class=\"hljs\">union</code>s with non-<code class=\"hljs\">Copy</code> fields are unstable, see <a href=\"https://github.com/rust-lang/rust/issues/55149\">55149</a>.</p>\n</blockquote>\n<h4 id=\"combining-primitive-representations-of-enums-with-fields-and-reprc\"><a class=\"header\" href=\"#combining-primitive-representations-of-enums-with-fields-and-reprc\">Combining primitive representations of enums with fields and <code>#[repr(C)]</code></a></h4>\n<p>For enums with fields, it is also possible to combine <code class=\"hljs\">repr(C)</code> and a\nprimitive representation (e.g., <code class=\"hljs\">repr(C, u8)</code>). This modifies the <a href=\"type-layout.html#reprc-enums-with-fields\"><code class=\"hljs\">repr(C)</code></a> by\nchanging the representation of the discriminant enum to the chosen primitive\ninstead. So, if you chose the <code class=\"hljs\">u8</code> representation, then the discriminant enum\nwould have a size and alignment of 1 byte.</p>\n<p>The discriminant enum from the example <a href=\"type-layout.html#reprc-enums-with-fields\">earlier</a> then becomes:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[repr(C, u8)]</span> <span class=\"hljs-comment\">// `u8` was added</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">MyEnum</span></span> {\n    A(<span class=\"hljs-built_in\">u32</span>),\n    B(<span class=\"hljs-built_in\">f32</span>, <span class=\"hljs-built_in\">u64</span>),\n    C { x: <span class=\"hljs-built_in\">u32</span>, y: <span class=\"hljs-built_in\">u8</span> },\n    D,\n }\n\n<span class=\"hljs-comment\">// ...</span>\n\n<span class=\"hljs-meta\">#[repr(u8)]</span> <span class=\"hljs-comment\">// So `u8` is used here instead of `C`</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">MyEnumDiscriminant</span></span> { A, B, C, D }\n\n<span class=\"hljs-comment\">// ...</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>For example, with a <code class=\"hljs\">repr(C, u8)</code> enum it is not possible to have 257 unique\ndiscriminants (\"tags\") whereas the same enum with only a <code class=\"hljs\">repr(C)</code> attribute\nwill compile without any problems.</p>\n<p>Using a primitive representation in addition to <code class=\"hljs\">repr(C)</code> can change the size of\nan enum from the <code class=\"hljs\">repr(C)</code> form:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">EnumC</span></span> {\n    Variant0(<span class=\"hljs-built_in\">u8</span>),\n    Variant1,\n}\n\n<span class=\"hljs-meta\">#[repr(C, u8)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Enum8</span></span> {\n    Variant0(<span class=\"hljs-built_in\">u8</span>),\n    Variant1,\n}\n\n<span class=\"hljs-meta\">#[repr(C, u16)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Enum16</span></span> {\n    Variant0(<span class=\"hljs-built_in\">u8</span>),\n    Variant1,\n}\n\n<span class=\"hljs-comment\">// The size of the C representation is platform dependant</span>\n<span class=\"hljs-built_in\">assert_eq!</span>(std::mem::size_of::&lt;EnumC&gt;(), <span class=\"hljs-number\">8</span>);\n<span class=\"hljs-comment\">// One byte for the discriminant and one byte for the value in Enum8::Variant0</span>\n<span class=\"hljs-built_in\">assert_eq!</span>(std::mem::size_of::&lt;Enum8&gt;(), <span class=\"hljs-number\">2</span>);\n<span class=\"hljs-comment\">// Two bytes for the discriminant and one byte for the value in Enum16::Variant0</span>\n<span class=\"hljs-comment\">// plus one byte of padding.</span>\n<span class=\"hljs-built_in\">assert_eq!</span>(std::mem::size_of::&lt;Enum16&gt;(), <span class=\"hljs-number\">4</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"the-alignment-modifiers\"><a class=\"header\" href=\"#the-alignment-modifiers\">The alignment modifiers</a></h3>\n<p>The <code class=\"hljs\">align</code> and <code class=\"hljs\">packed</code> modifiers can be used to respectively raise or lower\nthe alignment of <code class=\"hljs\">struct</code>s and <code class=\"hljs\">union</code>s. <code class=\"hljs\">packed</code> may also alter the padding\nbetween fields (although it will not alter the padding inside of any field).\nOn their own, <code class=\"hljs\">align</code> and <code class=\"hljs\">packed</code> do not provide guarantees about the order\nof fields in the layout of a struct or the layout of an enum variant, although\nthey may be combined with representations (such as <code class=\"hljs\">C</code>) which do provide such\nguarantees.</p>\n<p>The alignment is specified as an integer parameter in the form of\n<code class=\"hljs\">#[repr(align(x))]</code> or <code class=\"hljs\">#[repr(packed(x))]</code>. The alignment value must be a\npower of two from 1 up to 2<sup>29</sup>. For <code class=\"hljs\">packed</code>, if no value is given,\nas in <code class=\"hljs\">#[repr(packed)]</code>, then the value is 1.</p>\n<p>For <code class=\"hljs\">align</code>, if the specified alignment is less than the alignment of the type\nwithout the <code class=\"hljs\">align</code> modifier, then the alignment is unaffected.</p>\n<p>For <code class=\"hljs\">packed</code>, if the specified alignment is greater than the type's alignment\nwithout the <code class=\"hljs\">packed</code> modifier, then the alignment and layout is unaffected.\nThe alignments of each field, for the purpose of positioning fields, is the\nsmaller of the specified alignment and the alignment of the field's type.\nInter-field padding is guaranteed to be the minimum required in order to\nsatisfy each field's (possibly altered) alignment (although note that, on its\nown, <code class=\"hljs\">packed</code> does not provide any guarantee about field ordering). An\nimportant consequence of these rules is that a type with <code class=\"hljs\">#[repr(packed(1))]</code>\n(or <code class=\"hljs\">#[repr(packed)]</code>) will have no inter-field padding.</p>\n<p>The <code class=\"hljs\">align</code> and <code class=\"hljs\">packed</code> modifiers cannot be applied on the same type and a\n<code class=\"hljs\">packed</code> type cannot transitively contain another <code class=\"hljs\">align</code>ed type. <code class=\"hljs\">align</code> and\n<code class=\"hljs\">packed</code> may only be applied to the <a href=\"type-layout.html#the-rust-representation\"><code class=\"hljs\">Rust</code></a> and <a href=\"type-layout.html#the-c-representation\"><code class=\"hljs\">C</code></a> representations.</p>\n<p>The <code class=\"hljs\">align</code> modifier can also be applied on an <code class=\"hljs\">enum</code>.\nWhen it is, the effect on the <code class=\"hljs\">enum</code>'s alignment is the same as if the <code class=\"hljs\">enum</code>\nwas wrapped in a newtype <code class=\"hljs\">struct</code> with the same <code class=\"hljs\">align</code> modifier.</p>\n<blockquote>\n<p>Note: References to unaligned fields are not allowed because it is <a href=\"behavior-considered-undefined.html\">undefined behavior</a>.\nWhen fields are unaligned due to an alignment modifier, consider the following options for using references and dereferences:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[repr(packed)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Packed</span></span> {\n    f1: <span class=\"hljs-built_in\">u8</span>,\n    f2: <span class=\"hljs-built_in\">u16</span>,\n}\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> e = Packed { f1: <span class=\"hljs-number\">1</span>, f2: <span class=\"hljs-number\">2</span> };\n<span class=\"hljs-comment\">// Instead of creating a reference to a field, copy the value to a local variable.</span>\n<span class=\"hljs-keyword\">let</span> x = e.f2;\n<span class=\"hljs-comment\">// Or in situations like `println!` which creates a reference, use braces</span>\n<span class=\"hljs-comment\">// to change it to a copy of the value.</span>\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, {e.f2});\n<span class=\"hljs-comment\">// Or if you need a pointer, use the unaligned methods for reading and writing</span>\n<span class=\"hljs-comment\">// instead of dereferencing the pointer directly.</span>\n<span class=\"hljs-keyword\">let</span> ptr: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u16</span> = std::ptr::addr_of!(e.f2);\n<span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-keyword\">unsafe</span> { ptr.read_unaligned() };\n<span class=\"hljs-keyword\">let</span> mut_ptr: *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u16</span> = std::ptr::addr_of_mut!(e.f2);\n<span class=\"hljs-keyword\">unsafe</span> { mut_ptr.write_unaligned(<span class=\"hljs-number\">3</span>) }\n<span class=\"boring\">}</span></code></pre></pre>\n</blockquote>\n<h3 id=\"the-transparent-representation\"><a class=\"header\" href=\"#the-transparent-representation\">The <code>transparent</code> Representation</a></h3>\n<p>The <code class=\"hljs\">transparent</code> representation can only be used on a <a href=\"items/structs.html\"><code class=\"hljs\">struct</code></a>\nor an <a href=\"items/enumerations.html\"><code class=\"hljs\">enum</code></a> with a single variant that has:</p>\n<ul>\n<li>a single field with non-zero size, and</li>\n<li>any number of fields with size 0 and alignment 1 (e.g. <a href=\"special-types-and-traits.html#phantomdatat\"><code class=\"hljs\">PhantomData&lt;T&gt;</code></a>).</li>\n</ul>\n<p>Structs and enums with this representation have the same layout and ABI\nas the single non-zero sized field.</p>\n<p>This is different than the <code class=\"hljs\">C</code> representation because\na struct with the <code class=\"hljs\">C</code> representation will always have the ABI of a <code class=\"hljs\">C</code> <code class=\"hljs\">struct</code>\nwhile, for example, a struct with the <code class=\"hljs\">transparent</code> representation with a\nprimitive field will have the ABI of the primitive field.</p>\n<p>Because this representation delegates type layout to another type, it cannot be\nused with any other representation.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"interior-mutability\"><a class=\"header\" href=\"#interior-mutability\">Interior Mutability</a></h1>\n<p>Sometimes a type needs to be mutated while having multiple aliases. In Rust this\nis achieved using a pattern called <em>interior mutability</em>. A type has interior\nmutability if its internal state can be changed through a <a href=\"types/pointer.html#shared-references-\">shared reference</a> to\nit. This goes against the usual <a href=\"behavior-considered-undefined.html\">requirement</a> that the value pointed to by a\nshared reference is not mutated.</p>\n<p><a href=\"../std/cell/struct.UnsafeCell.html\"><code class=\"hljs\">std::cell::UnsafeCell&lt;T&gt;</code></a> type is the only allowed way to disable\nthis requirement. When <code class=\"hljs\">UnsafeCell&lt;T&gt;</code> is immutably aliased, it is still safe to\nmutate, or obtain a mutable reference to, the <code class=\"hljs\">T</code> it contains. As with all\nother types, it is undefined behavior to have multiple <code class=\"hljs\">&amp;mut UnsafeCell&lt;T&gt;</code>\naliases.</p>\n<p>Other types with interior mutability can be created by using <code class=\"hljs\">UnsafeCell&lt;T&gt;</code> as\na field. The standard library provides a variety of types that provide safe\ninterior mutability APIs. For example, <a href=\"../std/cell/struct.RefCell.html\"><code class=\"hljs\">std::cell::RefCell&lt;T&gt;</code></a> uses run-time\nborrow checks to ensure the usual rules around multiple references. The\n<a href=\"../std/sync/atomic/index.html\"><code class=\"hljs\">std::sync::atomic</code></a> module contains types that wrap a value that is only\naccessed with atomic operations, allowing the value to be shared and mutated\nacross threads.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"subtyping-and-variance\"><a class=\"header\" href=\"#subtyping-and-variance\">Subtyping and Variance</a></h1>\n<p>Subtyping is implicit and can occur at any stage in type checking or\ninference. Subtyping is restricted to two cases:\nvariance with respect to lifetimes and between types with higher ranked\nlifetimes. If we were to erase lifetimes from types, then the only subtyping\nwould be due to type equality.</p>\n<p>Consider the following example: string literals always have <code class=\"hljs\">'static</code>\nlifetime. Nevertheless, we can assign <code class=\"hljs\">s</code> to <code class=\"hljs\">t</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;() {\n    <span class=\"hljs-keyword\">let</span> s: &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">\"hi\"</span>;\n    <span class=\"hljs-keyword\">let</span> t: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> = s;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Since <code class=\"hljs\">'static</code> outlives the lifetime parameter <code class=\"hljs\">'a</code>, <code class=\"hljs\">&amp;'static str</code> is a\nsubtype of <code class=\"hljs\">&amp;'a str</code>.</p>\n<p><a href=\"../nomicon/hrtb.html\">Higher-ranked</a> <a href=\"types/function-pointer.html\">function pointers</a> and <a href=\"types/trait-object.html\">trait objects</a> have another\nsubtype relation. They are subtypes of types that are given by substitutions of\nthe higher-ranked lifetimes. Some examples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Here 'a is substituted for 'static</span>\n<span class=\"hljs-keyword\">let</span> subtype: &amp;(<span class=\"hljs-keyword\">for</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>) = &amp;((|x| x) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(&amp;_) -&gt; &amp;_);\n<span class=\"hljs-keyword\">let</span> supertype: &amp;(<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(&amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">i32</span>) -&gt; &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">i32</span>) = subtype;\n\n<span class=\"hljs-comment\">// This works similarly for trait objects</span>\n<span class=\"hljs-keyword\">let</span> subtype: &amp;(<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-keyword\">for</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-built_in\">Fn</span>(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>) = &amp;|x| x;\n<span class=\"hljs-keyword\">let</span> supertype: &amp;(<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>(&amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">i32</span>) -&gt; &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">i32</span>) = subtype;\n\n<span class=\"hljs-comment\">// We can also substitute one higher-ranked lifetime for another</span>\n<span class=\"hljs-keyword\">let</span> subtype: &amp;(<span class=\"hljs-keyword\">for</span>&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-symbol\">'b</span>&gt; <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>, &amp;<span class=\"hljs-symbol\">'b</span> <span class=\"hljs-built_in\">i32</span>))= &amp;((|x, y| {}) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(&amp;_, &amp;_));\n<span class=\"hljs-keyword\">let</span> supertype: &amp;<span class=\"hljs-keyword\">for</span>&lt;<span class=\"hljs-symbol\">'c</span>&gt; <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(&amp;<span class=\"hljs-symbol\">'c</span> <span class=\"hljs-built_in\">i32</span>, &amp;<span class=\"hljs-symbol\">'c</span> <span class=\"hljs-built_in\">i32</span>) = subtype;\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"variance\"><a class=\"header\" href=\"#variance\">Variance</a></h2>\n<p>Variance is a property that generic types have with respect to their arguments.\nA generic type's <em>variance</em> in a parameter is how the subtyping of the\nparameter affects the subtyping of the type.</p>\n<ul>\n<li><code class=\"hljs\">F&lt;T&gt;</code> is <em>covariant</em> over <code class=\"hljs\">T</code> if <code class=\"hljs\">T</code> being a subtype of <code class=\"hljs\">U</code> implies that\n<code class=\"hljs\">F&lt;T&gt;</code> is a subtype of <code class=\"hljs\">F&lt;U&gt;</code> (subtyping \"passes through\")</li>\n<li><code class=\"hljs\">F&lt;T&gt;</code> is <em>contravariant</em> over <code class=\"hljs\">T</code> if <code class=\"hljs\">T</code> being a subtype of <code class=\"hljs\">U</code> implies that\n<code class=\"hljs\">F&lt;U&gt;</code> is a subtype of <code class=\"hljs\">F&lt;T&gt;</code></li>\n<li><code class=\"hljs\">F&lt;T&gt;</code> is <em>invariant</em> over <code class=\"hljs\">T</code> otherwise (no subtyping relation can be\nderived)</li>\n</ul>\n<p>Variance of types is automatically determined as follows</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Type</th><th>Variance in <code class=\"hljs\">'a</code></th><th>Variance in <code class=\"hljs\">T</code></th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">&amp;'a T</code></td><td>covariant</td><td>covariant</td></tr>\n<tr><td><code class=\"hljs\">&amp;'a mut T</code></td><td>covariant</td><td>invariant</td></tr>\n<tr><td><code class=\"hljs\">*const T</code></td><td></td><td>covariant</td></tr>\n<tr><td><code class=\"hljs\">*mut T</code></td><td></td><td>invariant</td></tr>\n<tr><td><code class=\"hljs\">[T]</code> and <code class=\"hljs\">[T; n]</code></td><td></td><td>covariant</td></tr>\n<tr><td><code class=\"hljs\">fn() -&gt; T</code></td><td></td><td>covariant</td></tr>\n<tr><td><code class=\"hljs\">fn(T) -&gt; ()</code></td><td></td><td>contravariant</td></tr>\n<tr><td><code class=\"hljs\">std::cell::UnsafeCell&lt;T&gt;</code></td><td></td><td>invariant</td></tr>\n<tr><td><code class=\"hljs\">std::marker::PhantomData&lt;T&gt;</code></td><td></td><td>covariant</td></tr>\n<tr><td><code class=\"hljs\">dyn Trait&lt;T&gt; + 'a</code></td><td>covariant</td><td>invariant</td></tr>\n</tbody></table>\n</div>\n<p>The variance of other <code class=\"hljs\">struct</code>, <code class=\"hljs\">enum</code>, and <code class=\"hljs\">union</code> types is decided by\nlooking at the variance of the types of their fields. If the parameter is used\nin positions with different variances then the parameter is invariant. For\nexample the following struct is covariant in <code class=\"hljs\">'a</code> and <code class=\"hljs\">T</code> and invariant in <code class=\"hljs\">'b</code>, <code class=\"hljs\">'c</code>,\nand <code class=\"hljs\">U</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::cell::UnsafeCell;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Variance</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-symbol\">'b</span>, <span class=\"hljs-symbol\">'c</span>, T, U: <span class=\"hljs-symbol\">'a</span>&gt; {\n    x: &amp;<span class=\"hljs-symbol\">'a</span> U,               <span class=\"hljs-comment\">// This makes `Variance` covariant in 'a, and would</span>\n                            <span class=\"hljs-comment\">// make it covariant in U, but U is used later</span>\n    y: *<span class=\"hljs-keyword\">const</span> T,            <span class=\"hljs-comment\">// Covariant in T</span>\n    z: UnsafeCell&lt;&amp;<span class=\"hljs-symbol\">'b</span> <span class=\"hljs-built_in\">f64</span>&gt;, <span class=\"hljs-comment\">// Invariant in 'b</span>\n    w: *<span class=\"hljs-keyword\">mut</span> U,              <span class=\"hljs-comment\">// Invariant in U, makes the whole struct invariant</span>\n\n    f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(&amp;<span class=\"hljs-symbol\">'c</span> ()) -&gt; &amp;<span class=\"hljs-symbol\">'c</span> () <span class=\"hljs-comment\">// Both co- and contravariant, makes 'c invariant</span>\n                            <span class=\"hljs-comment\">// in the struct.</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When used outside of an <code class=\"hljs\">struct</code>, <code class=\"hljs\">enum</code>, or <code class=\"hljs\">union</code>, the variance for parameters is checked at each location separately.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cell::UnsafeCell;\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">generic_tuple</span></span>&lt;<span class=\"hljs-symbol\">'short</span>, <span class=\"hljs-symbol\">'long</span>: <span class=\"hljs-symbol\">'short</span>&gt;(\n    <span class=\"hljs-comment\">// 'long is used inside of a tuple in both a co- and invariant position.</span>\n    x: (&amp;<span class=\"hljs-symbol\">'long</span> <span class=\"hljs-built_in\">u32</span>, UnsafeCell&lt;&amp;<span class=\"hljs-symbol\">'long</span> <span class=\"hljs-built_in\">u32</span>&gt;),\n) {\n    <span class=\"hljs-comment\">// As the variance at these positions is computed separately,</span>\n    <span class=\"hljs-comment\">// we can freely shrink 'long in the covariant position.</span>\n    <span class=\"hljs-keyword\">let</span> _: (&amp;<span class=\"hljs-symbol\">'short</span> <span class=\"hljs-built_in\">u32</span>, UnsafeCell&lt;&amp;<span class=\"hljs-symbol\">'long</span> <span class=\"hljs-built_in\">u32</span>&gt;) = x;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">takes_fn_ptr</span></span>&lt;<span class=\"hljs-symbol\">'short</span>, <span class=\"hljs-symbol\">'middle</span>: <span class=\"hljs-symbol\">'short</span>&gt;(\n    <span class=\"hljs-comment\">// 'middle is used in both a co- and contravariant position.</span>\n    f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(&amp;<span class=\"hljs-symbol\">'middle</span> ()) -&gt; &amp;<span class=\"hljs-symbol\">'middle</span> (),\n) {\n    <span class=\"hljs-comment\">// As the variance at these positions is computed separately,</span>\n    <span class=\"hljs-comment\">// we can freely shrink 'middle in the covariant position</span>\n    <span class=\"hljs-comment\">// and extend it in the contravariant position.</span>\n    <span class=\"hljs-keyword\">let</span> _: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(&amp;<span class=\"hljs-symbol\">'static</span> ()) -&gt; &amp;<span class=\"hljs-symbol\">'short</span> () = f;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"trait-and-lifetime-bounds\"><a class=\"header\" href=\"#trait-and-lifetime-bounds\">Trait and lifetime bounds</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>TypeParamBounds</em> :<br>\n&nbsp;&nbsp; <em>TypeParamBound</em> ( <code class=\"hljs\">+</code> <em>TypeParamBound</em> )<sup>*</sup> <code class=\"hljs\">+</code><sup>?</sup></p>\n<p><em>TypeParamBound</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>Lifetime</em> | <em>TraitBound</em></p>\n<p><em>TraitBound</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">?</code><sup>?</sup>\n<a href=\"trait-bounds.html#higher-ranked-trait-bounds\"><em>ForLifetimes</em></a><sup>?</sup> <a href=\"paths.html#paths-in-types\"><em>TypePath</em></a><br>\n&nbsp;&nbsp; | <code class=\"hljs\">(</code> <code class=\"hljs\">?</code><sup>?</sup>\n<a href=\"trait-bounds.html#higher-ranked-trait-bounds\"><em>ForLifetimes</em></a><sup>?</sup> <a href=\"paths.html#paths-in-types\"><em>TypePath</em></a> <code class=\"hljs\">)</code></p>\n<p><em>LifetimeBounds</em> :<br>\n&nbsp;&nbsp; ( <em>Lifetime</em> <code class=\"hljs\">+</code> )<sup>*</sup> <em>Lifetime</em><sup>?</sup></p>\n<p><em>Lifetime</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"tokens.html#lifetimes-and-loop-labels\">LIFETIME_OR_LABEL</a><br>\n&nbsp;&nbsp; | <code class=\"hljs\">'static</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">'_</code></p>\n</blockquote>\n<p><a href=\"items/traits.html#trait-bounds\">Trait</a> and lifetime bounds provide a way for <a href=\"items/generics.html\">generic items</a> to\nrestrict which types and lifetimes are used as their parameters. Bounds can be\nprovided on any type in a <a href=\"items/generics.html#where-clauses\">where clause</a>. There are also shorter forms for\ncertain common cases:</p>\n<ul>\n<li>Bounds written after declaring a <a href=\"items/generics.html\">generic parameter</a>:\n<code class=\"hljs\">fn f&lt;A: Copy&gt;() {}</code> is the same as <code class=\"hljs\">fn f&lt;A&gt;() where A: Copy {}</code>.</li>\n<li>In trait declarations as <a href=\"items/traits.html#supertraits\">supertraits</a>: <code class=\"hljs\">trait Circle : Shape {}</code> is\nequivalent to <code class=\"hljs\">trait Circle where Self : Shape {}</code>.</li>\n<li>In trait declarations as bounds on <a href=\"items/associated-items.html#associated-types\">associated types</a>:\n<code class=\"hljs\">trait A { type B: Copy; }</code> is equivalent to\n<code class=\"hljs\">trait A where Self::B: Copy { type B; }</code>.</li>\n</ul>\n<p>Bounds on an item must be satisfied when using the item. When type checking and\nborrow checking a generic item, the bounds can be used to determine that a\ntrait is implemented for a type. For example, given <code class=\"hljs\">Ty: Trait</code></p>\n<ul>\n<li>In the body of a generic function, methods from <code class=\"hljs\">Trait</code> can be called on <code class=\"hljs\">Ty</code>\nvalues. Likewise associated constants on the <code class=\"hljs\">Trait</code> can be used.</li>\n<li>Associated types from <code class=\"hljs\">Trait</code> can be used.</li>\n<li>Generic functions and types with a <code class=\"hljs\">T: Trait</code> bounds can be used with <code class=\"hljs\">Ty</code>\nbeing used for <code class=\"hljs\">T</code>.</li>\n</ul>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Surface</span></span> = <span class=\"hljs-built_in\">i32</span>;\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, surface: Surface);\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">name</span></span>() -&gt; &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw_twice</span></span>&lt;T: Shape&gt;(surface: Surface, sh: T) {\n    sh.draw(surface);           <span class=\"hljs-comment\">// Can call method because T: Shape</span>\n    sh.draw(surface);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">copy_and_draw_twice</span></span>&lt;T: <span class=\"hljs-built_in\">Copy</span>&gt;(surface: Surface, sh: T) <span class=\"hljs-keyword\">where</span> T: Shape {\n    <span class=\"hljs-keyword\">let</span> shape_copy = sh;        <span class=\"hljs-comment\">// doesn't move sh because T: Copy</span>\n    draw_twice(surface, sh);    <span class=\"hljs-comment\">// Can use generic function because T: Shape</span>\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Figure</span></span>&lt;S: Shape&gt;(S, S);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">name_figure</span></span>&lt;U: Shape&gt;(\n    figure: Figure&lt;U&gt;,          <span class=\"hljs-comment\">// Type Figure&lt;U&gt; is well-formed because U: Shape</span>\n) {\n    <span class=\"hljs-built_in\">println!</span>(\n        <span class=\"hljs-string\">\"Figure of two {}\"</span>,\n        U::name(),              <span class=\"hljs-comment\">// Can use associated function</span>\n    );\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Bounds that don't use the item's parameters or <a href=\"trait-bounds.html#higher-ranked-trait-bounds\">higher-ranked lifetimes</a> are checked when the item is defined.\nIt is an error for such a bound to be false.</p>\n<p><a href=\"special-types-and-traits.html#copy\"><code class=\"hljs\">Copy</code></a>, <a href=\"special-types-and-traits.html#clone\"><code class=\"hljs\">Clone</code></a>, and <a href=\"special-types-and-traits.html#sized\"><code class=\"hljs\">Sized</code></a> bounds are also checked for certain generic types when using the item, even if the use does not provide a concrete type.\nIt is an error to have <code class=\"hljs\">Copy</code> or <code class=\"hljs\">Clone</code> as a bound on a mutable reference, <a href=\"types/trait-object.html\">trait object</a>, or <a href=\"types/slice.html\">slice</a>.\nIt is an error to have <code class=\"hljs\">Sized</code> as a bound on a trait object or slice.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">A</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;\n<span class=\"hljs-keyword\">where</span>\n    <span class=\"hljs-built_in\">i32</span>: <span class=\"hljs-built_in\">Default</span>,           <span class=\"hljs-comment\">// Allowed, but not useful</span>\n    <span class=\"hljs-built_in\">i32</span>: <span class=\"hljs-built_in\">Iterator</span>,          <span class=\"hljs-comment\">// Error: `i32` is not an iterator</span>\n    &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> T: <span class=\"hljs-built_in\">Copy</span>,        <span class=\"hljs-comment\">// (at use) Error: the trait bound is not satisfied</span>\n    [T]: <span class=\"hljs-built_in\">Sized</span>,             <span class=\"hljs-comment\">// (at use) Error: size cannot be known at compilation</span>\n{\n    f: &amp;<span class=\"hljs-symbol\">'a</span> T,\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">UsesA</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;(A&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Trait and lifetime bounds are also used to name <a href=\"types/trait-object.html\">trait objects</a>.</p>\n<h2 id=\"sized\"><a class=\"header\" href=\"#sized\"><code>?Sized</code></a></h2>\n<p><code class=\"hljs\">?</code> is only used to relax the implicit <a href=\"special-types-and-traits.html#sized\"><code class=\"hljs\">Sized</code></a> trait bound for <a href=\"types/parameters.html\">type parameters</a> or <a href=\"items/associated-items.html#associated-types\">associated types</a>.\n<code class=\"hljs\">?Sized</code> may not be used as a bound for other types.</p>\n<h2 id=\"lifetime-bounds\"><a class=\"header\" href=\"#lifetime-bounds\">Lifetime bounds</a></h2>\n<p>Lifetime bounds can be applied to types or to other lifetimes.\nThe bound <code class=\"hljs\">'a: 'b</code> is usually read as <code class=\"hljs\">'a</code> <em>outlives</em> <code class=\"hljs\">'b</code>.\n<code class=\"hljs\">'a: 'b</code> means that <code class=\"hljs\">'a</code> lasts at least as long as <code class=\"hljs\">'b</code>, so a reference <code class=\"hljs\">&amp;'a ()</code> is valid whenever <code class=\"hljs\">&amp;'b ()</code> is valid.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-symbol\">'b</span>&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-keyword\">mut</span> y: &amp;<span class=\"hljs-symbol\">'b</span> <span class=\"hljs-built_in\">i32</span>) <span class=\"hljs-keyword\">where</span> <span class=\"hljs-symbol\">'a</span>: <span class=\"hljs-symbol\">'b</span> {\n    y = x;                      <span class=\"hljs-comment\">// &amp;'a i32 is a subtype of &amp;'b i32 because 'a: 'b</span>\n    <span class=\"hljs-keyword\">let</span> r: &amp;<span class=\"hljs-symbol\">'b</span> &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span> = &amp;&amp;<span class=\"hljs-number\">0</span>;   <span class=\"hljs-comment\">// &amp;'b &amp;'a i32 is well formed because 'a: 'b</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><code class=\"hljs\">T: 'a</code> means that all lifetime parameters of <code class=\"hljs\">T</code> outlive <code class=\"hljs\">'a</code>.\nFor example, if <code class=\"hljs\">'a</code> is an unconstrained lifetime parameter, then <code class=\"hljs\">i32: 'static</code> and <code class=\"hljs\">&amp;'static str: 'a</code> are satisfied, but <code class=\"hljs\">Vec&lt;&amp;'a ()&gt;: 'static</code> is not.</p>\n<h2 id=\"higher-ranked-trait-bounds\"><a class=\"header\" href=\"#higher-ranked-trait-bounds\">Higher-ranked trait bounds</a></h2>\n<blockquote>\n<p><em>ForLifetimes</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">for</code> <a href=\"items/generics.html\"><em>GenericParams</em></a></p>\n</blockquote>\n<p>Trait bounds may be <em>higher ranked</em> over lifetimes. These bounds specify a bound\nthat is true <em>for all</em> lifetimes. For example, a bound such as <code class=\"hljs\">for&lt;'a&gt; &amp;'a T: PartialEq&lt;i32&gt;</code> would require an implementation like</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">T</span></span>;\n</span><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-built_in\">PartialEq</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; <span class=\"hljs-keyword\">for</span> &amp;<span class=\"hljs-symbol\">'a</span> T {\n    <span class=\"hljs-comment\">// ...</span>\n<span class=\"boring\">   <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eq</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">bool</span> {<span class=\"hljs-literal\">true</span>}\n</span>}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>and could then be used to compare a <code class=\"hljs\">&amp;'a T</code> with any lifetime to an <code class=\"hljs\">i32</code>.</p>\n<p>Only a higher-ranked bound can be used here, because the lifetime of the reference is shorter than any possible lifetime parameter on the function:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">call_on_ref_zero</span></span>&lt;F&gt;(f: F) <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">for</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; F: <span class=\"hljs-built_in\">Fn</span>(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>) {\n    <span class=\"hljs-keyword\">let</span> zero = <span class=\"hljs-number\">0</span>;\n    f(&amp;zero);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Higher-ranked lifetimes may also be specified just before the trait: the only\ndifference is the <a href=\"names/scopes.html#higher-ranked-trait-bound-scopes\">scope</a> of the lifetime parameter, which extends only to the\nend of the following trait instead of the whole bound. This function is\nequivalent to the last one.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">call_on_ref_zero</span></span>&lt;F&gt;(f: F) <span class=\"hljs-keyword\">where</span> F: <span class=\"hljs-keyword\">for</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-built_in\">Fn</span>(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>) {\n    <span class=\"hljs-keyword\">let</span> zero = <span class=\"hljs-number\">0</span>;\n    f(&amp;zero);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"implied-bounds\"><a class=\"header\" href=\"#implied-bounds\">Implied bounds</a></h2>\n<p>Lifetime bounds required for types to be well-formed are sometimes inferred.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">requires_t_outlives_a</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> T) {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The type parameter <code class=\"hljs\">T</code> is required to outlive <code class=\"hljs\">'a</code> for the type <code class=\"hljs\">&amp;'a T</code> to be well-formed.\nThis is inferred because the function signature contains the type <code class=\"hljs\">&amp;'a T</code> which is\nonly valid if <code class=\"hljs\">T: 'a</code> holds.</p>\n<p>Implied bounds are added for all parameters and outputs of functions. Inside of <code class=\"hljs\">requires_t_outlives_a</code>\nyou can assume <code class=\"hljs\">T: 'a</code> to hold even if you don't explicitly specify this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">requires_t_outlives_a_not_implied</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt;() {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">requires_t_outlives_a</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> T) {\n    <span class=\"hljs-comment\">// This compiles, because `T: 'a` is implied by</span>\n    <span class=\"hljs-comment\">// the reference type `&amp;'a T`.</span>\n    requires_t_outlives_a_not_implied::&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;();\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail E0309 edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">requires_t_outlives_a_not_implied</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt;() {}\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">not_implied</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;() {\n    <span class=\"hljs-comment\">// This errors, because `T: 'a` is not implied by</span>\n    <span class=\"hljs-comment\">// the function signature.</span>\n    requires_t_outlives_a_not_implied::&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;();\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Only lifetime bounds are implied, trait bounds still have to be explicitly added.\nThe following example therefore causes an error:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail E0277 edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::fmt::<span class=\"hljs-built_in\">Debug</span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">IsDebug</span></span>&lt;T: <span class=\"hljs-built_in\">Debug</span>&gt;(T);\n<span class=\"hljs-comment\">// error[E0277]: `T` doesn't implement `Debug`</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">doesnt_specify_t_debug</span></span>&lt;T&gt;(x: IsDebug&lt;T&gt;) {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Lifetime bounds are also inferred for type definitions and impl blocks for any type:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-comment\">// This requires `T: 'a` to be well-formed</span>\n    <span class=\"hljs-comment\">// which is inferred by the compiler.</span>\n    field: &amp;<span class=\"hljs-symbol\">'a</span> T,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Enum</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-comment\">// This requires `T: 'a` to be well-formed,</span>\n    <span class=\"hljs-comment\">// which is inferred by the compiler.</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// Note that `T: 'a` is required even when only</span>\n    <span class=\"hljs-comment\">// using `Enum::OtherVariant`.</span>\n    SomeVariant(&amp;<span class=\"hljs-symbol\">'a</span> T),\n    OtherVariant,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt; {}\n\n<span class=\"hljs-comment\">// This would error because `T: 'a` is not implied by any type</span>\n<span class=\"hljs-comment\">// in the impl header.</span>\n<span class=\"hljs-comment\">//     impl&lt;'a, T&gt; Trait&lt;'a, T&gt; for () {}</span>\n\n<span class=\"hljs-comment\">// This compiles as `T: 'a` is implied by the self type `&amp;'a T`.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; Trait&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-keyword\">for</span> &amp;<span class=\"hljs-symbol\">'a</span> T {}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"type-coercions\"><a class=\"header\" href=\"#type-coercions\">Type coercions</a></h1>\n<p><strong>Type coercions</strong> are implicit operations that change the type of a value.\nThey happen automatically at specific locations and are highly restricted in\nwhat types actually coerce.</p>\n<p>Any conversions allowed by coercion can also be explicitly performed by the\n<a href=\"expressions/operator-expr.html#type-cast-expressions\">type cast operator</a>, <code class=\"hljs\">as</code>.</p>\n<p>Coercions are originally defined in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\">RFC 401</a> and expanded upon in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1558-closure-to-fn-coercion.md\">RFC 1558</a>.</p>\n<h2 id=\"coercion-sites\"><a class=\"header\" href=\"#coercion-sites\">Coercion sites</a></h2>\n<p>A coercion can only occur at certain coercion sites in a program; these are\ntypically places where the desired type is explicit or can be derived by\npropagation from explicit types (without type inference). Possible coercion\nsites are:</p>\n<ul>\n<li>\n<p><code class=\"hljs\">let</code> statements where an explicit type is given.</p>\n<p>For example, <code class=\"hljs\">&amp;mut 42</code> is coerced to have type <code class=\"hljs\">&amp;i8</code> in the following:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> _: &amp;<span class=\"hljs-built_in\">i8</span> = &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-number\">42</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n</li>\n<li>\n<p><code class=\"hljs\">static</code> and <code class=\"hljs\">const</code> item declarations (similar to <code class=\"hljs\">let</code> statements).</p>\n</li>\n<li>\n<p>Arguments for function calls</p>\n<p>The value being coerced is the actual parameter, and it is coerced to\nthe type of the formal parameter.</p>\n<p>For example, <code class=\"hljs\">&amp;mut 42</code> is coerced to have type <code class=\"hljs\">&amp;i8</code> in the following:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>(_: &amp;<span class=\"hljs-built_in\">i8</span>) { }\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    bar(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-number\">42</span>);\n}</code></pre></pre>\n<p>For method calls, the receiver (<code class=\"hljs\">self</code> parameter) type is coerced\ndifferently, see the documentation on <a href=\"expressions/method-call-expr.html\">method-call expressions</a> for details.</p>\n</li>\n<li>\n<p>Instantiations of struct, union, or enum variant fields</p>\n<p>For example, <code class=\"hljs\">&amp;mut 42</code> is coerced to have type <code class=\"hljs\">&amp;i8</code> in the following:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; { x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i8</span> }\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    Foo { x: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-number\">42</span> };\n}</code></pre></pre>\n</li>\n<li>\n<p>Function results—either the final line of a block if it is not\nsemicolon-terminated or any expression in a <code class=\"hljs\">return</code> statement</p>\n<p>For example, <code class=\"hljs\">x</code> is coerced to have type <code class=\"hljs\">&amp;dyn Display</code> in the following:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::fmt::Display;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(x: &amp;<span class=\"hljs-built_in\">u32</span>) -&gt; &amp;<span class=\"hljs-keyword\">dyn</span> Display {\n    x\n}\n<span class=\"boring\">}</span></code></pre></pre>\n</li>\n</ul>\n<p>If the expression in one of these coercion sites is a coercion-propagating\nexpression, then the relevant sub-expressions in that expression are also\ncoercion sites. Propagation recurses from these new coercion sites.\nPropagating expressions and their relevant sub-expressions are:</p>\n<ul>\n<li>\n<p>Array literals, where the array has type <code class=\"hljs\">[U; n]</code>. Each sub-expression in\nthe array literal is a coercion site for coercion to type <code class=\"hljs\">U</code>.</p>\n</li>\n<li>\n<p>Array literals with repeating syntax, where the array has type <code class=\"hljs\">[U; n]</code>. The\nrepeated sub-expression is a coercion site for coercion to type <code class=\"hljs\">U</code>.</p>\n</li>\n<li>\n<p>Tuples, where a tuple is a coercion site to type <code class=\"hljs\">(U_0, U_1, ..., U_n)</code>.\nEach sub-expression is a coercion site to the respective type, e.g. the\nzeroth sub-expression is a coercion site to type <code class=\"hljs\">U_0</code>.</p>\n</li>\n<li>\n<p>Parenthesized sub-expressions (<code class=\"hljs\">(e)</code>): if the expression has type <code class=\"hljs\">U</code>, then\nthe sub-expression is a coercion site to <code class=\"hljs\">U</code>.</p>\n</li>\n<li>\n<p>Blocks: if a block has type <code class=\"hljs\">U</code>, then the last expression in the block (if\nit is not semicolon-terminated) is a coercion site to <code class=\"hljs\">U</code>. This includes\nblocks which are part of control flow statements, such as <code class=\"hljs\">if</code>/<code class=\"hljs\">else</code>, if\nthe block has a known type.</p>\n</li>\n</ul>\n<h2 id=\"coercion-types\"><a class=\"header\" href=\"#coercion-types\">Coercion types</a></h2>\n<p>Coercion is allowed between the following types:</p>\n<ul>\n<li>\n<p><code class=\"hljs\">T</code> to <code class=\"hljs\">U</code> if <code class=\"hljs\">T</code> is a <a href=\"subtyping.html\">subtype</a> of <code class=\"hljs\">U</code> (<em>reflexive case</em>)</p>\n</li>\n<li>\n<p><code class=\"hljs\">T_1</code> to <code class=\"hljs\">T_3</code> where <code class=\"hljs\">T_1</code> coerces to <code class=\"hljs\">T_2</code> and <code class=\"hljs\">T_2</code> coerces to <code class=\"hljs\">T_3</code>\n(<em>transitive case</em>)</p>\n<p>Note that this is not fully supported yet.</p>\n</li>\n<li>\n<p><code class=\"hljs\">&amp;mut T</code> to <code class=\"hljs\">&amp;T</code></p>\n</li>\n<li>\n<p><code class=\"hljs\">*mut T</code> to <code class=\"hljs\">*const T</code></p>\n</li>\n<li>\n<p><code class=\"hljs\">&amp;T</code> to <code class=\"hljs\">*const T</code></p>\n</li>\n<li>\n<p><code class=\"hljs\">&amp;mut T</code> to <code class=\"hljs\">*mut T</code></p>\n</li>\n<li>\n<p><code class=\"hljs\">&amp;T</code> or <code class=\"hljs\">&amp;mut T</code> to <code class=\"hljs\">&amp;U</code> if <code class=\"hljs\">T</code> implements <code class=\"hljs\">Deref&lt;Target = U&gt;</code>. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-keyword\">use</span> std::ops::Deref;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">CharContainer</span></span> {\n    value: <span class=\"hljs-built_in\">char</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> Deref <span class=\"hljs-keyword\">for</span> CharContainer {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Target</span></span> = <span class=\"hljs-built_in\">char</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">deref</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">char</span> {\n        &amp;<span class=\"hljs-keyword\">self</span>.value\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(arg: &amp;<span class=\"hljs-built_in\">char</span>) {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = &amp;<span class=\"hljs-keyword\">mut</span> CharContainer { value: <span class=\"hljs-string\">'y'</span> };\n    foo(x); <span class=\"hljs-comment\">//&amp;mut CharContainer is coerced to &amp;char.</span>\n}</code></pre></pre>\n</li>\n<li>\n<p><code class=\"hljs\">&amp;mut T</code> to <code class=\"hljs\">&amp;mut U</code> if <code class=\"hljs\">T</code> implements <code class=\"hljs\">DerefMut&lt;Target = U&gt;</code>.</p>\n</li>\n<li>\n<p>TyCtor(<code class=\"hljs\">T</code>) to TyCtor(<code class=\"hljs\">U</code>), where TyCtor(<code class=\"hljs\">T</code>) is one of</p>\n<ul>\n<li><code class=\"hljs\">&amp;T</code></li>\n<li><code class=\"hljs\">&amp;mut T</code></li>\n<li><code class=\"hljs\">*const T</code></li>\n<li><code class=\"hljs\">*mut T</code></li>\n<li><code class=\"hljs\">Box&lt;T&gt;</code></li>\n</ul>\n<p>and where <code class=\"hljs\">U</code> can be obtained from <code class=\"hljs\">T</code> by <a href=\"type-coercions.html#unsized-coercions\">unsized coercion</a>.</p>\n  <!--In the future, coerce_inner will be recursively extended to tuples and\n  structs. In addition, coercions from subtraits to supertraits will be\n  added. See [RFC 401] for more details.-->\n</li>\n<li>\n<p>Function item types to <code class=\"hljs\">fn</code> pointers</p>\n</li>\n<li>\n<p>Non capturing closures to <code class=\"hljs\">fn</code> pointers</p>\n</li>\n<li>\n<p><code class=\"hljs\">!</code> to any <code class=\"hljs\">T</code></p>\n</li>\n</ul>\n<h3 id=\"unsized-coercions\"><a class=\"header\" href=\"#unsized-coercions\">Unsized Coercions</a></h3>\n<p>The following coercions are called <code class=\"hljs\">unsized coercions</code>, since they\nrelate to converting sized types to unsized types, and are permitted in a few\ncases where other coercions are not, as described above. They can still happen\nanywhere else a coercion can occur.</p>\n<p>Two traits, <a href=\"../std/marker/trait.Unsize.html\"><code class=\"hljs\">Unsize</code></a> and <a href=\"../std/ops/trait.CoerceUnsized.html\"><code class=\"hljs\">CoerceUnsized</code></a>, are used\nto assist in this process and expose it for library use. The following\ncoercions are built-ins and, if <code class=\"hljs\">T</code> can be coerced to <code class=\"hljs\">U</code> with one of them, then\nan implementation of <code class=\"hljs\">Unsize&lt;U&gt;</code> for <code class=\"hljs\">T</code> will be provided:</p>\n<ul>\n<li>\n<p><code class=\"hljs\">[T; n]</code> to <code class=\"hljs\">[T]</code>.</p>\n</li>\n<li>\n<p><code class=\"hljs\">T</code> to <code class=\"hljs\">dyn U</code>, when <code class=\"hljs\">T</code> implements <code class=\"hljs\">U + Sized</code>, and <code class=\"hljs\">U</code> is <a href=\"items/traits.html#object-safety\">object safe</a>.</p>\n</li>\n<li>\n<p><code class=\"hljs\">Foo&lt;..., T, ...&gt;</code> to <code class=\"hljs\">Foo&lt;..., U, ...&gt;</code>, when:</p>\n<ul>\n<li><code class=\"hljs\">Foo</code> is a struct.</li>\n<li><code class=\"hljs\">T</code> implements <code class=\"hljs\">Unsize&lt;U&gt;</code>.</li>\n<li>The last field of <code class=\"hljs\">Foo</code> has a type involving <code class=\"hljs\">T</code>.</li>\n<li>If that field has type <code class=\"hljs\">Bar&lt;T&gt;</code>, then <code class=\"hljs\">Bar&lt;T&gt;</code> implements <code class=\"hljs\">Unsized&lt;Bar&lt;U&gt;&gt;</code>.</li>\n<li>T is not part of the type of any other fields.</li>\n</ul>\n</li>\n</ul>\n<p>Additionally, a type <code class=\"hljs\">Foo&lt;T&gt;</code> can implement <code class=\"hljs\">CoerceUnsized&lt;Foo&lt;U&gt;&gt;</code> when <code class=\"hljs\">T</code>\nimplements <code class=\"hljs\">Unsize&lt;U&gt;</code> or <code class=\"hljs\">CoerceUnsized&lt;Foo&lt;U&gt;&gt;</code>. This allows it to provide a\nunsized coercion to <code class=\"hljs\">Foo&lt;U&gt;</code>.</p>\n<blockquote>\n<p>Note: While the definition of the unsized coercions and their implementation\nhas been stabilized, the traits themselves are not yet stable and therefore\ncan't be used directly in stable Rust.</p>\n</blockquote>\n<h2 id=\"least-upper-bound-coercions\"><a class=\"header\" href=\"#least-upper-bound-coercions\">Least upper bound coercions</a></h2>\n<p>In some contexts, the compiler must coerce together multiple types to try and\nfind the most general type. This is called a \"Least Upper Bound\" coercion.\nLUB coercion is used and only used in the following situations:</p>\n<ul>\n<li>To find the common type for a series of if branches.</li>\n<li>To find the common type for a series of match arms.</li>\n<li>To find the common type for array elements.</li>\n<li>To find the type for the return type of a closure with multiple return statements.</li>\n<li>To check the type for the return type of a function with multiple return statements.</li>\n</ul>\n<p>In each such case, there are a set of types <code class=\"hljs\">T0..Tn</code> to be mutually coerced\nto some target type <code class=\"hljs\">T_t</code>, which is unknown to start. Computing the LUB\ncoercion is done iteratively. The target type <code class=\"hljs\">T_t</code> begins as the type <code class=\"hljs\">T0</code>.\nFor each new type <code class=\"hljs\">Ti</code>, we consider whether</p>\n<ul>\n<li>If <code class=\"hljs\">Ti</code> can be coerced to the current target type <code class=\"hljs\">T_t</code>, then no change is made.</li>\n<li>Otherwise, check whether <code class=\"hljs\">T_t</code> can be coerced to <code class=\"hljs\">Ti</code>; if so, the <code class=\"hljs\">T_t</code> is\nchanged to <code class=\"hljs\">Ti</code>. (This check is also conditioned on whether all of the source\nexpressions considered thus far have implicit coercions.)</li>\n<li>If not, try to compute a mutual supertype of <code class=\"hljs\">T_t</code> and <code class=\"hljs\">Ti</code>, which will become the new target type.</li>\n</ul>\n<h3 id=\"examples-3\"><a class=\"header\" href=\"#examples-3\">Examples:</a></h3>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> (a, b, c) = (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n</span><span class=\"hljs-comment\">// For if branches</span>\n<span class=\"hljs-keyword\">let</span> bar = <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">true</span> {\n    a\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">false</span> {\n    b\n} <span class=\"hljs-keyword\">else</span> {\n    c\n};\n\n<span class=\"hljs-comment\">// For match arms</span>\n<span class=\"hljs-keyword\">let</span> baw = <span class=\"hljs-keyword\">match</span> <span class=\"hljs-number\">42</span> {\n    <span class=\"hljs-number\">0</span> =&gt; a,\n    <span class=\"hljs-number\">1</span> =&gt; b,\n    _ =&gt; c,\n};\n\n<span class=\"hljs-comment\">// For array elements</span>\n<span class=\"hljs-keyword\">let</span> bax = [a, b, c];\n\n<span class=\"hljs-comment\">// For closure with multiple return statements</span>\n<span class=\"hljs-keyword\">let</span> clo = || {\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">true</span> {\n        a\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">false</span> {\n        b\n    } <span class=\"hljs-keyword\">else</span> {\n        c\n    }\n};\n<span class=\"hljs-keyword\">let</span> baz = clo();\n\n<span class=\"hljs-comment\">// For type checking of function with multiple return statements</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> {\n    <span class=\"hljs-keyword\">let</span> (a, b, c) = (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-keyword\">match</span> <span class=\"hljs-number\">42</span> {\n        <span class=\"hljs-number\">0</span> =&gt; a,\n        <span class=\"hljs-number\">1</span> =&gt; b,\n        _ =&gt; c,\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In these examples, types of the <code class=\"hljs\">ba*</code> are found by LUB coercion. And the\ncompiler checks whether LUB coercion result of <code class=\"hljs\">a</code>, <code class=\"hljs\">b</code>, <code class=\"hljs\">c</code> is <code class=\"hljs\">i32</code> in the\nprocessing of the function <code class=\"hljs\">foo</code>.</p>\n<h3 id=\"caveat\"><a class=\"header\" href=\"#caveat\">Caveat</a></h3>\n<p>This description is obviously informal. Making it more precise is expected to\nproceed as part of a general effort to specify the Rust type checker more\nprecisely.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"destructors\"><a class=\"header\" href=\"#destructors\">Destructors</a></h1>\n<p>When an <a href=\"glossary.html#initialized\">initialized</a> <a href=\"variables.html\">variable</a> or <a href=\"expressions.html#temporaries\">temporary</a> goes out of\n<a href=\"destructors.html#drop-scopes\">scope</a>, its <em>destructor</em> is run, or it is <em>dropped</em>. <a href=\"expressions/operator-expr.html#assignment-expressions\">Assignment</a>\nalso runs the destructor of its left-hand operand, if it's initialized. If a\nvariable has been partially initialized, only its initialized fields are\ndropped.</p>\n<p>The destructor of a type <code class=\"hljs\">T</code> consists of:</p>\n<ol>\n<li>If <code class=\"hljs\">T: Drop</code>, calling <a href=\"../std/ops/trait.Drop.html#tymethod.drop\"><code class=\"hljs\">&lt;T as std::ops::Drop&gt;::drop</code></a></li>\n<li>Recursively running the destructor of all of its fields.\n<ul>\n<li>The fields of a <a href=\"types/struct.html\">struct</a> are dropped in declaration order.</li>\n<li>The fields of the active <a href=\"types/enum.html\">enum variant</a> are dropped in declaration order.</li>\n<li>The fields of a <a href=\"types/tuple.html\">tuple</a> are dropped in order.</li>\n<li>The elements of an <a href=\"types/array.html\">array</a> or owned <a href=\"types/slice.html\">slice</a> are dropped from the\nfirst element to the last.</li>\n<li>The variables that a <a href=\"types/closure.html\">closure</a> captures by move are dropped in an\nunspecified order.</li>\n<li><a href=\"types/trait-object.html\">Trait objects</a> run the destructor of the underlying type.</li>\n<li>Other types don't result in any further drops.</li>\n</ul>\n</li>\n</ol>\n<p>If a destructor must be run manually, such as when implementing your own smart\npointer, <a href=\"../std/ptr/fn.drop_in_place.html\"><code class=\"hljs\">std::ptr::drop_in_place</code></a> can be used.</p>\n<p>Some examples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PrintOnDrop</span></span>(&amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>);\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> PrintOnDrop {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>);\n    }\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> overwritten = PrintOnDrop(<span class=\"hljs-string\">\"drops when overwritten\"</span>);\noverwritten = PrintOnDrop(<span class=\"hljs-string\">\"drops when scope ends\"</span>);\n\n<span class=\"hljs-keyword\">let</span> tuple = (PrintOnDrop(<span class=\"hljs-string\">\"Tuple first\"</span>), PrintOnDrop(<span class=\"hljs-string\">\"Tuple second\"</span>));\n\n<span class=\"hljs-keyword\">let</span> moved;\n<span class=\"hljs-comment\">// No destructor run on assignment.</span>\nmoved = PrintOnDrop(<span class=\"hljs-string\">\"Drops when moved\"</span>);\n<span class=\"hljs-comment\">// Drops now, but is then uninitialized.</span>\nmoved;\n\n<span class=\"hljs-comment\">// Uninitialized does not drop.</span>\n<span class=\"hljs-keyword\">let</span> uninitialized: PrintOnDrop;\n\n<span class=\"hljs-comment\">// After a partial move, only the remaining fields are dropped.</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> partial_move = (PrintOnDrop(<span class=\"hljs-string\">\"first\"</span>), PrintOnDrop(<span class=\"hljs-string\">\"forgotten\"</span>));\n<span class=\"hljs-comment\">// Perform a partial move, leaving only `partial_move.0` initialized.</span>\ncore::mem::forget(partial_move.<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-comment\">// When partial_move's scope ends, only the first field is dropped.</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"drop-scopes\"><a class=\"header\" href=\"#drop-scopes\">Drop scopes</a></h2>\n<p>Each variable or temporary is associated to a <em>drop scope</em>. When control flow\nleaves a drop scope all variables associated to that scope are dropped in\nreverse order of declaration (for variables) or creation (for temporaries).</p>\n<p>Drop scopes are determined after replacing <a href=\"expressions/loop-expr.html#iterator-loops\"><code class=\"hljs\">for</code></a>, <a href=\"expressions/if-expr.html#if-let-expressions\"><code class=\"hljs\">if let</code></a>, and\n<a href=\"expressions/loop-expr.html#predicate-pattern-loops\"><code class=\"hljs\">while let</code></a> expressions with the equivalent expressions using <a href=\"expressions/match-expr.html\"><code class=\"hljs\">match</code></a>.\nOverloaded operators are not distinguished from built-in operators and <a href=\"patterns.html#binding-modes\">binding\nmodes</a> are not considered.</p>\n<p>Given a function, or closure, there are drop scopes for:</p>\n<ul>\n<li>The entire function</li>\n<li>Each <a href=\"statements.html\">statement</a></li>\n<li>Each <a href=\"expressions.html\">expression</a></li>\n<li>Each block, including the function body\n<ul>\n<li>In the case of a <a href=\"expressions/block-expr.html\">block expression</a>, the scope for the block and the\nexpression are the same scope.</li>\n</ul>\n</li>\n<li>Each arm of a <code class=\"hljs\">match</code> expression</li>\n</ul>\n<p>Drop scopes are nested within one another as follows. When multiple scopes are\nleft at once, such as when returning from a function, variables are dropped\nfrom the inside outwards.</p>\n<ul>\n<li>The entire function scope is the outer most scope.</li>\n<li>The function body block is contained within the scope of the entire function.</li>\n<li>The parent of the expression in an expression statement is the scope of the\nstatement.</li>\n<li>The parent of the initializer of a <a href=\"statements.html#let-statements\"><code class=\"hljs\">let</code> statement</a> is the <code class=\"hljs\">let</code> statement's\nscope.</li>\n<li>The parent of a statement scope is the scope of the block that contains the\nstatement.</li>\n<li>The parent of the expression for a <code class=\"hljs\">match</code> guard is the scope of the arm that\nthe guard is for.</li>\n<li>The parent of the expression after the <code class=\"hljs\">=&gt;</code> in a <code class=\"hljs\">match</code> expression is the\nscope of the arm that it's in.</li>\n<li>The parent of the arm scope is the scope of the <code class=\"hljs\">match</code> expression that it\nbelongs to.</li>\n<li>The parent of all other scopes is the scope of the immediately enclosing\nexpression.</li>\n</ul>\n<h3 id=\"scopes-of-function-parameters\"><a class=\"header\" href=\"#scopes-of-function-parameters\">Scopes of function parameters</a></h3>\n<p>All function parameters are in the scope of the entire function body, so are\ndropped last when evaluating the function. Each actual function parameter is\ndropped after any bindings introduced in that parameter's pattern.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PrintOnDrop</span></span>(&amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>);\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> PrintOnDrop {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"drop({})\"</span>, <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"hljs-comment\">// Drops `y`, then the second parameter, then `x`, then the first parameter</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">patterns_in_parameters</span></span>(\n    (x, _): (PrintOnDrop, PrintOnDrop),\n    (_, y): (PrintOnDrop, PrintOnDrop),\n) {}\n\n<span class=\"hljs-comment\">// drop order is 3 2 0 1</span>\npatterns_in_parameters(\n    (PrintOnDrop(<span class=\"hljs-string\">\"0\"</span>), PrintOnDrop(<span class=\"hljs-string\">\"1\"</span>)),\n    (PrintOnDrop(<span class=\"hljs-string\">\"2\"</span>), PrintOnDrop(<span class=\"hljs-string\">\"3\"</span>)),\n);\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"scopes-of-local-variables\"><a class=\"header\" href=\"#scopes-of-local-variables\">Scopes of local variables</a></h3>\n<p>Local variables declared in a <code class=\"hljs\">let</code> statement are associated to the scope of\nthe block that contains the <code class=\"hljs\">let</code> statement. Local variables declared in a\n<code class=\"hljs\">match</code> expression are associated to the arm scope of the <code class=\"hljs\">match</code> arm that they\nare declared in.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PrintOnDrop</span></span>(&amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>);\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> PrintOnDrop {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"drop({})\"</span>, <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"hljs-keyword\">let</span> declared_first = PrintOnDrop(<span class=\"hljs-string\">\"Dropped last in outer scope\"</span>);\n{\n    <span class=\"hljs-keyword\">let</span> declared_in_block = PrintOnDrop(<span class=\"hljs-string\">\"Dropped in inner scope\"</span>);\n}\n<span class=\"hljs-keyword\">let</span> declared_last = PrintOnDrop(<span class=\"hljs-string\">\"Dropped first in outer scope\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If multiple patterns are used in the same arm for a <code class=\"hljs\">match</code> expression, then an\nunspecified pattern will be used to determine the drop order.</p>\n<h3 id=\"temporary-scopes\"><a class=\"header\" href=\"#temporary-scopes\">Temporary scopes</a></h3>\n<p>The <em>temporary scope</em> of an expression is the scope that is used for the\ntemporary variable that holds the result of that expression when used in a\n<a href=\"expressions.html#place-expressions-and-value-expressions\">place context</a>, unless it is <a href=\"destructors.html#constant-promotion\">promoted</a>.</p>\n<p>Apart from lifetime extension, the temporary scope of an expression is the\nsmallest scope that contains the expression and is one of the following:</p>\n<ul>\n<li>The entire function.</li>\n<li>A statement.</li>\n<li>The body of an <a href=\"expressions/if-expr.html#if-expressions\"><code class=\"hljs\">if</code></a>, <a href=\"expressions/loop-expr.html#predicate-loops\"><code class=\"hljs\">while</code></a> or <a href=\"expressions/loop-expr.html#infinite-loops\"><code class=\"hljs\">loop</code></a> expression.</li>\n<li>The <code class=\"hljs\">else</code> block of an <code class=\"hljs\">if</code> expression.</li>\n<li>The condition expression of an <code class=\"hljs\">if</code> or <code class=\"hljs\">while</code> expression, or a <code class=\"hljs\">match</code>\nguard.</li>\n<li>The body expression for a match arm.</li>\n<li>The second operand of a <a href=\"expressions/operator-expr.html#lazy-boolean-operators\">lazy boolean expression</a>.</li>\n</ul>\n<blockquote>\n<p><strong>Notes</strong>:</p>\n<p>Temporaries that are created in the final expression of a function\nbody are dropped <em>after</em> any named variables bound in the function body.\nTheir drop scope is the entire function, as there is no smaller enclosing temporary scope.</p>\n<p>The <a href=\"glossary.html#scrutinee\">scrutinee</a> of a <code class=\"hljs\">match</code> expression is not a temporary scope, so\ntemporaries in the scrutinee can be dropped after the <code class=\"hljs\">match</code> expression. For\nexample, the temporary for <code class=\"hljs\">1</code> in <code class=\"hljs\">match 1 { ref mut z =&gt; z };</code> lives until\nthe end of the statement.</p>\n</blockquote>\n<p>Some examples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PrintOnDrop</span></span>(&amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>);\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> PrintOnDrop {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"drop({})\"</span>, <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"hljs-keyword\">let</span> local_var = PrintOnDrop(<span class=\"hljs-string\">\"local var\"</span>);\n\n<span class=\"hljs-comment\">// Dropped once the condition has been evaluated</span>\n<span class=\"hljs-keyword\">if</span> PrintOnDrop(<span class=\"hljs-string\">\"If condition\"</span>).<span class=\"hljs-number\">0</span> == <span class=\"hljs-string\">\"If condition\"</span> {\n    <span class=\"hljs-comment\">// Dropped at the end of the block</span>\n    PrintOnDrop(<span class=\"hljs-string\">\"If body\"</span>).<span class=\"hljs-number\">0</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-built_in\">unreachable!</span>()\n};\n\n<span class=\"hljs-comment\">// Dropped at the end of the statement</span>\n(PrintOnDrop(<span class=\"hljs-string\">\"first operand\"</span>).<span class=\"hljs-number\">0</span> == <span class=\"hljs-string\">\"\"</span>\n<span class=\"hljs-comment\">// Dropped at the )</span>\n|| PrintOnDrop(<span class=\"hljs-string\">\"second operand\"</span>).<span class=\"hljs-number\">0</span> == <span class=\"hljs-string\">\"\"</span>)\n<span class=\"hljs-comment\">// Dropped at the end of the expression</span>\n|| PrintOnDrop(<span class=\"hljs-string\">\"third operand\"</span>).<span class=\"hljs-number\">0</span> == <span class=\"hljs-string\">\"\"</span>;\n\n<span class=\"hljs-comment\">// Dropped at the end of the function, after local variables.</span>\n<span class=\"hljs-comment\">// Changing this to a statement containing a return expression would make the</span>\n<span class=\"hljs-comment\">// temporary be dropped before the local variables. Binding to a variable</span>\n<span class=\"hljs-comment\">// which is then returned would also make the temporary be dropped first.</span>\n<span class=\"hljs-keyword\">match</span> PrintOnDrop(<span class=\"hljs-string\">\"Matched value in final expression\"</span>) {\n    <span class=\"hljs-comment\">// Dropped once the condition has been evaluated</span>\n    _ <span class=\"hljs-keyword\">if</span> PrintOnDrop(<span class=\"hljs-string\">\"guard condition\"</span>).<span class=\"hljs-number\">0</span> == <span class=\"hljs-string\">\"\"</span> =&gt; (),\n    _ =&gt; (),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"operands\"><a class=\"header\" href=\"#operands\">Operands</a></h3>\n<p>Temporaries are also created to hold the result of operands to an expression\nwhile the other operands are evaluated. The temporaries are associated to the\nscope of the expression with that operand. Since the temporaries are moved from\nonce the expression is evaluated, dropping them has no effect unless one of the\noperands to an expression breaks out of the expression, returns, or panics.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PrintOnDrop</span></span>(&amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>);\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> PrintOnDrop {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"drop({})\"</span>, <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"hljs-keyword\">loop</span> {\n    <span class=\"hljs-comment\">// Tuple expression doesn't finish evaluating so operands drop in reverse order</span>\n    (\n        PrintOnDrop(<span class=\"hljs-string\">\"Outer tuple first\"</span>),\n        PrintOnDrop(<span class=\"hljs-string\">\"Outer tuple second\"</span>),\n        (\n            PrintOnDrop(<span class=\"hljs-string\">\"Inner tuple first\"</span>),\n            PrintOnDrop(<span class=\"hljs-string\">\"Inner tuple second\"</span>),\n            <span class=\"hljs-keyword\">break</span>,\n        ),\n        PrintOnDrop(<span class=\"hljs-string\">\"Never created\"</span>),\n    );\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"constant-promotion\"><a class=\"header\" href=\"#constant-promotion\">Constant promotion</a></h3>\n<p>Promotion of a value expression to a <code class=\"hljs\">'static</code> slot occurs when the expression\ncould be written in a constant and borrowed, and that borrow could be dereferenced\nwhere\nthe expression was originally written, without changing the runtime behavior.\nThat is, the promoted expression can be evaluated at compile-time and the\nresulting value does not contain <a href=\"interior-mutability.html\">interior mutability</a> or <a href=\"destructors.html\">destructors</a> (these\nproperties are determined based on the value where possible, e.g. <code class=\"hljs\">&amp;None</code>\nalways has the type <code class=\"hljs\">&amp;'static Option&lt;_&gt;</code>, as it contains nothing disallowed).</p>\n<h3 id=\"temporary-lifetime-extension\"><a class=\"header\" href=\"#temporary-lifetime-extension\">Temporary lifetime extension</a></h3>\n<blockquote>\n<p><strong>Note</strong>: The exact rules for temporary lifetime extension are subject to\nchange. This is describing the current behavior only.</p>\n</blockquote>\n<p>The temporary scopes for expressions in <code class=\"hljs\">let</code> statements are sometimes\n<em>extended</em> to the scope of the block containing the <code class=\"hljs\">let</code> statement. This is\ndone when the usual temporary scope would be too small, based on certain\nsyntactic rules. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-comment\">// Usually a temporary would be dropped by now, but the temporary for `0` lives</span>\n<span class=\"hljs-comment\">// to the end of the block.</span>\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If a <a href=\"expressions/operator-expr.html#borrow-operators\">borrow</a>, <a href=\"expressions/operator-expr.html#the-dereference-operator\">dereference</a>,\n<a href=\"expressions/field-expr.html\">field</a>, or <a href=\"expressions/tuple-expr.html#tuple-indexing-expressions\">tuple indexing expression</a> has an extended\ntemporary scope then so does its operand. If an <a href=\"expressions/array-expr.html#array-and-slice-indexing-expressions\">indexing expression</a> has an\nextended temporary scope then the indexed expression also has an extended\ntemporary scope.</p>\n<h4 id=\"extending-based-on-patterns\"><a class=\"header\" href=\"#extending-based-on-patterns\">Extending based on patterns</a></h4>\n<p>An <em>extending pattern</em> is either</p>\n<ul>\n<li>An <a href=\"patterns.html#identifier-patterns\">identifier pattern</a> that binds by reference or mutable reference.</li>\n<li>A <a href=\"patterns.html#struct-patterns\">struct</a>, <a href=\"patterns.html#tuple-patterns\">tuple</a>, <a href=\"patterns.html#tuple-struct-patterns\">tuple struct</a>, or <a href=\"patterns.html#slice-patterns\">slice</a> pattern where at least one of the\ndirect subpatterns is an extending pattern.</li>\n</ul>\n<p>So <code class=\"hljs\">ref x</code>, <code class=\"hljs\">V(ref x)</code> and <code class=\"hljs\">[ref x, y]</code> are all extending patterns, but <code class=\"hljs\">x</code>,\n<code class=\"hljs\">&amp;ref x</code> and <code class=\"hljs\">&amp;(ref x,)</code> are not.</p>\n<p>If the pattern in a <code class=\"hljs\">let</code> statement is an extending pattern then the temporary\nscope of the initializer expression is extended.</p>\n<h4 id=\"extending-based-on-expressions\"><a class=\"header\" href=\"#extending-based-on-expressions\">Extending based on expressions</a></h4>\n<p>For a let statement with an initializer, an <em>extending expression</em> is an\nexpression which is one of the following:</p>\n<ul>\n<li>The initializer expression.</li>\n<li>The operand of an extending <a href=\"expressions/operator-expr.html#borrow-operators\">borrow expression</a>.</li>\n<li>The operand(s) of an extending <a href=\"expressions/array-expr.html#array-expressions\">array</a>, <a href=\"expressions/operator-expr.html#type-cast-expressions\">cast</a>, <a href=\"expressions/struct-expr.html\">braced struct</a>, or <a href=\"expressions/tuple-expr.html#tuple-expressions\">tuple</a>\nexpression.</li>\n<li>The final expression of any extending <a href=\"expressions/block-expr.html\">block expression</a>.</li>\n</ul>\n<p>So the borrow expressions in <code class=\"hljs\">&amp;mut 0</code>, <code class=\"hljs\">(&amp;1, &amp;mut 2)</code>, and <code class=\"hljs\">Some { 0: &amp;mut 3 }</code>\nare all extending expressions. The borrows in <code class=\"hljs\">&amp;0 + &amp;1</code> and <code class=\"hljs\">Some(&amp;mut 0)</code> are\nnot: the latter is syntactically a function call expression.</p>\n<p>The operand of any extending borrow expression has its temporary scope\nextended.</p>\n<h4 id=\"examples-4\"><a class=\"header\" href=\"#examples-4\">Examples</a></h4>\n<p>Here are some examples where expressions have extended temporary scopes:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">temp</span></span>() {}\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Use</span></span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">use_temp</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-keyword\">Self</span> { <span class=\"hljs-keyword\">self</span> } }\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Use <span class=\"hljs-keyword\">for</span> () {}\n</span><span class=\"hljs-comment\">// The temporary that stores the result of `temp()` lives in the same scope</span>\n<span class=\"hljs-comment\">// as x in these cases.</span>\n<span class=\"hljs-keyword\">let</span> x = &amp;temp();\n<span class=\"hljs-keyword\">let</span> x = &amp;temp() <span class=\"hljs-keyword\">as</span> &amp;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Send</span>;\n<span class=\"hljs-keyword\">let</span> x = (&amp;*&amp;temp(),);\n<span class=\"hljs-keyword\">let</span> x = { [<span class=\"hljs-literal\">Some</span> { <span class=\"hljs-number\">0</span>: &amp;temp(), }] };\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">ref</span> x = temp();\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">ref</span> x = *&amp;temp();\n<span class=\"boring\">x;\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>Here are some examples where expressions don't have extended temporary scopes:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">temp</span></span>() {}\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Use</span></span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">use_temp</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-keyword\">Self</span> { <span class=\"hljs-keyword\">self</span> } }\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Use <span class=\"hljs-keyword\">for</span> () {}\n</span><span class=\"hljs-comment\">// The temporary that stores the result of `temp()` only lives until the</span>\n<span class=\"hljs-comment\">// end of the let statement in these cases.</span>\n\n<span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-literal\">Some</span>(&amp;temp());         <span class=\"hljs-comment\">// ERROR</span>\n<span class=\"hljs-keyword\">let</span> x = (&amp;temp()).use_temp();  <span class=\"hljs-comment\">// ERROR</span>\n<span class=\"boring\">x;\n</span><span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"not-running-destructors\"><a class=\"header\" href=\"#not-running-destructors\">Not running destructors</a></h2>\n<p><a href=\"../std/mem/fn.forget.html\"><code class=\"hljs\">std::mem::forget</code></a> can be used to prevent the destructor of a variable from being run,\nand <a href=\"../std/mem/struct.ManuallyDrop.html\"><code class=\"hljs\">std::mem::ManuallyDrop</code></a> provides a wrapper to prevent a\nvariable or field from being dropped automatically.</p>\n<blockquote>\n<p>Note: Preventing a destructor from being run via <a href=\"../std/mem/fn.forget.html\"><code class=\"hljs\">std::mem::forget</code></a> or other means is safe even if it has a type that isn't <code class=\"hljs\">'static</code>.\nBesides the places where destructors are guaranteed to run as defined by this document, types may <em>not</em> safely rely on a destructor being run for soundness.</p>\n</blockquote>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"lifetime-elision\"><a class=\"header\" href=\"#lifetime-elision\">Lifetime elision</a></h1>\n<p>Rust has rules that allow lifetimes to be elided in various places where the\ncompiler can infer a sensible default choice.</p>\n<h2 id=\"lifetime-elision-in-functions\"><a class=\"header\" href=\"#lifetime-elision-in-functions\">Lifetime elision in functions</a></h2>\n<p>In order to make common patterns more ergonomic, lifetime arguments can be\n<em>elided</em> in <a href=\"types/function-item.html\">function item</a>, <a href=\"types/function-pointer.html\">function pointer</a>, and <a href=\"types/closure.html\">closure trait</a> signatures.\nThe following rules are used to infer lifetime parameters for elided lifetimes.\nIt is an error to elide lifetime parameters that cannot be inferred. The\nplaceholder lifetime, <code class=\"hljs\">'_</code>, can also be used to have a lifetime inferred in the\nsame way. For lifetimes in paths, using <code class=\"hljs\">'_</code> is preferred. Trait object\nlifetimes follow different rules discussed\n<a href=\"lifetime-elision.html#default-trait-object-lifetimes\">below</a>.</p>\n<ul>\n<li>Each elided lifetime in the parameters becomes a distinct lifetime parameter.</li>\n<li>If there is exactly one lifetime used in the parameters (elided or not), that\nlifetime is assigned to <em>all</em> elided output lifetimes.</li>\n</ul>\n<p>In method signatures there is another rule</p>\n<ul>\n<li>If the receiver has type <code class=\"hljs\">&amp;Self</code>  or <code class=\"hljs\">&amp;mut Self</code>, then the lifetime of that\nreference to <code class=\"hljs\">Self</code> is assigned to all elided output lifetime parameters.</li>\n</ul>\n<p>Examples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">T</span></span> {}\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">ToCStr</span></span> {}\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Thing</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {f: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>}\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Command</span></span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Example</span></span> {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">print1</span></span>(s: &amp;<span class=\"hljs-built_in\">str</span>);                                   <span class=\"hljs-comment\">// elided</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">print2</span></span>(s: &amp;<span class=\"hljs-symbol\">'_</span> <span class=\"hljs-built_in\">str</span>);                                <span class=\"hljs-comment\">// also elided</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">print3</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(s: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>);                            <span class=\"hljs-comment\">// expanded</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">debug1</span></span>(lvl: <span class=\"hljs-built_in\">usize</span>, s: &amp;<span class=\"hljs-built_in\">str</span>);                       <span class=\"hljs-comment\">// elided</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">debug2</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(lvl: <span class=\"hljs-built_in\">usize</span>, s: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>);                <span class=\"hljs-comment\">// expanded</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">substr1</span></span>(s: &amp;<span class=\"hljs-built_in\">str</span>, until: <span class=\"hljs-built_in\">usize</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span>;            <span class=\"hljs-comment\">// elided</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">substr2</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(s: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>, until: <span class=\"hljs-built_in\">usize</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>;  <span class=\"hljs-comment\">// expanded</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">get_mut1</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">dyn</span> T;                 <span class=\"hljs-comment\">// elided</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">get_mut2</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">dyn</span> T;       <span class=\"hljs-comment\">// expanded</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">args1</span></span>&lt;T: ToCStr&gt;(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, args: &amp;[T]) -&gt; &amp;<span class=\"hljs-keyword\">mut</span> Command;                  <span class=\"hljs-comment\">// elided</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">args2</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-symbol\">'b</span>, T: ToCStr&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, args: &amp;<span class=\"hljs-symbol\">'b</span> [T]) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> Command; <span class=\"hljs-comment\">// expanded</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new1</span></span>(buf: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-built_in\">u8</span>]) -&gt; Thing&lt;<span class=\"hljs-symbol\">'_</span>&gt;;                 <span class=\"hljs-comment\">// elided - preferred</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new2</span></span>(buf: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-built_in\">u8</span>]) -&gt; Thing;                     <span class=\"hljs-comment\">// elided</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new3</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(buf: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-built_in\">u8</span>]) -&gt; Thing&lt;<span class=\"hljs-symbol\">'a</span>&gt;;          <span class=\"hljs-comment\">// expanded</span>\n<span class=\"boring\">}\n</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">FunPtr1</span></span> = <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(&amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span>;                      <span class=\"hljs-comment\">// elided</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">FunPtr2</span></span> = <span class=\"hljs-keyword\">for</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>;        <span class=\"hljs-comment\">// expanded</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">FunTrait1</span></span> = <span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>(&amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span>;                <span class=\"hljs-comment\">// elided</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">FunTrait2</span></span> = <span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-keyword\">for</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-built_in\">Fn</span>(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>;  <span class=\"hljs-comment\">// expanded</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// The following examples show situations where it is not allowed to elide the</span>\n<span class=\"hljs-comment\">// lifetime parameter.</span>\n\n<span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Example</span></span> {\n</span><span class=\"hljs-comment\">// Cannot infer, because there are no parameters to infer from.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">get_str</span></span>() -&gt; &amp;<span class=\"hljs-built_in\">str</span>;                                 <span class=\"hljs-comment\">// ILLEGAL</span>\n\n<span class=\"hljs-comment\">// Cannot infer, ambiguous if it is borrowed from the first or second parameter.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">frob</span></span>(s: &amp;<span class=\"hljs-built_in\">str</span>, t: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span>;                    <span class=\"hljs-comment\">// ILLEGAL</span>\n<span class=\"boring\">}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"default-trait-object-lifetimes\"><a class=\"header\" href=\"#default-trait-object-lifetimes\">Default trait object lifetimes</a></h2>\n<p>The assumed lifetime of references held by a <a href=\"types/trait-object.html\">trait object</a> is called its\n<em>default object lifetime bound</em>. These were defined in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md\">RFC 599</a> and amended in\n<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1156-adjust-default-object-bounds.md\">RFC 1156</a>.</p>\n<p>These default object lifetime bounds are used instead of the lifetime parameter\nelision rules defined above when the lifetime bound is omitted entirely. If\n<code class=\"hljs\">'_</code> is used as the lifetime bound then the bound follows the usual elision\nrules.</p>\n<p>If the trait object is used as a type argument of a generic type then the\ncontaining type is first used to try to infer a bound.</p>\n<ul>\n<li>If there is a unique bound from the containing type then that is the default</li>\n<li>If there is more than one bound from the containing type then an explicit\nbound must be specified</li>\n</ul>\n<p>If neither of those rules apply, then the bounds on the trait are used:</p>\n<ul>\n<li>If the trait is defined with a single lifetime <em>bound</em> then that bound is\nused.</li>\n<li>If <code class=\"hljs\">'static</code> is used for any lifetime bound then <code class=\"hljs\">'static</code> is used.</li>\n<li>If the trait has no lifetime bounds, then the lifetime is inferred in\nexpressions and is <code class=\"hljs\">'static</code> outside of expressions.</li>\n</ul>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// For the following trait...</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Foo</span></span> { }\n\n<span class=\"hljs-comment\">// These two are the same because Box&lt;T&gt; has no lifetime bound on T</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">T1</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Foo&gt;;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">T2</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Foo + <span class=\"hljs-symbol\">'static</span>&gt;;\n\n<span class=\"hljs-comment\">// ...and so are these:</span>\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-keyword\">dyn</span> Foo {}\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-keyword\">dyn</span> Foo + <span class=\"hljs-symbol\">'static</span> {}\n\n<span class=\"hljs-comment\">// ...so are these, because &amp;'a T requires T: 'a</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">T3</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; = &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">dyn</span> Foo;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">T4</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; = &amp;<span class=\"hljs-symbol\">'a</span> (<span class=\"hljs-keyword\">dyn</span> Foo + <span class=\"hljs-symbol\">'a</span>);\n\n<span class=\"hljs-comment\">// std::cell::Ref&lt;'a, T&gt; also requires T: 'a, so these are the same</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">T5</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; = std::cell::Ref&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-keyword\">dyn</span> Foo&gt;;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">T6</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; = std::cell::Ref&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-keyword\">dyn</span> Foo + <span class=\"hljs-symbol\">'a</span>&gt;;\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// This is an example of an error.</span>\n<span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Foo</span></span> { }\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">TwoBounds</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-symbol\">'b</span>, T: ?<span class=\"hljs-built_in\">Sized</span> + <span class=\"hljs-symbol\">'a</span> + <span class=\"hljs-symbol\">'b</span>&gt; {\n    f1: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>,\n    f2: &amp;<span class=\"hljs-symbol\">'b</span> <span class=\"hljs-built_in\">i32</span>,\n    f3: T,\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">T7</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-symbol\">'b</span>&gt; = TwoBounds&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-symbol\">'b</span>, <span class=\"hljs-keyword\">dyn</span> Foo&gt;;\n<span class=\"hljs-comment\">//                                  ^^^^^^^</span>\n<span class=\"hljs-comment\">// Error: the lifetime bound for this object type cannot be deduced from context</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Note that the innermost object sets the bound, so <code class=\"hljs\">&amp;'a Box&lt;dyn Foo&gt;</code> is still\n<code class=\"hljs\">&amp;'a Box&lt;dyn Foo + 'static&gt;</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// For the following trait...</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Bar</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;: <span class=\"hljs-symbol\">'a</span> { }\n\n<span class=\"hljs-comment\">// ...these two are the same:</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">T1</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Bar&lt;<span class=\"hljs-symbol\">'a</span>&gt;&gt;;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">T2</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Bar&lt;<span class=\"hljs-symbol\">'a</span>&gt; + <span class=\"hljs-symbol\">'a</span>&gt;;\n\n<span class=\"hljs-comment\">// ...and so are these:</span>\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-keyword\">dyn</span> Bar&lt;<span class=\"hljs-symbol\">'a</span>&gt; {}\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-keyword\">dyn</span> Bar&lt;<span class=\"hljs-symbol\">'a</span>&gt; + <span class=\"hljs-symbol\">'a</span> {}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"static-lifetime-elision\"><a class=\"header\" href=\"#static-lifetime-elision\"><code>'static</code> lifetime elision</a></h2>\n<p>Both <a href=\"items/constant-items.html\">constant</a> and <a href=\"items/static-items.html\">static</a> declarations of reference types have <em>implicit</em>\n<code class=\"hljs\">'static</code> lifetimes unless an explicit lifetime is specified. As such, the\nconstant declarations involving <code class=\"hljs\">'static</code> above may be written without the\nlifetimes.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// STRING: &amp;'static str</span>\n<span class=\"hljs-keyword\">const</span> STRING: &amp;<span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">\"bitstring\"</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BitsNStrings</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    mybits: [<span class=\"hljs-built_in\">u32</span>; <span class=\"hljs-number\">2</span>],\n    mystring: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n}\n\n<span class=\"hljs-comment\">// BITS_N_STRINGS: BitsNStrings&lt;'static&gt;</span>\n<span class=\"hljs-keyword\">const</span> BITS_N_STRINGS: BitsNStrings&lt;<span class=\"hljs-symbol\">'_</span>&gt; = BitsNStrings {\n    mybits: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>],\n    mystring: STRING,\n};\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Note that if the <code class=\"hljs\">static</code> or <code class=\"hljs\">const</code> items include function or closure\nreferences, which themselves include references, the compiler will first try\nthe standard elision rules. If it is unable to resolve the lifetimes by its\nusual rules, then it will error. By way of example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Bar</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Baz</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">somefunc</span></span>(a: &amp;Foo, b: &amp;Bar, c: &amp;Baz) -&gt; <span class=\"hljs-built_in\">usize</span> {<span class=\"hljs-number\">42</span>}\n</span><span class=\"hljs-comment\">// Resolved as `for&lt;'a&gt; fn(&amp;'a str) -&gt; &amp;'a str`.</span>\n<span class=\"hljs-keyword\">const</span> RESOLVED_SINGLE: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(&amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> = |x| x;\n\n<span class=\"hljs-comment\">// Resolved as `for&lt;'a, 'b, 'c&gt; Fn(&amp;'a Foo, &amp;'b Bar, &amp;'c Baz) -&gt; usize`.</span>\n<span class=\"hljs-keyword\">const</span> RESOLVED_MULTIPLE: &amp;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>(&amp;Foo, &amp;Bar, &amp;Baz) -&gt; <span class=\"hljs-built_in\">usize</span> = &amp;somefunc;\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Bar</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Baz</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">somefunc</span></span>&lt;<span class=\"hljs-symbol\">'a</span>,<span class=\"hljs-symbol\">'b</span>&gt;(a: &amp;<span class=\"hljs-symbol\">'a</span> Foo, b: &amp;<span class=\"hljs-symbol\">'b</span> Bar) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> Baz {<span class=\"hljs-built_in\">unimplemented!</span>()}\n</span><span class=\"hljs-comment\">// There is insufficient information to bound the return reference lifetime</span>\n<span class=\"hljs-comment\">// relative to the argument lifetimes, so this is an error.</span>\n<span class=\"hljs-keyword\">const</span> RESOLVED_STATIC: &amp;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>(&amp;Foo, &amp;Bar) -&gt; &amp;Baz = &amp;somefunc;\n<span class=\"hljs-comment\">//                                            ^</span>\n<span class=\"hljs-comment\">// this function's return type contains a borrowed value, but the signature</span>\n<span class=\"hljs-comment\">// does not say whether it is borrowed from argument 1 or argument 2</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"special-types-and-traits\"><a class=\"header\" href=\"#special-types-and-traits\">Special types and traits</a></h1>\n<p>Certain types and traits that exist in <a href=\"../std/index.html\">the standard library</a> are known to the\nRust compiler. This chapter documents the special features of these types and\ntraits.</p>\n<h2 id=\"boxt\"><a class=\"header\" href=\"#boxt\"><code>Box&lt;T&gt;</code></a></h2>\n<p><a href=\"../std/boxed/struct.Box.html\"><code class=\"hljs\">Box&lt;T&gt;</code></a> has a few special features that Rust doesn't currently allow for user\ndefined types.</p>\n<ul>\n<li>The <a href=\"expressions/operator-expr.html#the-dereference-operator\">dereference operator</a> for <code class=\"hljs\">Box&lt;T&gt;</code> produces a place which can be moved\nfrom. This means that the <code class=\"hljs\">*</code> operator and the destructor of <code class=\"hljs\">Box&lt;T&gt;</code> are\nbuilt-in to the language.</li>\n<li><a href=\"items/associated-items.html#associated-functions-and-methods\">Methods</a> can take <code class=\"hljs\">Box&lt;Self&gt;</code> as a receiver.</li>\n<li>A trait may be implemented for <code class=\"hljs\">Box&lt;T&gt;</code> in the same crate as <code class=\"hljs\">T</code>, which the\n<a href=\"items/implementations.html#trait-implementation-coherence\">orphan rules</a> prevent for other generic types.</li>\n</ul>\n<h2 id=\"rct\"><a class=\"header\" href=\"#rct\"><code>Rc&lt;T&gt;</code></a></h2>\n<p><a href=\"items/associated-items.html#associated-functions-and-methods\">Methods</a> can take <a href=\"../std/rc/struct.Rc.html\"><code class=\"hljs\">Rc&lt;Self&gt;</code></a> as a receiver.</p>\n<h2 id=\"arct\"><a class=\"header\" href=\"#arct\"><code>Arc&lt;T&gt;</code></a></h2>\n<p><a href=\"items/associated-items.html#associated-functions-and-methods\">Methods</a> can take <a href=\"../std/sync/struct.Arc.html\"><code class=\"hljs\">Arc&lt;Self&gt;</code></a> as a receiver.</p>\n<h2 id=\"pinp\"><a class=\"header\" href=\"#pinp\"><code>Pin&lt;P&gt;</code></a></h2>\n<p><a href=\"items/associated-items.html#associated-functions-and-methods\">Methods</a> can take <a href=\"../std/pin/struct.Pin.html\"><code class=\"hljs\">Pin&lt;P&gt;</code></a> as a receiver.</p>\n<h2 id=\"unsafecellt\"><a class=\"header\" href=\"#unsafecellt\"><code>UnsafeCell&lt;T&gt;</code></a></h2>\n<p><a href=\"../std/cell/struct.UnsafeCell.html\"><code class=\"hljs\">std::cell::UnsafeCell&lt;T&gt;</code></a> is used for <a href=\"interior-mutability.html\">interior mutability</a>. It ensures that\nthe compiler doesn't perform optimisations that are incorrect for such types.\nIt also ensures that <a href=\"items/static-items.html\"><code class=\"hljs\">static</code> items</a> which have a type with interior\nmutability aren't placed in memory marked as read only.</p>\n<h2 id=\"phantomdatat\"><a class=\"header\" href=\"#phantomdatat\"><code>PhantomData&lt;T&gt;</code></a></h2>\n<p><a href=\"../std/marker/struct.PhantomData.html\"><code class=\"hljs\">std::marker::PhantomData&lt;T&gt;</code></a> is a zero-sized, minimum alignment, type that\nis considered to own a <code class=\"hljs\">T</code> for the purposes of <a href=\"subtyping.html#variance\">variance</a>, <a href=\"../nomicon/dropck.html\">drop check</a>, and\n<a href=\"special-types-and-traits.html#auto-traits\">auto traits</a>.</p>\n<h2 id=\"operator-traits\"><a class=\"header\" href=\"#operator-traits\">Operator Traits</a></h2>\n<p>The traits in <a href=\"../std/ops/index.html\"><code class=\"hljs\">std::ops</code></a> and <a href=\"../std/cmp/index.html\"><code class=\"hljs\">std::cmp</code></a> are used to overload <a href=\"expressions/operator-expr.html\">operators</a>,\n<a href=\"expressions/array-expr.html#array-and-slice-indexing-expressions\">indexing expressions</a>, and <a href=\"expressions/call-expr.html\">call expressions</a>.</p>\n<h2 id=\"deref-and-derefmut\"><a class=\"header\" href=\"#deref-and-derefmut\"><code>Deref</code> and <code>DerefMut</code></a></h2>\n<p>As well as overloading the unary <code class=\"hljs\">*</code> operator, <a href=\"../std/ops/trait.Deref.html\"><code class=\"hljs\">Deref</code></a> and <a href=\"../std/ops/trait.DerefMut.html\"><code class=\"hljs\">DerefMut</code></a> are\nalso used in <a href=\"expressions/method-call-expr.html\">method resolution</a> and <a href=\"type-coercions.html#coercion-types\">deref coercions</a>.</p>\n<h2 id=\"drop\"><a class=\"header\" href=\"#drop\"><code>Drop</code></a></h2>\n<p>The <a href=\"../std/ops/trait.Drop.html\"><code class=\"hljs\">Drop</code></a> trait provides a <a href=\"destructors.html\">destructor</a>, to be run whenever a value of this\ntype is to be destroyed.</p>\n<h2 id=\"copy\"><a class=\"header\" href=\"#copy\"><code>Copy</code></a></h2>\n<p>The <a href=\"../std/marker/trait.Copy.html\"><code class=\"hljs\">Copy</code></a> trait changes the semantics of a type implementing it. Values\nwhose type implements <code class=\"hljs\">Copy</code> are copied rather than moved upon assignment.</p>\n<p><code class=\"hljs\">Copy</code> can only be implemented for types which do not implement <code class=\"hljs\">Drop</code>, and whose fields are all <code class=\"hljs\">Copy</code>.\nFor enums, this means all fields of all variants have to be <code class=\"hljs\">Copy</code>.\nFor unions, this means all variants have to be <code class=\"hljs\">Copy</code>.</p>\n<p><code class=\"hljs\">Copy</code> is implemented by the compiler for</p>\n<ul>\n<li><a href=\"types/tuple.html\">Tuples</a> of <code class=\"hljs\">Copy</code> types</li>\n<li><a href=\"types/function-pointer.html\">Function pointers</a></li>\n<li><a href=\"types/function-item.html\">Function items</a></li>\n<li><a href=\"types/closure.html\">Closures</a> that capture no values or that only capture values of <code class=\"hljs\">Copy</code> types</li>\n</ul>\n<h2 id=\"clone\"><a class=\"header\" href=\"#clone\"><code>Clone</code></a></h2>\n<p>The <a href=\"../std/clone/trait.Clone.html\"><code class=\"hljs\">Clone</code></a> trait is a supertrait of <code class=\"hljs\">Copy</code>, so it also needs compiler\ngenerated implementations. It is implemented by the compiler for the following\ntypes:</p>\n<ul>\n<li>Types with a built-in <code class=\"hljs\">Copy</code> implementation (see above)</li>\n<li><a href=\"types/tuple.html\">Tuples</a> of <code class=\"hljs\">Clone</code> types</li>\n<li><a href=\"types/closure.html\">Closures</a> that only capture values of <code class=\"hljs\">Clone</code> types or capture no values from the environment</li>\n</ul>\n<h2 id=\"send\"><a class=\"header\" href=\"#send\"><code>Send</code></a></h2>\n<p>The <a href=\"../std/marker/trait.Send.html\"><code class=\"hljs\">Send</code></a> trait indicates that a value of this type is safe to send from one\nthread to another.</p>\n<h2 id=\"sync\"><a class=\"header\" href=\"#sync\"><code>Sync</code></a></h2>\n<p>The <a href=\"../std/marker/trait.Sync.html\"><code class=\"hljs\">Sync</code></a> trait indicates that a value of this type is safe to share between\nmultiple threads. This trait must be implemented for all types used in\nimmutable <a href=\"items/static-items.html\"><code class=\"hljs\">static</code> items</a>.</p>\n<h2 id=\"termination\"><a class=\"header\" href=\"#termination\"><code>Termination</code></a></h2>\n<p>The <a href=\"../std/process/trait.Termination.html\"><code class=\"hljs\">Termination</code></a> trait indicates the acceptable return types for the <a href=\"crates-and-source-files.html#main-functions\">main function</a> and <a href=\"attributes/testing.html#the-test-attribute\">test functions</a>.</p>\n<h2 id=\"auto-traits\"><a class=\"header\" href=\"#auto-traits\">Auto traits</a></h2>\n<p>The <a href=\"../std/marker/trait.Send.html\"><code class=\"hljs\">Send</code></a>, <a href=\"../std/marker/trait.Sync.html\"><code class=\"hljs\">Sync</code></a>, <a href=\"../std/marker/trait.Unpin.html\"><code class=\"hljs\">Unpin</code></a>, <a href=\"../std/panic/trait.UnwindSafe.html\"><code class=\"hljs\">UnwindSafe</code></a>, and <a href=\"../std/panic/trait.RefUnwindSafe.html\"><code class=\"hljs\">RefUnwindSafe</code></a> traits are <em>auto\ntraits</em>. Auto traits have special properties.</p>\n<p>If no explicit implementation or negative implementation is written out for an\nauto trait for a given type, then the compiler implements it automatically\naccording to the following rules:</p>\n<ul>\n<li><code class=\"hljs\">&amp;T</code>, <code class=\"hljs\">&amp;mut T</code>, <code class=\"hljs\">*const T</code>, <code class=\"hljs\">*mut T</code>, <code class=\"hljs\">[T; n]</code>, and <code class=\"hljs\">[T]</code> implement the trait\nif <code class=\"hljs\">T</code> does.</li>\n<li>Function item types and function pointers automatically implement the trait.</li>\n<li>Structs, enums, unions, and tuples implement the trait if all of their fields\ndo.</li>\n<li>Closures implement the trait if the types of all of their captures do. A\nclosure that captures a <code class=\"hljs\">T</code> by shared reference and a <code class=\"hljs\">U</code> by value implements\nany auto traits that both <code class=\"hljs\">&amp;T</code> and <code class=\"hljs\">U</code> do.</li>\n</ul>\n<p>For generic types (counting the built-in types above as generic over <code class=\"hljs\">T</code>), if a\ngeneric implementation is available, then the compiler does not automatically\nimplement it for types that could use the implementation except that they do not\nmeet the requisite trait bounds. For instance, the standard library implements\n<code class=\"hljs\">Send</code> for all <code class=\"hljs\">&amp;T</code> where <code class=\"hljs\">T</code> is <code class=\"hljs\">Sync</code>; this means that the compiler will not\nimplement <code class=\"hljs\">Send</code> for <code class=\"hljs\">&amp;T</code> if <code class=\"hljs\">T</code> is <code class=\"hljs\">Send</code> but not <code class=\"hljs\">Sync</code>.</p>\n<p>Auto traits can also have negative implementations, shown as <code class=\"hljs\">impl !AutoTrait for T</code> in the standard library documentation, that override the automatic\nimplementations. For example <code class=\"hljs\">*mut T</code> has a negative implementation of <code class=\"hljs\">Send</code>,\nand so <code class=\"hljs\">*mut T</code> is not <code class=\"hljs\">Send</code>, even if <code class=\"hljs\">T</code> is. There is currently no stable way\nto specify additional negative implementations; they exist only in the standard\nlibrary.</p>\n<p>Auto traits may be added as an additional bound to any <a href=\"types/trait-object.html\">trait object</a>, even\nthough normally only one trait is allowed. For instance, <code class=\"hljs\">Box&lt;dyn Debug + Send + UnwindSafe&gt;</code> is a valid type.</p>\n<h2 id=\"sized-1\"><a class=\"header\" href=\"#sized-1\"><code>Sized</code></a></h2>\n<p>The <a href=\"../std/marker/trait.Sized.html\"><code class=\"hljs\">Sized</code></a> trait indicates that the size of this type is known at compile-time; that is, it's not a <a href=\"dynamically-sized-types.html\">dynamically sized type</a>.\n<a href=\"types/parameters.html\">Type parameters</a> (except <code class=\"hljs\">Self</code> in traits) are <code class=\"hljs\">Sized</code> by default, as are <a href=\"items/associated-items.html#associated-types\">associated types</a>.\n<code class=\"hljs\">Sized</code> is always implemented automatically by the compiler, not by <a href=\"items/implementations.html\">implementation items</a>.\nThese implicit <code class=\"hljs\">Sized</code> bounds may be relaxed by using the special <code class=\"hljs\">?Sized</code> bound.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"names\"><a class=\"header\" href=\"#names\">Names</a></h1>\n<p>An <em>entity</em> is a language construct that can be referred to in some way within\nthe source program, usually via a <a href=\"paths.html\">path</a>. Entities include <a href=\"types.html\">types</a>, <a href=\"items.html\">items</a>,\n<a href=\"items/generics.html\">generic parameters</a>, <a href=\"patterns.html\">variable bindings</a>, <a href=\"expressions/loop-expr.html#loop-labels\">loop labels</a>, <a href=\"tokens.html#lifetimes-and-loop-labels\">lifetimes</a>,\n<a href=\"expressions/field-expr.html\">fields</a>, <a href=\"attributes.html\">attributes</a>, and <a href=\"attributes/diagnostics.html#lint-check-attributes\">lints</a>.</p>\n<p>A <em>declaration</em> is a syntactical construct that can introduce a <em>name</em> to\nrefer to an entity. Entity names are valid within a <a href=\"names/scopes.html\"><em>scope</em></a> —&nbsp;a region of\nsource text where that name may be referenced.</p>\n<p>Some entities are <a href=\"names.html#explicitly-declared-entities\">explicitly declared</a> in the\nsource code, and some are <a href=\"names.html#implicitly-declared-entities\">implicitly declared</a>\nas part of the language or compiler extensions.</p>\n<p><a href=\"paths.html\"><em>Paths</em></a> are used to refer to an entity, possibly in another module or type. Lifetimes\nand loop labels use a <a href=\"tokens.html#lifetimes-and-loop-labels\">dedicated syntax</a> using a\nleading quote.</p>\n<p>Names are segregated into different <a href=\"names/namespaces.html\"><em>namespaces</em></a>, allowing entities in\ndifferent namespaces to share the same name without conflict.</p>\n<p><a href=\"names/name-resolution.html\"><em>Name resolution</em></a> is the compile-time process of tying paths, identifiers,\nand labels to entity declarations.</p>\n<p>Access to certain names may be restricted based on their <a href=\"visibility-and-privacy.html\"><em>visibility</em></a>.</p>\n<h2 id=\"explicitly-declared-entities\"><a class=\"header\" href=\"#explicitly-declared-entities\">Explicitly declared entities</a></h2>\n<p>Entities that explicitly introduce a name in the source code are:</p>\n<ul>\n<li><a href=\"items.html\">Items</a>:\n<ul>\n<li><a href=\"items/modules.html\">Module declarations</a></li>\n<li><a href=\"items/extern-crates.html\">External crate declarations</a></li>\n<li><a href=\"items/use-declarations.html\">Use declarations</a></li>\n<li><a href=\"items/functions.html\">Function declarations</a> and <a href=\"items/functions.html#function-parameters\">function parameters</a></li>\n<li><a href=\"items/type-aliases.html\">Type aliases</a></li>\n<li><a href=\"items/structs.html\">struct</a>, <a href=\"items/unions.html\">union</a>, <a href=\"items/enumerations.html\">enum</a>, enum variant declarations, and their named\nfields</li>\n<li><a href=\"items/constant-items.html\">Constant item declarations</a></li>\n<li><a href=\"items/static-items.html\">Static item declarations</a></li>\n<li><a href=\"items/traits.html\">Trait item declarations</a> and their <a href=\"items/associated-items.html\">associated items</a></li>\n<li><a href=\"items/external-blocks.html\">External block items</a></li>\n<li><a href=\"macros-by-example.html\"><code class=\"hljs\">macro_rules</code> declarations</a> and <a href=\"macros-by-example.html#metavariables\">matcher metavariables</a></li>\n<li><a href=\"items/implementations.html\">Implementation</a> associated items</li>\n</ul>\n</li>\n<li><a href=\"expressions.html\">Expressions</a>:\n<ul>\n<li><a href=\"expressions/closure-expr.html\">Closure</a> parameters</li>\n<li><a href=\"expressions/loop-expr.html#predicate-pattern-loops\"><code class=\"hljs\">while let</code></a> pattern bindings</li>\n<li><a href=\"expressions/loop-expr.html#iterator-loops\"><code class=\"hljs\">for</code></a> pattern bindings</li>\n<li><a href=\"expressions/if-expr.html#if-let-expressions\"><code class=\"hljs\">if let</code></a> pattern bindings</li>\n<li><a href=\"expressions/match-expr.html\"><code class=\"hljs\">match</code></a> pattern bindings</li>\n<li><a href=\"expressions/loop-expr.html#loop-labels\">Loop labels</a></li>\n</ul>\n</li>\n<li><a href=\"items/generics.html\">Generic parameters</a></li>\n<li><a href=\"trait-bounds.html#higher-ranked-trait-bounds\">Higher ranked trait bounds</a></li>\n<li><a href=\"statements.html#let-statements\"><code class=\"hljs\">let</code> statement</a> pattern bindings</li>\n<li>The <a href=\"macros-by-example.html#the-macro_use-attribute\"><code class=\"hljs\">macro_use</code> attribute</a> can introduce macro names from another crate</li>\n<li>The <a href=\"macros-by-example.html#path-based-scope\"><code class=\"hljs\">macro_export</code> attribute</a> can introduce an alias for the macro into the crate root</li>\n</ul>\n<p>Additionally, <a href=\"macros.html#macro-invocation\">macro invocations</a> and <a href=\"attributes.html\">attributes</a> can introduce names by\nexpanding to one of the above items.</p>\n<h2 id=\"implicitly-declared-entities\"><a class=\"header\" href=\"#implicitly-declared-entities\">Implicitly declared entities</a></h2>\n<p>The following entities are implicitly defined by the language, or are\nintroduced by compiler options and extensions:</p>\n<ul>\n<li><a href=\"names/preludes.html#language-prelude\">Language prelude</a>:\n<ul>\n<li><a href=\"types/boolean.html\">Boolean type</a> — <code class=\"hljs\">bool</code></li>\n<li><a href=\"types/textual.html\">Textual types</a> — <code class=\"hljs\">char</code> and <code class=\"hljs\">str</code></li>\n<li><a href=\"types/numeric.html#integer-types\">Integer types</a> — <code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">i128</code>, <code class=\"hljs\">u8</code>, <code class=\"hljs\">u16</code>, <code class=\"hljs\">u32</code>, <code class=\"hljs\">u64</code>, <code class=\"hljs\">u128</code></li>\n<li><a href=\"types/numeric.html#machine-dependent-integer-types\">Machine-dependent integer types</a> — <code class=\"hljs\">usize</code> and <code class=\"hljs\">isize</code></li>\n<li><a href=\"types/numeric.html#floating-point-types\">floating-point types</a> — <code class=\"hljs\">f32</code> and <code class=\"hljs\">f64</code></li>\n</ul>\n</li>\n<li><a href=\"attributes.html#built-in-attributes-index\">Built-in attributes</a></li>\n<li><a href=\"names/preludes.html#standard-library-prelude\">Standard library prelude</a> items, attributes, and macros</li>\n<li><a href=\"names/preludes.html#extern-prelude\">Standard library</a> crates in the root module</li>\n<li><a href=\"names/preludes.html#extern-prelude\">External crates</a> linked by the compiler</li>\n<li><a href=\"attributes.html#tool-attributes\">Tool attributes</a></li>\n<li><a href=\"attributes/diagnostics.html#lint-check-attributes\">Lints</a> and <a href=\"attributes/diagnostics.html#tool-lint-attributes\">tool lint attributes</a></li>\n<li><a href=\"procedural-macros.html#derive-macro-helper-attributes\">Derive helper attributes</a> are valid within an item without being explicitly imported</li>\n<li>The <a href=\"keywords.html#weak-keywords\"><code class=\"hljs\">'static</code></a> lifetime</li>\n</ul>\n<p>Additionally, the crate root module does not have a name, but can be referred\nto with certain <a href=\"paths.html#path-qualifiers\">path qualifiers</a> or aliases.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"namespaces\"><a class=\"header\" href=\"#namespaces\">Namespaces</a></h1>\n<p>A <em>namespace</em> is a logical grouping of declared <a href=\"names/../names.html\">names</a>. Names are segregated\ninto separate namespaces based on the kind of entity the name refers to.\nNamespaces allow the occurrence of a name in one namespace to not conflict\nwith the same name in another namespace.</p>\n<p>Within a namespace, names are organized in a hierarchy, where each level of\nthe hierarchy has its own collection of named entities.</p>\n<p>There are several different namespaces that each contain different kinds of\nentities. The usage of a name will look for the declaration of that name in\ndifferent namespaces, based on the context, as described in the <a href=\"names/name-resolution.html\">name\nresolution</a> chapter.</p>\n<p>The following is a list of namespaces, with their corresponding entities:</p>\n<ul>\n<li>Type Namespace\n<ul>\n<li><a href=\"names/../items/modules.html\">Module declarations</a></li>\n<li><a href=\"names/../items/extern-crates.html\">External crate declarations</a></li>\n<li><a href=\"names/preludes.html#extern-prelude\">External crate prelude</a> items</li>\n<li><a href=\"names/../items/structs.html\">Struct</a>, <a href=\"names/../items/unions.html\">union</a>, <a href=\"names/../items/enumerations.html\">enum</a>, enum variant declarations</li>\n<li><a href=\"names/../items/traits.html\">Trait item declarations</a></li>\n<li><a href=\"names/../items/type-aliases.html\">Type aliases</a></li>\n<li><a href=\"names/../items/associated-items.html#associated-types\">Associated type declarations</a></li>\n<li>Built-in types: <a href=\"names/../types/boolean.html\">boolean</a>, <a href=\"names/../types/numeric.html\">numeric</a>, and <a href=\"names/../types/textual.html\">textual</a></li>\n<li><a href=\"names/../items/generics.html\">Generic type parameters</a></li>\n<li><a href=\"names/../paths.html#self-1\"><code class=\"hljs\">Self</code> type</a></li>\n<li><a href=\"names/../attributes.html#tool-attributes\">Tool attribute modules</a></li>\n</ul>\n</li>\n<li>Value Namespace\n<ul>\n<li><a href=\"names/../items/functions.html\">Function declarations</a></li>\n<li><a href=\"names/../items/constant-items.html\">Constant item declarations</a></li>\n<li><a href=\"names/../items/static-items.html\">Static item declarations</a></li>\n<li><a href=\"names/../items/structs.html\">Struct constructors</a></li>\n<li><a href=\"names/../items/enumerations.html\">Enum variant constructors</a></li>\n<li><a href=\"names/../paths.html#self-1\"><code class=\"hljs\">Self</code> constructors</a></li>\n<li><a href=\"names/../items/generics.html#const-generics\">Generic const parameters</a></li>\n<li><a href=\"names/../items/associated-items.html#associated-constants\">Associated const declarations</a></li>\n<li><a href=\"names/../items/associated-items.html#associated-functions-and-methods\">Associated function declarations</a></li>\n<li>Local bindings —&nbsp;<a href=\"names/../statements.html#let-statements\"><code class=\"hljs\">let</code></a>, <a href=\"names/../expressions/if-expr.html#if-let-expressions\"><code class=\"hljs\">if let</code></a>, <a href=\"names/../expressions/loop-expr.html#predicate-pattern-loops\"><code class=\"hljs\">while let</code></a>, <a href=\"names/../expressions/loop-expr.html#iterator-loops\"><code class=\"hljs\">for</code></a>, <a href=\"names/../expressions/match-expr.html\"><code class=\"hljs\">match</code></a>\narms, <a href=\"names/../items/functions.html#function-parameters\">function parameters</a>, <a href=\"names/../expressions/closure-expr.html\">closure parameters</a></li>\n<li>Captured <a href=\"names/../expressions/closure-expr.html\">closure</a> variables</li>\n</ul>\n</li>\n<li>Macro Namespace\n<ul>\n<li><a href=\"names/../macros-by-example.html\"><code class=\"hljs\">macro_rules</code> declarations</a></li>\n<li><a href=\"names/../attributes.html#built-in-attributes-index\">Built-in attributes</a></li>\n<li><a href=\"names/../attributes.html#tool-attributes\">Tool attributes</a></li>\n<li><a href=\"names/../procedural-macros.html#function-like-procedural-macros\">Function-like procedural macros</a></li>\n<li><a href=\"names/../procedural-macros.html#derive-macros\">Derive macros</a></li>\n<li><a href=\"names/../procedural-macros.html#derive-macro-helper-attributes\">Derive macro helpers</a></li>\n<li><a href=\"names/../procedural-macros.html#attribute-macros\">Attribute macros</a></li>\n</ul>\n</li>\n<li>Lifetime Namespace\n<ul>\n<li><a href=\"names/../items/generics.html\">Generic lifetime parameters</a></li>\n</ul>\n</li>\n<li>Label Namespace\n<ul>\n<li><a href=\"names/../expressions/loop-expr.html#loop-labels\">Loop labels</a></li>\n<li><a href=\"names/../expressions/loop-expr.html#labelled-block-expressions\">Block labels</a></li>\n</ul>\n</li>\n</ul>\n<p>An example of how overlapping names in different namespaces can be used unambiguously:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Foo introduces a type in the type namespace and a constructor in the value</span>\n<span class=\"hljs-comment\">// namespace.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>(<span class=\"hljs-built_in\">u32</span>);\n\n<span class=\"hljs-comment\">// The `Foo` macro is declared in the macro namespace.</span>\n<span class=\"hljs-built_in\">macro_rules!</span> Foo {\n    () =&gt; {};\n}\n\n<span class=\"hljs-comment\">// `Foo` in the `f` parameter type refers to `Foo` in the type namespace.</span>\n<span class=\"hljs-comment\">// `'Foo` introduces a new lifetime in the lifetime namespace.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example</span></span>&lt;<span class=\"hljs-symbol\">'Foo</span>&gt;(f: Foo) {\n    <span class=\"hljs-comment\">// `Foo` refers to the `Foo` constructor in the value namespace.</span>\n    <span class=\"hljs-keyword\">let</span> ctor = Foo;\n    <span class=\"hljs-comment\">// `Foo` refers to the `Foo` macro in the macro namespace.</span>\n    Foo!{}\n    <span class=\"hljs-comment\">// `'Foo` introduces a label in the label namespace.</span>\n    <span class=\"hljs-symbol\">'Foo</span>: <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-comment\">// `'Foo` refers to the `'Foo` lifetime parameter, and `Foo`</span>\n        <span class=\"hljs-comment\">// refers to the type namespace.</span>\n        <span class=\"hljs-keyword\">let</span> x: &amp;<span class=\"hljs-symbol\">'Foo</span> Foo;\n        <span class=\"hljs-comment\">// `'Foo` refers to the label.</span>\n        <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'Foo</span>;\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"named-entities-without-a-namespace\"><a class=\"header\" href=\"#named-entities-without-a-namespace\">Named entities without a namespace</a></h2>\n<p>The following entities have explicit names, but the names are not a part of\nany specific namespace.</p>\n<h3 id=\"fields\"><a class=\"header\" href=\"#fields\">Fields</a></h3>\n<p>Even though struct, enum, and union fields are named, the named fields do not\nlive in an explicit namespace. They can only be accessed via a <a href=\"names/../expressions/field-expr.html\">field\nexpression</a>, which only inspects the field names of the specific type being\naccessed.</p>\n<h3 id=\"use-declarations-1\"><a class=\"header\" href=\"#use-declarations-1\">Use declarations</a></h3>\n<p>A <a href=\"names/../items/use-declarations.html\">use declaration</a> has named aliases that it imports into scope, but the\n<code class=\"hljs\">use</code> item itself does not belong to a specific namespace. Instead, it can\nintroduce aliases into multiple namespaces, depending on the item kind being\nimported.</p>\n<!-- TODO: describe how `use` works on the use-declarations page, and link to it here. -->\n<h2 id=\"sub-namespaces\"><a class=\"header\" href=\"#sub-namespaces\">Sub-namespaces</a></h2>\n<p>The macro namespace is split into two sub-namespaces: one for <a href=\"names/../macros.html\">bang-style macros</a> and one for <a href=\"names/../attributes.html\">attributes</a>.\nWhen an attribute is resolved, any bang-style macros in scope will be ignored.\nAnd conversely resolving a bang-style macro will ignore attribute macros in scope.\nThis prevents one style from shadowing another.</p>\n<p>For example, the <a href=\"names/../conditional-compilation.html#the-cfg-attribute\"><code class=\"hljs\">cfg</code> attribute</a> and the <a href=\"names/../conditional-compilation.html#the-cfg-macro\"><code class=\"hljs\">cfg</code> macro</a> are two different entities with the same name in the macro namespace, but they can still be used in their respective context.</p>\n<p>It is still an error for a <a href=\"names/../items/use-declarations.html\"><code class=\"hljs\">use</code> import</a> to shadow another macro, regardless of their sub-namespaces.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"scopes\"><a class=\"header\" href=\"#scopes\">Scopes</a></h1>\n<p>A <em>scope</em> is the region of source text where a named <a href=\"names/../names.html\">entity</a> may be referenced with that name.\nThe following sections provide details on the scoping rules and behavior, which depend on the kind of entity and where it is declared.\nThe process of how names are resolved to entities is described in the <a href=\"names/name-resolution.html\">name resolution</a> chapter.\nMore information on \"drop scopes\" used for the purpose of running destructors may be found in the <a href=\"names/../destructors.html\">destructors</a> chapter.</p>\n<h2 id=\"item-scopes\"><a class=\"header\" href=\"#item-scopes\">Item scopes</a></h2>\n<p>The name of an <a href=\"names/../items.html\">item</a> declared directly in a <a href=\"names/../items/modules.html\">module</a> has a scope that extends from the start of the module to the end of the module. These items are also members of the module and can be referred to with a <a href=\"names/../paths.html\">path</a> leading from their module.</p>\n<p>The name of an item declared as a <a href=\"names/../statements.html\">statement</a> has a scope that extends from the start of the block the item statement is in until the end of the block.</p>\n<p>It is an error to introduce an item with a duplicate name of another item in the same <a href=\"names/namespaces.html\">namespace</a> within the same module or block.\n<a href=\"names/../items/use-declarations.html\">Asterisk glob imports</a> have special behavior for dealing with duplicate names and shadowing, see the linked chapter for more details.\nItems in a module may shadow items in a <a href=\"names/scopes.html#prelude-scopes\">prelude</a>.</p>\n<p>Item names from outer modules are not in scope within a nested module.\nA <a href=\"names/../paths.html\">path</a> may be used to refer to an item in another module.</p>\n<h3 id=\"associated-item-scopes\"><a class=\"header\" href=\"#associated-item-scopes\">Associated item scopes</a></h3>\n<p><a href=\"names/../items/associated-items.html\">Associated items</a> are not scoped and can only be referred to by using a <a href=\"names/../paths.html\">path</a> leading from the type or trait they are associated with.\n<a href=\"names/../items/associated-items.html#methods\">Methods</a> can also be referred to via <a href=\"names/../expressions/call-expr.html\">call expressions</a>.</p>\n<p>Similar to items within a module or block,  it is an error to introduce an item within a trait or implementation that is a duplicate of another item in the trait or impl in the same namespace.</p>\n<h2 id=\"pattern-binding-scopes\"><a class=\"header\" href=\"#pattern-binding-scopes\">Pattern binding scopes</a></h2>\n<p>The scope of a local variable <a href=\"names/../patterns.html\">pattern</a> binding depends on where it is used:</p>\n<ul>\n<li><a href=\"names/../statements.html#let-statements\"><code class=\"hljs\">let</code> statement</a> bindings range from just after the <code class=\"hljs\">let</code> statement until the end of the block where it is declared.</li>\n<li><a href=\"names/../items/functions.html#function-parameters\">Function parameter</a> bindings are within the body of the function.</li>\n<li><a href=\"names/../expressions/closure-expr.html\">Closure parameter</a> bindings are within the closure body.</li>\n<li><a href=\"names/../expressions/loop-expr.html#iterator-loops\"><code class=\"hljs\">for</code></a> and <a href=\"names/../expressions/loop-expr.html#predicate-pattern-loops\"><code class=\"hljs\">while let</code></a> bindings are within the loop body.</li>\n<li><a href=\"names/../expressions/if-expr.html#if-let-expressions\"><code class=\"hljs\">if let</code></a> bindings are within the consequent block.</li>\n<li><a href=\"names/../expressions/match-expr.html\"><code class=\"hljs\">match</code> arms</a> bindings are within the <a href=\"names/../expressions/match-expr.html#match-guards\">match guard</a> and the match arm expression.</li>\n</ul>\n<p>Local variable scopes do not extend into item declarations.</p>\n<!-- Not entirely, see https://github.com/rust-lang/rust/issues/33118 -->\n<h3 id=\"pattern-binding-shadowing\"><a class=\"header\" href=\"#pattern-binding-shadowing\">Pattern binding shadowing</a></h3>\n<p>Pattern bindings are allowed to shadow any name in scope with the following exceptions which are an error:</p>\n<ul>\n<li><a href=\"names/../items/generics.html#const-generics\">Const generic parameters</a></li>\n<li><a href=\"names/../items/static-items.html\">Static items</a></li>\n<li><a href=\"names/../items/constant-items.html\">Const items</a></li>\n<li>Constructors for <a href=\"names/../items/structs.html\">structs</a> and <a href=\"names/../items/enumerations.html\">enums</a></li>\n</ul>\n<p>The following example illustrates how local bindings can shadow item declarations:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">shadow_example</span></span>() {\n    <span class=\"hljs-comment\">// Since there are no local variables in scope yet, this resolves to the function.</span>\n    foo(); <span class=\"hljs-comment\">// prints `function`</span>\n    <span class=\"hljs-keyword\">let</span> foo = || <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"closure\"</span>);\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() { <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"function\"</span>); }\n    <span class=\"hljs-comment\">// This resolves to the local closure since it shadows the item.</span>\n    foo(); <span class=\"hljs-comment\">// prints `closure`</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"generic-parameter-scopes\"><a class=\"header\" href=\"#generic-parameter-scopes\">Generic parameter scopes</a></h2>\n<p>Generic parameters are declared in a <a href=\"names/../items/generics.html\"><em>GenericParams</em></a> list.\nThe scope of a generic parameter is within the item it is declared on.</p>\n<p>All parameters are in scope within the generic parameter list regardless of the order they are declared.\nThe following shows some examples where a parameter may be referenced before it is declared:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// The 'b bound is referenced before it is declared.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">params_scope</span></span>&lt;<span class=\"hljs-symbol\">'a</span>: <span class=\"hljs-symbol\">'b</span>, <span class=\"hljs-symbol\">'b</span>&gt;() {}\n\n<span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">SomeTrait</span></span>&lt;<span class=\"hljs-keyword\">const</span> Z: <span class=\"hljs-built_in\">usize</span>&gt; {}\n</span><span class=\"hljs-comment\">// The const N is referenced in the trait bound before it is declared.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>&lt;T: SomeTrait&lt;N&gt;, <span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Generic parameters are also in scope for type bounds and where clauses, for example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">SomeTrait</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {}\n</span><span class=\"hljs-comment\">// The &lt;'a, U&gt; for `SomeTrait` refer to the 'a and U parameters of `bounds_scope`.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bounds_scope</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: SomeTrait&lt;<span class=\"hljs-symbol\">'a</span>, U&gt;, U&gt;() {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">where_scope</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T, U&gt;()\n    <span class=\"hljs-keyword\">where</span> T: SomeTrait&lt;<span class=\"hljs-symbol\">'a</span>, U&gt;\n{}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>It is an error for <a href=\"names/../items.html\">items</a> declared inside a function to refer to a generic parameter from their outer scope.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example</span></span>&lt;T&gt;() {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">inner</span></span>(x: T) {} <span class=\"hljs-comment\">// ERROR: can't use generic parameters from outer function</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"generic-parameter-shadowing\"><a class=\"header\" href=\"#generic-parameter-shadowing\">Generic parameter shadowing</a></h3>\n<p>It is an error to shadow a generic parameter with the exception that items declared within functions are allowed to shadow generic parameter names from the function.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T, <span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;() {\n    <span class=\"hljs-comment\">// Items within functions are allowed to shadow generic parameter in scope.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">inner_lifetime</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;() {} <span class=\"hljs-comment\">// OK</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">inner_type</span></span>&lt;T&gt;() {} <span class=\"hljs-comment\">// OK</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">inner_const</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;() {} <span class=\"hljs-comment\">// OK</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">SomeTrait</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T, <span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example_lifetime</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;() {} <span class=\"hljs-comment\">// ERROR: 'a is already in use</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example_type</span></span>&lt;T&gt;() {} <span class=\"hljs-comment\">// ERROR: T is already in use</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example_const</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;() {} <span class=\"hljs-comment\">// ERROR: N is already in use</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example_mixed</span></span>&lt;<span class=\"hljs-keyword\">const</span> T: <span class=\"hljs-built_in\">usize</span>&gt;() {} <span class=\"hljs-comment\">// ERROR: T is already in use</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"lifetime-scopes\"><a class=\"header\" href=\"#lifetime-scopes\">Lifetime scopes</a></h3>\n<p>Lifetime parameters are declared in a <a href=\"names/../items/generics.html\"><em>GenericParams</em></a> list and <a href=\"names/../trait-bounds.html#higher-ranked-trait-bounds\">higher-ranked trait bounds</a>.</p>\n<p>The <code class=\"hljs\">'static</code> lifetime and <a href=\"names/../lifetime-elision.html\">placeholder lifetime</a> <code class=\"hljs\">'_</code> have a special meaning and cannot be declared as a parameter.</p>\n<h4 id=\"lifetime-generic-parameter-scopes\"><a class=\"header\" href=\"#lifetime-generic-parameter-scopes\">Lifetime generic parameter scopes</a></h4>\n<p><a href=\"names/../items/constant-items.html\">Constant</a> and <a href=\"names/../items/static-items.html\">static</a> items and <a href=\"names/../const_eval.html#const-context\">const contexts</a> only ever allow <code class=\"hljs\">'static</code> lifetime references, so no other lifetime may be in scope within them.\n<a href=\"names/../items/associated-items.html#associated-constants\">Associated consts</a> do allow referring to lifetimes declared in their trait or implementation.</p>\n<h4 id=\"higher-ranked-trait-bound-scopes\"><a class=\"header\" href=\"#higher-ranked-trait-bound-scopes\">Higher-ranked trait bound scopes</a></h4>\n<p>The scope of a lifetime parameter declared as a <a href=\"names/../trait-bounds.html#higher-ranked-trait-bounds\">higher-ranked trait bound</a> depends on the scenario where it is used.</p>\n<ul>\n<li>As a <a href=\"names/../items/generics.html\"><em>TypeBoundWhereClauseItem</em></a> the declared lifetimes are in scope in the type and the type bounds.</li>\n<li>As a <a href=\"names/../trait-bounds.html\"><em>TraitBound</em></a> the declared lifetimes are in scope within the bound type path.</li>\n<li>As a <a href=\"names/../types/function-pointer.html\"><em>BareFunctionType</em></a> the declared lifetimes are in scope within the function parameters and return type.</li>\n</ul>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;{}\n</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">where_clause</span></span>&lt;T&gt;()\n    <span class=\"hljs-comment\">// 'a is in scope in both the type and the type bounds.</span>\n    <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">for</span> &lt;<span class=\"hljs-symbol\">'a</span>&gt; &amp;<span class=\"hljs-symbol\">'a</span> T: Trait&lt;<span class=\"hljs-symbol\">'a</span>&gt;\n{}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bound</span></span>&lt;T&gt;()\n    <span class=\"hljs-comment\">// 'a is in scope within the bound.</span>\n    <span class=\"hljs-keyword\">where</span> T: <span class=\"hljs-keyword\">for</span> &lt;<span class=\"hljs-symbol\">'a</span>&gt; Trait&lt;<span class=\"hljs-symbol\">'a</span>&gt;\n{}\n\n<span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Example</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n</span><span class=\"boring\">    field: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">u32</span>\n</span><span class=\"boring\">}\n</span>\n<span class=\"hljs-comment\">// 'a is in scope in both the parameters and return type.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">FnExample</span></span> = <span class=\"hljs-keyword\">for</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(x: Example&lt;<span class=\"hljs-symbol\">'a</span>&gt;) -&gt; Example&lt;<span class=\"hljs-symbol\">'a</span>&gt;;\n<span class=\"boring\">}</span></code></pre></pre>\n<h4 id=\"impl-trait-restrictions\"><a class=\"header\" href=\"#impl-trait-restrictions\">Impl trait restrictions</a></h4>\n<p><a href=\"names/../types/impl-trait.html\">Impl trait</a> types can only reference lifetimes declared on a function or implementation.</p>\n<!-- not able to demonstrate the scope error because the compiler panics\n     https://github.com/rust-lang/rust/issues/67830\n-->\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait1</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span>;\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait2</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Example</span></span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Trait1 <span class=\"hljs-keyword\">for</span> Example {\n</span><span class=\"boring\">    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = Element;\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Element</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; Trait2&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-keyword\">for</span> Element {}\n</span><span class=\"boring\">\n</span><span class=\"hljs-comment\">// The `impl Trait2` here is not allowed to refer to 'b but it is allowed to</span>\n<span class=\"hljs-comment\">// refer to 'a.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;() -&gt; <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-keyword\">for</span>&lt;<span class=\"hljs-symbol\">'b</span>&gt; Trait1&lt;Item = <span class=\"hljs-keyword\">impl</span> Trait2&lt;<span class=\"hljs-symbol\">'a</span>&gt;&gt; {\n    <span class=\"hljs-comment\">// ...</span>\n<span class=\"boring\">   Example\n</span>}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"loop-label-scopes\"><a class=\"header\" href=\"#loop-label-scopes\">Loop label scopes</a></h2>\n<p><a href=\"names/../expressions/loop-expr.html#loop-labels\">Loop labels</a> may be declared by a <a href=\"names/../expressions/loop-expr.html\">loop expression</a>.\nThe scope of a loop label is from the point it is declared till the end of the loop expression.\nThe scope does not extend into <a href=\"names/../items.html\">items</a>, <a href=\"names/../expressions/closure-expr.html\">closures</a>, <a href=\"names/../expressions/block-expr.html#async-blocks\">async blocks</a>, <a href=\"names/../items/generics.html#const-generics\">const arguments</a>, <a href=\"names/../const_eval.html#const-context\">const contexts</a>, and the iterator expression of the defining <a href=\"names/../expressions/loop-expr.html#iterator-loops\"><code class=\"hljs\">for</code> loop</a>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-symbol\">'a</span>: <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">3</span> {\n    <span class=\"hljs-keyword\">if</span> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'a</span>;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">inner</span></span>() {\n        <span class=\"hljs-comment\">// Using 'a here would be an error.</span>\n        <span class=\"hljs-comment\">// break 'a;</span>\n    }\n}\n\n<span class=\"hljs-comment\">// The label is in scope for the expression of `while` loops.</span>\n<span class=\"hljs-symbol\">'a</span>: <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'a</span> {}         <span class=\"hljs-comment\">// Loop does not run.</span>\n<span class=\"hljs-symbol\">'a</span>: <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> _ = <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'a</span> {} <span class=\"hljs-comment\">// Loop does not run.</span>\n\n<span class=\"hljs-comment\">// The label is not in scope in the defining `for` loop:</span>\n<span class=\"hljs-symbol\">'a</span>: <span class=\"hljs-keyword\">for</span> outer <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">5</span> {\n    <span class=\"hljs-comment\">// This will break the outer loop, skipping the inner loop and stopping</span>\n    <span class=\"hljs-comment\">// the outer loop.</span>\n    <span class=\"hljs-symbol\">'a</span>: <span class=\"hljs-keyword\">for</span> inner <span class=\"hljs-keyword\">in</span> { <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'a</span>; <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">1</span> } {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, inner); <span class=\"hljs-comment\">// This does not run.</span>\n    }\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, outer); <span class=\"hljs-comment\">// This does not run, either.</span>\n}\n\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Loop labels may shadow labels of the same name in outer scopes.\nReferences to a label refer to the closest definition.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Loop label shadowing example.</span>\n<span class=\"hljs-symbol\">'a</span>: <span class=\"hljs-keyword\">for</span> outer <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">5</span> {\n    <span class=\"hljs-symbol\">'a</span>: <span class=\"hljs-keyword\">for</span> inner <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">5</span> {\n        <span class=\"hljs-comment\">// This terminates the inner loop, but the outer loop continues to run.</span>\n        <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'a</span>;\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"prelude-scopes\"><a class=\"header\" href=\"#prelude-scopes\">Prelude scopes</a></h2>\n<p><a href=\"names/preludes.html\">Preludes</a> bring entities into scope of every module.\nThe entities are not members of the module, but are implicitly queried during <a href=\"names/name-resolution.html\">name resolution</a>.\nThe prelude names may be shadowed by declarations in a module.</p>\n<p>The preludes are layered such that one shadows another if they contain entities of the same name.\nThe order that preludes may shadow other preludes is the following where earlier entries may shadow later ones:</p>\n<ol>\n<li><a href=\"names/preludes.html#extern-prelude\">Extern prelude</a></li>\n<li><a href=\"names/preludes.html#tool-prelude\">Tool prelude</a></li>\n<li><a href=\"names/preludes.html#macro_use-prelude\"><code class=\"hljs\">macro_use</code> prelude</a></li>\n<li><a href=\"names/preludes.html#standard-library-prelude\">Standard library prelude</a></li>\n<li><a href=\"names/preludes.html#language-prelude\">Language prelude</a></li>\n</ol>\n<h2 id=\"macro_rules-scopes\"><a class=\"header\" href=\"#macro_rules-scopes\"><code>macro_rules</code> scopes</a></h2>\n<p>The scope of <code class=\"hljs\">macro_rules</code> macros is described in the <a href=\"names/../macros-by-example.html\">Macros By Example</a> chapter.\nThe behavior depends on the use of the <a href=\"names/../macros-by-example.html#the-macro_use-attribute\"><code class=\"hljs\">macro_use</code></a> and <a href=\"names/../macros-by-example.html#path-based-scope\"><code class=\"hljs\">macro_export</code></a> attributes.</p>\n<h2 id=\"derive-macro-helper-attributes-1\"><a class=\"header\" href=\"#derive-macro-helper-attributes-1\">Derive macro helper attributes</a></h2>\n<p><a href=\"names/../procedural-macros.html#derive-macro-helper-attributes\">Derive macro helper attributes</a> are in scope in the item where their corresponding <a href=\"names/../attributes/derive.html\"><code class=\"hljs\">derive</code> attribute</a> is specified.\nThe scope extends from just after the <code class=\"hljs\">derive</code> attribute to the end of the item. <!-- Note: Not strictly true, see https://github.com/rust-lang/rust/issues/79202, but this is the intention. -->\nHelper attributes shadow other attributes of the same name in scope.</p>\n<h2 id=\"self-scope\"><a class=\"header\" href=\"#self-scope\"><code>Self</code> scope</a></h2>\n<p>Although <a href=\"names/../paths.html#self-1\"><code class=\"hljs\">Self</code></a> is a keyword with special meaning, it interacts with name resolution in a way similar to normal names.</p>\n<p>The implicit <code class=\"hljs\">Self</code> type in the definition of a <a href=\"names/../items/structs.html\">struct</a>, <a href=\"names/../items/enumerations.html\">enum</a>, <a href=\"names/../items/unions.html\">union</a>, <a href=\"names/../items/traits.html\">trait</a>, or <a href=\"names/../items/implementations.html\">implementation</a> is treated similarly to a <a href=\"names/scopes.html#generic-parameter-scopes\">generic parameter</a>, and is in scope in the same way as a generic type parameter.</p>\n<p>The implicit <code class=\"hljs\">Self</code> constructor in the value <a href=\"names/namespaces.html\">namespace</a> of an <a href=\"names/../items/implementations.html\">implementation</a> is in scope within the body of the implementation (the implementation's <a href=\"names/../items/associated-items.html\">associated items</a>).</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Self type within struct definition.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Recursive</span></span> {\n    f1: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;&gt;\n}\n\n<span class=\"hljs-comment\">// Self type within generic parameters.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SelfGeneric</span></span>&lt;T: <span class=\"hljs-built_in\">Into</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;&gt;(T);\n\n<span class=\"hljs-comment\">// Self value constructor within an implementation.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ImplExample</span></span>();\n<span class=\"hljs-keyword\">impl</span> ImplExample {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example</span></span>() -&gt; <span class=\"hljs-keyword\">Self</span> { <span class=\"hljs-comment\">// Self type</span>\n        <span class=\"hljs-keyword\">Self</span>() <span class=\"hljs-comment\">// Self value constructor</span>\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"preludes\"><a class=\"header\" href=\"#preludes\">Preludes</a></h1>\n<p>A <em>prelude</em> is a collection of names that are automatically brought into scope\nof every module in a crate.</p>\n<p>These prelude names are not part of the module itself: they are implicitly\nqueried during <a href=\"names/name-resolution.html\">name resolution</a>. For example, even though something like\n<a href=\"names/../../std/boxed/struct.Box.html\"><code class=\"hljs\">Box</code></a> is in scope in every module, you cannot refer to it as <code class=\"hljs\">self::Box</code>\nbecause it is not a member of the current module.</p>\n<p>There are several different preludes:</p>\n<ul>\n<li><a href=\"names/preludes.html#standard-library-prelude\">Standard library prelude</a></li>\n<li><a href=\"names/preludes.html#extern-prelude\">Extern prelude</a></li>\n<li><a href=\"names/preludes.html#language-prelude\">Language prelude</a></li>\n<li><a href=\"names/preludes.html#macro_use-prelude\"><code class=\"hljs\">macro_use</code> prelude</a></li>\n<li><a href=\"names/preludes.html#tool-prelude\">Tool prelude</a></li>\n</ul>\n<h2 id=\"standard-library-prelude\"><a class=\"header\" href=\"#standard-library-prelude\">Standard library prelude</a></h2>\n<p>Each crate has a standard library prelude, which consists of the names from a single standard library module.\nThe module used depends on the crate's edition, and on whether the <a href=\"names/preludes.html#the-no_std-attribute\"><code class=\"hljs\">no_std</code> attribute</a> is applied to the crate:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Edition</th><th><code class=\"hljs\">no_std</code> not applied</th><th><code class=\"hljs\">no_std</code> applied</th></tr></thead><tbody>\n<tr><td>2015</td><td><a href=\"names/../../std/prelude/rust_2015/index.html\"><code class=\"hljs\">std::prelude::rust_2015</code></a></td><td><a href=\"names/../../core/prelude/rust_2015/index.html\"><code class=\"hljs\">core::prelude::rust_2015</code></a></td></tr>\n<tr><td>2018</td><td><a href=\"names/../../std/prelude/rust_2018/index.html\"><code class=\"hljs\">std::prelude::rust_2018</code></a></td><td><a href=\"names/../../core/prelude/rust_2018/index.html\"><code class=\"hljs\">core::prelude::rust_2018</code></a></td></tr>\n<tr><td>2021</td><td><a href=\"names/../../std/prelude/rust_2021/index.html\"><code class=\"hljs\">std::prelude::rust_2021</code></a></td><td><a href=\"names/../../core/prelude/rust_2021/index.html\"><code class=\"hljs\">core::prelude::rust_2021</code></a></td></tr>\n</tbody></table>\n</div>\n<blockquote>\n<p><strong>Note</strong>:</p>\n<p><a href=\"names/../../std/prelude/rust_2015/index.html\"><code class=\"hljs\">std::prelude::rust_2015</code></a> and <a href=\"names/../../std/prelude/rust_2018/index.html\"><code class=\"hljs\">std::prelude::rust_2018</code></a> have the same contents as <a href=\"names/../../std/prelude/v1/index.html\"><code class=\"hljs\">std::prelude::v1</code></a>.</p>\n<p><a href=\"names/../../core/prelude/rust_2015/index.html\"><code class=\"hljs\">core::prelude::rust_2015</code></a> and <a href=\"names/../../core/prelude/rust_2018/index.html\"><code class=\"hljs\">core::prelude::rust_2018</code></a> have the same contents as <a href=\"names/../../core/prelude/v1/index.html\"><code class=\"hljs\">core::prelude::v1</code></a>.</p>\n</blockquote>\n<h2 id=\"extern-prelude-1\"><a class=\"header\" href=\"#extern-prelude-1\">Extern prelude</a></h2>\n<p>External crates imported with <a href=\"names/../items/extern-crates.html\"><code class=\"hljs\">extern crate</code></a> in the root module or provided\nto the compiler (as with the <code class=\"hljs\">--extern</code> flag with <code class=\"hljs\">rustc</code>) are added to the\n<em>extern prelude</em>. If imported with an alias such as <code class=\"hljs\">extern crate orig_name as new_name</code>, then the symbol <code class=\"hljs\">new_name</code> is instead added to the prelude.</p>\n<p>The <a href=\"names/../../core/index.html\"><code class=\"hljs\">core</code></a> crate is always added to the extern prelude. The <a href=\"names/../../std/index.html\"><code class=\"hljs\">std</code></a> crate is\nadded as long as the <a href=\"names/preludes.html#the-no_std-attribute\"><code class=\"hljs\">no_std</code> attribute</a> is not specified in the crate root.</p>\n<blockquote>\n<p><strong>Edition Differences</strong>: In the 2015 edition, crates in the extern prelude\ncannot be referenced via <a href=\"names/../items/use-declarations.html\">use declarations</a>, so it is generally standard\npractice to include <code class=\"hljs\">extern crate</code> declarations to bring them into scope.</p>\n<p>Beginning in the 2018 edition, <a href=\"names/../items/use-declarations.html\">use declarations</a> can reference crates in\nthe extern prelude, so it is considered unidiomatic to use <code class=\"hljs\">extern crate</code>.</p>\n</blockquote>\n<blockquote>\n<p><strong>Note</strong>: Additional crates that ship with <code class=\"hljs\">rustc</code>, such as <a href=\"names/../../alloc/index.html\"><code class=\"hljs\">alloc</code></a>, and\n<a href=\"names/../../test/index.html\"><code class=\"hljs\">test</code></a>, are not automatically included with the <code class=\"hljs\">--extern</code> flag when using\nCargo. They must be brought into scope with an <code class=\"hljs\">extern crate</code> declaration,\neven in the 2018 edition.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button hidden\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> alloc;\n<span class=\"hljs-keyword\">use</span> alloc::rc::Rc;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Cargo does bring in <code class=\"hljs\">proc_macro</code> to the extern prelude for proc-macro crates\nonly.</p>\n</blockquote>\n<!--\nSee https://github.com/rust-lang/rust/issues/57288 for more about the\nalloc/test limitation.\n-->\n<h3 id=\"the-no_std-attribute\"><a class=\"header\" href=\"#the-no_std-attribute\">The <code>no_std</code> attribute</a></h3>\n<p>By default, the standard library is automatically included in the crate root\nmodule. The <a href=\"names/../../std/index.html\"><code class=\"hljs\">std</code></a> crate is added to the root, along with an implicit\n<a href=\"names/../macros-by-example.html#the-macro_use-attribute\"><code class=\"hljs\">macro_use</code> attribute</a> pulling in all macros exported from <code class=\"hljs\">std</code> into the\n<a href=\"names/preludes.html#macro_use-prelude\"><code class=\"hljs\">macro_use</code> prelude</a>. Both <a href=\"names/../../core/index.html\"><code class=\"hljs\">core</code></a> and <a href=\"names/../../std/index.html\"><code class=\"hljs\">std</code></a> are added to the <a href=\"names/preludes.html#extern-prelude\">extern\nprelude</a>.</p>\n<p>The <em><code class=\"hljs\">no_std</code> <a href=\"names/../attributes.html\">attribute</a></em> may be applied at the crate level to prevent the\n<a href=\"names/../../std/index.html\"><code class=\"hljs\">std</code></a> crate from being automatically added into scope. It does three things:</p>\n<ul>\n<li>Prevents <code class=\"hljs\">std</code> from being added to the <a href=\"names/preludes.html#extern-prelude\">extern prelude</a>.</li>\n<li>Affects which module is used to make up the <a href=\"names/preludes.html#standard-library-prelude\">standard library prelude</a> (as described above).</li>\n<li>Injects the <a href=\"names/../../core/index.html\"><code class=\"hljs\">core</code></a> crate into the crate root instead of <a href=\"names/../../std/index.html\"><code class=\"hljs\">std</code></a>, and pulls\nin all macros exported from <code class=\"hljs\">core</code> in the <a href=\"names/preludes.html#macro_use-prelude\"><code class=\"hljs\">macro_use</code> prelude</a>.</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: Using the core prelude over the standard prelude is useful when\neither the crate is targeting a platform that does not support the standard\nlibrary or is purposefully not using the capabilities of the standard\nlibrary. Those capabilities are mainly dynamic memory allocation (e.g. <code class=\"hljs\">Box</code>\nand <code class=\"hljs\">Vec</code>) and file and network capabilities (e.g. <code class=\"hljs\">std::fs</code> and <code class=\"hljs\">std::io</code>).</p>\n</blockquote>\n<div class=\"warning\">\n<p>Warning: Using <code class=\"hljs\">no_std</code> does not prevent the standard library from being\nlinked in. It is still valid to put <code class=\"hljs\">extern crate std;</code> into the crate and\ndependencies can also link it in.</p>\n</div>\n<h2 id=\"language-prelude\"><a class=\"header\" href=\"#language-prelude\">Language prelude</a></h2>\n<p>The language prelude includes names of types and attributes that are built-in\nto the language. The language prelude is always in scope. It includes the following:</p>\n<ul>\n<li><a href=\"names/namespaces.html\">Type namespace</a>\n<ul>\n<li><a href=\"names/../types/boolean.html\">Boolean type</a> —&nbsp;<code class=\"hljs\">bool</code></li>\n<li><a href=\"names/../types/textual.html\">Textual types</a> — <code class=\"hljs\">char</code> and <code class=\"hljs\">str</code></li>\n<li><a href=\"names/../types/numeric.html#integer-types\">Integer types</a> — <code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">i128</code>, <code class=\"hljs\">u8</code>, <code class=\"hljs\">u16</code>, <code class=\"hljs\">u32</code>, <code class=\"hljs\">u64</code>, <code class=\"hljs\">u128</code></li>\n<li><a href=\"names/../types/numeric.html#machine-dependent-integer-types\">Machine-dependent integer types</a> — <code class=\"hljs\">usize</code> and <code class=\"hljs\">isize</code></li>\n<li><a href=\"names/../types/numeric.html#floating-point-types\">floating-point types</a> — <code class=\"hljs\">f32</code> and <code class=\"hljs\">f64</code></li>\n</ul>\n</li>\n<li><a href=\"names/namespaces.html\">Macro namespace</a>\n<ul>\n<li><a href=\"names/../attributes.html#built-in-attributes-index\">Built-in attributes</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"macro_use-prelude\"><a class=\"header\" href=\"#macro_use-prelude\"><code>macro_use</code> prelude</a></h2>\n<p>The <code class=\"hljs\">macro_use</code> prelude includes macros from external crates that were\nimported by the <a href=\"names/../macros-by-example.html#the-macro_use-attribute\"><code class=\"hljs\">macro_use</code> attribute</a> applied to an <a href=\"names/../items/extern-crates.html\"><code class=\"hljs\">extern crate</code></a>.</p>\n<h2 id=\"tool-prelude\"><a class=\"header\" href=\"#tool-prelude\">Tool prelude</a></h2>\n<p>The tool prelude includes tool names for external tools in the <a href=\"names/namespaces.html\">type\nnamespace</a>. See the <a href=\"names/../attributes.html#tool-attributes\">tool attributes</a> section for more details.</p>\n<h2 id=\"the-no_implicit_prelude-attribute\"><a class=\"header\" href=\"#the-no_implicit_prelude-attribute\">The <code>no_implicit_prelude</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">no_implicit_prelude</code> <a href=\"names/../attributes.html\">attribute</a></em> may be applied at the crate level or\non a module to indicate that it should not automatically bring the <a href=\"names/preludes.html#standard-library-prelude\">standard\nlibrary prelude</a>, <a href=\"names/preludes.html#extern-prelude\">extern prelude</a>, or <a href=\"names/preludes.html#tool-prelude\">tool prelude</a> into scope for that\nmodule or any of its descendants.</p>\n<p>This attribute does not affect the <a href=\"names/preludes.html#language-prelude\">language prelude</a>.</p>\n<blockquote>\n<p><strong>Edition Differences</strong>: In the 2015 edition, the <code class=\"hljs\">no_implicit_prelude</code>\nattribute does not affect the <a href=\"names/preludes.html#macro_use-prelude\"><code class=\"hljs\">macro_use</code> prelude</a>, and all macros exported\nfrom the standard library are still included in the <code class=\"hljs\">macro_use</code> prelude.\nStarting in the 2018 edition, it will remove the <code class=\"hljs\">macro_use</code> prelude.</p>\n</blockquote>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"paths\"><a class=\"header\" href=\"#paths\">Paths</a></h1>\n<p>A <em>path</em> is a sequence of one or more path segments <em>logically</em> separated by\na namespace <span class=\"parenthetical\">qualifier (<code class=\"hljs\">::</code>)</span>. If a path\nconsists of only one segment, it refers to either an <a href=\"items.html\">item</a> or a <a href=\"variables.html\">variable</a> in\na local control scope. If a path has multiple segments, it always refers to an\nitem.</p>\n<p>Two examples of simple paths consisting of only identifier segments:</p>\n<!-- ignore: syntax fragment -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">x;\nx::y::z;</code></pre>\n<h2 id=\"types-of-paths\"><a class=\"header\" href=\"#types-of-paths\">Types of paths</a></h2>\n<h3 id=\"simple-paths\"><a class=\"header\" href=\"#simple-paths\">Simple Paths</a></h3>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>SimplePath</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">::</code><sup>?</sup> <em>SimplePathSegment</em> (<code class=\"hljs\">::</code> <em>SimplePathSegment</em>)<sup>*</sup></p>\n<p><em>SimplePathSegment</em> :<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a> | <code class=\"hljs\">super</code> | <code class=\"hljs\">self</code> | <code class=\"hljs\">crate</code> | <code class=\"hljs\">$crate</code></p>\n</blockquote>\n<p>Simple paths are used in <a href=\"visibility-and-privacy.html\">visibility</a> markers, <a href=\"attributes.html\">attributes</a>, <a href=\"macros-by-example.html\">macros</a>, and <a href=\"items/use-declarations.html\"><code class=\"hljs\">use</code></a> items.\nExamples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::io::{<span class=\"hljs-keyword\">self</span>, Write};\n<span class=\"hljs-keyword\">mod</span> m {\n    <span class=\"hljs-meta\">#[clippy::cyclomatic_complexity = <span class=\"hljs-meta-string\">\"0\"</span>]</span>\n    <span class=\"hljs-keyword\">pub</span> (<span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">super</span>) <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f1</span></span>() {}\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"paths-in-expressions\"><a class=\"header\" href=\"#paths-in-expressions\">Paths in expressions</a></h3>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>PathInExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">::</code><sup>?</sup> <em>PathExprSegment</em> (<code class=\"hljs\">::</code> <em>PathExprSegment</em>)<sup>*</sup></p>\n<p><em>PathExprSegment</em> :<br>\n&nbsp;&nbsp; <em>PathIdentSegment</em> (<code class=\"hljs\">::</code> <em>GenericArgs</em>)<sup>?</sup></p>\n<p><em>PathIdentSegment</em> :<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a> | <code class=\"hljs\">super</code> | <code class=\"hljs\">self</code> | <code class=\"hljs\">Self</code> | <code class=\"hljs\">crate</code> | <code class=\"hljs\">$crate</code></p>\n<p><em>GenericArgs</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">&lt;</code> <code class=\"hljs\">&gt;</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">&lt;</code> ( <em>GenericArg</em> <code class=\"hljs\">,</code> )<sup>*</sup> <em>GenericArg</em> <code class=\"hljs\">,</code><sup>?</sup> <code class=\"hljs\">&gt;</code></p>\n<p><em>GenericArg</em> :<br>\n&nbsp;&nbsp; <a href=\"trait-bounds.html\"><em>Lifetime</em></a> | <a href=\"types.html#type-expressions\"><em>Type</em></a> | <em>GenericArgsConst</em> | <em>GenericArgsBinding</em> | <em>GenericArgsBounds</em></p>\n<p><em>GenericArgsConst</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/block-expr.html\"><em>BlockExpression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/literal-expr.html\"><em>LiteralExpression</em></a><br>\n&nbsp;&nbsp; | <code class=\"hljs\">-</code> <a href=\"expressions/literal-expr.html\"><em>LiteralExpression</em></a><br>\n&nbsp;&nbsp; | <a href=\"paths.html#simple-paths\"><em>SimplePathSegment</em></a></p>\n<p><em>GenericArgsBinding</em> :<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a> <em>GenericArgs</em><sup>?</sup> <code class=\"hljs\">=</code> <a href=\"types.html#type-expressions\"><em>Type</em></a></p>\n<p><em>GenericArgsBounds</em> :<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a> <em>GenericArgs</em><sup>?</sup> <code class=\"hljs\">:</code> <a href=\"trait-bounds.html\"><em>TypeParamBounds</em></a></p>\n</blockquote>\n<p>Paths in expressions allow for paths with generic arguments to be specified. They are\nused in various places in <a href=\"expressions.html\">expressions</a> and <a href=\"patterns.html\">patterns</a>.</p>\n<p>The <code class=\"hljs\">::</code> token is required before the opening <code class=\"hljs\">&lt;</code> for generic arguments to avoid\nambiguity with the less-than operator. This is colloquially known as \"turbofish\" syntax.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>(<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">10</span>).collect::&lt;<span class=\"hljs-built_in\">Vec</span>&lt;_&gt;&gt;();\n<span class=\"hljs-built_in\">Vec</span>::&lt;<span class=\"hljs-built_in\">u8</span>&gt;::with_capacity(<span class=\"hljs-number\">1024</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The order of generic arguments is restricted to lifetime arguments, then type\narguments, then const arguments, then equality constraints.</p>\n<p>Const arguments must be surrounded by braces unless they are a\n<a href=\"expressions/literal-expr.html\">literal</a> or a single segment path.</p>\n<p>The synthetic type parameters corresponding to <code class=\"hljs\">impl Trait</code> types are implicit,\nand these cannot be explicitly specified.</p>\n<h2 id=\"qualified-paths\"><a class=\"header\" href=\"#qualified-paths\">Qualified paths</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>QualifiedPathInExpression</em> :<br>\n&nbsp;&nbsp; <em>QualifiedPathType</em> (<code class=\"hljs\">::</code> <em>PathExprSegment</em>)<sup>+</sup></p>\n<p><em>QualifiedPathType</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">&lt;</code> <a href=\"types.html#type-expressions\"><em>Type</em></a> (<code class=\"hljs\">as</code> <em>TypePath</em>)<sup>?</sup> <code class=\"hljs\">&gt;</code></p>\n<p><em>QualifiedPathInType</em> :<br>\n&nbsp;&nbsp; <em>QualifiedPathType</em> (<code class=\"hljs\">::</code> <em>TypePathSegment</em>)<sup>+</sup></p>\n</blockquote>\n<p>Fully qualified paths allow for disambiguating the path for <a href=\"items/implementations.html#trait-implementations\">trait implementations</a> and\nfor specifying <a href=\"paths.html#canonical-paths\">canonical paths</a>. When used in a type specification, it\nsupports using the type syntax specified below.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n<span class=\"hljs-keyword\">impl</span> S {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() { <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"S\"</span>); }\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">T1</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() { <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"T1 f\"</span>); }\n}\n<span class=\"hljs-keyword\">impl</span> T1 <span class=\"hljs-keyword\">for</span> S {}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">T2</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() { <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"T2 f\"</span>); }\n}\n<span class=\"hljs-keyword\">impl</span> T2 <span class=\"hljs-keyword\">for</span> S {}\nS::f();  <span class=\"hljs-comment\">// Calls the inherent impl.</span>\n&lt;S <span class=\"hljs-keyword\">as</span> T1&gt;::f();  <span class=\"hljs-comment\">// Calls the T1 trait function.</span>\n&lt;S <span class=\"hljs-keyword\">as</span> T2&gt;::f();  <span class=\"hljs-comment\">// Calls the T2 trait function.</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"paths-in-types\"><a class=\"header\" href=\"#paths-in-types\">Paths in types</a></h3>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>TypePath</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">::</code><sup>?</sup> <em>TypePathSegment</em> (<code class=\"hljs\">::</code> <em>TypePathSegment</em>)<sup>*</sup></p>\n<p><em>TypePathSegment</em> :<br>\n&nbsp;&nbsp; <em>PathIdentSegment</em> (<code class=\"hljs\">::</code><sup>?</sup> (<a href=\"paths.html#paths-in-expressions\"><em>GenericArgs</em></a> | <em>TypePathFn</em>))<sup>?</sup></p>\n<p><em>TypePathFn</em> :<br>\n<code class=\"hljs\">(</code> <em>TypePathFnInputs</em><sup>?</sup> <code class=\"hljs\">)</code> (<code class=\"hljs\">-&gt;</code> <a href=\"types.html#type-expressions\"><em>TypeNoBounds</em></a>)<sup>?</sup></p>\n<p><em>TypePathFnInputs</em> :<br>\n<a href=\"types.html#type-expressions\"><em>Type</em></a> (<code class=\"hljs\">,</code> <a href=\"types.html#type-expressions\"><em>Type</em></a>)<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n</blockquote>\n<p>Type paths are used within type definitions, trait bounds, type parameter bounds,\nand qualified paths.</p>\n<p>Although the <code class=\"hljs\">::</code> token is allowed before the generics arguments, it is not required\nbecause there is no ambiguity like there is in <em>PathInExpression</em>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> ops {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Range</span></span>&lt;T&gt; {f1: T}\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Index</span></span>&lt;T&gt; {}\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Example</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {f1: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>}\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n</span><span class=\"hljs-keyword\">impl</span> ops::Index&lt;ops::Range&lt;<span class=\"hljs-built_in\">usize</span>&gt;&gt; <span class=\"hljs-keyword\">for</span> S { <span class=\"hljs-comment\">/*...*/</span> }\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">i</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;() -&gt; <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Iterator</span>&lt;Item = ops::Example&lt;<span class=\"hljs-symbol\">'a</span>&gt;&gt; {\n    <span class=\"hljs-comment\">// ...</span>\n<span class=\"boring\">   <span class=\"hljs-keyword\">const</span> EXAMPLE: <span class=\"hljs-built_in\">Vec</span>&lt;ops::Example&lt;<span class=\"hljs-symbol\">'static</span>&gt;&gt; = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">   EXAMPLE.into_iter()\n</span>}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">G</span></span> = std::boxed::<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> std::ops::<span class=\"hljs-built_in\">FnOnce</span>(<span class=\"hljs-built_in\">isize</span>) -&gt; <span class=\"hljs-built_in\">isize</span>&gt;;\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"path-qualifiers\"><a class=\"header\" href=\"#path-qualifiers\">Path qualifiers</a></h2>\n<p>Paths can be denoted with various leading qualifiers to change the meaning of\nhow it is resolved.</p>\n<h3 id=\"\"><a class=\"header\" href=\"#\"><code>::</code></a></h3>\n<p>Paths starting with <code class=\"hljs\">::</code> are considered to be <em>global paths</em> where the segments of the path\nstart being resolved from a place which differs based on edition. Each identifier in\nthe path must resolve to an item.</p>\n<blockquote>\n<p><strong>Edition Differences</strong>: In the 2015 Edition, identifiers resolve from the \"crate root\"\n(<code class=\"hljs\">crate::</code> in the 2018 edition), which contains a variety of different items, including\nexternal crates, default crates such as <code class=\"hljs\">std</code> or <code class=\"hljs\">core</code>, and items in the top level of\nthe crate (including <code class=\"hljs\">use</code> imports).</p>\n<p>Beginning with the 2018 Edition, paths starting with <code class=\"hljs\">::</code> resolve from\ncrates in the <a href=\"names/preludes.html#extern-prelude\">extern prelude</a>. That is, they must be followed by the name of a crate.</p>\n</blockquote>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n    <span class=\"hljs-comment\">// In the 2018 edition, this accesses `std` via the extern prelude.</span>\n    <span class=\"hljs-comment\">// In the 2015 edition, this accesses `std` via the crate root.</span>\n    <span class=\"hljs-keyword\">let</span> now = ::std::time::Instant::now();\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{:?}\"</span>, now);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2015 hljs hide-boring\"><span class=\"hljs-comment\">// 2015 Edition</span>\n<span class=\"hljs-keyword\">mod</span> a {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n}\n<span class=\"hljs-keyword\">mod</span> b {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n        ::a::foo(); <span class=\"hljs-comment\">// call `a`'s foo function</span>\n        <span class=\"hljs-comment\">// In Rust 2018, `::a` would be interpreted as the crate `a`.</span>\n    }\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<h3 id=\"self\"><a class=\"header\" href=\"#self\"><code>self</code></a></h3>\n<p><code class=\"hljs\">self</code> resolves the path relative to the current module. <code class=\"hljs\">self</code> can only be used as the\nfirst segment, without a preceding <code class=\"hljs\">::</code>.</p>\n<p>In a method body, a path which consists of a single <code class=\"hljs\">self</code> segment resolves to the method's self parameter.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>() {\n    self::foo();\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>(<span class=\"hljs-built_in\">bool</span>);\n<span class=\"hljs-keyword\">impl</span> S {\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">baz</span></span>(<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>;\n    }\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<h3 id=\"self-1\"><a class=\"header\" href=\"#self-1\"><code>Self</code></a></h3>\n<p><code class=\"hljs\">Self</code>, with a capital \"S\", is used to refer to the implementing type within\n<a href=\"items/traits.html\">traits</a> and <a href=\"items/implementations.html\">implementations</a>.</p>\n<p><code class=\"hljs\">Self</code> can only be used as the first segment, without a preceding <code class=\"hljs\">::</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">T</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span>;\n    <span class=\"hljs-keyword\">const</span> C: <span class=\"hljs-built_in\">i32</span>;\n    <span class=\"hljs-comment\">// `Self` will be whatever type that implements `T`.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; <span class=\"hljs-keyword\">Self</span>;\n    <span class=\"hljs-comment\">// `Self::Item` will be the type alias in the implementation.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; Self::Item;\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n<span class=\"hljs-keyword\">impl</span> T <span class=\"hljs-keyword\">for</span> S {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = <span class=\"hljs-built_in\">i32</span>;\n    <span class=\"hljs-keyword\">const</span> C: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">9</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; <span class=\"hljs-keyword\">Self</span> {           <span class=\"hljs-comment\">// `Self` is the type `S`.</span>\n        S\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; Self::Item {  <span class=\"hljs-comment\">// `Self::Item` is the type `i32`.</span>\n        Self::C                  <span class=\"hljs-comment\">// `Self::C` is the constant value `9`.</span>\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"super\"><a class=\"header\" href=\"#super\"><code>super</code></a></h3>\n<p><code class=\"hljs\">super</code> in a path resolves to the parent module. It may only be used in leading\nsegments of the path, possibly after an initial <code class=\"hljs\">self</code> segment.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-keyword\">mod</span> a {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n}\n<span class=\"hljs-keyword\">mod</span> b {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n        super::a::foo(); <span class=\"hljs-comment\">// call a's foo function</span>\n    }\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p><code class=\"hljs\">super</code> may be repeated several times after the first <code class=\"hljs\">super</code> or <code class=\"hljs\">self</code> to refer to\nancestor modules.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-keyword\">mod</span> a {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n\n    <span class=\"hljs-keyword\">mod</span> b {\n        <span class=\"hljs-keyword\">mod</span> c {\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n                super::super::foo(); <span class=\"hljs-comment\">// call a's foo function</span>\n                self::super::super::foo(); <span class=\"hljs-comment\">// call a's foo function</span>\n            }\n        }\n    }\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<h3 id=\"crate\"><a class=\"header\" href=\"#crate\"><code>crate</code></a></h3>\n<p><code class=\"hljs\">crate</code> resolves the path relative to the current crate. <code class=\"hljs\">crate</code> can only be used as the\nfirst segment, without a preceding <code class=\"hljs\">::</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n<span class=\"hljs-keyword\">mod</span> a {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>() {\n        crate::foo();\n    }\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<h3 id=\"crate-1\"><a class=\"header\" href=\"#crate-1\"><code>$crate</code></a></h3>\n<p><code class=\"hljs\">$crate</code> is only used within <a href=\"macros-by-example.html\">macro transcribers</a>, and can only be used as the first\nsegment, without a preceding <code class=\"hljs\">::</code>. <code class=\"hljs\">$crate</code> will expand to a path to access items from the\ntop level of the crate where the macro is defined, regardless of which crate the macro is\ninvoked.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">increment</span></span>(x: <span class=\"hljs-built_in\">u32</span>) -&gt; <span class=\"hljs-built_in\">u32</span> {\n    x + <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-meta\">#[macro_export]</span>\n<span class=\"hljs-built_in\">macro_rules!</span> inc {\n    ($x:expr) =&gt; ( $crate::increment($x) )\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() { }</span></code></pre></pre>\n<h2 id=\"canonical-paths\"><a class=\"header\" href=\"#canonical-paths\">Canonical paths</a></h2>\n<p>Items defined in a module or implementation have a <em>canonical path</em> that\ncorresponds to where within its crate it is defined. All other paths to these\nitems are aliases. The canonical path is defined as a <em>path prefix</em> appended by\nthe path segment the item itself defines.</p>\n<p><a href=\"items/implementations.html\">Implementations</a> and <a href=\"items/use-declarations.html\">use declarations</a> do not have canonical paths, although\nthe items that implementations define do have them. Items defined in\nblock expressions do not have canonical paths. Items defined in a module that\ndoes not have a canonical path do not have a canonical path. Associated items\ndefined in an implementation that refers to an item without a canonical path,\ne.g. as the implementing type, the trait being implemented, a type parameter or\nbound on a type parameter, do not have canonical paths.</p>\n<p>The path prefix for modules is the canonical path to that module. For bare\nimplementations, it is the canonical path of the item being implemented\nsurrounded by <span class=\"parenthetical\">angle (<code class=\"hljs\">&lt;&gt;</code>)</span> brackets. For\n<a href=\"items/implementations.html#trait-implementations\">trait implementations</a>, it is the canonical path of the item being implemented\nfollowed by <code class=\"hljs\">as</code> followed by the canonical path to the trait all surrounded in\n<span class=\"parenthetical\">angle (<code class=\"hljs\">&lt;&gt;</code>)</span> brackets.</p>\n<p>The canonical path is only meaningful within a given crate. There is no global\nnamespace across crates; an item's canonical path merely identifies it within\nthe crate.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-comment\">// Comments show the canonical path of the item.</span>\n\n<span class=\"hljs-keyword\">mod</span> a { <span class=\"hljs-comment\">// crate::a</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>; <span class=\"hljs-comment\">// crate::a::Struct</span>\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> { <span class=\"hljs-comment\">// crate::a::Trait</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(&amp;<span class=\"hljs-keyword\">self</span>); <span class=\"hljs-comment\">// crate::a::Trait::f</span>\n    }\n\n    <span class=\"hljs-keyword\">impl</span> Trait <span class=\"hljs-keyword\">for</span> Struct {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {} <span class=\"hljs-comment\">// &lt;crate::a::Struct as crate::a::Trait&gt;::f</span>\n    }\n\n    <span class=\"hljs-keyword\">impl</span> Struct {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">g</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {} <span class=\"hljs-comment\">// &lt;crate::a::Struct&gt;::g</span>\n    }\n}\n\n<span class=\"hljs-keyword\">mod</span> without { <span class=\"hljs-comment\">// crate::without</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">canonicals</span></span>() { <span class=\"hljs-comment\">// crate::without::canonicals</span>\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">OtherStruct</span></span>; <span class=\"hljs-comment\">// None</span>\n\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">OtherTrait</span></span> { <span class=\"hljs-comment\">// None</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">g</span></span>(&amp;<span class=\"hljs-keyword\">self</span>); <span class=\"hljs-comment\">// None</span>\n        }\n\n        <span class=\"hljs-keyword\">impl</span> OtherTrait <span class=\"hljs-keyword\">for</span> OtherStruct {\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">g</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {} <span class=\"hljs-comment\">// None</span>\n        }\n\n        <span class=\"hljs-keyword\">impl</span> OtherTrait <span class=\"hljs-keyword\">for</span> crate::a::Struct {\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">g</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {} <span class=\"hljs-comment\">// None</span>\n        }\n\n        <span class=\"hljs-keyword\">impl</span> crate::a::Trait <span class=\"hljs-keyword\">for</span> OtherStruct {\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {} <span class=\"hljs-comment\">// None</span>\n        }\n    }\n}\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"name-resolution\"><a class=\"header\" href=\"#name-resolution\">Name resolution</a></h1>\n<blockquote>\n<p><strong>Note</strong>: This is a placeholder for future expansion.</p>\n</blockquote>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"visibility-and-privacy\"><a class=\"header\" href=\"#visibility-and-privacy\">Visibility and Privacy</a></h1>\n<blockquote>\n<p><strong><sup>Syntax<sup></sup></sup></strong><br>\n<em>Visibility</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">pub</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">pub</code> <code class=\"hljs\">(</code> <code class=\"hljs\">crate</code> <code class=\"hljs\">)</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">pub</code> <code class=\"hljs\">(</code> <code class=\"hljs\">self</code> <code class=\"hljs\">)</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">pub</code> <code class=\"hljs\">(</code> <code class=\"hljs\">super</code> <code class=\"hljs\">)</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">pub</code> <code class=\"hljs\">(</code> <code class=\"hljs\">in</code> <a href=\"paths.html#simple-paths\"><em>SimplePath</em></a> <code class=\"hljs\">)</code></p>\n</blockquote>\n<p>These two terms are often used interchangeably, and what they are attempting to\nconvey is the answer to the question \"Can this item be used at this location?\"</p>\n<p>Rust's name resolution operates on a global hierarchy of namespaces. Each level\nin the hierarchy can be thought of as some item. The items are one of those\nmentioned above, but also include external crates. Declaring or defining a new\nmodule can be thought of as inserting a new tree into the hierarchy at the\nlocation of the definition.</p>\n<p>To control whether interfaces can be used across modules, Rust checks each use\nof an item to see whether it should be allowed or not. This is where privacy\nwarnings are generated, or otherwise \"you used a private item of another module\nand weren't allowed to.\"</p>\n<p>By default, everything is <em>private</em>, with two exceptions: Associated\nitems in a <code class=\"hljs\">pub</code> Trait are public by default; Enum variants\nin a <code class=\"hljs\">pub</code> enum are also public by default. When an item is declared as <code class=\"hljs\">pub</code>,\nit can be thought of as being accessible to the outside world. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}\n</span><span class=\"hljs-comment\">// Declare a private struct</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n\n<span class=\"hljs-comment\">// Declare a public struct with a private field</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Bar</span></span> {\n    field: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-comment\">// Declare a public enum with two public variants</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">State</span></span> {\n    PubliclyAccessibleState,\n    PubliclyAccessibleState2,\n}</code></pre></pre>\n<p>With the notion of an item being either public or private, Rust allows item\naccesses in two cases:</p>\n<ol>\n<li>If an item is public, then it can be accessed externally from some module\n<code class=\"hljs\">m</code> if you can access all the item's ancestor modules from <code class=\"hljs\">m</code>. You can\nalso potentially be able to name the item through re-exports. See below.</li>\n<li>If an item is private, it may be accessed by the current module and its\ndescendants.</li>\n</ol>\n<p>These two cases are surprisingly powerful for creating module hierarchies\nexposing public APIs while hiding internal implementation details. To help\nexplain, here's a few use cases and what they would entail:</p>\n<ul>\n<li>\n<p>A library developer needs to expose functionality to crates which link\nagainst their library. As a consequence of the first case, this means that\nanything which is usable externally must be <code class=\"hljs\">pub</code> from the root down to the\ndestination item. Any private item in the chain will disallow external\naccesses.</p>\n</li>\n<li>\n<p>A crate needs a global available \"helper module\" to itself, but it doesn't\nwant to expose the helper module as a public API. To accomplish this, the\nroot of the crate's hierarchy would have a private module which then\ninternally has a \"public API\". Because the entire crate is a descendant of\nthe root, then the entire local crate can access this private module through\nthe second case.</p>\n</li>\n<li>\n<p>When writing unit tests for a module, it's often a common idiom to have an\nimmediate child of the module to-be-tested named <code class=\"hljs\">mod test</code>. This module\ncould access any items of the parent module through the second case, meaning\nthat internal implementation details could also be seamlessly tested from the\nchild module.</p>\n</li>\n</ul>\n<p>In the second case, it mentions that a private item \"can be accessed\" by the\ncurrent module and its descendants, but the exact meaning of accessing an item\ndepends on what the item is. Accessing a module, for example, would mean\nlooking inside of it (to import more items). On the other hand, accessing a\nfunction would mean that it is invoked. Additionally, path expressions and\nimport statements are considered to access an item in the sense that the\nimport/expression is only valid if the destination is in the current visibility\nscope.</p>\n<p>Here's an example of a program which exemplifies the three cases outlined\nabove:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-comment\">// This module is private, meaning that no external crate can access this</span>\n<span class=\"hljs-comment\">// module. Because it is private at the root of this current crate, however, any</span>\n<span class=\"hljs-comment\">// module in the crate may access any publicly visible item in this module.</span>\n<span class=\"hljs-keyword\">mod</span> crate_helper_module {\n\n    <span class=\"hljs-comment\">// This function can be used by anything in the current crate</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">crate_helper</span></span>() {}\n\n    <span class=\"hljs-comment\">// This function *cannot* be used by anything else in the crate. It is not</span>\n    <span class=\"hljs-comment\">// publicly visible outside of the `crate_helper_module`, so only this</span>\n    <span class=\"hljs-comment\">// current module and its descendants may access it.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">implementation_detail</span></span>() {}\n}\n\n<span class=\"hljs-comment\">// This function is \"public to the root\" meaning that it's available to external</span>\n<span class=\"hljs-comment\">// crates linking against this one.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">public_api</span></span>() {}\n\n<span class=\"hljs-comment\">// Similarly to 'public_api', this module is public so external crates may look</span>\n<span class=\"hljs-comment\">// inside of it.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> submodule {\n    <span class=\"hljs-keyword\">use</span> crate::crate_helper_module;\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">my_method</span></span>() {\n        <span class=\"hljs-comment\">// Any item in the local crate may invoke the helper module's public</span>\n        <span class=\"hljs-comment\">// interface through a combination of the two rules above.</span>\n        crate_helper_module::crate_helper();\n    }\n\n    <span class=\"hljs-comment\">// This function is hidden to any module which is not a descendant of</span>\n    <span class=\"hljs-comment\">// `submodule`</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">my_implementation</span></span>() {}\n\n    <span class=\"hljs-meta\">#[cfg(test)]</span>\n    <span class=\"hljs-keyword\">mod</span> test {\n\n        <span class=\"hljs-meta\">#[test]</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">test_my_implementation</span></span>() {\n            <span class=\"hljs-comment\">// Because this module is a descendant of `submodule`, it's allowed</span>\n            <span class=\"hljs-comment\">// to access private items inside of `submodule` without a privacy</span>\n            <span class=\"hljs-comment\">// violation.</span>\n            super::my_implementation();\n        }\n    }\n}\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p>For a Rust program to pass the privacy checking pass, all paths must be valid\naccesses given the two rules above. This includes all use statements,\nexpressions, types, etc.</p>\n<h2 id=\"pubin-path-pubcrate-pubsuper-and-pubself\"><a class=\"header\" href=\"#pubin-path-pubcrate-pubsuper-and-pubself\"><code>pub(in path)</code>, <code>pub(crate)</code>, <code>pub(super)</code>, and <code>pub(self)</code></a></h2>\n<p>In addition to public and private, Rust allows users to declare an item as\nvisible only within a given scope. The rules for <code class=\"hljs\">pub</code> restrictions are as\nfollows:</p>\n<ul>\n<li><code class=\"hljs\">pub(in path)</code> makes an item visible within the provided <code class=\"hljs\">path</code>. <code class=\"hljs\">path</code> must\nbe an ancestor module of the item whose visibility is being declared.</li>\n<li><code class=\"hljs\">pub(crate)</code> makes an item visible within the current crate.</li>\n<li><code class=\"hljs\">pub(super)</code> makes an item visible to the parent module. This is equivalent\nto <code class=\"hljs\">pub(in super)</code>.</li>\n<li><code class=\"hljs\">pub(self)</code> makes an item visible to the current module. This is equivalent\nto <code class=\"hljs\">pub(in self)</code> or not using <code class=\"hljs\">pub</code> at all.</li>\n</ul>\n<blockquote>\n<p><strong>Edition Differences</strong>: Starting with the 2018 edition, paths for\n<code class=\"hljs\">pub(in path)</code> must start with <code class=\"hljs\">crate</code>, <code class=\"hljs\">self</code>, or <code class=\"hljs\">super</code>. The 2015 edition\nmay also use paths starting with <code class=\"hljs\">::</code> or modules from the crate root.</p>\n</blockquote>\n<p>Here's an example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2015 hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> outer_mod {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> inner_mod {\n        <span class=\"hljs-comment\">// This function is visible within `outer_mod`</span>\n        <span class=\"hljs-keyword\">pub</span>(<span class=\"hljs-keyword\">in</span> crate::outer_mod) <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">outer_mod_visible_fn</span></span>() {}\n        <span class=\"hljs-comment\">// Same as above, this is only valid in the 2015 edition.</span>\n        <span class=\"hljs-keyword\">pub</span>(<span class=\"hljs-keyword\">in</span> outer_mod) <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">outer_mod_visible_fn_2015</span></span>() {}\n\n        <span class=\"hljs-comment\">// This function is visible to the entire crate</span>\n        <span class=\"hljs-keyword\">pub</span>(<span class=\"hljs-keyword\">crate</span>) <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">crate_visible_fn</span></span>() {}\n\n        <span class=\"hljs-comment\">// This function is visible within `outer_mod`</span>\n        <span class=\"hljs-keyword\">pub</span>(<span class=\"hljs-keyword\">super</span>) <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">super_mod_visible_fn</span></span>() {\n            <span class=\"hljs-comment\">// This function is visible since we're in the same `mod`</span>\n            inner_mod_visible_fn();\n        }\n\n        <span class=\"hljs-comment\">// This function is visible only within `inner_mod`,</span>\n        <span class=\"hljs-comment\">// which is the same as leaving it private.</span>\n        <span class=\"hljs-keyword\">pub</span>(<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">inner_mod_visible_fn</span></span>() {}\n    }\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n        inner_mod::outer_mod_visible_fn();\n        inner_mod::crate_visible_fn();\n        inner_mod::super_mod_visible_fn();\n\n        <span class=\"hljs-comment\">// This function is no longer visible since we're outside of `inner_mod`</span>\n        <span class=\"hljs-comment\">// Error! `inner_mod_visible_fn` is private</span>\n        <span class=\"hljs-comment\">//inner_mod::inner_mod_visible_fn();</span>\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>() {\n    <span class=\"hljs-comment\">// This function is still visible since we're in the same crate</span>\n    outer_mod::inner_mod::crate_visible_fn();\n\n    <span class=\"hljs-comment\">// This function is no longer visible since we're outside of `outer_mod`</span>\n    <span class=\"hljs-comment\">// Error! `super_mod_visible_fn` is private</span>\n    <span class=\"hljs-comment\">//outer_mod::inner_mod::super_mod_visible_fn();</span>\n\n    <span class=\"hljs-comment\">// This function is no longer visible since we're outside of `outer_mod`</span>\n    <span class=\"hljs-comment\">// Error! `outer_mod_visible_fn` is private</span>\n    <span class=\"hljs-comment\">//outer_mod::inner_mod::outer_mod_visible_fn();</span>\n\n    outer_mod::foo();\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() { bar() }</code></pre></pre>\n<blockquote>\n<p><strong>Note:</strong> This syntax only adds another restriction to the visibility of an\nitem. It does not guarantee that the item is visible within all parts of the\nspecified scope. To access an item, all of its parent items up to the\ncurrent scope must still be visible as well.</p>\n</blockquote>\n<h2 id=\"re-exporting-and-visibility\"><a class=\"header\" href=\"#re-exporting-and-visibility\">Re-exporting and Visibility</a></h2>\n<p>Rust allows publicly re-exporting items through a <code class=\"hljs\">pub use</code> directive. Because\nthis is a public directive, this allows the item to be used in the current\nmodule through the rules above. It essentially allows public access into the\nre-exported item. For example, this program is valid:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">use</span> self::implementation::api;\n\n<span class=\"hljs-keyword\">mod</span> implementation {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> api {\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {}\n    }\n}\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p>This means that any external crate referencing <code class=\"hljs\">implementation::api::f</code> would\nreceive a privacy violation, while the path <code class=\"hljs\">api::f</code> would be allowed.</p>\n<p>When re-exporting a private item, it can be thought of as allowing the \"privacy\nchain\" being short-circuited through the reexport instead of passing through\nthe namespace hierarchy as it normally would.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"memory-model\"><a class=\"header\" href=\"#memory-model\">Memory model</a></h1>\n<p>Rust does not yet have a defined memory model. Various academics and industry professionals\nare working on various proposals, but for now, this is an under-defined place\nin the language.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"memory-allocation-and-lifetime\"><a class=\"header\" href=\"#memory-allocation-and-lifetime\">Memory allocation and lifetime</a></h1>\n<p>The <em>items</em> of a program are those functions, modules, and types that have their\nvalue calculated at compile-time and stored uniquely in the memory image of the\nrust process. Items are neither dynamically allocated nor freed.</p>\n<p>The <em>heap</em> is a general term that describes boxes.  The lifetime of an\nallocation in the heap depends on the lifetime of the box values pointing to\nit. Since box values may themselves be passed in and out of frames, or stored\nin the heap, heap allocations may outlive the frame they are allocated within.\nAn allocation in the heap is guaranteed to reside at a single location in the\nheap for the whole lifetime of the allocation - it will never be relocated as\na result of moving a box value.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"variables\"><a class=\"header\" href=\"#variables\">Variables</a></h1>\n<p>A <em>variable</em> is a component of a stack frame, either a named function parameter,\nan anonymous <a href=\"expressions.html#temporaries\">temporary</a>, or a named local\nvariable.</p>\n<p>A <em>local variable</em> (or <em>stack-local</em> allocation) holds a value directly,\nallocated within the stack's memory. The value is a part of the stack frame.</p>\n<p>Local variables are immutable unless declared otherwise. For example:\n<code class=\"hljs\">let mut x = ...</code>.</p>\n<p>Function parameters are immutable unless declared with <code class=\"hljs\">mut</code>. The <code class=\"hljs\">mut</code> keyword\napplies only to the following parameter. For example: <code class=\"hljs\">|mut x, y|</code> and\n<code class=\"hljs\">fn f(mut x: Box&lt;i32&gt;, y: Box&lt;i32&gt;)</code> declare one mutable variable <code class=\"hljs\">x</code> and one\nimmutable variable <code class=\"hljs\">y</code>.</p>\n<p>Local variables are not initialized when allocated. Instead, the entire frame\nworth of local variables are allocated, on frame-entry, in an uninitialized\nstate. Subsequent statements within a function may or may not initialize the\nlocal variables. Local variables can be used only after they have been\ninitialized through all reachable control flow paths.</p>\n<p>In this next example, <code class=\"hljs\">init_after_if</code> is initialized after the <a href=\"expressions/if-expr.html#if-expressions\"><code class=\"hljs\">if</code> expression</a>\nwhile <code class=\"hljs\">uninit_after_if</code> is not because it is not initialized in the <code class=\"hljs\">else</code> case.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">random_bool</span></span>() -&gt; <span class=\"hljs-built_in\">bool</span> { <span class=\"hljs-literal\">true</span> }\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">initialization_example</span></span>() {\n    <span class=\"hljs-keyword\">let</span> init_after_if: ();\n    <span class=\"hljs-keyword\">let</span> uninit_after_if: ();\n\n    <span class=\"hljs-keyword\">if</span> random_bool() {\n        init_after_if = ();\n        uninit_after_if = ();\n    } <span class=\"hljs-keyword\">else</span> {\n        init_after_if = ();\n    }\n\n    init_after_if; <span class=\"hljs-comment\">// ok</span>\n    <span class=\"hljs-comment\">// uninit_after_if; // err: use of possibly uninitialized `uninit_after_if`</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"linkage\"><a class=\"header\" href=\"#linkage\">Linkage</a></h1>\n<blockquote>\n<p>Note: This section is described more in terms of the compiler than of\nthe language.</p>\n</blockquote>\n<p>The compiler supports various methods to link crates together both\nstatically and dynamically. This section will explore the various methods to\nlink crates together, and more information about native libraries can be\nfound in the <a href=\"../book/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code\">FFI section of the book</a>.</p>\n<p>In one session of compilation, the compiler can generate multiple artifacts\nthrough the usage of either command line flags or the <code class=\"hljs\">crate_type</code> attribute.\nIf one or more command line flags are specified, all <code class=\"hljs\">crate_type</code> attributes will\nbe ignored in favor of only building the artifacts specified by command line.</p>\n<ul>\n<li>\n<p><code class=\"hljs\">--crate-type=bin</code>, <code class=\"hljs\">#![crate_type = \"bin\"]</code> - A runnable executable will be\nproduced. This requires that there is a <code class=\"hljs\">main</code> function in the crate which\nwill be run when the program begins executing. This will link in all Rust and\nnative dependencies, producing a single distributable binary.\nThis is the default crate type.</p>\n</li>\n<li>\n<p><code class=\"hljs\">--crate-type=lib</code>, <code class=\"hljs\">#![crate_type = \"lib\"]</code> - A Rust library will be produced.\nThis is an ambiguous concept as to what exactly is produced because a library\ncan manifest itself in several forms. The purpose of this generic <code class=\"hljs\">lib</code> option\nis to generate the \"compiler recommended\" style of library. The output library\nwill always be usable by rustc, but the actual type of library may change from\ntime-to-time. The remaining output types are all different flavors of\nlibraries, and the <code class=\"hljs\">lib</code> type can be seen as an alias for one of them (but the\nactual one is compiler-defined).</p>\n</li>\n<li>\n<p><code class=\"hljs\">--crate-type=dylib</code>, <code class=\"hljs\">#![crate_type = \"dylib\"]</code> - A dynamic Rust library will\nbe produced. This is different from the <code class=\"hljs\">lib</code> output type in that this forces\ndynamic library generation. The resulting dynamic library can be used as a\ndependency for other libraries and/or executables. This output type will\ncreate <code class=\"hljs\">*.so</code> files on Linux, <code class=\"hljs\">*.dylib</code> files on macOS, and <code class=\"hljs\">*.dll</code> files on\nWindows.</p>\n</li>\n<li>\n<p><code class=\"hljs\">--crate-type=staticlib</code>, <code class=\"hljs\">#![crate_type = \"staticlib\"]</code> - A static system\nlibrary will be produced. This is different from other library outputs in that\nthe compiler will never attempt to link to <code class=\"hljs\">staticlib</code> outputs. The\npurpose of this output type is to create a static library containing all of\nthe local crate's code along with all upstream dependencies. This output type\nwill create <code class=\"hljs\">*.a</code> files on Linux, macOS and Windows (MinGW), and <code class=\"hljs\">*.lib</code> files\non Windows (MSVC). This format is recommended for use in situations such as\nlinking Rust code into an existing non-Rust application\nbecause it will not have dynamic dependencies on other Rust code.</p>\n</li>\n<li>\n<p><code class=\"hljs\">--crate-type=cdylib</code>, <code class=\"hljs\">#![crate_type = \"cdylib\"]</code> - A dynamic system\nlibrary will be produced.  This is used when compiling\na dynamic library to be loaded from another language.  This output type will\ncreate <code class=\"hljs\">*.so</code> files on Linux, <code class=\"hljs\">*.dylib</code> files on macOS, and <code class=\"hljs\">*.dll</code> files on\nWindows.</p>\n</li>\n<li>\n<p><code class=\"hljs\">--crate-type=rlib</code>, <code class=\"hljs\">#![crate_type = \"rlib\"]</code> - A \"Rust library\" file will be\nproduced. This is used as an intermediate artifact and can be thought of as a\n\"static Rust library\". These <code class=\"hljs\">rlib</code> files, unlike <code class=\"hljs\">staticlib</code> files, are\ninterpreted by the compiler in future linkage. This essentially means\nthat <code class=\"hljs\">rustc</code> will look for metadata in <code class=\"hljs\">rlib</code> files like it looks for metadata\nin dynamic libraries. This form of output is used to produce statically linked\nexecutables as well as <code class=\"hljs\">staticlib</code> outputs.</p>\n</li>\n<li>\n<p><code class=\"hljs\">--crate-type=proc-macro</code>, <code class=\"hljs\">#![crate_type = \"proc-macro\"]</code> - The output\nproduced is not specified, but if a <code class=\"hljs\">-L</code> path is provided to it then the\ncompiler will recognize the output artifacts as a macro and it can be loaded\nfor a program. Crates compiled with this crate type  must only export\n<a href=\"procedural-macros.html\">procedural macros</a>. The compiler will automatically set the <code class=\"hljs\">proc_macro</code>\n<a href=\"conditional-compilation.html\">configuration option</a>. The crates are always compiled with the same target\nthat the compiler itself was built with. For example, if you are executing\nthe compiler from Linux with an <code class=\"hljs\">x86_64</code> CPU, the target will be\n<code class=\"hljs\">x86_64-unknown-linux-gnu</code> even if the crate is a dependency of another crate\nbeing built for a different target.</p>\n</li>\n</ul>\n<p>Note that these outputs are stackable in the sense that if multiple are\nspecified, then the compiler will produce each form of output without\nhaving to recompile. However, this only applies for outputs specified by the\nsame method. If only <code class=\"hljs\">crate_type</code> attributes are specified, then they will all\nbe built, but if one or more <code class=\"hljs\">--crate-type</code> command line flags are specified,\nthen only those outputs will be built.</p>\n<p>With all these different kinds of outputs, if crate A depends on crate B, then\nthe compiler could find B in various different forms throughout the system. The\nonly forms looked for by the compiler, however, are the <code class=\"hljs\">rlib</code> format and the\ndynamic library format. With these two options for a dependent library, the\ncompiler must at some point make a choice between these two formats. With this\nin mind, the compiler follows these rules when determining what format of\ndependencies will be used:</p>\n<ol>\n<li>\n<p>If a static library is being produced, all upstream dependencies are\nrequired to be available in <code class=\"hljs\">rlib</code> formats. This requirement stems from the\nreason that a dynamic library cannot be converted into a static format.</p>\n<p>Note that it is impossible to link in native dynamic dependencies to a static\nlibrary, and in this case warnings will be printed about all unlinked native\ndynamic dependencies.</p>\n</li>\n<li>\n<p>If an <code class=\"hljs\">rlib</code> file is being produced, then there are no restrictions on what\nformat the upstream dependencies are available in. It is simply required that\nall upstream dependencies be available for reading metadata from.</p>\n<p>The reason for this is that <code class=\"hljs\">rlib</code> files do not contain any of their upstream\ndependencies. It wouldn't be very efficient for all <code class=\"hljs\">rlib</code> files to contain a\ncopy of <code class=\"hljs\">libstd.rlib</code>!</p>\n</li>\n<li>\n<p>If an executable is being produced and the <code class=\"hljs\">-C prefer-dynamic</code> flag is not\nspecified, then dependencies are first attempted to be found in the <code class=\"hljs\">rlib</code>\nformat. If some dependencies are not available in an rlib format, then\ndynamic linking is attempted (see below).</p>\n</li>\n<li>\n<p>If a dynamic library or an executable that is being dynamically linked is\nbeing produced, then the compiler will attempt to reconcile the available\ndependencies in either the rlib or dylib format to create a final product.</p>\n<p>A major goal of the compiler is to ensure that a library never appears more\nthan once in any artifact. For example, if dynamic libraries B and C were\neach statically linked to library A, then a crate could not link to B and C\ntogether because there would be two copies of A. The compiler allows mixing\nthe rlib and dylib formats, but this restriction must be satisfied.</p>\n<p>The compiler currently implements no method of hinting what format a library\nshould be linked with. When dynamically linking, the compiler will attempt to\nmaximize dynamic dependencies while still allowing some dependencies to be\nlinked in via an rlib.</p>\n<p>For most situations, having all libraries available as a dylib is recommended\nif dynamically linking. For other situations, the compiler will emit a\nwarning if it is unable to determine which formats to link each library with.</p>\n</li>\n</ol>\n<p>In general, <code class=\"hljs\">--crate-type=bin</code> or <code class=\"hljs\">--crate-type=lib</code> should be sufficient for\nall compilation needs, and the other options are just available if more\nfine-grained control is desired over the output format of a crate.</p>\n<h2 id=\"static-and-dynamic-c-runtimes\"><a class=\"header\" href=\"#static-and-dynamic-c-runtimes\">Static and dynamic C runtimes</a></h2>\n<p>The standard library in general strives to support both statically linked and\ndynamically linked C runtimes for targets as appropriate. For example the\n<code class=\"hljs\">x86_64-pc-windows-msvc</code> and <code class=\"hljs\">x86_64-unknown-linux-musl</code> targets typically come\nwith both runtimes and the user selects which one they'd like. All targets in\nthe compiler have a default mode of linking to the C runtime. Typically targets\nare linked dynamically by default, but there are exceptions which are static by\ndefault such as:</p>\n<ul>\n<li><code class=\"hljs\">arm-unknown-linux-musleabi</code></li>\n<li><code class=\"hljs\">arm-unknown-linux-musleabihf</code></li>\n<li><code class=\"hljs\">armv7-unknown-linux-musleabihf</code></li>\n<li><code class=\"hljs\">i686-unknown-linux-musl</code></li>\n<li><code class=\"hljs\">x86_64-unknown-linux-musl</code></li>\n</ul>\n<p>The linkage of the C runtime is configured to respect the <code class=\"hljs\">crt-static</code> target\nfeature. These target features are typically configured from the command line\nvia flags to the compiler itself. For example to enable a static runtime you\nwould execute:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">rustc -C target-feature=+crt-static foo.rs\n</code></pre>\n<p>whereas to link dynamically to the C runtime you would execute:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">rustc -C target-feature=-crt-static foo.rs\n</code></pre>\n<p>Targets which do not support switching between linkage of the C runtime will\nignore this flag. It's recommended to inspect the resulting binary to ensure\nthat it's linked as you would expect after the compiler succeeds.</p>\n<p>Crates may also learn about how the C runtime is being linked. Code on MSVC, for\nexample, needs to be compiled differently (e.g. with <code class=\"hljs\">/MT</code> or <code class=\"hljs\">/MD</code>) depending\non the runtime being linked. This is exported currently through the\n<a href=\"conditional-compilation.html#target_feature\"><code class=\"hljs\">cfg</code> attribute <code class=\"hljs\">target_feature</code> option</a>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[cfg(target_feature = <span class=\"hljs-meta-string\">\"crt-static\"</span>)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"the C runtime should be statically linked\"</span>);\n}\n\n<span class=\"hljs-meta\">#[cfg(not(target_feature = <span class=\"hljs-meta-string\">\"crt-static\"</span>))]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"the C runtime should be dynamically linked\"</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Also note that Cargo build scripts can learn about this feature through\n<a href=\"../cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts\">environment variables</a>. In a build script you can detect the linkage\nvia:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-keyword\">use</span> std::env;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> linkage = env::var(<span class=\"hljs-string\">\"CARGO_CFG_TARGET_FEATURE\"</span>).unwrap_or(<span class=\"hljs-built_in\">String</span>::new());\n\n    <span class=\"hljs-keyword\">if</span> linkage.contains(<span class=\"hljs-string\">\"crt-static\"</span>) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"the C runtime will be statically linked\"</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"the C runtime will be dynamically linked\"</span>);\n    }\n}</code></pre></pre>\n<p>To use this feature locally, you typically will use the <code class=\"hljs\">RUSTFLAGS</code> environment\nvariable to specify flags to the compiler through Cargo. For example to compile\na statically linked binary on MSVC you would execute:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">RUSTFLAGS=<span class=\"hljs-string\">'-C target-feature=+crt-static'</span> cargo build --target x86_64-pc-windows-msvc\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"inline-assembly\"><a class=\"header\" href=\"#inline-assembly\">Inline assembly</a></h1>\n<p>Support for inline assembly is provided via the <a href=\"../core/arch/macro.asm.html\"><code class=\"hljs\">asm!</code></a> and <a href=\"../core/arch/macro.global_asm.html\"><code class=\"hljs\">global_asm!</code></a> macros.\nIt can be used to embed handwritten assembly in the assembly output generated by the compiler.</p>\n<p>Support for inline assembly is stable on the following architectures:</p>\n<ul>\n<li>x86 and x86-64</li>\n<li>ARM</li>\n<li>AArch64</li>\n<li>RISC-V</li>\n<li>LoongArch</li>\n</ul>\n<p>The compiler will emit an error if <code class=\"hljs\">asm!</code> is used on an unsupported target.</p>\n<h2 id=\"example-1\"><a class=\"header\" href=\"#example-1\">Example</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(target_arch = <span class=\"hljs-meta-string\">\"x86_64\"</span>)]</span> {\n</span><span class=\"hljs-keyword\">use</span> std::arch::asm;\n\n<span class=\"hljs-comment\">// Multiply x by 6 using shifts and adds</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x: <span class=\"hljs-built_in\">u64</span> = <span class=\"hljs-number\">4</span>;\n<span class=\"hljs-keyword\">unsafe</span> {\n    asm!(\n        <span class=\"hljs-string\">\"mov {tmp}, {x}\"</span>,\n        <span class=\"hljs-string\">\"shl {tmp}, 1\"</span>,\n        <span class=\"hljs-string\">\"shl {x}, 2\"</span>,\n        <span class=\"hljs-string\">\"add {x}, {tmp}\"</span>,\n        x = inout(reg) x,\n        tmp = out(reg) _,\n    );\n}\n<span class=\"hljs-built_in\">assert_eq!</span>(x, <span class=\"hljs-number\">4</span> * <span class=\"hljs-number\">6</span>);\n<span class=\"boring\">}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"syntax\"><a class=\"header\" href=\"#syntax\">Syntax</a></h2>\n<p>The following ABNF specifies the general syntax:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">format_string := STRING_LITERAL / RAW_STRING_LITERAL\ndir_spec := \"in\" / \"out\" / \"lateout\" / \"inout\" / \"inlateout\"\nreg_spec := &lt;register class&gt; / \"\\\"\" &lt;explicit register&gt; \"\\\"\"\noperand_expr := expr / \"_\" / expr \"=&gt;\" expr / expr \"=&gt;\" \"_\"\nreg_operand := [ident \"=\"] dir_spec \"(\" reg_spec \")\" operand_expr\nclobber_abi := \"clobber_abi(\" &lt;abi&gt; *(\",\" &lt;abi&gt;) [\",\"] \")\"\noption := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / \"noreturn\" / \"nostack\" / \"att_syntax\" / \"raw\"\noptions := \"options(\" option *(\",\" option) [\",\"] \")\"\noperand := reg_operand / clobber_abi / options\nasm := \"asm!(\" format_string *(\",\" format_string) *(\",\" operand) [\",\"] \")\"\nglobal_asm := \"global_asm!(\" format_string *(\",\" format_string) *(\",\" operand) [\",\"] \")\"\n</code></pre>\n<h2 id=\"scope\"><a class=\"header\" href=\"#scope\">Scope</a></h2>\n<p>Inline assembly can be used in one of two ways.</p>\n<p>With the <code class=\"hljs\">asm!</code> macro, the assembly code is emitted in a function scope and integrated into the compiler-generated assembly code of a function.\nThis assembly code must obey <a href=\"inline-assembly.html#rules-for-inline-assembly\">strict rules</a> to avoid undefined behavior.\nNote that in some cases the compiler may choose to emit the assembly code as a separate function and generate a call to it.</p>\n<p>With the <code class=\"hljs\">global_asm!</code> macro, the assembly code is emitted in a global scope, outside a function.\nThis can be used to hand-write entire functions using assembly code, and generally provides much more freedom to use arbitrary registers and assembler directives.</p>\n<h2 id=\"template-string-arguments\"><a class=\"header\" href=\"#template-string-arguments\">Template string arguments</a></h2>\n<p>The assembler template uses the same syntax as <a href=\"../std/fmt/index.html#syntax\">format strings</a> (i.e. placeholders are specified by curly braces).\nThe corresponding arguments are accessed in order, by index, or by name.\nHowever, implicit named arguments (introduced by <a href=\"https://github.com/rust-lang/rfcs/pull/2795\">RFC #2795</a>) are not supported.</p>\n<p>An <code class=\"hljs\">asm!</code> invocation may have one or more template string arguments; an <code class=\"hljs\">asm!</code> with multiple template string arguments is treated as if all the strings were concatenated with a <code class=\"hljs\">\\n</code> between them.\nThe expected usage is for each template string argument to correspond to a line of assembly code.\nAll template string arguments must appear before any other arguments.</p>\n<p>As with format strings, positional arguments must appear before named arguments and explicit <a href=\"inline-assembly.html#register-operands\">register operands</a>.</p>\n<p>Explicit register operands cannot be used by placeholders in the template string.\nAll other named and positional operands must appear at least once in the template string, otherwise a compiler error is generated.</p>\n<p>The exact assembly code syntax is target-specific and opaque to the compiler except for the way operands are substituted into the template string to form the code passed to the assembler.</p>\n<p>Currently, all supported targets follow the assembly code syntax used by LLVM's internal assembler which usually corresponds to that of the GNU assembler (GAS).\nOn x86, the <code class=\"hljs\">.intel_syntax noprefix</code> mode of GAS is used by default.\nOn ARM, the <code class=\"hljs\">.syntax unified</code> mode is used.\nThese targets impose an additional restriction on the assembly code: any assembler state (e.g. the current section which can be changed with <code class=\"hljs\">.section</code>) must be restored to its original value at the end of the asm string.\nAssembly code that does not conform to the GAS syntax will result in assembler-specific behavior.\nFurther constraints on the directives used by inline assembly are indicated by <a href=\"inline-assembly.html#directives-support\">Directives Support</a>.</p>\n<h2 id=\"operand-type\"><a class=\"header\" href=\"#operand-type\">Operand type</a></h2>\n<p>Several types of operands are supported:</p>\n<ul>\n<li><code class=\"hljs\">in(&lt;reg&gt;) &lt;expr&gt;</code>\n<ul>\n<li><code class=\"hljs\">&lt;reg&gt;</code> can refer to a register class or an explicit register.\nThe allocated register name is substituted into the asm template string.</li>\n<li>The allocated register will contain the value of <code class=\"hljs\">&lt;expr&gt;</code> at the start of the asm code.</li>\n<li>The allocated register must contain the same value at the end of the asm code (except if a <code class=\"hljs\">lateout</code> is allocated to the same register).</li>\n</ul>\n</li>\n<li><code class=\"hljs\">out(&lt;reg&gt;) &lt;expr&gt;</code>\n<ul>\n<li><code class=\"hljs\">&lt;reg&gt;</code> can refer to a register class or an explicit register.\nThe allocated register name is substituted into the asm template string.</li>\n<li>The allocated register will contain an undefined value at the start of the asm code.</li>\n<li><code class=\"hljs\">&lt;expr&gt;</code> must be a (possibly uninitialized) place expression, to which the contents of the allocated register are written at the end of the asm code.</li>\n<li>An underscore (<code class=\"hljs\">_</code>) may be specified instead of an expression, which will cause the contents of the register to be discarded at the end of the asm code (effectively acting as a clobber).</li>\n</ul>\n</li>\n<li><code class=\"hljs\">lateout(&lt;reg&gt;) &lt;expr&gt;</code>\n<ul>\n<li>Identical to <code class=\"hljs\">out</code> except that the register allocator can reuse a register allocated to an <code class=\"hljs\">in</code>.</li>\n<li>You should only write to the register after all inputs are read, otherwise you may clobber an input.</li>\n</ul>\n</li>\n<li><code class=\"hljs\">inout(&lt;reg&gt;) &lt;expr&gt;</code>\n<ul>\n<li><code class=\"hljs\">&lt;reg&gt;</code> can refer to a register class or an explicit register.\nThe allocated register name is substituted into the asm template string.</li>\n<li>The allocated register will contain the value of <code class=\"hljs\">&lt;expr&gt;</code> at the start of the asm code.</li>\n<li><code class=\"hljs\">&lt;expr&gt;</code> must be a mutable initialized place expression, to which the contents of the allocated register are written at the end of the asm code.</li>\n</ul>\n</li>\n<li><code class=\"hljs\">inout(&lt;reg&gt;) &lt;in expr&gt; =&gt; &lt;out expr&gt;</code>\n<ul>\n<li>Same as <code class=\"hljs\">inout</code> except that the initial value of the register is taken from the value of <code class=\"hljs\">&lt;in expr&gt;</code>.</li>\n<li><code class=\"hljs\">&lt;out expr&gt;</code> must be a (possibly uninitialized) place expression, to which the contents of the allocated register are written at the end of the asm code.</li>\n<li>An underscore (<code class=\"hljs\">_</code>) may be specified instead of an expression for <code class=\"hljs\">&lt;out expr&gt;</code>, which will cause the contents of the register to be discarded at the end of the asm code (effectively acting as a clobber).</li>\n<li><code class=\"hljs\">&lt;in expr&gt;</code> and <code class=\"hljs\">&lt;out expr&gt;</code> may have different types.</li>\n</ul>\n</li>\n<li><code class=\"hljs\">inlateout(&lt;reg&gt;) &lt;expr&gt;</code> / <code class=\"hljs\">inlateout(&lt;reg&gt;) &lt;in expr&gt; =&gt; &lt;out expr&gt;</code>\n<ul>\n<li>Identical to <code class=\"hljs\">inout</code> except that the register allocator can reuse a register allocated to an <code class=\"hljs\">in</code> (this can happen if the compiler knows the <code class=\"hljs\">in</code> has the same initial value as the <code class=\"hljs\">inlateout</code>).</li>\n<li>You should only write to the register after all inputs are read, otherwise you may clobber an input.</li>\n</ul>\n</li>\n<li><code class=\"hljs\">sym &lt;path&gt;</code>\n<ul>\n<li><code class=\"hljs\">&lt;path&gt;</code> must refer to a <code class=\"hljs\">fn</code> or <code class=\"hljs\">static</code>.</li>\n<li>A mangled symbol name referring to the item is substituted into the asm template string.</li>\n<li>The substituted string does not include any modifiers (e.g. GOT, PLT, relocations, etc).</li>\n<li><code class=\"hljs\">&lt;path&gt;</code> is allowed to point to a <code class=\"hljs\">#[thread_local]</code> static, in which case the asm code can combine the symbol with relocations (e.g. <code class=\"hljs\">@plt</code>, <code class=\"hljs\">@TPOFF</code>) to read from thread-local data.</li>\n</ul>\n</li>\n</ul>\n<p>Operand expressions are evaluated from left to right, just like function call arguments.\nAfter the <code class=\"hljs\">asm!</code> has executed, outputs are written to in left to right order.\nThis is significant if two outputs point to the same place: that place will contain the value of the rightmost output.</p>\n<p>Since <code class=\"hljs\">global_asm!</code> exists outside a function, it can only use <code class=\"hljs\">sym</code> operands.</p>\n<h2 id=\"register-operands\"><a class=\"header\" href=\"#register-operands\">Register operands</a></h2>\n<p>Input and output operands can be specified either as an explicit register or as a register class from which the register allocator can select a register.\nExplicit registers are specified as string literals (e.g. <code class=\"hljs\">\"eax\"</code>) while register classes are specified as identifiers (e.g. <code class=\"hljs\">reg</code>).</p>\n<p>Note that explicit registers treat register aliases (e.g. <code class=\"hljs\">r14</code> vs <code class=\"hljs\">lr</code> on ARM) and smaller views of a register (e.g. <code class=\"hljs\">eax</code> vs <code class=\"hljs\">rax</code>) as equivalent to the base register.\nIt is a compile-time error to use the same explicit register for two input operands or two output operands.\nAdditionally, it is also a compile-time error to use overlapping registers (e.g. ARM VFP) in input operands or in output operands.</p>\n<p>Only the following types are allowed as operands for inline assembly:</p>\n<ul>\n<li>Integers (signed and unsigned)</li>\n<li>Floating-point numbers</li>\n<li>Pointers (thin only)</li>\n<li>Function pointers</li>\n<li>SIMD vectors (structs defined with <code class=\"hljs\">#[repr(simd)]</code> and which implement <code class=\"hljs\">Copy</code>).\nThis includes architecture-specific vector types defined in <code class=\"hljs\">std::arch</code> such as <code class=\"hljs\">__m128</code> (x86) or <code class=\"hljs\">int8x16_t</code> (ARM).</li>\n</ul>\n<p>Here is the list of currently supported register classes:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Architecture</th><th>Register class</th><th>Registers</th><th>LLVM constraint code</th></tr></thead><tbody>\n<tr><td>x86</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">ax</code>, <code class=\"hljs\">bx</code>, <code class=\"hljs\">cx</code>, <code class=\"hljs\">dx</code>, <code class=\"hljs\">si</code>, <code class=\"hljs\">di</code>, <code class=\"hljs\">bp</code>, <code class=\"hljs\">r[8-15]</code> (x86-64 only)</td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">reg_abcd</code></td><td><code class=\"hljs\">ax</code>, <code class=\"hljs\">bx</code>, <code class=\"hljs\">cx</code>, <code class=\"hljs\">dx</code></td><td><code class=\"hljs\">Q</code></td></tr>\n<tr><td>x86-32</td><td><code class=\"hljs\">reg_byte</code></td><td><code class=\"hljs\">al</code>, <code class=\"hljs\">bl</code>, <code class=\"hljs\">cl</code>, <code class=\"hljs\">dl</code>, <code class=\"hljs\">ah</code>, <code class=\"hljs\">bh</code>, <code class=\"hljs\">ch</code>, <code class=\"hljs\">dh</code></td><td><code class=\"hljs\">q</code></td></tr>\n<tr><td>x86-64</td><td><code class=\"hljs\">reg_byte</code>*</td><td><code class=\"hljs\">al</code>, <code class=\"hljs\">bl</code>, <code class=\"hljs\">cl</code>, <code class=\"hljs\">dl</code>, <code class=\"hljs\">sil</code>, <code class=\"hljs\">dil</code>, <code class=\"hljs\">bpl</code>, <code class=\"hljs\">r[8-15]b</code></td><td><code class=\"hljs\">q</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">xmm_reg</code></td><td><code class=\"hljs\">xmm[0-7]</code> (x86) <code class=\"hljs\">xmm[0-15]</code> (x86-64)</td><td><code class=\"hljs\">x</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">ymm_reg</code></td><td><code class=\"hljs\">ymm[0-7]</code> (x86) <code class=\"hljs\">ymm[0-15]</code> (x86-64)</td><td><code class=\"hljs\">x</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">zmm_reg</code></td><td><code class=\"hljs\">zmm[0-7]</code> (x86) <code class=\"hljs\">zmm[0-31]</code> (x86-64)</td><td><code class=\"hljs\">v</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">kreg</code></td><td><code class=\"hljs\">k[1-7]</code></td><td><code class=\"hljs\">Yk</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">kreg0</code></td><td><code class=\"hljs\">k0</code></td><td>Only clobbers</td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">x87_reg</code></td><td><code class=\"hljs\">st([0-7])</code></td><td>Only clobbers</td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">mmx_reg</code></td><td><code class=\"hljs\">mm[0-7]</code></td><td>Only clobbers</td></tr>\n<tr><td>x86-64</td><td><code class=\"hljs\">tmm_reg</code></td><td><code class=\"hljs\">tmm[0-7]</code></td><td>Only clobbers</td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">x[0-30]</code></td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">vreg</code></td><td><code class=\"hljs\">v[0-31]</code></td><td><code class=\"hljs\">w</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">vreg_low16</code></td><td><code class=\"hljs\">v[0-15]</code></td><td><code class=\"hljs\">x</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">preg</code></td><td><code class=\"hljs\">p[0-15]</code>, <code class=\"hljs\">ffr</code></td><td>Only clobbers</td></tr>\n<tr><td>ARM (ARM/Thumb2)</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">r[0-12]</code>, <code class=\"hljs\">r14</code></td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>ARM (Thumb1)</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">r[0-7]</code></td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">sreg</code></td><td><code class=\"hljs\">s[0-31]</code></td><td><code class=\"hljs\">t</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">sreg_low16</code></td><td><code class=\"hljs\">s[0-15]</code></td><td><code class=\"hljs\">x</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">dreg</code></td><td><code class=\"hljs\">d[0-31]</code></td><td><code class=\"hljs\">w</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">dreg_low16</code></td><td><code class=\"hljs\">d[0-15]</code></td><td><code class=\"hljs\">t</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">dreg_low8</code></td><td><code class=\"hljs\">d[0-8]</code></td><td><code class=\"hljs\">x</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">qreg</code></td><td><code class=\"hljs\">q[0-15]</code></td><td><code class=\"hljs\">w</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">qreg_low8</code></td><td><code class=\"hljs\">q[0-7]</code></td><td><code class=\"hljs\">t</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">qreg_low4</code></td><td><code class=\"hljs\">q[0-3]</code></td><td><code class=\"hljs\">x</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">x1</code>, <code class=\"hljs\">x[5-7]</code>, <code class=\"hljs\">x[9-15]</code>, <code class=\"hljs\">x[16-31]</code> (non-RV32E)</td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">freg</code></td><td><code class=\"hljs\">f[0-31]</code></td><td><code class=\"hljs\">f</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">vreg</code></td><td><code class=\"hljs\">v[0-31]</code></td><td>Only clobbers</td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">$r1</code>, <code class=\"hljs\">$r[4-20]</code>, <code class=\"hljs\">$r[23,30]</code></td><td><code class=\"hljs\">r</code></td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">freg</code></td><td><code class=\"hljs\">$f[0-31]</code></td><td><code class=\"hljs\">f</code></td></tr>\n</tbody></table>\n</div>\n<blockquote>\n<p><strong>Notes</strong>:</p>\n<ul>\n<li>\n<p>On x86 we treat <code class=\"hljs\">reg_byte</code> differently from <code class=\"hljs\">reg</code> because the compiler can allocate <code class=\"hljs\">al</code> and <code class=\"hljs\">ah</code> separately whereas <code class=\"hljs\">reg</code> reserves the whole register.</p>\n</li>\n<li>\n<p>On x86-64 the high byte registers (e.g. <code class=\"hljs\">ah</code>) are not available in the <code class=\"hljs\">reg_byte</code> register class.</p>\n</li>\n<li>\n<p>Some register classes are marked as \"Only clobbers\" which means that registers in these classes cannot be used for inputs or outputs, only clobbers of the form <code class=\"hljs\">out(&lt;explicit register&gt;) _</code> or <code class=\"hljs\">lateout(&lt;explicit register&gt;) _</code>.</p>\n</li>\n</ul>\n</blockquote>\n<p>Each register class has constraints on which value types they can be used with.\nThis is necessary because the way a value is loaded into a register depends on its type.\nFor example, on big-endian systems, loading a <code class=\"hljs\">i32x4</code> and a <code class=\"hljs\">i8x16</code> into a SIMD register may result in different register contents even if the byte-wise memory representation of both values is identical.\nThe availability of supported types for a particular register class may depend on what target features are currently enabled.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Architecture</th><th>Register class</th><th>Target feature</th><th>Allowed types</th></tr></thead><tbody>\n<tr><td>x86-32</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code></td></tr>\n<tr><td>x86-64</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">f64</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">reg_byte</code></td><td>None</td><td><code class=\"hljs\">i8</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">xmm_reg</code></td><td><code class=\"hljs\">sse</code></td><td><code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">f64</code>, <br> <code class=\"hljs\">i8x16</code>, <code class=\"hljs\">i16x8</code>, <code class=\"hljs\">i32x4</code>, <code class=\"hljs\">i64x2</code>, <code class=\"hljs\">f32x4</code>, <code class=\"hljs\">f64x2</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">ymm_reg</code></td><td><code class=\"hljs\">avx</code></td><td><code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">f64</code>, <br> <code class=\"hljs\">i8x16</code>, <code class=\"hljs\">i16x8</code>, <code class=\"hljs\">i32x4</code>, <code class=\"hljs\">i64x2</code>, <code class=\"hljs\">f32x4</code>, <code class=\"hljs\">f64x2</code> <br> <code class=\"hljs\">i8x32</code>, <code class=\"hljs\">i16x16</code>, <code class=\"hljs\">i32x8</code>, <code class=\"hljs\">i64x4</code>, <code class=\"hljs\">f32x8</code>, <code class=\"hljs\">f64x4</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">zmm_reg</code></td><td><code class=\"hljs\">avx512f</code></td><td><code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">f64</code>, <br> <code class=\"hljs\">i8x16</code>, <code class=\"hljs\">i16x8</code>, <code class=\"hljs\">i32x4</code>, <code class=\"hljs\">i64x2</code>, <code class=\"hljs\">f32x4</code>, <code class=\"hljs\">f64x2</code> <br> <code class=\"hljs\">i8x32</code>, <code class=\"hljs\">i16x16</code>, <code class=\"hljs\">i32x8</code>, <code class=\"hljs\">i64x4</code>, <code class=\"hljs\">f32x8</code>, <code class=\"hljs\">f64x4</code> <br> <code class=\"hljs\">i8x64</code>, <code class=\"hljs\">i16x32</code>, <code class=\"hljs\">i32x16</code>, <code class=\"hljs\">i64x8</code>, <code class=\"hljs\">f32x16</code>, <code class=\"hljs\">f64x8</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">kreg</code></td><td><code class=\"hljs\">avx512f</code></td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">kreg</code></td><td><code class=\"hljs\">avx512bw</code></td><td><code class=\"hljs\">i32</code>, <code class=\"hljs\">i64</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">mmx_reg</code></td><td>N/A</td><td>Only clobbers</td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">x87_reg</code></td><td>N/A</td><td>Only clobbers</td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">tmm_reg</code></td><td>N/A</td><td>Only clobbers</td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">f64</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">vreg</code></td><td><code class=\"hljs\">neon</code></td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">f64</code>, <br> <code class=\"hljs\">i8x8</code>, <code class=\"hljs\">i16x4</code>, <code class=\"hljs\">i32x2</code>, <code class=\"hljs\">i64x1</code>, <code class=\"hljs\">f32x2</code>, <code class=\"hljs\">f64x1</code>, <br> <code class=\"hljs\">i8x16</code>, <code class=\"hljs\">i16x8</code>, <code class=\"hljs\">i32x4</code>, <code class=\"hljs\">i64x2</code>, <code class=\"hljs\">f32x4</code>, <code class=\"hljs\">f64x2</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">preg</code></td><td>N/A</td><td>Only clobbers</td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">sreg</code></td><td><code class=\"hljs\">vfp2</code></td><td><code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">dreg</code></td><td><code class=\"hljs\">vfp2</code></td><td><code class=\"hljs\">i64</code>, <code class=\"hljs\">f64</code>, <code class=\"hljs\">i8x8</code>, <code class=\"hljs\">i16x4</code>, <code class=\"hljs\">i32x2</code>, <code class=\"hljs\">i64x1</code>, <code class=\"hljs\">f32x2</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">qreg</code></td><td><code class=\"hljs\">neon</code></td><td><code class=\"hljs\">i8x16</code>, <code class=\"hljs\">i16x8</code>, <code class=\"hljs\">i32x4</code>, <code class=\"hljs\">i64x2</code>, <code class=\"hljs\">f32x4</code></td></tr>\n<tr><td>RISC-V32</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code></td></tr>\n<tr><td>RISC-V64</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">f32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">f64</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">freg</code></td><td><code class=\"hljs\">f</code></td><td><code class=\"hljs\">f32</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">freg</code></td><td><code class=\"hljs\">d</code></td><td><code class=\"hljs\">f64</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">vreg</code></td><td>N/A</td><td>Only clobbers</td></tr>\n<tr><td>LoongArch64</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">f32</code>, <code class=\"hljs\">f64</code></td></tr>\n<tr><td>LoongArch64</td><td><code class=\"hljs\">freg</code></td><td>None</td><td><code class=\"hljs\">f32</code>, <code class=\"hljs\">f64</code></td></tr>\n</tbody></table>\n</div>\n<blockquote>\n<p><strong>Note</strong>: For the purposes of the above table pointers, function pointers and <code class=\"hljs\">isize</code>/<code class=\"hljs\">usize</code> are treated as the equivalent integer type (<code class=\"hljs\">i16</code>/<code class=\"hljs\">i32</code>/<code class=\"hljs\">i64</code> depending on the target).</p>\n</blockquote>\n<p>If a value is of a smaller size than the register it is allocated in then the upper bits of that register will have an undefined value for inputs and will be ignored for outputs.\nThe only exception is the <code class=\"hljs\">freg</code> register class on RISC-V where <code class=\"hljs\">f32</code> values are NaN-boxed in a <code class=\"hljs\">f64</code> as required by the RISC-V architecture.</p>\n<p>When separate input and output expressions are specified for an <code class=\"hljs\">inout</code> operand, both expressions must have the same type.\nThe only exception is if both operands are pointers or integers, in which case they are only required to have the same size.\nThis restriction exists because the register allocators in LLVM and GCC sometimes cannot handle tied operands with different types.</p>\n<h2 id=\"register-names\"><a class=\"header\" href=\"#register-names\">Register names</a></h2>\n<p>Some registers have multiple names.\nThese are all treated by the compiler as identical to the base register name.\nHere is the list of all supported register aliases:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Architecture</th><th>Base register</th><th>Aliases</th></tr></thead><tbody>\n<tr><td>x86</td><td><code class=\"hljs\">ax</code></td><td><code class=\"hljs\">eax</code>, <code class=\"hljs\">rax</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">bx</code></td><td><code class=\"hljs\">ebx</code>, <code class=\"hljs\">rbx</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">cx</code></td><td><code class=\"hljs\">ecx</code>, <code class=\"hljs\">rcx</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">dx</code></td><td><code class=\"hljs\">edx</code>, <code class=\"hljs\">rdx</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">si</code></td><td><code class=\"hljs\">esi</code>, <code class=\"hljs\">rsi</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">di</code></td><td><code class=\"hljs\">edi</code>, <code class=\"hljs\">rdi</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">bp</code></td><td><code class=\"hljs\">bpl</code>, <code class=\"hljs\">ebp</code>, <code class=\"hljs\">rbp</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">sp</code></td><td><code class=\"hljs\">spl</code>, <code class=\"hljs\">esp</code>, <code class=\"hljs\">rsp</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">ip</code></td><td><code class=\"hljs\">eip</code>, <code class=\"hljs\">rip</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">st(0)</code></td><td><code class=\"hljs\">st</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">r[8-15]</code></td><td><code class=\"hljs\">r[8-15]b</code>, <code class=\"hljs\">r[8-15]w</code>, <code class=\"hljs\">r[8-15]d</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">xmm[0-31]</code></td><td><code class=\"hljs\">ymm[0-31]</code>, <code class=\"hljs\">zmm[0-31]</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">x[0-30]</code></td><td><code class=\"hljs\">w[0-30]</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">x29</code></td><td><code class=\"hljs\">fp</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">x30</code></td><td><code class=\"hljs\">lr</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">sp</code></td><td><code class=\"hljs\">wsp</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">xzr</code></td><td><code class=\"hljs\">wzr</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">v[0-31]</code></td><td><code class=\"hljs\">b[0-31]</code>, <code class=\"hljs\">h[0-31]</code>, <code class=\"hljs\">s[0-31]</code>, <code class=\"hljs\">d[0-31]</code>, <code class=\"hljs\">q[0-31]</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">r[0-3]</code></td><td><code class=\"hljs\">a[1-4]</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">r[4-9]</code></td><td><code class=\"hljs\">v[1-6]</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">r9</code></td><td><code class=\"hljs\">rfp</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">r10</code></td><td><code class=\"hljs\">sl</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">r11</code></td><td><code class=\"hljs\">fp</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">r12</code></td><td><code class=\"hljs\">ip</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">r13</code></td><td><code class=\"hljs\">sp</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">r14</code></td><td><code class=\"hljs\">lr</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">r15</code></td><td><code class=\"hljs\">pc</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">x0</code></td><td><code class=\"hljs\">zero</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">x1</code></td><td><code class=\"hljs\">ra</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">x2</code></td><td><code class=\"hljs\">sp</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">x3</code></td><td><code class=\"hljs\">gp</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">x4</code></td><td><code class=\"hljs\">tp</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">x[5-7]</code></td><td><code class=\"hljs\">t[0-2]</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">x8</code></td><td><code class=\"hljs\">fp</code>, <code class=\"hljs\">s0</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">x9</code></td><td><code class=\"hljs\">s1</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">x[10-17]</code></td><td><code class=\"hljs\">a[0-7]</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">x[18-27]</code></td><td><code class=\"hljs\">s[2-11]</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">x[28-31]</code></td><td><code class=\"hljs\">t[3-6]</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">f[0-7]</code></td><td><code class=\"hljs\">ft[0-7]</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">f[8-9]</code></td><td><code class=\"hljs\">fs[0-1]</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">f[10-17]</code></td><td><code class=\"hljs\">fa[0-7]</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">f[18-27]</code></td><td><code class=\"hljs\">fs[2-11]</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">f[28-31]</code></td><td><code class=\"hljs\">ft[8-11]</code></td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">$r0</code></td><td><code class=\"hljs\">$zero</code></td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">$r1</code></td><td><code class=\"hljs\">$ra</code></td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">$r2</code></td><td><code class=\"hljs\">$tp</code></td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">$r3</code></td><td><code class=\"hljs\">$sp</code></td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">$r[4-11]</code></td><td><code class=\"hljs\">$a[0-7]</code></td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">$r[12-20]</code></td><td><code class=\"hljs\">$t[0-8]</code></td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">$r21</code></td><td></td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">$r22</code></td><td><code class=\"hljs\">$fp</code>, <code class=\"hljs\">$s9</code></td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">$r[23-31]</code></td><td><code class=\"hljs\">$s[0-8]</code></td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">$f[0-7]</code></td><td><code class=\"hljs\">$fa[0-7]</code></td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">$f[8-23]</code></td><td><code class=\"hljs\">$ft[0-15]</code></td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">$f[24-31]</code></td><td><code class=\"hljs\">$fs[0-7]</code></td></tr>\n</tbody></table>\n</div>\n<p>Some registers cannot be used for input or output operands:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Architecture</th><th>Unsupported register</th><th>Reason</th></tr></thead><tbody>\n<tr><td>All</td><td><code class=\"hljs\">sp</code></td><td>The stack pointer must be restored to its original value at the end of an asm code block.</td></tr>\n<tr><td>All</td><td><code class=\"hljs\">bp</code> (x86), <code class=\"hljs\">x29</code> (AArch64), <code class=\"hljs\">x8</code> (RISC-V), <code class=\"hljs\">$fp</code> (LoongArch)</td><td>The frame pointer cannot be used as an input or output.</td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">r7</code> or <code class=\"hljs\">r11</code></td><td>On ARM the frame pointer can be either <code class=\"hljs\">r7</code> or <code class=\"hljs\">r11</code> depending on the target. The frame pointer cannot be used as an input or output.</td></tr>\n<tr><td>All</td><td><code class=\"hljs\">si</code> (x86-32), <code class=\"hljs\">bx</code> (x86-64), <code class=\"hljs\">r6</code> (ARM), <code class=\"hljs\">x19</code> (AArch64), <code class=\"hljs\">x9</code> (RISC-V), <code class=\"hljs\">$s8</code> (LoongArch)</td><td>This is used internally by LLVM as a \"base pointer\" for functions with complex stack frames.</td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">ip</code></td><td>This is the program counter, not a real register.</td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">xzr</code></td><td>This is a constant zero register which can't be modified.</td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">x18</code></td><td>This is an OS-reserved register on some AArch64 targets.</td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">pc</code></td><td>This is the program counter, not a real register.</td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">r9</code></td><td>This is an OS-reserved register on some ARM targets.</td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">x0</code></td><td>This is a constant zero register which can't be modified.</td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">gp</code>, <code class=\"hljs\">tp</code></td><td>These registers are reserved and cannot be used as inputs or outputs.</td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">$r0</code> or <code class=\"hljs\">$zero</code></td><td>This is a constant zero register which can't be modified.</td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">$r2</code> or <code class=\"hljs\">$tp</code></td><td>This is reserved for TLS.</td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">$r21</code></td><td>This is reserved by the ABI.</td></tr>\n</tbody></table>\n</div>\n<p>The frame pointer and base pointer registers are reserved for internal use by LLVM. While <code class=\"hljs\">asm!</code> statements cannot explicitly specify the use of reserved registers, in some cases LLVM will allocate one of these reserved registers for <code class=\"hljs\">reg</code> operands. Assembly code making use of reserved registers should be careful since <code class=\"hljs\">reg</code> operands may use the same registers.</p>\n<h2 id=\"template-modifiers\"><a class=\"header\" href=\"#template-modifiers\">Template modifiers</a></h2>\n<p>The placeholders can be augmented by modifiers which are specified after the <code class=\"hljs\">:</code> in the curly braces.\nThese modifiers do not affect register allocation, but change the way operands are formatted when inserted into the template string.\nOnly one modifier is allowed per template placeholder.</p>\n<p>The supported modifiers are a subset of LLVM's (and GCC's) <a href=\"http://llvm.org/docs/LangRef.html#asm-template-argument-modifiers\">asm template argument modifiers</a>, but do not use the same letter codes.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Architecture</th><th>Register class</th><th>Modifier</th><th>Example output</th><th>LLVM modifier</th></tr></thead><tbody>\n<tr><td>x86-32</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">eax</code></td><td><code class=\"hljs\">k</code></td></tr>\n<tr><td>x86-64</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">rax</code></td><td><code class=\"hljs\">q</code></td></tr>\n<tr><td>x86-32</td><td><code class=\"hljs\">reg_abcd</code></td><td><code class=\"hljs\">l</code></td><td><code class=\"hljs\">al</code></td><td><code class=\"hljs\">b</code></td></tr>\n<tr><td>x86-64</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">l</code></td><td><code class=\"hljs\">al</code></td><td><code class=\"hljs\">b</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">reg_abcd</code></td><td><code class=\"hljs\">h</code></td><td><code class=\"hljs\">ah</code></td><td><code class=\"hljs\">h</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">x</code></td><td><code class=\"hljs\">ax</code></td><td><code class=\"hljs\">w</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">e</code></td><td><code class=\"hljs\">eax</code></td><td><code class=\"hljs\">k</code></td></tr>\n<tr><td>x86-64</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">r</code></td><td><code class=\"hljs\">rax</code></td><td><code class=\"hljs\">q</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">reg_byte</code></td><td>None</td><td><code class=\"hljs\">al</code> / <code class=\"hljs\">ah</code></td><td>None</td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">xmm_reg</code></td><td>None</td><td><code class=\"hljs\">xmm0</code></td><td><code class=\"hljs\">x</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">ymm_reg</code></td><td>None</td><td><code class=\"hljs\">ymm0</code></td><td><code class=\"hljs\">t</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">zmm_reg</code></td><td>None</td><td><code class=\"hljs\">zmm0</code></td><td><code class=\"hljs\">g</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">*mm_reg</code></td><td><code class=\"hljs\">x</code></td><td><code class=\"hljs\">xmm0</code></td><td><code class=\"hljs\">x</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">*mm_reg</code></td><td><code class=\"hljs\">y</code></td><td><code class=\"hljs\">ymm0</code></td><td><code class=\"hljs\">t</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">*mm_reg</code></td><td><code class=\"hljs\">z</code></td><td><code class=\"hljs\">zmm0</code></td><td><code class=\"hljs\">g</code></td></tr>\n<tr><td>x86</td><td><code class=\"hljs\">kreg</code></td><td>None</td><td><code class=\"hljs\">k1</code></td><td>None</td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">x0</code></td><td><code class=\"hljs\">x</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">w</code></td><td><code class=\"hljs\">w0</code></td><td><code class=\"hljs\">w</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">reg</code></td><td><code class=\"hljs\">x</code></td><td><code class=\"hljs\">x0</code></td><td><code class=\"hljs\">x</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">vreg</code></td><td>None</td><td><code class=\"hljs\">v0</code></td><td>None</td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">vreg</code></td><td><code class=\"hljs\">v</code></td><td><code class=\"hljs\">v0</code></td><td>None</td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">vreg</code></td><td><code class=\"hljs\">b</code></td><td><code class=\"hljs\">b0</code></td><td><code class=\"hljs\">b</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">vreg</code></td><td><code class=\"hljs\">h</code></td><td><code class=\"hljs\">h0</code></td><td><code class=\"hljs\">h</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">vreg</code></td><td><code class=\"hljs\">s</code></td><td><code class=\"hljs\">s0</code></td><td><code class=\"hljs\">s</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">vreg</code></td><td><code class=\"hljs\">d</code></td><td><code class=\"hljs\">d0</code></td><td><code class=\"hljs\">d</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">vreg</code></td><td><code class=\"hljs\">q</code></td><td><code class=\"hljs\">q0</code></td><td><code class=\"hljs\">q</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">r0</code></td><td>None</td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">sreg</code></td><td>None</td><td><code class=\"hljs\">s0</code></td><td>None</td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">dreg</code></td><td>None</td><td><code class=\"hljs\">d0</code></td><td><code class=\"hljs\">P</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">qreg</code></td><td>None</td><td><code class=\"hljs\">q0</code></td><td><code class=\"hljs\">q</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">qreg</code></td><td><code class=\"hljs\">e</code> / <code class=\"hljs\">f</code></td><td><code class=\"hljs\">d0</code> / <code class=\"hljs\">d1</code></td><td><code class=\"hljs\">e</code> / <code class=\"hljs\">f</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">x1</code></td><td>None</td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">freg</code></td><td>None</td><td><code class=\"hljs\">f0</code></td><td>None</td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">reg</code></td><td>None</td><td><code class=\"hljs\">$r1</code></td><td>None</td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">freg</code></td><td>None</td><td><code class=\"hljs\">$f0</code></td><td>None</td></tr>\n</tbody></table>\n</div>\n<blockquote>\n<p><strong>Notes</strong>:</p>\n<ul>\n<li>on ARM <code class=\"hljs\">e</code> / <code class=\"hljs\">f</code>: this prints the low or high doubleword register name of a NEON quad (128-bit) register.</li>\n<li>on x86: our behavior for <code class=\"hljs\">reg</code> with no modifiers differs from what GCC does.\nGCC will infer the modifier based on the operand value type, while we default to the full register size.</li>\n<li>on x86 <code class=\"hljs\">xmm_reg</code>: the <code class=\"hljs\">x</code>, <code class=\"hljs\">t</code> and <code class=\"hljs\">g</code> LLVM modifiers are not yet implemented in LLVM (they are supported by GCC only), but this should be a simple change.</li>\n</ul>\n</blockquote>\n<p>As stated in the previous section, passing an input value smaller than the register width will result in the upper bits of the register containing undefined values.\nThis is not a problem if the inline asm only accesses the lower bits of the register, which can be done by using a template modifier to use a subregister name in the asm code (e.g. <code class=\"hljs\">ax</code> instead of <code class=\"hljs\">rax</code>).\nSince this an easy pitfall, the compiler will suggest a template modifier to use where appropriate given the input type.\nIf all references to an operand already have modifiers then the warning is suppressed for that operand.</p>\n<h2 id=\"abi-clobbers\"><a class=\"header\" href=\"#abi-clobbers\">ABI clobbers</a></h2>\n<p>The <code class=\"hljs\">clobber_abi</code> keyword can be used to apply a default set of clobbers to an <code class=\"hljs\">asm!</code> block.\nThis will automatically insert the necessary clobber constraints as needed for calling a function with a particular calling convention: if the calling convention does not fully preserve the value of a register across a call then <code class=\"hljs\">lateout(\"...\") _</code> is implicitly added to the operands list (where the <code class=\"hljs\">...</code> is replaced by the register's name).</p>\n<p><code class=\"hljs\">clobber_abi</code> may be specified any number of times. It will insert a clobber for all unique registers in the union of all specified calling conventions.</p>\n<p>Generic register class outputs are disallowed by the compiler when <code class=\"hljs\">clobber_abi</code> is used: all outputs must specify an explicit register.\nExplicit register outputs have precedence over the implicit clobbers inserted by <code class=\"hljs\">clobber_abi</code>: a clobber will only be inserted for a register if that register is not used as an output.\nThe following ABIs can be used with <code class=\"hljs\">clobber_abi</code>:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Architecture</th><th>ABI name</th><th>Clobbered registers</th></tr></thead><tbody>\n<tr><td>x86-32</td><td><code class=\"hljs\">\"C\"</code>, <code class=\"hljs\">\"system\"</code>, <code class=\"hljs\">\"efiapi\"</code>, <code class=\"hljs\">\"cdecl\"</code>, <code class=\"hljs\">\"stdcall\"</code>, <code class=\"hljs\">\"fastcall\"</code></td><td><code class=\"hljs\">ax</code>, <code class=\"hljs\">cx</code>, <code class=\"hljs\">dx</code>, <code class=\"hljs\">xmm[0-7]</code>, <code class=\"hljs\">mm[0-7]</code>, <code class=\"hljs\">k[0-7]</code>, <code class=\"hljs\">st([0-7])</code></td></tr>\n<tr><td>x86-64</td><td><code class=\"hljs\">\"C\"</code>, <code class=\"hljs\">\"system\"</code> (on Windows), <code class=\"hljs\">\"efiapi\"</code>, <code class=\"hljs\">\"win64\"</code></td><td><code class=\"hljs\">ax</code>, <code class=\"hljs\">cx</code>, <code class=\"hljs\">dx</code>, <code class=\"hljs\">r[8-11]</code>, <code class=\"hljs\">xmm[0-31]</code>, <code class=\"hljs\">mm[0-7]</code>, <code class=\"hljs\">k[0-7]</code>, <code class=\"hljs\">st([0-7])</code>, <code class=\"hljs\">tmm[0-7]</code></td></tr>\n<tr><td>x86-64</td><td><code class=\"hljs\">\"C\"</code>, <code class=\"hljs\">\"system\"</code> (on non-Windows), <code class=\"hljs\">\"sysv64\"</code></td><td><code class=\"hljs\">ax</code>, <code class=\"hljs\">cx</code>, <code class=\"hljs\">dx</code>, <code class=\"hljs\">si</code>, <code class=\"hljs\">di</code>, <code class=\"hljs\">r[8-11]</code>, <code class=\"hljs\">xmm[0-31]</code>, <code class=\"hljs\">mm[0-7]</code>, <code class=\"hljs\">k[0-7]</code>, <code class=\"hljs\">st([0-7])</code>, <code class=\"hljs\">tmm[0-7]</code></td></tr>\n<tr><td>AArch64</td><td><code class=\"hljs\">\"C\"</code>, <code class=\"hljs\">\"system\"</code>, <code class=\"hljs\">\"efiapi\"</code></td><td><code class=\"hljs\">x[0-17]</code>, <code class=\"hljs\">x18</code>*, <code class=\"hljs\">x30</code>, <code class=\"hljs\">v[0-31]</code>, <code class=\"hljs\">p[0-15]</code>, <code class=\"hljs\">ffr</code></td></tr>\n<tr><td>ARM</td><td><code class=\"hljs\">\"C\"</code>, <code class=\"hljs\">\"system\"</code>, <code class=\"hljs\">\"efiapi\"</code>, <code class=\"hljs\">\"aapcs\"</code></td><td><code class=\"hljs\">r[0-3]</code>, <code class=\"hljs\">r12</code>, <code class=\"hljs\">r14</code>, <code class=\"hljs\">s[0-15]</code>, <code class=\"hljs\">d[0-7]</code>, <code class=\"hljs\">d[16-31]</code></td></tr>\n<tr><td>RISC-V</td><td><code class=\"hljs\">\"C\"</code>, <code class=\"hljs\">\"system\"</code>, <code class=\"hljs\">\"efiapi\"</code></td><td><code class=\"hljs\">x1</code>, <code class=\"hljs\">x[5-7]</code>, <code class=\"hljs\">x[10-17]</code>, <code class=\"hljs\">x[28-31]</code>, <code class=\"hljs\">f[0-7]</code>, <code class=\"hljs\">f[10-17]</code>, <code class=\"hljs\">f[28-31]</code>, <code class=\"hljs\">v[0-31]</code></td></tr>\n<tr><td>LoongArch</td><td><code class=\"hljs\">\"C\"</code>, <code class=\"hljs\">\"system\"</code>, <code class=\"hljs\">\"efiapi\"</code></td><td><code class=\"hljs\">$r1</code>, <code class=\"hljs\">$r[4-20]</code>, <code class=\"hljs\">$f[0-23]</code></td></tr>\n</tbody></table>\n</div>\n<blockquote>\n<p>Notes:</p>\n<ul>\n<li>On AArch64 <code class=\"hljs\">x18</code> only included in the clobber list if it is not considered as a reserved register on the target.</li>\n</ul>\n</blockquote>\n<p>The list of clobbered registers for each ABI is updated in rustc as architectures gain new registers: this ensures that <code class=\"hljs\">asm!</code> clobbers will continue to be correct when LLVM starts using these new registers in its generated code.</p>\n<h2 id=\"options\"><a class=\"header\" href=\"#options\">Options</a></h2>\n<p>Flags are used to further influence the behavior of the inline assembly block.\nCurrently the following options are defined:</p>\n<ul>\n<li><code class=\"hljs\">pure</code>: The <code class=\"hljs\">asm!</code> block has no side effects, must eventually return, and its outputs depend only on its direct inputs (i.e. the values themselves, not what they point to) or values read from memory (unless the <code class=\"hljs\">nomem</code> options is also set).\nThis allows the compiler to execute the <code class=\"hljs\">asm!</code> block fewer times than specified in the program (e.g. by hoisting it out of a loop) or even eliminate it entirely if the outputs are not used.\nThe <code class=\"hljs\">pure</code> option must be combined with either the <code class=\"hljs\">nomem</code> or <code class=\"hljs\">readonly</code> options, otherwise a compile-time error is emitted.</li>\n<li><code class=\"hljs\">nomem</code>: The <code class=\"hljs\">asm!</code> blocks does not read or write to any memory.\nThis allows the compiler to cache the values of modified global variables in registers across the <code class=\"hljs\">asm!</code> block since it knows that they are not read or written to by the <code class=\"hljs\">asm!</code>.\nThe compiler also assumes that this <code class=\"hljs\">asm!</code> block does not perform any kind of synchronization with other threads, e.g. via fences.</li>\n<li><code class=\"hljs\">readonly</code>: The <code class=\"hljs\">asm!</code> block does not write to any memory.\nThis allows the compiler to cache the values of unmodified global variables in registers across the <code class=\"hljs\">asm!</code> block since it knows that they are not written to by the <code class=\"hljs\">asm!</code>.\nThe compiler also assumes that this <code class=\"hljs\">asm!</code> block does not perform any kind of synchronization with other threads, e.g. via fences.</li>\n<li><code class=\"hljs\">preserves_flags</code>: The <code class=\"hljs\">asm!</code> block does not modify the flags register (defined in the rules below).\nThis allows the compiler to avoid recomputing the condition flags after the <code class=\"hljs\">asm!</code> block.</li>\n<li><code class=\"hljs\">noreturn</code>: The <code class=\"hljs\">asm!</code> block never returns, and its return type is defined as <code class=\"hljs\">!</code> (never).\nBehavior is undefined if execution falls through past the end of the asm code.\nA <code class=\"hljs\">noreturn</code> asm block behaves just like a function which doesn't return; notably, local variables in scope are not dropped before it is invoked.</li>\n<li><code class=\"hljs\">nostack</code>: The <code class=\"hljs\">asm!</code> block does not push data to the stack, or write to the stack red-zone (if supported by the target).\nIf this option is <em>not</em> used then the stack pointer is guaranteed to be suitably aligned (according to the target ABI) for a function call.</li>\n<li><code class=\"hljs\">att_syntax</code>: This option is only valid on x86, and causes the assembler to use the <code class=\"hljs\">.att_syntax prefix</code> mode of the GNU assembler.\nRegister operands are substituted in with a leading <code class=\"hljs\">%</code>.</li>\n<li><code class=\"hljs\">raw</code>: This causes the template string to be parsed as a raw assembly string, with no special handling for <code class=\"hljs\">{</code> and <code class=\"hljs\">}</code>.\nThis is primarily useful when including raw assembly code from an external file using <code class=\"hljs\">include_str!</code>.</li>\n</ul>\n<p>The compiler performs some additional checks on options:</p>\n<ul>\n<li>The <code class=\"hljs\">nomem</code> and <code class=\"hljs\">readonly</code> options are mutually exclusive: it is a compile-time error to specify both.</li>\n<li>It is a compile-time error to specify <code class=\"hljs\">pure</code> on an asm block with no outputs or only discarded outputs (<code class=\"hljs\">_</code>).</li>\n<li>It is a compile-time error to specify <code class=\"hljs\">noreturn</code> on an asm block with outputs.</li>\n</ul>\n<p><code class=\"hljs\">global_asm!</code> only supports the <code class=\"hljs\">att_syntax</code> and <code class=\"hljs\">raw</code> options.\nThe remaining options are not meaningful for global-scope inline assembly</p>\n<h2 id=\"rules-for-inline-assembly\"><a class=\"header\" href=\"#rules-for-inline-assembly\">Rules for inline assembly</a></h2>\n<p>To avoid undefined behavior, these rules must be followed when using function-scope inline assembly (<code class=\"hljs\">asm!</code>):</p>\n<ul>\n<li>Any registers not specified as inputs will contain an undefined value on entry to the asm block.\n<ul>\n<li>An \"undefined value\" in the context of inline assembly means that the register can (non-deterministically) have any one of the possible values allowed by the architecture.\nNotably it is not the same as an LLVM <code class=\"hljs\">undef</code> which can have a different value every time you read it (since such a concept does not exist in assembly code).</li>\n</ul>\n</li>\n<li>Any registers not specified as outputs must have the same value upon exiting the asm block as they had on entry, otherwise behavior is undefined.\n<ul>\n<li>This only applies to registers which can be specified as an input or output.\nOther registers follow target-specific rules.</li>\n<li>Note that a <code class=\"hljs\">lateout</code> may be allocated to the same register as an <code class=\"hljs\">in</code>, in which case this rule does not apply.\nCode should not rely on this however since it depends on the results of register allocation.</li>\n</ul>\n</li>\n<li>Behavior is undefined if execution unwinds out of an asm block.\n<ul>\n<li>This also applies if the assembly code calls a function which then unwinds.</li>\n</ul>\n</li>\n<li>The set of memory locations that assembly code is allowed to read and write are the same as those allowed for an FFI function.\n<ul>\n<li>Refer to the unsafe code guidelines for the exact rules.</li>\n<li>If the <code class=\"hljs\">readonly</code> option is set, then only memory reads are allowed.</li>\n<li>If the <code class=\"hljs\">nomem</code> option is set then no reads or writes to memory are allowed.</li>\n<li>These rules do not apply to memory which is private to the asm code, such as stack space allocated within the asm block.</li>\n</ul>\n</li>\n<li>The compiler cannot assume that the instructions in the asm are the ones that will actually end up executed.\n<ul>\n<li>This effectively means that the compiler must treat the <code class=\"hljs\">asm!</code> as a black box and only take the interface specification into account, not the instructions themselves.</li>\n<li>Runtime code patching is allowed, via target-specific mechanisms.</li>\n</ul>\n</li>\n<li>Unless the <code class=\"hljs\">nostack</code> option is set, asm code is allowed to use stack space below the stack pointer.\n<ul>\n<li>On entry to the asm block the stack pointer is guaranteed to be suitably aligned (according to the target ABI) for a function call.</li>\n<li>You are responsible for making sure you don't overflow the stack (e.g. use stack probing to ensure you hit a guard page).</li>\n<li>You should adjust the stack pointer when allocating stack memory as required by the target ABI.</li>\n<li>The stack pointer must be restored to its original value before leaving the asm block.</li>\n</ul>\n</li>\n<li>If the <code class=\"hljs\">noreturn</code> option is set then behavior is undefined if execution falls through to the end of the asm block.</li>\n<li>If the <code class=\"hljs\">pure</code> option is set then behavior is undefined if the <code class=\"hljs\">asm!</code> has side-effects other than its direct outputs.\nBehavior is also undefined if two executions of the <code class=\"hljs\">asm!</code> code with the same inputs result in different outputs.\n<ul>\n<li>When used with the <code class=\"hljs\">nomem</code> option, \"inputs\" are just the direct inputs of the <code class=\"hljs\">asm!</code>.</li>\n<li>When used with the <code class=\"hljs\">readonly</code> option, \"inputs\" comprise the direct inputs of the <code class=\"hljs\">asm!</code> and any memory that the <code class=\"hljs\">asm!</code> block is allowed to read.</li>\n</ul>\n</li>\n<li>These flags registers must be restored upon exiting the asm block if the <code class=\"hljs\">preserves_flags</code> option is set:\n<ul>\n<li>x86\n<ul>\n<li>Status flags in <code class=\"hljs\">EFLAGS</code> (CF, PF, AF, ZF, SF, OF).</li>\n<li>Floating-point status word (all).</li>\n<li>Floating-point exception flags in <code class=\"hljs\">MXCSR</code> (PE, UE, OE, ZE, DE, IE).</li>\n</ul>\n</li>\n<li>ARM\n<ul>\n<li>Condition flags in <code class=\"hljs\">CPSR</code> (N, Z, C, V)</li>\n<li>Saturation flag in <code class=\"hljs\">CPSR</code> (Q)</li>\n<li>Greater than or equal flags in <code class=\"hljs\">CPSR</code> (GE).</li>\n<li>Condition flags in <code class=\"hljs\">FPSCR</code> (N, Z, C, V)</li>\n<li>Saturation flag in <code class=\"hljs\">FPSCR</code> (QC)</li>\n<li>Floating-point exception flags in <code class=\"hljs\">FPSCR</code> (IDC, IXC, UFC, OFC, DZC, IOC).</li>\n</ul>\n</li>\n<li>AArch64\n<ul>\n<li>Condition flags (<code class=\"hljs\">NZCV</code> register).</li>\n<li>Floating-point status (<code class=\"hljs\">FPSR</code> register).</li>\n</ul>\n</li>\n<li>RISC-V\n<ul>\n<li>Floating-point exception flags in <code class=\"hljs\">fcsr</code> (<code class=\"hljs\">fflags</code>).</li>\n<li>Vector extension state (<code class=\"hljs\">vtype</code>, <code class=\"hljs\">vl</code>, <code class=\"hljs\">vcsr</code>).</li>\n</ul>\n</li>\n<li>LoongArch\n<ul>\n<li>Floating-point condition flags in <code class=\"hljs\">$fcc[0-7]</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>On x86, the direction flag (DF in <code class=\"hljs\">EFLAGS</code>) is clear on entry to an asm block and must be clear on exit.\n<ul>\n<li>Behavior is undefined if the direction flag is set on exiting an asm block.</li>\n</ul>\n</li>\n<li>On x86, the x87 floating-point register stack must remain unchanged unless all of the <code class=\"hljs\">st([0-7])</code> registers have been marked as clobbered with <code class=\"hljs\">out(\"st(0)\") _, out(\"st(1)\") _, ...</code>.\n<ul>\n<li>If all x87 registers are clobbered then the x87 register stack is guaranteed to be empty upon entering an <code class=\"hljs\">asm</code> block. Assembly code must ensure that the x87 register stack is also empty when exiting the asm block.</li>\n</ul>\n</li>\n<li>The requirement of restoring the stack pointer and non-output registers to their original value only applies when exiting an <code class=\"hljs\">asm!</code> block.\n<ul>\n<li>This means that <code class=\"hljs\">asm!</code> blocks that never return (even if not marked <code class=\"hljs\">noreturn</code>) don't need to preserve these registers.</li>\n<li>When returning to a different <code class=\"hljs\">asm!</code> block than you entered (e.g. for context switching), these registers must contain the value they had upon entering the <code class=\"hljs\">asm!</code> block that you are <em>exiting</em>.\n<ul>\n<li>You cannot exit an <code class=\"hljs\">asm!</code> block that has not been entered.\nNeither can you exit an <code class=\"hljs\">asm!</code> block that has already been exited (without first entering it again).</li>\n<li>You are responsible for switching any target-specific state (e.g. thread-local storage, stack bounds).</li>\n<li>You cannot jump from an address in one <code class=\"hljs\">asm!</code> block to an address in another, even within the same function or block, without treating their contexts as potentially different and requiring context switching. You cannot assume that any particular value in those contexts (e.g. current stack pointer or temporary values below the stack pointer) will remain unchanged between the two <code class=\"hljs\">asm!</code> blocks.</li>\n<li>The set of memory locations that you may access is the intersection of those allowed by the <code class=\"hljs\">asm!</code> blocks you entered and exited.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>You cannot assume that two <code class=\"hljs\">asm!</code> blocks adjacent in source code, even without any other code between them, will end up in successive addresses in the binary without any other instructions between them.</li>\n<li>You cannot assume that an <code class=\"hljs\">asm!</code> block will appear exactly once in the output binary.\nThe compiler is allowed to instantiate multiple copies of the <code class=\"hljs\">asm!</code> block, for example when the function containing it is inlined in multiple places.</li>\n<li>On x86, inline assembly must not end with an instruction prefix (such as <code class=\"hljs\">LOCK</code>) that would apply to instructions generated by the compiler.\n<ul>\n<li>The compiler is currently unable to detect this due to the way inline assembly is compiled, but may catch and reject this in the future.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: As a general rule, the flags covered by <code class=\"hljs\">preserves_flags</code> are those which are <em>not</em> preserved when performing a function call.</p>\n</blockquote>\n<h3 id=\"correctness-and-validity\"><a class=\"header\" href=\"#correctness-and-validity\">Correctness and Validity</a></h3>\n<p>In addition to all of the previous rules, the string argument to <code class=\"hljs\">asm!</code> must ultimately become—\nafter all other arguments are evaluated, formatting is performed, and operands are translated—\nassembly that is both syntactically correct and semantically valid for the target architecture.\nThe formatting rules allow the compiler to generate assembly with correct syntax.\nRules concerning operands permit valid translation of Rust operands into and out of <code class=\"hljs\">asm!</code>.\nAdherence to these rules is necessary, but not sufficient, for the final expanded assembly to be\nboth correct and valid. For instance:</p>\n<ul>\n<li>arguments may be placed in positions which are syntactically incorrect after formatting</li>\n<li>an instruction may be correctly written, but given architecturally invalid operands</li>\n<li>an architecturally unspecified instruction may be assembled into unspecified code</li>\n<li>a set of instructions, each correct and valid, may cause undefined behavior if placed in immediate succession</li>\n</ul>\n<p>As a result, these rules are <em>non-exhaustive</em>. The compiler is not required to check the\ncorrectness and validity of the initial string nor the final assembly that is generated.\nThe assembler may check for correctness and validity but is not required to do so.\nWhen using <code class=\"hljs\">asm!</code>, a typographical error may be sufficient to make a program unsound,\nand the rules for assembly may include thousands of pages of architectural reference manuals.\nProgrammers should exercise appropriate care, as invoking this <code class=\"hljs\">unsafe</code> capability comes with\nassuming the responsibility of not violating rules of both the compiler or the architecture.</p>\n<h3 id=\"directives-support\"><a class=\"header\" href=\"#directives-support\">Directives Support</a></h3>\n<p>Inline assembly supports a subset of the directives supported by both GNU AS and LLVM's internal assembler, given as follows.\nThe result of using other directives is assembler-specific (and may cause an error, or may be accepted as-is).</p>\n<p>If inline assembly includes any \"stateful\" directive that modifies how subsequent assembly is processed, the block must undo the effects of any such directives before the inline assembly ends.</p>\n<p>The following directives are guaranteed to be supported by the assembler:</p>\n<ul>\n<li><code class=\"hljs\">.2byte</code></li>\n<li><code class=\"hljs\">.4byte</code></li>\n<li><code class=\"hljs\">.8byte</code></li>\n<li><code class=\"hljs\">.align</code></li>\n<li><code class=\"hljs\">.alt_entry</code></li>\n<li><code class=\"hljs\">.ascii</code></li>\n<li><code class=\"hljs\">.asciz</code></li>\n<li><code class=\"hljs\">.balign</code></li>\n<li><code class=\"hljs\">.balignl</code></li>\n<li><code class=\"hljs\">.balignw</code></li>\n<li><code class=\"hljs\">.bss</code></li>\n<li><code class=\"hljs\">.byte</code></li>\n<li><code class=\"hljs\">.comm</code></li>\n<li><code class=\"hljs\">.data</code></li>\n<li><code class=\"hljs\">.def</code></li>\n<li><code class=\"hljs\">.double</code></li>\n<li><code class=\"hljs\">.endef</code></li>\n<li><code class=\"hljs\">.equ</code></li>\n<li><code class=\"hljs\">.equiv</code></li>\n<li><code class=\"hljs\">.eqv</code></li>\n<li><code class=\"hljs\">.fill</code></li>\n<li><code class=\"hljs\">.float</code></li>\n<li><code class=\"hljs\">.global</code></li>\n<li><code class=\"hljs\">.globl</code></li>\n<li><code class=\"hljs\">.inst</code></li>\n<li><code class=\"hljs\">.lcomm</code></li>\n<li><code class=\"hljs\">.long</code></li>\n<li><code class=\"hljs\">.octa</code></li>\n<li><code class=\"hljs\">.option</code></li>\n<li><code class=\"hljs\">.p2align</code></li>\n<li><code class=\"hljs\">.popsection</code></li>\n<li><code class=\"hljs\">.private_extern</code></li>\n<li><code class=\"hljs\">.pushsection</code></li>\n<li><code class=\"hljs\">.quad</code></li>\n<li><code class=\"hljs\">.scl</code></li>\n<li><code class=\"hljs\">.section</code></li>\n<li><code class=\"hljs\">.set</code></li>\n<li><code class=\"hljs\">.short</code></li>\n<li><code class=\"hljs\">.size</code></li>\n<li><code class=\"hljs\">.skip</code></li>\n<li><code class=\"hljs\">.sleb128</code></li>\n<li><code class=\"hljs\">.space</code></li>\n<li><code class=\"hljs\">.string</code></li>\n<li><code class=\"hljs\">.text</code></li>\n<li><code class=\"hljs\">.type</code></li>\n<li><code class=\"hljs\">.uleb128</code></li>\n<li><code class=\"hljs\">.word</code></li>\n</ul>\n<h4 id=\"target-specific-directive-support\"><a class=\"header\" href=\"#target-specific-directive-support\">Target Specific Directive Support</a></h4>\n<h5 id=\"dwarf-unwinding\"><a class=\"header\" href=\"#dwarf-unwinding\">Dwarf Unwinding</a></h5>\n<p>The following directives are supported on ELF targets that support DWARF unwind info:</p>\n<ul>\n<li><code class=\"hljs\">.cfi_adjust_cfa_offset</code></li>\n<li><code class=\"hljs\">.cfi_def_cfa</code></li>\n<li><code class=\"hljs\">.cfi_def_cfa_offset</code></li>\n<li><code class=\"hljs\">.cfi_def_cfa_register</code></li>\n<li><code class=\"hljs\">.cfi_endproc</code></li>\n<li><code class=\"hljs\">.cfi_escape</code></li>\n<li><code class=\"hljs\">.cfi_lsda</code></li>\n<li><code class=\"hljs\">.cfi_offset</code></li>\n<li><code class=\"hljs\">.cfi_personality</code></li>\n<li><code class=\"hljs\">.cfi_register</code></li>\n<li><code class=\"hljs\">.cfi_rel_offset</code></li>\n<li><code class=\"hljs\">.cfi_remember_state</code></li>\n<li><code class=\"hljs\">.cfi_restore</code></li>\n<li><code class=\"hljs\">.cfi_restore_state</code></li>\n<li><code class=\"hljs\">.cfi_return_column</code></li>\n<li><code class=\"hljs\">.cfi_same_value</code></li>\n<li><code class=\"hljs\">.cfi_sections</code></li>\n<li><code class=\"hljs\">.cfi_signal_frame</code></li>\n<li><code class=\"hljs\">.cfi_startproc</code></li>\n<li><code class=\"hljs\">.cfi_undefined</code></li>\n<li><code class=\"hljs\">.cfi_window_save</code></li>\n</ul>\n<h5 id=\"structured-exception-handling\"><a class=\"header\" href=\"#structured-exception-handling\">Structured Exception Handling</a></h5>\n<p>On targets with structured exception Handling, the following additional directives are guaranteed to be supported:</p>\n<ul>\n<li><code class=\"hljs\">.seh_endproc</code></li>\n<li><code class=\"hljs\">.seh_endprologue</code></li>\n<li><code class=\"hljs\">.seh_proc</code></li>\n<li><code class=\"hljs\">.seh_pushreg</code></li>\n<li><code class=\"hljs\">.seh_savereg</code></li>\n<li><code class=\"hljs\">.seh_setframe</code></li>\n<li><code class=\"hljs\">.seh_stackalloc</code></li>\n</ul>\n<h5 id=\"x86-32-bit-and-64-bit\"><a class=\"header\" href=\"#x86-32-bit-and-64-bit\">x86 (32-bit and 64-bit)</a></h5>\n<p>On x86 targets, both 32-bit and 64-bit, the following additional directives are guaranteed to be supported:</p>\n<ul>\n<li><code class=\"hljs\">.nops</code></li>\n<li><code class=\"hljs\">.code16</code></li>\n<li><code class=\"hljs\">.code32</code></li>\n<li><code class=\"hljs\">.code64</code></li>\n</ul>\n<p>Use of <code class=\"hljs\">.code16</code>, <code class=\"hljs\">.code32</code>, and <code class=\"hljs\">.code64</code> directives are only supported if the state is reset to the default before exiting the assembly block.\n32-bit x86 uses <code class=\"hljs\">.code32</code> by default, and x86_64 uses <code class=\"hljs\">.code64</code> by default.</p>\n<h5 id=\"arm-32-bit\"><a class=\"header\" href=\"#arm-32-bit\">ARM (32-bit)</a></h5>\n<p>On ARM, the following additional directives are guaranteed to be supported:</p>\n<ul>\n<li><code class=\"hljs\">.even</code></li>\n<li><code class=\"hljs\">.fnstart</code></li>\n<li><code class=\"hljs\">.fnend</code></li>\n<li><code class=\"hljs\">.save</code></li>\n<li><code class=\"hljs\">.movsp</code></li>\n<li><code class=\"hljs\">.code</code></li>\n<li><code class=\"hljs\">.thumb</code></li>\n<li><code class=\"hljs\">.thumb_func</code></li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unsafety\"><a class=\"header\" href=\"#unsafety\">Unsafety</a></h1>\n<p>Unsafe operations are those that can potentially violate the memory-safety\nguarantees of Rust's static semantics.</p>\n<p>The following language level features cannot be used in the safe subset of\nRust:</p>\n<ul>\n<li>Dereferencing a <a href=\"types/pointer.html\">raw pointer</a>.</li>\n<li>Reading or writing a <a href=\"items/static-items.html#mutable-statics\">mutable</a> or <a href=\"items/external-blocks.html\">external</a> static variable.</li>\n<li>Accessing a field of a <a href=\"items/unions.html\"><code class=\"hljs\">union</code></a>, other than to assign to it.</li>\n<li>Calling an unsafe function (including an intrinsic or foreign function).</li>\n<li>Implementing an <a href=\"items/traits.html#unsafe-traits\">unsafe trait</a>.</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"the-unsafe-keyword\"><a class=\"header\" href=\"#the-unsafe-keyword\">The <code>unsafe</code> keyword</a></h1>\n<p>The <code class=\"hljs\">unsafe</code> keyword can occur in several different contexts:\nunsafe functions (<code class=\"hljs\">unsafe fn</code>), unsafe blocks (<code class=\"hljs\">unsafe {}</code>), unsafe traits (<code class=\"hljs\">unsafe trait</code>), and unsafe trait implementations (<code class=\"hljs\">unsafe impl</code>).\nIt plays several different roles, depending on where it is used and whether the <code class=\"hljs\">unsafe_op_in_unsafe_fn</code> lint is enabled:</p>\n<ul>\n<li>it is used to mark code that <em>defines</em> extra safety conditions (<code class=\"hljs\">unsafe fn</code>, <code class=\"hljs\">unsafe trait</code>)</li>\n<li>it is used to mark code that needs to <em>satisfy</em> extra safety conditions (<code class=\"hljs\">unsafe {}</code>, <code class=\"hljs\">unsafe impl</code>, <code class=\"hljs\">unsafe fn</code> without <a href=\"../rustc/lints/listing/allowed-by-default.html#unsafe-op-in-unsafe-fn\"><code class=\"hljs\">unsafe_op_in_unsafe_fn</code></a>)</li>\n</ul>\n<p>The following discusses each of these cases.\nSee the <a href=\"../std/keyword.unsafe.html\">keyword documentation</a> for some illustrative examples.</p>\n<h2 id=\"unsafe-functions-unsafe-fn\"><a class=\"header\" href=\"#unsafe-functions-unsafe-fn\">Unsafe functions (<code>unsafe fn</code>)</a></h2>\n<p>Unsafe functions are functions that are not safe in all contexts and/or for all possible inputs.\nWe say they have <em>extra safety conditions</em>, which are requirements that must be upheld by all callers and that the compiler does not check.\nFor example, <a href=\"../std/primitive.slice.html#method.get_unchecked\"><code class=\"hljs\">get_unchecked</code></a> has the extra safety condition that the index must be in-bounds.\nThe unsafe function should come with documentation explaining what those extra safety conditions are.</p>\n<p>Such a function must be prefixed with the keyword <code class=\"hljs\">unsafe</code> and can only be called from inside an <code class=\"hljs\">unsafe</code> block, or inside <code class=\"hljs\">unsafe fn</code> without the <a href=\"../rustc/lints/listing/allowed-by-default.html#unsafe-op-in-unsafe-fn\"><code class=\"hljs\">unsafe_op_in_unsafe_fn</code></a> lint.</p>\n<h2 id=\"unsafe-blocks-unsafe-\"><a class=\"header\" href=\"#unsafe-blocks-unsafe-\">Unsafe blocks (<code>unsafe {}</code>)</a></h2>\n<p>A block of code can be prefixed with the <code class=\"hljs\">unsafe</code> keyword, to permit calling <code class=\"hljs\">unsafe</code> functions or dereferencing raw pointers.\nBy default, the body of an unsafe function is also considered to be an unsafe block;\nthis can be changed by enabling the <a href=\"../rustc/lints/listing/allowed-by-default.html#unsafe-op-in-unsafe-fn\"><code class=\"hljs\">unsafe_op_in_unsafe_fn</code></a> lint.</p>\n<p>By putting operations into an unsafe block, the programmer states that they have taken care of satisfying the extra safety conditions of all operations inside that block.</p>\n<p>Unsafe blocks are the logical dual to unsafe functions:\nwhere unsafe functions define a proof obligation that callers must uphold, unsafe blocks state that all relevant proof obligations of functions or operations called inside the block have been discharged.\nThere are many ways to discharge proof obligations;\nfor example, there could be run-time checks or data structure invariants that guarantee that certain properties are definitely true, or the unsafe block could be inside an <code class=\"hljs\">unsafe fn</code>, in which case the block can use the proof obligations of that function to discharge the proof obligations arising inside the block.</p>\n<p>Unsafe blocks are used to wrap foreign libraries, make direct use of hardware or implement features not directly present in the language.\nFor example, Rust provides the language features necessary to implement memory-safe concurrency in the language but the implementation of threads and message passing in the standard library uses unsafe blocks.</p>\n<p>Rust's type system is a conservative approximation of the dynamic safety requirements, so in some cases there is a performance cost to using safe code.\nFor example, a doubly-linked list is not a tree structure and can only be represented with reference-counted pointers in safe code.\nBy using <code class=\"hljs\">unsafe</code> blocks to represent the reverse links as raw pointers, it can be implemented without reference counting.\n(See <a href=\"https://rust-unofficial.github.io/too-many-lists/\">\"Learn Rust With Entirely Too Many Linked Lists\"</a> for a more in-depth exploration of this particular example.)</p>\n<h2 id=\"unsafe-traits-unsafe-trait\"><a class=\"header\" href=\"#unsafe-traits-unsafe-trait\">Unsafe traits (<code>unsafe trait</code>)</a></h2>\n<p>An unsafe trait is a trait that comes with extra safety conditions that must be upheld by <em>implementations</em> of the trait.\nThe unsafe trait should come with documentation explaining what those extra safety conditions are.</p>\n<p>Such a trait must be prefixed with the keyword <code class=\"hljs\">unsafe</code> and can only be implemented by <code class=\"hljs\">unsafe impl</code> blocks.</p>\n<h2 id=\"unsafe-trait-implementations-unsafe-impl\"><a class=\"header\" href=\"#unsafe-trait-implementations-unsafe-impl\">Unsafe trait implementations (<code>unsafe impl</code>)</a></h2>\n<p>When implementing an unsafe trait, the implementation needs to be prefixed with the <code class=\"hljs\">unsafe</code> keyword.\nBy writing <code class=\"hljs\">unsafe impl</code>, the programmer states that they have taken care of satisfying the extra safety conditions required by the trait.</p>\n<p>Unsafe trait implementations are the logical dual to unsafe traits: where unsafe traits define a proof obligation that implementations must uphold, unsafe implementations state that all relevant proof obligations have been discharged.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"behavior-considered-undefined\"><a class=\"header\" href=\"#behavior-considered-undefined\">Behavior considered undefined</a></h2>\n<p>Rust code is incorrect if it exhibits any of the behaviors in the following\nlist. This includes code within <code class=\"hljs\">unsafe</code> blocks and <code class=\"hljs\">unsafe</code> functions.\n<code class=\"hljs\">unsafe</code> only means that avoiding undefined behavior is on the programmer; it\ndoes not change anything about the fact that Rust programs must never cause\nundefined behavior.</p>\n<p>It is the programmer's responsibility when writing <code class=\"hljs\">unsafe</code> code to ensure that\nany safe code interacting with the <code class=\"hljs\">unsafe</code> code cannot trigger these\nbehaviors. <code class=\"hljs\">unsafe</code> code that satisfies this property for any safe client is\ncalled <em>sound</em>; if <code class=\"hljs\">unsafe</code> code can be misused by safe code to exhibit\nundefined behavior, it is <em>unsound</em>.</p>\n<div class=\"warning\">\n<p><em><strong>Warning:</strong></em> The following list is not exhaustive; it may grow or shrink.\nThere is no formal model of Rust's semantics for what is and is not allowed in\nunsafe code, so there may be more behavior considered unsafe. We also reserve\nthe right to make some of the behavior in that list defined in the future. In\nother words, this list does not say that anything will <em>definitely</em> always be\nundefined in all future Rust version (but we might make such commitments for\nsome list items in the future).</p>\n<p>Please read the <a href=\"../nomicon/index.html\">Rustonomicon</a> before writing unsafe code.</p>\n</div>\n<ul>\n<li>\n<p>Data races.</p>\n</li>\n<li>\n<p>Accessing (loading from or storing to) a place that is <a href=\"behavior-considered-undefined.html#dangling-pointers\">dangling</a> or <a href=\"behavior-considered-undefined.html#places-based-on-misaligned-pointers\">based on\na misaligned pointer</a>.</p>\n</li>\n<li>\n<p>Performing a place projection that violates the requirements of <a href=\"../std/primitive.pointer.html#method.offset\">in-bounds\npointer arithmetic</a>. A place projection is a <a href=\"expressions/field-expr.html\">field\nexpression</a>, a <a href=\"expressions/tuple-expr.html#tuple-indexing-expressions\">tuple index expression</a>, or an\n<a href=\"expressions/array-expr.html#array-and-slice-indexing-expressions\">array/slice index expression</a>.</p>\n</li>\n<li>\n<p>Breaking the <a href=\"http://llvm.org/docs/LangRef.html#pointer-aliasing-rules\">pointer aliasing rules</a>. <code class=\"hljs\">Box&lt;T&gt;</code>, <code class=\"hljs\">&amp;mut T</code> and <code class=\"hljs\">&amp;T</code> follow\nLLVM’s scoped <a href=\"http://llvm.org/docs/LangRef.html#noalias\">noalias</a> model, except if the <code class=\"hljs\">&amp;T</code> contains an\n<a href=\"../std/cell/struct.UnsafeCell.html\"><code class=\"hljs\">UnsafeCell&lt;U&gt;</code></a>. References and boxes must not be <a href=\"behavior-considered-undefined.html#dangling-pointers\">dangling</a> while they are\nlive. The exact liveness duration is not specified, but some bounds exist:</p>\n<ul>\n<li>For references, the liveness duration is upper-bounded by the syntactic\nlifetime assigned by the borrow checker; it cannot be live any <em>longer</em> than\nthat lifetime.</li>\n<li>Each time a reference or box is passed to or returned from a function, it is\nconsidered live.</li>\n<li>When a reference (but not a <code class=\"hljs\">Box</code>!) is passed to a function, it is live at\nleast as long as that function call, again except if the <code class=\"hljs\">&amp;T</code> contains an\n<a href=\"../std/cell/struct.UnsafeCell.html\"><code class=\"hljs\">UnsafeCell&lt;U&gt;</code></a>.</li>\n</ul>\n<p>All this also applies when values of these\ntypes are passed in a (nested) field of a compound type, but not behind\npointer indirections.</p>\n</li>\n<li>\n<p>Mutating immutable bytes. All bytes inside a <a href=\"items/constant-items.html\"><code class=\"hljs\">const</code></a> item are immutable.\nThe bytes owned by an immutable binding are immutable, unless those bytes are part of an <a href=\"../std/cell/struct.UnsafeCell.html\"><code class=\"hljs\">UnsafeCell&lt;U&gt;</code></a>.</p>\n<p>Moreover, the bytes <a href=\"behavior-considered-undefined.html#pointed-to-bytes\">pointed to</a> by a shared reference, including transitively through other references (both shared and mutable) and <code class=\"hljs\">Box</code>es, are immutable; transitivity includes those references stored in fields of compound types.</p>\n<p>A mutation is any write of more than 0 bytes which overlaps with any of the relevant bytes (even if that write does not change the memory contents).</p>\n</li>\n<li>\n<p>Invoking undefined behavior via compiler intrinsics.</p>\n</li>\n<li>\n<p>Executing code compiled with platform features that the current platform\ndoes not support (see <a href=\"attributes/codegen.html#the-target_feature-attribute\"><code class=\"hljs\">target_feature</code></a>), <em>except</em> if the platform explicitly documents this to be safe.</p>\n</li>\n<li>\n<p>Calling a function with the wrong call ABI or unwinding from a function with the wrong unwind ABI.</p>\n</li>\n<li>\n<p>Producing an invalid value, even in private fields and locals. \"Producing\" a\nvalue happens any time a value is assigned to or read from a place, passed to\na function/primitive operation or returned from a function/primitive\noperation.\nThe following values are invalid (at their respective type):</p>\n<ul>\n<li>\n<p>A value other than <code class=\"hljs\">false</code> (<code class=\"hljs\">0</code>) or <code class=\"hljs\">true</code> (<code class=\"hljs\">1</code>) in a <a href=\"types/boolean.html\"><code class=\"hljs\">bool</code></a>.</p>\n</li>\n<li>\n<p>A discriminant in an <code class=\"hljs\">enum</code> not included in the type definition.</p>\n</li>\n<li>\n<p>A null <code class=\"hljs\">fn</code> pointer.</p>\n</li>\n<li>\n<p>A value in a <code class=\"hljs\">char</code> which is a surrogate or above <code class=\"hljs\">char::MAX</code>.</p>\n</li>\n<li>\n<p>A <code class=\"hljs\">!</code> (all values are invalid for this type).</p>\n</li>\n<li>\n<p>An integer (<code class=\"hljs\">i*</code>/<code class=\"hljs\">u*</code>), floating point value (<code class=\"hljs\">f*</code>), or raw pointer obtained\nfrom <a href=\"http://llvm.org/docs/LangRef.html#undefined-values\">uninitialized memory</a>, or uninitialized memory in a <code class=\"hljs\">str</code>.</p>\n</li>\n<li>\n<p>A reference or <code class=\"hljs\">Box&lt;T&gt;</code> that is <a href=\"behavior-considered-undefined.html#dangling-pointers\">dangling</a>, misaligned, or points to an invalid value.</p>\n</li>\n<li>\n<p>Invalid metadata in a wide reference, <code class=\"hljs\">Box&lt;T&gt;</code>, or raw pointer:</p>\n<ul>\n<li><code class=\"hljs\">dyn Trait</code> metadata is invalid if it is not a pointer to a vtable for\n<code class=\"hljs\">Trait</code> that matches the actual dynamic trait the pointer or reference points to.</li>\n<li>Slice metadata is invalid if the length is not a valid <code class=\"hljs\">usize</code>\n(i.e., it must not be read from uninitialized memory).</li>\n</ul>\n</li>\n<li>\n<p>Invalid values for a type with a custom definition of invalid values.\nIn the standard library, this affects <a href=\"../core/ptr/struct.NonNull.html\"><code class=\"hljs\">NonNull&lt;T&gt;</code></a> and <a href=\"../core/num/index.html\"><code class=\"hljs\">NonZero*</code></a>.</p>\n<blockquote>\n<p><strong>Note</strong>: <code class=\"hljs\">rustc</code> achieves this with the unstable\n<code class=\"hljs\">rustc_layout_scalar_valid_range_*</code> attributes.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>Incorrect use of inline assembly. For more details, refer to the <a href=\"inline-assembly.html#rules-for-inline-assembly\">rules</a> to\nfollow when writing code that uses inline assembly.</p>\n</li>\n<li>\n<p><strong>In <a href=\"const_eval.html#const-context\">const context</a></strong>: transmuting or otherwise\nreinterpreting a pointer (reference, raw pointer, or function pointer) into\nsome allocated object as a non-pointer type (such as integers).\n'Reinterpreting' refers to loading the pointer value at integer type without a\ncast, e.g. by doing raw pointer casts or using a union.</p>\n</li>\n</ul>\n<p><strong>Note:</strong> Uninitialized memory is also implicitly invalid for any type that has\na restricted set of valid values. In other words, the only cases in which\nreading uninitialized memory is permitted are inside <code class=\"hljs\">union</code>s and in \"padding\"\n(the gaps between the fields/elements of a type).</p>\n<blockquote>\n<p><strong>Note</strong>: Undefined behavior affects the entire program. For example, calling\na function in C that exhibits undefined behavior of C means your entire\nprogram contains undefined behaviour that can also affect the Rust code. And\nvice versa, undefined behavior in Rust can cause adverse affects on code\nexecuted by any FFI calls to other languages.</p>\n</blockquote>\n<h3 id=\"pointed-to-bytes\"><a class=\"header\" href=\"#pointed-to-bytes\">Pointed-to bytes</a></h3>\n<p>The span of bytes a pointer or reference \"points to\" is determined by the pointer value and the size of the pointee type (using <code class=\"hljs\">size_of_val</code>).</p>\n<h3 id=\"places-based-on-misaligned-pointers\"><a class=\"header\" href=\"#places-based-on-misaligned-pointers\">Places based on misaligned pointers</a></h3>\n<p>A place is said to be \"based on a misaligned pointer\" if the last <code class=\"hljs\">*</code> projection\nduring place computation was performed on a pointer that was not aligned for its\ntype. (If there is no <code class=\"hljs\">*</code> projection in the place expression, then this is\naccessing the field of a local and rustc will guarantee proper alignment. If\nthere are multiple <code class=\"hljs\">*</code> projection, then each of them incurs a load of the\npointer-to-be-dereferenced itself from memory, and each of these loads is\nsubject to the alignment constraint. Note that some <code class=\"hljs\">*</code> projections can be\nomitted in surface Rust syntax due to automatic dereferencing; we are\nconsidering the fully expanded place expression here.)</p>\n<p>For instance, if <code class=\"hljs\">ptr</code> has type <code class=\"hljs\">*const S</code> where <code class=\"hljs\">S</code> has an alignment of 8, then\n<code class=\"hljs\">ptr</code> must be 8-aligned or else <code class=\"hljs\">(*ptr).f</code> is \"based on an misaligned pointer\".\nThis is true even if the type of the field <code class=\"hljs\">f</code> is <code class=\"hljs\">u8</code> (i.e., a type with\nalignment 1). In other words, the alignment requirement derives from the type of\nthe pointer that was dereferenced, <em>not</em> the type of the field that is being\naccessed.</p>\n<p>Note that a place based on a misaligned pointer only leads to Undefined Behavior\nwhen it is loaded from or stored to. <code class=\"hljs\">addr_of!</code>/<code class=\"hljs\">addr_of_mut!</code> on such a place\nis allowed. <code class=\"hljs\">&amp;</code>/<code class=\"hljs\">&amp;mut</code> on a place requires the alignment of the field type (or\nelse the program would be \"producing an invalid value\"), which generally is a\nless restrictive requirement than being based on an aligned pointer. Taking a\nreference will lead to a compiler error in cases where the field type might be\nmore aligned than the type that contains it, i.e., <code class=\"hljs\">repr(packed)</code>. This means\nthat being based on an aligned pointer is always sufficient to ensure that the\nnew reference is aligned, but it is not always necessary.</p>\n<h3 id=\"dangling-pointers\"><a class=\"header\" href=\"#dangling-pointers\">Dangling pointers</a></h3>\n<p>A reference/pointer is \"dangling\" if it is null or not all of the bytes it\n<a href=\"behavior-considered-undefined.html#pointed-to-bytes\">points to</a> are part of the same live allocation (so in particular they all have to be\npart of <em>some</em> allocation).</p>\n<p>If the size is 0, then the pointer must either point inside of a live allocation\n(including pointing just after the last byte of the allocation), or it must be\ndirectly constructed from a non-zero integer literal.</p>\n<p>Note that dynamically sized types (such as slices and strings) point to their\nentire range, so it is important that the length metadata is never too large. In\nparticular, the dynamic size of a Rust value (as determined by <code class=\"hljs\">size_of_val</code>)\nmust never exceed <code class=\"hljs\">isize::MAX</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"behavior-not-considered-unsafe\"><a class=\"header\" href=\"#behavior-not-considered-unsafe\">Behavior not considered <code>unsafe</code></a></h2>\n<p>The Rust compiler does not consider the following behaviors <em>unsafe</em>,\nthough a programmer may (should) find them undesirable, unexpected,\nor erroneous.</p>\n<h5 id=\"deadlocks\"><a class=\"header\" href=\"#deadlocks\">Deadlocks</a></h5>\n<h5 id=\"leaks-of-memory-and-other-resources\"><a class=\"header\" href=\"#leaks-of-memory-and-other-resources\">Leaks of memory and other resources</a></h5>\n<h5 id=\"exiting-without-calling-destructors\"><a class=\"header\" href=\"#exiting-without-calling-destructors\">Exiting without calling destructors</a></h5>\n<h5 id=\"exposing-randomized-base-addresses-through-pointer-leaks\"><a class=\"header\" href=\"#exposing-randomized-base-addresses-through-pointer-leaks\">Exposing randomized base addresses through pointer leaks</a></h5>\n<h5 id=\"integer-overflow\"><a class=\"header\" href=\"#integer-overflow\">Integer overflow</a></h5>\n<p>If a program contains arithmetic overflow, the programmer has made an\nerror. In the following discussion, we maintain a distinction between\narithmetic overflow and wrapping arithmetic. The first is erroneous,\nwhile the second is intentional.</p>\n<p>When the programmer has enabled <code class=\"hljs\">debug_assert!</code> assertions (for\nexample, by enabling a non-optimized build), implementations must\ninsert dynamic checks that <code class=\"hljs\">panic</code> on overflow. Other kinds of builds\nmay result in <code class=\"hljs\">panics</code> or silently wrapped values on overflow, at the\nimplementation's discretion.</p>\n<p>In the case of implicitly-wrapped overflow, implementations must\nprovide well-defined (even if still considered erroneous) results by\nusing two's complement overflow conventions.</p>\n<p>The integral types provide inherent methods to allow programmers\nexplicitly to perform wrapping arithmetic. For example,\n<code class=\"hljs\">i32::wrapping_add</code> provides two's complement, wrapping addition.</p>\n<p>The standard library also provides a <code class=\"hljs\">Wrapping&lt;T&gt;</code> newtype which\nensures all standard arithmetic operations for <code class=\"hljs\">T</code> have wrapping\nsemantics.</p>\n<p>See <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0560-integer-overflow.md\">RFC 560</a> for error conditions, rationale, and more details about\ninteger overflow.</p>\n<h5 id=\"logic-errors\"><a class=\"header\" href=\"#logic-errors\">Logic errors</a></h5>\n<p>Safe code may impose extra logical constraints that can be checked\nat neither compile-time nor runtime. If a program breaks such\na constraint, the behavior may be unspecified but will not result in\nundefined behavior. This could include panics, incorrect results,\naborts, and non-termination. The behavior may also differ between\nruns, builds, or kinds of build.</p>\n<p>For example, implementing both <code class=\"hljs\">Hash</code> and <code class=\"hljs\">Eq</code> requires that values\nconsidered equal have equal hashes. Another example are data structures\nlike <code class=\"hljs\">BinaryHeap</code>, <code class=\"hljs\">BTreeMap</code>, <code class=\"hljs\">BTreeSet</code>, <code class=\"hljs\">HashMap</code> and <code class=\"hljs\">HashSet</code>\nwhich describe constraints on the modification of their keys while\nthey are in the data structure. Violating such constraints is not\nconsidered unsafe, yet the program is considered erroneous and\nits behavior unpredictable.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"constant-evaluation\"><a class=\"header\" href=\"#constant-evaluation\">Constant evaluation</a></h1>\n<p>Constant evaluation is the process of computing the result of\n<a href=\"expressions.html\">expressions</a> during compilation. Only a subset of all expressions\ncan be evaluated at compile-time.</p>\n<h2 id=\"constant-expressions\"><a class=\"header\" href=\"#constant-expressions\">Constant expressions</a></h2>\n<p>Certain forms of expressions, called constant expressions, can be evaluated at\ncompile time. In <a href=\"const_eval.html#const-context\">const contexts</a>, these are the only allowed\nexpressions, and are always evaluated at compile time. In other places, such as\n<a href=\"statements.html#let-statements\">let statements</a>, constant expressions <em>may</em>\nbe, but are not guaranteed to be, evaluated at compile time. Behaviors such as\nout of bounds <a href=\"expressions/array-expr.html#array-and-slice-indexing-expressions\">array indexing</a> or <a href=\"expressions/operator-expr.html#overflow\">overflow</a> are compiler errors if the value\nmust be evaluated at compile time (i.e. in const contexts). Otherwise, these\nbehaviors are warnings, but will likely panic at run-time.</p>\n<p>The following expressions are constant expressions, so long as any operands are\nalso constant expressions and do not cause any <a href=\"destructors.html\"><code class=\"hljs\">Drop::drop</code></a> calls\nto be run.</p>\n<ul>\n<li><a href=\"expressions/literal-expr.html\">Literals</a>.</li>\n<li><a href=\"items/generics.html\">Const parameters</a>.</li>\n<li><a href=\"expressions/path-expr.html\">Paths</a> to <a href=\"items/functions.html\">functions</a> and <a href=\"items/constant-items.html\">constants</a>.\nRecursively defining constants is not allowed.</li>\n<li>Paths to <a href=\"items/static-items.html\">statics</a>. These are only allowed within the initializer of a static.</li>\n<li><a href=\"expressions/tuple-expr.html\">Tuple expressions</a>.</li>\n<li><a href=\"expressions/array-expr.html\">Array expressions</a>.</li>\n<li><a href=\"expressions/struct-expr.html\">Struct</a> expressions.</li>\n<li><a href=\"expressions/block-expr.html\">Block expressions</a>, including <code class=\"hljs\">unsafe</code> and <code class=\"hljs\">const</code> blocks.\n<ul>\n<li><a href=\"statements.html#let-statements\">let statements</a> and thus irrefutable <a href=\"patterns.html\">patterns</a>, including mutable bindings</li>\n<li><a href=\"expressions/operator-expr.html#assignment-expressions\">assignment expressions</a></li>\n<li><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">compound assignment expressions</a></li>\n<li><a href=\"statements.html#expression-statements\">expression statements</a></li>\n</ul>\n</li>\n<li><a href=\"expressions/field-expr.html\">Field</a> expressions.</li>\n<li>Index expressions, <a href=\"expressions/array-expr.html#array-and-slice-indexing-expressions\">array indexing</a> or <a href=\"types/slice.html\">slice</a> with a <code class=\"hljs\">usize</code>.</li>\n<li><a href=\"expressions/range-expr.html\">Range expressions</a>.</li>\n<li><a href=\"expressions/closure-expr.html\">Closure expressions</a> which don't capture variables from the environment.</li>\n<li>Built-in <a href=\"expressions/operator-expr.html#negation-operators\">negation</a>, <a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">arithmetic</a>, <a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">logical</a>, <a href=\"expressions/operator-expr.html#comparison-operators\">comparison</a> or <a href=\"expressions/operator-expr.html#lazy-boolean-operators\">lazy boolean</a>\noperators used on integer and floating point types, <code class=\"hljs\">bool</code>, and <code class=\"hljs\">char</code>.</li>\n<li>Shared <a href=\"expressions/operator-expr.html#borrow-operators\">borrow</a>s, except if applied to a type with <a href=\"interior-mutability.html\">interior mutability</a>.</li>\n<li>The <a href=\"expressions/operator-expr.html#the-dereference-operator\">dereference operator</a> except for raw pointers.</li>\n<li><a href=\"expressions/grouped-expr.html\">Grouped</a> expressions.</li>\n<li><a href=\"expressions/operator-expr.html#type-cast-expressions\">Cast</a> expressions, except\n<ul>\n<li>pointer to address casts and</li>\n<li>function pointer to address casts.</li>\n</ul>\n</li>\n<li>Calls of <a href=\"items/functions.html#const-functions\">const functions</a> and const methods.</li>\n<li><a href=\"expressions/loop-expr.html#infinite-loops\">loop</a>, <a href=\"expressions/loop-expr.html#predicate-loops\">while</a> and <a href=\"expressions/loop-expr.html#predicate-pattern-loops\"><code class=\"hljs\">while let</code></a> expressions.</li>\n<li><a href=\"expressions/if-expr.html#if-expressions\">if</a>, <a href=\"expressions/if-expr.html#if-let-expressions\"><code class=\"hljs\">if let</code></a> and <a href=\"expressions/match-expr.html\">match</a> expressions.</li>\n</ul>\n<h2 id=\"const-context\"><a class=\"header\" href=\"#const-context\">Const context</a></h2>\n<p>A <em>const context</em> is one of the following:</p>\n<ul>\n<li><a href=\"types/array.html\">Array type length expressions</a></li>\n<li><a href=\"expressions/array-expr.html\">Array repeat length expressions</a></li>\n<li>The initializer of\n<ul>\n<li><a href=\"items/constant-items.html\">constants</a></li>\n<li><a href=\"items/static-items.html\">statics</a></li>\n<li><a href=\"items/enumerations.html#discriminants\">enum discriminants</a></li>\n</ul>\n</li>\n<li>A <a href=\"items/generics.html#const-generics\">const generic argument</a></li>\n<li>A <a href=\"expressions/block-expr.html#const-blocks\">const block</a></li>\n</ul>\n<h2 id=\"const-functions-1\"><a class=\"header\" href=\"#const-functions-1\">Const Functions</a></h2>\n<p>A <em>const fn</em> is a function that one is permitted to call from a const context. Declaring a function\n<code class=\"hljs\">const</code> has no effect on any existing uses, it only restricts the types that arguments and the\nreturn type may use, as well as prevent various expressions from being used within it. You can freely\ndo anything with a const function that you can do with a regular function.</p>\n<p>When called from a const context, the function is interpreted by the\ncompiler at compile time. The interpretation happens in the\nenvironment of the compilation target and not the host. So <code class=\"hljs\">usize</code> is\n<code class=\"hljs\">32</code> bits if you are compiling against a <code class=\"hljs\">32</code> bit system, irrelevant\nof whether you are building on a <code class=\"hljs\">64</code> bit or a <code class=\"hljs\">32</code> bit system.</p>\n<p>Const functions have various restrictions to make sure that they can be\nevaluated at compile-time. It is, for example, not possible to write a random\nnumber generator as a const function. Calling a const function at compile-time\nwill always yield the same result as calling it at runtime, even when called\nmultiple times. There's one exception to this rule: if you are doing complex\nfloating point operations in extreme situations, then you might get (very\nslightly) different results. It is advisable to not make array lengths and enum\ndiscriminants depend on floating point computations.</p>\n<p>Notable features that are allowed in const contexts but not in const functions include:</p>\n<ul>\n<li>floating point operations\n<ul>\n<li>floating point values are treated just like generic parameters without trait bounds beyond\n<code class=\"hljs\">Copy</code>. So you cannot do anything with them but copy/move them around.</li>\n</ul>\n</li>\n</ul>\n<p>Conversely, the following are possible in a const function, but not in a const context:</p>\n<ul>\n<li>Use of generic type and lifetime parameters.\n<ul>\n<li>Const contexts do allow limited use of <a href=\"items/generics.html#const-generics\">const generic parameters</a>.</li>\n</ul>\n</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"application-binary-interface-abi\"><a class=\"header\" href=\"#application-binary-interface-abi\">Application Binary Interface (ABI)</a></h1>\n<p>This section documents features that affect the ABI of the compiled output of\na crate.</p>\n<p>See <em><a href=\"items/functions.html#extern-function-qualifier\">extern functions</a></em> for information on specifying the ABI for exporting\nfunctions. See <em><a href=\"items/external-blocks.html\">external blocks</a></em> for information on specifying the ABI for\nlinking external libraries.</p>\n<h2 id=\"the-used-attribute\"><a class=\"header\" href=\"#the-used-attribute\">The <code>used</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">used</code> attribute</em> can only be applied to <a href=\"items/static-items.html\"><code class=\"hljs\">static</code> items</a>. This <a href=\"attributes.html\">attribute</a> forces the\ncompiler to keep the variable in the output object file (.o, .rlib, etc. excluding final binaries)\neven if the variable is not used, or referenced, by any other item in the crate.\nHowever, the linker is still free to remove such an item.</p>\n<p>Below is an example that shows under what conditions the compiler keeps a <code class=\"hljs\">static</code> item in the\noutput object file.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// foo.rs</span>\n\n<span class=\"hljs-comment\">// This is kept because of `#[used]`:</span>\n<span class=\"hljs-meta\">#[used]</span>\n<span class=\"hljs-keyword\">static</span> FOO: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-comment\">// This is removable because it is unused:</span>\n<span class=\"hljs-meta\">#[allow(dead_code)]</span>\n<span class=\"hljs-keyword\">static</span> BAR: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-comment\">// This is kept because it is publicly reachable:</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">static</span> BAZ: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-comment\">// This is kept because it is referenced by a public, reachable function:</span>\n<span class=\"hljs-keyword\">static</span> QUUX: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">quux</span></span>() -&gt; &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">u32</span> {\n    &amp;QUUX\n}\n\n<span class=\"hljs-comment\">// This is removable because it is referenced by a private, unused (dead) function:</span>\n<span class=\"hljs-keyword\">static</span> CORGE: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-meta\">#[allow(dead_code)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">corge</span></span>() -&gt; &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">u32</span> {\n    &amp;CORGE\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustc -O --emit=obj --crate-type=rlib foo.rs</span>\n<span class=\"hljs-meta\">\n$</span><span class=\"bash\"> nm -C foo.o</span>\n0000000000000000 R foo::BAZ\n0000000000000000 r foo::FOO\n0000000000000000 R foo::QUUX\n0000000000000000 T foo::quux\n</code></pre>\n<h2 id=\"the-no_mangle-attribute\"><a class=\"header\" href=\"#the-no_mangle-attribute\">The <code>no_mangle</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">no_mangle</code> attribute</em> may be used on any <a href=\"items.html\">item</a> to disable standard\nsymbol name mangling. The symbol for the item will be the identifier of the\nitem's name.</p>\n<p>Additionally, the item will be publicly exported from the produced library or\nobject file, similar to the <a href=\"abi.html#the-used-attribute\"><code class=\"hljs\">used</code> attribute</a>.</p>\n<h2 id=\"the-link_section-attribute\"><a class=\"header\" href=\"#the-link_section-attribute\">The <code>link_section</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">link_section</code> attribute</em> specifies the section of the object file that a\n<a href=\"items/functions.html\">function</a> or <a href=\"items/static-items.html\">static</a>'s content will be placed into. It uses the\n<a href=\"attributes.html#meta-item-attribute-syntax\"><em>MetaNameValueStr</em></a> syntax to specify the section name.</p>\n<!-- no_run: don't link. The format of the section name is platform-specific. -->\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button hidden\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[no_mangle]</span>\n<span class=\"hljs-meta\">#[link_section = <span class=\"hljs-meta-string\">\".example_section\"</span>]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">static</span> VAR1: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-number\">1</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"the-export_name-attribute\"><a class=\"header\" href=\"#the-export_name-attribute\">The <code>export_name</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">export_name</code> attribute</em> specifies the name of the symbol that will be\nexported on a <a href=\"items/functions.html\">function</a> or <a href=\"items/static-items.html\">static</a>. It uses the <a href=\"attributes.html#meta-item-attribute-syntax\"><em>MetaNameValueStr</em></a> syntax\nto specify the symbol name.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[export_name = <span class=\"hljs-meta-string\">\"exported_symbol_name\"</span>]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">name_in_rust</span></span>() { }\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"the-rust-runtime\"><a class=\"header\" href=\"#the-rust-runtime\">The Rust runtime</a></h1>\n<p>This section documents features that define some aspects of the Rust runtime.</p>\n<h2 id=\"the-panic_handler-attribute\"><a class=\"header\" href=\"#the-panic_handler-attribute\">The <code>panic_handler</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">panic_handler</code> attribute</em> can only be applied to a function with signature\n<code class=\"hljs\">fn(&amp;PanicInfo) -&gt; !</code>. The function marked with this <a href=\"attributes.html\">attribute</a> defines the behavior of panics. The\n<a href=\"../core/panic/struct.PanicInfo.html\"><code class=\"hljs\">PanicInfo</code></a> struct contains information about the location of the panic. There must be a single\n<code class=\"hljs\">panic_handler</code> function in the dependency graph of a binary, dylib or cdylib crate.</p>\n<p>Below is shown a <code class=\"hljs\">panic_handler</code> function that logs the panic message and then halts the\nthread.</p>\n<!-- ignore: test infrastructure can't handle no_std -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-meta\">#![no_std]</span>\n\n<span class=\"hljs-keyword\">use</span> core::fmt::{<span class=\"hljs-keyword\">self</span>, Write};\n<span class=\"hljs-keyword\">use</span> core::panic::PanicInfo;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Sink</span></span> {\n    <span class=\"hljs-comment\">// ..</span>\n<span class=\"boring\">   _0: (),\n</span>}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Sink {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Sink { Sink { _0: () }}\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> fmt::Write <span class=\"hljs-keyword\">for</span> Sink {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write_str</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, _: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; fmt::<span class=\"hljs-built_in\">Result</span> { <span class=\"hljs-literal\">Ok</span>(()) }\n</span><span class=\"boring\">}\n</span>\n<span class=\"hljs-meta\">#[panic_handler]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">panic</span></span>(info: &amp;PanicInfo) -&gt; ! {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> sink = Sink::new();\n\n    <span class=\"hljs-comment\">// logs \"panicked at '$reason', src/main.rs:27:4\" to some `sink`</span>\n    <span class=\"hljs-keyword\">let</span> _ = <span class=\"hljs-built_in\">writeln!</span>(sink, <span class=\"hljs-string\">\"{}\"</span>, info);\n\n    <span class=\"hljs-keyword\">loop</span> {}\n}</code></pre>\n<h3 id=\"standard-behavior\"><a class=\"header\" href=\"#standard-behavior\">Standard behavior</a></h3>\n<p>The standard library provides an implementation of <code class=\"hljs\">panic_handler</code> that\ndefaults to unwinding the stack but that can be <a href=\"../book/ch09-01-unrecoverable-errors-with-panic.html\">changed to abort the\nprocess</a>. The standard library's panic behavior can be modified at\nruntime with the <a href=\"../std/panic/fn.set_hook.html\">set_hook</a> function.</p>\n<h2 id=\"the-global_allocator-attribute\"><a class=\"header\" href=\"#the-global_allocator-attribute\">The <code>global_allocator</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">global_allocator</code> attribute</em> is used on a <a href=\"items/static-items.html\">static item</a> implementing the\n<a href=\"../alloc/alloc/trait.GlobalAlloc.html\"><code class=\"hljs\">GlobalAlloc</code></a> trait to set the global allocator.</p>\n<h2 id=\"the-windows_subsystem-attribute\"><a class=\"header\" href=\"#the-windows_subsystem-attribute\">The <code>windows_subsystem</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">windows_subsystem</code> attribute</em> may be applied at the crate level to set\nthe <a href=\"https://msdn.microsoft.com/en-us/library/fcc1zstk.aspx\">subsystem</a> when linking on a Windows target. It uses the\n<a href=\"attributes.html#meta-item-attribute-syntax\"><em>MetaNameValueStr</em></a> syntax to specify the subsystem with a value of either\n<code class=\"hljs\">console</code> or <code class=\"hljs\">windows</code>. This attribute is ignored on non-Windows targets, and\nfor non-<code class=\"hljs\">bin</code> <a href=\"linkage.html\">crate types</a>.</p>\n<p>The \"console\" subsystem is the default. If a console process is run from an\nexisting console then it will be attached to that console, otherwise a new\nconsole window will be created.</p>\n<p>The \"windows\" subsystem is commonly used by GUI applications that do not want to\ndisplay a console window on startup. It will run detached from any existing console.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![windows_subsystem = <span class=\"hljs-meta-string\">\"windows\"</span>]</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"appendices\"><a class=\"header\" href=\"#appendices\">Appendices</a></h1>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"appendix-macro-follow-set-ambiguity-formal-specification\"><a class=\"header\" href=\"#appendix-macro-follow-set-ambiguity-formal-specification\">Appendix: Macro Follow-Set Ambiguity Formal Specification</a></h1>\n<p>This page documents the formal specification of the follow rules for <a href=\"macros-by-example.html\">Macros\nBy Example</a>. They were originally specified in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0550-macro-future-proofing.md\">RFC 550</a>, from which the bulk\nof this text is copied, and expanded upon in subsequent RFCs.</p>\n<h2 id=\"definitions--conventions\"><a class=\"header\" href=\"#definitions--conventions\">Definitions &amp; Conventions</a></h2>\n<ul>\n<li><code class=\"hljs\">macro</code>: anything invokable as <code class=\"hljs\">foo!(...)</code> in source code.</li>\n<li><code class=\"hljs\">MBE</code>: macro-by-example, a macro defined by <code class=\"hljs\">macro_rules</code>.</li>\n<li><code class=\"hljs\">matcher</code>: the left-hand-side of a rule in a <code class=\"hljs\">macro_rules</code> invocation, or a\nsubportion thereof.</li>\n<li><code class=\"hljs\">macro parser</code>: the bit of code in the Rust parser that will parse the\ninput using a grammar derived from all of the matchers.</li>\n<li><code class=\"hljs\">fragment</code>: The class of Rust syntax that a given matcher will accept (or\n\"match\").</li>\n<li><code class=\"hljs\">repetition</code> : a fragment that follows a regular repeating pattern</li>\n<li><code class=\"hljs\">NT</code>: non-terminal, the various \"meta-variables\" or repetition matchers\nthat can appear in a matcher, specified in MBE syntax with a leading <code class=\"hljs\">$</code>\ncharacter.</li>\n<li><code class=\"hljs\">simple NT</code>: a \"meta-variable\" non-terminal (further discussion below).</li>\n<li><code class=\"hljs\">complex NT</code>: a repetition matching non-terminal, specified via repetition\noperators (<code class=\"hljs\">*</code>, <code class=\"hljs\">+</code>, <code class=\"hljs\">?</code>).</li>\n<li><code class=\"hljs\">token</code>: an atomic element of a matcher; i.e. identifiers, operators,\nopen/close delimiters, <em>and</em> simple NT's.</li>\n<li><code class=\"hljs\">token tree</code>: a tree structure formed from tokens (the leaves), complex\nNT's, and finite sequences of token trees.</li>\n<li><code class=\"hljs\">delimiter token</code>: a token that is meant to divide the end of one fragment\nand the start of the next fragment.</li>\n<li><code class=\"hljs\">separator token</code>: an optional delimiter token in an complex NT that\nseparates each pair of elements in the matched repetition.</li>\n<li><code class=\"hljs\">separated complex NT</code>: a complex NT that has its own separator token.</li>\n<li><code class=\"hljs\">delimited sequence</code>: a sequence of token trees with appropriate open- and\nclose-delimiters at the start and end of the sequence.</li>\n<li><code class=\"hljs\">empty fragment</code>: The class of invisible Rust syntax that separates tokens,\ni.e. whitespace, or (in some lexical contexts), the empty token sequence.</li>\n<li><code class=\"hljs\">fragment specifier</code>: The identifier in a simple NT that specifies which\nfragment the NT accepts.</li>\n<li><code class=\"hljs\">language</code>: a context-free language.</li>\n</ul>\n<p>Example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">macro_rules!</span> i_am_an_mbe {\n    (start $foo:expr $($i:ident),* end) =&gt; ($foo)\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><code class=\"hljs\">(start $foo:expr $($i:ident),* end)</code> is a matcher. The whole matcher is a\ndelimited sequence (with open- and close-delimiters <code class=\"hljs\">(</code> and <code class=\"hljs\">)</code>), and <code class=\"hljs\">$foo</code>\nand <code class=\"hljs\">$i</code> are simple NT's with <code class=\"hljs\">expr</code> and <code class=\"hljs\">ident</code> as their respective fragment\nspecifiers.</p>\n<p><code class=\"hljs\">$(i:ident),*</code> is <em>also</em> an NT; it is a complex NT that matches a\ncomma-separated repetition of identifiers. The <code class=\"hljs\">,</code> is the separator token for\nthe complex NT; it occurs in between each pair of elements (if any) of the\nmatched fragment.</p>\n<p>Another example of a complex NT is <code class=\"hljs\">$(hi $e:expr ;)+</code>, which matches any\nfragment of the form <code class=\"hljs\">hi &lt;expr&gt;; hi &lt;expr&gt;; ...</code> where <code class=\"hljs\">hi &lt;expr&gt;;</code> occurs at\nleast once. Note that this complex NT does not have a dedicated separator\ntoken.</p>\n<p>(Note that Rust's parser ensures that delimited sequences always occur with\nproper nesting of token tree structure and correct matching of open- and\nclose-delimiters.)</p>\n<p>We will tend to use the variable \"M\" to stand for a matcher, variables \"t\" and\n\"u\" for arbitrary individual tokens, and the variables \"tt\" and \"uu\" for\narbitrary token trees. (The use of \"tt\" does present potential ambiguity with\nits additional role as a fragment specifier; but it will be clear from context\nwhich interpretation is meant.)</p>\n<p>\"SEP\" will range over separator tokens, \"OP\" over the repetition operators\n<code class=\"hljs\">*</code>, <code class=\"hljs\">+</code>, and <code class=\"hljs\">?</code>, \"OPEN\"/\"CLOSE\" over matching token pairs surrounding a\ndelimited sequence (e.g. <code class=\"hljs\">[</code> and <code class=\"hljs\">]</code>).</p>\n<p>Greek letters \"α\" \"β\" \"γ\" \"δ\"  stand for potentially empty token-tree sequences.\n(However, the Greek letter \"ε\" (epsilon) has a special role in the presentation\nand does not stand for a token-tree sequence.)</p>\n<ul>\n<li>This Greek letter convention is usually just employed when the presence of\na sequence is a technical detail; in particular, when we wish to <em>emphasize</em>\nthat we are operating on a sequence of token-trees, we will use the notation\n\"tt ...\" for the sequence, not a Greek letter.</li>\n</ul>\n<p>Note that a matcher is merely a token tree. A \"simple NT\", as mentioned above,\nis an meta-variable NT; thus it is a non-repetition. For example, <code class=\"hljs\">$foo:ty</code> is\na simple NT but <code class=\"hljs\">$($foo:ty)+</code> is a complex NT.</p>\n<p>Note also that in the context of this formalism, the term \"token\" generally\n<em>includes</em> simple NTs.</p>\n<p>Finally, it is useful for the reader to keep in mind that according to the\ndefinitions of this formalism, no simple NT matches the empty fragment, and\nlikewise no token matches the empty fragment of Rust syntax. (Thus, the <em>only</em>\nNT that can match the empty fragment is a complex NT.) This is not actually\ntrue, because the <code class=\"hljs\">vis</code> matcher can match an empty fragment. Thus, for the\npurposes of the formalism, we will treat <code class=\"hljs\">$v:vis</code> as actually being\n<code class=\"hljs\">$($v:vis)?</code>, with a requirement that the matcher match an empty fragment.</p>\n<h3 id=\"the-matcher-invariants\"><a class=\"header\" href=\"#the-matcher-invariants\">The Matcher Invariants</a></h3>\n<p>To be valid, a matcher must meet the following three invariants. The definitions\nof FIRST and FOLLOW are described later.</p>\n<ol>\n<li>For any two successive token tree sequences in a matcher <code class=\"hljs\">M</code> (i.e. <code class=\"hljs\">M = ... tt uu ...</code>) with <code class=\"hljs\">uu ...</code> nonempty, we must have FOLLOW(<code class=\"hljs\">... tt</code>) ∪ {ε} ⊇\nFIRST(<code class=\"hljs\">uu ...</code>).</li>\n<li>For any separated complex NT in a matcher, <code class=\"hljs\">M = ... $(tt ...) SEP OP ...</code>,\nwe must have <code class=\"hljs\">SEP</code> ∈ FOLLOW(<code class=\"hljs\">tt ...</code>).</li>\n<li>For an unseparated complex NT in a matcher, <code class=\"hljs\">M = ... $(tt ...) OP ...</code>, if\nOP = <code class=\"hljs\">*</code> or <code class=\"hljs\">+</code>, we must have FOLLOW(<code class=\"hljs\">tt ...</code>) ⊇ FIRST(<code class=\"hljs\">tt ...</code>).</li>\n</ol>\n<p>The first invariant says that whatever actual token that comes after a matcher,\nif any, must be somewhere in the predetermined follow set.  This ensures that a\nlegal macro definition will continue to assign the same determination as to\nwhere <code class=\"hljs\">... tt</code> ends and <code class=\"hljs\">uu ...</code> begins, even as new syntactic forms are added\nto the language.</p>\n<p>The second invariant says that a separated complex NT must use a separator token\nthat is part of the predetermined follow set for the internal contents of the\nNT. This ensures that a legal macro definition will continue to parse an input\nfragment into the same delimited sequence of <code class=\"hljs\">tt ...</code>'s, even as new syntactic\nforms are added to the language.</p>\n<p>The third invariant says that when we have a complex NT that can match two or\nmore copies of the same thing with no separation in between, it must be\npermissible for them to be placed next to each other as per the first invariant.\nThis invariant also requires they be nonempty, which eliminates a possible\nambiguity.</p>\n<p><strong>NOTE: The third invariant is currently unenforced due to historical oversight\nand significant reliance on the behaviour. It is currently undecided what to do\nabout this going forward. Macros that do not respect the behaviour may become\ninvalid in a future edition of Rust. See the <a href=\"https://github.com/rust-lang/rust/issues/56575\">tracking issue</a>.</strong></p>\n<h3 id=\"first-and-follow-informally\"><a class=\"header\" href=\"#first-and-follow-informally\">FIRST and FOLLOW, informally</a></h3>\n<p>A given matcher M maps to three sets: FIRST(M), LAST(M) and FOLLOW(M).</p>\n<p>Each of the three sets is made up of tokens. FIRST(M) and LAST(M) may also\ncontain a distinguished non-token element ε (\"epsilon\"), which indicates that M\ncan match the empty fragment. (But FOLLOW(M) is always just a set of tokens.)</p>\n<p>Informally:</p>\n<ul>\n<li>\n<p>FIRST(M): collects the tokens potentially used first when matching a\nfragment to M.</p>\n</li>\n<li>\n<p>LAST(M): collects the tokens potentially used last when matching a fragment\nto M.</p>\n</li>\n<li>\n<p>FOLLOW(M): the set of tokens allowed to follow immediately after some\nfragment matched by M.</p>\n<p>In other words: t ∈ FOLLOW(M) if and only if there exists (potentially\nempty) token sequences α, β, γ, δ where:</p>\n<ul>\n<li>\n<p>M matches β,</p>\n</li>\n<li>\n<p>t matches γ, and</p>\n</li>\n<li>\n<p>The concatenation α β γ δ is a parseable Rust program.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>We use the shorthand ANYTOKEN to denote the set of all tokens (including simple\nNTs). For example, if any token is legal after a matcher M, then FOLLOW(M) =\nANYTOKEN.</p>\n<p>(To review one's understanding of the above informal descriptions, the reader\nat this point may want to jump ahead to the <a href=\"macro-ambiguity.html#examples-of-first-and-last\">examples of\nFIRST/LAST</a> before reading their formal\ndefinitions.)</p>\n<h3 id=\"first-last\"><a class=\"header\" href=\"#first-last\">FIRST, LAST</a></h3>\n<p>Below are formal inductive definitions for FIRST and LAST.</p>\n<p>\"A ∪ B\" denotes set union, \"A ∩ B\" denotes set intersection, and \"A \\ B\"\ndenotes set difference (i.e. all elements of A that are not present in B).</p>\n<h4 id=\"first\"><a class=\"header\" href=\"#first\">FIRST</a></h4>\n<p>FIRST(M) is defined by case analysis on the sequence M and the structure of its\nfirst token-tree (if any):</p>\n<ul>\n<li>\n<p>if M is the empty sequence, then FIRST(M) = { ε },</p>\n</li>\n<li>\n<p>if M starts with a token t, then FIRST(M) = { t },</p>\n<p>(Note: this covers the case where M starts with a delimited token-tree\nsequence, <code class=\"hljs\">M = OPEN tt ... CLOSE ...</code>, in which case <code class=\"hljs\">t = OPEN</code> and thus\nFIRST(M) = { <code class=\"hljs\">OPEN</code> }.)</p>\n<p>(Note: this critically relies on the property that no simple NT matches the\nempty fragment.)</p>\n</li>\n<li>\n<p>Otherwise, M is a token-tree sequence starting with a complex NT: <code class=\"hljs\">M = $( tt ... ) OP α</code>, or <code class=\"hljs\">M = $( tt ... ) SEP OP α</code>, (where <code class=\"hljs\">α</code> is the (potentially\nempty) sequence of token trees for the rest of the matcher).</p>\n<ul>\n<li>Let SEP_SET(M) = { SEP } if SEP is present and ε ∈ FIRST(<code class=\"hljs\">tt ...</code>);\notherwise SEP_SET(M) = {}.</li>\n</ul>\n</li>\n<li>\n<p>Let ALPHA_SET(M) = FIRST(<code class=\"hljs\">α</code>) if OP = <code class=\"hljs\">*</code> or <code class=\"hljs\">?</code> and ALPHA_SET(M) = {} if\nOP = <code class=\"hljs\">+</code>.</p>\n</li>\n<li>\n<p>FIRST(M) = (FIRST(<code class=\"hljs\">tt ...</code>) \\ {ε}) ∪ SEP_SET(M) ∪ ALPHA_SET(M).</p>\n</li>\n</ul>\n<p>The definition for complex NTs deserves some justification. SEP_SET(M) defines\nthe possibility that the separator could be a valid first token for M, which\nhappens when there is a separator defined and the repeated fragment could be\nempty. ALPHA_SET(M) defines the possibility that the complex NT could be empty,\nmeaning that M's valid first tokens are those of the following token-tree\nsequences <code class=\"hljs\">α</code>. This occurs when either <code class=\"hljs\">*</code> or <code class=\"hljs\">?</code> is used, in which case there\ncould be zero repetitions. In theory, this could also occur if <code class=\"hljs\">+</code> was used with\na potentially-empty repeating fragment, but this is forbidden by the third\ninvariant.</p>\n<p>From there, clearly FIRST(M) can include any token from SEP_SET(M) or\nALPHA_SET(M), and if the complex NT match is nonempty, then any token starting\nFIRST(<code class=\"hljs\">tt ...</code>) could work too. The last piece to consider is ε. SEP_SET(M) and\nFIRST(<code class=\"hljs\">tt ...</code>) \\ {ε} cannot contain ε, but ALPHA_SET(M) could. Hence, this\ndefinition allows M to accept ε if and only if ε ∈ ALPHA_SET(M) does. This is\ncorrect because for M to accept ε in the complex NT case, both the complex NT\nand α must accept it. If OP = <code class=\"hljs\">+</code>, meaning that the complex NT cannot be empty,\nthen by definition ε ∉ ALPHA_SET(M). Otherwise, the complex NT can accept zero\nrepetitions, and then ALPHA_SET(M) = FOLLOW(<code class=\"hljs\">α</code>). So this definition is correct\nwith respect to \\varepsilon as well.</p>\n<h4 id=\"last\"><a class=\"header\" href=\"#last\">LAST</a></h4>\n<p>LAST(M), defined by case analysis on M itself (a sequence of token-trees):</p>\n<ul>\n<li>\n<p>if M is the empty sequence, then LAST(M) = { ε }</p>\n</li>\n<li>\n<p>if M is a singleton token t, then LAST(M) = { t }</p>\n</li>\n<li>\n<p>if M is the singleton complex NT repeating zero or more times, <code class=\"hljs\">M = $( tt ... ) *</code>, or <code class=\"hljs\">M = $( tt ... ) SEP *</code></p>\n<ul>\n<li>\n<p>Let sep_set = { SEP } if SEP present; otherwise sep_set = {}.</p>\n</li>\n<li>\n<p>if ε ∈ LAST(<code class=\"hljs\">tt ...</code>) then LAST(M) = LAST(<code class=\"hljs\">tt ...</code>) ∪ sep_set</p>\n</li>\n<li>\n<p>otherwise, the sequence <code class=\"hljs\">tt ...</code> must be non-empty; LAST(M) = LAST(<code class=\"hljs\">tt ...</code>) ∪ {ε}.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>if M is the singleton complex NT repeating one or more times, <code class=\"hljs\">M = $( tt ... ) +</code>, or <code class=\"hljs\">M = $( tt ... ) SEP +</code></p>\n<ul>\n<li>\n<p>Let sep_set = { SEP } if SEP present; otherwise sep_set = {}.</p>\n</li>\n<li>\n<p>if ε ∈ LAST(<code class=\"hljs\">tt ...</code>) then LAST(M) = LAST(<code class=\"hljs\">tt ...</code>) ∪ sep_set</p>\n</li>\n<li>\n<p>otherwise, the sequence <code class=\"hljs\">tt ...</code> must be non-empty; LAST(M) = LAST(<code class=\"hljs\">tt ...</code>)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>if M is the singleton complex NT repeating zero or one time, <code class=\"hljs\">M = $( tt ...) ?</code>, then LAST(M) = LAST(<code class=\"hljs\">tt ...</code>) ∪ {ε}.</p>\n</li>\n<li>\n<p>if M is a delimited token-tree sequence <code class=\"hljs\">OPEN tt ... CLOSE</code>, then LAST(M) =\n{ <code class=\"hljs\">CLOSE</code> }.</p>\n</li>\n<li>\n<p>if M is a non-empty sequence of token-trees <code class=\"hljs\">tt uu ...</code>,</p>\n<ul>\n<li>\n<p>If ε ∈ LAST(<code class=\"hljs\">uu ...</code>), then LAST(M) = LAST(<code class=\"hljs\">tt</code>) ∪ (LAST(<code class=\"hljs\">uu ...</code>) \\ { ε }).</p>\n</li>\n<li>\n<p>Otherwise, the sequence <code class=\"hljs\">uu ...</code> must be non-empty; then LAST(M) =\nLAST(<code class=\"hljs\">uu ...</code>).</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"examples-of-first-and-last\"><a class=\"header\" href=\"#examples-of-first-and-last\">Examples of FIRST and LAST</a></h3>\n<p>Below are some examples of FIRST and LAST.\n(Note in particular how the special ε element is introduced and\neliminated based on the interaction between the pieces of the input.)</p>\n<p>Our first example is presented in a tree structure to elaborate on how\nthe analysis of the matcher composes. (Some of the simpler subtrees\nhave been elided.)</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">INPUT:  $(  $d:ident   $e:expr   );*    $( $( h )* );*    $( f ; )+   g\n            ~~~~~~~~   ~~~~~~~                ~\n                |         |                   |\nFIRST:   { $d:ident }  { $e:expr }          { h }\n\n\nINPUT:  $(  $d:ident   $e:expr   );*    $( $( h )* );*    $( f ; )+\n            ~~~~~~~~~~~~~~~~~~             ~~~~~~~           ~~~\n                        |                      |               |\nFIRST:          { $d:ident }               { h, ε }         { f }\n\nINPUT:  $(  $d:ident   $e:expr   );*    $( $( h )* );*    $( f ; )+   g\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~    ~~~~~~~~~~~~~~    ~~~~~~~~~   ~\n                        |                       |              |       |\nFIRST:        { $d:ident, ε }            {  h, ε, ;  }      { f }   { g }\n\n\nINPUT:  $(  $d:ident   $e:expr   );*    $( $( h )* );*    $( f ; )+   g\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                                        |\nFIRST:                       { $d:ident, h, ;,  f }\n</code></pre>\n<p>Thus:</p>\n<ul>\n<li>FIRST(<code class=\"hljs\">$($d:ident $e:expr );* $( $(h)* );* $( f ;)+ g</code>) = { <code class=\"hljs\">$d:ident</code>, <code class=\"hljs\">h</code>, <code class=\"hljs\">;</code>, <code class=\"hljs\">f</code> }</li>\n</ul>\n<p>Note however that:</p>\n<ul>\n<li>FIRST(<code class=\"hljs\">$($d:ident $e:expr );* $( $(h)* );* $($( f ;)+ g)*</code>) = { <code class=\"hljs\">$d:ident</code>, <code class=\"hljs\">h</code>, <code class=\"hljs\">;</code>, <code class=\"hljs\">f</code>, ε }</li>\n</ul>\n<p>Here are similar examples but now for LAST.</p>\n<ul>\n<li>LAST(<code class=\"hljs\">$d:ident $e:expr</code>) = { <code class=\"hljs\">$e:expr</code> }</li>\n<li>LAST(<code class=\"hljs\">$( $d:ident $e:expr );*</code>) = { <code class=\"hljs\">$e:expr</code>, ε }</li>\n<li>LAST(<code class=\"hljs\">$( $d:ident $e:expr );* $(h)*</code>) = { <code class=\"hljs\">$e:expr</code>, ε, <code class=\"hljs\">h</code> }</li>\n<li>LAST(<code class=\"hljs\">$( $d:ident $e:expr );* $(h)* $( f ;)+</code>) = { <code class=\"hljs\">;</code> }</li>\n<li>LAST(<code class=\"hljs\">$( $d:ident $e:expr );* $(h)* $( f ;)+ g</code>) = { <code class=\"hljs\">g</code> }</li>\n</ul>\n<h3 id=\"followm\"><a class=\"header\" href=\"#followm\">FOLLOW(M)</a></h3>\n<p>Finally, the definition for FOLLOW(M) is built up as follows. pat, expr, etc.\nrepresent simple nonterminals with the given fragment specifier.</p>\n<ul>\n<li>\n<p>FOLLOW(pat) = {<code class=\"hljs\">=&gt;</code>, <code class=\"hljs\">,</code>, <code class=\"hljs\">=</code>, <code class=\"hljs\">|</code>, <code class=\"hljs\">if</code>, <code class=\"hljs\">in</code>}`.</p>\n</li>\n<li>\n<p>FOLLOW(expr) = FOLLOW(stmt) =  {<code class=\"hljs\">=&gt;</code>, <code class=\"hljs\">,</code>, <code class=\"hljs\">;</code>}`.</p>\n</li>\n<li>\n<p>FOLLOW(ty) = FOLLOW(path) = {<code class=\"hljs\">{</code>, <code class=\"hljs\">[</code>, <code class=\"hljs\">,</code>, <code class=\"hljs\">=&gt;</code>, <code class=\"hljs\">:</code>, <code class=\"hljs\">=</code>, <code class=\"hljs\">&gt;</code>, <code class=\"hljs\">&gt;&gt;</code>, <code class=\"hljs\">;</code>,\n<code class=\"hljs\">|</code>, <code class=\"hljs\">as</code>, <code class=\"hljs\">where</code>, block nonterminals}.</p>\n</li>\n<li>\n<p>FOLLOW(vis) = {<code class=\"hljs\">,</code>l any keyword or identifier except a non-raw <code class=\"hljs\">priv</code>; any\ntoken that can begin a type; ident, ty, and path nonterminals}.</p>\n</li>\n<li>\n<p>FOLLOW(t) = ANYTOKEN for any other simple token, including block, ident,\ntt, item, lifetime, literal and meta simple nonterminals, and all terminals.</p>\n</li>\n<li>\n<p>FOLLOW(M), for any other M, is defined as the intersection, as t ranges over\n(LAST(M) \\ {ε}), of FOLLOW(t).</p>\n</li>\n</ul>\n<p>The tokens that can begin a type are, as of this writing, {<code class=\"hljs\">(</code>, <code class=\"hljs\">[</code>, <code class=\"hljs\">!</code>, <code class=\"hljs\">*</code>,\n<code class=\"hljs\">&amp;</code>, <code class=\"hljs\">&amp;&amp;</code>, <code class=\"hljs\">?</code>, lifetimes, <code class=\"hljs\">&gt;</code>, <code class=\"hljs\">&gt;&gt;</code>, <code class=\"hljs\">::</code>, any non-keyword identifier, <code class=\"hljs\">super</code>,\n<code class=\"hljs\">self</code>, <code class=\"hljs\">Self</code>, <code class=\"hljs\">extern</code>, <code class=\"hljs\">crate</code>, <code class=\"hljs\">$crate</code>, <code class=\"hljs\">_</code>, <code class=\"hljs\">for</code>, <code class=\"hljs\">impl</code>, <code class=\"hljs\">fn</code>, <code class=\"hljs\">unsafe</code>,\n<code class=\"hljs\">typeof</code>, <code class=\"hljs\">dyn</code>}, although this list may not be complete because people won't\nalways remember to update the appendix when new ones are added.</p>\n<p>Examples of FOLLOW for complex M:</p>\n<ul>\n<li>FOLLOW(<code class=\"hljs\">$( $d:ident $e:expr )*</code>) = FOLLOW(<code class=\"hljs\">$e:expr</code>)</li>\n<li>FOLLOW(<code class=\"hljs\">$( $d:ident $e:expr )* $(;)*</code>) = FOLLOW(<code class=\"hljs\">$e:expr</code>) ∩ ANYTOKEN = FOLLOW(<code class=\"hljs\">$e:expr</code>)</li>\n<li>FOLLOW(<code class=\"hljs\">$( $d:ident $e:expr )* $(;)* $( f |)+</code>) = ANYTOKEN</li>\n</ul>\n<h3 id=\"examples-of-valid-and-invalid-matchers\"><a class=\"header\" href=\"#examples-of-valid-and-invalid-matchers\">Examples of valid and invalid matchers</a></h3>\n<p>With the above specification in hand, we can present arguments for\nwhy particular matchers are legal and others are not.</p>\n<ul>\n<li>\n<p><code class=\"hljs\">($ty:ty &lt; foo ,)</code> : illegal, because FIRST(<code class=\"hljs\">&lt; foo ,</code>) = { <code class=\"hljs\">&lt;</code> } ⊈ FOLLOW(<code class=\"hljs\">ty</code>)</p>\n</li>\n<li>\n<p><code class=\"hljs\">($ty:ty , foo &lt;)</code> : legal, because FIRST(<code class=\"hljs\">, foo &lt;</code>) = { <code class=\"hljs\">,</code> }  is ⊆ FOLLOW(<code class=\"hljs\">ty</code>).</p>\n</li>\n<li>\n<p><code class=\"hljs\">($pa:pat $pb:pat $ty:ty ,)</code> : illegal, because FIRST(<code class=\"hljs\">$pb:pat $ty:ty ,</code>) = { <code class=\"hljs\">$pb:pat</code> } ⊈ FOLLOW(<code class=\"hljs\">pat</code>), and also FIRST(<code class=\"hljs\">$ty:ty ,</code>) = { <code class=\"hljs\">$ty:ty</code> } ⊈ FOLLOW(<code class=\"hljs\">pat</code>).</p>\n</li>\n<li>\n<p><code class=\"hljs\">( $($a:tt $b:tt)* ; )</code> : legal, because FIRST(<code class=\"hljs\">$b:tt</code>) = { <code class=\"hljs\">$b:tt</code> } is ⊆ FOLLOW(<code class=\"hljs\">tt</code>) = ANYTOKEN, as is FIRST(<code class=\"hljs\">;</code>) = { <code class=\"hljs\">;</code> }.</p>\n</li>\n<li>\n<p><code class=\"hljs\">( $($t:tt),* , $(t:tt),* )</code> : legal,  (though any attempt to actually use this macro will signal a local ambiguity error during expansion).</p>\n</li>\n<li>\n<p><code class=\"hljs\">($ty:ty $(; not sep)* -)</code> : illegal, because FIRST(<code class=\"hljs\">$(; not sep)* -</code>) = { <code class=\"hljs\">;</code>, <code class=\"hljs\">-</code> } is not in FOLLOW(<code class=\"hljs\">ty</code>).</p>\n</li>\n<li>\n<p><code class=\"hljs\">($($ty:ty)-+)</code> : illegal, because separator <code class=\"hljs\">-</code> is not in FOLLOW(<code class=\"hljs\">ty</code>).</p>\n</li>\n<li>\n<p><code class=\"hljs\">($($e:expr)*)</code> : illegal, because expr NTs are not in FOLLOW(expr NT).</p>\n</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"influences\"><a class=\"header\" href=\"#influences\">Influences</a></h1>\n<p>Rust is not a particularly original language, with design elements coming from\na wide range of sources. Some of these are listed below (including elements\nthat have since been removed):</p>\n<ul>\n<li>SML, OCaml: algebraic data types, pattern matching, type inference,\nsemicolon statement separation</li>\n<li>C++: references, RAII, smart pointers, move semantics, monomorphization,\nmemory model</li>\n<li>ML Kit, Cyclone: region based memory management</li>\n<li>Haskell (GHC): typeclasses, type families</li>\n<li>Newsqueak, Alef, Limbo: channels, concurrency</li>\n<li>Erlang: message passing, thread failure, <strike>linked thread failure</strike>,\n<strike>lightweight concurrency</strike></li>\n<li>Swift: optional bindings</li>\n<li>Scheme: hygienic macros</li>\n<li>C#: attributes</li>\n<li>Ruby: closure syntax, <strike>block syntax</strike></li>\n<li>NIL, Hermes: <strike>typestate</strike></li>\n<li><a href=\"http://www.unicode.org/reports/tr31/\">Unicode Annex #31</a>: identifier and\npattern syntax</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"glossary\"><a class=\"header\" href=\"#glossary\">Glossary</a></h1>\n<h3 id=\"abstract-syntax-tree\"><a class=\"header\" href=\"#abstract-syntax-tree\">Abstract syntax tree</a></h3>\n<p>An ‘abstract syntax tree’, or ‘AST’, is an intermediate representation of\nthe structure of the program when the compiler is compiling it.</p>\n<h3 id=\"alignment\"><a class=\"header\" href=\"#alignment\">Alignment</a></h3>\n<p>The alignment of a value specifies what addresses values are preferred to\nstart at. Always a power of two. References to a value must be aligned.\n<a href=\"type-layout.html#size-and-alignment\">More</a>.</p>\n<h3 id=\"arity\"><a class=\"header\" href=\"#arity\">Arity</a></h3>\n<p>Arity refers to the number of arguments a function or operator takes.\nFor some examples, <code class=\"hljs\">f(2, 3)</code> and <code class=\"hljs\">g(4, 6)</code> have arity 2, while <code class=\"hljs\">h(8, 2, 6)</code>\nhas arity 3. The <code class=\"hljs\">!</code> operator has arity 1.</p>\n<h3 id=\"array\"><a class=\"header\" href=\"#array\">Array</a></h3>\n<p>An array, sometimes also called a fixed-size array or an inline array, is a value\ndescribing a collection of elements, each selected by an index that can be computed\nat run time by the program. It occupies a contiguous region of memory.</p>\n<h3 id=\"associated-item\"><a class=\"header\" href=\"#associated-item\">Associated item</a></h3>\n<p>An associated item is an item that is associated with another item. Associated\nitems are defined in <a href=\"items/implementations.html\">implementations</a> and declared in <a href=\"items/traits.html\">traits</a>. Only\nfunctions, constants, and type aliases can be associated. Contrast to a <a href=\"glossary.html#free-item\">free\nitem</a>.</p>\n<h3 id=\"blanket-implementation\"><a class=\"header\" href=\"#blanket-implementation\">Blanket implementation</a></h3>\n<p>Any implementation where a type appears <a href=\"glossary.html#uncovered-type\">uncovered</a>. <code class=\"hljs\">impl&lt;T&gt; Foo for T</code>, <code class=\"hljs\">impl&lt;T&gt; Bar&lt;T&gt; for T</code>, <code class=\"hljs\">impl&lt;T&gt; Bar&lt;Vec&lt;T&gt;&gt; for T</code>, and <code class=\"hljs\">impl&lt;T&gt; Bar&lt;T&gt; for Vec&lt;T&gt;</code> are considered blanket impls. However, <code class=\"hljs\">impl&lt;T&gt; Bar&lt;Vec&lt;T&gt;&gt; for Vec&lt;T&gt;</code> is not a blanket impl, as all instances of <code class=\"hljs\">T</code> which appear in this <code class=\"hljs\">impl</code>\nare covered by <code class=\"hljs\">Vec</code>.</p>\n<h3 id=\"bound\"><a class=\"header\" href=\"#bound\">Bound</a></h3>\n<p>Bounds are constraints on a type or trait. For example, if a bound\nis placed on the argument a function takes, types passed to that function\nmust abide by that constraint.</p>\n<h3 id=\"combinator\"><a class=\"header\" href=\"#combinator\">Combinator</a></h3>\n<p>Combinators are higher-order functions that apply only functions and\nearlier defined combinators to provide a result from its arguments.\nThey can be used to manage control flow in a modular fashion.</p>\n<h3 id=\"crate-2\"><a class=\"header\" href=\"#crate-2\">Crate</a></h3>\n<p>A crate is the unit of compilation and linking. There are different <a href=\"linkage.html\">types of\ncrates</a>, such as libraries or executables. Crates may link and refer to other\nlibrary crates, called external crates. A crate has a self-contained tree of\n<a href=\"items/modules.html\">modules</a>, starting from an unnamed root module called the crate root. <a href=\"items.html\">Items</a>\nmay be made visible to other crates by marking them as public in the crate\nroot, including through <a href=\"paths.html\">paths</a> of public modules.\n<a href=\"crates-and-source-files.html\">More</a>.</p>\n<h3 id=\"dispatch\"><a class=\"header\" href=\"#dispatch\">Dispatch</a></h3>\n<p>Dispatch is the mechanism to determine which specific version of code is actually\nrun when it involves polymorphism. Two major forms of dispatch are static dispatch and\ndynamic dispatch. While Rust favors static dispatch, it also supports dynamic dispatch\nthrough a mechanism called ‘trait objects’.</p>\n<h3 id=\"dynamically-sized-type\"><a class=\"header\" href=\"#dynamically-sized-type\">Dynamically sized type</a></h3>\n<p>A dynamically sized type (DST) is a type without a statically known size or alignment.</p>\n<h3 id=\"entity\"><a class=\"header\" href=\"#entity\">Entity</a></h3>\n<p>An <a href=\"names.html\"><em>entity</em></a> is a language construct that can be referred to in some way\nwithin the source program, usually via a <a href=\"paths.html\">path</a>. Entities include\n<a href=\"types.html\">types</a>, <a href=\"items.html\">items</a>, <a href=\"items/generics.html\">generic parameters</a>, <a href=\"patterns.html\">variable bindings</a>, <a href=\"tokens.html#lifetimes-and-loop-labels\">loop labels</a>,\n<a href=\"tokens.html#lifetimes-and-loop-labels\">lifetimes</a>, <a href=\"expressions/field-expr.html\">fields</a>, <a href=\"attributes.html\">attributes</a>, and <a href=\"attributes/diagnostics.html#lint-check-attributes\">lints</a>.</p>\n<h3 id=\"expression\"><a class=\"header\" href=\"#expression\">Expression</a></h3>\n<p>An expression is a combination of values, constants, variables, operators\nand functions that evaluate to a single value, with or without side-effects.</p>\n<p>For example, <code class=\"hljs\">2 + (3 * 4)</code> is an expression that returns the value 14.</p>\n<h3 id=\"free-item\"><a class=\"header\" href=\"#free-item\">Free item</a></h3>\n<p>An <a href=\"items.html\">item</a> that is not a member of an <a href=\"items/implementations.html\">implementation</a>, such as a <em>free\nfunction</em> or a <em>free const</em>. Contrast to an <a href=\"glossary.html#associated-item\">associated item</a>.</p>\n<h3 id=\"fundamental-traits\"><a class=\"header\" href=\"#fundamental-traits\">Fundamental traits</a></h3>\n<p>A fundamental trait is one where adding an impl of it for an existing type is a breaking change.\nThe <code class=\"hljs\">Fn</code> traits and <code class=\"hljs\">Sized</code> are fundamental.</p>\n<h3 id=\"fundamental-type-constructors\"><a class=\"header\" href=\"#fundamental-type-constructors\">Fundamental type constructors</a></h3>\n<p>A fundamental type constructor is a type where implementing a <a href=\"glossary.html#blanket-implementation\">blanket implementation</a> over it\nis a breaking change. <code class=\"hljs\">&amp;</code>, <code class=\"hljs\">&amp;mut</code>, <code class=\"hljs\">Box</code>, and <code class=\"hljs\">Pin</code>  are fundamental.</p>\n<p>Any time a type <code class=\"hljs\">T</code> is considered <a href=\"glossary.html#local-type\">local</a>, <code class=\"hljs\">&amp;T</code>, <code class=\"hljs\">&amp;mut T</code>, <code class=\"hljs\">Box&lt;T&gt;</code>, and <code class=\"hljs\">Pin&lt;T&gt;</code>\nare also considered local. Fundamental type constructors cannot <a href=\"glossary.html#uncovered-type\">cover</a> other types.\nAny time the term \"covered type\" is used,\nthe <code class=\"hljs\">T</code> in <code class=\"hljs\">&amp;T</code>, <code class=\"hljs\">&amp;mut T</code>, <code class=\"hljs\">Box&lt;T&gt;</code>, and <code class=\"hljs\">Pin&lt;T&gt;</code> is not considered covered.</p>\n<h3 id=\"inhabited\"><a class=\"header\" href=\"#inhabited\">Inhabited</a></h3>\n<p>A type is inhabited if it has constructors and therefore can be instantiated. An inhabited type is\nnot \"empty\" in the sense that there can be values of the type. Opposite of\n<a href=\"glossary.html#uninhabited\">Uninhabited</a>.</p>\n<h3 id=\"inherent-implementation\"><a class=\"header\" href=\"#inherent-implementation\">Inherent implementation</a></h3>\n<p>An <a href=\"items/implementations.html\">implementation</a> that applies to a nominal type, not to a trait-type pair.\n<a href=\"items/implementations.html#inherent-implementations\">More</a>.</p>\n<h3 id=\"inherent-method\"><a class=\"header\" href=\"#inherent-method\">Inherent method</a></h3>\n<p>A <a href=\"items/associated-items.html#methods\">method</a> defined in an <a href=\"items/implementations.html#inherent-implementations\">inherent implementation</a>, not in a trait\nimplementation.</p>\n<h3 id=\"initialized\"><a class=\"header\" href=\"#initialized\">Initialized</a></h3>\n<p>A variable is initialized if it has been assigned a value and hasn't since been\nmoved from. All other memory locations are assumed to be uninitialized. Only\nunsafe Rust can create a memory location without initializing it.</p>\n<h3 id=\"local-trait\"><a class=\"header\" href=\"#local-trait\">Local trait</a></h3>\n<p>A <code class=\"hljs\">trait</code> which was defined in the current crate. A trait definition is local\nor not independent of applied type arguments. Given <code class=\"hljs\">trait Foo&lt;T, U&gt;</code>,\n<code class=\"hljs\">Foo</code> is always local, regardless of the types substituted for <code class=\"hljs\">T</code> and <code class=\"hljs\">U</code>.</p>\n<h3 id=\"local-type\"><a class=\"header\" href=\"#local-type\">Local type</a></h3>\n<p>A <code class=\"hljs\">struct</code>, <code class=\"hljs\">enum</code>, or <code class=\"hljs\">union</code> which was defined in the current crate.\nThis is not affected by applied type arguments. <code class=\"hljs\">struct Foo</code> is considered local, but\n<code class=\"hljs\">Vec&lt;Foo&gt;</code> is not. <code class=\"hljs\">LocalType&lt;ForeignType&gt;</code> is local. Type aliases do not\naffect locality.</p>\n<h3 id=\"module\"><a class=\"header\" href=\"#module\">Module</a></h3>\n<p>A module is a container for zero or more <a href=\"items.html\">items</a>. Modules are organized in a\ntree, starting from an unnamed module at the root called the crate root or the\nroot module. <a href=\"paths.html\">Paths</a> may be used to refer to items from other modules, which\nmay be restricted by <a href=\"visibility-and-privacy.html\">visibility rules</a>.\n<a href=\"items/modules.html\">More</a></p>\n<h3 id=\"name\"><a class=\"header\" href=\"#name\">Name</a></h3>\n<p>A <a href=\"names.html\"><em>name</em></a> is an <a href=\"identifiers.html\">identifier</a> or <a href=\"tokens.html#lifetimes-and-loop-labels\">lifetime or loop label</a> that refers to an\n<a href=\"glossary.html#entity\">entity</a>. A <em>name binding</em> is when an entity declaration introduces\nan identifier or label associated with that entity. <a href=\"paths.html\">Paths</a>,\nidentifiers, and labels are used to refer to an entity.</p>\n<h3 id=\"name-resolution-1\"><a class=\"header\" href=\"#name-resolution-1\">Name resolution</a></h3>\n<p><a href=\"names/name-resolution.html\"><em>Name resolution</em></a> is the compile-time process of tying <a href=\"paths.html\">paths</a>,\n<a href=\"identifiers.html\">identifiers</a>, and <a href=\"tokens.html#lifetimes-and-loop-labels\">labels</a> to <a href=\"glossary.html#entity\">entity</a> declarations.</p>\n<h3 id=\"namespace\"><a class=\"header\" href=\"#namespace\">Namespace</a></h3>\n<p>A <em>namespace</em> is a logical grouping of declared <a href=\"glossary.html#name\">names</a> based on the\nkind of <a href=\"glossary.html#entity\">entity</a> the name refers to. Namespaces allow the occurrence\nof a name in one namespace to not conflict with the same name in another\nnamespace.</p>\n<p>Within a namespace, names are organized in a hierarchy, where each level of\nthe hierarchy has its own collection of named entities.</p>\n<h3 id=\"nominal-types\"><a class=\"header\" href=\"#nominal-types\">Nominal types</a></h3>\n<p>Types that can be referred to by a path directly. Specifically <a href=\"items/enumerations.html\">enums</a>,\n<a href=\"items/structs.html\">structs</a>, <a href=\"items/unions.html\">unions</a>, and <a href=\"types/trait-object.html\">trait objects</a>.</p>\n<h3 id=\"object-safe-traits\"><a class=\"header\" href=\"#object-safe-traits\">Object safe traits</a></h3>\n<p><a href=\"items/traits.html\">Traits</a> that can be used as <a href=\"types/trait-object.html\">trait objects</a>. Only traits that follow specific\n<a href=\"items/traits.html#object-safety\">rules</a> are object safe.</p>\n<h3 id=\"path\"><a class=\"header\" href=\"#path\">Path</a></h3>\n<p>A <a href=\"paths.html\"><em>path</em></a> is a sequence of one or more path segments used to refer to an\n<a href=\"glossary.html#entity\">entity</a> in the current scope or other levels of a\n<a href=\"glossary.html#namespace\">namespace</a> hierarchy.</p>\n<h3 id=\"prelude\"><a class=\"header\" href=\"#prelude\">Prelude</a></h3>\n<p>Prelude, or The Rust Prelude, is a small collection of items - mostly traits - that are\nimported into every module of every crate. The traits in the prelude are pervasive.</p>\n<h3 id=\"scope-1\"><a class=\"header\" href=\"#scope-1\">Scope</a></h3>\n<p>A <a href=\"names/scopes.html\"><em>scope</em></a> is the region of source text where a named <a href=\"glossary.html#entity\">entity</a> may\nbe referenced with that name.</p>\n<h3 id=\"scrutinee\"><a class=\"header\" href=\"#scrutinee\">Scrutinee</a></h3>\n<p>A scrutinee is the expression that is matched on in <code class=\"hljs\">match</code> expressions and\nsimilar pattern matching constructs. For example, in <code class=\"hljs\">match x { A =&gt; 1, B =&gt; 2 }</code>,\nthe expression <code class=\"hljs\">x</code> is the scrutinee.</p>\n<h3 id=\"size\"><a class=\"header\" href=\"#size\">Size</a></h3>\n<p>The size of a value has two definitions.</p>\n<p>The first is that it is how much memory must be allocated to store that value.</p>\n<p>The second is that it is the offset in bytes between successive elements in an\narray with that item type.</p>\n<p>It is a multiple of the alignment, including zero. The size can change\ndepending on compiler version (as new optimizations are made) and target\nplatform (similar to how <code class=\"hljs\">usize</code> varies per-platform).</p>\n<p><a href=\"type-layout.html#size-and-alignment\">More</a>.</p>\n<h3 id=\"slice\"><a class=\"header\" href=\"#slice\">Slice</a></h3>\n<p>A slice is dynamically-sized view into a contiguous sequence, written as <code class=\"hljs\">[T]</code>.</p>\n<p>It is often seen in its borrowed forms, either mutable or shared. The shared\nslice type is <code class=\"hljs\">&amp;[T]</code>, while the mutable slice type is <code class=\"hljs\">&amp;mut [T]</code>, where <code class=\"hljs\">T</code> represents\nthe element type.</p>\n<h3 id=\"statement\"><a class=\"header\" href=\"#statement\">Statement</a></h3>\n<p>A statement is the smallest standalone element of a programming language\nthat commands a computer to perform an action.</p>\n<h3 id=\"string-literal\"><a class=\"header\" href=\"#string-literal\">String literal</a></h3>\n<p>A string literal is a string stored directly in the final binary, and so will be\nvalid for the <code class=\"hljs\">'static</code> duration.</p>\n<p>Its type is <code class=\"hljs\">'static</code> duration borrowed string slice, <code class=\"hljs\">&amp;'static str</code>.</p>\n<h3 id=\"string-slice\"><a class=\"header\" href=\"#string-slice\">String slice</a></h3>\n<p>A string slice is the most primitive string type in Rust, written as <code class=\"hljs\">str</code>. It is\noften seen in its borrowed forms, either mutable or shared. The shared\nstring slice type is <code class=\"hljs\">&amp;str</code>, while the mutable string slice type is <code class=\"hljs\">&amp;mut str</code>.</p>\n<p>Strings slices are always valid UTF-8.</p>\n<h3 id=\"trait\"><a class=\"header\" href=\"#trait\">Trait</a></h3>\n<p>A trait is a language item that is used for describing the functionalities a type must provide.\nIt allows a type to make certain promises about its behavior.</p>\n<p>Generic functions and generic structs can use traits to constrain, or bound, the types they accept.</p>\n<h3 id=\"turbofish\"><a class=\"header\" href=\"#turbofish\">Turbofish</a></h3>\n<p>Paths with generic parameters in expressions must prefix the opening brackets with a <code class=\"hljs\">::</code>.\nCombined with the angular brackets for generics, this looks like a fish <code class=\"hljs\">::&lt;&gt;</code>.\nAs such, this syntax is colloquially referred to as turbofish syntax.</p>\n<p>Examples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> ok_num = Ok::&lt;_, ()&gt;(<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-keyword\">let</span> vec = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].iter().map(|n| n * <span class=\"hljs-number\">2</span>).collect::&lt;<span class=\"hljs-built_in\">Vec</span>&lt;_&gt;&gt;();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This <code class=\"hljs\">::</code> prefix is required to disambiguate generic paths with multiple comparisons in a comma-separate list.\nSee <a href=\"https://github.com/rust-lang/rust/blob/1.58.0/src/test/ui/parser/bastion-of-the-turbofish.rs\">the bastion of the turbofish</a> for an example where not having the prefix would be ambiguous.</p>\n<h3 id=\"uncovered-type\"><a class=\"header\" href=\"#uncovered-type\">Uncovered type</a></h3>\n<p>A type which does not appear as an argument to another type. For example,\n<code class=\"hljs\">T</code> is uncovered, but the <code class=\"hljs\">T</code> in <code class=\"hljs\">Vec&lt;T&gt;</code> is covered. This is only relevant for\ntype arguments.</p>\n<h3 id=\"undefined-behavior\"><a class=\"header\" href=\"#undefined-behavior\">Undefined behavior</a></h3>\n<p>Compile-time or run-time behavior that is not specified. This may result in,\nbut is not limited to: process termination or corruption; improper, incorrect,\nor unintended computation; or platform-specific results.\n<a href=\"behavior-considered-undefined.html\">More</a>.</p>\n<h3 id=\"uninhabited\"><a class=\"header\" href=\"#uninhabited\">Uninhabited</a></h3>\n<p>A type is uninhabited if it has no constructors and therefore can never be instantiated. An\nuninhabited type is \"empty\" in the sense that there are no values of the type. The canonical\nexample of an uninhabited type is the <a href=\"types/never.html\">never type</a> <code class=\"hljs\">!</code>, or an enum with no variants\n<code class=\"hljs\">enum Never { }</code>. Opposite of <a href=\"glossary.html#inhabited\">Inhabited</a>.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n        <script>\n        window.addEventListener('load', function() {\n            window.setTimeout(window.print, 100);\n        });\n        </script>\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:13:55.946Z"
}