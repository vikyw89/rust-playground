{
	"title": "iterator.rs - source",
	"url": "https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#80",
	"markdown": "# iterator.rs - source\n\n```\nuse crate::array;\nuse crate::cmp::{self, Ordering};\nuse crate::num::NonZero;\nuse crate::ops::{ChangeOutputType, ControlFlow, FromResidual, Residual, Try};\n\nuse super::super::try_process;\nuse super::super::ByRefSized;\nuse super::super::TrustedRandomAccessNoCoerce;\nuse super::super::{ArrayChunks, Chain, Cloned, Copied, Cycle, Enumerate, Filter, FilterMap, Fuse};\nuse super::super::{FlatMap, Flatten};\nuse super::super::{\n    Inspect, Map, MapWhile, MapWindows, Peekable, Rev, Scan, Skip, SkipWhile, StepBy, Take,\n    TakeWhile,\n};\nuse super::super::{Intersperse, IntersperseWith, Product, Sum, Zip};\n\nfn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n\n/// A trait for dealing with iterators.\n///\n/// This is the main iterator trait. For more about the concept of iterators\n/// generally, please see the [module-level documentation]. In particular, you\n/// may want to know how to [implement `Iterator`][impl].\n///\n/// [module-level documentation]: crate::iter\n/// [impl]: crate::iter#implementing-iterator\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_on_unimplemented(\n    on(\n        _Self = \"core::ops::range::RangeTo<Idx>\",\n        note = \"you might have meant to use a bounded `Range`\"\n    ),\n    on(\n        _Self = \"core::ops::range::RangeToInclusive<Idx>\",\n        note = \"you might have meant to use a bounded `RangeInclusive`\"\n    ),\n    label = \"`{Self}` is not an iterator\",\n    message = \"`{Self}` is not an iterator\"\n)]\n#[doc(notable_trait)]\n#[lang = \"iterator\"]\n#[rustc_diagnostic_item = \"Iterator\"]\n#[must_use = \"iterators are lazy and do nothing unless consumed\"]\npub trait Iterator {\n    /// The type of the elements being iterated over.\n    #[rustc_diagnostic_item = \"IteratorItem\"]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    type Item;\n\n    /// Advances the iterator and returns the next value.\n    ///\n    /// Returns [`None`] when iteration is finished. Individual iterator\n    /// implementations may choose to resume iteration, and so calling `next()`\n    /// again may or may not eventually start returning [`Some(Item)`] again at some\n    /// point.\n    ///\n    /// [`Some(Item)`]: Some\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter();\n    ///\n    /// // A call to next() returns the next value...\n    /// assert_eq!(Some(&1), iter.next());\n    /// assert_eq!(Some(&2), iter.next());\n    /// assert_eq!(Some(&3), iter.next());\n    ///\n    /// // ... and then None once it's over.\n    /// assert_eq!(None, iter.next());\n    ///\n    /// // More calls may or may not return `None`. Here, they always will.\n    /// assert_eq!(None, iter.next());\n    /// assert_eq!(None, iter.next());\n    /// ```\n    #[lang = \"next\"]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn next(&mut self) -> Option<Self::Item>;\n\n    /// Advances the iterator and returns an array containing the next `N` values.\n    ///\n    /// If there are not enough elements to fill the array then `Err` is returned\n    /// containing an iterator over the remaining elements.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// #![feature(iter_next_chunk)]\n    ///\n    /// let mut iter = \"lorem\".chars();\n    ///\n    /// assert_eq!(iter.next_chunk().unwrap(), ['l', 'o']);              // N is inferred as 2\n    /// assert_eq!(iter.next_chunk().unwrap(), ['r', 'e', 'm']);         // N is inferred as 3\n    /// assert_eq!(iter.next_chunk::<4>().unwrap_err().as_slice(), &[]); // N is explicitly 4\n    /// ```\n    ///\n    /// Split a string and get the first three items.\n    ///\n    /// ```\n    /// #![feature(iter_next_chunk)]\n    ///\n    /// let quote = \"not all those who wander are lost\";\n    /// let [first, second, third] = quote.split_whitespace().next_chunk().unwrap();\n    /// assert_eq!(first, \"not\");\n    /// assert_eq!(second, \"all\");\n    /// assert_eq!(third, \"those\");\n    /// ```\n    #[inline]\n    #[unstable(feature = \"iter_next_chunk\", reason = \"recently added\", issue = \"98326\")]\n    #[rustc_do_not_const_check]\n    fn next_chunk<const N: usize>(\n        &mut self,\n    ) -> Result<[Self::Item; N], array::IntoIter<Self::Item, N>>\n    where\n        Self: Sized,\n    {\n        array::iter_next_chunk(self)\n    }\n\n    /// Returns the bounds on the remaining length of the iterator.\n    ///\n    /// Specifically, `size_hint()` returns a tuple where the first element\n    /// is the lower bound, and the second element is the upper bound.\n    ///\n    /// The second half of the tuple that is returned is an <code>[Option]<[usize]></code>.\n    /// A [`None`] here means that either there is no known upper bound, or the\n    /// upper bound is larger than [`usize`].\n    ///\n    /// # Implementation notes\n    ///\n    /// It is not enforced that an iterator implementation yields the declared\n    /// number of elements. A buggy iterator may yield less than the lower bound\n    /// or more than the upper bound of elements.\n    ///\n    /// `size_hint()` is primarily intended to be used for optimizations such as\n    /// reserving space for the elements of the iterator, but must not be\n    /// trusted to e.g., omit bounds checks in unsafe code. An incorrect\n    /// implementation of `size_hint()` should not lead to memory safety\n    /// violations.\n    ///\n    /// That said, the implementation should provide a correct estimation,\n    /// because otherwise it would be a violation of the trait's protocol.\n    ///\n    /// The default implementation returns <code>(0, [None])</code> which is correct for any\n    /// iterator.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    /// let mut iter = a.iter();\n    ///\n    /// assert_eq!((3, Some(3)), iter.size_hint());\n    /// let _ = iter.next();\n    /// assert_eq!((2, Some(2)), iter.size_hint());\n    /// ```\n    ///\n    /// A more complex example:\n    ///\n    /// ```\n    /// // The even numbers in the range of zero to nine.\n    /// let iter = (0..10).filter(|x| x % 2 == 0);\n    ///\n    /// // We might iterate from zero to ten times. Knowing that it's five\n    /// // exactly wouldn't be possible without executing filter().\n    /// assert_eq!((0, Some(10)), iter.size_hint());\n    ///\n    /// // Let's add five more numbers with chain()\n    /// let iter = (0..10).filter(|x| x % 2 == 0).chain(15..20);\n    ///\n    /// // now both bounds are increased by five\n    /// assert_eq!((5, Some(15)), iter.size_hint());\n    /// ```\n    ///\n    /// Returning `None` for an upper bound:\n    ///\n    /// ```\n    /// // an infinite iterator has no upper bound\n    /// // and the maximum possible lower bound\n    /// let iter = 0..;\n    ///\n    /// assert_eq!((usize::MAX, None), iter.size_hint());\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        (0, None)\n    }\n\n    /// Consumes the iterator, counting the number of iterations and returning it.\n    ///\n    /// This method will call [`next`] repeatedly until [`None`] is encountered,\n    /// returning the number of times it saw [`Some`]. Note that [`next`] has to be\n    /// called at least once even if the iterator does not have any elements.\n    ///\n    /// [`next`]: Iterator::next\n    ///\n    /// # Overflow Behavior\n    ///\n    /// The method does no guarding against overflows, so counting elements of\n    /// an iterator with more than [`usize::MAX`] elements either produces the\n    /// wrong result or panics. If debug assertions are enabled, a panic is\n    /// guaranteed.\n    ///\n    /// # Panics\n    ///\n    /// This function might panic if the iterator has more than [`usize::MAX`]\n    /// elements.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    /// assert_eq!(a.iter().count(), 3);\n    ///\n    /// let a = [1, 2, 3, 4, 5];\n    /// assert_eq!(a.iter().count(), 5);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn count(self) -> usize\n    where\n        Self: Sized,\n    {\n        self.fold(\n            0,\n            #[rustc_inherit_overflow_checks]\n            |count, _| count + 1,\n        )\n    }\n\n    /// Consumes the iterator, returning the last element.\n    ///\n    /// This method will evaluate the iterator until it returns [`None`]. While\n    /// doing so, it keeps track of the current element. After [`None`] is\n    /// returned, `last()` will then return the last element it saw.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    /// assert_eq!(a.iter().last(), Some(&3));\n    ///\n    /// let a = [1, 2, 3, 4, 5];\n    /// assert_eq!(a.iter().last(), Some(&5));\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn last(self) -> Option<Self::Item>\n    where\n        Self: Sized,\n    {\n        #[inline]\n        fn some<T>(_: Option<T>, x: T) -> Option<T> {\n            Some(x)\n        }\n\n        self.fold(None, some)\n    }\n\n    /// Advances the iterator by `n` elements.\n    ///\n    /// This method will eagerly skip `n` elements by calling [`next`] up to `n`\n    /// times until [`None`] is encountered.\n    ///\n    /// `advance_by(n)` will return `Ok(())` if the iterator successfully advances by\n    /// `n` elements, or a `Err(NonZero<usize>)` with value `k` if [`None`] is encountered,\n    /// where `k` is remaining number of steps that could not be advanced because the iterator ran out.\n    /// If `self` is empty and `n` is non-zero, then this returns `Err(n)`.\n    /// Otherwise, `k` is always less than `n`.\n    ///\n    /// Calling `advance_by(0)` can do meaningful work, for example [`Flatten`]\n    /// can advance its outer iterator until it finds an inner iterator that is not empty, which\n    /// then often allows it to return a more accurate `size_hint()` than in its initial state.\n    ///\n    /// [`Flatten`]: crate::iter::Flatten\n    /// [`next`]: Iterator::next\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(iter_advance_by)]\n    ///\n    /// use std::num::NonZero;\n    ///\n    /// let a = [1, 2, 3, 4];\n    /// let mut iter = a.iter();\n    ///\n    /// assert_eq!(iter.advance_by(2), Ok(()));\n    /// assert_eq!(iter.next(), Some(&3));\n    /// assert_eq!(iter.advance_by(0), Ok(()));\n    /// assert_eq!(iter.advance_by(100), Err(NonZero::new(99).unwrap())); // only `&4` was skipped\n    /// ```\n    #[inline]\n    #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n    #[rustc_do_not_const_check]\n    fn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n        for i in 0..n {\n            if self.next().is_none() {\n                // SAFETY: `i` is always less than `n`.\n                return Err(unsafe { NonZero::new_unchecked(n - i) });\n            }\n        }\n        Ok(())\n    }\n\n    /// Returns the `n`th element of the iterator.\n    ///\n    /// Like most indexing operations, the count starts from zero, so `nth(0)`\n    /// returns the first value, `nth(1)` the second, and so on.\n    ///\n    /// Note that all preceding elements, as well as the returned element, will be\n    /// consumed from the iterator. That means that the preceding elements will be\n    /// discarded, and also that calling `nth(0)` multiple times on the same iterator\n    /// will return different elements.\n    ///\n    /// `nth()` will return [`None`] if `n` is greater than or equal to the length of the\n    /// iterator.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    /// assert_eq!(a.iter().nth(1), Some(&2));\n    /// ```\n    ///\n    /// Calling `nth()` multiple times doesn't rewind the iterator:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter();\n    ///\n    /// assert_eq!(iter.nth(1), Some(&2));\n    /// assert_eq!(iter.nth(1), None);\n    /// ```\n    ///\n    /// Returning `None` if there are less than `n + 1` elements:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    /// assert_eq!(a.iter().nth(10), None);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n        self.advance_by(n).ok()?;\n        self.next()\n    }\n\n    /// Creates an iterator starting at the same point, but stepping by\n    /// the given amount at each iteration.\n    ///\n    /// Note 1: The first element of the iterator will always be returned,\n    /// regardless of the step given.\n    ///\n    /// Note 2: The time at which ignored elements are pulled is not fixed.\n    /// `StepBy` behaves like the sequence `self.next()`, `self.nth(step-1)`,\n    /// `self.nth(step-1)`, …, but is also free to behave like the sequence\n    /// `advance_n_and_return_first(&mut self, step)`,\n    /// `advance_n_and_return_first(&mut self, step)`, …\n    /// Which way is used may change for some iterators for performance reasons.\n    /// The second way will advance the iterator earlier and may consume more items.\n    ///\n    /// `advance_n_and_return_first` is the equivalent of:\n    /// ```\n    /// fn advance_n_and_return_first<I>(iter: &mut I, n: usize) -> Option<I::Item>\n    /// where\n    ///     I: Iterator,\n    /// {\n    ///     let next = iter.next();\n    ///     if n > 1 {\n    ///         iter.nth(n - 2);\n    ///     }\n    ///     next\n    /// }\n    /// ```\n    ///\n    /// # Panics\n    ///\n    /// The method will panic if the given step is `0`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [0, 1, 2, 3, 4, 5];\n    /// let mut iter = a.iter().step_by(2);\n    ///\n    /// assert_eq!(iter.next(), Some(&0));\n    /// assert_eq!(iter.next(), Some(&2));\n    /// assert_eq!(iter.next(), Some(&4));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    #[inline]\n    #[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]\n    #[rustc_do_not_const_check]\n    fn step_by(self, step: usize) -> StepBy<Self>\n    where\n        Self: Sized,\n    {\n        StepBy::new(self, step)\n    }\n\n    /// Takes two iterators and creates a new iterator over both in sequence.\n    ///\n    /// `chain()` will return a new iterator which will first iterate over\n    /// values from the first iterator and then over values from the second\n    /// iterator.\n    ///\n    /// In other words, it links two iterators together, in a chain. 🔗\n    ///\n    /// [`once`] is commonly used to adapt a single value into a chain of\n    /// other kinds of iteration.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a1 = [1, 2, 3];\n    /// let a2 = [4, 5, 6];\n    ///\n    /// let mut iter = a1.iter().chain(a2.iter());\n    ///\n    /// assert_eq!(iter.next(), Some(&1));\n    /// assert_eq!(iter.next(), Some(&2));\n    /// assert_eq!(iter.next(), Some(&3));\n    /// assert_eq!(iter.next(), Some(&4));\n    /// assert_eq!(iter.next(), Some(&5));\n    /// assert_eq!(iter.next(), Some(&6));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Since the argument to `chain()` uses [`IntoIterator`], we can pass\n    /// anything that can be converted into an [`Iterator`], not just an\n    /// [`Iterator`] itself. For example, slices (`&[T]`) implement\n    /// [`IntoIterator`], and so can be passed to `chain()` directly:\n    ///\n    /// ```\n    /// let s1 = &[1, 2, 3];\n    /// let s2 = &[4, 5, 6];\n    ///\n    /// let mut iter = s1.iter().chain(s2);\n    ///\n    /// assert_eq!(iter.next(), Some(&1));\n    /// assert_eq!(iter.next(), Some(&2));\n    /// assert_eq!(iter.next(), Some(&3));\n    /// assert_eq!(iter.next(), Some(&4));\n    /// assert_eq!(iter.next(), Some(&5));\n    /// assert_eq!(iter.next(), Some(&6));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// If you work with Windows API, you may wish to convert [`OsStr`] to `Vec<u16>`:\n    ///\n    /// ```\n    /// #[cfg(windows)]\n    /// fn os_str_to_utf16(s: &std::ffi::OsStr) -> Vec<u16> {\n    ///     use std::os::windows::ffi::OsStrExt;\n    ///     s.encode_wide().chain(std::iter::once(0)).collect()\n    /// }\n    /// ```\n    ///\n    /// [`once`]: crate::iter::once\n    /// [`OsStr`]: ../../std/ffi/struct.OsStr.html\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter>\n    where\n        Self: Sized,\n        U: IntoIterator<Item = Self::Item>,\n    {\n        Chain::new(self, other.into_iter())\n    }\n\n    /// 'Zips up' two iterators into a single iterator of pairs.\n    ///\n    /// `zip()` returns a new iterator that will iterate over two other\n    /// iterators, returning a tuple where the first element comes from the\n    /// first iterator, and the second element comes from the second iterator.\n    ///\n    /// In other words, it zips two iterators together, into a single one.\n    ///\n    /// If either iterator returns [`None`], [`next`] from the zipped iterator\n    /// will return [`None`].\n    /// If the zipped iterator has no more elements to return then each further attempt to advance\n    /// it will first try to advance the first iterator at most one time and if it still yielded an item\n    /// try to advance the second iterator at most one time.\n    ///\n    /// To 'undo' the result of zipping up two iterators, see [`unzip`].\n    ///\n    /// [`unzip`]: Iterator::unzip\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a1 = [1, 2, 3];\n    /// let a2 = [4, 5, 6];\n    ///\n    /// let mut iter = a1.iter().zip(a2.iter());\n    ///\n    /// assert_eq!(iter.next(), Some((&1, &4)));\n    /// assert_eq!(iter.next(), Some((&2, &5)));\n    /// assert_eq!(iter.next(), Some((&3, &6)));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Since the argument to `zip()` uses [`IntoIterator`], we can pass\n    /// anything that can be converted into an [`Iterator`], not just an\n    /// [`Iterator`] itself. For example, slices (`&[T]`) implement\n    /// [`IntoIterator`], and so can be passed to `zip()` directly:\n    ///\n    /// ```\n    /// let s1 = &[1, 2, 3];\n    /// let s2 = &[4, 5, 6];\n    ///\n    /// let mut iter = s1.iter().zip(s2);\n    ///\n    /// assert_eq!(iter.next(), Some((&1, &4)));\n    /// assert_eq!(iter.next(), Some((&2, &5)));\n    /// assert_eq!(iter.next(), Some((&3, &6)));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// `zip()` is often used to zip an infinite iterator to a finite one.\n    /// This works because the finite iterator will eventually return [`None`],\n    /// ending the zipper. Zipping with `(0..)` can look a lot like [`enumerate`]:\n    ///\n    /// ```\n    /// let enumerate: Vec<_> = \"foo\".chars().enumerate().collect();\n    ///\n    /// let zipper: Vec<_> = (0..).zip(\"foo\".chars()).collect();\n    ///\n    /// assert_eq!((0, 'f'), enumerate[0]);\n    /// assert_eq!((0, 'f'), zipper[0]);\n    ///\n    /// assert_eq!((1, 'o'), enumerate[1]);\n    /// assert_eq!((1, 'o'), zipper[1]);\n    ///\n    /// assert_eq!((2, 'o'), enumerate[2]);\n    /// assert_eq!((2, 'o'), zipper[2]);\n    /// ```\n    ///\n    /// If both iterators have roughly equivalent syntax, it may be more readable to use [`zip`]:\n    ///\n    /// ```\n    /// use std::iter::zip;\n    ///\n    /// let a = [1, 2, 3];\n    /// let b = [2, 3, 4];\n    ///\n    /// let mut zipped = zip(\n    ///     a.into_iter().map(|x| x * 2).skip(1),\n    ///     b.into_iter().map(|x| x * 2).skip(1),\n    /// );\n    ///\n    /// assert_eq!(zipped.next(), Some((4, 6)));\n    /// assert_eq!(zipped.next(), Some((6, 8)));\n    /// assert_eq!(zipped.next(), None);\n    /// ```\n    ///\n    /// compared to:\n    ///\n    /// ```\n    /// # let a = [1, 2, 3];\n    /// # let b = [2, 3, 4];\n    /// #\n    /// let mut zipped = a\n    ///     .into_iter()\n    ///     .map(|x| x * 2)\n    ///     .skip(1)\n    ///     .zip(b.into_iter().map(|x| x * 2).skip(1));\n    /// #\n    /// # assert_eq!(zipped.next(), Some((4, 6)));\n    /// # assert_eq!(zipped.next(), Some((6, 8)));\n    /// # assert_eq!(zipped.next(), None);\n    /// ```\n    ///\n    /// [`enumerate`]: Iterator::enumerate\n    /// [`next`]: Iterator::next\n    /// [`zip`]: crate::iter::zip\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter>\n    where\n        Self: Sized,\n        U: IntoIterator,\n    {\n        Zip::new(self, other.into_iter())\n    }\n\n    /// Creates a new iterator which places a copy of `separator` between adjacent\n    /// items of the original iterator.\n    ///\n    /// In case `separator` does not implement [`Clone`] or needs to be\n    /// computed every time, use [`intersperse_with`].\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// #![feature(iter_intersperse)]\n    ///\n    /// let mut a = [0, 1, 2].iter().intersperse(&100);\n    /// assert_eq!(a.next(), Some(&0));   // The first element from `a`.\n    /// assert_eq!(a.next(), Some(&100)); // The separator.\n    /// assert_eq!(a.next(), Some(&1));   // The next element from `a`.\n    /// assert_eq!(a.next(), Some(&100)); // The separator.\n    /// assert_eq!(a.next(), Some(&2));   // The last element from `a`.\n    /// assert_eq!(a.next(), None);       // The iterator is finished.\n    /// ```\n    ///\n    /// `intersperse` can be very useful to join an iterator's items using a common element:\n    /// ```\n    /// #![feature(iter_intersperse)]\n    ///\n    /// let hello = [\"Hello\", \"World\", \"!\"].iter().copied().intersperse(\" \").collect::<String>();\n    /// assert_eq!(hello, \"Hello World !\");\n    /// ```\n    ///\n    /// [`Clone`]: crate::clone::Clone\n    /// [`intersperse_with`]: Iterator::intersperse_with\n    #[inline]\n    #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n    #[rustc_do_not_const_check]\n    fn intersperse(self, separator: Self::Item) -> Intersperse<Self>\n    where\n        Self: Sized,\n        Self::Item: Clone,\n    {\n        Intersperse::new(self, separator)\n    }\n\n    /// Creates a new iterator which places an item generated by `separator`\n    /// between adjacent items of the original iterator.\n    ///\n    /// The closure will be called exactly once each time an item is placed\n    /// between two adjacent items from the underlying iterator; specifically,\n    /// the closure is not called if the underlying iterator yields less than\n    /// two items and after the last item is yielded.\n    ///\n    /// If the iterator's item implements [`Clone`], it may be easier to use\n    /// [`intersperse`].\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// #![feature(iter_intersperse)]\n    ///\n    /// #[derive(PartialEq, Debug)]\n    /// struct NotClone(usize);\n    ///\n    /// let v = [NotClone(0), NotClone(1), NotClone(2)];\n    /// let mut it = v.into_iter().intersperse_with(|| NotClone(99));\n    ///\n    /// assert_eq!(it.next(), Some(NotClone(0)));  // The first element from `v`.\n    /// assert_eq!(it.next(), Some(NotClone(99))); // The separator.\n    /// assert_eq!(it.next(), Some(NotClone(1)));  // The next element from `v`.\n    /// assert_eq!(it.next(), Some(NotClone(99))); // The separator.\n    /// assert_eq!(it.next(), Some(NotClone(2)));  // The last element from `v`.\n    /// assert_eq!(it.next(), None);               // The iterator is finished.\n    /// ```\n    ///\n    /// `intersperse_with` can be used in situations where the separator needs\n    /// to be computed:\n    /// ```\n    /// #![feature(iter_intersperse)]\n    ///\n    /// let src = [\"Hello\", \"to\", \"all\", \"people\", \"!!\"].iter().copied();\n    ///\n    /// // The closure mutably borrows its context to generate an item.\n    /// let mut happy_emojis = [\" ❤️ \", \" 😀 \"].iter().copied();\n    /// let separator = || happy_emojis.next().unwrap_or(\" 🦀 \");\n    ///\n    /// let result = src.intersperse_with(separator).collect::<String>();\n    /// assert_eq!(result, \"Hello ❤️ to 😀 all 🦀 people 🦀 !!\");\n    /// ```\n    /// [`Clone`]: crate::clone::Clone\n    /// [`intersperse`]: Iterator::intersperse\n    #[inline]\n    #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n    #[rustc_do_not_const_check]\n    fn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G>\n    where\n        Self: Sized,\n        G: FnMut() -> Self::Item,\n    {\n        IntersperseWith::new(self, separator)\n    }\n\n    /// Takes a closure and creates an iterator which calls that closure on each\n    /// element.\n    ///\n    /// `map()` transforms one iterator into another, by means of its argument:\n    /// something that implements [`FnMut`]. It produces a new iterator which\n    /// calls this closure on each element of the original iterator.\n    ///\n    /// If you are good at thinking in types, you can think of `map()` like this:\n    /// If you have an iterator that gives you elements of some type `A`, and\n    /// you want an iterator of some other type `B`, you can use `map()`,\n    /// passing a closure that takes an `A` and returns a `B`.\n    ///\n    /// `map()` is conceptually similar to a [`for`] loop. However, as `map()` is\n    /// lazy, it is best used when you're already working with other iterators.\n    /// If you're doing some sort of looping for a side effect, it's considered\n    /// more idiomatic to use [`for`] than `map()`.\n    ///\n    /// [`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter().map(|x| 2 * x);\n    ///\n    /// assert_eq!(iter.next(), Some(2));\n    /// assert_eq!(iter.next(), Some(4));\n    /// assert_eq!(iter.next(), Some(6));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// If you're doing some sort of side effect, prefer [`for`] to `map()`:\n    ///\n    /// ```\n    /// # #![allow(unused_must_use)]\n    /// // don't do this:\n    /// (0..5).map(|x| println!(\"{x}\"));\n    ///\n    /// // it won't even execute, as it is lazy. Rust will warn you about this.\n    ///\n    /// // Instead, use for:\n    /// for x in 0..5 {\n    ///     println!(\"{x}\");\n    /// }\n    /// ```\n    #[rustc_diagnostic_item = \"IteratorMap\"]\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn map<B, F>(self, f: F) -> Map<Self, F>\n    where\n        Self: Sized,\n        F: FnMut(Self::Item) -> B,\n    {\n        Map::new(self, f)\n    }\n\n    /// Calls a closure on each element of an iterator.\n    ///\n    /// This is equivalent to using a [`for`] loop on the iterator, although\n    /// `break` and `continue` are not possible from a closure. It's generally\n    /// more idiomatic to use a `for` loop, but `for_each` may be more legible\n    /// when processing items at the end of longer iterator chains. In some\n    /// cases `for_each` may also be faster than a loop, because it will use\n    /// internal iteration on adapters like `Chain`.\n    ///\n    /// [`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// use std::sync::mpsc::channel;\n    ///\n    /// let (tx, rx) = channel();\n    /// (0..5).map(|x| x * 2 + 1)\n    ///       .for_each(move |x| tx.send(x).unwrap());\n    ///\n    /// let v: Vec<_> = rx.iter().collect();\n    /// assert_eq!(v, vec![1, 3, 5, 7, 9]);\n    /// ```\n    ///\n    /// For such a small example, a `for` loop may be cleaner, but `for_each`\n    /// might be preferable to keep a functional style with longer iterators:\n    ///\n    /// ```\n    /// (0..5).flat_map(|x| x * 100 .. x * 110)\n    ///       .enumerate()\n    ///       .filter(|&(i, x)| (i + x) % 3 == 0)\n    ///       .for_each(|(i, x)| println!(\"{i}:{x}\"));\n    /// ```\n    #[inline]\n    #[stable(feature = \"iterator_for_each\", since = \"1.21.0\")]\n    #[rustc_do_not_const_check]\n    fn for_each<F>(self, f: F)\n    where\n        Self: Sized,\n        F: FnMut(Self::Item),\n    {\n        #[inline]\n        fn call<T>(mut f: impl FnMut(T)) -> impl FnMut((), T) {\n            move |(), item| f(item)\n        }\n\n        self.fold((), call(f));\n    }\n\n    /// Creates an iterator which uses a closure to determine if an element\n    /// should be yielded.\n    ///\n    /// Given an element the closure must return `true` or `false`. The returned\n    /// iterator will yield only the elements for which the closure returns\n    /// true.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [0i32, 1, 2];\n    ///\n    /// let mut iter = a.iter().filter(|x| x.is_positive());\n    ///\n    /// assert_eq!(iter.next(), Some(&1));\n    /// assert_eq!(iter.next(), Some(&2));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Because the closure passed to `filter()` takes a reference, and many\n    /// iterators iterate over references, this leads to a possibly confusing\n    /// situation, where the type of the closure is a double reference:\n    ///\n    /// ```\n    /// let a = [0, 1, 2];\n    ///\n    /// let mut iter = a.iter().filter(|x| **x > 1); // need two *s!\n    ///\n    /// assert_eq!(iter.next(), Some(&2));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// It's common to instead use destructuring on the argument to strip away\n    /// one:\n    ///\n    /// ```\n    /// let a = [0, 1, 2];\n    ///\n    /// let mut iter = a.iter().filter(|&x| *x > 1); // both & and *\n    ///\n    /// assert_eq!(iter.next(), Some(&2));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// or both:\n    ///\n    /// ```\n    /// let a = [0, 1, 2];\n    ///\n    /// let mut iter = a.iter().filter(|&&x| x > 1); // two &s\n    ///\n    /// assert_eq!(iter.next(), Some(&2));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// of these layers.\n    ///\n    /// Note that `iter.filter(f).next()` is equivalent to `iter.find(f)`.\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn filter<P>(self, predicate: P) -> Filter<Self, P>\n    where\n        Self: Sized,\n        P: FnMut(&Self::Item) -> bool,\n    {\n        Filter::new(self, predicate)\n    }\n\n    /// Creates an iterator that both filters and maps.\n    ///\n    /// The returned iterator yields only the `value`s for which the supplied\n    /// closure returns `Some(value)`.\n    ///\n    /// `filter_map` can be used to make chains of [`filter`] and [`map`] more\n    /// concise. The example below shows how a `map().filter().map()` can be\n    /// shortened to a single call to `filter_map`.\n    ///\n    /// [`filter`]: Iterator::filter\n    /// [`map`]: Iterator::map\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [\"1\", \"two\", \"NaN\", \"four\", \"5\"];\n    ///\n    /// let mut iter = a.iter().filter_map(|s| s.parse().ok());\n    ///\n    /// assert_eq!(iter.next(), Some(1));\n    /// assert_eq!(iter.next(), Some(5));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Here's the same example, but with [`filter`] and [`map`]:\n    ///\n    /// ```\n    /// let a = [\"1\", \"two\", \"NaN\", \"four\", \"5\"];\n    /// let mut iter = a.iter().map(|s| s.parse()).filter(|s| s.is_ok()).map(|s| s.unwrap());\n    /// assert_eq!(iter.next(), Some(1));\n    /// assert_eq!(iter.next(), Some(5));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>\n    where\n        Self: Sized,\n        F: FnMut(Self::Item) -> Option<B>,\n    {\n        FilterMap::new(self, f)\n    }\n\n    /// Creates an iterator which gives the current iteration count as well as\n    /// the next value.\n    ///\n    /// The iterator returned yields pairs `(i, val)`, where `i` is the\n    /// current index of iteration and `val` is the value returned by the\n    /// iterator.\n    ///\n    /// `enumerate()` keeps its count as a [`usize`]. If you want to count by a\n    /// different sized integer, the [`zip`] function provides similar\n    /// functionality.\n    ///\n    /// # Overflow Behavior\n    ///\n    /// The method does no guarding against overflows, so enumerating more than\n    /// [`usize::MAX`] elements either produces the wrong result or panics. If\n    /// debug assertions are enabled, a panic is guaranteed.\n    ///\n    /// # Panics\n    ///\n    /// The returned iterator might panic if the to-be-returned index would\n    /// overflow a [`usize`].\n    ///\n    /// [`zip`]: Iterator::zip\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = ['a', 'b', 'c'];\n    ///\n    /// let mut iter = a.iter().enumerate();\n    ///\n    /// assert_eq!(iter.next(), Some((0, &'a')));\n    /// assert_eq!(iter.next(), Some((1, &'b')));\n    /// assert_eq!(iter.next(), Some((2, &'c')));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    #[cfg_attr(not(test), rustc_diagnostic_item = \"enumerate_method\")]\n    fn enumerate(self) -> Enumerate<Self>\n    where\n        Self: Sized,\n    {\n        Enumerate::new(self)\n    }\n\n    /// Creates an iterator which can use the [`peek`] and [`peek_mut`] methods\n    /// to look at the next element of the iterator without consuming it. See\n    /// their documentation for more information.\n    ///\n    /// Note that the underlying iterator is still advanced when [`peek`] or\n    /// [`peek_mut`] are called for the first time: In order to retrieve the\n    /// next element, [`next`] is called on the underlying iterator, hence any\n    /// side effects (i.e. anything other than fetching the next value) of\n    /// the [`next`] method will occur.\n    ///\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let xs = [1, 2, 3];\n    ///\n    /// let mut iter = xs.iter().peekable();\n    ///\n    /// // peek() lets us see into the future\n    /// assert_eq!(iter.peek(), Some(&&1));\n    /// assert_eq!(iter.next(), Some(&1));\n    ///\n    /// assert_eq!(iter.next(), Some(&2));\n    ///\n    /// // we can peek() multiple times, the iterator won't advance\n    /// assert_eq!(iter.peek(), Some(&&3));\n    /// assert_eq!(iter.peek(), Some(&&3));\n    ///\n    /// assert_eq!(iter.next(), Some(&3));\n    ///\n    /// // after the iterator is finished, so is peek()\n    /// assert_eq!(iter.peek(), None);\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Using [`peek_mut`] to mutate the next item without advancing the\n    /// iterator:\n    ///\n    /// ```\n    /// let xs = [1, 2, 3];\n    ///\n    /// let mut iter = xs.iter().peekable();\n    ///\n    /// // `peek_mut()` lets us see into the future\n    /// assert_eq!(iter.peek_mut(), Some(&mut &1));\n    /// assert_eq!(iter.peek_mut(), Some(&mut &1));\n    /// assert_eq!(iter.next(), Some(&1));\n    ///\n    /// if let Some(mut p) = iter.peek_mut() {\n    ///     assert_eq!(*p, &2);\n    ///     // put a value into the iterator\n    ///     *p = &1000;\n    /// }\n    ///\n    /// // The value reappears as the iterator continues\n    /// assert_eq!(iter.collect::<Vec<_>>(), vec![&1000, &3]);\n    /// ```\n    /// [`peek`]: Peekable::peek\n    /// [`peek_mut`]: Peekable::peek_mut\n    /// [`next`]: Iterator::next\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn peekable(self) -> Peekable<Self>\n    where\n        Self: Sized,\n    {\n        Peekable::new(self)\n    }\n\n    /// Creates an iterator that [`skip`]s elements based on a predicate.\n    ///\n    /// [`skip`]: Iterator::skip\n    ///\n    /// `skip_while()` takes a closure as an argument. It will call this\n    /// closure on each element of the iterator, and ignore elements\n    /// until it returns `false`.\n    ///\n    /// After `false` is returned, `skip_while()`'s job is over, and the\n    /// rest of the elements are yielded.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [-1i32, 0, 1];\n    ///\n    /// let mut iter = a.iter().skip_while(|x| x.is_negative());\n    ///\n    /// assert_eq!(iter.next(), Some(&0));\n    /// assert_eq!(iter.next(), Some(&1));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Because the closure passed to `skip_while()` takes a reference, and many\n    /// iterators iterate over references, this leads to a possibly confusing\n    /// situation, where the type of the closure argument is a double reference:\n    ///\n    /// ```\n    /// let a = [-1, 0, 1];\n    ///\n    /// let mut iter = a.iter().skip_while(|x| **x < 0); // need two *s!\n    ///\n    /// assert_eq!(iter.next(), Some(&0));\n    /// assert_eq!(iter.next(), Some(&1));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Stopping after an initial `false`:\n    ///\n    /// ```\n    /// let a = [-1, 0, 1, -2];\n    ///\n    /// let mut iter = a.iter().skip_while(|x| **x < 0);\n    ///\n    /// assert_eq!(iter.next(), Some(&0));\n    /// assert_eq!(iter.next(), Some(&1));\n    ///\n    /// // while this would have been false, since we already got a false,\n    /// // skip_while() isn't used any more\n    /// assert_eq!(iter.next(), Some(&-2));\n    ///\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    #[inline]\n    #[doc(alias = \"drop_while\")]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P>\n    where\n        Self: Sized,\n        P: FnMut(&Self::Item) -> bool,\n    {\n        SkipWhile::new(self, predicate)\n    }\n\n    /// Creates an iterator that yields elements based on a predicate.\n    ///\n    /// `take_while()` takes a closure as an argument. It will call this\n    /// closure on each element of the iterator, and yield elements\n    /// while it returns `true`.\n    ///\n    /// After `false` is returned, `take_while()`'s job is over, and the\n    /// rest of the elements are ignored.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [-1i32, 0, 1];\n    ///\n    /// let mut iter = a.iter().take_while(|x| x.is_negative());\n    ///\n    /// assert_eq!(iter.next(), Some(&-1));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Because the closure passed to `take_while()` takes a reference, and many\n    /// iterators iterate over references, this leads to a possibly confusing\n    /// situation, where the type of the closure is a double reference:\n    ///\n    /// ```\n    /// let a = [-1, 0, 1];\n    ///\n    /// let mut iter = a.iter().take_while(|x| **x < 0); // need two *s!\n    ///\n    /// assert_eq!(iter.next(), Some(&-1));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Stopping after an initial `false`:\n    ///\n    /// ```\n    /// let a = [-1, 0, 1, -2];\n    ///\n    /// let mut iter = a.iter().take_while(|x| **x < 0);\n    ///\n    /// assert_eq!(iter.next(), Some(&-1));\n    ///\n    /// // We have more elements that are less than zero, but since we already\n    /// // got a false, take_while() isn't used any more\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Because `take_while()` needs to look at the value in order to see if it\n    /// should be included or not, consuming iterators will see that it is\n    /// removed:\n    ///\n    /// ```\n    /// let a = [1, 2, 3, 4];\n    /// let mut iter = a.iter();\n    ///\n    /// let result: Vec<i32> = iter.by_ref()\n    ///                            .take_while(|n| **n != 3)\n    ///                            .cloned()\n    ///                            .collect();\n    ///\n    /// assert_eq!(result, &[1, 2]);\n    ///\n    /// let result: Vec<i32> = iter.cloned().collect();\n    ///\n    /// assert_eq!(result, &[4]);\n    /// ```\n    ///\n    /// The `3` is no longer there, because it was consumed in order to see if\n    /// the iteration should stop, but wasn't placed back into the iterator.\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn take_while<P>(self, predicate: P) -> TakeWhile<Self, P>\n    where\n        Self: Sized,\n        P: FnMut(&Self::Item) -> bool,\n    {\n        TakeWhile::new(self, predicate)\n    }\n\n    /// Creates an iterator that both yields elements based on a predicate and maps.\n    ///\n    /// `map_while()` takes a closure as an argument. It will call this\n    /// closure on each element of the iterator, and yield elements\n    /// while it returns [`Some(_)`][`Some`].\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [-1i32, 4, 0, 1];\n    ///\n    /// let mut iter = a.iter().map_while(|x| 16i32.checked_div(*x));\n    ///\n    /// assert_eq!(iter.next(), Some(-16));\n    /// assert_eq!(iter.next(), Some(4));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Here's the same example, but with [`take_while`] and [`map`]:\n    ///\n    /// [`take_while`]: Iterator::take_while\n    /// [`map`]: Iterator::map\n    ///\n    /// ```\n    /// let a = [-1i32, 4, 0, 1];\n    ///\n    /// let mut iter = a.iter()\n    ///                 .map(|x| 16i32.checked_div(*x))\n    ///                 .take_while(|x| x.is_some())\n    ///                 .map(|x| x.unwrap());\n    ///\n    /// assert_eq!(iter.next(), Some(-16));\n    /// assert_eq!(iter.next(), Some(4));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Stopping after an initial [`None`]:\n    ///\n    /// ```\n    /// let a = [0, 1, 2, -3, 4, 5, -6];\n    ///\n    /// let iter = a.iter().map_while(|x| u32::try_from(*x).ok());\n    /// let vec = iter.collect::<Vec<_>>();\n    ///\n    /// // We have more elements which could fit in u32 (4, 5), but `map_while` returned `None` for `-3`\n    /// // (as the `predicate` returned `None`) and `collect` stops at the first `None` encountered.\n    /// assert_eq!(vec, vec![0, 1, 2]);\n    /// ```\n    ///\n    /// Because `map_while()` needs to look at the value in order to see if it\n    /// should be included or not, consuming iterators will see that it is\n    /// removed:\n    ///\n    /// ```\n    /// let a = [1, 2, -3, 4];\n    /// let mut iter = a.iter();\n    ///\n    /// let result: Vec<u32> = iter.by_ref()\n    ///                            .map_while(|n| u32::try_from(*n).ok())\n    ///                            .collect();\n    ///\n    /// assert_eq!(result, &[1, 2]);\n    ///\n    /// let result: Vec<i32> = iter.cloned().collect();\n    ///\n    /// assert_eq!(result, &[4]);\n    /// ```\n    ///\n    /// The `-3` is no longer there, because it was consumed in order to see if\n    /// the iteration should stop, but wasn't placed back into the iterator.\n    ///\n    /// Note that unlike [`take_while`] this iterator is **not** fused.\n    /// It is also not specified what this iterator returns after the first [`None`] is returned.\n    /// If you need fused iterator, use [`fuse`].\n    ///\n    /// [`fuse`]: Iterator::fuse\n    #[inline]\n    #[stable(feature = \"iter_map_while\", since = \"1.57.0\")]\n    #[rustc_do_not_const_check]\n    fn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P>\n    where\n        Self: Sized,\n        P: FnMut(Self::Item) -> Option<B>,\n    {\n        MapWhile::new(self, predicate)\n    }\n\n    /// Creates an iterator that skips the first `n` elements.\n    ///\n    /// `skip(n)` skips elements until `n` elements are skipped or the end of the\n    /// iterator is reached (whichever happens first). After that, all the remaining\n    /// elements are yielded. In particular, if the original iterator is too short,\n    /// then the returned iterator is empty.\n    ///\n    /// Rather than overriding this method directly, instead override the `nth` method.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter().skip(2);\n    ///\n    /// assert_eq!(iter.next(), Some(&3));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn skip(self, n: usize) -> Skip<Self>\n    where\n        Self: Sized,\n    {\n        Skip::new(self, n)\n    }\n\n    /// Creates an iterator that yields the first `n` elements, or fewer\n    /// if the underlying iterator ends sooner.\n    ///\n    /// `take(n)` yields elements until `n` elements are yielded or the end of\n    /// the iterator is reached (whichever happens first).\n    /// The returned iterator is a prefix of length `n` if the original iterator\n    /// contains at least `n` elements, otherwise it contains all of the\n    /// (fewer than `n`) elements of the original iterator.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter().take(2);\n    ///\n    /// assert_eq!(iter.next(), Some(&1));\n    /// assert_eq!(iter.next(), Some(&2));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// `take()` is often used with an infinite iterator, to make it finite:\n    ///\n    /// ```\n    /// let mut iter = (0..).take(3);\n    ///\n    /// assert_eq!(iter.next(), Some(0));\n    /// assert_eq!(iter.next(), Some(1));\n    /// assert_eq!(iter.next(), Some(2));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// If less than `n` elements are available,\n    /// `take` will limit itself to the size of the underlying iterator:\n    ///\n    /// ```\n    /// let v = [1, 2];\n    /// let mut iter = v.into_iter().take(5);\n    /// assert_eq!(iter.next(), Some(1));\n    /// assert_eq!(iter.next(), Some(2));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn take(self, n: usize) -> Take<Self>\n    where\n        Self: Sized,\n    {\n        Take::new(self, n)\n    }\n\n    /// An iterator adapter which, like [`fold`], holds internal state, but\n    /// unlike [`fold`], produces a new iterator.\n    ///\n    /// [`fold`]: Iterator::fold\n    ///\n    /// `scan()` takes two arguments: an initial value which seeds the internal\n    /// state, and a closure with two arguments, the first being a mutable\n    /// reference to the internal state and the second an iterator element.\n    /// The closure can assign to the internal state to share state between\n    /// iterations.\n    ///\n    /// On iteration, the closure will be applied to each element of the\n    /// iterator and the return value from the closure, an [`Option`], is\n    /// returned by the `next` method. Thus the closure can return\n    /// `Some(value)` to yield `value`, or `None` to end the iteration.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3, 4];\n    ///\n    /// let mut iter = a.iter().scan(1, |state, &x| {\n    ///     // each iteration, we'll multiply the state by the element ...\n    ///     *state = *state * x;\n    ///\n    ///     // ... and terminate if the state exceeds 6\n    ///     if *state > 6 {\n    ///         return None;\n    ///     }\n    ///     // ... else yield the negation of the state\n    ///     Some(-*state)\n    /// });\n    ///\n    /// assert_eq!(iter.next(), Some(-1));\n    /// assert_eq!(iter.next(), Some(-2));\n    /// assert_eq!(iter.next(), Some(-6));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F>\n    where\n        Self: Sized,\n        F: FnMut(&mut St, Self::Item) -> Option<B>,\n    {\n        Scan::new(self, initial_state, f)\n    }\n\n    /// Creates an iterator that works like map, but flattens nested structure.\n    ///\n    /// The [`map`] adapter is very useful, but only when the closure\n    /// argument produces values. If it produces an iterator instead, there's\n    /// an extra layer of indirection. `flat_map()` will remove this extra layer\n    /// on its own.\n    ///\n    /// You can think of `flat_map(f)` as the semantic equivalent\n    /// of [`map`]ping, and then [`flatten`]ing as in `map(f).flatten()`.\n    ///\n    /// Another way of thinking about `flat_map()`: [`map`]'s closure returns\n    /// one item for each element, and `flat_map()`'s closure returns an\n    /// iterator for each element.\n    ///\n    /// [`map`]: Iterator::map\n    /// [`flatten`]: Iterator::flatten\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let words = [\"alpha\", \"beta\", \"gamma\"];\n    ///\n    /// // chars() returns an iterator\n    /// let merged: String = words.iter()\n    ///                           .flat_map(|s| s.chars())\n    ///                           .collect();\n    /// assert_eq!(merged, \"alphabetagamma\");\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F>\n    where\n        Self: Sized,\n        U: IntoIterator,\n        F: FnMut(Self::Item) -> U,\n    {\n        FlatMap::new(self, f)\n    }\n\n    /// Creates an iterator that flattens nested structure.\n    ///\n    /// This is useful when you have an iterator of iterators or an iterator of\n    /// things that can be turned into iterators and you want to remove one\n    /// level of indirection.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let data = vec![vec![1, 2, 3, 4], vec![5, 6]];\n    /// let flattened = data.into_iter().flatten().collect::<Vec<u8>>();\n    /// assert_eq!(flattened, &[1, 2, 3, 4, 5, 6]);\n    /// ```\n    ///\n    /// Mapping and then flattening:\n    ///\n    /// ```\n    /// let words = [\"alpha\", \"beta\", \"gamma\"];\n    ///\n    /// // chars() returns an iterator\n    /// let merged: String = words.iter()\n    ///                           .map(|s| s.chars())\n    ///                           .flatten()\n    ///                           .collect();\n    /// assert_eq!(merged, \"alphabetagamma\");\n    /// ```\n    ///\n    /// You can also rewrite this in terms of [`flat_map()`], which is preferable\n    /// in this case since it conveys intent more clearly:\n    ///\n    /// ```\n    /// let words = [\"alpha\", \"beta\", \"gamma\"];\n    ///\n    /// // chars() returns an iterator\n    /// let merged: String = words.iter()\n    ///                           .flat_map(|s| s.chars())\n    ///                           .collect();\n    /// assert_eq!(merged, \"alphabetagamma\");\n    /// ```\n    ///\n    /// Flattening works on any `IntoIterator` type, including `Option` and `Result`:\n    ///\n    /// ```\n    /// let options = vec![Some(123), Some(321), None, Some(231)];\n    /// let flattened_options: Vec<_> = options.into_iter().flatten().collect();\n    /// assert_eq!(flattened_options, vec![123, 321, 231]);\n    ///\n    /// let results = vec![Ok(123), Ok(321), Err(456), Ok(231)];\n    /// let flattened_results: Vec<_> = results.into_iter().flatten().collect();\n    /// assert_eq!(flattened_results, vec![123, 321, 231]);\n    /// ```\n    ///\n    /// Flattening only removes one level of nesting at a time:\n    ///\n    /// ```\n    /// let d3 = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];\n    ///\n    /// let d2 = d3.iter().flatten().collect::<Vec<_>>();\n    /// assert_eq!(d2, [&[1, 2], &[3, 4], &[5, 6], &[7, 8]]);\n    ///\n    /// let d1 = d3.iter().flatten().flatten().collect::<Vec<_>>();\n    /// assert_eq!(d1, [&1, &2, &3, &4, &5, &6, &7, &8]);\n    /// ```\n    ///\n    /// Here we see that `flatten()` does not perform a \"deep\" flatten.\n    /// Instead, only one level of nesting is removed. That is, if you\n    /// `flatten()` a three-dimensional array, the result will be\n    /// two-dimensional and not one-dimensional. To get a one-dimensional\n    /// structure, you have to `flatten()` again.\n    ///\n    /// [`flat_map()`]: Iterator::flat_map\n    #[inline]\n    #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n    #[rustc_do_not_const_check]\n    fn flatten(self) -> Flatten<Self>\n    where\n        Self: Sized,\n        Self::Item: IntoIterator,\n    {\n        Flatten::new(self)\n    }\n\n    /// Calls the given function `f` for each contiguous window of size `N` over\n    /// `self` and returns an iterator over the outputs of `f`. Like [`slice::windows()`],\n    /// the windows during mapping overlap as well.\n    ///\n    /// In the following example, the closure is called three times with the\n    /// arguments `&['a', 'b']`, `&['b', 'c']` and `&['c', 'd']` respectively.\n    ///\n    /// ```\n    /// #![feature(iter_map_windows)]\n    ///\n    /// let strings = \"abcd\".chars()\n    ///     .map_windows(|[x, y]| format!(\"{}+{}\", x, y))\n    ///     .collect::<Vec<String>>();\n    ///\n    /// assert_eq!(strings, vec![\"a+b\", \"b+c\", \"c+d\"]);\n    /// ```\n    ///\n    /// Note that the const parameter `N` is usually inferred by the\n    /// destructured argument in the closure.\n    ///\n    /// The returned iterator yields 𝑘 − `N` + 1 items (where 𝑘 is the number of\n    /// items yielded by `self`). If 𝑘 is less than `N`, this method yields an\n    /// empty iterator.\n    ///\n    /// The returned iterator implements [`FusedIterator`], because once `self`\n    /// returns `None`, even if it returns a `Some(T)` again in the next iterations,\n    /// we cannot put it into a contiguous array buffer, and thus the returned iterator\n    /// should be fused.\n    ///\n    /// [`slice::windows()`]: slice::windows\n    /// [`FusedIterator`]: crate::iter::FusedIterator\n    ///\n    /// # Panics\n    ///\n    /// Panics if `N` is 0. This check will most probably get changed to a\n    /// compile time error before this method gets stabilized.\n    ///\n    /// ```should_panic\n    /// #![feature(iter_map_windows)]\n    ///\n    /// let iter = std::iter::repeat(0).map_windows(|&[]| ());\n    /// ```\n    ///\n    /// # Examples\n    ///\n    /// Building the sums of neighboring numbers.\n    ///\n    /// ```\n    /// #![feature(iter_map_windows)]\n    ///\n    /// let mut it = [1, 3, 8, 1].iter().map_windows(|&[a, b]| a + b);\n    /// assert_eq!(it.next(), Some(4));  // 1 + 3\n    /// assert_eq!(it.next(), Some(11)); // 3 + 8\n    /// assert_eq!(it.next(), Some(9));  // 8 + 1\n    /// assert_eq!(it.next(), None);\n    /// ```\n    ///\n    /// Since the elements in the following example implement `Copy`, we can\n    /// just copy the array and get an iterator over the windows.\n    ///\n    /// ```\n    /// #![feature(iter_map_windows)]\n    ///\n    /// let mut it = \"ferris\".chars().map_windows(|w: &[_; 3]| *w);\n    /// assert_eq!(it.next(), Some(['f', 'e', 'r']));\n    /// assert_eq!(it.next(), Some(['e', 'r', 'r']));\n    /// assert_eq!(it.next(), Some(['r', 'r', 'i']));\n    /// assert_eq!(it.next(), Some(['r', 'i', 's']));\n    /// assert_eq!(it.next(), None);\n    /// ```\n    ///\n    /// You can also use this function to check the sortedness of an iterator.\n    /// For the simple case, rather use [`Iterator::is_sorted`].\n    ///\n    /// ```\n    /// #![feature(iter_map_windows)]\n    ///\n    /// let mut it = [0.5, 1.0, 3.5, 3.0, 8.5, 8.5, f32::NAN].iter()\n    ///     .map_windows(|[a, b]| a <= b);\n    ///\n    /// assert_eq!(it.next(), Some(true));  // 0.5 <= 1.0\n    /// assert_eq!(it.next(), Some(true));  // 1.0 <= 3.5\n    /// assert_eq!(it.next(), Some(false)); // 3.5 <= 3.0\n    /// assert_eq!(it.next(), Some(true));  // 3.0 <= 8.5\n    /// assert_eq!(it.next(), Some(true));  // 8.5 <= 8.5\n    /// assert_eq!(it.next(), Some(false)); // 8.5 <= NAN\n    /// assert_eq!(it.next(), None);\n    /// ```\n    ///\n    /// For non-fused iterators, they are fused after `map_windows`.\n    ///\n    /// ```\n    /// #![feature(iter_map_windows)]\n    ///\n    /// #[derive(Default)]\n    /// struct NonFusedIterator {\n    ///     state: i32,\n    /// }\n    ///\n    /// impl Iterator for NonFusedIterator {\n    ///     type Item = i32;\n    ///\n    ///     fn next(&mut self) -> Option<i32> {\n    ///         let val = self.state;\n    ///         self.state = self.state + 1;\n    ///\n    ///         // yields `0..5` first, then only even numbers since `6..`.\n    ///         if val < 5 || val % 2 == 0 {\n    ///             Some(val)\n    ///         } else {\n    ///             None\n    ///         }\n    ///     }\n    /// }\n    ///\n    ///\n    /// let mut iter = NonFusedIterator::default();\n    ///\n    /// // yields 0..5 first.\n    /// assert_eq!(iter.next(), Some(0));\n    /// assert_eq!(iter.next(), Some(1));\n    /// assert_eq!(iter.next(), Some(2));\n    /// assert_eq!(iter.next(), Some(3));\n    /// assert_eq!(iter.next(), Some(4));\n    /// // then we can see our iterator going back and forth\n    /// assert_eq!(iter.next(), None);\n    /// assert_eq!(iter.next(), Some(6));\n    /// assert_eq!(iter.next(), None);\n    /// assert_eq!(iter.next(), Some(8));\n    /// assert_eq!(iter.next(), None);\n    ///\n    /// // however, with `.map_windows()`, it is fused.\n    /// let mut iter = NonFusedIterator::default()\n    ///     .map_windows(|arr: &[_; 2]| *arr);\n    ///\n    /// assert_eq!(iter.next(), Some([0, 1]));\n    /// assert_eq!(iter.next(), Some([1, 2]));\n    /// assert_eq!(iter.next(), Some([2, 3]));\n    /// assert_eq!(iter.next(), Some([3, 4]));\n    /// assert_eq!(iter.next(), None);\n    ///\n    /// // it will always return `None` after the first time.\n    /// assert_eq!(iter.next(), None);\n    /// assert_eq!(iter.next(), None);\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    #[inline]\n    #[unstable(feature = \"iter_map_windows\", reason = \"recently added\", issue = \"87155\")]\n    #[rustc_do_not_const_check]\n    fn map_windows<F, R, const N: usize>(self, f: F) -> MapWindows<Self, F, N>\n    where\n        Self: Sized,\n        F: FnMut(&[Self::Item; N]) -> R,\n    {\n        MapWindows::new(self, f)\n    }\n\n    /// Creates an iterator which ends after the first [`None`].\n    ///\n    /// After an iterator returns [`None`], future calls may or may not yield\n    /// [`Some(T)`] again. `fuse()` adapts an iterator, ensuring that after a\n    /// [`None`] is given, it will always return [`None`] forever.\n    ///\n    /// Note that the [`Fuse`] wrapper is a no-op on iterators that implement\n    /// the [`FusedIterator`] trait. `fuse()` may therefore behave incorrectly\n    /// if the [`FusedIterator`] trait is improperly implemented.\n    ///\n    /// [`Some(T)`]: Some\n    /// [`FusedIterator`]: crate::iter::FusedIterator\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// // an iterator which alternates between Some and None\n    /// struct Alternate {\n    ///     state: i32,\n    /// }\n    ///\n    /// impl Iterator for Alternate {\n    ///     type Item = i32;\n    ///\n    ///     fn next(&mut self) -> Option<i32> {\n    ///         let val = self.state;\n    ///         self.state = self.state + 1;\n    ///\n    ///         // if it's even, Some(i32), else None\n    ///         if val % 2 == 0 {\n    ///             Some(val)\n    ///         } else {\n    ///             None\n    ///         }\n    ///     }\n    /// }\n    ///\n    /// let mut iter = Alternate { state: 0 };\n    ///\n    /// // we can see our iterator going back and forth\n    /// assert_eq!(iter.next(), Some(0));\n    /// assert_eq!(iter.next(), None);\n    /// assert_eq!(iter.next(), Some(2));\n    /// assert_eq!(iter.next(), None);\n    ///\n    /// // however, once we fuse it...\n    /// let mut iter = iter.fuse();\n    ///\n    /// assert_eq!(iter.next(), Some(4));\n    /// assert_eq!(iter.next(), None);\n    ///\n    /// // it will always return `None` after the first time.\n    /// assert_eq!(iter.next(), None);\n    /// assert_eq!(iter.next(), None);\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn fuse(self) -> Fuse<Self>\n    where\n        Self: Sized,\n    {\n        Fuse::new(self)\n    }\n\n    /// Does something with each element of an iterator, passing the value on.\n    ///\n    /// When using iterators, you'll often chain several of them together.\n    /// While working on such code, you might want to check out what's\n    /// happening at various parts in the pipeline. To do that, insert\n    /// a call to `inspect()`.\n    ///\n    /// It's more common for `inspect()` to be used as a debugging tool than to\n    /// exist in your final code, but applications may find it useful in certain\n    /// situations when errors need to be logged before being discarded.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 4, 2, 3];\n    ///\n    /// // this iterator sequence is complex.\n    /// let sum = a.iter()\n    ///     .cloned()\n    ///     .filter(|x| x % 2 == 0)\n    ///     .fold(0, |sum, i| sum + i);\n    ///\n    /// println!(\"{sum}\");\n    ///\n    /// // let's add some inspect() calls to investigate what's happening\n    /// let sum = a.iter()\n    ///     .cloned()\n    ///     .inspect(|x| println!(\"about to filter: {x}\"))\n    ///     .filter(|x| x % 2 == 0)\n    ///     .inspect(|x| println!(\"made it through filter: {x}\"))\n    ///     .fold(0, |sum, i| sum + i);\n    ///\n    /// println!(\"{sum}\");\n    /// ```\n    ///\n    /// This will print:\n    ///\n    /// ```text\n    /// 6\n    /// about to filter: 1\n    /// about to filter: 4\n    /// made it through filter: 4\n    /// about to filter: 2\n    /// made it through filter: 2\n    /// about to filter: 3\n    /// 6\n    /// ```\n    ///\n    /// Logging errors before discarding them:\n    ///\n    /// ```\n    /// let lines = [\"1\", \"2\", \"a\"];\n    ///\n    /// let sum: i32 = lines\n    ///     .iter()\n    ///     .map(|line| line.parse::<i32>())\n    ///     .inspect(|num| {\n    ///         if let Err(ref e) = *num {\n    ///             println!(\"Parsing error: {e}\");\n    ///         }\n    ///     })\n    ///     .filter_map(Result::ok)\n    ///     .sum();\n    ///\n    /// println!(\"Sum: {sum}\");\n    /// ```\n    ///\n    /// This will print:\n    ///\n    /// ```text\n    /// Parsing error: invalid digit found in string\n    /// Sum: 3\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn inspect<F>(self, f: F) -> Inspect<Self, F>\n    where\n        Self: Sized,\n        F: FnMut(&Self::Item),\n    {\n        Inspect::new(self, f)\n    }\n\n    /// Borrows an iterator, rather than consuming it.\n    ///\n    /// This is useful to allow applying iterator adapters while still\n    /// retaining ownership of the original iterator.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut words = [\"hello\", \"world\", \"of\", \"Rust\"].into_iter();\n    ///\n    /// // Take the first two words.\n    /// let hello_world: Vec<_> = words.by_ref().take(2).collect();\n    /// assert_eq!(hello_world, vec![\"hello\", \"world\"]);\n    ///\n    /// // Collect the rest of the words.\n    /// // We can only do this because we used `by_ref` earlier.\n    /// let of_rust: Vec<_> = words.collect();\n    /// assert_eq!(of_rust, vec![\"of\", \"Rust\"]);\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn by_ref(&mut self) -> &mut Self\n    where\n        Self: Sized,\n    {\n        self\n    }\n\n    /// Transforms an iterator into a collection.\n    ///\n    /// `collect()` can take anything iterable, and turn it into a relevant\n    /// collection. This is one of the more powerful methods in the standard\n    /// library, used in a variety of contexts.\n    ///\n    /// The most basic pattern in which `collect()` is used is to turn one\n    /// collection into another. You take a collection, call [`iter`] on it,\n    /// do a bunch of transformations, and then `collect()` at the end.\n    ///\n    /// `collect()` can also create instances of types that are not typical\n    /// collections. For example, a [`String`] can be built from [`char`]s,\n    /// and an iterator of [`Result<T, E>`][`Result`] items can be collected\n    /// into `Result<Collection<T>, E>`. See the examples below for more.\n    ///\n    /// Because `collect()` is so general, it can cause problems with type\n    /// inference. As such, `collect()` is one of the few times you'll see\n    /// the syntax affectionately known as the 'turbofish': `::<>`. This\n    /// helps the inference algorithm understand specifically which collection\n    /// you're trying to collect into.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let doubled: Vec<i32> = a.iter()\n    ///                          .map(|&x| x * 2)\n    ///                          .collect();\n    ///\n    /// assert_eq!(vec![2, 4, 6], doubled);\n    /// ```\n    ///\n    /// Note that we needed the `: Vec<i32>` on the left-hand side. This is because\n    /// we could collect into, for example, a [`VecDeque<T>`] instead:\n    ///\n    /// [`VecDeque<T>`]: ../../std/collections/struct.VecDeque.html\n    ///\n    /// ```\n    /// use std::collections::VecDeque;\n    ///\n    /// let a = [1, 2, 3];\n    ///\n    /// let doubled: VecDeque<i32> = a.iter().map(|&x| x * 2).collect();\n    ///\n    /// assert_eq!(2, doubled[0]);\n    /// assert_eq!(4, doubled[1]);\n    /// assert_eq!(6, doubled[2]);\n    /// ```\n    ///\n    /// Using the 'turbofish' instead of annotating `doubled`:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let doubled = a.iter().map(|x| x * 2).collect::<Vec<i32>>();\n    ///\n    /// assert_eq!(vec![2, 4, 6], doubled);\n    /// ```\n    ///\n    /// Because `collect()` only cares about what you're collecting into, you can\n    /// still use a partial type hint, `_`, with the turbofish:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let doubled = a.iter().map(|x| x * 2).collect::<Vec<_>>();\n    ///\n    /// assert_eq!(vec![2, 4, 6], doubled);\n    /// ```\n    ///\n    /// Using `collect()` to make a [`String`]:\n    ///\n    /// ```\n    /// let chars = ['g', 'd', 'k', 'k', 'n'];\n    ///\n    /// let hello: String = chars.iter()\n    ///     .map(|&x| x as u8)\n    ///     .map(|x| (x + 1) as char)\n    ///     .collect();\n    ///\n    /// assert_eq!(\"hello\", hello);\n    /// ```\n    ///\n    /// If you have a list of [`Result<T, E>`][`Result`]s, you can use `collect()` to\n    /// see if any of them failed:\n    ///\n    /// ```\n    /// let results = [Ok(1), Err(\"nope\"), Ok(3), Err(\"bad\")];\n    ///\n    /// let result: Result<Vec<_>, &str> = results.iter().cloned().collect();\n    ///\n    /// // gives us the first error\n    /// assert_eq!(Err(\"nope\"), result);\n    ///\n    /// let results = [Ok(1), Ok(3)];\n    ///\n    /// let result: Result<Vec<_>, &str> = results.iter().cloned().collect();\n    ///\n    /// // gives us the list of answers\n    /// assert_eq!(Ok(vec![1, 3]), result);\n    /// ```\n    ///\n    /// [`iter`]: Iterator::next\n    /// [`String`]: ../../std/string/struct.String.html\n    /// [`char`]: type@char\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[must_use = \"if you really need to exhaust the iterator, consider `.for_each(drop)` instead\"]\n    #[cfg_attr(not(test), rustc_diagnostic_item = \"iterator_collect_fn\")]\n    #[rustc_do_not_const_check]\n    fn collect<B: FromIterator<Self::Item>>(self) -> B\n    where\n        Self: Sized,\n    {\n        FromIterator::from_iter(self)\n    }\n\n    /// Fallibly transforms an iterator into a collection, short circuiting if\n    /// a failure is encountered.\n    ///\n    /// `try_collect()` is a variation of [`collect()`][`collect`] that allows fallible\n    /// conversions during collection. Its main use case is simplifying conversions from\n    /// iterators yielding [`Option<T>`][`Option`] into `Option<Collection<T>>`, or similarly for other [`Try`]\n    /// types (e.g. [`Result`]).\n    ///\n    /// Importantly, `try_collect()` doesn't require that the outer [`Try`] type also implements [`FromIterator`];\n    /// only the inner type produced on `Try::Output` must implement it. Concretely,\n    /// this means that collecting into `ControlFlow<_, Vec<i32>>` is valid because `Vec<i32>` implements\n    /// [`FromIterator`], even though [`ControlFlow`] doesn't.\n    ///\n    /// Also, if a failure is encountered during `try_collect()`, the iterator is still valid and\n    /// may continue to be used, in which case it will continue iterating starting after the element that\n    /// triggered the failure. See the last example below for an example of how this works.\n    ///\n    /// # Examples\n    /// Successfully collecting an iterator of `Option<i32>` into `Option<Vec<i32>>`:\n    /// ```\n    /// #![feature(iterator_try_collect)]\n    ///\n    /// let u = vec![Some(1), Some(2), Some(3)];\n    /// let v = u.into_iter().try_collect::<Vec<i32>>();\n    /// assert_eq!(v, Some(vec![1, 2, 3]));\n    /// ```\n    ///\n    /// Failing to collect in the same way:\n    /// ```\n    /// #![feature(iterator_try_collect)]\n    ///\n    /// let u = vec![Some(1), Some(2), None, Some(3)];\n    /// let v = u.into_iter().try_collect::<Vec<i32>>();\n    /// assert_eq!(v, None);\n    /// ```\n    ///\n    /// A similar example, but with `Result`:\n    /// ```\n    /// #![feature(iterator_try_collect)]\n    ///\n    /// let u: Vec<Result<i32, ()>> = vec![Ok(1), Ok(2), Ok(3)];\n    /// let v = u.into_iter().try_collect::<Vec<i32>>();\n    /// assert_eq!(v, Ok(vec![1, 2, 3]));\n    ///\n    /// let u = vec![Ok(1), Ok(2), Err(()), Ok(3)];\n    /// let v = u.into_iter().try_collect::<Vec<i32>>();\n    /// assert_eq!(v, Err(()));\n    /// ```\n    ///\n    /// Finally, even [`ControlFlow`] works, despite the fact that it\n    /// doesn't implement [`FromIterator`]. Note also that the iterator can\n    /// continue to be used, even if a failure is encountered:\n    ///\n    /// ```\n    /// #![feature(iterator_try_collect)]\n    ///\n    /// use core::ops::ControlFlow::{Break, Continue};\n    ///\n    /// let u = [Continue(1), Continue(2), Break(3), Continue(4), Continue(5)];\n    /// let mut it = u.into_iter();\n    ///\n    /// let v = it.try_collect::<Vec<_>>();\n    /// assert_eq!(v, Break(3));\n    ///\n    /// let v = it.try_collect::<Vec<_>>();\n    /// assert_eq!(v, Continue(vec![4, 5]));\n    /// ```\n    ///\n    /// [`collect`]: Iterator::collect\n    #[inline]\n    #[unstable(feature = \"iterator_try_collect\", issue = \"94047\")]\n    #[rustc_do_not_const_check]\n    fn try_collect<B>(&mut self) -> ChangeOutputType<Self::Item, B>\n    where\n        Self: Sized,\n        <Self as Iterator>::Item: Try,\n        <<Self as Iterator>::Item as Try>::Residual: Residual<B>,\n        B: FromIterator<<Self::Item as Try>::Output>,\n    {\n        try_process(ByRefSized(self), |i| i.collect())\n    }\n\n    /// Collects all the items from an iterator into a collection.\n    ///\n    /// This method consumes the iterator and adds all its items to the\n    /// passed collection. The collection is then returned, so the call chain\n    /// can be continued.\n    ///\n    /// This is useful when you already have a collection and want to add\n    /// the iterator items to it.\n    ///\n    /// This method is a convenience method to call [Extend::extend](trait.Extend.html),\n    /// but instead of being called on a collection, it's called on an iterator.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// #![feature(iter_collect_into)]\n    ///\n    /// let a = [1, 2, 3];\n    /// let mut vec: Vec::<i32> = vec![0, 1];\n    ///\n    /// a.iter().map(|&x| x * 2).collect_into(&mut vec);\n    /// a.iter().map(|&x| x * 10).collect_into(&mut vec);\n    ///\n    /// assert_eq!(vec, vec![0, 1, 2, 4, 6, 10, 20, 30]);\n    /// ```\n    ///\n    /// `Vec` can have a manual set capacity to avoid reallocating it:\n    ///\n    /// ```\n    /// #![feature(iter_collect_into)]\n    ///\n    /// let a = [1, 2, 3];\n    /// let mut vec: Vec::<i32> = Vec::with_capacity(6);\n    ///\n    /// a.iter().map(|&x| x * 2).collect_into(&mut vec);\n    /// a.iter().map(|&x| x * 10).collect_into(&mut vec);\n    ///\n    /// assert_eq!(6, vec.capacity());\n    /// assert_eq!(vec, vec![2, 4, 6, 10, 20, 30]);\n    /// ```\n    ///\n    /// The returned mutable reference can be used to continue the call chain:\n    ///\n    /// ```\n    /// #![feature(iter_collect_into)]\n    ///\n    /// let a = [1, 2, 3];\n    /// let mut vec: Vec::<i32> = Vec::with_capacity(6);\n    ///\n    /// let count = a.iter().collect_into(&mut vec).iter().count();\n    ///\n    /// assert_eq!(count, vec.len());\n    /// assert_eq!(vec, vec![1, 2, 3]);\n    ///\n    /// let count = a.iter().collect_into(&mut vec).iter().count();\n    ///\n    /// assert_eq!(count, vec.len());\n    /// assert_eq!(vec, vec![1, 2, 3, 1, 2, 3]);\n    /// ```\n    #[inline]\n    #[unstable(feature = \"iter_collect_into\", reason = \"new API\", issue = \"94780\")]\n    #[rustc_do_not_const_check]\n    fn collect_into<E: Extend<Self::Item>>(self, collection: &mut E) -> &mut E\n    where\n        Self: Sized,\n    {\n        collection.extend(self);\n        collection\n    }\n\n    /// Consumes an iterator, creating two collections from it.\n    ///\n    /// The predicate passed to `partition()` can return `true`, or `false`.\n    /// `partition()` returns a pair, all of the elements for which it returned\n    /// `true`, and all of the elements for which it returned `false`.\n    ///\n    /// See also [`is_partitioned()`] and [`partition_in_place()`].\n    ///\n    /// [`is_partitioned()`]: Iterator::is_partitioned\n    /// [`partition_in_place()`]: Iterator::partition_in_place\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let (even, odd): (Vec<_>, Vec<_>) = a\n    ///     .into_iter()\n    ///     .partition(|n| n % 2 == 0);\n    ///\n    /// assert_eq!(even, vec![2]);\n    /// assert_eq!(odd, vec![1, 3]);\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn partition<B, F>(self, f: F) -> (B, B)\n    where\n        Self: Sized,\n        B: Default + Extend<Self::Item>,\n        F: FnMut(&Self::Item) -> bool,\n    {\n        #[inline]\n        fn extend<'a, T, B: Extend<T>>(\n            mut f: impl FnMut(&T) -> bool + 'a,\n            left: &'a mut B,\n            right: &'a mut B,\n        ) -> impl FnMut((), T) + 'a {\n            move |(), x| {\n                if f(&x) {\n                    left.extend_one(x);\n                } else {\n                    right.extend_one(x);\n                }\n            }\n        }\n\n        let mut left: B = Default::default();\n        let mut right: B = Default::default();\n\n        self.fold((), extend(f, &mut left, &mut right));\n\n        (left, right)\n    }\n\n    /// Reorders the elements of this iterator *in-place* according to the given predicate,\n    /// such that all those that return `true` precede all those that return `false`.\n    /// Returns the number of `true` elements found.\n    ///\n    /// The relative order of partitioned items is not maintained.\n    ///\n    /// # Current implementation\n    ///\n    /// The current algorithm tries to find the first element for which the predicate evaluates\n    /// to false and the last element for which it evaluates to true, and repeatedly swaps them.\n    ///\n    /// Time complexity: *O*(*n*)\n    ///\n    /// See also [`is_partitioned()`] and [`partition()`].\n    ///\n    /// [`is_partitioned()`]: Iterator::is_partitioned\n    /// [`partition()`]: Iterator::partition\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(iter_partition_in_place)]\n    ///\n    /// let mut a = [1, 2, 3, 4, 5, 6, 7];\n    ///\n    /// // Partition in-place between evens and odds\n    /// let i = a.iter_mut().partition_in_place(|&n| n % 2 == 0);\n    ///\n    /// assert_eq!(i, 3);\n    /// assert!(a[..i].iter().all(|&n| n % 2 == 0)); // evens\n    /// assert!(a[i..].iter().all(|&n| n % 2 == 1)); // odds\n    /// ```\n    #[unstable(feature = \"iter_partition_in_place\", reason = \"new API\", issue = \"62543\")]\n    #[rustc_do_not_const_check]\n    fn partition_in_place<'a, T: 'a, P>(mut self, ref mut predicate: P) -> usize\n    where\n        Self: Sized + DoubleEndedIterator<Item = &'a mut T>,\n        P: FnMut(&T) -> bool,\n    {\n        // FIXME: should we worry about the count overflowing? The only way to have more than\n        // `usize::MAX` mutable references is with ZSTs, which aren't useful to partition...\n\n        // These closure \"factory\" functions exist to avoid genericity in `Self`.\n\n        #[inline]\n        fn is_false<'a, T>(\n            predicate: &'a mut impl FnMut(&T) -> bool,\n            true_count: &'a mut usize,\n        ) -> impl FnMut(&&mut T) -> bool + 'a {\n            move |x| {\n                let p = predicate(&**x);\n                *true_count += p as usize;\n                !p\n            }\n        }\n\n        #[inline]\n        fn is_true<T>(predicate: &mut impl FnMut(&T) -> bool) -> impl FnMut(&&mut T) -> bool + '_ {\n            move |x| predicate(&**x)\n        }\n\n        // Repeatedly find the first `false` and swap it with the last `true`.\n        let mut true_count = 0;\n        while let Some(head) = self.find(is_false(predicate, &mut true_count)) {\n            if let Some(tail) = self.rfind(is_true(predicate)) {\n                crate::mem::swap(head, tail);\n                true_count += 1;\n            } else {\n                break;\n            }\n        }\n        true_count\n    }\n\n    /// Checks if the elements of this iterator are partitioned according to the given predicate,\n    /// such that all those that return `true` precede all those that return `false`.\n    ///\n    /// See also [`partition()`] and [`partition_in_place()`].\n    ///\n    /// [`partition()`]: Iterator::partition\n    /// [`partition_in_place()`]: Iterator::partition_in_place\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(iter_is_partitioned)]\n    ///\n    /// assert!(\"Iterator\".chars().is_partitioned(char::is_uppercase));\n    /// assert!(!\"IntoIterator\".chars().is_partitioned(char::is_uppercase));\n    /// ```\n    #[unstable(feature = \"iter_is_partitioned\", reason = \"new API\", issue = \"62544\")]\n    #[rustc_do_not_const_check]\n    fn is_partitioned<P>(mut self, mut predicate: P) -> bool\n    where\n        Self: Sized,\n        P: FnMut(Self::Item) -> bool,\n    {\n        // Either all items test `true`, or the first clause stops at `false`\n        // and we check that there are no more `true` items after that.\n        self.all(&mut predicate) || !self.any(predicate)\n    }\n\n    /// An iterator method that applies a function as long as it returns\n    /// successfully, producing a single, final value.\n    ///\n    /// `try_fold()` takes two arguments: an initial value, and a closure with\n    /// two arguments: an 'accumulator', and an element. The closure either\n    /// returns successfully, with the value that the accumulator should have\n    /// for the next iteration, or it returns failure, with an error value that\n    /// is propagated back to the caller immediately (short-circuiting).\n    ///\n    /// The initial value is the value the accumulator will have on the first\n    /// call. If applying the closure succeeded against every element of the\n    /// iterator, `try_fold()` returns the final accumulator as success.\n    ///\n    /// Folding is useful whenever you have a collection of something, and want\n    /// to produce a single value from it.\n    ///\n    /// # Note to Implementors\n    ///\n    /// Several of the other (forward) methods have default implementations in\n    /// terms of this one, so try to implement this explicitly if it can\n    /// do something better than the default `for` loop implementation.\n    ///\n    /// In particular, try to have this call `try_fold()` on the internal parts\n    /// from which this iterator is composed. If multiple calls are needed,\n    /// the `?` operator may be convenient for chaining the accumulator value\n    /// along, but beware any invariants that need to be upheld before those\n    /// early returns. This is a `&mut self` method, so iteration needs to be\n    /// resumable after hitting an error here.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// // the checked sum of all of the elements of the array\n    /// let sum = a.iter().try_fold(0i8, |acc, &x| acc.checked_add(x));\n    ///\n    /// assert_eq!(sum, Some(6));\n    /// ```\n    ///\n    /// Short-circuiting:\n    ///\n    /// ```\n    /// let a = [10, 20, 30, 100, 40, 50];\n    /// let mut it = a.iter();\n    ///\n    /// // This sum overflows when adding the 100 element\n    /// let sum = it.try_fold(0i8, |acc, &x| acc.checked_add(x));\n    /// assert_eq!(sum, None);\n    ///\n    /// // Because it short-circuited, the remaining elements are still\n    /// // available through the iterator.\n    /// assert_eq!(it.len(), 2);\n    /// assert_eq!(it.next(), Some(&40));\n    /// ```\n    ///\n    /// While you cannot `break` from a closure, the [`ControlFlow`] type allows\n    /// a similar idea:\n    ///\n    /// ```\n    /// use std::ops::ControlFlow;\n    ///\n    /// let triangular = (1..30).try_fold(0_i8, |prev, x| {\n    ///     if let Some(next) = prev.checked_add(x) {\n    ///         ControlFlow::Continue(next)\n    ///     } else {\n    ///         ControlFlow::Break(prev)\n    ///     }\n    /// });\n    /// assert_eq!(triangular, ControlFlow::Break(120));\n    ///\n    /// let triangular = (1..30).try_fold(0_u64, |prev, x| {\n    ///     if let Some(next) = prev.checked_add(x) {\n    ///         ControlFlow::Continue(next)\n    ///     } else {\n    ///         ControlFlow::Break(prev)\n    ///     }\n    /// });\n    /// assert_eq!(triangular, ControlFlow::Continue(435));\n    /// ```\n    #[inline]\n    #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n    #[rustc_do_not_const_check]\n    fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R\n    where\n        Self: Sized,\n        F: FnMut(B, Self::Item) -> R,\n        R: Try<Output = B>,\n    {\n        let mut accum = init;\n        while let Some(x) = self.next() {\n            accum = f(accum, x)?;\n        }\n        try { accum }\n    }\n\n    /// An iterator method that applies a fallible function to each item in the\n    /// iterator, stopping at the first error and returning that error.\n    ///\n    /// This can also be thought of as the fallible form of [`for_each()`]\n    /// or as the stateless version of [`try_fold()`].\n    ///\n    /// [`for_each()`]: Iterator::for_each\n    /// [`try_fold()`]: Iterator::try_fold\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fs::rename;\n    /// use std::io::{stdout, Write};\n    /// use std::path::Path;\n    ///\n    /// let data = [\"no_tea.txt\", \"stale_bread.json\", \"torrential_rain.png\"];\n    ///\n    /// let res = data.iter().try_for_each(|x| writeln!(stdout(), \"{x}\"));\n    /// assert!(res.is_ok());\n    ///\n    /// let mut it = data.iter().cloned();\n    /// let res = it.try_for_each(|x| rename(x, Path::new(x).with_extension(\"old\")));\n    /// assert!(res.is_err());\n    /// // It short-circuited, so the remaining items are still in the iterator:\n    /// assert_eq!(it.next(), Some(\"stale_bread.json\"));\n    /// ```\n    ///\n    /// The [`ControlFlow`] type can be used with this method for the situations\n    /// in which you'd use `break` and `continue` in a normal loop:\n    ///\n    /// ```\n    /// use std::ops::ControlFlow;\n    ///\n    /// let r = (2..100).try_for_each(|x| {\n    ///     if 323 % x == 0 {\n    ///         return ControlFlow::Break(x)\n    ///     }\n    ///\n    ///     ControlFlow::Continue(())\n    /// });\n    /// assert_eq!(r, ControlFlow::Break(17));\n    /// ```\n    #[inline]\n    #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n    #[rustc_do_not_const_check]\n    fn try_for_each<F, R>(&mut self, f: F) -> R\n    where\n        Self: Sized,\n        F: FnMut(Self::Item) -> R,\n        R: Try<Output = ()>,\n    {\n        #[inline]\n        fn call<T, R>(mut f: impl FnMut(T) -> R) -> impl FnMut((), T) -> R {\n            move |(), x| f(x)\n        }\n\n        self.try_fold((), call(f))\n    }\n\n    /// Folds every element into an accumulator by applying an operation,\n    /// returning the final result.\n    ///\n    /// `fold()` takes two arguments: an initial value, and a closure with two\n    /// arguments: an 'accumulator', and an element. The closure returns the value that\n    /// the accumulator should have for the next iteration.\n    ///\n    /// The initial value is the value the accumulator will have on the first\n    /// call.\n    ///\n    /// After applying this closure to every element of the iterator, `fold()`\n    /// returns the accumulator.\n    ///\n    /// This operation is sometimes called 'reduce' or 'inject'.\n    ///\n    /// Folding is useful whenever you have a collection of something, and want\n    /// to produce a single value from it.\n    ///\n    /// Note: `fold()`, and similar methods that traverse the entire iterator,\n    /// might not terminate for infinite iterators, even on traits for which a\n    /// result is determinable in finite time.\n    ///\n    /// Note: [`reduce()`] can be used to use the first element as the initial\n    /// value, if the accumulator type and item type is the same.\n    ///\n    /// Note: `fold()` combines elements in a *left-associative* fashion. For associative\n    /// operators like `+`, the order the elements are combined in is not important, but for non-associative\n    /// operators like `-` the order will affect the final result.\n    /// For a *right-associative* version of `fold()`, see [`DoubleEndedIterator::rfold()`].\n    ///\n    /// # Note to Implementors\n    ///\n    /// Several of the other (forward) methods have default implementations in\n    /// terms of this one, so try to implement this explicitly if it can\n    /// do something better than the default `for` loop implementation.\n    ///\n    /// In particular, try to have this call `fold()` on the internal parts\n    /// from which this iterator is composed.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// // the sum of all of the elements of the array\n    /// let sum = a.iter().fold(0, |acc, x| acc + x);\n    ///\n    /// assert_eq!(sum, 6);\n    /// ```\n    ///\n    /// Let's walk through each step of the iteration here:\n    ///\n    /// | element | acc | x | result |\n    /// |---------|-----|---|--------|\n    /// |         | 0   |   |        |\n    /// | 1       | 0   | 1 | 1      |\n    /// | 2       | 1   | 2 | 3      |\n    /// | 3       | 3   | 3 | 6      |\n    ///\n    /// And so, our final result, `6`.\n    ///\n    /// This example demonstrates the left-associative nature of `fold()`:\n    /// it builds a string, starting with an initial value\n    /// and continuing with each element from the front until the back:\n    ///\n    /// ```\n    /// let numbers = [1, 2, 3, 4, 5];\n    ///\n    /// let zero = \"0\".to_string();\n    ///\n    /// let result = numbers.iter().fold(zero, |acc, &x| {\n    ///     format!(\"({acc} + {x})\")\n    /// });\n    ///\n    /// assert_eq!(result, \"(((((0 + 1) + 2) + 3) + 4) + 5)\");\n    /// ```\n    /// It's common for people who haven't used iterators a lot to\n    /// use a `for` loop with a list of things to build up a result. Those\n    /// can be turned into `fold()`s:\n    ///\n    /// [`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n    ///\n    /// ```\n    /// let numbers = [1, 2, 3, 4, 5];\n    ///\n    /// let mut result = 0;\n    ///\n    /// // for loop:\n    /// for i in &numbers {\n    ///     result = result + i;\n    /// }\n    ///\n    /// // fold:\n    /// let result2 = numbers.iter().fold(0, |acc, &x| acc + x);\n    ///\n    /// // they're the same\n    /// assert_eq!(result, result2);\n    /// ```\n    ///\n    /// [`reduce()`]: Iterator::reduce\n    #[doc(alias = \"inject\", alias = \"foldl\")]\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn fold<B, F>(mut self, init: B, mut f: F) -> B\n    where\n        Self: Sized,\n        F: FnMut(B, Self::Item) -> B,\n    {\n        let mut accum = init;\n        while let Some(x) = self.next() {\n            accum = f(accum, x);\n        }\n        accum\n    }\n\n    /// Reduces the elements to a single one, by repeatedly applying a reducing\n    /// operation.\n    ///\n    /// If the iterator is empty, returns [`None`]; otherwise, returns the\n    /// result of the reduction.\n    ///\n    /// The reducing function is a closure with two arguments: an 'accumulator', and an element.\n    /// For iterators with at least one element, this is the same as [`fold()`]\n    /// with the first element of the iterator as the initial accumulator value, folding\n    /// every subsequent element into it.\n    ///\n    /// [`fold()`]: Iterator::fold\n    ///\n    /// # Example\n    ///\n    /// ```\n    /// let reduced: i32 = (1..10).reduce(|acc, e| acc + e).unwrap();\n    /// assert_eq!(reduced, 45);\n    ///\n    /// // Which is equivalent to doing it with `fold`:\n    /// let folded: i32 = (1..10).fold(0, |acc, e| acc + e);\n    /// assert_eq!(reduced, folded);\n    /// ```\n    #[inline]\n    #[stable(feature = \"iterator_fold_self\", since = \"1.51.0\")]\n    #[rustc_do_not_const_check]\n    fn reduce<F>(mut self, f: F) -> Option<Self::Item>\n    where\n        Self: Sized,\n        F: FnMut(Self::Item, Self::Item) -> Self::Item,\n    {\n        let first = self.next()?;\n        Some(self.fold(first, f))\n    }\n\n    /// Reduces the elements to a single one by repeatedly applying a reducing operation. If the\n    /// closure returns a failure, the failure is propagated back to the caller immediately.\n    ///\n    /// The return type of this method depends on the return type of the closure. If the closure\n    /// returns `Result<Self::Item, E>`, then this function will return `Result<Option<Self::Item>,\n    /// E>`. If the closure returns `Option<Self::Item>`, then this function will return\n    /// `Option<Option<Self::Item>>`.\n    ///\n    /// When called on an empty iterator, this function will return either `Some(None)` or\n    /// `Ok(None)` depending on the type of the provided closure.\n    ///\n    /// For iterators with at least one element, this is essentially the same as calling\n    /// [`try_fold()`] with the first element of the iterator as the initial accumulator value.\n    ///\n    /// [`try_fold()`]: Iterator::try_fold\n    ///\n    /// # Examples\n    ///\n    /// Safely calculate the sum of a series of numbers:\n    ///\n    /// ```\n    /// #![feature(iterator_try_reduce)]\n    ///\n    /// let numbers: Vec<usize> = vec![10, 20, 5, 23, 0];\n    /// let sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\n    /// assert_eq!(sum, Some(Some(58)));\n    /// ```\n    ///\n    /// Determine when a reduction short circuited:\n    ///\n    /// ```\n    /// #![feature(iterator_try_reduce)]\n    ///\n    /// let numbers = vec![1, 2, 3, usize::MAX, 4, 5];\n    /// let sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\n    /// assert_eq!(sum, None);\n    /// ```\n    ///\n    /// Determine when a reduction was not performed because there are no elements:\n    ///\n    /// ```\n    /// #![feature(iterator_try_reduce)]\n    ///\n    /// let numbers: Vec<usize> = Vec::new();\n    /// let sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\n    /// assert_eq!(sum, Some(None));\n    /// ```\n    ///\n    /// Use a [`Result`] instead of an [`Option`]:\n    ///\n    /// ```\n    /// #![feature(iterator_try_reduce)]\n    ///\n    /// let numbers = vec![\"1\", \"2\", \"3\", \"4\", \"5\"];\n    /// let max: Result<Option<_>, <usize as std::str::FromStr>::Err> =\n    ///     numbers.into_iter().try_reduce(|x, y| {\n    ///         if x.parse::<usize>()? > y.parse::<usize>()? { Ok(x) } else { Ok(y) }\n    ///     });\n    /// assert_eq!(max, Ok(Some(\"5\")));\n    /// ```\n    #[inline]\n    #[unstable(feature = \"iterator_try_reduce\", reason = \"new API\", issue = \"87053\")]\n    #[rustc_do_not_const_check]\n    fn try_reduce<F, R>(&mut self, f: F) -> ChangeOutputType<R, Option<R::Output>>\n    where\n        Self: Sized,\n        F: FnMut(Self::Item, Self::Item) -> R,\n        R: Try<Output = Self::Item>,\n        R::Residual: Residual<Option<Self::Item>>,\n    {\n        let first = match self.next() {\n            Some(i) => i,\n            None => return Try::from_output(None),\n        };\n\n        match self.try_fold(first, f).branch() {\n            ControlFlow::Break(r) => FromResidual::from_residual(r),\n            ControlFlow::Continue(i) => Try::from_output(Some(i)),\n        }\n    }\n\n    /// Tests if every element of the iterator matches a predicate.\n    ///\n    /// `all()` takes a closure that returns `true` or `false`. It applies\n    /// this closure to each element of the iterator, and if they all return\n    /// `true`, then so does `all()`. If any of them return `false`, it\n    /// returns `false`.\n    ///\n    /// `all()` is short-circuiting; in other words, it will stop processing\n    /// as soon as it finds a `false`, given that no matter what else happens,\n    /// the result will also be `false`.\n    ///\n    /// An empty iterator returns `true`.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// assert!(a.iter().all(|&x| x > 0));\n    ///\n    /// assert!(!a.iter().all(|&x| x > 2));\n    /// ```\n    ///\n    /// Stopping at the first `false`:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter();\n    ///\n    /// assert!(!iter.all(|&x| x != 2));\n    ///\n    /// // we can still use `iter`, as there are more elements.\n    /// assert_eq!(iter.next(), Some(&3));\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn all<F>(&mut self, f: F) -> bool\n    where\n        Self: Sized,\n        F: FnMut(Self::Item) -> bool,\n    {\n        #[inline]\n        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {\n            move |(), x| {\n                if f(x) { ControlFlow::Continue(()) } else { ControlFlow::Break(()) }\n            }\n        }\n        self.try_fold((), check(f)) == ControlFlow::Continue(())\n    }\n\n    /// Tests if any element of the iterator matches a predicate.\n    ///\n    /// `any()` takes a closure that returns `true` or `false`. It applies\n    /// this closure to each element of the iterator, and if any of them return\n    /// `true`, then so does `any()`. If they all return `false`, it\n    /// returns `false`.\n    ///\n    /// `any()` is short-circuiting; in other words, it will stop processing\n    /// as soon as it finds a `true`, given that no matter what else happens,\n    /// the result will also be `true`.\n    ///\n    /// An empty iterator returns `false`.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// assert!(a.iter().any(|&x| x > 0));\n    ///\n    /// assert!(!a.iter().any(|&x| x > 5));\n    /// ```\n    ///\n    /// Stopping at the first `true`:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter();\n    ///\n    /// assert!(iter.any(|&x| x != 2));\n    ///\n    /// // we can still use `iter`, as there are more elements.\n    /// assert_eq!(iter.next(), Some(&2));\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn any<F>(&mut self, f: F) -> bool\n    where\n        Self: Sized,\n        F: FnMut(Self::Item) -> bool,\n    {\n        #[inline]\n        fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {\n            move |(), x| {\n                if f(x) { ControlFlow::Break(()) } else { ControlFlow::Continue(()) }\n            }\n        }\n\n        self.try_fold((), check(f)) == ControlFlow::Break(())\n    }\n\n    /// Searches for an element of an iterator that satisfies a predicate.\n    ///\n    /// `find()` takes a closure that returns `true` or `false`. It applies\n    /// this closure to each element of the iterator, and if any of them return\n    /// `true`, then `find()` returns [`Some(element)`]. If they all return\n    /// `false`, it returns [`None`].\n    ///\n    /// `find()` is short-circuiting; in other words, it will stop processing\n    /// as soon as the closure returns `true`.\n    ///\n    /// Because `find()` takes a reference, and many iterators iterate over\n    /// references, this leads to a possibly confusing situation where the\n    /// argument is a double reference. You can see this effect in the\n    /// examples below, with `&&x`.\n    ///\n    /// If you need the index of the element, see [`position()`].\n    ///\n    /// [`Some(element)`]: Some\n    /// [`position()`]: Iterator::position\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// assert_eq!(a.iter().find(|&&x| x == 2), Some(&2));\n    ///\n    /// assert_eq!(a.iter().find(|&&x| x == 5), None);\n    /// ```\n    ///\n    /// Stopping at the first `true`:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter();\n    ///\n    /// assert_eq!(iter.find(|&&x| x == 2), Some(&2));\n    ///\n    /// // we can still use `iter`, as there are more elements.\n    /// assert_eq!(iter.next(), Some(&3));\n    /// ```\n    ///\n    /// Note that `iter.find(f)` is equivalent to `iter.filter(f).next()`.\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n    where\n        Self: Sized,\n        P: FnMut(&Self::Item) -> bool,\n    {\n        #[inline]\n        fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {\n            move |(), x| {\n                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }\n            }\n        }\n\n        self.try_fold((), check(predicate)).break_value()\n    }\n\n    /// Applies function to the elements of iterator and returns\n    /// the first non-none result.\n    ///\n    /// `iter.find_map(f)` is equivalent to `iter.filter_map(f).next()`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [\"lol\", \"NaN\", \"2\", \"5\"];\n    ///\n    /// let first_number = a.iter().find_map(|s| s.parse().ok());\n    ///\n    /// assert_eq!(first_number, Some(2));\n    /// ```\n    #[inline]\n    #[stable(feature = \"iterator_find_map\", since = \"1.30.0\")]\n    #[rustc_do_not_const_check]\n    fn find_map<B, F>(&mut self, f: F) -> Option<B>\n    where\n        Self: Sized,\n        F: FnMut(Self::Item) -> Option<B>,\n    {\n        #[inline]\n        fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut((), T) -> ControlFlow<B> {\n            move |(), x| match f(x) {\n                Some(x) => ControlFlow::Break(x),\n                None => ControlFlow::Continue(()),\n            }\n        }\n\n        self.try_fold((), check(f)).break_value()\n    }\n\n    /// Applies function to the elements of iterator and returns\n    /// the first true result or the first error.\n    ///\n    /// The return type of this method depends on the return type of the closure.\n    /// If you return `Result<bool, E>` from the closure, you'll get a `Result<Option<Self::Item>, E>`.\n    /// If you return `Option<bool>` from the closure, you'll get an `Option<Option<Self::Item>>`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(try_find)]\n    ///\n    /// let a = [\"1\", \"2\", \"lol\", \"NaN\", \"5\"];\n    ///\n    /// let is_my_num = |s: &str, search: i32| -> Result<bool, std::num::ParseIntError> {\n    ///     Ok(s.parse::<i32>()?  == search)\n    /// };\n    ///\n    /// let result = a.iter().try_find(|&&s| is_my_num(s, 2));\n    /// assert_eq!(result, Ok(Some(&\"2\")));\n    ///\n    /// let result = a.iter().try_find(|&&s| is_my_num(s, 5));\n    /// assert!(result.is_err());\n    /// ```\n    ///\n    /// This also supports other types which implement [`Try`], not just [`Result`].\n    ///\n    /// ```\n    /// #![feature(try_find)]\n    ///\n    /// use std::num::NonZero;\n    ///\n    /// let a = [3, 5, 7, 4, 9, 0, 11u32];\n    /// let result = a.iter().try_find(|&&x| NonZero::new(x).map(|y| y.is_power_of_two()));\n    /// assert_eq!(result, Some(Some(&4)));\n    /// let result = a.iter().take(3).try_find(|&&x| NonZero::new(x).map(|y| y.is_power_of_two()));\n    /// assert_eq!(result, Some(None));\n    /// let result = a.iter().rev().try_find(|&&x| NonZero::new(x).map(|y| y.is_power_of_two()));\n    /// assert_eq!(result, None);\n    /// ```\n    #[inline]\n    #[unstable(feature = \"try_find\", reason = \"new API\", issue = \"63178\")]\n    #[rustc_do_not_const_check]\n    fn try_find<F, R>(&mut self, f: F) -> ChangeOutputType<R, Option<Self::Item>>\n    where\n        Self: Sized,\n        F: FnMut(&Self::Item) -> R,\n        R: Try<Output = bool>,\n        R::Residual: Residual<Option<Self::Item>>,\n    {\n        #[inline]\n        fn check<I, V, R>(\n            mut f: impl FnMut(&I) -> V,\n        ) -> impl FnMut((), I) -> ControlFlow<R::TryType>\n        where\n            V: Try<Output = bool, Residual = R>,\n            R: Residual<Option<I>>,\n        {\n            move |(), x| match f(&x).branch() {\n                ControlFlow::Continue(false) => ControlFlow::Continue(()),\n                ControlFlow::Continue(true) => ControlFlow::Break(Try::from_output(Some(x))),\n                ControlFlow::Break(r) => ControlFlow::Break(FromResidual::from_residual(r)),\n            }\n        }\n\n        match self.try_fold((), check(f)) {\n            ControlFlow::Break(x) => x,\n            ControlFlow::Continue(()) => Try::from_output(None),\n        }\n    }\n\n    /// Searches for an element in an iterator, returning its index.\n    ///\n    /// `position()` takes a closure that returns `true` or `false`. It applies\n    /// this closure to each element of the iterator, and if one of them\n    /// returns `true`, then `position()` returns [`Some(index)`]. If all of\n    /// them return `false`, it returns [`None`].\n    ///\n    /// `position()` is short-circuiting; in other words, it will stop\n    /// processing as soon as it finds a `true`.\n    ///\n    /// # Overflow Behavior\n    ///\n    /// The method does no guarding against overflows, so if there are more\n    /// than [`usize::MAX`] non-matching elements, it either produces the wrong\n    /// result or panics. If debug assertions are enabled, a panic is\n    /// guaranteed.\n    ///\n    /// # Panics\n    ///\n    /// This function might panic if the iterator has more than `usize::MAX`\n    /// non-matching elements.\n    ///\n    /// [`Some(index)`]: Some\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// assert_eq!(a.iter().position(|&x| x == 2), Some(1));\n    ///\n    /// assert_eq!(a.iter().position(|&x| x == 5), None);\n    /// ```\n    ///\n    /// Stopping at the first `true`:\n    ///\n    /// ```\n    /// let a = [1, 2, 3, 4];\n    ///\n    /// let mut iter = a.iter();\n    ///\n    /// assert_eq!(iter.position(|&x| x >= 2), Some(1));\n    ///\n    /// // we can still use `iter`, as there are more elements.\n    /// assert_eq!(iter.next(), Some(&3));\n    ///\n    /// // The returned index depends on iterator state\n    /// assert_eq!(iter.position(|&x| x == 4), Some(0));\n    ///\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn position<P>(&mut self, predicate: P) -> Option<usize>\n    where\n        Self: Sized,\n        P: FnMut(Self::Item) -> bool,\n    {\n        #[inline]\n        fn check<'a, T>(\n            mut predicate: impl FnMut(T) -> bool + 'a,\n            acc: &'a mut usize,\n        ) -> impl FnMut((), T) -> ControlFlow<usize, ()> + 'a {\n            #[rustc_inherit_overflow_checks]\n            move |_, x| {\n                if predicate(x) {\n                    ControlFlow::Break(*acc)\n                } else {\n                    *acc += 1;\n                    ControlFlow::Continue(())\n                }\n            }\n        }\n\n        let mut acc = 0;\n        self.try_fold((), check(predicate, &mut acc)).break_value()\n    }\n\n    /// Searches for an element in an iterator from the right, returning its\n    /// index.\n    ///\n    /// `rposition()` takes a closure that returns `true` or `false`. It applies\n    /// this closure to each element of the iterator, starting from the end,\n    /// and if one of them returns `true`, then `rposition()` returns\n    /// [`Some(index)`]. If all of them return `false`, it returns [`None`].\n    ///\n    /// `rposition()` is short-circuiting; in other words, it will stop\n    /// processing as soon as it finds a `true`.\n    ///\n    /// [`Some(index)`]: Some\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// assert_eq!(a.iter().rposition(|&x| x == 3), Some(2));\n    ///\n    /// assert_eq!(a.iter().rposition(|&x| x == 5), None);\n    /// ```\n    ///\n    /// Stopping at the first `true`:\n    ///\n    /// ```\n    /// let a = [-1, 2, 3, 4];\n    ///\n    /// let mut iter = a.iter();\n    ///\n    /// assert_eq!(iter.rposition(|&x| x >= 2), Some(3));\n    ///\n    /// // we can still use `iter`, as there are more elements.\n    /// assert_eq!(iter.next(), Some(&-1));\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn rposition<P>(&mut self, predicate: P) -> Option<usize>\n    where\n        P: FnMut(Self::Item) -> bool,\n        Self: Sized + ExactSizeIterator + DoubleEndedIterator,\n    {\n        // No need for an overflow check here, because `ExactSizeIterator`\n        // implies that the number of elements fits into a `usize`.\n        #[inline]\n        fn check<T>(\n            mut predicate: impl FnMut(T) -> bool,\n        ) -> impl FnMut(usize, T) -> ControlFlow<usize, usize> {\n            move |i, x| {\n                let i = i - 1;\n                if predicate(x) { ControlFlow::Break(i) } else { ControlFlow::Continue(i) }\n            }\n        }\n\n        let n = self.len();\n        self.try_rfold(n, check(predicate)).break_value()\n    }\n\n    /// Returns the maximum element of an iterator.\n    ///\n    /// If several elements are equally maximum, the last element is\n    /// returned. If the iterator is empty, [`None`] is returned.\n    ///\n    /// Note that [`f32`]/[`f64`] doesn't implement [`Ord`] due to NaN being\n    /// incomparable. You can work around this by using [`Iterator::reduce`]:\n    /// ```\n    /// assert_eq!(\n    ///     [2.4, f32::NAN, 1.3]\n    ///         .into_iter()\n    ///         .reduce(f32::max)\n    ///         .unwrap(),\n    ///     2.4\n    /// );\n    /// ```\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    /// let b: Vec<u32> = Vec::new();\n    ///\n    /// assert_eq!(a.iter().max(), Some(&3));\n    /// assert_eq!(b.iter().max(), None);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn max(self) -> Option<Self::Item>\n    where\n        Self: Sized,\n        Self::Item: Ord,\n    {\n        self.max_by(Ord::cmp)\n    }\n\n    /// Returns the minimum element of an iterator.\n    ///\n    /// If several elements are equally minimum, the first element is returned.\n    /// If the iterator is empty, [`None`] is returned.\n    ///\n    /// Note that [`f32`]/[`f64`] doesn't implement [`Ord`] due to NaN being\n    /// incomparable. You can work around this by using [`Iterator::reduce`]:\n    /// ```\n    /// assert_eq!(\n    ///     [2.4, f32::NAN, 1.3]\n    ///         .into_iter()\n    ///         .reduce(f32::min)\n    ///         .unwrap(),\n    ///     1.3\n    /// );\n    /// ```\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    /// let b: Vec<u32> = Vec::new();\n    ///\n    /// assert_eq!(a.iter().min(), Some(&1));\n    /// assert_eq!(b.iter().min(), None);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn min(self) -> Option<Self::Item>\n    where\n        Self: Sized,\n        Self::Item: Ord,\n    {\n        self.min_by(Ord::cmp)\n    }\n\n    /// Returns the element that gives the maximum value from the\n    /// specified function.\n    ///\n    /// If several elements are equally maximum, the last element is\n    /// returned. If the iterator is empty, [`None`] is returned.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [-3_i32, 0, 1, 5, -10];\n    /// assert_eq!(*a.iter().max_by_key(|x| x.abs()).unwrap(), -10);\n    /// ```\n    #[inline]\n    #[stable(feature = \"iter_cmp_by_key\", since = \"1.6.0\")]\n    #[rustc_do_not_const_check]\n    fn max_by_key<B: Ord, F>(self, f: F) -> Option<Self::Item>\n    where\n        Self: Sized,\n        F: FnMut(&Self::Item) -> B,\n    {\n        #[inline]\n        fn key<T, B>(mut f: impl FnMut(&T) -> B) -> impl FnMut(T) -> (B, T) {\n            move |x| (f(&x), x)\n        }\n\n        #[inline]\n        fn compare<T, B: Ord>((x_p, _): &(B, T), (y_p, _): &(B, T)) -> Ordering {\n            x_p.cmp(y_p)\n        }\n\n        let (_, x) = self.map(key(f)).max_by(compare)?;\n        Some(x)\n    }\n\n    /// Returns the element that gives the maximum value with respect to the\n    /// specified comparison function.\n    ///\n    /// If several elements are equally maximum, the last element is\n    /// returned. If the iterator is empty, [`None`] is returned.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [-3_i32, 0, 1, 5, -10];\n    /// assert_eq!(*a.iter().max_by(|x, y| x.cmp(y)).unwrap(), 5);\n    /// ```\n    #[inline]\n    #[stable(feature = \"iter_max_by\", since = \"1.15.0\")]\n    #[rustc_do_not_const_check]\n    fn max_by<F>(self, compare: F) -> Option<Self::Item>\n    where\n        Self: Sized,\n        F: FnMut(&Self::Item, &Self::Item) -> Ordering,\n    {\n        #[inline]\n        fn fold<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(T, T) -> T {\n            move |x, y| cmp::max_by(x, y, &mut compare)\n        }\n\n        self.reduce(fold(compare))\n    }\n\n    /// Returns the element that gives the minimum value from the\n    /// specified function.\n    ///\n    /// If several elements are equally minimum, the first element is\n    /// returned. If the iterator is empty, [`None`] is returned.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [-3_i32, 0, 1, 5, -10];\n    /// assert_eq!(*a.iter().min_by_key(|x| x.abs()).unwrap(), 0);\n    /// ```\n    #[inline]\n    #[stable(feature = \"iter_cmp_by_key\", since = \"1.6.0\")]\n    #[rustc_do_not_const_check]\n    fn min_by_key<B: Ord, F>(self, f: F) -> Option<Self::Item>\n    where\n        Self: Sized,\n        F: FnMut(&Self::Item) -> B,\n    {\n        #[inline]\n        fn key<T, B>(mut f: impl FnMut(&T) -> B) -> impl FnMut(T) -> (B, T) {\n            move |x| (f(&x), x)\n        }\n\n        #[inline]\n        fn compare<T, B: Ord>((x_p, _): &(B, T), (y_p, _): &(B, T)) -> Ordering {\n            x_p.cmp(y_p)\n        }\n\n        let (_, x) = self.map(key(f)).min_by(compare)?;\n        Some(x)\n    }\n\n    /// Returns the element that gives the minimum value with respect to the\n    /// specified comparison function.\n    ///\n    /// If several elements are equally minimum, the first element is\n    /// returned. If the iterator is empty, [`None`] is returned.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [-3_i32, 0, 1, 5, -10];\n    /// assert_eq!(*a.iter().min_by(|x, y| x.cmp(y)).unwrap(), -10);\n    /// ```\n    #[inline]\n    #[stable(feature = \"iter_min_by\", since = \"1.15.0\")]\n    #[rustc_do_not_const_check]\n    fn min_by<F>(self, compare: F) -> Option<Self::Item>\n    where\n        Self: Sized,\n        F: FnMut(&Self::Item, &Self::Item) -> Ordering,\n    {\n        #[inline]\n        fn fold<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(T, T) -> T {\n            move |x, y| cmp::min_by(x, y, &mut compare)\n        }\n\n        self.reduce(fold(compare))\n    }\n\n    /// Reverses an iterator's direction.\n    ///\n    /// Usually, iterators iterate from left to right. After using `rev()`,\n    /// an iterator will instead iterate from right to left.\n    ///\n    /// This is only possible if the iterator has an end, so `rev()` only\n    /// works on [`DoubleEndedIterator`]s.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter().rev();\n    ///\n    /// assert_eq!(iter.next(), Some(&3));\n    /// assert_eq!(iter.next(), Some(&2));\n    /// assert_eq!(iter.next(), Some(&1));\n    ///\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    #[inline]\n    #[doc(alias = \"reverse\")]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn rev(self) -> Rev<Self>\n    where\n        Self: Sized + DoubleEndedIterator,\n    {\n        Rev::new(self)\n    }\n\n    /// Converts an iterator of pairs into a pair of containers.\n    ///\n    /// `unzip()` consumes an entire iterator of pairs, producing two\n    /// collections: one from the left elements of the pairs, and one\n    /// from the right elements.\n    ///\n    /// This function is, in some sense, the opposite of [`zip`].\n    ///\n    /// [`zip`]: Iterator::zip\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [(1, 2), (3, 4), (5, 6)];\n    ///\n    /// let (left, right): (Vec<_>, Vec<_>) = a.iter().cloned().unzip();\n    ///\n    /// assert_eq!(left, [1, 3, 5]);\n    /// assert_eq!(right, [2, 4, 6]);\n    ///\n    /// // you can also unzip multiple nested tuples at once\n    /// let a = [(1, (2, 3)), (4, (5, 6))];\n    ///\n    /// let (x, (y, z)): (Vec<_>, (Vec<_>, Vec<_>)) = a.iter().cloned().unzip();\n    /// assert_eq!(x, [1, 4]);\n    /// assert_eq!(y, [2, 5]);\n    /// assert_eq!(z, [3, 6]);\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)\n    where\n        FromA: Default + Extend<A>,\n        FromB: Default + Extend<B>,\n        Self: Sized + Iterator<Item = (A, B)>,\n    {\n        let mut unzipped: (FromA, FromB) = Default::default();\n        unzipped.extend(self);\n        unzipped\n    }\n\n    /// Creates an iterator which copies all of its elements.\n    ///\n    /// This is useful when you have an iterator over `&T`, but you need an\n    /// iterator over `T`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let v_copied: Vec<_> = a.iter().copied().collect();\n    ///\n    /// // copied is the same as .map(|&x| x)\n    /// let v_map: Vec<_> = a.iter().map(|&x| x).collect();\n    ///\n    /// assert_eq!(v_copied, vec![1, 2, 3]);\n    /// assert_eq!(v_map, vec![1, 2, 3]);\n    /// ```\n    #[stable(feature = \"iter_copied\", since = \"1.36.0\")]\n    #[rustc_do_not_const_check]\n    fn copied<'a, T: 'a>(self) -> Copied<Self>\n    where\n        Self: Sized + Iterator<Item = &'a T>,\n        T: Copy,\n    {\n        Copied::new(self)\n    }\n\n    /// Creates an iterator which [`clone`]s all of its elements.\n    ///\n    /// This is useful when you have an iterator over `&T`, but you need an\n    /// iterator over `T`.\n    ///\n    /// There is no guarantee whatsoever about the `clone` method actually\n    /// being called *or* optimized away. So code should not depend on\n    /// either.\n    ///\n    /// [`clone`]: Clone::clone\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let v_cloned: Vec<_> = a.iter().cloned().collect();\n    ///\n    /// // cloned is the same as .map(|&x| x), for integers\n    /// let v_map: Vec<_> = a.iter().map(|&x| x).collect();\n    ///\n    /// assert_eq!(v_cloned, vec![1, 2, 3]);\n    /// assert_eq!(v_map, vec![1, 2, 3]);\n    /// ```\n    ///\n    /// To get the best performance, try to clone late:\n    ///\n    /// ```\n    /// let a = [vec![0_u8, 1, 2], vec![3, 4], vec![23]];\n    /// // don't do this:\n    /// let slower: Vec<_> = a.iter().cloned().filter(|s| s.len() == 1).collect();\n    /// assert_eq!(&[vec![23]], &slower[..]);\n    /// // instead call `cloned` late\n    /// let faster: Vec<_> = a.iter().filter(|s| s.len() == 1).cloned().collect();\n    /// assert_eq!(&[vec![23]], &faster[..]);\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_do_not_const_check]\n    fn cloned<'a, T: 'a>(self) -> Cloned<Self>\n    where\n        Self: Sized + Iterator<Item = &'a T>,\n        T: Clone,\n    {\n        Cloned::new(self)\n    }\n\n    /// Repeats an iterator endlessly.\n    ///\n    /// Instead of stopping at [`None`], the iterator will instead start again,\n    /// from the beginning. After iterating again, it will start at the\n    /// beginning again. And again. And again. Forever. Note that in case the\n    /// original iterator is empty, the resulting iterator will also be empty.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut it = a.iter().cycle();\n    ///\n    /// assert_eq!(it.next(), Some(&1));\n    /// assert_eq!(it.next(), Some(&2));\n    /// assert_eq!(it.next(), Some(&3));\n    /// assert_eq!(it.next(), Some(&1));\n    /// assert_eq!(it.next(), Some(&2));\n    /// assert_eq!(it.next(), Some(&3));\n    /// assert_eq!(it.next(), Some(&1));\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[inline]\n    #[rustc_do_not_const_check]\n    fn cycle(self) -> Cycle<Self>\n    where\n        Self: Sized + Clone,\n    {\n        Cycle::new(self)\n    }\n\n    /// Returns an iterator over `N` elements of the iterator at a time.\n    ///\n    /// The chunks do not overlap. If `N` does not divide the length of the\n    /// iterator, then the last up to `N-1` elements will be omitted and can be\n    /// retrieved from the [`.into_remainder()`][ArrayChunks::into_remainder]\n    /// function of the iterator.\n    ///\n    /// # Panics\n    ///\n    /// Panics if `N` is 0.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// #![feature(iter_array_chunks)]\n    ///\n    /// let mut iter = \"lorem\".chars().array_chunks();\n    /// assert_eq!(iter.next(), Some(['l', 'o']));\n    /// assert_eq!(iter.next(), Some(['r', 'e']));\n    /// assert_eq!(iter.next(), None);\n    /// assert_eq!(iter.into_remainder().unwrap().as_slice(), &['m']);\n    /// ```\n    ///\n    /// ```\n    /// #![feature(iter_array_chunks)]\n    ///\n    /// let data = [1, 1, 2, -2, 6, 0, 3, 1];\n    /// //          ^-----^  ^------^\n    /// for [x, y, z] in data.iter().array_chunks() {\n    ///     assert_eq!(x + y + z, 4);\n    /// }\n    /// ```\n    #[track_caller]\n    #[unstable(feature = \"iter_array_chunks\", reason = \"recently added\", issue = \"100450\")]\n    #[rustc_do_not_const_check]\n    fn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N>\n    where\n        Self: Sized,\n    {\n        ArrayChunks::new(self)\n    }\n\n    /// Sums the elements of an iterator.\n    ///\n    /// Takes each element, adds them together, and returns the result.\n    ///\n    /// An empty iterator returns the zero value of the type.\n    ///\n    /// `sum()` can be used to sum any type implementing [`Sum`][`core::iter::Sum`],\n    /// including [`Option`][`Option::sum`] and [`Result`][`Result::sum`].\n    ///\n    /// # Panics\n    ///\n    /// When calling `sum()` and a primitive integer type is being returned, this\n    /// method will panic if the computation overflows and debug assertions are\n    /// enabled.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    /// let sum: i32 = a.iter().sum();\n    ///\n    /// assert_eq!(sum, 6);\n    /// ```\n    #[stable(feature = \"iter_arith\", since = \"1.11.0\")]\n    #[rustc_do_not_const_check]\n    fn sum<S>(self) -> S\n    where\n        Self: Sized,\n        S: Sum<Self::Item>,\n    {\n        Sum::sum(self)\n    }\n\n    /// Iterates over the entire iterator, multiplying all the elements\n    ///\n    /// An empty iterator returns the one value of the type.\n    ///\n    /// `product()` can be used to multiply any type implementing [`Product`][`core::iter::Product`],\n    /// including [`Option`][`Option::product`] and [`Result`][`Result::product`].\n    ///\n    /// # Panics\n    ///\n    /// When calling `product()` and a primitive integer type is being returned,\n    /// method will panic if the computation overflows and debug assertions are\n    /// enabled.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// fn factorial(n: u32) -> u32 {\n    ///     (1..=n).product()\n    /// }\n    /// assert_eq!(factorial(0), 1);\n    /// assert_eq!(factorial(1), 1);\n    /// assert_eq!(factorial(5), 120);\n    /// ```\n    #[stable(feature = \"iter_arith\", since = \"1.11.0\")]\n    #[rustc_do_not_const_check]\n    fn product<P>(self) -> P\n    where\n        Self: Sized,\n        P: Product<Self::Item>,\n    {\n        Product::product(self)\n    }\n\n    /// [Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\n    /// of another.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::cmp::Ordering;\n    ///\n    /// assert_eq!([1].iter().cmp([1].iter()), Ordering::Equal);\n    /// assert_eq!([1].iter().cmp([1, 2].iter()), Ordering::Less);\n    /// assert_eq!([1, 2].iter().cmp([1].iter()), Ordering::Greater);\n    /// ```\n    #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n    #[rustc_do_not_const_check]\n    fn cmp<I>(self, other: I) -> Ordering\n    where\n        I: IntoIterator<Item = Self::Item>,\n        Self::Item: Ord,\n        Self: Sized,\n    {\n        self.cmp_by(other, |x, y| x.cmp(&y))\n    }\n\n    /// [Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\n    /// of another with respect to the specified comparison function.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(iter_order_by)]\n    ///\n    /// use std::cmp::Ordering;\n    ///\n    /// let xs = [1, 2, 3, 4];\n    /// let ys = [1, 4, 9, 16];\n    ///\n    /// assert_eq!(xs.iter().cmp_by(&ys, |&x, &y| x.cmp(&y)), Ordering::Less);\n    /// assert_eq!(xs.iter().cmp_by(&ys, |&x, &y| (x * x).cmp(&y)), Ordering::Equal);\n    /// assert_eq!(xs.iter().cmp_by(&ys, |&x, &y| (2 * x).cmp(&y)), Ordering::Greater);\n    /// ```\n    #[unstable(feature = \"iter_order_by\", issue = \"64295\")]\n    #[rustc_do_not_const_check]\n    fn cmp_by<I, F>(self, other: I, cmp: F) -> Ordering\n    where\n        Self: Sized,\n        I: IntoIterator,\n        F: FnMut(Self::Item, I::Item) -> Ordering,\n    {\n        #[inline]\n        fn compare<X, Y, F>(mut cmp: F) -> impl FnMut(X, Y) -> ControlFlow<Ordering>\n        where\n            F: FnMut(X, Y) -> Ordering,\n        {\n            move |x, y| match cmp(x, y) {\n                Ordering::Equal => ControlFlow::Continue(()),\n                non_eq => ControlFlow::Break(non_eq),\n            }\n        }\n\n        match iter_compare(self, other.into_iter(), compare(cmp)) {\n            ControlFlow::Continue(ord) => ord,\n            ControlFlow::Break(ord) => ord,\n        }\n    }\n\n    /// [Lexicographically](Ord#lexicographical-comparison) compares the [`PartialOrd`] elements of\n    /// this [`Iterator`] with those of another. The comparison works like short-circuit\n    /// evaluation, returning a result without comparing the remaining elements.\n    /// As soon as an order can be determined, the evaluation stops and a result is returned.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::cmp::Ordering;\n    ///\n    /// assert_eq!([1.].iter().partial_cmp([1.].iter()), Some(Ordering::Equal));\n    /// assert_eq!([1.].iter().partial_cmp([1., 2.].iter()), Some(Ordering::Less));\n    /// assert_eq!([1., 2.].iter().partial_cmp([1.].iter()), Some(Ordering::Greater));\n    /// ```\n    ///\n    /// For floating-point numbers, NaN does not have a total order and will result\n    /// in `None` when compared:\n    ///\n    /// ```\n    /// assert_eq!([f64::NAN].iter().partial_cmp([1.].iter()), None);\n    /// ```\n    ///\n    /// The results are determined by the order of evaluation.\n    ///\n    /// ```\n    /// use std::cmp::Ordering;\n    ///\n    /// assert_eq!([1.0, f64::NAN].iter().partial_cmp([2.0, f64::NAN].iter()), Some(Ordering::Less));\n    /// assert_eq!([2.0, f64::NAN].iter().partial_cmp([1.0, f64::NAN].iter()), Some(Ordering::Greater));\n    /// assert_eq!([f64::NAN, 1.0].iter().partial_cmp([f64::NAN, 2.0].iter()), None);\n    /// ```\n    ///\n    #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n    #[rustc_do_not_const_check]\n    fn partial_cmp<I>(self, other: I) -> Option<Ordering>\n    where\n        I: IntoIterator,\n        Self::Item: PartialOrd<I::Item>,\n        Self: Sized,\n    {\n        self.partial_cmp_by(other, |x, y| x.partial_cmp(&y))\n    }\n\n    /// [Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\n    /// of another with respect to the specified comparison function.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(iter_order_by)]\n    ///\n    /// use std::cmp::Ordering;\n    ///\n    /// let xs = [1.0, 2.0, 3.0, 4.0];\n    /// let ys = [1.0, 4.0, 9.0, 16.0];\n    ///\n    /// assert_eq!(\n    ///     xs.iter().partial_cmp_by(&ys, |&x, &y| x.partial_cmp(&y)),\n    ///     Some(Ordering::Less)\n    /// );\n    /// assert_eq!(\n    ///     xs.iter().partial_cmp_by(&ys, |&x, &y| (x * x).partial_cmp(&y)),\n    ///     Some(Ordering::Equal)\n    /// );\n    /// assert_eq!(\n    ///     xs.iter().partial_cmp_by(&ys, |&x, &y| (2.0 * x).partial_cmp(&y)),\n    ///     Some(Ordering::Greater)\n    /// );\n    /// ```\n    #[unstable(feature = \"iter_order_by\", issue = \"64295\")]\n    #[rustc_do_not_const_check]\n    fn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>\n    where\n        Self: Sized,\n        I: IntoIterator,\n        F: FnMut(Self::Item, I::Item) -> Option<Ordering>,\n    {\n        #[inline]\n        fn compare<X, Y, F>(mut partial_cmp: F) -> impl FnMut(X, Y) -> ControlFlow<Option<Ordering>>\n        where\n            F: FnMut(X, Y) -> Option<Ordering>,\n        {\n            move |x, y| match partial_cmp(x, y) {\n                Some(Ordering::Equal) => ControlFlow::Continue(()),\n                non_eq => ControlFlow::Break(non_eq),\n            }\n        }\n\n        match iter_compare(self, other.into_iter(), compare(partial_cmp)) {\n            ControlFlow::Continue(ord) => Some(ord),\n            ControlFlow::Break(ord) => ord,\n        }\n    }\n\n    /// Determines if the elements of this [`Iterator`] are equal to those of\n    /// another.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!([1].iter().eq([1].iter()), true);\n    /// assert_eq!([1].iter().eq([1, 2].iter()), false);\n    /// ```\n    #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n    #[rustc_do_not_const_check]\n    fn eq<I>(self, other: I) -> bool\n    where\n        I: IntoIterator,\n        Self::Item: PartialEq<I::Item>,\n        Self: Sized,\n    {\n        self.eq_by(other, |x, y| x == y)\n    }\n\n    /// Determines if the elements of this [`Iterator`] are equal to those of\n    /// another with respect to the specified equality function.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(iter_order_by)]\n    ///\n    /// let xs = [1, 2, 3, 4];\n    /// let ys = [1, 4, 9, 16];\n    ///\n    /// assert!(xs.iter().eq_by(&ys, |&x, &y| x * x == y));\n    /// ```\n    #[unstable(feature = \"iter_order_by\", issue = \"64295\")]\n    #[rustc_do_not_const_check]\n    fn eq_by<I, F>(self, other: I, eq: F) -> bool\n    where\n        Self: Sized,\n        I: IntoIterator,\n        F: FnMut(Self::Item, I::Item) -> bool,\n    {\n        #[inline]\n        fn compare<X, Y, F>(mut eq: F) -> impl FnMut(X, Y) -> ControlFlow<()>\n        where\n            F: FnMut(X, Y) -> bool,\n        {\n            move |x, y| {\n                if eq(x, y) { ControlFlow::Continue(()) } else { ControlFlow::Break(()) }\n            }\n        }\n\n        match iter_compare(self, other.into_iter(), compare(eq)) {\n            ControlFlow::Continue(ord) => ord == Ordering::Equal,\n            ControlFlow::Break(()) => false,\n        }\n    }\n\n    /// Determines if the elements of this [`Iterator`] are not equal to those of\n    /// another.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!([1].iter().ne([1].iter()), false);\n    /// assert_eq!([1].iter().ne([1, 2].iter()), true);\n    /// ```\n    #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n    #[rustc_do_not_const_check]\n    fn ne<I>(self, other: I) -> bool\n    where\n        I: IntoIterator,\n        Self::Item: PartialEq<I::Item>,\n        Self: Sized,\n    {\n        !self.eq(other)\n    }\n\n    /// Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\n    /// less than those of another.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!([1].iter().lt([1].iter()), false);\n    /// assert_eq!([1].iter().lt([1, 2].iter()), true);\n    /// assert_eq!([1, 2].iter().lt([1].iter()), false);\n    /// assert_eq!([1, 2].iter().lt([1, 2].iter()), false);\n    /// ```\n    #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n    #[rustc_do_not_const_check]\n    fn lt<I>(self, other: I) -> bool\n    where\n        I: IntoIterator,\n        Self::Item: PartialOrd<I::Item>,\n        Self: Sized,\n    {\n        self.partial_cmp(other) == Some(Ordering::Less)\n    }\n\n    /// Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\n    /// less or equal to those of another.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!([1].iter().le([1].iter()), true);\n    /// assert_eq!([1].iter().le([1, 2].iter()), true);\n    /// assert_eq!([1, 2].iter().le([1].iter()), false);\n    /// assert_eq!([1, 2].iter().le([1, 2].iter()), true);\n    /// ```\n    #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n    #[rustc_do_not_const_check]\n    fn le<I>(self, other: I) -> bool\n    where\n        I: IntoIterator,\n        Self::Item: PartialOrd<I::Item>,\n        Self: Sized,\n    {\n        matches!(self.partial_cmp(other), Some(Ordering::Less | Ordering::Equal))\n    }\n\n    /// Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\n    /// greater than those of another.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!([1].iter().gt([1].iter()), false);\n    /// assert_eq!([1].iter().gt([1, 2].iter()), false);\n    /// assert_eq!([1, 2].iter().gt([1].iter()), true);\n    /// assert_eq!([1, 2].iter().gt([1, 2].iter()), false);\n    /// ```\n    #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n    #[rustc_do_not_const_check]\n    fn gt<I>(self, other: I) -> bool\n    where\n        I: IntoIterator,\n        Self::Item: PartialOrd<I::Item>,\n        Self: Sized,\n    {\n        self.partial_cmp(other) == Some(Ordering::Greater)\n    }\n\n    /// Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\n    /// greater than or equal to those of another.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!([1].iter().ge([1].iter()), true);\n    /// assert_eq!([1].iter().ge([1, 2].iter()), false);\n    /// assert_eq!([1, 2].iter().ge([1].iter()), true);\n    /// assert_eq!([1, 2].iter().ge([1, 2].iter()), true);\n    /// ```\n    #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n    #[rustc_do_not_const_check]\n    fn ge<I>(self, other: I) -> bool\n    where\n        I: IntoIterator,\n        Self::Item: PartialOrd<I::Item>,\n        Self: Sized,\n    {\n        matches!(self.partial_cmp(other), Some(Ordering::Greater | Ordering::Equal))\n    }\n\n    /// Checks if the elements of this iterator are sorted.\n    ///\n    /// That is, for each element `a` and its following element `b`, `a <= b` must hold. If the\n    /// iterator yields exactly zero or one element, `true` is returned.\n    ///\n    /// Note that if `Self::Item` is only `PartialOrd`, but not `Ord`, the above definition\n    /// implies that this function returns `false` if any two consecutive items are not\n    /// comparable.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(is_sorted)]\n    ///\n    /// assert!([1, 2, 2, 9].iter().is_sorted());\n    /// assert!(![1, 3, 2, 4].iter().is_sorted());\n    /// assert!([0].iter().is_sorted());\n    /// assert!(std::iter::empty::<i32>().is_sorted());\n    /// assert!(![0.0, 1.0, f32::NAN].iter().is_sorted());\n    /// ```\n    #[inline]\n    #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n    #[rustc_do_not_const_check]\n    fn is_sorted(self) -> bool\n    where\n        Self: Sized,\n        Self::Item: PartialOrd,\n    {\n        self.is_sorted_by(|a, b| a <= b)\n    }\n\n    /// Checks if the elements of this iterator are sorted using the given comparator function.\n    ///\n    /// Instead of using `PartialOrd::partial_cmp`, this function uses the given `compare`\n    /// function to determine whether two elements are to be considered in sorted order.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(is_sorted)]\n    ///\n    /// assert!([1, 2, 2, 9].iter().is_sorted_by(|a, b| a <= b));\n    /// assert!(![1, 2, 2, 9].iter().is_sorted_by(|a, b| a < b));\n    ///\n    /// assert!([0].iter().is_sorted_by(|a, b| true));\n    /// assert!([0].iter().is_sorted_by(|a, b| false));\n    ///\n    /// assert!(std::iter::empty::<i32>().is_sorted_by(|a, b| false));\n    /// assert!(std::iter::empty::<i32>().is_sorted_by(|a, b| true));\n    /// ```\n    #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n    #[rustc_do_not_const_check]\n    fn is_sorted_by<F>(mut self, compare: F) -> bool\n    where\n        Self: Sized,\n        F: FnMut(&Self::Item, &Self::Item) -> bool,\n    {\n        #[inline]\n        fn check<'a, T>(\n            last: &'a mut T,\n            mut compare: impl FnMut(&T, &T) -> bool + 'a,\n        ) -> impl FnMut(T) -> bool + 'a {\n            move |curr| {\n                if !compare(&last, &curr) {\n                    return false;\n                }\n                *last = curr;\n                true\n            }\n        }\n\n        let mut last = match self.next() {\n            Some(e) => e,\n            None => return true,\n        };\n\n        self.all(check(&mut last, compare))\n    }\n\n    /// Checks if the elements of this iterator are sorted using the given key extraction\n    /// function.\n    ///\n    /// Instead of comparing the iterator's elements directly, this function compares the keys of\n    /// the elements, as determined by `f`. Apart from that, it's equivalent to [`is_sorted`]; see\n    /// its documentation for more information.\n    ///\n    /// [`is_sorted`]: Iterator::is_sorted\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(is_sorted)]\n    ///\n    /// assert!([\"c\", \"bb\", \"aaa\"].iter().is_sorted_by_key(|s| s.len()));\n    /// assert!(![-2i32, -1, 0, 3].iter().is_sorted_by_key(|n| n.abs()));\n    /// ```\n    #[inline]\n    #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n    #[rustc_do_not_const_check]\n    fn is_sorted_by_key<F, K>(self, f: F) -> bool\n    where\n        Self: Sized,\n        F: FnMut(Self::Item) -> K,\n        K: PartialOrd,\n    {\n        self.map(f).is_sorted()\n    }\n\n    /// See [TrustedRandomAccess][super::super::TrustedRandomAccess]\n    // The unusual name is to avoid name collisions in method resolution\n    // see #76479.\n    #[inline]\n    #[doc(hidden)]\n    #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n    #[rustc_do_not_const_check]\n    unsafe fn __iterator_get_unchecked(&mut self, _idx: usize) -> Self::Item\n    where\n        Self: TrustedRandomAccessNoCoerce,\n    {\n        unreachable!(\"Always specialized\");\n    }\n}\n\n/// Compares two iterators element-wise using the given function.\n///\n/// If `ControlFlow::Continue(())` is returned from the function, the comparison moves on to the next\n/// elements of both iterators. Returning `ControlFlow::Break(x)` short-circuits the iteration and\n/// returns `ControlFlow::Break(x)`. If one of the iterators runs out of elements,\n/// `ControlFlow::Continue(ord)` is returned where `ord` is the result of comparing the lengths of\n/// the iterators.\n///\n/// Isolates the logic shared by ['cmp_by'](Iterator::cmp_by),\n/// ['partial_cmp_by'](Iterator::partial_cmp_by), and ['eq_by'](Iterator::eq_by).\n#[inline]\nfn iter_compare<A, B, F, T>(mut a: A, mut b: B, f: F) -> ControlFlow<T, Ordering>\nwhere\n    A: Iterator,\n    B: Iterator,\n    F: FnMut(A::Item, B::Item) -> ControlFlow<T>,\n{\n    #[inline]\n    fn compare<'a, B, X, T>(\n        b: &'a mut B,\n        mut f: impl FnMut(X, B::Item) -> ControlFlow<T> + 'a,\n    ) -> impl FnMut(X) -> ControlFlow<ControlFlow<T, Ordering>> + 'a\n    where\n        B: Iterator,\n    {\n        move |x| match b.next() {\n            None => ControlFlow::Break(ControlFlow::Continue(Ordering::Greater)),\n            Some(y) => f(x, y).map_break(ControlFlow::Break),\n        }\n    }\n\n    match a.try_for_each(compare(&mut b, f)) {\n        ControlFlow::Continue(()) => ControlFlow::Continue(match b.next() {\n            None => Ordering::Equal,\n            Some(_) => Ordering::Less,\n        }),\n        ControlFlow::Break(x) => x,\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<I: Iterator + ?Sized> Iterator for &mut I {\n    type Item = I::Item;\n    #[inline]\n    fn next(&mut self) -> Option<I::Item> {\n        (**self).next()\n    }\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        (**self).size_hint()\n    }\n    fn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {\n        (**self).advance_by(n)\n    }\n    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n        (**self).nth(n)\n    }\n    fn fold<B, F>(self, init: B, f: F) -> B\n    where\n        F: FnMut(B, Self::Item) -> B,\n    {\n        self.spec_fold(init, f)\n    }\n    fn try_fold<B, F, R>(&mut self, init: B, f: F) -> R\n    where\n        F: FnMut(B, Self::Item) -> R,\n        R: Try<Output = B>,\n    {\n        self.spec_try_fold(init, f)\n    }\n}\n\n/// Helper trait to specialize `fold` and `try_fold` for `&mut I where I: Sized`\ntrait IteratorRefSpec: Iterator {\n    fn spec_fold<B, F>(self, init: B, f: F) -> B\n    where\n        F: FnMut(B, Self::Item) -> B;\n\n    fn spec_try_fold<B, F, R>(&mut self, init: B, f: F) -> R\n    where\n        F: FnMut(B, Self::Item) -> R,\n        R: Try<Output = B>;\n}\n\nimpl<I: Iterator + ?Sized> IteratorRefSpec for &mut I {\n    default fn spec_fold<B, F>(self, init: B, mut f: F) -> B\n    where\n        F: FnMut(B, Self::Item) -> B,\n    {\n        let mut accum = init;\n        while let Some(x) = self.next() {\n            accum = f(accum, x);\n        }\n        accum\n    }\n\n    default fn spec_try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R\n    where\n        F: FnMut(B, Self::Item) -> R,\n        R: Try<Output = B>,\n    {\n        let mut accum = init;\n        while let Some(x) = self.next() {\n            accum = f(accum, x)?;\n        }\n        try { accum }\n    }\n}\n\nimpl<I: Iterator> IteratorRefSpec for &mut I {\n    impl_fold_via_try_fold! { spec_fold -> spec_try_fold }\n\n    fn spec_try_fold<B, F, R>(&mut self, init: B, f: F) -> R\n    where\n        F: FnMut(B, Self::Item) -> R,\n        R: Try<Output = B>,\n    {\n        (**self).try_fold(init, f)\n    }\n}\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Source of the Rust file `library/core/src/iter/traits/iterator.rs`.\"><title>iterator.rs - source</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"core\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../../../../static.files/src-script-e66d777a5a92e9b2.js\"></script><script defer=\"\" src=\"../../../../src-files1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc src\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"sidebar\"><div class=\"src-sidebar-title\"><h2>Files</h2></div><div id=\"src-sidebar\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>boxed</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/alloc/boxed/thin.rs.html\">thin.rs</a></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>binary_heap</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/alloc/collections/binary_heap/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>btree</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>map</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/alloc/collections/btree/map/entry.rs.html\">entry.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/alloc/collections/btree/append.rs.html\">append.rs</a><a href=\"../../../../src/alloc/collections/btree/borrow.rs.html\">borrow.rs</a><a href=\"../../../../src/alloc/collections/btree/dedup_sorted_iter.rs.html\">dedup_sorted_iter.rs</a><a href=\"../../../../src/alloc/collections/btree/fix.rs.html\">fix.rs</a><a href=\"../../../../src/alloc/collections/btree/map.rs.html\">map.rs</a><a href=\"../../../../src/alloc/collections/btree/mem.rs.html\">mem.rs</a><a href=\"../../../../src/alloc/collections/btree/merge_iter.rs.html\">merge_iter.rs</a><a href=\"../../../../src/alloc/collections/btree/mod.rs.html\">mod.rs</a><a href=\"../../../../src/alloc/collections/btree/navigate.rs.html\">navigate.rs</a><a href=\"../../../../src/alloc/collections/btree/node.rs.html\">node.rs</a><a href=\"../../../../src/alloc/collections/btree/remove.rs.html\">remove.rs</a><a href=\"../../../../src/alloc/collections/btree/search.rs.html\">search.rs</a><a href=\"../../../../src/alloc/collections/btree/set.rs.html\">set.rs</a><a href=\"../../../../src/alloc/collections/btree/set_val.rs.html\">set_val.rs</a><a href=\"../../../../src/alloc/collections/btree/split.rs.html\">split.rs</a></div></details><details class=\"dir-entry\"><summary>vec_deque</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/alloc/collections/vec_deque/drain.rs.html\">drain.rs</a><a href=\"../../../../src/alloc/collections/vec_deque/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../../src/alloc/collections/vec_deque/iter.rs.html\">iter.rs</a><a href=\"../../../../src/alloc/collections/vec_deque/iter_mut.rs.html\">iter_mut.rs</a><a href=\"../../../../src/alloc/collections/vec_deque/macros.rs.html\">macros.rs</a><a href=\"../../../../src/alloc/collections/vec_deque/mod.rs.html\">mod.rs</a><a href=\"../../../../src/alloc/collections/vec_deque/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../../src/alloc/collections/vec_deque/spec_from_iter.rs.html\">spec_from_iter.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/alloc/collections/linked_list.rs.html\">linked_list.rs</a><a href=\"../../../../src/alloc/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/alloc/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../../src/alloc/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>vec</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/alloc/vec/cow.rs.html\">cow.rs</a><a href=\"../../../../src/alloc/vec/drain.rs.html\">drain.rs</a><a href=\"../../../../src/alloc/vec/extract_if.rs.html\">extract_if.rs</a><a href=\"../../../../src/alloc/vec/in_place_collect.rs.html\">in_place_collect.rs</a><a href=\"../../../../src/alloc/vec/in_place_drop.rs.html\">in_place_drop.rs</a><a href=\"../../../../src/alloc/vec/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../../src/alloc/vec/is_zero.rs.html\">is_zero.rs</a><a href=\"../../../../src/alloc/vec/mod.rs.html\">mod.rs</a><a href=\"../../../../src/alloc/vec/partial_eq.rs.html\">partial_eq.rs</a><a href=\"../../../../src/alloc/vec/set_len_on_drop.rs.html\">set_len_on_drop.rs</a><a href=\"../../../../src/alloc/vec/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../../src/alloc/vec/spec_from_elem.rs.html\">spec_from_elem.rs</a><a href=\"../../../../src/alloc/vec/spec_from_iter.rs.html\">spec_from_iter.rs</a><a href=\"../../../../src/alloc/vec/spec_from_iter_nested.rs.html\">spec_from_iter_nested.rs</a><a href=\"../../../../src/alloc/vec/splice.rs.html\">splice.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/alloc/alloc.rs.html\">alloc.rs</a><a href=\"../../../../src/alloc/borrow.rs.html\">borrow.rs</a><a href=\"../../../../src/alloc/boxed.rs.html\">boxed.rs</a><a href=\"../../../../src/alloc/fmt.rs.html\">fmt.rs</a><a href=\"../../../../src/alloc/lib.rs.html\">lib.rs</a><a href=\"../../../../src/alloc/macros.rs.html\">macros.rs</a><a href=\"../../../../src/alloc/raw_vec.rs.html\">raw_vec.rs</a><a href=\"../../../../src/alloc/rc.rs.html\">rc.rs</a><a href=\"../../../../src/alloc/slice.rs.html\">slice.rs</a><a href=\"../../../../src/alloc/str.rs.html\">str.rs</a><a href=\"../../../../src/alloc/string.rs.html\">string.rs</a><a href=\"../../../../src/alloc/sync.rs.html\">sync.rs</a><a href=\"../../../../src/alloc/task.rs.html\">task.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/alloc/global.rs.html\">global.rs</a><a href=\"../../../../src/core/alloc/layout.rs.html\">layout.rs</a><a href=\"../../../../src/core/alloc/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>array</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/array/ascii.rs.html\">ascii.rs</a><a href=\"../../../../src/core/array/drain.rs.html\">drain.rs</a><a href=\"../../../../src/core/array/equality.rs.html\">equality.rs</a><a href=\"../../../../src/core/array/iter.rs.html\">iter.rs</a><a href=\"../../../../src/core/array/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ascii</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/ascii/ascii_char.rs.html\">ascii_char.rs</a></div></details><details class=\"dir-entry\"><summary>async_iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/async_iter/async_iter.rs.html\">async_iter.rs</a><a href=\"../../../../src/core/async_iter/from_iter.rs.html\">from_iter.rs</a><a href=\"../../../../src/core/async_iter/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cell</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/cell/lazy.rs.html\">lazy.rs</a><a href=\"../../../../src/core/cell/once.rs.html\">once.rs</a></div></details><details class=\"dir-entry\"><summary>char</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/char/convert.rs.html\">convert.rs</a><a href=\"../../../../src/core/char/decode.rs.html\">decode.rs</a><a href=\"../../../../src/core/char/methods.rs.html\">methods.rs</a><a href=\"../../../../src/core/char/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/cmp/bytewise.rs.html\">bytewise.rs</a></div></details><details class=\"dir-entry\"><summary>convert</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/convert/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/convert/num.rs.html\">num.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../../src/core/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>fmt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/fmt/builders.rs.html\">builders.rs</a><a href=\"../../../../src/core/fmt/float.rs.html\">float.rs</a><a href=\"../../../../src/core/fmt/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/fmt/num.rs.html\">num.rs</a><a href=\"../../../../src/core/fmt/rt.rs.html\">rt.rs</a></div></details><details class=\"dir-entry\"><summary>future</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/future/async_drop.rs.html\">async_drop.rs</a><a href=\"../../../../src/core/future/future.rs.html\">future.rs</a><a href=\"../../../../src/core/future/into_future.rs.html\">into_future.rs</a><a href=\"../../../../src/core/future/join.rs.html\">join.rs</a><a href=\"../../../../src/core/future/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/future/pending.rs.html\">pending.rs</a><a href=\"../../../../src/core/future/poll_fn.rs.html\">poll_fn.rs</a><a href=\"../../../../src/core/future/ready.rs.html\">ready.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/hash/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/hash/sip.rs.html\">sip.rs</a></div></details><details class=\"dir-entry\"><summary>intrinsics</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/intrinsics/mir.rs.html\">mir.rs</a><a href=\"../../../../src/core/intrinsics/simd.rs.html\">simd.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/io/borrowed_buf.rs.html\">borrowed_buf.rs</a><a href=\"../../../../src/core/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>iter</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>adapters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/iter/adapters/array_chunks.rs.html\">array_chunks.rs</a><a href=\"../../../../src/core/iter/adapters/by_ref_sized.rs.html\">by_ref_sized.rs</a><a href=\"../../../../src/core/iter/adapters/chain.rs.html\">chain.rs</a><a href=\"../../../../src/core/iter/adapters/cloned.rs.html\">cloned.rs</a><a href=\"../../../../src/core/iter/adapters/copied.rs.html\">copied.rs</a><a href=\"../../../../src/core/iter/adapters/cycle.rs.html\">cycle.rs</a><a href=\"../../../../src/core/iter/adapters/enumerate.rs.html\">enumerate.rs</a><a href=\"../../../../src/core/iter/adapters/filter.rs.html\">filter.rs</a><a href=\"../../../../src/core/iter/adapters/filter_map.rs.html\">filter_map.rs</a><a href=\"../../../../src/core/iter/adapters/flatten.rs.html\">flatten.rs</a><a href=\"../../../../src/core/iter/adapters/fuse.rs.html\">fuse.rs</a><a href=\"../../../../src/core/iter/adapters/inspect.rs.html\">inspect.rs</a><a href=\"../../../../src/core/iter/adapters/intersperse.rs.html\">intersperse.rs</a><a href=\"../../../../src/core/iter/adapters/map.rs.html\">map.rs</a><a href=\"../../../../src/core/iter/adapters/map_while.rs.html\">map_while.rs</a><a href=\"../../../../src/core/iter/adapters/map_windows.rs.html\">map_windows.rs</a><a href=\"../../../../src/core/iter/adapters/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/iter/adapters/peekable.rs.html\">peekable.rs</a><a href=\"../../../../src/core/iter/adapters/rev.rs.html\">rev.rs</a><a href=\"../../../../src/core/iter/adapters/scan.rs.html\">scan.rs</a><a href=\"../../../../src/core/iter/adapters/skip.rs.html\">skip.rs</a><a href=\"../../../../src/core/iter/adapters/skip_while.rs.html\">skip_while.rs</a><a href=\"../../../../src/core/iter/adapters/step_by.rs.html\">step_by.rs</a><a href=\"../../../../src/core/iter/adapters/take.rs.html\">take.rs</a><a href=\"../../../../src/core/iter/adapters/take_while.rs.html\">take_while.rs</a><a href=\"../../../../src/core/iter/adapters/zip.rs.html\">zip.rs</a></div></details><details class=\"dir-entry\"><summary>sources</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/iter/sources/empty.rs.html\">empty.rs</a><a href=\"../../../../src/core/iter/sources/from_coroutine.rs.html\">from_coroutine.rs</a><a href=\"../../../../src/core/iter/sources/from_fn.rs.html\">from_fn.rs</a><a href=\"../../../../src/core/iter/sources/once.rs.html\">once.rs</a><a href=\"../../../../src/core/iter/sources/once_with.rs.html\">once_with.rs</a><a href=\"../../../../src/core/iter/sources/repeat.rs.html\">repeat.rs</a><a href=\"../../../../src/core/iter/sources/repeat_n.rs.html\">repeat_n.rs</a><a href=\"../../../../src/core/iter/sources/repeat_with.rs.html\">repeat_with.rs</a><a href=\"../../../../src/core/iter/sources/successors.rs.html\">successors.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>traits</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/iter/traits/accum.rs.html\">accum.rs</a><a href=\"../../../../src/core/iter/traits/collect.rs.html\">collect.rs</a><a href=\"../../../../src/core/iter/traits/double_ended.rs.html\">double_ended.rs</a><a href=\"../../../../src/core/iter/traits/exact_size.rs.html\">exact_size.rs</a><a href=\"../../../../src/core/iter/traits/iterator.rs.html\" class=\"selected\">iterator.rs</a><a href=\"../../../../src/core/iter/traits/marker.rs.html\">marker.rs</a><a href=\"../../../../src/core/iter/traits/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/iter/traits/unchecked_iterator.rs.html\">unchecked_iterator.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/core/iter/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/iter/range.rs.html\">range.rs</a><a href=\"../../../../src/core/iter/sources.rs.html\">sources.rs</a></div></details><details class=\"dir-entry\"><summary>macros</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/macros/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mem</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/mem/manually_drop.rs.html\">manually_drop.rs</a><a href=\"../../../../src/core/mem/maybe_uninit.rs.html\">maybe_uninit.rs</a><a href=\"../../../../src/core/mem/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/mem/transmutability.rs.html\">transmutability.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/net/display_buffer.rs.html\">display_buffer.rs</a><a href=\"../../../../src/core/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../../src/core/net/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/net/parser.rs.html\">parser.rs</a><a href=\"../../../../src/core/net/socket_addr.rs.html\">socket_addr.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dec2flt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/num/dec2flt/common.rs.html\">common.rs</a><a href=\"../../../../src/core/num/dec2flt/decimal.rs.html\">decimal.rs</a><a href=\"../../../../src/core/num/dec2flt/float.rs.html\">float.rs</a><a href=\"../../../../src/core/num/dec2flt/fpu.rs.html\">fpu.rs</a><a href=\"../../../../src/core/num/dec2flt/lemire.rs.html\">lemire.rs</a><a href=\"../../../../src/core/num/dec2flt/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/num/dec2flt/number.rs.html\">number.rs</a><a href=\"../../../../src/core/num/dec2flt/parse.rs.html\">parse.rs</a><a href=\"../../../../src/core/num/dec2flt/slow.rs.html\">slow.rs</a><a href=\"../../../../src/core/num/dec2flt/table.rs.html\">table.rs</a></div></details><details class=\"dir-entry\"><summary>flt2dec</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>strategy</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/num/flt2dec/strategy/dragon.rs.html\">dragon.rs</a><a href=\"../../../../src/core/num/flt2dec/strategy/grisu.rs.html\">grisu.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/core/num/flt2dec/decoder.rs.html\">decoder.rs</a><a href=\"../../../../src/core/num/flt2dec/estimator.rs.html\">estimator.rs</a><a href=\"../../../../src/core/num/flt2dec/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>shells</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/num/shells/i128.rs.html\">i128.rs</a><a href=\"../../../../src/core/num/shells/i16.rs.html\">i16.rs</a><a href=\"../../../../src/core/num/shells/i32.rs.html\">i32.rs</a><a href=\"../../../../src/core/num/shells/i64.rs.html\">i64.rs</a><a href=\"../../../../src/core/num/shells/i8.rs.html\">i8.rs</a><a href=\"../../../../src/core/num/shells/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../../src/core/num/shells/isize.rs.html\">isize.rs</a><a href=\"../../../../src/core/num/shells/u128.rs.html\">u128.rs</a><a href=\"../../../../src/core/num/shells/u16.rs.html\">u16.rs</a><a href=\"../../../../src/core/num/shells/u32.rs.html\">u32.rs</a><a href=\"../../../../src/core/num/shells/u64.rs.html\">u64.rs</a><a href=\"../../../../src/core/num/shells/u8.rs.html\">u8.rs</a><a href=\"../../../../src/core/num/shells/usize.rs.html\">usize.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/core/num/bignum.rs.html\">bignum.rs</a><a href=\"../../../../src/core/num/diy_float.rs.html\">diy_float.rs</a><a href=\"../../../../src/core/num/error.rs.html\">error.rs</a><a href=\"../../../../src/core/num/f128.rs.html\">f128.rs</a><a href=\"../../../../src/core/num/f16.rs.html\">f16.rs</a><a href=\"../../../../src/core/num/f32.rs.html\">f32.rs</a><a href=\"../../../../src/core/num/f64.rs.html\">f64.rs</a><a href=\"../../../../src/core/num/fmt.rs.html\">fmt.rs</a><a href=\"../../../../src/core/num/int_log10.rs.html\">int_log10.rs</a><a href=\"../../../../src/core/num/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../../src/core/num/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/num/nonzero.rs.html\">nonzero.rs</a><a href=\"../../../../src/core/num/overflow_panic.rs.html\">overflow_panic.rs</a><a href=\"../../../../src/core/num/saturating.rs.html\">saturating.rs</a><a href=\"../../../../src/core/num/uint_macros.rs.html\">uint_macros.rs</a><a href=\"../../../../src/core/num/wrapping.rs.html\">wrapping.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/ops/arith.rs.html\">arith.rs</a><a href=\"../../../../src/core/ops/async_function.rs.html\">async_function.rs</a><a href=\"../../../../src/core/ops/bit.rs.html\">bit.rs</a><a href=\"../../../../src/core/ops/control_flow.rs.html\">control_flow.rs</a><a href=\"../../../../src/core/ops/coroutine.rs.html\">coroutine.rs</a><a href=\"../../../../src/core/ops/deref.rs.html\">deref.rs</a><a href=\"../../../../src/core/ops/drop.rs.html\">drop.rs</a><a href=\"../../../../src/core/ops/function.rs.html\">function.rs</a><a href=\"../../../../src/core/ops/index.rs.html\">index.rs</a><a href=\"../../../../src/core/ops/index_range.rs.html\">index_range.rs</a><a href=\"../../../../src/core/ops/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/ops/range.rs.html\">range.rs</a><a href=\"../../../../src/core/ops/try_trait.rs.html\">try_trait.rs</a><a href=\"../../../../src/core/ops/unsize.rs.html\">unsize.rs</a></div></details><details class=\"dir-entry\"><summary>panic</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/panic/location.rs.html\">location.rs</a><a href=\"../../../../src/core/panic/panic_info.rs.html\">panic_info.rs</a><a href=\"../../../../src/core/panic/unwind_safe.rs.html\">unwind_safe.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>masks</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html\">full_masks.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html\">assign.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html\">deref.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html\">shift_scalar.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html\">unary.rs</a></div></details><details class=\"dir-entry\"><summary>simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html\">eq.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html\">ord.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html\">float.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html\">int.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html\">uint.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html\">mut_ptr.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/simd/cmp.rs.html\">cmp.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/simd/num.rs.html\">num.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/simd/prelude.rs.html\">prelude.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/simd/ptr.rs.html\">ptr.rs</a></div></details><details class=\"dir-entry\"><summary>vendor</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html\">x86.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/alias.rs.html\">alias.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/cast.rs.html\">cast.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/fmt.rs.html\">fmt.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/iter.rs.html\">iter.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/lane_count.rs.html\">lane_count.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/masks.rs.html\">masks.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/ops.rs.html\">ops.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/select.rs.html\">select.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/swizzle.rs.html\">swizzle.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html\">swizzle_dyn.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html\">to_bytes.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/vector.rs.html\">vector.rs</a><a href=\"../../../../src/core/portable-simd/crates/core_simd/src/vendor.rs.html\">vendor.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/prelude/common.rs.html\">common.rs</a><a href=\"../../../../src/core/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/ptr/alignment.rs.html\">alignment.rs</a><a href=\"../../../../src/core/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../../src/core/ptr/metadata.rs.html\">metadata.rs</a><a href=\"../../../../src/core/ptr/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/ptr/mut_ptr.rs.html\">mut_ptr.rs</a><a href=\"../../../../src/core/ptr/non_null.rs.html\">non_null.rs</a><a href=\"../../../../src/core/ptr/unique.rs.html\">unique.rs</a></div></details><details class=\"dir-entry\"><summary>slice</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/slice/iter/macros.rs.html\">macros.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/core/slice/ascii.rs.html\">ascii.rs</a><a href=\"../../../../src/core/slice/cmp.rs.html\">cmp.rs</a><a href=\"../../../../src/core/slice/index.rs.html\">index.rs</a><a href=\"../../../../src/core/slice/iter.rs.html\">iter.rs</a><a href=\"../../../../src/core/slice/memchr.rs.html\">memchr.rs</a><a href=\"../../../../src/core/slice/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/slice/raw.rs.html\">raw.rs</a><a href=\"../../../../src/core/slice/rotate.rs.html\">rotate.rs</a><a href=\"../../../../src/core/slice/select.rs.html\">select.rs</a><a href=\"../../../../src/core/slice/sort.rs.html\">sort.rs</a><a href=\"../../../../src/core/slice/specialize.rs.html\">specialize.rs</a></div></details><details class=\"dir-entry\"><summary>stdarch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_arch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>aarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/generated.rs.html\">generated.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/aarch64/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/aarch64/prefetch.rs.html\">prefetch.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/aarch64/tme.rs.html\">tme.rs</a></div></details><details class=\"dir-entry\"><summary>arm</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/arm/dsp.rs.html\">dsp.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/arm/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/arm/neon.rs.html\">neon.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/arm/sat.rs.html\">sat.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/arm/simd32.rs.html\">simd32.rs</a></div></details><details class=\"dir-entry\"><summary>arm_shared</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>barrier</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/cp15.rs.html\">cp15.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/generated.rs.html\">generated.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/arm_shared/crc.rs.html\">crc.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/arm_shared/crypto.rs.html\">crypto.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/arm_shared/hints.rs.html\">hints.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/arm_shared/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>loongarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>lasx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/generated.rs.html\">generated.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/types.rs.html\">types.rs</a></div></details><details class=\"dir-entry\"><summary>lsx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/generated.rs.html\">generated.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/loongarch64/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mips</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/mips/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>nvptx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/nvptx/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/powerpc/altivec.rs.html\">altivec.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/powerpc/macros.rs.html\">macros.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/powerpc/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/powerpc/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/powerpc64/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/powerpc64/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>riscv32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/riscv32/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/riscv32/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/riscv64/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/riscv64/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv_shared</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/riscv_shared/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/riscv_shared/p.rs.html\">p.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zb.rs.html\">zb.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>wasm32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/wasm32/atomic.rs.html\">atomic.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/wasm32/memory.rs.html\">memory.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/wasm32/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/wasm32/relaxed_simd.rs.html\">relaxed_simd.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/wasm32/simd128.rs.html\">simd128.rs</a></div></details><details class=\"dir-entry\"><summary>x86</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/abm.rs.html\">abm.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/adx.rs.html\">adx.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/aes.rs.html\">aes.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/avx.rs.html\">avx.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/avx2.rs.html\">avx2.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/avx512bf16.rs.html\">avx512bf16.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/avx512bitalg.rs.html\">avx512bitalg.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/avx512bw.rs.html\">avx512bw.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/avx512cd.rs.html\">avx512cd.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/avx512ifma.rs.html\">avx512ifma.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi.rs.html\">avx512vbmi.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi2.rs.html\">avx512vbmi2.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/avx512vnni.rs.html\">avx512vnni.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/avx512vpopcntdq.rs.html\">avx512vpopcntdq.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/bmi1.rs.html\">bmi1.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/bswap.rs.html\">bswap.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/bt.rs.html\">bt.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/cpuid.rs.html\">cpuid.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/eflags.rs.html\">eflags.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/f16c.rs.html\">f16c.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/fma.rs.html\">fma.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/gfni.rs.html\">gfni.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/macros.rs.html\">macros.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/pclmulqdq.rs.html\">pclmulqdq.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/rdtsc.rs.html\">rdtsc.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/rtm.rs.html\">rtm.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/sha.rs.html\">sha.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/sse.rs.html\">sse.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/sse2.rs.html\">sse2.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/sse3.rs.html\">sse3.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/sse41.rs.html\">sse41.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/sse42.rs.html\">sse42.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/sse4a.rs.html\">sse4a.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/ssse3.rs.html\">ssse3.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/tbm.rs.html\">tbm.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/vaes.rs.html\">vaes.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/vpclmulqdq.rs.html\">vpclmulqdq.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86/xsave.rs.html\">xsave.rs</a></div></details><details class=\"dir-entry\"><summary>x86_64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/abm.rs.html\">abm.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/adx.rs.html\">adx.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/avx.rs.html\">avx.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/avx2.rs.html\">avx2.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi.rs.html\">bmi.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/bswap.rs.html\">bswap.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/bt.rs.html\">bt.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/cmpxchg16b.rs.html\">cmpxchg16b.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/macros.rs.html\">macros.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/sse.rs.html\">sse.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/sse2.rs.html\">sse2.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/sse41.rs.html\">sse41.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/sse42.rs.html\">sse42.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/x86_64/xsave.rs.html\">xsave.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/core/stdarch/crates/core_arch/src/macros.rs.html\">macros.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/stdarch/crates/core_arch/src/simd.rs.html\">simd.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/str/converts.rs.html\">converts.rs</a><a href=\"../../../../src/core/str/count.rs.html\">count.rs</a><a href=\"../../../../src/core/str/error.rs.html\">error.rs</a><a href=\"../../../../src/core/str/iter.rs.html\">iter.rs</a><a href=\"../../../../src/core/str/lossy.rs.html\">lossy.rs</a><a href=\"../../../../src/core/str/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/str/pattern.rs.html\">pattern.rs</a><a href=\"../../../../src/core/str/traits.rs.html\">traits.rs</a><a href=\"../../../../src/core/str/validations.rs.html\">validations.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/sync/atomic.rs.html\">atomic.rs</a><a href=\"../../../../src/core/sync/exclusive.rs.html\">exclusive.rs</a><a href=\"../../../../src/core/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>task</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/task/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/task/poll.rs.html\">poll.rs</a><a href=\"../../../../src/core/task/ready.rs.html\">ready.rs</a><a href=\"../../../../src/core/task/wake.rs.html\">wake.rs</a></div></details><details class=\"dir-entry\"><summary>unicode</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/core/unicode/mod.rs.html\">mod.rs</a><a href=\"../../../../src/core/unicode/printable.rs.html\">printable.rs</a><a href=\"../../../../src/core/unicode/unicode_data.rs.html\">unicode_data.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/core/any.rs.html\">any.rs</a><a href=\"../../../../src/core/arch.rs.html\">arch.rs</a><a href=\"../../../../src/core/ascii.rs.html\">ascii.rs</a><a href=\"../../../../src/core/asserting.rs.html\">asserting.rs</a><a href=\"../../../../src/core/bool.rs.html\">bool.rs</a><a href=\"../../../../src/core/borrow.rs.html\">borrow.rs</a><a href=\"../../../../src/core/cell.rs.html\">cell.rs</a><a href=\"../../../../src/core/clone.rs.html\">clone.rs</a><a href=\"../../../../src/core/cmp.rs.html\">cmp.rs</a><a href=\"../../../../src/core/default.rs.html\">default.rs</a><a href=\"../../../../src/core/error.rs.html\">error.rs</a><a href=\"../../../../src/core/escape.rs.html\">escape.rs</a><a href=\"../../../../src/core/hint.rs.html\">hint.rs</a><a href=\"../../../../src/core/internal_macros.rs.html\">internal_macros.rs</a><a href=\"../../../../src/core/intrinsics.rs.html\">intrinsics.rs</a><a href=\"../../../../src/core/lib.rs.html\">lib.rs</a><a href=\"../../../../src/core/marker.rs.html\">marker.rs</a><a href=\"../../../../src/core/option.rs.html\">option.rs</a><a href=\"../../../../src/core/panic.rs.html\">panic.rs</a><a href=\"../../../../src/core/panicking.rs.html\">panicking.rs</a><a href=\"../../../../src/core/pat.rs.html\">pat.rs</a><a href=\"../../../../src/core/pin.rs.html\">pin.rs</a><a href=\"../../../../src/core/primitive.rs.html\">primitive.rs</a><a href=\"../../../../src/core/primitive_docs.rs.html\">primitive_docs.rs</a><a href=\"../../../../src/core/result.rs.html\">result.rs</a><a href=\"../../../../src/core/time.rs.html\">time.rs</a><a href=\"../../../../src/core/tuple.rs.html\">tuple.rs</a><a href=\"../../../../src/core/ub_checks.rs.html\">ub_checks.rs</a><a href=\"../../../../src/core/unit.rs.html\">unit.rs</a></div></details><details class=\"dir-entry\"><summary>proc_macro</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bridge</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/proc_macro/bridge/arena.rs.html\">arena.rs</a><a href=\"../../../../src/proc_macro/bridge/buffer.rs.html\">buffer.rs</a><a href=\"../../../../src/proc_macro/bridge/client.rs.html\">client.rs</a><a href=\"../../../../src/proc_macro/bridge/closure.rs.html\">closure.rs</a><a href=\"../../../../src/proc_macro/bridge/fxhash.rs.html\">fxhash.rs</a><a href=\"../../../../src/proc_macro/bridge/handle.rs.html\">handle.rs</a><a href=\"../../../../src/proc_macro/bridge/mod.rs.html\">mod.rs</a><a href=\"../../../../src/proc_macro/bridge/rpc.rs.html\">rpc.rs</a><a href=\"../../../../src/proc_macro/bridge/selfless_reify.rs.html\">selfless_reify.rs</a><a href=\"../../../../src/proc_macro/bridge/server.rs.html\">server.rs</a><a href=\"../../../../src/proc_macro/bridge/symbol.rs.html\">symbol.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/proc_macro/diagnostic.rs.html\">diagnostic.rs</a><a href=\"../../../../src/proc_macro/lib.rs.html\">lib.rs</a><a href=\"../../../../src/proc_macro/quote.rs.html\">quote.rs</a></div></details><details class=\"dir-entry\"><summary>std</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/backtrace/src/backtrace/libunwind.rs.html\">libunwind.rs</a><a href=\"../../../../src/std/backtrace/src/backtrace/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>symbolize</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>gimli</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/backtrace/src/symbolize/gimli/elf.rs.html\">elf.rs</a><a href=\"../../../../src/std/backtrace/src/symbolize/gimli/libs_dl_iterate_phdr.rs.html\">libs_dl_iterate_phdr.rs</a><a href=\"../../../../src/std/backtrace/src/symbolize/gimli/mmap_unix.rs.html\">mmap_unix.rs</a><a href=\"../../../../src/std/backtrace/src/symbolize/gimli/parse_running_mmaps_unix.rs.html\">parse_running_mmaps_unix.rs</a><a href=\"../../../../src/std/backtrace/src/symbolize/gimli/stash.rs.html\">stash.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/backtrace/src/symbolize/gimli.rs.html\">gimli.rs</a><a href=\"../../../../src/std/backtrace/src/symbolize/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/backtrace/src/lib.rs.html\">lib.rs</a><a href=\"../../../../src/std/backtrace/src/print.rs.html\">print.rs</a><a href=\"../../../../src/std/backtrace/src/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/collections/hash/map.rs.html\">map.rs</a><a href=\"../../../../src/std/collections/hash/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/collections/hash/set.rs.html\">set.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/core/src/primitive_docs.rs.html\">primitive_docs.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../../src/std/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/hash/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/hash/random.rs.html\">random.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>buffered</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bufreader</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/io/buffered/bufreader/buffer.rs.html\">buffer.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/io/buffered/bufreader.rs.html\">bufreader.rs</a><a href=\"../../../../src/std/io/buffered/bufwriter.rs.html\">bufwriter.rs</a><a href=\"../../../../src/std/io/buffered/linewriter.rs.html\">linewriter.rs</a><a href=\"../../../../src/std/io/buffered/linewritershim.rs.html\">linewritershim.rs</a><a href=\"../../../../src/std/io/buffered/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>error</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/io/error/repr_bitpacked.rs.html\">repr_bitpacked.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/io/copy.rs.html\">copy.rs</a><a href=\"../../../../src/std/io/cursor.rs.html\">cursor.rs</a><a href=\"../../../../src/std/io/error.rs.html\">error.rs</a><a href=\"../../../../src/std/io/impls.rs.html\">impls.rs</a><a href=\"../../../../src/std/io/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/io/prelude.rs.html\">prelude.rs</a><a href=\"../../../../src/std/io/stdio.rs.html\">stdio.rs</a><a href=\"../../../../src/std/io/util.rs.html\">util.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../../src/std/net/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/net/socket_addr.rs.html\">socket_addr.rs</a><a href=\"../../../../src/std/net/tcp.rs.html\">tcp.rs</a><a href=\"../../../../src/std/net/udp.rs.html\">udp.rs</a></div></details><details class=\"dir-entry\"><summary>os</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fd</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/os/fd/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/os/fd/net.rs.html\">net.rs</a><a href=\"../../../../src/std/os/fd/owned.rs.html\">owned.rs</a><a href=\"../../../../src/std/os/fd/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>linux</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/os/linux/fs.rs.html\">fs.rs</a><a href=\"../../../../src/std/os/linux/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/os/linux/net.rs.html\">net.rs</a><a href=\"../../../../src/std/os/linux/process.rs.html\">process.rs</a><a href=\"../../../../src/std/os/linux/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>linux_ext</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/os/net/linux_ext/addr.rs.html\">addr.rs</a><a href=\"../../../../src/std/os/net/linux_ext/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/os/net/linux_ext/socket.rs.html\">socket.rs</a><a href=\"../../../../src/std/os/net/linux_ext/tcp.rs.html\">tcp.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/os/net/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>raw</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/os/raw/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/os/unix/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/os/unix/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/os/unix/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/os/unix/net/addr.rs.html\">addr.rs</a><a href=\"../../../../src/std/os/unix/net/ancillary.rs.html\">ancillary.rs</a><a href=\"../../../../src/std/os/unix/net/datagram.rs.html\">datagram.rs</a><a href=\"../../../../src/std/os/unix/net/listener.rs.html\">listener.rs</a><a href=\"../../../../src/std/os/unix/net/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/os/unix/net/stream.rs.html\">stream.rs</a><a href=\"../../../../src/std/os/unix/net/ucred.rs.html\">ucred.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/os/unix/fs.rs.html\">fs.rs</a><a href=\"../../../../src/std/os/unix/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/os/unix/process.rs.html\">process.rs</a><a href=\"../../../../src/std/os/unix/raw.rs.html\">raw.rs</a><a href=\"../../../../src/std/os/unix/thread.rs.html\">thread.rs</a></div></details><details class=\"dir-entry\"><summary>wasi</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/os/wasi/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/os/wasi/net/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/os/wasi/ffi.rs.html\">ffi.rs</a><a href=\"../../../../src/std/os/wasi/fs.rs.html\">fs.rs</a><a href=\"../../../../src/std/os/wasi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>wasip2</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/os/wasip2/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>windows</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/os/windows/io/handle.rs.html\">handle.rs</a><a href=\"../../../../src/std/os/windows/io/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/os/windows/io/raw.rs.html\">raw.rs</a><a href=\"../../../../src/std/os/windows/io/socket.rs.html\">socket.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/os/windows/ffi.rs.html\">ffi.rs</a><a href=\"../../../../src/std/os/windows/fs.rs.html\">fs.rs</a><a href=\"../../../../src/std/os/windows/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/os/windows/process.rs.html\">process.rs</a><a href=\"../../../../src/std/os/windows/raw.rs.html\">raw.rs</a><a href=\"../../../../src/std/os/windows/thread.rs.html\">thread.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/os/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>std_float</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/portable-simd/crates/std_float/src/lib.rs.html\">lib.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/prelude/common.rs.html\">common.rs</a><a href=\"../../../../src/std/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>mpmc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/sync/mpmc/array.rs.html\">array.rs</a><a href=\"../../../../src/std/sync/mpmc/context.rs.html\">context.rs</a><a href=\"../../../../src/std/sync/mpmc/counter.rs.html\">counter.rs</a><a href=\"../../../../src/std/sync/mpmc/error.rs.html\">error.rs</a><a href=\"../../../../src/std/sync/mpmc/list.rs.html\">list.rs</a><a href=\"../../../../src/std/sync/mpmc/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/sync/mpmc/select.rs.html\">select.rs</a><a href=\"../../../../src/std/sync/mpmc/utils.rs.html\">utils.rs</a><a href=\"../../../../src/std/sync/mpmc/waker.rs.html\">waker.rs</a><a href=\"../../../../src/std/sync/mpmc/zero.rs.html\">zero.rs</a></div></details><details class=\"dir-entry\"><summary>mpsc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/sync/mpsc/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/sync/barrier.rs.html\">barrier.rs</a><a href=\"../../../../src/std/sync/condvar.rs.html\">condvar.rs</a><a href=\"../../../../src/std/sync/lazy_lock.rs.html\">lazy_lock.rs</a><a href=\"../../../../src/std/sync/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/sync/mutex.rs.html\">mutex.rs</a><a href=\"../../../../src/std/sync/once.rs.html\">once.rs</a><a href=\"../../../../src/std/sync/once_lock.rs.html\">once_lock.rs</a><a href=\"../../../../src/std/sync/poison.rs.html\">poison.rs</a><a href=\"../../../../src/std/sync/reentrant_lock.rs.html\">reentrant_lock.rs</a><a href=\"../../../../src/std/sync/rwlock.rs.html\">rwlock.rs</a></div></details><details class=\"dir-entry\"><summary>sys</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>os_str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/sys/os_str/bytes.rs.html\">bytes.rs</a><a href=\"../../../../src/std/sys/os_str/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>pal</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/sys/pal/common/alloc.rs.html\">alloc.rs</a><a href=\"../../../../src/std/sys/pal/common/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/sys/pal/common/small_c_string.rs.html\">small_c_string.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>process</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/sys/pal/unix/process/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/sys/pal/unix/process/process_common.rs.html\">process_common.rs</a><a href=\"../../../../src/std/sys/pal/unix/process/process_unix.rs.html\">process_unix.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/sys/pal/unix/alloc.rs.html\">alloc.rs</a><a href=\"../../../../src/std/sys/pal/unix/args.rs.html\">args.rs</a><a href=\"../../../../src/std/sys/pal/unix/env.rs.html\">env.rs</a><a href=\"../../../../src/std/sys/pal/unix/fd.rs.html\">fd.rs</a><a href=\"../../../../src/std/sys/pal/unix/fs.rs.html\">fs.rs</a><a href=\"../../../../src/std/sys/pal/unix/futex.rs.html\">futex.rs</a><a href=\"../../../../src/std/sys/pal/unix/io.rs.html\">io.rs</a><a href=\"../../../../src/std/sys/pal/unix/kernel_copy.rs.html\">kernel_copy.rs</a><a href=\"../../../../src/std/sys/pal/unix/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/sys/pal/unix/net.rs.html\">net.rs</a><a href=\"../../../../src/std/sys/pal/unix/os.rs.html\">os.rs</a><a href=\"../../../../src/std/sys/pal/unix/pipe.rs.html\">pipe.rs</a><a href=\"../../../../src/std/sys/pal/unix/rand.rs.html\">rand.rs</a><a href=\"../../../../src/std/sys/pal/unix/stack_overflow.rs.html\">stack_overflow.rs</a><a href=\"../../../../src/std/sys/pal/unix/stdio.rs.html\">stdio.rs</a><a href=\"../../../../src/std/sys/pal/unix/thread.rs.html\">thread.rs</a><a href=\"../../../../src/std/sys/pal/unix/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../../src/std/sys/pal/unix/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../../src/std/sys/pal/unix/time.rs.html\">time.rs</a><a href=\"../../../../src/std/sys/pal/unix/weak.rs.html\">weak.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/sys/pal/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>path</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/sys/path/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/sys/path/unix.rs.html\">unix.rs</a></div></details><details class=\"dir-entry\"><summary>personality</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dwarf</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/sys/personality/dwarf/eh.rs.html\">eh.rs</a><a href=\"../../../../src/std/sys/personality/dwarf/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/sys/personality/gcc.rs.html\">gcc.rs</a><a href=\"../../../../src/std/sys/personality/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>condvar</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/sys/sync/condvar/futex.rs.html\">futex.rs</a><a href=\"../../../../src/std/sys/sync/condvar/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mutex</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/sys/sync/mutex/futex.rs.html\">futex.rs</a><a href=\"../../../../src/std/sys/sync/mutex/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>once</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/sys/sync/once/futex.rs.html\">futex.rs</a><a href=\"../../../../src/std/sys/sync/once/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>rwlock</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/sys/sync/rwlock/futex.rs.html\">futex.rs</a><a href=\"../../../../src/std/sys/sync/rwlock/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_parking</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/sys/sync/thread_parking/futex.rs.html\">futex.rs</a><a href=\"../../../../src/std/sys/sync/thread_parking/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/sys/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_local</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fast_local</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/sys/thread_local/fast_local/eager.rs.html\">eager.rs</a><a href=\"../../../../src/std/sys/thread_local/fast_local/lazy.rs.html\">lazy.rs</a><a href=\"../../../../src/std/sys/thread_local/fast_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/sys/thread_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/sys/cmath.rs.html\">cmath.rs</a><a href=\"../../../../src/std/sys/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sys_common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/sys_common/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../../src/std/sys_common/fs.rs.html\">fs.rs</a><a href=\"../../../../src/std/sys_common/io.rs.html\">io.rs</a><a href=\"../../../../src/std/sys_common/lazy_box.rs.html\">lazy_box.rs</a><a href=\"../../../../src/std/sys_common/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/sys_common/net.rs.html\">net.rs</a><a href=\"../../../../src/std/sys_common/process.rs.html\">process.rs</a><a href=\"../../../../src/std/sys_common/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../../src/std/sys_common/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../../src/std/sys_common/wstr.rs.html\">wstr.rs</a><a href=\"../../../../src/std/sys_common/wtf8.rs.html\">wtf8.rs</a></div></details><details class=\"dir-entry\"><summary>thread</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/std/thread/local.rs.html\">local.rs</a><a href=\"../../../../src/std/thread/mod.rs.html\">mod.rs</a><a href=\"../../../../src/std/thread/scoped.rs.html\">scoped.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/std/alloc.rs.html\">alloc.rs</a><a href=\"../../../../src/std/ascii.rs.html\">ascii.rs</a><a href=\"../../../../src/std/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../../src/std/env.rs.html\">env.rs</a><a href=\"../../../../src/std/error.rs.html\">error.rs</a><a href=\"../../../../src/std/f128.rs.html\">f128.rs</a><a href=\"../../../../src/std/f16.rs.html\">f16.rs</a><a href=\"../../../../src/std/f32.rs.html\">f32.rs</a><a href=\"../../../../src/std/f64.rs.html\">f64.rs</a><a href=\"../../../../src/std/fs.rs.html\">fs.rs</a><a href=\"../../../../src/std/keyword_docs.rs.html\">keyword_docs.rs</a><a href=\"../../../../src/std/lib.rs.html\">lib.rs</a><a href=\"../../../../src/std/macros.rs.html\">macros.rs</a><a href=\"../../../../src/std/num.rs.html\">num.rs</a><a href=\"../../../../src/std/panic.rs.html\">panic.rs</a><a href=\"../../../../src/std/panicking.rs.html\">panicking.rs</a><a href=\"../../../../src/std/pat.rs.html\">pat.rs</a><a href=\"../../../../src/std/path.rs.html\">path.rs</a><a href=\"../../../../src/std/process.rs.html\">process.rs</a><a href=\"../../../../src/std/rt.rs.html\">rt.rs</a><a href=\"../../../../src/std/time.rs.html\">time.rs</a></div></details><details class=\"dir-entry\"><summary>test</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>formatters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/test/formatters/json.rs.html\">json.rs</a><a href=\"../../../../src/test/formatters/junit.rs.html\">junit.rs</a><a href=\"../../../../src/test/formatters/mod.rs.html\">mod.rs</a><a href=\"../../../../src/test/formatters/pretty.rs.html\">pretty.rs</a><a href=\"../../../../src/test/formatters/terse.rs.html\">terse.rs</a></div></details><details class=\"dir-entry\"><summary>helpers</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/test/helpers/concurrency.rs.html\">concurrency.rs</a><a href=\"../../../../src/test/helpers/metrics.rs.html\">metrics.rs</a><a href=\"../../../../src/test/helpers/mod.rs.html\">mod.rs</a><a href=\"../../../../src/test/helpers/shuffle.rs.html\">shuffle.rs</a></div></details><details class=\"dir-entry\"><summary>term</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>terminfo</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>parser</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../src/test/term/terminfo/parser/compiled.rs.html\">compiled.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../src/test/term/terminfo/mod.rs.html\">mod.rs</a><a href=\"../../../../src/test/term/terminfo/parm.rs.html\">parm.rs</a><a href=\"../../../../src/test/term/terminfo/searcher.rs.html\">searcher.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"><a href=\"../../../../src/test/bench.rs.html\">bench.rs</a><a href=\"../../../../src/test/cli.rs.html\">cli.rs</a><a href=\"../../../../src/test/console.rs.html\">console.rs</a><a href=\"../../../../src/test/event.rs.html\">event.rs</a><a href=\"../../../../src/test/lib.rs.html\">lib.rs</a><a href=\"../../../../src/test/options.rs.html\">options.rs</a><a href=\"../../../../src/test/stats.rs.html\">stats.rs</a><a href=\"../../../../src/test/term.rs.html\">term.rs</a><a href=\"../../../../src/test/test_result.rs.html\">test_result.rs</a><a href=\"../../../../src/test/time.rs.html\">time.rs</a><a href=\"../../../../src/test/types.rs.html\">types.rs</a></div></details></div></nav><div class=\"sidebar-resizer\"></div><main><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../core/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"example-wrap\"><div data-nosnippet=\"\"><pre class=\"src-line-numbers\"><a href=\"#1\" id=\"1\">1</a>\n<a href=\"#2\" id=\"2\">2</a>\n<a href=\"#3\" id=\"3\">3</a>\n<a href=\"#4\" id=\"4\">4</a>\n<a href=\"#5\" id=\"5\">5</a>\n<a href=\"#6\" id=\"6\">6</a>\n<a href=\"#7\" id=\"7\">7</a>\n<a href=\"#8\" id=\"8\">8</a>\n<a href=\"#9\" id=\"9\">9</a>\n<a href=\"#10\" id=\"10\">10</a>\n<a href=\"#11\" id=\"11\">11</a>\n<a href=\"#12\" id=\"12\">12</a>\n<a href=\"#13\" id=\"13\">13</a>\n<a href=\"#14\" id=\"14\">14</a>\n<a href=\"#15\" id=\"15\">15</a>\n<a href=\"#16\" id=\"16\">16</a>\n<a href=\"#17\" id=\"17\">17</a>\n<a href=\"#18\" id=\"18\">18</a>\n<a href=\"#19\" id=\"19\">19</a>\n<a href=\"#20\" id=\"20\">20</a>\n<a href=\"#21\" id=\"21\">21</a>\n<a href=\"#22\" id=\"22\">22</a>\n<a href=\"#23\" id=\"23\">23</a>\n<a href=\"#24\" id=\"24\">24</a>\n<a href=\"#25\" id=\"25\">25</a>\n<a href=\"#26\" id=\"26\">26</a>\n<a href=\"#27\" id=\"27\">27</a>\n<a href=\"#28\" id=\"28\">28</a>\n<a href=\"#29\" id=\"29\">29</a>\n<a href=\"#30\" id=\"30\">30</a>\n<a href=\"#31\" id=\"31\">31</a>\n<a href=\"#32\" id=\"32\">32</a>\n<a href=\"#33\" id=\"33\">33</a>\n<a href=\"#34\" id=\"34\">34</a>\n<a href=\"#35\" id=\"35\">35</a>\n<a href=\"#36\" id=\"36\">36</a>\n<a href=\"#37\" id=\"37\">37</a>\n<a href=\"#38\" id=\"38\">38</a>\n<a href=\"#39\" id=\"39\">39</a>\n<a href=\"#40\" id=\"40\">40</a>\n<a href=\"#41\" id=\"41\">41</a>\n<a href=\"#42\" id=\"42\">42</a>\n<a href=\"#43\" id=\"43\">43</a>\n<a href=\"#44\" id=\"44\">44</a>\n<a href=\"#45\" id=\"45\">45</a>\n<a href=\"#46\" id=\"46\">46</a>\n<a href=\"#47\" id=\"47\">47</a>\n<a href=\"#48\" id=\"48\">48</a>\n<a href=\"#49\" id=\"49\">49</a>\n<a href=\"#50\" id=\"50\">50</a>\n<a href=\"#51\" id=\"51\">51</a>\n<a href=\"#52\" id=\"52\">52</a>\n<a href=\"#53\" id=\"53\">53</a>\n<a href=\"#54\" id=\"54\">54</a>\n<a href=\"#55\" id=\"55\">55</a>\n<a href=\"#56\" id=\"56\">56</a>\n<a href=\"#57\" id=\"57\">57</a>\n<a href=\"#58\" id=\"58\">58</a>\n<a href=\"#59\" id=\"59\">59</a>\n<a href=\"#60\" id=\"60\">60</a>\n<a href=\"#61\" id=\"61\">61</a>\n<a href=\"#62\" id=\"62\">62</a>\n<a href=\"#63\" id=\"63\">63</a>\n<a href=\"#64\" id=\"64\">64</a>\n<a href=\"#65\" id=\"65\">65</a>\n<a href=\"#66\" id=\"66\">66</a>\n<a href=\"#67\" id=\"67\">67</a>\n<a href=\"#68\" id=\"68\">68</a>\n<a href=\"#69\" id=\"69\">69</a>\n<a href=\"#70\" id=\"70\">70</a>\n<a href=\"#71\" id=\"71\">71</a>\n<a href=\"#72\" id=\"72\">72</a>\n<a href=\"#73\" id=\"73\">73</a>\n<a href=\"#74\" id=\"74\">74</a>\n<a href=\"#75\" id=\"75\">75</a>\n<a href=\"#76\" id=\"76\">76</a>\n<a href=\"#77\" id=\"77\">77</a>\n<a href=\"#78\" id=\"78\">78</a>\n<a href=\"#79\" id=\"79\">79</a>\n<a href=\"#80\" id=\"80\" class=\"line-highlighted\">80</a>\n<a href=\"#81\" id=\"81\">81</a>\n<a href=\"#82\" id=\"82\">82</a>\n<a href=\"#83\" id=\"83\">83</a>\n<a href=\"#84\" id=\"84\">84</a>\n<a href=\"#85\" id=\"85\">85</a>\n<a href=\"#86\" id=\"86\">86</a>\n<a href=\"#87\" id=\"87\">87</a>\n<a href=\"#88\" id=\"88\">88</a>\n<a href=\"#89\" id=\"89\">89</a>\n<a href=\"#90\" id=\"90\">90</a>\n<a href=\"#91\" id=\"91\">91</a>\n<a href=\"#92\" id=\"92\">92</a>\n<a href=\"#93\" id=\"93\">93</a>\n<a href=\"#94\" id=\"94\">94</a>\n<a href=\"#95\" id=\"95\">95</a>\n<a href=\"#96\" id=\"96\">96</a>\n<a href=\"#97\" id=\"97\">97</a>\n<a href=\"#98\" id=\"98\">98</a>\n<a href=\"#99\" id=\"99\">99</a>\n<a href=\"#100\" id=\"100\">100</a>\n<a href=\"#101\" id=\"101\">101</a>\n<a href=\"#102\" id=\"102\">102</a>\n<a href=\"#103\" id=\"103\">103</a>\n<a href=\"#104\" id=\"104\">104</a>\n<a href=\"#105\" id=\"105\">105</a>\n<a href=\"#106\" id=\"106\">106</a>\n<a href=\"#107\" id=\"107\">107</a>\n<a href=\"#108\" id=\"108\">108</a>\n<a href=\"#109\" id=\"109\">109</a>\n<a href=\"#110\" id=\"110\">110</a>\n<a href=\"#111\" id=\"111\">111</a>\n<a href=\"#112\" id=\"112\">112</a>\n<a href=\"#113\" id=\"113\">113</a>\n<a href=\"#114\" id=\"114\">114</a>\n<a href=\"#115\" id=\"115\">115</a>\n<a href=\"#116\" id=\"116\">116</a>\n<a href=\"#117\" id=\"117\">117</a>\n<a href=\"#118\" id=\"118\">118</a>\n<a href=\"#119\" id=\"119\">119</a>\n<a href=\"#120\" id=\"120\">120</a>\n<a href=\"#121\" id=\"121\">121</a>\n<a href=\"#122\" id=\"122\">122</a>\n<a href=\"#123\" id=\"123\">123</a>\n<a href=\"#124\" id=\"124\">124</a>\n<a href=\"#125\" id=\"125\">125</a>\n<a href=\"#126\" id=\"126\">126</a>\n<a href=\"#127\" id=\"127\">127</a>\n<a href=\"#128\" id=\"128\">128</a>\n<a href=\"#129\" id=\"129\">129</a>\n<a href=\"#130\" id=\"130\">130</a>\n<a href=\"#131\" id=\"131\">131</a>\n<a href=\"#132\" id=\"132\">132</a>\n<a href=\"#133\" id=\"133\">133</a>\n<a href=\"#134\" id=\"134\">134</a>\n<a href=\"#135\" id=\"135\">135</a>\n<a href=\"#136\" id=\"136\">136</a>\n<a href=\"#137\" id=\"137\">137</a>\n<a href=\"#138\" id=\"138\">138</a>\n<a href=\"#139\" id=\"139\">139</a>\n<a href=\"#140\" id=\"140\">140</a>\n<a href=\"#141\" id=\"141\">141</a>\n<a href=\"#142\" id=\"142\">142</a>\n<a href=\"#143\" id=\"143\">143</a>\n<a href=\"#144\" id=\"144\">144</a>\n<a href=\"#145\" id=\"145\">145</a>\n<a href=\"#146\" id=\"146\">146</a>\n<a href=\"#147\" id=\"147\">147</a>\n<a href=\"#148\" id=\"148\">148</a>\n<a href=\"#149\" id=\"149\">149</a>\n<a href=\"#150\" id=\"150\">150</a>\n<a href=\"#151\" id=\"151\">151</a>\n<a href=\"#152\" id=\"152\">152</a>\n<a href=\"#153\" id=\"153\">153</a>\n<a href=\"#154\" id=\"154\">154</a>\n<a href=\"#155\" id=\"155\">155</a>\n<a href=\"#156\" id=\"156\">156</a>\n<a href=\"#157\" id=\"157\">157</a>\n<a href=\"#158\" id=\"158\">158</a>\n<a href=\"#159\" id=\"159\">159</a>\n<a href=\"#160\" id=\"160\">160</a>\n<a href=\"#161\" id=\"161\">161</a>\n<a href=\"#162\" id=\"162\">162</a>\n<a href=\"#163\" id=\"163\">163</a>\n<a href=\"#164\" id=\"164\">164</a>\n<a href=\"#165\" id=\"165\">165</a>\n<a href=\"#166\" id=\"166\">166</a>\n<a href=\"#167\" id=\"167\">167</a>\n<a href=\"#168\" id=\"168\">168</a>\n<a href=\"#169\" id=\"169\">169</a>\n<a href=\"#170\" id=\"170\">170</a>\n<a href=\"#171\" id=\"171\">171</a>\n<a href=\"#172\" id=\"172\">172</a>\n<a href=\"#173\" id=\"173\">173</a>\n<a href=\"#174\" id=\"174\">174</a>\n<a href=\"#175\" id=\"175\">175</a>\n<a href=\"#176\" id=\"176\">176</a>\n<a href=\"#177\" id=\"177\">177</a>\n<a href=\"#178\" id=\"178\">178</a>\n<a href=\"#179\" id=\"179\">179</a>\n<a href=\"#180\" id=\"180\">180</a>\n<a href=\"#181\" id=\"181\">181</a>\n<a href=\"#182\" id=\"182\">182</a>\n<a href=\"#183\" id=\"183\">183</a>\n<a href=\"#184\" id=\"184\">184</a>\n<a href=\"#185\" id=\"185\">185</a>\n<a href=\"#186\" id=\"186\">186</a>\n<a href=\"#187\" id=\"187\">187</a>\n<a href=\"#188\" id=\"188\">188</a>\n<a href=\"#189\" id=\"189\">189</a>\n<a href=\"#190\" id=\"190\">190</a>\n<a href=\"#191\" id=\"191\">191</a>\n<a href=\"#192\" id=\"192\">192</a>\n<a href=\"#193\" id=\"193\">193</a>\n<a href=\"#194\" id=\"194\">194</a>\n<a href=\"#195\" id=\"195\">195</a>\n<a href=\"#196\" id=\"196\">196</a>\n<a href=\"#197\" id=\"197\">197</a>\n<a href=\"#198\" id=\"198\">198</a>\n<a href=\"#199\" id=\"199\">199</a>\n<a href=\"#200\" id=\"200\">200</a>\n<a href=\"#201\" id=\"201\">201</a>\n<a href=\"#202\" id=\"202\">202</a>\n<a href=\"#203\" id=\"203\">203</a>\n<a href=\"#204\" id=\"204\">204</a>\n<a href=\"#205\" id=\"205\">205</a>\n<a href=\"#206\" id=\"206\">206</a>\n<a href=\"#207\" id=\"207\">207</a>\n<a href=\"#208\" id=\"208\">208</a>\n<a href=\"#209\" id=\"209\">209</a>\n<a href=\"#210\" id=\"210\">210</a>\n<a href=\"#211\" id=\"211\">211</a>\n<a href=\"#212\" id=\"212\">212</a>\n<a href=\"#213\" id=\"213\">213</a>\n<a href=\"#214\" id=\"214\">214</a>\n<a href=\"#215\" id=\"215\">215</a>\n<a href=\"#216\" id=\"216\">216</a>\n<a href=\"#217\" id=\"217\">217</a>\n<a href=\"#218\" id=\"218\">218</a>\n<a href=\"#219\" id=\"219\">219</a>\n<a href=\"#220\" id=\"220\">220</a>\n<a href=\"#221\" id=\"221\">221</a>\n<a href=\"#222\" id=\"222\">222</a>\n<a href=\"#223\" id=\"223\">223</a>\n<a href=\"#224\" id=\"224\">224</a>\n<a href=\"#225\" id=\"225\">225</a>\n<a href=\"#226\" id=\"226\">226</a>\n<a href=\"#227\" id=\"227\">227</a>\n<a href=\"#228\" id=\"228\">228</a>\n<a href=\"#229\" id=\"229\">229</a>\n<a href=\"#230\" id=\"230\">230</a>\n<a href=\"#231\" id=\"231\">231</a>\n<a href=\"#232\" id=\"232\">232</a>\n<a href=\"#233\" id=\"233\">233</a>\n<a href=\"#234\" id=\"234\">234</a>\n<a href=\"#235\" id=\"235\">235</a>\n<a href=\"#236\" id=\"236\">236</a>\n<a href=\"#237\" id=\"237\">237</a>\n<a href=\"#238\" id=\"238\">238</a>\n<a href=\"#239\" id=\"239\">239</a>\n<a href=\"#240\" id=\"240\">240</a>\n<a href=\"#241\" id=\"241\">241</a>\n<a href=\"#242\" id=\"242\">242</a>\n<a href=\"#243\" id=\"243\">243</a>\n<a href=\"#244\" id=\"244\">244</a>\n<a href=\"#245\" id=\"245\">245</a>\n<a href=\"#246\" id=\"246\">246</a>\n<a href=\"#247\" id=\"247\">247</a>\n<a href=\"#248\" id=\"248\">248</a>\n<a href=\"#249\" id=\"249\">249</a>\n<a href=\"#250\" id=\"250\">250</a>\n<a href=\"#251\" id=\"251\">251</a>\n<a href=\"#252\" id=\"252\">252</a>\n<a href=\"#253\" id=\"253\">253</a>\n<a href=\"#254\" id=\"254\">254</a>\n<a href=\"#255\" id=\"255\">255</a>\n<a href=\"#256\" id=\"256\">256</a>\n<a href=\"#257\" id=\"257\">257</a>\n<a href=\"#258\" id=\"258\">258</a>\n<a href=\"#259\" id=\"259\">259</a>\n<a href=\"#260\" id=\"260\">260</a>\n<a href=\"#261\" id=\"261\">261</a>\n<a href=\"#262\" id=\"262\">262</a>\n<a href=\"#263\" id=\"263\">263</a>\n<a href=\"#264\" id=\"264\">264</a>\n<a href=\"#265\" id=\"265\">265</a>\n<a href=\"#266\" id=\"266\">266</a>\n<a href=\"#267\" id=\"267\">267</a>\n<a href=\"#268\" id=\"268\">268</a>\n<a href=\"#269\" id=\"269\">269</a>\n<a href=\"#270\" id=\"270\">270</a>\n<a href=\"#271\" id=\"271\">271</a>\n<a href=\"#272\" id=\"272\">272</a>\n<a href=\"#273\" id=\"273\">273</a>\n<a href=\"#274\" id=\"274\">274</a>\n<a href=\"#275\" id=\"275\">275</a>\n<a href=\"#276\" id=\"276\">276</a>\n<a href=\"#277\" id=\"277\">277</a>\n<a href=\"#278\" id=\"278\">278</a>\n<a href=\"#279\" id=\"279\">279</a>\n<a href=\"#280\" id=\"280\">280</a>\n<a href=\"#281\" id=\"281\">281</a>\n<a href=\"#282\" id=\"282\">282</a>\n<a href=\"#283\" id=\"283\">283</a>\n<a href=\"#284\" id=\"284\">284</a>\n<a href=\"#285\" id=\"285\">285</a>\n<a href=\"#286\" id=\"286\">286</a>\n<a href=\"#287\" id=\"287\">287</a>\n<a href=\"#288\" id=\"288\">288</a>\n<a href=\"#289\" id=\"289\">289</a>\n<a href=\"#290\" id=\"290\">290</a>\n<a href=\"#291\" id=\"291\">291</a>\n<a href=\"#292\" id=\"292\">292</a>\n<a href=\"#293\" id=\"293\">293</a>\n<a href=\"#294\" id=\"294\">294</a>\n<a href=\"#295\" id=\"295\">295</a>\n<a href=\"#296\" id=\"296\">296</a>\n<a href=\"#297\" id=\"297\">297</a>\n<a href=\"#298\" id=\"298\">298</a>\n<a href=\"#299\" id=\"299\">299</a>\n<a href=\"#300\" id=\"300\">300</a>\n<a href=\"#301\" id=\"301\">301</a>\n<a href=\"#302\" id=\"302\">302</a>\n<a href=\"#303\" id=\"303\">303</a>\n<a href=\"#304\" id=\"304\">304</a>\n<a href=\"#305\" id=\"305\">305</a>\n<a href=\"#306\" id=\"306\">306</a>\n<a href=\"#307\" id=\"307\">307</a>\n<a href=\"#308\" id=\"308\">308</a>\n<a href=\"#309\" id=\"309\">309</a>\n<a href=\"#310\" id=\"310\">310</a>\n<a href=\"#311\" id=\"311\">311</a>\n<a href=\"#312\" id=\"312\">312</a>\n<a href=\"#313\" id=\"313\">313</a>\n<a href=\"#314\" id=\"314\">314</a>\n<a href=\"#315\" id=\"315\">315</a>\n<a href=\"#316\" id=\"316\">316</a>\n<a href=\"#317\" id=\"317\">317</a>\n<a href=\"#318\" id=\"318\">318</a>\n<a href=\"#319\" id=\"319\">319</a>\n<a href=\"#320\" id=\"320\">320</a>\n<a href=\"#321\" id=\"321\">321</a>\n<a href=\"#322\" id=\"322\">322</a>\n<a href=\"#323\" id=\"323\">323</a>\n<a href=\"#324\" id=\"324\">324</a>\n<a href=\"#325\" id=\"325\">325</a>\n<a href=\"#326\" id=\"326\">326</a>\n<a href=\"#327\" id=\"327\">327</a>\n<a href=\"#328\" id=\"328\">328</a>\n<a href=\"#329\" id=\"329\">329</a>\n<a href=\"#330\" id=\"330\">330</a>\n<a href=\"#331\" id=\"331\">331</a>\n<a href=\"#332\" id=\"332\">332</a>\n<a href=\"#333\" id=\"333\">333</a>\n<a href=\"#334\" id=\"334\">334</a>\n<a href=\"#335\" id=\"335\">335</a>\n<a href=\"#336\" id=\"336\">336</a>\n<a href=\"#337\" id=\"337\">337</a>\n<a href=\"#338\" id=\"338\">338</a>\n<a href=\"#339\" id=\"339\">339</a>\n<a href=\"#340\" id=\"340\">340</a>\n<a href=\"#341\" id=\"341\">341</a>\n<a href=\"#342\" id=\"342\">342</a>\n<a href=\"#343\" id=\"343\">343</a>\n<a href=\"#344\" id=\"344\">344</a>\n<a href=\"#345\" id=\"345\">345</a>\n<a href=\"#346\" id=\"346\">346</a>\n<a href=\"#347\" id=\"347\">347</a>\n<a href=\"#348\" id=\"348\">348</a>\n<a href=\"#349\" id=\"349\">349</a>\n<a href=\"#350\" id=\"350\">350</a>\n<a href=\"#351\" id=\"351\">351</a>\n<a href=\"#352\" id=\"352\">352</a>\n<a href=\"#353\" id=\"353\">353</a>\n<a href=\"#354\" id=\"354\">354</a>\n<a href=\"#355\" id=\"355\">355</a>\n<a href=\"#356\" id=\"356\">356</a>\n<a href=\"#357\" id=\"357\">357</a>\n<a href=\"#358\" id=\"358\">358</a>\n<a href=\"#359\" id=\"359\">359</a>\n<a href=\"#360\" id=\"360\">360</a>\n<a href=\"#361\" id=\"361\">361</a>\n<a href=\"#362\" id=\"362\">362</a>\n<a href=\"#363\" id=\"363\">363</a>\n<a href=\"#364\" id=\"364\">364</a>\n<a href=\"#365\" id=\"365\">365</a>\n<a href=\"#366\" id=\"366\">366</a>\n<a href=\"#367\" id=\"367\">367</a>\n<a href=\"#368\" id=\"368\">368</a>\n<a href=\"#369\" id=\"369\">369</a>\n<a href=\"#370\" id=\"370\">370</a>\n<a href=\"#371\" id=\"371\">371</a>\n<a href=\"#372\" id=\"372\">372</a>\n<a href=\"#373\" id=\"373\">373</a>\n<a href=\"#374\" id=\"374\">374</a>\n<a href=\"#375\" id=\"375\">375</a>\n<a href=\"#376\" id=\"376\">376</a>\n<a href=\"#377\" id=\"377\">377</a>\n<a href=\"#378\" id=\"378\">378</a>\n<a href=\"#379\" id=\"379\">379</a>\n<a href=\"#380\" id=\"380\">380</a>\n<a href=\"#381\" id=\"381\">381</a>\n<a href=\"#382\" id=\"382\">382</a>\n<a href=\"#383\" id=\"383\">383</a>\n<a href=\"#384\" id=\"384\">384</a>\n<a href=\"#385\" id=\"385\">385</a>\n<a href=\"#386\" id=\"386\">386</a>\n<a href=\"#387\" id=\"387\">387</a>\n<a href=\"#388\" id=\"388\">388</a>\n<a href=\"#389\" id=\"389\">389</a>\n<a href=\"#390\" id=\"390\">390</a>\n<a href=\"#391\" id=\"391\">391</a>\n<a href=\"#392\" id=\"392\">392</a>\n<a href=\"#393\" id=\"393\">393</a>\n<a href=\"#394\" id=\"394\">394</a>\n<a href=\"#395\" id=\"395\">395</a>\n<a href=\"#396\" id=\"396\">396</a>\n<a href=\"#397\" id=\"397\">397</a>\n<a href=\"#398\" id=\"398\">398</a>\n<a href=\"#399\" id=\"399\">399</a>\n<a href=\"#400\" id=\"400\">400</a>\n<a href=\"#401\" id=\"401\">401</a>\n<a href=\"#402\" id=\"402\">402</a>\n<a href=\"#403\" id=\"403\">403</a>\n<a href=\"#404\" id=\"404\">404</a>\n<a href=\"#405\" id=\"405\">405</a>\n<a href=\"#406\" id=\"406\">406</a>\n<a href=\"#407\" id=\"407\">407</a>\n<a href=\"#408\" id=\"408\">408</a>\n<a href=\"#409\" id=\"409\">409</a>\n<a href=\"#410\" id=\"410\">410</a>\n<a href=\"#411\" id=\"411\">411</a>\n<a href=\"#412\" id=\"412\">412</a>\n<a href=\"#413\" id=\"413\">413</a>\n<a href=\"#414\" id=\"414\">414</a>\n<a href=\"#415\" id=\"415\">415</a>\n<a href=\"#416\" id=\"416\">416</a>\n<a href=\"#417\" id=\"417\">417</a>\n<a href=\"#418\" id=\"418\">418</a>\n<a href=\"#419\" id=\"419\">419</a>\n<a href=\"#420\" id=\"420\">420</a>\n<a href=\"#421\" id=\"421\">421</a>\n<a href=\"#422\" id=\"422\">422</a>\n<a href=\"#423\" id=\"423\">423</a>\n<a href=\"#424\" id=\"424\">424</a>\n<a href=\"#425\" id=\"425\">425</a>\n<a href=\"#426\" id=\"426\">426</a>\n<a href=\"#427\" id=\"427\">427</a>\n<a href=\"#428\" id=\"428\">428</a>\n<a href=\"#429\" id=\"429\">429</a>\n<a href=\"#430\" id=\"430\">430</a>\n<a href=\"#431\" id=\"431\">431</a>\n<a href=\"#432\" id=\"432\">432</a>\n<a href=\"#433\" id=\"433\">433</a>\n<a href=\"#434\" id=\"434\">434</a>\n<a href=\"#435\" id=\"435\">435</a>\n<a href=\"#436\" id=\"436\">436</a>\n<a href=\"#437\" id=\"437\">437</a>\n<a href=\"#438\" id=\"438\">438</a>\n<a href=\"#439\" id=\"439\">439</a>\n<a href=\"#440\" id=\"440\">440</a>\n<a href=\"#441\" id=\"441\">441</a>\n<a href=\"#442\" id=\"442\">442</a>\n<a href=\"#443\" id=\"443\">443</a>\n<a href=\"#444\" id=\"444\">444</a>\n<a href=\"#445\" id=\"445\">445</a>\n<a href=\"#446\" id=\"446\">446</a>\n<a href=\"#447\" id=\"447\">447</a>\n<a href=\"#448\" id=\"448\">448</a>\n<a href=\"#449\" id=\"449\">449</a>\n<a href=\"#450\" id=\"450\">450</a>\n<a href=\"#451\" id=\"451\">451</a>\n<a href=\"#452\" id=\"452\">452</a>\n<a href=\"#453\" id=\"453\">453</a>\n<a href=\"#454\" id=\"454\">454</a>\n<a href=\"#455\" id=\"455\">455</a>\n<a href=\"#456\" id=\"456\">456</a>\n<a href=\"#457\" id=\"457\">457</a>\n<a href=\"#458\" id=\"458\">458</a>\n<a href=\"#459\" id=\"459\">459</a>\n<a href=\"#460\" id=\"460\">460</a>\n<a href=\"#461\" id=\"461\">461</a>\n<a href=\"#462\" id=\"462\">462</a>\n<a href=\"#463\" id=\"463\">463</a>\n<a href=\"#464\" id=\"464\">464</a>\n<a href=\"#465\" id=\"465\">465</a>\n<a href=\"#466\" id=\"466\">466</a>\n<a href=\"#467\" id=\"467\">467</a>\n<a href=\"#468\" id=\"468\">468</a>\n<a href=\"#469\" id=\"469\">469</a>\n<a href=\"#470\" id=\"470\">470</a>\n<a href=\"#471\" id=\"471\">471</a>\n<a href=\"#472\" id=\"472\">472</a>\n<a href=\"#473\" id=\"473\">473</a>\n<a href=\"#474\" id=\"474\">474</a>\n<a href=\"#475\" id=\"475\">475</a>\n<a href=\"#476\" id=\"476\">476</a>\n<a href=\"#477\" id=\"477\">477</a>\n<a href=\"#478\" id=\"478\">478</a>\n<a href=\"#479\" id=\"479\">479</a>\n<a href=\"#480\" id=\"480\">480</a>\n<a href=\"#481\" id=\"481\">481</a>\n<a href=\"#482\" id=\"482\">482</a>\n<a href=\"#483\" id=\"483\">483</a>\n<a href=\"#484\" id=\"484\">484</a>\n<a href=\"#485\" id=\"485\">485</a>\n<a href=\"#486\" id=\"486\">486</a>\n<a href=\"#487\" id=\"487\">487</a>\n<a href=\"#488\" id=\"488\">488</a>\n<a href=\"#489\" id=\"489\">489</a>\n<a href=\"#490\" id=\"490\">490</a>\n<a href=\"#491\" id=\"491\">491</a>\n<a href=\"#492\" id=\"492\">492</a>\n<a href=\"#493\" id=\"493\">493</a>\n<a href=\"#494\" id=\"494\">494</a>\n<a href=\"#495\" id=\"495\">495</a>\n<a href=\"#496\" id=\"496\">496</a>\n<a href=\"#497\" id=\"497\">497</a>\n<a href=\"#498\" id=\"498\">498</a>\n<a href=\"#499\" id=\"499\">499</a>\n<a href=\"#500\" id=\"500\">500</a>\n<a href=\"#501\" id=\"501\">501</a>\n<a href=\"#502\" id=\"502\">502</a>\n<a href=\"#503\" id=\"503\">503</a>\n<a href=\"#504\" id=\"504\">504</a>\n<a href=\"#505\" id=\"505\">505</a>\n<a href=\"#506\" id=\"506\">506</a>\n<a href=\"#507\" id=\"507\">507</a>\n<a href=\"#508\" id=\"508\">508</a>\n<a href=\"#509\" id=\"509\">509</a>\n<a href=\"#510\" id=\"510\">510</a>\n<a href=\"#511\" id=\"511\">511</a>\n<a href=\"#512\" id=\"512\">512</a>\n<a href=\"#513\" id=\"513\">513</a>\n<a href=\"#514\" id=\"514\">514</a>\n<a href=\"#515\" id=\"515\">515</a>\n<a href=\"#516\" id=\"516\">516</a>\n<a href=\"#517\" id=\"517\">517</a>\n<a href=\"#518\" id=\"518\">518</a>\n<a href=\"#519\" id=\"519\">519</a>\n<a href=\"#520\" id=\"520\">520</a>\n<a href=\"#521\" id=\"521\">521</a>\n<a href=\"#522\" id=\"522\">522</a>\n<a href=\"#523\" id=\"523\">523</a>\n<a href=\"#524\" id=\"524\">524</a>\n<a href=\"#525\" id=\"525\">525</a>\n<a href=\"#526\" id=\"526\">526</a>\n<a href=\"#527\" id=\"527\">527</a>\n<a href=\"#528\" id=\"528\">528</a>\n<a href=\"#529\" id=\"529\">529</a>\n<a href=\"#530\" id=\"530\">530</a>\n<a href=\"#531\" id=\"531\">531</a>\n<a href=\"#532\" id=\"532\">532</a>\n<a href=\"#533\" id=\"533\">533</a>\n<a href=\"#534\" id=\"534\">534</a>\n<a href=\"#535\" id=\"535\">535</a>\n<a href=\"#536\" id=\"536\">536</a>\n<a href=\"#537\" id=\"537\">537</a>\n<a href=\"#538\" id=\"538\">538</a>\n<a href=\"#539\" id=\"539\">539</a>\n<a href=\"#540\" id=\"540\">540</a>\n<a href=\"#541\" id=\"541\">541</a>\n<a href=\"#542\" id=\"542\">542</a>\n<a href=\"#543\" id=\"543\">543</a>\n<a href=\"#544\" id=\"544\">544</a>\n<a href=\"#545\" id=\"545\">545</a>\n<a href=\"#546\" id=\"546\">546</a>\n<a href=\"#547\" id=\"547\">547</a>\n<a href=\"#548\" id=\"548\">548</a>\n<a href=\"#549\" id=\"549\">549</a>\n<a href=\"#550\" id=\"550\">550</a>\n<a href=\"#551\" id=\"551\">551</a>\n<a href=\"#552\" id=\"552\">552</a>\n<a href=\"#553\" id=\"553\">553</a>\n<a href=\"#554\" id=\"554\">554</a>\n<a href=\"#555\" id=\"555\">555</a>\n<a href=\"#556\" id=\"556\">556</a>\n<a href=\"#557\" id=\"557\">557</a>\n<a href=\"#558\" id=\"558\">558</a>\n<a href=\"#559\" id=\"559\">559</a>\n<a href=\"#560\" id=\"560\">560</a>\n<a href=\"#561\" id=\"561\">561</a>\n<a href=\"#562\" id=\"562\">562</a>\n<a href=\"#563\" id=\"563\">563</a>\n<a href=\"#564\" id=\"564\">564</a>\n<a href=\"#565\" id=\"565\">565</a>\n<a href=\"#566\" id=\"566\">566</a>\n<a href=\"#567\" id=\"567\">567</a>\n<a href=\"#568\" id=\"568\">568</a>\n<a href=\"#569\" id=\"569\">569</a>\n<a href=\"#570\" id=\"570\">570</a>\n<a href=\"#571\" id=\"571\">571</a>\n<a href=\"#572\" id=\"572\">572</a>\n<a href=\"#573\" id=\"573\">573</a>\n<a href=\"#574\" id=\"574\">574</a>\n<a href=\"#575\" id=\"575\">575</a>\n<a href=\"#576\" id=\"576\">576</a>\n<a href=\"#577\" id=\"577\">577</a>\n<a href=\"#578\" id=\"578\">578</a>\n<a href=\"#579\" id=\"579\">579</a>\n<a href=\"#580\" id=\"580\">580</a>\n<a href=\"#581\" id=\"581\">581</a>\n<a href=\"#582\" id=\"582\">582</a>\n<a href=\"#583\" id=\"583\">583</a>\n<a href=\"#584\" id=\"584\">584</a>\n<a href=\"#585\" id=\"585\">585</a>\n<a href=\"#586\" id=\"586\">586</a>\n<a href=\"#587\" id=\"587\">587</a>\n<a href=\"#588\" id=\"588\">588</a>\n<a href=\"#589\" id=\"589\">589</a>\n<a href=\"#590\" id=\"590\">590</a>\n<a href=\"#591\" id=\"591\">591</a>\n<a href=\"#592\" id=\"592\">592</a>\n<a href=\"#593\" id=\"593\">593</a>\n<a href=\"#594\" id=\"594\">594</a>\n<a href=\"#595\" id=\"595\">595</a>\n<a href=\"#596\" id=\"596\">596</a>\n<a href=\"#597\" id=\"597\">597</a>\n<a href=\"#598\" id=\"598\">598</a>\n<a href=\"#599\" id=\"599\">599</a>\n<a href=\"#600\" id=\"600\">600</a>\n<a href=\"#601\" id=\"601\">601</a>\n<a href=\"#602\" id=\"602\">602</a>\n<a href=\"#603\" id=\"603\">603</a>\n<a href=\"#604\" id=\"604\">604</a>\n<a href=\"#605\" id=\"605\">605</a>\n<a href=\"#606\" id=\"606\">606</a>\n<a href=\"#607\" id=\"607\">607</a>\n<a href=\"#608\" id=\"608\">608</a>\n<a href=\"#609\" id=\"609\">609</a>\n<a href=\"#610\" id=\"610\">610</a>\n<a href=\"#611\" id=\"611\">611</a>\n<a href=\"#612\" id=\"612\">612</a>\n<a href=\"#613\" id=\"613\">613</a>\n<a href=\"#614\" id=\"614\">614</a>\n<a href=\"#615\" id=\"615\">615</a>\n<a href=\"#616\" id=\"616\">616</a>\n<a href=\"#617\" id=\"617\">617</a>\n<a href=\"#618\" id=\"618\">618</a>\n<a href=\"#619\" id=\"619\">619</a>\n<a href=\"#620\" id=\"620\">620</a>\n<a href=\"#621\" id=\"621\">621</a>\n<a href=\"#622\" id=\"622\">622</a>\n<a href=\"#623\" id=\"623\">623</a>\n<a href=\"#624\" id=\"624\">624</a>\n<a href=\"#625\" id=\"625\">625</a>\n<a href=\"#626\" id=\"626\">626</a>\n<a href=\"#627\" id=\"627\">627</a>\n<a href=\"#628\" id=\"628\">628</a>\n<a href=\"#629\" id=\"629\">629</a>\n<a href=\"#630\" id=\"630\">630</a>\n<a href=\"#631\" id=\"631\">631</a>\n<a href=\"#632\" id=\"632\">632</a>\n<a href=\"#633\" id=\"633\">633</a>\n<a href=\"#634\" id=\"634\">634</a>\n<a href=\"#635\" id=\"635\">635</a>\n<a href=\"#636\" id=\"636\">636</a>\n<a href=\"#637\" id=\"637\">637</a>\n<a href=\"#638\" id=\"638\">638</a>\n<a href=\"#639\" id=\"639\">639</a>\n<a href=\"#640\" id=\"640\">640</a>\n<a href=\"#641\" id=\"641\">641</a>\n<a href=\"#642\" id=\"642\">642</a>\n<a href=\"#643\" id=\"643\">643</a>\n<a href=\"#644\" id=\"644\">644</a>\n<a href=\"#645\" id=\"645\">645</a>\n<a href=\"#646\" id=\"646\">646</a>\n<a href=\"#647\" id=\"647\">647</a>\n<a href=\"#648\" id=\"648\">648</a>\n<a href=\"#649\" id=\"649\">649</a>\n<a href=\"#650\" id=\"650\">650</a>\n<a href=\"#651\" id=\"651\">651</a>\n<a href=\"#652\" id=\"652\">652</a>\n<a href=\"#653\" id=\"653\">653</a>\n<a href=\"#654\" id=\"654\">654</a>\n<a href=\"#655\" id=\"655\">655</a>\n<a href=\"#656\" id=\"656\">656</a>\n<a href=\"#657\" id=\"657\">657</a>\n<a href=\"#658\" id=\"658\">658</a>\n<a href=\"#659\" id=\"659\">659</a>\n<a href=\"#660\" id=\"660\">660</a>\n<a href=\"#661\" id=\"661\">661</a>\n<a href=\"#662\" id=\"662\">662</a>\n<a href=\"#663\" id=\"663\">663</a>\n<a href=\"#664\" id=\"664\">664</a>\n<a href=\"#665\" id=\"665\">665</a>\n<a href=\"#666\" id=\"666\">666</a>\n<a href=\"#667\" id=\"667\">667</a>\n<a href=\"#668\" id=\"668\">668</a>\n<a href=\"#669\" id=\"669\">669</a>\n<a href=\"#670\" id=\"670\">670</a>\n<a href=\"#671\" id=\"671\">671</a>\n<a href=\"#672\" id=\"672\">672</a>\n<a href=\"#673\" id=\"673\">673</a>\n<a href=\"#674\" id=\"674\">674</a>\n<a href=\"#675\" id=\"675\">675</a>\n<a href=\"#676\" id=\"676\">676</a>\n<a href=\"#677\" id=\"677\">677</a>\n<a href=\"#678\" id=\"678\">678</a>\n<a href=\"#679\" id=\"679\">679</a>\n<a href=\"#680\" id=\"680\">680</a>\n<a href=\"#681\" id=\"681\">681</a>\n<a href=\"#682\" id=\"682\">682</a>\n<a href=\"#683\" id=\"683\">683</a>\n<a href=\"#684\" id=\"684\">684</a>\n<a href=\"#685\" id=\"685\">685</a>\n<a href=\"#686\" id=\"686\">686</a>\n<a href=\"#687\" id=\"687\">687</a>\n<a href=\"#688\" id=\"688\">688</a>\n<a href=\"#689\" id=\"689\">689</a>\n<a href=\"#690\" id=\"690\">690</a>\n<a href=\"#691\" id=\"691\">691</a>\n<a href=\"#692\" id=\"692\">692</a>\n<a href=\"#693\" id=\"693\">693</a>\n<a href=\"#694\" id=\"694\">694</a>\n<a href=\"#695\" id=\"695\">695</a>\n<a href=\"#696\" id=\"696\">696</a>\n<a href=\"#697\" id=\"697\">697</a>\n<a href=\"#698\" id=\"698\">698</a>\n<a href=\"#699\" id=\"699\">699</a>\n<a href=\"#700\" id=\"700\">700</a>\n<a href=\"#701\" id=\"701\">701</a>\n<a href=\"#702\" id=\"702\">702</a>\n<a href=\"#703\" id=\"703\">703</a>\n<a href=\"#704\" id=\"704\">704</a>\n<a href=\"#705\" id=\"705\">705</a>\n<a href=\"#706\" id=\"706\">706</a>\n<a href=\"#707\" id=\"707\">707</a>\n<a href=\"#708\" id=\"708\">708</a>\n<a href=\"#709\" id=\"709\">709</a>\n<a href=\"#710\" id=\"710\">710</a>\n<a href=\"#711\" id=\"711\">711</a>\n<a href=\"#712\" id=\"712\">712</a>\n<a href=\"#713\" id=\"713\">713</a>\n<a href=\"#714\" id=\"714\">714</a>\n<a href=\"#715\" id=\"715\">715</a>\n<a href=\"#716\" id=\"716\">716</a>\n<a href=\"#717\" id=\"717\">717</a>\n<a href=\"#718\" id=\"718\">718</a>\n<a href=\"#719\" id=\"719\">719</a>\n<a href=\"#720\" id=\"720\">720</a>\n<a href=\"#721\" id=\"721\">721</a>\n<a href=\"#722\" id=\"722\">722</a>\n<a href=\"#723\" id=\"723\">723</a>\n<a href=\"#724\" id=\"724\">724</a>\n<a href=\"#725\" id=\"725\">725</a>\n<a href=\"#726\" id=\"726\">726</a>\n<a href=\"#727\" id=\"727\">727</a>\n<a href=\"#728\" id=\"728\">728</a>\n<a href=\"#729\" id=\"729\">729</a>\n<a href=\"#730\" id=\"730\">730</a>\n<a href=\"#731\" id=\"731\">731</a>\n<a href=\"#732\" id=\"732\">732</a>\n<a href=\"#733\" id=\"733\">733</a>\n<a href=\"#734\" id=\"734\">734</a>\n<a href=\"#735\" id=\"735\">735</a>\n<a href=\"#736\" id=\"736\">736</a>\n<a href=\"#737\" id=\"737\">737</a>\n<a href=\"#738\" id=\"738\">738</a>\n<a href=\"#739\" id=\"739\">739</a>\n<a href=\"#740\" id=\"740\">740</a>\n<a href=\"#741\" id=\"741\">741</a>\n<a href=\"#742\" id=\"742\">742</a>\n<a href=\"#743\" id=\"743\">743</a>\n<a href=\"#744\" id=\"744\">744</a>\n<a href=\"#745\" id=\"745\">745</a>\n<a href=\"#746\" id=\"746\">746</a>\n<a href=\"#747\" id=\"747\">747</a>\n<a href=\"#748\" id=\"748\">748</a>\n<a href=\"#749\" id=\"749\">749</a>\n<a href=\"#750\" id=\"750\">750</a>\n<a href=\"#751\" id=\"751\">751</a>\n<a href=\"#752\" id=\"752\">752</a>\n<a href=\"#753\" id=\"753\">753</a>\n<a href=\"#754\" id=\"754\">754</a>\n<a href=\"#755\" id=\"755\">755</a>\n<a href=\"#756\" id=\"756\">756</a>\n<a href=\"#757\" id=\"757\">757</a>\n<a href=\"#758\" id=\"758\">758</a>\n<a href=\"#759\" id=\"759\">759</a>\n<a href=\"#760\" id=\"760\">760</a>\n<a href=\"#761\" id=\"761\">761</a>\n<a href=\"#762\" id=\"762\">762</a>\n<a href=\"#763\" id=\"763\">763</a>\n<a href=\"#764\" id=\"764\">764</a>\n<a href=\"#765\" id=\"765\">765</a>\n<a href=\"#766\" id=\"766\">766</a>\n<a href=\"#767\" id=\"767\">767</a>\n<a href=\"#768\" id=\"768\">768</a>\n<a href=\"#769\" id=\"769\">769</a>\n<a href=\"#770\" id=\"770\">770</a>\n<a href=\"#771\" id=\"771\">771</a>\n<a href=\"#772\" id=\"772\">772</a>\n<a href=\"#773\" id=\"773\">773</a>\n<a href=\"#774\" id=\"774\">774</a>\n<a href=\"#775\" id=\"775\">775</a>\n<a href=\"#776\" id=\"776\">776</a>\n<a href=\"#777\" id=\"777\">777</a>\n<a href=\"#778\" id=\"778\">778</a>\n<a href=\"#779\" id=\"779\">779</a>\n<a href=\"#780\" id=\"780\">780</a>\n<a href=\"#781\" id=\"781\">781</a>\n<a href=\"#782\" id=\"782\">782</a>\n<a href=\"#783\" id=\"783\">783</a>\n<a href=\"#784\" id=\"784\">784</a>\n<a href=\"#785\" id=\"785\">785</a>\n<a href=\"#786\" id=\"786\">786</a>\n<a href=\"#787\" id=\"787\">787</a>\n<a href=\"#788\" id=\"788\">788</a>\n<a href=\"#789\" id=\"789\">789</a>\n<a href=\"#790\" id=\"790\">790</a>\n<a href=\"#791\" id=\"791\">791</a>\n<a href=\"#792\" id=\"792\">792</a>\n<a href=\"#793\" id=\"793\">793</a>\n<a href=\"#794\" id=\"794\">794</a>\n<a href=\"#795\" id=\"795\">795</a>\n<a href=\"#796\" id=\"796\">796</a>\n<a href=\"#797\" id=\"797\">797</a>\n<a href=\"#798\" id=\"798\">798</a>\n<a href=\"#799\" id=\"799\">799</a>\n<a href=\"#800\" id=\"800\">800</a>\n<a href=\"#801\" id=\"801\">801</a>\n<a href=\"#802\" id=\"802\">802</a>\n<a href=\"#803\" id=\"803\">803</a>\n<a href=\"#804\" id=\"804\">804</a>\n<a href=\"#805\" id=\"805\">805</a>\n<a href=\"#806\" id=\"806\">806</a>\n<a href=\"#807\" id=\"807\">807</a>\n<a href=\"#808\" id=\"808\">808</a>\n<a href=\"#809\" id=\"809\">809</a>\n<a href=\"#810\" id=\"810\">810</a>\n<a href=\"#811\" id=\"811\">811</a>\n<a href=\"#812\" id=\"812\">812</a>\n<a href=\"#813\" id=\"813\">813</a>\n<a href=\"#814\" id=\"814\">814</a>\n<a href=\"#815\" id=\"815\">815</a>\n<a href=\"#816\" id=\"816\">816</a>\n<a href=\"#817\" id=\"817\">817</a>\n<a href=\"#818\" id=\"818\">818</a>\n<a href=\"#819\" id=\"819\">819</a>\n<a href=\"#820\" id=\"820\">820</a>\n<a href=\"#821\" id=\"821\">821</a>\n<a href=\"#822\" id=\"822\">822</a>\n<a href=\"#823\" id=\"823\">823</a>\n<a href=\"#824\" id=\"824\">824</a>\n<a href=\"#825\" id=\"825\">825</a>\n<a href=\"#826\" id=\"826\">826</a>\n<a href=\"#827\" id=\"827\">827</a>\n<a href=\"#828\" id=\"828\">828</a>\n<a href=\"#829\" id=\"829\">829</a>\n<a href=\"#830\" id=\"830\">830</a>\n<a href=\"#831\" id=\"831\">831</a>\n<a href=\"#832\" id=\"832\">832</a>\n<a href=\"#833\" id=\"833\">833</a>\n<a href=\"#834\" id=\"834\">834</a>\n<a href=\"#835\" id=\"835\">835</a>\n<a href=\"#836\" id=\"836\">836</a>\n<a href=\"#837\" id=\"837\">837</a>\n<a href=\"#838\" id=\"838\">838</a>\n<a href=\"#839\" id=\"839\">839</a>\n<a href=\"#840\" id=\"840\">840</a>\n<a href=\"#841\" id=\"841\">841</a>\n<a href=\"#842\" id=\"842\">842</a>\n<a href=\"#843\" id=\"843\">843</a>\n<a href=\"#844\" id=\"844\">844</a>\n<a href=\"#845\" id=\"845\">845</a>\n<a href=\"#846\" id=\"846\">846</a>\n<a href=\"#847\" id=\"847\">847</a>\n<a href=\"#848\" id=\"848\">848</a>\n<a href=\"#849\" id=\"849\">849</a>\n<a href=\"#850\" id=\"850\">850</a>\n<a href=\"#851\" id=\"851\">851</a>\n<a href=\"#852\" id=\"852\">852</a>\n<a href=\"#853\" id=\"853\">853</a>\n<a href=\"#854\" id=\"854\">854</a>\n<a href=\"#855\" id=\"855\">855</a>\n<a href=\"#856\" id=\"856\">856</a>\n<a href=\"#857\" id=\"857\">857</a>\n<a href=\"#858\" id=\"858\">858</a>\n<a href=\"#859\" id=\"859\">859</a>\n<a href=\"#860\" id=\"860\">860</a>\n<a href=\"#861\" id=\"861\">861</a>\n<a href=\"#862\" id=\"862\">862</a>\n<a href=\"#863\" id=\"863\">863</a>\n<a href=\"#864\" id=\"864\">864</a>\n<a href=\"#865\" id=\"865\">865</a>\n<a href=\"#866\" id=\"866\">866</a>\n<a href=\"#867\" id=\"867\">867</a>\n<a href=\"#868\" id=\"868\">868</a>\n<a href=\"#869\" id=\"869\">869</a>\n<a href=\"#870\" id=\"870\">870</a>\n<a href=\"#871\" id=\"871\">871</a>\n<a href=\"#872\" id=\"872\">872</a>\n<a href=\"#873\" id=\"873\">873</a>\n<a href=\"#874\" id=\"874\">874</a>\n<a href=\"#875\" id=\"875\">875</a>\n<a href=\"#876\" id=\"876\">876</a>\n<a href=\"#877\" id=\"877\">877</a>\n<a href=\"#878\" id=\"878\">878</a>\n<a href=\"#879\" id=\"879\">879</a>\n<a href=\"#880\" id=\"880\">880</a>\n<a href=\"#881\" id=\"881\">881</a>\n<a href=\"#882\" id=\"882\">882</a>\n<a href=\"#883\" id=\"883\">883</a>\n<a href=\"#884\" id=\"884\">884</a>\n<a href=\"#885\" id=\"885\">885</a>\n<a href=\"#886\" id=\"886\">886</a>\n<a href=\"#887\" id=\"887\">887</a>\n<a href=\"#888\" id=\"888\">888</a>\n<a href=\"#889\" id=\"889\">889</a>\n<a href=\"#890\" id=\"890\">890</a>\n<a href=\"#891\" id=\"891\">891</a>\n<a href=\"#892\" id=\"892\">892</a>\n<a href=\"#893\" id=\"893\">893</a>\n<a href=\"#894\" id=\"894\">894</a>\n<a href=\"#895\" id=\"895\">895</a>\n<a href=\"#896\" id=\"896\">896</a>\n<a href=\"#897\" id=\"897\">897</a>\n<a href=\"#898\" id=\"898\">898</a>\n<a href=\"#899\" id=\"899\">899</a>\n<a href=\"#900\" id=\"900\">900</a>\n<a href=\"#901\" id=\"901\">901</a>\n<a href=\"#902\" id=\"902\">902</a>\n<a href=\"#903\" id=\"903\">903</a>\n<a href=\"#904\" id=\"904\">904</a>\n<a href=\"#905\" id=\"905\">905</a>\n<a href=\"#906\" id=\"906\">906</a>\n<a href=\"#907\" id=\"907\">907</a>\n<a href=\"#908\" id=\"908\">908</a>\n<a href=\"#909\" id=\"909\">909</a>\n<a href=\"#910\" id=\"910\">910</a>\n<a href=\"#911\" id=\"911\">911</a>\n<a href=\"#912\" id=\"912\">912</a>\n<a href=\"#913\" id=\"913\">913</a>\n<a href=\"#914\" id=\"914\">914</a>\n<a href=\"#915\" id=\"915\">915</a>\n<a href=\"#916\" id=\"916\">916</a>\n<a href=\"#917\" id=\"917\">917</a>\n<a href=\"#918\" id=\"918\">918</a>\n<a href=\"#919\" id=\"919\">919</a>\n<a href=\"#920\" id=\"920\">920</a>\n<a href=\"#921\" id=\"921\">921</a>\n<a href=\"#922\" id=\"922\">922</a>\n<a href=\"#923\" id=\"923\">923</a>\n<a href=\"#924\" id=\"924\">924</a>\n<a href=\"#925\" id=\"925\">925</a>\n<a href=\"#926\" id=\"926\">926</a>\n<a href=\"#927\" id=\"927\">927</a>\n<a href=\"#928\" id=\"928\">928</a>\n<a href=\"#929\" id=\"929\">929</a>\n<a href=\"#930\" id=\"930\">930</a>\n<a href=\"#931\" id=\"931\">931</a>\n<a href=\"#932\" id=\"932\">932</a>\n<a href=\"#933\" id=\"933\">933</a>\n<a href=\"#934\" id=\"934\">934</a>\n<a href=\"#935\" id=\"935\">935</a>\n<a href=\"#936\" id=\"936\">936</a>\n<a href=\"#937\" id=\"937\">937</a>\n<a href=\"#938\" id=\"938\">938</a>\n<a href=\"#939\" id=\"939\">939</a>\n<a href=\"#940\" id=\"940\">940</a>\n<a href=\"#941\" id=\"941\">941</a>\n<a href=\"#942\" id=\"942\">942</a>\n<a href=\"#943\" id=\"943\">943</a>\n<a href=\"#944\" id=\"944\">944</a>\n<a href=\"#945\" id=\"945\">945</a>\n<a href=\"#946\" id=\"946\">946</a>\n<a href=\"#947\" id=\"947\">947</a>\n<a href=\"#948\" id=\"948\">948</a>\n<a href=\"#949\" id=\"949\">949</a>\n<a href=\"#950\" id=\"950\">950</a>\n<a href=\"#951\" id=\"951\">951</a>\n<a href=\"#952\" id=\"952\">952</a>\n<a href=\"#953\" id=\"953\">953</a>\n<a href=\"#954\" id=\"954\">954</a>\n<a href=\"#955\" id=\"955\">955</a>\n<a href=\"#956\" id=\"956\">956</a>\n<a href=\"#957\" id=\"957\">957</a>\n<a href=\"#958\" id=\"958\">958</a>\n<a href=\"#959\" id=\"959\">959</a>\n<a href=\"#960\" id=\"960\">960</a>\n<a href=\"#961\" id=\"961\">961</a>\n<a href=\"#962\" id=\"962\">962</a>\n<a href=\"#963\" id=\"963\">963</a>\n<a href=\"#964\" id=\"964\">964</a>\n<a href=\"#965\" id=\"965\">965</a>\n<a href=\"#966\" id=\"966\">966</a>\n<a href=\"#967\" id=\"967\">967</a>\n<a href=\"#968\" id=\"968\">968</a>\n<a href=\"#969\" id=\"969\">969</a>\n<a href=\"#970\" id=\"970\">970</a>\n<a href=\"#971\" id=\"971\">971</a>\n<a href=\"#972\" id=\"972\">972</a>\n<a href=\"#973\" id=\"973\">973</a>\n<a href=\"#974\" id=\"974\">974</a>\n<a href=\"#975\" id=\"975\">975</a>\n<a href=\"#976\" id=\"976\">976</a>\n<a href=\"#977\" id=\"977\">977</a>\n<a href=\"#978\" id=\"978\">978</a>\n<a href=\"#979\" id=\"979\">979</a>\n<a href=\"#980\" id=\"980\">980</a>\n<a href=\"#981\" id=\"981\">981</a>\n<a href=\"#982\" id=\"982\">982</a>\n<a href=\"#983\" id=\"983\">983</a>\n<a href=\"#984\" id=\"984\">984</a>\n<a href=\"#985\" id=\"985\">985</a>\n<a href=\"#986\" id=\"986\">986</a>\n<a href=\"#987\" id=\"987\">987</a>\n<a href=\"#988\" id=\"988\">988</a>\n<a href=\"#989\" id=\"989\">989</a>\n<a href=\"#990\" id=\"990\">990</a>\n<a href=\"#991\" id=\"991\">991</a>\n<a href=\"#992\" id=\"992\">992</a>\n<a href=\"#993\" id=\"993\">993</a>\n<a href=\"#994\" id=\"994\">994</a>\n<a href=\"#995\" id=\"995\">995</a>\n<a href=\"#996\" id=\"996\">996</a>\n<a href=\"#997\" id=\"997\">997</a>\n<a href=\"#998\" id=\"998\">998</a>\n<a href=\"#999\" id=\"999\">999</a>\n<a href=\"#1000\" id=\"1000\">1000</a>\n<a href=\"#1001\" id=\"1001\">1001</a>\n<a href=\"#1002\" id=\"1002\">1002</a>\n<a href=\"#1003\" id=\"1003\">1003</a>\n<a href=\"#1004\" id=\"1004\">1004</a>\n<a href=\"#1005\" id=\"1005\">1005</a>\n<a href=\"#1006\" id=\"1006\">1006</a>\n<a href=\"#1007\" id=\"1007\">1007</a>\n<a href=\"#1008\" id=\"1008\">1008</a>\n<a href=\"#1009\" id=\"1009\">1009</a>\n<a href=\"#1010\" id=\"1010\">1010</a>\n<a href=\"#1011\" id=\"1011\">1011</a>\n<a href=\"#1012\" id=\"1012\">1012</a>\n<a href=\"#1013\" id=\"1013\">1013</a>\n<a href=\"#1014\" id=\"1014\">1014</a>\n<a href=\"#1015\" id=\"1015\">1015</a>\n<a href=\"#1016\" id=\"1016\">1016</a>\n<a href=\"#1017\" id=\"1017\">1017</a>\n<a href=\"#1018\" id=\"1018\">1018</a>\n<a href=\"#1019\" id=\"1019\">1019</a>\n<a href=\"#1020\" id=\"1020\">1020</a>\n<a href=\"#1021\" id=\"1021\">1021</a>\n<a href=\"#1022\" id=\"1022\">1022</a>\n<a href=\"#1023\" id=\"1023\">1023</a>\n<a href=\"#1024\" id=\"1024\">1024</a>\n<a href=\"#1025\" id=\"1025\">1025</a>\n<a href=\"#1026\" id=\"1026\">1026</a>\n<a href=\"#1027\" id=\"1027\">1027</a>\n<a href=\"#1028\" id=\"1028\">1028</a>\n<a href=\"#1029\" id=\"1029\">1029</a>\n<a href=\"#1030\" id=\"1030\">1030</a>\n<a href=\"#1031\" id=\"1031\">1031</a>\n<a href=\"#1032\" id=\"1032\">1032</a>\n<a href=\"#1033\" id=\"1033\">1033</a>\n<a href=\"#1034\" id=\"1034\">1034</a>\n<a href=\"#1035\" id=\"1035\">1035</a>\n<a href=\"#1036\" id=\"1036\">1036</a>\n<a href=\"#1037\" id=\"1037\">1037</a>\n<a href=\"#1038\" id=\"1038\">1038</a>\n<a href=\"#1039\" id=\"1039\">1039</a>\n<a href=\"#1040\" id=\"1040\">1040</a>\n<a href=\"#1041\" id=\"1041\">1041</a>\n<a href=\"#1042\" id=\"1042\">1042</a>\n<a href=\"#1043\" id=\"1043\">1043</a>\n<a href=\"#1044\" id=\"1044\">1044</a>\n<a href=\"#1045\" id=\"1045\">1045</a>\n<a href=\"#1046\" id=\"1046\">1046</a>\n<a href=\"#1047\" id=\"1047\">1047</a>\n<a href=\"#1048\" id=\"1048\">1048</a>\n<a href=\"#1049\" id=\"1049\">1049</a>\n<a href=\"#1050\" id=\"1050\">1050</a>\n<a href=\"#1051\" id=\"1051\">1051</a>\n<a href=\"#1052\" id=\"1052\">1052</a>\n<a href=\"#1053\" id=\"1053\">1053</a>\n<a href=\"#1054\" id=\"1054\">1054</a>\n<a href=\"#1055\" id=\"1055\">1055</a>\n<a href=\"#1056\" id=\"1056\">1056</a>\n<a href=\"#1057\" id=\"1057\">1057</a>\n<a href=\"#1058\" id=\"1058\">1058</a>\n<a href=\"#1059\" id=\"1059\">1059</a>\n<a href=\"#1060\" id=\"1060\">1060</a>\n<a href=\"#1061\" id=\"1061\">1061</a>\n<a href=\"#1062\" id=\"1062\">1062</a>\n<a href=\"#1063\" id=\"1063\">1063</a>\n<a href=\"#1064\" id=\"1064\">1064</a>\n<a href=\"#1065\" id=\"1065\">1065</a>\n<a href=\"#1066\" id=\"1066\">1066</a>\n<a href=\"#1067\" id=\"1067\">1067</a>\n<a href=\"#1068\" id=\"1068\">1068</a>\n<a href=\"#1069\" id=\"1069\">1069</a>\n<a href=\"#1070\" id=\"1070\">1070</a>\n<a href=\"#1071\" id=\"1071\">1071</a>\n<a href=\"#1072\" id=\"1072\">1072</a>\n<a href=\"#1073\" id=\"1073\">1073</a>\n<a href=\"#1074\" id=\"1074\">1074</a>\n<a href=\"#1075\" id=\"1075\">1075</a>\n<a href=\"#1076\" id=\"1076\">1076</a>\n<a href=\"#1077\" id=\"1077\">1077</a>\n<a href=\"#1078\" id=\"1078\">1078</a>\n<a href=\"#1079\" id=\"1079\">1079</a>\n<a href=\"#1080\" id=\"1080\">1080</a>\n<a href=\"#1081\" id=\"1081\">1081</a>\n<a href=\"#1082\" id=\"1082\">1082</a>\n<a href=\"#1083\" id=\"1083\">1083</a>\n<a href=\"#1084\" id=\"1084\">1084</a>\n<a href=\"#1085\" id=\"1085\">1085</a>\n<a href=\"#1086\" id=\"1086\">1086</a>\n<a href=\"#1087\" id=\"1087\">1087</a>\n<a href=\"#1088\" id=\"1088\">1088</a>\n<a href=\"#1089\" id=\"1089\">1089</a>\n<a href=\"#1090\" id=\"1090\">1090</a>\n<a href=\"#1091\" id=\"1091\">1091</a>\n<a href=\"#1092\" id=\"1092\">1092</a>\n<a href=\"#1093\" id=\"1093\">1093</a>\n<a href=\"#1094\" id=\"1094\">1094</a>\n<a href=\"#1095\" id=\"1095\">1095</a>\n<a href=\"#1096\" id=\"1096\">1096</a>\n<a href=\"#1097\" id=\"1097\">1097</a>\n<a href=\"#1098\" id=\"1098\">1098</a>\n<a href=\"#1099\" id=\"1099\">1099</a>\n<a href=\"#1100\" id=\"1100\">1100</a>\n<a href=\"#1101\" id=\"1101\">1101</a>\n<a href=\"#1102\" id=\"1102\">1102</a>\n<a href=\"#1103\" id=\"1103\">1103</a>\n<a href=\"#1104\" id=\"1104\">1104</a>\n<a href=\"#1105\" id=\"1105\">1105</a>\n<a href=\"#1106\" id=\"1106\">1106</a>\n<a href=\"#1107\" id=\"1107\">1107</a>\n<a href=\"#1108\" id=\"1108\">1108</a>\n<a href=\"#1109\" id=\"1109\">1109</a>\n<a href=\"#1110\" id=\"1110\">1110</a>\n<a href=\"#1111\" id=\"1111\">1111</a>\n<a href=\"#1112\" id=\"1112\">1112</a>\n<a href=\"#1113\" id=\"1113\">1113</a>\n<a href=\"#1114\" id=\"1114\">1114</a>\n<a href=\"#1115\" id=\"1115\">1115</a>\n<a href=\"#1116\" id=\"1116\">1116</a>\n<a href=\"#1117\" id=\"1117\">1117</a>\n<a href=\"#1118\" id=\"1118\">1118</a>\n<a href=\"#1119\" id=\"1119\">1119</a>\n<a href=\"#1120\" id=\"1120\">1120</a>\n<a href=\"#1121\" id=\"1121\">1121</a>\n<a href=\"#1122\" id=\"1122\">1122</a>\n<a href=\"#1123\" id=\"1123\">1123</a>\n<a href=\"#1124\" id=\"1124\">1124</a>\n<a href=\"#1125\" id=\"1125\">1125</a>\n<a href=\"#1126\" id=\"1126\">1126</a>\n<a href=\"#1127\" id=\"1127\">1127</a>\n<a href=\"#1128\" id=\"1128\">1128</a>\n<a href=\"#1129\" id=\"1129\">1129</a>\n<a href=\"#1130\" id=\"1130\">1130</a>\n<a href=\"#1131\" id=\"1131\">1131</a>\n<a href=\"#1132\" id=\"1132\">1132</a>\n<a href=\"#1133\" id=\"1133\">1133</a>\n<a href=\"#1134\" id=\"1134\">1134</a>\n<a href=\"#1135\" id=\"1135\">1135</a>\n<a href=\"#1136\" id=\"1136\">1136</a>\n<a href=\"#1137\" id=\"1137\">1137</a>\n<a href=\"#1138\" id=\"1138\">1138</a>\n<a href=\"#1139\" id=\"1139\">1139</a>\n<a href=\"#1140\" id=\"1140\">1140</a>\n<a href=\"#1141\" id=\"1141\">1141</a>\n<a href=\"#1142\" id=\"1142\">1142</a>\n<a href=\"#1143\" id=\"1143\">1143</a>\n<a href=\"#1144\" id=\"1144\">1144</a>\n<a href=\"#1145\" id=\"1145\">1145</a>\n<a href=\"#1146\" id=\"1146\">1146</a>\n<a href=\"#1147\" id=\"1147\">1147</a>\n<a href=\"#1148\" id=\"1148\">1148</a>\n<a href=\"#1149\" id=\"1149\">1149</a>\n<a href=\"#1150\" id=\"1150\">1150</a>\n<a href=\"#1151\" id=\"1151\">1151</a>\n<a href=\"#1152\" id=\"1152\">1152</a>\n<a href=\"#1153\" id=\"1153\">1153</a>\n<a href=\"#1154\" id=\"1154\">1154</a>\n<a href=\"#1155\" id=\"1155\">1155</a>\n<a href=\"#1156\" id=\"1156\">1156</a>\n<a href=\"#1157\" id=\"1157\">1157</a>\n<a href=\"#1158\" id=\"1158\">1158</a>\n<a href=\"#1159\" id=\"1159\">1159</a>\n<a href=\"#1160\" id=\"1160\">1160</a>\n<a href=\"#1161\" id=\"1161\">1161</a>\n<a href=\"#1162\" id=\"1162\">1162</a>\n<a href=\"#1163\" id=\"1163\">1163</a>\n<a href=\"#1164\" id=\"1164\">1164</a>\n<a href=\"#1165\" id=\"1165\">1165</a>\n<a href=\"#1166\" id=\"1166\">1166</a>\n<a href=\"#1167\" id=\"1167\">1167</a>\n<a href=\"#1168\" id=\"1168\">1168</a>\n<a href=\"#1169\" id=\"1169\">1169</a>\n<a href=\"#1170\" id=\"1170\">1170</a>\n<a href=\"#1171\" id=\"1171\">1171</a>\n<a href=\"#1172\" id=\"1172\">1172</a>\n<a href=\"#1173\" id=\"1173\">1173</a>\n<a href=\"#1174\" id=\"1174\">1174</a>\n<a href=\"#1175\" id=\"1175\">1175</a>\n<a href=\"#1176\" id=\"1176\">1176</a>\n<a href=\"#1177\" id=\"1177\">1177</a>\n<a href=\"#1178\" id=\"1178\">1178</a>\n<a href=\"#1179\" id=\"1179\">1179</a>\n<a href=\"#1180\" id=\"1180\">1180</a>\n<a href=\"#1181\" id=\"1181\">1181</a>\n<a href=\"#1182\" id=\"1182\">1182</a>\n<a href=\"#1183\" id=\"1183\">1183</a>\n<a href=\"#1184\" id=\"1184\">1184</a>\n<a href=\"#1185\" id=\"1185\">1185</a>\n<a href=\"#1186\" id=\"1186\">1186</a>\n<a href=\"#1187\" id=\"1187\">1187</a>\n<a href=\"#1188\" id=\"1188\">1188</a>\n<a href=\"#1189\" id=\"1189\">1189</a>\n<a href=\"#1190\" id=\"1190\">1190</a>\n<a href=\"#1191\" id=\"1191\">1191</a>\n<a href=\"#1192\" id=\"1192\">1192</a>\n<a href=\"#1193\" id=\"1193\">1193</a>\n<a href=\"#1194\" id=\"1194\">1194</a>\n<a href=\"#1195\" id=\"1195\">1195</a>\n<a href=\"#1196\" id=\"1196\">1196</a>\n<a href=\"#1197\" id=\"1197\">1197</a>\n<a href=\"#1198\" id=\"1198\">1198</a>\n<a href=\"#1199\" id=\"1199\">1199</a>\n<a href=\"#1200\" id=\"1200\">1200</a>\n<a href=\"#1201\" id=\"1201\">1201</a>\n<a href=\"#1202\" id=\"1202\">1202</a>\n<a href=\"#1203\" id=\"1203\">1203</a>\n<a href=\"#1204\" id=\"1204\">1204</a>\n<a href=\"#1205\" id=\"1205\">1205</a>\n<a href=\"#1206\" id=\"1206\">1206</a>\n<a href=\"#1207\" id=\"1207\">1207</a>\n<a href=\"#1208\" id=\"1208\">1208</a>\n<a href=\"#1209\" id=\"1209\">1209</a>\n<a href=\"#1210\" id=\"1210\">1210</a>\n<a href=\"#1211\" id=\"1211\">1211</a>\n<a href=\"#1212\" id=\"1212\">1212</a>\n<a href=\"#1213\" id=\"1213\">1213</a>\n<a href=\"#1214\" id=\"1214\">1214</a>\n<a href=\"#1215\" id=\"1215\">1215</a>\n<a href=\"#1216\" id=\"1216\">1216</a>\n<a href=\"#1217\" id=\"1217\">1217</a>\n<a href=\"#1218\" id=\"1218\">1218</a>\n<a href=\"#1219\" id=\"1219\">1219</a>\n<a href=\"#1220\" id=\"1220\">1220</a>\n<a href=\"#1221\" id=\"1221\">1221</a>\n<a href=\"#1222\" id=\"1222\">1222</a>\n<a href=\"#1223\" id=\"1223\">1223</a>\n<a href=\"#1224\" id=\"1224\">1224</a>\n<a href=\"#1225\" id=\"1225\">1225</a>\n<a href=\"#1226\" id=\"1226\">1226</a>\n<a href=\"#1227\" id=\"1227\">1227</a>\n<a href=\"#1228\" id=\"1228\">1228</a>\n<a href=\"#1229\" id=\"1229\">1229</a>\n<a href=\"#1230\" id=\"1230\">1230</a>\n<a href=\"#1231\" id=\"1231\">1231</a>\n<a href=\"#1232\" id=\"1232\">1232</a>\n<a href=\"#1233\" id=\"1233\">1233</a>\n<a href=\"#1234\" id=\"1234\">1234</a>\n<a href=\"#1235\" id=\"1235\">1235</a>\n<a href=\"#1236\" id=\"1236\">1236</a>\n<a href=\"#1237\" id=\"1237\">1237</a>\n<a href=\"#1238\" id=\"1238\">1238</a>\n<a href=\"#1239\" id=\"1239\">1239</a>\n<a href=\"#1240\" id=\"1240\">1240</a>\n<a href=\"#1241\" id=\"1241\">1241</a>\n<a href=\"#1242\" id=\"1242\">1242</a>\n<a href=\"#1243\" id=\"1243\">1243</a>\n<a href=\"#1244\" id=\"1244\">1244</a>\n<a href=\"#1245\" id=\"1245\">1245</a>\n<a href=\"#1246\" id=\"1246\">1246</a>\n<a href=\"#1247\" id=\"1247\">1247</a>\n<a href=\"#1248\" id=\"1248\">1248</a>\n<a href=\"#1249\" id=\"1249\">1249</a>\n<a href=\"#1250\" id=\"1250\">1250</a>\n<a href=\"#1251\" id=\"1251\">1251</a>\n<a href=\"#1252\" id=\"1252\">1252</a>\n<a href=\"#1253\" id=\"1253\">1253</a>\n<a href=\"#1254\" id=\"1254\">1254</a>\n<a href=\"#1255\" id=\"1255\">1255</a>\n<a href=\"#1256\" id=\"1256\">1256</a>\n<a href=\"#1257\" id=\"1257\">1257</a>\n<a href=\"#1258\" id=\"1258\">1258</a>\n<a href=\"#1259\" id=\"1259\">1259</a>\n<a href=\"#1260\" id=\"1260\">1260</a>\n<a href=\"#1261\" id=\"1261\">1261</a>\n<a href=\"#1262\" id=\"1262\">1262</a>\n<a href=\"#1263\" id=\"1263\">1263</a>\n<a href=\"#1264\" id=\"1264\">1264</a>\n<a href=\"#1265\" id=\"1265\">1265</a>\n<a href=\"#1266\" id=\"1266\">1266</a>\n<a href=\"#1267\" id=\"1267\">1267</a>\n<a href=\"#1268\" id=\"1268\">1268</a>\n<a href=\"#1269\" id=\"1269\">1269</a>\n<a href=\"#1270\" id=\"1270\">1270</a>\n<a href=\"#1271\" id=\"1271\">1271</a>\n<a href=\"#1272\" id=\"1272\">1272</a>\n<a href=\"#1273\" id=\"1273\">1273</a>\n<a href=\"#1274\" id=\"1274\">1274</a>\n<a href=\"#1275\" id=\"1275\">1275</a>\n<a href=\"#1276\" id=\"1276\">1276</a>\n<a href=\"#1277\" id=\"1277\">1277</a>\n<a href=\"#1278\" id=\"1278\">1278</a>\n<a href=\"#1279\" id=\"1279\">1279</a>\n<a href=\"#1280\" id=\"1280\">1280</a>\n<a href=\"#1281\" id=\"1281\">1281</a>\n<a href=\"#1282\" id=\"1282\">1282</a>\n<a href=\"#1283\" id=\"1283\">1283</a>\n<a href=\"#1284\" id=\"1284\">1284</a>\n<a href=\"#1285\" id=\"1285\">1285</a>\n<a href=\"#1286\" id=\"1286\">1286</a>\n<a href=\"#1287\" id=\"1287\">1287</a>\n<a href=\"#1288\" id=\"1288\">1288</a>\n<a href=\"#1289\" id=\"1289\">1289</a>\n<a href=\"#1290\" id=\"1290\">1290</a>\n<a href=\"#1291\" id=\"1291\">1291</a>\n<a href=\"#1292\" id=\"1292\">1292</a>\n<a href=\"#1293\" id=\"1293\">1293</a>\n<a href=\"#1294\" id=\"1294\">1294</a>\n<a href=\"#1295\" id=\"1295\">1295</a>\n<a href=\"#1296\" id=\"1296\">1296</a>\n<a href=\"#1297\" id=\"1297\">1297</a>\n<a href=\"#1298\" id=\"1298\">1298</a>\n<a href=\"#1299\" id=\"1299\">1299</a>\n<a href=\"#1300\" id=\"1300\">1300</a>\n<a href=\"#1301\" id=\"1301\">1301</a>\n<a href=\"#1302\" id=\"1302\">1302</a>\n<a href=\"#1303\" id=\"1303\">1303</a>\n<a href=\"#1304\" id=\"1304\">1304</a>\n<a href=\"#1305\" id=\"1305\">1305</a>\n<a href=\"#1306\" id=\"1306\">1306</a>\n<a href=\"#1307\" id=\"1307\">1307</a>\n<a href=\"#1308\" id=\"1308\">1308</a>\n<a href=\"#1309\" id=\"1309\">1309</a>\n<a href=\"#1310\" id=\"1310\">1310</a>\n<a href=\"#1311\" id=\"1311\">1311</a>\n<a href=\"#1312\" id=\"1312\">1312</a>\n<a href=\"#1313\" id=\"1313\">1313</a>\n<a href=\"#1314\" id=\"1314\">1314</a>\n<a href=\"#1315\" id=\"1315\">1315</a>\n<a href=\"#1316\" id=\"1316\">1316</a>\n<a href=\"#1317\" id=\"1317\">1317</a>\n<a href=\"#1318\" id=\"1318\">1318</a>\n<a href=\"#1319\" id=\"1319\">1319</a>\n<a href=\"#1320\" id=\"1320\">1320</a>\n<a href=\"#1321\" id=\"1321\">1321</a>\n<a href=\"#1322\" id=\"1322\">1322</a>\n<a href=\"#1323\" id=\"1323\">1323</a>\n<a href=\"#1324\" id=\"1324\">1324</a>\n<a href=\"#1325\" id=\"1325\">1325</a>\n<a href=\"#1326\" id=\"1326\">1326</a>\n<a href=\"#1327\" id=\"1327\">1327</a>\n<a href=\"#1328\" id=\"1328\">1328</a>\n<a href=\"#1329\" id=\"1329\">1329</a>\n<a href=\"#1330\" id=\"1330\">1330</a>\n<a href=\"#1331\" id=\"1331\">1331</a>\n<a href=\"#1332\" id=\"1332\">1332</a>\n<a href=\"#1333\" id=\"1333\">1333</a>\n<a href=\"#1334\" id=\"1334\">1334</a>\n<a href=\"#1335\" id=\"1335\">1335</a>\n<a href=\"#1336\" id=\"1336\">1336</a>\n<a href=\"#1337\" id=\"1337\">1337</a>\n<a href=\"#1338\" id=\"1338\">1338</a>\n<a href=\"#1339\" id=\"1339\">1339</a>\n<a href=\"#1340\" id=\"1340\">1340</a>\n<a href=\"#1341\" id=\"1341\">1341</a>\n<a href=\"#1342\" id=\"1342\">1342</a>\n<a href=\"#1343\" id=\"1343\">1343</a>\n<a href=\"#1344\" id=\"1344\">1344</a>\n<a href=\"#1345\" id=\"1345\">1345</a>\n<a href=\"#1346\" id=\"1346\">1346</a>\n<a href=\"#1347\" id=\"1347\">1347</a>\n<a href=\"#1348\" id=\"1348\">1348</a>\n<a href=\"#1349\" id=\"1349\">1349</a>\n<a href=\"#1350\" id=\"1350\">1350</a>\n<a href=\"#1351\" id=\"1351\">1351</a>\n<a href=\"#1352\" id=\"1352\">1352</a>\n<a href=\"#1353\" id=\"1353\">1353</a>\n<a href=\"#1354\" id=\"1354\">1354</a>\n<a href=\"#1355\" id=\"1355\">1355</a>\n<a href=\"#1356\" id=\"1356\">1356</a>\n<a href=\"#1357\" id=\"1357\">1357</a>\n<a href=\"#1358\" id=\"1358\">1358</a>\n<a href=\"#1359\" id=\"1359\">1359</a>\n<a href=\"#1360\" id=\"1360\">1360</a>\n<a href=\"#1361\" id=\"1361\">1361</a>\n<a href=\"#1362\" id=\"1362\">1362</a>\n<a href=\"#1363\" id=\"1363\">1363</a>\n<a href=\"#1364\" id=\"1364\">1364</a>\n<a href=\"#1365\" id=\"1365\">1365</a>\n<a href=\"#1366\" id=\"1366\">1366</a>\n<a href=\"#1367\" id=\"1367\">1367</a>\n<a href=\"#1368\" id=\"1368\">1368</a>\n<a href=\"#1369\" id=\"1369\">1369</a>\n<a href=\"#1370\" id=\"1370\">1370</a>\n<a href=\"#1371\" id=\"1371\">1371</a>\n<a href=\"#1372\" id=\"1372\">1372</a>\n<a href=\"#1373\" id=\"1373\">1373</a>\n<a href=\"#1374\" id=\"1374\">1374</a>\n<a href=\"#1375\" id=\"1375\">1375</a>\n<a href=\"#1376\" id=\"1376\">1376</a>\n<a href=\"#1377\" id=\"1377\">1377</a>\n<a href=\"#1378\" id=\"1378\">1378</a>\n<a href=\"#1379\" id=\"1379\">1379</a>\n<a href=\"#1380\" id=\"1380\">1380</a>\n<a href=\"#1381\" id=\"1381\">1381</a>\n<a href=\"#1382\" id=\"1382\">1382</a>\n<a href=\"#1383\" id=\"1383\">1383</a>\n<a href=\"#1384\" id=\"1384\">1384</a>\n<a href=\"#1385\" id=\"1385\">1385</a>\n<a href=\"#1386\" id=\"1386\">1386</a>\n<a href=\"#1387\" id=\"1387\">1387</a>\n<a href=\"#1388\" id=\"1388\">1388</a>\n<a href=\"#1389\" id=\"1389\">1389</a>\n<a href=\"#1390\" id=\"1390\">1390</a>\n<a href=\"#1391\" id=\"1391\">1391</a>\n<a href=\"#1392\" id=\"1392\">1392</a>\n<a href=\"#1393\" id=\"1393\">1393</a>\n<a href=\"#1394\" id=\"1394\">1394</a>\n<a href=\"#1395\" id=\"1395\">1395</a>\n<a href=\"#1396\" id=\"1396\">1396</a>\n<a href=\"#1397\" id=\"1397\">1397</a>\n<a href=\"#1398\" id=\"1398\">1398</a>\n<a href=\"#1399\" id=\"1399\">1399</a>\n<a href=\"#1400\" id=\"1400\">1400</a>\n<a href=\"#1401\" id=\"1401\">1401</a>\n<a href=\"#1402\" id=\"1402\">1402</a>\n<a href=\"#1403\" id=\"1403\">1403</a>\n<a href=\"#1404\" id=\"1404\">1404</a>\n<a href=\"#1405\" id=\"1405\">1405</a>\n<a href=\"#1406\" id=\"1406\">1406</a>\n<a href=\"#1407\" id=\"1407\">1407</a>\n<a href=\"#1408\" id=\"1408\">1408</a>\n<a href=\"#1409\" id=\"1409\">1409</a>\n<a href=\"#1410\" id=\"1410\">1410</a>\n<a href=\"#1411\" id=\"1411\">1411</a>\n<a href=\"#1412\" id=\"1412\">1412</a>\n<a href=\"#1413\" id=\"1413\">1413</a>\n<a href=\"#1414\" id=\"1414\">1414</a>\n<a href=\"#1415\" id=\"1415\">1415</a>\n<a href=\"#1416\" id=\"1416\">1416</a>\n<a href=\"#1417\" id=\"1417\">1417</a>\n<a href=\"#1418\" id=\"1418\">1418</a>\n<a href=\"#1419\" id=\"1419\">1419</a>\n<a href=\"#1420\" id=\"1420\">1420</a>\n<a href=\"#1421\" id=\"1421\">1421</a>\n<a href=\"#1422\" id=\"1422\">1422</a>\n<a href=\"#1423\" id=\"1423\">1423</a>\n<a href=\"#1424\" id=\"1424\">1424</a>\n<a href=\"#1425\" id=\"1425\">1425</a>\n<a href=\"#1426\" id=\"1426\">1426</a>\n<a href=\"#1427\" id=\"1427\">1427</a>\n<a href=\"#1428\" id=\"1428\">1428</a>\n<a href=\"#1429\" id=\"1429\">1429</a>\n<a href=\"#1430\" id=\"1430\">1430</a>\n<a href=\"#1431\" id=\"1431\">1431</a>\n<a href=\"#1432\" id=\"1432\">1432</a>\n<a href=\"#1433\" id=\"1433\">1433</a>\n<a href=\"#1434\" id=\"1434\">1434</a>\n<a href=\"#1435\" id=\"1435\">1435</a>\n<a href=\"#1436\" id=\"1436\">1436</a>\n<a href=\"#1437\" id=\"1437\">1437</a>\n<a href=\"#1438\" id=\"1438\">1438</a>\n<a href=\"#1439\" id=\"1439\">1439</a>\n<a href=\"#1440\" id=\"1440\">1440</a>\n<a href=\"#1441\" id=\"1441\">1441</a>\n<a href=\"#1442\" id=\"1442\">1442</a>\n<a href=\"#1443\" id=\"1443\">1443</a>\n<a href=\"#1444\" id=\"1444\">1444</a>\n<a href=\"#1445\" id=\"1445\">1445</a>\n<a href=\"#1446\" id=\"1446\">1446</a>\n<a href=\"#1447\" id=\"1447\">1447</a>\n<a href=\"#1448\" id=\"1448\">1448</a>\n<a href=\"#1449\" id=\"1449\">1449</a>\n<a href=\"#1450\" id=\"1450\">1450</a>\n<a href=\"#1451\" id=\"1451\">1451</a>\n<a href=\"#1452\" id=\"1452\">1452</a>\n<a href=\"#1453\" id=\"1453\">1453</a>\n<a href=\"#1454\" id=\"1454\">1454</a>\n<a href=\"#1455\" id=\"1455\">1455</a>\n<a href=\"#1456\" id=\"1456\">1456</a>\n<a href=\"#1457\" id=\"1457\">1457</a>\n<a href=\"#1458\" id=\"1458\">1458</a>\n<a href=\"#1459\" id=\"1459\">1459</a>\n<a href=\"#1460\" id=\"1460\">1460</a>\n<a href=\"#1461\" id=\"1461\">1461</a>\n<a href=\"#1462\" id=\"1462\">1462</a>\n<a href=\"#1463\" id=\"1463\">1463</a>\n<a href=\"#1464\" id=\"1464\">1464</a>\n<a href=\"#1465\" id=\"1465\">1465</a>\n<a href=\"#1466\" id=\"1466\">1466</a>\n<a href=\"#1467\" id=\"1467\">1467</a>\n<a href=\"#1468\" id=\"1468\">1468</a>\n<a href=\"#1469\" id=\"1469\">1469</a>\n<a href=\"#1470\" id=\"1470\">1470</a>\n<a href=\"#1471\" id=\"1471\">1471</a>\n<a href=\"#1472\" id=\"1472\">1472</a>\n<a href=\"#1473\" id=\"1473\">1473</a>\n<a href=\"#1474\" id=\"1474\">1474</a>\n<a href=\"#1475\" id=\"1475\">1475</a>\n<a href=\"#1476\" id=\"1476\">1476</a>\n<a href=\"#1477\" id=\"1477\">1477</a>\n<a href=\"#1478\" id=\"1478\">1478</a>\n<a href=\"#1479\" id=\"1479\">1479</a>\n<a href=\"#1480\" id=\"1480\">1480</a>\n<a href=\"#1481\" id=\"1481\">1481</a>\n<a href=\"#1482\" id=\"1482\">1482</a>\n<a href=\"#1483\" id=\"1483\">1483</a>\n<a href=\"#1484\" id=\"1484\">1484</a>\n<a href=\"#1485\" id=\"1485\">1485</a>\n<a href=\"#1486\" id=\"1486\">1486</a>\n<a href=\"#1487\" id=\"1487\">1487</a>\n<a href=\"#1488\" id=\"1488\">1488</a>\n<a href=\"#1489\" id=\"1489\">1489</a>\n<a href=\"#1490\" id=\"1490\">1490</a>\n<a href=\"#1491\" id=\"1491\">1491</a>\n<a href=\"#1492\" id=\"1492\">1492</a>\n<a href=\"#1493\" id=\"1493\">1493</a>\n<a href=\"#1494\" id=\"1494\">1494</a>\n<a href=\"#1495\" id=\"1495\">1495</a>\n<a href=\"#1496\" id=\"1496\">1496</a>\n<a href=\"#1497\" id=\"1497\">1497</a>\n<a href=\"#1498\" id=\"1498\">1498</a>\n<a href=\"#1499\" id=\"1499\">1499</a>\n<a href=\"#1500\" id=\"1500\">1500</a>\n<a href=\"#1501\" id=\"1501\">1501</a>\n<a href=\"#1502\" id=\"1502\">1502</a>\n<a href=\"#1503\" id=\"1503\">1503</a>\n<a href=\"#1504\" id=\"1504\">1504</a>\n<a href=\"#1505\" id=\"1505\">1505</a>\n<a href=\"#1506\" id=\"1506\">1506</a>\n<a href=\"#1507\" id=\"1507\">1507</a>\n<a href=\"#1508\" id=\"1508\">1508</a>\n<a href=\"#1509\" id=\"1509\">1509</a>\n<a href=\"#1510\" id=\"1510\">1510</a>\n<a href=\"#1511\" id=\"1511\">1511</a>\n<a href=\"#1512\" id=\"1512\">1512</a>\n<a href=\"#1513\" id=\"1513\">1513</a>\n<a href=\"#1514\" id=\"1514\">1514</a>\n<a href=\"#1515\" id=\"1515\">1515</a>\n<a href=\"#1516\" id=\"1516\">1516</a>\n<a href=\"#1517\" id=\"1517\">1517</a>\n<a href=\"#1518\" id=\"1518\">1518</a>\n<a href=\"#1519\" id=\"1519\">1519</a>\n<a href=\"#1520\" id=\"1520\">1520</a>\n<a href=\"#1521\" id=\"1521\">1521</a>\n<a href=\"#1522\" id=\"1522\">1522</a>\n<a href=\"#1523\" id=\"1523\">1523</a>\n<a href=\"#1524\" id=\"1524\">1524</a>\n<a href=\"#1525\" id=\"1525\">1525</a>\n<a href=\"#1526\" id=\"1526\">1526</a>\n<a href=\"#1527\" id=\"1527\">1527</a>\n<a href=\"#1528\" id=\"1528\">1528</a>\n<a href=\"#1529\" id=\"1529\">1529</a>\n<a href=\"#1530\" id=\"1530\">1530</a>\n<a href=\"#1531\" id=\"1531\">1531</a>\n<a href=\"#1532\" id=\"1532\">1532</a>\n<a href=\"#1533\" id=\"1533\">1533</a>\n<a href=\"#1534\" id=\"1534\">1534</a>\n<a href=\"#1535\" id=\"1535\">1535</a>\n<a href=\"#1536\" id=\"1536\">1536</a>\n<a href=\"#1537\" id=\"1537\">1537</a>\n<a href=\"#1538\" id=\"1538\">1538</a>\n<a href=\"#1539\" id=\"1539\">1539</a>\n<a href=\"#1540\" id=\"1540\">1540</a>\n<a href=\"#1541\" id=\"1541\">1541</a>\n<a href=\"#1542\" id=\"1542\">1542</a>\n<a href=\"#1543\" id=\"1543\">1543</a>\n<a href=\"#1544\" id=\"1544\">1544</a>\n<a href=\"#1545\" id=\"1545\">1545</a>\n<a href=\"#1546\" id=\"1546\">1546</a>\n<a href=\"#1547\" id=\"1547\">1547</a>\n<a href=\"#1548\" id=\"1548\">1548</a>\n<a href=\"#1549\" id=\"1549\">1549</a>\n<a href=\"#1550\" id=\"1550\">1550</a>\n<a href=\"#1551\" id=\"1551\">1551</a>\n<a href=\"#1552\" id=\"1552\">1552</a>\n<a href=\"#1553\" id=\"1553\">1553</a>\n<a href=\"#1554\" id=\"1554\">1554</a>\n<a href=\"#1555\" id=\"1555\">1555</a>\n<a href=\"#1556\" id=\"1556\">1556</a>\n<a href=\"#1557\" id=\"1557\">1557</a>\n<a href=\"#1558\" id=\"1558\">1558</a>\n<a href=\"#1559\" id=\"1559\">1559</a>\n<a href=\"#1560\" id=\"1560\">1560</a>\n<a href=\"#1561\" id=\"1561\">1561</a>\n<a href=\"#1562\" id=\"1562\">1562</a>\n<a href=\"#1563\" id=\"1563\">1563</a>\n<a href=\"#1564\" id=\"1564\">1564</a>\n<a href=\"#1565\" id=\"1565\">1565</a>\n<a href=\"#1566\" id=\"1566\">1566</a>\n<a href=\"#1567\" id=\"1567\">1567</a>\n<a href=\"#1568\" id=\"1568\">1568</a>\n<a href=\"#1569\" id=\"1569\">1569</a>\n<a href=\"#1570\" id=\"1570\">1570</a>\n<a href=\"#1571\" id=\"1571\">1571</a>\n<a href=\"#1572\" id=\"1572\">1572</a>\n<a href=\"#1573\" id=\"1573\">1573</a>\n<a href=\"#1574\" id=\"1574\">1574</a>\n<a href=\"#1575\" id=\"1575\">1575</a>\n<a href=\"#1576\" id=\"1576\">1576</a>\n<a href=\"#1577\" id=\"1577\">1577</a>\n<a href=\"#1578\" id=\"1578\">1578</a>\n<a href=\"#1579\" id=\"1579\">1579</a>\n<a href=\"#1580\" id=\"1580\">1580</a>\n<a href=\"#1581\" id=\"1581\">1581</a>\n<a href=\"#1582\" id=\"1582\">1582</a>\n<a href=\"#1583\" id=\"1583\">1583</a>\n<a href=\"#1584\" id=\"1584\">1584</a>\n<a href=\"#1585\" id=\"1585\">1585</a>\n<a href=\"#1586\" id=\"1586\">1586</a>\n<a href=\"#1587\" id=\"1587\">1587</a>\n<a href=\"#1588\" id=\"1588\">1588</a>\n<a href=\"#1589\" id=\"1589\">1589</a>\n<a href=\"#1590\" id=\"1590\">1590</a>\n<a href=\"#1591\" id=\"1591\">1591</a>\n<a href=\"#1592\" id=\"1592\">1592</a>\n<a href=\"#1593\" id=\"1593\">1593</a>\n<a href=\"#1594\" id=\"1594\">1594</a>\n<a href=\"#1595\" id=\"1595\">1595</a>\n<a href=\"#1596\" id=\"1596\">1596</a>\n<a href=\"#1597\" id=\"1597\">1597</a>\n<a href=\"#1598\" id=\"1598\">1598</a>\n<a href=\"#1599\" id=\"1599\">1599</a>\n<a href=\"#1600\" id=\"1600\">1600</a>\n<a href=\"#1601\" id=\"1601\">1601</a>\n<a href=\"#1602\" id=\"1602\">1602</a>\n<a href=\"#1603\" id=\"1603\">1603</a>\n<a href=\"#1604\" id=\"1604\">1604</a>\n<a href=\"#1605\" id=\"1605\">1605</a>\n<a href=\"#1606\" id=\"1606\">1606</a>\n<a href=\"#1607\" id=\"1607\">1607</a>\n<a href=\"#1608\" id=\"1608\">1608</a>\n<a href=\"#1609\" id=\"1609\">1609</a>\n<a href=\"#1610\" id=\"1610\">1610</a>\n<a href=\"#1611\" id=\"1611\">1611</a>\n<a href=\"#1612\" id=\"1612\">1612</a>\n<a href=\"#1613\" id=\"1613\">1613</a>\n<a href=\"#1614\" id=\"1614\">1614</a>\n<a href=\"#1615\" id=\"1615\">1615</a>\n<a href=\"#1616\" id=\"1616\">1616</a>\n<a href=\"#1617\" id=\"1617\">1617</a>\n<a href=\"#1618\" id=\"1618\">1618</a>\n<a href=\"#1619\" id=\"1619\">1619</a>\n<a href=\"#1620\" id=\"1620\">1620</a>\n<a href=\"#1621\" id=\"1621\">1621</a>\n<a href=\"#1622\" id=\"1622\">1622</a>\n<a href=\"#1623\" id=\"1623\">1623</a>\n<a href=\"#1624\" id=\"1624\">1624</a>\n<a href=\"#1625\" id=\"1625\">1625</a>\n<a href=\"#1626\" id=\"1626\">1626</a>\n<a href=\"#1627\" id=\"1627\">1627</a>\n<a href=\"#1628\" id=\"1628\">1628</a>\n<a href=\"#1629\" id=\"1629\">1629</a>\n<a href=\"#1630\" id=\"1630\">1630</a>\n<a href=\"#1631\" id=\"1631\">1631</a>\n<a href=\"#1632\" id=\"1632\">1632</a>\n<a href=\"#1633\" id=\"1633\">1633</a>\n<a href=\"#1634\" id=\"1634\">1634</a>\n<a href=\"#1635\" id=\"1635\">1635</a>\n<a href=\"#1636\" id=\"1636\">1636</a>\n<a href=\"#1637\" id=\"1637\">1637</a>\n<a href=\"#1638\" id=\"1638\">1638</a>\n<a href=\"#1639\" id=\"1639\">1639</a>\n<a href=\"#1640\" id=\"1640\">1640</a>\n<a href=\"#1641\" id=\"1641\">1641</a>\n<a href=\"#1642\" id=\"1642\">1642</a>\n<a href=\"#1643\" id=\"1643\">1643</a>\n<a href=\"#1644\" id=\"1644\">1644</a>\n<a href=\"#1645\" id=\"1645\">1645</a>\n<a href=\"#1646\" id=\"1646\">1646</a>\n<a href=\"#1647\" id=\"1647\">1647</a>\n<a href=\"#1648\" id=\"1648\">1648</a>\n<a href=\"#1649\" id=\"1649\">1649</a>\n<a href=\"#1650\" id=\"1650\">1650</a>\n<a href=\"#1651\" id=\"1651\">1651</a>\n<a href=\"#1652\" id=\"1652\">1652</a>\n<a href=\"#1653\" id=\"1653\">1653</a>\n<a href=\"#1654\" id=\"1654\">1654</a>\n<a href=\"#1655\" id=\"1655\">1655</a>\n<a href=\"#1656\" id=\"1656\">1656</a>\n<a href=\"#1657\" id=\"1657\">1657</a>\n<a href=\"#1658\" id=\"1658\">1658</a>\n<a href=\"#1659\" id=\"1659\">1659</a>\n<a href=\"#1660\" id=\"1660\">1660</a>\n<a href=\"#1661\" id=\"1661\">1661</a>\n<a href=\"#1662\" id=\"1662\">1662</a>\n<a href=\"#1663\" id=\"1663\">1663</a>\n<a href=\"#1664\" id=\"1664\">1664</a>\n<a href=\"#1665\" id=\"1665\">1665</a>\n<a href=\"#1666\" id=\"1666\">1666</a>\n<a href=\"#1667\" id=\"1667\">1667</a>\n<a href=\"#1668\" id=\"1668\">1668</a>\n<a href=\"#1669\" id=\"1669\">1669</a>\n<a href=\"#1670\" id=\"1670\">1670</a>\n<a href=\"#1671\" id=\"1671\">1671</a>\n<a href=\"#1672\" id=\"1672\">1672</a>\n<a href=\"#1673\" id=\"1673\">1673</a>\n<a href=\"#1674\" id=\"1674\">1674</a>\n<a href=\"#1675\" id=\"1675\">1675</a>\n<a href=\"#1676\" id=\"1676\">1676</a>\n<a href=\"#1677\" id=\"1677\">1677</a>\n<a href=\"#1678\" id=\"1678\">1678</a>\n<a href=\"#1679\" id=\"1679\">1679</a>\n<a href=\"#1680\" id=\"1680\">1680</a>\n<a href=\"#1681\" id=\"1681\">1681</a>\n<a href=\"#1682\" id=\"1682\">1682</a>\n<a href=\"#1683\" id=\"1683\">1683</a>\n<a href=\"#1684\" id=\"1684\">1684</a>\n<a href=\"#1685\" id=\"1685\">1685</a>\n<a href=\"#1686\" id=\"1686\">1686</a>\n<a href=\"#1687\" id=\"1687\">1687</a>\n<a href=\"#1688\" id=\"1688\">1688</a>\n<a href=\"#1689\" id=\"1689\">1689</a>\n<a href=\"#1690\" id=\"1690\">1690</a>\n<a href=\"#1691\" id=\"1691\">1691</a>\n<a href=\"#1692\" id=\"1692\">1692</a>\n<a href=\"#1693\" id=\"1693\">1693</a>\n<a href=\"#1694\" id=\"1694\">1694</a>\n<a href=\"#1695\" id=\"1695\">1695</a>\n<a href=\"#1696\" id=\"1696\">1696</a>\n<a href=\"#1697\" id=\"1697\">1697</a>\n<a href=\"#1698\" id=\"1698\">1698</a>\n<a href=\"#1699\" id=\"1699\">1699</a>\n<a href=\"#1700\" id=\"1700\">1700</a>\n<a href=\"#1701\" id=\"1701\">1701</a>\n<a href=\"#1702\" id=\"1702\">1702</a>\n<a href=\"#1703\" id=\"1703\">1703</a>\n<a href=\"#1704\" id=\"1704\">1704</a>\n<a href=\"#1705\" id=\"1705\">1705</a>\n<a href=\"#1706\" id=\"1706\">1706</a>\n<a href=\"#1707\" id=\"1707\">1707</a>\n<a href=\"#1708\" id=\"1708\">1708</a>\n<a href=\"#1709\" id=\"1709\">1709</a>\n<a href=\"#1710\" id=\"1710\">1710</a>\n<a href=\"#1711\" id=\"1711\">1711</a>\n<a href=\"#1712\" id=\"1712\">1712</a>\n<a href=\"#1713\" id=\"1713\">1713</a>\n<a href=\"#1714\" id=\"1714\">1714</a>\n<a href=\"#1715\" id=\"1715\">1715</a>\n<a href=\"#1716\" id=\"1716\">1716</a>\n<a href=\"#1717\" id=\"1717\">1717</a>\n<a href=\"#1718\" id=\"1718\">1718</a>\n<a href=\"#1719\" id=\"1719\">1719</a>\n<a href=\"#1720\" id=\"1720\">1720</a>\n<a href=\"#1721\" id=\"1721\">1721</a>\n<a href=\"#1722\" id=\"1722\">1722</a>\n<a href=\"#1723\" id=\"1723\">1723</a>\n<a href=\"#1724\" id=\"1724\">1724</a>\n<a href=\"#1725\" id=\"1725\">1725</a>\n<a href=\"#1726\" id=\"1726\">1726</a>\n<a href=\"#1727\" id=\"1727\">1727</a>\n<a href=\"#1728\" id=\"1728\">1728</a>\n<a href=\"#1729\" id=\"1729\">1729</a>\n<a href=\"#1730\" id=\"1730\">1730</a>\n<a href=\"#1731\" id=\"1731\">1731</a>\n<a href=\"#1732\" id=\"1732\">1732</a>\n<a href=\"#1733\" id=\"1733\">1733</a>\n<a href=\"#1734\" id=\"1734\">1734</a>\n<a href=\"#1735\" id=\"1735\">1735</a>\n<a href=\"#1736\" id=\"1736\">1736</a>\n<a href=\"#1737\" id=\"1737\">1737</a>\n<a href=\"#1738\" id=\"1738\">1738</a>\n<a href=\"#1739\" id=\"1739\">1739</a>\n<a href=\"#1740\" id=\"1740\">1740</a>\n<a href=\"#1741\" id=\"1741\">1741</a>\n<a href=\"#1742\" id=\"1742\">1742</a>\n<a href=\"#1743\" id=\"1743\">1743</a>\n<a href=\"#1744\" id=\"1744\">1744</a>\n<a href=\"#1745\" id=\"1745\">1745</a>\n<a href=\"#1746\" id=\"1746\">1746</a>\n<a href=\"#1747\" id=\"1747\">1747</a>\n<a href=\"#1748\" id=\"1748\">1748</a>\n<a href=\"#1749\" id=\"1749\">1749</a>\n<a href=\"#1750\" id=\"1750\">1750</a>\n<a href=\"#1751\" id=\"1751\">1751</a>\n<a href=\"#1752\" id=\"1752\">1752</a>\n<a href=\"#1753\" id=\"1753\">1753</a>\n<a href=\"#1754\" id=\"1754\">1754</a>\n<a href=\"#1755\" id=\"1755\">1755</a>\n<a href=\"#1756\" id=\"1756\">1756</a>\n<a href=\"#1757\" id=\"1757\">1757</a>\n<a href=\"#1758\" id=\"1758\">1758</a>\n<a href=\"#1759\" id=\"1759\">1759</a>\n<a href=\"#1760\" id=\"1760\">1760</a>\n<a href=\"#1761\" id=\"1761\">1761</a>\n<a href=\"#1762\" id=\"1762\">1762</a>\n<a href=\"#1763\" id=\"1763\">1763</a>\n<a href=\"#1764\" id=\"1764\">1764</a>\n<a href=\"#1765\" id=\"1765\">1765</a>\n<a href=\"#1766\" id=\"1766\">1766</a>\n<a href=\"#1767\" id=\"1767\">1767</a>\n<a href=\"#1768\" id=\"1768\">1768</a>\n<a href=\"#1769\" id=\"1769\">1769</a>\n<a href=\"#1770\" id=\"1770\">1770</a>\n<a href=\"#1771\" id=\"1771\">1771</a>\n<a href=\"#1772\" id=\"1772\">1772</a>\n<a href=\"#1773\" id=\"1773\">1773</a>\n<a href=\"#1774\" id=\"1774\">1774</a>\n<a href=\"#1775\" id=\"1775\">1775</a>\n<a href=\"#1776\" id=\"1776\">1776</a>\n<a href=\"#1777\" id=\"1777\">1777</a>\n<a href=\"#1778\" id=\"1778\">1778</a>\n<a href=\"#1779\" id=\"1779\">1779</a>\n<a href=\"#1780\" id=\"1780\">1780</a>\n<a href=\"#1781\" id=\"1781\">1781</a>\n<a href=\"#1782\" id=\"1782\">1782</a>\n<a href=\"#1783\" id=\"1783\">1783</a>\n<a href=\"#1784\" id=\"1784\">1784</a>\n<a href=\"#1785\" id=\"1785\">1785</a>\n<a href=\"#1786\" id=\"1786\">1786</a>\n<a href=\"#1787\" id=\"1787\">1787</a>\n<a href=\"#1788\" id=\"1788\">1788</a>\n<a href=\"#1789\" id=\"1789\">1789</a>\n<a href=\"#1790\" id=\"1790\">1790</a>\n<a href=\"#1791\" id=\"1791\">1791</a>\n<a href=\"#1792\" id=\"1792\">1792</a>\n<a href=\"#1793\" id=\"1793\">1793</a>\n<a href=\"#1794\" id=\"1794\">1794</a>\n<a href=\"#1795\" id=\"1795\">1795</a>\n<a href=\"#1796\" id=\"1796\">1796</a>\n<a href=\"#1797\" id=\"1797\">1797</a>\n<a href=\"#1798\" id=\"1798\">1798</a>\n<a href=\"#1799\" id=\"1799\">1799</a>\n<a href=\"#1800\" id=\"1800\">1800</a>\n<a href=\"#1801\" id=\"1801\">1801</a>\n<a href=\"#1802\" id=\"1802\">1802</a>\n<a href=\"#1803\" id=\"1803\">1803</a>\n<a href=\"#1804\" id=\"1804\">1804</a>\n<a href=\"#1805\" id=\"1805\">1805</a>\n<a href=\"#1806\" id=\"1806\">1806</a>\n<a href=\"#1807\" id=\"1807\">1807</a>\n<a href=\"#1808\" id=\"1808\">1808</a>\n<a href=\"#1809\" id=\"1809\">1809</a>\n<a href=\"#1810\" id=\"1810\">1810</a>\n<a href=\"#1811\" id=\"1811\">1811</a>\n<a href=\"#1812\" id=\"1812\">1812</a>\n<a href=\"#1813\" id=\"1813\">1813</a>\n<a href=\"#1814\" id=\"1814\">1814</a>\n<a href=\"#1815\" id=\"1815\">1815</a>\n<a href=\"#1816\" id=\"1816\">1816</a>\n<a href=\"#1817\" id=\"1817\">1817</a>\n<a href=\"#1818\" id=\"1818\">1818</a>\n<a href=\"#1819\" id=\"1819\">1819</a>\n<a href=\"#1820\" id=\"1820\">1820</a>\n<a href=\"#1821\" id=\"1821\">1821</a>\n<a href=\"#1822\" id=\"1822\">1822</a>\n<a href=\"#1823\" id=\"1823\">1823</a>\n<a href=\"#1824\" id=\"1824\">1824</a>\n<a href=\"#1825\" id=\"1825\">1825</a>\n<a href=\"#1826\" id=\"1826\">1826</a>\n<a href=\"#1827\" id=\"1827\">1827</a>\n<a href=\"#1828\" id=\"1828\">1828</a>\n<a href=\"#1829\" id=\"1829\">1829</a>\n<a href=\"#1830\" id=\"1830\">1830</a>\n<a href=\"#1831\" id=\"1831\">1831</a>\n<a href=\"#1832\" id=\"1832\">1832</a>\n<a href=\"#1833\" id=\"1833\">1833</a>\n<a href=\"#1834\" id=\"1834\">1834</a>\n<a href=\"#1835\" id=\"1835\">1835</a>\n<a href=\"#1836\" id=\"1836\">1836</a>\n<a href=\"#1837\" id=\"1837\">1837</a>\n<a href=\"#1838\" id=\"1838\">1838</a>\n<a href=\"#1839\" id=\"1839\">1839</a>\n<a href=\"#1840\" id=\"1840\">1840</a>\n<a href=\"#1841\" id=\"1841\">1841</a>\n<a href=\"#1842\" id=\"1842\">1842</a>\n<a href=\"#1843\" id=\"1843\">1843</a>\n<a href=\"#1844\" id=\"1844\">1844</a>\n<a href=\"#1845\" id=\"1845\">1845</a>\n<a href=\"#1846\" id=\"1846\">1846</a>\n<a href=\"#1847\" id=\"1847\">1847</a>\n<a href=\"#1848\" id=\"1848\">1848</a>\n<a href=\"#1849\" id=\"1849\">1849</a>\n<a href=\"#1850\" id=\"1850\">1850</a>\n<a href=\"#1851\" id=\"1851\">1851</a>\n<a href=\"#1852\" id=\"1852\">1852</a>\n<a href=\"#1853\" id=\"1853\">1853</a>\n<a href=\"#1854\" id=\"1854\">1854</a>\n<a href=\"#1855\" id=\"1855\">1855</a>\n<a href=\"#1856\" id=\"1856\">1856</a>\n<a href=\"#1857\" id=\"1857\">1857</a>\n<a href=\"#1858\" id=\"1858\">1858</a>\n<a href=\"#1859\" id=\"1859\">1859</a>\n<a href=\"#1860\" id=\"1860\">1860</a>\n<a href=\"#1861\" id=\"1861\">1861</a>\n<a href=\"#1862\" id=\"1862\">1862</a>\n<a href=\"#1863\" id=\"1863\">1863</a>\n<a href=\"#1864\" id=\"1864\">1864</a>\n<a href=\"#1865\" id=\"1865\">1865</a>\n<a href=\"#1866\" id=\"1866\">1866</a>\n<a href=\"#1867\" id=\"1867\">1867</a>\n<a href=\"#1868\" id=\"1868\">1868</a>\n<a href=\"#1869\" id=\"1869\">1869</a>\n<a href=\"#1870\" id=\"1870\">1870</a>\n<a href=\"#1871\" id=\"1871\">1871</a>\n<a href=\"#1872\" id=\"1872\">1872</a>\n<a href=\"#1873\" id=\"1873\">1873</a>\n<a href=\"#1874\" id=\"1874\">1874</a>\n<a href=\"#1875\" id=\"1875\">1875</a>\n<a href=\"#1876\" id=\"1876\">1876</a>\n<a href=\"#1877\" id=\"1877\">1877</a>\n<a href=\"#1878\" id=\"1878\">1878</a>\n<a href=\"#1879\" id=\"1879\">1879</a>\n<a href=\"#1880\" id=\"1880\">1880</a>\n<a href=\"#1881\" id=\"1881\">1881</a>\n<a href=\"#1882\" id=\"1882\">1882</a>\n<a href=\"#1883\" id=\"1883\">1883</a>\n<a href=\"#1884\" id=\"1884\">1884</a>\n<a href=\"#1885\" id=\"1885\">1885</a>\n<a href=\"#1886\" id=\"1886\">1886</a>\n<a href=\"#1887\" id=\"1887\">1887</a>\n<a href=\"#1888\" id=\"1888\">1888</a>\n<a href=\"#1889\" id=\"1889\">1889</a>\n<a href=\"#1890\" id=\"1890\">1890</a>\n<a href=\"#1891\" id=\"1891\">1891</a>\n<a href=\"#1892\" id=\"1892\">1892</a>\n<a href=\"#1893\" id=\"1893\">1893</a>\n<a href=\"#1894\" id=\"1894\">1894</a>\n<a href=\"#1895\" id=\"1895\">1895</a>\n<a href=\"#1896\" id=\"1896\">1896</a>\n<a href=\"#1897\" id=\"1897\">1897</a>\n<a href=\"#1898\" id=\"1898\">1898</a>\n<a href=\"#1899\" id=\"1899\">1899</a>\n<a href=\"#1900\" id=\"1900\">1900</a>\n<a href=\"#1901\" id=\"1901\">1901</a>\n<a href=\"#1902\" id=\"1902\">1902</a>\n<a href=\"#1903\" id=\"1903\">1903</a>\n<a href=\"#1904\" id=\"1904\">1904</a>\n<a href=\"#1905\" id=\"1905\">1905</a>\n<a href=\"#1906\" id=\"1906\">1906</a>\n<a href=\"#1907\" id=\"1907\">1907</a>\n<a href=\"#1908\" id=\"1908\">1908</a>\n<a href=\"#1909\" id=\"1909\">1909</a>\n<a href=\"#1910\" id=\"1910\">1910</a>\n<a href=\"#1911\" id=\"1911\">1911</a>\n<a href=\"#1912\" id=\"1912\">1912</a>\n<a href=\"#1913\" id=\"1913\">1913</a>\n<a href=\"#1914\" id=\"1914\">1914</a>\n<a href=\"#1915\" id=\"1915\">1915</a>\n<a href=\"#1916\" id=\"1916\">1916</a>\n<a href=\"#1917\" id=\"1917\">1917</a>\n<a href=\"#1918\" id=\"1918\">1918</a>\n<a href=\"#1919\" id=\"1919\">1919</a>\n<a href=\"#1920\" id=\"1920\">1920</a>\n<a href=\"#1921\" id=\"1921\">1921</a>\n<a href=\"#1922\" id=\"1922\">1922</a>\n<a href=\"#1923\" id=\"1923\">1923</a>\n<a href=\"#1924\" id=\"1924\">1924</a>\n<a href=\"#1925\" id=\"1925\">1925</a>\n<a href=\"#1926\" id=\"1926\">1926</a>\n<a href=\"#1927\" id=\"1927\">1927</a>\n<a href=\"#1928\" id=\"1928\">1928</a>\n<a href=\"#1929\" id=\"1929\">1929</a>\n<a href=\"#1930\" id=\"1930\">1930</a>\n<a href=\"#1931\" id=\"1931\">1931</a>\n<a href=\"#1932\" id=\"1932\">1932</a>\n<a href=\"#1933\" id=\"1933\">1933</a>\n<a href=\"#1934\" id=\"1934\">1934</a>\n<a href=\"#1935\" id=\"1935\">1935</a>\n<a href=\"#1936\" id=\"1936\">1936</a>\n<a href=\"#1937\" id=\"1937\">1937</a>\n<a href=\"#1938\" id=\"1938\">1938</a>\n<a href=\"#1939\" id=\"1939\">1939</a>\n<a href=\"#1940\" id=\"1940\">1940</a>\n<a href=\"#1941\" id=\"1941\">1941</a>\n<a href=\"#1942\" id=\"1942\">1942</a>\n<a href=\"#1943\" id=\"1943\">1943</a>\n<a href=\"#1944\" id=\"1944\">1944</a>\n<a href=\"#1945\" id=\"1945\">1945</a>\n<a href=\"#1946\" id=\"1946\">1946</a>\n<a href=\"#1947\" id=\"1947\">1947</a>\n<a href=\"#1948\" id=\"1948\">1948</a>\n<a href=\"#1949\" id=\"1949\">1949</a>\n<a href=\"#1950\" id=\"1950\">1950</a>\n<a href=\"#1951\" id=\"1951\">1951</a>\n<a href=\"#1952\" id=\"1952\">1952</a>\n<a href=\"#1953\" id=\"1953\">1953</a>\n<a href=\"#1954\" id=\"1954\">1954</a>\n<a href=\"#1955\" id=\"1955\">1955</a>\n<a href=\"#1956\" id=\"1956\">1956</a>\n<a href=\"#1957\" id=\"1957\">1957</a>\n<a href=\"#1958\" id=\"1958\">1958</a>\n<a href=\"#1959\" id=\"1959\">1959</a>\n<a href=\"#1960\" id=\"1960\">1960</a>\n<a href=\"#1961\" id=\"1961\">1961</a>\n<a href=\"#1962\" id=\"1962\">1962</a>\n<a href=\"#1963\" id=\"1963\">1963</a>\n<a href=\"#1964\" id=\"1964\">1964</a>\n<a href=\"#1965\" id=\"1965\">1965</a>\n<a href=\"#1966\" id=\"1966\">1966</a>\n<a href=\"#1967\" id=\"1967\">1967</a>\n<a href=\"#1968\" id=\"1968\">1968</a>\n<a href=\"#1969\" id=\"1969\">1969</a>\n<a href=\"#1970\" id=\"1970\">1970</a>\n<a href=\"#1971\" id=\"1971\">1971</a>\n<a href=\"#1972\" id=\"1972\">1972</a>\n<a href=\"#1973\" id=\"1973\">1973</a>\n<a href=\"#1974\" id=\"1974\">1974</a>\n<a href=\"#1975\" id=\"1975\">1975</a>\n<a href=\"#1976\" id=\"1976\">1976</a>\n<a href=\"#1977\" id=\"1977\">1977</a>\n<a href=\"#1978\" id=\"1978\">1978</a>\n<a href=\"#1979\" id=\"1979\">1979</a>\n<a href=\"#1980\" id=\"1980\">1980</a>\n<a href=\"#1981\" id=\"1981\">1981</a>\n<a href=\"#1982\" id=\"1982\">1982</a>\n<a href=\"#1983\" id=\"1983\">1983</a>\n<a href=\"#1984\" id=\"1984\">1984</a>\n<a href=\"#1985\" id=\"1985\">1985</a>\n<a href=\"#1986\" id=\"1986\">1986</a>\n<a href=\"#1987\" id=\"1987\">1987</a>\n<a href=\"#1988\" id=\"1988\">1988</a>\n<a href=\"#1989\" id=\"1989\">1989</a>\n<a href=\"#1990\" id=\"1990\">1990</a>\n<a href=\"#1991\" id=\"1991\">1991</a>\n<a href=\"#1992\" id=\"1992\">1992</a>\n<a href=\"#1993\" id=\"1993\">1993</a>\n<a href=\"#1994\" id=\"1994\">1994</a>\n<a href=\"#1995\" id=\"1995\">1995</a>\n<a href=\"#1996\" id=\"1996\">1996</a>\n<a href=\"#1997\" id=\"1997\">1997</a>\n<a href=\"#1998\" id=\"1998\">1998</a>\n<a href=\"#1999\" id=\"1999\">1999</a>\n<a href=\"#2000\" id=\"2000\">2000</a>\n<a href=\"#2001\" id=\"2001\">2001</a>\n<a href=\"#2002\" id=\"2002\">2002</a>\n<a href=\"#2003\" id=\"2003\">2003</a>\n<a href=\"#2004\" id=\"2004\">2004</a>\n<a href=\"#2005\" id=\"2005\">2005</a>\n<a href=\"#2006\" id=\"2006\">2006</a>\n<a href=\"#2007\" id=\"2007\">2007</a>\n<a href=\"#2008\" id=\"2008\">2008</a>\n<a href=\"#2009\" id=\"2009\">2009</a>\n<a href=\"#2010\" id=\"2010\">2010</a>\n<a href=\"#2011\" id=\"2011\">2011</a>\n<a href=\"#2012\" id=\"2012\">2012</a>\n<a href=\"#2013\" id=\"2013\">2013</a>\n<a href=\"#2014\" id=\"2014\">2014</a>\n<a href=\"#2015\" id=\"2015\">2015</a>\n<a href=\"#2016\" id=\"2016\">2016</a>\n<a href=\"#2017\" id=\"2017\">2017</a>\n<a href=\"#2018\" id=\"2018\">2018</a>\n<a href=\"#2019\" id=\"2019\">2019</a>\n<a href=\"#2020\" id=\"2020\">2020</a>\n<a href=\"#2021\" id=\"2021\">2021</a>\n<a href=\"#2022\" id=\"2022\">2022</a>\n<a href=\"#2023\" id=\"2023\">2023</a>\n<a href=\"#2024\" id=\"2024\">2024</a>\n<a href=\"#2025\" id=\"2025\">2025</a>\n<a href=\"#2026\" id=\"2026\">2026</a>\n<a href=\"#2027\" id=\"2027\">2027</a>\n<a href=\"#2028\" id=\"2028\">2028</a>\n<a href=\"#2029\" id=\"2029\">2029</a>\n<a href=\"#2030\" id=\"2030\">2030</a>\n<a href=\"#2031\" id=\"2031\">2031</a>\n<a href=\"#2032\" id=\"2032\">2032</a>\n<a href=\"#2033\" id=\"2033\">2033</a>\n<a href=\"#2034\" id=\"2034\">2034</a>\n<a href=\"#2035\" id=\"2035\">2035</a>\n<a href=\"#2036\" id=\"2036\">2036</a>\n<a href=\"#2037\" id=\"2037\">2037</a>\n<a href=\"#2038\" id=\"2038\">2038</a>\n<a href=\"#2039\" id=\"2039\">2039</a>\n<a href=\"#2040\" id=\"2040\">2040</a>\n<a href=\"#2041\" id=\"2041\">2041</a>\n<a href=\"#2042\" id=\"2042\">2042</a>\n<a href=\"#2043\" id=\"2043\">2043</a>\n<a href=\"#2044\" id=\"2044\">2044</a>\n<a href=\"#2045\" id=\"2045\">2045</a>\n<a href=\"#2046\" id=\"2046\">2046</a>\n<a href=\"#2047\" id=\"2047\">2047</a>\n<a href=\"#2048\" id=\"2048\">2048</a>\n<a href=\"#2049\" id=\"2049\">2049</a>\n<a href=\"#2050\" id=\"2050\">2050</a>\n<a href=\"#2051\" id=\"2051\">2051</a>\n<a href=\"#2052\" id=\"2052\">2052</a>\n<a href=\"#2053\" id=\"2053\">2053</a>\n<a href=\"#2054\" id=\"2054\">2054</a>\n<a href=\"#2055\" id=\"2055\">2055</a>\n<a href=\"#2056\" id=\"2056\">2056</a>\n<a href=\"#2057\" id=\"2057\">2057</a>\n<a href=\"#2058\" id=\"2058\">2058</a>\n<a href=\"#2059\" id=\"2059\">2059</a>\n<a href=\"#2060\" id=\"2060\">2060</a>\n<a href=\"#2061\" id=\"2061\">2061</a>\n<a href=\"#2062\" id=\"2062\">2062</a>\n<a href=\"#2063\" id=\"2063\">2063</a>\n<a href=\"#2064\" id=\"2064\">2064</a>\n<a href=\"#2065\" id=\"2065\">2065</a>\n<a href=\"#2066\" id=\"2066\">2066</a>\n<a href=\"#2067\" id=\"2067\">2067</a>\n<a href=\"#2068\" id=\"2068\">2068</a>\n<a href=\"#2069\" id=\"2069\">2069</a>\n<a href=\"#2070\" id=\"2070\">2070</a>\n<a href=\"#2071\" id=\"2071\">2071</a>\n<a href=\"#2072\" id=\"2072\">2072</a>\n<a href=\"#2073\" id=\"2073\">2073</a>\n<a href=\"#2074\" id=\"2074\">2074</a>\n<a href=\"#2075\" id=\"2075\">2075</a>\n<a href=\"#2076\" id=\"2076\">2076</a>\n<a href=\"#2077\" id=\"2077\">2077</a>\n<a href=\"#2078\" id=\"2078\">2078</a>\n<a href=\"#2079\" id=\"2079\">2079</a>\n<a href=\"#2080\" id=\"2080\">2080</a>\n<a href=\"#2081\" id=\"2081\">2081</a>\n<a href=\"#2082\" id=\"2082\">2082</a>\n<a href=\"#2083\" id=\"2083\">2083</a>\n<a href=\"#2084\" id=\"2084\">2084</a>\n<a href=\"#2085\" id=\"2085\">2085</a>\n<a href=\"#2086\" id=\"2086\">2086</a>\n<a href=\"#2087\" id=\"2087\">2087</a>\n<a href=\"#2088\" id=\"2088\">2088</a>\n<a href=\"#2089\" id=\"2089\">2089</a>\n<a href=\"#2090\" id=\"2090\">2090</a>\n<a href=\"#2091\" id=\"2091\">2091</a>\n<a href=\"#2092\" id=\"2092\">2092</a>\n<a href=\"#2093\" id=\"2093\">2093</a>\n<a href=\"#2094\" id=\"2094\">2094</a>\n<a href=\"#2095\" id=\"2095\">2095</a>\n<a href=\"#2096\" id=\"2096\">2096</a>\n<a href=\"#2097\" id=\"2097\">2097</a>\n<a href=\"#2098\" id=\"2098\">2098</a>\n<a href=\"#2099\" id=\"2099\">2099</a>\n<a href=\"#2100\" id=\"2100\">2100</a>\n<a href=\"#2101\" id=\"2101\">2101</a>\n<a href=\"#2102\" id=\"2102\">2102</a>\n<a href=\"#2103\" id=\"2103\">2103</a>\n<a href=\"#2104\" id=\"2104\">2104</a>\n<a href=\"#2105\" id=\"2105\">2105</a>\n<a href=\"#2106\" id=\"2106\">2106</a>\n<a href=\"#2107\" id=\"2107\">2107</a>\n<a href=\"#2108\" id=\"2108\">2108</a>\n<a href=\"#2109\" id=\"2109\">2109</a>\n<a href=\"#2110\" id=\"2110\">2110</a>\n<a href=\"#2111\" id=\"2111\">2111</a>\n<a href=\"#2112\" id=\"2112\">2112</a>\n<a href=\"#2113\" id=\"2113\">2113</a>\n<a href=\"#2114\" id=\"2114\">2114</a>\n<a href=\"#2115\" id=\"2115\">2115</a>\n<a href=\"#2116\" id=\"2116\">2116</a>\n<a href=\"#2117\" id=\"2117\">2117</a>\n<a href=\"#2118\" id=\"2118\">2118</a>\n<a href=\"#2119\" id=\"2119\">2119</a>\n<a href=\"#2120\" id=\"2120\">2120</a>\n<a href=\"#2121\" id=\"2121\">2121</a>\n<a href=\"#2122\" id=\"2122\">2122</a>\n<a href=\"#2123\" id=\"2123\">2123</a>\n<a href=\"#2124\" id=\"2124\">2124</a>\n<a href=\"#2125\" id=\"2125\">2125</a>\n<a href=\"#2126\" id=\"2126\">2126</a>\n<a href=\"#2127\" id=\"2127\">2127</a>\n<a href=\"#2128\" id=\"2128\">2128</a>\n<a href=\"#2129\" id=\"2129\">2129</a>\n<a href=\"#2130\" id=\"2130\">2130</a>\n<a href=\"#2131\" id=\"2131\">2131</a>\n<a href=\"#2132\" id=\"2132\">2132</a>\n<a href=\"#2133\" id=\"2133\">2133</a>\n<a href=\"#2134\" id=\"2134\">2134</a>\n<a href=\"#2135\" id=\"2135\">2135</a>\n<a href=\"#2136\" id=\"2136\">2136</a>\n<a href=\"#2137\" id=\"2137\">2137</a>\n<a href=\"#2138\" id=\"2138\">2138</a>\n<a href=\"#2139\" id=\"2139\">2139</a>\n<a href=\"#2140\" id=\"2140\">2140</a>\n<a href=\"#2141\" id=\"2141\">2141</a>\n<a href=\"#2142\" id=\"2142\">2142</a>\n<a href=\"#2143\" id=\"2143\">2143</a>\n<a href=\"#2144\" id=\"2144\">2144</a>\n<a href=\"#2145\" id=\"2145\">2145</a>\n<a href=\"#2146\" id=\"2146\">2146</a>\n<a href=\"#2147\" id=\"2147\">2147</a>\n<a href=\"#2148\" id=\"2148\">2148</a>\n<a href=\"#2149\" id=\"2149\">2149</a>\n<a href=\"#2150\" id=\"2150\">2150</a>\n<a href=\"#2151\" id=\"2151\">2151</a>\n<a href=\"#2152\" id=\"2152\">2152</a>\n<a href=\"#2153\" id=\"2153\">2153</a>\n<a href=\"#2154\" id=\"2154\">2154</a>\n<a href=\"#2155\" id=\"2155\">2155</a>\n<a href=\"#2156\" id=\"2156\">2156</a>\n<a href=\"#2157\" id=\"2157\">2157</a>\n<a href=\"#2158\" id=\"2158\">2158</a>\n<a href=\"#2159\" id=\"2159\">2159</a>\n<a href=\"#2160\" id=\"2160\">2160</a>\n<a href=\"#2161\" id=\"2161\">2161</a>\n<a href=\"#2162\" id=\"2162\">2162</a>\n<a href=\"#2163\" id=\"2163\">2163</a>\n<a href=\"#2164\" id=\"2164\">2164</a>\n<a href=\"#2165\" id=\"2165\">2165</a>\n<a href=\"#2166\" id=\"2166\">2166</a>\n<a href=\"#2167\" id=\"2167\">2167</a>\n<a href=\"#2168\" id=\"2168\">2168</a>\n<a href=\"#2169\" id=\"2169\">2169</a>\n<a href=\"#2170\" id=\"2170\">2170</a>\n<a href=\"#2171\" id=\"2171\">2171</a>\n<a href=\"#2172\" id=\"2172\">2172</a>\n<a href=\"#2173\" id=\"2173\">2173</a>\n<a href=\"#2174\" id=\"2174\">2174</a>\n<a href=\"#2175\" id=\"2175\">2175</a>\n<a href=\"#2176\" id=\"2176\">2176</a>\n<a href=\"#2177\" id=\"2177\">2177</a>\n<a href=\"#2178\" id=\"2178\">2178</a>\n<a href=\"#2179\" id=\"2179\">2179</a>\n<a href=\"#2180\" id=\"2180\">2180</a>\n<a href=\"#2181\" id=\"2181\">2181</a>\n<a href=\"#2182\" id=\"2182\">2182</a>\n<a href=\"#2183\" id=\"2183\">2183</a>\n<a href=\"#2184\" id=\"2184\">2184</a>\n<a href=\"#2185\" id=\"2185\">2185</a>\n<a href=\"#2186\" id=\"2186\">2186</a>\n<a href=\"#2187\" id=\"2187\">2187</a>\n<a href=\"#2188\" id=\"2188\">2188</a>\n<a href=\"#2189\" id=\"2189\">2189</a>\n<a href=\"#2190\" id=\"2190\">2190</a>\n<a href=\"#2191\" id=\"2191\">2191</a>\n<a href=\"#2192\" id=\"2192\">2192</a>\n<a href=\"#2193\" id=\"2193\">2193</a>\n<a href=\"#2194\" id=\"2194\">2194</a>\n<a href=\"#2195\" id=\"2195\">2195</a>\n<a href=\"#2196\" id=\"2196\">2196</a>\n<a href=\"#2197\" id=\"2197\">2197</a>\n<a href=\"#2198\" id=\"2198\">2198</a>\n<a href=\"#2199\" id=\"2199\">2199</a>\n<a href=\"#2200\" id=\"2200\">2200</a>\n<a href=\"#2201\" id=\"2201\">2201</a>\n<a href=\"#2202\" id=\"2202\">2202</a>\n<a href=\"#2203\" id=\"2203\">2203</a>\n<a href=\"#2204\" id=\"2204\">2204</a>\n<a href=\"#2205\" id=\"2205\">2205</a>\n<a href=\"#2206\" id=\"2206\">2206</a>\n<a href=\"#2207\" id=\"2207\">2207</a>\n<a href=\"#2208\" id=\"2208\">2208</a>\n<a href=\"#2209\" id=\"2209\">2209</a>\n<a href=\"#2210\" id=\"2210\">2210</a>\n<a href=\"#2211\" id=\"2211\">2211</a>\n<a href=\"#2212\" id=\"2212\">2212</a>\n<a href=\"#2213\" id=\"2213\">2213</a>\n<a href=\"#2214\" id=\"2214\">2214</a>\n<a href=\"#2215\" id=\"2215\">2215</a>\n<a href=\"#2216\" id=\"2216\">2216</a>\n<a href=\"#2217\" id=\"2217\">2217</a>\n<a href=\"#2218\" id=\"2218\">2218</a>\n<a href=\"#2219\" id=\"2219\">2219</a>\n<a href=\"#2220\" id=\"2220\">2220</a>\n<a href=\"#2221\" id=\"2221\">2221</a>\n<a href=\"#2222\" id=\"2222\">2222</a>\n<a href=\"#2223\" id=\"2223\">2223</a>\n<a href=\"#2224\" id=\"2224\">2224</a>\n<a href=\"#2225\" id=\"2225\">2225</a>\n<a href=\"#2226\" id=\"2226\">2226</a>\n<a href=\"#2227\" id=\"2227\">2227</a>\n<a href=\"#2228\" id=\"2228\">2228</a>\n<a href=\"#2229\" id=\"2229\">2229</a>\n<a href=\"#2230\" id=\"2230\">2230</a>\n<a href=\"#2231\" id=\"2231\">2231</a>\n<a href=\"#2232\" id=\"2232\">2232</a>\n<a href=\"#2233\" id=\"2233\">2233</a>\n<a href=\"#2234\" id=\"2234\">2234</a>\n<a href=\"#2235\" id=\"2235\">2235</a>\n<a href=\"#2236\" id=\"2236\">2236</a>\n<a href=\"#2237\" id=\"2237\">2237</a>\n<a href=\"#2238\" id=\"2238\">2238</a>\n<a href=\"#2239\" id=\"2239\">2239</a>\n<a href=\"#2240\" id=\"2240\">2240</a>\n<a href=\"#2241\" id=\"2241\">2241</a>\n<a href=\"#2242\" id=\"2242\">2242</a>\n<a href=\"#2243\" id=\"2243\">2243</a>\n<a href=\"#2244\" id=\"2244\">2244</a>\n<a href=\"#2245\" id=\"2245\">2245</a>\n<a href=\"#2246\" id=\"2246\">2246</a>\n<a href=\"#2247\" id=\"2247\">2247</a>\n<a href=\"#2248\" id=\"2248\">2248</a>\n<a href=\"#2249\" id=\"2249\">2249</a>\n<a href=\"#2250\" id=\"2250\">2250</a>\n<a href=\"#2251\" id=\"2251\">2251</a>\n<a href=\"#2252\" id=\"2252\">2252</a>\n<a href=\"#2253\" id=\"2253\">2253</a>\n<a href=\"#2254\" id=\"2254\">2254</a>\n<a href=\"#2255\" id=\"2255\">2255</a>\n<a href=\"#2256\" id=\"2256\">2256</a>\n<a href=\"#2257\" id=\"2257\">2257</a>\n<a href=\"#2258\" id=\"2258\">2258</a>\n<a href=\"#2259\" id=\"2259\">2259</a>\n<a href=\"#2260\" id=\"2260\">2260</a>\n<a href=\"#2261\" id=\"2261\">2261</a>\n<a href=\"#2262\" id=\"2262\">2262</a>\n<a href=\"#2263\" id=\"2263\">2263</a>\n<a href=\"#2264\" id=\"2264\">2264</a>\n<a href=\"#2265\" id=\"2265\">2265</a>\n<a href=\"#2266\" id=\"2266\">2266</a>\n<a href=\"#2267\" id=\"2267\">2267</a>\n<a href=\"#2268\" id=\"2268\">2268</a>\n<a href=\"#2269\" id=\"2269\">2269</a>\n<a href=\"#2270\" id=\"2270\">2270</a>\n<a href=\"#2271\" id=\"2271\">2271</a>\n<a href=\"#2272\" id=\"2272\">2272</a>\n<a href=\"#2273\" id=\"2273\">2273</a>\n<a href=\"#2274\" id=\"2274\">2274</a>\n<a href=\"#2275\" id=\"2275\">2275</a>\n<a href=\"#2276\" id=\"2276\">2276</a>\n<a href=\"#2277\" id=\"2277\">2277</a>\n<a href=\"#2278\" id=\"2278\">2278</a>\n<a href=\"#2279\" id=\"2279\">2279</a>\n<a href=\"#2280\" id=\"2280\">2280</a>\n<a href=\"#2281\" id=\"2281\">2281</a>\n<a href=\"#2282\" id=\"2282\">2282</a>\n<a href=\"#2283\" id=\"2283\">2283</a>\n<a href=\"#2284\" id=\"2284\">2284</a>\n<a href=\"#2285\" id=\"2285\">2285</a>\n<a href=\"#2286\" id=\"2286\">2286</a>\n<a href=\"#2287\" id=\"2287\">2287</a>\n<a href=\"#2288\" id=\"2288\">2288</a>\n<a href=\"#2289\" id=\"2289\">2289</a>\n<a href=\"#2290\" id=\"2290\">2290</a>\n<a href=\"#2291\" id=\"2291\">2291</a>\n<a href=\"#2292\" id=\"2292\">2292</a>\n<a href=\"#2293\" id=\"2293\">2293</a>\n<a href=\"#2294\" id=\"2294\">2294</a>\n<a href=\"#2295\" id=\"2295\">2295</a>\n<a href=\"#2296\" id=\"2296\">2296</a>\n<a href=\"#2297\" id=\"2297\">2297</a>\n<a href=\"#2298\" id=\"2298\">2298</a>\n<a href=\"#2299\" id=\"2299\">2299</a>\n<a href=\"#2300\" id=\"2300\">2300</a>\n<a href=\"#2301\" id=\"2301\">2301</a>\n<a href=\"#2302\" id=\"2302\">2302</a>\n<a href=\"#2303\" id=\"2303\">2303</a>\n<a href=\"#2304\" id=\"2304\">2304</a>\n<a href=\"#2305\" id=\"2305\">2305</a>\n<a href=\"#2306\" id=\"2306\">2306</a>\n<a href=\"#2307\" id=\"2307\">2307</a>\n<a href=\"#2308\" id=\"2308\">2308</a>\n<a href=\"#2309\" id=\"2309\">2309</a>\n<a href=\"#2310\" id=\"2310\">2310</a>\n<a href=\"#2311\" id=\"2311\">2311</a>\n<a href=\"#2312\" id=\"2312\">2312</a>\n<a href=\"#2313\" id=\"2313\">2313</a>\n<a href=\"#2314\" id=\"2314\">2314</a>\n<a href=\"#2315\" id=\"2315\">2315</a>\n<a href=\"#2316\" id=\"2316\">2316</a>\n<a href=\"#2317\" id=\"2317\">2317</a>\n<a href=\"#2318\" id=\"2318\">2318</a>\n<a href=\"#2319\" id=\"2319\">2319</a>\n<a href=\"#2320\" id=\"2320\">2320</a>\n<a href=\"#2321\" id=\"2321\">2321</a>\n<a href=\"#2322\" id=\"2322\">2322</a>\n<a href=\"#2323\" id=\"2323\">2323</a>\n<a href=\"#2324\" id=\"2324\">2324</a>\n<a href=\"#2325\" id=\"2325\">2325</a>\n<a href=\"#2326\" id=\"2326\">2326</a>\n<a href=\"#2327\" id=\"2327\">2327</a>\n<a href=\"#2328\" id=\"2328\">2328</a>\n<a href=\"#2329\" id=\"2329\">2329</a>\n<a href=\"#2330\" id=\"2330\">2330</a>\n<a href=\"#2331\" id=\"2331\">2331</a>\n<a href=\"#2332\" id=\"2332\">2332</a>\n<a href=\"#2333\" id=\"2333\">2333</a>\n<a href=\"#2334\" id=\"2334\">2334</a>\n<a href=\"#2335\" id=\"2335\">2335</a>\n<a href=\"#2336\" id=\"2336\">2336</a>\n<a href=\"#2337\" id=\"2337\">2337</a>\n<a href=\"#2338\" id=\"2338\">2338</a>\n<a href=\"#2339\" id=\"2339\">2339</a>\n<a href=\"#2340\" id=\"2340\">2340</a>\n<a href=\"#2341\" id=\"2341\">2341</a>\n<a href=\"#2342\" id=\"2342\">2342</a>\n<a href=\"#2343\" id=\"2343\">2343</a>\n<a href=\"#2344\" id=\"2344\">2344</a>\n<a href=\"#2345\" id=\"2345\">2345</a>\n<a href=\"#2346\" id=\"2346\">2346</a>\n<a href=\"#2347\" id=\"2347\">2347</a>\n<a href=\"#2348\" id=\"2348\">2348</a>\n<a href=\"#2349\" id=\"2349\">2349</a>\n<a href=\"#2350\" id=\"2350\">2350</a>\n<a href=\"#2351\" id=\"2351\">2351</a>\n<a href=\"#2352\" id=\"2352\">2352</a>\n<a href=\"#2353\" id=\"2353\">2353</a>\n<a href=\"#2354\" id=\"2354\">2354</a>\n<a href=\"#2355\" id=\"2355\">2355</a>\n<a href=\"#2356\" id=\"2356\">2356</a>\n<a href=\"#2357\" id=\"2357\">2357</a>\n<a href=\"#2358\" id=\"2358\">2358</a>\n<a href=\"#2359\" id=\"2359\">2359</a>\n<a href=\"#2360\" id=\"2360\">2360</a>\n<a href=\"#2361\" id=\"2361\">2361</a>\n<a href=\"#2362\" id=\"2362\">2362</a>\n<a href=\"#2363\" id=\"2363\">2363</a>\n<a href=\"#2364\" id=\"2364\">2364</a>\n<a href=\"#2365\" id=\"2365\">2365</a>\n<a href=\"#2366\" id=\"2366\">2366</a>\n<a href=\"#2367\" id=\"2367\">2367</a>\n<a href=\"#2368\" id=\"2368\">2368</a>\n<a href=\"#2369\" id=\"2369\">2369</a>\n<a href=\"#2370\" id=\"2370\">2370</a>\n<a href=\"#2371\" id=\"2371\">2371</a>\n<a href=\"#2372\" id=\"2372\">2372</a>\n<a href=\"#2373\" id=\"2373\">2373</a>\n<a href=\"#2374\" id=\"2374\">2374</a>\n<a href=\"#2375\" id=\"2375\">2375</a>\n<a href=\"#2376\" id=\"2376\">2376</a>\n<a href=\"#2377\" id=\"2377\">2377</a>\n<a href=\"#2378\" id=\"2378\">2378</a>\n<a href=\"#2379\" id=\"2379\">2379</a>\n<a href=\"#2380\" id=\"2380\">2380</a>\n<a href=\"#2381\" id=\"2381\">2381</a>\n<a href=\"#2382\" id=\"2382\">2382</a>\n<a href=\"#2383\" id=\"2383\">2383</a>\n<a href=\"#2384\" id=\"2384\">2384</a>\n<a href=\"#2385\" id=\"2385\">2385</a>\n<a href=\"#2386\" id=\"2386\">2386</a>\n<a href=\"#2387\" id=\"2387\">2387</a>\n<a href=\"#2388\" id=\"2388\">2388</a>\n<a href=\"#2389\" id=\"2389\">2389</a>\n<a href=\"#2390\" id=\"2390\">2390</a>\n<a href=\"#2391\" id=\"2391\">2391</a>\n<a href=\"#2392\" id=\"2392\">2392</a>\n<a href=\"#2393\" id=\"2393\">2393</a>\n<a href=\"#2394\" id=\"2394\">2394</a>\n<a href=\"#2395\" id=\"2395\">2395</a>\n<a href=\"#2396\" id=\"2396\">2396</a>\n<a href=\"#2397\" id=\"2397\">2397</a>\n<a href=\"#2398\" id=\"2398\">2398</a>\n<a href=\"#2399\" id=\"2399\">2399</a>\n<a href=\"#2400\" id=\"2400\">2400</a>\n<a href=\"#2401\" id=\"2401\">2401</a>\n<a href=\"#2402\" id=\"2402\">2402</a>\n<a href=\"#2403\" id=\"2403\">2403</a>\n<a href=\"#2404\" id=\"2404\">2404</a>\n<a href=\"#2405\" id=\"2405\">2405</a>\n<a href=\"#2406\" id=\"2406\">2406</a>\n<a href=\"#2407\" id=\"2407\">2407</a>\n<a href=\"#2408\" id=\"2408\">2408</a>\n<a href=\"#2409\" id=\"2409\">2409</a>\n<a href=\"#2410\" id=\"2410\">2410</a>\n<a href=\"#2411\" id=\"2411\">2411</a>\n<a href=\"#2412\" id=\"2412\">2412</a>\n<a href=\"#2413\" id=\"2413\">2413</a>\n<a href=\"#2414\" id=\"2414\">2414</a>\n<a href=\"#2415\" id=\"2415\">2415</a>\n<a href=\"#2416\" id=\"2416\">2416</a>\n<a href=\"#2417\" id=\"2417\">2417</a>\n<a href=\"#2418\" id=\"2418\">2418</a>\n<a href=\"#2419\" id=\"2419\">2419</a>\n<a href=\"#2420\" id=\"2420\">2420</a>\n<a href=\"#2421\" id=\"2421\">2421</a>\n<a href=\"#2422\" id=\"2422\">2422</a>\n<a href=\"#2423\" id=\"2423\">2423</a>\n<a href=\"#2424\" id=\"2424\">2424</a>\n<a href=\"#2425\" id=\"2425\">2425</a>\n<a href=\"#2426\" id=\"2426\">2426</a>\n<a href=\"#2427\" id=\"2427\">2427</a>\n<a href=\"#2428\" id=\"2428\">2428</a>\n<a href=\"#2429\" id=\"2429\">2429</a>\n<a href=\"#2430\" id=\"2430\">2430</a>\n<a href=\"#2431\" id=\"2431\">2431</a>\n<a href=\"#2432\" id=\"2432\">2432</a>\n<a href=\"#2433\" id=\"2433\">2433</a>\n<a href=\"#2434\" id=\"2434\">2434</a>\n<a href=\"#2435\" id=\"2435\">2435</a>\n<a href=\"#2436\" id=\"2436\">2436</a>\n<a href=\"#2437\" id=\"2437\">2437</a>\n<a href=\"#2438\" id=\"2438\">2438</a>\n<a href=\"#2439\" id=\"2439\">2439</a>\n<a href=\"#2440\" id=\"2440\">2440</a>\n<a href=\"#2441\" id=\"2441\">2441</a>\n<a href=\"#2442\" id=\"2442\">2442</a>\n<a href=\"#2443\" id=\"2443\">2443</a>\n<a href=\"#2444\" id=\"2444\">2444</a>\n<a href=\"#2445\" id=\"2445\">2445</a>\n<a href=\"#2446\" id=\"2446\">2446</a>\n<a href=\"#2447\" id=\"2447\">2447</a>\n<a href=\"#2448\" id=\"2448\">2448</a>\n<a href=\"#2449\" id=\"2449\">2449</a>\n<a href=\"#2450\" id=\"2450\">2450</a>\n<a href=\"#2451\" id=\"2451\">2451</a>\n<a href=\"#2452\" id=\"2452\">2452</a>\n<a href=\"#2453\" id=\"2453\">2453</a>\n<a href=\"#2454\" id=\"2454\">2454</a>\n<a href=\"#2455\" id=\"2455\">2455</a>\n<a href=\"#2456\" id=\"2456\">2456</a>\n<a href=\"#2457\" id=\"2457\">2457</a>\n<a href=\"#2458\" id=\"2458\">2458</a>\n<a href=\"#2459\" id=\"2459\">2459</a>\n<a href=\"#2460\" id=\"2460\">2460</a>\n<a href=\"#2461\" id=\"2461\">2461</a>\n<a href=\"#2462\" id=\"2462\">2462</a>\n<a href=\"#2463\" id=\"2463\">2463</a>\n<a href=\"#2464\" id=\"2464\">2464</a>\n<a href=\"#2465\" id=\"2465\">2465</a>\n<a href=\"#2466\" id=\"2466\">2466</a>\n<a href=\"#2467\" id=\"2467\">2467</a>\n<a href=\"#2468\" id=\"2468\">2468</a>\n<a href=\"#2469\" id=\"2469\">2469</a>\n<a href=\"#2470\" id=\"2470\">2470</a>\n<a href=\"#2471\" id=\"2471\">2471</a>\n<a href=\"#2472\" id=\"2472\">2472</a>\n<a href=\"#2473\" id=\"2473\">2473</a>\n<a href=\"#2474\" id=\"2474\">2474</a>\n<a href=\"#2475\" id=\"2475\">2475</a>\n<a href=\"#2476\" id=\"2476\">2476</a>\n<a href=\"#2477\" id=\"2477\">2477</a>\n<a href=\"#2478\" id=\"2478\">2478</a>\n<a href=\"#2479\" id=\"2479\">2479</a>\n<a href=\"#2480\" id=\"2480\">2480</a>\n<a href=\"#2481\" id=\"2481\">2481</a>\n<a href=\"#2482\" id=\"2482\">2482</a>\n<a href=\"#2483\" id=\"2483\">2483</a>\n<a href=\"#2484\" id=\"2484\">2484</a>\n<a href=\"#2485\" id=\"2485\">2485</a>\n<a href=\"#2486\" id=\"2486\">2486</a>\n<a href=\"#2487\" id=\"2487\">2487</a>\n<a href=\"#2488\" id=\"2488\">2488</a>\n<a href=\"#2489\" id=\"2489\">2489</a>\n<a href=\"#2490\" id=\"2490\">2490</a>\n<a href=\"#2491\" id=\"2491\">2491</a>\n<a href=\"#2492\" id=\"2492\">2492</a>\n<a href=\"#2493\" id=\"2493\">2493</a>\n<a href=\"#2494\" id=\"2494\">2494</a>\n<a href=\"#2495\" id=\"2495\">2495</a>\n<a href=\"#2496\" id=\"2496\">2496</a>\n<a href=\"#2497\" id=\"2497\">2497</a>\n<a href=\"#2498\" id=\"2498\">2498</a>\n<a href=\"#2499\" id=\"2499\">2499</a>\n<a href=\"#2500\" id=\"2500\">2500</a>\n<a href=\"#2501\" id=\"2501\">2501</a>\n<a href=\"#2502\" id=\"2502\">2502</a>\n<a href=\"#2503\" id=\"2503\">2503</a>\n<a href=\"#2504\" id=\"2504\">2504</a>\n<a href=\"#2505\" id=\"2505\">2505</a>\n<a href=\"#2506\" id=\"2506\">2506</a>\n<a href=\"#2507\" id=\"2507\">2507</a>\n<a href=\"#2508\" id=\"2508\">2508</a>\n<a href=\"#2509\" id=\"2509\">2509</a>\n<a href=\"#2510\" id=\"2510\">2510</a>\n<a href=\"#2511\" id=\"2511\">2511</a>\n<a href=\"#2512\" id=\"2512\">2512</a>\n<a href=\"#2513\" id=\"2513\">2513</a>\n<a href=\"#2514\" id=\"2514\">2514</a>\n<a href=\"#2515\" id=\"2515\">2515</a>\n<a href=\"#2516\" id=\"2516\">2516</a>\n<a href=\"#2517\" id=\"2517\">2517</a>\n<a href=\"#2518\" id=\"2518\">2518</a>\n<a href=\"#2519\" id=\"2519\">2519</a>\n<a href=\"#2520\" id=\"2520\">2520</a>\n<a href=\"#2521\" id=\"2521\">2521</a>\n<a href=\"#2522\" id=\"2522\">2522</a>\n<a href=\"#2523\" id=\"2523\">2523</a>\n<a href=\"#2524\" id=\"2524\">2524</a>\n<a href=\"#2525\" id=\"2525\">2525</a>\n<a href=\"#2526\" id=\"2526\">2526</a>\n<a href=\"#2527\" id=\"2527\">2527</a>\n<a href=\"#2528\" id=\"2528\">2528</a>\n<a href=\"#2529\" id=\"2529\">2529</a>\n<a href=\"#2530\" id=\"2530\">2530</a>\n<a href=\"#2531\" id=\"2531\">2531</a>\n<a href=\"#2532\" id=\"2532\">2532</a>\n<a href=\"#2533\" id=\"2533\">2533</a>\n<a href=\"#2534\" id=\"2534\">2534</a>\n<a href=\"#2535\" id=\"2535\">2535</a>\n<a href=\"#2536\" id=\"2536\">2536</a>\n<a href=\"#2537\" id=\"2537\">2537</a>\n<a href=\"#2538\" id=\"2538\">2538</a>\n<a href=\"#2539\" id=\"2539\">2539</a>\n<a href=\"#2540\" id=\"2540\">2540</a>\n<a href=\"#2541\" id=\"2541\">2541</a>\n<a href=\"#2542\" id=\"2542\">2542</a>\n<a href=\"#2543\" id=\"2543\">2543</a>\n<a href=\"#2544\" id=\"2544\">2544</a>\n<a href=\"#2545\" id=\"2545\">2545</a>\n<a href=\"#2546\" id=\"2546\">2546</a>\n<a href=\"#2547\" id=\"2547\">2547</a>\n<a href=\"#2548\" id=\"2548\">2548</a>\n<a href=\"#2549\" id=\"2549\">2549</a>\n<a href=\"#2550\" id=\"2550\">2550</a>\n<a href=\"#2551\" id=\"2551\">2551</a>\n<a href=\"#2552\" id=\"2552\">2552</a>\n<a href=\"#2553\" id=\"2553\">2553</a>\n<a href=\"#2554\" id=\"2554\">2554</a>\n<a href=\"#2555\" id=\"2555\">2555</a>\n<a href=\"#2556\" id=\"2556\">2556</a>\n<a href=\"#2557\" id=\"2557\">2557</a>\n<a href=\"#2558\" id=\"2558\">2558</a>\n<a href=\"#2559\" id=\"2559\">2559</a>\n<a href=\"#2560\" id=\"2560\">2560</a>\n<a href=\"#2561\" id=\"2561\">2561</a>\n<a href=\"#2562\" id=\"2562\">2562</a>\n<a href=\"#2563\" id=\"2563\">2563</a>\n<a href=\"#2564\" id=\"2564\">2564</a>\n<a href=\"#2565\" id=\"2565\">2565</a>\n<a href=\"#2566\" id=\"2566\">2566</a>\n<a href=\"#2567\" id=\"2567\">2567</a>\n<a href=\"#2568\" id=\"2568\">2568</a>\n<a href=\"#2569\" id=\"2569\">2569</a>\n<a href=\"#2570\" id=\"2570\">2570</a>\n<a href=\"#2571\" id=\"2571\">2571</a>\n<a href=\"#2572\" id=\"2572\">2572</a>\n<a href=\"#2573\" id=\"2573\">2573</a>\n<a href=\"#2574\" id=\"2574\">2574</a>\n<a href=\"#2575\" id=\"2575\">2575</a>\n<a href=\"#2576\" id=\"2576\">2576</a>\n<a href=\"#2577\" id=\"2577\">2577</a>\n<a href=\"#2578\" id=\"2578\">2578</a>\n<a href=\"#2579\" id=\"2579\">2579</a>\n<a href=\"#2580\" id=\"2580\">2580</a>\n<a href=\"#2581\" id=\"2581\">2581</a>\n<a href=\"#2582\" id=\"2582\">2582</a>\n<a href=\"#2583\" id=\"2583\">2583</a>\n<a href=\"#2584\" id=\"2584\">2584</a>\n<a href=\"#2585\" id=\"2585\">2585</a>\n<a href=\"#2586\" id=\"2586\">2586</a>\n<a href=\"#2587\" id=\"2587\">2587</a>\n<a href=\"#2588\" id=\"2588\">2588</a>\n<a href=\"#2589\" id=\"2589\">2589</a>\n<a href=\"#2590\" id=\"2590\">2590</a>\n<a href=\"#2591\" id=\"2591\">2591</a>\n<a href=\"#2592\" id=\"2592\">2592</a>\n<a href=\"#2593\" id=\"2593\">2593</a>\n<a href=\"#2594\" id=\"2594\">2594</a>\n<a href=\"#2595\" id=\"2595\">2595</a>\n<a href=\"#2596\" id=\"2596\">2596</a>\n<a href=\"#2597\" id=\"2597\">2597</a>\n<a href=\"#2598\" id=\"2598\">2598</a>\n<a href=\"#2599\" id=\"2599\">2599</a>\n<a href=\"#2600\" id=\"2600\">2600</a>\n<a href=\"#2601\" id=\"2601\">2601</a>\n<a href=\"#2602\" id=\"2602\">2602</a>\n<a href=\"#2603\" id=\"2603\">2603</a>\n<a href=\"#2604\" id=\"2604\">2604</a>\n<a href=\"#2605\" id=\"2605\">2605</a>\n<a href=\"#2606\" id=\"2606\">2606</a>\n<a href=\"#2607\" id=\"2607\">2607</a>\n<a href=\"#2608\" id=\"2608\">2608</a>\n<a href=\"#2609\" id=\"2609\">2609</a>\n<a href=\"#2610\" id=\"2610\">2610</a>\n<a href=\"#2611\" id=\"2611\">2611</a>\n<a href=\"#2612\" id=\"2612\">2612</a>\n<a href=\"#2613\" id=\"2613\">2613</a>\n<a href=\"#2614\" id=\"2614\">2614</a>\n<a href=\"#2615\" id=\"2615\">2615</a>\n<a href=\"#2616\" id=\"2616\">2616</a>\n<a href=\"#2617\" id=\"2617\">2617</a>\n<a href=\"#2618\" id=\"2618\">2618</a>\n<a href=\"#2619\" id=\"2619\">2619</a>\n<a href=\"#2620\" id=\"2620\">2620</a>\n<a href=\"#2621\" id=\"2621\">2621</a>\n<a href=\"#2622\" id=\"2622\">2622</a>\n<a href=\"#2623\" id=\"2623\">2623</a>\n<a href=\"#2624\" id=\"2624\">2624</a>\n<a href=\"#2625\" id=\"2625\">2625</a>\n<a href=\"#2626\" id=\"2626\">2626</a>\n<a href=\"#2627\" id=\"2627\">2627</a>\n<a href=\"#2628\" id=\"2628\">2628</a>\n<a href=\"#2629\" id=\"2629\">2629</a>\n<a href=\"#2630\" id=\"2630\">2630</a>\n<a href=\"#2631\" id=\"2631\">2631</a>\n<a href=\"#2632\" id=\"2632\">2632</a>\n<a href=\"#2633\" id=\"2633\">2633</a>\n<a href=\"#2634\" id=\"2634\">2634</a>\n<a href=\"#2635\" id=\"2635\">2635</a>\n<a href=\"#2636\" id=\"2636\">2636</a>\n<a href=\"#2637\" id=\"2637\">2637</a>\n<a href=\"#2638\" id=\"2638\">2638</a>\n<a href=\"#2639\" id=\"2639\">2639</a>\n<a href=\"#2640\" id=\"2640\">2640</a>\n<a href=\"#2641\" id=\"2641\">2641</a>\n<a href=\"#2642\" id=\"2642\">2642</a>\n<a href=\"#2643\" id=\"2643\">2643</a>\n<a href=\"#2644\" id=\"2644\">2644</a>\n<a href=\"#2645\" id=\"2645\">2645</a>\n<a href=\"#2646\" id=\"2646\">2646</a>\n<a href=\"#2647\" id=\"2647\">2647</a>\n<a href=\"#2648\" id=\"2648\">2648</a>\n<a href=\"#2649\" id=\"2649\">2649</a>\n<a href=\"#2650\" id=\"2650\">2650</a>\n<a href=\"#2651\" id=\"2651\">2651</a>\n<a href=\"#2652\" id=\"2652\">2652</a>\n<a href=\"#2653\" id=\"2653\">2653</a>\n<a href=\"#2654\" id=\"2654\">2654</a>\n<a href=\"#2655\" id=\"2655\">2655</a>\n<a href=\"#2656\" id=\"2656\">2656</a>\n<a href=\"#2657\" id=\"2657\">2657</a>\n<a href=\"#2658\" id=\"2658\">2658</a>\n<a href=\"#2659\" id=\"2659\">2659</a>\n<a href=\"#2660\" id=\"2660\">2660</a>\n<a href=\"#2661\" id=\"2661\">2661</a>\n<a href=\"#2662\" id=\"2662\">2662</a>\n<a href=\"#2663\" id=\"2663\">2663</a>\n<a href=\"#2664\" id=\"2664\">2664</a>\n<a href=\"#2665\" id=\"2665\">2665</a>\n<a href=\"#2666\" id=\"2666\">2666</a>\n<a href=\"#2667\" id=\"2667\">2667</a>\n<a href=\"#2668\" id=\"2668\">2668</a>\n<a href=\"#2669\" id=\"2669\">2669</a>\n<a href=\"#2670\" id=\"2670\">2670</a>\n<a href=\"#2671\" id=\"2671\">2671</a>\n<a href=\"#2672\" id=\"2672\">2672</a>\n<a href=\"#2673\" id=\"2673\">2673</a>\n<a href=\"#2674\" id=\"2674\">2674</a>\n<a href=\"#2675\" id=\"2675\">2675</a>\n<a href=\"#2676\" id=\"2676\">2676</a>\n<a href=\"#2677\" id=\"2677\">2677</a>\n<a href=\"#2678\" id=\"2678\">2678</a>\n<a href=\"#2679\" id=\"2679\">2679</a>\n<a href=\"#2680\" id=\"2680\">2680</a>\n<a href=\"#2681\" id=\"2681\">2681</a>\n<a href=\"#2682\" id=\"2682\">2682</a>\n<a href=\"#2683\" id=\"2683\">2683</a>\n<a href=\"#2684\" id=\"2684\">2684</a>\n<a href=\"#2685\" id=\"2685\">2685</a>\n<a href=\"#2686\" id=\"2686\">2686</a>\n<a href=\"#2687\" id=\"2687\">2687</a>\n<a href=\"#2688\" id=\"2688\">2688</a>\n<a href=\"#2689\" id=\"2689\">2689</a>\n<a href=\"#2690\" id=\"2690\">2690</a>\n<a href=\"#2691\" id=\"2691\">2691</a>\n<a href=\"#2692\" id=\"2692\">2692</a>\n<a href=\"#2693\" id=\"2693\">2693</a>\n<a href=\"#2694\" id=\"2694\">2694</a>\n<a href=\"#2695\" id=\"2695\">2695</a>\n<a href=\"#2696\" id=\"2696\">2696</a>\n<a href=\"#2697\" id=\"2697\">2697</a>\n<a href=\"#2698\" id=\"2698\">2698</a>\n<a href=\"#2699\" id=\"2699\">2699</a>\n<a href=\"#2700\" id=\"2700\">2700</a>\n<a href=\"#2701\" id=\"2701\">2701</a>\n<a href=\"#2702\" id=\"2702\">2702</a>\n<a href=\"#2703\" id=\"2703\">2703</a>\n<a href=\"#2704\" id=\"2704\">2704</a>\n<a href=\"#2705\" id=\"2705\">2705</a>\n<a href=\"#2706\" id=\"2706\">2706</a>\n<a href=\"#2707\" id=\"2707\">2707</a>\n<a href=\"#2708\" id=\"2708\">2708</a>\n<a href=\"#2709\" id=\"2709\">2709</a>\n<a href=\"#2710\" id=\"2710\">2710</a>\n<a href=\"#2711\" id=\"2711\">2711</a>\n<a href=\"#2712\" id=\"2712\">2712</a>\n<a href=\"#2713\" id=\"2713\">2713</a>\n<a href=\"#2714\" id=\"2714\">2714</a>\n<a href=\"#2715\" id=\"2715\">2715</a>\n<a href=\"#2716\" id=\"2716\">2716</a>\n<a href=\"#2717\" id=\"2717\">2717</a>\n<a href=\"#2718\" id=\"2718\">2718</a>\n<a href=\"#2719\" id=\"2719\">2719</a>\n<a href=\"#2720\" id=\"2720\">2720</a>\n<a href=\"#2721\" id=\"2721\">2721</a>\n<a href=\"#2722\" id=\"2722\">2722</a>\n<a href=\"#2723\" id=\"2723\">2723</a>\n<a href=\"#2724\" id=\"2724\">2724</a>\n<a href=\"#2725\" id=\"2725\">2725</a>\n<a href=\"#2726\" id=\"2726\">2726</a>\n<a href=\"#2727\" id=\"2727\">2727</a>\n<a href=\"#2728\" id=\"2728\">2728</a>\n<a href=\"#2729\" id=\"2729\">2729</a>\n<a href=\"#2730\" id=\"2730\">2730</a>\n<a href=\"#2731\" id=\"2731\">2731</a>\n<a href=\"#2732\" id=\"2732\">2732</a>\n<a href=\"#2733\" id=\"2733\">2733</a>\n<a href=\"#2734\" id=\"2734\">2734</a>\n<a href=\"#2735\" id=\"2735\">2735</a>\n<a href=\"#2736\" id=\"2736\">2736</a>\n<a href=\"#2737\" id=\"2737\">2737</a>\n<a href=\"#2738\" id=\"2738\">2738</a>\n<a href=\"#2739\" id=\"2739\">2739</a>\n<a href=\"#2740\" id=\"2740\">2740</a>\n<a href=\"#2741\" id=\"2741\">2741</a>\n<a href=\"#2742\" id=\"2742\">2742</a>\n<a href=\"#2743\" id=\"2743\">2743</a>\n<a href=\"#2744\" id=\"2744\">2744</a>\n<a href=\"#2745\" id=\"2745\">2745</a>\n<a href=\"#2746\" id=\"2746\">2746</a>\n<a href=\"#2747\" id=\"2747\">2747</a>\n<a href=\"#2748\" id=\"2748\">2748</a>\n<a href=\"#2749\" id=\"2749\">2749</a>\n<a href=\"#2750\" id=\"2750\">2750</a>\n<a href=\"#2751\" id=\"2751\">2751</a>\n<a href=\"#2752\" id=\"2752\">2752</a>\n<a href=\"#2753\" id=\"2753\">2753</a>\n<a href=\"#2754\" id=\"2754\">2754</a>\n<a href=\"#2755\" id=\"2755\">2755</a>\n<a href=\"#2756\" id=\"2756\">2756</a>\n<a href=\"#2757\" id=\"2757\">2757</a>\n<a href=\"#2758\" id=\"2758\">2758</a>\n<a href=\"#2759\" id=\"2759\">2759</a>\n<a href=\"#2760\" id=\"2760\">2760</a>\n<a href=\"#2761\" id=\"2761\">2761</a>\n<a href=\"#2762\" id=\"2762\">2762</a>\n<a href=\"#2763\" id=\"2763\">2763</a>\n<a href=\"#2764\" id=\"2764\">2764</a>\n<a href=\"#2765\" id=\"2765\">2765</a>\n<a href=\"#2766\" id=\"2766\">2766</a>\n<a href=\"#2767\" id=\"2767\">2767</a>\n<a href=\"#2768\" id=\"2768\">2768</a>\n<a href=\"#2769\" id=\"2769\">2769</a>\n<a href=\"#2770\" id=\"2770\">2770</a>\n<a href=\"#2771\" id=\"2771\">2771</a>\n<a href=\"#2772\" id=\"2772\">2772</a>\n<a href=\"#2773\" id=\"2773\">2773</a>\n<a href=\"#2774\" id=\"2774\">2774</a>\n<a href=\"#2775\" id=\"2775\">2775</a>\n<a href=\"#2776\" id=\"2776\">2776</a>\n<a href=\"#2777\" id=\"2777\">2777</a>\n<a href=\"#2778\" id=\"2778\">2778</a>\n<a href=\"#2779\" id=\"2779\">2779</a>\n<a href=\"#2780\" id=\"2780\">2780</a>\n<a href=\"#2781\" id=\"2781\">2781</a>\n<a href=\"#2782\" id=\"2782\">2782</a>\n<a href=\"#2783\" id=\"2783\">2783</a>\n<a href=\"#2784\" id=\"2784\">2784</a>\n<a href=\"#2785\" id=\"2785\">2785</a>\n<a href=\"#2786\" id=\"2786\">2786</a>\n<a href=\"#2787\" id=\"2787\">2787</a>\n<a href=\"#2788\" id=\"2788\">2788</a>\n<a href=\"#2789\" id=\"2789\">2789</a>\n<a href=\"#2790\" id=\"2790\">2790</a>\n<a href=\"#2791\" id=\"2791\">2791</a>\n<a href=\"#2792\" id=\"2792\">2792</a>\n<a href=\"#2793\" id=\"2793\">2793</a>\n<a href=\"#2794\" id=\"2794\">2794</a>\n<a href=\"#2795\" id=\"2795\">2795</a>\n<a href=\"#2796\" id=\"2796\">2796</a>\n<a href=\"#2797\" id=\"2797\">2797</a>\n<a href=\"#2798\" id=\"2798\">2798</a>\n<a href=\"#2799\" id=\"2799\">2799</a>\n<a href=\"#2800\" id=\"2800\">2800</a>\n<a href=\"#2801\" id=\"2801\">2801</a>\n<a href=\"#2802\" id=\"2802\">2802</a>\n<a href=\"#2803\" id=\"2803\">2803</a>\n<a href=\"#2804\" id=\"2804\">2804</a>\n<a href=\"#2805\" id=\"2805\">2805</a>\n<a href=\"#2806\" id=\"2806\">2806</a>\n<a href=\"#2807\" id=\"2807\">2807</a>\n<a href=\"#2808\" id=\"2808\">2808</a>\n<a href=\"#2809\" id=\"2809\">2809</a>\n<a href=\"#2810\" id=\"2810\">2810</a>\n<a href=\"#2811\" id=\"2811\">2811</a>\n<a href=\"#2812\" id=\"2812\">2812</a>\n<a href=\"#2813\" id=\"2813\">2813</a>\n<a href=\"#2814\" id=\"2814\">2814</a>\n<a href=\"#2815\" id=\"2815\">2815</a>\n<a href=\"#2816\" id=\"2816\">2816</a>\n<a href=\"#2817\" id=\"2817\">2817</a>\n<a href=\"#2818\" id=\"2818\">2818</a>\n<a href=\"#2819\" id=\"2819\">2819</a>\n<a href=\"#2820\" id=\"2820\">2820</a>\n<a href=\"#2821\" id=\"2821\">2821</a>\n<a href=\"#2822\" id=\"2822\">2822</a>\n<a href=\"#2823\" id=\"2823\">2823</a>\n<a href=\"#2824\" id=\"2824\">2824</a>\n<a href=\"#2825\" id=\"2825\">2825</a>\n<a href=\"#2826\" id=\"2826\">2826</a>\n<a href=\"#2827\" id=\"2827\">2827</a>\n<a href=\"#2828\" id=\"2828\">2828</a>\n<a href=\"#2829\" id=\"2829\">2829</a>\n<a href=\"#2830\" id=\"2830\">2830</a>\n<a href=\"#2831\" id=\"2831\">2831</a>\n<a href=\"#2832\" id=\"2832\">2832</a>\n<a href=\"#2833\" id=\"2833\">2833</a>\n<a href=\"#2834\" id=\"2834\">2834</a>\n<a href=\"#2835\" id=\"2835\">2835</a>\n<a href=\"#2836\" id=\"2836\">2836</a>\n<a href=\"#2837\" id=\"2837\">2837</a>\n<a href=\"#2838\" id=\"2838\">2838</a>\n<a href=\"#2839\" id=\"2839\">2839</a>\n<a href=\"#2840\" id=\"2840\">2840</a>\n<a href=\"#2841\" id=\"2841\">2841</a>\n<a href=\"#2842\" id=\"2842\">2842</a>\n<a href=\"#2843\" id=\"2843\">2843</a>\n<a href=\"#2844\" id=\"2844\">2844</a>\n<a href=\"#2845\" id=\"2845\">2845</a>\n<a href=\"#2846\" id=\"2846\">2846</a>\n<a href=\"#2847\" id=\"2847\">2847</a>\n<a href=\"#2848\" id=\"2848\">2848</a>\n<a href=\"#2849\" id=\"2849\">2849</a>\n<a href=\"#2850\" id=\"2850\">2850</a>\n<a href=\"#2851\" id=\"2851\">2851</a>\n<a href=\"#2852\" id=\"2852\">2852</a>\n<a href=\"#2853\" id=\"2853\">2853</a>\n<a href=\"#2854\" id=\"2854\">2854</a>\n<a href=\"#2855\" id=\"2855\">2855</a>\n<a href=\"#2856\" id=\"2856\">2856</a>\n<a href=\"#2857\" id=\"2857\">2857</a>\n<a href=\"#2858\" id=\"2858\">2858</a>\n<a href=\"#2859\" id=\"2859\">2859</a>\n<a href=\"#2860\" id=\"2860\">2860</a>\n<a href=\"#2861\" id=\"2861\">2861</a>\n<a href=\"#2862\" id=\"2862\">2862</a>\n<a href=\"#2863\" id=\"2863\">2863</a>\n<a href=\"#2864\" id=\"2864\">2864</a>\n<a href=\"#2865\" id=\"2865\">2865</a>\n<a href=\"#2866\" id=\"2866\">2866</a>\n<a href=\"#2867\" id=\"2867\">2867</a>\n<a href=\"#2868\" id=\"2868\">2868</a>\n<a href=\"#2869\" id=\"2869\">2869</a>\n<a href=\"#2870\" id=\"2870\">2870</a>\n<a href=\"#2871\" id=\"2871\">2871</a>\n<a href=\"#2872\" id=\"2872\">2872</a>\n<a href=\"#2873\" id=\"2873\">2873</a>\n<a href=\"#2874\" id=\"2874\">2874</a>\n<a href=\"#2875\" id=\"2875\">2875</a>\n<a href=\"#2876\" id=\"2876\">2876</a>\n<a href=\"#2877\" id=\"2877\">2877</a>\n<a href=\"#2878\" id=\"2878\">2878</a>\n<a href=\"#2879\" id=\"2879\">2879</a>\n<a href=\"#2880\" id=\"2880\">2880</a>\n<a href=\"#2881\" id=\"2881\">2881</a>\n<a href=\"#2882\" id=\"2882\">2882</a>\n<a href=\"#2883\" id=\"2883\">2883</a>\n<a href=\"#2884\" id=\"2884\">2884</a>\n<a href=\"#2885\" id=\"2885\">2885</a>\n<a href=\"#2886\" id=\"2886\">2886</a>\n<a href=\"#2887\" id=\"2887\">2887</a>\n<a href=\"#2888\" id=\"2888\">2888</a>\n<a href=\"#2889\" id=\"2889\">2889</a>\n<a href=\"#2890\" id=\"2890\">2890</a>\n<a href=\"#2891\" id=\"2891\">2891</a>\n<a href=\"#2892\" id=\"2892\">2892</a>\n<a href=\"#2893\" id=\"2893\">2893</a>\n<a href=\"#2894\" id=\"2894\">2894</a>\n<a href=\"#2895\" id=\"2895\">2895</a>\n<a href=\"#2896\" id=\"2896\">2896</a>\n<a href=\"#2897\" id=\"2897\">2897</a>\n<a href=\"#2898\" id=\"2898\">2898</a>\n<a href=\"#2899\" id=\"2899\">2899</a>\n<a href=\"#2900\" id=\"2900\">2900</a>\n<a href=\"#2901\" id=\"2901\">2901</a>\n<a href=\"#2902\" id=\"2902\">2902</a>\n<a href=\"#2903\" id=\"2903\">2903</a>\n<a href=\"#2904\" id=\"2904\">2904</a>\n<a href=\"#2905\" id=\"2905\">2905</a>\n<a href=\"#2906\" id=\"2906\">2906</a>\n<a href=\"#2907\" id=\"2907\">2907</a>\n<a href=\"#2908\" id=\"2908\">2908</a>\n<a href=\"#2909\" id=\"2909\">2909</a>\n<a href=\"#2910\" id=\"2910\">2910</a>\n<a href=\"#2911\" id=\"2911\">2911</a>\n<a href=\"#2912\" id=\"2912\">2912</a>\n<a href=\"#2913\" id=\"2913\">2913</a>\n<a href=\"#2914\" id=\"2914\">2914</a>\n<a href=\"#2915\" id=\"2915\">2915</a>\n<a href=\"#2916\" id=\"2916\">2916</a>\n<a href=\"#2917\" id=\"2917\">2917</a>\n<a href=\"#2918\" id=\"2918\">2918</a>\n<a href=\"#2919\" id=\"2919\">2919</a>\n<a href=\"#2920\" id=\"2920\">2920</a>\n<a href=\"#2921\" id=\"2921\">2921</a>\n<a href=\"#2922\" id=\"2922\">2922</a>\n<a href=\"#2923\" id=\"2923\">2923</a>\n<a href=\"#2924\" id=\"2924\">2924</a>\n<a href=\"#2925\" id=\"2925\">2925</a>\n<a href=\"#2926\" id=\"2926\">2926</a>\n<a href=\"#2927\" id=\"2927\">2927</a>\n<a href=\"#2928\" id=\"2928\">2928</a>\n<a href=\"#2929\" id=\"2929\">2929</a>\n<a href=\"#2930\" id=\"2930\">2930</a>\n<a href=\"#2931\" id=\"2931\">2931</a>\n<a href=\"#2932\" id=\"2932\">2932</a>\n<a href=\"#2933\" id=\"2933\">2933</a>\n<a href=\"#2934\" id=\"2934\">2934</a>\n<a href=\"#2935\" id=\"2935\">2935</a>\n<a href=\"#2936\" id=\"2936\">2936</a>\n<a href=\"#2937\" id=\"2937\">2937</a>\n<a href=\"#2938\" id=\"2938\">2938</a>\n<a href=\"#2939\" id=\"2939\">2939</a>\n<a href=\"#2940\" id=\"2940\">2940</a>\n<a href=\"#2941\" id=\"2941\">2941</a>\n<a href=\"#2942\" id=\"2942\">2942</a>\n<a href=\"#2943\" id=\"2943\">2943</a>\n<a href=\"#2944\" id=\"2944\">2944</a>\n<a href=\"#2945\" id=\"2945\">2945</a>\n<a href=\"#2946\" id=\"2946\">2946</a>\n<a href=\"#2947\" id=\"2947\">2947</a>\n<a href=\"#2948\" id=\"2948\">2948</a>\n<a href=\"#2949\" id=\"2949\">2949</a>\n<a href=\"#2950\" id=\"2950\">2950</a>\n<a href=\"#2951\" id=\"2951\">2951</a>\n<a href=\"#2952\" id=\"2952\">2952</a>\n<a href=\"#2953\" id=\"2953\">2953</a>\n<a href=\"#2954\" id=\"2954\">2954</a>\n<a href=\"#2955\" id=\"2955\">2955</a>\n<a href=\"#2956\" id=\"2956\">2956</a>\n<a href=\"#2957\" id=\"2957\">2957</a>\n<a href=\"#2958\" id=\"2958\">2958</a>\n<a href=\"#2959\" id=\"2959\">2959</a>\n<a href=\"#2960\" id=\"2960\">2960</a>\n<a href=\"#2961\" id=\"2961\">2961</a>\n<a href=\"#2962\" id=\"2962\">2962</a>\n<a href=\"#2963\" id=\"2963\">2963</a>\n<a href=\"#2964\" id=\"2964\">2964</a>\n<a href=\"#2965\" id=\"2965\">2965</a>\n<a href=\"#2966\" id=\"2966\">2966</a>\n<a href=\"#2967\" id=\"2967\">2967</a>\n<a href=\"#2968\" id=\"2968\">2968</a>\n<a href=\"#2969\" id=\"2969\">2969</a>\n<a href=\"#2970\" id=\"2970\">2970</a>\n<a href=\"#2971\" id=\"2971\">2971</a>\n<a href=\"#2972\" id=\"2972\">2972</a>\n<a href=\"#2973\" id=\"2973\">2973</a>\n<a href=\"#2974\" id=\"2974\">2974</a>\n<a href=\"#2975\" id=\"2975\">2975</a>\n<a href=\"#2976\" id=\"2976\">2976</a>\n<a href=\"#2977\" id=\"2977\">2977</a>\n<a href=\"#2978\" id=\"2978\">2978</a>\n<a href=\"#2979\" id=\"2979\">2979</a>\n<a href=\"#2980\" id=\"2980\">2980</a>\n<a href=\"#2981\" id=\"2981\">2981</a>\n<a href=\"#2982\" id=\"2982\">2982</a>\n<a href=\"#2983\" id=\"2983\">2983</a>\n<a href=\"#2984\" id=\"2984\">2984</a>\n<a href=\"#2985\" id=\"2985\">2985</a>\n<a href=\"#2986\" id=\"2986\">2986</a>\n<a href=\"#2987\" id=\"2987\">2987</a>\n<a href=\"#2988\" id=\"2988\">2988</a>\n<a href=\"#2989\" id=\"2989\">2989</a>\n<a href=\"#2990\" id=\"2990\">2990</a>\n<a href=\"#2991\" id=\"2991\">2991</a>\n<a href=\"#2992\" id=\"2992\">2992</a>\n<a href=\"#2993\" id=\"2993\">2993</a>\n<a href=\"#2994\" id=\"2994\">2994</a>\n<a href=\"#2995\" id=\"2995\">2995</a>\n<a href=\"#2996\" id=\"2996\">2996</a>\n<a href=\"#2997\" id=\"2997\">2997</a>\n<a href=\"#2998\" id=\"2998\">2998</a>\n<a href=\"#2999\" id=\"2999\">2999</a>\n<a href=\"#3000\" id=\"3000\">3000</a>\n<a href=\"#3001\" id=\"3001\">3001</a>\n<a href=\"#3002\" id=\"3002\">3002</a>\n<a href=\"#3003\" id=\"3003\">3003</a>\n<a href=\"#3004\" id=\"3004\">3004</a>\n<a href=\"#3005\" id=\"3005\">3005</a>\n<a href=\"#3006\" id=\"3006\">3006</a>\n<a href=\"#3007\" id=\"3007\">3007</a>\n<a href=\"#3008\" id=\"3008\">3008</a>\n<a href=\"#3009\" id=\"3009\">3009</a>\n<a href=\"#3010\" id=\"3010\">3010</a>\n<a href=\"#3011\" id=\"3011\">3011</a>\n<a href=\"#3012\" id=\"3012\">3012</a>\n<a href=\"#3013\" id=\"3013\">3013</a>\n<a href=\"#3014\" id=\"3014\">3014</a>\n<a href=\"#3015\" id=\"3015\">3015</a>\n<a href=\"#3016\" id=\"3016\">3016</a>\n<a href=\"#3017\" id=\"3017\">3017</a>\n<a href=\"#3018\" id=\"3018\">3018</a>\n<a href=\"#3019\" id=\"3019\">3019</a>\n<a href=\"#3020\" id=\"3020\">3020</a>\n<a href=\"#3021\" id=\"3021\">3021</a>\n<a href=\"#3022\" id=\"3022\">3022</a>\n<a href=\"#3023\" id=\"3023\">3023</a>\n<a href=\"#3024\" id=\"3024\">3024</a>\n<a href=\"#3025\" id=\"3025\">3025</a>\n<a href=\"#3026\" id=\"3026\">3026</a>\n<a href=\"#3027\" id=\"3027\">3027</a>\n<a href=\"#3028\" id=\"3028\">3028</a>\n<a href=\"#3029\" id=\"3029\">3029</a>\n<a href=\"#3030\" id=\"3030\">3030</a>\n<a href=\"#3031\" id=\"3031\">3031</a>\n<a href=\"#3032\" id=\"3032\">3032</a>\n<a href=\"#3033\" id=\"3033\">3033</a>\n<a href=\"#3034\" id=\"3034\">3034</a>\n<a href=\"#3035\" id=\"3035\">3035</a>\n<a href=\"#3036\" id=\"3036\">3036</a>\n<a href=\"#3037\" id=\"3037\">3037</a>\n<a href=\"#3038\" id=\"3038\">3038</a>\n<a href=\"#3039\" id=\"3039\">3039</a>\n<a href=\"#3040\" id=\"3040\">3040</a>\n<a href=\"#3041\" id=\"3041\">3041</a>\n<a href=\"#3042\" id=\"3042\">3042</a>\n<a href=\"#3043\" id=\"3043\">3043</a>\n<a href=\"#3044\" id=\"3044\">3044</a>\n<a href=\"#3045\" id=\"3045\">3045</a>\n<a href=\"#3046\" id=\"3046\">3046</a>\n<a href=\"#3047\" id=\"3047\">3047</a>\n<a href=\"#3048\" id=\"3048\">3048</a>\n<a href=\"#3049\" id=\"3049\">3049</a>\n<a href=\"#3050\" id=\"3050\">3050</a>\n<a href=\"#3051\" id=\"3051\">3051</a>\n<a href=\"#3052\" id=\"3052\">3052</a>\n<a href=\"#3053\" id=\"3053\">3053</a>\n<a href=\"#3054\" id=\"3054\">3054</a>\n<a href=\"#3055\" id=\"3055\">3055</a>\n<a href=\"#3056\" id=\"3056\">3056</a>\n<a href=\"#3057\" id=\"3057\">3057</a>\n<a href=\"#3058\" id=\"3058\">3058</a>\n<a href=\"#3059\" id=\"3059\">3059</a>\n<a href=\"#3060\" id=\"3060\">3060</a>\n<a href=\"#3061\" id=\"3061\">3061</a>\n<a href=\"#3062\" id=\"3062\">3062</a>\n<a href=\"#3063\" id=\"3063\">3063</a>\n<a href=\"#3064\" id=\"3064\">3064</a>\n<a href=\"#3065\" id=\"3065\">3065</a>\n<a href=\"#3066\" id=\"3066\">3066</a>\n<a href=\"#3067\" id=\"3067\">3067</a>\n<a href=\"#3068\" id=\"3068\">3068</a>\n<a href=\"#3069\" id=\"3069\">3069</a>\n<a href=\"#3070\" id=\"3070\">3070</a>\n<a href=\"#3071\" id=\"3071\">3071</a>\n<a href=\"#3072\" id=\"3072\">3072</a>\n<a href=\"#3073\" id=\"3073\">3073</a>\n<a href=\"#3074\" id=\"3074\">3074</a>\n<a href=\"#3075\" id=\"3075\">3075</a>\n<a href=\"#3076\" id=\"3076\">3076</a>\n<a href=\"#3077\" id=\"3077\">3077</a>\n<a href=\"#3078\" id=\"3078\">3078</a>\n<a href=\"#3079\" id=\"3079\">3079</a>\n<a href=\"#3080\" id=\"3080\">3080</a>\n<a href=\"#3081\" id=\"3081\">3081</a>\n<a href=\"#3082\" id=\"3082\">3082</a>\n<a href=\"#3083\" id=\"3083\">3083</a>\n<a href=\"#3084\" id=\"3084\">3084</a>\n<a href=\"#3085\" id=\"3085\">3085</a>\n<a href=\"#3086\" id=\"3086\">3086</a>\n<a href=\"#3087\" id=\"3087\">3087</a>\n<a href=\"#3088\" id=\"3088\">3088</a>\n<a href=\"#3089\" id=\"3089\">3089</a>\n<a href=\"#3090\" id=\"3090\">3090</a>\n<a href=\"#3091\" id=\"3091\">3091</a>\n<a href=\"#3092\" id=\"3092\">3092</a>\n<a href=\"#3093\" id=\"3093\">3093</a>\n<a href=\"#3094\" id=\"3094\">3094</a>\n<a href=\"#3095\" id=\"3095\">3095</a>\n<a href=\"#3096\" id=\"3096\">3096</a>\n<a href=\"#3097\" id=\"3097\">3097</a>\n<a href=\"#3098\" id=\"3098\">3098</a>\n<a href=\"#3099\" id=\"3099\">3099</a>\n<a href=\"#3100\" id=\"3100\">3100</a>\n<a href=\"#3101\" id=\"3101\">3101</a>\n<a href=\"#3102\" id=\"3102\">3102</a>\n<a href=\"#3103\" id=\"3103\">3103</a>\n<a href=\"#3104\" id=\"3104\">3104</a>\n<a href=\"#3105\" id=\"3105\">3105</a>\n<a href=\"#3106\" id=\"3106\">3106</a>\n<a href=\"#3107\" id=\"3107\">3107</a>\n<a href=\"#3108\" id=\"3108\">3108</a>\n<a href=\"#3109\" id=\"3109\">3109</a>\n<a href=\"#3110\" id=\"3110\">3110</a>\n<a href=\"#3111\" id=\"3111\">3111</a>\n<a href=\"#3112\" id=\"3112\">3112</a>\n<a href=\"#3113\" id=\"3113\">3113</a>\n<a href=\"#3114\" id=\"3114\">3114</a>\n<a href=\"#3115\" id=\"3115\">3115</a>\n<a href=\"#3116\" id=\"3116\">3116</a>\n<a href=\"#3117\" id=\"3117\">3117</a>\n<a href=\"#3118\" id=\"3118\">3118</a>\n<a href=\"#3119\" id=\"3119\">3119</a>\n<a href=\"#3120\" id=\"3120\">3120</a>\n<a href=\"#3121\" id=\"3121\">3121</a>\n<a href=\"#3122\" id=\"3122\">3122</a>\n<a href=\"#3123\" id=\"3123\">3123</a>\n<a href=\"#3124\" id=\"3124\">3124</a>\n<a href=\"#3125\" id=\"3125\">3125</a>\n<a href=\"#3126\" id=\"3126\">3126</a>\n<a href=\"#3127\" id=\"3127\">3127</a>\n<a href=\"#3128\" id=\"3128\">3128</a>\n<a href=\"#3129\" id=\"3129\">3129</a>\n<a href=\"#3130\" id=\"3130\">3130</a>\n<a href=\"#3131\" id=\"3131\">3131</a>\n<a href=\"#3132\" id=\"3132\">3132</a>\n<a href=\"#3133\" id=\"3133\">3133</a>\n<a href=\"#3134\" id=\"3134\">3134</a>\n<a href=\"#3135\" id=\"3135\">3135</a>\n<a href=\"#3136\" id=\"3136\">3136</a>\n<a href=\"#3137\" id=\"3137\">3137</a>\n<a href=\"#3138\" id=\"3138\">3138</a>\n<a href=\"#3139\" id=\"3139\">3139</a>\n<a href=\"#3140\" id=\"3140\">3140</a>\n<a href=\"#3141\" id=\"3141\">3141</a>\n<a href=\"#3142\" id=\"3142\">3142</a>\n<a href=\"#3143\" id=\"3143\">3143</a>\n<a href=\"#3144\" id=\"3144\">3144</a>\n<a href=\"#3145\" id=\"3145\">3145</a>\n<a href=\"#3146\" id=\"3146\">3146</a>\n<a href=\"#3147\" id=\"3147\">3147</a>\n<a href=\"#3148\" id=\"3148\">3148</a>\n<a href=\"#3149\" id=\"3149\">3149</a>\n<a href=\"#3150\" id=\"3150\">3150</a>\n<a href=\"#3151\" id=\"3151\">3151</a>\n<a href=\"#3152\" id=\"3152\">3152</a>\n<a href=\"#3153\" id=\"3153\">3153</a>\n<a href=\"#3154\" id=\"3154\">3154</a>\n<a href=\"#3155\" id=\"3155\">3155</a>\n<a href=\"#3156\" id=\"3156\">3156</a>\n<a href=\"#3157\" id=\"3157\">3157</a>\n<a href=\"#3158\" id=\"3158\">3158</a>\n<a href=\"#3159\" id=\"3159\">3159</a>\n<a href=\"#3160\" id=\"3160\">3160</a>\n<a href=\"#3161\" id=\"3161\">3161</a>\n<a href=\"#3162\" id=\"3162\">3162</a>\n<a href=\"#3163\" id=\"3163\">3163</a>\n<a href=\"#3164\" id=\"3164\">3164</a>\n<a href=\"#3165\" id=\"3165\">3165</a>\n<a href=\"#3166\" id=\"3166\">3166</a>\n<a href=\"#3167\" id=\"3167\">3167</a>\n<a href=\"#3168\" id=\"3168\">3168</a>\n<a href=\"#3169\" id=\"3169\">3169</a>\n<a href=\"#3170\" id=\"3170\">3170</a>\n<a href=\"#3171\" id=\"3171\">3171</a>\n<a href=\"#3172\" id=\"3172\">3172</a>\n<a href=\"#3173\" id=\"3173\">3173</a>\n<a href=\"#3174\" id=\"3174\">3174</a>\n<a href=\"#3175\" id=\"3175\">3175</a>\n<a href=\"#3176\" id=\"3176\">3176</a>\n<a href=\"#3177\" id=\"3177\">3177</a>\n<a href=\"#3178\" id=\"3178\">3178</a>\n<a href=\"#3179\" id=\"3179\">3179</a>\n<a href=\"#3180\" id=\"3180\">3180</a>\n<a href=\"#3181\" id=\"3181\">3181</a>\n<a href=\"#3182\" id=\"3182\">3182</a>\n<a href=\"#3183\" id=\"3183\">3183</a>\n<a href=\"#3184\" id=\"3184\">3184</a>\n<a href=\"#3185\" id=\"3185\">3185</a>\n<a href=\"#3186\" id=\"3186\">3186</a>\n<a href=\"#3187\" id=\"3187\">3187</a>\n<a href=\"#3188\" id=\"3188\">3188</a>\n<a href=\"#3189\" id=\"3189\">3189</a>\n<a href=\"#3190\" id=\"3190\">3190</a>\n<a href=\"#3191\" id=\"3191\">3191</a>\n<a href=\"#3192\" id=\"3192\">3192</a>\n<a href=\"#3193\" id=\"3193\">3193</a>\n<a href=\"#3194\" id=\"3194\">3194</a>\n<a href=\"#3195\" id=\"3195\">3195</a>\n<a href=\"#3196\" id=\"3196\">3196</a>\n<a href=\"#3197\" id=\"3197\">3197</a>\n<a href=\"#3198\" id=\"3198\">3198</a>\n<a href=\"#3199\" id=\"3199\">3199</a>\n<a href=\"#3200\" id=\"3200\">3200</a>\n<a href=\"#3201\" id=\"3201\">3201</a>\n<a href=\"#3202\" id=\"3202\">3202</a>\n<a href=\"#3203\" id=\"3203\">3203</a>\n<a href=\"#3204\" id=\"3204\">3204</a>\n<a href=\"#3205\" id=\"3205\">3205</a>\n<a href=\"#3206\" id=\"3206\">3206</a>\n<a href=\"#3207\" id=\"3207\">3207</a>\n<a href=\"#3208\" id=\"3208\">3208</a>\n<a href=\"#3209\" id=\"3209\">3209</a>\n<a href=\"#3210\" id=\"3210\">3210</a>\n<a href=\"#3211\" id=\"3211\">3211</a>\n<a href=\"#3212\" id=\"3212\">3212</a>\n<a href=\"#3213\" id=\"3213\">3213</a>\n<a href=\"#3214\" id=\"3214\">3214</a>\n<a href=\"#3215\" id=\"3215\">3215</a>\n<a href=\"#3216\" id=\"3216\">3216</a>\n<a href=\"#3217\" id=\"3217\">3217</a>\n<a href=\"#3218\" id=\"3218\">3218</a>\n<a href=\"#3219\" id=\"3219\">3219</a>\n<a href=\"#3220\" id=\"3220\">3220</a>\n<a href=\"#3221\" id=\"3221\">3221</a>\n<a href=\"#3222\" id=\"3222\">3222</a>\n<a href=\"#3223\" id=\"3223\">3223</a>\n<a href=\"#3224\" id=\"3224\">3224</a>\n<a href=\"#3225\" id=\"3225\">3225</a>\n<a href=\"#3226\" id=\"3226\">3226</a>\n<a href=\"#3227\" id=\"3227\">3227</a>\n<a href=\"#3228\" id=\"3228\">3228</a>\n<a href=\"#3229\" id=\"3229\">3229</a>\n<a href=\"#3230\" id=\"3230\">3230</a>\n<a href=\"#3231\" id=\"3231\">3231</a>\n<a href=\"#3232\" id=\"3232\">3232</a>\n<a href=\"#3233\" id=\"3233\">3233</a>\n<a href=\"#3234\" id=\"3234\">3234</a>\n<a href=\"#3235\" id=\"3235\">3235</a>\n<a href=\"#3236\" id=\"3236\">3236</a>\n<a href=\"#3237\" id=\"3237\">3237</a>\n<a href=\"#3238\" id=\"3238\">3238</a>\n<a href=\"#3239\" id=\"3239\">3239</a>\n<a href=\"#3240\" id=\"3240\">3240</a>\n<a href=\"#3241\" id=\"3241\">3241</a>\n<a href=\"#3242\" id=\"3242\">3242</a>\n<a href=\"#3243\" id=\"3243\">3243</a>\n<a href=\"#3244\" id=\"3244\">3244</a>\n<a href=\"#3245\" id=\"3245\">3245</a>\n<a href=\"#3246\" id=\"3246\">3246</a>\n<a href=\"#3247\" id=\"3247\">3247</a>\n<a href=\"#3248\" id=\"3248\">3248</a>\n<a href=\"#3249\" id=\"3249\">3249</a>\n<a href=\"#3250\" id=\"3250\">3250</a>\n<a href=\"#3251\" id=\"3251\">3251</a>\n<a href=\"#3252\" id=\"3252\">3252</a>\n<a href=\"#3253\" id=\"3253\">3253</a>\n<a href=\"#3254\" id=\"3254\">3254</a>\n<a href=\"#3255\" id=\"3255\">3255</a>\n<a href=\"#3256\" id=\"3256\">3256</a>\n<a href=\"#3257\" id=\"3257\">3257</a>\n<a href=\"#3258\" id=\"3258\">3258</a>\n<a href=\"#3259\" id=\"3259\">3259</a>\n<a href=\"#3260\" id=\"3260\">3260</a>\n<a href=\"#3261\" id=\"3261\">3261</a>\n<a href=\"#3262\" id=\"3262\">3262</a>\n<a href=\"#3263\" id=\"3263\">3263</a>\n<a href=\"#3264\" id=\"3264\">3264</a>\n<a href=\"#3265\" id=\"3265\">3265</a>\n<a href=\"#3266\" id=\"3266\">3266</a>\n<a href=\"#3267\" id=\"3267\">3267</a>\n<a href=\"#3268\" id=\"3268\">3268</a>\n<a href=\"#3269\" id=\"3269\">3269</a>\n<a href=\"#3270\" id=\"3270\">3270</a>\n<a href=\"#3271\" id=\"3271\">3271</a>\n<a href=\"#3272\" id=\"3272\">3272</a>\n<a href=\"#3273\" id=\"3273\">3273</a>\n<a href=\"#3274\" id=\"3274\">3274</a>\n<a href=\"#3275\" id=\"3275\">3275</a>\n<a href=\"#3276\" id=\"3276\">3276</a>\n<a href=\"#3277\" id=\"3277\">3277</a>\n<a href=\"#3278\" id=\"3278\">3278</a>\n<a href=\"#3279\" id=\"3279\">3279</a>\n<a href=\"#3280\" id=\"3280\">3280</a>\n<a href=\"#3281\" id=\"3281\">3281</a>\n<a href=\"#3282\" id=\"3282\">3282</a>\n<a href=\"#3283\" id=\"3283\">3283</a>\n<a href=\"#3284\" id=\"3284\">3284</a>\n<a href=\"#3285\" id=\"3285\">3285</a>\n<a href=\"#3286\" id=\"3286\">3286</a>\n<a href=\"#3287\" id=\"3287\">3287</a>\n<a href=\"#3288\" id=\"3288\">3288</a>\n<a href=\"#3289\" id=\"3289\">3289</a>\n<a href=\"#3290\" id=\"3290\">3290</a>\n<a href=\"#3291\" id=\"3291\">3291</a>\n<a href=\"#3292\" id=\"3292\">3292</a>\n<a href=\"#3293\" id=\"3293\">3293</a>\n<a href=\"#3294\" id=\"3294\">3294</a>\n<a href=\"#3295\" id=\"3295\">3295</a>\n<a href=\"#3296\" id=\"3296\">3296</a>\n<a href=\"#3297\" id=\"3297\">3297</a>\n<a href=\"#3298\" id=\"3298\">3298</a>\n<a href=\"#3299\" id=\"3299\">3299</a>\n<a href=\"#3300\" id=\"3300\">3300</a>\n<a href=\"#3301\" id=\"3301\">3301</a>\n<a href=\"#3302\" id=\"3302\">3302</a>\n<a href=\"#3303\" id=\"3303\">3303</a>\n<a href=\"#3304\" id=\"3304\">3304</a>\n<a href=\"#3305\" id=\"3305\">3305</a>\n<a href=\"#3306\" id=\"3306\">3306</a>\n<a href=\"#3307\" id=\"3307\">3307</a>\n<a href=\"#3308\" id=\"3308\">3308</a>\n<a href=\"#3309\" id=\"3309\">3309</a>\n<a href=\"#3310\" id=\"3310\">3310</a>\n<a href=\"#3311\" id=\"3311\">3311</a>\n<a href=\"#3312\" id=\"3312\">3312</a>\n<a href=\"#3313\" id=\"3313\">3313</a>\n<a href=\"#3314\" id=\"3314\">3314</a>\n<a href=\"#3315\" id=\"3315\">3315</a>\n<a href=\"#3316\" id=\"3316\">3316</a>\n<a href=\"#3317\" id=\"3317\">3317</a>\n<a href=\"#3318\" id=\"3318\">3318</a>\n<a href=\"#3319\" id=\"3319\">3319</a>\n<a href=\"#3320\" id=\"3320\">3320</a>\n<a href=\"#3321\" id=\"3321\">3321</a>\n<a href=\"#3322\" id=\"3322\">3322</a>\n<a href=\"#3323\" id=\"3323\">3323</a>\n<a href=\"#3324\" id=\"3324\">3324</a>\n<a href=\"#3325\" id=\"3325\">3325</a>\n<a href=\"#3326\" id=\"3326\">3326</a>\n<a href=\"#3327\" id=\"3327\">3327</a>\n<a href=\"#3328\" id=\"3328\">3328</a>\n<a href=\"#3329\" id=\"3329\">3329</a>\n<a href=\"#3330\" id=\"3330\">3330</a>\n<a href=\"#3331\" id=\"3331\">3331</a>\n<a href=\"#3332\" id=\"3332\">3332</a>\n<a href=\"#3333\" id=\"3333\">3333</a>\n<a href=\"#3334\" id=\"3334\">3334</a>\n<a href=\"#3335\" id=\"3335\">3335</a>\n<a href=\"#3336\" id=\"3336\">3336</a>\n<a href=\"#3337\" id=\"3337\">3337</a>\n<a href=\"#3338\" id=\"3338\">3338</a>\n<a href=\"#3339\" id=\"3339\">3339</a>\n<a href=\"#3340\" id=\"3340\">3340</a>\n<a href=\"#3341\" id=\"3341\">3341</a>\n<a href=\"#3342\" id=\"3342\">3342</a>\n<a href=\"#3343\" id=\"3343\">3343</a>\n<a href=\"#3344\" id=\"3344\">3344</a>\n<a href=\"#3345\" id=\"3345\">3345</a>\n<a href=\"#3346\" id=\"3346\">3346</a>\n<a href=\"#3347\" id=\"3347\">3347</a>\n<a href=\"#3348\" id=\"3348\">3348</a>\n<a href=\"#3349\" id=\"3349\">3349</a>\n<a href=\"#3350\" id=\"3350\">3350</a>\n<a href=\"#3351\" id=\"3351\">3351</a>\n<a href=\"#3352\" id=\"3352\">3352</a>\n<a href=\"#3353\" id=\"3353\">3353</a>\n<a href=\"#3354\" id=\"3354\">3354</a>\n<a href=\"#3355\" id=\"3355\">3355</a>\n<a href=\"#3356\" id=\"3356\">3356</a>\n<a href=\"#3357\" id=\"3357\">3357</a>\n<a href=\"#3358\" id=\"3358\">3358</a>\n<a href=\"#3359\" id=\"3359\">3359</a>\n<a href=\"#3360\" id=\"3360\">3360</a>\n<a href=\"#3361\" id=\"3361\">3361</a>\n<a href=\"#3362\" id=\"3362\">3362</a>\n<a href=\"#3363\" id=\"3363\">3363</a>\n<a href=\"#3364\" id=\"3364\">3364</a>\n<a href=\"#3365\" id=\"3365\">3365</a>\n<a href=\"#3366\" id=\"3366\">3366</a>\n<a href=\"#3367\" id=\"3367\">3367</a>\n<a href=\"#3368\" id=\"3368\">3368</a>\n<a href=\"#3369\" id=\"3369\">3369</a>\n<a href=\"#3370\" id=\"3370\">3370</a>\n<a href=\"#3371\" id=\"3371\">3371</a>\n<a href=\"#3372\" id=\"3372\">3372</a>\n<a href=\"#3373\" id=\"3373\">3373</a>\n<a href=\"#3374\" id=\"3374\">3374</a>\n<a href=\"#3375\" id=\"3375\">3375</a>\n<a href=\"#3376\" id=\"3376\">3376</a>\n<a href=\"#3377\" id=\"3377\">3377</a>\n<a href=\"#3378\" id=\"3378\">3378</a>\n<a href=\"#3379\" id=\"3379\">3379</a>\n<a href=\"#3380\" id=\"3380\">3380</a>\n<a href=\"#3381\" id=\"3381\">3381</a>\n<a href=\"#3382\" id=\"3382\">3382</a>\n<a href=\"#3383\" id=\"3383\">3383</a>\n<a href=\"#3384\" id=\"3384\">3384</a>\n<a href=\"#3385\" id=\"3385\">3385</a>\n<a href=\"#3386\" id=\"3386\">3386</a>\n<a href=\"#3387\" id=\"3387\">3387</a>\n<a href=\"#3388\" id=\"3388\">3388</a>\n<a href=\"#3389\" id=\"3389\">3389</a>\n<a href=\"#3390\" id=\"3390\">3390</a>\n<a href=\"#3391\" id=\"3391\">3391</a>\n<a href=\"#3392\" id=\"3392\">3392</a>\n<a href=\"#3393\" id=\"3393\">3393</a>\n<a href=\"#3394\" id=\"3394\">3394</a>\n<a href=\"#3395\" id=\"3395\">3395</a>\n<a href=\"#3396\" id=\"3396\">3396</a>\n<a href=\"#3397\" id=\"3397\">3397</a>\n<a href=\"#3398\" id=\"3398\">3398</a>\n<a href=\"#3399\" id=\"3399\">3399</a>\n<a href=\"#3400\" id=\"3400\">3400</a>\n<a href=\"#3401\" id=\"3401\">3401</a>\n<a href=\"#3402\" id=\"3402\">3402</a>\n<a href=\"#3403\" id=\"3403\">3403</a>\n<a href=\"#3404\" id=\"3404\">3404</a>\n<a href=\"#3405\" id=\"3405\">3405</a>\n<a href=\"#3406\" id=\"3406\">3406</a>\n<a href=\"#3407\" id=\"3407\">3407</a>\n<a href=\"#3408\" id=\"3408\">3408</a>\n<a href=\"#3409\" id=\"3409\">3409</a>\n<a href=\"#3410\" id=\"3410\">3410</a>\n<a href=\"#3411\" id=\"3411\">3411</a>\n<a href=\"#3412\" id=\"3412\">3412</a>\n<a href=\"#3413\" id=\"3413\">3413</a>\n<a href=\"#3414\" id=\"3414\">3414</a>\n<a href=\"#3415\" id=\"3415\">3415</a>\n<a href=\"#3416\" id=\"3416\">3416</a>\n<a href=\"#3417\" id=\"3417\">3417</a>\n<a href=\"#3418\" id=\"3418\">3418</a>\n<a href=\"#3419\" id=\"3419\">3419</a>\n<a href=\"#3420\" id=\"3420\">3420</a>\n<a href=\"#3421\" id=\"3421\">3421</a>\n<a href=\"#3422\" id=\"3422\">3422</a>\n<a href=\"#3423\" id=\"3423\">3423</a>\n<a href=\"#3424\" id=\"3424\">3424</a>\n<a href=\"#3425\" id=\"3425\">3425</a>\n<a href=\"#3426\" id=\"3426\">3426</a>\n<a href=\"#3427\" id=\"3427\">3427</a>\n<a href=\"#3428\" id=\"3428\">3428</a>\n<a href=\"#3429\" id=\"3429\">3429</a>\n<a href=\"#3430\" id=\"3430\">3430</a>\n<a href=\"#3431\" id=\"3431\">3431</a>\n<a href=\"#3432\" id=\"3432\">3432</a>\n<a href=\"#3433\" id=\"3433\">3433</a>\n<a href=\"#3434\" id=\"3434\">3434</a>\n<a href=\"#3435\" id=\"3435\">3435</a>\n<a href=\"#3436\" id=\"3436\">3436</a>\n<a href=\"#3437\" id=\"3437\">3437</a>\n<a href=\"#3438\" id=\"3438\">3438</a>\n<a href=\"#3439\" id=\"3439\">3439</a>\n<a href=\"#3440\" id=\"3440\">3440</a>\n<a href=\"#3441\" id=\"3441\">3441</a>\n<a href=\"#3442\" id=\"3442\">3442</a>\n<a href=\"#3443\" id=\"3443\">3443</a>\n<a href=\"#3444\" id=\"3444\">3444</a>\n<a href=\"#3445\" id=\"3445\">3445</a>\n<a href=\"#3446\" id=\"3446\">3446</a>\n<a href=\"#3447\" id=\"3447\">3447</a>\n<a href=\"#3448\" id=\"3448\">3448</a>\n<a href=\"#3449\" id=\"3449\">3449</a>\n<a href=\"#3450\" id=\"3450\">3450</a>\n<a href=\"#3451\" id=\"3451\">3451</a>\n<a href=\"#3452\" id=\"3452\">3452</a>\n<a href=\"#3453\" id=\"3453\">3453</a>\n<a href=\"#3454\" id=\"3454\">3454</a>\n<a href=\"#3455\" id=\"3455\">3455</a>\n<a href=\"#3456\" id=\"3456\">3456</a>\n<a href=\"#3457\" id=\"3457\">3457</a>\n<a href=\"#3458\" id=\"3458\">3458</a>\n<a href=\"#3459\" id=\"3459\">3459</a>\n<a href=\"#3460\" id=\"3460\">3460</a>\n<a href=\"#3461\" id=\"3461\">3461</a>\n<a href=\"#3462\" id=\"3462\">3462</a>\n<a href=\"#3463\" id=\"3463\">3463</a>\n<a href=\"#3464\" id=\"3464\">3464</a>\n<a href=\"#3465\" id=\"3465\">3465</a>\n<a href=\"#3466\" id=\"3466\">3466</a>\n<a href=\"#3467\" id=\"3467\">3467</a>\n<a href=\"#3468\" id=\"3468\">3468</a>\n<a href=\"#3469\" id=\"3469\">3469</a>\n<a href=\"#3470\" id=\"3470\">3470</a>\n<a href=\"#3471\" id=\"3471\">3471</a>\n<a href=\"#3472\" id=\"3472\">3472</a>\n<a href=\"#3473\" id=\"3473\">3473</a>\n<a href=\"#3474\" id=\"3474\">3474</a>\n<a href=\"#3475\" id=\"3475\">3475</a>\n<a href=\"#3476\" id=\"3476\">3476</a>\n<a href=\"#3477\" id=\"3477\">3477</a>\n<a href=\"#3478\" id=\"3478\">3478</a>\n<a href=\"#3479\" id=\"3479\">3479</a>\n<a href=\"#3480\" id=\"3480\">3480</a>\n<a href=\"#3481\" id=\"3481\">3481</a>\n<a href=\"#3482\" id=\"3482\">3482</a>\n<a href=\"#3483\" id=\"3483\">3483</a>\n<a href=\"#3484\" id=\"3484\">3484</a>\n<a href=\"#3485\" id=\"3485\">3485</a>\n<a href=\"#3486\" id=\"3486\">3486</a>\n<a href=\"#3487\" id=\"3487\">3487</a>\n<a href=\"#3488\" id=\"3488\">3488</a>\n<a href=\"#3489\" id=\"3489\">3489</a>\n<a href=\"#3490\" id=\"3490\">3490</a>\n<a href=\"#3491\" id=\"3491\">3491</a>\n<a href=\"#3492\" id=\"3492\">3492</a>\n<a href=\"#3493\" id=\"3493\">3493</a>\n<a href=\"#3494\" id=\"3494\">3494</a>\n<a href=\"#3495\" id=\"3495\">3495</a>\n<a href=\"#3496\" id=\"3496\">3496</a>\n<a href=\"#3497\" id=\"3497\">3497</a>\n<a href=\"#3498\" id=\"3498\">3498</a>\n<a href=\"#3499\" id=\"3499\">3499</a>\n<a href=\"#3500\" id=\"3500\">3500</a>\n<a href=\"#3501\" id=\"3501\">3501</a>\n<a href=\"#3502\" id=\"3502\">3502</a>\n<a href=\"#3503\" id=\"3503\">3503</a>\n<a href=\"#3504\" id=\"3504\">3504</a>\n<a href=\"#3505\" id=\"3505\">3505</a>\n<a href=\"#3506\" id=\"3506\">3506</a>\n<a href=\"#3507\" id=\"3507\">3507</a>\n<a href=\"#3508\" id=\"3508\">3508</a>\n<a href=\"#3509\" id=\"3509\">3509</a>\n<a href=\"#3510\" id=\"3510\">3510</a>\n<a href=\"#3511\" id=\"3511\">3511</a>\n<a href=\"#3512\" id=\"3512\">3512</a>\n<a href=\"#3513\" id=\"3513\">3513</a>\n<a href=\"#3514\" id=\"3514\">3514</a>\n<a href=\"#3515\" id=\"3515\">3515</a>\n<a href=\"#3516\" id=\"3516\">3516</a>\n<a href=\"#3517\" id=\"3517\">3517</a>\n<a href=\"#3518\" id=\"3518\">3518</a>\n<a href=\"#3519\" id=\"3519\">3519</a>\n<a href=\"#3520\" id=\"3520\">3520</a>\n<a href=\"#3521\" id=\"3521\">3521</a>\n<a href=\"#3522\" id=\"3522\">3522</a>\n<a href=\"#3523\" id=\"3523\">3523</a>\n<a href=\"#3524\" id=\"3524\">3524</a>\n<a href=\"#3525\" id=\"3525\">3525</a>\n<a href=\"#3526\" id=\"3526\">3526</a>\n<a href=\"#3527\" id=\"3527\">3527</a>\n<a href=\"#3528\" id=\"3528\">3528</a>\n<a href=\"#3529\" id=\"3529\">3529</a>\n<a href=\"#3530\" id=\"3530\">3530</a>\n<a href=\"#3531\" id=\"3531\">3531</a>\n<a href=\"#3532\" id=\"3532\">3532</a>\n<a href=\"#3533\" id=\"3533\">3533</a>\n<a href=\"#3534\" id=\"3534\">3534</a>\n<a href=\"#3535\" id=\"3535\">3535</a>\n<a href=\"#3536\" id=\"3536\">3536</a>\n<a href=\"#3537\" id=\"3537\">3537</a>\n<a href=\"#3538\" id=\"3538\">3538</a>\n<a href=\"#3539\" id=\"3539\">3539</a>\n<a href=\"#3540\" id=\"3540\">3540</a>\n<a href=\"#3541\" id=\"3541\">3541</a>\n<a href=\"#3542\" id=\"3542\">3542</a>\n<a href=\"#3543\" id=\"3543\">3543</a>\n<a href=\"#3544\" id=\"3544\">3544</a>\n<a href=\"#3545\" id=\"3545\">3545</a>\n<a href=\"#3546\" id=\"3546\">3546</a>\n<a href=\"#3547\" id=\"3547\">3547</a>\n<a href=\"#3548\" id=\"3548\">3548</a>\n<a href=\"#3549\" id=\"3549\">3549</a>\n<a href=\"#3550\" id=\"3550\">3550</a>\n<a href=\"#3551\" id=\"3551\">3551</a>\n<a href=\"#3552\" id=\"3552\">3552</a>\n<a href=\"#3553\" id=\"3553\">3553</a>\n<a href=\"#3554\" id=\"3554\">3554</a>\n<a href=\"#3555\" id=\"3555\">3555</a>\n<a href=\"#3556\" id=\"3556\">3556</a>\n<a href=\"#3557\" id=\"3557\">3557</a>\n<a href=\"#3558\" id=\"3558\">3558</a>\n<a href=\"#3559\" id=\"3559\">3559</a>\n<a href=\"#3560\" id=\"3560\">3560</a>\n<a href=\"#3561\" id=\"3561\">3561</a>\n<a href=\"#3562\" id=\"3562\">3562</a>\n<a href=\"#3563\" id=\"3563\">3563</a>\n<a href=\"#3564\" id=\"3564\">3564</a>\n<a href=\"#3565\" id=\"3565\">3565</a>\n<a href=\"#3566\" id=\"3566\">3566</a>\n<a href=\"#3567\" id=\"3567\">3567</a>\n<a href=\"#3568\" id=\"3568\">3568</a>\n<a href=\"#3569\" id=\"3569\">3569</a>\n<a href=\"#3570\" id=\"3570\">3570</a>\n<a href=\"#3571\" id=\"3571\">3571</a>\n<a href=\"#3572\" id=\"3572\">3572</a>\n<a href=\"#3573\" id=\"3573\">3573</a>\n<a href=\"#3574\" id=\"3574\">3574</a>\n<a href=\"#3575\" id=\"3575\">3575</a>\n<a href=\"#3576\" id=\"3576\">3576</a>\n<a href=\"#3577\" id=\"3577\">3577</a>\n<a href=\"#3578\" id=\"3578\">3578</a>\n<a href=\"#3579\" id=\"3579\">3579</a>\n<a href=\"#3580\" id=\"3580\">3580</a>\n<a href=\"#3581\" id=\"3581\">3581</a>\n<a href=\"#3582\" id=\"3582\">3582</a>\n<a href=\"#3583\" id=\"3583\">3583</a>\n<a href=\"#3584\" id=\"3584\">3584</a>\n<a href=\"#3585\" id=\"3585\">3585</a>\n<a href=\"#3586\" id=\"3586\">3586</a>\n<a href=\"#3587\" id=\"3587\">3587</a>\n<a href=\"#3588\" id=\"3588\">3588</a>\n<a href=\"#3589\" id=\"3589\">3589</a>\n<a href=\"#3590\" id=\"3590\">3590</a>\n<a href=\"#3591\" id=\"3591\">3591</a>\n<a href=\"#3592\" id=\"3592\">3592</a>\n<a href=\"#3593\" id=\"3593\">3593</a>\n<a href=\"#3594\" id=\"3594\">3594</a>\n<a href=\"#3595\" id=\"3595\">3595</a>\n<a href=\"#3596\" id=\"3596\">3596</a>\n<a href=\"#3597\" id=\"3597\">3597</a>\n<a href=\"#3598\" id=\"3598\">3598</a>\n<a href=\"#3599\" id=\"3599\">3599</a>\n<a href=\"#3600\" id=\"3600\">3600</a>\n<a href=\"#3601\" id=\"3601\">3601</a>\n<a href=\"#3602\" id=\"3602\">3602</a>\n<a href=\"#3603\" id=\"3603\">3603</a>\n<a href=\"#3604\" id=\"3604\">3604</a>\n<a href=\"#3605\" id=\"3605\">3605</a>\n<a href=\"#3606\" id=\"3606\">3606</a>\n<a href=\"#3607\" id=\"3607\">3607</a>\n<a href=\"#3608\" id=\"3608\">3608</a>\n<a href=\"#3609\" id=\"3609\">3609</a>\n<a href=\"#3610\" id=\"3610\">3610</a>\n<a href=\"#3611\" id=\"3611\">3611</a>\n<a href=\"#3612\" id=\"3612\">3612</a>\n<a href=\"#3613\" id=\"3613\">3613</a>\n<a href=\"#3614\" id=\"3614\">3614</a>\n<a href=\"#3615\" id=\"3615\">3615</a>\n<a href=\"#3616\" id=\"3616\">3616</a>\n<a href=\"#3617\" id=\"3617\">3617</a>\n<a href=\"#3618\" id=\"3618\">3618</a>\n<a href=\"#3619\" id=\"3619\">3619</a>\n<a href=\"#3620\" id=\"3620\">3620</a>\n<a href=\"#3621\" id=\"3621\">3621</a>\n<a href=\"#3622\" id=\"3622\">3622</a>\n<a href=\"#3623\" id=\"3623\">3623</a>\n<a href=\"#3624\" id=\"3624\">3624</a>\n<a href=\"#3625\" id=\"3625\">3625</a>\n<a href=\"#3626\" id=\"3626\">3626</a>\n<a href=\"#3627\" id=\"3627\">3627</a>\n<a href=\"#3628\" id=\"3628\">3628</a>\n<a href=\"#3629\" id=\"3629\">3629</a>\n<a href=\"#3630\" id=\"3630\">3630</a>\n<a href=\"#3631\" id=\"3631\">3631</a>\n<a href=\"#3632\" id=\"3632\">3632</a>\n<a href=\"#3633\" id=\"3633\">3633</a>\n<a href=\"#3634\" id=\"3634\">3634</a>\n<a href=\"#3635\" id=\"3635\">3635</a>\n<a href=\"#3636\" id=\"3636\">3636</a>\n<a href=\"#3637\" id=\"3637\">3637</a>\n<a href=\"#3638\" id=\"3638\">3638</a>\n<a href=\"#3639\" id=\"3639\">3639</a>\n<a href=\"#3640\" id=\"3640\">3640</a>\n<a href=\"#3641\" id=\"3641\">3641</a>\n<a href=\"#3642\" id=\"3642\">3642</a>\n<a href=\"#3643\" id=\"3643\">3643</a>\n<a href=\"#3644\" id=\"3644\">3644</a>\n<a href=\"#3645\" id=\"3645\">3645</a>\n<a href=\"#3646\" id=\"3646\">3646</a>\n<a href=\"#3647\" id=\"3647\">3647</a>\n<a href=\"#3648\" id=\"3648\">3648</a>\n<a href=\"#3649\" id=\"3649\">3649</a>\n<a href=\"#3650\" id=\"3650\">3650</a>\n<a href=\"#3651\" id=\"3651\">3651</a>\n<a href=\"#3652\" id=\"3652\">3652</a>\n<a href=\"#3653\" id=\"3653\">3653</a>\n<a href=\"#3654\" id=\"3654\">3654</a>\n<a href=\"#3655\" id=\"3655\">3655</a>\n<a href=\"#3656\" id=\"3656\">3656</a>\n<a href=\"#3657\" id=\"3657\">3657</a>\n<a href=\"#3658\" id=\"3658\">3658</a>\n<a href=\"#3659\" id=\"3659\">3659</a>\n<a href=\"#3660\" id=\"3660\">3660</a>\n<a href=\"#3661\" id=\"3661\">3661</a>\n<a href=\"#3662\" id=\"3662\">3662</a>\n<a href=\"#3663\" id=\"3663\">3663</a>\n<a href=\"#3664\" id=\"3664\">3664</a>\n<a href=\"#3665\" id=\"3665\">3665</a>\n<a href=\"#3666\" id=\"3666\">3666</a>\n<a href=\"#3667\" id=\"3667\">3667</a>\n<a href=\"#3668\" id=\"3668\">3668</a>\n<a href=\"#3669\" id=\"3669\">3669</a>\n<a href=\"#3670\" id=\"3670\">3670</a>\n<a href=\"#3671\" id=\"3671\">3671</a>\n<a href=\"#3672\" id=\"3672\">3672</a>\n<a href=\"#3673\" id=\"3673\">3673</a>\n<a href=\"#3674\" id=\"3674\">3674</a>\n<a href=\"#3675\" id=\"3675\">3675</a>\n<a href=\"#3676\" id=\"3676\">3676</a>\n<a href=\"#3677\" id=\"3677\">3677</a>\n<a href=\"#3678\" id=\"3678\">3678</a>\n<a href=\"#3679\" id=\"3679\">3679</a>\n<a href=\"#3680\" id=\"3680\">3680</a>\n<a href=\"#3681\" id=\"3681\">3681</a>\n<a href=\"#3682\" id=\"3682\">3682</a>\n<a href=\"#3683\" id=\"3683\">3683</a>\n<a href=\"#3684\" id=\"3684\">3684</a>\n<a href=\"#3685\" id=\"3685\">3685</a>\n<a href=\"#3686\" id=\"3686\">3686</a>\n<a href=\"#3687\" id=\"3687\">3687</a>\n<a href=\"#3688\" id=\"3688\">3688</a>\n<a href=\"#3689\" id=\"3689\">3689</a>\n<a href=\"#3690\" id=\"3690\">3690</a>\n<a href=\"#3691\" id=\"3691\">3691</a>\n<a href=\"#3692\" id=\"3692\">3692</a>\n<a href=\"#3693\" id=\"3693\">3693</a>\n<a href=\"#3694\" id=\"3694\">3694</a>\n<a href=\"#3695\" id=\"3695\">3695</a>\n<a href=\"#3696\" id=\"3696\">3696</a>\n<a href=\"#3697\" id=\"3697\">3697</a>\n<a href=\"#3698\" id=\"3698\">3698</a>\n<a href=\"#3699\" id=\"3699\">3699</a>\n<a href=\"#3700\" id=\"3700\">3700</a>\n<a href=\"#3701\" id=\"3701\">3701</a>\n<a href=\"#3702\" id=\"3702\">3702</a>\n<a href=\"#3703\" id=\"3703\">3703</a>\n<a href=\"#3704\" id=\"3704\">3704</a>\n<a href=\"#3705\" id=\"3705\">3705</a>\n<a href=\"#3706\" id=\"3706\">3706</a>\n<a href=\"#3707\" id=\"3707\">3707</a>\n<a href=\"#3708\" id=\"3708\">3708</a>\n<a href=\"#3709\" id=\"3709\">3709</a>\n<a href=\"#3710\" id=\"3710\">3710</a>\n<a href=\"#3711\" id=\"3711\">3711</a>\n<a href=\"#3712\" id=\"3712\">3712</a>\n<a href=\"#3713\" id=\"3713\">3713</a>\n<a href=\"#3714\" id=\"3714\">3714</a>\n<a href=\"#3715\" id=\"3715\">3715</a>\n<a href=\"#3716\" id=\"3716\">3716</a>\n<a href=\"#3717\" id=\"3717\">3717</a>\n<a href=\"#3718\" id=\"3718\">3718</a>\n<a href=\"#3719\" id=\"3719\">3719</a>\n<a href=\"#3720\" id=\"3720\">3720</a>\n<a href=\"#3721\" id=\"3721\">3721</a>\n<a href=\"#3722\" id=\"3722\">3722</a>\n<a href=\"#3723\" id=\"3723\">3723</a>\n<a href=\"#3724\" id=\"3724\">3724</a>\n<a href=\"#3725\" id=\"3725\">3725</a>\n<a href=\"#3726\" id=\"3726\">3726</a>\n<a href=\"#3727\" id=\"3727\">3727</a>\n<a href=\"#3728\" id=\"3728\">3728</a>\n<a href=\"#3729\" id=\"3729\">3729</a>\n<a href=\"#3730\" id=\"3730\">3730</a>\n<a href=\"#3731\" id=\"3731\">3731</a>\n<a href=\"#3732\" id=\"3732\">3732</a>\n<a href=\"#3733\" id=\"3733\">3733</a>\n<a href=\"#3734\" id=\"3734\">3734</a>\n<a href=\"#3735\" id=\"3735\">3735</a>\n<a href=\"#3736\" id=\"3736\">3736</a>\n<a href=\"#3737\" id=\"3737\">3737</a>\n<a href=\"#3738\" id=\"3738\">3738</a>\n<a href=\"#3739\" id=\"3739\">3739</a>\n<a href=\"#3740\" id=\"3740\">3740</a>\n<a href=\"#3741\" id=\"3741\">3741</a>\n<a href=\"#3742\" id=\"3742\">3742</a>\n<a href=\"#3743\" id=\"3743\">3743</a>\n<a href=\"#3744\" id=\"3744\">3744</a>\n<a href=\"#3745\" id=\"3745\">3745</a>\n<a href=\"#3746\" id=\"3746\">3746</a>\n<a href=\"#3747\" id=\"3747\">3747</a>\n<a href=\"#3748\" id=\"3748\">3748</a>\n<a href=\"#3749\" id=\"3749\">3749</a>\n<a href=\"#3750\" id=\"3750\">3750</a>\n<a href=\"#3751\" id=\"3751\">3751</a>\n<a href=\"#3752\" id=\"3752\">3752</a>\n<a href=\"#3753\" id=\"3753\">3753</a>\n<a href=\"#3754\" id=\"3754\">3754</a>\n<a href=\"#3755\" id=\"3755\">3755</a>\n<a href=\"#3756\" id=\"3756\">3756</a>\n<a href=\"#3757\" id=\"3757\">3757</a>\n<a href=\"#3758\" id=\"3758\">3758</a>\n<a href=\"#3759\" id=\"3759\">3759</a>\n<a href=\"#3760\" id=\"3760\">3760</a>\n<a href=\"#3761\" id=\"3761\">3761</a>\n<a href=\"#3762\" id=\"3762\">3762</a>\n<a href=\"#3763\" id=\"3763\">3763</a>\n<a href=\"#3764\" id=\"3764\">3764</a>\n<a href=\"#3765\" id=\"3765\">3765</a>\n<a href=\"#3766\" id=\"3766\">3766</a>\n<a href=\"#3767\" id=\"3767\">3767</a>\n<a href=\"#3768\" id=\"3768\">3768</a>\n<a href=\"#3769\" id=\"3769\">3769</a>\n<a href=\"#3770\" id=\"3770\">3770</a>\n<a href=\"#3771\" id=\"3771\">3771</a>\n<a href=\"#3772\" id=\"3772\">3772</a>\n<a href=\"#3773\" id=\"3773\">3773</a>\n<a href=\"#3774\" id=\"3774\">3774</a>\n<a href=\"#3775\" id=\"3775\">3775</a>\n<a href=\"#3776\" id=\"3776\">3776</a>\n<a href=\"#3777\" id=\"3777\">3777</a>\n<a href=\"#3778\" id=\"3778\">3778</a>\n<a href=\"#3779\" id=\"3779\">3779</a>\n<a href=\"#3780\" id=\"3780\">3780</a>\n<a href=\"#3781\" id=\"3781\">3781</a>\n<a href=\"#3782\" id=\"3782\">3782</a>\n<a href=\"#3783\" id=\"3783\">3783</a>\n<a href=\"#3784\" id=\"3784\">3784</a>\n<a href=\"#3785\" id=\"3785\">3785</a>\n<a href=\"#3786\" id=\"3786\">3786</a>\n<a href=\"#3787\" id=\"3787\">3787</a>\n<a href=\"#3788\" id=\"3788\">3788</a>\n<a href=\"#3789\" id=\"3789\">3789</a>\n<a href=\"#3790\" id=\"3790\">3790</a>\n<a href=\"#3791\" id=\"3791\">3791</a>\n<a href=\"#3792\" id=\"3792\">3792</a>\n<a href=\"#3793\" id=\"3793\">3793</a>\n<a href=\"#3794\" id=\"3794\">3794</a>\n<a href=\"#3795\" id=\"3795\">3795</a>\n<a href=\"#3796\" id=\"3796\">3796</a>\n<a href=\"#3797\" id=\"3797\">3797</a>\n<a href=\"#3798\" id=\"3798\">3798</a>\n<a href=\"#3799\" id=\"3799\">3799</a>\n<a href=\"#3800\" id=\"3800\">3800</a>\n<a href=\"#3801\" id=\"3801\">3801</a>\n<a href=\"#3802\" id=\"3802\">3802</a>\n<a href=\"#3803\" id=\"3803\">3803</a>\n<a href=\"#3804\" id=\"3804\">3804</a>\n<a href=\"#3805\" id=\"3805\">3805</a>\n<a href=\"#3806\" id=\"3806\">3806</a>\n<a href=\"#3807\" id=\"3807\">3807</a>\n<a href=\"#3808\" id=\"3808\">3808</a>\n<a href=\"#3809\" id=\"3809\">3809</a>\n<a href=\"#3810\" id=\"3810\">3810</a>\n<a href=\"#3811\" id=\"3811\">3811</a>\n<a href=\"#3812\" id=\"3812\">3812</a>\n<a href=\"#3813\" id=\"3813\">3813</a>\n<a href=\"#3814\" id=\"3814\">3814</a>\n<a href=\"#3815\" id=\"3815\">3815</a>\n<a href=\"#3816\" id=\"3816\">3816</a>\n<a href=\"#3817\" id=\"3817\">3817</a>\n<a href=\"#3818\" id=\"3818\">3818</a>\n<a href=\"#3819\" id=\"3819\">3819</a>\n<a href=\"#3820\" id=\"3820\">3820</a>\n<a href=\"#3821\" id=\"3821\">3821</a>\n<a href=\"#3822\" id=\"3822\">3822</a>\n<a href=\"#3823\" id=\"3823\">3823</a>\n<a href=\"#3824\" id=\"3824\">3824</a>\n<a href=\"#3825\" id=\"3825\">3825</a>\n<a href=\"#3826\" id=\"3826\">3826</a>\n<a href=\"#3827\" id=\"3827\">3827</a>\n<a href=\"#3828\" id=\"3828\">3828</a>\n<a href=\"#3829\" id=\"3829\">3829</a>\n<a href=\"#3830\" id=\"3830\">3830</a>\n<a href=\"#3831\" id=\"3831\">3831</a>\n<a href=\"#3832\" id=\"3832\">3832</a>\n<a href=\"#3833\" id=\"3833\">3833</a>\n<a href=\"#3834\" id=\"3834\">3834</a>\n<a href=\"#3835\" id=\"3835\">3835</a>\n<a href=\"#3836\" id=\"3836\">3836</a>\n<a href=\"#3837\" id=\"3837\">3837</a>\n<a href=\"#3838\" id=\"3838\">3838</a>\n<a href=\"#3839\" id=\"3839\">3839</a>\n<a href=\"#3840\" id=\"3840\">3840</a>\n<a href=\"#3841\" id=\"3841\">3841</a>\n<a href=\"#3842\" id=\"3842\">3842</a>\n<a href=\"#3843\" id=\"3843\">3843</a>\n<a href=\"#3844\" id=\"3844\">3844</a>\n<a href=\"#3845\" id=\"3845\">3845</a>\n<a href=\"#3846\" id=\"3846\">3846</a>\n<a href=\"#3847\" id=\"3847\">3847</a>\n<a href=\"#3848\" id=\"3848\">3848</a>\n<a href=\"#3849\" id=\"3849\">3849</a>\n<a href=\"#3850\" id=\"3850\">3850</a>\n<a href=\"#3851\" id=\"3851\">3851</a>\n<a href=\"#3852\" id=\"3852\">3852</a>\n<a href=\"#3853\" id=\"3853\">3853</a>\n<a href=\"#3854\" id=\"3854\">3854</a>\n<a href=\"#3855\" id=\"3855\">3855</a>\n<a href=\"#3856\" id=\"3856\">3856</a>\n<a href=\"#3857\" id=\"3857\">3857</a>\n<a href=\"#3858\" id=\"3858\">3858</a>\n<a href=\"#3859\" id=\"3859\">3859</a>\n<a href=\"#3860\" id=\"3860\">3860</a>\n<a href=\"#3861\" id=\"3861\">3861</a>\n<a href=\"#3862\" id=\"3862\">3862</a>\n<a href=\"#3863\" id=\"3863\">3863</a>\n<a href=\"#3864\" id=\"3864\">3864</a>\n<a href=\"#3865\" id=\"3865\">3865</a>\n<a href=\"#3866\" id=\"3866\">3866</a>\n<a href=\"#3867\" id=\"3867\">3867</a>\n<a href=\"#3868\" id=\"3868\">3868</a>\n<a href=\"#3869\" id=\"3869\">3869</a>\n<a href=\"#3870\" id=\"3870\">3870</a>\n<a href=\"#3871\" id=\"3871\">3871</a>\n<a href=\"#3872\" id=\"3872\">3872</a>\n<a href=\"#3873\" id=\"3873\">3873</a>\n<a href=\"#3874\" id=\"3874\">3874</a>\n<a href=\"#3875\" id=\"3875\">3875</a>\n<a href=\"#3876\" id=\"3876\">3876</a>\n<a href=\"#3877\" id=\"3877\">3877</a>\n<a href=\"#3878\" id=\"3878\">3878</a>\n<a href=\"#3879\" id=\"3879\">3879</a>\n<a href=\"#3880\" id=\"3880\">3880</a>\n<a href=\"#3881\" id=\"3881\">3881</a>\n<a href=\"#3882\" id=\"3882\">3882</a>\n<a href=\"#3883\" id=\"3883\">3883</a>\n<a href=\"#3884\" id=\"3884\">3884</a>\n<a href=\"#3885\" id=\"3885\">3885</a>\n<a href=\"#3886\" id=\"3886\">3886</a>\n<a href=\"#3887\" id=\"3887\">3887</a>\n<a href=\"#3888\" id=\"3888\">3888</a>\n<a href=\"#3889\" id=\"3889\">3889</a>\n<a href=\"#3890\" id=\"3890\">3890</a>\n<a href=\"#3891\" id=\"3891\">3891</a>\n<a href=\"#3892\" id=\"3892\">3892</a>\n<a href=\"#3893\" id=\"3893\">3893</a>\n<a href=\"#3894\" id=\"3894\">3894</a>\n<a href=\"#3895\" id=\"3895\">3895</a>\n<a href=\"#3896\" id=\"3896\">3896</a>\n<a href=\"#3897\" id=\"3897\">3897</a>\n<a href=\"#3898\" id=\"3898\">3898</a>\n<a href=\"#3899\" id=\"3899\">3899</a>\n<a href=\"#3900\" id=\"3900\">3900</a>\n<a href=\"#3901\" id=\"3901\">3901</a>\n<a href=\"#3902\" id=\"3902\">3902</a>\n<a href=\"#3903\" id=\"3903\">3903</a>\n<a href=\"#3904\" id=\"3904\">3904</a>\n<a href=\"#3905\" id=\"3905\">3905</a>\n<a href=\"#3906\" id=\"3906\">3906</a>\n<a href=\"#3907\" id=\"3907\">3907</a>\n<a href=\"#3908\" id=\"3908\">3908</a>\n<a href=\"#3909\" id=\"3909\">3909</a>\n<a href=\"#3910\" id=\"3910\">3910</a>\n<a href=\"#3911\" id=\"3911\">3911</a>\n<a href=\"#3912\" id=\"3912\">3912</a>\n<a href=\"#3913\" id=\"3913\">3913</a>\n<a href=\"#3914\" id=\"3914\">3914</a>\n<a href=\"#3915\" id=\"3915\">3915</a>\n<a href=\"#3916\" id=\"3916\">3916</a>\n<a href=\"#3917\" id=\"3917\">3917</a>\n<a href=\"#3918\" id=\"3918\">3918</a>\n<a href=\"#3919\" id=\"3919\">3919</a>\n<a href=\"#3920\" id=\"3920\">3920</a>\n<a href=\"#3921\" id=\"3921\">3921</a>\n<a href=\"#3922\" id=\"3922\">3922</a>\n<a href=\"#3923\" id=\"3923\">3923</a>\n<a href=\"#3924\" id=\"3924\">3924</a>\n<a href=\"#3925\" id=\"3925\">3925</a>\n<a href=\"#3926\" id=\"3926\">3926</a>\n<a href=\"#3927\" id=\"3927\">3927</a>\n<a href=\"#3928\" id=\"3928\">3928</a>\n<a href=\"#3929\" id=\"3929\">3929</a>\n<a href=\"#3930\" id=\"3930\">3930</a>\n<a href=\"#3931\" id=\"3931\">3931</a>\n<a href=\"#3932\" id=\"3932\">3932</a>\n<a href=\"#3933\" id=\"3933\">3933</a>\n<a href=\"#3934\" id=\"3934\">3934</a>\n<a href=\"#3935\" id=\"3935\">3935</a>\n<a href=\"#3936\" id=\"3936\">3936</a>\n<a href=\"#3937\" id=\"3937\">3937</a>\n<a href=\"#3938\" id=\"3938\">3938</a>\n<a href=\"#3939\" id=\"3939\">3939</a>\n<a href=\"#3940\" id=\"3940\">3940</a>\n<a href=\"#3941\" id=\"3941\">3941</a>\n<a href=\"#3942\" id=\"3942\">3942</a>\n<a href=\"#3943\" id=\"3943\">3943</a>\n<a href=\"#3944\" id=\"3944\">3944</a>\n<a href=\"#3945\" id=\"3945\">3945</a>\n<a href=\"#3946\" id=\"3946\">3946</a>\n<a href=\"#3947\" id=\"3947\">3947</a>\n<a href=\"#3948\" id=\"3948\">3948</a>\n<a href=\"#3949\" id=\"3949\">3949</a>\n<a href=\"#3950\" id=\"3950\">3950</a>\n<a href=\"#3951\" id=\"3951\">3951</a>\n<a href=\"#3952\" id=\"3952\">3952</a>\n<a href=\"#3953\" id=\"3953\">3953</a>\n<a href=\"#3954\" id=\"3954\">3954</a>\n<a href=\"#3955\" id=\"3955\">3955</a>\n<a href=\"#3956\" id=\"3956\">3956</a>\n<a href=\"#3957\" id=\"3957\">3957</a>\n<a href=\"#3958\" id=\"3958\">3958</a>\n<a href=\"#3959\" id=\"3959\">3959</a>\n<a href=\"#3960\" id=\"3960\">3960</a>\n<a href=\"#3961\" id=\"3961\">3961</a>\n<a href=\"#3962\" id=\"3962\">3962</a>\n<a href=\"#3963\" id=\"3963\">3963</a>\n<a href=\"#3964\" id=\"3964\">3964</a>\n<a href=\"#3965\" id=\"3965\">3965</a>\n<a href=\"#3966\" id=\"3966\">3966</a>\n<a href=\"#3967\" id=\"3967\">3967</a>\n<a href=\"#3968\" id=\"3968\">3968</a>\n<a href=\"#3969\" id=\"3969\">3969</a>\n<a href=\"#3970\" id=\"3970\">3970</a>\n<a href=\"#3971\" id=\"3971\">3971</a>\n<a href=\"#3972\" id=\"3972\">3972</a>\n<a href=\"#3973\" id=\"3973\">3973</a>\n<a href=\"#3974\" id=\"3974\">3974</a>\n<a href=\"#3975\" id=\"3975\">3975</a>\n<a href=\"#3976\" id=\"3976\">3976</a>\n<a href=\"#3977\" id=\"3977\">3977</a>\n<a href=\"#3978\" id=\"3978\">3978</a>\n<a href=\"#3979\" id=\"3979\">3979</a>\n<a href=\"#3980\" id=\"3980\">3980</a>\n<a href=\"#3981\" id=\"3981\">3981</a>\n<a href=\"#3982\" id=\"3982\">3982</a>\n<a href=\"#3983\" id=\"3983\">3983</a>\n<a href=\"#3984\" id=\"3984\">3984</a>\n<a href=\"#3985\" id=\"3985\">3985</a>\n<a href=\"#3986\" id=\"3986\">3986</a>\n<a href=\"#3987\" id=\"3987\">3987</a>\n<a href=\"#3988\" id=\"3988\">3988</a>\n<a href=\"#3989\" id=\"3989\">3989</a>\n<a href=\"#3990\" id=\"3990\">3990</a>\n<a href=\"#3991\" id=\"3991\">3991</a>\n<a href=\"#3992\" id=\"3992\">3992</a>\n<a href=\"#3993\" id=\"3993\">3993</a>\n<a href=\"#3994\" id=\"3994\">3994</a>\n<a href=\"#3995\" id=\"3995\">3995</a>\n<a href=\"#3996\" id=\"3996\">3996</a>\n<a href=\"#3997\" id=\"3997\">3997</a>\n<a href=\"#3998\" id=\"3998\">3998</a>\n<a href=\"#3999\" id=\"3999\">3999</a>\n<a href=\"#4000\" id=\"4000\">4000</a>\n<a href=\"#4001\" id=\"4001\">4001</a>\n<a href=\"#4002\" id=\"4002\">4002</a>\n<a href=\"#4003\" id=\"4003\">4003</a>\n<a href=\"#4004\" id=\"4004\">4004</a>\n<a href=\"#4005\" id=\"4005\">4005</a>\n<a href=\"#4006\" id=\"4006\">4006</a>\n<a href=\"#4007\" id=\"4007\">4007</a>\n<a href=\"#4008\" id=\"4008\">4008</a>\n<a href=\"#4009\" id=\"4009\">4009</a>\n<a href=\"#4010\" id=\"4010\">4010</a>\n<a href=\"#4011\" id=\"4011\">4011</a>\n<a href=\"#4012\" id=\"4012\">4012</a>\n<a href=\"#4013\" id=\"4013\">4013</a>\n<a href=\"#4014\" id=\"4014\">4014</a>\n<a href=\"#4015\" id=\"4015\">4015</a>\n<a href=\"#4016\" id=\"4016\">4016</a>\n<a href=\"#4017\" id=\"4017\">4017</a>\n<a href=\"#4018\" id=\"4018\">4018</a>\n<a href=\"#4019\" id=\"4019\">4019</a>\n<a href=\"#4020\" id=\"4020\">4020</a>\n<a href=\"#4021\" id=\"4021\">4021</a>\n<a href=\"#4022\" id=\"4022\">4022</a>\n<a href=\"#4023\" id=\"4023\">4023</a>\n<a href=\"#4024\" id=\"4024\">4024</a>\n<a href=\"#4025\" id=\"4025\">4025</a>\n<a href=\"#4026\" id=\"4026\">4026</a>\n<a href=\"#4027\" id=\"4027\">4027</a>\n<a href=\"#4028\" id=\"4028\">4028</a>\n<a href=\"#4029\" id=\"4029\">4029</a>\n<a href=\"#4030\" id=\"4030\">4030</a>\n<a href=\"#4031\" id=\"4031\">4031</a>\n<a href=\"#4032\" id=\"4032\">4032</a>\n<a href=\"#4033\" id=\"4033\">4033</a>\n<a href=\"#4034\" id=\"4034\">4034</a>\n<a href=\"#4035\" id=\"4035\">4035</a>\n<a href=\"#4036\" id=\"4036\">4036</a>\n<a href=\"#4037\" id=\"4037\">4037</a>\n<a href=\"#4038\" id=\"4038\">4038</a>\n<a href=\"#4039\" id=\"4039\">4039</a>\n<a href=\"#4040\" id=\"4040\">4040</a>\n<a href=\"#4041\" id=\"4041\">4041</a>\n<a href=\"#4042\" id=\"4042\">4042</a>\n<a href=\"#4043\" id=\"4043\">4043</a>\n<a href=\"#4044\" id=\"4044\">4044</a>\n<a href=\"#4045\" id=\"4045\">4045</a>\n<a href=\"#4046\" id=\"4046\">4046</a>\n<a href=\"#4047\" id=\"4047\">4047</a>\n<a href=\"#4048\" id=\"4048\">4048</a>\n<a href=\"#4049\" id=\"4049\">4049</a>\n<a href=\"#4050\" id=\"4050\">4050</a>\n<a href=\"#4051\" id=\"4051\">4051</a>\n<a href=\"#4052\" id=\"4052\">4052</a>\n<a href=\"#4053\" id=\"4053\">4053</a>\n<a href=\"#4054\" id=\"4054\">4054</a>\n<a href=\"#4055\" id=\"4055\">4055</a>\n<a href=\"#4056\" id=\"4056\">4056</a>\n<a href=\"#4057\" id=\"4057\">4057</a>\n<a href=\"#4058\" id=\"4058\">4058</a>\n<a href=\"#4059\" id=\"4059\">4059</a>\n<a href=\"#4060\" id=\"4060\">4060</a>\n<a href=\"#4061\" id=\"4061\">4061</a>\n<a href=\"#4062\" id=\"4062\">4062</a>\n<a href=\"#4063\" id=\"4063\">4063</a>\n<a href=\"#4064\" id=\"4064\">4064</a>\n<a href=\"#4065\" id=\"4065\">4065</a>\n<a href=\"#4066\" id=\"4066\">4066</a>\n<a href=\"#4067\" id=\"4067\">4067</a>\n<a href=\"#4068\" id=\"4068\">4068</a>\n<a href=\"#4069\" id=\"4069\">4069</a>\n<a href=\"#4070\" id=\"4070\">4070</a>\n<a href=\"#4071\" id=\"4071\">4071</a>\n<a href=\"#4072\" id=\"4072\">4072</a>\n<a href=\"#4073\" id=\"4073\">4073</a>\n<a href=\"#4074\" id=\"4074\">4074</a>\n<a href=\"#4075\" id=\"4075\">4075</a>\n<a href=\"#4076\" id=\"4076\">4076</a>\n<a href=\"#4077\" id=\"4077\">4077</a>\n<a href=\"#4078\" id=\"4078\">4078</a>\n<a href=\"#4079\" id=\"4079\">4079</a>\n<a href=\"#4080\" id=\"4080\">4080</a>\n<a href=\"#4081\" id=\"4081\">4081</a>\n<a href=\"#4082\" id=\"4082\">4082</a>\n<a href=\"#4083\" id=\"4083\">4083</a>\n<a href=\"#4084\" id=\"4084\">4084</a>\n<a href=\"#4085\" id=\"4085\">4085</a>\n<a href=\"#4086\" id=\"4086\">4086</a>\n<a href=\"#4087\" id=\"4087\">4087</a>\n<a href=\"#4088\" id=\"4088\">4088</a>\n<a href=\"#4089\" id=\"4089\">4089</a>\n<a href=\"#4090\" id=\"4090\">4090</a>\n<a href=\"#4091\" id=\"4091\">4091</a>\n<a href=\"#4092\" id=\"4092\">4092</a>\n<a href=\"#4093\" id=\"4093\">4093</a>\n<a href=\"#4094\" id=\"4094\">4094</a>\n<a href=\"#4095\" id=\"4095\">4095</a>\n<a href=\"#4096\" id=\"4096\">4096</a>\n<a href=\"#4097\" id=\"4097\">4097</a>\n<a href=\"#4098\" id=\"4098\">4098</a>\n<a href=\"#4099\" id=\"4099\">4099</a>\n<a href=\"#4100\" id=\"4100\">4100</a>\n<a href=\"#4101\" id=\"4101\">4101</a>\n<a href=\"#4102\" id=\"4102\">4102</a>\n<a href=\"#4103\" id=\"4103\">4103</a>\n<a href=\"#4104\" id=\"4104\">4104</a>\n<a href=\"#4105\" id=\"4105\">4105</a>\n<a href=\"#4106\" id=\"4106\">4106</a>\n<a href=\"#4107\" id=\"4107\">4107</a>\n<a href=\"#4108\" id=\"4108\">4108</a>\n<a href=\"#4109\" id=\"4109\">4109</a>\n<a href=\"#4110\" id=\"4110\">4110</a>\n<a href=\"#4111\" id=\"4111\">4111</a>\n<a href=\"#4112\" id=\"4112\">4112</a>\n<a href=\"#4113\" id=\"4113\">4113</a>\n<a href=\"#4114\" id=\"4114\">4114</a>\n<a href=\"#4115\" id=\"4115\">4115</a>\n<a href=\"#4116\" id=\"4116\">4116</a>\n<a href=\"#4117\" id=\"4117\">4117</a>\n<a href=\"#4118\" id=\"4118\">4118</a>\n<a href=\"#4119\" id=\"4119\">4119</a>\n<a href=\"#4120\" id=\"4120\">4120</a>\n<a href=\"#4121\" id=\"4121\">4121</a>\n<a href=\"#4122\" id=\"4122\">4122</a>\n<a href=\"#4123\" id=\"4123\">4123</a>\n<a href=\"#4124\" id=\"4124\">4124</a>\n<a href=\"#4125\" id=\"4125\">4125</a>\n<a href=\"#4126\" id=\"4126\">4126</a>\n<a href=\"#4127\" id=\"4127\">4127</a>\n<a href=\"#4128\" id=\"4128\">4128</a>\n<a href=\"#4129\" id=\"4129\">4129</a>\n<a href=\"#4130\" id=\"4130\">4130</a>\n<a href=\"#4131\" id=\"4131\">4131</a>\n<a href=\"#4132\" id=\"4132\">4132</a>\n<a href=\"#4133\" id=\"4133\">4133</a>\n<a href=\"#4134\" id=\"4134\">4134</a>\n<a href=\"#4135\" id=\"4135\">4135</a>\n<a href=\"#4136\" id=\"4136\">4136</a>\n<a href=\"#4137\" id=\"4137\">4137</a>\n<a href=\"#4138\" id=\"4138\">4138</a>\n<a href=\"#4139\" id=\"4139\">4139</a>\n<a href=\"#4140\" id=\"4140\">4140</a>\n<a href=\"#4141\" id=\"4141\">4141</a>\n<a href=\"#4142\" id=\"4142\">4142</a>\n<a href=\"#4143\" id=\"4143\">4143</a>\n<a href=\"#4144\" id=\"4144\">4144</a>\n<a href=\"#4145\" id=\"4145\">4145</a>\n<a href=\"#4146\" id=\"4146\">4146</a>\n<a href=\"#4147\" id=\"4147\">4147</a>\n<a href=\"#4148\" id=\"4148\">4148</a>\n<a href=\"#4149\" id=\"4149\">4149</a>\n<a href=\"#4150\" id=\"4150\">4150</a>\n<a href=\"#4151\" id=\"4151\">4151</a>\n<a href=\"#4152\" id=\"4152\">4152</a>\n<a href=\"#4153\" id=\"4153\">4153</a>\n<a href=\"#4154\" id=\"4154\">4154</a>\n<a href=\"#4155\" id=\"4155\">4155</a>\n<a href=\"#4156\" id=\"4156\">4156</a>\n<a href=\"#4157\" id=\"4157\">4157</a>\n<a href=\"#4158\" id=\"4158\">4158</a>\n<a href=\"#4159\" id=\"4159\">4159</a>\n<a href=\"#4160\" id=\"4160\">4160</a>\n<a href=\"#4161\" id=\"4161\">4161</a>\n<a href=\"#4162\" id=\"4162\">4162</a>\n<a href=\"#4163\" id=\"4163\">4163</a>\n<a href=\"#4164\" id=\"4164\">4164</a>\n<a href=\"#4165\" id=\"4165\">4165</a>\n<a href=\"#4166\" id=\"4166\">4166</a>\n<a href=\"#4167\" id=\"4167\">4167</a>\n<a href=\"#4168\" id=\"4168\">4168</a>\n<a href=\"#4169\" id=\"4169\">4169</a>\n<a href=\"#4170\" id=\"4170\">4170</a>\n<a href=\"#4171\" id=\"4171\">4171</a>\n<a href=\"#4172\" id=\"4172\">4172</a>\n<a href=\"#4173\" id=\"4173\">4173</a>\n<a href=\"#4174\" id=\"4174\">4174</a>\n<a href=\"#4175\" id=\"4175\">4175</a>\n<a href=\"#4176\" id=\"4176\">4176</a>\n<a href=\"#4177\" id=\"4177\">4177</a>\n<a href=\"#4178\" id=\"4178\">4178</a>\n<a href=\"#4179\" id=\"4179\">4179</a>\n<a href=\"#4180\" id=\"4180\">4180</a>\n<a href=\"#4181\" id=\"4181\">4181</a>\n<a href=\"#4182\" id=\"4182\">4182</a>\n</pre></div><pre class=\"rust\"><code><span class=\"kw\">use </span><span class=\"kw\">crate</span>::array;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::cmp::{<span class=\"self\">self</span>, Ordering};\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::num::NonZero;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::ops::{ChangeOutputType, ControlFlow, FromResidual, Residual, Try};\n\n<span class=\"kw\">use </span><span class=\"kw\">super</span>::<span class=\"kw\">super</span>::try_process;\n<span class=\"kw\">use </span><span class=\"kw\">super</span>::<span class=\"kw\">super</span>::ByRefSized;\n<span class=\"kw\">use </span><span class=\"kw\">super</span>::<span class=\"kw\">super</span>::TrustedRandomAccessNoCoerce;\n<span class=\"kw\">use </span><span class=\"kw\">super</span>::<span class=\"kw\">super</span>::{ArrayChunks, Chain, Cloned, Copied, Cycle, Enumerate, Filter, FilterMap, Fuse};\n<span class=\"kw\">use </span><span class=\"kw\">super</span>::<span class=\"kw\">super</span>::{FlatMap, Flatten};\n<span class=\"kw\">use </span><span class=\"kw\">super</span>::<span class=\"kw\">super</span>::{\n    Inspect, Map, MapWhile, MapWindows, Peekable, Rev, Scan, Skip, SkipWhile, StepBy, Take,\n    TakeWhile,\n};\n<span class=\"kw\">use </span><span class=\"kw\">super</span>::<span class=\"kw\">super</span>::{Intersperse, IntersperseWith, Product, Sum, Zip};\n\n<span class=\"kw\">fn </span>_assert_is_object_safe(<span class=\"kw\">_</span>: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Iterator&lt;Item = ()&gt;) {}\n\n<span class=\"doccomment\">/// A trait for dealing with iterators.\n///\n/// This is the main iterator trait. For more about the concept of iterators\n/// generally, please see the [module-level documentation]. In particular, you\n/// may want to know how to [implement `Iterator`][impl].\n///\n/// [module-level documentation]: crate::iter\n/// [impl]: crate::iter#implementing-iterator\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[rustc_on_unimplemented(\n    on(\n        _Self = <span class=\"string\">\"core::ops::range::RangeTo&lt;Idx&gt;\"</span>,\n        note = <span class=\"string\">\"you might have meant to use a bounded `Range`\"\n    </span>),\n    on(\n        _Self = <span class=\"string\">\"core::ops::range::RangeToInclusive&lt;Idx&gt;\"</span>,\n        note = <span class=\"string\">\"you might have meant to use a bounded `RangeInclusive`\"\n    </span>),\n    label = <span class=\"string\">\"`{Self}` is not an iterator\"</span>,\n    message = <span class=\"string\">\"`{Self}` is not an iterator\"\n</span>)]\n#[doc(notable_trait)]\n#[lang = <span class=\"string\">\"iterator\"</span>]\n#[rustc_diagnostic_item = <span class=\"string\">\"Iterator\"</span>]\n#[must_use = <span class=\"string\">\"iterators are lazy and do nothing unless consumed\"</span>]\n</span><span class=\"kw\">pub trait </span>Iterator {\n    <span class=\"doccomment\">/// The type of the elements being iterated over.\n    </span><span class=\"attr\">#[rustc_diagnostic_item = <span class=\"string\">\"IteratorItem\"</span>]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">type </span>Item;\n\n    <span class=\"doccomment\">/// Advances the iterator and returns the next value.\n    ///\n    /// Returns [`None`] when iteration is finished. Individual iterator\n    /// implementations may choose to resume iteration, and so calling `next()`\n    /// again may or may not eventually start returning [`Some(Item)`] again at some\n    /// point.\n    ///\n    /// [`Some(Item)`]: Some\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter();\n    ///\n    /// // A call to next() returns the next value...\n    /// assert_eq!(Some(&amp;1), iter.next());\n    /// assert_eq!(Some(&amp;2), iter.next());\n    /// assert_eq!(Some(&amp;3), iter.next());\n    ///\n    /// // ... and then None once it's over.\n    /// assert_eq!(None, iter.next());\n    ///\n    /// // More calls may or may not return `None`. Here, they always will.\n    /// assert_eq!(None, iter.next());\n    /// assert_eq!(None, iter.next());\n    /// ```\n    </span><span class=\"attr\">#[lang = <span class=\"string\">\"next\"</span>]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">fn </span>next(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt;;\n\n    <span class=\"doccomment\">/// Advances the iterator and returns an array containing the next `N` values.\n    ///\n    /// If there are not enough elements to fill the array then `Err` is returned\n    /// containing an iterator over the remaining elements.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// #![feature(iter_next_chunk)]\n    ///\n    /// let mut iter = \"lorem\".chars();\n    ///\n    /// assert_eq!(iter.next_chunk().unwrap(), ['l', 'o']);              // N is inferred as 2\n    /// assert_eq!(iter.next_chunk().unwrap(), ['r', 'e', 'm']);         // N is inferred as 3\n    /// assert_eq!(iter.next_chunk::&lt;4&gt;().unwrap_err().as_slice(), &amp;[]); // N is explicitly 4\n    /// ```\n    ///\n    /// Split a string and get the first three items.\n    ///\n    /// ```\n    /// #![feature(iter_next_chunk)]\n    ///\n    /// let quote = \"not all those who wander are lost\";\n    /// let [first, second, third] = quote.split_whitespace().next_chunk().unwrap();\n    /// assert_eq!(first, \"not\");\n    /// assert_eq!(second, \"all\");\n    /// assert_eq!(third, \"those\");\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"iter_next_chunk\"</span>, reason = <span class=\"string\">\"recently added\"</span>, issue = <span class=\"string\">\"98326\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>next_chunk&lt;<span class=\"kw\">const </span>N: usize&gt;(\n        <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>,\n    ) -&gt; <span class=\"prelude-ty\">Result</span>&lt;[<span class=\"self\">Self</span>::Item; N], array::IntoIter&lt;<span class=\"self\">Self</span>::Item, N&gt;&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n    {\n        array::iter_next_chunk(<span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// Returns the bounds on the remaining length of the iterator.\n    ///\n    /// Specifically, `size_hint()` returns a tuple where the first element\n    /// is the lower bound, and the second element is the upper bound.\n    ///\n    /// The second half of the tuple that is returned is an &lt;code&gt;[Option]&lt;[usize]&gt;&lt;/code&gt;.\n    /// A [`None`] here means that either there is no known upper bound, or the\n    /// upper bound is larger than [`usize`].\n    ///\n    /// # Implementation notes\n    ///\n    /// It is not enforced that an iterator implementation yields the declared\n    /// number of elements. A buggy iterator may yield less than the lower bound\n    /// or more than the upper bound of elements.\n    ///\n    /// `size_hint()` is primarily intended to be used for optimizations such as\n    /// reserving space for the elements of the iterator, but must not be\n    /// trusted to e.g., omit bounds checks in unsafe code. An incorrect\n    /// implementation of `size_hint()` should not lead to memory safety\n    /// violations.\n    ///\n    /// That said, the implementation should provide a correct estimation,\n    /// because otherwise it would be a violation of the trait's protocol.\n    ///\n    /// The default implementation returns &lt;code&gt;(0, [None])&lt;/code&gt; which is correct for any\n    /// iterator.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    /// let mut iter = a.iter();\n    ///\n    /// assert_eq!((3, Some(3)), iter.size_hint());\n    /// let _ = iter.next();\n    /// assert_eq!((2, Some(2)), iter.size_hint());\n    /// ```\n    ///\n    /// A more complex example:\n    ///\n    /// ```\n    /// // The even numbers in the range of zero to nine.\n    /// let iter = (0..10).filter(|x| x % 2 == 0);\n    ///\n    /// // We might iterate from zero to ten times. Knowing that it's five\n    /// // exactly wouldn't be possible without executing filter().\n    /// assert_eq!((0, Some(10)), iter.size_hint());\n    ///\n    /// // Let's add five more numbers with chain()\n    /// let iter = (0..10).filter(|x| x % 2 == 0).chain(15..20);\n    ///\n    /// // now both bounds are increased by five\n    /// assert_eq!((5, Some(15)), iter.size_hint());\n    /// ```\n    ///\n    /// Returning `None` for an upper bound:\n    ///\n    /// ```\n    /// // an infinite iterator has no upper bound\n    /// // and the maximum possible lower bound\n    /// let iter = 0..;\n    ///\n    /// assert_eq!((usize::MAX, None), iter.size_hint());\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>size_hint(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; (usize, <span class=\"prelude-ty\">Option</span>&lt;usize&gt;) {\n        (<span class=\"number\">0</span>, <span class=\"prelude-val\">None</span>)\n    }\n\n    <span class=\"doccomment\">/// Consumes the iterator, counting the number of iterations and returning it.\n    ///\n    /// This method will call [`next`] repeatedly until [`None`] is encountered,\n    /// returning the number of times it saw [`Some`]. Note that [`next`] has to be\n    /// called at least once even if the iterator does not have any elements.\n    ///\n    /// [`next`]: Iterator::next\n    ///\n    /// # Overflow Behavior\n    ///\n    /// The method does no guarding against overflows, so counting elements of\n    /// an iterator with more than [`usize::MAX`] elements either produces the\n    /// wrong result or panics. If debug assertions are enabled, a panic is\n    /// guaranteed.\n    ///\n    /// # Panics\n    ///\n    /// This function might panic if the iterator has more than [`usize::MAX`]\n    /// elements.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    /// assert_eq!(a.iter().count(), 3);\n    ///\n    /// let a = [1, 2, 3, 4, 5];\n    /// assert_eq!(a.iter().count(), 5);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>count(<span class=\"self\">self</span>) -&gt; usize\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n    {\n        <span class=\"self\">self</span>.fold(\n            <span class=\"number\">0</span>,\n            <span class=\"attr\">#[rustc_inherit_overflow_checks]\n            </span>|count, <span class=\"kw\">_</span>| count + <span class=\"number\">1</span>,\n        )\n    }\n\n    <span class=\"doccomment\">/// Consumes the iterator, returning the last element.\n    ///\n    /// This method will evaluate the iterator until it returns [`None`]. While\n    /// doing so, it keeps track of the current element. After [`None`] is\n    /// returned, `last()` will then return the last element it saw.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    /// assert_eq!(a.iter().last(), Some(&amp;3));\n    ///\n    /// let a = [1, 2, 3, 4, 5];\n    /// assert_eq!(a.iter().last(), Some(&amp;5));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>last(<span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>some&lt;T&gt;(<span class=\"kw\">_</span>: <span class=\"prelude-ty\">Option</span>&lt;T&gt;, x: T) -&gt; <span class=\"prelude-ty\">Option</span>&lt;T&gt; {\n            <span class=\"prelude-val\">Some</span>(x)\n        }\n\n        <span class=\"self\">self</span>.fold(<span class=\"prelude-val\">None</span>, some)\n    }\n\n    <span class=\"doccomment\">/// Advances the iterator by `n` elements.\n    ///\n    /// This method will eagerly skip `n` elements by calling [`next`] up to `n`\n    /// times until [`None`] is encountered.\n    ///\n    /// `advance_by(n)` will return `Ok(())` if the iterator successfully advances by\n    /// `n` elements, or a `Err(NonZero&lt;usize&gt;)` with value `k` if [`None`] is encountered,\n    /// where `k` is remaining number of steps that could not be advanced because the iterator ran out.\n    /// If `self` is empty and `n` is non-zero, then this returns `Err(n)`.\n    /// Otherwise, `k` is always less than `n`.\n    ///\n    /// Calling `advance_by(0)` can do meaningful work, for example [`Flatten`]\n    /// can advance its outer iterator until it finds an inner iterator that is not empty, which\n    /// then often allows it to return a more accurate `size_hint()` than in its initial state.\n    ///\n    /// [`Flatten`]: crate::iter::Flatten\n    /// [`next`]: Iterator::next\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(iter_advance_by)]\n    ///\n    /// use std::num::NonZero;\n    ///\n    /// let a = [1, 2, 3, 4];\n    /// let mut iter = a.iter();\n    ///\n    /// assert_eq!(iter.advance_by(2), Ok(()));\n    /// assert_eq!(iter.next(), Some(&amp;3));\n    /// assert_eq!(iter.advance_by(0), Ok(()));\n    /// assert_eq!(iter.advance_by(100), Err(NonZero::new(99).unwrap())); // only `&amp;4` was skipped\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"iter_advance_by\"</span>, reason = <span class=\"string\">\"recently added\"</span>, issue = <span class=\"string\">\"77404\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>advance_by(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, n: usize) -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), NonZero&lt;usize&gt;&gt; {\n        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..n {\n            <span class=\"kw\">if </span><span class=\"self\">self</span>.next().is_none() {\n                <span class=\"comment\">// SAFETY: `i` is always less than `n`.\n                </span><span class=\"kw\">return </span><span class=\"prelude-val\">Err</span>(<span class=\"kw\">unsafe </span>{ NonZero::new_unchecked(n - i) });\n            }\n        }\n        <span class=\"prelude-val\">Ok</span>(())\n    }\n\n    <span class=\"doccomment\">/// Returns the `n`th element of the iterator.\n    ///\n    /// Like most indexing operations, the count starts from zero, so `nth(0)`\n    /// returns the first value, `nth(1)` the second, and so on.\n    ///\n    /// Note that all preceding elements, as well as the returned element, will be\n    /// consumed from the iterator. That means that the preceding elements will be\n    /// discarded, and also that calling `nth(0)` multiple times on the same iterator\n    /// will return different elements.\n    ///\n    /// `nth()` will return [`None`] if `n` is greater than or equal to the length of the\n    /// iterator.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    /// assert_eq!(a.iter().nth(1), Some(&amp;2));\n    /// ```\n    ///\n    /// Calling `nth()` multiple times doesn't rewind the iterator:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter();\n    ///\n    /// assert_eq!(iter.nth(1), Some(&amp;2));\n    /// assert_eq!(iter.nth(1), None);\n    /// ```\n    ///\n    /// Returning `None` if there are less than `n + 1` elements:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    /// assert_eq!(a.iter().nth(10), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>nth(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, n: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt; {\n        <span class=\"self\">self</span>.advance_by(n).ok()<span class=\"question-mark\">?</span>;\n        <span class=\"self\">self</span>.next()\n    }\n\n    <span class=\"doccomment\">/// Creates an iterator starting at the same point, but stepping by\n    /// the given amount at each iteration.\n    ///\n    /// Note 1: The first element of the iterator will always be returned,\n    /// regardless of the step given.\n    ///\n    /// Note 2: The time at which ignored elements are pulled is not fixed.\n    /// `StepBy` behaves like the sequence `self.next()`, `self.nth(step-1)`,\n    /// `self.nth(step-1)`, …, but is also free to behave like the sequence\n    /// `advance_n_and_return_first(&amp;mut self, step)`,\n    /// `advance_n_and_return_first(&amp;mut self, step)`, …\n    /// Which way is used may change for some iterators for performance reasons.\n    /// The second way will advance the iterator earlier and may consume more items.\n    ///\n    /// `advance_n_and_return_first` is the equivalent of:\n    /// ```\n    /// fn advance_n_and_return_first&lt;I&gt;(iter: &amp;mut I, n: usize) -&gt; Option&lt;I::Item&gt;\n    /// where\n    ///     I: Iterator,\n    /// {\n    ///     let next = iter.next();\n    ///     if n &gt; 1 {\n    ///         iter.nth(n - 2);\n    ///     }\n    ///     next\n    /// }\n    /// ```\n    ///\n    /// # Panics\n    ///\n    /// The method will panic if the given step is `0`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [0, 1, 2, 3, 4, 5];\n    /// let mut iter = a.iter().step_by(2);\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;0));\n    /// assert_eq!(iter.next(), Some(&amp;2));\n    /// assert_eq!(iter.next(), Some(&amp;4));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"iterator_step_by\"</span>, since = <span class=\"string\">\"1.28.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>step_by(<span class=\"self\">self</span>, step: usize) -&gt; StepBy&lt;<span class=\"self\">Self</span>&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n    {\n        StepBy::new(<span class=\"self\">self</span>, step)\n    }\n\n    <span class=\"doccomment\">/// Takes two iterators and creates a new iterator over both in sequence.\n    ///\n    /// `chain()` will return a new iterator which will first iterate over\n    /// values from the first iterator and then over values from the second\n    /// iterator.\n    ///\n    /// In other words, it links two iterators together, in a chain. 🔗\n    ///\n    /// [`once`] is commonly used to adapt a single value into a chain of\n    /// other kinds of iteration.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a1 = [1, 2, 3];\n    /// let a2 = [4, 5, 6];\n    ///\n    /// let mut iter = a1.iter().chain(a2.iter());\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;1));\n    /// assert_eq!(iter.next(), Some(&amp;2));\n    /// assert_eq!(iter.next(), Some(&amp;3));\n    /// assert_eq!(iter.next(), Some(&amp;4));\n    /// assert_eq!(iter.next(), Some(&amp;5));\n    /// assert_eq!(iter.next(), Some(&amp;6));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Since the argument to `chain()` uses [`IntoIterator`], we can pass\n    /// anything that can be converted into an [`Iterator`], not just an\n    /// [`Iterator`] itself. For example, slices (`&amp;[T]`) implement\n    /// [`IntoIterator`], and so can be passed to `chain()` directly:\n    ///\n    /// ```\n    /// let s1 = &amp;[1, 2, 3];\n    /// let s2 = &amp;[4, 5, 6];\n    ///\n    /// let mut iter = s1.iter().chain(s2);\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;1));\n    /// assert_eq!(iter.next(), Some(&amp;2));\n    /// assert_eq!(iter.next(), Some(&amp;3));\n    /// assert_eq!(iter.next(), Some(&amp;4));\n    /// assert_eq!(iter.next(), Some(&amp;5));\n    /// assert_eq!(iter.next(), Some(&amp;6));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// If you work with Windows API, you may wish to convert [`OsStr`] to `Vec&lt;u16&gt;`:\n    ///\n    /// ```\n    /// #[cfg(windows)]\n    /// fn os_str_to_utf16(s: &amp;std::ffi::OsStr) -&gt; Vec&lt;u16&gt; {\n    ///     use std::os::windows::ffi::OsStrExt;\n    ///     s.encode_wide().chain(std::iter::once(0)).collect()\n    /// }\n    /// ```\n    ///\n    /// [`once`]: crate::iter::once\n    /// [`OsStr`]: ../../std/ffi/struct.OsStr.html\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>chain&lt;U&gt;(<span class=\"self\">self</span>, other: U) -&gt; Chain&lt;<span class=\"self\">Self</span>, U::IntoIter&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        U: IntoIterator&lt;Item = <span class=\"self\">Self</span>::Item&gt;,\n    {\n        Chain::new(<span class=\"self\">self</span>, other.into_iter())\n    }\n\n    <span class=\"doccomment\">/// 'Zips up' two iterators into a single iterator of pairs.\n    ///\n    /// `zip()` returns a new iterator that will iterate over two other\n    /// iterators, returning a tuple where the first element comes from the\n    /// first iterator, and the second element comes from the second iterator.\n    ///\n    /// In other words, it zips two iterators together, into a single one.\n    ///\n    /// If either iterator returns [`None`], [`next`] from the zipped iterator\n    /// will return [`None`].\n    /// If the zipped iterator has no more elements to return then each further attempt to advance\n    /// it will first try to advance the first iterator at most one time and if it still yielded an item\n    /// try to advance the second iterator at most one time.\n    ///\n    /// To 'undo' the result of zipping up two iterators, see [`unzip`].\n    ///\n    /// [`unzip`]: Iterator::unzip\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a1 = [1, 2, 3];\n    /// let a2 = [4, 5, 6];\n    ///\n    /// let mut iter = a1.iter().zip(a2.iter());\n    ///\n    /// assert_eq!(iter.next(), Some((&amp;1, &amp;4)));\n    /// assert_eq!(iter.next(), Some((&amp;2, &amp;5)));\n    /// assert_eq!(iter.next(), Some((&amp;3, &amp;6)));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Since the argument to `zip()` uses [`IntoIterator`], we can pass\n    /// anything that can be converted into an [`Iterator`], not just an\n    /// [`Iterator`] itself. For example, slices (`&amp;[T]`) implement\n    /// [`IntoIterator`], and so can be passed to `zip()` directly:\n    ///\n    /// ```\n    /// let s1 = &amp;[1, 2, 3];\n    /// let s2 = &amp;[4, 5, 6];\n    ///\n    /// let mut iter = s1.iter().zip(s2);\n    ///\n    /// assert_eq!(iter.next(), Some((&amp;1, &amp;4)));\n    /// assert_eq!(iter.next(), Some((&amp;2, &amp;5)));\n    /// assert_eq!(iter.next(), Some((&amp;3, &amp;6)));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// `zip()` is often used to zip an infinite iterator to a finite one.\n    /// This works because the finite iterator will eventually return [`None`],\n    /// ending the zipper. Zipping with `(0..)` can look a lot like [`enumerate`]:\n    ///\n    /// ```\n    /// let enumerate: Vec&lt;_&gt; = \"foo\".chars().enumerate().collect();\n    ///\n    /// let zipper: Vec&lt;_&gt; = (0..).zip(\"foo\".chars()).collect();\n    ///\n    /// assert_eq!((0, 'f'), enumerate[0]);\n    /// assert_eq!((0, 'f'), zipper[0]);\n    ///\n    /// assert_eq!((1, 'o'), enumerate[1]);\n    /// assert_eq!((1, 'o'), zipper[1]);\n    ///\n    /// assert_eq!((2, 'o'), enumerate[2]);\n    /// assert_eq!((2, 'o'), zipper[2]);\n    /// ```\n    ///\n    /// If both iterators have roughly equivalent syntax, it may be more readable to use [`zip`]:\n    ///\n    /// ```\n    /// use std::iter::zip;\n    ///\n    /// let a = [1, 2, 3];\n    /// let b = [2, 3, 4];\n    ///\n    /// let mut zipped = zip(\n    ///     a.into_iter().map(|x| x * 2).skip(1),\n    ///     b.into_iter().map(|x| x * 2).skip(1),\n    /// );\n    ///\n    /// assert_eq!(zipped.next(), Some((4, 6)));\n    /// assert_eq!(zipped.next(), Some((6, 8)));\n    /// assert_eq!(zipped.next(), None);\n    /// ```\n    ///\n    /// compared to:\n    ///\n    /// ```\n    /// # let a = [1, 2, 3];\n    /// # let b = [2, 3, 4];\n    /// #\n    /// let mut zipped = a\n    ///     .into_iter()\n    ///     .map(|x| x * 2)\n    ///     .skip(1)\n    ///     .zip(b.into_iter().map(|x| x * 2).skip(1));\n    /// #\n    /// # assert_eq!(zipped.next(), Some((4, 6)));\n    /// # assert_eq!(zipped.next(), Some((6, 8)));\n    /// # assert_eq!(zipped.next(), None);\n    /// ```\n    ///\n    /// [`enumerate`]: Iterator::enumerate\n    /// [`next`]: Iterator::next\n    /// [`zip`]: crate::iter::zip\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>zip&lt;U&gt;(<span class=\"self\">self</span>, other: U) -&gt; Zip&lt;<span class=\"self\">Self</span>, U::IntoIter&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        U: IntoIterator,\n    {\n        Zip::new(<span class=\"self\">self</span>, other.into_iter())\n    }\n\n    <span class=\"doccomment\">/// Creates a new iterator which places a copy of `separator` between adjacent\n    /// items of the original iterator.\n    ///\n    /// In case `separator` does not implement [`Clone`] or needs to be\n    /// computed every time, use [`intersperse_with`].\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// #![feature(iter_intersperse)]\n    ///\n    /// let mut a = [0, 1, 2].iter().intersperse(&amp;100);\n    /// assert_eq!(a.next(), Some(&amp;0));   // The first element from `a`.\n    /// assert_eq!(a.next(), Some(&amp;100)); // The separator.\n    /// assert_eq!(a.next(), Some(&amp;1));   // The next element from `a`.\n    /// assert_eq!(a.next(), Some(&amp;100)); // The separator.\n    /// assert_eq!(a.next(), Some(&amp;2));   // The last element from `a`.\n    /// assert_eq!(a.next(), None);       // The iterator is finished.\n    /// ```\n    ///\n    /// `intersperse` can be very useful to join an iterator's items using a common element:\n    /// ```\n    /// #![feature(iter_intersperse)]\n    ///\n    /// let hello = [\"Hello\", \"World\", \"!\"].iter().copied().intersperse(\" \").collect::&lt;String&gt;();\n    /// assert_eq!(hello, \"Hello World !\");\n    /// ```\n    ///\n    /// [`Clone`]: crate::clone::Clone\n    /// [`intersperse_with`]: Iterator::intersperse_with\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"iter_intersperse\"</span>, reason = <span class=\"string\">\"recently added\"</span>, issue = <span class=\"string\">\"79524\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>intersperse(<span class=\"self\">self</span>, separator: <span class=\"self\">Self</span>::Item) -&gt; Intersperse&lt;<span class=\"self\">Self</span>&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        <span class=\"self\">Self</span>::Item: Clone,\n    {\n        Intersperse::new(<span class=\"self\">self</span>, separator)\n    }\n\n    <span class=\"doccomment\">/// Creates a new iterator which places an item generated by `separator`\n    /// between adjacent items of the original iterator.\n    ///\n    /// The closure will be called exactly once each time an item is placed\n    /// between two adjacent items from the underlying iterator; specifically,\n    /// the closure is not called if the underlying iterator yields less than\n    /// two items and after the last item is yielded.\n    ///\n    /// If the iterator's item implements [`Clone`], it may be easier to use\n    /// [`intersperse`].\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// #![feature(iter_intersperse)]\n    ///\n    /// #[derive(PartialEq, Debug)]\n    /// struct NotClone(usize);\n    ///\n    /// let v = [NotClone(0), NotClone(1), NotClone(2)];\n    /// let mut it = v.into_iter().intersperse_with(|| NotClone(99));\n    ///\n    /// assert_eq!(it.next(), Some(NotClone(0)));  // The first element from `v`.\n    /// assert_eq!(it.next(), Some(NotClone(99))); // The separator.\n    /// assert_eq!(it.next(), Some(NotClone(1)));  // The next element from `v`.\n    /// assert_eq!(it.next(), Some(NotClone(99))); // The separator.\n    /// assert_eq!(it.next(), Some(NotClone(2)));  // The last element from `v`.\n    /// assert_eq!(it.next(), None);               // The iterator is finished.\n    /// ```\n    ///\n    /// `intersperse_with` can be used in situations where the separator needs\n    /// to be computed:\n    /// ```\n    /// #![feature(iter_intersperse)]\n    ///\n    /// let src = [\"Hello\", \"to\", \"all\", \"people\", \"!!\"].iter().copied();\n    ///\n    /// // The closure mutably borrows its context to generate an item.\n    /// let mut happy_emojis = [\" ❤️ \", \" 😀 \"].iter().copied();\n    /// let separator = || happy_emojis.next().unwrap_or(\" 🦀 \");\n    ///\n    /// let result = src.intersperse_with(separator).collect::&lt;String&gt;();\n    /// assert_eq!(result, \"Hello ❤️ to 😀 all 🦀 people 🦀 !!\");\n    /// ```\n    /// [`Clone`]: crate::clone::Clone\n    /// [`intersperse`]: Iterator::intersperse\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"iter_intersperse\"</span>, reason = <span class=\"string\">\"recently added\"</span>, issue = <span class=\"string\">\"79524\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>intersperse_with&lt;G&gt;(<span class=\"self\">self</span>, separator: G) -&gt; IntersperseWith&lt;<span class=\"self\">Self</span>, G&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        G: FnMut() -&gt; <span class=\"self\">Self</span>::Item,\n    {\n        IntersperseWith::new(<span class=\"self\">self</span>, separator)\n    }\n\n    <span class=\"doccomment\">/// Takes a closure and creates an iterator which calls that closure on each\n    /// element.\n    ///\n    /// `map()` transforms one iterator into another, by means of its argument:\n    /// something that implements [`FnMut`]. It produces a new iterator which\n    /// calls this closure on each element of the original iterator.\n    ///\n    /// If you are good at thinking in types, you can think of `map()` like this:\n    /// If you have an iterator that gives you elements of some type `A`, and\n    /// you want an iterator of some other type `B`, you can use `map()`,\n    /// passing a closure that takes an `A` and returns a `B`.\n    ///\n    /// `map()` is conceptually similar to a [`for`] loop. However, as `map()` is\n    /// lazy, it is best used when you're already working with other iterators.\n    /// If you're doing some sort of looping for a side effect, it's considered\n    /// more idiomatic to use [`for`] than `map()`.\n    ///\n    /// [`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter().map(|x| 2 * x);\n    ///\n    /// assert_eq!(iter.next(), Some(2));\n    /// assert_eq!(iter.next(), Some(4));\n    /// assert_eq!(iter.next(), Some(6));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// If you're doing some sort of side effect, prefer [`for`] to `map()`:\n    ///\n    /// ```\n    /// # #![allow(unused_must_use)]\n    /// // don't do this:\n    /// (0..5).map(|x| println!(\"{x}\"));\n    ///\n    /// // it won't even execute, as it is lazy. Rust will warn you about this.\n    ///\n    /// // Instead, use for:\n    /// for x in 0..5 {\n    ///     println!(\"{x}\");\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[rustc_diagnostic_item = <span class=\"string\">\"IteratorMap\"</span>]\n    #[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>map&lt;B, F&gt;(<span class=\"self\">self</span>, f: F) -&gt; Map&lt;<span class=\"self\">Self</span>, F&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"self\">Self</span>::Item) -&gt; B,\n    {\n        Map::new(<span class=\"self\">self</span>, f)\n    }\n\n    <span class=\"doccomment\">/// Calls a closure on each element of an iterator.\n    ///\n    /// This is equivalent to using a [`for`] loop on the iterator, although\n    /// `break` and `continue` are not possible from a closure. It's generally\n    /// more idiomatic to use a `for` loop, but `for_each` may be more legible\n    /// when processing items at the end of longer iterator chains. In some\n    /// cases `for_each` may also be faster than a loop, because it will use\n    /// internal iteration on adapters like `Chain`.\n    ///\n    /// [`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// use std::sync::mpsc::channel;\n    ///\n    /// let (tx, rx) = channel();\n    /// (0..5).map(|x| x * 2 + 1)\n    ///       .for_each(move |x| tx.send(x).unwrap());\n    ///\n    /// let v: Vec&lt;_&gt; = rx.iter().collect();\n    /// assert_eq!(v, vec![1, 3, 5, 7, 9]);\n    /// ```\n    ///\n    /// For such a small example, a `for` loop may be cleaner, but `for_each`\n    /// might be preferable to keep a functional style with longer iterators:\n    ///\n    /// ```\n    /// (0..5).flat_map(|x| x * 100 .. x * 110)\n    ///       .enumerate()\n    ///       .filter(|&amp;(i, x)| (i + x) % 3 == 0)\n    ///       .for_each(|(i, x)| println!(\"{i}:{x}\"));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"iterator_for_each\"</span>, since = <span class=\"string\">\"1.21.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>for_each&lt;F&gt;(<span class=\"self\">self</span>, f: F)\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"self\">Self</span>::Item),\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>call&lt;T&gt;(<span class=\"kw-2\">mut </span>f: <span class=\"kw\">impl </span>FnMut(T)) -&gt; <span class=\"kw\">impl </span>FnMut((), T) {\n            <span class=\"kw\">move </span>|(), item| f(item)\n        }\n\n        <span class=\"self\">self</span>.fold((), call(f));\n    }\n\n    <span class=\"doccomment\">/// Creates an iterator which uses a closure to determine if an element\n    /// should be yielded.\n    ///\n    /// Given an element the closure must return `true` or `false`. The returned\n    /// iterator will yield only the elements for which the closure returns\n    /// true.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [0i32, 1, 2];\n    ///\n    /// let mut iter = a.iter().filter(|x| x.is_positive());\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;1));\n    /// assert_eq!(iter.next(), Some(&amp;2));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Because the closure passed to `filter()` takes a reference, and many\n    /// iterators iterate over references, this leads to a possibly confusing\n    /// situation, where the type of the closure is a double reference:\n    ///\n    /// ```\n    /// let a = [0, 1, 2];\n    ///\n    /// let mut iter = a.iter().filter(|x| **x &gt; 1); // need two *s!\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;2));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// It's common to instead use destructuring on the argument to strip away\n    /// one:\n    ///\n    /// ```\n    /// let a = [0, 1, 2];\n    ///\n    /// let mut iter = a.iter().filter(|&amp;x| *x &gt; 1); // both &amp; and *\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;2));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// or both:\n    ///\n    /// ```\n    /// let a = [0, 1, 2];\n    ///\n    /// let mut iter = a.iter().filter(|&amp;&amp;x| x &gt; 1); // two &amp;s\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;2));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// of these layers.\n    ///\n    /// Note that `iter.filter(f).next()` is equivalent to `iter.find(f)`.\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>filter&lt;P&gt;(<span class=\"self\">self</span>, predicate: P) -&gt; Filter&lt;<span class=\"self\">Self</span>, P&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        P: FnMut(<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Item) -&gt; bool,\n    {\n        Filter::new(<span class=\"self\">self</span>, predicate)\n    }\n\n    <span class=\"doccomment\">/// Creates an iterator that both filters and maps.\n    ///\n    /// The returned iterator yields only the `value`s for which the supplied\n    /// closure returns `Some(value)`.\n    ///\n    /// `filter_map` can be used to make chains of [`filter`] and [`map`] more\n    /// concise. The example below shows how a `map().filter().map()` can be\n    /// shortened to a single call to `filter_map`.\n    ///\n    /// [`filter`]: Iterator::filter\n    /// [`map`]: Iterator::map\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [\"1\", \"two\", \"NaN\", \"four\", \"5\"];\n    ///\n    /// let mut iter = a.iter().filter_map(|s| s.parse().ok());\n    ///\n    /// assert_eq!(iter.next(), Some(1));\n    /// assert_eq!(iter.next(), Some(5));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Here's the same example, but with [`filter`] and [`map`]:\n    ///\n    /// ```\n    /// let a = [\"1\", \"two\", \"NaN\", \"four\", \"5\"];\n    /// let mut iter = a.iter().map(|s| s.parse()).filter(|s| s.is_ok()).map(|s| s.unwrap());\n    /// assert_eq!(iter.next(), Some(1));\n    /// assert_eq!(iter.next(), Some(5));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>filter_map&lt;B, F&gt;(<span class=\"self\">self</span>, f: F) -&gt; FilterMap&lt;<span class=\"self\">Self</span>, F&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"self\">Self</span>::Item) -&gt; <span class=\"prelude-ty\">Option</span>&lt;B&gt;,\n    {\n        FilterMap::new(<span class=\"self\">self</span>, f)\n    }\n\n    <span class=\"doccomment\">/// Creates an iterator which gives the current iteration count as well as\n    /// the next value.\n    ///\n    /// The iterator returned yields pairs `(i, val)`, where `i` is the\n    /// current index of iteration and `val` is the value returned by the\n    /// iterator.\n    ///\n    /// `enumerate()` keeps its count as a [`usize`]. If you want to count by a\n    /// different sized integer, the [`zip`] function provides similar\n    /// functionality.\n    ///\n    /// # Overflow Behavior\n    ///\n    /// The method does no guarding against overflows, so enumerating more than\n    /// [`usize::MAX`] elements either produces the wrong result or panics. If\n    /// debug assertions are enabled, a panic is guaranteed.\n    ///\n    /// # Panics\n    ///\n    /// The returned iterator might panic if the to-be-returned index would\n    /// overflow a [`usize`].\n    ///\n    /// [`zip`]: Iterator::zip\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = ['a', 'b', 'c'];\n    ///\n    /// let mut iter = a.iter().enumerate();\n    ///\n    /// assert_eq!(iter.next(), Some((0, &amp;'a')));\n    /// assert_eq!(iter.next(), Some((1, &amp;'b')));\n    /// assert_eq!(iter.next(), Some((2, &amp;'c')));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    #[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"enumerate_method\"</span>)]\n    </span><span class=\"kw\">fn </span>enumerate(<span class=\"self\">self</span>) -&gt; Enumerate&lt;<span class=\"self\">Self</span>&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n    {\n        Enumerate::new(<span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// Creates an iterator which can use the [`peek`] and [`peek_mut`] methods\n    /// to look at the next element of the iterator without consuming it. See\n    /// their documentation for more information.\n    ///\n    /// Note that the underlying iterator is still advanced when [`peek`] or\n    /// [`peek_mut`] are called for the first time: In order to retrieve the\n    /// next element, [`next`] is called on the underlying iterator, hence any\n    /// side effects (i.e. anything other than fetching the next value) of\n    /// the [`next`] method will occur.\n    ///\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let xs = [1, 2, 3];\n    ///\n    /// let mut iter = xs.iter().peekable();\n    ///\n    /// // peek() lets us see into the future\n    /// assert_eq!(iter.peek(), Some(&amp;&amp;1));\n    /// assert_eq!(iter.next(), Some(&amp;1));\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;2));\n    ///\n    /// // we can peek() multiple times, the iterator won't advance\n    /// assert_eq!(iter.peek(), Some(&amp;&amp;3));\n    /// assert_eq!(iter.peek(), Some(&amp;&amp;3));\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;3));\n    ///\n    /// // after the iterator is finished, so is peek()\n    /// assert_eq!(iter.peek(), None);\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Using [`peek_mut`] to mutate the next item without advancing the\n    /// iterator:\n    ///\n    /// ```\n    /// let xs = [1, 2, 3];\n    ///\n    /// let mut iter = xs.iter().peekable();\n    ///\n    /// // `peek_mut()` lets us see into the future\n    /// assert_eq!(iter.peek_mut(), Some(&amp;mut &amp;1));\n    /// assert_eq!(iter.peek_mut(), Some(&amp;mut &amp;1));\n    /// assert_eq!(iter.next(), Some(&amp;1));\n    ///\n    /// if let Some(mut p) = iter.peek_mut() {\n    ///     assert_eq!(*p, &amp;2);\n    ///     // put a value into the iterator\n    ///     *p = &amp;1000;\n    /// }\n    ///\n    /// // The value reappears as the iterator continues\n    /// assert_eq!(iter.collect::&lt;Vec&lt;_&gt;&gt;(), vec![&amp;1000, &amp;3]);\n    /// ```\n    /// [`peek`]: Peekable::peek\n    /// [`peek_mut`]: Peekable::peek_mut\n    /// [`next`]: Iterator::next\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>peekable(<span class=\"self\">self</span>) -&gt; Peekable&lt;<span class=\"self\">Self</span>&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n    {\n        Peekable::new(<span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// Creates an iterator that [`skip`]s elements based on a predicate.\n    ///\n    /// [`skip`]: Iterator::skip\n    ///\n    /// `skip_while()` takes a closure as an argument. It will call this\n    /// closure on each element of the iterator, and ignore elements\n    /// until it returns `false`.\n    ///\n    /// After `false` is returned, `skip_while()`'s job is over, and the\n    /// rest of the elements are yielded.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [-1i32, 0, 1];\n    ///\n    /// let mut iter = a.iter().skip_while(|x| x.is_negative());\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;0));\n    /// assert_eq!(iter.next(), Some(&amp;1));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Because the closure passed to `skip_while()` takes a reference, and many\n    /// iterators iterate over references, this leads to a possibly confusing\n    /// situation, where the type of the closure argument is a double reference:\n    ///\n    /// ```\n    /// let a = [-1, 0, 1];\n    ///\n    /// let mut iter = a.iter().skip_while(|x| **x &lt; 0); // need two *s!\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;0));\n    /// assert_eq!(iter.next(), Some(&amp;1));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Stopping after an initial `false`:\n    ///\n    /// ```\n    /// let a = [-1, 0, 1, -2];\n    ///\n    /// let mut iter = a.iter().skip_while(|x| **x &lt; 0);\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;0));\n    /// assert_eq!(iter.next(), Some(&amp;1));\n    ///\n    /// // while this would have been false, since we already got a false,\n    /// // skip_while() isn't used any more\n    /// assert_eq!(iter.next(), Some(&amp;-2));\n    ///\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[doc(alias = <span class=\"string\">\"drop_while\"</span>)]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>skip_while&lt;P&gt;(<span class=\"self\">self</span>, predicate: P) -&gt; SkipWhile&lt;<span class=\"self\">Self</span>, P&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        P: FnMut(<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Item) -&gt; bool,\n    {\n        SkipWhile::new(<span class=\"self\">self</span>, predicate)\n    }\n\n    <span class=\"doccomment\">/// Creates an iterator that yields elements based on a predicate.\n    ///\n    /// `take_while()` takes a closure as an argument. It will call this\n    /// closure on each element of the iterator, and yield elements\n    /// while it returns `true`.\n    ///\n    /// After `false` is returned, `take_while()`'s job is over, and the\n    /// rest of the elements are ignored.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [-1i32, 0, 1];\n    ///\n    /// let mut iter = a.iter().take_while(|x| x.is_negative());\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;-1));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Because the closure passed to `take_while()` takes a reference, and many\n    /// iterators iterate over references, this leads to a possibly confusing\n    /// situation, where the type of the closure is a double reference:\n    ///\n    /// ```\n    /// let a = [-1, 0, 1];\n    ///\n    /// let mut iter = a.iter().take_while(|x| **x &lt; 0); // need two *s!\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;-1));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Stopping after an initial `false`:\n    ///\n    /// ```\n    /// let a = [-1, 0, 1, -2];\n    ///\n    /// let mut iter = a.iter().take_while(|x| **x &lt; 0);\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;-1));\n    ///\n    /// // We have more elements that are less than zero, but since we already\n    /// // got a false, take_while() isn't used any more\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Because `take_while()` needs to look at the value in order to see if it\n    /// should be included or not, consuming iterators will see that it is\n    /// removed:\n    ///\n    /// ```\n    /// let a = [1, 2, 3, 4];\n    /// let mut iter = a.iter();\n    ///\n    /// let result: Vec&lt;i32&gt; = iter.by_ref()\n    ///                            .take_while(|n| **n != 3)\n    ///                            .cloned()\n    ///                            .collect();\n    ///\n    /// assert_eq!(result, &amp;[1, 2]);\n    ///\n    /// let result: Vec&lt;i32&gt; = iter.cloned().collect();\n    ///\n    /// assert_eq!(result, &amp;[4]);\n    /// ```\n    ///\n    /// The `3` is no longer there, because it was consumed in order to see if\n    /// the iteration should stop, but wasn't placed back into the iterator.\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>take_while&lt;P&gt;(<span class=\"self\">self</span>, predicate: P) -&gt; TakeWhile&lt;<span class=\"self\">Self</span>, P&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        P: FnMut(<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Item) -&gt; bool,\n    {\n        TakeWhile::new(<span class=\"self\">self</span>, predicate)\n    }\n\n    <span class=\"doccomment\">/// Creates an iterator that both yields elements based on a predicate and maps.\n    ///\n    /// `map_while()` takes a closure as an argument. It will call this\n    /// closure on each element of the iterator, and yield elements\n    /// while it returns [`Some(_)`][`Some`].\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [-1i32, 4, 0, 1];\n    ///\n    /// let mut iter = a.iter().map_while(|x| 16i32.checked_div(*x));\n    ///\n    /// assert_eq!(iter.next(), Some(-16));\n    /// assert_eq!(iter.next(), Some(4));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Here's the same example, but with [`take_while`] and [`map`]:\n    ///\n    /// [`take_while`]: Iterator::take_while\n    /// [`map`]: Iterator::map\n    ///\n    /// ```\n    /// let a = [-1i32, 4, 0, 1];\n    ///\n    /// let mut iter = a.iter()\n    ///                 .map(|x| 16i32.checked_div(*x))\n    ///                 .take_while(|x| x.is_some())\n    ///                 .map(|x| x.unwrap());\n    ///\n    /// assert_eq!(iter.next(), Some(-16));\n    /// assert_eq!(iter.next(), Some(4));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// Stopping after an initial [`None`]:\n    ///\n    /// ```\n    /// let a = [0, 1, 2, -3, 4, 5, -6];\n    ///\n    /// let iter = a.iter().map_while(|x| u32::try_from(*x).ok());\n    /// let vec = iter.collect::&lt;Vec&lt;_&gt;&gt;();\n    ///\n    /// // We have more elements which could fit in u32 (4, 5), but `map_while` returned `None` for `-3`\n    /// // (as the `predicate` returned `None`) and `collect` stops at the first `None` encountered.\n    /// assert_eq!(vec, vec![0, 1, 2]);\n    /// ```\n    ///\n    /// Because `map_while()` needs to look at the value in order to see if it\n    /// should be included or not, consuming iterators will see that it is\n    /// removed:\n    ///\n    /// ```\n    /// let a = [1, 2, -3, 4];\n    /// let mut iter = a.iter();\n    ///\n    /// let result: Vec&lt;u32&gt; = iter.by_ref()\n    ///                            .map_while(|n| u32::try_from(*n).ok())\n    ///                            .collect();\n    ///\n    /// assert_eq!(result, &amp;[1, 2]);\n    ///\n    /// let result: Vec&lt;i32&gt; = iter.cloned().collect();\n    ///\n    /// assert_eq!(result, &amp;[4]);\n    /// ```\n    ///\n    /// The `-3` is no longer there, because it was consumed in order to see if\n    /// the iteration should stop, but wasn't placed back into the iterator.\n    ///\n    /// Note that unlike [`take_while`] this iterator is **not** fused.\n    /// It is also not specified what this iterator returns after the first [`None`] is returned.\n    /// If you need fused iterator, use [`fuse`].\n    ///\n    /// [`fuse`]: Iterator::fuse\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"iter_map_while\"</span>, since = <span class=\"string\">\"1.57.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>map_while&lt;B, P&gt;(<span class=\"self\">self</span>, predicate: P) -&gt; MapWhile&lt;<span class=\"self\">Self</span>, P&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        P: FnMut(<span class=\"self\">Self</span>::Item) -&gt; <span class=\"prelude-ty\">Option</span>&lt;B&gt;,\n    {\n        MapWhile::new(<span class=\"self\">self</span>, predicate)\n    }\n\n    <span class=\"doccomment\">/// Creates an iterator that skips the first `n` elements.\n    ///\n    /// `skip(n)` skips elements until `n` elements are skipped or the end of the\n    /// iterator is reached (whichever happens first). After that, all the remaining\n    /// elements are yielded. In particular, if the original iterator is too short,\n    /// then the returned iterator is empty.\n    ///\n    /// Rather than overriding this method directly, instead override the `nth` method.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter().skip(2);\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;3));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>skip(<span class=\"self\">self</span>, n: usize) -&gt; Skip&lt;<span class=\"self\">Self</span>&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n    {\n        Skip::new(<span class=\"self\">self</span>, n)\n    }\n\n    <span class=\"doccomment\">/// Creates an iterator that yields the first `n` elements, or fewer\n    /// if the underlying iterator ends sooner.\n    ///\n    /// `take(n)` yields elements until `n` elements are yielded or the end of\n    /// the iterator is reached (whichever happens first).\n    /// The returned iterator is a prefix of length `n` if the original iterator\n    /// contains at least `n` elements, otherwise it contains all of the\n    /// (fewer than `n`) elements of the original iterator.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter().take(2);\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;1));\n    /// assert_eq!(iter.next(), Some(&amp;2));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// `take()` is often used with an infinite iterator, to make it finite:\n    ///\n    /// ```\n    /// let mut iter = (0..).take(3);\n    ///\n    /// assert_eq!(iter.next(), Some(0));\n    /// assert_eq!(iter.next(), Some(1));\n    /// assert_eq!(iter.next(), Some(2));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    ///\n    /// If less than `n` elements are available,\n    /// `take` will limit itself to the size of the underlying iterator:\n    ///\n    /// ```\n    /// let v = [1, 2];\n    /// let mut iter = v.into_iter().take(5);\n    /// assert_eq!(iter.next(), Some(1));\n    /// assert_eq!(iter.next(), Some(2));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>take(<span class=\"self\">self</span>, n: usize) -&gt; Take&lt;<span class=\"self\">Self</span>&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n    {\n        Take::new(<span class=\"self\">self</span>, n)\n    }\n\n    <span class=\"doccomment\">/// An iterator adapter which, like [`fold`], holds internal state, but\n    /// unlike [`fold`], produces a new iterator.\n    ///\n    /// [`fold`]: Iterator::fold\n    ///\n    /// `scan()` takes two arguments: an initial value which seeds the internal\n    /// state, and a closure with two arguments, the first being a mutable\n    /// reference to the internal state and the second an iterator element.\n    /// The closure can assign to the internal state to share state between\n    /// iterations.\n    ///\n    /// On iteration, the closure will be applied to each element of the\n    /// iterator and the return value from the closure, an [`Option`], is\n    /// returned by the `next` method. Thus the closure can return\n    /// `Some(value)` to yield `value`, or `None` to end the iteration.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3, 4];\n    ///\n    /// let mut iter = a.iter().scan(1, |state, &amp;x| {\n    ///     // each iteration, we'll multiply the state by the element ...\n    ///     *state = *state * x;\n    ///\n    ///     // ... and terminate if the state exceeds 6\n    ///     if *state &gt; 6 {\n    ///         return None;\n    ///     }\n    ///     // ... else yield the negation of the state\n    ///     Some(-*state)\n    /// });\n    ///\n    /// assert_eq!(iter.next(), Some(-1));\n    /// assert_eq!(iter.next(), Some(-2));\n    /// assert_eq!(iter.next(), Some(-6));\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>scan&lt;St, B, F&gt;(<span class=\"self\">self</span>, initial_state: St, f: F) -&gt; Scan&lt;<span class=\"self\">Self</span>, St, F&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"kw-2\">&amp;mut </span>St, <span class=\"self\">Self</span>::Item) -&gt; <span class=\"prelude-ty\">Option</span>&lt;B&gt;,\n    {\n        Scan::new(<span class=\"self\">self</span>, initial_state, f)\n    }\n\n    <span class=\"doccomment\">/// Creates an iterator that works like map, but flattens nested structure.\n    ///\n    /// The [`map`] adapter is very useful, but only when the closure\n    /// argument produces values. If it produces an iterator instead, there's\n    /// an extra layer of indirection. `flat_map()` will remove this extra layer\n    /// on its own.\n    ///\n    /// You can think of `flat_map(f)` as the semantic equivalent\n    /// of [`map`]ping, and then [`flatten`]ing as in `map(f).flatten()`.\n    ///\n    /// Another way of thinking about `flat_map()`: [`map`]'s closure returns\n    /// one item for each element, and `flat_map()`'s closure returns an\n    /// iterator for each element.\n    ///\n    /// [`map`]: Iterator::map\n    /// [`flatten`]: Iterator::flatten\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let words = [\"alpha\", \"beta\", \"gamma\"];\n    ///\n    /// // chars() returns an iterator\n    /// let merged: String = words.iter()\n    ///                           .flat_map(|s| s.chars())\n    ///                           .collect();\n    /// assert_eq!(merged, \"alphabetagamma\");\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>flat_map&lt;U, F&gt;(<span class=\"self\">self</span>, f: F) -&gt; FlatMap&lt;<span class=\"self\">Self</span>, U, F&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        U: IntoIterator,\n        F: FnMut(<span class=\"self\">Self</span>::Item) -&gt; U,\n    {\n        FlatMap::new(<span class=\"self\">self</span>, f)\n    }\n\n    <span class=\"doccomment\">/// Creates an iterator that flattens nested structure.\n    ///\n    /// This is useful when you have an iterator of iterators or an iterator of\n    /// things that can be turned into iterators and you want to remove one\n    /// level of indirection.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let data = vec![vec![1, 2, 3, 4], vec![5, 6]];\n    /// let flattened = data.into_iter().flatten().collect::&lt;Vec&lt;u8&gt;&gt;();\n    /// assert_eq!(flattened, &amp;[1, 2, 3, 4, 5, 6]);\n    /// ```\n    ///\n    /// Mapping and then flattening:\n    ///\n    /// ```\n    /// let words = [\"alpha\", \"beta\", \"gamma\"];\n    ///\n    /// // chars() returns an iterator\n    /// let merged: String = words.iter()\n    ///                           .map(|s| s.chars())\n    ///                           .flatten()\n    ///                           .collect();\n    /// assert_eq!(merged, \"alphabetagamma\");\n    /// ```\n    ///\n    /// You can also rewrite this in terms of [`flat_map()`], which is preferable\n    /// in this case since it conveys intent more clearly:\n    ///\n    /// ```\n    /// let words = [\"alpha\", \"beta\", \"gamma\"];\n    ///\n    /// // chars() returns an iterator\n    /// let merged: String = words.iter()\n    ///                           .flat_map(|s| s.chars())\n    ///                           .collect();\n    /// assert_eq!(merged, \"alphabetagamma\");\n    /// ```\n    ///\n    /// Flattening works on any `IntoIterator` type, including `Option` and `Result`:\n    ///\n    /// ```\n    /// let options = vec![Some(123), Some(321), None, Some(231)];\n    /// let flattened_options: Vec&lt;_&gt; = options.into_iter().flatten().collect();\n    /// assert_eq!(flattened_options, vec![123, 321, 231]);\n    ///\n    /// let results = vec![Ok(123), Ok(321), Err(456), Ok(231)];\n    /// let flattened_results: Vec&lt;_&gt; = results.into_iter().flatten().collect();\n    /// assert_eq!(flattened_results, vec![123, 321, 231]);\n    /// ```\n    ///\n    /// Flattening only removes one level of nesting at a time:\n    ///\n    /// ```\n    /// let d3 = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];\n    ///\n    /// let d2 = d3.iter().flatten().collect::&lt;Vec&lt;_&gt;&gt;();\n    /// assert_eq!(d2, [&amp;[1, 2], &amp;[3, 4], &amp;[5, 6], &amp;[7, 8]]);\n    ///\n    /// let d1 = d3.iter().flatten().flatten().collect::&lt;Vec&lt;_&gt;&gt;();\n    /// assert_eq!(d1, [&amp;1, &amp;2, &amp;3, &amp;4, &amp;5, &amp;6, &amp;7, &amp;8]);\n    /// ```\n    ///\n    /// Here we see that `flatten()` does not perform a \"deep\" flatten.\n    /// Instead, only one level of nesting is removed. That is, if you\n    /// `flatten()` a three-dimensional array, the result will be\n    /// two-dimensional and not one-dimensional. To get a one-dimensional\n    /// structure, you have to `flatten()` again.\n    ///\n    /// [`flat_map()`]: Iterator::flat_map\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"iterator_flatten\"</span>, since = <span class=\"string\">\"1.29.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>flatten(<span class=\"self\">self</span>) -&gt; Flatten&lt;<span class=\"self\">Self</span>&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        <span class=\"self\">Self</span>::Item: IntoIterator,\n    {\n        Flatten::new(<span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// Calls the given function `f` for each contiguous window of size `N` over\n    /// `self` and returns an iterator over the outputs of `f`. Like [`slice::windows()`],\n    /// the windows during mapping overlap as well.\n    ///\n    /// In the following example, the closure is called three times with the\n    /// arguments `&amp;['a', 'b']`, `&amp;['b', 'c']` and `&amp;['c', 'd']` respectively.\n    ///\n    /// ```\n    /// #![feature(iter_map_windows)]\n    ///\n    /// let strings = \"abcd\".chars()\n    ///     .map_windows(|[x, y]| format!(\"{}+{}\", x, y))\n    ///     .collect::&lt;Vec&lt;String&gt;&gt;();\n    ///\n    /// assert_eq!(strings, vec![\"a+b\", \"b+c\", \"c+d\"]);\n    /// ```\n    ///\n    /// Note that the const parameter `N` is usually inferred by the\n    /// destructured argument in the closure.\n    ///\n    /// The returned iterator yields 𝑘 − `N` + 1 items (where 𝑘 is the number of\n    /// items yielded by `self`). If 𝑘 is less than `N`, this method yields an\n    /// empty iterator.\n    ///\n    /// The returned iterator implements [`FusedIterator`], because once `self`\n    /// returns `None`, even if it returns a `Some(T)` again in the next iterations,\n    /// we cannot put it into a contiguous array buffer, and thus the returned iterator\n    /// should be fused.\n    ///\n    /// [`slice::windows()`]: slice::windows\n    /// [`FusedIterator`]: crate::iter::FusedIterator\n    ///\n    /// # Panics\n    ///\n    /// Panics if `N` is 0. This check will most probably get changed to a\n    /// compile time error before this method gets stabilized.\n    ///\n    /// ```should_panic\n    /// #![feature(iter_map_windows)]\n    ///\n    /// let iter = std::iter::repeat(0).map_windows(|&amp;[]| ());\n    /// ```\n    ///\n    /// # Examples\n    ///\n    /// Building the sums of neighboring numbers.\n    ///\n    /// ```\n    /// #![feature(iter_map_windows)]\n    ///\n    /// let mut it = [1, 3, 8, 1].iter().map_windows(|&amp;[a, b]| a + b);\n    /// assert_eq!(it.next(), Some(4));  // 1 + 3\n    /// assert_eq!(it.next(), Some(11)); // 3 + 8\n    /// assert_eq!(it.next(), Some(9));  // 8 + 1\n    /// assert_eq!(it.next(), None);\n    /// ```\n    ///\n    /// Since the elements in the following example implement `Copy`, we can\n    /// just copy the array and get an iterator over the windows.\n    ///\n    /// ```\n    /// #![feature(iter_map_windows)]\n    ///\n    /// let mut it = \"ferris\".chars().map_windows(|w: &amp;[_; 3]| *w);\n    /// assert_eq!(it.next(), Some(['f', 'e', 'r']));\n    /// assert_eq!(it.next(), Some(['e', 'r', 'r']));\n    /// assert_eq!(it.next(), Some(['r', 'r', 'i']));\n    /// assert_eq!(it.next(), Some(['r', 'i', 's']));\n    /// assert_eq!(it.next(), None);\n    /// ```\n    ///\n    /// You can also use this function to check the sortedness of an iterator.\n    /// For the simple case, rather use [`Iterator::is_sorted`].\n    ///\n    /// ```\n    /// #![feature(iter_map_windows)]\n    ///\n    /// let mut it = [0.5, 1.0, 3.5, 3.0, 8.5, 8.5, f32::NAN].iter()\n    ///     .map_windows(|[a, b]| a &lt;= b);\n    ///\n    /// assert_eq!(it.next(), Some(true));  // 0.5 &lt;= 1.0\n    /// assert_eq!(it.next(), Some(true));  // 1.0 &lt;= 3.5\n    /// assert_eq!(it.next(), Some(false)); // 3.5 &lt;= 3.0\n    /// assert_eq!(it.next(), Some(true));  // 3.0 &lt;= 8.5\n    /// assert_eq!(it.next(), Some(true));  // 8.5 &lt;= 8.5\n    /// assert_eq!(it.next(), Some(false)); // 8.5 &lt;= NAN\n    /// assert_eq!(it.next(), None);\n    /// ```\n    ///\n    /// For non-fused iterators, they are fused after `map_windows`.\n    ///\n    /// ```\n    /// #![feature(iter_map_windows)]\n    ///\n    /// #[derive(Default)]\n    /// struct NonFusedIterator {\n    ///     state: i32,\n    /// }\n    ///\n    /// impl Iterator for NonFusedIterator {\n    ///     type Item = i32;\n    ///\n    ///     fn next(&amp;mut self) -&gt; Option&lt;i32&gt; {\n    ///         let val = self.state;\n    ///         self.state = self.state + 1;\n    ///\n    ///         // yields `0..5` first, then only even numbers since `6..`.\n    ///         if val &lt; 5 || val % 2 == 0 {\n    ///             Some(val)\n    ///         } else {\n    ///             None\n    ///         }\n    ///     }\n    /// }\n    ///\n    ///\n    /// let mut iter = NonFusedIterator::default();\n    ///\n    /// // yields 0..5 first.\n    /// assert_eq!(iter.next(), Some(0));\n    /// assert_eq!(iter.next(), Some(1));\n    /// assert_eq!(iter.next(), Some(2));\n    /// assert_eq!(iter.next(), Some(3));\n    /// assert_eq!(iter.next(), Some(4));\n    /// // then we can see our iterator going back and forth\n    /// assert_eq!(iter.next(), None);\n    /// assert_eq!(iter.next(), Some(6));\n    /// assert_eq!(iter.next(), None);\n    /// assert_eq!(iter.next(), Some(8));\n    /// assert_eq!(iter.next(), None);\n    ///\n    /// // however, with `.map_windows()`, it is fused.\n    /// let mut iter = NonFusedIterator::default()\n    ///     .map_windows(|arr: &amp;[_; 2]| *arr);\n    ///\n    /// assert_eq!(iter.next(), Some([0, 1]));\n    /// assert_eq!(iter.next(), Some([1, 2]));\n    /// assert_eq!(iter.next(), Some([2, 3]));\n    /// assert_eq!(iter.next(), Some([3, 4]));\n    /// assert_eq!(iter.next(), None);\n    ///\n    /// // it will always return `None` after the first time.\n    /// assert_eq!(iter.next(), None);\n    /// assert_eq!(iter.next(), None);\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"iter_map_windows\"</span>, reason = <span class=\"string\">\"recently added\"</span>, issue = <span class=\"string\">\"87155\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>map_windows&lt;F, R, <span class=\"kw\">const </span>N: usize&gt;(<span class=\"self\">self</span>, f: F) -&gt; MapWindows&lt;<span class=\"self\">Self</span>, F, N&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"kw-2\">&amp;</span>[<span class=\"self\">Self</span>::Item; N]) -&gt; R,\n    {\n        MapWindows::new(<span class=\"self\">self</span>, f)\n    }\n\n    <span class=\"doccomment\">/// Creates an iterator which ends after the first [`None`].\n    ///\n    /// After an iterator returns [`None`], future calls may or may not yield\n    /// [`Some(T)`] again. `fuse()` adapts an iterator, ensuring that after a\n    /// [`None`] is given, it will always return [`None`] forever.\n    ///\n    /// Note that the [`Fuse`] wrapper is a no-op on iterators that implement\n    /// the [`FusedIterator`] trait. `fuse()` may therefore behave incorrectly\n    /// if the [`FusedIterator`] trait is improperly implemented.\n    ///\n    /// [`Some(T)`]: Some\n    /// [`FusedIterator`]: crate::iter::FusedIterator\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// // an iterator which alternates between Some and None\n    /// struct Alternate {\n    ///     state: i32,\n    /// }\n    ///\n    /// impl Iterator for Alternate {\n    ///     type Item = i32;\n    ///\n    ///     fn next(&amp;mut self) -&gt; Option&lt;i32&gt; {\n    ///         let val = self.state;\n    ///         self.state = self.state + 1;\n    ///\n    ///         // if it's even, Some(i32), else None\n    ///         if val % 2 == 0 {\n    ///             Some(val)\n    ///         } else {\n    ///             None\n    ///         }\n    ///     }\n    /// }\n    ///\n    /// let mut iter = Alternate { state: 0 };\n    ///\n    /// // we can see our iterator going back and forth\n    /// assert_eq!(iter.next(), Some(0));\n    /// assert_eq!(iter.next(), None);\n    /// assert_eq!(iter.next(), Some(2));\n    /// assert_eq!(iter.next(), None);\n    ///\n    /// // however, once we fuse it...\n    /// let mut iter = iter.fuse();\n    ///\n    /// assert_eq!(iter.next(), Some(4));\n    /// assert_eq!(iter.next(), None);\n    ///\n    /// // it will always return `None` after the first time.\n    /// assert_eq!(iter.next(), None);\n    /// assert_eq!(iter.next(), None);\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>fuse(<span class=\"self\">self</span>) -&gt; Fuse&lt;<span class=\"self\">Self</span>&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n    {\n        Fuse::new(<span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// Does something with each element of an iterator, passing the value on.\n    ///\n    /// When using iterators, you'll often chain several of them together.\n    /// While working on such code, you might want to check out what's\n    /// happening at various parts in the pipeline. To do that, insert\n    /// a call to `inspect()`.\n    ///\n    /// It's more common for `inspect()` to be used as a debugging tool than to\n    /// exist in your final code, but applications may find it useful in certain\n    /// situations when errors need to be logged before being discarded.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 4, 2, 3];\n    ///\n    /// // this iterator sequence is complex.\n    /// let sum = a.iter()\n    ///     .cloned()\n    ///     .filter(|x| x % 2 == 0)\n    ///     .fold(0, |sum, i| sum + i);\n    ///\n    /// println!(\"{sum}\");\n    ///\n    /// // let's add some inspect() calls to investigate what's happening\n    /// let sum = a.iter()\n    ///     .cloned()\n    ///     .inspect(|x| println!(\"about to filter: {x}\"))\n    ///     .filter(|x| x % 2 == 0)\n    ///     .inspect(|x| println!(\"made it through filter: {x}\"))\n    ///     .fold(0, |sum, i| sum + i);\n    ///\n    /// println!(\"{sum}\");\n    /// ```\n    ///\n    /// This will print:\n    ///\n    /// ```text\n    /// 6\n    /// about to filter: 1\n    /// about to filter: 4\n    /// made it through filter: 4\n    /// about to filter: 2\n    /// made it through filter: 2\n    /// about to filter: 3\n    /// 6\n    /// ```\n    ///\n    /// Logging errors before discarding them:\n    ///\n    /// ```\n    /// let lines = [\"1\", \"2\", \"a\"];\n    ///\n    /// let sum: i32 = lines\n    ///     .iter()\n    ///     .map(|line| line.parse::&lt;i32&gt;())\n    ///     .inspect(|num| {\n    ///         if let Err(ref e) = *num {\n    ///             println!(\"Parsing error: {e}\");\n    ///         }\n    ///     })\n    ///     .filter_map(Result::ok)\n    ///     .sum();\n    ///\n    /// println!(\"Sum: {sum}\");\n    /// ```\n    ///\n    /// This will print:\n    ///\n    /// ```text\n    /// Parsing error: invalid digit found in string\n    /// Sum: 3\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>inspect&lt;F&gt;(<span class=\"self\">self</span>, f: F) -&gt; Inspect&lt;<span class=\"self\">Self</span>, F&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Item),\n    {\n        Inspect::new(<span class=\"self\">self</span>, f)\n    }\n\n    <span class=\"doccomment\">/// Borrows an iterator, rather than consuming it.\n    ///\n    /// This is useful to allow applying iterator adapters while still\n    /// retaining ownership of the original iterator.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut words = [\"hello\", \"world\", \"of\", \"Rust\"].into_iter();\n    ///\n    /// // Take the first two words.\n    /// let hello_world: Vec&lt;_&gt; = words.by_ref().take(2).collect();\n    /// assert_eq!(hello_world, vec![\"hello\", \"world\"]);\n    ///\n    /// // Collect the rest of the words.\n    /// // We can only do this because we used `by_ref` earlier.\n    /// let of_rust: Vec&lt;_&gt; = words.collect();\n    /// assert_eq!(of_rust, vec![\"of\", \"Rust\"]);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>by_ref(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self\n    </span><span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n    {\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Transforms an iterator into a collection.\n    ///\n    /// `collect()` can take anything iterable, and turn it into a relevant\n    /// collection. This is one of the more powerful methods in the standard\n    /// library, used in a variety of contexts.\n    ///\n    /// The most basic pattern in which `collect()` is used is to turn one\n    /// collection into another. You take a collection, call [`iter`] on it,\n    /// do a bunch of transformations, and then `collect()` at the end.\n    ///\n    /// `collect()` can also create instances of types that are not typical\n    /// collections. For example, a [`String`] can be built from [`char`]s,\n    /// and an iterator of [`Result&lt;T, E&gt;`][`Result`] items can be collected\n    /// into `Result&lt;Collection&lt;T&gt;, E&gt;`. See the examples below for more.\n    ///\n    /// Because `collect()` is so general, it can cause problems with type\n    /// inference. As such, `collect()` is one of the few times you'll see\n    /// the syntax affectionately known as the 'turbofish': `::&lt;&gt;`. This\n    /// helps the inference algorithm understand specifically which collection\n    /// you're trying to collect into.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let doubled: Vec&lt;i32&gt; = a.iter()\n    ///                          .map(|&amp;x| x * 2)\n    ///                          .collect();\n    ///\n    /// assert_eq!(vec![2, 4, 6], doubled);\n    /// ```\n    ///\n    /// Note that we needed the `: Vec&lt;i32&gt;` on the left-hand side. This is because\n    /// we could collect into, for example, a [`VecDeque&lt;T&gt;`] instead:\n    ///\n    /// [`VecDeque&lt;T&gt;`]: ../../std/collections/struct.VecDeque.html\n    ///\n    /// ```\n    /// use std::collections::VecDeque;\n    ///\n    /// let a = [1, 2, 3];\n    ///\n    /// let doubled: VecDeque&lt;i32&gt; = a.iter().map(|&amp;x| x * 2).collect();\n    ///\n    /// assert_eq!(2, doubled[0]);\n    /// assert_eq!(4, doubled[1]);\n    /// assert_eq!(6, doubled[2]);\n    /// ```\n    ///\n    /// Using the 'turbofish' instead of annotating `doubled`:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let doubled = a.iter().map(|x| x * 2).collect::&lt;Vec&lt;i32&gt;&gt;();\n    ///\n    /// assert_eq!(vec![2, 4, 6], doubled);\n    /// ```\n    ///\n    /// Because `collect()` only cares about what you're collecting into, you can\n    /// still use a partial type hint, `_`, with the turbofish:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let doubled = a.iter().map(|x| x * 2).collect::&lt;Vec&lt;_&gt;&gt;();\n    ///\n    /// assert_eq!(vec![2, 4, 6], doubled);\n    /// ```\n    ///\n    /// Using `collect()` to make a [`String`]:\n    ///\n    /// ```\n    /// let chars = ['g', 'd', 'k', 'k', 'n'];\n    ///\n    /// let hello: String = chars.iter()\n    ///     .map(|&amp;x| x as u8)\n    ///     .map(|x| (x + 1) as char)\n    ///     .collect();\n    ///\n    /// assert_eq!(\"hello\", hello);\n    /// ```\n    ///\n    /// If you have a list of [`Result&lt;T, E&gt;`][`Result`]s, you can use `collect()` to\n    /// see if any of them failed:\n    ///\n    /// ```\n    /// let results = [Ok(1), Err(\"nope\"), Ok(3), Err(\"bad\")];\n    ///\n    /// let result: Result&lt;Vec&lt;_&gt;, &amp;str&gt; = results.iter().cloned().collect();\n    ///\n    /// // gives us the first error\n    /// assert_eq!(Err(\"nope\"), result);\n    ///\n    /// let results = [Ok(1), Ok(3)];\n    ///\n    /// let result: Result&lt;Vec&lt;_&gt;, &amp;str&gt; = results.iter().cloned().collect();\n    ///\n    /// // gives us the list of answers\n    /// assert_eq!(Ok(vec![1, 3]), result);\n    /// ```\n    ///\n    /// [`iter`]: Iterator::next\n    /// [`String`]: ../../std/string/struct.String.html\n    /// [`char`]: type@char\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[must_use = <span class=\"string\">\"if you really need to exhaust the iterator, consider `.for_each(drop)` instead\"</span>]\n    #[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"iterator_collect_fn\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>collect&lt;B: FromIterator&lt;<span class=\"self\">Self</span>::Item&gt;&gt;(<span class=\"self\">self</span>) -&gt; B\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n    {\n        FromIterator::from_iter(<span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// Fallibly transforms an iterator into a collection, short circuiting if\n    /// a failure is encountered.\n    ///\n    /// `try_collect()` is a variation of [`collect()`][`collect`] that allows fallible\n    /// conversions during collection. Its main use case is simplifying conversions from\n    /// iterators yielding [`Option&lt;T&gt;`][`Option`] into `Option&lt;Collection&lt;T&gt;&gt;`, or similarly for other [`Try`]\n    /// types (e.g. [`Result`]).\n    ///\n    /// Importantly, `try_collect()` doesn't require that the outer [`Try`] type also implements [`FromIterator`];\n    /// only the inner type produced on `Try::Output` must implement it. Concretely,\n    /// this means that collecting into `ControlFlow&lt;_, Vec&lt;i32&gt;&gt;` is valid because `Vec&lt;i32&gt;` implements\n    /// [`FromIterator`], even though [`ControlFlow`] doesn't.\n    ///\n    /// Also, if a failure is encountered during `try_collect()`, the iterator is still valid and\n    /// may continue to be used, in which case it will continue iterating starting after the element that\n    /// triggered the failure. See the last example below for an example of how this works.\n    ///\n    /// # Examples\n    /// Successfully collecting an iterator of `Option&lt;i32&gt;` into `Option&lt;Vec&lt;i32&gt;&gt;`:\n    /// ```\n    /// #![feature(iterator_try_collect)]\n    ///\n    /// let u = vec![Some(1), Some(2), Some(3)];\n    /// let v = u.into_iter().try_collect::&lt;Vec&lt;i32&gt;&gt;();\n    /// assert_eq!(v, Some(vec![1, 2, 3]));\n    /// ```\n    ///\n    /// Failing to collect in the same way:\n    /// ```\n    /// #![feature(iterator_try_collect)]\n    ///\n    /// let u = vec![Some(1), Some(2), None, Some(3)];\n    /// let v = u.into_iter().try_collect::&lt;Vec&lt;i32&gt;&gt;();\n    /// assert_eq!(v, None);\n    /// ```\n    ///\n    /// A similar example, but with `Result`:\n    /// ```\n    /// #![feature(iterator_try_collect)]\n    ///\n    /// let u: Vec&lt;Result&lt;i32, ()&gt;&gt; = vec![Ok(1), Ok(2), Ok(3)];\n    /// let v = u.into_iter().try_collect::&lt;Vec&lt;i32&gt;&gt;();\n    /// assert_eq!(v, Ok(vec![1, 2, 3]));\n    ///\n    /// let u = vec![Ok(1), Ok(2), Err(()), Ok(3)];\n    /// let v = u.into_iter().try_collect::&lt;Vec&lt;i32&gt;&gt;();\n    /// assert_eq!(v, Err(()));\n    /// ```\n    ///\n    /// Finally, even [`ControlFlow`] works, despite the fact that it\n    /// doesn't implement [`FromIterator`]. Note also that the iterator can\n    /// continue to be used, even if a failure is encountered:\n    ///\n    /// ```\n    /// #![feature(iterator_try_collect)]\n    ///\n    /// use core::ops::ControlFlow::{Break, Continue};\n    ///\n    /// let u = [Continue(1), Continue(2), Break(3), Continue(4), Continue(5)];\n    /// let mut it = u.into_iter();\n    ///\n    /// let v = it.try_collect::&lt;Vec&lt;_&gt;&gt;();\n    /// assert_eq!(v, Break(3));\n    ///\n    /// let v = it.try_collect::&lt;Vec&lt;_&gt;&gt;();\n    /// assert_eq!(v, Continue(vec![4, 5]));\n    /// ```\n    ///\n    /// [`collect`]: Iterator::collect\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"iterator_try_collect\"</span>, issue = <span class=\"string\">\"94047\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>try_collect&lt;B&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; ChangeOutputType&lt;<span class=\"self\">Self</span>::Item, B&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        &lt;<span class=\"self\">Self </span><span class=\"kw\">as </span>Iterator&gt;::Item: Try,\n        &lt;&lt;<span class=\"self\">Self </span><span class=\"kw\">as </span>Iterator&gt;::Item <span class=\"kw\">as </span>Try&gt;::Residual: Residual&lt;B&gt;,\n        B: FromIterator&lt;&lt;<span class=\"self\">Self</span>::Item <span class=\"kw\">as </span>Try&gt;::Output&gt;,\n    {\n        try_process(ByRefSized(<span class=\"self\">self</span>), |i| i.collect())\n    }\n\n    <span class=\"doccomment\">/// Collects all the items from an iterator into a collection.\n    ///\n    /// This method consumes the iterator and adds all its items to the\n    /// passed collection. The collection is then returned, so the call chain\n    /// can be continued.\n    ///\n    /// This is useful when you already have a collection and want to add\n    /// the iterator items to it.\n    ///\n    /// This method is a convenience method to call [Extend::extend](trait.Extend.html),\n    /// but instead of being called on a collection, it's called on an iterator.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// #![feature(iter_collect_into)]\n    ///\n    /// let a = [1, 2, 3];\n    /// let mut vec: Vec::&lt;i32&gt; = vec![0, 1];\n    ///\n    /// a.iter().map(|&amp;x| x * 2).collect_into(&amp;mut vec);\n    /// a.iter().map(|&amp;x| x * 10).collect_into(&amp;mut vec);\n    ///\n    /// assert_eq!(vec, vec![0, 1, 2, 4, 6, 10, 20, 30]);\n    /// ```\n    ///\n    /// `Vec` can have a manual set capacity to avoid reallocating it:\n    ///\n    /// ```\n    /// #![feature(iter_collect_into)]\n    ///\n    /// let a = [1, 2, 3];\n    /// let mut vec: Vec::&lt;i32&gt; = Vec::with_capacity(6);\n    ///\n    /// a.iter().map(|&amp;x| x * 2).collect_into(&amp;mut vec);\n    /// a.iter().map(|&amp;x| x * 10).collect_into(&amp;mut vec);\n    ///\n    /// assert_eq!(6, vec.capacity());\n    /// assert_eq!(vec, vec![2, 4, 6, 10, 20, 30]);\n    /// ```\n    ///\n    /// The returned mutable reference can be used to continue the call chain:\n    ///\n    /// ```\n    /// #![feature(iter_collect_into)]\n    ///\n    /// let a = [1, 2, 3];\n    /// let mut vec: Vec::&lt;i32&gt; = Vec::with_capacity(6);\n    ///\n    /// let count = a.iter().collect_into(&amp;mut vec).iter().count();\n    ///\n    /// assert_eq!(count, vec.len());\n    /// assert_eq!(vec, vec![1, 2, 3]);\n    ///\n    /// let count = a.iter().collect_into(&amp;mut vec).iter().count();\n    ///\n    /// assert_eq!(count, vec.len());\n    /// assert_eq!(vec, vec![1, 2, 3, 1, 2, 3]);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"iter_collect_into\"</span>, reason = <span class=\"string\">\"new API\"</span>, issue = <span class=\"string\">\"94780\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>collect_into&lt;E: Extend&lt;<span class=\"self\">Self</span>::Item&gt;&gt;(<span class=\"self\">self</span>, collection: <span class=\"kw-2\">&amp;mut </span>E) -&gt; <span class=\"kw-2\">&amp;mut </span>E\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n    {\n        collection.extend(<span class=\"self\">self</span>);\n        collection\n    }\n\n    <span class=\"doccomment\">/// Consumes an iterator, creating two collections from it.\n    ///\n    /// The predicate passed to `partition()` can return `true`, or `false`.\n    /// `partition()` returns a pair, all of the elements for which it returned\n    /// `true`, and all of the elements for which it returned `false`.\n    ///\n    /// See also [`is_partitioned()`] and [`partition_in_place()`].\n    ///\n    /// [`is_partitioned()`]: Iterator::is_partitioned\n    /// [`partition_in_place()`]: Iterator::partition_in_place\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let (even, odd): (Vec&lt;_&gt;, Vec&lt;_&gt;) = a\n    ///     .into_iter()\n    ///     .partition(|n| n % 2 == 0);\n    ///\n    /// assert_eq!(even, vec![2]);\n    /// assert_eq!(odd, vec![1, 3]);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>partition&lt;B, F&gt;(<span class=\"self\">self</span>, f: F) -&gt; (B, B)\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        B: Default + Extend&lt;<span class=\"self\">Self</span>::Item&gt;,\n        F: FnMut(<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Item) -&gt; bool,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>extend&lt;<span class=\"lifetime\">'a</span>, T, B: Extend&lt;T&gt;&gt;(\n            <span class=\"kw-2\">mut </span>f: <span class=\"kw\">impl </span>FnMut(<span class=\"kw-2\">&amp;</span>T) -&gt; bool + <span class=\"lifetime\">'a</span>,\n            left: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>B,\n            right: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>B,\n        ) -&gt; <span class=\"kw\">impl </span>FnMut((), T) + <span class=\"lifetime\">'a </span>{\n            <span class=\"kw\">move </span>|(), x| {\n                <span class=\"kw\">if </span>f(<span class=\"kw-2\">&amp;</span>x) {\n                    left.extend_one(x);\n                } <span class=\"kw\">else </span>{\n                    right.extend_one(x);\n                }\n            }\n        }\n\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>left: B = Default::default();\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>right: B = Default::default();\n\n        <span class=\"self\">self</span>.fold((), extend(f, <span class=\"kw-2\">&amp;mut </span>left, <span class=\"kw-2\">&amp;mut </span>right));\n\n        (left, right)\n    }\n\n    <span class=\"doccomment\">/// Reorders the elements of this iterator *in-place* according to the given predicate,\n    /// such that all those that return `true` precede all those that return `false`.\n    /// Returns the number of `true` elements found.\n    ///\n    /// The relative order of partitioned items is not maintained.\n    ///\n    /// # Current implementation\n    ///\n    /// The current algorithm tries to find the first element for which the predicate evaluates\n    /// to false and the last element for which it evaluates to true, and repeatedly swaps them.\n    ///\n    /// Time complexity: *O*(*n*)\n    ///\n    /// See also [`is_partitioned()`] and [`partition()`].\n    ///\n    /// [`is_partitioned()`]: Iterator::is_partitioned\n    /// [`partition()`]: Iterator::partition\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(iter_partition_in_place)]\n    ///\n    /// let mut a = [1, 2, 3, 4, 5, 6, 7];\n    ///\n    /// // Partition in-place between evens and odds\n    /// let i = a.iter_mut().partition_in_place(|&amp;n| n % 2 == 0);\n    ///\n    /// assert_eq!(i, 3);\n    /// assert!(a[..i].iter().all(|&amp;n| n % 2 == 0)); // evens\n    /// assert!(a[i..].iter().all(|&amp;n| n % 2 == 1)); // odds\n    /// ```\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"iter_partition_in_place\"</span>, reason = <span class=\"string\">\"new API\"</span>, issue = <span class=\"string\">\"62543\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>partition_in_place&lt;<span class=\"lifetime\">'a</span>, T: <span class=\"lifetime\">'a</span>, P&gt;(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">ref mut </span>predicate: P) -&gt; usize\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized + DoubleEndedIterator&lt;Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>T&gt;,\n        P: FnMut(<span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n    {\n        <span class=\"comment\">// FIXME: should we worry about the count overflowing? The only way to have more than\n        // `usize::MAX` mutable references is with ZSTs, which aren't useful to partition...\n\n        // These closure \"factory\" functions exist to avoid genericity in `Self`.\n\n        </span><span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>is_false&lt;<span class=\"lifetime\">'a</span>, T&gt;(\n            predicate: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span><span class=\"kw\">impl </span>FnMut(<span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n            true_count: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>usize,\n        ) -&gt; <span class=\"kw\">impl </span>FnMut(&amp;&amp;<span class=\"kw-2\">mut </span>T) -&gt; bool + <span class=\"lifetime\">'a </span>{\n            <span class=\"kw\">move </span>|x| {\n                <span class=\"kw\">let </span>p = predicate(<span class=\"kw-2\">&amp;**</span>x);\n                <span class=\"kw-2\">*</span>true_count += p <span class=\"kw\">as </span>usize;\n                !p\n            }\n        }\n\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>is_true&lt;T&gt;(predicate: <span class=\"kw-2\">&amp;mut </span><span class=\"kw\">impl </span>FnMut(<span class=\"kw-2\">&amp;</span>T) -&gt; bool) -&gt; <span class=\"kw\">impl </span>FnMut(&amp;&amp;<span class=\"kw-2\">mut </span>T) -&gt; bool + <span class=\"lifetime\">'_ </span>{\n            <span class=\"kw\">move </span>|x| predicate(<span class=\"kw-2\">&amp;**</span>x)\n        }\n\n        <span class=\"comment\">// Repeatedly find the first `false` and swap it with the last `true`.\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>true_count = <span class=\"number\">0</span>;\n        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(head) = <span class=\"self\">self</span>.find(is_false(predicate, <span class=\"kw-2\">&amp;mut </span>true_count)) {\n            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(tail) = <span class=\"self\">self</span>.rfind(is_true(predicate)) {\n                <span class=\"kw\">crate</span>::mem::swap(head, tail);\n                true_count += <span class=\"number\">1</span>;\n            } <span class=\"kw\">else </span>{\n                <span class=\"kw\">break</span>;\n            }\n        }\n        true_count\n    }\n\n    <span class=\"doccomment\">/// Checks if the elements of this iterator are partitioned according to the given predicate,\n    /// such that all those that return `true` precede all those that return `false`.\n    ///\n    /// See also [`partition()`] and [`partition_in_place()`].\n    ///\n    /// [`partition()`]: Iterator::partition\n    /// [`partition_in_place()`]: Iterator::partition_in_place\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(iter_is_partitioned)]\n    ///\n    /// assert!(\"Iterator\".chars().is_partitioned(char::is_uppercase));\n    /// assert!(!\"IntoIterator\".chars().is_partitioned(char::is_uppercase));\n    /// ```\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"iter_is_partitioned\"</span>, reason = <span class=\"string\">\"new API\"</span>, issue = <span class=\"string\">\"62544\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>is_partitioned&lt;P&gt;(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">mut </span>predicate: P) -&gt; bool\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        P: FnMut(<span class=\"self\">Self</span>::Item) -&gt; bool,\n    {\n        <span class=\"comment\">// Either all items test `true`, or the first clause stops at `false`\n        // and we check that there are no more `true` items after that.\n        </span><span class=\"self\">self</span>.all(<span class=\"kw-2\">&amp;mut </span>predicate) || !<span class=\"self\">self</span>.any(predicate)\n    }\n\n    <span class=\"doccomment\">/// An iterator method that applies a function as long as it returns\n    /// successfully, producing a single, final value.\n    ///\n    /// `try_fold()` takes two arguments: an initial value, and a closure with\n    /// two arguments: an 'accumulator', and an element. The closure either\n    /// returns successfully, with the value that the accumulator should have\n    /// for the next iteration, or it returns failure, with an error value that\n    /// is propagated back to the caller immediately (short-circuiting).\n    ///\n    /// The initial value is the value the accumulator will have on the first\n    /// call. If applying the closure succeeded against every element of the\n    /// iterator, `try_fold()` returns the final accumulator as success.\n    ///\n    /// Folding is useful whenever you have a collection of something, and want\n    /// to produce a single value from it.\n    ///\n    /// # Note to Implementors\n    ///\n    /// Several of the other (forward) methods have default implementations in\n    /// terms of this one, so try to implement this explicitly if it can\n    /// do something better than the default `for` loop implementation.\n    ///\n    /// In particular, try to have this call `try_fold()` on the internal parts\n    /// from which this iterator is composed. If multiple calls are needed,\n    /// the `?` operator may be convenient for chaining the accumulator value\n    /// along, but beware any invariants that need to be upheld before those\n    /// early returns. This is a `&amp;mut self` method, so iteration needs to be\n    /// resumable after hitting an error here.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// // the checked sum of all of the elements of the array\n    /// let sum = a.iter().try_fold(0i8, |acc, &amp;x| acc.checked_add(x));\n    ///\n    /// assert_eq!(sum, Some(6));\n    /// ```\n    ///\n    /// Short-circuiting:\n    ///\n    /// ```\n    /// let a = [10, 20, 30, 100, 40, 50];\n    /// let mut it = a.iter();\n    ///\n    /// // This sum overflows when adding the 100 element\n    /// let sum = it.try_fold(0i8, |acc, &amp;x| acc.checked_add(x));\n    /// assert_eq!(sum, None);\n    ///\n    /// // Because it short-circuited, the remaining elements are still\n    /// // available through the iterator.\n    /// assert_eq!(it.len(), 2);\n    /// assert_eq!(it.next(), Some(&amp;40));\n    /// ```\n    ///\n    /// While you cannot `break` from a closure, the [`ControlFlow`] type allows\n    /// a similar idea:\n    ///\n    /// ```\n    /// use std::ops::ControlFlow;\n    ///\n    /// let triangular = (1..30).try_fold(0_i8, |prev, x| {\n    ///     if let Some(next) = prev.checked_add(x) {\n    ///         ControlFlow::Continue(next)\n    ///     } else {\n    ///         ControlFlow::Break(prev)\n    ///     }\n    /// });\n    /// assert_eq!(triangular, ControlFlow::Break(120));\n    ///\n    /// let triangular = (1..30).try_fold(0_u64, |prev, x| {\n    ///     if let Some(next) = prev.checked_add(x) {\n    ///         ControlFlow::Continue(next)\n    ///     } else {\n    ///         ControlFlow::Break(prev)\n    ///     }\n    /// });\n    /// assert_eq!(triangular, ControlFlow::Continue(435));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"iterator_try_fold\"</span>, since = <span class=\"string\">\"1.27.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>try_fold&lt;B, F, R&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, init: B, <span class=\"kw-2\">mut </span>f: F) -&gt; R\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(B, <span class=\"self\">Self</span>::Item) -&gt; R,\n        R: Try&lt;Output = B&gt;,\n    {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>accum = init;\n        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(x) = <span class=\"self\">self</span>.next() {\n            accum = f(accum, x)<span class=\"question-mark\">?</span>;\n        }\n        <span class=\"kw\">try </span>{ accum }\n    }\n\n    <span class=\"doccomment\">/// An iterator method that applies a fallible function to each item in the\n    /// iterator, stopping at the first error and returning that error.\n    ///\n    /// This can also be thought of as the fallible form of [`for_each()`]\n    /// or as the stateless version of [`try_fold()`].\n    ///\n    /// [`for_each()`]: Iterator::for_each\n    /// [`try_fold()`]: Iterator::try_fold\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fs::rename;\n    /// use std::io::{stdout, Write};\n    /// use std::path::Path;\n    ///\n    /// let data = [\"no_tea.txt\", \"stale_bread.json\", \"torrential_rain.png\"];\n    ///\n    /// let res = data.iter().try_for_each(|x| writeln!(stdout(), \"{x}\"));\n    /// assert!(res.is_ok());\n    ///\n    /// let mut it = data.iter().cloned();\n    /// let res = it.try_for_each(|x| rename(x, Path::new(x).with_extension(\"old\")));\n    /// assert!(res.is_err());\n    /// // It short-circuited, so the remaining items are still in the iterator:\n    /// assert_eq!(it.next(), Some(\"stale_bread.json\"));\n    /// ```\n    ///\n    /// The [`ControlFlow`] type can be used with this method for the situations\n    /// in which you'd use `break` and `continue` in a normal loop:\n    ///\n    /// ```\n    /// use std::ops::ControlFlow;\n    ///\n    /// let r = (2..100).try_for_each(|x| {\n    ///     if 323 % x == 0 {\n    ///         return ControlFlow::Break(x)\n    ///     }\n    ///\n    ///     ControlFlow::Continue(())\n    /// });\n    /// assert_eq!(r, ControlFlow::Break(17));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"iterator_try_fold\"</span>, since = <span class=\"string\">\"1.27.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>try_for_each&lt;F, R&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, f: F) -&gt; R\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"self\">Self</span>::Item) -&gt; R,\n        R: Try&lt;Output = ()&gt;,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>call&lt;T, R&gt;(<span class=\"kw-2\">mut </span>f: <span class=\"kw\">impl </span>FnMut(T) -&gt; R) -&gt; <span class=\"kw\">impl </span>FnMut((), T) -&gt; R {\n            <span class=\"kw\">move </span>|(), x| f(x)\n        }\n\n        <span class=\"self\">self</span>.try_fold((), call(f))\n    }\n\n    <span class=\"doccomment\">/// Folds every element into an accumulator by applying an operation,\n    /// returning the final result.\n    ///\n    /// `fold()` takes two arguments: an initial value, and a closure with two\n    /// arguments: an 'accumulator', and an element. The closure returns the value that\n    /// the accumulator should have for the next iteration.\n    ///\n    /// The initial value is the value the accumulator will have on the first\n    /// call.\n    ///\n    /// After applying this closure to every element of the iterator, `fold()`\n    /// returns the accumulator.\n    ///\n    /// This operation is sometimes called 'reduce' or 'inject'.\n    ///\n    /// Folding is useful whenever you have a collection of something, and want\n    /// to produce a single value from it.\n    ///\n    /// Note: `fold()`, and similar methods that traverse the entire iterator,\n    /// might not terminate for infinite iterators, even on traits for which a\n    /// result is determinable in finite time.\n    ///\n    /// Note: [`reduce()`] can be used to use the first element as the initial\n    /// value, if the accumulator type and item type is the same.\n    ///\n    /// Note: `fold()` combines elements in a *left-associative* fashion. For associative\n    /// operators like `+`, the order the elements are combined in is not important, but for non-associative\n    /// operators like `-` the order will affect the final result.\n    /// For a *right-associative* version of `fold()`, see [`DoubleEndedIterator::rfold()`].\n    ///\n    /// # Note to Implementors\n    ///\n    /// Several of the other (forward) methods have default implementations in\n    /// terms of this one, so try to implement this explicitly if it can\n    /// do something better than the default `for` loop implementation.\n    ///\n    /// In particular, try to have this call `fold()` on the internal parts\n    /// from which this iterator is composed.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// // the sum of all of the elements of the array\n    /// let sum = a.iter().fold(0, |acc, x| acc + x);\n    ///\n    /// assert_eq!(sum, 6);\n    /// ```\n    ///\n    /// Let's walk through each step of the iteration here:\n    ///\n    /// | element | acc | x | result |\n    /// |---------|-----|---|--------|\n    /// |         | 0   |   |        |\n    /// | 1       | 0   | 1 | 1      |\n    /// | 2       | 1   | 2 | 3      |\n    /// | 3       | 3   | 3 | 6      |\n    ///\n    /// And so, our final result, `6`.\n    ///\n    /// This example demonstrates the left-associative nature of `fold()`:\n    /// it builds a string, starting with an initial value\n    /// and continuing with each element from the front until the back:\n    ///\n    /// ```\n    /// let numbers = [1, 2, 3, 4, 5];\n    ///\n    /// let zero = \"0\".to_string();\n    ///\n    /// let result = numbers.iter().fold(zero, |acc, &amp;x| {\n    ///     format!(\"({acc} + {x})\")\n    /// });\n    ///\n    /// assert_eq!(result, \"(((((0 + 1) + 2) + 3) + 4) + 5)\");\n    /// ```\n    /// It's common for people who haven't used iterators a lot to\n    /// use a `for` loop with a list of things to build up a result. Those\n    /// can be turned into `fold()`s:\n    ///\n    /// [`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n    ///\n    /// ```\n    /// let numbers = [1, 2, 3, 4, 5];\n    ///\n    /// let mut result = 0;\n    ///\n    /// // for loop:\n    /// for i in &amp;numbers {\n    ///     result = result + i;\n    /// }\n    ///\n    /// // fold:\n    /// let result2 = numbers.iter().fold(0, |acc, &amp;x| acc + x);\n    ///\n    /// // they're the same\n    /// assert_eq!(result, result2);\n    /// ```\n    ///\n    /// [`reduce()`]: Iterator::reduce\n    </span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"inject\"</span>, alias = <span class=\"string\">\"foldl\"</span>)]\n    #[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>fold&lt;B, F&gt;(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, init: B, <span class=\"kw-2\">mut </span>f: F) -&gt; B\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(B, <span class=\"self\">Self</span>::Item) -&gt; B,\n    {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>accum = init;\n        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(x) = <span class=\"self\">self</span>.next() {\n            accum = f(accum, x);\n        }\n        accum\n    }\n\n    <span class=\"doccomment\">/// Reduces the elements to a single one, by repeatedly applying a reducing\n    /// operation.\n    ///\n    /// If the iterator is empty, returns [`None`]; otherwise, returns the\n    /// result of the reduction.\n    ///\n    /// The reducing function is a closure with two arguments: an 'accumulator', and an element.\n    /// For iterators with at least one element, this is the same as [`fold()`]\n    /// with the first element of the iterator as the initial accumulator value, folding\n    /// every subsequent element into it.\n    ///\n    /// [`fold()`]: Iterator::fold\n    ///\n    /// # Example\n    ///\n    /// ```\n    /// let reduced: i32 = (1..10).reduce(|acc, e| acc + e).unwrap();\n    /// assert_eq!(reduced, 45);\n    ///\n    /// // Which is equivalent to doing it with `fold`:\n    /// let folded: i32 = (1..10).fold(0, |acc, e| acc + e);\n    /// assert_eq!(reduced, folded);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"iterator_fold_self\"</span>, since = <span class=\"string\">\"1.51.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>reduce&lt;F&gt;(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, f: F) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"self\">Self</span>::Item, <span class=\"self\">Self</span>::Item) -&gt; <span class=\"self\">Self</span>::Item,\n    {\n        <span class=\"kw\">let </span>first = <span class=\"self\">self</span>.next()<span class=\"question-mark\">?</span>;\n        <span class=\"prelude-val\">Some</span>(<span class=\"self\">self</span>.fold(first, f))\n    }\n\n    <span class=\"doccomment\">/// Reduces the elements to a single one by repeatedly applying a reducing operation. If the\n    /// closure returns a failure, the failure is propagated back to the caller immediately.\n    ///\n    /// The return type of this method depends on the return type of the closure. If the closure\n    /// returns `Result&lt;Self::Item, E&gt;`, then this function will return `Result&lt;Option&lt;Self::Item&gt;,\n    /// E&gt;`. If the closure returns `Option&lt;Self::Item&gt;`, then this function will return\n    /// `Option&lt;Option&lt;Self::Item&gt;&gt;`.\n    ///\n    /// When called on an empty iterator, this function will return either `Some(None)` or\n    /// `Ok(None)` depending on the type of the provided closure.\n    ///\n    /// For iterators with at least one element, this is essentially the same as calling\n    /// [`try_fold()`] with the first element of the iterator as the initial accumulator value.\n    ///\n    /// [`try_fold()`]: Iterator::try_fold\n    ///\n    /// # Examples\n    ///\n    /// Safely calculate the sum of a series of numbers:\n    ///\n    /// ```\n    /// #![feature(iterator_try_reduce)]\n    ///\n    /// let numbers: Vec&lt;usize&gt; = vec![10, 20, 5, 23, 0];\n    /// let sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\n    /// assert_eq!(sum, Some(Some(58)));\n    /// ```\n    ///\n    /// Determine when a reduction short circuited:\n    ///\n    /// ```\n    /// #![feature(iterator_try_reduce)]\n    ///\n    /// let numbers = vec![1, 2, 3, usize::MAX, 4, 5];\n    /// let sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\n    /// assert_eq!(sum, None);\n    /// ```\n    ///\n    /// Determine when a reduction was not performed because there are no elements:\n    ///\n    /// ```\n    /// #![feature(iterator_try_reduce)]\n    ///\n    /// let numbers: Vec&lt;usize&gt; = Vec::new();\n    /// let sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\n    /// assert_eq!(sum, Some(None));\n    /// ```\n    ///\n    /// Use a [`Result`] instead of an [`Option`]:\n    ///\n    /// ```\n    /// #![feature(iterator_try_reduce)]\n    ///\n    /// let numbers = vec![\"1\", \"2\", \"3\", \"4\", \"5\"];\n    /// let max: Result&lt;Option&lt;_&gt;, &lt;usize as std::str::FromStr&gt;::Err&gt; =\n    ///     numbers.into_iter().try_reduce(|x, y| {\n    ///         if x.parse::&lt;usize&gt;()? &gt; y.parse::&lt;usize&gt;()? { Ok(x) } else { Ok(y) }\n    ///     });\n    /// assert_eq!(max, Ok(Some(\"5\")));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"iterator_try_reduce\"</span>, reason = <span class=\"string\">\"new API\"</span>, issue = <span class=\"string\">\"87053\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>try_reduce&lt;F, R&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, f: F) -&gt; ChangeOutputType&lt;R, <span class=\"prelude-ty\">Option</span>&lt;R::Output&gt;&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"self\">Self</span>::Item, <span class=\"self\">Self</span>::Item) -&gt; R,\n        R: Try&lt;Output = <span class=\"self\">Self</span>::Item&gt;,\n        R::Residual: Residual&lt;<span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt;&gt;,\n    {\n        <span class=\"kw\">let </span>first = <span class=\"kw\">match </span><span class=\"self\">self</span>.next() {\n            <span class=\"prelude-val\">Some</span>(i) =&gt; i,\n            <span class=\"prelude-val\">None </span>=&gt; <span class=\"kw\">return </span>Try::from_output(<span class=\"prelude-val\">None</span>),\n        };\n\n        <span class=\"kw\">match </span><span class=\"self\">self</span>.try_fold(first, f).branch() {\n            ControlFlow::Break(r) =&gt; FromResidual::from_residual(r),\n            ControlFlow::Continue(i) =&gt; Try::from_output(<span class=\"prelude-val\">Some</span>(i)),\n        }\n    }\n\n    <span class=\"doccomment\">/// Tests if every element of the iterator matches a predicate.\n    ///\n    /// `all()` takes a closure that returns `true` or `false`. It applies\n    /// this closure to each element of the iterator, and if they all return\n    /// `true`, then so does `all()`. If any of them return `false`, it\n    /// returns `false`.\n    ///\n    /// `all()` is short-circuiting; in other words, it will stop processing\n    /// as soon as it finds a `false`, given that no matter what else happens,\n    /// the result will also be `false`.\n    ///\n    /// An empty iterator returns `true`.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// assert!(a.iter().all(|&amp;x| x &gt; 0));\n    ///\n    /// assert!(!a.iter().all(|&amp;x| x &gt; 2));\n    /// ```\n    ///\n    /// Stopping at the first `false`:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter();\n    ///\n    /// assert!(!iter.all(|&amp;x| x != 2));\n    ///\n    /// // we can still use `iter`, as there are more elements.\n    /// assert_eq!(iter.next(), Some(&amp;3));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>all&lt;F&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, f: F) -&gt; bool\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"self\">Self</span>::Item) -&gt; bool,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>check&lt;T&gt;(<span class=\"kw-2\">mut </span>f: <span class=\"kw\">impl </span>FnMut(T) -&gt; bool) -&gt; <span class=\"kw\">impl </span>FnMut((), T) -&gt; ControlFlow&lt;()&gt; {\n            <span class=\"kw\">move </span>|(), x| {\n                <span class=\"kw\">if </span>f(x) { ControlFlow::Continue(()) } <span class=\"kw\">else </span>{ ControlFlow::Break(()) }\n            }\n        }\n        <span class=\"self\">self</span>.try_fold((), check(f)) == ControlFlow::Continue(())\n    }\n\n    <span class=\"doccomment\">/// Tests if any element of the iterator matches a predicate.\n    ///\n    /// `any()` takes a closure that returns `true` or `false`. It applies\n    /// this closure to each element of the iterator, and if any of them return\n    /// `true`, then so does `any()`. If they all return `false`, it\n    /// returns `false`.\n    ///\n    /// `any()` is short-circuiting; in other words, it will stop processing\n    /// as soon as it finds a `true`, given that no matter what else happens,\n    /// the result will also be `true`.\n    ///\n    /// An empty iterator returns `false`.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// assert!(a.iter().any(|&amp;x| x &gt; 0));\n    ///\n    /// assert!(!a.iter().any(|&amp;x| x &gt; 5));\n    /// ```\n    ///\n    /// Stopping at the first `true`:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter();\n    ///\n    /// assert!(iter.any(|&amp;x| x != 2));\n    ///\n    /// // we can still use `iter`, as there are more elements.\n    /// assert_eq!(iter.next(), Some(&amp;2));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>any&lt;F&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, f: F) -&gt; bool\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"self\">Self</span>::Item) -&gt; bool,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>check&lt;T&gt;(<span class=\"kw-2\">mut </span>f: <span class=\"kw\">impl </span>FnMut(T) -&gt; bool) -&gt; <span class=\"kw\">impl </span>FnMut((), T) -&gt; ControlFlow&lt;()&gt; {\n            <span class=\"kw\">move </span>|(), x| {\n                <span class=\"kw\">if </span>f(x) { ControlFlow::Break(()) } <span class=\"kw\">else </span>{ ControlFlow::Continue(()) }\n            }\n        }\n\n        <span class=\"self\">self</span>.try_fold((), check(f)) == ControlFlow::Break(())\n    }\n\n    <span class=\"doccomment\">/// Searches for an element of an iterator that satisfies a predicate.\n    ///\n    /// `find()` takes a closure that returns `true` or `false`. It applies\n    /// this closure to each element of the iterator, and if any of them return\n    /// `true`, then `find()` returns [`Some(element)`]. If they all return\n    /// `false`, it returns [`None`].\n    ///\n    /// `find()` is short-circuiting; in other words, it will stop processing\n    /// as soon as the closure returns `true`.\n    ///\n    /// Because `find()` takes a reference, and many iterators iterate over\n    /// references, this leads to a possibly confusing situation where the\n    /// argument is a double reference. You can see this effect in the\n    /// examples below, with `&amp;&amp;x`.\n    ///\n    /// If you need the index of the element, see [`position()`].\n    ///\n    /// [`Some(element)`]: Some\n    /// [`position()`]: Iterator::position\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// assert_eq!(a.iter().find(|&amp;&amp;x| x == 2), Some(&amp;2));\n    ///\n    /// assert_eq!(a.iter().find(|&amp;&amp;x| x == 5), None);\n    /// ```\n    ///\n    /// Stopping at the first `true`:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter();\n    ///\n    /// assert_eq!(iter.find(|&amp;&amp;x| x == 2), Some(&amp;2));\n    ///\n    /// // we can still use `iter`, as there are more elements.\n    /// assert_eq!(iter.next(), Some(&amp;3));\n    /// ```\n    ///\n    /// Note that `iter.find(f)` is equivalent to `iter.filter(f).next()`.\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>find&lt;P&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, predicate: P) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        P: FnMut(<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Item) -&gt; bool,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>check&lt;T&gt;(<span class=\"kw-2\">mut </span>predicate: <span class=\"kw\">impl </span>FnMut(<span class=\"kw-2\">&amp;</span>T) -&gt; bool) -&gt; <span class=\"kw\">impl </span>FnMut((), T) -&gt; ControlFlow&lt;T&gt; {\n            <span class=\"kw\">move </span>|(), x| {\n                <span class=\"kw\">if </span>predicate(<span class=\"kw-2\">&amp;</span>x) { ControlFlow::Break(x) } <span class=\"kw\">else </span>{ ControlFlow::Continue(()) }\n            }\n        }\n\n        <span class=\"self\">self</span>.try_fold((), check(predicate)).break_value()\n    }\n\n    <span class=\"doccomment\">/// Applies function to the elements of iterator and returns\n    /// the first non-none result.\n    ///\n    /// `iter.find_map(f)` is equivalent to `iter.filter_map(f).next()`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [\"lol\", \"NaN\", \"2\", \"5\"];\n    ///\n    /// let first_number = a.iter().find_map(|s| s.parse().ok());\n    ///\n    /// assert_eq!(first_number, Some(2));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"iterator_find_map\"</span>, since = <span class=\"string\">\"1.30.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>find_map&lt;B, F&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, f: F) -&gt; <span class=\"prelude-ty\">Option</span>&lt;B&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"self\">Self</span>::Item) -&gt; <span class=\"prelude-ty\">Option</span>&lt;B&gt;,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>check&lt;T, B&gt;(<span class=\"kw-2\">mut </span>f: <span class=\"kw\">impl </span>FnMut(T) -&gt; <span class=\"prelude-ty\">Option</span>&lt;B&gt;) -&gt; <span class=\"kw\">impl </span>FnMut((), T) -&gt; ControlFlow&lt;B&gt; {\n            <span class=\"kw\">move </span>|(), x| <span class=\"kw\">match </span>f(x) {\n                <span class=\"prelude-val\">Some</span>(x) =&gt; ControlFlow::Break(x),\n                <span class=\"prelude-val\">None </span>=&gt; ControlFlow::Continue(()),\n            }\n        }\n\n        <span class=\"self\">self</span>.try_fold((), check(f)).break_value()\n    }\n\n    <span class=\"doccomment\">/// Applies function to the elements of iterator and returns\n    /// the first true result or the first error.\n    ///\n    /// The return type of this method depends on the return type of the closure.\n    /// If you return `Result&lt;bool, E&gt;` from the closure, you'll get a `Result&lt;Option&lt;Self::Item&gt;, E&gt;`.\n    /// If you return `Option&lt;bool&gt;` from the closure, you'll get an `Option&lt;Option&lt;Self::Item&gt;&gt;`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(try_find)]\n    ///\n    /// let a = [\"1\", \"2\", \"lol\", \"NaN\", \"5\"];\n    ///\n    /// let is_my_num = |s: &amp;str, search: i32| -&gt; Result&lt;bool, std::num::ParseIntError&gt; {\n    ///     Ok(s.parse::&lt;i32&gt;()?  == search)\n    /// };\n    ///\n    /// let result = a.iter().try_find(|&amp;&amp;s| is_my_num(s, 2));\n    /// assert_eq!(result, Ok(Some(&amp;\"2\")));\n    ///\n    /// let result = a.iter().try_find(|&amp;&amp;s| is_my_num(s, 5));\n    /// assert!(result.is_err());\n    /// ```\n    ///\n    /// This also supports other types which implement [`Try`], not just [`Result`].\n    ///\n    /// ```\n    /// #![feature(try_find)]\n    ///\n    /// use std::num::NonZero;\n    ///\n    /// let a = [3, 5, 7, 4, 9, 0, 11u32];\n    /// let result = a.iter().try_find(|&amp;&amp;x| NonZero::new(x).map(|y| y.is_power_of_two()));\n    /// assert_eq!(result, Some(Some(&amp;4)));\n    /// let result = a.iter().take(3).try_find(|&amp;&amp;x| NonZero::new(x).map(|y| y.is_power_of_two()));\n    /// assert_eq!(result, Some(None));\n    /// let result = a.iter().rev().try_find(|&amp;&amp;x| NonZero::new(x).map(|y| y.is_power_of_two()));\n    /// assert_eq!(result, None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"try_find\"</span>, reason = <span class=\"string\">\"new API\"</span>, issue = <span class=\"string\">\"63178\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>try_find&lt;F, R&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, f: F) -&gt; ChangeOutputType&lt;R, <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt;&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Item) -&gt; R,\n        R: Try&lt;Output = bool&gt;,\n        R::Residual: Residual&lt;<span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt;&gt;,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>check&lt;I, V, R&gt;(\n            <span class=\"kw-2\">mut </span>f: <span class=\"kw\">impl </span>FnMut(<span class=\"kw-2\">&amp;</span>I) -&gt; V,\n        ) -&gt; <span class=\"kw\">impl </span>FnMut((), I) -&gt; ControlFlow&lt;R::TryType&gt;\n        <span class=\"kw\">where\n            </span>V: Try&lt;Output = bool, Residual = R&gt;,\n            R: Residual&lt;<span class=\"prelude-ty\">Option</span>&lt;I&gt;&gt;,\n        {\n            <span class=\"kw\">move </span>|(), x| <span class=\"kw\">match </span>f(<span class=\"kw-2\">&amp;</span>x).branch() {\n                ControlFlow::Continue(<span class=\"bool-val\">false</span>) =&gt; ControlFlow::Continue(()),\n                ControlFlow::Continue(<span class=\"bool-val\">true</span>) =&gt; ControlFlow::Break(Try::from_output(<span class=\"prelude-val\">Some</span>(x))),\n                ControlFlow::Break(r) =&gt; ControlFlow::Break(FromResidual::from_residual(r)),\n            }\n        }\n\n        <span class=\"kw\">match </span><span class=\"self\">self</span>.try_fold((), check(f)) {\n            ControlFlow::Break(x) =&gt; x,\n            ControlFlow::Continue(()) =&gt; Try::from_output(<span class=\"prelude-val\">None</span>),\n        }\n    }\n\n    <span class=\"doccomment\">/// Searches for an element in an iterator, returning its index.\n    ///\n    /// `position()` takes a closure that returns `true` or `false`. It applies\n    /// this closure to each element of the iterator, and if one of them\n    /// returns `true`, then `position()` returns [`Some(index)`]. If all of\n    /// them return `false`, it returns [`None`].\n    ///\n    /// `position()` is short-circuiting; in other words, it will stop\n    /// processing as soon as it finds a `true`.\n    ///\n    /// # Overflow Behavior\n    ///\n    /// The method does no guarding against overflows, so if there are more\n    /// than [`usize::MAX`] non-matching elements, it either produces the wrong\n    /// result or panics. If debug assertions are enabled, a panic is\n    /// guaranteed.\n    ///\n    /// # Panics\n    ///\n    /// This function might panic if the iterator has more than `usize::MAX`\n    /// non-matching elements.\n    ///\n    /// [`Some(index)`]: Some\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// assert_eq!(a.iter().position(|&amp;x| x == 2), Some(1));\n    ///\n    /// assert_eq!(a.iter().position(|&amp;x| x == 5), None);\n    /// ```\n    ///\n    /// Stopping at the first `true`:\n    ///\n    /// ```\n    /// let a = [1, 2, 3, 4];\n    ///\n    /// let mut iter = a.iter();\n    ///\n    /// assert_eq!(iter.position(|&amp;x| x &gt;= 2), Some(1));\n    ///\n    /// // we can still use `iter`, as there are more elements.\n    /// assert_eq!(iter.next(), Some(&amp;3));\n    ///\n    /// // The returned index depends on iterator state\n    /// assert_eq!(iter.position(|&amp;x| x == 4), Some(0));\n    ///\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>position&lt;P&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, predicate: P) -&gt; <span class=\"prelude-ty\">Option</span>&lt;usize&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        P: FnMut(<span class=\"self\">Self</span>::Item) -&gt; bool,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>check&lt;<span class=\"lifetime\">'a</span>, T&gt;(\n            <span class=\"kw-2\">mut </span>predicate: <span class=\"kw\">impl </span>FnMut(T) -&gt; bool + <span class=\"lifetime\">'a</span>,\n            acc: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>usize,\n        ) -&gt; <span class=\"kw\">impl </span>FnMut((), T) -&gt; ControlFlow&lt;usize, ()&gt; + <span class=\"lifetime\">'a </span>{\n            <span class=\"attr\">#[rustc_inherit_overflow_checks]\n            </span><span class=\"kw\">move </span>|<span class=\"kw\">_</span>, x| {\n                <span class=\"kw\">if </span>predicate(x) {\n                    ControlFlow::Break(<span class=\"kw-2\">*</span>acc)\n                } <span class=\"kw\">else </span>{\n                    <span class=\"kw-2\">*</span>acc += <span class=\"number\">1</span>;\n                    ControlFlow::Continue(())\n                }\n            }\n        }\n\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>acc = <span class=\"number\">0</span>;\n        <span class=\"self\">self</span>.try_fold((), check(predicate, <span class=\"kw-2\">&amp;mut </span>acc)).break_value()\n    }\n\n    <span class=\"doccomment\">/// Searches for an element in an iterator from the right, returning its\n    /// index.\n    ///\n    /// `rposition()` takes a closure that returns `true` or `false`. It applies\n    /// this closure to each element of the iterator, starting from the end,\n    /// and if one of them returns `true`, then `rposition()` returns\n    /// [`Some(index)`]. If all of them return `false`, it returns [`None`].\n    ///\n    /// `rposition()` is short-circuiting; in other words, it will stop\n    /// processing as soon as it finds a `true`.\n    ///\n    /// [`Some(index)`]: Some\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// assert_eq!(a.iter().rposition(|&amp;x| x == 3), Some(2));\n    ///\n    /// assert_eq!(a.iter().rposition(|&amp;x| x == 5), None);\n    /// ```\n    ///\n    /// Stopping at the first `true`:\n    ///\n    /// ```\n    /// let a = [-1, 2, 3, 4];\n    ///\n    /// let mut iter = a.iter();\n    ///\n    /// assert_eq!(iter.rposition(|&amp;x| x &gt;= 2), Some(3));\n    ///\n    /// // we can still use `iter`, as there are more elements.\n    /// assert_eq!(iter.next(), Some(&amp;-1));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>rposition&lt;P&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, predicate: P) -&gt; <span class=\"prelude-ty\">Option</span>&lt;usize&gt;\n    <span class=\"kw\">where\n        </span>P: FnMut(<span class=\"self\">Self</span>::Item) -&gt; bool,\n        <span class=\"self\">Self</span>: Sized + ExactSizeIterator + DoubleEndedIterator,\n    {\n        <span class=\"comment\">// No need for an overflow check here, because `ExactSizeIterator`\n        // implies that the number of elements fits into a `usize`.\n        </span><span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>check&lt;T&gt;(\n            <span class=\"kw-2\">mut </span>predicate: <span class=\"kw\">impl </span>FnMut(T) -&gt; bool,\n        ) -&gt; <span class=\"kw\">impl </span>FnMut(usize, T) -&gt; ControlFlow&lt;usize, usize&gt; {\n            <span class=\"kw\">move </span>|i, x| {\n                <span class=\"kw\">let </span>i = i - <span class=\"number\">1</span>;\n                <span class=\"kw\">if </span>predicate(x) { ControlFlow::Break(i) } <span class=\"kw\">else </span>{ ControlFlow::Continue(i) }\n            }\n        }\n\n        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.len();\n        <span class=\"self\">self</span>.try_rfold(n, check(predicate)).break_value()\n    }\n\n    <span class=\"doccomment\">/// Returns the maximum element of an iterator.\n    ///\n    /// If several elements are equally maximum, the last element is\n    /// returned. If the iterator is empty, [`None`] is returned.\n    ///\n    /// Note that [`f32`]/[`f64`] doesn't implement [`Ord`] due to NaN being\n    /// incomparable. You can work around this by using [`Iterator::reduce`]:\n    /// ```\n    /// assert_eq!(\n    ///     [2.4, f32::NAN, 1.3]\n    ///         .into_iter()\n    ///         .reduce(f32::max)\n    ///         .unwrap(),\n    ///     2.4\n    /// );\n    /// ```\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    /// let b: Vec&lt;u32&gt; = Vec::new();\n    ///\n    /// assert_eq!(a.iter().max(), Some(&amp;3));\n    /// assert_eq!(b.iter().max(), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>max(<span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        <span class=\"self\">Self</span>::Item: Ord,\n    {\n        <span class=\"self\">self</span>.max_by(Ord::cmp)\n    }\n\n    <span class=\"doccomment\">/// Returns the minimum element of an iterator.\n    ///\n    /// If several elements are equally minimum, the first element is returned.\n    /// If the iterator is empty, [`None`] is returned.\n    ///\n    /// Note that [`f32`]/[`f64`] doesn't implement [`Ord`] due to NaN being\n    /// incomparable. You can work around this by using [`Iterator::reduce`]:\n    /// ```\n    /// assert_eq!(\n    ///     [2.4, f32::NAN, 1.3]\n    ///         .into_iter()\n    ///         .reduce(f32::min)\n    ///         .unwrap(),\n    ///     1.3\n    /// );\n    /// ```\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    /// let b: Vec&lt;u32&gt; = Vec::new();\n    ///\n    /// assert_eq!(a.iter().min(), Some(&amp;1));\n    /// assert_eq!(b.iter().min(), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>min(<span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        <span class=\"self\">Self</span>::Item: Ord,\n    {\n        <span class=\"self\">self</span>.min_by(Ord::cmp)\n    }\n\n    <span class=\"doccomment\">/// Returns the element that gives the maximum value from the\n    /// specified function.\n    ///\n    /// If several elements are equally maximum, the last element is\n    /// returned. If the iterator is empty, [`None`] is returned.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [-3_i32, 0, 1, 5, -10];\n    /// assert_eq!(*a.iter().max_by_key(|x| x.abs()).unwrap(), -10);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"iter_cmp_by_key\"</span>, since = <span class=\"string\">\"1.6.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>max_by_key&lt;B: Ord, F&gt;(<span class=\"self\">self</span>, f: F) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Item) -&gt; B,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>key&lt;T, B&gt;(<span class=\"kw-2\">mut </span>f: <span class=\"kw\">impl </span>FnMut(<span class=\"kw-2\">&amp;</span>T) -&gt; B) -&gt; <span class=\"kw\">impl </span>FnMut(T) -&gt; (B, T) {\n            <span class=\"kw\">move </span>|x| (f(<span class=\"kw-2\">&amp;</span>x), x)\n        }\n\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>compare&lt;T, B: Ord&gt;((x_p, <span class=\"kw\">_</span>): <span class=\"kw-2\">&amp;</span>(B, T), (y_p, <span class=\"kw\">_</span>): <span class=\"kw-2\">&amp;</span>(B, T)) -&gt; Ordering {\n            x_p.cmp(y_p)\n        }\n\n        <span class=\"kw\">let </span>(<span class=\"kw\">_</span>, x) = <span class=\"self\">self</span>.map(key(f)).max_by(compare)<span class=\"question-mark\">?</span>;\n        <span class=\"prelude-val\">Some</span>(x)\n    }\n\n    <span class=\"doccomment\">/// Returns the element that gives the maximum value with respect to the\n    /// specified comparison function.\n    ///\n    /// If several elements are equally maximum, the last element is\n    /// returned. If the iterator is empty, [`None`] is returned.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [-3_i32, 0, 1, 5, -10];\n    /// assert_eq!(*a.iter().max_by(|x, y| x.cmp(y)).unwrap(), 5);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"iter_max_by\"</span>, since = <span class=\"string\">\"1.15.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>max_by&lt;F&gt;(<span class=\"self\">self</span>, compare: F) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Item, <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Item) -&gt; Ordering,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>fold&lt;T&gt;(<span class=\"kw-2\">mut </span>compare: <span class=\"kw\">impl </span>FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; Ordering) -&gt; <span class=\"kw\">impl </span>FnMut(T, T) -&gt; T {\n            <span class=\"kw\">move </span>|x, y| cmp::max_by(x, y, <span class=\"kw-2\">&amp;mut </span>compare)\n        }\n\n        <span class=\"self\">self</span>.reduce(fold(compare))\n    }\n\n    <span class=\"doccomment\">/// Returns the element that gives the minimum value from the\n    /// specified function.\n    ///\n    /// If several elements are equally minimum, the first element is\n    /// returned. If the iterator is empty, [`None`] is returned.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [-3_i32, 0, 1, 5, -10];\n    /// assert_eq!(*a.iter().min_by_key(|x| x.abs()).unwrap(), 0);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"iter_cmp_by_key\"</span>, since = <span class=\"string\">\"1.6.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>min_by_key&lt;B: Ord, F&gt;(<span class=\"self\">self</span>, f: F) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Item) -&gt; B,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>key&lt;T, B&gt;(<span class=\"kw-2\">mut </span>f: <span class=\"kw\">impl </span>FnMut(<span class=\"kw-2\">&amp;</span>T) -&gt; B) -&gt; <span class=\"kw\">impl </span>FnMut(T) -&gt; (B, T) {\n            <span class=\"kw\">move </span>|x| (f(<span class=\"kw-2\">&amp;</span>x), x)\n        }\n\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>compare&lt;T, B: Ord&gt;((x_p, <span class=\"kw\">_</span>): <span class=\"kw-2\">&amp;</span>(B, T), (y_p, <span class=\"kw\">_</span>): <span class=\"kw-2\">&amp;</span>(B, T)) -&gt; Ordering {\n            x_p.cmp(y_p)\n        }\n\n        <span class=\"kw\">let </span>(<span class=\"kw\">_</span>, x) = <span class=\"self\">self</span>.map(key(f)).min_by(compare)<span class=\"question-mark\">?</span>;\n        <span class=\"prelude-val\">Some</span>(x)\n    }\n\n    <span class=\"doccomment\">/// Returns the element that gives the minimum value with respect to the\n    /// specified comparison function.\n    ///\n    /// If several elements are equally minimum, the first element is\n    /// returned. If the iterator is empty, [`None`] is returned.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [-3_i32, 0, 1, 5, -10];\n    /// assert_eq!(*a.iter().min_by(|x, y| x.cmp(y)).unwrap(), -10);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"iter_min_by\"</span>, since = <span class=\"string\">\"1.15.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>min_by&lt;F&gt;(<span class=\"self\">self</span>, compare: F) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Item, <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Item) -&gt; Ordering,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>fold&lt;T&gt;(<span class=\"kw-2\">mut </span>compare: <span class=\"kw\">impl </span>FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; Ordering) -&gt; <span class=\"kw\">impl </span>FnMut(T, T) -&gt; T {\n            <span class=\"kw\">move </span>|x, y| cmp::min_by(x, y, <span class=\"kw-2\">&amp;mut </span>compare)\n        }\n\n        <span class=\"self\">self</span>.reduce(fold(compare))\n    }\n\n    <span class=\"doccomment\">/// Reverses an iterator's direction.\n    ///\n    /// Usually, iterators iterate from left to right. After using `rev()`,\n    /// an iterator will instead iterate from right to left.\n    ///\n    /// This is only possible if the iterator has an end, so `rev()` only\n    /// works on [`DoubleEndedIterator`]s.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut iter = a.iter().rev();\n    ///\n    /// assert_eq!(iter.next(), Some(&amp;3));\n    /// assert_eq!(iter.next(), Some(&amp;2));\n    /// assert_eq!(iter.next(), Some(&amp;1));\n    ///\n    /// assert_eq!(iter.next(), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[doc(alias = <span class=\"string\">\"reverse\"</span>)]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>rev(<span class=\"self\">self</span>) -&gt; Rev&lt;<span class=\"self\">Self</span>&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized + DoubleEndedIterator,\n    {\n        Rev::new(<span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// Converts an iterator of pairs into a pair of containers.\n    ///\n    /// `unzip()` consumes an entire iterator of pairs, producing two\n    /// collections: one from the left elements of the pairs, and one\n    /// from the right elements.\n    ///\n    /// This function is, in some sense, the opposite of [`zip`].\n    ///\n    /// [`zip`]: Iterator::zip\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [(1, 2), (3, 4), (5, 6)];\n    ///\n    /// let (left, right): (Vec&lt;_&gt;, Vec&lt;_&gt;) = a.iter().cloned().unzip();\n    ///\n    /// assert_eq!(left, [1, 3, 5]);\n    /// assert_eq!(right, [2, 4, 6]);\n    ///\n    /// // you can also unzip multiple nested tuples at once\n    /// let a = [(1, (2, 3)), (4, (5, 6))];\n    ///\n    /// let (x, (y, z)): (Vec&lt;_&gt;, (Vec&lt;_&gt;, Vec&lt;_&gt;)) = a.iter().cloned().unzip();\n    /// assert_eq!(x, [1, 4]);\n    /// assert_eq!(y, [2, 5]);\n    /// assert_eq!(z, [3, 6]);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>unzip&lt;A, B, FromA, FromB&gt;(<span class=\"self\">self</span>) -&gt; (FromA, FromB)\n    <span class=\"kw\">where\n        </span>FromA: Default + Extend&lt;A&gt;,\n        FromB: Default + Extend&lt;B&gt;,\n        <span class=\"self\">Self</span>: Sized + Iterator&lt;Item = (A, B)&gt;,\n    {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>unzipped: (FromA, FromB) = Default::default();\n        unzipped.extend(<span class=\"self\">self</span>);\n        unzipped\n    }\n\n    <span class=\"doccomment\">/// Creates an iterator which copies all of its elements.\n    ///\n    /// This is useful when you have an iterator over `&amp;T`, but you need an\n    /// iterator over `T`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let v_copied: Vec&lt;_&gt; = a.iter().copied().collect();\n    ///\n    /// // copied is the same as .map(|&amp;x| x)\n    /// let v_map: Vec&lt;_&gt; = a.iter().map(|&amp;x| x).collect();\n    ///\n    /// assert_eq!(v_copied, vec![1, 2, 3]);\n    /// assert_eq!(v_map, vec![1, 2, 3]);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"iter_copied\"</span>, since = <span class=\"string\">\"1.36.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>copied&lt;<span class=\"lifetime\">'a</span>, T: <span class=\"lifetime\">'a</span>&gt;(<span class=\"self\">self</span>) -&gt; Copied&lt;<span class=\"self\">Self</span>&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized + Iterator&lt;Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>T&gt;,\n        T: Copy,\n    {\n        Copied::new(<span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// Creates an iterator which [`clone`]s all of its elements.\n    ///\n    /// This is useful when you have an iterator over `&amp;T`, but you need an\n    /// iterator over `T`.\n    ///\n    /// There is no guarantee whatsoever about the `clone` method actually\n    /// being called *or* optimized away. So code should not depend on\n    /// either.\n    ///\n    /// [`clone`]: Clone::clone\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let v_cloned: Vec&lt;_&gt; = a.iter().cloned().collect();\n    ///\n    /// // cloned is the same as .map(|&amp;x| x), for integers\n    /// let v_map: Vec&lt;_&gt; = a.iter().map(|&amp;x| x).collect();\n    ///\n    /// assert_eq!(v_cloned, vec![1, 2, 3]);\n    /// assert_eq!(v_map, vec![1, 2, 3]);\n    /// ```\n    ///\n    /// To get the best performance, try to clone late:\n    ///\n    /// ```\n    /// let a = [vec![0_u8, 1, 2], vec![3, 4], vec![23]];\n    /// // don't do this:\n    /// let slower: Vec&lt;_&gt; = a.iter().cloned().filter(|s| s.len() == 1).collect();\n    /// assert_eq!(&amp;[vec![23]], &amp;slower[..]);\n    /// // instead call `cloned` late\n    /// let faster: Vec&lt;_&gt; = a.iter().filter(|s| s.len() == 1).cloned().collect();\n    /// assert_eq!(&amp;[vec![23]], &amp;faster[..]);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>cloned&lt;<span class=\"lifetime\">'a</span>, T: <span class=\"lifetime\">'a</span>&gt;(<span class=\"self\">self</span>) -&gt; Cloned&lt;<span class=\"self\">Self</span>&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized + Iterator&lt;Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>T&gt;,\n        T: Clone,\n    {\n        Cloned::new(<span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// Repeats an iterator endlessly.\n    ///\n    /// Instead of stopping at [`None`], the iterator will instead start again,\n    /// from the beginning. After iterating again, it will start at the\n    /// beginning again. And again. And again. Forever. Note that in case the\n    /// original iterator is empty, the resulting iterator will also be empty.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    ///\n    /// let mut it = a.iter().cycle();\n    ///\n    /// assert_eq!(it.next(), Some(&amp;1));\n    /// assert_eq!(it.next(), Some(&amp;2));\n    /// assert_eq!(it.next(), Some(&amp;3));\n    /// assert_eq!(it.next(), Some(&amp;1));\n    /// assert_eq!(it.next(), Some(&amp;2));\n    /// assert_eq!(it.next(), Some(&amp;3));\n    /// assert_eq!(it.next(), Some(&amp;1));\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[inline]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>cycle(<span class=\"self\">self</span>) -&gt; Cycle&lt;<span class=\"self\">Self</span>&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized + Clone,\n    {\n        Cycle::new(<span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// Returns an iterator over `N` elements of the iterator at a time.\n    ///\n    /// The chunks do not overlap. If `N` does not divide the length of the\n    /// iterator, then the last up to `N-1` elements will be omitted and can be\n    /// retrieved from the [`.into_remainder()`][ArrayChunks::into_remainder]\n    /// function of the iterator.\n    ///\n    /// # Panics\n    ///\n    /// Panics if `N` is 0.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// #![feature(iter_array_chunks)]\n    ///\n    /// let mut iter = \"lorem\".chars().array_chunks();\n    /// assert_eq!(iter.next(), Some(['l', 'o']));\n    /// assert_eq!(iter.next(), Some(['r', 'e']));\n    /// assert_eq!(iter.next(), None);\n    /// assert_eq!(iter.into_remainder().unwrap().as_slice(), &amp;['m']);\n    /// ```\n    ///\n    /// ```\n    /// #![feature(iter_array_chunks)]\n    ///\n    /// let data = [1, 1, 2, -2, 6, 0, 3, 1];\n    /// //          ^-----^  ^------^\n    /// for [x, y, z] in data.iter().array_chunks() {\n    ///     assert_eq!(x + y + z, 4);\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[track_caller]\n    #[unstable(feature = <span class=\"string\">\"iter_array_chunks\"</span>, reason = <span class=\"string\">\"recently added\"</span>, issue = <span class=\"string\">\"100450\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>array_chunks&lt;<span class=\"kw\">const </span>N: usize&gt;(<span class=\"self\">self</span>) -&gt; ArrayChunks&lt;<span class=\"self\">Self</span>, N&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n    {\n        ArrayChunks::new(<span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// Sums the elements of an iterator.\n    ///\n    /// Takes each element, adds them together, and returns the result.\n    ///\n    /// An empty iterator returns the zero value of the type.\n    ///\n    /// `sum()` can be used to sum any type implementing [`Sum`][`core::iter::Sum`],\n    /// including [`Option`][`Option::sum`] and [`Result`][`Result::sum`].\n    ///\n    /// # Panics\n    ///\n    /// When calling `sum()` and a primitive integer type is being returned, this\n    /// method will panic if the computation overflows and debug assertions are\n    /// enabled.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let a = [1, 2, 3];\n    /// let sum: i32 = a.iter().sum();\n    ///\n    /// assert_eq!(sum, 6);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"iter_arith\"</span>, since = <span class=\"string\">\"1.11.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>sum&lt;S&gt;(<span class=\"self\">self</span>) -&gt; S\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        S: Sum&lt;<span class=\"self\">Self</span>::Item&gt;,\n    {\n        Sum::sum(<span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// Iterates over the entire iterator, multiplying all the elements\n    ///\n    /// An empty iterator returns the one value of the type.\n    ///\n    /// `product()` can be used to multiply any type implementing [`Product`][`core::iter::Product`],\n    /// including [`Option`][`Option::product`] and [`Result`][`Result::product`].\n    ///\n    /// # Panics\n    ///\n    /// When calling `product()` and a primitive integer type is being returned,\n    /// method will panic if the computation overflows and debug assertions are\n    /// enabled.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// fn factorial(n: u32) -&gt; u32 {\n    ///     (1..=n).product()\n    /// }\n    /// assert_eq!(factorial(0), 1);\n    /// assert_eq!(factorial(1), 1);\n    /// assert_eq!(factorial(5), 120);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"iter_arith\"</span>, since = <span class=\"string\">\"1.11.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>product&lt;P&gt;(<span class=\"self\">self</span>) -&gt; P\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        P: Product&lt;<span class=\"self\">Self</span>::Item&gt;,\n    {\n        Product::product(<span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// [Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\n    /// of another.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::cmp::Ordering;\n    ///\n    /// assert_eq!([1].iter().cmp([1].iter()), Ordering::Equal);\n    /// assert_eq!([1].iter().cmp([1, 2].iter()), Ordering::Less);\n    /// assert_eq!([1, 2].iter().cmp([1].iter()), Ordering::Greater);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"iter_order\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>cmp&lt;I&gt;(<span class=\"self\">self</span>, other: I) -&gt; Ordering\n    <span class=\"kw\">where\n        </span>I: IntoIterator&lt;Item = <span class=\"self\">Self</span>::Item&gt;,\n        <span class=\"self\">Self</span>::Item: Ord,\n        <span class=\"self\">Self</span>: Sized,\n    {\n        <span class=\"self\">self</span>.cmp_by(other, |x, y| x.cmp(<span class=\"kw-2\">&amp;</span>y))\n    }\n\n    <span class=\"doccomment\">/// [Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\n    /// of another with respect to the specified comparison function.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(iter_order_by)]\n    ///\n    /// use std::cmp::Ordering;\n    ///\n    /// let xs = [1, 2, 3, 4];\n    /// let ys = [1, 4, 9, 16];\n    ///\n    /// assert_eq!(xs.iter().cmp_by(&amp;ys, |&amp;x, &amp;y| x.cmp(&amp;y)), Ordering::Less);\n    /// assert_eq!(xs.iter().cmp_by(&amp;ys, |&amp;x, &amp;y| (x * x).cmp(&amp;y)), Ordering::Equal);\n    /// assert_eq!(xs.iter().cmp_by(&amp;ys, |&amp;x, &amp;y| (2 * x).cmp(&amp;y)), Ordering::Greater);\n    /// ```\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"iter_order_by\"</span>, issue = <span class=\"string\">\"64295\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>cmp_by&lt;I, F&gt;(<span class=\"self\">self</span>, other: I, cmp: F) -&gt; Ordering\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        I: IntoIterator,\n        F: FnMut(<span class=\"self\">Self</span>::Item, I::Item) -&gt; Ordering,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>compare&lt;X, Y, F&gt;(<span class=\"kw-2\">mut </span>cmp: F) -&gt; <span class=\"kw\">impl </span>FnMut(X, Y) -&gt; ControlFlow&lt;Ordering&gt;\n        <span class=\"kw\">where\n            </span>F: FnMut(X, Y) -&gt; Ordering,\n        {\n            <span class=\"kw\">move </span>|x, y| <span class=\"kw\">match </span>cmp(x, y) {\n                Ordering::Equal =&gt; ControlFlow::Continue(()),\n                non_eq =&gt; ControlFlow::Break(non_eq),\n            }\n        }\n\n        <span class=\"kw\">match </span>iter_compare(<span class=\"self\">self</span>, other.into_iter(), compare(cmp)) {\n            ControlFlow::Continue(ord) =&gt; ord,\n            ControlFlow::Break(ord) =&gt; ord,\n        }\n    }\n\n    <span class=\"doccomment\">/// [Lexicographically](Ord#lexicographical-comparison) compares the [`PartialOrd`] elements of\n    /// this [`Iterator`] with those of another. The comparison works like short-circuit\n    /// evaluation, returning a result without comparing the remaining elements.\n    /// As soon as an order can be determined, the evaluation stops and a result is returned.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::cmp::Ordering;\n    ///\n    /// assert_eq!([1.].iter().partial_cmp([1.].iter()), Some(Ordering::Equal));\n    /// assert_eq!([1.].iter().partial_cmp([1., 2.].iter()), Some(Ordering::Less));\n    /// assert_eq!([1., 2.].iter().partial_cmp([1.].iter()), Some(Ordering::Greater));\n    /// ```\n    ///\n    /// For floating-point numbers, NaN does not have a total order and will result\n    /// in `None` when compared:\n    ///\n    /// ```\n    /// assert_eq!([f64::NAN].iter().partial_cmp([1.].iter()), None);\n    /// ```\n    ///\n    /// The results are determined by the order of evaluation.\n    ///\n    /// ```\n    /// use std::cmp::Ordering;\n    ///\n    /// assert_eq!([1.0, f64::NAN].iter().partial_cmp([2.0, f64::NAN].iter()), Some(Ordering::Less));\n    /// assert_eq!([2.0, f64::NAN].iter().partial_cmp([1.0, f64::NAN].iter()), Some(Ordering::Greater));\n    /// assert_eq!([f64::NAN, 1.0].iter().partial_cmp([f64::NAN, 2.0].iter()), None);\n    /// ```\n    ///\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"iter_order\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>partial_cmp&lt;I&gt;(<span class=\"self\">self</span>, other: I) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Ordering&gt;\n    <span class=\"kw\">where\n        </span>I: IntoIterator,\n        <span class=\"self\">Self</span>::Item: PartialOrd&lt;I::Item&gt;,\n        <span class=\"self\">Self</span>: Sized,\n    {\n        <span class=\"self\">self</span>.partial_cmp_by(other, |x, y| x.partial_cmp(<span class=\"kw-2\">&amp;</span>y))\n    }\n\n    <span class=\"doccomment\">/// [Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\n    /// of another with respect to the specified comparison function.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(iter_order_by)]\n    ///\n    /// use std::cmp::Ordering;\n    ///\n    /// let xs = [1.0, 2.0, 3.0, 4.0];\n    /// let ys = [1.0, 4.0, 9.0, 16.0];\n    ///\n    /// assert_eq!(\n    ///     xs.iter().partial_cmp_by(&amp;ys, |&amp;x, &amp;y| x.partial_cmp(&amp;y)),\n    ///     Some(Ordering::Less)\n    /// );\n    /// assert_eq!(\n    ///     xs.iter().partial_cmp_by(&amp;ys, |&amp;x, &amp;y| (x * x).partial_cmp(&amp;y)),\n    ///     Some(Ordering::Equal)\n    /// );\n    /// assert_eq!(\n    ///     xs.iter().partial_cmp_by(&amp;ys, |&amp;x, &amp;y| (2.0 * x).partial_cmp(&amp;y)),\n    ///     Some(Ordering::Greater)\n    /// );\n    /// ```\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"iter_order_by\"</span>, issue = <span class=\"string\">\"64295\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>partial_cmp_by&lt;I, F&gt;(<span class=\"self\">self</span>, other: I, partial_cmp: F) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Ordering&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        I: IntoIterator,\n        F: FnMut(<span class=\"self\">Self</span>::Item, I::Item) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Ordering&gt;,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>compare&lt;X, Y, F&gt;(<span class=\"kw-2\">mut </span>partial_cmp: F) -&gt; <span class=\"kw\">impl </span>FnMut(X, Y) -&gt; ControlFlow&lt;<span class=\"prelude-ty\">Option</span>&lt;Ordering&gt;&gt;\n        <span class=\"kw\">where\n            </span>F: FnMut(X, Y) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Ordering&gt;,\n        {\n            <span class=\"kw\">move </span>|x, y| <span class=\"kw\">match </span>partial_cmp(x, y) {\n                <span class=\"prelude-val\">Some</span>(Ordering::Equal) =&gt; ControlFlow::Continue(()),\n                non_eq =&gt; ControlFlow::Break(non_eq),\n            }\n        }\n\n        <span class=\"kw\">match </span>iter_compare(<span class=\"self\">self</span>, other.into_iter(), compare(partial_cmp)) {\n            ControlFlow::Continue(ord) =&gt; <span class=\"prelude-val\">Some</span>(ord),\n            ControlFlow::Break(ord) =&gt; ord,\n        }\n    }\n\n    <span class=\"doccomment\">/// Determines if the elements of this [`Iterator`] are equal to those of\n    /// another.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!([1].iter().eq([1].iter()), true);\n    /// assert_eq!([1].iter().eq([1, 2].iter()), false);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"iter_order\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>eq&lt;I&gt;(<span class=\"self\">self</span>, other: I) -&gt; bool\n    <span class=\"kw\">where\n        </span>I: IntoIterator,\n        <span class=\"self\">Self</span>::Item: PartialEq&lt;I::Item&gt;,\n        <span class=\"self\">Self</span>: Sized,\n    {\n        <span class=\"self\">self</span>.eq_by(other, |x, y| x == y)\n    }\n\n    <span class=\"doccomment\">/// Determines if the elements of this [`Iterator`] are equal to those of\n    /// another with respect to the specified equality function.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(iter_order_by)]\n    ///\n    /// let xs = [1, 2, 3, 4];\n    /// let ys = [1, 4, 9, 16];\n    ///\n    /// assert!(xs.iter().eq_by(&amp;ys, |&amp;x, &amp;y| x * x == y));\n    /// ```\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"iter_order_by\"</span>, issue = <span class=\"string\">\"64295\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>eq_by&lt;I, F&gt;(<span class=\"self\">self</span>, other: I, eq: F) -&gt; bool\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        I: IntoIterator,\n        F: FnMut(<span class=\"self\">Self</span>::Item, I::Item) -&gt; bool,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>compare&lt;X, Y, F&gt;(<span class=\"kw-2\">mut </span>eq: F) -&gt; <span class=\"kw\">impl </span>FnMut(X, Y) -&gt; ControlFlow&lt;()&gt;\n        <span class=\"kw\">where\n            </span>F: FnMut(X, Y) -&gt; bool,\n        {\n            <span class=\"kw\">move </span>|x, y| {\n                <span class=\"kw\">if </span>eq(x, y) { ControlFlow::Continue(()) } <span class=\"kw\">else </span>{ ControlFlow::Break(()) }\n            }\n        }\n\n        <span class=\"kw\">match </span>iter_compare(<span class=\"self\">self</span>, other.into_iter(), compare(eq)) {\n            ControlFlow::Continue(ord) =&gt; ord == Ordering::Equal,\n            ControlFlow::Break(()) =&gt; <span class=\"bool-val\">false</span>,\n        }\n    }\n\n    <span class=\"doccomment\">/// Determines if the elements of this [`Iterator`] are not equal to those of\n    /// another.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!([1].iter().ne([1].iter()), false);\n    /// assert_eq!([1].iter().ne([1, 2].iter()), true);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"iter_order\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>ne&lt;I&gt;(<span class=\"self\">self</span>, other: I) -&gt; bool\n    <span class=\"kw\">where\n        </span>I: IntoIterator,\n        <span class=\"self\">Self</span>::Item: PartialEq&lt;I::Item&gt;,\n        <span class=\"self\">Self</span>: Sized,\n    {\n        !<span class=\"self\">self</span>.eq(other)\n    }\n\n    <span class=\"doccomment\">/// Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\n    /// less than those of another.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!([1].iter().lt([1].iter()), false);\n    /// assert_eq!([1].iter().lt([1, 2].iter()), true);\n    /// assert_eq!([1, 2].iter().lt([1].iter()), false);\n    /// assert_eq!([1, 2].iter().lt([1, 2].iter()), false);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"iter_order\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>lt&lt;I&gt;(<span class=\"self\">self</span>, other: I) -&gt; bool\n    <span class=\"kw\">where\n        </span>I: IntoIterator,\n        <span class=\"self\">Self</span>::Item: PartialOrd&lt;I::Item&gt;,\n        <span class=\"self\">Self</span>: Sized,\n    {\n        <span class=\"self\">self</span>.partial_cmp(other) == <span class=\"prelude-val\">Some</span>(Ordering::Less)\n    }\n\n    <span class=\"doccomment\">/// Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\n    /// less or equal to those of another.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!([1].iter().le([1].iter()), true);\n    /// assert_eq!([1].iter().le([1, 2].iter()), true);\n    /// assert_eq!([1, 2].iter().le([1].iter()), false);\n    /// assert_eq!([1, 2].iter().le([1, 2].iter()), true);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"iter_order\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>le&lt;I&gt;(<span class=\"self\">self</span>, other: I) -&gt; bool\n    <span class=\"kw\">where\n        </span>I: IntoIterator,\n        <span class=\"self\">Self</span>::Item: PartialOrd&lt;I::Item&gt;,\n        <span class=\"self\">Self</span>: Sized,\n    {\n        <span class=\"macro\">matches!</span>(<span class=\"self\">self</span>.partial_cmp(other), <span class=\"prelude-val\">Some</span>(Ordering::Less | Ordering::Equal))\n    }\n\n    <span class=\"doccomment\">/// Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\n    /// greater than those of another.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!([1].iter().gt([1].iter()), false);\n    /// assert_eq!([1].iter().gt([1, 2].iter()), false);\n    /// assert_eq!([1, 2].iter().gt([1].iter()), true);\n    /// assert_eq!([1, 2].iter().gt([1, 2].iter()), false);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"iter_order\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>gt&lt;I&gt;(<span class=\"self\">self</span>, other: I) -&gt; bool\n    <span class=\"kw\">where\n        </span>I: IntoIterator,\n        <span class=\"self\">Self</span>::Item: PartialOrd&lt;I::Item&gt;,\n        <span class=\"self\">Self</span>: Sized,\n    {\n        <span class=\"self\">self</span>.partial_cmp(other) == <span class=\"prelude-val\">Some</span>(Ordering::Greater)\n    }\n\n    <span class=\"doccomment\">/// Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\n    /// greater than or equal to those of another.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// assert_eq!([1].iter().ge([1].iter()), true);\n    /// assert_eq!([1].iter().ge([1, 2].iter()), false);\n    /// assert_eq!([1, 2].iter().ge([1].iter()), true);\n    /// assert_eq!([1, 2].iter().ge([1, 2].iter()), true);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"iter_order\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>ge&lt;I&gt;(<span class=\"self\">self</span>, other: I) -&gt; bool\n    <span class=\"kw\">where\n        </span>I: IntoIterator,\n        <span class=\"self\">Self</span>::Item: PartialOrd&lt;I::Item&gt;,\n        <span class=\"self\">Self</span>: Sized,\n    {\n        <span class=\"macro\">matches!</span>(<span class=\"self\">self</span>.partial_cmp(other), <span class=\"prelude-val\">Some</span>(Ordering::Greater | Ordering::Equal))\n    }\n\n    <span class=\"doccomment\">/// Checks if the elements of this iterator are sorted.\n    ///\n    /// That is, for each element `a` and its following element `b`, `a &lt;= b` must hold. If the\n    /// iterator yields exactly zero or one element, `true` is returned.\n    ///\n    /// Note that if `Self::Item` is only `PartialOrd`, but not `Ord`, the above definition\n    /// implies that this function returns `false` if any two consecutive items are not\n    /// comparable.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(is_sorted)]\n    ///\n    /// assert!([1, 2, 2, 9].iter().is_sorted());\n    /// assert!(![1, 3, 2, 4].iter().is_sorted());\n    /// assert!([0].iter().is_sorted());\n    /// assert!(std::iter::empty::&lt;i32&gt;().is_sorted());\n    /// assert!(![0.0, 1.0, f32::NAN].iter().is_sorted());\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"is_sorted\"</span>, reason = <span class=\"string\">\"new API\"</span>, issue = <span class=\"string\">\"53485\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>is_sorted(<span class=\"self\">self</span>) -&gt; bool\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        <span class=\"self\">Self</span>::Item: PartialOrd,\n    {\n        <span class=\"self\">self</span>.is_sorted_by(|a, b| a &lt;= b)\n    }\n\n    <span class=\"doccomment\">/// Checks if the elements of this iterator are sorted using the given comparator function.\n    ///\n    /// Instead of using `PartialOrd::partial_cmp`, this function uses the given `compare`\n    /// function to determine whether two elements are to be considered in sorted order.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(is_sorted)]\n    ///\n    /// assert!([1, 2, 2, 9].iter().is_sorted_by(|a, b| a &lt;= b));\n    /// assert!(![1, 2, 2, 9].iter().is_sorted_by(|a, b| a &lt; b));\n    ///\n    /// assert!([0].iter().is_sorted_by(|a, b| true));\n    /// assert!([0].iter().is_sorted_by(|a, b| false));\n    ///\n    /// assert!(std::iter::empty::&lt;i32&gt;().is_sorted_by(|a, b| false));\n    /// assert!(std::iter::empty::&lt;i32&gt;().is_sorted_by(|a, b| true));\n    /// ```\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"is_sorted\"</span>, reason = <span class=\"string\">\"new API\"</span>, issue = <span class=\"string\">\"53485\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>is_sorted_by&lt;F&gt;(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, compare: F) -&gt; bool\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Item, <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Item) -&gt; bool,\n    {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>check&lt;<span class=\"lifetime\">'a</span>, T&gt;(\n            last: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>T,\n            <span class=\"kw-2\">mut </span>compare: <span class=\"kw\">impl </span>FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool + <span class=\"lifetime\">'a</span>,\n        ) -&gt; <span class=\"kw\">impl </span>FnMut(T) -&gt; bool + <span class=\"lifetime\">'a </span>{\n            <span class=\"kw\">move </span>|curr| {\n                <span class=\"kw\">if </span>!compare(<span class=\"kw-2\">&amp;</span>last, <span class=\"kw-2\">&amp;</span>curr) {\n                    <span class=\"kw\">return </span><span class=\"bool-val\">false</span>;\n                }\n                <span class=\"kw-2\">*</span>last = curr;\n                <span class=\"bool-val\">true\n            </span>}\n        }\n\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>last = <span class=\"kw\">match </span><span class=\"self\">self</span>.next() {\n            <span class=\"prelude-val\">Some</span>(e) =&gt; e,\n            <span class=\"prelude-val\">None </span>=&gt; <span class=\"kw\">return </span><span class=\"bool-val\">true</span>,\n        };\n\n        <span class=\"self\">self</span>.all(check(<span class=\"kw-2\">&amp;mut </span>last, compare))\n    }\n\n    <span class=\"doccomment\">/// Checks if the elements of this iterator are sorted using the given key extraction\n    /// function.\n    ///\n    /// Instead of comparing the iterator's elements directly, this function compares the keys of\n    /// the elements, as determined by `f`. Apart from that, it's equivalent to [`is_sorted`]; see\n    /// its documentation for more information.\n    ///\n    /// [`is_sorted`]: Iterator::is_sorted\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(is_sorted)]\n    ///\n    /// assert!([\"c\", \"bb\", \"aaa\"].iter().is_sorted_by_key(|s| s.len()));\n    /// assert!(![-2i32, -1, 0, 3].iter().is_sorted_by_key(|n| n.abs()));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"is_sorted\"</span>, reason = <span class=\"string\">\"new API\"</span>, issue = <span class=\"string\">\"53485\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">fn </span>is_sorted_by_key&lt;F, K&gt;(<span class=\"self\">self</span>, f: F) -&gt; bool\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: Sized,\n        F: FnMut(<span class=\"self\">Self</span>::Item) -&gt; K,\n        K: PartialOrd,\n    {\n        <span class=\"self\">self</span>.map(f).is_sorted()\n    }\n\n    <span class=\"doccomment\">/// See [TrustedRandomAccess][super::super::TrustedRandomAccess]\n    </span><span class=\"comment\">// The unusual name is to avoid name collisions in method resolution\n    // see #76479.\n    </span><span class=\"attr\">#[inline]\n    #[doc(hidden)]\n    #[unstable(feature = <span class=\"string\">\"trusted_random_access\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    #[rustc_do_not_const_check]\n    </span><span class=\"kw\">unsafe fn </span>__iterator_get_unchecked(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, _idx: usize) -&gt; <span class=\"self\">Self</span>::Item\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>: TrustedRandomAccessNoCoerce,\n    {\n        <span class=\"macro\">unreachable!</span>(<span class=\"string\">\"Always specialized\"</span>);\n    }\n}\n\n<span class=\"doccomment\">/// Compares two iterators element-wise using the given function.\n///\n/// If `ControlFlow::Continue(())` is returned from the function, the comparison moves on to the next\n/// elements of both iterators. Returning `ControlFlow::Break(x)` short-circuits the iteration and\n/// returns `ControlFlow::Break(x)`. If one of the iterators runs out of elements,\n/// `ControlFlow::Continue(ord)` is returned where `ord` is the result of comparing the lengths of\n/// the iterators.\n///\n/// Isolates the logic shared by ['cmp_by'](Iterator::cmp_by),\n/// ['partial_cmp_by'](Iterator::partial_cmp_by), and ['eq_by'](Iterator::eq_by).\n</span><span class=\"attr\">#[inline]\n</span><span class=\"kw\">fn </span>iter_compare&lt;A, B, F, T&gt;(<span class=\"kw-2\">mut </span>a: A, <span class=\"kw-2\">mut </span>b: B, f: F) -&gt; ControlFlow&lt;T, Ordering&gt;\n<span class=\"kw\">where\n    </span>A: Iterator,\n    B: Iterator,\n    F: FnMut(A::Item, B::Item) -&gt; ControlFlow&lt;T&gt;,\n{\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>compare&lt;<span class=\"lifetime\">'a</span>, B, X, T&gt;(\n        b: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>B,\n        <span class=\"kw-2\">mut </span>f: <span class=\"kw\">impl </span>FnMut(X, B::Item) -&gt; ControlFlow&lt;T&gt; + <span class=\"lifetime\">'a</span>,\n    ) -&gt; <span class=\"kw\">impl </span>FnMut(X) -&gt; ControlFlow&lt;ControlFlow&lt;T, Ordering&gt;&gt; + <span class=\"lifetime\">'a\n    </span><span class=\"kw\">where\n        </span>B: Iterator,\n    {\n        <span class=\"kw\">move </span>|x| <span class=\"kw\">match </span>b.next() {\n            <span class=\"prelude-val\">None </span>=&gt; ControlFlow::Break(ControlFlow::Continue(Ordering::Greater)),\n            <span class=\"prelude-val\">Some</span>(y) =&gt; f(x, y).map_break(ControlFlow::Break),\n        }\n    }\n\n    <span class=\"kw\">match </span>a.try_for_each(compare(<span class=\"kw-2\">&amp;mut </span>b, f)) {\n        ControlFlow::Continue(()) =&gt; ControlFlow::Continue(<span class=\"kw\">match </span>b.next() {\n            <span class=\"prelude-val\">None </span>=&gt; Ordering::Equal,\n            <span class=\"prelude-val\">Some</span>(<span class=\"kw\">_</span>) =&gt; Ordering::Less,\n        }),\n        ControlFlow::Break(x) =&gt; x,\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;I: Iterator + <span class=\"question-mark\">?</span>Sized&gt; Iterator <span class=\"kw\">for </span><span class=\"kw-2\">&amp;mut </span>I {\n    <span class=\"kw\">type </span>Item = I::Item;\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;I::Item&gt; {\n        (<span class=\"kw-2\">**</span><span class=\"self\">self</span>).next()\n    }\n    <span class=\"kw\">fn </span>size_hint(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; (usize, <span class=\"prelude-ty\">Option</span>&lt;usize&gt;) {\n        (<span class=\"kw-2\">**</span><span class=\"self\">self</span>).size_hint()\n    }\n    <span class=\"kw\">fn </span>advance_by(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, n: usize) -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), NonZero&lt;usize&gt;&gt; {\n        (<span class=\"kw-2\">**</span><span class=\"self\">self</span>).advance_by(n)\n    }\n    <span class=\"kw\">fn </span>nth(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, n: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt; {\n        (<span class=\"kw-2\">**</span><span class=\"self\">self</span>).nth(n)\n    }\n    <span class=\"kw\">fn </span>fold&lt;B, F&gt;(<span class=\"self\">self</span>, init: B, f: F) -&gt; B\n    <span class=\"kw\">where\n        </span>F: FnMut(B, <span class=\"self\">Self</span>::Item) -&gt; B,\n    {\n        <span class=\"self\">self</span>.spec_fold(init, f)\n    }\n    <span class=\"kw\">fn </span>try_fold&lt;B, F, R&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, init: B, f: F) -&gt; R\n    <span class=\"kw\">where\n        </span>F: FnMut(B, <span class=\"self\">Self</span>::Item) -&gt; R,\n        R: Try&lt;Output = B&gt;,\n    {\n        <span class=\"self\">self</span>.spec_try_fold(init, f)\n    }\n}\n\n<span class=\"doccomment\">/// Helper trait to specialize `fold` and `try_fold` for `&amp;mut I where I: Sized`\n</span><span class=\"kw\">trait </span>IteratorRefSpec: Iterator {\n    <span class=\"kw\">fn </span>spec_fold&lt;B, F&gt;(<span class=\"self\">self</span>, init: B, f: F) -&gt; B\n    <span class=\"kw\">where\n        </span>F: FnMut(B, <span class=\"self\">Self</span>::Item) -&gt; B;\n\n    <span class=\"kw\">fn </span>spec_try_fold&lt;B, F, R&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, init: B, f: F) -&gt; R\n    <span class=\"kw\">where\n        </span>F: FnMut(B, <span class=\"self\">Self</span>::Item) -&gt; R,\n        R: Try&lt;Output = B&gt;;\n}\n\n<span class=\"kw\">impl</span>&lt;I: Iterator + <span class=\"question-mark\">?</span>Sized&gt; IteratorRefSpec <span class=\"kw\">for </span><span class=\"kw-2\">&amp;mut </span>I {\n    default <span class=\"kw\">fn </span>spec_fold&lt;B, F&gt;(<span class=\"self\">self</span>, init: B, <span class=\"kw-2\">mut </span>f: F) -&gt; B\n    <span class=\"kw\">where\n        </span>F: FnMut(B, <span class=\"self\">Self</span>::Item) -&gt; B,\n    {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>accum = init;\n        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(x) = <span class=\"self\">self</span>.next() {\n            accum = f(accum, x);\n        }\n        accum\n    }\n\n    default <span class=\"kw\">fn </span>spec_try_fold&lt;B, F, R&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, init: B, <span class=\"kw-2\">mut </span>f: F) -&gt; R\n    <span class=\"kw\">where\n        </span>F: FnMut(B, <span class=\"self\">Self</span>::Item) -&gt; R,\n        R: Try&lt;Output = B&gt;,\n    {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>accum = init;\n        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(x) = <span class=\"self\">self</span>.next() {\n            accum = f(accum, x)<span class=\"question-mark\">?</span>;\n        }\n        <span class=\"kw\">try </span>{ accum }\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;I: Iterator&gt; IteratorRefSpec <span class=\"kw\">for </span><span class=\"kw-2\">&amp;mut </span>I {\n    <span class=\"macro\">impl_fold_via_try_fold!</span> { spec_fold -&gt; spec_try_fold }\n\n    <span class=\"kw\">fn </span>spec_try_fold&lt;B, F, R&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, init: B, f: F) -&gt; R\n    <span class=\"kw\">where\n        </span>F: FnMut(B, <span class=\"self\">Self</span>::Item) -&gt; R,\n        R: Try&lt;Output = B&gt;,\n    {\n        (<span class=\"kw-2\">**</span><span class=\"self\">self</span>).try_fold(init, f)\n    }\n}\n</code></pre></div></section></main></body></html>",
	"crawlDate": "2024-07-28T05:21:45.768Z"
}