{
	"title": "eq in std::ptr - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ptr/fn.eq.html",
	"markdown": "# eq in std::ptr - Rust\n\n## Function [std](../index.html)::[ptr](index.html)::[eq](#)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mod.rs.html#2032) ·\n\n```\npub fn eq<T>(a: *const T, b: *const T) -> boolwhere\n    T: ?Sized,\n```\n\nExpand description\n\nCompares raw pointers for equality.\n\nThis is the same as using the `==` operator, but less generic: the arguments have to be `*const T` raw pointers, not anything that implements `PartialEq`.\n\nThis can be used to compare `&T` references (which coerce to `*const T` implicitly) by their address rather than comparing the values they point to (which is what the `PartialEq for &T` implementation does).\n\nWhen comparing wide pointers, both the address and the metadata are tested for equality. However, note that comparing trait object pointers (`*const dyn Trait`) is unreliable: pointers to values of the same underlying type can compare inequal (because vtables are duplicated in multiple codegen units), and pointers to values of _different_ underlying type can compare equal (since identical vtables can be deduplicated within a codegen unit).\n\n## [§](#examples)Examples\n\n```\nuse std::ptr;\n\nlet five = 5;\nlet other_five = 5;\nlet five_ref = &five;\nlet same_five_ref = &five;\nlet other_five_ref = &other_five;\n\nassert!(five_ref == same_five_ref);\nassert!(ptr::eq(five_ref, same_five_ref));\n\nassert!(five_ref == other_five_ref);\nassert!(!ptr::eq(five_ref, other_five_ref));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+five+=+5;%0A++++let+other_five+=+5;%0A++++let+five_ref+=+%26five;%0A++++let+same_five_ref+=+%26five;%0A++++let+other_five_ref+=+%26other_five;%0A++++%0A++++assert!(five_ref+==+same_five_ref);%0A++++assert!(ptr::eq(five_ref,+same_five_ref));%0A++++%0A++++assert!(five_ref+==+other_five_ref);%0A++++assert!(!ptr::eq(five_ref,+other_five_ref));%0A%7D&edition=2021)\n\nSlices are also compared by their length (fat pointers):\n\n```\nlet a = [1, 2, 3];\nassert!(std::ptr::eq(&a[..3], &a[..3]));\nassert!(!std::ptr::eq(&a[..2], &a[..3]));\nassert!(!std::ptr::eq(&a[0..2], &a[1..3]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++assert!(std::ptr::eq(%26a%5B..3%5D,+%26a%5B..3%5D));%0A++++assert!(!std::ptr::eq(%26a%5B..2%5D,+%26a%5B..3%5D));%0A++++assert!(!std::ptr::eq(%26a%5B0..2%5D,+%26a%5B1..3%5D));%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Compares raw pointers for equality.\"><title>eq in std::ptr - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::ptr</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.addr_of.html\">addr_of</a></li><li><a href=\"macro.addr_of_mut.html\">addr_of_mut</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Alignment.html\">Alignment</a></li><li><a href=\"struct.DynMetadata.html\">DynMetadata</a></li><li><a href=\"struct.NonNull.html\">NonNull</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Pointee.html\">Pointee</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.addr_eq.html\">addr_eq</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.copy_nonoverlapping.html\">copy_nonoverlapping</a></li><li><a href=\"fn.dangling.html\">dangling</a></li><li><a href=\"fn.dangling_mut.html\">dangling_mut</a></li><li><a href=\"fn.drop_in_place.html\">drop_in_place</a></li><li><a href=\"fn.eq.html\">eq</a></li><li><a href=\"fn.from_mut.html\">from_mut</a></li><li><a href=\"fn.from_raw_parts.html\">from_raw_parts</a></li><li><a href=\"fn.from_raw_parts_mut.html\">from_raw_parts_mut</a></li><li><a href=\"fn.from_ref.html\">from_ref</a></li><li><a href=\"fn.hash.html\">hash</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.null.html\">null</a></li><li><a href=\"fn.null_mut.html\">null_mut</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_unaligned.html\">read_unaligned</a></li><li><a href=\"fn.read_volatile.html\">read_volatile</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.slice_from_raw_parts.html\">slice_from_raw_parts</a></li><li><a href=\"fn.slice_from_raw_parts_mut.html\">slice_from_raw_parts_mut</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.swap_nonoverlapping.html\">swap_nonoverlapping</a></li><li><a href=\"fn.with_exposed_provenance.html\">with_exposed_provenance</a></li><li><a href=\"fn.with_exposed_provenance_mut.html\">with_exposed_provenance_mut</a></li><li><a href=\"fn.without_provenance.html\">without_provenance</a></li><li><a href=\"fn.without_provenance_mut.html\">without_provenance_mut</a></li><li><a href=\"fn.write.html\">write</a></li><li><a href=\"fn.write_bytes.html\">write_bytes</a></li><li><a href=\"fn.write_unaligned.html\">write_unaligned</a></li><li><a href=\"fn.write_volatile.html\">write_volatile</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ptr</a>::<wbr><a class=\"fn\" href=\"#\">eq</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mod.rs.html#2032\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn eq&lt;T&gt;(a: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, b: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Compares raw pointers for equality.</p>\n<p>This is the same as using the <code>==</code> operator, but less generic:\nthe arguments have to be <code>*const T</code> raw pointers,\nnot anything that implements <code>PartialEq</code>.</p>\n<p>This can be used to compare <code>&amp;T</code> references (which coerce to <code>*const T</code> implicitly)\nby their address rather than comparing the values they point to\n(which is what the <code>PartialEq for &amp;T</code> implementation does).</p>\n<p>When comparing wide pointers, both the address and the metadata are tested for equality.\nHowever, note that comparing trait object pointers (<code>*const dyn Trait</code>) is unreliable: pointers\nto values of the same underlying type can compare inequal (because vtables are duplicated in\nmultiple codegen units), and pointers to values of <em>different</em> underlying type can compare equal\n(since identical vtables can be deduplicated within a codegen unit).</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>five = <span class=\"number\">5</span>;\n<span class=\"kw\">let </span>other_five = <span class=\"number\">5</span>;\n<span class=\"kw\">let </span>five_ref = <span class=\"kw-2\">&amp;</span>five;\n<span class=\"kw\">let </span>same_five_ref = <span class=\"kw-2\">&amp;</span>five;\n<span class=\"kw\">let </span>other_five_ref = <span class=\"kw-2\">&amp;</span>other_five;\n\n<span class=\"macro\">assert!</span>(five_ref == same_five_ref);\n<span class=\"macro\">assert!</span>(ptr::eq(five_ref, same_five_ref));\n\n<span class=\"macro\">assert!</span>(five_ref == other_five_ref);\n<span class=\"macro\">assert!</span>(!ptr::eq(five_ref, other_five_ref));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+five+=+5;%0A++++let+other_five+=+5;%0A++++let+five_ref+=+%26five;%0A++++let+same_five_ref+=+%26five;%0A++++let+other_five_ref+=+%26other_five;%0A++++%0A++++assert!(five_ref+==+same_five_ref);%0A++++assert!(ptr::eq(five_ref,+same_five_ref));%0A++++%0A++++assert!(five_ref+==+other_five_ref);%0A++++assert!(!ptr::eq(five_ref,+other_five_ref));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Slices are also compared by their length (fat pointers):</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert!</span>(std::ptr::eq(<span class=\"kw-2\">&amp;</span>a[..<span class=\"number\">3</span>], <span class=\"kw-2\">&amp;</span>a[..<span class=\"number\">3</span>]));\n<span class=\"macro\">assert!</span>(!std::ptr::eq(<span class=\"kw-2\">&amp;</span>a[..<span class=\"number\">2</span>], <span class=\"kw-2\">&amp;</span>a[..<span class=\"number\">3</span>]));\n<span class=\"macro\">assert!</span>(!std::ptr::eq(<span class=\"kw-2\">&amp;</span>a[<span class=\"number\">0</span>..<span class=\"number\">2</span>], <span class=\"kw-2\">&amp;</span>a[<span class=\"number\">1</span>..<span class=\"number\">3</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++assert!(std::ptr::eq(%26a%5B..3%5D,+%26a%5B..3%5D));%0A++++assert!(!std::ptr::eq(%26a%5B..2%5D,+%26a%5B..3%5D));%0A++++assert!(!std::ptr::eq(%26a%5B0..2%5D,+%26a%5B1..3%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:35.952Z"
}