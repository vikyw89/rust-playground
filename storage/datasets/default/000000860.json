{
	"title": "TcpListener in std::net - Rust",
	"url": "https://doc.rust-lang.org/stable/std/net/struct.TcpListener.html",
	"markdown": "# TcpListener in std::net - Rust\n\n```\npub struct TcpListener(/* private fields */);\n```\n\nExpand description\n\nA TCP socket server, listening for connections.\n\nAfter creating a `TcpListener` by [`bind`](about:blank/struct.TcpListener.html#method.bind \"associated function std::net::TcpListener::bind\")ing it to a socket address, it listens for incoming TCP connections. These can be accepted by calling [`accept`](about:blank/struct.TcpListener.html#method.accept \"method std::net::TcpListener::accept\") or by iterating over the [`Incoming`](struct.Incoming.html \"struct std::net::Incoming\") iterator returned by [`incoming`](about:blank/struct.TcpListener.html#method.incoming \"method std::net::TcpListener::incoming\").\n\nThe socket will be closed when the value is dropped.\n\nThe Transmission Control Protocol is specified in [IETF RFC 793](https://tools.ietf.org/html/rfc793).\n\n## [Â§](#examples)Examples\n\n```\nuse std::net::{TcpListener, TcpStream};\n\nfn handle_client(stream: TcpStream) {\n    // ...\n}\n\nfn main() -> std::io::Result<()> {\n    let listener = TcpListener::bind(\"127.0.0.1:80\")?;\n\n    // accept connections and process them serially\n    for stream in listener.incoming() {\n        handle_client(stream?);\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::net::%7BTcpListener,+TcpStream%7D;%0A%0Afn+handle_client(stream:+TcpStream)+%7B%0A++++//+...%0A%7D%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:80%22)?;%0A%0A++++//+accept+connections+and+process+them+serially%0A++++for+stream+in+listener.incoming()+%7B%0A++++++++handle_client(stream?);%0A++++%7D%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/net/tcp.rs.html#721-1017)[Â§](#impl-TcpListener)\n\n1.0.0 Â· [source](about:blank/src/std/net/tcp.rs.html#771-773)\n\nCreates a new `TcpListener` which will be bound to the specified address.\n\nThe returned listener is ready for accepting connections.\n\nBinding with a port number of 0 will request that the OS assigns a port to this listener. The port allocated can be queried via the [`TcpListener::local_addr`](about:blank/struct.TcpListener.html#method.local_addr \"method std::net::TcpListener::local_addr\") method.\n\nThe address type can be any implementor of [`ToSocketAddrs`](trait.ToSocketAddrs.html \"trait std::net::ToSocketAddrs\") trait. See its documentation for concrete examples.\n\nIf `addr` yields multiple addresses, `bind` will be attempted with each of the addresses until one succeeds and returns the listener. If none of the addresses succeed in creating a listener, the error returned from the last attempt (the last address) is returned.\n\n##### [Â§](#examples-1)Examples\n\nCreates a TCP listener bound to `127.0.0.1:80`:\n\n```\nuse std::net::TcpListener;\n\nlet listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpListener;%0A++++%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:80%22).unwrap();%0A%7D&edition=2021)\n\nCreates a TCP listener bound to `127.0.0.1:80`. If that fails, create a TCP listener bound to `127.0.0.1:443`:\n\n```\nuse std::net::{SocketAddr, TcpListener};\n\nlet addrs = [\n    SocketAddr::from(([127, 0, 0, 1], 80)),\n    SocketAddr::from(([127, 0, 0, 1], 443)),\n];\nlet listener = TcpListener::bind(&addrs[..]).unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BSocketAddr,+TcpListener%7D;%0A++++%0A++++let+addrs+=+%5B%0A++++++++SocketAddr::from((%5B127,+0,+0,+1%5D,+80)),%0A++++++++SocketAddr::from((%5B127,+0,+0,+1%5D,+443)),%0A++++%5D;%0A++++let+listener+=+TcpListener::bind(%26addrs%5B..%5D).unwrap();%0A%7D&edition=2021)\n\nCreates a TCP listener bound to a port assigned by the operating system at `127.0.0.1`.\n\n```\nuse std::net::TcpListener;\n\nlet socket = TcpListener::bind(\"127.0.0.1:0\").unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpListener;%0A++++%0A++++let+socket+=+TcpListener::bind(%22127.0.0.1:0%22).unwrap();%0A%7D&edition=2021)\n\n1.0.0 Â· [source](about:blank/src/std/net/tcp.rs.html#787-789)\n\nReturns the local socket address of this listener.\n\n##### [Â§](#examples-2)Examples\n\n```\nuse std::net::{Ipv4Addr, SocketAddr, SocketAddrV4, TcpListener};\n\nlet listener = TcpListener::bind(\"127.0.0.1:8080\").unwrap();\nassert_eq!(listener.local_addr().unwrap(),\n           SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080)));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpv4Addr,+SocketAddr,+SocketAddrV4,+TcpListener%7D;%0A++++%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:8080%22).unwrap();%0A++++assert_eq!(listener.local_addr().unwrap(),%0A+++++++++++++++SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::new(127,+0,+0,+1),+8080)));%0A%7D&edition=2021)\n\n1.0.0 Â· [source](about:blank/src/std/net/tcp.rs.html#806-808)\n\nCreates a new independently owned handle to the underlying socket.\n\nThe returned [`TcpListener`](struct.TcpListener.html \"struct std::net::TcpListener\") is a reference to the same socket that this object references. Both handles can be used to accept incoming connections and options set on one listener will affect the other.\n\n##### [Â§](#examples-3)Examples\n\n```\nuse std::net::TcpListener;\n\nlet listener = TcpListener::bind(\"127.0.0.1:8080\").unwrap();\nlet listener_clone = listener.try_clone().unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpListener;%0A++++%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:8080%22).unwrap();%0A++++let+listener_clone+=+listener.try_clone().unwrap();%0A%7D&edition=2021)\n\n1.0.0 Â· [source](about:blank/src/std/net/tcp.rs.html#828-833)\n\nAccept a new incoming connection from this listener.\n\nThis function will block the calling thread until a new TCP connection is established. When established, the corresponding [`TcpStream`](struct.TcpStream.html \"struct std::net::TcpStream\") and the remote peerâ€™s address will be returned.\n\n##### [Â§](#examples-4)Examples\n\n```\nuse std::net::TcpListener;\n\nlet listener = TcpListener::bind(\"127.0.0.1:8080\").unwrap();\nmatch listener.accept() {\n    Ok((_socket, addr)) => println!(\"new client: {addr:?}\"),\n    Err(e) => println!(\"couldn't get client: {e:?}\"),\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpListener;%0A++++%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:8080%22).unwrap();%0A++++match+listener.accept()+%7B%0A++++++++Ok((_socket,+addr))+=%3E+println!(%22new+client:+%7Baddr:?%7D%22),%0A++++++++Err(e)+=%3E+println!(%22couldn%27t+get+client:+%7Be:?%7D%22),%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 Â· [source](about:blank/src/std/net/tcp.rs.html#866-868)\n\nReturns an iterator over the connections being received on this listener.\n\nThe returned iterator will never return [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") and will also not yield the peerâ€™s [`SocketAddr`](enum.SocketAddr.html \"enum std::net::SocketAddr\") structure. Iterating over it is equivalent to calling [`TcpListener::accept`](about:blank/struct.TcpListener.html#method.accept \"method std::net::TcpListener::accept\") in a loop.\n\n##### [Â§](#examples-5)Examples\n\n```\nuse std::net::{TcpListener, TcpStream};\n\nfn handle_connection(stream: TcpStream) {\n   //...\n}\n\nfn main() -> std::io::Result<()> {\n    let listener = TcpListener::bind(\"127.0.0.1:80\")?;\n\n    for stream in listener.incoming() {\n        match stream {\n            Ok(stream) => {\n                handle_connection(stream);\n            }\n            Err(e) => { /* connection failed */ }\n        }\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::net::%7BTcpListener,+TcpStream%7D;%0A%0Afn+handle_connection(stream:+TcpStream)+%7B%0A+++//...%0A%7D%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:80%22)?;%0A%0A++++for+stream+in+listener.incoming()+%7B%0A++++++++match+stream+%7B%0A++++++++++++Ok(stream)+=%3E+%7B%0A++++++++++++++++handle_connection(stream);%0A++++++++++++%7D%0A++++++++++++Err(e)+=%3E+%7B+/*+connection+failed+*/+%7D%0A++++++++%7D%0A++++%7D%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/net/tcp.rs.html#898-900)\n\nðŸ”¬This is a nightly-only experimental API. (`tcplistener_into_incoming`Â [#88339](https://github.com/rust-lang/rust/issues/88339))\n\nTurn this into an iterator over the connections being received on this listener.\n\nThe returned iterator will never return [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") and will also not yield the peerâ€™s [`SocketAddr`](enum.SocketAddr.html \"enum std::net::SocketAddr\") structure. Iterating over it is equivalent to calling [`TcpListener::accept`](about:blank/struct.TcpListener.html#method.accept \"method std::net::TcpListener::accept\") in a loop.\n\n##### [Â§](#examples-6)Examples\n\n```\n#![feature(tcplistener_into_incoming)]\nuse std::net::{TcpListener, TcpStream};\n\nfn listen_on(port: u16) -> impl Iterator<Item = TcpStream> {\n    let listener = TcpListener::bind((\"127.0.0.1\", port)).unwrap();\n    listener.into_incoming()\n        .filter_map(Result::ok) /* Ignore failed connections */\n}\n\nfn main() -> std::io::Result<()> {\n    for stream in listen_on(80) {\n        /* handle the connection here */\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(tcplistener_into_incoming)%5D%0Ause+std::net::%7BTcpListener,+TcpStream%7D;%0A%0Afn+listen_on(port:+u16)+-%3E+impl+Iterator%3CItem+=+TcpStream%3E+%7B%0A++++let+listener+=+TcpListener::bind((%22127.0.0.1%22,+port)).unwrap();%0A++++listener.into_incoming()%0A++++++++.filter_map(Result::ok)+/*+Ignore+failed+connections+*/%0A%7D%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++for+stream+in+listen_on(80)+%7B%0A++++++++/*+handle+the+connection+here+*/%0A++++%7D%0A++++Ok(())%0A%7D&version=nightly&edition=2021)\n\n1.9.0 Â· [source](about:blank/src/std/net/tcp.rs.html#916-918)\n\nSets the value for the `IP_TTL` option on this socket.\n\nThis value sets the time-to-live field that is used in every packet sent from this socket.\n\n##### [Â§](#examples-7)Examples\n\n```\nuse std::net::TcpListener;\n\nlet listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\nlistener.set_ttl(100).expect(\"could not set TTL\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpListener;%0A++++%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:80%22).unwrap();%0A++++listener.set_ttl(100).expect(%22could+not+set+TTL%22);%0A%7D&edition=2021)\n\n1.9.0 Â· [source](about:blank/src/std/net/tcp.rs.html#934-936)\n\nGets the value of the `IP_TTL` option for this socket.\n\nFor more information about this option, see [`TcpListener::set_ttl`](about:blank/struct.TcpListener.html#method.set_ttl \"method std::net::TcpListener::set_ttl\").\n\n##### [Â§](#examples-8)Examples\n\n```\nuse std::net::TcpListener;\n\nlet listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\nlistener.set_ttl(100).expect(\"could not set TTL\");\nassert_eq!(listener.ttl().unwrap_or(0), 100);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpListener;%0A++++%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:80%22).unwrap();%0A++++listener.set_ttl(100).expect(%22could+not+set+TTL%22);%0A++++assert_eq!(listener.ttl().unwrap_or(0),+100);%0A%7D&edition=2021)\n\n1.9.0 Â· [source](about:blank/src/std/net/tcp.rs.html#941-943)\n\nðŸ‘ŽDeprecated since 1.16.0: this option can only be set before the socket is bound\n\n1.9.0 Â· [source](about:blank/src/std/net/tcp.rs.html#948-950)\n\nðŸ‘ŽDeprecated since 1.16.0: this option can only be set before the socket is bound\n\n1.9.0 Â· [source](about:blank/src/std/net/tcp.rs.html#967-969)\n\nGets the value of the `SO_ERROR` option on this socket.\n\nThis will retrieve the stored error in the underlying socket, clearing the field in the process. This can be useful for checking errors between calls.\n\n##### [Â§](#examples-9)Examples\n\n```\nuse std::net::TcpListener;\n\nlet listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\nlistener.take_error().expect(\"No error was expected\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpListener;%0A++++%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:80%22).unwrap();%0A++++listener.take_error().expect(%22No+error+was+expected%22);%0A%7D&edition=2021)\n\n1.9.0 Â· [source](about:blank/src/std/net/tcp.rs.html#1014-1016)\n\nMoves this TCP stream into or out of nonblocking mode.\n\nThis will result in the `accept` operation becoming nonblocking, i.e., immediately returning from their calls. If the IO operation is successful, `Ok` is returned and no further action is required. If the IO operation could not be completed and needs to be retried, an error with kind [`io::ErrorKind::WouldBlock`](about:blank/io/enum.ErrorKind.html#variant.WouldBlock \"variant std::io::ErrorKind::WouldBlock\") is returned.\n\nOn Unix platforms, calling this method corresponds to calling `fcntl` `FIONBIO`. On Windows calling this method corresponds to calling `ioctlsocket` `FIONBIO`.\n\n##### [Â§](#examples-10)Examples\n\nBind a TCP listener to an address, listen for connections, and read bytes in nonblocking mode:\n\n```\nuse std::io;\nuse std::net::TcpListener;\n\nlet listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\nlistener.set_nonblocking(true).expect(\"Cannot set non-blocking\");\n\nfor stream in listener.incoming() {\n    match stream {\n        Ok(s) => {\n            // do something with the TcpStream\n            handle_connection(s);\n        }\n        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n            // wait until network socket is ready, typically implemented\n            // via platform-specific APIs such as epoll or IOCP\n            wait_for_fd();\n            continue;\n        }\n        Err(e) => panic!(\"encountered IO error: {e}\"),\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::net::TcpListener;%0A++++%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:7878%22).unwrap();%0A++++listener.set_nonblocking(true).expect(%22Cannot+set+non-blocking%22);%0A++++%0A++++fn+wait_for_fd()+%7B+unimplemented!()+%7D%0A++++fn+handle_connection(stream:+std::net::TcpStream)+%7B+unimplemented!()+%7D%0A++++for+stream+in+listener.incoming()+%7B%0A++++++++match+stream+%7B%0A++++++++++++Ok(s)+=%3E+%7B%0A++++++++++++++++//+do+something+with+the+TcpStream%0A++++++++++++++++handle_connection(s);%0A++++++++++++%7D%0A++++++++++++Err(ref+e)+if+e.kind()+==+io::ErrorKind::WouldBlock+=%3E+%7B%0A++++++++++++++++//+wait+until+network+socket+is+ready,+typically+implemented%0A++++++++++++++++//+via+platform-specific+APIs+such+as+epoll+or+IOCP%0A++++++++++++++++wait_for_fd();%0A++++++++++++++++continue;%0A++++++++++++%7D%0A++++++++++++Err(e)+=%3E+panic!(%22encountered+IO+error:+%7Be%7D%22),%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n1.63.0 Â· [source](about:blank/src/std/os/fd/owned.rs.html#338-343)[Â§](#impl-AsFd-for-TcpListener)\n\n1.0.0 Â· [source](about:blank/src/std/os/fd/net.rs.html#17)[Â§](#impl-AsRawFd-for-TcpListener)\n\n1.0.0 Â· [source](about:blank/src/std/os/windows/io/raw.rs.html#245-250)[Â§](#impl-AsRawSocket-for-TcpListener)\n\nAvailable on **Windows** only.\n\n1.63.0 Â· [source](about:blank/src/std/os/windows/io/socket.rs.html#338-343)[Â§](#impl-AsSocket-for-TcpListener)\n\nAvailable on **Windows** only.\n\n1.0.0 Â· [source](about:blank/src/std/net/tcp.rs.html#1067-1071)[Â§](#impl-Debug-for-TcpListener)\n\n1.63.0 Â· [source](about:blank/src/std/os/fd/owned.rs.html#355-362)[Â§](#impl-From%3COwnedFd%3E-for-TcpListener)\n\n[source](about:blank/src/std/os/fd/owned.rs.html#357-361)[Â§](#method.from-1)\n\nConverts to this type from the input type.\n\n1.63.0 Â· [source](about:blank/src/std/os/windows/io/socket.rs.html#355-360)[Â§](#impl-From%3COwnedSocket%3E-for-TcpListener)\n\nAvailable on **Windows** only.\n\n[source](about:blank/src/std/os/windows/io/socket.rs.html#357-359)[Â§](#method.from-2)\n\nConverts to this type from the input type.\n\n1.63.0 Â· [source](about:blank/src/std/os/fd/owned.rs.html#346-352)[Â§](#impl-From%3CTcpListener%3E-for-OwnedFd)\n\n1.63.0 Â· [source](about:blank/src/std/os/windows/io/socket.rs.html#346-352)[Â§](#impl-From%3CTcpListener%3E-for-OwnedSocket)\n\nAvailable on **Windows** only.\n\n1.1.0 Â· [source](about:blank/src/std/os/fd/net.rs.html#33)[Â§](#impl-FromRawFd-for-TcpListener)\n\n[source](about:blank/src/std/os/fd/net.rs.html#33)[Â§](#method.from_raw_fd)\n\nConstructs a new instance of `Self` from the given raw file descriptor. [Read more](about:blank/os/fd/trait.FromRawFd.html#tymethod.from_raw_fd)\n\n1.1.0 Â· [source](about:blank/src/std/os/windows/io/raw.rs.html#268-274)[Â§](#impl-FromRawSocket-for-TcpListener)\n\nAvailable on **Windows** only.\n\n1.4.0 Â· [source](about:blank/src/std/os/fd/net.rs.html#46)[Â§](#impl-IntoRawFd-for-TcpListener)\n\n[source](about:blank/src/std/os/fd/net.rs.html#46)[Â§](#method.into_raw_fd)\n\nConsumes this object, returning the raw underlying file descriptor. [Read more](about:blank/os/fd/trait.IntoRawFd.html#tymethod.into_raw_fd)\n\n1.4.0 Â· [source](about:blank/src/std/os/windows/io/raw.rs.html#293-298)[Â§](#impl-IntoRawSocket-for-TcpListener)\n\nAvailable on **Windows** only.\n\n[source](about:blank/src/std/os/wasi/net/mod.rs.html#19-23)[Â§](#impl-TcpListenerExt-for-TcpListener)\n\nAvailable on **WASI** only.\n\n[source](about:blank/src/std/os/wasi/net/mod.rs.html#20-22)[Â§](#method.sock_accept)\n\nðŸ”¬This is a nightly-only experimental API. (`wasi_ext`Â [#71213](https://github.com/rust-lang/rust/issues/71213))\n\n[Â§](#impl-Freeze-for-TcpListener)\n\n[Â§](#impl-RefUnwindSafe-for-TcpListener)\n\n[Â§](#impl-Send-for-TcpListener)\n\n[Â§](#impl-Sync-for-TcpListener)\n\n[Â§](#impl-Unpin-for-TcpListener)\n\n[Â§](#impl-UnwindSafe-for-TcpListener)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[Â§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[Â§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[Â§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[Â§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[Â§](#method.from-4)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[Â§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[Â§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[Â§](#impl-TryFrom%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[Â§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[Â§](#impl-TryInto%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[Â§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A TCP socket server, listening for connections.\"><title>TcpListener in std::net - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">TcpListener</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">TcpListener</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.accept\">accept</a></li><li><a href=\"#method.bind\">bind</a></li><li><a href=\"#method.incoming\">incoming</a></li><li><a href=\"#method.into_incoming\">into_incoming</a></li><li><a href=\"#method.local_addr\">local_addr</a></li><li><a href=\"#method.only_v6\">only_v6</a></li><li><a href=\"#method.set_nonblocking\">set_nonblocking</a></li><li><a href=\"#method.set_only_v6\">set_only_v6</a></li><li><a href=\"#method.set_ttl\">set_ttl</a></li><li><a href=\"#method.take_error\">take_error</a></li><li><a href=\"#method.try_clone\">try_clone</a></li><li><a href=\"#method.ttl\">ttl</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsFd-for-TcpListener\">AsFd</a></li><li><a href=\"#impl-AsRawFd-for-TcpListener\">AsRawFd</a></li><li><a href=\"#impl-AsRawSocket-for-TcpListener\">AsRawSocket</a></li><li><a href=\"#impl-AsSocket-for-TcpListener\">AsSocket</a></li><li><a href=\"#impl-Debug-for-TcpListener\">Debug</a></li><li><a href=\"#impl-From%3COwnedFd%3E-for-TcpListener\">From&lt;OwnedFd&gt;</a></li><li><a href=\"#impl-From%3COwnedSocket%3E-for-TcpListener\">From&lt;OwnedSocket&gt;</a></li><li><a href=\"#impl-From%3CTcpListener%3E-for-OwnedFd\">From&lt;TcpListener&gt;</a></li><li><a href=\"#impl-From%3CTcpListener%3E-for-OwnedSocket\">From&lt;TcpListener&gt;</a></li><li><a href=\"#impl-FromRawFd-for-TcpListener\">FromRawFd</a></li><li><a href=\"#impl-FromRawSocket-for-TcpListener\">FromRawSocket</a></li><li><a href=\"#impl-IntoRawFd-for-TcpListener\">IntoRawFd</a></li><li><a href=\"#impl-IntoRawSocket-for-TcpListener\">IntoRawSocket</a></li><li><a href=\"#impl-TcpListenerExt-for-TcpListener\">TcpListenerExt</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-TcpListener\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-TcpListener\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-TcpListener\">Send</a></li><li><a href=\"#impl-Sync-for-TcpListener\">Sync</a></li><li><a href=\"#impl-Unpin-for-TcpListener\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-TcpListener\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::net</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AddrParseError.html\">AddrParseError</a></li><li><a href=\"struct.Incoming.html\">Incoming</a></li><li><a href=\"struct.IntoIncoming.html\">IntoIncoming</a></li><li><a href=\"struct.Ipv4Addr.html\">Ipv4Addr</a></li><li><a href=\"struct.Ipv6Addr.html\">Ipv6Addr</a></li><li><a href=\"struct.SocketAddrV4.html\">SocketAddrV4</a></li><li><a href=\"struct.SocketAddrV6.html\">SocketAddrV6</a></li><li><a href=\"struct.TcpListener.html\">TcpListener</a></li><li><a href=\"struct.TcpStream.html\">TcpStream</a></li><li><a href=\"struct.UdpSocket.html\">UdpSocket</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.IpAddr.html\">IpAddr</a></li><li><a href=\"enum.Ipv6MulticastScope.html\">Ipv6MulticastScope</a></li><li><a href=\"enum.Shutdown.html\">Shutdown</a></li><li><a href=\"enum.SocketAddr.html\">SocketAddr</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.ToSocketAddrs.html\">ToSocketAddrs</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">net</a>::<wbr><a class=\"struct\" href=\"#\">TcpListener</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#86\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct TcpListener(<span class=\"comment\">/* private fields */</span>);</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A TCP socket server, listening for connections.</p>\n<p>After creating a <code>TcpListener</code> by <a href=\"struct.TcpListener.html#method.bind\" title=\"associated function std::net::TcpListener::bind\"><code>bind</code></a>ing it to a socket address, it listens\nfor incoming TCP connections. These can be accepted by calling <a href=\"struct.TcpListener.html#method.accept\" title=\"method std::net::TcpListener::accept\"><code>accept</code></a> or by\niterating over the <a href=\"struct.Incoming.html\" title=\"struct std::net::Incoming\"><code>Incoming</code></a> iterator returned by <a href=\"struct.TcpListener.html#method.incoming\" title=\"method std::net::TcpListener::incoming\"><code>incoming</code></a>.</p>\n<p>The socket will be closed when the value is dropped.</p>\n<p>The Transmission Control Protocol is specified in <a href=\"https://tools.ietf.org/html/rfc793\">IETF RFC 793</a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{TcpListener, TcpStream};\n\n<span class=\"kw\">fn </span>handle_client(stream: TcpStream) {\n    <span class=\"comment\">// ...\n</span>}\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>listener = TcpListener::bind(<span class=\"string\">\"127.0.0.1:80\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// accept connections and process them serially\n    </span><span class=\"kw\">for </span>stream <span class=\"kw\">in </span>listener.incoming() {\n        handle_client(stream<span class=\"question-mark\">?</span>);\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::net::%7BTcpListener,+TcpStream%7D;%0A%0Afn+handle_client(stream:+TcpStream)+%7B%0A++++//+...%0A%7D%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:80%22)?;%0A%0A++++//+accept+connections+and+process+them+serially%0A++++for+stream+in+listener.incoming()+%7B%0A++++++++handle_client(stream?);%0A++++%7D%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TcpListener\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#721-1017\">source</a><a href=\"#impl-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bind\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#771-773\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.bind\" class=\"fn\">bind</a>&lt;A: <a class=\"trait\" href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a>&gt;(addr: A) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>TcpListener</code> which will be bound to the specified\naddress.</p>\n<p>The returned listener is ready for accepting connections.</p>\n<p>Binding with a port number of 0 will request that the OS assigns a port\nto this listener. The port allocated can be queried via the\n<a href=\"struct.TcpListener.html#method.local_addr\" title=\"method std::net::TcpListener::local_addr\"><code>TcpListener::local_addr</code></a> method.</p>\n<p>The address type can be any implementor of <a href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\"><code>ToSocketAddrs</code></a> trait. See\nits documentation for concrete examples.</p>\n<p>If <code>addr</code> yields multiple addresses, <code>bind</code> will be attempted with\neach of the addresses until one succeeds and returns the listener. If\nnone of the addresses succeed in creating a listener, the error returned\nfrom the last attempt (the last address) is returned.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<p>Creates a TCP listener bound to <code>127.0.0.1:80</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span>listener = TcpListener::bind(<span class=\"string\">\"127.0.0.1:80\"</span>).unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpListener;%0A++++%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:80%22).unwrap();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Creates a TCP listener bound to <code>127.0.0.1:80</code>. If that fails, create a\nTCP listener bound to <code>127.0.0.1:443</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{SocketAddr, TcpListener};\n\n<span class=\"kw\">let </span>addrs = [\n    SocketAddr::from(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">80</span>)),\n    SocketAddr::from(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">443</span>)),\n];\n<span class=\"kw\">let </span>listener = TcpListener::bind(<span class=\"kw-2\">&amp;</span>addrs[..]).unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BSocketAddr,+TcpListener%7D;%0A++++%0A++++let+addrs+=+%5B%0A++++++++SocketAddr::from((%5B127,+0,+0,+1%5D,+80)),%0A++++++++SocketAddr::from((%5B127,+0,+0,+1%5D,+443)),%0A++++%5D;%0A++++let+listener+=+TcpListener::bind(%26addrs%5B..%5D).unwrap();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Creates a TCP listener bound to a port assigned by the operating system\nat <code>127.0.0.1</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span>socket = TcpListener::bind(<span class=\"string\">\"127.0.0.1:0\"</span>).unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpListener;%0A++++%0A++++let+socket+=+TcpListener::bind(%22127.0.0.1:0%22).unwrap();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.local_addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#787-789\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.local_addr\" class=\"fn\">local_addr</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the local socket address of this listener.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{Ipv4Addr, SocketAddr, SocketAddrV4, TcpListener};\n\n<span class=\"kw\">let </span>listener = TcpListener::bind(<span class=\"string\">\"127.0.0.1:8080\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(listener.local_addr().unwrap(),\n           SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::new(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>), <span class=\"number\">8080</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpv4Addr,+SocketAddr,+SocketAddrV4,+TcpListener%7D;%0A++++%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:8080%22).unwrap();%0A++++assert_eq!(listener.local_addr().unwrap(),%0A+++++++++++++++SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::new(127,+0,+0,+1),+8080)));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_clone\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#806-808\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_clone\" class=\"fn\">try_clone</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new independently owned handle to the underlying socket.</p>\n<p>The returned <a href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\"><code>TcpListener</code></a> is a reference to the same socket that this\nobject references. Both handles can be used to accept incoming\nconnections and options set on one listener will affect the other.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span>listener = TcpListener::bind(<span class=\"string\">\"127.0.0.1:8080\"</span>).unwrap();\n<span class=\"kw\">let </span>listener_clone = listener.try_clone().unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpListener;%0A++++%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:8080%22).unwrap();%0A++++let+listener_clone+=+listener.try_clone().unwrap();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.accept\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#828-833\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.accept\" class=\"fn\">accept</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;(<a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a>, <a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Accept a new incoming connection from this listener.</p>\n<p>This function will block the calling thread until a new TCP connection\nis established. When established, the corresponding <a href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\"><code>TcpStream</code></a> and the\nremote peerâ€™s address will be returned.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span>listener = TcpListener::bind(<span class=\"string\">\"127.0.0.1:8080\"</span>).unwrap();\n<span class=\"kw\">match </span>listener.accept() {\n    <span class=\"prelude-val\">Ok</span>((_socket, addr)) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"new client: {addr:?}\"</span>),\n    <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"couldn't get client: {e:?}\"</span>),\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpListener;%0A++++%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:8080%22).unwrap();%0A++++match+listener.accept()+%7B%0A++++++++Ok((_socket,+addr))+=%3E+println!(%22new+client:+%7Baddr:?%7D%22),%0A++++++++Err(e)+=%3E+println!(%22couldn't+get+client:+%7Be:?%7D%22),%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.incoming\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#866-868\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.incoming\" class=\"fn\">incoming</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Incoming.html\" title=\"struct std::net::Incoming\">Incoming</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Incoming<'_>\">â“˜</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the connections being received on this\nlistener.</p>\n<p>The returned iterator will never return <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> and will also not yield\nthe peerâ€™s <a href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a> structure. Iterating over it is equivalent to\ncalling <a href=\"struct.TcpListener.html#method.accept\" title=\"method std::net::TcpListener::accept\"><code>TcpListener::accept</code></a> in a loop.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{TcpListener, TcpStream};\n\n<span class=\"kw\">fn </span>handle_connection(stream: TcpStream) {\n   <span class=\"comment\">//...\n</span>}\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>listener = TcpListener::bind(<span class=\"string\">\"127.0.0.1:80\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">for </span>stream <span class=\"kw\">in </span>listener.incoming() {\n        <span class=\"kw\">match </span>stream {\n            <span class=\"prelude-val\">Ok</span>(stream) =&gt; {\n                handle_connection(stream);\n            }\n            <span class=\"prelude-val\">Err</span>(e) =&gt; { <span class=\"comment\">/* connection failed */ </span>}\n        }\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::net::%7BTcpListener,+TcpStream%7D;%0A%0Afn+handle_connection(stream:+TcpStream)+%7B%0A+++//...%0A%7D%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:80%22)?;%0A%0A++++for+stream+in+listener.incoming()+%7B%0A++++++++match+stream+%7B%0A++++++++++++Ok(stream)+=%3E+%7B%0A++++++++++++++++handle_connection(stream);%0A++++++++++++%7D%0A++++++++++++Err(e)+=%3E+%7B+/*+connection+failed+*/+%7D%0A++++++++%7D%0A++++%7D%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_incoming\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#898-900\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.into_incoming\" class=\"fn\">into_incoming</a>(self) -&gt; <a class=\"struct\" href=\"struct.IntoIncoming.html\" title=\"struct std::net::IntoIncoming\">IntoIncoming</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntoIncoming\">â“˜</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>tcplistener_into_incoming</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88339\">#88339</a>)</span></div></span></summary><div class=\"docblock\"><p>Turn this into an iterator over the connections being received on this\nlistener.</p>\n<p>The returned iterator will never return <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> and will also not yield\nthe peerâ€™s <a href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a> structure. Iterating over it is equivalent to\ncalling <a href=\"struct.TcpListener.html#method.accept\" title=\"method std::net::TcpListener::accept\"><code>TcpListener::accept</code></a> in a loop.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(tcplistener_into_incoming)]\n</span><span class=\"kw\">use </span>std::net::{TcpListener, TcpStream};\n\n<span class=\"kw\">fn </span>listen_on(port: u16) -&gt; <span class=\"kw\">impl </span>Iterator&lt;Item = TcpStream&gt; {\n    <span class=\"kw\">let </span>listener = TcpListener::bind((<span class=\"string\">\"127.0.0.1\"</span>, port)).unwrap();\n    listener.into_incoming()\n        .filter_map(Result::ok) <span class=\"comment\">/* Ignore failed connections */\n</span>}\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">for </span>stream <span class=\"kw\">in </span>listen_on(<span class=\"number\">80</span>) {\n        <span class=\"comment\">/* handle the connection here */\n    </span>}\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(tcplistener_into_incoming)%5D%0Ause+std::net::%7BTcpListener,+TcpStream%7D;%0A%0Afn+listen_on(port:+u16)+-%3E+impl+Iterator%3CItem+=+TcpStream%3E+%7B%0A++++let+listener+=+TcpListener::bind((%22127.0.0.1%22,+port)).unwrap();%0A++++listener.into_incoming()%0A++++++++.filter_map(Result::ok)+/*+Ignore+failed+connections+*/%0A%7D%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++for+stream+in+listen_on(80)+%7B%0A++++++++/*+handle+the+connection+here+*/%0A++++%7D%0A++++Ok(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_ttl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> Â· <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#916-918\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_ttl\" class=\"fn\">set_ttl</a>(&amp;self, ttl: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the value for the <code>IP_TTL</code> option on this socket.</p>\n<p>This value sets the time-to-live field that is used in every packet sent\nfrom this socket.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span>listener = TcpListener::bind(<span class=\"string\">\"127.0.0.1:80\"</span>).unwrap();\nlistener.set_ttl(<span class=\"number\">100</span>).expect(<span class=\"string\">\"could not set TTL\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpListener;%0A++++%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:80%22).unwrap();%0A++++listener.set_ttl(100).expect(%22could+not+set+TTL%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ttl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> Â· <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#934-936\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.ttl\" class=\"fn\">ttl</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the value of the <code>IP_TTL</code> option for this socket.</p>\n<p>For more information about this option, see <a href=\"struct.TcpListener.html#method.set_ttl\" title=\"method std::net::TcpListener::set_ttl\"><code>TcpListener::set_ttl</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span>listener = TcpListener::bind(<span class=\"string\">\"127.0.0.1:80\"</span>).unwrap();\nlistener.set_ttl(<span class=\"number\">100</span>).expect(<span class=\"string\">\"could not set TTL\"</span>);\n<span class=\"macro\">assert_eq!</span>(listener.ttl().unwrap_or(<span class=\"number\">0</span>), <span class=\"number\">100</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpListener;%0A++++%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:80%22).unwrap();%0A++++listener.set_ttl(100).expect(%22could+not+set+TTL%22);%0A++++assert_eq!(listener.ttl().unwrap_or(0),+100);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><section id=\"method.set_only_v6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> Â· <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#941-943\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_only_v6\" class=\"fn\">set_only_v6</a>(&amp;self, only_v6: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 1.16.0: this option can only be set before the socket is bound</span></div></span><section id=\"method.only_v6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> Â· <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#948-950\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.only_v6\" class=\"fn\">only_v6</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 1.16.0: this option can only be set before the socket is bound</span></div></span><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take_error\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> Â· <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#967-969\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.take_error\" class=\"fn\">take_error</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../io/struct.Error.html\" title=\"struct std::io::Error\">Error</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the value of the <code>SO_ERROR</code> option on this socket.</p>\n<p>This will retrieve the stored error in the underlying socket, clearing\nthe field in the process. This can be useful for checking errors between\ncalls.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span>listener = TcpListener::bind(<span class=\"string\">\"127.0.0.1:80\"</span>).unwrap();\nlistener.take_error().expect(<span class=\"string\">\"No error was expected\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpListener;%0A++++%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:80%22).unwrap();%0A++++listener.take_error().expect(%22No+error+was+expected%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_nonblocking\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> Â· <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#1014-1016\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_nonblocking\" class=\"fn\">set_nonblocking</a>(&amp;self, nonblocking: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Moves this TCP stream into or out of nonblocking mode.</p>\n<p>This will result in the <code>accept</code> operation becoming nonblocking,\ni.e., immediately returning from their calls. If the IO operation is\nsuccessful, <code>Ok</code> is returned and no further action is required. If the\nIO operation could not be completed and needs to be retried, an error\nwith kind <a href=\"../io/enum.ErrorKind.html#variant.WouldBlock\" title=\"variant std::io::ErrorKind::WouldBlock\"><code>io::ErrorKind::WouldBlock</code></a> is returned.</p>\n<p>On Unix platforms, calling this method corresponds to calling <code>fcntl</code>\n<code>FIONBIO</code>. On Windows calling this method corresponds to calling\n<code>ioctlsocket</code> <code>FIONBIO</code>.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">Â§</a>Examples</h5>\n<p>Bind a TCP listener to an address, listen for connections, and read\nbytes in nonblocking mode:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span>listener = TcpListener::bind(<span class=\"string\">\"127.0.0.1:7878\"</span>).unwrap();\nlistener.set_nonblocking(<span class=\"bool-val\">true</span>).expect(<span class=\"string\">\"Cannot set non-blocking\"</span>);\n\n<span class=\"kw\">for </span>stream <span class=\"kw\">in </span>listener.incoming() {\n    <span class=\"kw\">match </span>stream {\n        <span class=\"prelude-val\">Ok</span>(s) =&gt; {\n            <span class=\"comment\">// do something with the TcpStream\n            </span>handle_connection(s);\n        }\n        <span class=\"prelude-val\">Err</span>(<span class=\"kw-2\">ref </span>e) <span class=\"kw\">if </span>e.kind() == io::ErrorKind::WouldBlock =&gt; {\n            <span class=\"comment\">// wait until network socket is ready, typically implemented\n            // via platform-specific APIs such as epoll or IOCP\n            </span>wait_for_fd();\n            <span class=\"kw\">continue</span>;\n        }\n        <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"macro\">panic!</span>(<span class=\"string\">\"encountered IO error: {e}\"</span>),\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::net::TcpListener;%0A++++%0A++++let+listener+=+TcpListener::bind(%22127.0.0.1:7878%22).unwrap();%0A++++listener.set_nonblocking(true).expect(%22Cannot+set+non-blocking%22);%0A++++%0A++++fn+wait_for_fd()+%7B+unimplemented!()+%7D%0A++++fn+handle_connection(stream:+std::net::TcpStream)+%7B+unimplemented!()+%7D%0A++++for+stream+in+listener.incoming()+%7B%0A++++++++match+stream+%7B%0A++++++++++++Ok(s)+=%3E+%7B%0A++++++++++++++++//+do+something+with+the+TcpStream%0A++++++++++++++++handle_connection(s);%0A++++++++++++%7D%0A++++++++++++Err(ref+e)+if+e.kind()+==+io::ErrorKind::WouldBlock+=%3E+%7B%0A++++++++++++++++//+wait+until+network+socket+is+ready,+typically+implemented%0A++++++++++++++++//+via+platform-specific+APIs+such+as+epoll+or+IOCP%0A++++++++++++++++wait_for_fd();%0A++++++++++++++++continue;%0A++++++++++++%7D%0A++++++++++++Err(e)+=%3E+panic!(%22encountered+IO+error:+%7Be%7D%22),%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsFd-for-TcpListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> Â· <a class=\"src\" href=\"../../src/std/os/fd/owned.rs.html#338-343\">source</a></span><a href=\"#impl-AsFd-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.AsFd.html\" title=\"trait std::os::fd::AsFd\">AsFd</a> for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/owned.rs.html#340-342\">source</a><a href=\"#method.as_fd\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/fd/trait.AsFd.html#tymethod.as_fd\" class=\"fn\">as_fd</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../os/fd/struct.BorrowedFd.html\" title=\"struct std::os::fd::BorrowedFd\">BorrowedFd</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the file descriptor. <a href=\"../os/fd/trait.AsFd.html#tymethod.as_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRawFd-for-TcpListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/os/fd/net.rs.html#17\">source</a></span><a href=\"#impl-AsRawFd-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.AsRawFd.html\" title=\"trait std::os::fd::AsRawFd\">AsRawFd</a> for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/net.rs.html#17\">source</a><a href=\"#method.as_raw_fd\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/fd/trait.AsRawFd.html#tymethod.as_raw_fd\" class=\"fn\">as_raw_fd</a>(&amp;self) -&gt; <a class=\"type\" href=\"../os/fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a></h4></section></summary><div class=\"docblock\">Extracts the raw file descriptor. <a href=\"../os/fd/trait.AsRawFd.html#tymethod.as_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRawSocket-for-TcpListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/os/windows/io/raw.rs.html#245-250\">source</a></span><a href=\"#impl-AsRawSocket-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.AsRawSocket.html\" title=\"trait std::os::windows::io::AsRawSocket\">AsRawSocket</a> for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw_socket\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/raw.rs.html#247-249\">source</a><a href=\"#method.as_raw_socket\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.AsRawSocket.html#tymethod.as_raw_socket\" class=\"fn\">as_raw_socket</a>(&amp;self) -&gt; <a class=\"type\" href=\"../os/windows/io/type.RawSocket.html\" title=\"type std::os::windows::io::RawSocket\">RawSocket</a></h4></section></summary><div class=\"docblock\">Extracts the raw socket. <a href=\"../os/windows/io/trait.AsRawSocket.html#tymethod.as_raw_socket\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsSocket-for-TcpListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> Â· <a class=\"src\" href=\"../../src/std/os/windows/io/socket.rs.html#338-343\">source</a></span><a href=\"#impl-AsSocket-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.AsSocket.html\" title=\"trait std::os::windows::io::AsSocket\">AsSocket</a> for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_socket\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/socket.rs.html#340-342\">source</a><a href=\"#method.as_socket\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.AsSocket.html#tymethod.as_socket\" class=\"fn\">as_socket</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../os/windows/io/struct.BorrowedSocket.html\" title=\"struct std::os::windows::io::BorrowedSocket\">BorrowedSocket</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the socket.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-TcpListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#1067-1071\">source</a></span><a href=\"#impl-Debug-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#1068-1070\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3COwnedFd%3E-for-TcpListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> Â· <a class=\"src\" href=\"../../src/std/os/fd/owned.rs.html#355-362\">source</a></span><a href=\"#impl-From%3COwnedFd%3E-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../os/fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a>&gt; for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/owned.rs.html#357-361\">source</a><a href=\"#method.from-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(owned_fd: <a class=\"struct\" href=\"../os/fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a>) -&gt; Self</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3COwnedSocket%3E-for-TcpListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> Â· <a class=\"src\" href=\"../../src/std/os/windows/io/socket.rs.html#355-360\">source</a></span><a href=\"#impl-From%3COwnedSocket%3E-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../os/windows/io/struct.OwnedSocket.html\" title=\"struct std::os::windows::io::OwnedSocket\">OwnedSocket</a>&gt; for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/socket.rs.html#357-359\">source</a><a href=\"#method.from-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(owned: <a class=\"struct\" href=\"../os/windows/io/struct.OwnedSocket.html\" title=\"struct std::os::windows::io::OwnedSocket\">OwnedSocket</a>) -&gt; Self</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CTcpListener%3E-for-OwnedFd\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> Â· <a class=\"src\" href=\"../../src/std/os/fd/owned.rs.html#346-352\">source</a></span><a href=\"#impl-From%3CTcpListener%3E-for-OwnedFd\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a>&gt; for <a class=\"struct\" href=\"../os/fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/owned.rs.html#349-351\">source</a><a href=\"#method.from-3\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tcp_listener: <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a>) -&gt; <a class=\"struct\" href=\"../os/fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a></h4></section></summary><div class=\"docblock\"><p>Takes ownership of a <a href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\"><code>TcpListener</code></a>â€™s socket file descriptor.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CTcpListener%3E-for-OwnedSocket\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> Â· <a class=\"src\" href=\"../../src/std/os/windows/io/socket.rs.html#346-352\">source</a></span><a href=\"#impl-From%3CTcpListener%3E-for-OwnedSocket\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a>&gt; for <a class=\"struct\" href=\"../os/windows/io/struct.OwnedSocket.html\" title=\"struct std::os::windows::io::OwnedSocket\">OwnedSocket</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/socket.rs.html#349-351\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tcp_listener: <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a>) -&gt; <a class=\"struct\" href=\"../os/windows/io/struct.OwnedSocket.html\" title=\"struct std::os::windows::io::OwnedSocket\">OwnedSocket</a></h4></section></summary><div class=\"docblock\"><p>Takes ownership of a <a href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\"><code>TcpListener</code></a>â€™s socket.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromRawFd-for-TcpListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> Â· <a class=\"src\" href=\"../../src/std/os/fd/net.rs.html#33\">source</a></span><a href=\"#impl-FromRawFd-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.FromRawFd.html\" title=\"trait std::os::fd::FromRawFd\">FromRawFd</a> for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/net.rs.html#33\">source</a><a href=\"#method.from_raw_fd\" class=\"anchor\">Â§</a><h4 class=\"code-header\">unsafe fn <a href=\"../os/fd/trait.FromRawFd.html#tymethod.from_raw_fd\" class=\"fn\">from_raw_fd</a>(fd: <a class=\"type\" href=\"../os/fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a>) -&gt; <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h4></section></summary><div class=\"docblock\">Constructs a new instance of <code>Self</code> from the given raw file\ndescriptor. <a href=\"../os/fd/trait.FromRawFd.html#tymethod.from_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromRawSocket-for-TcpListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> Â· <a class=\"src\" href=\"../../src/std/os/windows/io/raw.rs.html#268-274\">source</a></span><a href=\"#impl-FromRawSocket-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.FromRawSocket.html\" title=\"trait std::os::windows::io::FromRawSocket\">FromRawSocket</a> for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw_socket\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/raw.rs.html#270-273\">source</a><a href=\"#method.from_raw_socket\" class=\"anchor\">Â§</a><h4 class=\"code-header\">unsafe fn <a href=\"../os/windows/io/trait.FromRawSocket.html#tymethod.from_raw_socket\" class=\"fn\">from_raw_socket</a>(sock: <a class=\"type\" href=\"../os/windows/io/type.RawSocket.html\" title=\"type std::os::windows::io::RawSocket\">RawSocket</a>) -&gt; <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h4></section></summary><div class=\"docblock\">Constructs a new I/O object from the specified raw socket. <a href=\"../os/windows/io/trait.FromRawSocket.html#tymethod.from_raw_socket\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoRawFd-for-TcpListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> Â· <a class=\"src\" href=\"../../src/std/os/fd/net.rs.html#46\">source</a></span><a href=\"#impl-IntoRawFd-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.IntoRawFd.html\" title=\"trait std::os::fd::IntoRawFd\">IntoRawFd</a> for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/net.rs.html#46\">source</a><a href=\"#method.into_raw_fd\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/fd/trait.IntoRawFd.html#tymethod.into_raw_fd\" class=\"fn\">into_raw_fd</a>(self) -&gt; <a class=\"type\" href=\"../os/fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a></h4></section></summary><div class=\"docblock\">Consumes this object, returning the raw underlying file descriptor. <a href=\"../os/fd/trait.IntoRawFd.html#tymethod.into_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoRawSocket-for-TcpListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> Â· <a class=\"src\" href=\"../../src/std/os/windows/io/raw.rs.html#293-298\">source</a></span><a href=\"#impl-IntoRawSocket-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.IntoRawSocket.html\" title=\"trait std::os::windows::io::IntoRawSocket\">IntoRawSocket</a> for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw_socket\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/raw.rs.html#295-297\">source</a><a href=\"#method.into_raw_socket\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.IntoRawSocket.html#tymethod.into_raw_socket\" class=\"fn\">into_raw_socket</a>(self) -&gt; <a class=\"type\" href=\"../os/windows/io/type.RawSocket.html\" title=\"type std::os::windows::io::RawSocket\">RawSocket</a></h4></section></summary><div class=\"docblock\">Consumes this object, returning the raw underlying socket. <a href=\"../os/windows/io/trait.IntoRawSocket.html#tymethod.into_raw_socket\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TcpListenerExt-for-TcpListener\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/net/mod.rs.html#19-23\">source</a><a href=\"#impl-TcpListenerExt-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/wasi/net/trait.TcpListenerExt.html\" title=\"trait std::os::wasi::net::TcpListenerExt\">TcpListenerExt</a> for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>WASI</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sock_accept\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/net/mod.rs.html#20-22\">source</a><a href=\"#method.sock_accept\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/net/trait.TcpListenerExt.html#tymethod.sock_accept\" class=\"fn\">sock_accept</a>(&amp;self, flags: <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Accept a socket. <a href=\"../os/wasi/net/trait.TcpListenerExt.html#tymethod.sock_accept\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-TcpListener\" class=\"impl\"><a href=\"#impl-Freeze-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3></section><section id=\"impl-RefUnwindSafe-for-TcpListener\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3></section><section id=\"impl-Send-for-TcpListener\" class=\"impl\"><a href=\"#impl-Send-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3></section><section id=\"impl-Sync-for-TcpListener\" class=\"impl\"><a href=\"#impl-Sync-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3></section><section id=\"impl-Unpin-for-TcpListener\" class=\"impl\"><a href=\"#impl-Unpin-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3></section><section id=\"impl-UnwindSafe-for-TcpListener\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-TcpListener\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\">TcpListener</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-4\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"Incoming<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Incoming.html\\\" title=\\\"struct std::net::Incoming\\\">Incoming</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Incoming.html\\\" title=\\\"struct std::net::Incoming\\\">Incoming</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"../io/type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"struct\\\" href=\\\"struct.TcpStream.html\\\" title=\\\"struct std::net::TcpStream\\\">TcpStream</a>&gt;;</div>\",\"IntoIncoming\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.IntoIncoming.html\\\" title=\\\"struct std::net::IntoIncoming\\\">IntoIncoming</a></code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.IntoIncoming.html\\\" title=\\\"struct std::net::IntoIncoming\\\">IntoIncoming</a></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"../io/type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"struct\\\" href=\\\"struct.TcpStream.html\\\" title=\\\"struct std::net::TcpStream\\\">TcpStream</a>&gt;;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:01.765Z"
}