{
	"title": "BufWriter in std::io - Rust",
	"url": "https://doc.rust-lang.org/stable/std/io/struct.BufWriter.html",
	"markdown": "# BufWriter in std::io - Rust\n\n## Struct [std](../index.html)::[io](index.html)::[BufWriter](#)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufwriter.rs.html#69-80) ·\n\n```\npub struct BufWriter<W: ?Sized + Write> { /* private fields */ }\n```\n\nExpand description\n\nWraps a writer and buffers its output.\n\nIt can be excessively inefficient to work directly with something that implements [`Write`](trait.Write.html \"trait std::io::Write\"). For example, every call to [`write`](about:blank/net/struct.TcpStream.html#method.write \"method std::net::TcpStream::write\") on [`TcpStream`](../net/struct.TcpStream.html \"struct std::net::TcpStream\") results in a system call. A `BufWriter<W>` keeps an in-memory buffer of data and writes it to an underlying writer in large, infrequent batches.\n\n`BufWriter<W>` can improve the speed of programs that make _small_ and _repeated_ write calls to the same file or network socket. It does not help when writing very large amounts at once, or writing just one or a few times. It also provides no advantage when writing to a destination that is in memory, like a `[Vec](../vec/struct.Vec.html \"struct std::vec::Vec\")<u8>`.\n\nIt is critical to call [`flush`](about:blank/struct.BufWriter.html#method.flush \"method std::io::BufWriter::flush\") before `BufWriter<W>` is dropped. Though dropping will attempt to flush the contents of the buffer, any errors that happen in the process of dropping will be ignored. Calling [`flush`](about:blank/struct.BufWriter.html#method.flush \"method std::io::BufWriter::flush\") ensures that the buffer is empty and thus dropping will not even attempt file operations.\n\n## [§](#examples)Examples\n\nLet’s write the numbers one through ten to a [`TcpStream`](../net/struct.TcpStream.html \"struct std::net::TcpStream\"):\n\n```\nuse std::io::prelude::*;\nuse std::net::TcpStream;\n\nlet mut stream = TcpStream::connect(\"127.0.0.1:34254\").unwrap();\n\nfor i in 0..10 {\n    stream.write(&[i+1]).unwrap();\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::prelude::*;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+mut+stream+=+TcpStream::connect(%22127.0.0.1:34254%22).unwrap();%0A++++%0A++++for+i+in+0..10+%7B%0A++++++++stream.write(%26%5Bi%2B1%5D).unwrap();%0A++++%7D%0A%7D&edition=2021)\n\nBecause we’re not buffering, we write each one in turn, incurring the overhead of a system call per byte written. We can fix this with a `BufWriter<W>`:\n\n```\nuse std::io::prelude::*;\nuse std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet mut stream = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n\nfor i in 0..10 {\n    stream.write(&[i+1]).unwrap();\n}\nstream.flush().unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::prelude::*;%0A++++use+std::io::BufWriter;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+mut+stream+=+BufWriter::new(TcpStream::connect(%22127.0.0.1:34254%22).unwrap());%0A++++%0A++++for+i+in+0..10+%7B%0A++++++++stream.write(%26%5Bi%2B1%5D).unwrap();%0A++++%7D%0A++++stream.flush().unwrap();%0A%7D&edition=2021)\n\nBy wrapping the stream with a `BufWriter<W>`, these ten writes are all grouped together by the buffer and will all be written out in one system call when the `stream` is flushed.\n\n[source](about:blank/src/std/io/buffered/bufwriter.rs.html#82-177)[§](#impl-BufWriter%3CW%3E)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufwriter.rs.html#95-97)\n\nCreates a new `BufWriter<W>` with a default buffer capacity. The default is currently 8 KiB, but may change in the future.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet mut buffer = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::BufWriter;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+mut+buffer+=+BufWriter::new(TcpStream::connect(%22127.0.0.1:34254%22).unwrap());%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufwriter.rs.html#113-115)\n\nCreates a new `BufWriter<W>` with at least the specified buffer capacity.\n\n##### [§](#examples-2)Examples\n\nCreating a buffer with a buffer of at least a hundred bytes.\n\n```\nuse std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:34254\").unwrap();\nlet mut buffer = BufWriter::with_capacity(100, stream);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::BufWriter;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:34254%22).unwrap();%0A++++let+mut+buffer+=+BufWriter::with_capacity(100,+stream);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufwriter.rs.html#137-142)\n\nUnwraps this `BufWriter<W>`, returning the underlying writer.\n\nThe buffer is written out before returning the writer.\n\n##### [§](#errors)Errors\n\nAn [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") will be returned if an error occurs while flushing the buffer.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet mut buffer = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n\n// unwrap the TcpStream and flush the buffer\nlet stream = buffer.into_inner().unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::BufWriter;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+mut+buffer+=+BufWriter::new(TcpStream::connect(%22127.0.0.1:34254%22).unwrap());%0A++++%0A++++//+unwrap+the+TcpStream+and+flush+the+buffer%0A++++let+stream+=+buffer.into_inner().unwrap();%0A%7D&edition=2021)\n\n1.56.0 · [source](about:blank/src/std/io/buffered/bufwriter.rs.html#167-176)\n\nDisassembles this `BufWriter<W>`, returning the underlying writer, and any buffered but unwritten data.\n\nIf the underlying writer panicked, it is not known what portion of the data was written. In this case, we return `WriterPanicked` for the buffered data (from which the buffer contents can still be recovered).\n\n`into_parts` makes no attempt to flush data and cannot fail.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::io::{BufWriter, Write};\n\nlet mut buffer = [0u8; 10];\nlet mut stream = BufWriter::new(buffer.as_mut());\nwrite!(stream, \"too much data\").unwrap();\nstream.flush().expect_err(\"it doesn't fit\");\nlet (recovered_writer, buffered_data) = stream.into_parts();\nassert_eq!(recovered_writer.len(), 0);\nassert_eq!(&buffered_data.unwrap(), b\"ata\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7BBufWriter,+Write%7D;%0A++++%0A++++let+mut+buffer+=+%5B0u8;+10%5D;%0A++++let+mut+stream+=+BufWriter::new(buffer.as_mut());%0A++++write!(stream,+%22too+much+data%22).unwrap();%0A++++stream.flush().expect_err(%22it+doesn%27t+fit%22);%0A++++let+(recovered_writer,+buffered_data)+=+stream.into_parts();%0A++++assert_eq!(recovered_writer.len(),+0);%0A++++assert_eq!(%26buffered_data.unwrap(),+b%22ata%22);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/io/buffered/bufwriter.rs.html#179-445)[§](#impl-BufWriter%3CW%3E-1)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufwriter.rs.html#275-277)\n\nGets a reference to the underlying writer.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet mut buffer = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n\n// we can use reference just like buffer\nlet reference = buffer.get_ref();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::BufWriter;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+mut+buffer+=+BufWriter::new(TcpStream::connect(%22127.0.0.1:34254%22).unwrap());%0A++++%0A++++//+we+can+use+reference+just+like+buffer%0A++++let+reference+=+buffer.get_ref();%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufwriter.rs.html#295-297)\n\nGets a mutable reference to the underlying writer.\n\nIt is inadvisable to directly write to the underlying writer.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet mut buffer = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n\n// we can use reference just like buffer\nlet reference = buffer.get_mut();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::BufWriter;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+mut+buffer+=+BufWriter::new(TcpStream::connect(%22127.0.0.1:34254%22).unwrap());%0A++++%0A++++//+we+can+use+reference+just+like+buffer%0A++++let+reference+=+buffer.get_mut();%0A%7D&edition=2021)\n\n1.37.0 · [source](about:blank/src/std/io/buffered/bufwriter.rs.html#313-315)\n\nReturns a reference to the internally buffered data.\n\n##### [§](#examples-7)Examples\n\n```\nuse std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet buf_writer = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n\n// See how many bytes are currently buffered\nlet bytes_buffered = buf_writer.buffer().len();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::BufWriter;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+buf_writer+=+BufWriter::new(TcpStream::connect(%22127.0.0.1:34254%22).unwrap());%0A++++%0A++++//+See+how+many+bytes+are+currently+buffered%0A++++let+bytes_buffered+=+buf_writer.buffer().len();%0A%7D&edition=2021)\n\n1.46.0 · [source](about:blank/src/std/io/buffered/bufwriter.rs.html#345-347)\n\nReturns the number of bytes the internal buffer can hold without flushing.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet buf_writer = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n\n// Check the capacity of the inner buffer\nlet capacity = buf_writer.capacity();\n// Calculate how many bytes can be written without flushing\nlet without_flush = capacity - buf_writer.buffer().len();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::BufWriter;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+buf_writer+=+BufWriter::new(TcpStream::connect(%22127.0.0.1:34254%22).unwrap());%0A++++%0A++++//+Check+the+capacity+of+the+inner+buffer%0A++++let+capacity+=+buf_writer.capacity();%0A++++//+Calculate+how+many+bytes+can+be+written+without+flushing%0A++++let+without_flush+=+capacity+-+buf_writer.buffer().len();%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufwriter.rs.html#647-657)[§](#impl-Debug-for-BufWriter%3CW%3E)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufwriter.rs.html#671-678)[§](#impl-Drop-for-BufWriter%3CW%3E)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufwriter.rs.html#660-668)[§](#impl-Seek-for-BufWriter%3CW%3E)\n\n[source](about:blank/src/std/io/buffered/bufwriter.rs.html#664-667)[§](#method.seek)\n\nSeek to the offset, in bytes, in the underlying writer.\n\nSeeking always writes out the internal buffer before seeking.\n\n1.55.0 · [source](about:blank/src/std/io/mod.rs.html#1957-1960)[§](#method.rewind)\n\nRewind to the beginning of a stream. [Read more](about:blank/trait.Seek.html#method.rewind)\n\n[source](about:blank/src/std/io/mod.rs.html#1997-2008)[§](#method.stream_len)\n\n🔬This is a nightly-only experimental API. (`seek_stream_len` [#59359](https://github.com/rust-lang/rust/issues/59359))\n\nReturns the length of this stream (in bytes). [Read more](about:blank/trait.Seek.html#method.stream_len)\n\n1.51.0 · [source](about:blank/src/std/io/mod.rs.html#2034-2036)[§](#method.stream_position)\n\nReturns the current seek position from the start of the stream. [Read more](about:blank/trait.Seek.html#method.stream_position)\n\n1.80.0 · [source](about:blank/src/std/io/mod.rs.html#2062-2065)[§](#method.seek_relative)\n\nSeeks relative to the current position. [Read more](about:blank/trait.Seek.html#method.seek_relative)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufwriter.rs.html#515-644)[§](#impl-Write-for-BufWriter%3CW%3E)\n\n[source](about:blank/src/std/io/buffered/bufwriter.rs.html#517-530)[§](#method.write)\n\nWrite a buffer into this writer, returning how many bytes were written. [Read more](about:blank/trait.Write.html#tymethod.write)\n\n[source](about:blank/src/std/io/buffered/bufwriter.rs.html#533-546)[§](#method.write_all)\n\nAttempts to write an entire buffer into this writer. [Read more](about:blank/trait.Write.html#method.write_all)\n\n[source](about:blank/src/std/io/buffered/bufwriter.rs.html#548-635)[§](#method.write_vectored)\n\nLike [`write`](about:blank/trait.Write.html#tymethod.write \"method std::io::Write::write\"), except that it writes from a slice of buffers. [Read more](about:blank/trait.Write.html#method.write_vectored)\n\n[source](about:blank/src/std/io/buffered/bufwriter.rs.html#637-639)[§](#method.is_write_vectored)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\n[source](about:blank/src/std/io/buffered/bufwriter.rs.html#641-643)[§](#method.flush)\n\nFlush this output stream, ensuring that all intermediately buffered contents reach their destination. [Read more](about:blank/trait.Write.html#tymethod.flush)\n\n[source](about:blank/src/std/io/mod.rs.html#1761-1776)[§](#method.write_all_vectored)\n\n🔬This is a nightly-only experimental API. (`write_all_vectored` [#70436](https://github.com/rust-lang/rust/issues/70436))\n\nAttempts to write multiple buffers into this writer. [Read more](about:blank/trait.Write.html#method.write_all_vectored)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1814-1850)[§](#method.write_fmt)\n\nWrites a formatted string into this writer, returning any error encountered. [Read more](about:blank/trait.Write.html#method.write_fmt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Wraps a writer and buffers its output.\"><title>BufWriter in std::io - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">BufWriter</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">BufWriter</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.buffer\">buffer</a></li><li><a href=\"#method.capacity\">capacity</a></li><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.get_ref\">get_ref</a></li><li><a href=\"#method.into_inner\">into_inner</a></li><li><a href=\"#method.into_parts\">into_parts</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.with_capacity\">with_capacity</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-BufWriter%3CW%3E\">Debug</a></li><li><a href=\"#impl-Drop-for-BufWriter%3CW%3E\">Drop</a></li><li><a href=\"#impl-Seek-for-BufWriter%3CW%3E\">Seek</a></li><li><a href=\"#impl-Write-for-BufWriter%3CW%3E\">Write</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-BufWriter%3CW%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-BufWriter%3CW%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-BufWriter%3CW%3E\">Send</a></li><li><a href=\"#impl-Sync-for-BufWriter%3CW%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-BufWriter%3CW%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-BufWriter%3CW%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::io</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"prelude/index.html\">prelude</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowedBuf.html\">BorrowedBuf</a></li><li><a href=\"struct.BorrowedCursor.html\">BorrowedCursor</a></li><li><a href=\"struct.BufReader.html\">BufReader</a></li><li><a href=\"struct.BufWriter.html\">BufWriter</a></li><li><a href=\"struct.Bytes.html\">Bytes</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.IntoInnerError.html\">IntoInnerError</a></li><li><a href=\"struct.IoSlice.html\">IoSlice</a></li><li><a href=\"struct.IoSliceMut.html\">IoSliceMut</a></li><li><a href=\"struct.LineWriter.html\">LineWriter</a></li><li><a href=\"struct.Lines.html\">Lines</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.Sink.html\">Sink</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.Stderr.html\">Stderr</a></li><li><a href=\"struct.StderrLock.html\">StderrLock</a></li><li><a href=\"struct.Stdin.html\">Stdin</a></li><li><a href=\"struct.StdinLock.html\">StdinLock</a></li><li><a href=\"struct.Stdout.html\">Stdout</a></li><li><a href=\"struct.StdoutLock.html\">StdoutLock</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.WriterPanicked.html\">WriterPanicked</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.ErrorKind.html\">ErrorKind</a></li><li><a href=\"enum.SeekFrom.html\">SeekFrom</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BufRead.html\">BufRead</a></li><li><a href=\"trait.IsTerminal.html\">IsTerminal</a></li><li><a href=\"trait.Read.html\">Read</a></li><li><a href=\"trait.Seek.html\">Seek</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.sink.html\">sink</a></li><li><a href=\"fn.stderr.html\">stderr</a></li><li><a href=\"fn.stdin.html\">stdin</a></li><li><a href=\"fn.stdout.html\">stdout</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.RawOsError.html\">RawOsError</a></li><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">io</a>::<wbr><a class=\"struct\" href=\"#\">BufWriter</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufwriter.rs.html#69-80\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct BufWriter&lt;W: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a>&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Wraps a writer and buffers its output.</p>\n<p>It can be excessively inefficient to work directly with something that\nimplements <a href=\"trait.Write.html\" title=\"trait std::io::Write\"><code>Write</code></a>. For example, every call to\n<a href=\"../net/struct.TcpStream.html#method.write\" title=\"method std::net::TcpStream::write\"><code>write</code></a> on <a href=\"../net/struct.TcpStream.html\" title=\"struct std::net::TcpStream\"><code>TcpStream</code></a> results in a system call. A\n<code>BufWriter&lt;W&gt;</code> keeps an in-memory buffer of data and writes it to an underlying\nwriter in large, infrequent batches.</p>\n<p><code>BufWriter&lt;W&gt;</code> can improve the speed of programs that make <em>small</em> and\n<em>repeated</em> write calls to the same file or network socket. It does not\nhelp when writing very large amounts at once, or writing just one or a few\ntimes. It also provides no advantage when writing to a destination that is\nin memory, like a <code><a href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;u8&gt;</code>.</p>\n<p>It is critical to call <a href=\"struct.BufWriter.html#method.flush\" title=\"method std::io::BufWriter::flush\"><code>flush</code></a> before <code>BufWriter&lt;W&gt;</code> is dropped. Though\ndropping will attempt to flush the contents of the buffer, any errors\nthat happen in the process of dropping will be ignored. Calling <a href=\"struct.BufWriter.html#method.flush\" title=\"method std::io::BufWriter::flush\"><code>flush</code></a>\nensures that the buffer is empty and thus dropping will not even attempt\nfile operations.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Let’s write the numbers one through ten to a <a href=\"../net/struct.TcpStream.html\" title=\"struct std::net::TcpStream\"><code>TcpStream</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:34254\"</span>).unwrap();\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    stream.write(<span class=\"kw-2\">&amp;</span>[i+<span class=\"number\">1</span>]).unwrap();\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::prelude::*;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+mut+stream+=+TcpStream::connect(%22127.0.0.1:34254%22).unwrap();%0A++++%0A++++for+i+in+0..10+%7B%0A++++++++stream.write(%26%5Bi%2B1%5D).unwrap();%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Because we’re not buffering, we write each one in turn, incurring the\noverhead of a system call per byte written. We can fix this with a\n<code>BufWriter&lt;W&gt;</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::io::BufWriter;\n<span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stream = BufWriter::new(TcpStream::connect(<span class=\"string\">\"127.0.0.1:34254\"</span>).unwrap());\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    stream.write(<span class=\"kw-2\">&amp;</span>[i+<span class=\"number\">1</span>]).unwrap();\n}\nstream.flush().unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::prelude::*;%0A++++use+std::io::BufWriter;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+mut+stream+=+BufWriter::new(TcpStream::connect(%22127.0.0.1:34254%22).unwrap());%0A++++%0A++++for+i+in+0..10+%7B%0A++++++++stream.write(%26%5Bi%2B1%5D).unwrap();%0A++++%7D%0A++++stream.flush().unwrap();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>By wrapping the stream with a <code>BufWriter&lt;W&gt;</code>, these ten writes are all grouped\ntogether by the buffer and will all be written out in one system call when\nthe <code>stream</code> is flushed.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BufWriter%3CW%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufwriter.rs.html#82-177\">source</a><a href=\"#impl-BufWriter%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W: <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a>&gt; <a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufwriter.rs.html#95-97\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>(inner: W) -&gt; <a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BufWriter<W>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>BufWriter&lt;W&gt;</code> with a default buffer capacity. The default is currently 8 KiB,\nbut may change in the future.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::BufWriter;\n<span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = BufWriter::new(TcpStream::connect(<span class=\"string\">\"127.0.0.1:34254\"</span>).unwrap());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::BufWriter;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+mut+buffer+=+BufWriter::new(TcpStream::connect(%22127.0.0.1:34254%22).unwrap());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufwriter.rs.html#113-115\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, inner: W) -&gt; <a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BufWriter<W>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>BufWriter&lt;W&gt;</code> with at least the specified buffer capacity.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Creating a buffer with a buffer of at least a hundred bytes.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::BufWriter;\n<span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:34254\"</span>).unwrap();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = BufWriter::with_capacity(<span class=\"number\">100</span>, stream);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::BufWriter;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:34254%22).unwrap();%0A++++let+mut+buffer+=+BufWriter::with_capacity(100,+stream);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufwriter.rs.html#137-142\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;W, <a class=\"struct\" href=\"struct.IntoInnerError.html\" title=\"struct std::io::IntoInnerError\">IntoInnerError</a>&lt;<a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Unwraps this <code>BufWriter&lt;W&gt;</code>, returning the underlying writer.</p>\n<p>The buffer is written out before returning the writer.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>An <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> will be returned if an error occurs while flushing the buffer.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::BufWriter;\n<span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = BufWriter::new(TcpStream::connect(<span class=\"string\">\"127.0.0.1:34254\"</span>).unwrap());\n\n<span class=\"comment\">// unwrap the TcpStream and flush the buffer\n</span><span class=\"kw\">let </span>stream = buffer.into_inner().unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::BufWriter;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+mut+buffer+=+BufWriter::new(TcpStream::connect(%22127.0.0.1:34254%22).unwrap());%0A++++%0A++++//+unwrap+the+TcpStream+and+flush+the+buffer%0A++++let+stream+=+buffer.into_inner().unwrap();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_parts\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufwriter.rs.html#167-176\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_parts\" class=\"fn\">into_parts</a>(self) -&gt; (W, <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;, <a class=\"struct\" href=\"struct.WriterPanicked.html\" title=\"struct std::io::WriterPanicked\">WriterPanicked</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>Disassembles this <code>BufWriter&lt;W&gt;</code>, returning the underlying writer, and any buffered but\nunwritten data.</p>\n<p>If the underlying writer panicked, it is not known what portion of the data was written.\nIn this case, we return <code>WriterPanicked</code> for the buffered data (from which the buffer\ncontents can still be recovered).</p>\n<p><code>into_parts</code> makes no attempt to flush data and cannot fail.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{BufWriter, Write};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = [<span class=\"number\">0u8</span>; <span class=\"number\">10</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stream = BufWriter::new(buffer.as_mut());\n<span class=\"macro\">write!</span>(stream, <span class=\"string\">\"too much data\"</span>).unwrap();\nstream.flush().expect_err(<span class=\"string\">\"it doesn't fit\"</span>);\n<span class=\"kw\">let </span>(recovered_writer, buffered_data) = stream.into_parts();\n<span class=\"macro\">assert_eq!</span>(recovered_writer.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>buffered_data.unwrap(), <span class=\"string\">b\"ata\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7BBufWriter,+Write%7D;%0A++++%0A++++let+mut+buffer+=+%5B0u8;+10%5D;%0A++++let+mut+stream+=+BufWriter::new(buffer.as_mut());%0A++++write!(stream,+%22too+much+data%22).unwrap();%0A++++stream.flush().expect_err(%22it+doesn't+fit%22);%0A++++let+(recovered_writer,+buffered_data)+=+stream.into_parts();%0A++++assert_eq!(recovered_writer.len(),+0);%0A++++assert_eq!(%26buffered_data.unwrap(),+b%22ata%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BufWriter%3CW%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufwriter.rs.html#179-445\">source</a><a href=\"#impl-BufWriter%3CW%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a>&gt; <a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufwriter.rs.html#275-277\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_ref\" class=\"fn\">get_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;W</a></h4></section></summary><div class=\"docblock\"><p>Gets a reference to the underlying writer.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::BufWriter;\n<span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = BufWriter::new(TcpStream::connect(<span class=\"string\">\"127.0.0.1:34254\"</span>).unwrap());\n\n<span class=\"comment\">// we can use reference just like buffer\n</span><span class=\"kw\">let </span>reference = buffer.get_ref();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::BufWriter;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+mut+buffer+=+BufWriter::new(TcpStream::connect(%22127.0.0.1:34254%22).unwrap());%0A++++%0A++++//+we+can+use+reference+just+like+buffer%0A++++let+reference+=+buffer.get_ref();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufwriter.rs.html#295-297\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut W</a></h4></section></summary><div class=\"docblock\"><p>Gets a mutable reference to the underlying writer.</p>\n<p>It is inadvisable to directly write to the underlying writer.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::BufWriter;\n<span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = BufWriter::new(TcpStream::connect(<span class=\"string\">\"127.0.0.1:34254\"</span>).unwrap());\n\n<span class=\"comment\">// we can use reference just like buffer\n</span><span class=\"kw\">let </span>reference = buffer.get_mut();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::BufWriter;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+mut+buffer+=+BufWriter::new(TcpStream::connect(%22127.0.0.1:34254%22).unwrap());%0A++++%0A++++//+we+can+use+reference+just+like+buffer%0A++++let+reference+=+buffer.get_mut();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.buffer\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufwriter.rs.html#313-315\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.buffer\" class=\"fn\">buffer</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the internally buffered data.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::BufWriter;\n<span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>buf_writer = BufWriter::new(TcpStream::connect(<span class=\"string\">\"127.0.0.1:34254\"</span>).unwrap());\n\n<span class=\"comment\">// See how many bytes are currently buffered\n</span><span class=\"kw\">let </span>bytes_buffered = buf_writer.buffer().len();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::BufWriter;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+buf_writer+=+BufWriter::new(TcpStream::connect(%22127.0.0.1:34254%22).unwrap());%0A++++%0A++++//+See+how+many+bytes+are+currently+buffered%0A++++let+bytes_buffered+=+buf_writer.buffer().len();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufwriter.rs.html#345-347\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of bytes the internal buffer can hold without flushing.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::BufWriter;\n<span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>buf_writer = BufWriter::new(TcpStream::connect(<span class=\"string\">\"127.0.0.1:34254\"</span>).unwrap());\n\n<span class=\"comment\">// Check the capacity of the inner buffer\n</span><span class=\"kw\">let </span>capacity = buf_writer.capacity();\n<span class=\"comment\">// Calculate how many bytes can be written without flushing\n</span><span class=\"kw\">let </span>without_flush = capacity - buf_writer.buffer().len();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::BufWriter;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+buf_writer+=+BufWriter::new(TcpStream::connect(%22127.0.0.1:34254%22).unwrap());%0A++++%0A++++//+Check+the+capacity+of+the+inner+buffer%0A++++let+capacity+=+buf_writer.capacity();%0A++++//+Calculate+how+many+bytes+can+be+written+without+flushing%0A++++let+without_flush+=+capacity+-+buf_writer.buffer().len();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-BufWriter%3CW%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufwriter.rs.html#647-657\">source</a></span><a href=\"#impl-Debug-for-BufWriter%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufwriter.rs.html#651-656\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Drop-for-BufWriter%3CW%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufwriter.rs.html#671-678\">source</a></span><a href=\"#impl-Drop-for-BufWriter%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a>&gt; <a class=\"trait\" href=\"../ops/trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufwriter.rs.html#672-677\">source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\">Executes the destructor for this type. <a href=\"../ops/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Seek-for-BufWriter%3CW%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufwriter.rs.html#660-668\">source</a></span><a href=\"#impl-Seek-for-BufWriter%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> + <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a>&gt; <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> for <a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.seek\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufwriter.rs.html#664-667\">source</a><a href=\"#method.seek\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Seek.html#tymethod.seek\" class=\"fn\">seek</a>(&amp;mut self, pos: <a class=\"enum\" href=\"enum.SeekFrom.html\" title=\"enum std::io::SeekFrom\">SeekFrom</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Seek to the offset, in bytes, in the underlying writer.</p>\n<p>Seeking always writes out the internal buffer before seeking.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rewind\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1957-1960\">source</a></span><a href=\"#method.rewind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Seek.html#method.rewind\" class=\"fn\">rewind</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Rewind to the beginning of a stream. <a href=\"trait.Seek.html#method.rewind\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.stream_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#1997-2008\">source</a><a href=\"#method.stream_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Seek.html#method.stream_len\" class=\"fn\">stream_len</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>seek_stream_len</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/59359\">#59359</a>)</span></div></span><div class=\"docblock\">Returns the length of this stream (in bytes). <a href=\"trait.Seek.html#method.stream_len\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.stream_position\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2034-2036\">source</a></span><a href=\"#method.stream_position\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Seek.html#method.stream_position\" class=\"fn\">stream_position</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\">Returns the current seek position from the start of the stream. <a href=\"trait.Seek.html#method.stream_position\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.seek_relative\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2062-2065\">source</a></span><a href=\"#method.seek_relative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Seek.html#method.seek_relative\" class=\"fn\">seek_relative</a>(&amp;mut self, offset: <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Seeks relative to the current position. <a href=\"trait.Seek.html#method.seek_relative\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Write-for-BufWriter%3CW%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufwriter.rs.html#515-644\">source</a></span><a href=\"#impl-Write-for-BufWriter%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a>&gt; <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufwriter.rs.html#517-530\">source</a><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Write a buffer into this writer, returning how many bytes were written. <a href=\"trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufwriter.rs.html#533-546\">source</a><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Attempts to write an entire buffer into this writer. <a href=\"trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufwriter.rs.html#548-635\">source</a><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <a href=\"trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufwriter.rs.html#637-639\">source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Write</code>r has an efficient <a href=\"trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufwriter.rs.html#641-643\">source</a><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#1761-1776\">source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/70436\">#70436</a>)</span></div></span><div class=\"docblock\">Attempts to write multiple buffers into this writer. <a href=\"trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1814-1850\">source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"../fmt/struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Writes a formatted string into this writer, returning any error\nencountered. <a href=\"trait.Write.html#method.write_fmt\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-BufWriter%3CW%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-BufWriter%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-BufWriter%3CW%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-BufWriter%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Send-for-BufWriter%3CW%3E\" class=\"impl\"><a href=\"#impl-Send-for-BufWriter%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Sync-for-BufWriter%3CW%3E\" class=\"impl\"><a href=\"#impl-Sync-for-BufWriter%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Unpin-for-BufWriter%3CW%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-BufWriter%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-BufWriter%3CW%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-BufWriter%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"&[u8]\":\"<h3>Notable traits for <code>&amp;[<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>]</code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for &amp;[<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>]</div>\",\"BufWriter<W>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.BufWriter.html\\\" title=\\\"struct std::io::BufWriter\\\">BufWriter</a>&lt;W&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;W: ?<a class=\\\"trait\\\" href=\\\"../marker/trait.Sized.html\\\" title=\\\"trait std::marker::Sized\\\">Sized</a> + <a class=\\\"trait\\\" href=\\\"trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a>&gt; <a class=\\\"trait\\\" href=\\\"trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for <a class=\\\"struct\\\" href=\\\"struct.BufWriter.html\\\" title=\\\"struct std::io::BufWriter\\\">BufWriter</a>&lt;W&gt;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:20.392Z"
}