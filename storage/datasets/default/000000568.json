{
	"title": "PathBuf in std::path - Rust",
	"url": "https://doc.rust-lang.org/stable/std/path/struct.PathBuf.html",
	"markdown": "# PathBuf in std::path - Rust\n\n## Struct [std](../index.html)::[path](index.html)::[PathBuf](#)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1161-1163) ·\n\n```\npub struct PathBuf { /* private fields */ }\n```\n\nExpand description\n\nAn owned, mutable path (akin to [`String`](../string/struct.String.html \"struct std::string::String\")).\n\nThis type provides methods like [`push`](about:blank/struct.PathBuf.html#method.push \"method std::path::PathBuf::push\") and [`set_extension`](about:blank/struct.PathBuf.html#method.set_extension \"method std::path::PathBuf::set_extension\") that mutate the path in place. It also implements [`Deref`](../ops/trait.Deref.html \"trait std::ops::Deref\") to [`Path`](struct.Path.html \"struct std::path::Path\"), meaning that all methods on [`Path`](struct.Path.html \"struct std::path::Path\") slices are available on `PathBuf` values as well.\n\nMore details about the overall approach can be found in the [module documentation](index.html \"mod std::path\").\n\n## [§](#examples)Examples\n\nYou can use [`push`](about:blank/struct.PathBuf.html#method.push \"method std::path::PathBuf::push\") to build up a `PathBuf` from components:\n\n```\nuse std::path::PathBuf;\n\nlet mut path = PathBuf::new();\n\npath.push(r\"C:\\\");\npath.push(\"windows\");\npath.push(\"system32\");\n\npath.set_extension(\"dll\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+mut+path+=+PathBuf::new();%0A++++%0A++++path.push(r%22C:%5C%22);%0A++++path.push(%22windows%22);%0A++++path.push(%22system32%22);%0A++++%0A++++path.set_extension(%22dll%22);%0A%7D&edition=2021)\n\nHowever, [`push`](about:blank/struct.PathBuf.html#method.push \"method std::path::PathBuf::push\") is best used for dynamic situations. This is a better way to do this when you know all of the components ahead of time:\n\n```\nuse std::path::PathBuf;\n\nlet path: PathBuf = [r\"C:\\\", \"windows\", \"system32.dll\"].iter().collect();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+path:+PathBuf+=+%5Br%22C:%5C%22,+%22windows%22,+%22system32.dll%22%5D.iter().collect();%0A%7D&edition=2021)\n\nWe can still do better than this! Since these are all strings, we can use `From::from`:\n\n```\nuse std::path::PathBuf;\n\nlet path = PathBuf::from(r\"C:\\windows\\system32.dll\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+path+=+PathBuf::from(r%22C:%5Cwindows%5Csystem32.dll%22);%0A%7D&edition=2021)\n\nWhich method works best depends on what kind of situation you’re in.\n\n[source](about:blank/src/std/path.rs.html#1165-1629)[§](#impl-PathBuf)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1183-1185)\n\nAllocates an empty `PathBuf`.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::path::PathBuf;\n\nlet path = PathBuf::new();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+path+=+PathBuf::new();%0A%7D&edition=2021)\n\n1.44.0 · [source](about:blank/src/std/path.rs.html#1208-1210)\n\nCreates a new `PathBuf` with a given capacity used to create the internal [`OsString`](../ffi/struct.OsString.html \"struct std::ffi::OsString\"). See [`with_capacity`](about:blank/ffi/struct.OsString.html#method.with_capacity \"associated function std::ffi::OsString::with_capacity\") defined on [`OsString`](../ffi/struct.OsString.html \"struct std::ffi::OsString\").\n\n##### [§](#examples-2)Examples\n\n```\nuse std::path::PathBuf;\n\nlet mut path = PathBuf::with_capacity(10);\nlet capacity = path.capacity();\n\n// This push is done without reallocating\npath.push(r\"C:\\\");\n\nassert_eq!(capacity, path.capacity());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+mut+path+=+PathBuf::with_capacity(10);%0A++++let+capacity+=+path.capacity();%0A++++%0A++++//+This+push+is+done+without+reallocating%0A++++path.push(r%22C:%5C%22);%0A++++%0A++++assert_eq!(capacity,+path.capacity());%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1225-1227)\n\nCoerces to a [`Path`](struct.Path.html \"struct std::path::Path\") slice.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::path::{Path, PathBuf};\n\nlet p = PathBuf::from(\"/test\");\nassert_eq!(Path::new(\"/test\"), p.as_path());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+p+=+PathBuf::from(%22/test%22);%0A++++assert_eq!(Path::new(%22/test%22),+p.as_path());%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1268-1270)\n\nExtends `self` with `path`.\n\nIf `path` is absolute, it replaces the current path.\n\nOn Windows:\n\n-   if `path` has a root but no prefix (e.g., `\\windows`), it replaces everything except for the prefix (if any) of `self`.\n-   if `path` has a prefix but no root, it replaces `self`.\n-   if `self` has a verbatim prefix (e.g. `\\\\?\\C:\\windows`) and `path` is not empty, the new path is normalized: all references to `.` and `..` are removed.\n\nConsider using [`Path::join`](about:blank/struct.Path.html#method.join \"method std::path::Path::join\") if you need a new `PathBuf` instead of using this function on a cloned `PathBuf`.\n\n##### [§](#examples-4)Examples\n\nPushing a relative path extends the existing path:\n\n```\nuse std::path::PathBuf;\n\nlet mut path = PathBuf::from(\"/tmp\");\npath.push(\"file.bk\");\nassert_eq!(path, PathBuf::from(\"/tmp/file.bk\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+mut+path+=+PathBuf::from(%22/tmp%22);%0A++++path.push(%22file.bk%22);%0A++++assert_eq!(path,+PathBuf::from(%22/tmp/file.bk%22));%0A%7D&edition=2021)\n\nPushing an absolute path replaces the existing path:\n\n```\nuse std::path::PathBuf;\n\nlet mut path = PathBuf::from(\"/tmp\");\npath.push(\"/etc\");\nassert_eq!(path, PathBuf::from(\"/etc\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+mut+path+=+PathBuf::from(%22/tmp%22);%0A++++path.push(%22/etc%22);%0A++++assert_eq!(path,+PathBuf::from(%22/etc%22));%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1363-1371)\n\nTruncates `self` to [`self.parent`](about:blank/struct.Path.html#method.parent \"method std::path::Path::parent\").\n\nReturns `false` and does nothing if [`self.parent`](about:blank/struct.Path.html#method.parent \"method std::path::Path::parent\") is [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"). Otherwise, returns `true`.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::path::{Path, PathBuf};\n\nlet mut p = PathBuf::from(\"/spirited/away.rs\");\n\np.pop();\nassert_eq!(Path::new(\"/spirited\"), p);\np.pop();\nassert_eq!(Path::new(\"/\"), p);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+mut+p+=+PathBuf::from(%22/spirited/away.rs%22);%0A++++%0A++++p.pop();%0A++++assert_eq!(Path::new(%22/spirited%22),+p);%0A++++p.pop();%0A++++assert_eq!(Path::new(%22/%22),+p);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1404-1406)\n\nUpdates [`self.file_name`](about:blank/struct.Path.html#method.file_name \"method std::path::Path::file_name\") to `file_name`.\n\nIf [`self.file_name`](about:blank/struct.Path.html#method.file_name \"method std::path::Path::file_name\") was [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"), this is equivalent to pushing `file_name`.\n\nOtherwise it is equivalent to calling [`pop`](about:blank/struct.PathBuf.html#method.pop \"method std::path::PathBuf::pop\") and then pushing `file_name`. The new path will be a sibling of the original path. (That is, it will have the same parent.)\n\n##### [§](#examples-6)Examples\n\n```\nuse std::path::PathBuf;\n\nlet mut buf = PathBuf::from(\"/\");\nassert!(buf.file_name() == None);\n\nbuf.set_file_name(\"foo.txt\");\nassert!(buf == PathBuf::from(\"/foo.txt\"));\nassert!(buf.file_name().is_some());\n\nbuf.set_file_name(\"bar.txt\");\nassert!(buf == PathBuf::from(\"/bar.txt\"));\n\nbuf.set_file_name(\"baz\");\nassert!(buf == PathBuf::from(\"/baz\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+mut+buf+=+PathBuf::from(%22/%22);%0A++++assert!(buf.file_name()+==+None);%0A++++%0A++++buf.set_file_name(%22foo.txt%22);%0A++++assert!(buf+==+PathBuf::from(%22/foo.txt%22));%0A++++assert!(buf.file_name().is_some());%0A++++%0A++++buf.set_file_name(%22bar.txt%22);%0A++++assert!(buf+==+PathBuf::from(%22/bar.txt%22));%0A++++%0A++++buf.set_file_name(%22baz%22);%0A++++assert!(buf+==+PathBuf::from(%22/baz%22));%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1473-1475)\n\nUpdates [`self.extension`](about:blank/struct.Path.html#method.extension \"method std::path::Path::extension\") to `Some(extension)` or to `None` if `extension` is empty.\n\nReturns `false` and does nothing if [`self.file_name`](about:blank/struct.Path.html#method.file_name \"method std::path::Path::file_name\") is [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"), returns `true` and updates the extension otherwise.\n\nIf [`self.extension`](about:blank/struct.Path.html#method.extension \"method std::path::Path::extension\") is [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"), the extension is added; otherwise it is replaced.\n\nIf `extension` is the empty string, [`self.extension`](about:blank/struct.Path.html#method.extension \"method std::path::Path::extension\") will be [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") afterwards, not `Some(\"\")`.\n\n##### [§](#panics)Panics\n\nPanics if the passed extension contains a path separator (see [`is_separator`](fn.is_separator.html \"fn std::path::is_separator\")).\n\n##### [§](#caveats)Caveats\n\nThe new `extension` may contain dots and will be used in its entirety, but only the part after the final dot will be reflected in [`self.extension`](about:blank/struct.Path.html#method.extension \"method std::path::Path::extension\").\n\nIf the file stem contains internal dots and `extension` is empty, part of the old file stem will be considered the new [`self.extension`](about:blank/struct.Path.html#method.extension \"method std::path::Path::extension\").\n\nSee the examples below.\n\n##### [§](#examples-7)Examples\n\n```\nuse std::path::{Path, PathBuf};\n\nlet mut p = PathBuf::from(\"/feel/the\");\n\np.set_extension(\"force\");\nassert_eq!(Path::new(\"/feel/the.force\"), p.as_path());\n\np.set_extension(\"dark.side\");\nassert_eq!(Path::new(\"/feel/the.dark.side\"), p.as_path());\n\np.set_extension(\"cookie\");\nassert_eq!(Path::new(\"/feel/the.dark.cookie\"), p.as_path());\n\np.set_extension(\"\");\nassert_eq!(Path::new(\"/feel/the.dark\"), p.as_path());\n\np.set_extension(\"\");\nassert_eq!(Path::new(\"/feel/the\"), p.as_path());\n\np.set_extension(\"\");\nassert_eq!(Path::new(\"/feel/the\"), p.as_path());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+mut+p+=+PathBuf::from(%22/feel/the%22);%0A++++%0A++++p.set_extension(%22force%22);%0A++++assert_eq!(Path::new(%22/feel/the.force%22),+p.as_path());%0A++++%0A++++p.set_extension(%22dark.side%22);%0A++++assert_eq!(Path::new(%22/feel/the.dark.side%22),+p.as_path());%0A++++%0A++++p.set_extension(%22cookie%22);%0A++++assert_eq!(Path::new(%22/feel/the.dark.cookie%22),+p.as_path());%0A++++%0A++++p.set_extension(%22%22);%0A++++assert_eq!(Path::new(%22/feel/the.dark%22),+p.as_path());%0A++++%0A++++p.set_extension(%22%22);%0A++++assert_eq!(Path::new(%22/feel/the%22),+p.as_path());%0A++++%0A++++p.set_extension(%22%22);%0A++++assert_eq!(Path::new(%22/feel/the%22),+p.as_path());%0A%7D&edition=2021)\n\n1.70.0 · [source](about:blank/src/std/path.rs.html#1527-1529)\n\nYields a mutable reference to the underlying [`OsString`](../ffi/struct.OsString.html \"struct std::ffi::OsString\") instance.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::path::{Path, PathBuf};\n\nlet mut path = PathBuf::from(\"/foo\");\n\npath.push(\"bar\");\nassert_eq!(path, Path::new(\"/foo/bar\"));\n\n// OsString's `push` does not add a separator.\npath.as_mut_os_string().push(\"baz\");\nassert_eq!(path, Path::new(\"/foo/barbaz\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+mut+path+=+PathBuf::from(%22/foo%22);%0A++++%0A++++path.push(%22bar%22);%0A++++assert_eq!(path,+Path::new(%22/foo/bar%22));%0A++++%0A++++//+OsString%27s+%60push%60+does+not+add+a+separator.%0A++++path.as_mut_os_string().push(%22baz%22);%0A++++assert_eq!(path,+Path::new(%22/foo/barbaz%22));%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1544-1546)\n\nConsumes the `PathBuf`, yielding its internal [`OsString`](../ffi/struct.OsString.html \"struct std::ffi::OsString\") storage.\n\n##### [§](#examples-9)Examples\n\n```\nuse std::path::PathBuf;\n\nlet p = PathBuf::from(\"/the/head\");\nlet os_str = p.into_os_string();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+p+=+PathBuf::from(%22/the/head%22);%0A++++let+os_str+=+p.into_os_string();%0A%7D&edition=2021)\n\n1.20.0 · [source](about:blank/src/std/path.rs.html#1552-1555)\n\nConverts this `PathBuf` into a [boxed](../boxed/struct.Box.html \"struct std::boxed::Box\") [`Path`](struct.Path.html \"struct std::path::Path\").\n\n1.44.0 · [source](about:blank/src/std/path.rs.html#1563-1565)\n\n1.44.0 · [source](about:blank/src/std/path.rs.html#1572-1574)\n\nInvokes [`clear`](about:blank/ffi/struct.OsString.html#method.clear \"method std::ffi::OsString::clear\") on the underlying instance of [`OsString`](../ffi/struct.OsString.html \"struct std::ffi::OsString\").\n\n1.44.0 · [source](about:blank/src/std/path.rs.html#1581-1583)\n\n1.63.0 · [source](about:blank/src/std/path.rs.html#1590-1592)\n\n1.44.0 · [source](about:blank/src/std/path.rs.html#1599-1601)\n\n1.63.0 · [source](about:blank/src/std/path.rs.html#1608-1610)\n\n1.44.0 · [source](about:blank/src/std/path.rs.html#1617-1619)\n\n1.56.0 · [source](about:blank/src/std/path.rs.html#1626-1628)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2075-2077)\n\nYields the underlying [`OsStr`](../ffi/struct.OsStr.html \"struct std::ffi::OsStr\") slice.\n\n##### [§](#examples-10)Examples\n\n```\nuse std::path::Path;\n\nlet os_str = Path::new(\"foo.txt\").as_os_str();\nassert_eq!(os_str, std::ffi::OsStr::new(\"foo.txt\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+os_str+=+Path::new(%22foo.txt%22).as_os_str();%0A++++assert_eq!(os_str,+std::ffi::OsStr::new(%22foo.txt%22));%0A%7D&edition=2021)\n\n1.70.0 · [source](about:blank/src/std/path.rs.html#2096-2098)\n\nYields a mutable reference to the underlying [`OsStr`](../ffi/struct.OsStr.html \"struct std::ffi::OsStr\") slice.\n\n##### [§](#examples-11)Examples\n\n```\nuse std::path::{Path, PathBuf};\n\nlet mut path = PathBuf::from(\"Foo.TXT\");\n\nassert_ne!(path, Path::new(\"foo.txt\"));\n\npath.as_mut_os_str().make_ascii_lowercase();\nassert_eq!(path, Path::new(\"foo.txt\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+mut+path+=+PathBuf::from(%22Foo.TXT%22);%0A++++%0A++++assert_ne!(path,+Path::new(%22foo.txt%22));%0A++++%0A++++path.as_mut_os_str().make_ascii_lowercase();%0A++++assert_eq!(path,+Path::new(%22foo.txt%22));%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2120-2122)\n\nYields a [`&str`](../primitive.str.html \"primitive str\") slice if the `Path` is valid unicode.\n\nThis conversion may entail doing a check for UTF-8 validity. Note that validation is performed because non-UTF-8 strings are perfectly valid for some OS.\n\n##### [§](#examples-12)Examples\n\n```\nuse std::path::Path;\n\nlet path = Path::new(\"foo.txt\");\nassert_eq!(path.to_str(), Some(\"foo.txt\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22foo.txt%22);%0A++++assert_eq!(path.to_str(),+Some(%22foo.txt%22));%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2148-2150)\n\nConverts a `Path` to a [`Cow<str>`](../borrow/enum.Cow.html \"enum std::borrow::Cow\").\n\nAny non-Unicode sequences are replaced with [`U+FFFD REPLACEMENT CHARACTER`](../char/constant.REPLACEMENT_CHARACTER.html \"constant std::char::REPLACEMENT_CHARACTER\").\n\n##### [§](#examples-13)Examples\n\nCalling `to_string_lossy` on a `Path` with valid unicode:\n\n```\nuse std::path::Path;\n\nlet path = Path::new(\"foo.txt\");\nassert_eq!(path.to_string_lossy(), \"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22foo.txt%22);%0A++++assert_eq!(path.to_string_lossy(),+%22foo.txt%22);%0A%7D&edition=2021)\n\nHad `path` contained invalid unicode, the `to_string_lossy` call might have returned `\"fo�.txt\"`.\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2166-2168)\n\nConverts a `Path` to an owned [`PathBuf`](struct.PathBuf.html \"struct std::path::PathBuf\").\n\n##### [§](#examples-14)Examples\n\n```\nuse std::path::{Path, PathBuf};\n\nlet path_buf = Path::new(\"foo.txt\").to_path_buf();\nassert_eq!(path_buf, PathBuf::from(\"foo.txt\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+path_buf+=+Path::new(%22foo.txt%22).to_path_buf();%0A++++assert_eq!(path_buf,+PathBuf::from(%22foo.txt%22));%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2191-2198)\n\nReturns `true` if the `Path` is absolute, i.e., if it is independent of the current directory.\n\n-   On Unix, a path is absolute if it starts with the root, so `is_absolute` and [`has_root`](about:blank/struct.Path.html#method.has_root \"method std::path::Path::has_root\") are equivalent.\n    \n-   On Windows, a path is absolute if it has a prefix and starts with the root: `c:\\windows` is absolute, while `c:temp` and `\\temp` are not.\n    \n\n##### [§](#examples-15)Examples\n\n```\nuse std::path::Path;\n\nassert!(!Path::new(\"foo.txt\").is_absolute());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++assert!(!Path::new(%22foo.txt%22).is_absolute());%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2216-2218)\n\nReturns `true` if the `Path` is relative, i.e., not absolute.\n\nSee [`is_absolute`](about:blank/struct.Path.html#method.is_absolute \"method std::path::Path::is_absolute\")’s documentation for more details.\n\n##### [§](#examples-16)Examples\n\n```\nuse std::path::Path;\n\nassert!(Path::new(\"foo.txt\").is_relative());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++assert!(Path::new(%22foo.txt%22).is_relative());%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2243-2245)\n\nReturns `true` if the `Path` has a root.\n\n-   On Unix, a path has a root if it begins with `/`.\n    \n-   On Windows, a path has a root if it:\n    \n    -   has no prefix and begins with a separator, e.g., `\\windows`\n    -   has a prefix followed by a separator, e.g., `c:\\windows` but not `c:windows`\n    -   has any non-disk prefix, e.g., `\\\\server\\share`\n\n##### [§](#examples-17)Examples\n\n```\nuse std::path::Path;\n\nassert!(Path::new(\"/etc/passwd\").has_root());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++assert!(Path::new(%22/etc/passwd%22).has_root());%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2278-2287)\n\nReturns the `Path` without its final component, if there is one.\n\nThis means it returns `Some(\"\")` for relative paths with one component.\n\nReturns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if the path terminates in a root or prefix, or if it’s the empty string.\n\n##### [§](#examples-18)Examples\n\n```\nuse std::path::Path;\n\nlet path = Path::new(\"/foo/bar\");\nlet parent = path.parent().unwrap();\nassert_eq!(parent, Path::new(\"/foo\"));\n\nlet grand_parent = parent.parent().unwrap();\nassert_eq!(grand_parent, Path::new(\"/\"));\nassert_eq!(grand_parent.parent(), None);\n\nlet relative_path = Path::new(\"foo/bar\");\nlet parent = relative_path.parent();\nassert_eq!(parent, Some(Path::new(\"foo\")));\nlet grand_parent = parent.and_then(Path::parent);\nassert_eq!(grand_parent, Some(Path::new(\"\")));\nlet great_grand_parent = grand_parent.and_then(Path::parent);\nassert_eq!(great_grand_parent, None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22/foo/bar%22);%0A++++let+parent+=+path.parent().unwrap();%0A++++assert_eq!(parent,+Path::new(%22/foo%22));%0A++++%0A++++let+grand_parent+=+parent.parent().unwrap();%0A++++assert_eq!(grand_parent,+Path::new(%22/%22));%0A++++assert_eq!(grand_parent.parent(),+None);%0A++++%0A++++let+relative_path+=+Path::new(%22foo/bar%22);%0A++++let+parent+=+relative_path.parent();%0A++++assert_eq!(parent,+Some(Path::new(%22foo%22)));%0A++++let+grand_parent+=+parent.and_then(Path::parent);%0A++++assert_eq!(grand_parent,+Some(Path::new(%22%22)));%0A++++let+great_grand_parent+=+grand_parent.and_then(Path::parent);%0A++++assert_eq!(great_grand_parent,+None);%0A%7D&edition=2021)\n\n1.28.0 · [source](about:blank/src/std/path.rs.html#2318-2320)\n\nProduces an iterator over `Path` and its ancestors.\n\nThe iterator will yield the `Path` that is returned if the [`parent`](about:blank/struct.Path.html#method.parent \"method std::path::Path::parent\") method is used zero or more times. If the [`parent`](about:blank/struct.Path.html#method.parent \"method std::path::Path::parent\") method returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"), the iterator will do likewise. The iterator will always yield at least one value, namely `Some(&self)`. Next it will yield `&self.parent()`, `&self.parent().and_then(Path::parent)` and so on.\n\n##### [§](#examples-19)Examples\n\n```\nuse std::path::Path;\n\nlet mut ancestors = Path::new(\"/foo/bar\").ancestors();\nassert_eq!(ancestors.next(), Some(Path::new(\"/foo/bar\")));\nassert_eq!(ancestors.next(), Some(Path::new(\"/foo\")));\nassert_eq!(ancestors.next(), Some(Path::new(\"/\")));\nassert_eq!(ancestors.next(), None);\n\nlet mut ancestors = Path::new(\"../foo/bar\").ancestors();\nassert_eq!(ancestors.next(), Some(Path::new(\"../foo/bar\")));\nassert_eq!(ancestors.next(), Some(Path::new(\"../foo\")));\nassert_eq!(ancestors.next(), Some(Path::new(\"..\")));\nassert_eq!(ancestors.next(), Some(Path::new(\"\")));\nassert_eq!(ancestors.next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+mut+ancestors+=+Path::new(%22/foo/bar%22).ancestors();%0A++++assert_eq!(ancestors.next(),+Some(Path::new(%22/foo/bar%22)));%0A++++assert_eq!(ancestors.next(),+Some(Path::new(%22/foo%22)));%0A++++assert_eq!(ancestors.next(),+Some(Path::new(%22/%22)));%0A++++assert_eq!(ancestors.next(),+None);%0A++++%0A++++let+mut+ancestors+=+Path::new(%22../foo/bar%22).ancestors();%0A++++assert_eq!(ancestors.next(),+Some(Path::new(%22../foo/bar%22)));%0A++++assert_eq!(ancestors.next(),+Some(Path::new(%22../foo%22)));%0A++++assert_eq!(ancestors.next(),+Some(Path::new(%22..%22)));%0A++++assert_eq!(ancestors.next(),+Some(Path::new(%22%22)));%0A++++assert_eq!(ancestors.next(),+None);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2345-2350)\n\nReturns the final component of the `Path`, if there is one.\n\nIf the path is a normal file, this is the file name. If it’s the path of a directory, this is the directory name.\n\nReturns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if the path terminates in `..`.\n\n##### [§](#examples-20)Examples\n\n```\nuse std::path::Path;\nuse std::ffi::OsStr;\n\nassert_eq!(Some(OsStr::new(\"bin\")), Path::new(\"/usr/bin/\").file_name());\nassert_eq!(Some(OsStr::new(\"foo.txt\")), Path::new(\"tmp/foo.txt\").file_name());\nassert_eq!(Some(OsStr::new(\"foo.txt\")), Path::new(\"foo.txt/.\").file_name());\nassert_eq!(Some(OsStr::new(\"foo.txt\")), Path::new(\"foo.txt/.//\").file_name());\nassert_eq!(None, Path::new(\"foo.txt/..\").file_name());\nassert_eq!(None, Path::new(\"/\").file_name());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++use+std::ffi::OsStr;%0A++++%0A++++assert_eq!(Some(OsStr::new(%22bin%22)),+Path::new(%22/usr/bin/%22).file_name());%0A++++assert_eq!(Some(OsStr::new(%22foo.txt%22)),+Path::new(%22tmp/foo.txt%22).file_name());%0A++++assert_eq!(Some(OsStr::new(%22foo.txt%22)),+Path::new(%22foo.txt/.%22).file_name());%0A++++assert_eq!(Some(OsStr::new(%22foo.txt%22)),+Path::new(%22foo.txt/.//%22).file_name());%0A++++assert_eq!(None,+Path::new(%22foo.txt/..%22).file_name());%0A++++assert_eq!(None,+Path::new(%22/%22).file_name());%0A%7D&edition=2021)\n\n1.7.0 · [source](about:blank/src/std/path.rs.html#2381-2386)\n\nReturns a path that, when joined onto `base`, yields `self`.\n\n##### [§](#errors)Errors\n\nIf `base` is not a prefix of `self` (i.e., [`starts_with`](about:blank/struct.Path.html#method.starts_with \"method std::path::Path::starts_with\") returns `false`), returns [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\").\n\n##### [§](#examples-21)Examples\n\n```\nuse std::path::{Path, PathBuf};\n\nlet path = Path::new(\"/test/haha/foo.txt\");\n\nassert_eq!(path.strip_prefix(\"/\"), Ok(Path::new(\"test/haha/foo.txt\")));\nassert_eq!(path.strip_prefix(\"/test\"), Ok(Path::new(\"haha/foo.txt\")));\nassert_eq!(path.strip_prefix(\"/test/\"), Ok(Path::new(\"haha/foo.txt\")));\nassert_eq!(path.strip_prefix(\"/test/haha/foo.txt\"), Ok(Path::new(\"\")));\nassert_eq!(path.strip_prefix(\"/test/haha/foo.txt/\"), Ok(Path::new(\"\")));\n\nassert!(path.strip_prefix(\"test\").is_err());\nassert!(path.strip_prefix(\"/haha\").is_err());\n\nlet prefix = PathBuf::from(\"/test/\");\nassert_eq!(path.strip_prefix(prefix), Ok(Path::new(\"haha/foo.txt\")));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+path+=+Path::new(%22/test/haha/foo.txt%22);%0A++++%0A++++assert_eq!(path.strip_prefix(%22/%22),+Ok(Path::new(%22test/haha/foo.txt%22)));%0A++++assert_eq!(path.strip_prefix(%22/test%22),+Ok(Path::new(%22haha/foo.txt%22)));%0A++++assert_eq!(path.strip_prefix(%22/test/%22),+Ok(Path::new(%22haha/foo.txt%22)));%0A++++assert_eq!(path.strip_prefix(%22/test/haha/foo.txt%22),+Ok(Path::new(%22%22)));%0A++++assert_eq!(path.strip_prefix(%22/test/haha/foo.txt/%22),+Ok(Path::new(%22%22)));%0A++++%0A++++assert!(path.strip_prefix(%22test%22).is_err());%0A++++assert!(path.strip_prefix(%22/haha%22).is_err());%0A++++%0A++++let+prefix+=+PathBuf::from(%22/test/%22);%0A++++assert_eq!(path.strip_prefix(prefix),+Ok(Path::new(%22haha/foo.txt%22)));%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2418-2420)\n\nDetermines whether `base` is a prefix of `self`.\n\nOnly considers whole path components to match.\n\n##### [§](#examples-22)Examples\n\n```\nuse std::path::Path;\n\nlet path = Path::new(\"/etc/passwd\");\n\nassert!(path.starts_with(\"/etc\"));\nassert!(path.starts_with(\"/etc/\"));\nassert!(path.starts_with(\"/etc/passwd\"));\nassert!(path.starts_with(\"/etc/passwd/\")); // extra slash is okay\nassert!(path.starts_with(\"/etc/passwd///\")); // multiple extra slashes are okay\n\nassert!(!path.starts_with(\"/e\"));\nassert!(!path.starts_with(\"/etc/passwd.txt\"));\n\nassert!(!Path::new(\"/etc/foo.rs\").starts_with(\"/etc/foo\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22/etc/passwd%22);%0A++++%0A++++assert!(path.starts_with(%22/etc%22));%0A++++assert!(path.starts_with(%22/etc/%22));%0A++++assert!(path.starts_with(%22/etc/passwd%22));%0A++++assert!(path.starts_with(%22/etc/passwd/%22));+//+extra+slash+is+okay%0A++++assert!(path.starts_with(%22/etc/passwd///%22));+//+multiple+extra+slashes+are+okay%0A++++%0A++++assert!(!path.starts_with(%22/e%22));%0A++++assert!(!path.starts_with(%22/etc/passwd.txt%22));%0A++++%0A++++assert!(!Path::new(%22/etc/foo.rs%22).starts_with(%22/etc/foo%22));%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2446-2448)\n\nDetermines whether `child` is a suffix of `self`.\n\nOnly considers whole path components to match.\n\n##### [§](#examples-23)Examples\n\n```\nuse std::path::Path;\n\nlet path = Path::new(\"/etc/resolv.conf\");\n\nassert!(path.ends_with(\"resolv.conf\"));\nassert!(path.ends_with(\"etc/resolv.conf\"));\nassert!(path.ends_with(\"/etc/resolv.conf\"));\n\nassert!(!path.ends_with(\"/resolv.conf\"));\nassert!(!path.ends_with(\"conf\")); // use .extension() instead\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22/etc/resolv.conf%22);%0A++++%0A++++assert!(path.ends_with(%22resolv.conf%22));%0A++++assert!(path.ends_with(%22etc/resolv.conf%22));%0A++++assert!(path.ends_with(%22/etc/resolv.conf%22));%0A++++%0A++++assert!(!path.ends_with(%22/resolv.conf%22));%0A++++assert!(!path.ends_with(%22conf%22));+//+use+.extension()+instead%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2482-2484)\n\nExtracts the stem (non-extension) portion of [`self.file_name`](about:blank/struct.Path.html#method.file_name \"method std::path::Path::file_name\").\n\nThe stem is:\n\n-   [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"), if there is no file name;\n-   The entire file name if there is no embedded `.`;\n-   The entire file name if the file name begins with `.` and has no other `.`s within;\n-   Otherwise, the portion of the file name before the final `.`\n\n##### [§](#examples-24)Examples\n\n```\nuse std::path::Path;\n\nassert_eq!(\"foo\", Path::new(\"foo.rs\").file_stem().unwrap());\nassert_eq!(\"foo.tar\", Path::new(\"foo.tar.gz\").file_stem().unwrap());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++assert_eq!(%22foo%22,+Path::new(%22foo.rs%22).file_stem().unwrap());%0A++++assert_eq!(%22foo.tar%22,+Path::new(%22foo.tar.gz%22).file_stem().unwrap());%0A%7D&edition=2021)\n\n##### [§](#see-also)See Also\n\nThis method is similar to [`Path::file_prefix`](about:blank/struct.Path.html#method.file_prefix \"method std::path::Path::file_prefix\"), which extracts the portion of the file name before the _first_ `.`\n\n[source](about:blank/src/std/path.rs.html#2516-2518)\n\n🔬This is a nightly-only experimental API. (`path_file_prefix` [#86319](https://github.com/rust-lang/rust/issues/86319))\n\nExtracts the prefix of [`self.file_name`](about:blank/struct.Path.html#method.file_name \"method std::path::Path::file_name\").\n\nThe prefix is:\n\n-   [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"), if there is no file name;\n-   The entire file name if there is no embedded `.`;\n-   The portion of the file name before the first non-beginning `.`;\n-   The entire file name if the file name begins with `.` and has no other `.`s within;\n-   The portion of the file name before the second `.` if the file name begins with `.`\n\n##### [§](#examples-25)Examples\n\n```\nuse std::path::Path;\n\nassert_eq!(\"foo\", Path::new(\"foo.rs\").file_prefix().unwrap());\nassert_eq!(\"foo\", Path::new(\"foo.tar.gz\").file_prefix().unwrap());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(path_file_prefix)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++assert_eq!(%22foo%22,+Path::new(%22foo.rs%22).file_prefix().unwrap());%0A++++assert_eq!(%22foo%22,+Path::new(%22foo.tar.gz%22).file_prefix().unwrap());%0A%7D&version=nightly&edition=2021)\n\n##### [§](#see-also-1)See Also\n\nThis method is similar to [`Path::file_stem`](about:blank/struct.Path.html#method.file_stem \"method std::path::Path::file_stem\"), which extracts the portion of the file name before the _last_ `.`\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2541-2543)\n\nExtracts the extension (without the leading dot) of [`self.file_name`](about:blank/struct.Path.html#method.file_name \"method std::path::Path::file_name\"), if possible.\n\nThe extension is:\n\n-   [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"), if there is no file name;\n-   [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"), if there is no embedded `.`;\n-   [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"), if the file name begins with `.` and has no other `.`s within;\n-   Otherwise, the portion of the file name after the final `.`\n\n##### [§](#examples-26)Examples\n\n```\nuse std::path::Path;\n\nassert_eq!(\"rs\", Path::new(\"foo.rs\").extension().unwrap());\nassert_eq!(\"gz\", Path::new(\"foo.tar.gz\").extension().unwrap());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++assert_eq!(%22rs%22,+Path::new(%22foo.rs%22).extension().unwrap());%0A++++assert_eq!(%22gz%22,+Path::new(%22foo.tar.gz%22).extension().unwrap());%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2561-2563)\n\nCreates an owned [`PathBuf`](struct.PathBuf.html \"struct std::path::PathBuf\") with `path` adjoined to `self`.\n\nIf `path` is absolute, it replaces the current path.\n\nSee [`PathBuf::push`](about:blank/struct.PathBuf.html#method.push \"method std::path::PathBuf::push\") for more details on what it means to adjoin a path.\n\n##### [§](#examples-27)Examples\n\n```\nuse std::path::{Path, PathBuf};\n\nassert_eq!(Path::new(\"/etc\").join(\"passwd\"), PathBuf::from(\"/etc/passwd\"));\nassert_eq!(Path::new(\"/etc\").join(\"/bin/sh\"), PathBuf::from(\"/bin/sh\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++assert_eq!(Path::new(%22/etc%22).join(%22passwd%22),+PathBuf::from(%22/etc/passwd%22));%0A++++assert_eq!(Path::new(%22/etc%22).join(%22/bin/sh%22),+PathBuf::from(%22/bin/sh%22));%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2589-2591)\n\nCreates an owned [`PathBuf`](struct.PathBuf.html \"struct std::path::PathBuf\") like `self` but with the given file name.\n\nSee [`PathBuf::set_file_name`](about:blank/struct.PathBuf.html#method.set_file_name \"method std::path::PathBuf::set_file_name\") for more details.\n\n##### [§](#examples-28)Examples\n\n```\nuse std::path::{Path, PathBuf};\n\nlet path = Path::new(\"/tmp/foo.png\");\nassert_eq!(path.with_file_name(\"bar\"), PathBuf::from(\"/tmp/bar\"));\nassert_eq!(path.with_file_name(\"bar.txt\"), PathBuf::from(\"/tmp/bar.txt\"));\n\nlet path = Path::new(\"/tmp\");\nassert_eq!(path.with_file_name(\"var\"), PathBuf::from(\"/var\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+path+=+Path::new(%22/tmp/foo.png%22);%0A++++assert_eq!(path.with_file_name(%22bar%22),+PathBuf::from(%22/tmp/bar%22));%0A++++assert_eq!(path.with_file_name(%22bar.txt%22),+PathBuf::from(%22/tmp/bar.txt%22));%0A++++%0A++++let+path+=+Path::new(%22/tmp%22);%0A++++assert_eq!(path.with_file_name(%22var%22),+PathBuf::from(%22/var%22));%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2617-2619)\n\nCreates an owned [`PathBuf`](struct.PathBuf.html \"struct std::path::PathBuf\") like `self` but with the given extension.\n\nSee [`PathBuf::set_extension`](about:blank/struct.PathBuf.html#method.set_extension \"method std::path::PathBuf::set_extension\") for more details.\n\n##### [§](#examples-29)Examples\n\n```\nuse std::path::{Path, PathBuf};\n\nlet path = Path::new(\"foo.rs\");\nassert_eq!(path.with_extension(\"txt\"), PathBuf::from(\"foo.txt\"));\n\nlet path = Path::new(\"foo.tar.gz\");\nassert_eq!(path.with_extension(\"\"), PathBuf::from(\"foo.tar\"));\nassert_eq!(path.with_extension(\"xz\"), PathBuf::from(\"foo.tar.xz\"));\nassert_eq!(path.with_extension(\"\").with_extension(\"txt\"), PathBuf::from(\"foo.txt\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+path+=+Path::new(%22foo.rs%22);%0A++++assert_eq!(path.with_extension(%22txt%22),+PathBuf::from(%22foo.txt%22));%0A++++%0A++++let+path+=+Path::new(%22foo.tar.gz%22);%0A++++assert_eq!(path.with_extension(%22%22),+PathBuf::from(%22foo.tar%22));%0A++++assert_eq!(path.with_extension(%22xz%22),+PathBuf::from(%22foo.tar.xz%22));%0A++++assert_eq!(path.with_extension(%22%22).with_extension(%22txt%22),+PathBuf::from(%22foo.txt%22));%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2679-2689)\n\nProduces an iterator over the [`Component`](enum.Component.html \"enum std::path::Component\")s of the path.\n\nWhen parsing the path, there is a small amount of normalization:\n\n-   Repeated separators are ignored, so `a/b` and `a//b` both have `a` and `b` as components.\n    \n-   Occurrences of `.` are normalized away, except if they are at the beginning of the path. For example, `a/./b`, `a/b/`, `a/b/.` and `a/b` all have `a` and `b` as components, but `./a/b` starts with an additional [`CurDir`](about:blank/enum.Component.html#variant.CurDir \"variant std::path::Component::CurDir\") component.\n    \n-   A trailing slash is normalized away, `/a/b` and `/a/b/` are equivalent.\n    \n\nNote that no other normalization takes place; in particular, `a/c` and `a/b/../c` are distinct, to account for the possibility that `b` is a symbolic link (so its parent isn’t `a`).\n\n##### [§](#examples-30)Examples\n\n```\nuse std::path::{Path, Component};\nuse std::ffi::OsStr;\n\nlet mut components = Path::new(\"/tmp/foo.txt\").components();\n\nassert_eq!(components.next(), Some(Component::RootDir));\nassert_eq!(components.next(), Some(Component::Normal(OsStr::new(\"tmp\"))));\nassert_eq!(components.next(), Some(Component::Normal(OsStr::new(\"foo.txt\"))));\nassert_eq!(components.next(), None)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+Component%7D;%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+mut+components+=+Path::new(%22/tmp/foo.txt%22).components();%0A++++%0A++++assert_eq!(components.next(),+Some(Component::RootDir));%0A++++assert_eq!(components.next(),+Some(Component::Normal(OsStr::new(%22tmp%22))));%0A++++assert_eq!(components.next(),+Some(Component::Normal(OsStr::new(%22foo.txt%22))));%0A++++assert_eq!(components.next(),+None)%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2713-2715)\n\nProduces an iterator over the path’s components viewed as [`OsStr`](../ffi/struct.OsStr.html \"struct std::ffi::OsStr\") slices.\n\nFor more information about the particulars of how the path is separated into components, see [`components`](about:blank/struct.Path.html#method.components \"method std::path::Path::components\").\n\n##### [§](#examples-31)Examples\n\n```\nuse std::path::{self, Path};\nuse std::ffi::OsStr;\n\nlet mut it = Path::new(\"/tmp/foo.txt\").iter();\nassert_eq!(it.next(), Some(OsStr::new(&path::MAIN_SEPARATOR.to_string())));\nassert_eq!(it.next(), Some(OsStr::new(\"tmp\")));\nassert_eq!(it.next(), Some(OsStr::new(\"foo.txt\")));\nassert_eq!(it.next(), None)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7Bself,+Path%7D;%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+mut+it+=+Path::new(%22/tmp/foo.txt%22).iter();%0A++++assert_eq!(it.next(),+Some(OsStr::new(%26path::MAIN_SEPARATOR.to_string())));%0A++++assert_eq!(it.next(),+Some(OsStr::new(%22tmp%22)));%0A++++assert_eq!(it.next(),+Some(OsStr::new(%22foo.txt%22)));%0A++++assert_eq!(it.next(),+None)%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#2738-2740)\n\nReturns an object that implements [`Display`](../fmt/trait.Display.html \"trait std::fmt::Display\") for safely printing paths that may contain non-Unicode data. This may perform lossy conversion, depending on the platform. If you would like an implementation which escapes the path please use [`Debug`](../fmt/trait.Debug.html \"trait std::fmt::Debug\") instead.\n\n##### [§](#examples-32)Examples\n\n```\nuse std::path::Path;\n\nlet path = Path::new(\"/tmp/foo.rs\");\n\nprintln!(\"{}\", path.display());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22/tmp/foo.rs%22);%0A++++%0A++++println!(%22%7B%7D%22,+path.display());%0A%7D&edition=2021)\n\n1.5.0 · [source](about:blank/src/std/path.rs.html#2760-2762)\n\nQueries the file system to get information about a file, directory, etc.\n\nThis function will traverse symbolic links to query information about the destination file.\n\nThis is an alias to [`fs::metadata`](../fs/fn.metadata.html \"fn std::fs::metadata\").\n\n##### [§](#examples-33)Examples\n\n```\nuse std::path::Path;\n\nlet path = Path::new(\"/Minas/tirith\");\nlet metadata = path.metadata().expect(\"metadata call failed\");\nprintln!(\"{:?}\", metadata.file_type());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22/Minas/tirith%22);%0A++++let+metadata+=+path.metadata().expect(%22metadata+call+failed%22);%0A++++println!(%22%7B:?%7D%22,+metadata.file_type());%0A%7D&edition=2021)\n\n1.5.0 · [source](about:blank/src/std/path.rs.html#2779-2781)\n\nQueries the metadata about a file without following symlinks.\n\nThis is an alias to [`fs::symlink_metadata`](../fs/fn.symlink_metadata.html \"fn std::fs::symlink_metadata\").\n\n##### [§](#examples-34)Examples\n\n```\nuse std::path::Path;\n\nlet path = Path::new(\"/Minas/tirith\");\nlet metadata = path.symlink_metadata().expect(\"symlink_metadata call failed\");\nprintln!(\"{:?}\", metadata.file_type());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22/Minas/tirith%22);%0A++++let+metadata+=+path.symlink_metadata().expect(%22symlink_metadata+call+failed%22);%0A++++println!(%22%7B:?%7D%22,+metadata.file_type());%0A%7D&edition=2021)\n\n1.5.0 · [source](about:blank/src/std/path.rs.html#2798-2800)\n\nReturns the canonical, absolute form of the path with all intermediate components normalized and symbolic links resolved.\n\nThis is an alias to [`fs::canonicalize`](../fs/fn.canonicalize.html \"fn std::fs::canonicalize\").\n\n##### [§](#examples-35)Examples\n\n```\nuse std::path::{Path, PathBuf};\n\nlet path = Path::new(\"/foo/test/../test/bar.rs\");\nassert_eq!(path.canonicalize().unwrap(), PathBuf::from(\"/foo/test/bar.rs\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+path+=+Path::new(%22/foo/test/../test/bar.rs%22);%0A++++assert_eq!(path.canonicalize().unwrap(),+PathBuf::from(%22/foo/test/bar.rs%22));%0A%7D&edition=2021)\n\n1.5.0 · [source](about:blank/src/std/path.rs.html#2816-2818)\n\nReads a symbolic link, returning the file that the link points to.\n\nThis is an alias to [`fs::read_link`](../fs/fn.read_link.html \"fn std::fs::read_link\").\n\n##### [§](#examples-36)Examples\n\n```\nuse std::path::Path;\n\nlet path = Path::new(\"/laputa/sky_castle.rs\");\nlet path_link = path.read_link().expect(\"read_link call failed\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22/laputa/sky_castle.rs%22);%0A++++let+path_link+=+path.read_link().expect(%22read_link+call+failed%22);%0A%7D&edition=2021)\n\n1.5.0 · [source](about:blank/src/std/path.rs.html#2841-2843)\n\nReturns an iterator over the entries within a directory.\n\nThe iterator will yield instances of `[io::Result](../io/type.Result.html \"type std::io::Result\")<[fs::DirEntry](../fs/struct.DirEntry.html \"struct std::fs::DirEntry\")>`. New errors may be encountered after an iterator is initially constructed.\n\nThis is an alias to [`fs::read_dir`](../fs/fn.read_dir.html \"fn std::fs::read_dir\").\n\n##### [§](#examples-37)Examples\n\n```\nuse std::path::Path;\n\nlet path = Path::new(\"/laputa\");\nfor entry in path.read_dir().expect(\"read_dir call failed\") {\n    if let Ok(entry) = entry {\n        println!(\"{:?}\", entry.path());\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22/laputa%22);%0A++++for+entry+in+path.read_dir().expect(%22read_dir+call+failed%22)+%7B%0A++++++++if+let+Ok(entry)+=+entry+%7B%0A++++++++++++println!(%22%7B:?%7D%22,+entry.path());%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n1.5.0 · [source](about:blank/src/std/path.rs.html#2872-2874)\n\nReturns `true` if the path points at an existing entity.\n\nWarning: this method may be error-prone, consider using [`try_exists()`](about:blank/struct.Path.html#method.try_exists \"method std::path::Path::try_exists\") instead! It also has a risk of introducing time-of-check to time-of-use (TOCTOU) bugs.\n\nThis function will traverse symbolic links to query information about the destination file.\n\nIf you cannot access the metadata of the file, e.g. because of a permission error or broken symbolic links, this will return `false`.\n\n##### [§](#examples-38)Examples\n\n```\nuse std::path::Path;\nassert!(!Path::new(\"does_not_exist.txt\").exists());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++assert!(!Path::new(%22does_not_exist.txt%22).exists());%0A%7D&edition=2021)\n\n##### [§](#see-also-2)See Also\n\nThis is a convenience function that coerces errors to false. If you want to check errors, call [`Path::try_exists`](about:blank/struct.Path.html#method.try_exists \"method std::path::Path::try_exists\").\n\n1.63.0 · [source](about:blank/src/std/path.rs.html#2902-2904)\n\nReturns `Ok(true)` if the path points at an existing entity.\n\nThis function will traverse symbolic links to query information about the destination file. In case of broken symbolic links this will return `Ok(false)`.\n\n[`Path::exists()`](about:blank/struct.Path.html#method.exists \"method std::path::Path::exists\") only checks whether or not a path was both found and readable. By contrast, `try_exists` will return `Ok(true)` or `Ok(false)`, respectively, if the path was _verified_ to exist or not exist. If its existence can neither be confirmed nor denied, it will propagate an `Err(_)` instead. This can be the case if e.g. listing permission is denied on one of the parent directories.\n\nNote that while this avoids some pitfalls of the `exists()` method, it still can not prevent time-of-check to time-of-use (TOCTOU) bugs. You should only use it in scenarios where those bugs are not an issue.\n\n##### [§](#examples-39)Examples\n\n```\nuse std::path::Path;\nassert!(!Path::new(\"does_not_exist.txt\").try_exists().expect(\"Can't check existence of file does_not_exist.txt\"));\nassert!(Path::new(\"/root/secret_file.txt\").try_exists().is_err());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++assert!(!Path::new(%22does_not_exist.txt%22).try_exists().expect(%22Can%27t+check+existence+of+file+does_not_exist.txt%22));%0A++++assert!(Path::new(%22/root/secret_file.txt%22).try_exists().is_err());%0A%7D&edition=2021)\n\n1.5.0 · [source](about:blank/src/std/path.rs.html#2935-2937)\n\nReturns `true` if the path exists on disk and is pointing at a regular file.\n\nThis function will traverse symbolic links to query information about the destination file.\n\nIf you cannot access the metadata of the file, e.g. because of a permission error or broken symbolic links, this will return `false`.\n\n##### [§](#examples-40)Examples\n\n```\nuse std::path::Path;\nassert_eq!(Path::new(\"./is_a_directory/\").is_file(), false);\nassert_eq!(Path::new(\"a_file.txt\").is_file(), true);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++assert_eq!(Path::new(%22./is_a_directory/%22).is_file(),+false);%0A++++assert_eq!(Path::new(%22a_file.txt%22).is_file(),+true);%0A%7D&edition=2021)\n\n##### [§](#see-also-3)See Also\n\nThis is a convenience function that coerces errors to false. If you want to check errors, call [`fs::metadata`](../fs/fn.metadata.html \"fn std::fs::metadata\") and handle its [`Result`](../result/enum.Result.html \"enum std::result::Result\"). Then call [`fs::Metadata::is_file`](about:blank/fs/struct.Metadata.html#method.is_file \"method std::fs::Metadata::is_file\") if it was [`Ok`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\").\n\nWhen the goal is simply to read from (or write to) the source, the most reliable way to test the source can be read (or written to) is to open it. Only using `is_file` can break workflows like `diff <( prog_a )` on a Unix-like system for example. See [`fs::File::open`](about:blank/fs/struct.File.html#method.open \"associated function std::fs::File::open\") or [`fs::OpenOptions::open`](about:blank/fs/struct.OpenOptions.html#method.open \"method std::fs::OpenOptions::open\") for more information.\n\n1.5.0 · [source](about:blank/src/std/path.rs.html#2962-2964)\n\nReturns `true` if the path exists on disk and is pointing at a directory.\n\nThis function will traverse symbolic links to query information about the destination file.\n\nIf you cannot access the metadata of the file, e.g. because of a permission error or broken symbolic links, this will return `false`.\n\n##### [§](#examples-41)Examples\n\n```\nuse std::path::Path;\nassert_eq!(Path::new(\"./is_a_directory/\").is_dir(), true);\nassert_eq!(Path::new(\"a_file.txt\").is_dir(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++assert_eq!(Path::new(%22./is_a_directory/%22).is_dir(),+true);%0A++++assert_eq!(Path::new(%22a_file.txt%22).is_dir(),+false);%0A%7D&edition=2021)\n\n##### [§](#see-also-4)See Also\n\nThis is a convenience function that coerces errors to false. If you want to check errors, call [`fs::metadata`](../fs/fn.metadata.html \"fn std::fs::metadata\") and handle its [`Result`](../result/enum.Result.html \"enum std::result::Result\"). Then call [`fs::Metadata::is_dir`](about:blank/fs/struct.Metadata.html#method.is_dir \"method std::fs::Metadata::is_dir\") if it was [`Ok`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\").\n\n1.58.0 · [source](about:blank/src/std/path.rs.html#2994-2996)\n\nReturns `true` if the path exists on disk and is pointing at a symbolic link.\n\nThis function will not traverse symbolic links. In case of a broken symbolic link this will also return true.\n\nIf you cannot access the directory containing the file, e.g., because of a permission error, this will return false.\n\n##### [§](#examples-42)Examples\n\n```\nuse std::path::Path;\nuse std::os::unix::fs::symlink;\n\nlet link_path = Path::new(\"link\");\nsymlink(\"/origin_does_not_exist/\", link_path).unwrap();\nassert_eq!(link_path.is_symlink(), true);\nassert_eq!(link_path.exists(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++use+std::os::unix::fs::symlink;%0A++++%0A++++let+link_path+=+Path::new(%22link%22);%0A++++symlink(%22/origin_does_not_exist/%22,+link_path).unwrap();%0A++++assert_eq!(link_path.is_symlink(),+true);%0A++++assert_eq!(link_path.exists(),+false);%0A%7D&edition=2021)\n\n##### [§](#see-also-5)See Also\n\nThis is a convenience function that coerces errors to false. If you want to check errors, call [`fs::symlink_metadata`](../fs/fn.symlink_metadata.html \"fn std::fs::symlink_metadata\") and handle its [`Result`](../result/enum.Result.html \"enum std::result::Result\"). Then call [`fs::Metadata::is_symlink`](about:blank/fs/struct.Metadata.html#method.is_symlink \"method std::fs::Metadata::is_symlink\") if it was [`Ok`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\").\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1957-1962)[§](#impl-AsRef%3COsStr%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#1959-1961)[§](#method.as_ref)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#3190-3195)[§](#impl-AsRef%3CPath%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3192-3194)[§](#method.as_ref-1)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1805-1810)[§](#impl-Borrow%3CPath%3E-for-PathBuf)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1632-1646)[§](#impl-Clone-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#1643-1645)[§](#method.clone_from)\n\nClones the contents of `source` into `self`.\n\nThis method is preferred over simply assigning `source.clone()` to `self`, as it avoids reallocation if possible.\n\n[source](about:blank/src/std/path.rs.html#1634-1636)[§](#method.clone)\n\nReturns a copy of the value. [Read more](about:blank/clone/trait.Clone.html#tymethod.clone)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1781-1785)[§](#impl-Debug-for-PathBuf)\n\n1.17.0 · [source](about:blank/src/std/path.rs.html#1813-1818)[§](#impl-Default-for-PathBuf)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1788-1794)[§](#impl-Deref-for-PathBuf)\n\n[§](#associatedtype.Target)\n\nThe resulting type after dereferencing.\n\n[source](about:blank/src/std/path.rs.html#1791-1793)[§](#method.deref)\n\nDereferences the value.\n\n1.68.0 · [source](about:blank/src/std/path.rs.html#1797-1802)[§](#impl-DerefMut-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#1799-1801)[§](#method.deref_mut)\n\nMutably dereferences the value.\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1769-1778)[§](#impl-Extend%3CP%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#1770-1772)[§](#method.extend)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](about:blank/src/std/path.rs.html#1775-1777)[§](#method.extend_one)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461)[§](#method.extend_reserve)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.28.0 · [source](about:blank/src/std/path.rs.html#1845-1854)[§](#impl-From%3C%26PathBuf%3E-for-Cow%3C'a,+Path%3E)\n\n[source](about:blank/src/std/path.rs.html#1851-1853)[§](#method.from-2)\n\nCreates a clone-on-write pointer from a reference to [`PathBuf`](struct.PathBuf.html \"struct std::path::PathBuf\").\n\nThis conversion does not clone or allocate.\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1706-1714)[§](#impl-From%3C%26T%3E-for-PathBuf)\n\n1.18.0 · [source](about:blank/src/std/path.rs.html#1675-1683)[§](#impl-From%3CBox%3CPath%3E%3E-for-PathBuf)\n\n1.28.0 · [source](about:blank/src/std/path.rs.html#1857-1865)[§](#impl-From%3CCow%3C'a,+Path%3E%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#1862-1864)[§](#method.from-4)\n\nConverts a clone-on-write pointer to an owned path.\n\nConverting from a `Cow::Owned` does not clone or allocate.\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1717-1725)[§](#impl-From%3COsString%3E-for-PathBuf)\n\n1.24.0 · [source](about:blank/src/std/path.rs.html#1868-1876)[§](#impl-From%3CPathBuf%3E-for-Arc%3CPath%3E)\n\n1.20.0 · [source](about:blank/src/std/path.rs.html#1686-1695)[§](#impl-From%3CPathBuf%3E-for-Box%3CPath%3E)\n\n[source](about:blank/src/std/path.rs.html#1692-1694)[§](#method.from-7)\n\nConverts a [`PathBuf`](struct.PathBuf.html \"struct std::path::PathBuf\") into a `[Box](../boxed/struct.Box.html \"struct std::boxed::Box\")<[Path](struct.Path.html \"struct std::path::Path\")>`.\n\nThis conversion currently should not allocate memory, but this behavior is not guaranteed on all platforms or in all future versions.\n\n1.6.0 · [source](about:blank/src/std/path.rs.html#1833-1842)[§](#impl-From%3CPathBuf%3E-for-Cow%3C'a,+Path%3E)\n\n[source](about:blank/src/std/path.rs.html#1839-1841)[§](#method.from-6)\n\nCreates a clone-on-write pointer from an owned instance of [`PathBuf`](struct.PathBuf.html \"struct std::path::PathBuf\").\n\nThis conversion does not clone or allocate.\n\n1.14.0 · [source](about:blank/src/std/path.rs.html#1728-1736)[§](#impl-From%3CPathBuf%3E-for-OsString)\n\n1.24.0 · [source](about:blank/src/std/path.rs.html#1889-1897)[§](#impl-From%3CPathBuf%3E-for-Rc%3CPath%3E)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1739-1747)[§](#impl-From%3CString%3E-for-PathBuf)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1760-1766)[§](#impl-FromIterator%3CP%3E-for-PathBuf)\n\n1.32.0 · [source](about:blank/src/std/path.rs.html#1750-1757)[§](#impl-FromStr-for-PathBuf)\n\n[§](#associatedtype.Err)\n\nThe associated error which can be returned from parsing.\n\n[source](about:blank/src/std/path.rs.html#1754-1756)[§](#method.from_str)\n\nParses a string `s` to return a value of this type. [Read more](about:blank/str/trait.FromStr.html#tymethod.from_str)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1931-1935)[§](#impl-Hash-for-PathBuf)\n\n1.6.0 · [source](about:blank/src/std/path.rs.html#3198-3205)[§](#impl-IntoIterator-for-%26PathBuf)\n\n[§](#associatedtype.Item)\n\nThe type of the elements being iterated over.\n\n[§](#associatedtype.IntoIter)\n\nWhich kind of iterator are we turning this into?\n\n[source](about:blank/src/std/path.rs.html#3202-3204)[§](#method.into_iter)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1949-1954)[§](#impl-Ord-for-PathBuf)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3296)[§](#impl-PartialEq%3C%26OsStr%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3296)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.6.0 · [source](about:blank/src/std/path.rs.html#3254)[§](#impl-PartialEq%3C%26Path%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3254)[§](#method.eq-12)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-12)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3297)[§](#impl-PartialEq%3CCow%3C'a,+OsStr%3E%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3297)[§](#method.eq-9)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-9)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.6.0 · [source](about:blank/src/std/path.rs.html#3257)[§](#impl-PartialEq%3CCow%3C'a,+Path%3E%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3257)[§](#method.eq-11)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-11)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3295)[§](#impl-PartialEq%3COsStr%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3295)[§](#method.eq-13)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-13)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3298)[§](#impl-PartialEq%3COsString%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3298)[§](#method.eq-6)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-6)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.6.0 · [source](about:blank/src/std/path.rs.html#3253)[§](#impl-PartialEq%3CPath%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3253)[§](#method.eq-3)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-3)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3296)[§](#impl-PartialEq%3CPathBuf%3E-for-%26OsStr)\n\n[source](about:blank/src/std/path.rs.html#3296)[§](#method.eq-5)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-5)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.6.0 · [source](about:blank/src/std/path.rs.html#3254)[§](#impl-PartialEq%3CPathBuf%3E-for-%26Path)\n\n[source](about:blank/src/std/path.rs.html#3254)[§](#method.eq-2)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-2)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3297)[§](#impl-PartialEq%3CPathBuf%3E-for-Cow%3C'a,+OsStr%3E)\n\n[source](about:blank/src/std/path.rs.html#3297)[§](#method.eq-4)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-4)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.6.0 · [source](about:blank/src/std/path.rs.html#3257)[§](#impl-PartialEq%3CPathBuf%3E-for-Cow%3C'a,+Path%3E)\n\n[source](about:blank/src/std/path.rs.html#3257)[§](#method.eq-8)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-8)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3295)[§](#impl-PartialEq%3CPathBuf%3E-for-OsStr)\n\n[source](about:blank/src/std/path.rs.html#3295)[§](#method.eq-7)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-7)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3298)[§](#impl-PartialEq%3CPathBuf%3E-for-OsString)\n\n[source](about:blank/src/std/path.rs.html#3298)[§](#method.eq-1)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-1)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.6.0 · [source](about:blank/src/std/path.rs.html#3253)[§](#impl-PartialEq%3CPathBuf%3E-for-Path)\n\n[source](about:blank/src/std/path.rs.html#3253)[§](#method.eq-14)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-14)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1923-1928)[§](#impl-PartialEq-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#1925-1927)[§](#method.eq-10)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-10)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3296)[§](#impl-PartialOrd%3C%26OsStr%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3296)[§](#method.partial_cmp-9)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-9)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-9)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-9)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-9)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3254)[§](#impl-PartialOrd%3C%26Path%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3254)[§](#method.partial_cmp-7)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-7)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-7)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-7)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-7)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3297)[§](#impl-PartialOrd%3CCow%3C'a,+OsStr%3E%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3297)[§](#method.partial_cmp-1)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-1)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-1)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-1)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-1)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3257)[§](#impl-PartialOrd%3CCow%3C'a,+Path%3E%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3257)[§](#method.partial_cmp-13)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-13)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-13)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-13)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-13)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3295)[§](#impl-PartialOrd%3COsStr%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3295)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3298)[§](#impl-PartialOrd%3COsString%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3298)[§](#method.partial_cmp-2)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-2)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-2)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-2)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-2)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3253)[§](#impl-PartialOrd%3CPath%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3253)[§](#method.partial_cmp-6)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-6)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-6)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-6)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-6)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3296)[§](#impl-PartialOrd%3CPathBuf%3E-for-%26OsStr)\n\n[source](about:blank/src/std/path.rs.html#3296)[§](#method.partial_cmp-8)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-8)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-8)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-8)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-8)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3254)[§](#impl-PartialOrd%3CPathBuf%3E-for-%26Path)\n\n[source](about:blank/src/std/path.rs.html#3254)[§](#method.partial_cmp-4)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-4)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-4)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-4)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-4)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3297)[§](#impl-PartialOrd%3CPathBuf%3E-for-Cow%3C'a,+OsStr%3E)\n\n[source](about:blank/src/std/path.rs.html#3297)[§](#method.partial_cmp-10)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-10)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-10)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-10)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-10)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3257)[§](#impl-PartialOrd%3CPathBuf%3E-for-Cow%3C'a,+Path%3E)\n\n[source](about:blank/src/std/path.rs.html#3257)[§](#method.partial_cmp-12)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-12)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-12)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-12)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-12)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3295)[§](#impl-PartialOrd%3CPathBuf%3E-for-OsStr)\n\n[source](about:blank/src/std/path.rs.html#3295)[§](#method.partial_cmp-11)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-11)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-11)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-11)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-11)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3298)[§](#impl-PartialOrd%3CPathBuf%3E-for-OsString)\n\n[source](about:blank/src/std/path.rs.html#3298)[§](#method.partial_cmp-3)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-3)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-3)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-3)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-3)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3253)[§](#impl-PartialOrd%3CPathBuf%3E-for-Path)\n\n[source](about:blank/src/std/path.rs.html#3253)[§](#method.partial_cmp-14)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-14)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-14)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-14)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-14)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1941-1946)[§](#impl-PartialOrd-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#1943-1945)[§](#method.partial_cmp-5)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-5)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-5)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-5)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-5)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1938)[§](#impl-Eq-for-PathBuf)\n\n[§](#impl-Freeze-for-PathBuf)\n\n[§](#impl-RefUnwindSafe-for-PathBuf)\n\n[§](#impl-Send-for-PathBuf)\n\n[§](#impl-Sync-for-PathBuf)\n\n[§](#impl-Unpin-for-PathBuf)\n\n[§](#impl-UnwindSafe-for-PathBuf)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-11)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An owned, mutable path (akin to `String`).\"><title>PathBuf in std::path - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">PathBuf</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">PathBuf</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_mut_os_string\">as_mut_os_string</a></li><li><a href=\"#method.as_path\">as_path</a></li><li><a href=\"#method.capacity\">capacity</a></li><li><a href=\"#method.clear\">clear</a></li><li><a href=\"#method.into_boxed_path\">into_boxed_path</a></li><li><a href=\"#method.into_os_string\">into_os_string</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.pop\">pop</a></li><li><a href=\"#method.push\">push</a></li><li><a href=\"#method.reserve\">reserve</a></li><li><a href=\"#method.reserve_exact\">reserve_exact</a></li><li><a href=\"#method.set_extension\">set_extension</a></li><li><a href=\"#method.set_file_name\">set_file_name</a></li><li><a href=\"#method.shrink_to\">shrink_to</a></li><li><a href=\"#method.shrink_to_fit\">shrink_to_fit</a></li><li><a href=\"#method.try_reserve\">try_reserve</a></li><li><a href=\"#method.try_reserve_exact\">try_reserve_exact</a></li><li><a href=\"#method.with_capacity\">with_capacity</a></li></ul><h3><a href=\"#deref-methods-Path\">Methods from Deref&lt;Target=Path&gt;</a></h3><ul class=\"block deref-methods\"><li><a href=\"#method.ancestors\">ancestors</a></li><li><a href=\"#method.as_mut_os_str\">as_mut_os_str</a></li><li><a href=\"#method.as_os_str\">as_os_str</a></li><li><a href=\"#method.canonicalize\">canonicalize</a></li><li><a href=\"#method.components\">components</a></li><li><a href=\"#method.display\">display</a></li><li><a href=\"#method.ends_with\">ends_with</a></li><li><a href=\"#method.exists\">exists</a></li><li><a href=\"#method.extension\">extension</a></li><li><a href=\"#method.file_name\">file_name</a></li><li><a href=\"#method.file_prefix\">file_prefix</a></li><li><a href=\"#method.file_stem\">file_stem</a></li><li><a href=\"#method.has_root\">has_root</a></li><li><a href=\"#method.is_absolute\">is_absolute</a></li><li><a href=\"#method.is_dir\">is_dir</a></li><li><a href=\"#method.is_file\">is_file</a></li><li><a href=\"#method.is_relative\">is_relative</a></li><li><a href=\"#method.is_symlink\">is_symlink</a></li><li><a href=\"#method.iter\">iter</a></li><li><a href=\"#method.join\">join</a></li><li><a href=\"#method.metadata\">metadata</a></li><li><a href=\"#method.parent\">parent</a></li><li><a href=\"#method.read_dir\">read_dir</a></li><li><a href=\"#method.read_link\">read_link</a></li><li><a href=\"#method.starts_with\">starts_with</a></li><li><a href=\"#method.strip_prefix\">strip_prefix</a></li><li><a href=\"#method.symlink_metadata\">symlink_metadata</a></li><li><a href=\"#method.to_path_buf\">to_path_buf</a></li><li><a href=\"#method.to_str\">to_str</a></li><li><a href=\"#method.to_string_lossy\">to_string_lossy</a></li><li><a href=\"#method.try_exists\">try_exists</a></li><li><a href=\"#method.with_extension\">with_extension</a></li><li><a href=\"#method.with_file_name\">with_file_name</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsRef%3COsStr%3E-for-PathBuf\">AsRef&lt;OsStr&gt;</a></li><li><a href=\"#impl-AsRef%3CPath%3E-for-PathBuf\">AsRef&lt;Path&gt;</a></li><li><a href=\"#impl-Borrow%3CPath%3E-for-PathBuf\">Borrow&lt;Path&gt;</a></li><li><a href=\"#impl-Clone-for-PathBuf\">Clone</a></li><li><a href=\"#impl-Debug-for-PathBuf\">Debug</a></li><li><a href=\"#impl-Default-for-PathBuf\">Default</a></li><li><a href=\"#impl-Deref-for-PathBuf\">Deref</a></li><li><a href=\"#impl-DerefMut-for-PathBuf\">DerefMut</a></li><li><a href=\"#impl-Eq-for-PathBuf\">Eq</a></li><li><a href=\"#impl-Extend%3CP%3E-for-PathBuf\">Extend&lt;P&gt;</a></li><li><a href=\"#impl-From%3C%26PathBuf%3E-for-Cow%3C'a,+Path%3E\">From&lt;&amp;'a PathBuf&gt;</a></li><li><a href=\"#impl-From%3C%26T%3E-for-PathBuf\">From&lt;&amp;T&gt;</a></li><li><a href=\"#impl-From%3CBox%3CPath%3E%3E-for-PathBuf\">From&lt;Box&lt;Path&gt;&gt;</a></li><li><a href=\"#impl-From%3CCow%3C'a,+Path%3E%3E-for-PathBuf\">From&lt;Cow&lt;'a, Path&gt;&gt;</a></li><li><a href=\"#impl-From%3COsString%3E-for-PathBuf\">From&lt;OsString&gt;</a></li><li><a href=\"#impl-From%3CPathBuf%3E-for-Arc%3CPath%3E\">From&lt;PathBuf&gt;</a></li><li><a href=\"#impl-From%3CPathBuf%3E-for-Box%3CPath%3E\">From&lt;PathBuf&gt;</a></li><li><a href=\"#impl-From%3CPathBuf%3E-for-Cow%3C'a,+Path%3E\">From&lt;PathBuf&gt;</a></li><li><a href=\"#impl-From%3CPathBuf%3E-for-OsString\">From&lt;PathBuf&gt;</a></li><li><a href=\"#impl-From%3CPathBuf%3E-for-Rc%3CPath%3E\">From&lt;PathBuf&gt;</a></li><li><a href=\"#impl-From%3CString%3E-for-PathBuf\">From&lt;String&gt;</a></li><li><a href=\"#impl-FromIterator%3CP%3E-for-PathBuf\">FromIterator&lt;P&gt;</a></li><li><a href=\"#impl-FromStr-for-PathBuf\">FromStr</a></li><li><a href=\"#impl-Hash-for-PathBuf\">Hash</a></li><li><a href=\"#impl-IntoIterator-for-%26PathBuf\">IntoIterator</a></li><li><a href=\"#impl-Ord-for-PathBuf\">Ord</a></li><li><a href=\"#impl-PartialEq-for-PathBuf\">PartialEq</a></li><li><a href=\"#impl-PartialEq%3C%26OsStr%3E-for-PathBuf\">PartialEq&lt;&amp;'a OsStr&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26Path%3E-for-PathBuf\">PartialEq&lt;&amp;'a Path&gt;</a></li><li><a href=\"#impl-PartialEq%3CCow%3C'a,+OsStr%3E%3E-for-PathBuf\">PartialEq&lt;Cow&lt;'a, OsStr&gt;&gt;</a></li><li><a href=\"#impl-PartialEq%3CCow%3C'a,+Path%3E%3E-for-PathBuf\">PartialEq&lt;Cow&lt;'a, Path&gt;&gt;</a></li><li><a href=\"#impl-PartialEq%3COsStr%3E-for-PathBuf\">PartialEq&lt;OsStr&gt;</a></li><li><a href=\"#impl-PartialEq%3COsString%3E-for-PathBuf\">PartialEq&lt;OsString&gt;</a></li><li><a href=\"#impl-PartialEq%3CPath%3E-for-PathBuf\">PartialEq&lt;Path&gt;</a></li><li><a href=\"#impl-PartialEq%3CPathBuf%3E-for-%26OsStr\">PartialEq&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialEq%3CPathBuf%3E-for-%26Path\">PartialEq&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialEq%3CPathBuf%3E-for-Cow%3C'a,+OsStr%3E\">PartialEq&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialEq%3CPathBuf%3E-for-Cow%3C'a,+Path%3E\">PartialEq&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialEq%3CPathBuf%3E-for-OsStr\">PartialEq&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialEq%3CPathBuf%3E-for-OsString\">PartialEq&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialEq%3CPathBuf%3E-for-Path\">PartialEq&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialOrd-for-PathBuf\">PartialOrd</a></li><li><a href=\"#impl-PartialOrd%3C%26OsStr%3E-for-PathBuf\">PartialOrd&lt;&amp;'a OsStr&gt;</a></li><li><a href=\"#impl-PartialOrd%3C%26Path%3E-for-PathBuf\">PartialOrd&lt;&amp;'a Path&gt;</a></li><li><a href=\"#impl-PartialOrd%3CCow%3C'a,+OsStr%3E%3E-for-PathBuf\">PartialOrd&lt;Cow&lt;'a, OsStr&gt;&gt;</a></li><li><a href=\"#impl-PartialOrd%3CCow%3C'a,+Path%3E%3E-for-PathBuf\">PartialOrd&lt;Cow&lt;'a, Path&gt;&gt;</a></li><li><a href=\"#impl-PartialOrd%3COsStr%3E-for-PathBuf\">PartialOrd&lt;OsStr&gt;</a></li><li><a href=\"#impl-PartialOrd%3COsString%3E-for-PathBuf\">PartialOrd&lt;OsString&gt;</a></li><li><a href=\"#impl-PartialOrd%3CPath%3E-for-PathBuf\">PartialOrd&lt;Path&gt;</a></li><li><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-%26OsStr\">PartialOrd&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-%26Path\">PartialOrd&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-Cow%3C'a,+OsStr%3E\">PartialOrd&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-Cow%3C'a,+Path%3E\">PartialOrd&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-OsStr\">PartialOrd&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-OsString\">PartialOrd&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-Path\">PartialOrd&lt;PathBuf&gt;</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-PathBuf\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-PathBuf\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-PathBuf\">Send</a></li><li><a href=\"#impl-Sync-for-PathBuf\">Sync</a></li><li><a href=\"#impl-Unpin-for-PathBuf\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-PathBuf\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::path</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Ancestors.html\">Ancestors</a></li><li><a href=\"struct.Components.html\">Components</a></li><li><a href=\"struct.Display.html\">Display</a></li><li><a href=\"struct.Iter.html\">Iter</a></li><li><a href=\"struct.Path.html\">Path</a></li><li><a href=\"struct.PathBuf.html\">PathBuf</a></li><li><a href=\"struct.PrefixComponent.html\">PrefixComponent</a></li><li><a href=\"struct.StripPrefixError.html\">StripPrefixError</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Component.html\">Component</a></li><li><a href=\"enum.Prefix.html\">Prefix</a></li></ul><h3><a href=\"index.html#constants\">Constants</a></h3><ul class=\"block constant\"><li><a href=\"constant.MAIN_SEPARATOR.html\">MAIN_SEPARATOR</a></li><li><a href=\"constant.MAIN_SEPARATOR_STR.html\">MAIN_SEPARATOR_STR</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.absolute.html\">absolute</a></li><li><a href=\"fn.is_separator.html\">is_separator</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">path</a>::<wbr><a class=\"struct\" href=\"#\">PathBuf</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1161-1163\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct PathBuf { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An owned, mutable path (akin to <a href=\"../string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a>).</p>\n<p>This type provides methods like <a href=\"struct.PathBuf.html#method.push\" title=\"method std::path::PathBuf::push\"><code>push</code></a> and <a href=\"struct.PathBuf.html#method.set_extension\" title=\"method std::path::PathBuf::set_extension\"><code>set_extension</code></a> that mutate\nthe path in place. It also implements <a href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\"><code>Deref</code></a> to <a href=\"struct.Path.html\" title=\"struct std::path::Path\"><code>Path</code></a>, meaning that\nall methods on <a href=\"struct.Path.html\" title=\"struct std::path::Path\"><code>Path</code></a> slices are available on <code>PathBuf</code> values as well.</p>\n<p>More details about the overall approach can be found in\nthe <a href=\"index.html\" title=\"mod std::path\">module documentation</a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>You can use <a href=\"struct.PathBuf.html#method.push\" title=\"method std::path::PathBuf::push\"><code>push</code></a> to build up a <code>PathBuf</code> from\ncomponents:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::PathBuf;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>path = PathBuf::new();\n\npath.push(<span class=\"string\">r\"C:\\\"</span>);\npath.push(<span class=\"string\">\"windows\"</span>);\npath.push(<span class=\"string\">\"system32\"</span>);\n\npath.set_extension(<span class=\"string\">\"dll\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+mut+path+=+PathBuf::new();%0A++++%0A++++path.push(r%22C:%5C%22);%0A++++path.push(%22windows%22);%0A++++path.push(%22system32%22);%0A++++%0A++++path.set_extension(%22dll%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>However, <a href=\"struct.PathBuf.html#method.push\" title=\"method std::path::PathBuf::push\"><code>push</code></a> is best used for dynamic situations. This is a better way\nto do this when you know all of the components ahead of time:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::PathBuf;\n\n<span class=\"kw\">let </span>path: PathBuf = [<span class=\"string\">r\"C:\\\"</span>, <span class=\"string\">\"windows\"</span>, <span class=\"string\">\"system32.dll\"</span>].iter().collect();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+path:+PathBuf+=+%5Br%22C:%5C%22,+%22windows%22,+%22system32.dll%22%5D.iter().collect();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>We can still do better than this! Since these are all strings, we can use\n<code>From::from</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::PathBuf;\n\n<span class=\"kw\">let </span>path = PathBuf::from(<span class=\"string\">r\"C:\\windows\\system32.dll\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+path+=+PathBuf::from(r%22C:%5Cwindows%5Csystem32.dll%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Which method works best depends on what kind of situation you’re in.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PathBuf\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1165-1629\">source</a><a href=\"#impl-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1183-1185\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h4></section></summary><div class=\"docblock\"><p>Allocates an empty <code>PathBuf</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::PathBuf;\n\n<span class=\"kw\">let </span>path = PathBuf::new();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+path+=+PathBuf::new();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1208-1210\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>PathBuf</code> with a given capacity used to create the\ninternal <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a>. See <a href=\"../ffi/struct.OsString.html#method.with_capacity\" title=\"associated function std::ffi::OsString::with_capacity\"><code>with_capacity</code></a> defined on <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::PathBuf;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>path = PathBuf::with_capacity(<span class=\"number\">10</span>);\n<span class=\"kw\">let </span>capacity = path.capacity();\n\n<span class=\"comment\">// This push is done without reallocating\n</span>path.push(<span class=\"string\">r\"C:\\\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(capacity, path.capacity());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+mut+path+=+PathBuf::with_capacity(10);%0A++++let+capacity+=+path.capacity();%0A++++%0A++++//+This+push+is+done+without+reallocating%0A++++path.push(r%22C:%5C%22);%0A++++%0A++++assert_eq!(capacity,+path.capacity());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_path\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_path\" class=\"fn\">as_path</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a></h4></section></summary><div class=\"docblock\"><p>Coerces to a <a href=\"struct.Path.html\" title=\"struct std::path::Path\"><code>Path</code></a> slice.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span>p = PathBuf::from(<span class=\"string\">\"/test\"</span>);\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"/test\"</span>), p.as_path());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+p+=+PathBuf::from(%22/test%22);%0A++++assert_eq!(Path::new(%22/test%22),+p.as_path());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.push\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1268-1270\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.push\" class=\"fn\">push</a>&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;mut self, path: P)</h4></section></summary><div class=\"docblock\"><p>Extends <code>self</code> with <code>path</code>.</p>\n<p>If <code>path</code> is absolute, it replaces the current path.</p>\n<p>On Windows:</p>\n<ul>\n<li>if <code>path</code> has a root but no prefix (e.g., <code>\\windows</code>), it\nreplaces everything except for the prefix (if any) of <code>self</code>.</li>\n<li>if <code>path</code> has a prefix but no root, it replaces <code>self</code>.</li>\n<li>if <code>self</code> has a verbatim prefix (e.g. <code>\\\\?\\C:\\windows</code>)\nand <code>path</code> is not empty, the new path is normalized: all references\nto <code>.</code> and <code>..</code> are removed.</li>\n</ul>\n<p>Consider using <a href=\"struct.Path.html#method.join\" title=\"method std::path::Path::join\"><code>Path::join</code></a> if you need a new <code>PathBuf</code> instead of\nusing this function on a cloned <code>PathBuf</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Pushing a relative path extends the existing path:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::PathBuf;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>path = PathBuf::from(<span class=\"string\">\"/tmp\"</span>);\npath.push(<span class=\"string\">\"file.bk\"</span>);\n<span class=\"macro\">assert_eq!</span>(path, PathBuf::from(<span class=\"string\">\"/tmp/file.bk\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+mut+path+=+PathBuf::from(%22/tmp%22);%0A++++path.push(%22file.bk%22);%0A++++assert_eq!(path,+PathBuf::from(%22/tmp/file.bk%22));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Pushing an absolute path replaces the existing path:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::PathBuf;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>path = PathBuf::from(<span class=\"string\">\"/tmp\"</span>);\npath.push(<span class=\"string\">\"/etc\"</span>);\n<span class=\"macro\">assert_eq!</span>(path, PathBuf::from(<span class=\"string\">\"/etc\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+mut+path+=+PathBuf::from(%22/tmp%22);%0A++++path.push(%22/etc%22);%0A++++assert_eq!(path,+PathBuf::from(%22/etc%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pop\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1363-1371\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Truncates <code>self</code> to <a href=\"struct.Path.html#method.parent\" title=\"method std::path::Path::parent\"><code>self.parent</code></a>.</p>\n<p>Returns <code>false</code> and does nothing if <a href=\"struct.Path.html#method.parent\" title=\"method std::path::Path::parent\"><code>self.parent</code></a> is <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>.\nOtherwise, returns <code>true</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = PathBuf::from(<span class=\"string\">\"/spirited/away.rs\"</span>);\n\np.pop();\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"/spirited\"</span>), p);\np.pop();\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"/\"</span>), p);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+mut+p+=+PathBuf::from(%22/spirited/away.rs%22);%0A++++%0A++++p.pop();%0A++++assert_eq!(Path::new(%22/spirited%22),+p);%0A++++p.pop();%0A++++assert_eq!(Path::new(%22/%22),+p);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_file_name\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1404-1406\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_file_name\" class=\"fn\">set_file_name</a>&lt;S: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt;(&amp;mut self, file_name: S)</h4></section></summary><div class=\"docblock\"><p>Updates <a href=\"struct.Path.html#method.file_name\" title=\"method std::path::Path::file_name\"><code>self.file_name</code></a> to <code>file_name</code>.</p>\n<p>If <a href=\"struct.Path.html#method.file_name\" title=\"method std::path::Path::file_name\"><code>self.file_name</code></a> was <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, this is equivalent to pushing\n<code>file_name</code>.</p>\n<p>Otherwise it is equivalent to calling <a href=\"struct.PathBuf.html#method.pop\" title=\"method std::path::PathBuf::pop\"><code>pop</code></a> and then pushing\n<code>file_name</code>. The new path will be a sibling of the original path.\n(That is, it will have the same parent.)</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::PathBuf;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = PathBuf::from(<span class=\"string\">\"/\"</span>);\n<span class=\"macro\">assert!</span>(buf.file_name() == <span class=\"prelude-val\">None</span>);\n\nbuf.set_file_name(<span class=\"string\">\"foo.txt\"</span>);\n<span class=\"macro\">assert!</span>(buf == PathBuf::from(<span class=\"string\">\"/foo.txt\"</span>));\n<span class=\"macro\">assert!</span>(buf.file_name().is_some());\n\nbuf.set_file_name(<span class=\"string\">\"bar.txt\"</span>);\n<span class=\"macro\">assert!</span>(buf == PathBuf::from(<span class=\"string\">\"/bar.txt\"</span>));\n\nbuf.set_file_name(<span class=\"string\">\"baz\"</span>);\n<span class=\"macro\">assert!</span>(buf == PathBuf::from(<span class=\"string\">\"/baz\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+mut+buf+=+PathBuf::from(%22/%22);%0A++++assert!(buf.file_name()+==+None);%0A++++%0A++++buf.set_file_name(%22foo.txt%22);%0A++++assert!(buf+==+PathBuf::from(%22/foo.txt%22));%0A++++assert!(buf.file_name().is_some());%0A++++%0A++++buf.set_file_name(%22bar.txt%22);%0A++++assert!(buf+==+PathBuf::from(%22/bar.txt%22));%0A++++%0A++++buf.set_file_name(%22baz%22);%0A++++assert!(buf+==+PathBuf::from(%22/baz%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_extension\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1473-1475\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_extension\" class=\"fn\">set_extension</a>&lt;S: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt;(&amp;mut self, extension: S) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Updates <a href=\"struct.Path.html#method.extension\" title=\"method std::path::Path::extension\"><code>self.extension</code></a> to <code>Some(extension)</code> or to <code>None</code> if\n<code>extension</code> is empty.</p>\n<p>Returns <code>false</code> and does nothing if <a href=\"struct.Path.html#method.file_name\" title=\"method std::path::Path::file_name\"><code>self.file_name</code></a> is <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>,\nreturns <code>true</code> and updates the extension otherwise.</p>\n<p>If <a href=\"struct.Path.html#method.extension\" title=\"method std::path::Path::extension\"><code>self.extension</code></a> is <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, the extension is added; otherwise\nit is replaced.</p>\n<p>If <code>extension</code> is the empty string, <a href=\"struct.Path.html#method.extension\" title=\"method std::path::Path::extension\"><code>self.extension</code></a> will be <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>\nafterwards, not <code>Some(\"\")</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the passed extension contains a path separator (see\n<a href=\"fn.is_separator.html\" title=\"fn std::path::is_separator\"><code>is_separator</code></a>).</p>\n<h5 id=\"caveats\"><a class=\"doc-anchor\" href=\"#caveats\">§</a>Caveats</h5>\n<p>The new <code>extension</code> may contain dots and will be used in its entirety,\nbut only the part after the final dot will be reflected in\n<a href=\"struct.Path.html#method.extension\" title=\"method std::path::Path::extension\"><code>self.extension</code></a>.</p>\n<p>If the file stem contains internal dots and <code>extension</code> is empty, part\nof the old file stem will be considered the new <a href=\"struct.Path.html#method.extension\" title=\"method std::path::Path::extension\"><code>self.extension</code></a>.</p>\n<p>See the examples below.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = PathBuf::from(<span class=\"string\">\"/feel/the\"</span>);\n\np.set_extension(<span class=\"string\">\"force\"</span>);\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"/feel/the.force\"</span>), p.as_path());\n\np.set_extension(<span class=\"string\">\"dark.side\"</span>);\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"/feel/the.dark.side\"</span>), p.as_path());\n\np.set_extension(<span class=\"string\">\"cookie\"</span>);\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"/feel/the.dark.cookie\"</span>), p.as_path());\n\np.set_extension(<span class=\"string\">\"\"</span>);\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"/feel/the.dark\"</span>), p.as_path());\n\np.set_extension(<span class=\"string\">\"\"</span>);\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"/feel/the\"</span>), p.as_path());\n\np.set_extension(<span class=\"string\">\"\"</span>);\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"/feel/the\"</span>), p.as_path());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+mut+p+=+PathBuf::from(%22/feel/the%22);%0A++++%0A++++p.set_extension(%22force%22);%0A++++assert_eq!(Path::new(%22/feel/the.force%22),+p.as_path());%0A++++%0A++++p.set_extension(%22dark.side%22);%0A++++assert_eq!(Path::new(%22/feel/the.dark.side%22),+p.as_path());%0A++++%0A++++p.set_extension(%22cookie%22);%0A++++assert_eq!(Path::new(%22/feel/the.dark.cookie%22),+p.as_path());%0A++++%0A++++p.set_extension(%22%22);%0A++++assert_eq!(Path::new(%22/feel/the.dark%22),+p.as_path());%0A++++%0A++++p.set_extension(%22%22);%0A++++assert_eq!(Path::new(%22/feel/the%22),+p.as_path());%0A++++%0A++++p.set_extension(%22%22);%0A++++assert_eq!(Path::new(%22/feel/the%22),+p.as_path());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_os_string\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1527-1529\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_mut_os_string\" class=\"fn\">as_mut_os_string</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h4></section></summary><div class=\"docblock\"><p>Yields a mutable reference to the underlying <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a> instance.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>path = PathBuf::from(<span class=\"string\">\"/foo\"</span>);\n\npath.push(<span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(path, Path::new(<span class=\"string\">\"/foo/bar\"</span>));\n\n<span class=\"comment\">// OsString's `push` does not add a separator.\n</span>path.as_mut_os_string().push(<span class=\"string\">\"baz\"</span>);\n<span class=\"macro\">assert_eq!</span>(path, Path::new(<span class=\"string\">\"/foo/barbaz\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+mut+path+=+PathBuf::from(%22/foo%22);%0A++++%0A++++path.push(%22bar%22);%0A++++assert_eq!(path,+Path::new(%22/foo/bar%22));%0A++++%0A++++//+OsString's+%60push%60+does+not+add+a+separator.%0A++++path.as_mut_os_string().push(%22baz%22);%0A++++assert_eq!(path,+Path::new(%22/foo/barbaz%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_os_string\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1544-1546\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_os_string\" class=\"fn\">into_os_string</a>(self) -&gt; <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h4></section></summary><div class=\"docblock\"><p>Consumes the <code>PathBuf</code>, yielding its internal <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a> storage.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::PathBuf;\n\n<span class=\"kw\">let </span>p = PathBuf::from(<span class=\"string\">\"/the/head\"</span>);\n<span class=\"kw\">let </span>os_str = p.into_os_string();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::PathBuf;%0A++++%0A++++let+p+=+PathBuf::from(%22/the/head%22);%0A++++let+os_str+=+p.into_os_string();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_boxed_path\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1552-1555\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_boxed_path\" class=\"fn\">into_boxed_path</a>(self) -&gt; <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts this <code>PathBuf</code> into a <a href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">boxed</a> <a href=\"struct.Path.html\" title=\"struct std::path::Path\"><code>Path</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1563-1565\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Invokes <a href=\"../ffi/struct.OsString.html#method.capacity\" title=\"method std::ffi::OsString::capacity\"><code>capacity</code></a> on the underlying instance of <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1572-1574\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Invokes <a href=\"../ffi/struct.OsString.html#method.clear\" title=\"method std::ffi::OsString::clear\"><code>clear</code></a> on the underlying instance of <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1581-1583\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Invokes <a href=\"../ffi/struct.OsString.html#method.reserve\" title=\"method std::ffi::OsString::reserve\"><code>reserve</code></a> on the underlying instance of <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1590-1592\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_reserve\" class=\"fn\">try_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../collections/struct.TryReserveError.html\" title=\"struct std::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Invokes <a href=\"../ffi/struct.OsString.html#method.try_reserve\" title=\"method std::ffi::OsString::try_reserve\"><code>try_reserve</code></a> on the underlying instance of <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1599-1601\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.reserve_exact\" class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Invokes <a href=\"../ffi/struct.OsString.html#method.reserve_exact\" title=\"method std::ffi::OsString::reserve_exact\"><code>reserve_exact</code></a> on the underlying instance of <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1608-1610\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_reserve_exact\" class=\"fn\">try_reserve_exact</a>(\n    &amp;mut self,\n    additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../collections/struct.TryReserveError.html\" title=\"struct std::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Invokes <a href=\"../ffi/struct.OsString.html#method.try_reserve_exact\" title=\"method std::ffi::OsString::try_reserve_exact\"><code>try_reserve_exact</code></a> on the underlying instance of <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shrink_to_fit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1617-1619\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Invokes <a href=\"../ffi/struct.OsString.html#method.shrink_to_fit\" title=\"method std::ffi::OsString::shrink_to_fit\"><code>shrink_to_fit</code></a> on the underlying instance of <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shrink_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1626-1628\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Invokes <a href=\"../ffi/struct.OsString.html#method.shrink_to\" title=\"method std::ffi::OsString::shrink_to\"><code>shrink_to</code></a> on the underlying instance of <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a>.</p>\n</div></details></div></details></div><h2 id=\"deref-methods-Path\" class=\"section-header\"><span>Methods from <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&lt;Target = <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</span><a href=\"#deref-methods-Path\" class=\"anchor\">§</a></h2><div id=\"deref-methods-Path-1\" class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_os_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2075-2077\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_os_str\" class=\"fn\">as_os_str</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\"><p>Yields the underlying <a href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\"><code>OsStr</code></a> slice.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>os_str = Path::new(<span class=\"string\">\"foo.txt\"</span>).as_os_str();\n<span class=\"macro\">assert_eq!</span>(os_str, std::ffi::OsStr::new(<span class=\"string\">\"foo.txt\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+os_str+=+Path::new(%22foo.txt%22).as_os_str();%0A++++assert_eq!(os_str,+std::ffi::OsStr::new(%22foo.txt%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_os_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2096-2098\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_mut_os_str\" class=\"fn\">as_mut_os_str</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\"><p>Yields a mutable reference to the underlying <a href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\"><code>OsStr</code></a> slice.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>path = PathBuf::from(<span class=\"string\">\"Foo.TXT\"</span>);\n\n<span class=\"macro\">assert_ne!</span>(path, Path::new(<span class=\"string\">\"foo.txt\"</span>));\n\npath.as_mut_os_str().make_ascii_lowercase();\n<span class=\"macro\">assert_eq!</span>(path, Path::new(<span class=\"string\">\"foo.txt\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+mut+path+=+PathBuf::from(%22Foo.TXT%22);%0A++++%0A++++assert_ne!(path,+Path::new(%22foo.txt%22));%0A++++%0A++++path.as_mut_os_str().make_ascii_lowercase();%0A++++assert_eq!(path,+Path::new(%22foo.txt%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2120-2122\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_str\" class=\"fn\">to_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Yields a <a href=\"../primitive.str.html\" title=\"primitive str\"><code>&amp;str</code></a> slice if the <code>Path</code> is valid unicode.</p>\n<p>This conversion may entail doing a check for UTF-8 validity.\nNote that validation is performed because non-UTF-8 strings are\nperfectly valid for some OS.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"foo.txt\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.to_str(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo.txt\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22foo.txt%22);%0A++++assert_eq!(path.to_str(),+Some(%22foo.txt%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string_lossy\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2148-2150\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_string_lossy\" class=\"fn\">to_string_lossy</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Path</code> to a <a href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\"><code>Cow&lt;str&gt;</code></a>.</p>\n<p>Any non-Unicode sequences are replaced with\n<a href=\"../char/constant.REPLACEMENT_CHARACTER.html\" title=\"constant std::char::REPLACEMENT_CHARACTER\"><code>U+FFFD REPLACEMENT CHARACTER</code></a>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calling <code>to_string_lossy</code> on a <code>Path</code> with valid unicode:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"foo.txt\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.to_string_lossy(), <span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22foo.txt%22);%0A++++assert_eq!(path.to_string_lossy(),+%22foo.txt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Had <code>path</code> contained invalid unicode, the <code>to_string_lossy</code> call might\nhave returned <code>\"fo�.txt\"</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_path_buf\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2166-2168\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_path_buf\" class=\"fn\">to_path_buf</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>Path</code> to an owned <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a>.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span>path_buf = Path::new(<span class=\"string\">\"foo.txt\"</span>).to_path_buf();\n<span class=\"macro\">assert_eq!</span>(path_buf, PathBuf::from(<span class=\"string\">\"foo.txt\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+path_buf+=+Path::new(%22foo.txt%22).to_path_buf();%0A++++assert_eq!(path_buf,+PathBuf::from(%22foo.txt%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_absolute\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2191-2198\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_absolute\" class=\"fn\">is_absolute</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the <code>Path</code> is absolute, i.e., if it is independent of\nthe current directory.</p>\n<ul>\n<li>\n<p>On Unix, a path is absolute if it starts with the root, so\n<code>is_absolute</code> and <a href=\"struct.Path.html#method.has_root\" title=\"method std::path::Path::has_root\"><code>has_root</code></a> are equivalent.</p>\n</li>\n<li>\n<p>On Windows, a path is absolute if it has a prefix and starts with the\nroot: <code>c:\\windows</code> is absolute, while <code>c:temp</code> and <code>\\temp</code> are not.</p>\n</li>\n</ul>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"macro\">assert!</span>(!Path::new(<span class=\"string\">\"foo.txt\"</span>).is_absolute());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++assert!(!Path::new(%22foo.txt%22).is_absolute());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_relative\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2216-2218\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_relative\" class=\"fn\">is_relative</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the <code>Path</code> is relative, i.e., not absolute.</p>\n<p>See <a href=\"struct.Path.html#method.is_absolute\" title=\"method std::path::Path::is_absolute\"><code>is_absolute</code></a>’s documentation for more details.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"macro\">assert!</span>(Path::new(<span class=\"string\">\"foo.txt\"</span>).is_relative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++assert!(Path::new(%22foo.txt%22).is_relative());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.has_root\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2243-2245\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.has_root\" class=\"fn\">has_root</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the <code>Path</code> has a root.</p>\n<ul>\n<li>\n<p>On Unix, a path has a root if it begins with <code>/</code>.</p>\n</li>\n<li>\n<p>On Windows, a path has a root if it:</p>\n<ul>\n<li>has no prefix and begins with a separator, e.g., <code>\\windows</code></li>\n<li>has a prefix followed by a separator, e.g., <code>c:\\windows</code> but not <code>c:windows</code></li>\n<li>has any non-disk prefix, e.g., <code>\\\\server\\share</code></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"macro\">assert!</span>(Path::new(<span class=\"string\">\"/etc/passwd\"</span>).has_root());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++assert!(Path::new(%22/etc/passwd%22).has_root());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.parent\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2278-2287\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.parent\" class=\"fn\">parent</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <code>Path</code> without its final component, if there is one.</p>\n<p>This means it returns <code>Some(\"\")</code> for relative paths with one component.</p>\n<p>Returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if the path terminates in a root or prefix, or if it’s\nthe empty string.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/foo/bar\"</span>);\n<span class=\"kw\">let </span>parent = path.parent().unwrap();\n<span class=\"macro\">assert_eq!</span>(parent, Path::new(<span class=\"string\">\"/foo\"</span>));\n\n<span class=\"kw\">let </span>grand_parent = parent.parent().unwrap();\n<span class=\"macro\">assert_eq!</span>(grand_parent, Path::new(<span class=\"string\">\"/\"</span>));\n<span class=\"macro\">assert_eq!</span>(grand_parent.parent(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>relative_path = Path::new(<span class=\"string\">\"foo/bar\"</span>);\n<span class=\"kw\">let </span>parent = relative_path.parent();\n<span class=\"macro\">assert_eq!</span>(parent, <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"foo\"</span>)));\n<span class=\"kw\">let </span>grand_parent = parent.and_then(Path::parent);\n<span class=\"macro\">assert_eq!</span>(grand_parent, <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"\"</span>)));\n<span class=\"kw\">let </span>great_grand_parent = grand_parent.and_then(Path::parent);\n<span class=\"macro\">assert_eq!</span>(great_grand_parent, <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22/foo/bar%22);%0A++++let+parent+=+path.parent().unwrap();%0A++++assert_eq!(parent,+Path::new(%22/foo%22));%0A++++%0A++++let+grand_parent+=+parent.parent().unwrap();%0A++++assert_eq!(grand_parent,+Path::new(%22/%22));%0A++++assert_eq!(grand_parent.parent(),+None);%0A++++%0A++++let+relative_path+=+Path::new(%22foo/bar%22);%0A++++let+parent+=+relative_path.parent();%0A++++assert_eq!(parent,+Some(Path::new(%22foo%22)));%0A++++let+grand_parent+=+parent.and_then(Path::parent);%0A++++assert_eq!(grand_parent,+Some(Path::new(%22%22)));%0A++++let+great_grand_parent+=+grand_parent.and_then(Path::parent);%0A++++assert_eq!(great_grand_parent,+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ancestors\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2318-2320\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.ancestors\" class=\"fn\">ancestors</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Ancestors.html\" title=\"struct std::path::Ancestors\">Ancestors</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Ancestors<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Produces an iterator over <code>Path</code> and its ancestors.</p>\n<p>The iterator will yield the <code>Path</code> that is returned if the <a href=\"struct.Path.html#method.parent\" title=\"method std::path::Path::parent\"><code>parent</code></a> method is used zero\nor more times. If the <a href=\"struct.Path.html#method.parent\" title=\"method std::path::Path::parent\"><code>parent</code></a> method returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, the iterator will do likewise.\nThe iterator will always yield at least one value, namely <code>Some(&amp;self)</code>. Next it will yield\n<code>&amp;self.parent()</code>, <code>&amp;self.parent().and_then(Path::parent)</code> and so on.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancestors = Path::new(<span class=\"string\">\"/foo/bar\"</span>).ancestors();\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"/foo/bar\"</span>)));\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"/foo\"</span>)));\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"/\"</span>)));\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancestors = Path::new(<span class=\"string\">\"../foo/bar\"</span>).ancestors();\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"../foo/bar\"</span>)));\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"../foo\"</span>)));\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"..\"</span>)));\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"\"</span>)));\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+mut+ancestors+=+Path::new(%22/foo/bar%22).ancestors();%0A++++assert_eq!(ancestors.next(),+Some(Path::new(%22/foo/bar%22)));%0A++++assert_eq!(ancestors.next(),+Some(Path::new(%22/foo%22)));%0A++++assert_eq!(ancestors.next(),+Some(Path::new(%22/%22)));%0A++++assert_eq!(ancestors.next(),+None);%0A++++%0A++++let+mut+ancestors+=+Path::new(%22../foo/bar%22).ancestors();%0A++++assert_eq!(ancestors.next(),+Some(Path::new(%22../foo/bar%22)));%0A++++assert_eq!(ancestors.next(),+Some(Path::new(%22../foo%22)));%0A++++assert_eq!(ancestors.next(),+Some(Path::new(%22..%22)));%0A++++assert_eq!(ancestors.next(),+Some(Path::new(%22%22)));%0A++++assert_eq!(ancestors.next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.file_name\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2345-2350\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.file_name\" class=\"fn\">file_name</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the final component of the <code>Path</code>, if there is one.</p>\n<p>If the path is a normal file, this is the file name. If it’s the path of a directory, this\nis the directory name.</p>\n<p>Returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if the path terminates in <code>..</code>.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n<span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"string\">\"bin\"</span>)), Path::new(<span class=\"string\">\"/usr/bin/\"</span>).file_name());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"string\">\"foo.txt\"</span>)), Path::new(<span class=\"string\">\"tmp/foo.txt\"</span>).file_name());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"string\">\"foo.txt\"</span>)), Path::new(<span class=\"string\">\"foo.txt/.\"</span>).file_name());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"string\">\"foo.txt\"</span>)), Path::new(<span class=\"string\">\"foo.txt/.//\"</span>).file_name());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, Path::new(<span class=\"string\">\"foo.txt/..\"</span>).file_name());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, Path::new(<span class=\"string\">\"/\"</span>).file_name());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++use+std::ffi::OsStr;%0A++++%0A++++assert_eq!(Some(OsStr::new(%22bin%22)),+Path::new(%22/usr/bin/%22).file_name());%0A++++assert_eq!(Some(OsStr::new(%22foo.txt%22)),+Path::new(%22tmp/foo.txt%22).file_name());%0A++++assert_eq!(Some(OsStr::new(%22foo.txt%22)),+Path::new(%22foo.txt/.%22).file_name());%0A++++assert_eq!(Some(OsStr::new(%22foo.txt%22)),+Path::new(%22foo.txt/.//%22).file_name());%0A++++assert_eq!(None,+Path::new(%22foo.txt/..%22).file_name());%0A++++assert_eq!(None,+Path::new(%22/%22).file_name());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_prefix\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2381-2386\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.strip_prefix\" class=\"fn\">strip_prefix</a>&lt;P&gt;(&amp;self, base: P) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;&amp;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>, <a class=\"struct\" href=\"struct.StripPrefixError.html\" title=\"struct std::path::StripPrefixError\">StripPrefixError</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a path that, when joined onto <code>base</code>, yields <code>self</code>.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>If <code>base</code> is not a prefix of <code>self</code> (i.e., <a href=\"struct.Path.html#method.starts_with\" title=\"method std::path::Path::starts_with\"><code>starts_with</code></a>\nreturns <code>false</code>), returns <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a>.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/test/haha/foo.txt\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(path.strip_prefix(<span class=\"string\">\"/\"</span>), <span class=\"prelude-val\">Ok</span>(Path::new(<span class=\"string\">\"test/haha/foo.txt\"</span>)));\n<span class=\"macro\">assert_eq!</span>(path.strip_prefix(<span class=\"string\">\"/test\"</span>), <span class=\"prelude-val\">Ok</span>(Path::new(<span class=\"string\">\"haha/foo.txt\"</span>)));\n<span class=\"macro\">assert_eq!</span>(path.strip_prefix(<span class=\"string\">\"/test/\"</span>), <span class=\"prelude-val\">Ok</span>(Path::new(<span class=\"string\">\"haha/foo.txt\"</span>)));\n<span class=\"macro\">assert_eq!</span>(path.strip_prefix(<span class=\"string\">\"/test/haha/foo.txt\"</span>), <span class=\"prelude-val\">Ok</span>(Path::new(<span class=\"string\">\"\"</span>)));\n<span class=\"macro\">assert_eq!</span>(path.strip_prefix(<span class=\"string\">\"/test/haha/foo.txt/\"</span>), <span class=\"prelude-val\">Ok</span>(Path::new(<span class=\"string\">\"\"</span>)));\n\n<span class=\"macro\">assert!</span>(path.strip_prefix(<span class=\"string\">\"test\"</span>).is_err());\n<span class=\"macro\">assert!</span>(path.strip_prefix(<span class=\"string\">\"/haha\"</span>).is_err());\n\n<span class=\"kw\">let </span>prefix = PathBuf::from(<span class=\"string\">\"/test/\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.strip_prefix(prefix), <span class=\"prelude-val\">Ok</span>(Path::new(<span class=\"string\">\"haha/foo.txt\"</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+path+=+Path::new(%22/test/haha/foo.txt%22);%0A++++%0A++++assert_eq!(path.strip_prefix(%22/%22),+Ok(Path::new(%22test/haha/foo.txt%22)));%0A++++assert_eq!(path.strip_prefix(%22/test%22),+Ok(Path::new(%22haha/foo.txt%22)));%0A++++assert_eq!(path.strip_prefix(%22/test/%22),+Ok(Path::new(%22haha/foo.txt%22)));%0A++++assert_eq!(path.strip_prefix(%22/test/haha/foo.txt%22),+Ok(Path::new(%22%22)));%0A++++assert_eq!(path.strip_prefix(%22/test/haha/foo.txt/%22),+Ok(Path::new(%22%22)));%0A++++%0A++++assert!(path.strip_prefix(%22test%22).is_err());%0A++++assert!(path.strip_prefix(%22/haha%22).is_err());%0A++++%0A++++let+prefix+=+PathBuf::from(%22/test/%22);%0A++++assert_eq!(path.strip_prefix(prefix),+Ok(Path::new(%22haha/foo.txt%22)));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.starts_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2418-2420\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.starts_with\" class=\"fn\">starts_with</a>&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, base: P) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether <code>base</code> is a prefix of <code>self</code>.</p>\n<p>Only considers whole path components to match.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/etc/passwd\"</span>);\n\n<span class=\"macro\">assert!</span>(path.starts_with(<span class=\"string\">\"/etc\"</span>));\n<span class=\"macro\">assert!</span>(path.starts_with(<span class=\"string\">\"/etc/\"</span>));\n<span class=\"macro\">assert!</span>(path.starts_with(<span class=\"string\">\"/etc/passwd\"</span>));\n<span class=\"macro\">assert!</span>(path.starts_with(<span class=\"string\">\"/etc/passwd/\"</span>)); <span class=\"comment\">// extra slash is okay\n</span><span class=\"macro\">assert!</span>(path.starts_with(<span class=\"string\">\"/etc/passwd///\"</span>)); <span class=\"comment\">// multiple extra slashes are okay\n\n</span><span class=\"macro\">assert!</span>(!path.starts_with(<span class=\"string\">\"/e\"</span>));\n<span class=\"macro\">assert!</span>(!path.starts_with(<span class=\"string\">\"/etc/passwd.txt\"</span>));\n\n<span class=\"macro\">assert!</span>(!Path::new(<span class=\"string\">\"/etc/foo.rs\"</span>).starts_with(<span class=\"string\">\"/etc/foo\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22/etc/passwd%22);%0A++++%0A++++assert!(path.starts_with(%22/etc%22));%0A++++assert!(path.starts_with(%22/etc/%22));%0A++++assert!(path.starts_with(%22/etc/passwd%22));%0A++++assert!(path.starts_with(%22/etc/passwd/%22));+//+extra+slash+is+okay%0A++++assert!(path.starts_with(%22/etc/passwd///%22));+//+multiple+extra+slashes+are+okay%0A++++%0A++++assert!(!path.starts_with(%22/e%22));%0A++++assert!(!path.starts_with(%22/etc/passwd.txt%22));%0A++++%0A++++assert!(!Path::new(%22/etc/foo.rs%22).starts_with(%22/etc/foo%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ends_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2446-2448\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.ends_with\" class=\"fn\">ends_with</a>&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, child: P) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether <code>child</code> is a suffix of <code>self</code>.</p>\n<p>Only considers whole path components to match.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/etc/resolv.conf\"</span>);\n\n<span class=\"macro\">assert!</span>(path.ends_with(<span class=\"string\">\"resolv.conf\"</span>));\n<span class=\"macro\">assert!</span>(path.ends_with(<span class=\"string\">\"etc/resolv.conf\"</span>));\n<span class=\"macro\">assert!</span>(path.ends_with(<span class=\"string\">\"/etc/resolv.conf\"</span>));\n\n<span class=\"macro\">assert!</span>(!path.ends_with(<span class=\"string\">\"/resolv.conf\"</span>));\n<span class=\"macro\">assert!</span>(!path.ends_with(<span class=\"string\">\"conf\"</span>)); <span class=\"comment\">// use .extension() instead</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22/etc/resolv.conf%22);%0A++++%0A++++assert!(path.ends_with(%22resolv.conf%22));%0A++++assert!(path.ends_with(%22etc/resolv.conf%22));%0A++++assert!(path.ends_with(%22/etc/resolv.conf%22));%0A++++%0A++++assert!(!path.ends_with(%22/resolv.conf%22));%0A++++assert!(!path.ends_with(%22conf%22));+//+use+.extension()+instead%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.file_stem\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2482-2484\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.file_stem\" class=\"fn\">file_stem</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Extracts the stem (non-extension) portion of <a href=\"struct.Path.html#method.file_name\" title=\"method std::path::Path::file_name\"><code>self.file_name</code></a>.</p>\n<p>The stem is:</p>\n<ul>\n<li><a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, if there is no file name;</li>\n<li>The entire file name if there is no embedded <code>.</code>;</li>\n<li>The entire file name if the file name begins with <code>.</code> and has no other <code>.</code>s within;</li>\n<li>Otherwise, the portion of the file name before the final <code>.</code></li>\n</ul>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo\"</span>, Path::new(<span class=\"string\">\"foo.rs\"</span>).file_stem().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo.tar\"</span>, Path::new(<span class=\"string\">\"foo.tar.gz\"</span>).file_stem().unwrap());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++assert_eq!(%22foo%22,+Path::new(%22foo.rs%22).file_stem().unwrap());%0A++++assert_eq!(%22foo.tar%22,+Path::new(%22foo.tar.gz%22).file_stem().unwrap());%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"see-also\"><a class=\"doc-anchor\" href=\"#see-also\">§</a>See Also</h5>\n<p>This method is similar to <a href=\"struct.Path.html#method.file_prefix\" title=\"method std::path::Path::file_prefix\"><code>Path::file_prefix</code></a>, which extracts the portion of the file name\nbefore the <em>first</em> <code>.</code></p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.file_prefix\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#2516-2518\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.file_prefix\" class=\"fn\">file_prefix</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>path_file_prefix</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86319\">#86319</a>)</span></div></span></summary><div class=\"docblock\"><p>Extracts the prefix of <a href=\"struct.Path.html#method.file_name\" title=\"method std::path::Path::file_name\"><code>self.file_name</code></a>.</p>\n<p>The prefix is:</p>\n<ul>\n<li><a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, if there is no file name;</li>\n<li>The entire file name if there is no embedded <code>.</code>;</li>\n<li>The portion of the file name before the first non-beginning <code>.</code>;</li>\n<li>The entire file name if the file name begins with <code>.</code> and has no other <code>.</code>s within;</li>\n<li>The portion of the file name before the second <code>.</code> if the file name begins with <code>.</code></li>\n</ul>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo\"</span>, Path::new(<span class=\"string\">\"foo.rs\"</span>).file_prefix().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo\"</span>, Path::new(<span class=\"string\">\"foo.tar.gz\"</span>).file_prefix().unwrap());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(path_file_prefix)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++assert_eq!(%22foo%22,+Path::new(%22foo.rs%22).file_prefix().unwrap());%0A++++assert_eq!(%22foo%22,+Path::new(%22foo.tar.gz%22).file_prefix().unwrap());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"see-also-1\"><a class=\"doc-anchor\" href=\"#see-also-1\">§</a>See Also</h5>\n<p>This method is similar to <a href=\"struct.Path.html#method.file_stem\" title=\"method std::path::Path::file_stem\"><code>Path::file_stem</code></a>, which extracts the portion of the file name\nbefore the <em>last</em> <code>.</code></p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extension\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2541-2543\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.extension\" class=\"fn\">extension</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Extracts the extension (without the leading dot) of <a href=\"struct.Path.html#method.file_name\" title=\"method std::path::Path::file_name\"><code>self.file_name</code></a>, if possible.</p>\n<p>The extension is:</p>\n<ul>\n<li><a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, if there is no file name;</li>\n<li><a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, if there is no embedded <code>.</code>;</li>\n<li><a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, if the file name begins with <code>.</code> and has no other <code>.</code>s within;</li>\n<li>Otherwise, the portion of the file name after the final <code>.</code></li>\n</ul>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"rs\"</span>, Path::new(<span class=\"string\">\"foo.rs\"</span>).extension().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"gz\"</span>, Path::new(<span class=\"string\">\"foo.tar.gz\"</span>).extension().unwrap());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++assert_eq!(%22rs%22,+Path::new(%22foo.rs%22).extension().unwrap());%0A++++assert_eq!(%22gz%22,+Path::new(%22foo.tar.gz%22).extension().unwrap());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.join\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2561-2563\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.join\" class=\"fn\">join</a>&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, path: P) -&gt; <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h4></section></summary><div class=\"docblock\"><p>Creates an owned <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> with <code>path</code> adjoined to <code>self</code>.</p>\n<p>If <code>path</code> is absolute, it replaces the current path.</p>\n<p>See <a href=\"struct.PathBuf.html#method.push\" title=\"method std::path::PathBuf::push\"><code>PathBuf::push</code></a> for more details on what it means to adjoin a path.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"/etc\"</span>).join(<span class=\"string\">\"passwd\"</span>), PathBuf::from(<span class=\"string\">\"/etc/passwd\"</span>));\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"/etc\"</span>).join(<span class=\"string\">\"/bin/sh\"</span>), PathBuf::from(<span class=\"string\">\"/bin/sh\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++assert_eq!(Path::new(%22/etc%22).join(%22passwd%22),+PathBuf::from(%22/etc/passwd%22));%0A++++assert_eq!(Path::new(%22/etc%22).join(%22/bin/sh%22),+PathBuf::from(%22/bin/sh%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_file_name\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2589-2591\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.with_file_name\" class=\"fn\">with_file_name</a>&lt;S: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt;(&amp;self, file_name: S) -&gt; <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h4></section></summary><div class=\"docblock\"><p>Creates an owned <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> like <code>self</code> but with the given file name.</p>\n<p>See <a href=\"struct.PathBuf.html#method.set_file_name\" title=\"method std::path::PathBuf::set_file_name\"><code>PathBuf::set_file_name</code></a> for more details.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/tmp/foo.png\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.with_file_name(<span class=\"string\">\"bar\"</span>), PathBuf::from(<span class=\"string\">\"/tmp/bar\"</span>));\n<span class=\"macro\">assert_eq!</span>(path.with_file_name(<span class=\"string\">\"bar.txt\"</span>), PathBuf::from(<span class=\"string\">\"/tmp/bar.txt\"</span>));\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/tmp\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.with_file_name(<span class=\"string\">\"var\"</span>), PathBuf::from(<span class=\"string\">\"/var\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+path+=+Path::new(%22/tmp/foo.png%22);%0A++++assert_eq!(path.with_file_name(%22bar%22),+PathBuf::from(%22/tmp/bar%22));%0A++++assert_eq!(path.with_file_name(%22bar.txt%22),+PathBuf::from(%22/tmp/bar.txt%22));%0A++++%0A++++let+path+=+Path::new(%22/tmp%22);%0A++++assert_eq!(path.with_file_name(%22var%22),+PathBuf::from(%22/var%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_extension\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2617-2619\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.with_extension\" class=\"fn\">with_extension</a>&lt;S: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt;(&amp;self, extension: S) -&gt; <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h4></section></summary><div class=\"docblock\"><p>Creates an owned <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> like <code>self</code> but with the given extension.</p>\n<p>See <a href=\"struct.PathBuf.html#method.set_extension\" title=\"method std::path::PathBuf::set_extension\"><code>PathBuf::set_extension</code></a> for more details.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"foo.rs\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.with_extension(<span class=\"string\">\"txt\"</span>), PathBuf::from(<span class=\"string\">\"foo.txt\"</span>));\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"foo.tar.gz\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.with_extension(<span class=\"string\">\"\"</span>), PathBuf::from(<span class=\"string\">\"foo.tar\"</span>));\n<span class=\"macro\">assert_eq!</span>(path.with_extension(<span class=\"string\">\"xz\"</span>), PathBuf::from(<span class=\"string\">\"foo.tar.xz\"</span>));\n<span class=\"macro\">assert_eq!</span>(path.with_extension(<span class=\"string\">\"\"</span>).with_extension(<span class=\"string\">\"txt\"</span>), PathBuf::from(<span class=\"string\">\"foo.txt\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+path+=+Path::new(%22foo.rs%22);%0A++++assert_eq!(path.with_extension(%22txt%22),+PathBuf::from(%22foo.txt%22));%0A++++%0A++++let+path+=+Path::new(%22foo.tar.gz%22);%0A++++assert_eq!(path.with_extension(%22%22),+PathBuf::from(%22foo.tar%22));%0A++++assert_eq!(path.with_extension(%22xz%22),+PathBuf::from(%22foo.tar.xz%22));%0A++++assert_eq!(path.with_extension(%22%22).with_extension(%22txt%22),+PathBuf::from(%22foo.txt%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.components\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2679-2689\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.components\" class=\"fn\">components</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Components.html\" title=\"struct std::path::Components\">Components</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Components<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Produces an iterator over the <a href=\"enum.Component.html\" title=\"enum std::path::Component\"><code>Component</code></a>s of the path.</p>\n<p>When parsing the path, there is a small amount of normalization:</p>\n<ul>\n<li>\n<p>Repeated separators are ignored, so <code>a/b</code> and <code>a//b</code> both have\n<code>a</code> and <code>b</code> as components.</p>\n</li>\n<li>\n<p>Occurrences of <code>.</code> are normalized away, except if they are at the\nbeginning of the path. For example, <code>a/./b</code>, <code>a/b/</code>, <code>a/b/.</code> and\n<code>a/b</code> all have <code>a</code> and <code>b</code> as components, but <code>./a/b</code> starts with\nan additional <a href=\"enum.Component.html#variant.CurDir\" title=\"variant std::path::Component::CurDir\"><code>CurDir</code></a> component.</p>\n</li>\n<li>\n<p>A trailing slash is normalized away, <code>/a/b</code> and <code>/a/b/</code> are equivalent.</p>\n</li>\n</ul>\n<p>Note that no other normalization takes place; in particular, <code>a/c</code>\nand <code>a/b/../c</code> are distinct, to account for the possibility that <code>b</code>\nis a symbolic link (so its parent isn’t <code>a</code>).</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, Component};\n<span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>components = Path::new(<span class=\"string\">\"/tmp/foo.txt\"</span>).components();\n\n<span class=\"macro\">assert_eq!</span>(components.next(), <span class=\"prelude-val\">Some</span>(Component::RootDir));\n<span class=\"macro\">assert_eq!</span>(components.next(), <span class=\"prelude-val\">Some</span>(Component::Normal(OsStr::new(<span class=\"string\">\"tmp\"</span>))));\n<span class=\"macro\">assert_eq!</span>(components.next(), <span class=\"prelude-val\">Some</span>(Component::Normal(OsStr::new(<span class=\"string\">\"foo.txt\"</span>))));\n<span class=\"macro\">assert_eq!</span>(components.next(), <span class=\"prelude-val\">None</span>)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+Component%7D;%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+mut+components+=+Path::new(%22/tmp/foo.txt%22).components();%0A++++%0A++++assert_eq!(components.next(),+Some(Component::RootDir));%0A++++assert_eq!(components.next(),+Some(Component::Normal(OsStr::new(%22tmp%22))));%0A++++assert_eq!(components.next(),+Some(Component::Normal(OsStr::new(%22foo.txt%22))));%0A++++assert_eq!(components.next(),+None)%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2713-2715\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::path::Iter\">Iter</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Produces an iterator over the path’s components viewed as <a href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\"><code>OsStr</code></a>\nslices.</p>\n<p>For more information about the particulars of how the path is separated\ninto components, see <a href=\"struct.Path.html#method.components\" title=\"method std::path::Path::components\"><code>components</code></a>.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{<span class=\"self\">self</span>, Path};\n<span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>it = Path::new(<span class=\"string\">\"/tmp/foo.txt\"</span>).iter();\n<span class=\"macro\">assert_eq!</span>(it.next(), <span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"kw-2\">&amp;</span>path::MAIN_SEPARATOR.to_string())));\n<span class=\"macro\">assert_eq!</span>(it.next(), <span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"string\">\"tmp\"</span>)));\n<span class=\"macro\">assert_eq!</span>(it.next(), <span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"string\">\"foo.txt\"</span>)));\n<span class=\"macro\">assert_eq!</span>(it.next(), <span class=\"prelude-val\">None</span>)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7Bself,+Path%7D;%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+mut+it+=+Path::new(%22/tmp/foo.txt%22).iter();%0A++++assert_eq!(it.next(),+Some(OsStr::new(%26path::MAIN_SEPARATOR.to_string())));%0A++++assert_eq!(it.next(),+Some(OsStr::new(%22tmp%22)));%0A++++assert_eq!(it.next(),+Some(OsStr::new(%22foo.txt%22)));%0A++++assert_eq!(it.next(),+None)%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.display\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2738-2740\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.display\" class=\"fn\">display</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Display.html\" title=\"struct std::path::Display\">Display</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an object that implements <a href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\"><code>Display</code></a> for safely printing paths\nthat may contain non-Unicode data. This may perform lossy conversion,\ndepending on the platform.  If you would like an implementation which\nescapes the path please use <a href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\"><code>Debug</code></a> instead.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/tmp/foo.rs\"</span>);\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, path.display());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22/tmp/foo.rs%22);%0A++++%0A++++println!(%22%7B%7D%22,+path.display());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.metadata\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2760-2762\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.metadata\" class=\"fn\">metadata</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../fs/struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Queries the file system to get information about a file, directory, etc.</p>\n<p>This function will traverse symbolic links to query information about the\ndestination file.</p>\n<p>This is an alias to <a href=\"../fs/fn.metadata.html\" title=\"fn std::fs::metadata\"><code>fs::metadata</code></a>.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/Minas/tirith\"</span>);\n<span class=\"kw\">let </span>metadata = path.metadata().expect(<span class=\"string\">\"metadata call failed\"</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, metadata.file_type());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22/Minas/tirith%22);%0A++++let+metadata+=+path.metadata().expect(%22metadata+call+failed%22);%0A++++println!(%22%7B:?%7D%22,+metadata.file_type());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.symlink_metadata\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2779-2781\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.symlink_metadata\" class=\"fn\">symlink_metadata</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../fs/struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Queries the metadata about a file without following symlinks.</p>\n<p>This is an alias to <a href=\"../fs/fn.symlink_metadata.html\" title=\"fn std::fs::symlink_metadata\"><code>fs::symlink_metadata</code></a>.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/Minas/tirith\"</span>);\n<span class=\"kw\">let </span>metadata = path.symlink_metadata().expect(<span class=\"string\">\"symlink_metadata call failed\"</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, metadata.file_type());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22/Minas/tirith%22);%0A++++let+metadata+=+path.symlink_metadata().expect(%22symlink_metadata+call+failed%22);%0A++++println!(%22%7B:?%7D%22,+metadata.file_type());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.canonicalize\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2798-2800\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.canonicalize\" class=\"fn\">canonicalize</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the canonical, absolute form of the path with all intermediate\ncomponents normalized and symbolic links resolved.</p>\n<p>This is an alias to <a href=\"../fs/fn.canonicalize.html\" title=\"fn std::fs::canonicalize\"><code>fs::canonicalize</code></a>.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/foo/test/../test/bar.rs\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.canonicalize().unwrap(), PathBuf::from(<span class=\"string\">\"/foo/test/bar.rs\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::%7BPath,+PathBuf%7D;%0A++++%0A++++let+path+=+Path::new(%22/foo/test/../test/bar.rs%22);%0A++++assert_eq!(path.canonicalize().unwrap(),+PathBuf::from(%22/foo/test/bar.rs%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_link\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2816-2818\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.read_link\" class=\"fn\">read_link</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Reads a symbolic link, returning the file that the link points to.</p>\n<p>This is an alias to <a href=\"../fs/fn.read_link.html\" title=\"fn std::fs::read_link\"><code>fs::read_link</code></a>.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/laputa/sky_castle.rs\"</span>);\n<span class=\"kw\">let </span>path_link = path.read_link().expect(<span class=\"string\">\"read_link call failed\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22/laputa/sky_castle.rs%22);%0A++++let+path_link+=+path.read_link().expect(%22read_link+call+failed%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_dir\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2841-2843\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.read_dir\" class=\"fn\">read_dir</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../fs/struct.ReadDir.html\" title=\"struct std::fs::ReadDir\">ReadDir</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the entries within a directory.</p>\n<p>The iterator will yield instances of <code><a href=\"../io/type.Result.html\" title=\"type std::io::Result\">io::Result</a>&lt;<a href=\"../fs/struct.DirEntry.html\" title=\"struct std::fs::DirEntry\">fs::DirEntry</a>&gt;</code>. New\nerrors may be encountered after an iterator is initially constructed.</p>\n<p>This is an alias to <a href=\"../fs/fn.read_dir.html\" title=\"fn std::fs::read_dir\"><code>fs::read_dir</code></a>.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/laputa\"</span>);\n<span class=\"kw\">for </span>entry <span class=\"kw\">in </span>path.read_dir().expect(<span class=\"string\">\"read_dir call failed\"</span>) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(entry) = entry {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, entry.path());\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++%0A++++let+path+=+Path::new(%22/laputa%22);%0A++++for+entry+in+path.read_dir().expect(%22read_dir+call+failed%22)+%7B%0A++++++++if+let+Ok(entry)+=+entry+%7B%0A++++++++++++println!(%22%7B:?%7D%22,+entry.path());%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.exists\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2872-2874\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.exists\" class=\"fn\">exists</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the path points at an existing entity.</p>\n<p>Warning: this method may be error-prone, consider using <a href=\"struct.Path.html#method.try_exists\" title=\"method std::path::Path::try_exists\"><code>try_exists()</code></a> instead!\nIt also has a risk of introducing time-of-check to time-of-use (TOCTOU) bugs.</p>\n<p>This function will traverse symbolic links to query information about the\ndestination file.</p>\n<p>If you cannot access the metadata of the file, e.g. because of a\npermission error or broken symbolic links, this will return <code>false</code>.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n<span class=\"macro\">assert!</span>(!Path::new(<span class=\"string\">\"does_not_exist.txt\"</span>).exists());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++assert!(!Path::new(%22does_not_exist.txt%22).exists());%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"see-also-2\"><a class=\"doc-anchor\" href=\"#see-also-2\">§</a>See Also</h5>\n<p>This is a convenience function that coerces errors to false. If you want to\ncheck errors, call <a href=\"struct.Path.html#method.try_exists\" title=\"method std::path::Path::try_exists\"><code>Path::try_exists</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_exists\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2902-2904\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_exists\" class=\"fn\">try_exists</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>Ok(true)</code> if the path points at an existing entity.</p>\n<p>This function will traverse symbolic links to query information about the\ndestination file. In case of broken symbolic links this will return <code>Ok(false)</code>.</p>\n<p><a href=\"struct.Path.html#method.exists\" title=\"method std::path::Path::exists\"><code>Path::exists()</code></a> only checks whether or not a path was both found and readable. By\ncontrast, <code>try_exists</code> will return <code>Ok(true)</code> or <code>Ok(false)</code>, respectively, if the path\nwas <em>verified</em> to exist or not exist. If its existence can neither be confirmed nor\ndenied, it will propagate an <code>Err(_)</code> instead. This can be the case if e.g. listing\npermission is denied on one of the parent directories.</p>\n<p>Note that while this avoids some pitfalls of the <code>exists()</code> method, it still can not\nprevent time-of-check to time-of-use (TOCTOU) bugs. You should only use it in scenarios\nwhere those bugs are not an issue.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n<span class=\"macro\">assert!</span>(!Path::new(<span class=\"string\">\"does_not_exist.txt\"</span>).try_exists().expect(<span class=\"string\">\"Can't check existence of file does_not_exist.txt\"</span>));\n<span class=\"macro\">assert!</span>(Path::new(<span class=\"string\">\"/root/secret_file.txt\"</span>).try_exists().is_err());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++assert!(!Path::new(%22does_not_exist.txt%22).try_exists().expect(%22Can't+check+existence+of+file+does_not_exist.txt%22));%0A++++assert!(Path::new(%22/root/secret_file.txt%22).try_exists().is_err());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_file\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2935-2937\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_file\" class=\"fn\">is_file</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the path exists on disk and is pointing at a regular file.</p>\n<p>This function will traverse symbolic links to query information about the\ndestination file.</p>\n<p>If you cannot access the metadata of the file, e.g. because of a\npermission error or broken symbolic links, this will return <code>false</code>.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"./is_a_directory/\"</span>).is_file(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"a_file.txt\"</span>).is_file(), <span class=\"bool-val\">true</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++assert_eq!(Path::new(%22./is_a_directory/%22).is_file(),+false);%0A++++assert_eq!(Path::new(%22a_file.txt%22).is_file(),+true);%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"see-also-3\"><a class=\"doc-anchor\" href=\"#see-also-3\">§</a>See Also</h5>\n<p>This is a convenience function that coerces errors to false. If you want to\ncheck errors, call <a href=\"../fs/fn.metadata.html\" title=\"fn std::fs::metadata\"><code>fs::metadata</code></a> and handle its <a href=\"../result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result</code></a>. Then call\n<a href=\"../fs/struct.Metadata.html#method.is_file\" title=\"method std::fs::Metadata::is_file\"><code>fs::Metadata::is_file</code></a> if it was <a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Ok</code></a>.</p>\n<p>When the goal is simply to read from (or write to) the source, the most\nreliable way to test the source can be read (or written to) is to open\nit. Only using <code>is_file</code> can break workflows like <code>diff &lt;( prog_a )</code> on\na Unix-like system for example. See <a href=\"../fs/struct.File.html#method.open\" title=\"associated function std::fs::File::open\"><code>fs::File::open</code></a> or\n<a href=\"../fs/struct.OpenOptions.html#method.open\" title=\"method std::fs::OpenOptions::open\"><code>fs::OpenOptions::open</code></a> for more information.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_dir\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2962-2964\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_dir\" class=\"fn\">is_dir</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the path exists on disk and is pointing at a directory.</p>\n<p>This function will traverse symbolic links to query information about the\ndestination file.</p>\n<p>If you cannot access the metadata of the file, e.g. because of a\npermission error or broken symbolic links, this will return <code>false</code>.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"./is_a_directory/\"</span>).is_dir(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"a_file.txt\"</span>).is_dir(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++assert_eq!(Path::new(%22./is_a_directory/%22).is_dir(),+true);%0A++++assert_eq!(Path::new(%22a_file.txt%22).is_dir(),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"see-also-4\"><a class=\"doc-anchor\" href=\"#see-also-4\">§</a>See Also</h5>\n<p>This is a convenience function that coerces errors to false. If you want to\ncheck errors, call <a href=\"../fs/fn.metadata.html\" title=\"fn std::fs::metadata\"><code>fs::metadata</code></a> and handle its <a href=\"../result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result</code></a>. Then call\n<a href=\"../fs/struct.Metadata.html#method.is_dir\" title=\"method std::fs::Metadata::is_dir\"><code>fs::Metadata::is_dir</code></a> if it was <a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Ok</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_symlink\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0\">1.58.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#2994-2996\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_symlink\" class=\"fn\">is_symlink</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the path exists on disk and is pointing at a symbolic link.</p>\n<p>This function will not traverse symbolic links.\nIn case of a broken symbolic link this will also return true.</p>\n<p>If you cannot access the directory containing the file, e.g., because of a\npermission error, this will return false.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n<span class=\"kw\">use </span>std::os::unix::fs::symlink;\n\n<span class=\"kw\">let </span>link_path = Path::new(<span class=\"string\">\"link\"</span>);\nsymlink(<span class=\"string\">\"/origin_does_not_exist/\"</span>, link_path).unwrap();\n<span class=\"macro\">assert_eq!</span>(link_path.is_symlink(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(link_path.exists(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++use+std::os::unix::fs::symlink;%0A++++%0A++++let+link_path+=+Path::new(%22link%22);%0A++++symlink(%22/origin_does_not_exist/%22,+link_path).unwrap();%0A++++assert_eq!(link_path.is_symlink(),+true);%0A++++assert_eq!(link_path.exists(),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"see-also-5\"><a class=\"doc-anchor\" href=\"#see-also-5\">§</a>See Also</h5>\n<p>This is a convenience function that coerces errors to false. If you want to\ncheck errors, call <a href=\"../fs/fn.symlink_metadata.html\" title=\"fn std::fs::symlink_metadata\"><code>fs::symlink_metadata</code></a> and handle its <a href=\"../result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result</code></a>. Then call\n<a href=\"../fs/struct.Metadata.html#method.is_symlink\" title=\"method std::fs::Metadata::is_symlink\"><code>fs::Metadata::is_symlink</code></a> if it was <a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Ok</code></a>.</p>\n</div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3COsStr%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1957-1962\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1959-1961\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3CPath%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3190-3195\">source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3192-3194\">source</a><a href=\"#method.as_ref-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Borrow%3CPath%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1805-1810\">source</a></span><a href=\"#impl-Borrow%3CPath%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1807-1809\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1632-1646\">source</a></span><a href=\"#impl-Clone-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1643-1645\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\"><p>Clones the contents of <code>source</code> into <code>self</code>.</p>\n<p>This method is preferred over simply assigning <code>source.clone()</code> to <code>self</code>,\nas it avoids reallocation if possible.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1634-1636\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1781-1785\">source</a></span><a href=\"#impl-Debug-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1782-1784\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, formatter: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1813-1818\">source</a></span><a href=\"#impl-Default-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1815-1817\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Deref-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1788-1794\">source</a></span><a href=\"#impl-Deref-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a></h4></section></summary><div class=\"docblock\">The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1791-1793\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a></h4></section></summary><div class=\"docblock\">Dereferences the value.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DerefMut-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.68.0\">1.68.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1797-1802\">source</a></span><a href=\"#impl-DerefMut-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1799-1801\">source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a></h4></section></summary><div class=\"docblock\">Mutably dereferences the value.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3CP%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1769-1778\">source</a></span><a href=\"#impl-Extend%3CP%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt; <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;P&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1770-1772\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = P&gt;&gt;(&amp;mut self, iter: I)</h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"../iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1775-1777\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, p: P)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"../iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26PathBuf%3E-for-Cow%3C'a,+Path%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1845-1854\">source</a></span><a href=\"#impl-From%3C%26PathBuf%3E-for-Cow%3C'a,+Path%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;'a <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1851-1853\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(p: &amp;'a <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a clone-on-write pointer from a reference to\n<a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a>.</p>\n<p>This conversion does not clone or allocate.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26T%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1706-1714\">source</a></span><a href=\"#impl-From%3C%26T%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1711-1713\">source</a><a href=\"#method.from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h4></section></summary><div class=\"docblock\"><p>Converts a borrowed <a href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\"><code>OsStr</code></a> to a <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a>.</p>\n<p>Allocates a <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> and copies the data into it.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CBox%3CPath%3E%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1675-1683\">source</a></span><a href=\"#impl-From%3CBox%3CPath%3E%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1680-1682\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(boxed: <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code><a href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</code> into a <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a>.</p>\n<p>This conversion does not allocate or copy memory.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCow%3C'a,+Path%3E%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1857-1865\">source</a></span><a href=\"#impl-From%3CCow%3C'a,+Path%3E%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1862-1864\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(p: <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts a clone-on-write pointer to an owned path.</p>\n<p>Converting from a <code>Cow::Owned</code> does not clone or allocate.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3COsString%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1717-1725\">source</a></span><a href=\"#impl-From%3COsString%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1722-1724\">source</a><a href=\"#method.from-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>) -&gt; <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h4></section></summary><div class=\"docblock\"><p>Converts an <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a> into a <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a></p>\n<p>This conversion does not allocate or copy memory.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CPathBuf%3E-for-Arc%3CPath%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1868-1876\">source</a></span><a href=\"#impl-From%3CPathBuf%3E-for-Arc%3CPath%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1872-1875\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> into an <code><a href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</code> by moving the <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> data\ninto a new <a href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\"><code>Arc</code></a> buffer.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CPathBuf%3E-for-Box%3CPath%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1686-1695\">source</a></span><a href=\"#impl-From%3CPathBuf%3E-for-Box%3CPath%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1692-1694\">source</a><a href=\"#method.from-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(p: <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> into a <code><a href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</code>.</p>\n<p>This conversion currently should not allocate memory,\nbut this behavior is not guaranteed on all platforms or in all future versions.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CPathBuf%3E-for-Cow%3C'a,+Path%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1833-1842\">source</a></span><a href=\"#impl-From%3CPathBuf%3E-for-Cow%3C'a,+Path%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1839-1841\">source</a><a href=\"#method.from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a clone-on-write pointer from an owned\ninstance of <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a>.</p>\n<p>This conversion does not clone or allocate.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CPathBuf%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1728-1736\">source</a></span><a href=\"#impl-From%3CPathBuf%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1733-1735\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(path_buf: <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> into an <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a></p>\n<p>This conversion does not allocate or copy memory.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CPathBuf%3E-for-Rc%3CPath%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1889-1897\">source</a></span><a href=\"#impl-From%3CPathBuf%3E-for-Rc%3CPath%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1893-1896\">source</a><a href=\"#method.from-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> into an <code><a href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</code> by moving the <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> data into\na new <a href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\"><code>Rc</code></a> buffer.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CString%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1739-1747\">source</a></span><a href=\"#impl-From%3CString%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1744-1746\">source</a><a href=\"#method.from-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"../string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a> into a <a href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a></p>\n<p>This conversion does not allocate or copy memory.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3CP%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1760-1766\">source</a></span><a href=\"#impl-FromIterator%3CP%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt; <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;P&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1761-1765\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = P&gt;&gt;(iter: I) -&gt; <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0\">1.32.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1750-1757\">source</a></span><a href=\"#impl-FromStr-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1754-1756\">source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"../str/trait.FromStr.html#associatedtype.Err\" title=\"type std::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class=\"docblock\">Parses a string <code>s</code> to return a value of this type. <a href=\"../str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1931-1935\">source</a></span><a href=\"#impl-Hash-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1932-1934\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>&gt;(&amp;self, h: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3198-3205\">source</a></span><a href=\"#impl-IntoIterator-for-%26PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &amp;'a <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::path::Iter\">Iter</a>&lt;'a&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3202-3204\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::path::Iter\">Iter</a>&lt;'a&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'a>\">ⓘ</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1949-1954\">source</a></span><a href=\"#impl-Ord-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1951-1953\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26OsStr%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3296\">source</a></span><a href=\"#impl-PartialEq%3C%26OsStr%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3296\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26Path%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3254\">source</a></span><a href=\"#impl-PartialEq%3C%26Path%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3254\">source</a><a href=\"#method.eq-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-12\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CCow%3C'a,+OsStr%3E%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3297\">source</a></span><a href=\"#impl-PartialEq%3CCow%3C'a,+OsStr%3E%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3297\">source</a><a href=\"#method.eq-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-9\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CCow%3C'a,+Path%3E%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3257\">source</a></span><a href=\"#impl-PartialEq%3CCow%3C'a,+Path%3E%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3257\">source</a><a href=\"#method.eq-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-11\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3COsStr%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3295\">source</a></span><a href=\"#impl-PartialEq%3COsStr%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3295\">source</a><a href=\"#method.eq-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-13\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3COsString%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3298\">source</a></span><a href=\"#impl-PartialEq%3COsString%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3298\">source</a><a href=\"#method.eq-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-6\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CPath%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3253\">source</a></span><a href=\"#impl-PartialEq%3CPath%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3253\">source</a><a href=\"#method.eq-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CPathBuf%3E-for-%26OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3296\">source</a></span><a href=\"#impl-PartialEq%3CPathBuf%3E-for-%26OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for &amp;'a <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3296\">source</a><a href=\"#method.eq-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CPathBuf%3E-for-%26Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3254\">source</a></span><a href=\"#impl-PartialEq%3CPathBuf%3E-for-%26Path\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for &amp;'a <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3254\">source</a><a href=\"#method.eq-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CPathBuf%3E-for-Cow%3C'a,+OsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3297\">source</a></span><a href=\"#impl-PartialEq%3CPathBuf%3E-for-Cow%3C'a,+OsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3297\">source</a><a href=\"#method.eq-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CPathBuf%3E-for-Cow%3C'a,+Path%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3257\">source</a></span><a href=\"#impl-PartialEq%3CPathBuf%3E-for-Cow%3C'a,+Path%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3257\">source</a><a href=\"#method.eq-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-8\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CPathBuf%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3295\">source</a></span><a href=\"#impl-PartialEq%3CPathBuf%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3295\">source</a><a href=\"#method.eq-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-7\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CPathBuf%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3298\">source</a></span><a href=\"#impl-PartialEq%3CPathBuf%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3298\">source</a><a href=\"#method.eq-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CPathBuf%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3253\">source</a></span><a href=\"#impl-PartialEq%3CPathBuf%3E-for-Path\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3253\">source</a><a href=\"#method.eq-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-14\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1923-1928\">source</a></span><a href=\"#impl-PartialEq-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1925-1927\">source</a><a href=\"#method.eq-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-10\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3C%26OsStr%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3296\">source</a></span><a href=\"#impl-PartialOrd%3C%26OsStr%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&amp;'a <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3296\">source</a><a href=\"#method.partial_cmp-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-9\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-9\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-9\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-9\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3C%26Path%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3254\">source</a></span><a href=\"#impl-PartialOrd%3C%26Path%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&amp;'a <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3254\">source</a><a href=\"#method.partial_cmp-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-7\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-7\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-7\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-7\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CCow%3C'a,+OsStr%3E%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3297\">source</a></span><a href=\"#impl-PartialOrd%3CCow%3C'a,+OsStr%3E%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3297\">source</a><a href=\"#method.partial_cmp-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CCow%3C'a,+Path%3E%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3257\">source</a></span><a href=\"#impl-PartialOrd%3CCow%3C'a,+Path%3E%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3257\">source</a><a href=\"#method.partial_cmp-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-13\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-13\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-13\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-13\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3COsStr%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3295\">source</a></span><a href=\"#impl-PartialOrd%3COsStr%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3295\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3COsString%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3298\">source</a></span><a href=\"#impl-PartialOrd%3COsString%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3298\">source</a><a href=\"#method.partial_cmp-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CPath%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3253\">source</a></span><a href=\"#impl-PartialOrd%3CPath%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3253\">source</a><a href=\"#method.partial_cmp-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-6\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-6\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-6\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-6\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CPathBuf%3E-for-%26OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3296\">source</a></span><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-%26OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for &amp;'a <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3296\">source</a><a href=\"#method.partial_cmp-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-8\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-8\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-8\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-8\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CPathBuf%3E-for-%26Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3254\">source</a></span><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-%26Path\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for &amp;'a <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3254\">source</a><a href=\"#method.partial_cmp-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CPathBuf%3E-for-Cow%3C'a,+OsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3297\">source</a></span><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-Cow%3C'a,+OsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3297\">source</a><a href=\"#method.partial_cmp-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-10\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-10\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-10\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-10\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CPathBuf%3E-for-Cow%3C'a,+Path%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3257\">source</a></span><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-Cow%3C'a,+Path%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3257\">source</a><a href=\"#method.partial_cmp-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-12\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-12\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-12\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-12\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CPathBuf%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3295\">source</a></span><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3295\">source</a><a href=\"#method.partial_cmp-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-11\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-11\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-11\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-11\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CPathBuf%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3298\">source</a></span><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3298\">source</a><a href=\"#method.partial_cmp-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CPathBuf%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3253\">source</a></span><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-Path\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"struct\" href=\"struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#3253\">source</a><a href=\"#method.partial_cmp-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-14\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-14\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-14\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-14\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1941-1946\">source</a></span><a href=\"#impl-PartialOrd-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1943-1945\">source</a><a href=\"#method.partial_cmp-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><section id=\"impl-Eq-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1938\">source</a></span><a href=\"#impl-Eq-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-PathBuf\" class=\"impl\"><a href=\"#impl-Freeze-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section><section id=\"impl-RefUnwindSafe-for-PathBuf\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section><section id=\"impl-Send-for-PathBuf\" class=\"impl\"><a href=\"#impl-Send-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section><section id=\"impl-Sync-for-PathBuf\" class=\"impl\"><a href=\"#impl-Sync-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section><section id=\"impl-Unpin-for-PathBuf\" class=\"impl\"><a href=\"#impl-Unpin-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section><section id=\"impl-UnwindSafe-for-PathBuf\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"Ancestors<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Ancestors.html\\\" title=\\\"struct std::path::Ancestors\\\">Ancestors</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Ancestors.html\\\" title=\\\"struct std::path::Ancestors\\\">Ancestors</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"struct\\\" href=\\\"struct.Path.html\\\" title=\\\"struct std::path::Path\\\">Path</a>;</div>\",\"Components<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Components.html\\\" title=\\\"struct std::path::Components\\\">Components</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Components.html\\\" title=\\\"struct std::path::Components\\\">Components</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"enum\\\" href=\\\"enum.Component.html\\\" title=\\\"enum std::path::Component\\\">Component</a>&lt;'a&gt;;</div>\",\"Iter<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Iter.html\\\" title=\\\"struct std::path::Iter\\\">Iter</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Iter.html\\\" title=\\\"struct std::path::Iter\\\">Iter</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"struct\\\" href=\\\"../ffi/struct.OsStr.html\\\" title=\\\"struct std::ffi::OsStr\\\">OsStr</a>;</div>\",\"Iter<'a>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Iter.html\\\" title=\\\"struct std::path::Iter\\\">Iter</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Iter.html\\\" title=\\\"struct std::path::Iter\\\">Iter</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"struct\\\" href=\\\"../ffi/struct.OsStr.html\\\" title=\\\"struct std::ffi::OsStr\\\">OsStr</a>;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:22.735Z"
}