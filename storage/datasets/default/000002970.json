{
	"title": "SimdFloat in std::simd::num - Rust",
	"url": "https://doc.rust-lang.org/stable/std/simd/num/trait.SimdFloat.html",
	"markdown": "# SimdFloat in std::simd::num - Rust\n\n```\npub trait SimdFloat: Copy + Sealed {\n    type Mask;\n    type Scalar;\n    type Bits;\n    type Cast<T: SimdElement>;\n\nShow 24 methods    // Required methods\n    fn cast<T>(self) -> Self::Cast<T>\n       where T: SimdCast;\n    unsafe fn to_int_unchecked<I>(self) -> Self::Cast<I>\n       where I: SimdCast,\n             Self::Scalar: FloatToInt<I>;\n    fn to_bits(self) -> Self::Bits;\n    fn from_bits(bits: Self::Bits) -> Self;\n    fn abs(self) -> Self;\n    fn recip(self) -> Self;\n    fn to_degrees(self) -> Self;\n    fn to_radians(self) -> Self;\n    fn is_sign_positive(self) -> Self::Mask;\n    fn is_sign_negative(self) -> Self::Mask;\n    fn is_nan(self) -> Self::Mask;\n    fn is_infinite(self) -> Self::Mask;\n    fn is_finite(self) -> Self::Mask;\n    fn is_subnormal(self) -> Self::Mask;\n    fn is_normal(self) -> Self::Mask;\n    fn signum(self) -> Self;\n    fn copysign(self, sign: Self) -> Self;\n    fn simd_min(self, other: Self) -> Self;\n    fn simd_max(self, other: Self) -> Self;\n    fn simd_clamp(self, min: Self, max: Self) -> Self;\n    fn reduce_sum(self) -> Self::Scalar;\n    fn reduce_product(self) -> Self::Scalar;\n    fn reduce_max(self) -> Self::Scalar;\n    fn reduce_min(self) -> Self::Scalar;\n}\n```\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nExpand description\n\nOperations on SIMD vectors of floats.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#10)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nMask type used for manipulating this SIMD vector type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#13)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nScalar type contained by this SIMD vector type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#16)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nBit representation of this SIMD vector type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#19)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector with a different element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#45)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nPerforms elementwise conversion of this vectorâ€™s elements to another SIMD-valid type.\n\nThis follows the semantics of Rustâ€™s `as` conversion for floats (truncating or saturating at the limits) for each element.\n\n##### [Â§](#example)Example\n\n```\nlet floats: Simd<f32, 4> = Simd::from_array([1.9, -4.5, f32::INFINITY, f32::NAN]);\nlet ints = floats.cast::<i32>();\nassert_eq!(ints, Simd::from_array([1, -4, i32::MAX, 0]));\n\n// Formally equivalent, but `Simd::cast` can optimize better.\nassert_eq!(ints, Simd::from_array(floats.to_array().map(|x| x as i32)));\n\n// The float conversion does not round-trip.\nlet floats_again = ints.cast();\nassert_ne!(floats, floats_again);\nassert_eq!(floats_again, Simd::from_array([1.0, -4.0, 2147483647.0, 0.0]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+floats:+Simd%3Cf32,+4%3E+=+Simd::from_array(%5B1.9,+-4.5,+f32::INFINITY,+f32::NAN%5D);%0A++++let+ints+=+floats.cast::%3Ci32%3E();%0A++++assert_eq!(ints,+Simd::from_array(%5B1,+-4,+i32::MAX,+0%5D));%0A++++%0A++++//+Formally+equivalent,+but+%60Simd::cast%60+can+optimize+better.%0A++++assert_eq!(ints,+Simd::from_array(floats.to_array().map(%7Cx%7C+x+as+i32)));%0A++++%0A++++//+The+float+conversion+does+not+round-trip.%0A++++let+floats_again+=+ints.cast();%0A++++assert_ne!(floats,+floats_again);%0A++++assert_eq!(floats_again,+Simd::from_array(%5B1.0,+-4.0,+2147483647.0,+0.0%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#61-63)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRounds toward zero and converts to the same-width integer type, assuming that the value is finite and fits in that type.\n\n##### [Â§](#safety)Safety\n\nThe value must:\n\n-   Not be NaN\n-   Not be infinite\n-   Be representable in the return type, after truncating off its fractional part\n\nIf these requirements are infeasible or costly, consider using the safe function [cast](about:blank/prelude/struct.Simd.html#method.cast \"method std::simd::prelude::Simd::cast\"), which saturates on conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#68)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRaw transmutation to an unsigned integer vector type with the same size and number of elements.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#73)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRaw transmutation from an unsigned integer vector type with the same size and number of elements.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#78)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the absolute value of the equivalently-indexed element in `self`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#82)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTakes the reciprocal (inverse) of each element, `1/x`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#86)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts each element from radians to degrees.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#90)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts each element from degrees to radians.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#95)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if it has a positive sign, including `+0.0`, `NaN`s with positive sign bit and positive infinity.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#100)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if it has a negative sign, including `-0.0`, `NaN`s with negative sign bit and negative infinity.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#104)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is `NaN`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#108)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is positive infinity or negative infinity.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#112)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is neither infinite nor `NaN`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#116)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is subnormal.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#121)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is neither zero, infinite, subnormal, nor `NaN`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#129)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReplaces each element with a number that represents its sign.\n\n-   `1.0` if the number is positive, `+0.0`, or `INFINITY`\n-   `-1.0` if the number is negative, `-0.0`, or `NEG_INFINITY`\n-   `NAN` if the number is `NAN`\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#135)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns each element with the magnitude of `self` and the sign of `sign`.\n\nFor any element containing a `NAN`, a `NAN` with the sign of `sign` is returned.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#141)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum of each element.\n\nIf one of the values is `NAN`, then the other value is returned.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#147)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum of each element.\n\nIf one of the values is `NAN`, then the other value is returned.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#155)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval unless it is NaN.\n\nFor each element in `self`, returns the corresponding element in `max` if the element is greater than `max`, and the corresponding element in `min` if the element is less than `min`. Otherwise returns the element in `self`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#169)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the sum of the elements of the vector.\n\n##### [Â§](#examples)Examples\n\n```\nlet v = f32x2::from_array([1., 2.]);\nassert_eq!(v.reduce_sum(), 3.);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+v+=+f32x2::from_array(%5B1.,+2.%5D);%0A++++assert_eq!(v.reduce_sum(),+3.);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#183)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReducing multiply. Returns the product of the elements of the vector.\n\n##### [Â§](#examples-1)Examples\n\n```\nlet v = f32x2::from_array([3., 4.]);\nassert_eq!(v.reduce_product(), 12.);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+v+=+f32x2::from_array(%5B3.,+4.%5D);%0A++++assert_eq!(v.reduce_product(),+12.);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#210)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum element in the vector.\n\nReturns values based on equality, so a vector containing both `0.` and `-0.` may return either.\n\nThis function will not return `NaN` unless all elements are `NaN`.\n\n##### [Â§](#examples-2)Examples\n\n```\nlet v = f32x2::from_array([1., 2.]);\nassert_eq!(v.reduce_max(), 2.);\n\n// NaN values are skipped...\nlet v = f32x2::from_array([1., f32::NAN]);\nassert_eq!(v.reduce_max(), 1.);\n\n// ...unless all values are NaN\nlet v = f32x2::from_array([f32::NAN, f32::NAN]);\nassert!(v.reduce_max().is_nan());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+v+=+f32x2::from_array(%5B1.,+2.%5D);%0A++++assert_eq!(v.reduce_max(),+2.);%0A++++%0A++++//+NaN+values+are+skipped...%0A++++let+v+=+f32x2::from_array(%5B1.,+f32::NAN%5D);%0A++++assert_eq!(v.reduce_max(),+1.);%0A++++%0A++++//+...unless+all+values+are+NaN%0A++++let+v+=+f32x2::from_array(%5Bf32::NAN,+f32::NAN%5D);%0A++++assert!(v.reduce_max().is_nan());%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#237)\n\nðŸ”¬This is a nightly-only experimental API. (`portable_simd`Â [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum element in the vector.\n\nReturns values based on equality, so a vector containing both `0.` and `-0.` may return either.\n\nThis function will not return `NaN` unless all elements are `NaN`.\n\n##### [Â§](#examples-3)Examples\n\n```\nlet v = f32x2::from_array([3., 7.]);\nassert_eq!(v.reduce_min(), 3.);\n\n// NaN values are skipped...\nlet v = f32x2::from_array([1., f32::NAN]);\nassert_eq!(v.reduce_min(), 1.);\n\n// ...unless all values are NaN\nlet v = f32x2::from_array([f32::NAN, f32::NAN]);\nassert!(v.reduce_min().is_nan());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+v+=+f32x2::from_array(%5B3.,+7.%5D);%0A++++assert_eq!(v.reduce_min(),+3.);%0A++++%0A++++//+NaN+values+are+skipped...%0A++++let+v+=+f32x2::from_array(%5B1.,+f32::NAN%5D);%0A++++assert_eq!(v.reduce_min(),+1.);%0A++++%0A++++//+...unless+all+values+are+NaN%0A++++let+v+=+f32x2::from_array(%5Bf32::NAN,+f32::NAN%5D);%0A++++assert!(v.reduce_min().is_nan());%0A%7D&version=nightly&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Operations on SIMD vectors of floats.\"><title>SimdFloat in std::simd::num - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">SimdFloat</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">SimdFloat</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.Bits\">Bits</a></li><li><a href=\"#associatedtype.Cast\">Cast</a></li><li><a href=\"#associatedtype.Mask\">Mask</a></li><li><a href=\"#associatedtype.Scalar\">Scalar</a></li></ul><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.abs\">abs</a></li><li><a href=\"#tymethod.cast\">cast</a></li><li><a href=\"#tymethod.copysign\">copysign</a></li><li><a href=\"#tymethod.from_bits\">from_bits</a></li><li><a href=\"#tymethod.is_finite\">is_finite</a></li><li><a href=\"#tymethod.is_infinite\">is_infinite</a></li><li><a href=\"#tymethod.is_nan\">is_nan</a></li><li><a href=\"#tymethod.is_normal\">is_normal</a></li><li><a href=\"#tymethod.is_sign_negative\">is_sign_negative</a></li><li><a href=\"#tymethod.is_sign_positive\">is_sign_positive</a></li><li><a href=\"#tymethod.is_subnormal\">is_subnormal</a></li><li><a href=\"#tymethod.recip\">recip</a></li><li><a href=\"#tymethod.reduce_max\">reduce_max</a></li><li><a href=\"#tymethod.reduce_min\">reduce_min</a></li><li><a href=\"#tymethod.reduce_product\">reduce_product</a></li><li><a href=\"#tymethod.reduce_sum\">reduce_sum</a></li><li><a href=\"#tymethod.signum\">signum</a></li><li><a href=\"#tymethod.simd_clamp\">simd_clamp</a></li><li><a href=\"#tymethod.simd_max\">simd_max</a></li><li><a href=\"#tymethod.simd_min\">simd_min</a></li><li><a href=\"#tymethod.to_bits\">to_bits</a></li><li><a href=\"#tymethod.to_degrees\">to_degrees</a></li><li><a href=\"#tymethod.to_int_unchecked\">to_int_unchecked</a></li><li><a href=\"#tymethod.to_radians\">to_radians</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::simd::num</a></h2><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.SimdFloat.html\">SimdFloat</a></li><li><a href=\"trait.SimdInt.html\">SimdInt</a></li><li><a href=\"trait.SimdUint.html\">SimdUint</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">simd</a>::<wbr><a href=\"index.html\">num</a>::<wbr><a class=\"trait\" href=\"#\">SimdFloat</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#8\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait SimdFloat: <a class=\"trait\" href=\"../../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> + Sealed {\n    type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a>;\n    type <a href=\"#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a>;\n    type <a href=\"#associatedtype.Bits\" class=\"associatedtype\">Bits</a>;\n    type <a href=\"#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"../trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;;\n\n<details class=\"toggle type-contents-toggle\"><summary class=\"hideme\"><span>Show 24 methods</span></summary>    // Required methods\n    fn <a href=\"#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdFloat::Cast\">Cast</a>&lt;T&gt;\n       <span class=\"where\">where T: <a class=\"trait\" href=\"../trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a></span>;\n<span class=\"item-spacer\"></span>    unsafe fn <a href=\"#tymethod.to_int_unchecked\" class=\"fn\">to_int_unchecked</a>&lt;I&gt;(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdFloat::Cast\">Cast</a>&lt;I&gt;\n       <span class=\"where\">where I: <a class=\"trait\" href=\"../trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,\n             Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a>: <a class=\"trait\" href=\"../../convert/trait.FloatToInt.html\" title=\"trait std::convert::FloatToInt\">FloatToInt</a>&lt;I&gt;</span>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.to_bits\" class=\"fn\">to_bits</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Bits\" title=\"type std::simd::prelude::SimdFloat::Bits\">Bits</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.from_bits\" class=\"fn\">from_bits</a>(bits: Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Bits\" title=\"type std::simd::prelude::SimdFloat::Bits\">Bits</a>) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.recip\" class=\"fn\">recip</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.to_degrees\" class=\"fn\">to_degrees</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.to_radians\" class=\"fn\">to_radians</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.is_sign_positive\" class=\"fn\">is_sign_positive</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.is_sign_negative\" class=\"fn\">is_sign_negative</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.is_nan\" class=\"fn\">is_nan</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.is_infinite\" class=\"fn\">is_infinite</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.is_finite\" class=\"fn\">is_finite</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.is_subnormal\" class=\"fn\">is_subnormal</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.is_normal\" class=\"fn\">is_normal</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.signum\" class=\"fn\">signum</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.copysign\" class=\"fn\">copysign</a>(self, sign: Self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: Self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: Self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: Self, max: Self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a>;\n</details>}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Operations on SIMD vectors of floats.</p>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#10\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Mask type used for manipulating this SIMD vector type.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Scalar\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#13\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Scalar type contained by this SIMD vector type.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bits\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#16\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Bits\" class=\"associatedtype\">Bits</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Bit representation of this SIMD vector type.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Cast\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#19\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"../trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>A SIMD vector with a different element type.</p>\n</div></details></div><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.cast\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#45\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdFloat::Cast\">Cast</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Performs elementwise conversion of this vectorâ€™s elements to another SIMD-valid type.</p>\n<p>This follows the semantics of Rustâ€™s <code>as</code> conversion for floats (truncating or saturating\nat the limits) for each element.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>floats: Simd&lt;f32, <span class=\"number\">4</span>&gt; = Simd::from_array([<span class=\"number\">1.9</span>, -<span class=\"number\">4.5</span>, f32::INFINITY, f32::NAN]);\n<span class=\"kw\">let </span>ints = floats.cast::&lt;i32&gt;();\n<span class=\"macro\">assert_eq!</span>(ints, Simd::from_array([<span class=\"number\">1</span>, -<span class=\"number\">4</span>, i32::MAX, <span class=\"number\">0</span>]));\n\n<span class=\"comment\">// Formally equivalent, but `Simd::cast` can optimize better.\n</span><span class=\"macro\">assert_eq!</span>(ints, Simd::from_array(floats.to_array().map(|x| x <span class=\"kw\">as </span>i32)));\n\n<span class=\"comment\">// The float conversion does not round-trip.\n</span><span class=\"kw\">let </span>floats_again = ints.cast();\n<span class=\"macro\">assert_ne!</span>(floats, floats_again);\n<span class=\"macro\">assert_eq!</span>(floats_again, Simd::from_array([<span class=\"number\">1.0</span>, -<span class=\"number\">4.0</span>, <span class=\"number\">2147483647.0</span>, <span class=\"number\">0.0</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+floats:+Simd%3Cf32,+4%3E+=+Simd::from_array(%5B1.9,+-4.5,+f32::INFINITY,+f32::NAN%5D);%0A++++let+ints+=+floats.cast::%3Ci32%3E();%0A++++assert_eq!(ints,+Simd::from_array(%5B1,+-4,+i32::MAX,+0%5D));%0A++++%0A++++//+Formally+equivalent,+but+%60Simd::cast%60+can+optimize+better.%0A++++assert_eq!(ints,+Simd::from_array(floats.to_array().map(%7Cx%7C+x+as+i32)));%0A++++%0A++++//+The+float+conversion+does+not+round-trip.%0A++++let+floats_again+=+ints.cast();%0A++++assert_ne!(floats,+floats_again);%0A++++assert_eq!(floats_again,+Simd::from_array(%5B1.0,+-4.0,+2147483647.0,+0.0%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.to_int_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#61-63\">source</a><h4 class=\"code-header\">unsafe fn <a href=\"#tymethod.to_int_unchecked\" class=\"fn\">to_int_unchecked</a>&lt;I&gt;(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdFloat::Cast\">Cast</a>&lt;I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,\n    Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a>: <a class=\"trait\" href=\"../../convert/trait.FloatToInt.html\" title=\"trait std::convert::FloatToInt\">FloatToInt</a>&lt;I&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Rounds toward zero and converts to the same-width integer type, assuming that\nthe value is finite and fits in that type.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">Â§</a>Safety</h5>\n<p>The value must:</p>\n<ul>\n<li>Not be NaN</li>\n<li>Not be infinite</li>\n<li>Be representable in the return type, after truncating off its fractional part</li>\n</ul>\n<p>If these requirements are infeasible or costly, consider using the safe function <a href=\"../prelude/struct.Simd.html#method.cast\" title=\"method std::simd::prelude::Simd::cast\">cast</a>,\nwhich saturates on conversion.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.to_bits\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#68\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.to_bits\" class=\"fn\">to_bits</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Bits\" title=\"type std::simd::prelude::SimdFloat::Bits\">Bits</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Raw transmutation to an unsigned integer vector type with the\nsame size and number of elements.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.from_bits\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#73\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_bits\" class=\"fn\">from_bits</a>(bits: Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Bits\" title=\"type std::simd::prelude::SimdFloat::Bits\">Bits</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Raw transmutation from an unsigned integer vector type with the\nsame size and number of elements.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.abs\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#78\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Produces a vector where every element has the absolute value of the\nequivalently-indexed element in <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.recip\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#82\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.recip\" class=\"fn\">recip</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Takes the reciprocal (inverse) of each element, <code>1/x</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.to_degrees\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#86\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.to_degrees\" class=\"fn\">to_degrees</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts each element from radians to degrees.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.to_radians\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#90\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.to_radians\" class=\"fn\">to_radians</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts each element from degrees to radians.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.is_sign_positive\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#95\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.is_sign_positive\" class=\"fn\">is_sign_positive</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns true for each element if it has a positive sign, including\n<code>+0.0</code>, <code>NaN</code>s with positive sign bit and positive infinity.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.is_sign_negative\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#100\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.is_sign_negative\" class=\"fn\">is_sign_negative</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns true for each element if it has a negative sign, including\n<code>-0.0</code>, <code>NaN</code>s with negative sign bit and negative infinity.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.is_nan\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#104\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.is_nan\" class=\"fn\">is_nan</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns true for each element if its value is <code>NaN</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.is_infinite\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#108\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.is_infinite\" class=\"fn\">is_infinite</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns true for each element if its value is positive infinity or negative infinity.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.is_finite\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#112\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.is_finite\" class=\"fn\">is_finite</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns true for each element if its value is neither infinite nor <code>NaN</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.is_subnormal\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#116\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.is_subnormal\" class=\"fn\">is_subnormal</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns true for each element if its value is subnormal.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.is_normal\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#121\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.is_normal\" class=\"fn\">is_normal</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns true for each element if its value is neither zero, infinite,\nsubnormal, nor <code>NaN</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.signum\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#129\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.signum\" class=\"fn\">signum</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Replaces each element with a number that represents its sign.</p>\n<ul>\n<li><code>1.0</code> if the number is positive, <code>+0.0</code>, or <code>INFINITY</code></li>\n<li><code>-1.0</code> if the number is negative, <code>-0.0</code>, or <code>NEG_INFINITY</code></li>\n<li><code>NAN</code> if the number is <code>NAN</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.copysign\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#135\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.copysign\" class=\"fn\">copysign</a>(self, sign: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns each element with the magnitude of <code>self</code> and the sign of <code>sign</code>.</p>\n<p>For any element containing a <code>NAN</code>, a <code>NAN</code> with the sign of <code>sign</code> is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.simd_min\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#141\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the minimum of each element.</p>\n<p>If one of the values is <code>NAN</code>, then the other value is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.simd_max\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#147\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the maximum of each element.</p>\n<p>If one of the values is <code>NAN</code>, then the other value is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.simd_clamp\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#155\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: Self, max: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Restrict each element to a certain interval unless it is NaN.</p>\n<p>For each element in <code>self</code>, returns the corresponding element in <code>max</code> if the element is\ngreater than <code>max</code>, and the corresponding element in <code>min</code> if the element is less\nthan <code>min</code>.  Otherwise returns the element in <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.reduce_sum\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#169\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the sum of the elements of the vector.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = f32x2::from_array([<span class=\"number\">1.</span>, <span class=\"number\">2.</span>]);\n<span class=\"macro\">assert_eq!</span>(v.reduce_sum(), <span class=\"number\">3.</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+v+=+f32x2::from_array(%5B1.,+2.%5D);%0A++++assert_eq!(v.reduce_sum(),+3.);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.reduce_product\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#183\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reducing multiply.  Returns the product of the elements of the vector.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = f32x2::from_array([<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]);\n<span class=\"macro\">assert_eq!</span>(v.reduce_product(), <span class=\"number\">12.</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+v+=+f32x2::from_array(%5B3.,+4.%5D);%0A++++assert_eq!(v.reduce_product(),+12.);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.reduce_max\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#210\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the maximum element in the vector.</p>\n<p>Returns values based on equality, so a vector containing both <code>0.</code> and <code>-0.</code> may\nreturn either.</p>\n<p>This function will not return <code>NaN</code> unless all elements are <code>NaN</code>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = f32x2::from_array([<span class=\"number\">1.</span>, <span class=\"number\">2.</span>]);\n<span class=\"macro\">assert_eq!</span>(v.reduce_max(), <span class=\"number\">2.</span>);\n\n<span class=\"comment\">// NaN values are skipped...\n</span><span class=\"kw\">let </span>v = f32x2::from_array([<span class=\"number\">1.</span>, f32::NAN]);\n<span class=\"macro\">assert_eq!</span>(v.reduce_max(), <span class=\"number\">1.</span>);\n\n<span class=\"comment\">// ...unless all values are NaN\n</span><span class=\"kw\">let </span>v = f32x2::from_array([f32::NAN, f32::NAN]);\n<span class=\"macro\">assert!</span>(v.reduce_max().is_nan());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+v+=+f32x2::from_array(%5B1.,+2.%5D);%0A++++assert_eq!(v.reduce_max(),+2.);%0A++++%0A++++//+NaN+values+are+skipped...%0A++++let+v+=+f32x2::from_array(%5B1.,+f32::NAN%5D);%0A++++assert_eq!(v.reduce_max(),+1.);%0A++++%0A++++//+...unless+all+values+are+NaN%0A++++let+v+=+f32x2::from_array(%5Bf32::NAN,+f32::NAN%5D);%0A++++assert!(v.reduce_max().is_nan());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.reduce_min\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#237\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"../prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the minimum element in the vector.</p>\n<p>Returns values based on equality, so a vector containing both <code>0.</code> and <code>-0.</code> may\nreturn either.</p>\n<p>This function will not return <code>NaN</code> unless all elements are <code>NaN</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = f32x2::from_array([<span class=\"number\">3.</span>, <span class=\"number\">7.</span>]);\n<span class=\"macro\">assert_eq!</span>(v.reduce_min(), <span class=\"number\">3.</span>);\n\n<span class=\"comment\">// NaN values are skipped...\n</span><span class=\"kw\">let </span>v = f32x2::from_array([<span class=\"number\">1.</span>, f32::NAN]);\n<span class=\"macro\">assert_eq!</span>(v.reduce_min(), <span class=\"number\">1.</span>);\n\n<span class=\"comment\">// ...unless all values are NaN\n</span><span class=\"kw\">let </span>v = f32x2::from_array([f32::NAN, f32::NAN]);\n<span class=\"macro\">assert!</span>(v.reduce_min().is_nan());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+v+=+f32x2::from_array(%5B3.,+7.%5D);%0A++++assert_eq!(v.reduce_min(),+3.);%0A++++%0A++++//+NaN+values+are+skipped...%0A++++let+v+=+f32x2::from_array(%5B1.,+f32::NAN%5D);%0A++++assert_eq!(v.reduce_min(),+1.);%0A++++%0A++++//+...unless+all+values+are+NaN%0A++++let+v+=+f32x2::from_array(%5Bf32::NAN,+f32::NAN%5D);%0A++++assert!(v.reduce_min().is_nan());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">Â§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SimdFloat-for-Simd%3Cf32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#impl-SimdFloat-for-Simd%3Cf32,+N%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a> for <a class=\"struct\" href=\"../prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Mask-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"../prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"../trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"../trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section><section id=\"associatedtype.Scalar-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../../primitive.f32.html\">f32</a></h4></section><section id=\"associatedtype.Bits-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bits-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = <a class=\"struct\" href=\"../prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.u32.html\">u32</a>, N&gt;</h4></section><section id=\"associatedtype.Cast-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"../trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"../prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SimdFloat-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#impl-SimdFloat-for-Simd%3Cf64,+N%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a> for <a class=\"struct\" href=\"../prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Mask-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"../prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"../trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"../trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section><section id=\"associatedtype.Scalar-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../../primitive.f64.html\">f64</a></h4></section><section id=\"associatedtype.Bits-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bits-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = <a class=\"struct\" href=\"../prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.u64.html\">u64</a>, N&gt;</h4></section><section id=\"associatedtype.Cast-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"../trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"../prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></div></details></div><script src=\"../../../trait.impl/core/core_simd/simd/num/float/trait.SimdFloat.js\" data-ignore-extern-crates=\"core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:35.518Z"
}