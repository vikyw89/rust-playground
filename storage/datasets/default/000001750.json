{
	"title": "Future in std::future - Rust",
	"url": "https://doc.rust-lang.org/stable/std/future/trait.Future.html",
	"markdown": "# Future in std::future - Rust\n\n## Trait [std](../index.html)::[future](index.html)::[Future](#)\n\n1.36.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/future/future.rs.html#35) ·\n\n```\npub trait Future {\n    type Output;\n\n    // Required method\n    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n}\n```\n\nExpand description\n\nA future represents an asynchronous computation obtained by use of [`async`](../../std/keyword.async.html).\n\nA future is a value that might not have finished computing yet. This kind of “asynchronous value” makes it possible for a thread to continue doing useful work while it waits for the value to become available.\n\n## [§](#the-poll-method)The `poll` method\n\nThe core method of future, `poll`, _attempts_ to resolve the future into a final value. This method does not block if the value is not ready. Instead, the current task is scheduled to be woken up when it’s possible to make further progress by `poll`ing again. The `context` passed to the `poll` method can provide a [`Waker`](../task/struct.Waker.html \"struct std::task::Waker\"), which is a handle for waking up the current task.\n\nWhen using a future, you generally won’t call `poll` directly, but instead `.await` the value.\n\n1.36.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/future/future.rs.html#39)\n\nThe type of value produced on completion.\n\n1.36.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/future/future.rs.html#103)\n\nAttempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.\n\n##### [§](#return-value)Return value\n\nThis function returns:\n\n-   [`Poll::Pending`](about:blank/task/enum.Poll.html#variant.Pending \"variant std::task::Poll::Pending\") if the future is not ready yet\n-   [`Poll::Ready(val)`](about:blank/task/enum.Poll.html#variant.Ready \"variant std::task::Poll::Ready\") with the result `val` of this future if it finished successfully.\n\nOnce a future has finished, clients should not `poll` it again.\n\nWhen a future is not ready yet, `poll` returns `Poll::Pending` and stores a clone of the [`Waker`](../task/struct.Waker.html \"struct std::task::Waker\") copied from the current [`Context`](../task/struct.Context.html \"struct std::task::Context\"). This [`Waker`](../task/struct.Waker.html \"struct std::task::Waker\") is then woken once the future can make progress. For example, a future waiting for a socket to become readable would call `.clone()` on the [`Waker`](../task/struct.Waker.html \"struct std::task::Waker\") and store it. When a signal arrives elsewhere indicating that the socket is readable, [`Waker::wake`](about:blank/task/struct.Waker.html#method.wake \"method std::task::Waker::wake\") is called and the socket future’s task is awoken. Once a task has been woken up, it should attempt to `poll` the future again, which may or may not produce a final value.\n\nNote that on multiple calls to `poll`, only the [`Waker`](../task/struct.Waker.html \"struct std::task::Waker\") from the [`Context`](../task/struct.Context.html \"struct std::task::Context\") passed to the most recent call should be scheduled to receive a wakeup.\n\n##### [§](#runtime-characteristics)Runtime characteristics\n\nFutures alone are _inert_; they must be _actively_ `poll`ed to make progress, meaning that each time the current task is woken up, it should actively re-`poll` pending futures that it still has an interest in.\n\nThe `poll` function is not called repeatedly in a tight loop – instead, it should only be called when the future indicates that it is ready to make progress (by calling `wake()`). If you’re familiar with the `poll(2)` or `select(2)` syscalls on Unix it’s worth noting that futures typically do _not_ suffer the same problems of “all wakeups must poll all events”; they are more like `epoll(4)`.\n\nAn implementation of `poll` should strive to return quickly, and should not block. Returning quickly prevents unnecessarily clogging up threads or event loops. If it is known ahead of time that a call to `poll` may end up taking a while, the work should be offloaded to a thread pool (or something similar) to ensure that `poll` can return quickly.\n\n##### [§](#panics)Panics\n\nOnce a future has completed (returned `Ready` from `poll`), calling its `poll` method again may panic, block forever, or cause other kinds of problems; the `Future` trait places no requirements on the effects of such a call. However, as the `poll` method is not marked `unsafe`, Rust’s usual rules apply: calls must never cause undefined behavior (memory corruption, incorrect use of `unsafe` functions, or the like), regardless of the future’s state.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A future represents an asynchronous computation obtained by use of `async`.\"><title>Future in std::future - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Future</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Future</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.Output\">Output</a></li></ul><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.poll\">poll</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::future</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.join.html\">join</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AsyncDropInPlace.html\">AsyncDropInPlace</a></li><li><a href=\"struct.Pending.html\">Pending</a></li><li><a href=\"struct.PollFn.html\">PollFn</a></li><li><a href=\"struct.Ready.html\">Ready</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.AsyncDrop.html\">AsyncDrop</a></li><li><a href=\"trait.Future.html\">Future</a></li><li><a href=\"trait.IntoFuture.html\">IntoFuture</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.async_drop.html\">async_drop</a></li><li><a href=\"fn.async_drop_in_place.html\">async_drop_in_place</a></li><li><a href=\"fn.pending.html\">pending</a></li><li><a href=\"fn.poll_fn.html\">poll_fn</a></li><li><a href=\"fn.ready.html\">ready</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">future</a>::<wbr><a class=\"trait\" href=\"#\">Future</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/future.rs.html#35\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Future {\n    type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a>;\n\n    // Required method\n    fn <a href=\"#tymethod.poll\" class=\"fn\">poll</a>(self: <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a>&gt;, cx: &amp;mut <a class=\"struct\" href=\"../task/struct.Context.html\" title=\"struct std::task::Context\">Context</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;Self::<a class=\"associatedtype\" href=\"trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a>&gt;;\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A future represents an asynchronous computation obtained by use of <a href=\"../../std/keyword.async.html\"><code>async</code></a>.</p>\n<p>A future is a value that might not have finished computing yet. This kind of\n“asynchronous value” makes it possible for a thread to continue doing useful\nwork while it waits for the value to become available.</p>\n<h2 id=\"the-poll-method\"><a class=\"doc-anchor\" href=\"#the-poll-method\">§</a>The <code>poll</code> method</h2>\n<p>The core method of future, <code>poll</code>, <em>attempts</em> to resolve the future into a\nfinal value. This method does not block if the value is not ready. Instead,\nthe current task is scheduled to be woken up when it’s possible to make\nfurther progress by <code>poll</code>ing again. The <code>context</code> passed to the <code>poll</code>\nmethod can provide a <a href=\"../task/struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a>, which is a handle for waking up the current\ntask.</p>\n<p>When using a future, you generally won’t call <code>poll</code> directly, but instead\n<code>.await</code> the value.</p>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/future.rs.html#39\">source</a></span><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a></h4></section></summary><div class=\"docblock\"><p>The type of value produced on completion.</p>\n</div></details></div><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.poll\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/future.rs.html#103\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.poll\" class=\"fn\">poll</a>(self: <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a>&gt;, cx: &amp;mut <a class=\"struct\" href=\"../task/struct.Context.html\" title=\"struct std::task::Context\">Context</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;Self::<a class=\"associatedtype\" href=\"trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempt to resolve the future to a final value, registering\nthe current task for wakeup if the value is not yet available.</p>\n<h5 id=\"return-value\"><a class=\"doc-anchor\" href=\"#return-value\">§</a>Return value</h5>\n<p>This function returns:</p>\n<ul>\n<li><a href=\"../task/enum.Poll.html#variant.Pending\" title=\"variant std::task::Poll::Pending\"><code>Poll::Pending</code></a> if the future is not ready yet</li>\n<li><a href=\"../task/enum.Poll.html#variant.Ready\" title=\"variant std::task::Poll::Ready\"><code>Poll::Ready(val)</code></a> with the result <code>val</code> of this future if it\nfinished successfully.</li>\n</ul>\n<p>Once a future has finished, clients should not <code>poll</code> it again.</p>\n<p>When a future is not ready yet, <code>poll</code> returns <code>Poll::Pending</code> and\nstores a clone of the <a href=\"../task/struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a> copied from the current <a href=\"../task/struct.Context.html\" title=\"struct std::task::Context\"><code>Context</code></a>.\nThis <a href=\"../task/struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a> is then woken once the future can make progress.\nFor example, a future waiting for a socket to become\nreadable would call <code>.clone()</code> on the <a href=\"../task/struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a> and store it.\nWhen a signal arrives elsewhere indicating that the socket is readable,\n<a href=\"../task/struct.Waker.html#method.wake\" title=\"method std::task::Waker::wake\"><code>Waker::wake</code></a> is called and the socket future’s task is awoken.\nOnce a task has been woken up, it should attempt to <code>poll</code> the future\nagain, which may or may not produce a final value.</p>\n<p>Note that on multiple calls to <code>poll</code>, only the <a href=\"../task/struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a> from the\n<a href=\"../task/struct.Context.html\" title=\"struct std::task::Context\"><code>Context</code></a> passed to the most recent call should be scheduled to\nreceive a wakeup.</p>\n<h5 id=\"runtime-characteristics\"><a class=\"doc-anchor\" href=\"#runtime-characteristics\">§</a>Runtime characteristics</h5>\n<p>Futures alone are <em>inert</em>; they must be <em>actively</em> <code>poll</code>ed to make\nprogress, meaning that each time the current task is woken up, it should\nactively re-<code>poll</code> pending futures that it still has an interest in.</p>\n<p>The <code>poll</code> function is not called repeatedly in a tight loop – instead,\nit should only be called when the future indicates that it is ready to\nmake progress (by calling <code>wake()</code>). If you’re familiar with the\n<code>poll(2)</code> or <code>select(2)</code> syscalls on Unix it’s worth noting that futures\ntypically do <em>not</em> suffer the same problems of “all wakeups must poll\nall events”; they are more like <code>epoll(4)</code>.</p>\n<p>An implementation of <code>poll</code> should strive to return quickly, and should\nnot block. Returning quickly prevents unnecessarily clogging up\nthreads or event loops. If it is known ahead of time that a call to\n<code>poll</code> may end up taking a while, the work should be offloaded to a\nthread pool (or something similar) to ensure that <code>poll</code> can return\nquickly.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Once a future has completed (returned <code>Ready</code> from <code>poll</code>), calling its\n<code>poll</code> method again may panic, block forever, or cause other kinds of\nproblems; the <code>Future</code> trait places no requirements on the effects of\nsuch a call. However, as the <code>poll</code> method is not marked <code>unsafe</code>,\nRust’s usual rules apply: calls must never cause undefined behavior\n(memory corruption, incorrect use of <code>unsafe</code> functions, or the like),\nregardless of the future’s state.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Future-for-%26mut+F\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/future.rs.html#107\">source</a></span><a href=\"#impl-Future-for-%26mut+F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut F</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a> + <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Future-for-AssertUnwindSafe%3CF%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/unwind_safe.rs.html#291\">source</a></span><a href=\"#impl-Future-for-AssertUnwindSafe%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a> for <a class=\"struct\" href=\"../panic/struct.AssertUnwindSafe.html\" title=\"struct std::panic::AssertUnwindSafe\">AssertUnwindSafe</a>&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Future-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2329\">source</a></span><a href=\"#impl-Future-for-Box%3CF,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, A&gt; <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a> for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a> + <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Future-for-Pin%3CP%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/future.rs.html#116-118\">source</a></span><a href=\"#impl-Future-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a> for <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a>,\n    &lt;P as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>: <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;&lt;P as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a> as <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Future-for-Exclusive%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#197-199\">source</a><a href=\"#impl-Future-for-Exclusive%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a> for <a class=\"struct\" href=\"../sync/struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;T as <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Future-for-AsyncDropInPlace%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/async_drop.rs.html#107\">source</a><a href=\"#impl-Future-for-AsyncDropInPlace%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a> for <a class=\"struct\" href=\"struct.AsyncDropInPlace.html\" title=\"struct std::future::AsyncDropInPlace\">AsyncDropInPlace</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-6\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"../primitive.unit.html\">()</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Future-for-Pending%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/pending.rs.html#38\">source</a></span><a href=\"#impl-Future-for-Pending%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a> for <a class=\"struct\" href=\"struct.Pending.html\" title=\"struct std::future::Pending\">Pending</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-7\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Future-for-Ready%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/ready.rs.html#18\">source</a></span><a href=\"#impl-Future-for-Ready%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a> for <a class=\"struct\" href=\"struct.Ready.html\" title=\"struct std::future::Ready\">Ready</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Future-for-PollFn%3CF%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/poll_fn.rs.html#143-145\">source</a></span><a href=\"#impl-Future-for-PollFn%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F&gt; <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a> for <a class=\"struct\" href=\"struct.PollFn.html\" title=\"struct std::future::PollFn\">PollFn</a>&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;mut <a class=\"struct\" href=\"../task/struct.Context.html\" title=\"struct std::task::Context\">Context</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></div></details></div><script src=\"../../trait.impl/core/future/future/trait.Future.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:20:26.342Z"
}