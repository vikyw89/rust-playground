{
	"title": "pin in std::pin - Rust",
	"url": "https://doc.rust-lang.org/stable/std/pin/macro.pin.html",
	"markdown": "# pin in std::pin - Rust\n\n## Macro [std](../index.html)::[pin](index.html)::[pin](#)\n\n1.68.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1893) ·\n\n```\npub macro pin($value:expr $(,)?) {\n    ...\n}\n```\n\nExpand description\n\nConstructs a `[Pin](struct.Pin.html \"struct std::pin::Pin\")<[&mut](../primitive.reference.html \"primitive reference\") T>`, by pinning a `value: T` locally.\n\nUnlike [`Box::pin`](about:blank/std/boxed/struct.Box.html#method.pin), this does not create a new heap allocation. As explained below, the element might still end up on the heap however.\n\nThe local pinning performed by this macro is usually dubbed “stack”-pinning. Outside of `async` contexts locals do indeed get stored on the stack. In `async` functions or blocks however, any locals crossing an `.await` point are part of the state captured by the `Future`, and will use the storage of those. That storage can either be on the heap or on the stack. Therefore, local pinning is a more accurate term.\n\nIf the type of the given value does not implement [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\"), then this macro pins the value in memory in a way that prevents moves. On the other hand, if the type does implement [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\"), `[Pin](struct.Pin.html \"struct std::pin::Pin\")<[&mut](../primitive.reference.html \"primitive reference\") T>` behaves like `[&mut](../primitive.reference.html \"primitive reference\") T`, and operations such as [`mem::replace()`](../mem/fn.replace.html \"fn std::mem::replace\") or [`mem::take()`](../mem/fn.take.html \"fn std::mem::take\") will allow moves of the value. See [the `Unpin` section of the `pin` module](about:blank/index.html#unpin \"mod std::pin\") for details.\n\n### [§](#examples)Examples\n\n#### [§](#basic-usage)Basic usage\n\n```\nuse core::pin::{pin, Pin};\n\nfn stuff(foo: Pin<&mut Foo>) {\n    // …\n}\n\nlet pinned_foo = pin!(Foo { /* … */ });\nstuff(pinned_foo);\n// or, directly:\nstuff(pin!(Foo { /* … */ }));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::marker::PhantomPinned+as+Foo;%0A++++use+core::pin::%7Bpin,+Pin%7D;%0A++++%0A++++fn+stuff(foo:+Pin%3C%26mut+Foo%3E)+%7B%0A++++++++//+%E2%80%A6%0A++++let+_+=+foo;%0A++++%7D%0A++++%0A++++let+pinned_foo+=+pin!(Foo+%7B+/*+%E2%80%A6+*/+%7D);%0A++++stuff(pinned_foo);%0A++++//+or,+directly:%0A++++stuff(pin!(Foo+%7B+/*+%E2%80%A6+*/+%7D));%0A%7D&edition=2021)\n\n#### [§](#manually-polling-a-future-without-unpin-bounds)Manually polling a `Future` (without `Unpin` bounds)\n\n```\nuse std::{\n    future::Future,\n    pin::pin,\n    task::{Context, Poll},\n    thread,\n};\n\n/// Runs a future to completion.\nfn block_on<Fut: Future>(fut: Fut) -> Fut::Output {\n    let waker_that_unparks_thread = // …\n    let mut cx = Context::from_waker(&waker_that_unparks_thread);\n    // Pin the future so it can be polled.\n    let mut pinned_fut = pin!(fut);\n    loop {\n        match pinned_fut.as_mut().poll(&mut cx) {\n            Poll::Pending => thread::park(),\n            Poll::Ready(res) => return res,\n        }\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::%7B%0A++++++++future::Future,%0A++++++++pin::pin,%0A++++++++task::%7BContext,+Poll%7D,%0A++++++++thread,%0A++++%7D;%0A++++use+std::%7Bsync::Arc,+task::Wake,+thread::Thread%7D;%0A++++%0A++++///+A+waker+that+wakes+up+the+current+thread+when+called.%0A++++struct+ThreadWaker(Thread);%0A++++%0A++++impl+Wake+for+ThreadWaker+%7B%0A++++++++fn+wake(self:+Arc%3CSelf%3E)+%7B%0A++++++++++++self.0.unpark();%0A++++++++%7D%0A++++%7D%0A++++%0A++++///+Runs+a+future+to+completion.%0A++++fn+block_on%3CFut:+Future%3E(fut:+Fut)+-%3E+Fut::Output+%7B%0A++++++++let+waker_that_unparks_thread+=+//+%E2%80%A6%0A++++Arc::new(ThreadWaker(thread::current())).into();%0A++++++++let+mut+cx+=+Context::from_waker(%26waker_that_unparks_thread);%0A++++++++//+Pin+the+future+so+it+can+be+polled.%0A++++++++let+mut+pinned_fut+=+pin!(fut);%0A++++++++loop+%7B%0A++++++++++++match+pinned_fut.as_mut().poll(%26mut+cx)+%7B%0A++++++++++++++++Poll::Pending+=%3E+thread::park(),%0A++++++++++++++++Poll::Ready(res)+=%3E+return+res,%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(42,+block_on(async+%7B+42+%7D));%0A%7D&edition=2021)\n\n#### [§](#with-coroutines)With `Coroutine`s\n\n```\n#![feature(coroutines)]\n#![feature(coroutine_trait)]\nuse core::{\n    ops::{Coroutine, CoroutineState},\n    pin::pin,\n};\n\nfn coroutine_fn() -> impl Coroutine<Yield = usize, Return = ()> /* not Unpin */ {\n // Allow coroutine to be self-referential (not `Unpin`)\n // vvvvvv        so that locals can cross yield points.\n    #[coroutine] static || {\n        let foo = String::from(\"foo\");\n        let foo_ref = &foo; // ------+\n        yield 0;                  // | <- crosses yield point!\n        println!(\"{foo_ref}\"); // <--+\n        yield foo.len();\n    }\n}\n\nfn main() {\n    let mut coroutine = pin!(coroutine_fn());\n    match coroutine.as_mut().resume(()) {\n        CoroutineState::Yielded(0) => {},\n        _ => unreachable!(),\n    }\n    match coroutine.as_mut().resume(()) {\n        CoroutineState::Yielded(3) => {},\n        _ => unreachable!(),\n    }\n    match coroutine.resume(()) {\n        CoroutineState::Yielded(_) => unreachable!(),\n        CoroutineState::Complete(()) => {},\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(coroutines)%5D%0A%23!%5Bfeature(coroutine_trait)%5D%0Ause+core::%7B%0A++++ops::%7BCoroutine,+CoroutineState%7D,%0A++++pin::pin,%0A%7D;%0A%0Afn+coroutine_fn()+-%3E+impl+Coroutine%3CYield+=+usize,+Return+=+()%3E+/*+not+Unpin+*/+%7B%0A+//+Allow+coroutine+to+be+self-referential+(not+%60Unpin%60)%0A+//+vvvvvv++++++++so+that+locals+can+cross+yield+points.%0A++++%23%5Bcoroutine%5D+static+%7C%7C+%7B%0A++++++++let+foo+=+String::from(%22foo%22);%0A++++++++let+foo_ref+=+%26foo;+//+------%2B%0A++++++++yield+0;++++++++++++++++++//+%7C+%3C-+crosses+yield+point!%0A++++++++println!(%22%7Bfoo_ref%7D%22);+//+%3C--%2B%0A++++++++yield+foo.len();%0A++++%7D%0A%7D%0A%0Afn+main()+%7B%0A++++let+mut+coroutine+=+pin!(coroutine_fn());%0A++++match+coroutine.as_mut().resume(())+%7B%0A++++++++CoroutineState::Yielded(0)+=%3E+%7B%7D,%0A++++++++_+=%3E+unreachable!(),%0A++++%7D%0A++++match+coroutine.as_mut().resume(())+%7B%0A++++++++CoroutineState::Yielded(3)+=%3E+%7B%7D,%0A++++++++_+=%3E+unreachable!(),%0A++++%7D%0A++++match+coroutine.resume(())+%7B%0A++++++++CoroutineState::Yielded(_)+=%3E+unreachable!(),%0A++++++++CoroutineState::Complete(())+=%3E+%7B%7D,%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\nPrecisely because a value is pinned to local storage, the resulting `[Pin](struct.Pin.html \"struct std::pin::Pin\")<[&mut](../primitive.reference.html \"primitive reference\") T>` reference ends up borrowing a local tied to that block: it can’t escape it.\n\nThe following, for instance, fails to compile:\n\n[ⓘ](# \"This example deliberately fails to compile\")\n\n```\nuse core::pin::{pin, Pin};\n\nlet x: Pin<&mut Foo> = {\n    let x: Pin<&mut Foo> = pin!(Foo { /* … */ });\n    x\n}; // <- Foo is dropped\nstuff(x); // Error: use of dropped value\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::pin::%7Bpin,+Pin%7D;%0A++++use+core::%7Bmarker::PhantomPinned+as+Foo,+mem::drop+as+stuff%7D;%0A++++%0A++++let+x:+Pin%3C%26mut+Foo%3E+=+%7B%0A++++++++let+x:+Pin%3C%26mut+Foo%3E+=+pin!(Foo+%7B+/*+%E2%80%A6+*/+%7D);%0A++++++++x%0A++++%7D;+//+%3C-+Foo+is+dropped%0A++++stuff(x);+//+Error:+use+of+dropped+value%0A%7D&edition=2021)\n\nError message\n\n```console\nerror[E0716]: temporary value dropped while borrowed\n  --> src/main.rs:9:28\n   |\n8  | let x: Pin<&mut Foo> = {\n   |     - borrow later stored here\n9  |     let x: Pin<&mut Foo> = pin!(Foo { /* … */ });\n   |                            ^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n10 |     x\n11 | }; // <- Foo is dropped\n   | - temporary value is freed at the end of this statement\n   |\n   = note: consider using a `let` binding to create a longer lived value\n\n``` \n\nThis makes [`pin!`](macro.pin.html \"macro std::pin::pin\") **unsuitable to pin values when intending to _return_ them**. Instead, the value is expected to be passed around _unpinned_ until the point where it is to be consumed, where it is then useful and even sensible to pin the value locally using [`pin!`](macro.pin.html \"macro std::pin::pin\").\n\nIf you really need to return a pinned value, consider using [`Box::pin`](about:blank/std/boxed/struct.Box.html#method.pin) instead.\n\nOn the other hand, local pinning using [`pin!`](macro.pin.html \"macro std::pin::pin\") is likely to be cheaper than pinning into a fresh heap allocation using [`Box::pin`](about:blank/std/boxed/struct.Box.html#method.pin). Moreover, by virtue of not requiring an allocator, [`pin!`](macro.pin.html \"macro std::pin::pin\") is the main non-`unsafe` `#![no_std]`\\-compatible [`Pin`](struct.Pin.html \"struct std::pin::Pin\") constructor.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Constructs a Pin<&amp;mut T>, by pinning a `value: T` locally.\"><title>pin in std::pin - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc macro\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::pin</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.pin.html\">pin</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Pin.html\">Pin</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Macro <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">pin</a>::<wbr><a class=\"macro\" href=\"#\">pin</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.68.0\">1.68.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1893\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><span class=\"kw\">pub macro </span>pin(<span class=\"macro-nonterminal\">$value</span>:expr $(,)<span class=\"question-mark\">?</span>) {\n    ...\n}</pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Constructs a <code><a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a href=\"../primitive.reference.html\" title=\"primitive reference\">&amp;mut</a> T&gt;</code>, by pinning a <code>value: T</code> locally.</p>\n<p>Unlike <a href=\"../../std/boxed/struct.Box.html#method.pin\"><code>Box::pin</code></a>, this does not create a new heap allocation. As explained\nbelow, the element might still end up on the heap however.</p>\n<p>The local pinning performed by this macro is usually dubbed “stack”-pinning.\nOutside of <code>async</code> contexts locals do indeed get stored on the stack. In\n<code>async</code> functions or blocks however, any locals crossing an <code>.await</code> point\nare part of the state captured by the <code>Future</code>, and will use the storage of\nthose. That storage can either be on the heap or on the stack. Therefore,\nlocal pinning is a more accurate term.</p>\n<p>If the type of the given value does not implement <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a>, then this macro\npins the value in memory in a way that prevents moves. On the other hand,\nif the type does implement <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a>, <code><a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a href=\"../primitive.reference.html\" title=\"primitive reference\">&amp;mut</a> T&gt;</code> behaves\nlike <code><a href=\"../primitive.reference.html\" title=\"primitive reference\">&amp;mut</a> T</code>, and operations such as\n<a href=\"../mem/fn.replace.html\" title=\"fn std::mem::replace\"><code>mem::replace()</code></a> or <a href=\"../mem/fn.take.html\" title=\"fn std::mem::take\"><code>mem::take()</code></a>\nwill allow moves of the value.\nSee <a href=\"index.html#unpin\" title=\"mod std::pin\">the <code>Unpin</code> section of the <code>pin</code> module</a> for details.</p>\n<h3 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h3><h4 id=\"basic-usage\"><a class=\"doc-anchor\" href=\"#basic-usage\">§</a>Basic usage</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::pin::{pin, Pin};\n\n<span class=\"kw\">fn </span>stuff(foo: Pin&lt;<span class=\"kw-2\">&amp;mut </span>Foo&gt;) {\n    <span class=\"comment\">// …\n</span>}\n\n<span class=\"kw\">let </span>pinned_foo = <span class=\"macro\">pin!</span>(Foo { <span class=\"comment\">/* … */ </span>});\nstuff(pinned_foo);\n<span class=\"comment\">// or, directly:\n</span>stuff(<span class=\"macro\">pin!</span>(Foo { <span class=\"comment\">/* … */ </span>}));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::marker::PhantomPinned+as+Foo;%0A++++use+core::pin::%7Bpin,+Pin%7D;%0A++++%0A++++fn+stuff(foo:+Pin%3C%26mut+Foo%3E)+%7B%0A++++++++//+%E2%80%A6%0A++++let+_+=+foo;%0A++++%7D%0A++++%0A++++let+pinned_foo+=+pin!(Foo+%7B+/*+%E2%80%A6+*/+%7D);%0A++++stuff(pinned_foo);%0A++++//+or,+directly:%0A++++stuff(pin!(Foo+%7B+/*+%E2%80%A6+*/+%7D));%0A%7D&amp;edition=2021\">Run</a></div>\n<h4 id=\"manually-polling-a-future-without-unpin-bounds\"><a class=\"doc-anchor\" href=\"#manually-polling-a-future-without-unpin-bounds\">§</a>Manually polling a <code>Future</code> (without <code>Unpin</code> bounds)</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::{\n    future::Future,\n    pin::pin,\n    task::{Context, Poll},\n    thread,\n};\n\n<span class=\"doccomment\">/// Runs a future to completion.\n</span><span class=\"kw\">fn </span>block_on&lt;Fut: Future&gt;(fut: Fut) -&gt; Fut::Output {\n    <span class=\"kw\">let </span>waker_that_unparks_thread = <span class=\"comment\">// …\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cx = Context::from_waker(<span class=\"kw-2\">&amp;</span>waker_that_unparks_thread);\n    <span class=\"comment\">// Pin the future so it can be polled.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pinned_fut = <span class=\"macro\">pin!</span>(fut);\n    <span class=\"kw\">loop </span>{\n        <span class=\"kw\">match </span>pinned_fut.as_mut().poll(<span class=\"kw-2\">&amp;mut </span>cx) {\n            Poll::Pending =&gt; thread::park(),\n            Poll::Ready(res) =&gt; <span class=\"kw\">return </span>res,\n        }\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::%7B%0A++++++++future::Future,%0A++++++++pin::pin,%0A++++++++task::%7BContext,+Poll%7D,%0A++++++++thread,%0A++++%7D;%0A++++use+std::%7Bsync::Arc,+task::Wake,+thread::Thread%7D;%0A++++%0A++++///+A+waker+that+wakes+up+the+current+thread+when+called.%0A++++struct+ThreadWaker(Thread);%0A++++%0A++++impl+Wake+for+ThreadWaker+%7B%0A++++++++fn+wake(self:+Arc%3CSelf%3E)+%7B%0A++++++++++++self.0.unpark();%0A++++++++%7D%0A++++%7D%0A++++%0A++++///+Runs+a+future+to+completion.%0A++++fn+block_on%3CFut:+Future%3E(fut:+Fut)+-%3E+Fut::Output+%7B%0A++++++++let+waker_that_unparks_thread+=+//+%E2%80%A6%0A++++Arc::new(ThreadWaker(thread::current())).into();%0A++++++++let+mut+cx+=+Context::from_waker(%26waker_that_unparks_thread);%0A++++++++//+Pin+the+future+so+it+can+be+polled.%0A++++++++let+mut+pinned_fut+=+pin!(fut);%0A++++++++loop+%7B%0A++++++++++++match+pinned_fut.as_mut().poll(%26mut+cx)+%7B%0A++++++++++++++++Poll::Pending+=%3E+thread::park(),%0A++++++++++++++++Poll::Ready(res)+=%3E+return+res,%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(42,+block_on(async+%7B+42+%7D));%0A%7D&amp;edition=2021\">Run</a></div>\n<h4 id=\"with-coroutines\"><a class=\"doc-anchor\" href=\"#with-coroutines\">§</a>With <code>Coroutine</code>s</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(coroutines)]\n#![feature(coroutine_trait)]\n</span><span class=\"kw\">use </span>core::{\n    ops::{Coroutine, CoroutineState},\n    pin::pin,\n};\n\n<span class=\"kw\">fn </span>coroutine_fn() -&gt; <span class=\"kw\">impl </span>Coroutine&lt;Yield = usize, Return = ()&gt; <span class=\"comment\">/* not Unpin */ </span>{\n <span class=\"comment\">// Allow coroutine to be self-referential (not `Unpin`)\n // vvvvvv        so that locals can cross yield points.\n    </span><span class=\"attr\">#[coroutine] </span><span class=\"kw\">static </span>|| {\n        <span class=\"kw\">let </span>foo = String::from(<span class=\"string\">\"foo\"</span>);\n        <span class=\"kw\">let </span>foo_ref = <span class=\"kw-2\">&amp;</span>foo; <span class=\"comment\">// ------+\n        </span><span class=\"kw\">yield </span><span class=\"number\">0</span>;                  <span class=\"comment\">// | &lt;- crosses yield point!\n        </span><span class=\"macro\">println!</span>(<span class=\"string\">\"{foo_ref}\"</span>); <span class=\"comment\">// &lt;--+\n        </span><span class=\"kw\">yield </span>foo.len();\n    }\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>coroutine = <span class=\"macro\">pin!</span>(coroutine_fn());\n    <span class=\"kw\">match </span>coroutine.as_mut().resume(()) {\n        CoroutineState::Yielded(<span class=\"number\">0</span>) =&gt; {},\n        <span class=\"kw\">_ </span>=&gt; <span class=\"macro\">unreachable!</span>(),\n    }\n    <span class=\"kw\">match </span>coroutine.as_mut().resume(()) {\n        CoroutineState::Yielded(<span class=\"number\">3</span>) =&gt; {},\n        <span class=\"kw\">_ </span>=&gt; <span class=\"macro\">unreachable!</span>(),\n    }\n    <span class=\"kw\">match </span>coroutine.resume(()) {\n        CoroutineState::Yielded(<span class=\"kw\">_</span>) =&gt; <span class=\"macro\">unreachable!</span>(),\n        CoroutineState::Complete(()) =&gt; {},\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(coroutines)%5D%0A%23!%5Bfeature(coroutine_trait)%5D%0Ause+core::%7B%0A++++ops::%7BCoroutine,+CoroutineState%7D,%0A++++pin::pin,%0A%7D;%0A%0Afn+coroutine_fn()+-%3E+impl+Coroutine%3CYield+=+usize,+Return+=+()%3E+/*+not+Unpin+*/+%7B%0A+//+Allow+coroutine+to+be+self-referential+(not+%60Unpin%60)%0A+//+vvvvvv++++++++so+that+locals+can+cross+yield+points.%0A++++%23%5Bcoroutine%5D+static+%7C%7C+%7B%0A++++++++let+foo+=+String::from(%22foo%22);%0A++++++++let+foo_ref+=+%26foo;+//+------%2B%0A++++++++yield+0;++++++++++++++++++//+%7C+%3C-+crosses+yield+point!%0A++++++++println!(%22%7Bfoo_ref%7D%22);+//+%3C--%2B%0A++++++++yield+foo.len();%0A++++%7D%0A%7D%0A%0Afn+main()+%7B%0A++++let+mut+coroutine+=+pin!(coroutine_fn());%0A++++match+coroutine.as_mut().resume(())+%7B%0A++++++++CoroutineState::Yielded(0)+=%3E+%7B%7D,%0A++++++++_+=%3E+unreachable!(),%0A++++%7D%0A++++match+coroutine.as_mut().resume(())+%7B%0A++++++++CoroutineState::Yielded(3)+=%3E+%7B%7D,%0A++++++++_+=%3E+unreachable!(),%0A++++%7D%0A++++match+coroutine.resume(())+%7B%0A++++++++CoroutineState::Yielded(_)+=%3E+unreachable!(),%0A++++++++CoroutineState::Complete(())+=%3E+%7B%7D,%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h3 id=\"remarks\"><a class=\"doc-anchor\" href=\"#remarks\">§</a>Remarks</h3>\n<p>Precisely because a value is pinned to local storage, the resulting <code><a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a href=\"../primitive.reference.html\" title=\"primitive reference\">&amp;mut</a> T&gt;</code>\nreference ends up borrowing a local tied to that block: it can’t escape it.</p>\n<p>The following, for instance, fails to compile:</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::pin::{pin, Pin};\n\n<span class=\"kw\">let </span>x: Pin&lt;<span class=\"kw-2\">&amp;mut </span>Foo&gt; = {\n    <span class=\"kw\">let </span>x: Pin&lt;<span class=\"kw-2\">&amp;mut </span>Foo&gt; = <span class=\"macro\">pin!</span>(Foo { <span class=\"comment\">/* … */ </span>});\n    x\n}; <span class=\"comment\">// &lt;- Foo is dropped\n</span>stuff(x); <span class=\"comment\">// Error: use of dropped value</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::pin::%7Bpin,+Pin%7D;%0A++++use+core::%7Bmarker::PhantomPinned+as+Foo,+mem::drop+as+stuff%7D;%0A++++%0A++++let+x:+Pin%3C%26mut+Foo%3E+=+%7B%0A++++++++let+x:+Pin%3C%26mut+Foo%3E+=+pin!(Foo+%7B+/*+%E2%80%A6+*/+%7D);%0A++++++++x%0A++++%7D;+//+%3C-+Foo+is+dropped%0A++++stuff(x);+//+Error:+use+of+dropped+value%0A%7D&amp;edition=2021\">Run</a></div>\n<details><summary>Error message</summary>\n<div class=\"example-wrap\"><pre class=\"language-console\"><code>error[E0716]: temporary value dropped while borrowed\n  --&gt; src/main.rs:9:28\n   |\n8  | let x: Pin&lt;&amp;mut Foo&gt; = {\n   |     - borrow later stored here\n9  |     let x: Pin&lt;&amp;mut Foo&gt; = pin!(Foo { /* … */ });\n   |                            ^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n10 |     x\n11 | }; // &lt;- Foo is dropped\n   | - temporary value is freed at the end of this statement\n   |\n   = note: consider using a `let` binding to create a longer lived value\n</code></pre></div></details>\n<p>This makes <a href=\"macro.pin.html\" title=\"macro std::pin::pin\"><code>pin!</code></a> <strong>unsuitable to pin values when intending to <em>return</em> them</strong>. Instead, the\nvalue is expected to be passed around <em>unpinned</em> until the point where it is to be consumed,\nwhere it is then useful and even sensible to pin the value locally using <a href=\"macro.pin.html\" title=\"macro std::pin::pin\"><code>pin!</code></a>.</p>\n<p>If you really need to return a pinned value, consider using <a href=\"../../std/boxed/struct.Box.html#method.pin\"><code>Box::pin</code></a> instead.</p>\n<p>On the other hand, local pinning using <a href=\"macro.pin.html\" title=\"macro std::pin::pin\"><code>pin!</code></a> is likely to be cheaper than\npinning into a fresh heap allocation using <a href=\"../../std/boxed/struct.Box.html#method.pin\"><code>Box::pin</code></a>. Moreover, by virtue of not\nrequiring an allocator, <a href=\"macro.pin.html\" title=\"macro std::pin::pin\"><code>pin!</code></a> is the main non-<code>unsafe</code> <code>#![no_std]</code>-compatible <a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin</code></a>\nconstructor.</p>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:24:09.714Z"
}