{
	"title": "Duration in std::time - Rust",
	"url": "https://doc.rust-lang.org/stable/std/time/struct.Duration.html",
	"markdown": "# Duration in std::time - Rust\n\n## Struct [std](../index.html)::[time](index.html)::[Duration](#)\n\n1.3.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#98) ¬∑\n\n```\npub struct Duration { /* private fields */ }\n```\n\nExpand description\n\nA `Duration` type to represent a span of time, typically used for system timeouts.\n\nEach `Duration` is composed of a whole number of seconds and a fractional part represented in nanoseconds. If the underlying system does not support nanosecond-level precision, APIs binding a system timeout will typically round up the number of nanoseconds.\n\n[`Duration`](struct.Duration.html \"struct std::time::Duration\")s implement many common traits, including [`Add`](../ops/trait.Add.html \"trait std::ops::Add\"), [`Sub`](../ops/trait.Sub.html \"trait std::ops::Sub\"), and other [`ops`](../ops/index.html \"mod std::ops\") traits. It implements [`Default`](../default/trait.Default.html \"trait std::default::Default\") by returning a zero-length `Duration`.\n\n## [¬ß](#examples)Examples\n\n```\nuse std::time::Duration;\n\nlet five_seconds = Duration::new(5, 0);\nlet five_seconds_and_five_nanos = five_seconds + Duration::new(0, 5);\n\nassert_eq!(five_seconds_and_five_nanos.as_secs(), 5);\nassert_eq!(five_seconds_and_five_nanos.subsec_nanos(), 5);\n\nlet ten_millis = Duration::from_millis(10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+five_seconds+=+Duration::new(5,+0);%0A++++let+five_seconds_and_five_nanos+=+five_seconds+%2B+Duration::new(0,+5);%0A++++%0A++++assert_eq!(five_seconds_and_five_nanos.as_secs(),+5);%0A++++assert_eq!(five_seconds_and_five_nanos.subsec_nanos(),+5);%0A++++%0A++++let+ten_millis+=+Duration::from_millis(10);%0A%7D&edition=2021)\n\n## [¬ß](#formatting-duration-values)Formatting `Duration` values\n\n`Duration` intentionally does not have a `Display` impl, as there are a variety of ways to format spans of time for human readability. `Duration` provides a `Debug` impl that shows the full precision of the value.\n\nThe `Debug` output uses the non-ASCII ‚Äú¬µs‚Äù suffix for microseconds. If your program output may appear in contexts that cannot rely on full Unicode compatibility, you may wish to format `Duration` objects yourself or use a crate to do so.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#103)[¬ß](#impl-Duration)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#115)\n\nüî¨This is a nightly-only experimental API. (`duration_constants`¬†[#57391](https://github.com/rust-lang/rust/issues/57391))\n\nThe duration of one second.\n\n##### [¬ß](#examples-1)Examples\n\n```\n#![feature(duration_constants)]\nuse std::time::Duration;\n\nassert_eq!(Duration::SECOND, Duration::from_secs(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constants)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::SECOND,+Duration::from_secs(1));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#128)\n\nüî¨This is a nightly-only experimental API. (`duration_constants`¬†[#57391](https://github.com/rust-lang/rust/issues/57391))\n\nThe duration of one millisecond.\n\n##### [¬ß](#examples-2)Examples\n\n```\n#![feature(duration_constants)]\nuse std::time::Duration;\n\nassert_eq!(Duration::MILLISECOND, Duration::from_millis(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constants)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::MILLISECOND,+Duration::from_millis(1));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#141)\n\nüî¨This is a nightly-only experimental API. (`duration_constants`¬†[#57391](https://github.com/rust-lang/rust/issues/57391))\n\nThe duration of one microsecond.\n\n##### [¬ß](#examples-3)Examples\n\n```\n#![feature(duration_constants)]\nuse std::time::Duration;\n\nassert_eq!(Duration::MICROSECOND, Duration::from_micros(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constants)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::MICROSECOND,+Duration::from_micros(1));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#154)\n\nüî¨This is a nightly-only experimental API. (`duration_constants`¬†[#57391](https://github.com/rust-lang/rust/issues/57391))\n\nThe duration of one nanosecond.\n\n##### [¬ß](#examples-4)Examples\n\n```\n#![feature(duration_constants)]\nuse std::time::Duration;\n\nassert_eq!(Duration::NANOSECOND, Duration::from_nanos(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constants)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::NANOSECOND,+Duration::from_nanos(1));%0A%7D&version=nightly&edition=2021)\n\n1.53.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#168)\n\nA duration of zero time.\n\n##### [¬ß](#examples-5)Examples\n\n```\nuse std::time::Duration;\n\nlet duration = Duration::ZERO;\nassert!(duration.is_zero());\nassert_eq!(duration.as_nanos(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::ZERO;%0A++++assert!(duration.is_zero());%0A++++assert_eq!(duration.as_nanos(),+0);%0A%7D&edition=2021)\n\n1.53.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#187)\n\nThe maximum duration.\n\nMay vary by platform as necessary. Must be able to contain the difference between two instances of [`Instant`](../../std/time/struct.Instant.html) or two instances of [`SystemTime`](../../std/time/struct.SystemTime.html). This constraint gives it a value of about 584,942,417,355 years in practice, which is currently used on all platforms.\n\n##### [¬ß](#examples-6)Examples\n\n```\nuse std::time::Duration;\n\nassert_eq!(Duration::MAX, Duration::new(u64::MAX, 1_000_000_000 - 1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::MAX,+Duration::new(u64::MAX,+1_000_000_000+-+1));%0A%7D&edition=2021)\n\n1.3.0 (const: 1.58.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#211)\n\nCreates a new `Duration` from the specified number of whole seconds and additional nanoseconds.\n\nIf the number of nanoseconds is greater than 1 billion (the number of nanoseconds in a second), then it will carry over into the seconds provided.\n\n##### [¬ß](#panics)Panics\n\nThis constructor will panic if the carry from the nanoseconds overflows the seconds counter.\n\n##### [¬ß](#examples-7)Examples\n\n```\nuse std::time::Duration;\n\nlet five_seconds = Duration::new(5, 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+five_seconds+=+Duration::new(5,+0);%0A%7D&edition=2021)\n\n1.3.0 (const: 1.32.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#242)\n\nCreates a new `Duration` from the specified number of whole seconds.\n\n##### [¬ß](#examples-8)Examples\n\n```\nuse std::time::Duration;\n\nlet duration = Duration::from_secs(5);\n\nassert_eq!(5, duration.as_secs());\nassert_eq!(0, duration.subsec_nanos());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_secs(5);%0A++++%0A++++assert_eq!(5,+duration.as_secs());%0A++++assert_eq!(0,+duration.subsec_nanos());%0A%7D&edition=2021)\n\n1.3.0 (const: 1.32.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#262)\n\nCreates a new `Duration` from the specified number of milliseconds.\n\n##### [¬ß](#examples-9)Examples\n\n```\nuse std::time::Duration;\n\nlet duration = Duration::from_millis(2569);\n\nassert_eq!(2, duration.as_secs());\nassert_eq!(569_000_000, duration.subsec_nanos());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_millis(2569);%0A++++%0A++++assert_eq!(2,+duration.as_secs());%0A++++assert_eq!(569_000_000,+duration.subsec_nanos());%0A%7D&edition=2021)\n\n1.27.0 (const: 1.32.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#288)\n\nCreates a new `Duration` from the specified number of microseconds.\n\n##### [¬ß](#examples-10)Examples\n\n```\nuse std::time::Duration;\n\nlet duration = Duration::from_micros(1_000_002);\n\nassert_eq!(1, duration.as_secs());\nassert_eq!(2000, duration.subsec_nanos());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_micros(1_000_002);%0A++++%0A++++assert_eq!(1,+duration.as_secs());%0A++++assert_eq!(2000,+duration.subsec_nanos());%0A%7D&edition=2021)\n\n1.27.0 (const: 1.32.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#319)\n\nCreates a new `Duration` from the specified number of nanoseconds.\n\nNote: Using this on the return value of `as_nanos()` might cause unexpected behavior: `as_nanos()` returns a u128, and can return values that do not fit in u64, e.g. 585 years. Instead, consider using the pattern `Duration::new(d.as_secs(), d.subsec_nanos())` if you cannot copy/clone the Duration directly.\n\n##### [¬ß](#examples-11)Examples\n\n```\nuse std::time::Duration;\n\nlet duration = Duration::from_nanos(1_000_000_123);\n\nassert_eq!(1, duration.as_secs());\nassert_eq!(123, duration.subsec_nanos());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_nanos(1_000_000_123);%0A++++%0A++++assert_eq!(1,+duration.as_secs());%0A++++assert_eq!(123,+duration.subsec_nanos());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#349)\n\nüî¨This is a nightly-only experimental API. (`duration_constructors`¬†[#120301](https://github.com/rust-lang/rust/issues/120301))\n\nCreates a new `Duration` from the specified number of weeks.\n\n##### [¬ß](#panics-1)Panics\n\nPanics if the given number of weeks overflows the `Duration` size.\n\n##### [¬ß](#examples-12)Examples\n\n```\n#![feature(duration_constructors)]\nuse std::time::Duration;\n\nlet duration = Duration::from_weeks(4);\n\nassert_eq!(4 * 7 * 24 * 60 * 60, duration.as_secs());\nassert_eq!(0, duration.subsec_nanos());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constructors)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_weeks(4);%0A++++%0A++++assert_eq!(4+*+7+*+24+*+60+*+60,+duration.as_secs());%0A++++assert_eq!(0,+duration.subsec_nanos());%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#377)\n\nüî¨This is a nightly-only experimental API. (`duration_constructors`¬†[#120301](https://github.com/rust-lang/rust/issues/120301))\n\nCreates a new `Duration` from the specified number of days.\n\n##### [¬ß](#panics-2)Panics\n\nPanics if the given number of days overflows the `Duration` size.\n\n##### [¬ß](#examples-13)Examples\n\n```\n#![feature(duration_constructors)]\nuse std::time::Duration;\n\nlet duration = Duration::from_days(7);\n\nassert_eq!(7 * 24 * 60 * 60, duration.as_secs());\nassert_eq!(0, duration.subsec_nanos());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constructors)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_days(7);%0A++++%0A++++assert_eq!(7+*+24+*+60+*+60,+duration.as_secs());%0A++++assert_eq!(0,+duration.subsec_nanos());%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#405)\n\nüî¨This is a nightly-only experimental API. (`duration_constructors`¬†[#120301](https://github.com/rust-lang/rust/issues/120301))\n\nCreates a new `Duration` from the specified number of hours.\n\n##### [¬ß](#panics-3)Panics\n\nPanics if the given number of hours overflows the `Duration` size.\n\n##### [¬ß](#examples-14)Examples\n\n```\n#![feature(duration_constructors)]\nuse std::time::Duration;\n\nlet duration = Duration::from_hours(6);\n\nassert_eq!(6 * 60 * 60, duration.as_secs());\nassert_eq!(0, duration.subsec_nanos());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constructors)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_hours(6);%0A++++%0A++++assert_eq!(6+*+60+*+60,+duration.as_secs());%0A++++assert_eq!(0,+duration.subsec_nanos());%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#433)\n\nüî¨This is a nightly-only experimental API. (`duration_constructors`¬†[#120301](https://github.com/rust-lang/rust/issues/120301))\n\nCreates a new `Duration` from the specified number of minutes.\n\n##### [¬ß](#panics-4)Panics\n\nPanics if the given number of minutes overflows the `Duration` size.\n\n##### [¬ß](#examples-15)Examples\n\n```\n#![feature(duration_constructors)]\nuse std::time::Duration;\n\nlet duration = Duration::from_mins(10);\n\nassert_eq!(10 * 60, duration.as_secs());\nassert_eq!(0, duration.subsec_nanos());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constructors)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_mins(10);%0A++++%0A++++assert_eq!(10+*+60,+duration.as_secs());%0A++++assert_eq!(0,+duration.subsec_nanos());%0A%7D&version=nightly&edition=2021)\n\n1.53.0 (const: 1.53.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#461)\n\nReturns true if this `Duration` spans no time.\n\n##### [¬ß](#examples-16)Examples\n\n```\nuse std::time::Duration;\n\nassert!(Duration::ZERO.is_zero());\nassert!(Duration::new(0, 0).is_zero());\nassert!(Duration::from_nanos(0).is_zero());\nassert!(Duration::from_secs(0).is_zero());\n\nassert!(!Duration::new(1, 1).is_zero());\nassert!(!Duration::from_nanos(1).is_zero());\nassert!(!Duration::from_secs(1).is_zero());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert!(Duration::ZERO.is_zero());%0A++++assert!(Duration::new(0,+0).is_zero());%0A++++assert!(Duration::from_nanos(0).is_zero());%0A++++assert!(Duration::from_secs(0).is_zero());%0A++++%0A++++assert!(!Duration::new(1,+1).is_zero());%0A++++assert!(!Duration::from_nanos(1).is_zero());%0A++++assert!(!Duration::from_secs(1).is_zero());%0A%7D&edition=2021)\n\n1.3.0 (const: 1.32.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#489)\n\nReturns the number of _whole_ seconds contained by this `Duration`.\n\nThe returned value does not include the fractional (nanosecond) part of the duration, which can be obtained using [`subsec_nanos`](about:blank/struct.Duration.html#method.subsec_nanos \"method std::time::Duration::subsec_nanos\").\n\n##### [¬ß](#examples-17)Examples\n\n```\nuse std::time::Duration;\n\nlet duration = Duration::new(5, 730023852);\nassert_eq!(duration.as_secs(), 5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::new(5,+730023852);%0A++++assert_eq!(duration.as_secs(),+5);%0A%7D&edition=2021)\n\nTo determine the total number of seconds represented by the `Duration` including the fractional part, use [`as_secs_f64`](about:blank/struct.Duration.html#method.as_secs_f64 \"method std::time::Duration::as_secs_f64\") or [`as_secs_f32`](about:blank/struct.Duration.html#method.as_secs_f32 \"method std::time::Duration::as_secs_f32\")\n\n1.27.0 (const: 1.32.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#512)\n\nReturns the fractional part of this `Duration`, in whole milliseconds.\n\nThis method does **not** return the length of the duration when represented by milliseconds. The returned number always represents a fractional portion of a second (i.e., it is less than one thousand).\n\n##### [¬ß](#examples-18)Examples\n\n```\nuse std::time::Duration;\n\nlet duration = Duration::from_millis(5432);\nassert_eq!(duration.as_secs(), 5);\nassert_eq!(duration.subsec_millis(), 432);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_millis(5432);%0A++++assert_eq!(duration.as_secs(),+5);%0A++++assert_eq!(duration.subsec_millis(),+432);%0A%7D&edition=2021)\n\n1.27.0 (const: 1.32.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#535)\n\nReturns the fractional part of this `Duration`, in whole microseconds.\n\nThis method does **not** return the length of the duration when represented by microseconds. The returned number always represents a fractional portion of a second (i.e., it is less than one million).\n\n##### [¬ß](#examples-19)Examples\n\n```\nuse std::time::Duration;\n\nlet duration = Duration::from_micros(1_234_567);\nassert_eq!(duration.as_secs(), 1);\nassert_eq!(duration.subsec_micros(), 234_567);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_micros(1_234_567);%0A++++assert_eq!(duration.as_secs(),+1);%0A++++assert_eq!(duration.subsec_micros(),+234_567);%0A%7D&edition=2021)\n\n1.3.0 (const: 1.32.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#558)\n\nReturns the fractional part of this `Duration`, in nanoseconds.\n\nThis method does **not** return the length of the duration when represented by nanoseconds. The returned number always represents a fractional portion of a second (i.e., it is less than one billion).\n\n##### [¬ß](#examples-20)Examples\n\n```\nuse std::time::Duration;\n\nlet duration = Duration::from_millis(5010);\nassert_eq!(duration.as_secs(), 5);\nassert_eq!(duration.subsec_nanos(), 10_000_000);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_millis(5010);%0A++++assert_eq!(duration.as_secs(),+5);%0A++++assert_eq!(duration.subsec_nanos(),+10_000_000);%0A%7D&edition=2021)\n\n1.33.0 (const: 1.33.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#576)\n\nReturns the total number of whole milliseconds contained by this `Duration`.\n\n##### [¬ß](#examples-21)Examples\n\n```\nuse std::time::Duration;\n\nlet duration = Duration::new(5, 730023852);\nassert_eq!(duration.as_millis(), 5730);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::new(5,+730023852);%0A++++assert_eq!(duration.as_millis(),+5730);%0A%7D&edition=2021)\n\n1.33.0 (const: 1.33.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#594)\n\nReturns the total number of whole microseconds contained by this `Duration`.\n\n##### [¬ß](#examples-22)Examples\n\n```\nuse std::time::Duration;\n\nlet duration = Duration::new(5, 730023852);\nassert_eq!(duration.as_micros(), 5730023);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::new(5,+730023852);%0A++++assert_eq!(duration.as_micros(),+5730023);%0A%7D&edition=2021)\n\n1.33.0 (const: 1.33.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#612)\n\nReturns the total number of nanoseconds contained by this `Duration`.\n\n##### [¬ß](#examples-23)Examples\n\n```\nuse std::time::Duration;\n\nlet duration = Duration::new(5, 730023852);\nassert_eq!(duration.as_nanos(), 5730023852);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::new(5,+730023852);%0A++++assert_eq!(duration.as_nanos(),+5730023852);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#633)\n\nüî¨This is a nightly-only experimental API. (`duration_abs_diff`¬†[#117618](https://github.com/rust-lang/rust/issues/117618))\n\nComputes the absolute difference between `self` and `other`.\n\n##### [¬ß](#examples-24)Examples\n\nBasic usage:\n\n```\n#![feature(duration_abs_diff)]\nuse std::time::Duration;\n\nassert_eq!(Duration::new(100, 0).abs_diff(Duration::new(80, 0)), Duration::new(20, 0));\nassert_eq!(Duration::new(100, 400_000_000).abs_diff(Duration::new(110, 0)), Duration::new(9, 600_000_000));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_abs_diff)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::new(100,+0).abs_diff(Duration::new(80,+0)),+Duration::new(20,+0));%0A++++assert_eq!(Duration::new(100,+400_000_000).abs_diff(Duration::new(110,+0)),+Duration::new(9,+600_000_000));%0A%7D&version=nightly&edition=2021)\n\n1.16.0 (const: 1.58.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#655)\n\nChecked `Duration` addition. Computes `self + other`, returning [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if overflow occurred.\n\n##### [¬ß](#examples-25)Examples\n\nBasic usage:\n\n```\nuse std::time::Duration;\n\nassert_eq!(Duration::new(0, 0).checked_add(Duration::new(0, 1)), Some(Duration::new(0, 1)));\nassert_eq!(Duration::new(1, 0).checked_add(Duration::new(u64::MAX, 0)), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::new(0,+0).checked_add(Duration::new(0,+1)),+Some(Duration::new(0,+1)));%0A++++assert_eq!(Duration::new(1,+0).checked_add(Duration::new(u64::MAX,+0)),+None);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.58.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#690)\n\nSaturating `Duration` addition. Computes `self + other`, returning [`Duration::MAX`](about:blank/struct.Duration.html#associatedconstant.MAX \"associated constant std::time::Duration::MAX\") if overflow occurred.\n\n##### [¬ß](#examples-26)Examples\n\n```\n#![feature(duration_constants)]\nuse std::time::Duration;\n\nassert_eq!(Duration::new(0, 0).saturating_add(Duration::new(0, 1)), Duration::new(0, 1));\nassert_eq!(Duration::new(1, 0).saturating_add(Duration::new(u64::MAX, 0)), Duration::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constants)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::new(0,+0).saturating_add(Duration::new(0,+1)),+Duration::new(0,+1));%0A++++assert_eq!(Duration::new(1,+0).saturating_add(Duration::new(u64::MAX,+0)),+Duration::MAX);%0A%7D&version=nightly&edition=2021)\n\n1.16.0 (const: 1.58.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#715)\n\nChecked `Duration` subtraction. Computes `self - other`, returning [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if the result would be negative or if overflow occurred.\n\n##### [¬ß](#examples-27)Examples\n\nBasic usage:\n\n```\nuse std::time::Duration;\n\nassert_eq!(Duration::new(0, 1).checked_sub(Duration::new(0, 0)), Some(Duration::new(0, 1)));\nassert_eq!(Duration::new(0, 0).checked_sub(Duration::new(0, 1)), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::new(0,+1).checked_sub(Duration::new(0,+0)),+Some(Duration::new(0,+1)));%0A++++assert_eq!(Duration::new(0,+0).checked_sub(Duration::new(0,+1)),+None);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.58.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#748)\n\nSaturating `Duration` subtraction. Computes `self - other`, returning [`Duration::ZERO`](about:blank/struct.Duration.html#associatedconstant.ZERO \"associated constant std::time::Duration::ZERO\") if the result would be negative or if overflow occurred.\n\n##### [¬ß](#examples-28)Examples\n\n```\nuse std::time::Duration;\n\nassert_eq!(Duration::new(0, 1).saturating_sub(Duration::new(0, 0)), Duration::new(0, 1));\nassert_eq!(Duration::new(0, 0).saturating_sub(Duration::new(0, 1)), Duration::ZERO);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::new(0,+1).saturating_sub(Duration::new(0,+0)),+Duration::new(0,+1));%0A++++assert_eq!(Duration::new(0,+0).saturating_sub(Duration::new(0,+1)),+Duration::ZERO);%0A%7D&edition=2021)\n\n1.16.0 (const: 1.58.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#773)\n\nChecked `Duration` multiplication. Computes `self * other`, returning [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if overflow occurred.\n\n##### [¬ß](#examples-29)Examples\n\nBasic usage:\n\n```\nuse std::time::Duration;\n\nassert_eq!(Duration::new(0, 500_000_001).checked_mul(2), Some(Duration::new(1, 2)));\nassert_eq!(Duration::new(u64::MAX - 1, 0).checked_mul(2), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::new(0,+500_000_001).checked_mul(2),+Some(Duration::new(1,+2)));%0A++++assert_eq!(Duration::new(u64::MAX+-+1,+0).checked_mul(2),+None);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.58.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#804)\n\nSaturating `Duration` multiplication. Computes `self * other`, returning [`Duration::MAX`](about:blank/struct.Duration.html#associatedconstant.MAX \"associated constant std::time::Duration::MAX\") if overflow occurred.\n\n##### [¬ß](#examples-30)Examples\n\n```\n#![feature(duration_constants)]\nuse std::time::Duration;\n\nassert_eq!(Duration::new(0, 500_000_001).saturating_mul(2), Duration::new(1, 2));\nassert_eq!(Duration::new(u64::MAX - 1, 0).saturating_mul(2), Duration::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constants)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::new(0,+500_000_001).saturating_mul(2),+Duration::new(1,+2));%0A++++assert_eq!(Duration::new(u64::MAX+-+1,+0).saturating_mul(2),+Duration::MAX);%0A%7D&version=nightly&edition=2021)\n\n1.16.0 (const: 1.58.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#830)\n\nChecked `Duration` division. Computes `self / other`, returning [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if `other == 0`.\n\n##### [¬ß](#examples-31)Examples\n\nBasic usage:\n\n```\nuse std::time::Duration;\n\nassert_eq!(Duration::new(2, 0).checked_div(2), Some(Duration::new(1, 0)));\nassert_eq!(Duration::new(1, 0).checked_div(2), Some(Duration::new(0, 500_000_000)));\nassert_eq!(Duration::new(2, 0).checked_div(0), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::new(2,+0).checked_div(2),+Some(Duration::new(1,+0)));%0A++++assert_eq!(Duration::new(1,+0).checked_div(2),+Some(Duration::new(0,+500_000_000)));%0A++++assert_eq!(Duration::new(2,+0).checked_div(0),+None);%0A%7D&edition=2021)\n\n1.38.0 (const: [unstable](https://github.com/rust-lang/rust/issues/72440 \"Tracking issue for duration_consts_float\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#858)\n\nReturns the number of seconds contained by this `Duration` as `f64`.\n\nThe returned value does include the fractional (nanosecond) part of the duration.\n\n##### [¬ß](#examples-32)Examples\n\n```\nuse std::time::Duration;\n\nlet dur = Duration::new(2, 700_000_000);\nassert_eq!(dur.as_secs_f64(), 2.7);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur+=+Duration::new(2,+700_000_000);%0A++++assert_eq!(dur.as_secs_f64(),+2.7);%0A%7D&edition=2021)\n\n1.38.0 (const: [unstable](https://github.com/rust-lang/rust/issues/72440 \"Tracking issue for duration_consts_float\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#877)\n\nReturns the number of seconds contained by this `Duration` as `f32`.\n\nThe returned value does include the fractional (nanosecond) part of the duration.\n\n##### [¬ß](#examples-33)Examples\n\n```\nuse std::time::Duration;\n\nlet dur = Duration::new(2, 700_000_000);\nassert_eq!(dur.as_secs_f32(), 2.7);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur+=+Duration::new(2,+700_000_000);%0A++++assert_eq!(dur.as_secs_f32(),+2.7);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#897)\n\nüî¨This is a nightly-only experimental API. (`duration_millis_float`¬†[#122451](https://github.com/rust-lang/rust/issues/122451))\n\nReturns the number of milliseconds contained by this `Duration` as `f64`.\n\nThe returned value does include the fractional (nanosecond) part of the duration.\n\n##### [¬ß](#examples-34)Examples\n\n```\n#![feature(duration_millis_float)]\nuse std::time::Duration;\n\nlet dur = Duration::new(2, 345_678_000);\nassert_eq!(dur.as_millis_f64(), 2345.678);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_millis_float)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur+=+Duration::new(2,+345_678_000);%0A++++assert_eq!(dur.as_millis_f64(),+2345.678);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#918)\n\nüî¨This is a nightly-only experimental API. (`duration_millis_float`¬†[#122451](https://github.com/rust-lang/rust/issues/122451))\n\nReturns the number of milliseconds contained by this `Duration` as `f32`.\n\nThe returned value does include the fractional (nanosecond) part of the duration.\n\n##### [¬ß](#examples-35)Examples\n\n```\n#![feature(duration_millis_float)]\nuse std::time::Duration;\n\nlet dur = Duration::new(2, 345_678_000);\nassert_eq!(dur.as_millis_f32(), 2345.678);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_millis_float)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur+=+Duration::new(2,+345_678_000);%0A++++assert_eq!(dur.as_millis_f32(),+2345.678);%0A%7D&version=nightly&edition=2021)\n\n1.38.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#953)\n\nCreates a new `Duration` from the specified number of seconds represented as `f64`.\n\n##### [¬ß](#panics-5)Panics\n\nThis constructor will panic if `secs` is negative, overflows `Duration` or not finite.\n\n##### [¬ß](#examples-36)Examples\n\n```\nuse std::time::Duration;\n\nlet res = Duration::from_secs_f64(0.0);\nassert_eq!(res, Duration::new(0, 0));\nlet res = Duration::from_secs_f64(1e-20);\nassert_eq!(res, Duration::new(0, 0));\nlet res = Duration::from_secs_f64(4.2e-7);\nassert_eq!(res, Duration::new(0, 420));\nlet res = Duration::from_secs_f64(2.7);\nassert_eq!(res, Duration::new(2, 700_000_000));\nlet res = Duration::from_secs_f64(3e10);\nassert_eq!(res, Duration::new(30_000_000_000, 0));\n// subnormal float\nlet res = Duration::from_secs_f64(f64::from_bits(1));\nassert_eq!(res, Duration::new(0, 0));\n// conversion uses rounding\nlet res = Duration::from_secs_f64(0.999e-9);\nassert_eq!(res, Duration::new(0, 1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+res+=+Duration::from_secs_f64(0.0);%0A++++assert_eq!(res,+Duration::new(0,+0));%0A++++let+res+=+Duration::from_secs_f64(1e-20);%0A++++assert_eq!(res,+Duration::new(0,+0));%0A++++let+res+=+Duration::from_secs_f64(4.2e-7);%0A++++assert_eq!(res,+Duration::new(0,+420));%0A++++let+res+=+Duration::from_secs_f64(2.7);%0A++++assert_eq!(res,+Duration::new(2,+700_000_000));%0A++++let+res+=+Duration::from_secs_f64(3e10);%0A++++assert_eq!(res,+Duration::new(30_000_000_000,+0));%0A++++//+subnormal+float%0A++++let+res+=+Duration::from_secs_f64(f64::from_bits(1));%0A++++assert_eq!(res,+Duration::new(0,+0));%0A++++//+conversion+uses+rounding%0A++++let+res+=+Duration::from_secs_f64(0.999e-9);%0A++++assert_eq!(res,+Duration::new(0,+1));%0A%7D&edition=2021)\n\n1.38.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#990)\n\nCreates a new `Duration` from the specified number of seconds represented as `f32`.\n\n##### [¬ß](#panics-6)Panics\n\nThis constructor will panic if `secs` is negative, overflows `Duration` or not finite.\n\n##### [¬ß](#examples-37)Examples\n\n```\nuse std::time::Duration;\n\nlet res = Duration::from_secs_f32(0.0);\nassert_eq!(res, Duration::new(0, 0));\nlet res = Duration::from_secs_f32(1e-20);\nassert_eq!(res, Duration::new(0, 0));\nlet res = Duration::from_secs_f32(4.2e-7);\nassert_eq!(res, Duration::new(0, 420));\nlet res = Duration::from_secs_f32(2.7);\nassert_eq!(res, Duration::new(2, 700_000_048));\nlet res = Duration::from_secs_f32(3e10);\nassert_eq!(res, Duration::new(30_000_001_024, 0));\n// subnormal float\nlet res = Duration::from_secs_f32(f32::from_bits(1));\nassert_eq!(res, Duration::new(0, 0));\n// conversion uses rounding\nlet res = Duration::from_secs_f32(0.999e-9);\nassert_eq!(res, Duration::new(0, 1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+res+=+Duration::from_secs_f32(0.0);%0A++++assert_eq!(res,+Duration::new(0,+0));%0A++++let+res+=+Duration::from_secs_f32(1e-20);%0A++++assert_eq!(res,+Duration::new(0,+0));%0A++++let+res+=+Duration::from_secs_f32(4.2e-7);%0A++++assert_eq!(res,+Duration::new(0,+420));%0A++++let+res+=+Duration::from_secs_f32(2.7);%0A++++assert_eq!(res,+Duration::new(2,+700_000_048));%0A++++let+res+=+Duration::from_secs_f32(3e10);%0A++++assert_eq!(res,+Duration::new(30_000_001_024,+0));%0A++++//+subnormal+float%0A++++let+res+=+Duration::from_secs_f32(f32::from_bits(1));%0A++++assert_eq!(res,+Duration::new(0,+0));%0A++++//+conversion+uses+rounding%0A++++let+res+=+Duration::from_secs_f32(0.999e-9);%0A++++assert_eq!(res,+Duration::new(0,+1));%0A%7D&edition=2021)\n\n1.38.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1014)\n\nMultiplies `Duration` by `f64`.\n\n##### [¬ß](#panics-7)Panics\n\nThis method will panic if result is negative, overflows `Duration` or not finite.\n\n##### [¬ß](#examples-38)Examples\n\n```\nuse std::time::Duration;\n\nlet dur = Duration::new(2, 700_000_000);\nassert_eq!(dur.mul_f64(3.14), Duration::new(8, 478_000_000));\nassert_eq!(dur.mul_f64(3.14e5), Duration::new(847_800, 0));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur+=+Duration::new(2,+700_000_000);%0A++++assert_eq!(dur.mul_f64(3.14),+Duration::new(8,+478_000_000));%0A++++assert_eq!(dur.mul_f64(3.14e5),+Duration::new(847_800,+0));%0A%7D&edition=2021)\n\n1.38.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1035)\n\nMultiplies `Duration` by `f32`.\n\n##### [¬ß](#panics-8)Panics\n\nThis method will panic if result is negative, overflows `Duration` or not finite.\n\n##### [¬ß](#examples-39)Examples\n\n```\nuse std::time::Duration;\n\nlet dur = Duration::new(2, 700_000_000);\nassert_eq!(dur.mul_f32(3.14), Duration::new(8, 478_000_641));\nassert_eq!(dur.mul_f32(3.14e5), Duration::new(847800, 0));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur+=+Duration::new(2,+700_000_000);%0A++++assert_eq!(dur.mul_f32(3.14),+Duration::new(8,+478_000_641));%0A++++assert_eq!(dur.mul_f32(3.14e5),+Duration::new(847800,+0));%0A%7D&edition=2021)\n\n1.38.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1056)\n\nDivide `Duration` by `f64`.\n\n##### [¬ß](#panics-9)Panics\n\nThis method will panic if result is negative, overflows `Duration` or not finite.\n\n##### [¬ß](#examples-40)Examples\n\n```\nuse std::time::Duration;\n\nlet dur = Duration::new(2, 700_000_000);\nassert_eq!(dur.div_f64(3.14), Duration::new(0, 859_872_611));\nassert_eq!(dur.div_f64(3.14e5), Duration::new(0, 8_599));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur+=+Duration::new(2,+700_000_000);%0A++++assert_eq!(dur.div_f64(3.14),+Duration::new(0,+859_872_611));%0A++++assert_eq!(dur.div_f64(3.14e5),+Duration::new(0,+8_599));%0A%7D&edition=2021)\n\n1.38.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1079)\n\nDivide `Duration` by `f32`.\n\n##### [¬ß](#panics-10)Panics\n\nThis method will panic if result is negative, overflows `Duration` or not finite.\n\n##### [¬ß](#examples-41)Examples\n\n```\nuse std::time::Duration;\n\nlet dur = Duration::new(2, 700_000_000);\n// note that due to rounding errors result is slightly\n// different from 0.859_872_611\nassert_eq!(dur.div_f32(3.14), Duration::new(0, 859_872_580));\nassert_eq!(dur.div_f32(3.14e5), Duration::new(0, 8_599));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur+=+Duration::new(2,+700_000_000);%0A++++//+note+that+due+to+rounding+errors+result+is+slightly%0A++++//+different+from+0.859_872_611%0A++++assert_eq!(dur.div_f32(3.14),+Duration::new(0,+859_872_580));%0A++++assert_eq!(dur.div_f32(3.14e5),+Duration::new(0,+8_599));%0A%7D&edition=2021)\n\n1.80.0 (const: [unstable](https://github.com/rust-lang/rust/issues/72440 \"Tracking issue for duration_consts_float\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1098)\n\nDivide `Duration` by `Duration` and return `f64`.\n\n##### [¬ß](#examples-42)Examples\n\n```\nuse std::time::Duration;\n\nlet dur1 = Duration::new(2, 700_000_000);\nlet dur2 = Duration::new(5, 400_000_000);\nassert_eq!(dur1.div_duration_f64(dur2), 0.5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur1+=+Duration::new(2,+700_000_000);%0A++++let+dur2+=+Duration::new(5,+400_000_000);%0A++++assert_eq!(dur1.div_duration_f64(dur2),+0.5);%0A%7D&edition=2021)\n\n1.80.0 (const: [unstable](https://github.com/rust-lang/rust/issues/72440 \"Tracking issue for duration_consts_float\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1119)\n\nDivide `Duration` by `Duration` and return `f32`.\n\n##### [¬ß](#examples-43)Examples\n\n```\nuse std::time::Duration;\n\nlet dur1 = Duration::new(2, 700_000_000);\nlet dur2 = Duration::new(5, 400_000_000);\nassert_eq!(dur1.div_duration_f32(dur2), 0.5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur1+=+Duration::new(2,+700_000_000);%0A++++let+dur2+=+Duration::new(5,+400_000_000);%0A++++assert_eq!(dur1.div_duration_f32(dur2),+0.5);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1568)[¬ß](#impl-Duration-1)\n\n1.66.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1626)\n\nThe checked version of [`from_secs_f32`](about:blank/struct.Duration.html#method.from_secs_f32 \"associated function std::time::Duration::from_secs_f32\").\n\nThis constructor will return an `Err` if `secs` is negative, overflows `Duration` or not finite.\n\n##### [¬ß](#examples-44)Examples\n\n```\nuse std::time::Duration;\n\nlet res = Duration::try_from_secs_f32(0.0);\nassert_eq!(res, Ok(Duration::new(0, 0)));\nlet res = Duration::try_from_secs_f32(1e-20);\nassert_eq!(res, Ok(Duration::new(0, 0)));\nlet res = Duration::try_from_secs_f32(4.2e-7);\nassert_eq!(res, Ok(Duration::new(0, 420)));\nlet res = Duration::try_from_secs_f32(2.7);\nassert_eq!(res, Ok(Duration::new(2, 700_000_048)));\nlet res = Duration::try_from_secs_f32(3e10);\nassert_eq!(res, Ok(Duration::new(30_000_001_024, 0)));\n// subnormal float:\nlet res = Duration::try_from_secs_f32(f32::from_bits(1));\nassert_eq!(res, Ok(Duration::new(0, 0)));\n\nlet res = Duration::try_from_secs_f32(-5.0);\nassert!(res.is_err());\nlet res = Duration::try_from_secs_f32(f32::NAN);\nassert!(res.is_err());\nlet res = Duration::try_from_secs_f32(2e19);\nassert!(res.is_err());\n\n// the conversion uses rounding with tie resolution to even\nlet res = Duration::try_from_secs_f32(0.999e-9);\nassert_eq!(res, Ok(Duration::new(0, 1)));\n\n// this float represents exactly 976562.5e-9\nlet val = f32::from_bits(0x3A80_0000);\nlet res = Duration::try_from_secs_f32(val);\nassert_eq!(res, Ok(Duration::new(0, 976_562)));\n\n// this float represents exactly 2929687.5e-9\nlet val = f32::from_bits(0x3B40_0000);\nlet res = Duration::try_from_secs_f32(val);\nassert_eq!(res, Ok(Duration::new(0, 2_929_688)));\n\n// this float represents exactly 1.000_976_562_5\nlet val = f32::from_bits(0x3F802000);\nlet res = Duration::try_from_secs_f32(val);\nassert_eq!(res, Ok(Duration::new(1, 976_562)));\n\n// this float represents exactly 1.002_929_687_5\nlet val = f32::from_bits(0x3F806000);\nlet res = Duration::try_from_secs_f32(val);\nassert_eq!(res, Ok(Duration::new(1, 2_929_688)));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+res+=+Duration::try_from_secs_f32(0.0);%0A++++assert_eq!(res,+Ok(Duration::new(0,+0)));%0A++++let+res+=+Duration::try_from_secs_f32(1e-20);%0A++++assert_eq!(res,+Ok(Duration::new(0,+0)));%0A++++let+res+=+Duration::try_from_secs_f32(4.2e-7);%0A++++assert_eq!(res,+Ok(Duration::new(0,+420)));%0A++++let+res+=+Duration::try_from_secs_f32(2.7);%0A++++assert_eq!(res,+Ok(Duration::new(2,+700_000_048)));%0A++++let+res+=+Duration::try_from_secs_f32(3e10);%0A++++assert_eq!(res,+Ok(Duration::new(30_000_001_024,+0)));%0A++++//+subnormal+float:%0A++++let+res+=+Duration::try_from_secs_f32(f32::from_bits(1));%0A++++assert_eq!(res,+Ok(Duration::new(0,+0)));%0A++++%0A++++let+res+=+Duration::try_from_secs_f32(-5.0);%0A++++assert!(res.is_err());%0A++++let+res+=+Duration::try_from_secs_f32(f32::NAN);%0A++++assert!(res.is_err());%0A++++let+res+=+Duration::try_from_secs_f32(2e19);%0A++++assert!(res.is_err());%0A++++%0A++++//+the+conversion+uses+rounding+with+tie+resolution+to+even%0A++++let+res+=+Duration::try_from_secs_f32(0.999e-9);%0A++++assert_eq!(res,+Ok(Duration::new(0,+1)));%0A++++%0A++++//+this+float+represents+exactly+976562.5e-9%0A++++let+val+=+f32::from_bits(0x3A80_0000);%0A++++let+res+=+Duration::try_from_secs_f32(val);%0A++++assert_eq!(res,+Ok(Duration::new(0,+976_562)));%0A++++%0A++++//+this+float+represents+exactly+2929687.5e-9%0A++++let+val+=+f32::from_bits(0x3B40_0000);%0A++++let+res+=+Duration::try_from_secs_f32(val);%0A++++assert_eq!(res,+Ok(Duration::new(0,+2_929_688)));%0A++++%0A++++//+this+float+represents+exactly+1.000_976_562_5%0A++++let+val+=+f32::from_bits(0x3F802000);%0A++++let+res+=+Duration::try_from_secs_f32(val);%0A++++assert_eq!(res,+Ok(Duration::new(1,+976_562)));%0A++++%0A++++//+this+float+represents+exactly+1.002_929_687_5%0A++++let+val+=+f32::from_bits(0x3F806000);%0A++++let+res+=+Duration::try_from_secs_f32(val);%0A++++assert_eq!(res,+Ok(Duration::new(1,+2_929_688)));%0A%7D&edition=2021)\n\n1.66.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1702)\n\nThe checked version of [`from_secs_f64`](about:blank/struct.Duration.html#method.from_secs_f64 \"associated function std::time::Duration::from_secs_f64\").\n\nThis constructor will return an `Err` if `secs` is negative, overflows `Duration` or not finite.\n\n##### [¬ß](#examples-45)Examples\n\n```\nuse std::time::Duration;\n\nlet res = Duration::try_from_secs_f64(0.0);\nassert_eq!(res, Ok(Duration::new(0, 0)));\nlet res = Duration::try_from_secs_f64(1e-20);\nassert_eq!(res, Ok(Duration::new(0, 0)));\nlet res = Duration::try_from_secs_f64(4.2e-7);\nassert_eq!(res, Ok(Duration::new(0, 420)));\nlet res = Duration::try_from_secs_f64(2.7);\nassert_eq!(res, Ok(Duration::new(2, 700_000_000)));\nlet res = Duration::try_from_secs_f64(3e10);\nassert_eq!(res, Ok(Duration::new(30_000_000_000, 0)));\n// subnormal float\nlet res = Duration::try_from_secs_f64(f64::from_bits(1));\nassert_eq!(res, Ok(Duration::new(0, 0)));\n\nlet res = Duration::try_from_secs_f64(-5.0);\nassert!(res.is_err());\nlet res = Duration::try_from_secs_f64(f64::NAN);\nassert!(res.is_err());\nlet res = Duration::try_from_secs_f64(2e19);\nassert!(res.is_err());\n\n// the conversion uses rounding with tie resolution to even\nlet res = Duration::try_from_secs_f64(0.999e-9);\nassert_eq!(res, Ok(Duration::new(0, 1)));\nlet res = Duration::try_from_secs_f64(0.999_999_999_499);\nassert_eq!(res, Ok(Duration::new(0, 999_999_999)));\nlet res = Duration::try_from_secs_f64(0.999_999_999_501);\nassert_eq!(res, Ok(Duration::new(1, 0)));\nlet res = Duration::try_from_secs_f64(42.999_999_999_499);\nassert_eq!(res, Ok(Duration::new(42, 999_999_999)));\nlet res = Duration::try_from_secs_f64(42.999_999_999_501);\nassert_eq!(res, Ok(Duration::new(43, 0)));\n\n// this float represents exactly 976562.5e-9\nlet val = f64::from_bits(0x3F50_0000_0000_0000);\nlet res = Duration::try_from_secs_f64(val);\nassert_eq!(res, Ok(Duration::new(0, 976_562)));\n\n// this float represents exactly 2929687.5e-9\nlet val = f64::from_bits(0x3F68_0000_0000_0000);\nlet res = Duration::try_from_secs_f64(val);\nassert_eq!(res, Ok(Duration::new(0, 2_929_688)));\n\n// this float represents exactly 1.000_976_562_5\nlet val = f64::from_bits(0x3FF0_0400_0000_0000);\nlet res = Duration::try_from_secs_f64(val);\nassert_eq!(res, Ok(Duration::new(1, 976_562)));\n\n// this float represents exactly 1.002_929_687_5\nlet val = f64::from_bits(0x3_FF00_C000_0000_000);\nlet res = Duration::try_from_secs_f64(val);\nassert_eq!(res, Ok(Duration::new(1, 2_929_688)));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+res+=+Duration::try_from_secs_f64(0.0);%0A++++assert_eq!(res,+Ok(Duration::new(0,+0)));%0A++++let+res+=+Duration::try_from_secs_f64(1e-20);%0A++++assert_eq!(res,+Ok(Duration::new(0,+0)));%0A++++let+res+=+Duration::try_from_secs_f64(4.2e-7);%0A++++assert_eq!(res,+Ok(Duration::new(0,+420)));%0A++++let+res+=+Duration::try_from_secs_f64(2.7);%0A++++assert_eq!(res,+Ok(Duration::new(2,+700_000_000)));%0A++++let+res+=+Duration::try_from_secs_f64(3e10);%0A++++assert_eq!(res,+Ok(Duration::new(30_000_000_000,+0)));%0A++++//+subnormal+float%0A++++let+res+=+Duration::try_from_secs_f64(f64::from_bits(1));%0A++++assert_eq!(res,+Ok(Duration::new(0,+0)));%0A++++%0A++++let+res+=+Duration::try_from_secs_f64(-5.0);%0A++++assert!(res.is_err());%0A++++let+res+=+Duration::try_from_secs_f64(f64::NAN);%0A++++assert!(res.is_err());%0A++++let+res+=+Duration::try_from_secs_f64(2e19);%0A++++assert!(res.is_err());%0A++++%0A++++//+the+conversion+uses+rounding+with+tie+resolution+to+even%0A++++let+res+=+Duration::try_from_secs_f64(0.999e-9);%0A++++assert_eq!(res,+Ok(Duration::new(0,+1)));%0A++++let+res+=+Duration::try_from_secs_f64(0.999_999_999_499);%0A++++assert_eq!(res,+Ok(Duration::new(0,+999_999_999)));%0A++++let+res+=+Duration::try_from_secs_f64(0.999_999_999_501);%0A++++assert_eq!(res,+Ok(Duration::new(1,+0)));%0A++++let+res+=+Duration::try_from_secs_f64(42.999_999_999_499);%0A++++assert_eq!(res,+Ok(Duration::new(42,+999_999_999)));%0A++++let+res+=+Duration::try_from_secs_f64(42.999_999_999_501);%0A++++assert_eq!(res,+Ok(Duration::new(43,+0)));%0A++++%0A++++//+this+float+represents+exactly+976562.5e-9%0A++++let+val+=+f64::from_bits(0x3F50_0000_0000_0000);%0A++++let+res+=+Duration::try_from_secs_f64(val);%0A++++assert_eq!(res,+Ok(Duration::new(0,+976_562)));%0A++++%0A++++//+this+float+represents+exactly+2929687.5e-9%0A++++let+val+=+f64::from_bits(0x3F68_0000_0000_0000);%0A++++let+res+=+Duration::try_from_secs_f64(val);%0A++++assert_eq!(res,+Ok(Duration::new(0,+2_929_688)));%0A++++%0A++++//+this+float+represents+exactly+1.000_976_562_5%0A++++let+val+=+f64::from_bits(0x3FF0_0400_0000_0000);%0A++++let+res+=+Duration::try_from_secs_f64(val);%0A++++assert_eq!(res,+Ok(Duration::new(1,+976_562)));%0A++++%0A++++//+this+float+represents+exactly+1.002_929_687_5%0A++++let+val+=+f64::from_bits(0x3_FF00_C000_0000_000);%0A++++let+res+=+Duration::try_from_secs_f64(val);%0A++++assert_eq!(res,+Ok(Duration::new(1,+2_929_688)));%0A%7D&edition=2021)\n\n1.8.0 ¬∑ [source](about:blank/src/std/time.rs.html#409-419)[¬ß](#impl-Add%3CDuration%3E-for-Instant)\n\n[source](about:blank/src/std/time.rs.html#416-418)[¬ß](#method.add-1)\n\n##### [¬ß](#panics-11)Panics\n\nThis function may panic if the resulting point in time cannot be represented by the underlying data structure. See [`Instant::checked_add`](about:blank/struct.Instant.html#method.checked_add \"method std::time::Instant::checked_add\") for a version without panic.\n\n[¬ß](#associatedtype.Output-6)\n\nThe resulting type after applying the `+` operator.\n\n1.8.0 ¬∑ [source](about:blank/src/std/time.rs.html#593-603)[¬ß](#impl-Add%3CDuration%3E-for-SystemTime)\n\n[source](about:blank/src/std/time.rs.html#600-602)[¬ß](#method.add-2)\n\n##### [¬ß](#panics-12)Panics\n\nThis function may panic if the resulting point in time cannot be represented by the underlying data structure. See [`SystemTime::checked_add`](about:blank/struct.SystemTime.html#method.checked_add \"method std::time::SystemTime::checked_add\") for a version without panic.\n\n[¬ß](#associatedtype.Output-7)\n\nThe resulting type after applying the `+` operator.\n\n1.3.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1127)[¬ß](#impl-Add-for-Duration)\n\n[¬ß](#associatedtype.Output-3)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1131)[¬ß](#method.add)\n\n1.9.0 ¬∑ [source](about:blank/src/std/time.rs.html#422-426)[¬ß](#impl-AddAssign%3CDuration%3E-for-Instant)\n\n1.9.0 ¬∑ [source](about:blank/src/std/time.rs.html#606-610)[¬ß](#impl-AddAssign%3CDuration%3E-for-SystemTime)\n\n1.9.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1137)[¬ß](#impl-AddAssign-for-Duration)\n\n1.3.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96)[¬ß](#impl-Clone-for-Duration)\n\n1.27.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1249)[¬ß](#impl-Debug-for-Duration)\n\n1.3.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96)[¬ß](#impl-Default-for-Duration)\n\n1.3.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1191)[¬ß](#impl-Div%3Cu32%3E-for-Duration)\n\n[¬ß](#associatedtype.Output-4)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1195)[¬ß](#method.div)\n\n1.9.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1201)[¬ß](#impl-DivAssign%3Cu32%3E-for-Duration)\n\n1.3.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96)[¬ß](#impl-Hash-for-Duration)\n\n1.31.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1173)[¬ß](#impl-Mul%3CDuration%3E-for-u32)\n\n[¬ß](#associatedtype.Output-1)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1177)[¬ß](#method.mul-1)\n\n1.3.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1163)[¬ß](#impl-Mul%3Cu32%3E-for-Duration)\n\n[¬ß](#associatedtype.Output)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1167)[¬ß](#method.mul)\n\n1.9.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1183)[¬ß](#impl-MulAssign%3Cu32%3E-for-Duration)\n\n1.3.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96)[¬ß](#impl-Ord-for-Duration)\n\n1.3.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96)[¬ß](#impl-PartialEq-for-Duration)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96)[¬ß](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[¬ß](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.3.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96)[¬ß](#impl-PartialOrd-for-Duration)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96)[¬ß](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[¬ß](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[¬ß](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[¬ß](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[¬ß](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 ¬∑ [source](about:blank/src/std/time.rs.html#429-435)[¬ß](#impl-Sub%3CDuration%3E-for-Instant)\n\n[¬ß](#associatedtype.Output-5)\n\nThe resulting type after applying the `-` operator.\n\n[source](about:blank/src/std/time.rs.html#432-434)[¬ß](#method.sub-1)\n\n1.8.0 ¬∑ [source](about:blank/src/std/time.rs.html#613-619)[¬ß](#impl-Sub%3CDuration%3E-for-SystemTime)\n\n[¬ß](#associatedtype.Output-8)\n\nThe resulting type after applying the `-` operator.\n\n[source](about:blank/src/std/time.rs.html#616-618)[¬ß](#method.sub-2)\n\n1.3.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1145)[¬ß](#impl-Sub-for-Duration)\n\n[¬ß](#associatedtype.Output-2)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1149)[¬ß](#method.sub)\n\n1.9.0 ¬∑ [source](about:blank/src/std/time.rs.html#438-442)[¬ß](#impl-SubAssign%3CDuration%3E-for-Instant)\n\n1.9.0 ¬∑ [source](about:blank/src/std/time.rs.html#622-626)[¬ß](#impl-SubAssign%3CDuration%3E-for-SystemTime)\n\n1.9.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1155)[¬ß](#impl-SubAssign-for-Duration)\n\n1.16.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1242)[¬ß](#impl-Sum%3C%26Duration%3E-for-Duration)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1243)[¬ß](#method.sum)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n1.16.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1235)[¬ß](#impl-Sum-for-Duration)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1236)[¬ß](#method.sum-1)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n1.3.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96)[¬ß](#impl-Copy-for-Duration)\n\n1.3.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96)[¬ß](#impl-Eq-for-Duration)\n\n1.3.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96)[¬ß](#impl-StructuralPartialEq-for-Duration)\n\n[¬ß](#impl-Freeze-for-Duration)\n\n[¬ß](#impl-RefUnwindSafe-for-Duration)\n\n[¬ß](#impl-Send-for-Duration)\n\n[¬ß](#impl-Sync-for-Duration)\n\n[¬ß](#impl-Unpin-for-Duration)\n\n[¬ß](#impl-UnwindSafe-for-Duration)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[¬ß](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[¬ß](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[¬ß](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[¬ß](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[¬ß](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[¬ß](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[¬ß](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[¬ß](#impl-ToOwned-for-T)\n\n[¬ß](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[¬ß](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[¬ß](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[¬ß](#impl-TryFrom%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[¬ß](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[¬ß](#impl-TryInto%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[¬ß](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A `Duration` type to represent a span of time, typically used for system timeouts.\"><title>Duration in std::time - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Duration</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Duration</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Associated Constants</a></h3><ul class=\"block associatedconstant\"><li><a href=\"#associatedconstant.MAX\">MAX</a></li><li><a href=\"#associatedconstant.MICROSECOND\">MICROSECOND</a></li><li><a href=\"#associatedconstant.MILLISECOND\">MILLISECOND</a></li><li><a href=\"#associatedconstant.NANOSECOND\">NANOSECOND</a></li><li><a href=\"#associatedconstant.SECOND\">SECOND</a></li><li><a href=\"#associatedconstant.ZERO\">ZERO</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.abs_diff\">abs_diff</a></li><li><a href=\"#method.as_micros\">as_micros</a></li><li><a href=\"#method.as_millis\">as_millis</a></li><li><a href=\"#method.as_millis_f32\">as_millis_f32</a></li><li><a href=\"#method.as_millis_f64\">as_millis_f64</a></li><li><a href=\"#method.as_nanos\">as_nanos</a></li><li><a href=\"#method.as_secs\">as_secs</a></li><li><a href=\"#method.as_secs_f32\">as_secs_f32</a></li><li><a href=\"#method.as_secs_f64\">as_secs_f64</a></li><li><a href=\"#method.checked_add\">checked_add</a></li><li><a href=\"#method.checked_div\">checked_div</a></li><li><a href=\"#method.checked_mul\">checked_mul</a></li><li><a href=\"#method.checked_sub\">checked_sub</a></li><li><a href=\"#method.div_duration_f32\">div_duration_f32</a></li><li><a href=\"#method.div_duration_f64\">div_duration_f64</a></li><li><a href=\"#method.div_f32\">div_f32</a></li><li><a href=\"#method.div_f64\">div_f64</a></li><li><a href=\"#method.from_days\">from_days</a></li><li><a href=\"#method.from_hours\">from_hours</a></li><li><a href=\"#method.from_micros\">from_micros</a></li><li><a href=\"#method.from_millis\">from_millis</a></li><li><a href=\"#method.from_mins\">from_mins</a></li><li><a href=\"#method.from_nanos\">from_nanos</a></li><li><a href=\"#method.from_secs\">from_secs</a></li><li><a href=\"#method.from_secs_f32\">from_secs_f32</a></li><li><a href=\"#method.from_secs_f64\">from_secs_f64</a></li><li><a href=\"#method.from_weeks\">from_weeks</a></li><li><a href=\"#method.is_zero\">is_zero</a></li><li><a href=\"#method.mul_f32\">mul_f32</a></li><li><a href=\"#method.mul_f64\">mul_f64</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.saturating_add\">saturating_add</a></li><li><a href=\"#method.saturating_mul\">saturating_mul</a></li><li><a href=\"#method.saturating_sub\">saturating_sub</a></li><li><a href=\"#method.subsec_micros\">subsec_micros</a></li><li><a href=\"#method.subsec_millis\">subsec_millis</a></li><li><a href=\"#method.subsec_nanos\">subsec_nanos</a></li><li><a href=\"#method.try_from_secs_f32\">try_from_secs_f32</a></li><li><a href=\"#method.try_from_secs_f64\">try_from_secs_f64</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Add-for-Duration\">Add</a></li><li><a href=\"#impl-Add%3CDuration%3E-for-Instant\">Add&lt;Duration&gt;</a></li><li><a href=\"#impl-Add%3CDuration%3E-for-SystemTime\">Add&lt;Duration&gt;</a></li><li><a href=\"#impl-AddAssign-for-Duration\">AddAssign</a></li><li><a href=\"#impl-AddAssign%3CDuration%3E-for-Instant\">AddAssign&lt;Duration&gt;</a></li><li><a href=\"#impl-AddAssign%3CDuration%3E-for-SystemTime\">AddAssign&lt;Duration&gt;</a></li><li><a href=\"#impl-Clone-for-Duration\">Clone</a></li><li><a href=\"#impl-Copy-for-Duration\">Copy</a></li><li><a href=\"#impl-Debug-for-Duration\">Debug</a></li><li><a href=\"#impl-Default-for-Duration\">Default</a></li><li><a href=\"#impl-Div%3Cu32%3E-for-Duration\">Div&lt;u32&gt;</a></li><li><a href=\"#impl-DivAssign%3Cu32%3E-for-Duration\">DivAssign&lt;u32&gt;</a></li><li><a href=\"#impl-Eq-for-Duration\">Eq</a></li><li><a href=\"#impl-Hash-for-Duration\">Hash</a></li><li><a href=\"#impl-Mul%3CDuration%3E-for-u32\">Mul&lt;Duration&gt;</a></li><li><a href=\"#impl-Mul%3Cu32%3E-for-Duration\">Mul&lt;u32&gt;</a></li><li><a href=\"#impl-MulAssign%3Cu32%3E-for-Duration\">MulAssign&lt;u32&gt;</a></li><li><a href=\"#impl-Ord-for-Duration\">Ord</a></li><li><a href=\"#impl-PartialEq-for-Duration\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-Duration\">PartialOrd</a></li><li><a href=\"#impl-StructuralPartialEq-for-Duration\">StructuralPartialEq</a></li><li><a href=\"#impl-Sub-for-Duration\">Sub</a></li><li><a href=\"#impl-Sub%3CDuration%3E-for-Instant\">Sub&lt;Duration&gt;</a></li><li><a href=\"#impl-Sub%3CDuration%3E-for-SystemTime\">Sub&lt;Duration&gt;</a></li><li><a href=\"#impl-SubAssign-for-Duration\">SubAssign</a></li><li><a href=\"#impl-SubAssign%3CDuration%3E-for-Instant\">SubAssign&lt;Duration&gt;</a></li><li><a href=\"#impl-SubAssign%3CDuration%3E-for-SystemTime\">SubAssign&lt;Duration&gt;</a></li><li><a href=\"#impl-Sum-for-Duration\">Sum</a></li><li><a href=\"#impl-Sum%3C%26Duration%3E-for-Duration\">Sum&lt;&amp;'a Duration&gt;</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Duration\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Duration\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Duration\">Send</a></li><li><a href=\"#impl-Sync-for-Duration\">Sync</a></li><li><a href=\"#impl-Unpin-for-Duration\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Duration\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::time</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Duration.html\">Duration</a></li><li><a href=\"struct.Instant.html\">Instant</a></li><li><a href=\"struct.SystemTime.html\">SystemTime</a></li><li><a href=\"struct.SystemTimeError.html\">SystemTimeError</a></li><li><a href=\"struct.TryFromFloatSecsError.html\">TryFromFloatSecsError</a></li></ul><h3><a href=\"index.html#constants\">Constants</a></h3><ul class=\"block constant\"><li><a href=\"constant.UNIX_EPOCH.html\">UNIX_EPOCH</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">time</a>::<wbr><a class=\"struct\" href=\"#\">Duration</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#98\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Duration { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A <code>Duration</code> type to represent a span of time, typically used for system\ntimeouts.</p>\n<p>Each <code>Duration</code> is composed of a whole number of seconds and a fractional part\nrepresented in nanoseconds. If the underlying system does not support\nnanosecond-level precision, APIs binding a system timeout will typically round up\nthe number of nanoseconds.</p>\n<p><a href=\"struct.Duration.html\" title=\"struct std::time::Duration\"><code>Duration</code></a>s implement many common traits, including <a href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\"><code>Add</code></a>, <a href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\"><code>Sub</code></a>, and other\n<a href=\"../ops/index.html\" title=\"mod std::ops\"><code>ops</code></a> traits. It implements <a href=\"../default/trait.Default.html\" title=\"trait std::default::Default\"><code>Default</code></a> by returning a zero-length <code>Duration</code>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">¬ß</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>five_seconds = Duration::new(<span class=\"number\">5</span>, <span class=\"number\">0</span>);\n<span class=\"kw\">let </span>five_seconds_and_five_nanos = five_seconds + Duration::new(<span class=\"number\">0</span>, <span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(five_seconds_and_five_nanos.as_secs(), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(five_seconds_and_five_nanos.subsec_nanos(), <span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>ten_millis = Duration::from_millis(<span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+five_seconds+=+Duration::new(5,+0);%0A++++let+five_seconds_and_five_nanos+=+five_seconds+%2B+Duration::new(0,+5);%0A++++%0A++++assert_eq!(five_seconds_and_five_nanos.as_secs(),+5);%0A++++assert_eq!(five_seconds_and_five_nanos.subsec_nanos(),+5);%0A++++%0A++++let+ten_millis+=+Duration::from_millis(10);%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"formatting-duration-values\"><a class=\"doc-anchor\" href=\"#formatting-duration-values\">¬ß</a>Formatting <code>Duration</code> values</h2>\n<p><code>Duration</code> intentionally does not have a <code>Display</code> impl, as there are a\nvariety of ways to format spans of time for human readability. <code>Duration</code>\nprovides a <code>Debug</code> impl that shows the full precision of the value.</p>\n<p>The <code>Debug</code> output uses the non-ASCII ‚Äú¬µs‚Äù suffix for microseconds. If your\nprogram output may appear in contexts that cannot rely on full Unicode\ncompatibility, you may wish to format <code>Duration</code> objects yourself or use a\ncrate to do so.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">¬ß</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Duration\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#103\">source</a><a href=\"#impl-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.SECOND\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#115\">source</a><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.SECOND\" class=\"constant\">SECOND</a>: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a> = _</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>duration_constants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/57391\">#57391</a>)</span></div></span></summary><div class=\"docblock\"><p>The duration of one second.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constants)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::SECOND, Duration::from_secs(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constants)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::SECOND,+Duration::from_secs(1));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MILLISECOND\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#128\">source</a><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MILLISECOND\" class=\"constant\">MILLISECOND</a>: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a> = _</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>duration_constants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/57391\">#57391</a>)</span></div></span></summary><div class=\"docblock\"><p>The duration of one millisecond.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constants)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::MILLISECOND, Duration::from_millis(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constants)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::MILLISECOND,+Duration::from_millis(1));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MICROSECOND\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#141\">source</a><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MICROSECOND\" class=\"constant\">MICROSECOND</a>: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a> = _</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>duration_constants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/57391\">#57391</a>)</span></div></span></summary><div class=\"docblock\"><p>The duration of one microsecond.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constants)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::MICROSECOND, Duration::from_micros(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constants)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::MICROSECOND,+Duration::from_micros(1));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.NANOSECOND\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#154\">source</a><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.NANOSECOND\" class=\"constant\">NANOSECOND</a>: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a> = _</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>duration_constants</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/57391\">#57391</a>)</span></div></span></summary><div class=\"docblock\"><p>The duration of one nanosecond.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constants)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::NANOSECOND, Duration::from_nanos(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constants)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::NANOSECOND,+Duration::from_nanos(1));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.ZERO\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#168\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.ZERO\" class=\"constant\">ZERO</a>: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a> = _</h4></section></summary><div class=\"docblock\"><p>A duration of zero time.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::ZERO;\n<span class=\"macro\">assert!</span>(duration.is_zero());\n<span class=\"macro\">assert_eq!</span>(duration.as_nanos(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::ZERO;%0A++++assert!(duration.is_zero());%0A++++assert_eq!(duration.as_nanos(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#187\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a> = _</h4></section></summary><div class=\"docblock\"><p>The maximum duration.</p>\n<p>May vary by platform as necessary. Must be able to contain the difference between\ntwo instances of <a href=\"../../std/time/struct.Instant.html\"><code>Instant</code></a> or two instances of <a href=\"../../std/time/struct.SystemTime.html\"><code>SystemTime</code></a>.\nThis constraint gives it a value of about 584,942,417,355 years in practice,\nwhich is currently used on all platforms.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::MAX, Duration::new(u64::MAX, <span class=\"number\">1_000_000_000 </span>- <span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::MAX,+Duration::new(u64::MAX,+1_000_000_000+-+1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0, const since 1.58.0\">1.3.0 (const: 1.58.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#211\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>(secs: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, nanos: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of whole seconds and\nadditional nanoseconds.</p>\n<p>If the number of nanoseconds is greater than 1 billion (the number of\nnanoseconds in a second), then it will carry over into the seconds provided.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">¬ß</a>Panics</h5>\n<p>This constructor will panic if the carry from the nanoseconds overflows\nthe seconds counter.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>five_seconds = Duration::new(<span class=\"number\">5</span>, <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+five_seconds+=+Duration::new(5,+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_secs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0, const since 1.32.0\">1.3.0 (const: 1.32.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#242\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_secs\" class=\"fn\">from_secs</a>(secs: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of whole seconds.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_secs(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5</span>, duration.as_secs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, duration.subsec_nanos());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_secs(5);%0A++++%0A++++assert_eq!(5,+duration.as_secs());%0A++++assert_eq!(0,+duration.subsec_nanos());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_millis\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0, const since 1.32.0\">1.3.0 (const: 1.32.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#262\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_millis\" class=\"fn\">from_millis</a>(millis: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of milliseconds.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_millis(<span class=\"number\">2569</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, duration.as_secs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">569_000_000</span>, duration.subsec_nanos());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_millis(2569);%0A++++%0A++++assert_eq!(2,+duration.as_secs());%0A++++assert_eq!(569_000_000,+duration.subsec_nanos());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_micros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0, const since 1.32.0\">1.27.0 (const: 1.32.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#288\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_micros\" class=\"fn\">from_micros</a>(micros: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of microseconds.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_micros(<span class=\"number\">1_000_002</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, duration.as_secs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2000</span>, duration.subsec_nanos());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_micros(1_000_002);%0A++++%0A++++assert_eq!(1,+duration.as_secs());%0A++++assert_eq!(2000,+duration.subsec_nanos());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_nanos\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0, const since 1.32.0\">1.27.0 (const: 1.32.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#319\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_nanos\" class=\"fn\">from_nanos</a>(nanos: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of nanoseconds.</p>\n<p>Note: Using this on the return value of <code>as_nanos()</code> might cause unexpected behavior:\n<code>as_nanos()</code> returns a u128, and can return values that do not fit in u64, e.g. 585 years.\nInstead, consider using the pattern <code>Duration::new(d.as_secs(), d.subsec_nanos())</code>\nif you cannot copy/clone the Duration directly.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_nanos(<span class=\"number\">1_000_000_123</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, duration.as_secs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">123</span>, duration.subsec_nanos());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_nanos(1_000_000_123);%0A++++%0A++++assert_eq!(1,+duration.as_secs());%0A++++assert_eq!(123,+duration.subsec_nanos());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_weeks\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#349\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.from_weeks\" class=\"fn\">from_weeks</a>(weeks: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>duration_constructors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120301\">#120301</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of weeks.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">¬ß</a>Panics</h5>\n<p>Panics if the given number of weeks overflows the <code>Duration</code> size.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constructors)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_weeks(<span class=\"number\">4</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">4 </span>* <span class=\"number\">7 </span>* <span class=\"number\">24 </span>* <span class=\"number\">60 </span>* <span class=\"number\">60</span>, duration.as_secs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, duration.subsec_nanos());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constructors)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_weeks(4);%0A++++%0A++++assert_eq!(4+*+7+*+24+*+60+*+60,+duration.as_secs());%0A++++assert_eq!(0,+duration.subsec_nanos());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_days\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.from_days\" class=\"fn\">from_days</a>(days: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>duration_constructors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120301\">#120301</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of days.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">¬ß</a>Panics</h5>\n<p>Panics if the given number of days overflows the <code>Duration</code> size.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constructors)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_days(<span class=\"number\">7</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">7 </span>* <span class=\"number\">24 </span>* <span class=\"number\">60 </span>* <span class=\"number\">60</span>, duration.as_secs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, duration.subsec_nanos());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constructors)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_days(7);%0A++++%0A++++assert_eq!(7+*+24+*+60+*+60,+duration.as_secs());%0A++++assert_eq!(0,+duration.subsec_nanos());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_hours\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#405\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.from_hours\" class=\"fn\">from_hours</a>(hours: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>duration_constructors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120301\">#120301</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of hours.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">¬ß</a>Panics</h5>\n<p>Panics if the given number of hours overflows the <code>Duration</code> size.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constructors)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_hours(<span class=\"number\">6</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">6 </span>* <span class=\"number\">60 </span>* <span class=\"number\">60</span>, duration.as_secs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, duration.subsec_nanos());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constructors)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_hours(6);%0A++++%0A++++assert_eq!(6+*+60+*+60,+duration.as_secs());%0A++++assert_eq!(0,+duration.subsec_nanos());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_mins\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#433\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.from_mins\" class=\"fn\">from_mins</a>(mins: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>duration_constructors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120301\">#120301</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of minutes.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">¬ß</a>Panics</h5>\n<p>Panics if the given number of minutes overflows the <code>Duration</code> size.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constructors)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_mins(<span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">10 </span>* <span class=\"number\">60</span>, duration.as_secs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, duration.subsec_nanos());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constructors)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_mins(10);%0A++++%0A++++assert_eq!(10+*+60,+duration.as_secs());%0A++++assert_eq!(0,+duration.subsec_nanos());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_zero\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#461\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_zero\" class=\"fn\">is_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if this <code>Duration</code> spans no time.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert!</span>(Duration::ZERO.is_zero());\n<span class=\"macro\">assert!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>).is_zero());\n<span class=\"macro\">assert!</span>(Duration::from_nanos(<span class=\"number\">0</span>).is_zero());\n<span class=\"macro\">assert!</span>(Duration::from_secs(<span class=\"number\">0</span>).is_zero());\n\n<span class=\"macro\">assert!</span>(!Duration::new(<span class=\"number\">1</span>, <span class=\"number\">1</span>).is_zero());\n<span class=\"macro\">assert!</span>(!Duration::from_nanos(<span class=\"number\">1</span>).is_zero());\n<span class=\"macro\">assert!</span>(!Duration::from_secs(<span class=\"number\">1</span>).is_zero());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert!(Duration::ZERO.is_zero());%0A++++assert!(Duration::new(0,+0).is_zero());%0A++++assert!(Duration::from_nanos(0).is_zero());%0A++++assert!(Duration::from_secs(0).is_zero());%0A++++%0A++++assert!(!Duration::new(1,+1).is_zero());%0A++++assert!(!Duration::from_nanos(1).is_zero());%0A++++assert!(!Duration::from_secs(1).is_zero());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_secs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0, const since 1.32.0\">1.3.0 (const: 1.32.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#489\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.as_secs\" class=\"fn\">as_secs</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of <em>whole</em> seconds contained by this <code>Duration</code>.</p>\n<p>The returned value does not include the fractional (nanosecond) part of the\nduration, which can be obtained using <a href=\"struct.Duration.html#method.subsec_nanos\" title=\"method std::time::Duration::subsec_nanos\"><code>subsec_nanos</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::new(<span class=\"number\">5</span>, <span class=\"number\">730023852</span>);\n<span class=\"macro\">assert_eq!</span>(duration.as_secs(), <span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::new(5,+730023852);%0A++++assert_eq!(duration.as_secs(),+5);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>To determine the total number of seconds represented by the <code>Duration</code>\nincluding the fractional part, use <a href=\"struct.Duration.html#method.as_secs_f64\" title=\"method std::time::Duration::as_secs_f64\"><code>as_secs_f64</code></a> or <a href=\"struct.Duration.html#method.as_secs_f32\" title=\"method std::time::Duration::as_secs_f32\"><code>as_secs_f32</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.subsec_millis\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0, const since 1.32.0\">1.27.0 (const: 1.32.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#512\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.subsec_millis\" class=\"fn\">subsec_millis</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the fractional part of this <code>Duration</code>, in whole milliseconds.</p>\n<p>This method does <strong>not</strong> return the length of the duration when\nrepresented by milliseconds. The returned number always represents a\nfractional portion of a second (i.e., it is less than one thousand).</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_millis(<span class=\"number\">5432</span>);\n<span class=\"macro\">assert_eq!</span>(duration.as_secs(), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(duration.subsec_millis(), <span class=\"number\">432</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_millis(5432);%0A++++assert_eq!(duration.as_secs(),+5);%0A++++assert_eq!(duration.subsec_millis(),+432);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.subsec_micros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0, const since 1.32.0\">1.27.0 (const: 1.32.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#535\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.subsec_micros\" class=\"fn\">subsec_micros</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the fractional part of this <code>Duration</code>, in whole microseconds.</p>\n<p>This method does <strong>not</strong> return the length of the duration when\nrepresented by microseconds. The returned number always represents a\nfractional portion of a second (i.e., it is less than one million).</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_micros(<span class=\"number\">1_234_567</span>);\n<span class=\"macro\">assert_eq!</span>(duration.as_secs(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(duration.subsec_micros(), <span class=\"number\">234_567</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_micros(1_234_567);%0A++++assert_eq!(duration.as_secs(),+1);%0A++++assert_eq!(duration.subsec_micros(),+234_567);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.subsec_nanos\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0, const since 1.32.0\">1.3.0 (const: 1.32.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#558\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.subsec_nanos\" class=\"fn\">subsec_nanos</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the fractional part of this <code>Duration</code>, in nanoseconds.</p>\n<p>This method does <strong>not</strong> return the length of the duration when\nrepresented by nanoseconds. The returned number always represents a\nfractional portion of a second (i.e., it is less than one billion).</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::from_millis(<span class=\"number\">5010</span>);\n<span class=\"macro\">assert_eq!</span>(duration.as_secs(), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(duration.subsec_nanos(), <span class=\"number\">10_000_000</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::from_millis(5010);%0A++++assert_eq!(duration.as_secs(),+5);%0A++++assert_eq!(duration.subsec_nanos(),+10_000_000);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_millis\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const since 1.33.0\">1.33.0 (const: 1.33.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#576\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.as_millis\" class=\"fn\">as_millis</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Returns the total number of whole milliseconds contained by this <code>Duration</code>.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::new(<span class=\"number\">5</span>, <span class=\"number\">730023852</span>);\n<span class=\"macro\">assert_eq!</span>(duration.as_millis(), <span class=\"number\">5730</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::new(5,+730023852);%0A++++assert_eq!(duration.as_millis(),+5730);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_micros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const since 1.33.0\">1.33.0 (const: 1.33.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#594\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.as_micros\" class=\"fn\">as_micros</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Returns the total number of whole microseconds contained by this <code>Duration</code>.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::new(<span class=\"number\">5</span>, <span class=\"number\">730023852</span>);\n<span class=\"macro\">assert_eq!</span>(duration.as_micros(), <span class=\"number\">5730023</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::new(5,+730023852);%0A++++assert_eq!(duration.as_micros(),+5730023);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_nanos\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const since 1.33.0\">1.33.0 (const: 1.33.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#612\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.as_nanos\" class=\"fn\">as_nanos</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Returns the total number of nanoseconds contained by this <code>Duration</code>.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>duration = Duration::new(<span class=\"number\">5</span>, <span class=\"number\">730023852</span>);\n<span class=\"macro\">assert_eq!</span>(duration.as_nanos(), <span class=\"number\">5730023852</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+duration+=+Duration::new(5,+730023852);%0A++++assert_eq!(duration.as_nanos(),+5730023852);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.abs_diff\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#633\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.abs_diff\" class=\"fn\">abs_diff</a>(self, other: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>duration_abs_diff</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/117618\">#117618</a>)</span></div></span></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_abs_diff)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">100</span>, <span class=\"number\">0</span>).abs_diff(Duration::new(<span class=\"number\">80</span>, <span class=\"number\">0</span>)), Duration::new(<span class=\"number\">20</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">100</span>, <span class=\"number\">400_000_000</span>).abs_diff(Duration::new(<span class=\"number\">110</span>, <span class=\"number\">0</span>)), Duration::new(<span class=\"number\">9</span>, <span class=\"number\">600_000_000</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_abs_diff)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::new(100,+0).abs_diff(Duration::new(80,+0)),+Duration::new(20,+0));%0A++++assert_eq!(Duration::new(100,+400_000_000).abs_diff(Duration::new(110,+0)),+Duration::new(9,+600_000_000));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0, const since 1.58.0\">1.16.0 (const: 1.58.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#655\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked <code>Duration</code> addition. Computes <code>self + other</code>, returning <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>\nif overflow occurred.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>).checked_add(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>)), <span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>)));\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>).checked_add(Duration::new(u64::MAX, <span class=\"number\">0</span>)), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::new(0,+0).checked_add(Duration::new(0,+1)),+Some(Duration::new(0,+1)));%0A++++assert_eq!(Duration::new(1,+0).checked_add(Duration::new(u64::MAX,+0)),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.58.0\">1.53.0 (const: 1.58.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#690\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Saturating <code>Duration</code> addition. Computes <code>self + other</code>, returning <a href=\"struct.Duration.html#associatedconstant.MAX\" title=\"associated constant std::time::Duration::MAX\"><code>Duration::MAX</code></a>\nif overflow occurred.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constants)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>).saturating_add(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>)), Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>).saturating_add(Duration::new(u64::MAX, <span class=\"number\">0</span>)), Duration::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constants)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::new(0,+0).saturating_add(Duration::new(0,+1)),+Duration::new(0,+1));%0A++++assert_eq!(Duration::new(1,+0).saturating_add(Duration::new(u64::MAX,+0)),+Duration::MAX);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0, const since 1.58.0\">1.16.0 (const: 1.58.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#715\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked <code>Duration</code> subtraction. Computes <code>self - other</code>, returning <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>\nif the result would be negative or if overflow occurred.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>).checked_sub(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)), <span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>)));\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>).checked_sub(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>)), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::new(0,+1).checked_sub(Duration::new(0,+0)),+Some(Duration::new(0,+1)));%0A++++assert_eq!(Duration::new(0,+0).checked_sub(Duration::new(0,+1)),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.58.0\">1.53.0 (const: 1.58.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#748\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Saturating <code>Duration</code> subtraction. Computes <code>self - other</code>, returning <a href=\"struct.Duration.html#associatedconstant.ZERO\" title=\"associated constant std::time::Duration::ZERO\"><code>Duration::ZERO</code></a>\nif the result would be negative or if overflow occurred.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>).saturating_sub(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)), Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>).saturating_sub(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>)), Duration::ZERO);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::new(0,+1).saturating_sub(Duration::new(0,+0)),+Duration::new(0,+1));%0A++++assert_eq!(Duration::new(0,+0).saturating_sub(Duration::new(0,+1)),+Duration::ZERO);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0, const since 1.58.0\">1.16.0 (const: 1.58.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#773\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked <code>Duration</code> multiplication. Computes <code>self * other</code>, returning\n<a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if overflow occurred.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">500_000_001</span>).checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">2</span>)));\n<span class=\"macro\">assert_eq!</span>(Duration::new(u64::MAX - <span class=\"number\">1</span>, <span class=\"number\">0</span>).checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::new(0,+500_000_001).checked_mul(2),+Some(Duration::new(1,+2)));%0A++++assert_eq!(Duration::new(u64::MAX+-+1,+0).checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.58.0\">1.53.0 (const: 1.58.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#804\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Saturating <code>Duration</code> multiplication. Computes <code>self * other</code>, returning\n<a href=\"struct.Duration.html#associatedconstant.MAX\" title=\"associated constant std::time::Duration::MAX\"><code>Duration::MAX</code></a> if overflow occurred.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_constants)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">500_000_001</span>).saturating_mul(<span class=\"number\">2</span>), Duration::new(<span class=\"number\">1</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(Duration::new(u64::MAX - <span class=\"number\">1</span>, <span class=\"number\">0</span>).saturating_mul(<span class=\"number\">2</span>), Duration::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_constants)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::new(0,+500_000_001).saturating_mul(2),+Duration::new(1,+2));%0A++++assert_eq!(Duration::new(u64::MAX+-+1,+0).saturating_mul(2),+Duration::MAX);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0, const since 1.58.0\">1.16.0 (const: 1.58.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#830\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked <code>Duration</code> division. Computes <code>self / other</code>, returning <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>\nif <code>other == 0</code>.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">2</span>, <span class=\"number\">0</span>).checked_div(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>)));\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>).checked_div(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">500_000_000</span>)));\n<span class=\"macro\">assert_eq!</span>(Duration::new(<span class=\"number\">2</span>, <span class=\"number\">0</span>).checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++assert_eq!(Duration::new(2,+0).checked_div(2),+Some(Duration::new(1,+0)));%0A++++assert_eq!(Duration::new(1,+0).checked_div(2),+Some(Duration::new(0,+500_000_000)));%0A++++assert_eq!(Duration::new(2,+0).checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_secs_f64\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const unstable\">1.38.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72440\" title=\"Tracking issue for duration_consts_float\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#858\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_secs_f64\" class=\"fn\">as_secs_f64</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of seconds contained by this <code>Duration</code> as <code>f64</code>.</p>\n<p>The returned value does include the fractional (nanosecond) part of the duration.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur.as_secs_f64(), <span class=\"number\">2.7</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur+=+Duration::new(2,+700_000_000);%0A++++assert_eq!(dur.as_secs_f64(),+2.7);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_secs_f32\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const unstable\">1.38.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72440\" title=\"Tracking issue for duration_consts_float\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#877\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_secs_f32\" class=\"fn\">as_secs_f32</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.f32.html\">f32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of seconds contained by this <code>Duration</code> as <code>f32</code>.</p>\n<p>The returned value does include the fractional (nanosecond) part of the duration.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur.as_secs_f32(), <span class=\"number\">2.7</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur+=+Duration::new(2,+700_000_000);%0A++++assert_eq!(dur.as_secs_f32(),+2.7);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_millis_f64\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#897\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.as_millis_f64\" class=\"fn\">as_millis_f64</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.f64.html\">f64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>duration_millis_float</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/122451\">#122451</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of milliseconds contained by this <code>Duration</code> as <code>f64</code>.</p>\n<p>The returned value does include the fractional (nanosecond) part of the duration.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_millis_float)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">345_678_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur.as_millis_f64(), <span class=\"number\">2345.678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_millis_float)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur+=+Duration::new(2,+345_678_000);%0A++++assert_eq!(dur.as_millis_f64(),+2345.678);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_millis_f32\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#918\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.as_millis_f32\" class=\"fn\">as_millis_f32</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.f32.html\">f32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>duration_millis_float</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/122451\">#122451</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of milliseconds contained by this <code>Duration</code> as <code>f32</code>.</p>\n<p>The returned value does include the fractional (nanosecond) part of the duration.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(duration_millis_float)]\n</span><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">345_678_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur.as_millis_f32(), <span class=\"number\">2345.678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(duration_millis_float)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur+=+Duration::new(2,+345_678_000);%0A++++assert_eq!(dur.as_millis_f32(),+2345.678);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_secs_f64\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#953\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_secs_f64\" class=\"fn\">from_secs_f64</a>(secs: <a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of seconds represented\nas <code>f64</code>.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">¬ß</a>Panics</h5>\n<p>This constructor will panic if <code>secs</code> is negative, overflows <code>Duration</code> or not finite.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>res = Duration::from_secs_f64(<span class=\"number\">0.0</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>));\n<span class=\"kw\">let </span>res = Duration::from_secs_f64(<span class=\"number\">1e-20</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>));\n<span class=\"kw\">let </span>res = Duration::from_secs_f64(<span class=\"number\">4.2e-7</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">420</span>));\n<span class=\"kw\">let </span>res = Duration::from_secs_f64(<span class=\"number\">2.7</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>));\n<span class=\"kw\">let </span>res = Duration::from_secs_f64(<span class=\"number\">3e10</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">30_000_000_000</span>, <span class=\"number\">0</span>));\n<span class=\"comment\">// subnormal float\n</span><span class=\"kw\">let </span>res = Duration::from_secs_f64(f64::from_bits(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>));\n<span class=\"comment\">// conversion uses rounding\n</span><span class=\"kw\">let </span>res = Duration::from_secs_f64(<span class=\"number\">0.999e-9</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+res+=+Duration::from_secs_f64(0.0);%0A++++assert_eq!(res,+Duration::new(0,+0));%0A++++let+res+=+Duration::from_secs_f64(1e-20);%0A++++assert_eq!(res,+Duration::new(0,+0));%0A++++let+res+=+Duration::from_secs_f64(4.2e-7);%0A++++assert_eq!(res,+Duration::new(0,+420));%0A++++let+res+=+Duration::from_secs_f64(2.7);%0A++++assert_eq!(res,+Duration::new(2,+700_000_000));%0A++++let+res+=+Duration::from_secs_f64(3e10);%0A++++assert_eq!(res,+Duration::new(30_000_000_000,+0));%0A++++//+subnormal+float%0A++++let+res+=+Duration::from_secs_f64(f64::from_bits(1));%0A++++assert_eq!(res,+Duration::new(0,+0));%0A++++//+conversion+uses+rounding%0A++++let+res+=+Duration::from_secs_f64(0.999e-9);%0A++++assert_eq!(res,+Duration::new(0,+1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_secs_f32\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#990\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_secs_f32\" class=\"fn\">from_secs_f32</a>(secs: <a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Duration</code> from the specified number of seconds represented\nas <code>f32</code>.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">¬ß</a>Panics</h5>\n<p>This constructor will panic if <code>secs</code> is negative, overflows <code>Duration</code> or not finite.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>res = Duration::from_secs_f32(<span class=\"number\">0.0</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>));\n<span class=\"kw\">let </span>res = Duration::from_secs_f32(<span class=\"number\">1e-20</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>));\n<span class=\"kw\">let </span>res = Duration::from_secs_f32(<span class=\"number\">4.2e-7</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">420</span>));\n<span class=\"kw\">let </span>res = Duration::from_secs_f32(<span class=\"number\">2.7</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_048</span>));\n<span class=\"kw\">let </span>res = Duration::from_secs_f32(<span class=\"number\">3e10</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">30_000_001_024</span>, <span class=\"number\">0</span>));\n<span class=\"comment\">// subnormal float\n</span><span class=\"kw\">let </span>res = Duration::from_secs_f32(f32::from_bits(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>));\n<span class=\"comment\">// conversion uses rounding\n</span><span class=\"kw\">let </span>res = Duration::from_secs_f32(<span class=\"number\">0.999e-9</span>);\n<span class=\"macro\">assert_eq!</span>(res, Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+res+=+Duration::from_secs_f32(0.0);%0A++++assert_eq!(res,+Duration::new(0,+0));%0A++++let+res+=+Duration::from_secs_f32(1e-20);%0A++++assert_eq!(res,+Duration::new(0,+0));%0A++++let+res+=+Duration::from_secs_f32(4.2e-7);%0A++++assert_eq!(res,+Duration::new(0,+420));%0A++++let+res+=+Duration::from_secs_f32(2.7);%0A++++assert_eq!(res,+Duration::new(2,+700_000_048));%0A++++let+res+=+Duration::from_secs_f32(3e10);%0A++++assert_eq!(res,+Duration::new(30_000_001_024,+0));%0A++++//+subnormal+float%0A++++let+res+=+Duration::from_secs_f32(f32::from_bits(1));%0A++++assert_eq!(res,+Duration::new(0,+0));%0A++++//+conversion+uses+rounding%0A++++let+res+=+Duration::from_secs_f32(0.999e-9);%0A++++assert_eq!(res,+Duration::new(0,+1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul_f64\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1014\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.mul_f64\" class=\"fn\">mul_f64</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Multiplies <code>Duration</code> by <code>f64</code>.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">¬ß</a>Panics</h5>\n<p>This method will panic if result is negative, overflows <code>Duration</code> or not finite.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur.mul_f64(<span class=\"number\">3.14</span>), Duration::new(<span class=\"number\">8</span>, <span class=\"number\">478_000_000</span>));\n<span class=\"macro\">assert_eq!</span>(dur.mul_f64(<span class=\"number\">3.14e5</span>), Duration::new(<span class=\"number\">847_800</span>, <span class=\"number\">0</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur+=+Duration::new(2,+700_000_000);%0A++++assert_eq!(dur.mul_f64(3.14),+Duration::new(8,+478_000_000));%0A++++assert_eq!(dur.mul_f64(3.14e5),+Duration::new(847_800,+0));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul_f32\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.mul_f32\" class=\"fn\">mul_f32</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Multiplies <code>Duration</code> by <code>f32</code>.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">¬ß</a>Panics</h5>\n<p>This method will panic if result is negative, overflows <code>Duration</code> or not finite.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur.mul_f32(<span class=\"number\">3.14</span>), Duration::new(<span class=\"number\">8</span>, <span class=\"number\">478_000_641</span>));\n<span class=\"macro\">assert_eq!</span>(dur.mul_f32(<span class=\"number\">3.14e5</span>), Duration::new(<span class=\"number\">847800</span>, <span class=\"number\">0</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur+=+Duration::new(2,+700_000_000);%0A++++assert_eq!(dur.mul_f32(3.14),+Duration::new(8,+478_000_641));%0A++++assert_eq!(dur.mul_f32(3.14e5),+Duration::new(847800,+0));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div_f64\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1056\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.div_f64\" class=\"fn\">div_f64</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Divide <code>Duration</code> by <code>f64</code>.</p>\n<h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">¬ß</a>Panics</h5>\n<p>This method will panic if result is negative, overflows <code>Duration</code> or not finite.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur.div_f64(<span class=\"number\">3.14</span>), Duration::new(<span class=\"number\">0</span>, <span class=\"number\">859_872_611</span>));\n<span class=\"macro\">assert_eq!</span>(dur.div_f64(<span class=\"number\">3.14e5</span>), Duration::new(<span class=\"number\">0</span>, <span class=\"number\">8_599</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur+=+Duration::new(2,+700_000_000);%0A++++assert_eq!(dur.div_f64(3.14),+Duration::new(0,+859_872_611));%0A++++assert_eq!(dur.div_f64(3.14e5),+Duration::new(0,+8_599));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div_f32\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1079\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.div_f32\" class=\"fn\">div_f32</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Divide <code>Duration</code> by <code>f32</code>.</p>\n<h5 id=\"panics-10\"><a class=\"doc-anchor\" href=\"#panics-10\">¬ß</a>Panics</h5>\n<p>This method will panic if result is negative, overflows <code>Duration</code> or not finite.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>);\n<span class=\"comment\">// note that due to rounding errors result is slightly\n// different from 0.859_872_611\n</span><span class=\"macro\">assert_eq!</span>(dur.div_f32(<span class=\"number\">3.14</span>), Duration::new(<span class=\"number\">0</span>, <span class=\"number\">859_872_580</span>));\n<span class=\"macro\">assert_eq!</span>(dur.div_f32(<span class=\"number\">3.14e5</span>), Duration::new(<span class=\"number\">0</span>, <span class=\"number\">8_599</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur+=+Duration::new(2,+700_000_000);%0A++++//+note+that+due+to+rounding+errors+result+is+slightly%0A++++//+different+from+0.859_872_611%0A++++assert_eq!(dur.div_f32(3.14),+Duration::new(0,+859_872_580));%0A++++assert_eq!(dur.div_f32(3.14e5),+Duration::new(0,+8_599));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div_duration_f64\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const unstable\">1.80.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72440\" title=\"Tracking issue for duration_consts_float\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1098\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.div_duration_f64\" class=\"fn\">div_duration_f64</a>(self, rhs: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"primitive\" href=\"../primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Divide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur1 = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>);\n<span class=\"kw\">let </span>dur2 = Duration::new(<span class=\"number\">5</span>, <span class=\"number\">400_000_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur1.div_duration_f64(dur2), <span class=\"number\">0.5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur1+=+Duration::new(2,+700_000_000);%0A++++let+dur2+=+Duration::new(5,+400_000_000);%0A++++assert_eq!(dur1.div_duration_f64(dur2),+0.5);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div_duration_f32\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const unstable\">1.80.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72440\" title=\"Tracking issue for duration_consts_float\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1119\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.div_duration_f32\" class=\"fn\">div_duration_f32</a>(self, rhs: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"primitive\" href=\"../primitive.f32.html\">f32</a></h4></section></summary><div class=\"docblock\"><p>Divide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>dur1 = Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>);\n<span class=\"kw\">let </span>dur2 = Duration::new(<span class=\"number\">5</span>, <span class=\"number\">400_000_000</span>);\n<span class=\"macro\">assert_eq!</span>(dur1.div_duration_f32(dur2), <span class=\"number\">0.5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+dur1+=+Duration::new(2,+700_000_000);%0A++++let+dur2+=+Duration::new(5,+400_000_000);%0A++++assert_eq!(dur1.div_duration_f32(dur2),+0.5);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Duration-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1568\">source</a><a href=\"#impl-Duration-1\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from_secs_f32\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_from_secs_f32\" class=\"fn\">try_from_secs_f32</a>(secs: <a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>, <a class=\"struct\" href=\"struct.TryFromFloatSecsError.html\" title=\"struct std::time::TryFromFloatSecsError\">TryFromFloatSecsError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>The checked version of <a href=\"struct.Duration.html#method.from_secs_f32\" title=\"associated function std::time::Duration::from_secs_f32\"><code>from_secs_f32</code></a>.</p>\n<p>This constructor will return an <code>Err</code> if <code>secs</code> is negative, overflows <code>Duration</code> or not finite.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(<span class=\"number\">0.0</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(<span class=\"number\">1e-20</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(<span class=\"number\">4.2e-7</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">420</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(<span class=\"number\">2.7</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_048</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(<span class=\"number\">3e10</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">30_000_001_024</span>, <span class=\"number\">0</span>)));\n<span class=\"comment\">// subnormal float:\n</span><span class=\"kw\">let </span>res = Duration::try_from_secs_f32(f32::from_bits(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(-<span class=\"number\">5.0</span>);\n<span class=\"macro\">assert!</span>(res.is_err());\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(f32::NAN);\n<span class=\"macro\">assert!</span>(res.is_err());\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(<span class=\"number\">2e19</span>);\n<span class=\"macro\">assert!</span>(res.is_err());\n\n<span class=\"comment\">// the conversion uses rounding with tie resolution to even\n</span><span class=\"kw\">let </span>res = Duration::try_from_secs_f32(<span class=\"number\">0.999e-9</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>)));\n\n<span class=\"comment\">// this float represents exactly 976562.5e-9\n</span><span class=\"kw\">let </span>val = f32::from_bits(<span class=\"number\">0x3A80_0000</span>);\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(val);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">976_562</span>)));\n\n<span class=\"comment\">// this float represents exactly 2929687.5e-9\n</span><span class=\"kw\">let </span>val = f32::from_bits(<span class=\"number\">0x3B40_0000</span>);\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(val);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">2_929_688</span>)));\n\n<span class=\"comment\">// this float represents exactly 1.000_976_562_5\n</span><span class=\"kw\">let </span>val = f32::from_bits(<span class=\"number\">0x3F802000</span>);\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(val);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">976_562</span>)));\n\n<span class=\"comment\">// this float represents exactly 1.002_929_687_5\n</span><span class=\"kw\">let </span>val = f32::from_bits(<span class=\"number\">0x3F806000</span>);\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f32(val);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">2_929_688</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+res+=+Duration::try_from_secs_f32(0.0);%0A++++assert_eq!(res,+Ok(Duration::new(0,+0)));%0A++++let+res+=+Duration::try_from_secs_f32(1e-20);%0A++++assert_eq!(res,+Ok(Duration::new(0,+0)));%0A++++let+res+=+Duration::try_from_secs_f32(4.2e-7);%0A++++assert_eq!(res,+Ok(Duration::new(0,+420)));%0A++++let+res+=+Duration::try_from_secs_f32(2.7);%0A++++assert_eq!(res,+Ok(Duration::new(2,+700_000_048)));%0A++++let+res+=+Duration::try_from_secs_f32(3e10);%0A++++assert_eq!(res,+Ok(Duration::new(30_000_001_024,+0)));%0A++++//+subnormal+float:%0A++++let+res+=+Duration::try_from_secs_f32(f32::from_bits(1));%0A++++assert_eq!(res,+Ok(Duration::new(0,+0)));%0A++++%0A++++let+res+=+Duration::try_from_secs_f32(-5.0);%0A++++assert!(res.is_err());%0A++++let+res+=+Duration::try_from_secs_f32(f32::NAN);%0A++++assert!(res.is_err());%0A++++let+res+=+Duration::try_from_secs_f32(2e19);%0A++++assert!(res.is_err());%0A++++%0A++++//+the+conversion+uses+rounding+with+tie+resolution+to+even%0A++++let+res+=+Duration::try_from_secs_f32(0.999e-9);%0A++++assert_eq!(res,+Ok(Duration::new(0,+1)));%0A++++%0A++++//+this+float+represents+exactly+976562.5e-9%0A++++let+val+=+f32::from_bits(0x3A80_0000);%0A++++let+res+=+Duration::try_from_secs_f32(val);%0A++++assert_eq!(res,+Ok(Duration::new(0,+976_562)));%0A++++%0A++++//+this+float+represents+exactly+2929687.5e-9%0A++++let+val+=+f32::from_bits(0x3B40_0000);%0A++++let+res+=+Duration::try_from_secs_f32(val);%0A++++assert_eq!(res,+Ok(Duration::new(0,+2_929_688)));%0A++++%0A++++//+this+float+represents+exactly+1.000_976_562_5%0A++++let+val+=+f32::from_bits(0x3F802000);%0A++++let+res+=+Duration::try_from_secs_f32(val);%0A++++assert_eq!(res,+Ok(Duration::new(1,+976_562)));%0A++++%0A++++//+this+float+represents+exactly+1.002_929_687_5%0A++++let+val+=+f32::from_bits(0x3F806000);%0A++++let+res+=+Duration::try_from_secs_f32(val);%0A++++assert_eq!(res,+Ok(Duration::new(1,+2_929_688)));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from_secs_f64\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_from_secs_f64\" class=\"fn\">try_from_secs_f64</a>(secs: <a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>, <a class=\"struct\" href=\"struct.TryFromFloatSecsError.html\" title=\"struct std::time::TryFromFloatSecsError\">TryFromFloatSecsError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>The checked version of <a href=\"struct.Duration.html#method.from_secs_f64\" title=\"associated function std::time::Duration::from_secs_f64\"><code>from_secs_f64</code></a>.</p>\n<p>This constructor will return an <code>Err</code> if <code>secs</code> is negative, overflows <code>Duration</code> or not finite.</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">0.0</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">1e-20</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">4.2e-7</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">420</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">2.7</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">2</span>, <span class=\"number\">700_000_000</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">3e10</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">30_000_000_000</span>, <span class=\"number\">0</span>)));\n<span class=\"comment\">// subnormal float\n</span><span class=\"kw\">let </span>res = Duration::try_from_secs_f64(f64::from_bits(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(-<span class=\"number\">5.0</span>);\n<span class=\"macro\">assert!</span>(res.is_err());\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(f64::NAN);\n<span class=\"macro\">assert!</span>(res.is_err());\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">2e19</span>);\n<span class=\"macro\">assert!</span>(res.is_err());\n\n<span class=\"comment\">// the conversion uses rounding with tie resolution to even\n</span><span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">0.999e-9</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">1</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">0.999_999_999_499</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">999_999_999</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">0.999_999_999_501</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">42.999_999_999_499</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">42</span>, <span class=\"number\">999_999_999</span>)));\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(<span class=\"number\">42.999_999_999_501</span>);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">43</span>, <span class=\"number\">0</span>)));\n\n<span class=\"comment\">// this float represents exactly 976562.5e-9\n</span><span class=\"kw\">let </span>val = f64::from_bits(<span class=\"number\">0x3F50_0000_0000_0000</span>);\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(val);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">976_562</span>)));\n\n<span class=\"comment\">// this float represents exactly 2929687.5e-9\n</span><span class=\"kw\">let </span>val = f64::from_bits(<span class=\"number\">0x3F68_0000_0000_0000</span>);\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(val);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">2_929_688</span>)));\n\n<span class=\"comment\">// this float represents exactly 1.000_976_562_5\n</span><span class=\"kw\">let </span>val = f64::from_bits(<span class=\"number\">0x3FF0_0400_0000_0000</span>);\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(val);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">976_562</span>)));\n\n<span class=\"comment\">// this float represents exactly 1.002_929_687_5\n</span><span class=\"kw\">let </span>val = f64::from_bits(<span class=\"number\">0x3_FF00_C000_0000_000</span>);\n<span class=\"kw\">let </span>res = Duration::try_from_secs_f64(val);\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">2_929_688</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Duration;%0A++++%0A++++let+res+=+Duration::try_from_secs_f64(0.0);%0A++++assert_eq!(res,+Ok(Duration::new(0,+0)));%0A++++let+res+=+Duration::try_from_secs_f64(1e-20);%0A++++assert_eq!(res,+Ok(Duration::new(0,+0)));%0A++++let+res+=+Duration::try_from_secs_f64(4.2e-7);%0A++++assert_eq!(res,+Ok(Duration::new(0,+420)));%0A++++let+res+=+Duration::try_from_secs_f64(2.7);%0A++++assert_eq!(res,+Ok(Duration::new(2,+700_000_000)));%0A++++let+res+=+Duration::try_from_secs_f64(3e10);%0A++++assert_eq!(res,+Ok(Duration::new(30_000_000_000,+0)));%0A++++//+subnormal+float%0A++++let+res+=+Duration::try_from_secs_f64(f64::from_bits(1));%0A++++assert_eq!(res,+Ok(Duration::new(0,+0)));%0A++++%0A++++let+res+=+Duration::try_from_secs_f64(-5.0);%0A++++assert!(res.is_err());%0A++++let+res+=+Duration::try_from_secs_f64(f64::NAN);%0A++++assert!(res.is_err());%0A++++let+res+=+Duration::try_from_secs_f64(2e19);%0A++++assert!(res.is_err());%0A++++%0A++++//+the+conversion+uses+rounding+with+tie+resolution+to+even%0A++++let+res+=+Duration::try_from_secs_f64(0.999e-9);%0A++++assert_eq!(res,+Ok(Duration::new(0,+1)));%0A++++let+res+=+Duration::try_from_secs_f64(0.999_999_999_499);%0A++++assert_eq!(res,+Ok(Duration::new(0,+999_999_999)));%0A++++let+res+=+Duration::try_from_secs_f64(0.999_999_999_501);%0A++++assert_eq!(res,+Ok(Duration::new(1,+0)));%0A++++let+res+=+Duration::try_from_secs_f64(42.999_999_999_499);%0A++++assert_eq!(res,+Ok(Duration::new(42,+999_999_999)));%0A++++let+res+=+Duration::try_from_secs_f64(42.999_999_999_501);%0A++++assert_eq!(res,+Ok(Duration::new(43,+0)));%0A++++%0A++++//+this+float+represents+exactly+976562.5e-9%0A++++let+val+=+f64::from_bits(0x3F50_0000_0000_0000);%0A++++let+res+=+Duration::try_from_secs_f64(val);%0A++++assert_eq!(res,+Ok(Duration::new(0,+976_562)));%0A++++%0A++++//+this+float+represents+exactly+2929687.5e-9%0A++++let+val+=+f64::from_bits(0x3F68_0000_0000_0000);%0A++++let+res+=+Duration::try_from_secs_f64(val);%0A++++assert_eq!(res,+Ok(Duration::new(0,+2_929_688)));%0A++++%0A++++//+this+float+represents+exactly+1.000_976_562_5%0A++++let+val+=+f64::from_bits(0x3FF0_0400_0000_0000);%0A++++let+res+=+Duration::try_from_secs_f64(val);%0A++++assert_eq!(res,+Ok(Duration::new(1,+976_562)));%0A++++%0A++++//+this+float+represents+exactly+1.002_929_687_5%0A++++let+val+=+f64::from_bits(0x3_FF00_C000_0000_000);%0A++++let+res+=+Duration::try_from_secs_f64(val);%0A++++assert_eq!(res,+Ok(Duration::new(1,+2_929_688)));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add%3CDuration%3E-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/time.rs.html#409-419\">source</a></span><a href=\"#impl-Add%3CDuration%3E-for-Instant\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#416-418\">source</a><a href=\"#method.add-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-11\"><a class=\"doc-anchor\" href=\"#panics-11\">¬ß</a>Panics</h5>\n<p>This function may panic if the resulting point in time cannot be represented by the\nunderlying data structure. See <a href=\"struct.Instant.html#method.checked_add\" title=\"method std::time::Instant::checked_add\"><code>Instant::checked_add</code></a> for a version without panic.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add%3CDuration%3E-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/time.rs.html#593-603\">source</a></span><a href=\"#impl-Add%3CDuration%3E-for-SystemTime\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#600-602\">source</a><a href=\"#method.add-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, dur: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-12\"><a class=\"doc-anchor\" href=\"#panics-12\">¬ß</a>Panics</h5>\n<p>This function may panic if the resulting point in time cannot be represented by the\nunderlying data structure. See <a href=\"struct.SystemTime.html#method.checked_add\" title=\"method std::time::SystemTime::checked_add\"><code>SystemTime::checked_add</code></a> for a version without panic.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1127\">source</a></span><a href=\"#impl-Add-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1131\">source</a><a href=\"#method.add\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AddAssign%3CDuration%3E-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/time.rs.html#422-426\">source</a></span><a href=\"#impl-AddAssign%3CDuration%3E-for-Instant\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#423-425\">source</a><a href=\"#method.add_assign-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>+=</code> operation. <a href=\"../ops/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AddAssign%3CDuration%3E-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/time.rs.html#606-610\">source</a></span><a href=\"#impl-AddAssign%3CDuration%3E-for-SystemTime\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#607-609\">source</a><a href=\"#method.add_assign-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>+=</code> operation. <a href=\"../ops/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AddAssign-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1137\">source</a></span><a href=\"#impl-AddAssign-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1139\">source</a><a href=\"#method.add_assign\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>+=</code> operation. <a href=\"../ops/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a></span><a href=\"#impl-Clone-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a><a href=\"#method.clone\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1249\">source</a></span><a href=\"#impl-Debug-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1250\">source</a><a href=\"#method.fmt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a></span><a href=\"#impl-Default-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a><a href=\"#method.default\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\">Returns the ‚Äúdefault value‚Äù for a type. <a href=\"../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div%3Cu32%3E-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1191\">source</a></span><a href=\"#impl-Div%3Cu32%3E-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1195\">source</a><a href=\"#method.div\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DivAssign%3Cu32%3E-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1201\">source</a></span><a href=\"#impl-DivAssign%3Cu32%3E-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1203\">source</a><a href=\"#method.div_assign\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>/=</code> operation. <a href=\"../ops/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a></span><a href=\"#impl-Hash-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a><a href=\"#method.hash\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul%3CDuration%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1173\">source</a></span><a href=\"#impl-Mul%3CDuration%3E-for-u32\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1177\">source</a><a href=\"#method.mul-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul%3Cu32%3E-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1163\">source</a></span><a href=\"#impl-Mul%3Cu32%3E-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1167\">source</a><a href=\"#method.mul\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-MulAssign%3Cu32%3E-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1183\">source</a></span><a href=\"#impl-MulAssign%3Cu32%3E-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1185\">source</a><a href=\"#method.mul_assign\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>*=</code> operation. <a href=\"../ops/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a></span><a href=\"#impl-Ord-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a><a href=\"#method.cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a></span><a href=\"#impl-PartialEq-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a><a href=\"#method.eq\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a></span><a href=\"#impl-PartialOrd-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub%3CDuration%3E-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/time.rs.html#429-435\">source</a></span><a href=\"#impl-Sub%3CDuration%3E-for-Instant\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#432-434\">source</a><a href=\"#method.sub-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub%3CDuration%3E-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/time.rs.html#613-619\">source</a></span><a href=\"#impl-Sub%3CDuration%3E-for-SystemTime\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#616-618\">source</a><a href=\"#method.sub-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, dur: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1145\">source</a></span><a href=\"#impl-Sub-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1149\">source</a><a href=\"#method.sub\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SubAssign%3CDuration%3E-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/time.rs.html#438-442\">source</a></span><a href=\"#impl-SubAssign%3CDuration%3E-for-Instant\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#439-441\">source</a><a href=\"#method.sub_assign-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>-=</code> operation. <a href=\"../ops/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SubAssign%3CDuration%3E-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/time.rs.html#622-626\">source</a></span><a href=\"#impl-SubAssign%3CDuration%3E-for-SystemTime\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#623-625\">source</a><a href=\"#method.sub_assign-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>-=</code> operation. <a href=\"../ops/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SubAssign-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1155\">source</a></span><a href=\"#impl-SubAssign-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1157\">source</a><a href=\"#method.sub_assign\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>-=</code> operation. <a href=\"../ops/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum%3C%26Duration%3E-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1242\">source</a></span><a href=\"#impl-Sum%3C%26Duration%3E-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1243\">source</a><a href=\"#method.sum\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1235\">source</a></span><a href=\"#impl-Sum-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#1236\">source</a><a href=\"#method.sum-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><section id=\"impl-Copy-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a></span><a href=\"#impl-Copy-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section><section id=\"impl-Eq-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a></span><a href=\"#impl-Eq-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section><section id=\"impl-StructuralPartialEq-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Duration\" class=\"impl\"><a href=\"#impl-Freeze-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section><section id=\"impl-RefUnwindSafe-for-Duration\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section><section id=\"impl-Send-for-Duration\" class=\"impl\"><a href=\"#impl-Send-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section><section id=\"impl-Sync-for-Duration\" class=\"impl\"><a href=\"#impl-Sync-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section><section id=\"impl-Unpin-for-Duration\" class=\"impl\"><a href=\"#impl-Unpin-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section><section id=\"impl-UnwindSafe-for-Duration\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Duration\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:55.347Z"
}