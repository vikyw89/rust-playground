{
	"title": "thread_local in std - Rust",
	"url": "https://doc.rust-lang.org/stable/std/macro.thread_local.html",
	"markdown": "# thread\\_local in std - Rust\n\n```\nmacro_rules! thread_local {\n    () => { ... };\n    ($(#[$attr:meta])* $vis:vis static $name:ident: $t:ty = const $init:block; $($rest:tt)*) => { ... };\n    ($(#[$attr:meta])* $vis:vis static $name:ident: $t:ty = const $init:block) => { ... };\n    ($(#[$attr:meta])* $vis:vis static $name:ident: $t:ty = $init:expr; $($rest:tt)*) => { ... };\n    ($(#[$attr:meta])* $vis:vis static $name:ident: $t:ty = $init:expr) => { ... };\n}\n```\n\nExpand description\n\nDeclare a new thread local storage key of type [`std::thread::LocalKey`](thread/struct.LocalKey.html \"struct std::thread::LocalKey\").\n\n## [ยง](#syntax)Syntax\n\nThe macro wraps any number of static declarations and makes them thread local. Publicity and attributes for each static are allowed. Example:\n\n```\nuse std::cell::{Cell, RefCell};\n\nthread_local! {\n    pub static FOO: Cell<u32> = Cell::new(1);\n\n    static BAR: RefCell<Vec<f32>> = RefCell::new(vec![1.0, 2.0]);\n}\n\nassert_eq!(FOO.get(), 1);\nBAR.with_borrow(|v| assert_eq!(v[1], 2.0));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::%7BCell,+RefCell%7D;%0A++++%0A++++thread_local!+%7B%0A++++++++pub+static+FOO:+Cell%3Cu32%3E+=+Cell::new(1);%0A++++%0A++++++++static+BAR:+RefCell%3CVec%3Cf32%3E%3E+=+RefCell::new(vec!%5B1.0,+2.0%5D);%0A++++%7D%0A++++%0A++++assert_eq!(FOO.get(),+1);%0A++++BAR.with_borrow(%7Cv%7C+assert_eq!(v%5B1%5D,+2.0));%0A%7D&edition=2021)\n\nNote that only shared references (`&T`) to the inner data may be obtained, so a type such as [`Cell`](cell/struct.Cell.html \"struct std::cell::Cell\") or [`RefCell`](cell/struct.RefCell.html \"struct std::cell::RefCell\") is typically used to allow mutating access.\n\nThis macro supports a special `const {}` syntax that can be used when the initialization expression can be evaluated as a constant. This can enable a more efficient thread local implementation that can avoid lazy initialization. For types that do not [need to be dropped](mem/fn.needs_drop.html \"fn std::mem::needs_drop\"), this can enable an even more efficient implementation that does not need to track any additional state.\n\n```\nuse std::cell::RefCell;\n\nthread_local! {\n    pub static FOO: RefCell<Vec<u32>> = const { RefCell::new(Vec::new()) };\n}\n\nFOO.with_borrow(|v| assert_eq!(v.len(), 0));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++thread_local!+%7B%0A++++++++pub+static+FOO:+RefCell%3CVec%3Cu32%3E%3E+=+const+%7B+RefCell::new(Vec::new())+%7D;%0A++++%7D%0A++++%0A++++FOO.with_borrow(%7Cv%7C+assert_eq!(v.len(),+0));%0A%7D&edition=2021)\n\nSee [`LocalKey` documentation](thread/struct.LocalKey.html \"struct std::thread::LocalKey\") for more information.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Declare a new thread local storage key of type `std::thread::LocalKey`.\"><title>thread_local in std - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc macro\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h3><a href=\"index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"primitive.array.html\">array</a></li><li><a href=\"primitive.bool.html\">bool</a></li><li><a href=\"primitive.char.html\">char</a></li><li><a href=\"primitive.f128.html\">f128</a></li><li><a href=\"primitive.f16.html\">f16</a></li><li><a href=\"primitive.f32.html\">f32</a></li><li><a href=\"primitive.f64.html\">f64</a></li><li><a href=\"primitive.fn.html\">fn</a></li><li><a href=\"primitive.i128.html\">i128</a></li><li><a href=\"primitive.i16.html\">i16</a></li><li><a href=\"primitive.i32.html\">i32</a></li><li><a href=\"primitive.i64.html\">i64</a></li><li><a href=\"primitive.i8.html\">i8</a></li><li><a href=\"primitive.isize.html\">isize</a></li><li><a href=\"primitive.never.html\">never</a></li><li><a href=\"primitive.pointer.html\">pointer</a></li><li><a href=\"primitive.reference.html\">reference</a></li><li><a href=\"primitive.slice.html\">slice</a></li><li><a href=\"primitive.str.html\">str</a></li><li><a href=\"primitive.tuple.html\">tuple</a></li><li><a href=\"primitive.u128.html\">u128</a></li><li><a href=\"primitive.u16.html\">u16</a></li><li><a href=\"primitive.u32.html\">u32</a></li><li><a href=\"primitive.u64.html\">u64</a></li><li><a href=\"primitive.u8.html\">u8</a></li><li><a href=\"primitive.unit.html\">unit</a></li><li><a href=\"primitive.usize.html\">usize</a></li></ul><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"alloc/index.html\">alloc</a></li><li><a href=\"any/index.html\">any</a></li><li><a href=\"arch/index.html\">arch</a></li><li><a href=\"array/index.html\">array</a></li><li><a href=\"ascii/index.html\">ascii</a></li><li><a href=\"assert_matches/index.html\">assert_matches</a></li><li><a href=\"async_iter/index.html\">async_iter</a></li><li><a href=\"backtrace/index.html\">backtrace</a></li><li><a href=\"borrow/index.html\">borrow</a></li><li><a href=\"boxed/index.html\">boxed</a></li><li><a href=\"cell/index.html\">cell</a></li><li><a href=\"char/index.html\">char</a></li><li><a href=\"clone/index.html\">clone</a></li><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"collections/index.html\">collections</a></li><li><a href=\"convert/index.html\">convert</a></li><li><a href=\"default/index.html\">default</a></li><li><a href=\"env/index.html\">env</a></li><li><a href=\"error/index.html\">error</a></li><li><a href=\"f128/index.html\">f128</a></li><li><a href=\"f16/index.html\">f16</a></li><li><a href=\"f32/index.html\">f32</a></li><li><a href=\"f64/index.html\">f64</a></li><li><a href=\"ffi/index.html\">ffi</a></li><li><a href=\"fmt/index.html\">fmt</a></li><li><a href=\"fs/index.html\">fs</a></li><li><a href=\"future/index.html\">future</a></li><li><a href=\"hash/index.html\">hash</a></li><li><a href=\"hint/index.html\">hint</a></li><li><a href=\"i128/index.html\">i128</a></li><li><a href=\"i16/index.html\">i16</a></li><li><a href=\"i32/index.html\">i32</a></li><li><a href=\"i64/index.html\">i64</a></li><li><a href=\"i8/index.html\">i8</a></li><li><a href=\"intrinsics/index.html\">intrinsics</a></li><li><a href=\"io/index.html\">io</a></li><li><a href=\"isize/index.html\">isize</a></li><li><a href=\"iter/index.html\">iter</a></li><li><a href=\"marker/index.html\">marker</a></li><li><a href=\"mem/index.html\">mem</a></li><li><a href=\"net/index.html\">net</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"ops/index.html\">ops</a></li><li><a href=\"option/index.html\">option</a></li><li><a href=\"os/index.html\">os</a></li><li><a href=\"panic/index.html\">panic</a></li><li><a href=\"pat/index.html\">pat</a></li><li><a href=\"path/index.html\">path</a></li><li><a href=\"pin/index.html\">pin</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"primitive/index.html\">primitive</a></li><li><a href=\"process/index.html\">process</a></li><li><a href=\"ptr/index.html\">ptr</a></li><li><a href=\"rc/index.html\">rc</a></li><li><a href=\"result/index.html\">result</a></li><li><a href=\"simd/index.html\">simd</a></li><li><a href=\"slice/index.html\">slice</a></li><li><a href=\"str/index.html\">str</a></li><li><a href=\"string/index.html\">string</a></li><li><a href=\"sync/index.html\">sync</a></li><li><a href=\"task/index.html\">task</a></li><li><a href=\"thread/index.html\">thread</a></li><li><a href=\"time/index.html\">time</a></li><li><a href=\"u128/index.html\">u128</a></li><li><a href=\"u16/index.html\">u16</a></li><li><a href=\"u32/index.html\">u32</a></li><li><a href=\"u64/index.html\">u64</a></li><li><a href=\"u8/index.html\">u8</a></li><li><a href=\"usize/index.html\">usize</a></li><li><a href=\"vec/index.html\">vec</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.assert.html\">assert</a></li><li><a href=\"macro.assert_eq.html\">assert_eq</a></li><li><a href=\"macro.assert_ne.html\">assert_ne</a></li><li><a href=\"macro.cfg.html\">cfg</a></li><li><a href=\"macro.cfg_match.html\">cfg_match</a></li><li><a href=\"macro.column.html\">column</a></li><li><a href=\"macro.compile_error.html\">compile_error</a></li><li><a href=\"macro.concat.html\">concat</a></li><li><a href=\"macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"macro.concat_idents.html\">concat_idents</a></li><li><a href=\"macro.const_format_args.html\">const_format_args</a></li><li><a href=\"macro.dbg.html\">dbg</a></li><li><a href=\"macro.debug_assert.html\">debug_assert</a></li><li><a href=\"macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"macro.env.html\">env</a></li><li><a href=\"macro.eprint.html\">eprint</a></li><li><a href=\"macro.eprintln.html\">eprintln</a></li><li><a href=\"macro.file.html\">file</a></li><li><a href=\"macro.format.html\">format</a></li><li><a href=\"macro.format_args.html\">format_args</a></li><li><a href=\"macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"macro.include.html\">include</a></li><li><a href=\"macro.include_bytes.html\">include_bytes</a></li><li><a href=\"macro.include_str.html\">include_str</a></li><li><a href=\"macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"macro.line.html\">line</a></li><li><a href=\"macro.log_syntax.html\">log_syntax</a></li><li><a href=\"macro.matches.html\">matches</a></li><li><a href=\"macro.module_path.html\">module_path</a></li><li><a href=\"macro.option_env.html\">option_env</a></li><li><a href=\"macro.panic.html\">panic</a></li><li><a href=\"macro.print.html\">print</a></li><li><a href=\"macro.println.html\">println</a></li><li><a href=\"macro.stringify.html\">stringify</a></li><li><a href=\"macro.thread_local.html\">thread_local</a></li><li><a href=\"macro.todo.html\">todo</a></li><li><a href=\"macro.trace_macros.html\">trace_macros</a></li><li><a href=\"macro.try.html\">try</a></li><li><a href=\"macro.unimplemented.html\">unimplemented</a></li><li><a href=\"macro.unreachable.html\">unreachable</a></li><li><a href=\"macro.vec.html\">vec</a></li><li><a href=\"macro.write.html\">write</a></li><li><a href=\"macro.writeln.html\">writeln</a></li></ul><h3><a href=\"index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"keyword.as.html\">as</a></li><li><a href=\"keyword.async.html\">async</a></li><li><a href=\"keyword.await.html\">await</a></li><li><a href=\"keyword.break.html\">break</a></li><li><a href=\"keyword.const.html\">const</a></li><li><a href=\"keyword.continue.html\">continue</a></li><li><a href=\"keyword.crate.html\">crate</a></li><li><a href=\"keyword.dyn.html\">dyn</a></li><li><a href=\"keyword.else.html\">else</a></li><li><a href=\"keyword.enum.html\">enum</a></li><li><a href=\"keyword.extern.html\">extern</a></li><li><a href=\"keyword.false.html\">false</a></li><li><a href=\"keyword.fn.html\">fn</a></li><li><a href=\"keyword.for.html\">for</a></li><li><a href=\"keyword.if.html\">if</a></li><li><a href=\"keyword.impl.html\">impl</a></li><li><a href=\"keyword.in.html\">in</a></li><li><a href=\"keyword.let.html\">let</a></li><li><a href=\"keyword.loop.html\">loop</a></li><li><a href=\"keyword.match.html\">match</a></li><li><a href=\"keyword.mod.html\">mod</a></li><li><a href=\"keyword.move.html\">move</a></li><li><a href=\"keyword.mut.html\">mut</a></li><li><a href=\"keyword.pub.html\">pub</a></li><li><a href=\"keyword.ref.html\">ref</a></li><li><a href=\"keyword.return.html\">return</a></li><li><a href=\"keyword.self.html\">self</a></li><li><a href=\"keyword.static.html\">static</a></li><li><a href=\"keyword.struct.html\">struct</a></li><li><a href=\"keyword.super.html\">super</a></li><li><a href=\"keyword.trait.html\">trait</a></li><li><a href=\"keyword.true.html\">true</a></li><li><a href=\"keyword.type.html\">type</a></li><li><a href=\"keyword.union.html\">union</a></li><li><a href=\"keyword.unsafe.html\">unsafe</a></li><li><a href=\"keyword.use.html\">use</a></li><li><a href=\"keyword.where.html\">where</a></li><li><a href=\"keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type โSโ or โ/โ to search, โ?โ for more optionsโฆ\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Macro <a href=\"index.html\">std</a>::<wbr><a class=\"macro\" href=\"#\">thread_local</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"../src/std/thread/local.rs.html#185-208\">source</a> ยท <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>โ</span>]</button></span></div><pre class=\"rust item-decl\"><span class=\"macro\">macro_rules!</span> thread_local {\n    () =&gt; { ... };\n    ($(<span class=\"attr\">#[<span class=\"macro-nonterminal\">$attr</span>:meta]</span>)* <span class=\"macro-nonterminal\">$vis</span>:vis <span class=\"kw\">static </span><span class=\"macro-nonterminal\">$name</span>:ident: <span class=\"macro-nonterminal\">$t</span>:ty = <span class=\"kw\">const </span><span class=\"macro-nonterminal\">$init</span>:block; $(<span class=\"macro-nonterminal\">$rest</span>:tt)<span class=\"kw-2\">*</span>) =&gt; { ... };\n    ($(<span class=\"attr\">#[<span class=\"macro-nonterminal\">$attr</span>:meta]</span>)* <span class=\"macro-nonterminal\">$vis</span>:vis <span class=\"kw\">static </span><span class=\"macro-nonterminal\">$name</span>:ident: <span class=\"macro-nonterminal\">$t</span>:ty = <span class=\"kw\">const </span><span class=\"macro-nonterminal\">$init</span>:block) =&gt; { ... };\n    ($(<span class=\"attr\">#[<span class=\"macro-nonterminal\">$attr</span>:meta]</span>)* <span class=\"macro-nonterminal\">$vis</span>:vis <span class=\"kw\">static </span><span class=\"macro-nonterminal\">$name</span>:ident: <span class=\"macro-nonterminal\">$t</span>:ty = <span class=\"macro-nonterminal\">$init</span>:expr; $(<span class=\"macro-nonterminal\">$rest</span>:tt)<span class=\"kw-2\">*</span>) =&gt; { ... };\n    ($(<span class=\"attr\">#[<span class=\"macro-nonterminal\">$attr</span>:meta]</span>)* <span class=\"macro-nonterminal\">$vis</span>:vis <span class=\"kw\">static </span><span class=\"macro-nonterminal\">$name</span>:ident: <span class=\"macro-nonterminal\">$t</span>:ty = <span class=\"macro-nonterminal\">$init</span>:expr) =&gt; { ... };\n}</pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Declare a new thread local storage key of type <a href=\"thread/struct.LocalKey.html\" title=\"struct std::thread::LocalKey\"><code>std::thread::LocalKey</code></a>.</p>\n<h2 id=\"syntax\"><a class=\"doc-anchor\" href=\"#syntax\">ยง</a>Syntax</h2>\n<p>The macro wraps any number of static declarations and makes them thread local.\nPublicity and attributes for each static are allowed. Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::{Cell, RefCell};\n\n<span class=\"macro\">thread_local!</span> {\n    <span class=\"kw\">pub static </span>FOO: Cell&lt;u32&gt; = Cell::new(<span class=\"number\">1</span>);\n\n    <span class=\"kw\">static </span>BAR: RefCell&lt;Vec&lt;f32&gt;&gt; = RefCell::new(<span class=\"macro\">vec!</span>[<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>]);\n}\n\n<span class=\"macro\">assert_eq!</span>(FOO.get(), <span class=\"number\">1</span>);\nBAR.with_borrow(|v| <span class=\"macro\">assert_eq!</span>(v[<span class=\"number\">1</span>], <span class=\"number\">2.0</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::%7BCell,+RefCell%7D;%0A++++%0A++++thread_local!+%7B%0A++++++++pub+static+FOO:+Cell%3Cu32%3E+=+Cell::new(1);%0A++++%0A++++++++static+BAR:+RefCell%3CVec%3Cf32%3E%3E+=+RefCell::new(vec!%5B1.0,+2.0%5D);%0A++++%7D%0A++++%0A++++assert_eq!(FOO.get(),+1);%0A++++BAR.with_borrow(%7Cv%7C+assert_eq!(v%5B1%5D,+2.0));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Note that only shared references (<code>&amp;T</code>) to the inner data may be obtained, so a\ntype such as <a href=\"cell/struct.Cell.html\" title=\"struct std::cell::Cell\"><code>Cell</code></a> or <a href=\"cell/struct.RefCell.html\" title=\"struct std::cell::RefCell\"><code>RefCell</code></a> is typically used to allow mutating access.</p>\n<p>This macro supports a special <code>const {}</code> syntax that can be used\nwhen the initialization expression can be evaluated as a constant.\nThis can enable a more efficient thread local implementation that\ncan avoid lazy initialization. For types that do not\n<a href=\"mem/fn.needs_drop.html\" title=\"fn std::mem::needs_drop\">need to be dropped</a>, this can enable an\neven more efficient implementation that does not need to\ntrack any additional state.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"macro\">thread_local!</span> {\n    <span class=\"kw\">pub static </span>FOO: RefCell&lt;Vec&lt;u32&gt;&gt; = <span class=\"kw\">const </span>{ RefCell::new(Vec::new()) };\n}\n\nFOO.with_borrow(|v| <span class=\"macro\">assert_eq!</span>(v.len(), <span class=\"number\">0</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++thread_local!+%7B%0A++++++++pub+static+FOO:+RefCell%3CVec%3Cu32%3E%3E+=+const+%7B+RefCell::new(Vec::new())+%7D;%0A++++%7D%0A++++%0A++++FOO.with_borrow(%7Cv%7C+assert_eq!(v.len(),+0));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>See <a href=\"thread/struct.LocalKey.html\" title=\"struct std::thread::LocalKey\"><code>LocalKey</code> documentation</a> for more\ninformation.</p>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:17.239Z"
}