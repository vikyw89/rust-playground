{
	"title": "OpenOptionsExt in std::os::unix::fs - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/unix/fs/trait.OpenOptionsExt.html",
	"markdown": "# OpenOptionsExt in std::os::unix::fs - Rust\n\n```\npub trait OpenOptionsExt {\n    // Required methods\n    fn mode(&mut self, mode: u32) -> &mut Self;\n    fn custom_flags(&mut self, flags: i32) -> &mut Self;\n}\n```\n\nAvailable on **Unix** only.\n\nExpand description\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#379)\n\nSets the mode bits that a new file will be created with.\n\nIf a new file is created as part of an `OpenOptions::open` call then this specified `mode` will be used as the permission bits for the new file. If no `mode` is set, the default of `0o666` will be used. The operating system masks out bits with the system’s `umask`, to produce the final permissions.\n\n##### [§](#examples)Examples\n\n```\nuse std::fs::OpenOptions;\nuse std::os::unix::fs::OpenOptionsExt;\n\nlet mut options = OpenOptions::new();\noptions.mode(0o644); // Give read/write for owner and read for others.\nlet file = options.open(\"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::OpenOptions;%0Ause+std::os::unix::fs::OpenOptionsExt;%0A%0Afn+main()+%7B%0Alet+mut+options+=+OpenOptions::new();%0Aoptions.mode(0o644);+//+Give+read/write+for+owner+and+read+for+others.%0Alet+file+=+options.open(%22foo.txt%22);%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/fs.rs.html#406)\n\nPass custom flags to the `flags` argument of `open`.\n\nThe bits that define the access mode are masked out with `O_ACCMODE`, to ensure they do not interfere with the access mode set by Rusts options.\n\nCustom flags can only set flags, not remove flags set by Rusts options. This options overwrites any previously set custom flags.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::fs::OpenOptions;\nuse std::os::unix::fs::OpenOptionsExt;\n\nlet mut options = OpenOptions::new();\noptions.write(true);\nif cfg!(unix) {\n    options.custom_flags(libc::O_NOFOLLOW);\n}\nlet file = options.open(\"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(rustc_private)%5D%0Ause+std::fs::OpenOptions;%0Ause+std::os::unix::fs::OpenOptionsExt;%0A%0Afn+main()+%7B%0Alet+mut+options+=+OpenOptions::new();%0Aoptions.write(true);%0Aif+cfg!(unix)+%7B%0A++++options.custom_flags(libc::O_NOFOLLOW);%0A%7D%0Alet+file+=+options.open(%22foo.txt%22);%0A%7D&version=nightly&edition=2021)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#410-420)[§](#impl-OpenOptionsExt-for-OpenOptions)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Unix-specific extensions to `fs::OpenOptions`.\"><title>OpenOptionsExt in std::os::unix::fs - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">OpenOptionsExt</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">OpenOptionsExt</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.custom_flags\">custom_flags</a></li><li><a href=\"#tymethod.mode\">mode</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::os::unix::fs</a></h2><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.DirBuilderExt.html\">DirBuilderExt</a></li><li><a href=\"trait.DirEntryExt.html\">DirEntryExt</a></li><li><a href=\"trait.DirEntryExt2.html\">DirEntryExt2</a></li><li><a href=\"trait.FileExt.html\">FileExt</a></li><li><a href=\"trait.FileTypeExt.html\">FileTypeExt</a></li><li><a href=\"trait.MetadataExt.html\">MetadataExt</a></li><li><a href=\"trait.OpenOptionsExt.html\">OpenOptionsExt</a></li><li><a href=\"trait.PermissionsExt.html\">PermissionsExt</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.chown.html\">chown</a></li><li><a href=\"fn.chroot.html\">chroot</a></li><li><a href=\"fn.fchown.html\">fchown</a></li><li><a href=\"fn.lchown.html\">lchown</a></li><li><a href=\"fn.symlink.html\">symlink</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">unix</a>::<wbr><a href=\"index.html\">fs</a>::<wbr><a class=\"trait\" href=\"#\">OpenOptionsExt</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#357-407\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait OpenOptionsExt {\n    // Required methods\n    fn <a href=\"#tymethod.mode\" class=\"fn\">mode</a>(&amp;mut self, mode: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.custom_flags\" class=\"fn\">custom_flags</a>(&amp;mut self, flags: <a class=\"primitive\" href=\"../../../primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a>;\n}</code></pre><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Unix-specific extensions to <a href=\"../../../fs/struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\"><code>fs::OpenOptions</code></a>.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.mode\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#379\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.mode\" class=\"fn\">mode</a>(&amp;mut self, mode: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a></h4></section></summary><div class=\"docblock\"><p>Sets the mode bits that a new file will be created with.</p>\n<p>If a new file is created as part of an <code>OpenOptions::open</code> call then this\nspecified <code>mode</code> will be used as the permission bits for the new file.\nIf no <code>mode</code> is set, the default of <code>0o666</code> will be used.\nThe operating system masks out bits with the system’s <code>umask</code>, to produce\nthe final permissions.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::OpenOptions;\n<span class=\"kw\">use </span>std::os::unix::fs::OpenOptionsExt;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>options = OpenOptions::new();\noptions.mode(<span class=\"number\">0o644</span>); <span class=\"comment\">// Give read/write for owner and read for others.\n</span><span class=\"kw\">let </span>file = options.open(<span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::OpenOptions;%0Ause+std::os::unix::fs::OpenOptionsExt;%0A%0Afn+main()+%7B%0Alet+mut+options+=+OpenOptions::new();%0Aoptions.mode(0o644);+//+Give+read/write+for+owner+and+read+for+others.%0Alet+file+=+options.open(%22foo.txt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.custom_flags\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#406\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.custom_flags\" class=\"fn\">custom_flags</a>(&amp;mut self, flags: <a class=\"primitive\" href=\"../../../primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a></h4></section></summary><div class=\"docblock\"><p>Pass custom flags to the <code>flags</code> argument of <code>open</code>.</p>\n<p>The bits that define the access mode are masked out with <code>O_ACCMODE</code>, to\nensure they do not interfere with the access mode set by Rusts options.</p>\n<p>Custom flags can only set flags, not remove flags set by Rusts options.\nThis options overwrites any previously set custom flags.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::OpenOptions;\n<span class=\"kw\">use </span>std::os::unix::fs::OpenOptionsExt;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>options = OpenOptions::new();\noptions.write(<span class=\"bool-val\">true</span>);\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(unix) {\n    options.custom_flags(libc::O_NOFOLLOW);\n}\n<span class=\"kw\">let </span>file = options.open(<span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(rustc_private)%5D%0Ause+std::fs::OpenOptions;%0Ause+std::os::unix::fs::OpenOptionsExt;%0A%0Afn+main()+%7B%0Alet+mut+options+=+OpenOptions::new();%0Aoptions.write(true);%0Aif+cfg!(unix)+%7B%0A++++options.custom_flags(libc::O_NOFOLLOW);%0A%7D%0Alet+file+=+options.open(%22foo.txt%22);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-OpenOptionsExt-for-OpenOptions\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#410-420\">source</a></span><a href=\"#impl-OpenOptionsExt-for-OpenOptions\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.OpenOptionsExt.html\" title=\"trait std::os::unix::fs::OpenOptionsExt\">OpenOptionsExt</a> for <a class=\"struct\" href=\"../../../fs/struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h3></section></div><script src=\"../../../../trait.impl/std/os/unix/fs/trait.OpenOptionsExt.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:26.143Z"
}