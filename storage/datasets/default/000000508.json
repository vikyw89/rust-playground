{
	"title": "FromIterator in std::iter - Rust",
	"url": "https://doc.rust-lang.org/stable/std/iter/trait.FromIterator.html",
	"markdown": "# FromIterator in std::iter - Rust\n\n```\npub trait FromIterator<A>: Sized {\n    // Required method\n    fn from_iter<T>(iter: T) -> Self\n       where T: IntoIterator<Item = A>;\n}\n```\n\nExpand description\n\nConversion from an [`Iterator`](trait.Iterator.html \"trait std::iter::Iterator\").\n\nBy implementing `FromIterator` for a type, you define how it will be created from an iterator. This is common for types which describe a collection of some kind.\n\nIf you want to create a collection from the contents of an iterator, the [`Iterator::collect()`](about:blank/trait.Iterator.html#method.collect \"method std::iter::Iterator::collect\") method is preferred. However, when you need to specify the container type, [`FromIterator::from_iter()`](about:blank/trait.FromIterator.html#tymethod.from_iter \"associated function std::iter::FromIterator::from_iter\") can be more readable than using a turbofish (e.g. `::<Vec<_>>()`). See the [`Iterator::collect()`](about:blank/trait.Iterator.html#method.collect \"method std::iter::Iterator::collect\") documentation for more examples of its use.\n\nSee also: [`IntoIterator`](trait.IntoIterator.html \"trait std::iter::IntoIterator\").\n\n## [§](#examples)Examples\n\nBasic usage:\n\n```\nlet five_fives = std::iter::repeat(5).take(5);\n\nlet v = Vec::from_iter(five_fives);\n\nassert_eq!(v, vec![5, 5, 5, 5, 5]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+five_fives+=+std::iter::repeat(5).take(5);%0A++++%0A++++let+v+=+Vec::from_iter(five_fives);%0A++++%0A++++assert_eq!(v,+vec!%5B5,+5,+5,+5,+5%5D);%0A%7D&edition=2021)\n\nUsing [`Iterator::collect()`](about:blank/trait.Iterator.html#method.collect \"method std::iter::Iterator::collect\") to implicitly use `FromIterator`:\n\n```\nlet five_fives = std::iter::repeat(5).take(5);\n\nlet v: Vec<i32> = five_fives.collect();\n\nassert_eq!(v, vec![5, 5, 5, 5, 5]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+five_fives+=+std::iter::repeat(5).take(5);%0A++++%0A++++let+v:+Vec%3Ci32%3E+=+five_fives.collect();%0A++++%0A++++assert_eq!(v,+vec!%5B5,+5,+5,+5,+5%5D);%0A%7D&edition=2021)\n\nUsing [`FromIterator::from_iter()`](about:blank/trait.FromIterator.html#tymethod.from_iter \"associated function std::iter::FromIterator::from_iter\") as a more readable alternative to [`Iterator::collect()`](about:blank/trait.Iterator.html#method.collect \"method std::iter::Iterator::collect\"):\n\n```\nuse std::collections::VecDeque;\nlet first = (0..10).collect::<VecDeque<i32>>();\nlet second = VecDeque::from_iter(0..10);\n\nassert_eq!(first, second);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++let+first+=+(0..10).collect::%3CVecDeque%3Ci32%3E%3E();%0A++++let+second+=+VecDeque::from_iter(0..10);%0A++++%0A++++assert_eq!(first,+second);%0A%7D&edition=2021)\n\nImplementing `FromIterator` for your type:\n\n```\n// A sample collection, that's just a wrapper over Vec<T>\n#[derive(Debug)]\nstruct MyCollection(Vec<i32>);\n\n// Let's give it some methods so we can create one and add things\n// to it.\nimpl MyCollection {\n    fn new() -> MyCollection {\n        MyCollection(Vec::new())\n    }\n\n    fn add(&mut self, elem: i32) {\n        self.0.push(elem);\n    }\n}\n\n// and we'll implement FromIterator\nimpl FromIterator<i32> for MyCollection {\n    fn from_iter<I: IntoIterator<Item=i32>>(iter: I) -> Self {\n        let mut c = MyCollection::new();\n\n        for i in iter {\n            c.add(i);\n        }\n\n        c\n    }\n}\n\n// Now we can make a new iterator...\nlet iter = (0..5).into_iter();\n\n// ... and make a MyCollection out of it\nlet c = MyCollection::from_iter(iter);\n\nassert_eq!(c.0, vec![0, 1, 2, 3, 4]);\n\n// collect works too!\n\nlet iter = (0..5).into_iter();\nlet c: MyCollection = iter.collect();\n\nassert_eq!(c.0, vec![0, 1, 2, 3, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+A+sample+collection,+that%27s+just+a+wrapper+over+Vec%3CT%3E%0Afn+main()+%7B%0A++++%23%5Bderive(Debug)%5D%0A++++struct+MyCollection(Vec%3Ci32%3E);%0A++++%0A++++//+Let%27s+give+it+some+methods+so+we+can+create+one+and+add+things%0A++++//+to+it.%0A++++impl+MyCollection+%7B%0A++++++++fn+new()+-%3E+MyCollection+%7B%0A++++++++++++MyCollection(Vec::new())%0A++++++++%7D%0A++++%0A++++++++fn+add(%26mut+self,+elem:+i32)+%7B%0A++++++++++++self.0.push(elem);%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+and+we%27ll+implement+FromIterator%0A++++impl+FromIterator%3Ci32%3E+for+MyCollection+%7B%0A++++++++fn+from_iter%3CI:+IntoIterator%3CItem=i32%3E%3E(iter:+I)+-%3E+Self+%7B%0A++++++++++++let+mut+c+=+MyCollection::new();%0A++++%0A++++++++++++for+i+in+iter+%7B%0A++++++++++++++++c.add(i);%0A++++++++++++%7D%0A++++%0A++++++++++++c%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+Now+we+can+make+a+new+iterator...%0A++++let+iter+=+(0..5).into_iter();%0A++++%0A++++//+...+and+make+a+MyCollection+out+of+it%0A++++let+c+=+MyCollection::from_iter(iter);%0A++++%0A++++assert_eq!(c.0,+vec!%5B0,+1,+2,+3,+4%5D);%0A++++%0A++++//+collect+works+too!%0A++++%0A++++let+iter+=+(0..5).into_iter();%0A++++let+c:+MyCollection+=+iter.collect();%0A++++%0A++++assert_eq!(c.0,+vec!%5B0,+1,+2,+3,+4%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#150)\n\nCreates a value from an iterator.\n\nSee the [module-level documentation](index.html \"mod std::iter\") for more.\n\n##### [§](#examples-1)Examples\n\n```\nlet five_fives = std::iter::repeat(5).take(5);\n\nlet v = Vec::from_iter(five_fives);\n\nassert_eq!(v, vec![5, 5, 5, 5, 5]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+five_fives+=+std::iter::repeat(5).take(5);%0A++++%0A++++let+v+=+Vec::from_iter(five_fives);%0A++++%0A++++assert_eq!(v,+vec!%5B5,+5,+5,+5,+5%5D);%0A%7D&edition=2021)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2171)[§](#impl-FromIterator%3Cchar%3E-for-Box%3Cstr%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2113)[§](#impl-FromIterator%3Cchar%3E-for-String)\n\n1.23.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/unit.rs.html#15)[§](#impl-FromIterator%3C()%3E-for-())\n\nCollapses all unit items from an iterator into one.\n\nThis is more useful when combined with higher-level abstractions, like collecting to a `Result<(), E>` where you only care about errors:\n\n```\nuse std::io::*;\nlet data = vec![1, 2, 3, 4, 5];\nlet res: Result<()> = data.iter()\n    .map(|x| writeln!(stdout(), \"{x}\"))\n    .collect();\nassert!(res.is_ok());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::*;%0A++++let+data+=+vec!%5B1,+2,+3,+4,+5%5D;%0A++++let+res:+Result%3C()%3E+=+data.iter()%0A++++++++.map(%7Cx%7C+writeln!(stdout(),+%22%7Bx%7D%22))%0A++++++++.collect();%0A++++assert!(res.is_ok());%0A%7D&edition=2021)\n\n1.52.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1653-1669)[§](#impl-FromIterator%3COsString%3E-for-OsString)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2195)[§](#impl-FromIterator%3CString%3E-for-Box%3Cstr%3E)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2143)[§](#impl-FromIterator%3CString%3E-for-String)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2179)[§](#impl-FromIterator%3C%26char%3E-for-Box%3Cstr%3E)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2123)[§](#impl-FromIterator%3C%26char%3E-for-String)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2187)[§](#impl-FromIterator%3C%26str%3E-for-Box%3Cstr%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2133)[§](#impl-FromIterator%3C%26str%3E-for-String)\n\n1.52.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1672-1681)[§](#impl-FromIterator%3C%26OsStr%3E-for-OsString)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2211)[§](#impl-FromIterator%3CCow%3C'a,+str%3E%3E-for-Box%3Cstr%3E)\n\n1.19.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2172)[§](#impl-FromIterator%3CCow%3C'a,+str%3E%3E-for-String)\n\n1.52.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1684-1705)[§](#impl-FromIterator%3CCow%3C'a,+OsStr%3E%3E-for-OsString)\n\n1.12.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2875)[§](#impl-FromIterator%3Cchar%3E-for-Cow%3C'a,+str%3E)\n\n1.12.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2891)[§](#impl-FromIterator%3CString%3E-for-Cow%3C'a,+str%3E)\n\n1.12.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2883)[§](#impl-FromIterator%3C%26str%3E-for-Cow%3C'a,+str%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/cow.rs.html#58-60)[§](#impl-FromIterator%3CT%3E-for-Cow%3C'a,+%5BT%5D%3E)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2203)[§](#impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-Box%3Cstr%3E)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2162)[§](#impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-String)\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#173-176)[§](#impl-FromIterator%3C(AE,+BE)%3E-for-(A,+B))\n\nThis implementation turns an iterator of tuples into a tuple of types which implement [`Default`](../default/trait.Default.html \"trait std::default::Default\") and [`Extend`](trait.Extend.html \"trait std::iter::Extend\").\n\nThis is similar to [`Iterator::unzip`](about:blank/trait.Iterator.html#method.unzip \"method std::iter::Iterator::unzip\"), but is also composable with other [`FromIterator`](trait.FromIterator.html \"trait std::iter::FromIterator\") implementations:\n\n```\nlet string = \"1,2,123,4\";\n\nlet (numbers, lengths): (Vec<_>, Vec<_>) = string\n    .split(',')\n    .map(|s| s.parse().map(|n: u32| (n, s.len())))\n    .collect::<Result<_, _>>()?;\n\nassert_eq!(numbers, [1, 2, 123, 4]);\nassert_eq!(lengths, [1, 1, 3, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+Result%3C(),+core::num::ParseIntError%3E+%7B%0Alet+string+=+%221,2,123,4%22;%0A%0Alet+(numbers,+lengths):+(Vec%3C_%3E,+Vec%3C_%3E)+=+string%0A++++.split(%27,%27)%0A++++.map(%7Cs%7C+s.parse().map(%7Cn:+u32%7C+(n,+s.len())))%0A++++.collect::%3CResult%3C_,+_%3E%3E()?;%0A%0Aassert_eq!(numbers,+%5B1,+2,+123,+4%5D);%0Aassert_eq!(lengths,+%5B1,+1,+3,+1%5D);%0AOk(())+%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/result.rs.html#1915)[§](#impl-FromIterator%3CResult%3CA,+E%3E%3E-for-Result%3CV,+E%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2373)[§](#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E)\n\n1.32.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2118)[§](#impl-FromIterator%3CI%3E-for-Box%3C%5BI%5D%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2224)[§](#impl-FromIterator%3C(K,+V)%3E-for-BTreeMap%3CK,+V%3E)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#3122-3132)[§](#impl-FromIterator%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1760-1766)[§](#impl-FromIterator%3CP%3E-for-PathBuf)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1189)[§](#impl-FromIterator%3CT%3E-for-BTreeSet%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1807)[§](#impl-FromIterator%3CT%3E-for-BinaryHeap%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2016)[§](#impl-FromIterator%3CT%3E-for-LinkedList%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2861)[§](#impl-FromIterator%3CT%3E-for-VecDeque%3CT%3E)\n\n1.37.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2727)[§](#impl-FromIterator%3CT%3E-for-Rc%3C%5BT%5D%3E)\n\n1.37.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3686)[§](#impl-FromIterator%3CT%3E-for-Arc%3C%5BT%5D%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2967)[§](#impl-FromIterator%3CT%3E-for-Vec%3CT%3E)\n\nCollects an iterator into a Vec, commonly called via [`Iterator::collect()`](about:blank/trait.Iterator.html#method.collect \"method std::iter::Iterator::collect\")\n\n#### [§](#allocation-behavior)Allocation behavior\n\nIn general `Vec` does not guarantee any particular growth or allocation strategy. That also applies to this trait impl.\n\n**Note:** This section covers implementation details and is therefore exempt from stability guarantees.\n\nVec may use any or none of the following strategies, depending on the supplied iterator:\n\n-   preallocate based on [`Iterator::size_hint()`](about:blank/trait.Iterator.html#method.size_hint \"method std::iter::Iterator::size_hint\")\n    -   and panic if the number of items is outside the provided lower/upper bounds\n-   use an amortized growth strategy similar to `pushing` one item at a time\n-   perform the iteration in-place on the original allocation backing the iterator\n\nThe last case warrants some attention. It is an optimization that in many cases reduces peak memory consumption and improves cache locality. But when big, short-lived allocations are created, only a small fraction of their items get collected, no further use is made of the spare capacity and the resulting `Vec` is moved into a longer-lived structure, then this can lead to the large allocations having their lifetimes unnecessarily extended which can result in increased memory footprint.\n\nIn cases where this is an issue, the excess capacity can be discarded with [`Vec::shrink_to()`](about:blank/vec/struct.Vec.html#method.shrink_to \"method std::vec::Vec::shrink_to\"), [`Vec::shrink_to_fit()`](about:blank/vec/struct.Vec.html#method.shrink_to_fit \"method std::vec::Vec::shrink_to_fit\") or by collecting into [`Box<[T]>`](../boxed/struct.Box.html \"struct std::boxed::Box\") instead, which additionally reduces the size of the long-lived struct.\n\n```\nstatic LONG_LIVED: Mutex<Vec<Vec<u16>>> = Mutex::new(Vec::new());\n\nfor i in 0..10 {\n    let big_temporary: Vec<u16> = (0..1024).collect();\n    // discard most items\n    let mut result: Vec<_> = big_temporary.into_iter().filter(|i| i % 100 == 0).collect();\n    // without this a lot of unused capacity might be moved into the global\n    result.shrink_to_fit();\n    LONG_LIVED.lock().unwrap().push(result);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Mutex;%0A++++static+LONG_LIVED:+Mutex%3CVec%3CVec%3Cu16%3E%3E%3E+=+Mutex::new(Vec::new());%0A++++%0A++++for+i+in+0..10+%7B%0A++++++++let+big_temporary:+Vec%3Cu16%3E+=+(0..1024).collect();%0A++++++++//+discard+most+items%0A++++++++let+mut+result:+Vec%3C_%3E+=+big_temporary.into_iter().filter(%7Ci%7C+i+%25+100+==+0).collect();%0A++++++++//+without+this+a+lot+of+unused+capacity+might+be+moved+into+the+global%0A++++++++result.shrink_to_fit();%0A++++++++LONG_LIVED.lock().unwrap().push(result);%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#1025-1036)[§](#impl-FromIterator%3CT%3E-for-HashSet%3CT,+S%3E)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Conversion from an `Iterator`.\"><title>FromIterator in std::iter - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">FromIterator</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">FromIterator</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.from_iter\">from_iter</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::iter</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.ArrayChunks.html\">ArrayChunks</a></li><li><a href=\"struct.ByRefSized.html\">ByRefSized</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cloned.html\">Cloned</a></li><li><a href=\"struct.Copied.html\">Copied</a></li><li><a href=\"struct.Cycle.html\">Cycle</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Enumerate.html\">Enumerate</a></li><li><a href=\"struct.Filter.html\">Filter</a></li><li><a href=\"struct.FilterMap.html\">FilterMap</a></li><li><a href=\"struct.FlatMap.html\">FlatMap</a></li><li><a href=\"struct.Flatten.html\">Flatten</a></li><li><a href=\"struct.FromFn.html\">FromFn</a></li><li><a href=\"struct.Fuse.html\">Fuse</a></li><li><a href=\"struct.Inspect.html\">Inspect</a></li><li><a href=\"struct.Intersperse.html\">Intersperse</a></li><li><a href=\"struct.IntersperseWith.html\">IntersperseWith</a></li><li><a href=\"struct.Map.html\">Map</a></li><li><a href=\"struct.MapWhile.html\">MapWhile</a></li><li><a href=\"struct.MapWindows.html\">MapWindows</a></li><li><a href=\"struct.Once.html\">Once</a></li><li><a href=\"struct.OnceWith.html\">OnceWith</a></li><li><a href=\"struct.Peekable.html\">Peekable</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.RepeatN.html\">RepeatN</a></li><li><a href=\"struct.RepeatWith.html\">RepeatWith</a></li><li><a href=\"struct.Rev.html\">Rev</a></li><li><a href=\"struct.Scan.html\">Scan</a></li><li><a href=\"struct.Skip.html\">Skip</a></li><li><a href=\"struct.SkipWhile.html\">SkipWhile</a></li><li><a href=\"struct.StepBy.html\">StepBy</a></li><li><a href=\"struct.Successors.html\">Successors</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.TakeWhile.html\">TakeWhile</a></li><li><a href=\"struct.Zip.html\">Zip</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.DoubleEndedIterator.html\">DoubleEndedIterator</a></li><li><a href=\"trait.ExactSizeIterator.html\">ExactSizeIterator</a></li><li><a href=\"trait.Extend.html\">Extend</a></li><li><a href=\"trait.FromIterator.html\">FromIterator</a></li><li><a href=\"trait.FusedIterator.html\">FusedIterator</a></li><li><a href=\"trait.IntoIterator.html\">IntoIterator</a></li><li><a href=\"trait.Iterator.html\">Iterator</a></li><li><a href=\"trait.Product.html\">Product</a></li><li><a href=\"trait.Step.html\">Step</a></li><li><a href=\"trait.Sum.html\">Sum</a></li><li><a href=\"trait.TrustedLen.html\">TrustedLen</a></li><li><a href=\"trait.TrustedStep.html\">TrustedStep</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.chain.html\">chain</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.from_coroutine.html\">from_coroutine</a></li><li><a href=\"fn.from_fn.html\">from_fn</a></li><li><a href=\"fn.once.html\">once</a></li><li><a href=\"fn.once_with.html\">once_with</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.repeat_n.html\">repeat_n</a></li><li><a href=\"fn.repeat_with.html\">repeat_with</a></li><li><a href=\"fn.successors.html\">successors</a></li><li><a href=\"fn.zip.html\">zip</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">iter</a>::<wbr><a class=\"trait\" href=\"#\">FromIterator</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#132\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait FromIterator&lt;A&gt;: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> {\n    // Required method\n    fn <a href=\"#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; Self\n       <span class=\"where\">where T: <a class=\"trait\" href=\"trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = A&gt;</span>;\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Conversion from an <a href=\"trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a>.</p>\n<p>By implementing <code>FromIterator</code> for a type, you define how it will be\ncreated from an iterator. This is common for types which describe a\ncollection of some kind.</p>\n<p>If you want to create a collection from the contents of an iterator, the\n<a href=\"trait.Iterator.html#method.collect\" title=\"method std::iter::Iterator::collect\"><code>Iterator::collect()</code></a> method is preferred. However, when you need to\nspecify the container type, <a href=\"trait.FromIterator.html#tymethod.from_iter\" title=\"associated function std::iter::FromIterator::from_iter\"><code>FromIterator::from_iter()</code></a> can be more\nreadable than using a turbofish (e.g. <code>::&lt;Vec&lt;_&gt;&gt;()</code>). See the\n<a href=\"trait.Iterator.html#method.collect\" title=\"method std::iter::Iterator::collect\"><code>Iterator::collect()</code></a> documentation for more examples of its use.</p>\n<p>See also: <a href=\"trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\"><code>IntoIterator</code></a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>five_fives = std::iter::repeat(<span class=\"number\">5</span>).take(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>v = Vec::from_iter(five_fives);\n\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"macro\">vec!</span>[<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+five_fives+=+std::iter::repeat(5).take(5);%0A++++%0A++++let+v+=+Vec::from_iter(five_fives);%0A++++%0A++++assert_eq!(v,+vec!%5B5,+5,+5,+5,+5%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <a href=\"trait.Iterator.html#method.collect\" title=\"method std::iter::Iterator::collect\"><code>Iterator::collect()</code></a> to implicitly use <code>FromIterator</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>five_fives = std::iter::repeat(<span class=\"number\">5</span>).take(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>v: Vec&lt;i32&gt; = five_fives.collect();\n\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"macro\">vec!</span>[<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+five_fives+=+std::iter::repeat(5).take(5);%0A++++%0A++++let+v:+Vec%3Ci32%3E+=+five_fives.collect();%0A++++%0A++++assert_eq!(v,+vec!%5B5,+5,+5,+5,+5%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <a href=\"trait.FromIterator.html#tymethod.from_iter\" title=\"associated function std::iter::FromIterator::from_iter\"><code>FromIterator::from_iter()</code></a> as a more readable alternative to\n<a href=\"trait.Iterator.html#method.collect\" title=\"method std::iter::Iterator::collect\"><code>Iterator::collect()</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n<span class=\"kw\">let </span>first = (<span class=\"number\">0</span>..<span class=\"number\">10</span>).collect::&lt;VecDeque&lt;i32&gt;&gt;();\n<span class=\"kw\">let </span>second = VecDeque::from_iter(<span class=\"number\">0</span>..<span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(first, second);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++let+first+=+(0..10).collect::%3CVecDeque%3Ci32%3E%3E();%0A++++let+second+=+VecDeque::from_iter(0..10);%0A++++%0A++++assert_eq!(first,+second);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Implementing <code>FromIterator</code> for your type:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// A sample collection, that's just a wrapper over Vec&lt;T&gt;\n</span><span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>MyCollection(Vec&lt;i32&gt;);\n\n<span class=\"comment\">// Let's give it some methods so we can create one and add things\n// to it.\n</span><span class=\"kw\">impl </span>MyCollection {\n    <span class=\"kw\">fn </span>new() -&gt; MyCollection {\n        MyCollection(Vec::new())\n    }\n\n    <span class=\"kw\">fn </span>add(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, elem: i32) {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.push(elem);\n    }\n}\n\n<span class=\"comment\">// and we'll implement FromIterator\n</span><span class=\"kw\">impl </span>FromIterator&lt;i32&gt; <span class=\"kw\">for </span>MyCollection {\n    <span class=\"kw\">fn </span>from_iter&lt;I: IntoIterator&lt;Item=i32&gt;&gt;(iter: I) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = MyCollection::new();\n\n        <span class=\"kw\">for </span>i <span class=\"kw\">in </span>iter {\n            c.add(i);\n        }\n\n        c\n    }\n}\n\n<span class=\"comment\">// Now we can make a new iterator...\n</span><span class=\"kw\">let </span>iter = (<span class=\"number\">0</span>..<span class=\"number\">5</span>).into_iter();\n\n<span class=\"comment\">// ... and make a MyCollection out of it\n</span><span class=\"kw\">let </span>c = MyCollection::from_iter(iter);\n\n<span class=\"macro\">assert_eq!</span>(c.<span class=\"number\">0</span>, <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"comment\">// collect works too!\n\n</span><span class=\"kw\">let </span>iter = (<span class=\"number\">0</span>..<span class=\"number\">5</span>).into_iter();\n<span class=\"kw\">let </span>c: MyCollection = iter.collect();\n\n<span class=\"macro\">assert_eq!</span>(c.<span class=\"number\">0</span>, <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+A+sample+collection,+that's+just+a+wrapper+over+Vec%3CT%3E%0Afn+main()+%7B%0A++++%23%5Bderive(Debug)%5D%0A++++struct+MyCollection(Vec%3Ci32%3E);%0A++++%0A++++//+Let's+give+it+some+methods+so+we+can+create+one+and+add+things%0A++++//+to+it.%0A++++impl+MyCollection+%7B%0A++++++++fn+new()+-%3E+MyCollection+%7B%0A++++++++++++MyCollection(Vec::new())%0A++++++++%7D%0A++++%0A++++++++fn+add(%26mut+self,+elem:+i32)+%7B%0A++++++++++++self.0.push(elem);%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+and+we'll+implement+FromIterator%0A++++impl+FromIterator%3Ci32%3E+for+MyCollection+%7B%0A++++++++fn+from_iter%3CI:+IntoIterator%3CItem=i32%3E%3E(iter:+I)+-%3E+Self+%7B%0A++++++++++++let+mut+c+=+MyCollection::new();%0A++++%0A++++++++++++for+i+in+iter+%7B%0A++++++++++++++++c.add(i);%0A++++++++++++%7D%0A++++%0A++++++++++++c%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+Now+we+can+make+a+new+iterator...%0A++++let+iter+=+(0..5).into_iter();%0A++++%0A++++//+...+and+make+a+MyCollection+out+of+it%0A++++let+c+=+MyCollection::from_iter(iter);%0A++++%0A++++assert_eq!(c.0,+vec!%5B0,+1,+2,+3,+4%5D);%0A++++%0A++++//+collect+works+too!%0A++++%0A++++let+iter+=+(0..5).into_iter();%0A++++let+c:+MyCollection+=+iter.collect();%0A++++%0A++++assert_eq!(c.0,+vec!%5B0,+1,+2,+3,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.from_iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#150\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; Self<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = A&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a value from an iterator.</p>\n<p>See the <a href=\"index.html\" title=\"mod std::iter\">module-level documentation</a> for more.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>five_fives = std::iter::repeat(<span class=\"number\">5</span>).take(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>v = Vec::from_iter(five_fives);\n\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"macro\">vec!</span>[<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+five_fives+=+std::iter::repeat(5).take(5);%0A++++%0A++++let+v+=+Vec::from_iter(five_fives);%0A++++%0A++++assert_eq!(v,+vec!%5B5,+5,+5,+5,+5%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-FromIterator%3Cchar%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2171\">source</a></span><a href=\"#impl-FromIterator%3Cchar%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"../primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section><section id=\"impl-FromIterator%3Cchar%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2113\">source</a></span><a href=\"#impl-FromIterator%3Cchar%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"../primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section><section id=\"impl-FromIterator%3C()%3E-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/unit.rs.html#15\">source</a></span><a href=\"#impl-FromIterator%3C()%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt; for <a class=\"primitive\" href=\"../primitive.unit.html\">()</a></h3></section><div class=\"docblock\"><p>Collapses all unit items from an iterator into one.</p>\n<p>This is more useful when combined with higher-level abstractions, like\ncollecting to a <code>Result&lt;(), E&gt;</code> where you only care about errors:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span>data = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Result</span>&lt;()&gt; = data.iter()\n    .map(|x| <span class=\"macro\">writeln!</span>(stdout(), <span class=\"string\">\"{x}\"</span>))\n    .collect();\n<span class=\"macro\">assert!</span>(res.is_ok());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::*;%0A++++let+data+=+vec!%5B1,+2,+3,+4,+5%5D;%0A++++let+res:+Result%3C()%3E+=+data.iter()%0A++++++++.map(%7Cx%7C+writeln!(stdout(),+%22%7Bx%7D%22))%0A++++++++.collect();%0A++++assert!(res.is_ok());%0A%7D&amp;edition=2021\">Run</a></div>\n</div><section id=\"impl-FromIterator%3COsString%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0\">1.52.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#1653-1669\">source</a></span><a href=\"#impl-FromIterator%3COsString%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>&gt; for <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section><section id=\"impl-FromIterator%3CString%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2195\">source</a></span><a href=\"#impl-FromIterator%3CString%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section><section id=\"impl-FromIterator%3CString%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2143\">source</a></span><a href=\"#impl-FromIterator%3CString%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt; for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section><section id=\"impl-FromIterator%3C%26char%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2179\">source</a></span><a href=\"#impl-FromIterator%3C%26char%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"../primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section><section id=\"impl-FromIterator%3C%26char%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2123\">source</a></span><a href=\"#impl-FromIterator%3C%26char%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"../primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section><section id=\"impl-FromIterator%3C%26str%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2187\">source</a></span><a href=\"#impl-FromIterator%3C%26str%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section><section id=\"impl-FromIterator%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2133\">source</a></span><a href=\"#impl-FromIterator%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section><section id=\"impl-FromIterator%3C%26OsStr%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0\">1.52.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#1672-1681\">source</a></span><a href=\"#impl-FromIterator%3C%26OsStr%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section><section id=\"impl-FromIterator%3CCow%3C'a,+str%3E%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2211\">source</a></span><a href=\"#impl-FromIterator%3CCow%3C'a,+str%3E%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section><section id=\"impl-FromIterator%3CCow%3C'a,+str%3E%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2172\">source</a></span><a href=\"#impl-FromIterator%3CCow%3C'a,+str%3E%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section><section id=\"impl-FromIterator%3CCow%3C'a,+OsStr%3E%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0\">1.52.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#1684-1705\">source</a></span><a href=\"#impl-FromIterator%3CCow%3C'a,+OsStr%3E%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt; for <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section><section id=\"impl-FromIterator%3Cchar%3E-for-Cow%3C'a,+str%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2875\">source</a></span><a href=\"#impl-FromIterator%3Cchar%3E-for-Cow%3C'a,+str%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"../primitive.char.html\">char</a>&gt; for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section><section id=\"impl-FromIterator%3CString%3E-for-Cow%3C'a,+str%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2891\">source</a></span><a href=\"#impl-FromIterator%3CString%3E-for-Cow%3C'a,+str%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt; for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section><section id=\"impl-FromIterator%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2883\">source</a></span><a href=\"#impl-FromIterator%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;&amp;'b <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section><section id=\"impl-FromIterator%3CT%3E-for-Cow%3C'a,+%5BT%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/cow.rs.html#58-60\">source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-Cow%3C'a,+%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section><section id=\"impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2203\">source</a></span><a href=\"#impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>, A&gt;&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2162\">source</a></span><a href=\"#impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>, A&gt;&gt; for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-FromIterator%3C(AE,+BE)%3E-for-(A,+B)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#173-176\">source</a></span><a href=\"#impl-FromIterator%3C(AE,+BE)%3E-for-(A,+B)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, AE, BE&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"../primitive.tuple.html\">(AE, BE)</a>&gt; for <a class=\"primitive\" href=\"../primitive.tuple.html\">(A, B)</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> + <a class=\"trait\" href=\"trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;AE&gt;,\n    B: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> + <a class=\"trait\" href=\"trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;BE&gt;,</div></h3></section><div class=\"docblock\"><p>This implementation turns an iterator of tuples into a tuple of types which implement\n<a href=\"../default/trait.Default.html\" title=\"trait std::default::Default\"><code>Default</code></a> and <a href=\"trait.Extend.html\" title=\"trait std::iter::Extend\"><code>Extend</code></a>.</p>\n<p>This is similar to <a href=\"trait.Iterator.html#method.unzip\" title=\"method std::iter::Iterator::unzip\"><code>Iterator::unzip</code></a>, but is also composable with other <a href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\"><code>FromIterator</code></a>\nimplementations:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>string = <span class=\"string\">\"1,2,123,4\"</span>;\n\n<span class=\"kw\">let </span>(numbers, lengths): (Vec&lt;<span class=\"kw\">_</span>&gt;, Vec&lt;<span class=\"kw\">_</span>&gt;) = string\n    .split(<span class=\"string\">','</span>)\n    .map(|s| s.parse().map(|n: u32| (n, s.len())))\n    .collect::&lt;<span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>&gt;&gt;()<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(numbers, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">123</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(lengths, [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+Result%3C(),+core::num::ParseIntError%3E+%7B%0Alet+string+=+%221,2,123,4%22;%0A%0Alet+(numbers,+lengths):+(Vec%3C_%3E,+Vec%3C_%3E)+=+string%0A++++.split(',')%0A++++.map(%7Cs%7C+s.parse().map(%7Cn:+u32%7C+(n,+s.len())))%0A++++.collect::%3CResult%3C_,+_%3E%3E()?;%0A%0Aassert_eq!(numbers,+%5B1,+2,+123,+4%5D);%0Aassert_eq!(lengths,+%5B1,+1,+3,+1%5D);%0AOk(())+%7D&amp;edition=2021\">Run</a></div>\n</div><section id=\"impl-FromIterator%3CResult%3CA,+E%3E%3E-for-Result%3CV,+E%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/result.rs.html#1915\">source</a></span><a href=\"#impl-FromIterator%3CResult%3CA,+E%3E%3E-for-Result%3CV,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, E, V&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;A, E&gt;&gt; for <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;V, E&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2373\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section><section id=\"impl-FromIterator%3CI%3E-for-Box%3C%5BI%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0\">1.32.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2118\">source</a></span><a href=\"#impl-FromIterator%3CI%3E-for-Box%3C%5BI%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;I&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[I]</a>&gt;</h3></section><section id=\"impl-FromIterator%3C(K,+V)%3E-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2224\">source</a></span><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"../primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"../collections/struct.BTreeMap.html\" title=\"struct std::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section><section id=\"impl-FromIterator%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#3122-3132\">source</a></span><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"../primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"../collections/hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section><section id=\"impl-FromIterator%3CP%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1760-1766\">source</a></span><a href=\"#impl-FromIterator%3CP%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;P&gt; for <a class=\"struct\" href=\"../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section><section id=\"impl-FromIterator%3CT%3E-for-BTreeSet%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1189\">source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-BTreeSet%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"../collections/struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section><section id=\"impl-FromIterator%3CT%3E-for-BinaryHeap%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1807\">source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-BinaryHeap%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"../collections/struct.BinaryHeap.html\" title=\"struct std::collections::BinaryHeap\">BinaryHeap</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section><section id=\"impl-FromIterator%3CT%3E-for-LinkedList%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2016\">source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-LinkedList%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"../collections/struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T&gt;</h3></section><section id=\"impl-FromIterator%3CT%3E-for-VecDeque%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2861\">source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-VecDeque%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"../collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T&gt;</h3></section><section id=\"impl-FromIterator%3CT%3E-for-Rc%3C%5BT%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2727\">source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-Rc%3C%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h3></section><section id=\"impl-FromIterator%3CT%3E-for-Arc%3C%5BT%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3686\">source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-Arc%3C%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h3></section><section id=\"impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2967\">source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h3></section><div class=\"docblock\"><p>Collects an iterator into a Vec, commonly called via <a href=\"trait.Iterator.html#method.collect\" title=\"method std::iter::Iterator::collect\"><code>Iterator::collect()</code></a></p>\n<h4 id=\"allocation-behavior\"><a class=\"doc-anchor\" href=\"#allocation-behavior\">§</a>Allocation behavior</h4>\n<p>In general <code>Vec</code> does not guarantee any particular growth or allocation strategy.\nThat also applies to this trait impl.</p>\n<p><strong>Note:</strong> This section covers implementation details and is therefore exempt from\nstability guarantees.</p>\n<p>Vec may use any or none of the following strategies,\ndepending on the supplied iterator:</p>\n<ul>\n<li>preallocate based on <a href=\"trait.Iterator.html#method.size_hint\" title=\"method std::iter::Iterator::size_hint\"><code>Iterator::size_hint()</code></a>\n<ul>\n<li>and panic if the number of items is outside the provided lower/upper bounds</li>\n</ul>\n</li>\n<li>use an amortized growth strategy similar to <code>pushing</code> one item at a time</li>\n<li>perform the iteration in-place on the original allocation backing the iterator</li>\n</ul>\n<p>The last case warrants some attention. It is an optimization that in many cases reduces peak memory\nconsumption and improves cache locality. But when big, short-lived allocations are created,\nonly a small fraction of their items get collected, no further use is made of the spare capacity\nand the resulting <code>Vec</code> is moved into a longer-lived structure, then this can lead to the large\nallocations having their lifetimes unnecessarily extended which can result in increased memory\nfootprint.</p>\n<p>In cases where this is an issue, the excess capacity can be discarded with <a href=\"../vec/struct.Vec.html#method.shrink_to\" title=\"method std::vec::Vec::shrink_to\"><code>Vec::shrink_to()</code></a>,\n<a href=\"../vec/struct.Vec.html#method.shrink_to_fit\" title=\"method std::vec::Vec::shrink_to_fit\"><code>Vec::shrink_to_fit()</code></a> or by collecting into <a href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\"><code>Box&lt;[T]&gt;</code></a> instead, which additionally reduces\nthe size of the long-lived struct.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">static </span>LONG_LIVED: Mutex&lt;Vec&lt;Vec&lt;u16&gt;&gt;&gt; = Mutex::new(Vec::new());\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    <span class=\"kw\">let </span>big_temporary: Vec&lt;u16&gt; = (<span class=\"number\">0</span>..<span class=\"number\">1024</span>).collect();\n    <span class=\"comment\">// discard most items\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>result: Vec&lt;<span class=\"kw\">_</span>&gt; = big_temporary.into_iter().filter(|i| i % <span class=\"number\">100 </span>== <span class=\"number\">0</span>).collect();\n    <span class=\"comment\">// without this a lot of unused capacity might be moved into the global\n    </span>result.shrink_to_fit();\n    LONG_LIVED.lock().unwrap().push(result);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Mutex;%0A++++static+LONG_LIVED:+Mutex%3CVec%3CVec%3Cu16%3E%3E%3E+=+Mutex::new(Vec::new());%0A++++%0A++++for+i+in+0..10+%7B%0A++++++++let+big_temporary:+Vec%3Cu16%3E+=+(0..1024).collect();%0A++++++++//+discard+most+items%0A++++++++let+mut+result:+Vec%3C_%3E+=+big_temporary.into_iter().filter(%7Ci%7C+i+%25+100+==+0).collect();%0A++++++++//+without+this+a+lot+of+unused+capacity+might+be+moved+into+the+global%0A++++++++result.shrink_to_fit();%0A++++++++LONG_LIVED.lock().unwrap().push(result);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div><section id=\"impl-FromIterator%3CT%3E-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#1025-1036\">source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"../collections/hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section><div id=\"impl-FromIterator-35\" class=\"impl\"><a href=\"#impl-FromIterator-35\" class=\"anchor\"></a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"../../proc_macro/enum.TokenTree.html\" title=\"enum proc_macro::TokenTree\">TokenTree</a>&gt; for <a class=\"struct\" href=\"../../proc_macro/struct.TokenStream.html\" title=\"struct proc_macro::TokenStream\">TokenStream</a></h3></div><div id=\"impl-FromIterator-36\" class=\"impl\"><a href=\"#impl-FromIterator-36\" class=\"anchor\"></a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"../../proc_macro/struct.TokenStream.html\" title=\"struct proc_macro::TokenStream\">TokenStream</a>&gt; for <a class=\"struct\" href=\"../../proc_macro/struct.TokenStream.html\" title=\"struct proc_macro::TokenStream\">TokenStream</a></h3></div></div><script src=\"../../trait.impl/core/iter/traits/collect/trait.FromIterator.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:58.654Z"
}