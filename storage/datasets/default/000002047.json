{
	"title": "from_fn in std::array - Rust",
	"url": "https://doc.rust-lang.org/stable/std/array/fn.from_fn.html",
	"markdown": "# from\\_fn in std::array - Rust\n\n## Function [std](../index.html)::[array](index.html)::[from\\_fn](#)\n\n1.63.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#59-61) ·\n\n```\npub fn from_fn<T, const N: usize, F>(cb: F) -> [T; N]where\n    F: FnMut(usize) -> T,\n```\n\nExpand description\n\nCreates an array of type \\[T; N\\], where each element `T` is the returned value from `cb` using that element’s index.\n\n## [§](#arguments)Arguments\n\n-   `cb`: Callback where the passed argument is the current array index.\n\n## [§](#example)Example\n\n```\n// type inference is helping us here, the way `from_fn` knows how many\n// elements to produce is the length of array down there: only arrays of\n// equal lengths can be compared, so the const generic parameter `N` is\n// inferred to be 5, thus creating array of 5 elements.\n\nlet array = core::array::from_fn(|i| i);\n// indexes are:    0  1  2  3  4\nassert_eq!(array, [0, 1, 2, 3, 4]);\n\nlet array2: [usize; 8] = core::array::from_fn(|i| i * 2);\n// indexes are:     0  1  2  3  4  5   6   7\nassert_eq!(array2, [0, 2, 4, 6, 8, 10, 12, 14]);\n\nlet bool_arr = core::array::from_fn::<_, 5, _>(|i| i % 2 == 0);\n// indexes are:       0     1      2     3      4\nassert_eq!(bool_arr, [true, false, true, false, true]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+type+inference+is+helping+us+here,+the+way+%60from_fn%60+knows+how+many%0A//+elements+to+produce+is+the+length+of+array+down+there:+only+arrays+of%0A//+equal+lengths+can+be+compared,+so+the+const+generic+parameter+%60N%60+is%0A//+inferred+to+be+5,+thus+creating+array+of+5+elements.%0A%0Afn+main()+%7B%0A++++let+array+=+core::array::from_fn(%7Ci%7C+i);%0A++++//+indexes+are:++++0++1++2++3++4%0A++++assert_eq!(array,+%5B0,+1,+2,+3,+4%5D);%0A++++%0A++++let+array2:+%5Busize;+8%5D+=+core::array::from_fn(%7Ci%7C+i+*+2);%0A++++//+indexes+are:+++++0++1++2++3++4++5+++6+++7%0A++++assert_eq!(array2,+%5B0,+2,+4,+6,+8,+10,+12,+14%5D);%0A++++%0A++++let+bool_arr+=+core::array::from_fn::%3C_,+5,+_%3E(%7Ci%7C+i+%25+2+==+0);%0A++++//+indexes+are:+++++++0+++++1++++++2+++++3++++++4%0A++++assert_eq!(bool_arr,+%5Btrue,+false,+true,+false,+true%5D);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Creates an array of type [T; N], where each element `T` is the returned value from `cb` using that element’s index.\"><title>from_fn in std::array - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::array</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.IntoIter.html\">IntoIter</a></li><li><a href=\"struct.TryFromSliceError.html\">TryFromSliceError</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.from_fn.html\">from_fn</a></li><li><a href=\"fn.from_mut.html\">from_mut</a></li><li><a href=\"fn.from_ref.html\">from_ref</a></li><li><a href=\"fn.try_from_fn.html\">try_from_fn</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">array</a>::<wbr><a class=\"fn\" href=\"#\">from_fn</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#59-61\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn from_fn&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, F&gt;(cb: F) -&gt; <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; T,</div></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Creates an array of type [T; N], where each element <code>T</code> is the returned value from <code>cb</code>\nusing that element’s index.</p>\n<h2 id=\"arguments\"><a class=\"doc-anchor\" href=\"#arguments\">§</a>Arguments</h2>\n<ul>\n<li><code>cb</code>: Callback where the passed argument is the current array index.</li>\n</ul>\n<h2 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// type inference is helping us here, the way `from_fn` knows how many\n// elements to produce is the length of array down there: only arrays of\n// equal lengths can be compared, so the const generic parameter `N` is\n// inferred to be 5, thus creating array of 5 elements.\n\n</span><span class=\"kw\">let </span>array = core::array::from_fn(|i| i);\n<span class=\"comment\">// indexes are:    0  1  2  3  4\n</span><span class=\"macro\">assert_eq!</span>(array, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"kw\">let </span>array2: [usize; <span class=\"number\">8</span>] = core::array::from_fn(|i| i * <span class=\"number\">2</span>);\n<span class=\"comment\">// indexes are:     0  1  2  3  4  5   6   7\n</span><span class=\"macro\">assert_eq!</span>(array2, [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">14</span>]);\n\n<span class=\"kw\">let </span>bool_arr = core::array::from_fn::&lt;<span class=\"kw\">_</span>, <span class=\"number\">5</span>, <span class=\"kw\">_</span>&gt;(|i| i % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"comment\">// indexes are:       0     1      2     3      4\n</span><span class=\"macro\">assert_eq!</span>(bool_arr, [<span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+type+inference+is+helping+us+here,+the+way+%60from_fn%60+knows+how+many%0A//+elements+to+produce+is+the+length+of+array+down+there:+only+arrays+of%0A//+equal+lengths+can+be+compared,+so+the+const+generic+parameter+%60N%60+is%0A//+inferred+to+be+5,+thus+creating+array+of+5+elements.%0A%0Afn+main()+%7B%0A++++let+array+=+core::array::from_fn(%7Ci%7C+i);%0A++++//+indexes+are:++++0++1++2++3++4%0A++++assert_eq!(array,+%5B0,+1,+2,+3,+4%5D);%0A++++%0A++++let+array2:+%5Busize;+8%5D+=+core::array::from_fn(%7Ci%7C+i+*+2);%0A++++//+indexes+are:+++++0++1++2++3++4++5+++6+++7%0A++++assert_eq!(array2,+%5B0,+2,+4,+6,+8,+10,+12,+14%5D);%0A++++%0A++++let+bool_arr+=+core::array::from_fn::%3C_,+5,+_%3E(%7Ci%7C+i+%25+2+==+0);%0A++++//+indexes+are:+++++++0+++++1++++++2+++++3++++++4%0A++++assert_eq!(bool_arr,+%5Btrue,+false,+true,+false,+true%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:22:47.495Z"
}