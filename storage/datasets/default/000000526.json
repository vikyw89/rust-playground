{
	"title": "Pattern in std::str::pattern - Rust",
	"url": "https://doc.rust-lang.org/stable/std/str/pattern/trait.Pattern.html",
	"markdown": "# Pattern in std::str::pattern - Rust\n\n```\npub trait Pattern<'a>: Sized {\n    type Searcher: Searcher<'a>;\n\n    // Required method\n    fn into_searcher(self, haystack: &'a str) -> Self::Searcher;\n\n    // Provided methods\n    fn is_contained_in(self, haystack: &'a str) -> bool { ... }\n    fn is_prefix_of(self, haystack: &'a str) -> bool { ... }\n    fn is_suffix_of(self, haystack: &'a str) -> bool\n       where Self::Searcher: ReverseSearcher<'a> { ... }\n    fn strip_prefix_of(self, haystack: &'a str) -> Option<&'a str> { ... }\n    fn strip_suffix_of(self, haystack: &'a str) -> Option<&'a str>\n       where Self::Searcher: ReverseSearcher<'a> { ... }\n}\n```\n\nğŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nExpand description\n\nA string pattern.\n\nA `Pattern<'a>` expresses that the implementing type can be used as a string pattern for searching in a [`&'a str`](../../primitive.str.html \"primitive str\").\n\nFor example, both `'a'` and `\"aa\"` are patterns that would match at index `1` in the string `\"baaaab\"`.\n\nThe trait itself acts as a builder for an associated [`Searcher`](trait.Searcher.html \"trait std::str::pattern::Searcher\") type, which does the actual work of finding occurrences of the pattern in a string.\n\nDepending on the type of the pattern, the behaviour of methods like [`str::find`](about:blank/primitive.str.html#method.find \"method str::find\") and [`str::contains`](about:blank/primitive.str.html#method.contains \"method str::contains\") can change. The table below describes some of those behaviours.\n\n| Pattern type | Match condition |\n| --- | --- |\n| `&str` | is substring |\n| `char` | is contained in string |\n| `&[char]` | any char in slice is contained in string |\n| `F: FnMut(char) -> bool` | `F` returns `true` for a char in string |\n| `&&str` | is substring |\n| `&String` | is substring |\n\n## [Â§](#examples)Examples\n\n```\n// &str\nassert_eq!(\"abaaa\".find(\"ba\"), Some(1));\nassert_eq!(\"abaaa\".find(\"bac\"), None);\n\n// char\nassert_eq!(\"abaaa\".find('a'), Some(0));\nassert_eq!(\"abaaa\".find('b'), Some(1));\nassert_eq!(\"abaaa\".find('c'), None);\n\n// &[char; N]\nassert_eq!(\"ab\".find(&['b', 'a']), Some(0));\nassert_eq!(\"abaaa\".find(&['a', 'z']), Some(0));\nassert_eq!(\"abaaa\".find(&['c', 'd']), None);\n\n// &[char]\nassert_eq!(\"ab\".find(&['b', 'a'][..]), Some(0));\nassert_eq!(\"abaaa\".find(&['a', 'z'][..]), Some(0));\nassert_eq!(\"abaaa\".find(&['c', 'd'][..]), None);\n\n// FnMut(char) -> bool\nassert_eq!(\"abcdef_z\".find(|ch| ch > 'd' && ch < 'y'), Some(4));\nassert_eq!(\"abcddd_z\".find(|ch| ch > 'd' && ch < 'y'), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+%26str%0Afn+main()+%7B%0A++++assert_eq!(%22abaaa%22.find(%22ba%22),+Some(1));%0A++++assert_eq!(%22abaaa%22.find(%22bac%22),+None);%0A++++%0A++++//+char%0A++++assert_eq!(%22abaaa%22.find(%27a%27),+Some(0));%0A++++assert_eq!(%22abaaa%22.find(%27b%27),+Some(1));%0A++++assert_eq!(%22abaaa%22.find(%27c%27),+None);%0A++++%0A++++//+%26%5Bchar;+N%5D%0A++++assert_eq!(%22ab%22.find(%26%5B%27b%27,+%27a%27%5D),+Some(0));%0A++++assert_eq!(%22abaaa%22.find(%26%5B%27a%27,+%27z%27%5D),+Some(0));%0A++++assert_eq!(%22abaaa%22.find(%26%5B%27c%27,+%27d%27%5D),+None);%0A++++%0A++++//+%26%5Bchar%5D%0A++++assert_eq!(%22ab%22.find(%26%5B%27b%27,+%27a%27%5D%5B..%5D),+Some(0));%0A++++assert_eq!(%22abaaa%22.find(%26%5B%27a%27,+%27z%27%5D%5B..%5D),+Some(0));%0A++++assert_eq!(%22abaaa%22.find(%26%5B%27c%27,+%27d%27%5D%5B..%5D),+None);%0A++++%0A++++//+FnMut(char)+-%3E+bool%0A++++assert_eq!(%22abcdef_z%22.find(%7Cch%7C+ch+%3E+%27d%27+%26%26+ch+%3C+%27y%27),+Some(4));%0A++++assert_eq!(%22abcddd_z%22.find(%7Cch%7C+ch+%3E+%27d%27+%26%26+ch+%3C+%27y%27),+None);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#102)\n\nğŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nAssociated searcher for this pattern\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#106)\n\nğŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nConstructs the associated searcher from `self` and the `haystack` to search in.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#110)\n\nğŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches anywhere in the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#116)\n\nğŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches at the front of the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#122-124)\n\nğŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches at the back of the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#131)\n\nğŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nRemoves the pattern from the front of haystack, if it matches.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#147-149)\n\nğŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nRemoves the pattern from the back of haystack, if it matches.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#546)[Â§](#impl-Pattern%3C'a%3E-for-char)\n\nSearches for chars that are equal to a given [`char`](../../primitive.char.html \"primitive char\").\n\n#### [Â§](#examples-1)Examples\n\n```\nassert_eq!(\"Hello world\".find('o'), Some(4));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(%27o%27),+Some(4));%0A%7D&edition=2021)\n\n[Â§](#associatedtype.Searcher-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#952)[Â§](#impl-Pattern%3C'a%3E-for-%26str)\n\nNon-allocating substring search.\n\nWill handle the pattern `\"\"` as returning empty matches at each character boundary.\n\n#### [Â§](#examples-2)Examples\n\n```\nassert_eq!(\"Hello world\".find(\"world\"), Some(6));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(%22world%22),+Some(6));%0A%7D&edition=2021)\n\n[Â§](#associatedtype.Searcher-2)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2288)[Â§](#impl-Pattern%3C'a%3E-for-%26String)\n\nA convenience impl that delegates to the impl for `&str`.\n\n#### [Â§](#examples-3)Examples\n\n```\nassert_eq!(String::from(\"Hello world\").find(\"world\"), Some(6));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(String::from(%22Hello+world%22).find(%22world%22),+Some(6));%0A%7D&edition=2021)\n\n[Â§](#associatedtype.Searcher-3)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#873)[Â§](#impl-Pattern%3C'a%3E-for-%26%5Bchar%5D)\n\nSearches for chars that are equal to any of the [`char`](../../primitive.char.html \"primitive char\")s in the slice.\n\n#### [Â§](#examples-4)Examples\n\n```\nassert_eq!(\"Hello world\".find(&['l', 'l'] as &[_]), Some(2));\nassert_eq!(\"Hello world\".find(&['l', 'l'][..]), Some(2));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(%26%5B%27l%27,+%27l%27%5D+as+%26%5B_%5D),+Some(2));%0A++++assert_eq!(%22Hello+world%22.find(%26%5B%27l%27,+%27l%27%5D%5B..%5D),+Some(2));%0A%7D&edition=2021)\n\n[Â§](#associatedtype.Searcher-4)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#934)[Â§](#impl-Pattern%3C'a%3E-for-%26%26str)\n\nDelegates to the `&str` impl.\n\n[Â§](#associatedtype.Searcher-5)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#831)[Â§](#impl-Pattern%3C'a%3E-for-%26%5Bchar;+N%5D)\n\nSearches for chars that are equal to any of the [`char`](../../primitive.char.html \"primitive char\")s in the array.\n\n#### [Â§](#examples-5)Examples\n\n```\nassert_eq!(\"Hello world\".find(&['o', 'l']), Some(2));\nassert_eq!(\"Hello world\".find(&['h', 'w']), Some(6));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(%26%5B%27o%27,+%27l%27%5D),+Some(2));%0A++++assert_eq!(%22Hello+world%22.find(%26%5B%27h%27,+%27w%27%5D),+Some(6));%0A%7D&edition=2021)\n\n[Â§](#associatedtype.Searcher-6)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#922-924)[Â§](#impl-Pattern%3C'a%3E-for-F)\n\nSearches for [`char`](../../primitive.char.html \"primitive char\")s that match the given predicate.\n\n#### [Â§](#examples-6)Examples\n\n```\nassert_eq!(\"Hello world\".find(char::is_uppercase), Some(0));\nassert_eq!(\"Hello world\".find(|c| \"aeiou\".contains(c)), Some(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(char::is_uppercase),+Some(0));%0A++++assert_eq!(%22Hello+world%22.find(%7Cc%7C+%22aeiou%22.contains(c)),+Some(1));%0A%7D&edition=2021)\n\n[Â§](#associatedtype.Searcher-7)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#809)[Â§](#impl-Pattern%3C'a%3E-for-%5Bchar;+N%5D)\n\nSearches for chars that are equal to any of the [`char`](../../primitive.char.html \"primitive char\")s in the array.\n\n#### [Â§](#examples-7)Examples\n\n```\nassert_eq!(\"Hello world\".find(['o', 'l']), Some(2));\nassert_eq!(\"Hello world\".find(['h', 'w']), Some(6));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(%5B%27o%27,+%27l%27%5D),+Some(2));%0A++++assert_eq!(%22Hello+world%22.find(%5B%27h%27,+%27w%27%5D),+Some(6));%0A%7D&edition=2021)\n\n[Â§](#associatedtype.Searcher-8)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A string pattern.\"><title>Pattern in std::str::pattern - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Pattern</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Pattern</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.Searcher\">Searcher</a></li></ul><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.into_searcher\">into_searcher</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.is_contained_in\">is_contained_in</a></li><li><a href=\"#method.is_prefix_of\">is_prefix_of</a></li><li><a href=\"#method.is_suffix_of\">is_suffix_of</a></li><li><a href=\"#method.strip_prefix_of\">strip_prefix_of</a></li><li><a href=\"#method.strip_suffix_of\">strip_suffix_of</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::str::pattern</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.CharArrayRefSearcher.html\">CharArrayRefSearcher</a></li><li><a href=\"struct.CharArraySearcher.html\">CharArraySearcher</a></li><li><a href=\"struct.CharPredicateSearcher.html\">CharPredicateSearcher</a></li><li><a href=\"struct.CharSearcher.html\">CharSearcher</a></li><li><a href=\"struct.CharSliceSearcher.html\">CharSliceSearcher</a></li><li><a href=\"struct.StrSearcher.html\">StrSearcher</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.SearchStep.html\">SearchStep</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.DoubleEndedSearcher.html\">DoubleEndedSearcher</a></li><li><a href=\"trait.Pattern.html\">Pattern</a></li><li><a href=\"trait.ReverseSearcher.html\">ReverseSearcher</a></li><li><a href=\"trait.Searcher.html\">Searcher</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">str</a>::<wbr><a href=\"index.html\">pattern</a>::<wbr><a class=\"trait\" href=\"#\">Pattern</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#100\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Pattern&lt;'a&gt;: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> {\n    type <a href=\"#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a>: <a class=\"trait\" href=\"trait.Searcher.html\" title=\"trait std::str::pattern::Searcher\">Searcher</a>&lt;'a&gt;;\n\n    // Required method\n    fn <a href=\"#tymethod.into_searcher\" class=\"fn\">into_searcher</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>) -&gt; Self::<a class=\"associatedtype\" href=\"trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>;\n\n    // Provided methods\n    fn <a href=\"#method.is_contained_in\" class=\"fn\">is_contained_in</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a> { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.is_prefix_of\" class=\"fn\">is_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a> { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.is_suffix_of\" class=\"fn\">is_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>\n       <span class=\"where\">where Self::<a class=\"associatedtype\" href=\"trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;</span> { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.strip_prefix_of\" class=\"fn\">strip_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.strip_suffix_of\" class=\"fn\">strip_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>&gt;\n       <span class=\"where\">where Self::<a class=\"associatedtype\" href=\"trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;</span> { ... }\n}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ğŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A string pattern.</p>\n<p>A <code>Pattern&lt;'a&gt;</code> expresses that the implementing type\ncan be used as a string pattern for searching in a <a href=\"../../primitive.str.html\" title=\"primitive str\"><code>&amp;'a str</code></a>.</p>\n<p>For example, both <code>'a'</code> and <code>\"aa\"</code> are patterns that\nwould match at index <code>1</code> in the string <code>\"baaaab\"</code>.</p>\n<p>The trait itself acts as a builder for an associated\n<a href=\"trait.Searcher.html\" title=\"trait std::str::pattern::Searcher\"><code>Searcher</code></a> type, which does the actual work of finding\noccurrences of the pattern in a string.</p>\n<p>Depending on the type of the pattern, the behaviour of methods like\n<a href=\"../../primitive.str.html#method.find\" title=\"method str::find\"><code>str::find</code></a> and <a href=\"../../primitive.str.html#method.contains\" title=\"method str::contains\"><code>str::contains</code></a> can change. The table below describes\nsome of those behaviours.</p>\n<div><table><thead><tr><th>Pattern type</th><th>Match condition</th></tr></thead><tbody>\n<tr><td><code>&amp;str</code></td><td>is substring</td></tr>\n<tr><td><code>char</code></td><td>is contained in string</td></tr>\n<tr><td><code>&amp;[char]</code></td><td>any char in slice is contained in string</td></tr>\n<tr><td><code>F: FnMut(char) -&gt; bool</code></td><td><code>F</code> returns <code>true</code> for a char in string</td></tr>\n<tr><td><code>&amp;&amp;str</code></td><td>is substring</td></tr>\n<tr><td><code>&amp;String</code></td><td>is substring</td></tr>\n</tbody></table>\n</div><h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// &amp;str\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"abaaa\"</span>.find(<span class=\"string\">\"ba\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"abaaa\"</span>.find(<span class=\"string\">\"bac\"</span>), <span class=\"prelude-val\">None</span>);\n\n<span class=\"comment\">// char\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"abaaa\"</span>.find(<span class=\"string\">'a'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"abaaa\"</span>.find(<span class=\"string\">'b'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"abaaa\"</span>.find(<span class=\"string\">'c'</span>), <span class=\"prelude-val\">None</span>);\n\n<span class=\"comment\">// &amp;[char; N]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"ab\"</span>.find(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"abaaa\"</span>.find(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'z'</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"abaaa\"</span>.find(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>]), <span class=\"prelude-val\">None</span>);\n\n<span class=\"comment\">// &amp;[char]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"ab\"</span>.find(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>][..]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"abaaa\"</span>.find(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'z'</span>][..]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"abaaa\"</span>.find(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>][..]), <span class=\"prelude-val\">None</span>);\n\n<span class=\"comment\">// FnMut(char) -&gt; bool\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"abcdef_z\"</span>.find(|ch| ch &gt; <span class=\"string\">'d' </span>&amp;&amp; ch &lt; <span class=\"string\">'y'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"abcddd_z\"</span>.find(|ch| ch &gt; <span class=\"string\">'d' </span>&amp;&amp; ch &lt; <span class=\"string\">'y'</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+%26str%0Afn+main()+%7B%0A++++assert_eq!(%22abaaa%22.find(%22ba%22),+Some(1));%0A++++assert_eq!(%22abaaa%22.find(%22bac%22),+None);%0A++++%0A++++//+char%0A++++assert_eq!(%22abaaa%22.find('a'),+Some(0));%0A++++assert_eq!(%22abaaa%22.find('b'),+Some(1));%0A++++assert_eq!(%22abaaa%22.find('c'),+None);%0A++++%0A++++//+%26%5Bchar;+N%5D%0A++++assert_eq!(%22ab%22.find(%26%5B'b',+'a'%5D),+Some(0));%0A++++assert_eq!(%22abaaa%22.find(%26%5B'a',+'z'%5D),+Some(0));%0A++++assert_eq!(%22abaaa%22.find(%26%5B'c',+'d'%5D),+None);%0A++++%0A++++//+%26%5Bchar%5D%0A++++assert_eq!(%22ab%22.find(%26%5B'b',+'a'%5D%5B..%5D),+Some(0));%0A++++assert_eq!(%22abaaa%22.find(%26%5B'a',+'z'%5D%5B..%5D),+Some(0));%0A++++assert_eq!(%22abaaa%22.find(%26%5B'c',+'d'%5D%5B..%5D),+None);%0A++++%0A++++//+FnMut(char)+-%3E+bool%0A++++assert_eq!(%22abcdef_z%22.find(%7Cch%7C+ch+%3E+'d'+%26%26+ch+%3C+'y'),+Some(4));%0A++++assert_eq!(%22abcddd_z%22.find(%7Cch%7C+ch+%3E+'d'+%26%26+ch+%3C+'y'),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Searcher\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#102\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a>: <a class=\"trait\" href=\"trait.Searcher.html\" title=\"trait std::str::pattern::Searcher\">Searcher</a>&lt;'a&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ğŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Associated searcher for this pattern</p>\n</div></details></div><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.into_searcher\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#106\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.into_searcher\" class=\"fn\">into_searcher</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>) -&gt; Self::<a class=\"associatedtype\" href=\"trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ğŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs the associated searcher from\n<code>self</code> and the <code>haystack</code> to search in.</p>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_contained_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#110\">source</a><h4 class=\"code-header\">fn <a href=\"#method.is_contained_in\" class=\"fn\">is_contained_in</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ğŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Checks whether the pattern matches anywhere in the haystack</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_prefix_of\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#116\">source</a><h4 class=\"code-header\">fn <a href=\"#method.is_prefix_of\" class=\"fn\">is_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ğŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Checks whether the pattern matches at the front of the haystack</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_suffix_of\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#122-124\">source</a><h4 class=\"code-header\">fn <a href=\"#method.is_suffix_of\" class=\"fn\">is_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self::<a class=\"associatedtype\" href=\"trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ğŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Checks whether the pattern matches at the back of the haystack</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_prefix_of\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#131\">source</a><h4 class=\"code-header\">fn <a href=\"#method.strip_prefix_of\" class=\"fn\">strip_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ğŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the pattern from the front of haystack, if it matches.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_suffix_of\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#147-149\">source</a><h4 class=\"code-header\">fn <a href=\"#method.strip_suffix_of\" class=\"fn\">strip_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    Self::<a class=\"associatedtype\" href=\"trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ğŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the pattern from the back of haystack, if it matches.</p>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">Â§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Pattern%3C'a%3E-for-char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#546\">source</a><a href=\"#impl-Pattern%3C'a%3E-for-char\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt; for <a class=\"primitive\" href=\"../../primitive.char.html\">char</a></h3></section></summary><div class=\"docblock\"><p>Searches for chars that are equal to a given <a href=\"../../primitive.char.html\" title=\"primitive char\"><code>char</code></a>.</p>\n<h4 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find(<span class=\"string\">'o'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find('o'),+Some(4));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Searcher-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Searcher-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a> = <a class=\"struct\" href=\"struct.CharSearcher.html\" title=\"struct std::str::pattern::CharSearcher\">CharSearcher</a>&lt;'a&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Pattern%3C'a%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#952\">source</a><a href=\"#impl-Pattern%3C'a%3E-for-%26str\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt; for &amp;'b <a class=\"primitive\" href=\"../../primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Non-allocating substring search.</p>\n<p>Will handle the pattern <code>\"\"</code> as returning empty matches at each character\nboundary.</p>\n<h4 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find(<span class=\"string\">\"world\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(%22world%22),+Some(6));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Searcher-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Searcher-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a> = <a class=\"struct\" href=\"struct.StrSearcher.html\" title=\"struct std::str::pattern::StrSearcher\">StrSearcher</a>&lt;'a, 'b&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Pattern%3C'a%3E-for-%26String\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2288\">source</a><a href=\"#impl-Pattern%3C'a%3E-for-%26String\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt; for &amp;'b <a class=\"struct\" href=\"../../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"docblock\"><p>A convenience impl that delegates to the impl for <code>&amp;str</code>.</p>\n<h4 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(String::from(<span class=\"string\">\"Hello world\"</span>).find(<span class=\"string\">\"world\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(String::from(%22Hello+world%22).find(%22world%22),+Some(6));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Searcher-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Searcher-3\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a> = &lt;&amp;'b <a class=\"primitive\" href=\"../../primitive.str.html\">str</a> as <a class=\"trait\" href=\"trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Pattern%3C'a%3E-for-%26%5Bchar%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#873\">source</a><a href=\"#impl-Pattern%3C'a%3E-for-%26%5Bchar%5D\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt; for &amp;'b [<a class=\"primitive\" href=\"../../primitive.char.html\">char</a>]</h3></section></summary><div class=\"docblock\"><p>Searches for chars that are equal to any of the <a href=\"../../primitive.char.html\" title=\"primitive char\"><code>char</code></a>s in the slice.</p>\n<h4 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">Â§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'l'</span>, <span class=\"string\">'l'</span>] <span class=\"kw\">as </span><span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'l'</span>, <span class=\"string\">'l'</span>][..]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(%26%5B'l',+'l'%5D+as+%26%5B_%5D),+Some(2));%0A++++assert_eq!(%22Hello+world%22.find(%26%5B'l',+'l'%5D%5B..%5D),+Some(2));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Searcher-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Searcher-4\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a> = <a class=\"struct\" href=\"struct.CharSliceSearcher.html\" title=\"struct std::str::pattern::CharSliceSearcher\">CharSliceSearcher</a>&lt;'a, 'b&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Pattern%3C'a%3E-for-%26%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#934\">source</a><a href=\"#impl-Pattern%3C'a%3E-for-%26%26str\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, 'b, 'c&gt; <a class=\"trait\" href=\"trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt; for &amp;'c &amp;'b <a class=\"primitive\" href=\"../../primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Delegates to the <code>&amp;str</code> impl.</p>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Searcher-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Searcher-5\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a> = <a class=\"struct\" href=\"struct.StrSearcher.html\" title=\"struct std::str::pattern::StrSearcher\">StrSearcher</a>&lt;'a, 'b&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Pattern%3C'a%3E-for-%26%5Bchar;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#831\">source</a><a href=\"#impl-Pattern%3C'a%3E-for-%26%5Bchar;+N%5D\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, 'b, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt; for &amp;'b [<a class=\"primitive\" href=\"../../primitive.char.html\">char</a>; <a class=\"primitive\" href=\"../../primitive.array.html\">N</a>]</h3></section></summary><div class=\"docblock\"><p>Searches for chars that are equal to any of the <a href=\"../../primitive.char.html\" title=\"primitive char\"><code>char</code></a>s in the array.</p>\n<h4 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">Â§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'o'</span>, <span class=\"string\">'l'</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">'h'</span>, <span class=\"string\">'w'</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(%26%5B'o',+'l'%5D),+Some(2));%0A++++assert_eq!(%22Hello+world%22.find(%26%5B'h',+'w'%5D),+Some(6));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Searcher-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Searcher-6\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a> = <a class=\"struct\" href=\"struct.CharArrayRefSearcher.html\" title=\"struct std::str::pattern::CharArrayRefSearcher\">CharArrayRefSearcher</a>&lt;'a, 'b, N&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Pattern%3C'a%3E-for-F\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#922-924\">source</a><a href=\"#impl-Pattern%3C'a%3E-for-F\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, F&gt; <a class=\"trait\" href=\"trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt; for F<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../../primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>,</div></h3></section></summary><div class=\"docblock\"><p>Searches for <a href=\"../../primitive.char.html\" title=\"primitive char\"><code>char</code></a>s that match the given predicate.</p>\n<h4 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">Â§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find(char::is_uppercase), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find(|c| <span class=\"string\">\"aeiou\"</span>.contains(c)), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(char::is_uppercase),+Some(0));%0A++++assert_eq!(%22Hello+world%22.find(%7Cc%7C+%22aeiou%22.contains(c)),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Searcher-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Searcher-7\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a> = <a class=\"struct\" href=\"struct.CharPredicateSearcher.html\" title=\"struct std::str::pattern::CharPredicateSearcher\">CharPredicateSearcher</a>&lt;'a, F&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Pattern%3C'a%3E-for-%5Bchar;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#809\">source</a><a href=\"#impl-Pattern%3C'a%3E-for-%5Bchar;+N%5D\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt; for [<a class=\"primitive\" href=\"../../primitive.char.html\">char</a>; <a class=\"primitive\" href=\"../../primitive.array.html\">N</a>]</h3></section></summary><div class=\"docblock\"><p>Searches for chars that are equal to any of the <a href=\"../../primitive.char.html\" title=\"primitive char\"><code>char</code></a>s in the array.</p>\n<h4 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">Â§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find([<span class=\"string\">'o'</span>, <span class=\"string\">'l'</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find([<span class=\"string\">'h'</span>, <span class=\"string\">'w'</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(%5B'o',+'l'%5D),+Some(2));%0A++++assert_eq!(%22Hello+world%22.find(%5B'h',+'w'%5D),+Some(6));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Searcher-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Searcher-8\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a> = <a class=\"struct\" href=\"struct.CharArraySearcher.html\" title=\"struct std::str::pattern::CharArraySearcher\">CharArraySearcher</a>&lt;'a, N&gt;</h4></section></div></details></div><script src=\"../../../trait.impl/core/str/pattern/trait.Pattern.js\" data-ignore-extern-crates=\"alloc\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:04.810Z"
}