{
	"title": "marker.rs - source",
	"url": "https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#992-1003",
	"markdown": "# marker.rs - source\n\n```\n//! Primitive traits and types representing basic properties of types.\n//!\n//! Rust types can be classified in various useful ways according to\n//! their intrinsic properties. These classifications are represented\n//! as traits.\n\n#![stable(feature = \"rust1\", since = \"1.0.0\")]\n\nuse crate::cell::UnsafeCell;\nuse crate::cmp;\nuse crate::fmt::Debug;\nuse crate::hash::Hash;\nuse crate::hash::Hasher;\n\n/// Implements a given marker trait for multiple types at the same time.\n///\n/// The basic syntax looks like this:\n/// ```ignore private macro\n/// marker_impls! { MarkerTrait for u8, i8 }\n/// ```\n/// You can also implement `unsafe` traits\n/// ```ignore private macro\n/// marker_impls! { unsafe MarkerTrait for u8, i8 }\n/// ```\n/// Add attributes to all impls:\n/// ```ignore private macro\n/// marker_impls! {\n///     #[allow(lint)]\n///     #[unstable(feature = \"marker_trait\", issue = \"none\")]\n///     MarkerTrait for u8, i8\n/// }\n/// ```\n/// And use generics:\n/// ```ignore private macro\n/// marker_impls! {\n///     MarkerTrait for\n///         u8, i8,\n///         {T: ?Sized} *const T,\n///         {T: ?Sized} *mut T,\n///         {T: MarkerTrait} PhantomData<T>,\n///         u32,\n/// }\n/// ```\n#[unstable(feature = \"internal_impls_macro\", issue = \"none\")]\nmacro marker_impls {\n    ( $(#[$($meta:tt)*])* $Trait:ident for $({$($bounds:tt)*})? $T:ty $(, $($rest:tt)*)? ) => {\n        $(#[$($meta)*])* impl< $($($bounds)*)? > $Trait for $T {}\n        marker_impls! { $(#[$($meta)*])* $Trait for $($($rest)*)? }\n    },\n    ( $(#[$($meta:tt)*])* $Trait:ident for ) => {},\n\n    ( $(#[$($meta:tt)*])* unsafe $Trait:ident for $({$($bounds:tt)*})? $T:ty $(, $($rest:tt)*)? ) => {\n        $(#[$($meta)*])* unsafe impl< $($($bounds)*)? > $Trait for $T {}\n        marker_impls! { $(#[$($meta)*])* unsafe $Trait for $($($rest)*)? }\n    },\n    ( $(#[$($meta:tt)*])* unsafe $Trait:ident for ) => {},\n}\n\n/// Types that can be transferred across thread boundaries.\n///\n/// This trait is automatically implemented when the compiler determines it's\n/// appropriate.\n///\n/// An example of a non-`Send` type is the reference-counting pointer\n/// [`rc::Rc`][`Rc`]. If two threads attempt to clone [`Rc`]s that point to the same\n/// reference-counted value, they might try to update the reference count at the\n/// same time, which is [undefined behavior][ub] because [`Rc`] doesn't use atomic\n/// operations. Its cousin [`sync::Arc`][arc] does use atomic operations (incurring\n/// some overhead) and thus is `Send`.\n///\n/// See [the Nomicon](../../nomicon/send-and-sync.html) and the [`Sync`] trait for more details.\n///\n/// [`Rc`]: ../../std/rc/struct.Rc.html\n/// [arc]: ../../std/sync/struct.Arc.html\n/// [ub]: ../../reference/behavior-considered-undefined.html\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"Send\")]\n#[diagnostic::on_unimplemented(\n    message = \"`{Self}` cannot be sent between threads safely\",\n    label = \"`{Self}` cannot be sent between threads safely\"\n)]\npub unsafe auto trait Send {\n    // empty.\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> !Send for *const T {}\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> !Send for *mut T {}\n\n// Most instances arise automatically, but this instance is needed to link up `T: Sync` with\n// `&T: Send` (and it also removes the unsound default instance `T Send` -> `&T: Send` that would\n// otherwise exist).\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nunsafe impl<T: Sync + ?Sized> Send for &T {}\n\n/// Types with a constant size known at compile time.\n///\n/// All type parameters have an implicit bound of `Sized`. The special syntax\n/// `?Sized` can be used to remove this bound if it's not appropriate.\n///\n/// ```\n/// # #![allow(dead_code)]\n/// struct Foo<T>(T);\n/// struct Bar<T: ?Sized>(T);\n///\n/// // struct FooUse(Foo<[i32]>); // error: Sized is not implemented for [i32]\n/// struct BarUse(Bar<[i32]>); // OK\n/// ```\n///\n/// The one exception is the implicit `Self` type of a trait. A trait does not\n/// have an implicit `Sized` bound as this is incompatible with [trait object]s\n/// where, by definition, the trait needs to work with all possible implementors,\n/// and thus could be any size.\n///\n/// Although Rust will let you bind `Sized` to a trait, you won't\n/// be able to use it to form a trait object later:\n///\n/// ```\n/// # #![allow(unused_variables)]\n/// trait Foo { }\n/// trait Bar: Sized { }\n///\n/// struct Impl;\n/// impl Foo for Impl { }\n/// impl Bar for Impl { }\n///\n/// let x: &dyn Foo = &Impl;    // OK\n/// // let y: &dyn Bar = &Impl; // error: the trait `Bar` cannot\n///                             // be made into an object\n/// ```\n///\n/// [trait object]: ../../book/ch17-02-trait-objects.html\n#[doc(alias = \"?\", alias = \"?Sized\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[lang = \"sized\"]\n#[diagnostic::on_unimplemented(\n    message = \"the size for values of type `{Self}` cannot be known at compilation time\",\n    label = \"doesn't have a size known at compile-time\"\n)]\n#[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n#[rustc_specialization_trait]\n#[rustc_deny_explicit_impl(implement_via_object = false)]\n#[rustc_coinductive]\npub trait Sized {\n    // Empty.\n}\n\n/// Types that can be \"unsized\" to a dynamically-sized type.\n///\n/// For example, the sized array type `[i8; 2]` implements `Unsize<[i8]>` and\n/// `Unsize<dyn fmt::Debug>`.\n///\n/// All implementations of `Unsize` are provided automatically by the compiler.\n/// Those implementations are:\n///\n/// - Arrays `[T; N]` implement `Unsize<[T]>`.\n/// - A type implements `Unsize<dyn Trait + 'a>` if all of these conditions are met:\n///   - The type implements `Trait`.\n///   - `Trait` is object safe.\n///   - The type is sized.\n///   - The type outlives `'a`.\n/// - Structs `Foo<..., T1, ..., Tn, ...>` implement `Unsize<Foo<..., U1, ..., Un, ...>>`\n/// where any number of (type and const) parameters may be changed if all of these conditions\n/// are met:\n///   - Only the last field of `Foo` has a type involving the parameters `T1`, ..., `Tn`.\n///   - All other parameters of the struct are equal.\n///   - `Field<T1, ..., Tn>: Unsize<Field<U1, ..., Un>>`, where `Field<...>` stands for the actual\n///     type of the struct's last field.\n///\n/// `Unsize` is used along with [`ops::CoerceUnsized`] to allow\n/// \"user-defined\" containers such as [`Rc`] to contain dynamically-sized\n/// types. See the [DST coercion RFC][RFC982] and [the nomicon entry on coercion][nomicon-coerce]\n/// for more details.\n///\n/// [`ops::CoerceUnsized`]: crate::ops::CoerceUnsized\n/// [`Rc`]: ../../std/rc/struct.Rc.html\n/// [RFC982]: https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\n/// [nomicon-coerce]: ../../nomicon/coercions.html\n#[unstable(feature = \"unsize\", issue = \"18598\")]\n#[lang = \"unsize\"]\n#[rustc_deny_explicit_impl(implement_via_object = false)]\npub trait Unsize<T: ?Sized> {\n    // Empty.\n}\n\n/// Required trait for constants used in pattern matches.\n///\n/// Any type that derives `PartialEq` automatically implements this trait,\n/// *regardless* of whether its type-parameters implement `PartialEq`.\n///\n/// If a `const` item contains some type that does not implement this trait,\n/// then that type either (1.) does not implement `PartialEq` (which means the\n/// constant will not provide that comparison method, which code generation\n/// assumes is available), or (2.) it implements *its own* version of\n/// `PartialEq` (which we assume does not conform to a structural-equality\n/// comparison).\n///\n/// In either of the two scenarios above, we reject usage of such a constant in\n/// a pattern match.\n///\n/// See also the [structural match RFC][RFC1445], and [issue 63438] which\n/// motivated migrating from an attribute-based design to this trait.\n///\n/// [RFC1445]: https://github.com/rust-lang/rfcs/blob/master/text/1445-restrict-constants-in-patterns.md\n/// [issue 63438]: https://github.com/rust-lang/rust/issues/63438\n#[unstable(feature = \"structural_match\", issue = \"31434\")]\n#[diagnostic::on_unimplemented(message = \"the type `{Self}` does not `#[derive(PartialEq)]`\")]\n#[lang = \"structural_peq\"]\npub trait StructuralPartialEq {\n    // Empty.\n}\n\nmarker_impls! {\n    #[unstable(feature = \"structural_match\", issue = \"31434\")]\n    StructuralPartialEq for\n        usize, u8, u16, u32, u64, u128,\n        isize, i8, i16, i32, i64, i128,\n        bool,\n        char,\n        str /* Technically requires `[u8]: StructuralPartialEq` */,\n        (),\n        {T, const N: usize} [T; N],\n        {T} [T],\n        {T: ?Sized} &T,\n}\n\n/// Types whose values can be duplicated simply by copying bits.\n///\n/// By default, variable bindings have 'move semantics.' In other\n/// words:\n///\n/// ```\n/// #[derive(Debug)]\n/// struct Foo;\n///\n/// let x = Foo;\n///\n/// let y = x;\n///\n/// // `x` has moved into `y`, and so cannot be used\n///\n/// // println!(\"{x:?}\"); // error: use of moved value\n/// ```\n///\n/// However, if a type implements `Copy`, it instead has 'copy semantics':\n///\n/// ```\n/// // We can derive a `Copy` implementation. `Clone` is also required, as it's\n/// // a supertrait of `Copy`.\n/// #[derive(Debug, Copy, Clone)]\n/// struct Foo;\n///\n/// let x = Foo;\n///\n/// let y = x;\n///\n/// // `y` is a copy of `x`\n///\n/// println!(\"{x:?}\"); // A-OK!\n/// ```\n///\n/// It's important to note that in these two examples, the only difference is whether you\n/// are allowed to access `x` after the assignment. Under the hood, both a copy and a move\n/// can result in bits being copied in memory, although this is sometimes optimized away.\n///\n/// ## How can I implement `Copy`?\n///\n/// There are two ways to implement `Copy` on your type. The simplest is to use `derive`:\n///\n/// ```\n/// #[derive(Copy, Clone)]\n/// struct MyStruct;\n/// ```\n///\n/// You can also implement `Copy` and `Clone` manually:\n///\n/// ```\n/// struct MyStruct;\n///\n/// impl Copy for MyStruct { }\n///\n/// impl Clone for MyStruct {\n///     fn clone(&self) -> MyStruct {\n///         *self\n///     }\n/// }\n/// ```\n///\n/// There is a small difference between the two: the `derive` strategy will also place a `Copy`\n/// bound on type parameters, which isn't always desired.\n///\n/// ## What's the difference between `Copy` and `Clone`?\n///\n/// Copies happen implicitly, for example as part of an assignment `y = x`. The behavior of\n/// `Copy` is not overloadable; it is always a simple bit-wise copy.\n///\n/// Cloning is an explicit action, `x.clone()`. The implementation of [`Clone`] can\n/// provide any type-specific behavior necessary to duplicate values safely. For example,\n/// the implementation of [`Clone`] for [`String`] needs to copy the pointed-to string\n/// buffer in the heap. A simple bitwise copy of [`String`] values would merely copy the\n/// pointer, leading to a double free down the line. For this reason, [`String`] is [`Clone`]\n/// but not `Copy`.\n///\n/// [`Clone`] is a supertrait of `Copy`, so everything which is `Copy` must also implement\n/// [`Clone`]. If a type is `Copy` then its [`Clone`] implementation only needs to return `*self`\n/// (see the example above).\n///\n/// ## When can my type be `Copy`?\n///\n/// A type can implement `Copy` if all of its components implement `Copy`. For example, this\n/// struct can be `Copy`:\n///\n/// ```\n/// # #[allow(dead_code)]\n/// #[derive(Copy, Clone)]\n/// struct Point {\n///    x: i32,\n///    y: i32,\n/// }\n/// ```\n///\n/// A struct can be `Copy`, and [`i32`] is `Copy`, therefore `Point` is eligible to be `Copy`.\n/// By contrast, consider\n///\n/// ```\n/// # #![allow(dead_code)]\n/// # struct Point;\n/// struct PointList {\n///     points: Vec<Point>,\n/// }\n/// ```\n///\n/// The struct `PointList` cannot implement `Copy`, because [`Vec<T>`] is not `Copy`. If we\n/// attempt to derive a `Copy` implementation, we'll get an error:\n///\n/// ```text\n/// the trait `Copy` cannot be implemented for this type; field `points` does not implement `Copy`\n/// ```\n///\n/// Shared references (`&T`) are also `Copy`, so a type can be `Copy`, even when it holds\n/// shared references of types `T` that are *not* `Copy`. Consider the following struct,\n/// which can implement `Copy`, because it only holds a *shared reference* to our non-`Copy`\n/// type `PointList` from above:\n///\n/// ```\n/// # #![allow(dead_code)]\n/// # struct PointList;\n/// #[derive(Copy, Clone)]\n/// struct PointListWrapper<'a> {\n///     point_list_ref: &'a PointList,\n/// }\n/// ```\n///\n/// ## When *can't* my type be `Copy`?\n///\n/// Some types can't be copied safely. For example, copying `&mut T` would create an aliased\n/// mutable reference. Copying [`String`] would duplicate responsibility for managing the\n/// [`String`]'s buffer, leading to a double free.\n///\n/// Generalizing the latter case, any type implementing [`Drop`] can't be `Copy`, because it's\n/// managing some resource besides its own [`size_of::<T>`] bytes.\n///\n/// If you try to implement `Copy` on a struct or enum containing non-`Copy` data, you will get\n/// the error [E0204].\n///\n/// [E0204]: ../../error_codes/E0204.html\n///\n/// ## When *should* my type be `Copy`?\n///\n/// Generally speaking, if your type _can_ implement `Copy`, it should. Keep in mind, though,\n/// that implementing `Copy` is part of the public API of your type. If the type might become\n/// non-`Copy` in the future, it could be prudent to omit the `Copy` implementation now, to\n/// avoid a breaking API change.\n///\n/// ## Additional implementors\n///\n/// In addition to the [implementors listed below][impls],\n/// the following types also implement `Copy`:\n///\n/// * Function item types (i.e., the distinct types defined for each function)\n/// * Function pointer types (e.g., `fn() -> i32`)\n/// * Closure types, if they capture no value from the environment\n///   or if all such captured values implement `Copy` themselves.\n///   Note that variables captured by shared reference always implement `Copy`\n///   (even if the referent doesn't),\n///   while variables captured by mutable reference never implement `Copy`.\n///\n/// [`Vec<T>`]: ../../std/vec/struct.Vec.html\n/// [`String`]: ../../std/string/struct.String.html\n/// [`size_of::<T>`]: crate::mem::size_of\n/// [impls]: #implementors\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[lang = \"copy\"]\n// FIXME(matthewjasper) This allows copying a type that doesn't implement\n// `Copy` because of unsatisfied lifetime bounds (copying `A<'_>` when only\n// `A<'static>: Copy` and `A<'_>: Clone`).\n// We have this attribute here for now only because there are quite a few\n// existing specializations on `Copy` that already exist in the standard\n// library, and there's no way to safely have this behavior right now.\n#[rustc_unsafe_specialization_marker]\n#[rustc_diagnostic_item = \"Copy\"]\npub trait Copy: Clone {\n    // Empty.\n}\n\n/// Derive macro generating an impl of the trait `Copy`.\n#[rustc_builtin_macro]\n#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n#[allow_internal_unstable(core_intrinsics, derive_clone_copy)]\npub macro Copy($item:item) {\n    /* compiler built-in */\n}\n\n// Implementations of `Copy` for primitive types.\n//\n// Implementations that cannot be described in Rust\n// are implemented in `traits::SelectionContext::copy_clone_conditions()`\n// in `rustc_trait_selection`.\nmarker_impls! {\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    Copy for\n        usize, u8, u16, u32, u64, u128,\n        isize, i8, i16, i32, i64, i128,\n        f16, f32, f64, f128,\n        bool, char,\n        {T: ?Sized} *const T,\n        {T: ?Sized} *mut T,\n\n}\n\n#[unstable(feature = \"never_type\", issue = \"35121\")]\nimpl Copy for ! {}\n\n/// Shared references can be copied, but mutable references *cannot*!\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> Copy for &T {}\n\n/// Types for which it is safe to share references between threads.\n///\n/// This trait is automatically implemented when the compiler determines\n/// it's appropriate.\n///\n/// The precise definition is: a type `T` is [`Sync`] if and only if `&T` is\n/// [`Send`]. In other words, if there is no possibility of\n/// [undefined behavior][ub] (including data races) when passing\n/// `&T` references between threads.\n///\n/// As one would expect, primitive types like [`u8`] and [`f64`]\n/// are all [`Sync`], and so are simple aggregate types containing them,\n/// like tuples, structs and enums. More examples of basic [`Sync`]\n/// types include \"immutable\" types like `&T`, and those with simple\n/// inherited mutability, such as [`Box<T>`][box], [`Vec<T>`][vec] and\n/// most other collection types. (Generic parameters need to be [`Sync`]\n/// for their container to be [`Sync`].)\n///\n/// A somewhat surprising consequence of the definition is that `&mut T`\n/// is `Sync` (if `T` is `Sync`) even though it seems like that might\n/// provide unsynchronized mutation. The trick is that a mutable\n/// reference behind a shared reference (that is, `& &mut T`)\n/// becomes read-only, as if it were a `& &T`. Hence there is no risk\n/// of a data race.\n///\n/// A shorter overview of how [`Sync`] and [`Send`] relate to referencing:\n/// * `&T` is [`Send`] if and only if `T` is [`Sync`]\n/// * `&mut T` is [`Send`] if and only if `T` is [`Send`]\n/// * `&T` and `&mut T` are [`Sync`] if and only if `T` is [`Sync`]\n///\n/// Types that are not `Sync` are those that have \"interior\n/// mutability\" in a non-thread-safe form, such as [`Cell`][cell]\n/// and [`RefCell`][refcell]. These types allow for mutation of\n/// their contents even through an immutable, shared reference. For\n/// example the `set` method on [`Cell<T>`][cell] takes `&self`, so it requires\n/// only a shared reference [`&Cell<T>`][cell]. The method performs no\n/// synchronization, thus [`Cell`][cell] cannot be `Sync`.\n///\n/// Another example of a non-`Sync` type is the reference-counting\n/// pointer [`Rc`][rc]. Given any reference [`&Rc<T>`][rc], you can clone\n/// a new [`Rc<T>`][rc], modifying the reference counts in a non-atomic way.\n///\n/// For cases when one does need thread-safe interior mutability,\n/// Rust provides [atomic data types], as well as explicit locking via\n/// [`sync::Mutex`][mutex] and [`sync::RwLock`][rwlock]. These types\n/// ensure that any mutation cannot cause data races, hence the types\n/// are `Sync`. Likewise, [`sync::Arc`][arc] provides a thread-safe\n/// analogue of [`Rc`][rc].\n///\n/// Any types with interior mutability must also use the\n/// [`cell::UnsafeCell`][unsafecell] wrapper around the value(s) which\n/// can be mutated through a shared reference. Failing to doing this is\n/// [undefined behavior][ub]. For example, [`transmute`][transmute]-ing\n/// from `&T` to `&mut T` is invalid.\n///\n/// See [the Nomicon][nomicon-send-and-sync] for more details about `Sync`.\n///\n/// [box]: ../../std/boxed/struct.Box.html\n/// [vec]: ../../std/vec/struct.Vec.html\n/// [cell]: crate::cell::Cell\n/// [refcell]: crate::cell::RefCell\n/// [rc]: ../../std/rc/struct.Rc.html\n/// [arc]: ../../std/sync/struct.Arc.html\n/// [atomic data types]: crate::sync::atomic\n/// [mutex]: ../../std/sync/struct.Mutex.html\n/// [rwlock]: ../../std/sync/struct.RwLock.html\n/// [unsafecell]: crate::cell::UnsafeCell\n/// [ub]: ../../reference/behavior-considered-undefined.html\n/// [transmute]: crate::mem::transmute\n/// [nomicon-send-and-sync]: ../../nomicon/send-and-sync.html\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"Sync\")]\n#[lang = \"sync\"]\n#[rustc_on_unimplemented(\n    on(\n        _Self = \"core::cell::once::OnceCell<T>\",\n        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::OnceLock` instead\"\n    ),\n    on(\n        _Self = \"core::cell::Cell<u8>\",\n        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicU8` instead\",\n    ),\n    on(\n        _Self = \"core::cell::Cell<u16>\",\n        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicU16` instead\",\n    ),\n    on(\n        _Self = \"core::cell::Cell<u32>\",\n        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicU32` instead\",\n    ),\n    on(\n        _Self = \"core::cell::Cell<u64>\",\n        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicU64` instead\",\n    ),\n    on(\n        _Self = \"core::cell::Cell<usize>\",\n        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicUsize` instead\",\n    ),\n    on(\n        _Self = \"core::cell::Cell<i8>\",\n        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI8` instead\",\n    ),\n    on(\n        _Self = \"core::cell::Cell<i16>\",\n        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI16` instead\",\n    ),\n    on(\n        _Self = \"core::cell::Cell<i32>\",\n        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\",\n    ),\n    on(\n        _Self = \"core::cell::Cell<i64>\",\n        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI64` instead\",\n    ),\n    on(\n        _Self = \"core::cell::Cell<isize>\",\n        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicIsize` instead\",\n    ),\n    on(\n        _Self = \"core::cell::Cell<bool>\",\n        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicBool` instead\",\n    ),\n    on(\n        all(\n            _Self = \"core::cell::Cell<T>\",\n            not(_Self = \"core::cell::Cell<u8>\"),\n            not(_Self = \"core::cell::Cell<u16>\"),\n            not(_Self = \"core::cell::Cell<u32>\"),\n            not(_Self = \"core::cell::Cell<u64>\"),\n            not(_Self = \"core::cell::Cell<usize>\"),\n            not(_Self = \"core::cell::Cell<i8>\"),\n            not(_Self = \"core::cell::Cell<i16>\"),\n            not(_Self = \"core::cell::Cell<i32>\"),\n            not(_Self = \"core::cell::Cell<i64>\"),\n            not(_Self = \"core::cell::Cell<isize>\"),\n            not(_Self = \"core::cell::Cell<bool>\")\n        ),\n        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock`\",\n    ),\n    on(\n        _Self = \"core::cell::RefCell<T>\",\n        note = \"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\",\n    ),\n    message = \"`{Self}` cannot be shared between threads safely\",\n    label = \"`{Self}` cannot be shared between threads safely\"\n)]\npub unsafe auto trait Sync {\n    // FIXME(estebank): once support to add notes in `rustc_on_unimplemented`\n    // lands in beta, and it has been extended to check whether a closure is\n    // anywhere in the requirement chain, extend it as such (#48534):\n    // ```\n    // on(\n    //     closure,\n    //     note=\"`{Self}` cannot be shared safely, consider marking the closure `move`\"\n    // ),\n    // ```\n\n    // Empty\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> !Sync for *const T {}\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> !Sync for *mut T {}\n\n/// Zero-sized type used to mark things that \"act like\" they own a `T`.\n///\n/// Adding a `PhantomData<T>` field to your type tells the compiler that your\n/// type acts as though it stores a value of type `T`, even though it doesn't\n/// really. This information is used when computing certain safety properties.\n///\n/// For a more in-depth explanation of how to use `PhantomData<T>`, please see\n/// [the Nomicon](../../nomicon/phantom-data.html).\n///\n/// # A ghastly note 👻👻👻\n///\n/// Though they both have scary names, `PhantomData` and 'phantom types' are\n/// related, but not identical. A phantom type parameter is simply a type\n/// parameter which is never used. In Rust, this often causes the compiler to\n/// complain, and the solution is to add a \"dummy\" use by way of `PhantomData`.\n///\n/// # Examples\n///\n/// ## Unused lifetime parameters\n///\n/// Perhaps the most common use case for `PhantomData` is a struct that has an\n/// unused lifetime parameter, typically as part of some unsafe code. For\n/// example, here is a struct `Slice` that has two pointers of type `*const T`,\n/// presumably pointing into an array somewhere:\n///\n/// ```compile_fail,E0392\n/// struct Slice<'a, T> {\n///     start: *const T,\n///     end: *const T,\n/// }\n/// ```\n///\n/// The intention is that the underlying data is only valid for the\n/// lifetime `'a`, so `Slice` should not outlive `'a`. However, this\n/// intent is not expressed in the code, since there are no uses of\n/// the lifetime `'a` and hence it is not clear what data it applies\n/// to. We can correct this by telling the compiler to act *as if* the\n/// `Slice` struct contained a reference `&'a T`:\n///\n/// ```\n/// use std::marker::PhantomData;\n///\n/// # #[allow(dead_code)]\n/// struct Slice<'a, T> {\n///     start: *const T,\n///     end: *const T,\n///     phantom: PhantomData<&'a T>,\n/// }\n/// ```\n///\n/// This also in turn infers the lifetime bound `T: 'a`, indicating\n/// that any references in `T` are valid over the lifetime `'a`.\n///\n/// When initializing a `Slice` you simply provide the value\n/// `PhantomData` for the field `phantom`:\n///\n/// ```\n/// # #![allow(dead_code)]\n/// # use std::marker::PhantomData;\n/// # struct Slice<'a, T> {\n/// #     start: *const T,\n/// #     end: *const T,\n/// #     phantom: PhantomData<&'a T>,\n/// # }\n/// fn borrow_vec<T>(vec: &Vec<T>) -> Slice<'_, T> {\n///     let ptr = vec.as_ptr();\n///     Slice {\n///         start: ptr,\n///         end: unsafe { ptr.add(vec.len()) },\n///         phantom: PhantomData,\n///     }\n/// }\n/// ```\n///\n/// ## Unused type parameters\n///\n/// It sometimes happens that you have unused type parameters which\n/// indicate what type of data a struct is \"tied\" to, even though that\n/// data is not actually found in the struct itself. Here is an\n/// example where this arises with [FFI]. The foreign interface uses\n/// handles of type `*mut ()` to refer to Rust values of different\n/// types. We track the Rust type using a phantom type parameter on\n/// the struct `ExternalResource` which wraps a handle.\n///\n/// [FFI]: ../../book/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code\n///\n/// ```\n/// # #![allow(dead_code)]\n/// # trait ResType { }\n/// # struct ParamType;\n/// # mod foreign_lib {\n/// #     pub fn new(_: usize) -> *mut () { 42 as *mut () }\n/// #     pub fn do_stuff(_: *mut (), _: usize) {}\n/// # }\n/// # fn convert_params(_: ParamType) -> usize { 42 }\n/// use std::marker::PhantomData;\n/// use std::mem;\n///\n/// struct ExternalResource<R> {\n///    resource_handle: *mut (),\n///    resource_type: PhantomData<R>,\n/// }\n///\n/// impl<R: ResType> ExternalResource<R> {\n///     fn new() -> Self {\n///         let size_of_res = mem::size_of::<R>();\n///         Self {\n///             resource_handle: foreign_lib::new(size_of_res),\n///             resource_type: PhantomData,\n///         }\n///     }\n///\n///     fn do_stuff(&self, param: ParamType) {\n///         let foreign_params = convert_params(param);\n///         foreign_lib::do_stuff(self.resource_handle, foreign_params);\n///     }\n/// }\n/// ```\n///\n/// ## Ownership and the drop check\n///\n/// The exact interaction of `PhantomData` with drop check **may change in the future**.\n///\n/// Currently, adding a field of type `PhantomData<T>` indicates that your type *owns* data of type\n/// `T` in very rare circumstances. This in turn has effects on the Rust compiler's [drop check]\n/// analysis. For the exact rules, see the [drop check] documentation.\n///\n/// ## Layout\n///\n/// For all `T`, the following are guaranteed:\n/// * `size_of::<PhantomData<T>>() == 0`\n/// * `align_of::<PhantomData<T>>() == 1`\n///\n/// [drop check]: Drop#drop-check\n#[lang = \"phantom_data\"]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub struct PhantomData<T: ?Sized>;\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> Hash for PhantomData<T> {\n    #[inline]\n    fn hash<H: Hasher>(&self, _: &mut H) {}\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> cmp::PartialEq for PhantomData<T> {\n    fn eq(&self, _other: &PhantomData<T>) -> bool {\n        true\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> cmp::Eq for PhantomData<T> {}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> cmp::PartialOrd for PhantomData<T> {\n    fn partial_cmp(&self, _other: &PhantomData<T>) -> Option<cmp::Ordering> {\n        Option::Some(cmp::Ordering::Equal)\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> cmp::Ord for PhantomData<T> {\n    fn cmp(&self, _other: &PhantomData<T>) -> cmp::Ordering {\n        cmp::Ordering::Equal\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> Copy for PhantomData<T> {}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> Clone for PhantomData<T> {\n    fn clone(&self) -> Self {\n        Self\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized> Default for PhantomData<T> {\n    fn default() -> Self {\n        Self\n    }\n}\n\n#[unstable(feature = \"structural_match\", issue = \"31434\")]\nimpl<T: ?Sized> StructuralPartialEq for PhantomData<T> {}\n\n/// Compiler-internal trait used to indicate the type of enum discriminants.\n///\n/// This trait is automatically implemented for every type and does not add any\n/// guarantees to [`mem::Discriminant`]. It is **undefined behavior** to transmute\n/// between `DiscriminantKind::Discriminant` and `mem::Discriminant`.\n///\n/// [`mem::Discriminant`]: crate::mem::Discriminant\n#[unstable(\n    feature = \"discriminant_kind\",\n    issue = \"none\",\n    reason = \"this trait is unlikely to ever be stabilized, use `mem::discriminant` instead\"\n)]\n#[lang = \"discriminant_kind\"]\n#[rustc_deny_explicit_impl(implement_via_object = false)]\npub trait DiscriminantKind {\n    /// The type of the discriminant, which must satisfy the trait\n    /// bounds required by `mem::Discriminant`.\n    #[lang = \"discriminant_type\"]\n    type Discriminant: Clone + Copy + Debug + Eq + PartialEq + Hash + Send + Sync + Unpin;\n}\n\n/// Used to determine whether a type contains\n/// any `UnsafeCell` internally, but not through an indirection.\n/// This affects, for example, whether a `static` of that type is\n/// placed in read-only static memory or writable static memory.\n/// This can be used to declare that a constant with a generic type\n/// will not contain interior mutability, and subsequently allow\n/// placing the constant behind references.\n///\n/// # Safety\n///\n/// This trait is a core part of the language, it is just expressed as a trait in libcore for\n/// convenience. Do *not* implement it for other types.\n// FIXME: Eventually this trait should become `#[rustc_deny_explicit_impl]`.\n// That requires porting the impls below to native internal impls.\n#[lang = \"freeze\"]\n#[unstable(feature = \"freeze\", issue = \"121675\")]\npub unsafe auto trait Freeze {}\n\n#[unstable(feature = \"freeze\", issue = \"121675\")]\nimpl<T: ?Sized> !Freeze for UnsafeCell<T> {}\nmarker_impls! {\n    #[unstable(feature = \"freeze\", issue = \"121675\")]\n    unsafe Freeze for\n        {T: ?Sized} PhantomData<T>,\n        {T: ?Sized} *const T,\n        {T: ?Sized} *mut T,\n        {T: ?Sized} &T,\n        {T: ?Sized} &mut T,\n}\n\n/// Types that do not require any pinning guarantees.\n///\n/// For information on what \"pinning\" is, see the [`pin` module] documentation.\n///\n/// Implementing the `Unpin` trait for `T` expresses the fact that `T` is pinning-agnostic:\n/// it shall not expose nor rely on any pinning guarantees. This, in turn, means that a\n/// `Pin`-wrapped pointer to such a type can feature a *fully unrestricted* API.\n/// In other words, if `T: Unpin`, a value of type `T` will *not* be bound by the invariants\n/// which pinning otherwise offers, even when \"pinned\" by a [`Pin<Ptr>`] pointing at it.\n/// When a value of type `T` is pointed at by a [`Pin<Ptr>`], [`Pin`] will not restrict access\n/// to the pointee value like it normally would, thus allowing the user to do anything that they\n/// normally could with a non-[`Pin`]-wrapped `Ptr` to that value.\n///\n/// The idea of this trait is to alleviate the reduced ergonomics of APIs that require the use\n/// of [`Pin`] for soundness for some types, but which also want to be used by other types that\n/// don't care about pinning. The prime example of such an API is [`Future::poll`]. There are many\n/// [`Future`] types that don't care about pinning. These futures can implement `Unpin` and\n/// therefore get around the pinning related restrictions in the API, while still allowing the\n/// subset of [`Future`]s which *do* require pinning to be implemented soundly.\n///\n/// For more discussion on the consequences of [`Unpin`] within the wider scope of the pinning\n/// system, see the [section about `Unpin`] in the [`pin` module].\n///\n/// `Unpin` has no consequence at all for non-pinned data. In particular, [`mem::replace`] happily\n/// moves `!Unpin` data, which would be immovable when pinned ([`mem::replace`] works for any\n/// `&mut T`, not just when `T: Unpin`).\n///\n/// *However*, you cannot use [`mem::replace`] on `!Unpin` data which is *pinned* by being wrapped\n/// inside a [`Pin<Ptr>`] pointing at it. This is because you cannot (safely) use a\n/// [`Pin<Ptr>`] to get an `&mut T` to its pointee value, which you would need to call\n/// [`mem::replace`], and *that* is what makes this system work.\n///\n/// So this, for example, can only be done on types implementing `Unpin`:\n///\n/// ```rust\n/// # #![allow(unused_must_use)]\n/// use std::mem;\n/// use std::pin::Pin;\n///\n/// let mut string = \"this\".to_string();\n/// let mut pinned_string = Pin::new(&mut string);\n///\n/// // We need a mutable reference to call `mem::replace`.\n/// // We can obtain such a reference by (implicitly) invoking `Pin::deref_mut`,\n/// // but that is only possible because `String` implements `Unpin`.\n/// mem::replace(&mut *pinned_string, \"other\".to_string());\n/// ```\n///\n/// This trait is automatically implemented for almost every type. The compiler is free\n/// to take the conservative stance of marking types as [`Unpin`] so long as all of the types that\n/// compose its fields are also [`Unpin`]. This is because if a type implements [`Unpin`], then it\n/// is unsound for that type's implementation to rely on pinning-related guarantees for soundness,\n/// *even* when viewed through a \"pinning\" pointer! It is the responsibility of the implementor of\n/// a type that relies upon pinning for soundness to ensure that type is *not* marked as [`Unpin`]\n/// by adding [`PhantomPinned`] field. For more details, see the [`pin` module] docs.\n///\n/// [`mem::replace`]: crate::mem::replace \"mem replace\"\n/// [`Future`]: crate::future::Future \"Future\"\n/// [`Future::poll`]: crate::future::Future::poll \"Future poll\"\n/// [`Pin`]: crate::pin::Pin \"Pin\"\n/// [`Pin<Ptr>`]: crate::pin::Pin \"Pin\"\n/// [`pin` module]: crate::pin \"pin module\"\n/// [section about `Unpin`]: crate::pin#unpin \"pin module docs about unpin\"\n/// [`unsafe`]: ../../std/keyword.unsafe.html \"keyword unsafe\"\n#[stable(feature = \"pin\", since = \"1.33.0\")]\n#[diagnostic::on_unimplemented(\n    note = \"consider using the `pin!` macro\\nconsider using `Box::pin` if you need to access the pinned value outside of the current scope\",\n    message = \"`{Self}` cannot be unpinned\"\n)]\n#[lang = \"unpin\"]\npub auto trait Unpin {}\n\n/// A marker type which does not implement `Unpin`.\n///\n/// If a type contains a `PhantomPinned`, it will not implement `Unpin` by default.\n#[stable(feature = \"pin\", since = \"1.33.0\")]\n#[derive(Debug, Default, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\npub struct PhantomPinned;\n\n#[stable(feature = \"pin\", since = \"1.33.0\")]\nimpl !Unpin for PhantomPinned {}\n\nmarker_impls! {\n    #[stable(feature = \"pin\", since = \"1.33.0\")]\n    Unpin for\n        {T: ?Sized} &T,\n        {T: ?Sized} &mut T,\n}\n\nmarker_impls! {\n    #[stable(feature = \"pin_raw\", since = \"1.38.0\")]\n    Unpin for\n        {T: ?Sized} *const T,\n        {T: ?Sized} *mut T,\n}\n\n/// A marker for types that can be dropped.\n///\n/// This should be used for `~const` bounds,\n/// as non-const bounds will always hold for every type.\n#[unstable(feature = \"const_trait_impl\", issue = \"67792\")]\n#[lang = \"destruct\"]\n#[rustc_on_unimplemented(message = \"can't drop `{Self}`\", append_const_msg)]\n#[rustc_deny_explicit_impl(implement_via_object = false)]\n#[const_trait]\npub trait Destruct {}\n\n/// A marker for tuple types.\n///\n/// The implementation of this trait is built-in and cannot be implemented\n/// for any user type.\n#[unstable(feature = \"tuple_trait\", issue = \"none\")]\n#[lang = \"tuple_trait\"]\n#[diagnostic::on_unimplemented(message = \"`{Self}` is not a tuple\")]\n#[rustc_deny_explicit_impl(implement_via_object = false)]\npub trait Tuple {}\n\n/// A marker for pointer-like types.\n///\n/// All types that have the same size and alignment as a `usize` or\n/// `*const ()` automatically implement this trait.\n#[unstable(feature = \"pointer_like_trait\", issue = \"none\")]\n#[lang = \"pointer_like\"]\n#[diagnostic::on_unimplemented(\n    message = \"`{Self}` needs to have the same ABI as a pointer\",\n    label = \"`{Self}` needs to be a pointer-like type\"\n)]\npub trait PointerLike {}\n\n/// A marker for types which can be used as types of `const` generic parameters.\n///\n/// These types must have a proper equivalence relation (`Eq`) and it must be automatically\n/// derived (`StructuralPartialEq`). There's a hard-coded check in the compiler ensuring\n/// that all fields are also `ConstParamTy`, which implies that recursively, all fields\n/// are `StructuralPartialEq`.\n#[lang = \"const_param_ty\"]\n#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n#[diagnostic::on_unimplemented(message = \"`{Self}` can't be used as a const parameter type\")]\n#[allow(multiple_supertrait_upcastable)]\npub trait ConstParamTy: StructuralPartialEq + Eq {}\n\n/// Derive macro generating an impl of the trait `ConstParamTy`.\n#[rustc_builtin_macro]\n#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\npub macro ConstParamTy($item:item) {\n    /* compiler built-in */\n}\n\n// FIXME(adt_const_params): handle `ty::FnDef`/`ty::Closure`\nmarker_impls! {\n    #[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n    ConstParamTy for\n        usize, u8, u16, u32, u64, u128,\n        isize, i8, i16, i32, i64, i128,\n        bool,\n        char,\n        str /* Technically requires `[u8]: ConstParamTy` */,\n        {T: ConstParamTy, const N: usize} [T; N],\n        {T: ConstParamTy} [T],\n        {T: ?Sized + ConstParamTy} &T,\n}\n\n// FIXME(adt_const_params): Add to marker_impls call above once not in bootstrap\n#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\nimpl ConstParamTy for () {}\n\n/// A common trait implemented by all function pointers.\n#[unstable(\n    feature = \"fn_ptr_trait\",\n    issue = \"none\",\n    reason = \"internal trait for implementing various traits for all function pointers\"\n)]\n#[lang = \"fn_ptr_trait\"]\n#[rustc_deny_explicit_impl(implement_via_object = false)]\npub trait FnPtr: Copy + Clone {\n    /// Returns the address of the function pointer.\n    #[lang = \"fn_ptr_addr\"]\n    fn addr(self) -> *const ();\n}\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Source of the Rust file `library/core/src/marker.rs`.\"><title>marker.rs - source</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"core\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../../static.files/src-script-e66d777a5a92e9b2.js\"></script><script defer=\"\" src=\"../../src-files1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc src\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"sidebar\"><div class=\"src-sidebar-title\"><h2>Files</h2></div><div id=\"src-sidebar\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>boxed</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/boxed/thin.rs.html\">thin.rs</a></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>binary_heap</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/collections/binary_heap/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>btree</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>map</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/collections/btree/map/entry.rs.html\">entry.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/alloc/collections/btree/append.rs.html\">append.rs</a><a href=\"../../src/alloc/collections/btree/borrow.rs.html\">borrow.rs</a><a href=\"../../src/alloc/collections/btree/dedup_sorted_iter.rs.html\">dedup_sorted_iter.rs</a><a href=\"../../src/alloc/collections/btree/fix.rs.html\">fix.rs</a><a href=\"../../src/alloc/collections/btree/map.rs.html\">map.rs</a><a href=\"../../src/alloc/collections/btree/mem.rs.html\">mem.rs</a><a href=\"../../src/alloc/collections/btree/merge_iter.rs.html\">merge_iter.rs</a><a href=\"../../src/alloc/collections/btree/mod.rs.html\">mod.rs</a><a href=\"../../src/alloc/collections/btree/navigate.rs.html\">navigate.rs</a><a href=\"../../src/alloc/collections/btree/node.rs.html\">node.rs</a><a href=\"../../src/alloc/collections/btree/remove.rs.html\">remove.rs</a><a href=\"../../src/alloc/collections/btree/search.rs.html\">search.rs</a><a href=\"../../src/alloc/collections/btree/set.rs.html\">set.rs</a><a href=\"../../src/alloc/collections/btree/set_val.rs.html\">set_val.rs</a><a href=\"../../src/alloc/collections/btree/split.rs.html\">split.rs</a></div></details><details class=\"dir-entry\"><summary>vec_deque</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/collections/vec_deque/drain.rs.html\">drain.rs</a><a href=\"../../src/alloc/collections/vec_deque/into_iter.rs.html\">into_iter.rs</a><a href=\"../../src/alloc/collections/vec_deque/iter.rs.html\">iter.rs</a><a href=\"../../src/alloc/collections/vec_deque/iter_mut.rs.html\">iter_mut.rs</a><a href=\"../../src/alloc/collections/vec_deque/macros.rs.html\">macros.rs</a><a href=\"../../src/alloc/collections/vec_deque/mod.rs.html\">mod.rs</a><a href=\"../../src/alloc/collections/vec_deque/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../src/alloc/collections/vec_deque/spec_from_iter.rs.html\">spec_from_iter.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/alloc/collections/linked_list.rs.html\">linked_list.rs</a><a href=\"../../src/alloc/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../src/alloc/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>vec</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/vec/cow.rs.html\">cow.rs</a><a href=\"../../src/alloc/vec/drain.rs.html\">drain.rs</a><a href=\"../../src/alloc/vec/extract_if.rs.html\">extract_if.rs</a><a href=\"../../src/alloc/vec/in_place_collect.rs.html\">in_place_collect.rs</a><a href=\"../../src/alloc/vec/in_place_drop.rs.html\">in_place_drop.rs</a><a href=\"../../src/alloc/vec/into_iter.rs.html\">into_iter.rs</a><a href=\"../../src/alloc/vec/is_zero.rs.html\">is_zero.rs</a><a href=\"../../src/alloc/vec/mod.rs.html\">mod.rs</a><a href=\"../../src/alloc/vec/partial_eq.rs.html\">partial_eq.rs</a><a href=\"../../src/alloc/vec/set_len_on_drop.rs.html\">set_len_on_drop.rs</a><a href=\"../../src/alloc/vec/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../src/alloc/vec/spec_from_elem.rs.html\">spec_from_elem.rs</a><a href=\"../../src/alloc/vec/spec_from_iter.rs.html\">spec_from_iter.rs</a><a href=\"../../src/alloc/vec/spec_from_iter_nested.rs.html\">spec_from_iter_nested.rs</a><a href=\"../../src/alloc/vec/splice.rs.html\">splice.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/alloc/alloc.rs.html\">alloc.rs</a><a href=\"../../src/alloc/borrow.rs.html\">borrow.rs</a><a href=\"../../src/alloc/boxed.rs.html\">boxed.rs</a><a href=\"../../src/alloc/fmt.rs.html\">fmt.rs</a><a href=\"../../src/alloc/lib.rs.html\">lib.rs</a><a href=\"../../src/alloc/macros.rs.html\">macros.rs</a><a href=\"../../src/alloc/raw_vec.rs.html\">raw_vec.rs</a><a href=\"../../src/alloc/rc.rs.html\">rc.rs</a><a href=\"../../src/alloc/slice.rs.html\">slice.rs</a><a href=\"../../src/alloc/str.rs.html\">str.rs</a><a href=\"../../src/alloc/string.rs.html\">string.rs</a><a href=\"../../src/alloc/sync.rs.html\">sync.rs</a><a href=\"../../src/alloc/task.rs.html\">task.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/alloc/global.rs.html\">global.rs</a><a href=\"../../src/core/alloc/layout.rs.html\">layout.rs</a><a href=\"../../src/core/alloc/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>array</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/array/ascii.rs.html\">ascii.rs</a><a href=\"../../src/core/array/drain.rs.html\">drain.rs</a><a href=\"../../src/core/array/equality.rs.html\">equality.rs</a><a href=\"../../src/core/array/iter.rs.html\">iter.rs</a><a href=\"../../src/core/array/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ascii</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ascii/ascii_char.rs.html\">ascii_char.rs</a></div></details><details class=\"dir-entry\"><summary>async_iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/async_iter/async_iter.rs.html\">async_iter.rs</a><a href=\"../../src/core/async_iter/from_iter.rs.html\">from_iter.rs</a><a href=\"../../src/core/async_iter/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cell</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/cell/lazy.rs.html\">lazy.rs</a><a href=\"../../src/core/cell/once.rs.html\">once.rs</a></div></details><details class=\"dir-entry\"><summary>char</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/char/convert.rs.html\">convert.rs</a><a href=\"../../src/core/char/decode.rs.html\">decode.rs</a><a href=\"../../src/core/char/methods.rs.html\">methods.rs</a><a href=\"../../src/core/char/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/cmp/bytewise.rs.html\">bytewise.rs</a></div></details><details class=\"dir-entry\"><summary>convert</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/convert/mod.rs.html\">mod.rs</a><a href=\"../../src/core/convert/num.rs.html\">num.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../src/core/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>fmt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/fmt/builders.rs.html\">builders.rs</a><a href=\"../../src/core/fmt/float.rs.html\">float.rs</a><a href=\"../../src/core/fmt/mod.rs.html\">mod.rs</a><a href=\"../../src/core/fmt/num.rs.html\">num.rs</a><a href=\"../../src/core/fmt/rt.rs.html\">rt.rs</a></div></details><details class=\"dir-entry\"><summary>future</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/future/async_drop.rs.html\">async_drop.rs</a><a href=\"../../src/core/future/future.rs.html\">future.rs</a><a href=\"../../src/core/future/into_future.rs.html\">into_future.rs</a><a href=\"../../src/core/future/join.rs.html\">join.rs</a><a href=\"../../src/core/future/mod.rs.html\">mod.rs</a><a href=\"../../src/core/future/pending.rs.html\">pending.rs</a><a href=\"../../src/core/future/poll_fn.rs.html\">poll_fn.rs</a><a href=\"../../src/core/future/ready.rs.html\">ready.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/hash/mod.rs.html\">mod.rs</a><a href=\"../../src/core/hash/sip.rs.html\">sip.rs</a></div></details><details class=\"dir-entry\"><summary>intrinsics</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/intrinsics/mir.rs.html\">mir.rs</a><a href=\"../../src/core/intrinsics/simd.rs.html\">simd.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/io/borrowed_buf.rs.html\">borrowed_buf.rs</a><a href=\"../../src/core/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>adapters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/iter/adapters/array_chunks.rs.html\">array_chunks.rs</a><a href=\"../../src/core/iter/adapters/by_ref_sized.rs.html\">by_ref_sized.rs</a><a href=\"../../src/core/iter/adapters/chain.rs.html\">chain.rs</a><a href=\"../../src/core/iter/adapters/cloned.rs.html\">cloned.rs</a><a href=\"../../src/core/iter/adapters/copied.rs.html\">copied.rs</a><a href=\"../../src/core/iter/adapters/cycle.rs.html\">cycle.rs</a><a href=\"../../src/core/iter/adapters/enumerate.rs.html\">enumerate.rs</a><a href=\"../../src/core/iter/adapters/filter.rs.html\">filter.rs</a><a href=\"../../src/core/iter/adapters/filter_map.rs.html\">filter_map.rs</a><a href=\"../../src/core/iter/adapters/flatten.rs.html\">flatten.rs</a><a href=\"../../src/core/iter/adapters/fuse.rs.html\">fuse.rs</a><a href=\"../../src/core/iter/adapters/inspect.rs.html\">inspect.rs</a><a href=\"../../src/core/iter/adapters/intersperse.rs.html\">intersperse.rs</a><a href=\"../../src/core/iter/adapters/map.rs.html\">map.rs</a><a href=\"../../src/core/iter/adapters/map_while.rs.html\">map_while.rs</a><a href=\"../../src/core/iter/adapters/map_windows.rs.html\">map_windows.rs</a><a href=\"../../src/core/iter/adapters/mod.rs.html\">mod.rs</a><a href=\"../../src/core/iter/adapters/peekable.rs.html\">peekable.rs</a><a href=\"../../src/core/iter/adapters/rev.rs.html\">rev.rs</a><a href=\"../../src/core/iter/adapters/scan.rs.html\">scan.rs</a><a href=\"../../src/core/iter/adapters/skip.rs.html\">skip.rs</a><a href=\"../../src/core/iter/adapters/skip_while.rs.html\">skip_while.rs</a><a href=\"../../src/core/iter/adapters/step_by.rs.html\">step_by.rs</a><a href=\"../../src/core/iter/adapters/take.rs.html\">take.rs</a><a href=\"../../src/core/iter/adapters/take_while.rs.html\">take_while.rs</a><a href=\"../../src/core/iter/adapters/zip.rs.html\">zip.rs</a></div></details><details class=\"dir-entry\"><summary>sources</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/iter/sources/empty.rs.html\">empty.rs</a><a href=\"../../src/core/iter/sources/from_coroutine.rs.html\">from_coroutine.rs</a><a href=\"../../src/core/iter/sources/from_fn.rs.html\">from_fn.rs</a><a href=\"../../src/core/iter/sources/once.rs.html\">once.rs</a><a href=\"../../src/core/iter/sources/once_with.rs.html\">once_with.rs</a><a href=\"../../src/core/iter/sources/repeat.rs.html\">repeat.rs</a><a href=\"../../src/core/iter/sources/repeat_n.rs.html\">repeat_n.rs</a><a href=\"../../src/core/iter/sources/repeat_with.rs.html\">repeat_with.rs</a><a href=\"../../src/core/iter/sources/successors.rs.html\">successors.rs</a></div></details><details class=\"dir-entry\"><summary>traits</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/iter/traits/accum.rs.html\">accum.rs</a><a href=\"../../src/core/iter/traits/collect.rs.html\">collect.rs</a><a href=\"../../src/core/iter/traits/double_ended.rs.html\">double_ended.rs</a><a href=\"../../src/core/iter/traits/exact_size.rs.html\">exact_size.rs</a><a href=\"../../src/core/iter/traits/iterator.rs.html\">iterator.rs</a><a href=\"../../src/core/iter/traits/marker.rs.html\">marker.rs</a><a href=\"../../src/core/iter/traits/mod.rs.html\">mod.rs</a><a href=\"../../src/core/iter/traits/unchecked_iterator.rs.html\">unchecked_iterator.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/iter/mod.rs.html\">mod.rs</a><a href=\"../../src/core/iter/range.rs.html\">range.rs</a><a href=\"../../src/core/iter/sources.rs.html\">sources.rs</a></div></details><details class=\"dir-entry\"><summary>macros</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/macros/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mem</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/mem/manually_drop.rs.html\">manually_drop.rs</a><a href=\"../../src/core/mem/maybe_uninit.rs.html\">maybe_uninit.rs</a><a href=\"../../src/core/mem/mod.rs.html\">mod.rs</a><a href=\"../../src/core/mem/transmutability.rs.html\">transmutability.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/net/display_buffer.rs.html\">display_buffer.rs</a><a href=\"../../src/core/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../src/core/net/mod.rs.html\">mod.rs</a><a href=\"../../src/core/net/parser.rs.html\">parser.rs</a><a href=\"../../src/core/net/socket_addr.rs.html\">socket_addr.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dec2flt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/num/dec2flt/common.rs.html\">common.rs</a><a href=\"../../src/core/num/dec2flt/decimal.rs.html\">decimal.rs</a><a href=\"../../src/core/num/dec2flt/float.rs.html\">float.rs</a><a href=\"../../src/core/num/dec2flt/fpu.rs.html\">fpu.rs</a><a href=\"../../src/core/num/dec2flt/lemire.rs.html\">lemire.rs</a><a href=\"../../src/core/num/dec2flt/mod.rs.html\">mod.rs</a><a href=\"../../src/core/num/dec2flt/number.rs.html\">number.rs</a><a href=\"../../src/core/num/dec2flt/parse.rs.html\">parse.rs</a><a href=\"../../src/core/num/dec2flt/slow.rs.html\">slow.rs</a><a href=\"../../src/core/num/dec2flt/table.rs.html\">table.rs</a></div></details><details class=\"dir-entry\"><summary>flt2dec</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>strategy</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/num/flt2dec/strategy/dragon.rs.html\">dragon.rs</a><a href=\"../../src/core/num/flt2dec/strategy/grisu.rs.html\">grisu.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/num/flt2dec/decoder.rs.html\">decoder.rs</a><a href=\"../../src/core/num/flt2dec/estimator.rs.html\">estimator.rs</a><a href=\"../../src/core/num/flt2dec/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>shells</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/num/shells/i128.rs.html\">i128.rs</a><a href=\"../../src/core/num/shells/i16.rs.html\">i16.rs</a><a href=\"../../src/core/num/shells/i32.rs.html\">i32.rs</a><a href=\"../../src/core/num/shells/i64.rs.html\">i64.rs</a><a href=\"../../src/core/num/shells/i8.rs.html\">i8.rs</a><a href=\"../../src/core/num/shells/int_macros.rs.html\">int_macros.rs</a><a href=\"../../src/core/num/shells/isize.rs.html\">isize.rs</a><a href=\"../../src/core/num/shells/u128.rs.html\">u128.rs</a><a href=\"../../src/core/num/shells/u16.rs.html\">u16.rs</a><a href=\"../../src/core/num/shells/u32.rs.html\">u32.rs</a><a href=\"../../src/core/num/shells/u64.rs.html\">u64.rs</a><a href=\"../../src/core/num/shells/u8.rs.html\">u8.rs</a><a href=\"../../src/core/num/shells/usize.rs.html\">usize.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/num/bignum.rs.html\">bignum.rs</a><a href=\"../../src/core/num/diy_float.rs.html\">diy_float.rs</a><a href=\"../../src/core/num/error.rs.html\">error.rs</a><a href=\"../../src/core/num/f128.rs.html\">f128.rs</a><a href=\"../../src/core/num/f16.rs.html\">f16.rs</a><a href=\"../../src/core/num/f32.rs.html\">f32.rs</a><a href=\"../../src/core/num/f64.rs.html\">f64.rs</a><a href=\"../../src/core/num/fmt.rs.html\">fmt.rs</a><a href=\"../../src/core/num/int_log10.rs.html\">int_log10.rs</a><a href=\"../../src/core/num/int_macros.rs.html\">int_macros.rs</a><a href=\"../../src/core/num/mod.rs.html\">mod.rs</a><a href=\"../../src/core/num/nonzero.rs.html\">nonzero.rs</a><a href=\"../../src/core/num/overflow_panic.rs.html\">overflow_panic.rs</a><a href=\"../../src/core/num/saturating.rs.html\">saturating.rs</a><a href=\"../../src/core/num/uint_macros.rs.html\">uint_macros.rs</a><a href=\"../../src/core/num/wrapping.rs.html\">wrapping.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ops/arith.rs.html\">arith.rs</a><a href=\"../../src/core/ops/async_function.rs.html\">async_function.rs</a><a href=\"../../src/core/ops/bit.rs.html\">bit.rs</a><a href=\"../../src/core/ops/control_flow.rs.html\">control_flow.rs</a><a href=\"../../src/core/ops/coroutine.rs.html\">coroutine.rs</a><a href=\"../../src/core/ops/deref.rs.html\">deref.rs</a><a href=\"../../src/core/ops/drop.rs.html\">drop.rs</a><a href=\"../../src/core/ops/function.rs.html\">function.rs</a><a href=\"../../src/core/ops/index.rs.html\">index.rs</a><a href=\"../../src/core/ops/index_range.rs.html\">index_range.rs</a><a href=\"../../src/core/ops/mod.rs.html\">mod.rs</a><a href=\"../../src/core/ops/range.rs.html\">range.rs</a><a href=\"../../src/core/ops/try_trait.rs.html\">try_trait.rs</a><a href=\"../../src/core/ops/unsize.rs.html\">unsize.rs</a></div></details><details class=\"dir-entry\"><summary>panic</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/panic/location.rs.html\">location.rs</a><a href=\"../../src/core/panic/panic_info.rs.html\">panic_info.rs</a><a href=\"../../src/core/panic/unwind_safe.rs.html\">unwind_safe.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>masks</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html\">full_masks.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html\">assign.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html\">deref.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html\">shift_scalar.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html\">unary.rs</a></div></details><details class=\"dir-entry\"><summary>simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html\">eq.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html\">ord.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html\">float.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html\">int.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html\">uint.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html\">mut_ptr.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/cmp.rs.html\">cmp.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num.rs.html\">num.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/prelude.rs.html\">prelude.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/ptr.rs.html\">ptr.rs</a></div></details><details class=\"dir-entry\"><summary>vendor</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html\">x86.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/alias.rs.html\">alias.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/cast.rs.html\">cast.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/fmt.rs.html\">fmt.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/iter.rs.html\">iter.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/lane_count.rs.html\">lane_count.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/masks.rs.html\">masks.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/mod.rs.html\">mod.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops.rs.html\">ops.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/select.rs.html\">select.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/swizzle.rs.html\">swizzle.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html\">swizzle_dyn.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html\">to_bytes.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/vector.rs.html\">vector.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/vendor.rs.html\">vendor.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/prelude/common.rs.html\">common.rs</a><a href=\"../../src/core/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ptr/alignment.rs.html\">alignment.rs</a><a href=\"../../src/core/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../src/core/ptr/metadata.rs.html\">metadata.rs</a><a href=\"../../src/core/ptr/mod.rs.html\">mod.rs</a><a href=\"../../src/core/ptr/mut_ptr.rs.html\">mut_ptr.rs</a><a href=\"../../src/core/ptr/non_null.rs.html\">non_null.rs</a><a href=\"../../src/core/ptr/unique.rs.html\">unique.rs</a></div></details><details class=\"dir-entry\"><summary>slice</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/slice/iter/macros.rs.html\">macros.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/slice/ascii.rs.html\">ascii.rs</a><a href=\"../../src/core/slice/cmp.rs.html\">cmp.rs</a><a href=\"../../src/core/slice/index.rs.html\">index.rs</a><a href=\"../../src/core/slice/iter.rs.html\">iter.rs</a><a href=\"../../src/core/slice/memchr.rs.html\">memchr.rs</a><a href=\"../../src/core/slice/mod.rs.html\">mod.rs</a><a href=\"../../src/core/slice/raw.rs.html\">raw.rs</a><a href=\"../../src/core/slice/rotate.rs.html\">rotate.rs</a><a href=\"../../src/core/slice/select.rs.html\">select.rs</a><a href=\"../../src/core/slice/sort.rs.html\">sort.rs</a><a href=\"../../src/core/slice/specialize.rs.html\">specialize.rs</a></div></details><details class=\"dir-entry\"><summary>stdarch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_arch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>aarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/neon/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/prefetch.rs.html\">prefetch.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/tme.rs.html\">tme.rs</a></div></details><details class=\"dir-entry\"><summary>arm</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/dsp.rs.html\">dsp.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/neon.rs.html\">neon.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/sat.rs.html\">sat.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/simd32.rs.html\">simd32.rs</a></div></details><details class=\"dir-entry\"><summary>arm_shared</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>barrier</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/cp15.rs.html\">cp15.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/crc.rs.html\">crc.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/crypto.rs.html\">crypto.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/hints.rs.html\">hints.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>loongarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>lasx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/types.rs.html\">types.rs</a></div></details><details class=\"dir-entry\"><summary>lsx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mips</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/mips/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>nvptx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/nvptx/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/altivec.rs.html\">altivec.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc64/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>riscv32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv32/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv32/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv64/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv_shared</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/p.rs.html\">p.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/zb.rs.html\">zb.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>wasm32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/atomic.rs.html\">atomic.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/memory.rs.html\">memory.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/relaxed_simd.rs.html\">relaxed_simd.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/simd128.rs.html\">simd128.rs</a></div></details><details class=\"dir-entry\"><summary>x86</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/abm.rs.html\">abm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/adx.rs.html\">adx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/aes.rs.html\">aes.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx.rs.html\">avx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx2.rs.html\">avx2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512bf16.rs.html\">avx512bf16.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512bitalg.rs.html\">avx512bitalg.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512bw.rs.html\">avx512bw.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512cd.rs.html\">avx512cd.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512f.rs.html\">avx512f.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512ifma.rs.html\">avx512ifma.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi.rs.html\">avx512vbmi.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi2.rs.html\">avx512vbmi2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vnni.rs.html\">avx512vnni.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vpopcntdq.rs.html\">avx512vpopcntdq.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bmi1.rs.html\">bmi1.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bmi2.rs.html\">bmi2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bswap.rs.html\">bswap.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bt.rs.html\">bt.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/cpuid.rs.html\">cpuid.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/eflags.rs.html\">eflags.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/f16c.rs.html\">f16c.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/fma.rs.html\">fma.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/fxsr.rs.html\">fxsr.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/gfni.rs.html\">gfni.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/pclmulqdq.rs.html\">pclmulqdq.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/rdrand.rs.html\">rdrand.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/rdtsc.rs.html\">rdtsc.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/rtm.rs.html\">rtm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sha.rs.html\">sha.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse.rs.html\">sse.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse2.rs.html\">sse2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse3.rs.html\">sse3.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse41.rs.html\">sse41.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse42.rs.html\">sse42.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse4a.rs.html\">sse4a.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/ssse3.rs.html\">ssse3.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/tbm.rs.html\">tbm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/vaes.rs.html\">vaes.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/vpclmulqdq.rs.html\">vpclmulqdq.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/xsave.rs.html\">xsave.rs</a></div></details><details class=\"dir-entry\"><summary>x86_64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/abm.rs.html\">abm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/adx.rs.html\">adx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/avx.rs.html\">avx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/avx2.rs.html\">avx2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/avx512f.rs.html\">avx512f.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bmi.rs.html\">bmi.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bmi2.rs.html\">bmi2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bswap.rs.html\">bswap.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bt.rs.html\">bt.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/cmpxchg16b.rs.html\">cmpxchg16b.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/fxsr.rs.html\">fxsr.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/rdrand.rs.html\">rdrand.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse.rs.html\">sse.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse2.rs.html\">sse2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse41.rs.html\">sse41.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse42.rs.html\">sse42.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/xsave.rs.html\">xsave.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/simd.rs.html\">simd.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/str/converts.rs.html\">converts.rs</a><a href=\"../../src/core/str/count.rs.html\">count.rs</a><a href=\"../../src/core/str/error.rs.html\">error.rs</a><a href=\"../../src/core/str/iter.rs.html\">iter.rs</a><a href=\"../../src/core/str/lossy.rs.html\">lossy.rs</a><a href=\"../../src/core/str/mod.rs.html\">mod.rs</a><a href=\"../../src/core/str/pattern.rs.html\">pattern.rs</a><a href=\"../../src/core/str/traits.rs.html\">traits.rs</a><a href=\"../../src/core/str/validations.rs.html\">validations.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/sync/atomic.rs.html\">atomic.rs</a><a href=\"../../src/core/sync/exclusive.rs.html\">exclusive.rs</a><a href=\"../../src/core/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>task</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/task/mod.rs.html\">mod.rs</a><a href=\"../../src/core/task/poll.rs.html\">poll.rs</a><a href=\"../../src/core/task/ready.rs.html\">ready.rs</a><a href=\"../../src/core/task/wake.rs.html\">wake.rs</a></div></details><details class=\"dir-entry\"><summary>unicode</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/unicode/mod.rs.html\">mod.rs</a><a href=\"../../src/core/unicode/printable.rs.html\">printable.rs</a><a href=\"../../src/core/unicode/unicode_data.rs.html\">unicode_data.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/any.rs.html\">any.rs</a><a href=\"../../src/core/arch.rs.html\">arch.rs</a><a href=\"../../src/core/ascii.rs.html\">ascii.rs</a><a href=\"../../src/core/asserting.rs.html\">asserting.rs</a><a href=\"../../src/core/bool.rs.html\">bool.rs</a><a href=\"../../src/core/borrow.rs.html\">borrow.rs</a><a href=\"../../src/core/cell.rs.html\">cell.rs</a><a href=\"../../src/core/clone.rs.html\">clone.rs</a><a href=\"../../src/core/cmp.rs.html\">cmp.rs</a><a href=\"../../src/core/default.rs.html\">default.rs</a><a href=\"../../src/core/error.rs.html\">error.rs</a><a href=\"../../src/core/escape.rs.html\">escape.rs</a><a href=\"../../src/core/hint.rs.html\">hint.rs</a><a href=\"../../src/core/internal_macros.rs.html\">internal_macros.rs</a><a href=\"../../src/core/intrinsics.rs.html\">intrinsics.rs</a><a href=\"../../src/core/lib.rs.html\">lib.rs</a><a href=\"../../src/core/marker.rs.html\" class=\"selected\">marker.rs</a><a href=\"../../src/core/option.rs.html\">option.rs</a><a href=\"../../src/core/panic.rs.html\">panic.rs</a><a href=\"../../src/core/panicking.rs.html\">panicking.rs</a><a href=\"../../src/core/pat.rs.html\">pat.rs</a><a href=\"../../src/core/pin.rs.html\">pin.rs</a><a href=\"../../src/core/primitive.rs.html\">primitive.rs</a><a href=\"../../src/core/primitive_docs.rs.html\">primitive_docs.rs</a><a href=\"../../src/core/result.rs.html\">result.rs</a><a href=\"../../src/core/time.rs.html\">time.rs</a><a href=\"../../src/core/tuple.rs.html\">tuple.rs</a><a href=\"../../src/core/ub_checks.rs.html\">ub_checks.rs</a><a href=\"../../src/core/unit.rs.html\">unit.rs</a></div></details><details class=\"dir-entry\"><summary>proc_macro</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bridge</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/proc_macro/bridge/arena.rs.html\">arena.rs</a><a href=\"../../src/proc_macro/bridge/buffer.rs.html\">buffer.rs</a><a href=\"../../src/proc_macro/bridge/client.rs.html\">client.rs</a><a href=\"../../src/proc_macro/bridge/closure.rs.html\">closure.rs</a><a href=\"../../src/proc_macro/bridge/fxhash.rs.html\">fxhash.rs</a><a href=\"../../src/proc_macro/bridge/handle.rs.html\">handle.rs</a><a href=\"../../src/proc_macro/bridge/mod.rs.html\">mod.rs</a><a href=\"../../src/proc_macro/bridge/rpc.rs.html\">rpc.rs</a><a href=\"../../src/proc_macro/bridge/selfless_reify.rs.html\">selfless_reify.rs</a><a href=\"../../src/proc_macro/bridge/server.rs.html\">server.rs</a><a href=\"../../src/proc_macro/bridge/symbol.rs.html\">symbol.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/proc_macro/diagnostic.rs.html\">diagnostic.rs</a><a href=\"../../src/proc_macro/lib.rs.html\">lib.rs</a><a href=\"../../src/proc_macro/quote.rs.html\">quote.rs</a></div></details><details class=\"dir-entry\"><summary>std</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/backtrace/libunwind.rs.html\">libunwind.rs</a><a href=\"../../src/std/backtrace/src/backtrace/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>symbolize</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>gimli</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/symbolize/gimli/elf.rs.html\">elf.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/libs_dl_iterate_phdr.rs.html\">libs_dl_iterate_phdr.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/mmap_unix.rs.html\">mmap_unix.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/parse_running_mmaps_unix.rs.html\">parse_running_mmaps_unix.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/stash.rs.html\">stash.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/symbolize/gimli.rs.html\">gimli.rs</a><a href=\"../../src/std/backtrace/src/symbolize/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/lib.rs.html\">lib.rs</a><a href=\"../../src/std/backtrace/src/print.rs.html\">print.rs</a><a href=\"../../src/std/backtrace/src/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/collections/hash/map.rs.html\">map.rs</a><a href=\"../../src/std/collections/hash/mod.rs.html\">mod.rs</a><a href=\"../../src/std/collections/hash/set.rs.html\">set.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/core/src/primitive_docs.rs.html\">primitive_docs.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../src/std/ffi/mod.rs.html\">mod.rs</a><a href=\"../../src/std/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/hash/mod.rs.html\">mod.rs</a><a href=\"../../src/std/hash/random.rs.html\">random.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>buffered</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bufreader</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/io/buffered/bufreader/buffer.rs.html\">buffer.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/io/buffered/bufreader.rs.html\">bufreader.rs</a><a href=\"../../src/std/io/buffered/bufwriter.rs.html\">bufwriter.rs</a><a href=\"../../src/std/io/buffered/linewriter.rs.html\">linewriter.rs</a><a href=\"../../src/std/io/buffered/linewritershim.rs.html\">linewritershim.rs</a><a href=\"../../src/std/io/buffered/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>error</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/io/error/repr_bitpacked.rs.html\">repr_bitpacked.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/io/copy.rs.html\">copy.rs</a><a href=\"../../src/std/io/cursor.rs.html\">cursor.rs</a><a href=\"../../src/std/io/error.rs.html\">error.rs</a><a href=\"../../src/std/io/impls.rs.html\">impls.rs</a><a href=\"../../src/std/io/mod.rs.html\">mod.rs</a><a href=\"../../src/std/io/prelude.rs.html\">prelude.rs</a><a href=\"../../src/std/io/stdio.rs.html\">stdio.rs</a><a href=\"../../src/std/io/util.rs.html\">util.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../src/std/net/mod.rs.html\">mod.rs</a><a href=\"../../src/std/net/socket_addr.rs.html\">socket_addr.rs</a><a href=\"../../src/std/net/tcp.rs.html\">tcp.rs</a><a href=\"../../src/std/net/udp.rs.html\">udp.rs</a></div></details><details class=\"dir-entry\"><summary>os</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fd</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/fd/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/fd/net.rs.html\">net.rs</a><a href=\"../../src/std/os/fd/owned.rs.html\">owned.rs</a><a href=\"../../src/std/os/fd/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>linux</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/linux/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/linux/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/linux/net.rs.html\">net.rs</a><a href=\"../../src/std/os/linux/process.rs.html\">process.rs</a><a href=\"../../src/std/os/linux/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>linux_ext</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/net/linux_ext/addr.rs.html\">addr.rs</a><a href=\"../../src/std/os/net/linux_ext/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/net/linux_ext/socket.rs.html\">socket.rs</a><a href=\"../../src/std/os/net/linux_ext/tcp.rs.html\">tcp.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/net/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>raw</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/raw/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/unix/ffi/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/unix/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/unix/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/unix/net/addr.rs.html\">addr.rs</a><a href=\"../../src/std/os/unix/net/ancillary.rs.html\">ancillary.rs</a><a href=\"../../src/std/os/unix/net/datagram.rs.html\">datagram.rs</a><a href=\"../../src/std/os/unix/net/listener.rs.html\">listener.rs</a><a href=\"../../src/std/os/unix/net/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/unix/net/stream.rs.html\">stream.rs</a><a href=\"../../src/std/os/unix/net/ucred.rs.html\">ucred.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/unix/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/unix/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/unix/process.rs.html\">process.rs</a><a href=\"../../src/std/os/unix/raw.rs.html\">raw.rs</a><a href=\"../../src/std/os/unix/thread.rs.html\">thread.rs</a></div></details><details class=\"dir-entry\"><summary>wasi</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/wasi/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/wasi/net/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/wasi/ffi.rs.html\">ffi.rs</a><a href=\"../../src/std/os/wasi/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/wasi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>wasip2</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/wasip2/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>windows</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/windows/io/handle.rs.html\">handle.rs</a><a href=\"../../src/std/os/windows/io/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/windows/io/raw.rs.html\">raw.rs</a><a href=\"../../src/std/os/windows/io/socket.rs.html\">socket.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/windows/ffi.rs.html\">ffi.rs</a><a href=\"../../src/std/os/windows/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/windows/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/windows/process.rs.html\">process.rs</a><a href=\"../../src/std/os/windows/raw.rs.html\">raw.rs</a><a href=\"../../src/std/os/windows/thread.rs.html\">thread.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>std_float</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html\">lib.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/prelude/common.rs.html\">common.rs</a><a href=\"../../src/std/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>mpmc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sync/mpmc/array.rs.html\">array.rs</a><a href=\"../../src/std/sync/mpmc/context.rs.html\">context.rs</a><a href=\"../../src/std/sync/mpmc/counter.rs.html\">counter.rs</a><a href=\"../../src/std/sync/mpmc/error.rs.html\">error.rs</a><a href=\"../../src/std/sync/mpmc/list.rs.html\">list.rs</a><a href=\"../../src/std/sync/mpmc/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sync/mpmc/select.rs.html\">select.rs</a><a href=\"../../src/std/sync/mpmc/utils.rs.html\">utils.rs</a><a href=\"../../src/std/sync/mpmc/waker.rs.html\">waker.rs</a><a href=\"../../src/std/sync/mpmc/zero.rs.html\">zero.rs</a></div></details><details class=\"dir-entry\"><summary>mpsc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sync/mpsc/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sync/barrier.rs.html\">barrier.rs</a><a href=\"../../src/std/sync/condvar.rs.html\">condvar.rs</a><a href=\"../../src/std/sync/lazy_lock.rs.html\">lazy_lock.rs</a><a href=\"../../src/std/sync/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sync/mutex.rs.html\">mutex.rs</a><a href=\"../../src/std/sync/once.rs.html\">once.rs</a><a href=\"../../src/std/sync/once_lock.rs.html\">once_lock.rs</a><a href=\"../../src/std/sync/poison.rs.html\">poison.rs</a><a href=\"../../src/std/sync/reentrant_lock.rs.html\">reentrant_lock.rs</a><a href=\"../../src/std/sync/rwlock.rs.html\">rwlock.rs</a></div></details><details class=\"dir-entry\"><summary>sys</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>os_str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/os_str/bytes.rs.html\">bytes.rs</a><a href=\"../../src/std/sys/os_str/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>pal</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/pal/common/alloc.rs.html\">alloc.rs</a><a href=\"../../src/std/sys/pal/common/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/pal/common/small_c_string.rs.html\">small_c_string.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>process</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/pal/unix/process/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/pal/unix/process/process_common.rs.html\">process_common.rs</a><a href=\"../../src/std/sys/pal/unix/process/process_unix.rs.html\">process_unix.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/pal/unix/alloc.rs.html\">alloc.rs</a><a href=\"../../src/std/sys/pal/unix/args.rs.html\">args.rs</a><a href=\"../../src/std/sys/pal/unix/env.rs.html\">env.rs</a><a href=\"../../src/std/sys/pal/unix/fd.rs.html\">fd.rs</a><a href=\"../../src/std/sys/pal/unix/fs.rs.html\">fs.rs</a><a href=\"../../src/std/sys/pal/unix/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/pal/unix/io.rs.html\">io.rs</a><a href=\"../../src/std/sys/pal/unix/kernel_copy.rs.html\">kernel_copy.rs</a><a href=\"../../src/std/sys/pal/unix/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/pal/unix/net.rs.html\">net.rs</a><a href=\"../../src/std/sys/pal/unix/os.rs.html\">os.rs</a><a href=\"../../src/std/sys/pal/unix/pipe.rs.html\">pipe.rs</a><a href=\"../../src/std/sys/pal/unix/rand.rs.html\">rand.rs</a><a href=\"../../src/std/sys/pal/unix/stack_overflow.rs.html\">stack_overflow.rs</a><a href=\"../../src/std/sys/pal/unix/stdio.rs.html\">stdio.rs</a><a href=\"../../src/std/sys/pal/unix/thread.rs.html\">thread.rs</a><a href=\"../../src/std/sys/pal/unix/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../src/std/sys/pal/unix/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../src/std/sys/pal/unix/time.rs.html\">time.rs</a><a href=\"../../src/std/sys/pal/unix/weak.rs.html\">weak.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/pal/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>path</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/path/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/path/unix.rs.html\">unix.rs</a></div></details><details class=\"dir-entry\"><summary>personality</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dwarf</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/personality/dwarf/eh.rs.html\">eh.rs</a><a href=\"../../src/std/sys/personality/dwarf/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/personality/gcc.rs.html\">gcc.rs</a><a href=\"../../src/std/sys/personality/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>condvar</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/condvar/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/condvar/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mutex</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/mutex/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/mutex/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>once</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/once/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/once/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>rwlock</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/rwlock/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/rwlock/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_parking</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/thread_parking/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/thread_parking/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_local</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fast_local</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/thread_local/fast_local/eager.rs.html\">eager.rs</a><a href=\"../../src/std/sys/thread_local/fast_local/lazy.rs.html\">lazy.rs</a><a href=\"../../src/std/sys/thread_local/fast_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/thread_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/cmath.rs.html\">cmath.rs</a><a href=\"../../src/std/sys/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sys_common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys_common/backtrace.rs.html\">backtrace.rs</a><a href=\"../../src/std/sys_common/fs.rs.html\">fs.rs</a><a href=\"../../src/std/sys_common/io.rs.html\">io.rs</a><a href=\"../../src/std/sys_common/lazy_box.rs.html\">lazy_box.rs</a><a href=\"../../src/std/sys_common/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys_common/net.rs.html\">net.rs</a><a href=\"../../src/std/sys_common/process.rs.html\">process.rs</a><a href=\"../../src/std/sys_common/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../src/std/sys_common/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../src/std/sys_common/wstr.rs.html\">wstr.rs</a><a href=\"../../src/std/sys_common/wtf8.rs.html\">wtf8.rs</a></div></details><details class=\"dir-entry\"><summary>thread</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/thread/local.rs.html\">local.rs</a><a href=\"../../src/std/thread/mod.rs.html\">mod.rs</a><a href=\"../../src/std/thread/scoped.rs.html\">scoped.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/alloc.rs.html\">alloc.rs</a><a href=\"../../src/std/ascii.rs.html\">ascii.rs</a><a href=\"../../src/std/backtrace.rs.html\">backtrace.rs</a><a href=\"../../src/std/env.rs.html\">env.rs</a><a href=\"../../src/std/error.rs.html\">error.rs</a><a href=\"../../src/std/f128.rs.html\">f128.rs</a><a href=\"../../src/std/f16.rs.html\">f16.rs</a><a href=\"../../src/std/f32.rs.html\">f32.rs</a><a href=\"../../src/std/f64.rs.html\">f64.rs</a><a href=\"../../src/std/fs.rs.html\">fs.rs</a><a href=\"../../src/std/keyword_docs.rs.html\">keyword_docs.rs</a><a href=\"../../src/std/lib.rs.html\">lib.rs</a><a href=\"../../src/std/macros.rs.html\">macros.rs</a><a href=\"../../src/std/num.rs.html\">num.rs</a><a href=\"../../src/std/panic.rs.html\">panic.rs</a><a href=\"../../src/std/panicking.rs.html\">panicking.rs</a><a href=\"../../src/std/pat.rs.html\">pat.rs</a><a href=\"../../src/std/path.rs.html\">path.rs</a><a href=\"../../src/std/process.rs.html\">process.rs</a><a href=\"../../src/std/rt.rs.html\">rt.rs</a><a href=\"../../src/std/time.rs.html\">time.rs</a></div></details><details class=\"dir-entry\"><summary>test</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>formatters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/test/formatters/json.rs.html\">json.rs</a><a href=\"../../src/test/formatters/junit.rs.html\">junit.rs</a><a href=\"../../src/test/formatters/mod.rs.html\">mod.rs</a><a href=\"../../src/test/formatters/pretty.rs.html\">pretty.rs</a><a href=\"../../src/test/formatters/terse.rs.html\">terse.rs</a></div></details><details class=\"dir-entry\"><summary>helpers</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/test/helpers/concurrency.rs.html\">concurrency.rs</a><a href=\"../../src/test/helpers/metrics.rs.html\">metrics.rs</a><a href=\"../../src/test/helpers/mod.rs.html\">mod.rs</a><a href=\"../../src/test/helpers/shuffle.rs.html\">shuffle.rs</a></div></details><details class=\"dir-entry\"><summary>term</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>terminfo</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>parser</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/test/term/terminfo/parser/compiled.rs.html\">compiled.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/test/term/terminfo/mod.rs.html\">mod.rs</a><a href=\"../../src/test/term/terminfo/parm.rs.html\">parm.rs</a><a href=\"../../src/test/term/terminfo/searcher.rs.html\">searcher.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"><a href=\"../../src/test/bench.rs.html\">bench.rs</a><a href=\"../../src/test/cli.rs.html\">cli.rs</a><a href=\"../../src/test/console.rs.html\">console.rs</a><a href=\"../../src/test/event.rs.html\">event.rs</a><a href=\"../../src/test/lib.rs.html\">lib.rs</a><a href=\"../../src/test/options.rs.html\">options.rs</a><a href=\"../../src/test/stats.rs.html\">stats.rs</a><a href=\"../../src/test/term.rs.html\">term.rs</a><a href=\"../../src/test/test_result.rs.html\">test_result.rs</a><a href=\"../../src/test/time.rs.html\">time.rs</a><a href=\"../../src/test/types.rs.html\">types.rs</a></div></details></div></nav><div class=\"sidebar-resizer\"></div><main><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../core/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"example-wrap\"><div data-nosnippet=\"\"><pre class=\"src-line-numbers\"><a href=\"#1\" id=\"1\">1</a>\n<a href=\"#2\" id=\"2\">2</a>\n<a href=\"#3\" id=\"3\">3</a>\n<a href=\"#4\" id=\"4\">4</a>\n<a href=\"#5\" id=\"5\">5</a>\n<a href=\"#6\" id=\"6\">6</a>\n<a href=\"#7\" id=\"7\">7</a>\n<a href=\"#8\" id=\"8\">8</a>\n<a href=\"#9\" id=\"9\">9</a>\n<a href=\"#10\" id=\"10\">10</a>\n<a href=\"#11\" id=\"11\">11</a>\n<a href=\"#12\" id=\"12\">12</a>\n<a href=\"#13\" id=\"13\">13</a>\n<a href=\"#14\" id=\"14\">14</a>\n<a href=\"#15\" id=\"15\">15</a>\n<a href=\"#16\" id=\"16\">16</a>\n<a href=\"#17\" id=\"17\">17</a>\n<a href=\"#18\" id=\"18\">18</a>\n<a href=\"#19\" id=\"19\">19</a>\n<a href=\"#20\" id=\"20\">20</a>\n<a href=\"#21\" id=\"21\">21</a>\n<a href=\"#22\" id=\"22\">22</a>\n<a href=\"#23\" id=\"23\">23</a>\n<a href=\"#24\" id=\"24\">24</a>\n<a href=\"#25\" id=\"25\">25</a>\n<a href=\"#26\" id=\"26\">26</a>\n<a href=\"#27\" id=\"27\">27</a>\n<a href=\"#28\" id=\"28\">28</a>\n<a href=\"#29\" id=\"29\">29</a>\n<a href=\"#30\" id=\"30\">30</a>\n<a href=\"#31\" id=\"31\">31</a>\n<a href=\"#32\" id=\"32\">32</a>\n<a href=\"#33\" id=\"33\">33</a>\n<a href=\"#34\" id=\"34\">34</a>\n<a href=\"#35\" id=\"35\">35</a>\n<a href=\"#36\" id=\"36\">36</a>\n<a href=\"#37\" id=\"37\">37</a>\n<a href=\"#38\" id=\"38\">38</a>\n<a href=\"#39\" id=\"39\">39</a>\n<a href=\"#40\" id=\"40\">40</a>\n<a href=\"#41\" id=\"41\">41</a>\n<a href=\"#42\" id=\"42\">42</a>\n<a href=\"#43\" id=\"43\">43</a>\n<a href=\"#44\" id=\"44\">44</a>\n<a href=\"#45\" id=\"45\">45</a>\n<a href=\"#46\" id=\"46\">46</a>\n<a href=\"#47\" id=\"47\">47</a>\n<a href=\"#48\" id=\"48\">48</a>\n<a href=\"#49\" id=\"49\">49</a>\n<a href=\"#50\" id=\"50\">50</a>\n<a href=\"#51\" id=\"51\">51</a>\n<a href=\"#52\" id=\"52\">52</a>\n<a href=\"#53\" id=\"53\">53</a>\n<a href=\"#54\" id=\"54\">54</a>\n<a href=\"#55\" id=\"55\">55</a>\n<a href=\"#56\" id=\"56\">56</a>\n<a href=\"#57\" id=\"57\">57</a>\n<a href=\"#58\" id=\"58\">58</a>\n<a href=\"#59\" id=\"59\">59</a>\n<a href=\"#60\" id=\"60\">60</a>\n<a href=\"#61\" id=\"61\">61</a>\n<a href=\"#62\" id=\"62\">62</a>\n<a href=\"#63\" id=\"63\">63</a>\n<a href=\"#64\" id=\"64\">64</a>\n<a href=\"#65\" id=\"65\">65</a>\n<a href=\"#66\" id=\"66\">66</a>\n<a href=\"#67\" id=\"67\">67</a>\n<a href=\"#68\" id=\"68\">68</a>\n<a href=\"#69\" id=\"69\">69</a>\n<a href=\"#70\" id=\"70\">70</a>\n<a href=\"#71\" id=\"71\">71</a>\n<a href=\"#72\" id=\"72\">72</a>\n<a href=\"#73\" id=\"73\">73</a>\n<a href=\"#74\" id=\"74\">74</a>\n<a href=\"#75\" id=\"75\">75</a>\n<a href=\"#76\" id=\"76\">76</a>\n<a href=\"#77\" id=\"77\">77</a>\n<a href=\"#78\" id=\"78\">78</a>\n<a href=\"#79\" id=\"79\">79</a>\n<a href=\"#80\" id=\"80\">80</a>\n<a href=\"#81\" id=\"81\">81</a>\n<a href=\"#82\" id=\"82\">82</a>\n<a href=\"#83\" id=\"83\">83</a>\n<a href=\"#84\" id=\"84\">84</a>\n<a href=\"#85\" id=\"85\">85</a>\n<a href=\"#86\" id=\"86\">86</a>\n<a href=\"#87\" id=\"87\">87</a>\n<a href=\"#88\" id=\"88\">88</a>\n<a href=\"#89\" id=\"89\">89</a>\n<a href=\"#90\" id=\"90\">90</a>\n<a href=\"#91\" id=\"91\">91</a>\n<a href=\"#92\" id=\"92\">92</a>\n<a href=\"#93\" id=\"93\">93</a>\n<a href=\"#94\" id=\"94\">94</a>\n<a href=\"#95\" id=\"95\">95</a>\n<a href=\"#96\" id=\"96\">96</a>\n<a href=\"#97\" id=\"97\">97</a>\n<a href=\"#98\" id=\"98\">98</a>\n<a href=\"#99\" id=\"99\">99</a>\n<a href=\"#100\" id=\"100\">100</a>\n<a href=\"#101\" id=\"101\">101</a>\n<a href=\"#102\" id=\"102\">102</a>\n<a href=\"#103\" id=\"103\">103</a>\n<a href=\"#104\" id=\"104\">104</a>\n<a href=\"#105\" id=\"105\">105</a>\n<a href=\"#106\" id=\"106\">106</a>\n<a href=\"#107\" id=\"107\">107</a>\n<a href=\"#108\" id=\"108\">108</a>\n<a href=\"#109\" id=\"109\">109</a>\n<a href=\"#110\" id=\"110\">110</a>\n<a href=\"#111\" id=\"111\">111</a>\n<a href=\"#112\" id=\"112\">112</a>\n<a href=\"#113\" id=\"113\">113</a>\n<a href=\"#114\" id=\"114\">114</a>\n<a href=\"#115\" id=\"115\">115</a>\n<a href=\"#116\" id=\"116\">116</a>\n<a href=\"#117\" id=\"117\">117</a>\n<a href=\"#118\" id=\"118\">118</a>\n<a href=\"#119\" id=\"119\">119</a>\n<a href=\"#120\" id=\"120\">120</a>\n<a href=\"#121\" id=\"121\">121</a>\n<a href=\"#122\" id=\"122\">122</a>\n<a href=\"#123\" id=\"123\">123</a>\n<a href=\"#124\" id=\"124\">124</a>\n<a href=\"#125\" id=\"125\">125</a>\n<a href=\"#126\" id=\"126\">126</a>\n<a href=\"#127\" id=\"127\">127</a>\n<a href=\"#128\" id=\"128\">128</a>\n<a href=\"#129\" id=\"129\">129</a>\n<a href=\"#130\" id=\"130\">130</a>\n<a href=\"#131\" id=\"131\">131</a>\n<a href=\"#132\" id=\"132\">132</a>\n<a href=\"#133\" id=\"133\">133</a>\n<a href=\"#134\" id=\"134\">134</a>\n<a href=\"#135\" id=\"135\">135</a>\n<a href=\"#136\" id=\"136\">136</a>\n<a href=\"#137\" id=\"137\">137</a>\n<a href=\"#138\" id=\"138\">138</a>\n<a href=\"#139\" id=\"139\">139</a>\n<a href=\"#140\" id=\"140\">140</a>\n<a href=\"#141\" id=\"141\">141</a>\n<a href=\"#142\" id=\"142\">142</a>\n<a href=\"#143\" id=\"143\">143</a>\n<a href=\"#144\" id=\"144\">144</a>\n<a href=\"#145\" id=\"145\">145</a>\n<a href=\"#146\" id=\"146\">146</a>\n<a href=\"#147\" id=\"147\">147</a>\n<a href=\"#148\" id=\"148\">148</a>\n<a href=\"#149\" id=\"149\">149</a>\n<a href=\"#150\" id=\"150\">150</a>\n<a href=\"#151\" id=\"151\">151</a>\n<a href=\"#152\" id=\"152\">152</a>\n<a href=\"#153\" id=\"153\">153</a>\n<a href=\"#154\" id=\"154\">154</a>\n<a href=\"#155\" id=\"155\">155</a>\n<a href=\"#156\" id=\"156\">156</a>\n<a href=\"#157\" id=\"157\">157</a>\n<a href=\"#158\" id=\"158\">158</a>\n<a href=\"#159\" id=\"159\">159</a>\n<a href=\"#160\" id=\"160\">160</a>\n<a href=\"#161\" id=\"161\">161</a>\n<a href=\"#162\" id=\"162\">162</a>\n<a href=\"#163\" id=\"163\">163</a>\n<a href=\"#164\" id=\"164\">164</a>\n<a href=\"#165\" id=\"165\">165</a>\n<a href=\"#166\" id=\"166\">166</a>\n<a href=\"#167\" id=\"167\">167</a>\n<a href=\"#168\" id=\"168\">168</a>\n<a href=\"#169\" id=\"169\">169</a>\n<a href=\"#170\" id=\"170\">170</a>\n<a href=\"#171\" id=\"171\">171</a>\n<a href=\"#172\" id=\"172\">172</a>\n<a href=\"#173\" id=\"173\">173</a>\n<a href=\"#174\" id=\"174\">174</a>\n<a href=\"#175\" id=\"175\">175</a>\n<a href=\"#176\" id=\"176\">176</a>\n<a href=\"#177\" id=\"177\">177</a>\n<a href=\"#178\" id=\"178\">178</a>\n<a href=\"#179\" id=\"179\">179</a>\n<a href=\"#180\" id=\"180\">180</a>\n<a href=\"#181\" id=\"181\">181</a>\n<a href=\"#182\" id=\"182\">182</a>\n<a href=\"#183\" id=\"183\">183</a>\n<a href=\"#184\" id=\"184\">184</a>\n<a href=\"#185\" id=\"185\">185</a>\n<a href=\"#186\" id=\"186\">186</a>\n<a href=\"#187\" id=\"187\">187</a>\n<a href=\"#188\" id=\"188\">188</a>\n<a href=\"#189\" id=\"189\">189</a>\n<a href=\"#190\" id=\"190\">190</a>\n<a href=\"#191\" id=\"191\">191</a>\n<a href=\"#192\" id=\"192\">192</a>\n<a href=\"#193\" id=\"193\">193</a>\n<a href=\"#194\" id=\"194\">194</a>\n<a href=\"#195\" id=\"195\">195</a>\n<a href=\"#196\" id=\"196\">196</a>\n<a href=\"#197\" id=\"197\">197</a>\n<a href=\"#198\" id=\"198\">198</a>\n<a href=\"#199\" id=\"199\">199</a>\n<a href=\"#200\" id=\"200\">200</a>\n<a href=\"#201\" id=\"201\">201</a>\n<a href=\"#202\" id=\"202\">202</a>\n<a href=\"#203\" id=\"203\">203</a>\n<a href=\"#204\" id=\"204\">204</a>\n<a href=\"#205\" id=\"205\">205</a>\n<a href=\"#206\" id=\"206\">206</a>\n<a href=\"#207\" id=\"207\">207</a>\n<a href=\"#208\" id=\"208\">208</a>\n<a href=\"#209\" id=\"209\">209</a>\n<a href=\"#210\" id=\"210\">210</a>\n<a href=\"#211\" id=\"211\">211</a>\n<a href=\"#212\" id=\"212\">212</a>\n<a href=\"#213\" id=\"213\">213</a>\n<a href=\"#214\" id=\"214\">214</a>\n<a href=\"#215\" id=\"215\">215</a>\n<a href=\"#216\" id=\"216\">216</a>\n<a href=\"#217\" id=\"217\">217</a>\n<a href=\"#218\" id=\"218\">218</a>\n<a href=\"#219\" id=\"219\">219</a>\n<a href=\"#220\" id=\"220\">220</a>\n<a href=\"#221\" id=\"221\">221</a>\n<a href=\"#222\" id=\"222\">222</a>\n<a href=\"#223\" id=\"223\">223</a>\n<a href=\"#224\" id=\"224\">224</a>\n<a href=\"#225\" id=\"225\">225</a>\n<a href=\"#226\" id=\"226\">226</a>\n<a href=\"#227\" id=\"227\">227</a>\n<a href=\"#228\" id=\"228\">228</a>\n<a href=\"#229\" id=\"229\">229</a>\n<a href=\"#230\" id=\"230\">230</a>\n<a href=\"#231\" id=\"231\">231</a>\n<a href=\"#232\" id=\"232\">232</a>\n<a href=\"#233\" id=\"233\">233</a>\n<a href=\"#234\" id=\"234\">234</a>\n<a href=\"#235\" id=\"235\">235</a>\n<a href=\"#236\" id=\"236\">236</a>\n<a href=\"#237\" id=\"237\">237</a>\n<a href=\"#238\" id=\"238\">238</a>\n<a href=\"#239\" id=\"239\">239</a>\n<a href=\"#240\" id=\"240\">240</a>\n<a href=\"#241\" id=\"241\">241</a>\n<a href=\"#242\" id=\"242\">242</a>\n<a href=\"#243\" id=\"243\">243</a>\n<a href=\"#244\" id=\"244\">244</a>\n<a href=\"#245\" id=\"245\">245</a>\n<a href=\"#246\" id=\"246\">246</a>\n<a href=\"#247\" id=\"247\">247</a>\n<a href=\"#248\" id=\"248\">248</a>\n<a href=\"#249\" id=\"249\">249</a>\n<a href=\"#250\" id=\"250\">250</a>\n<a href=\"#251\" id=\"251\">251</a>\n<a href=\"#252\" id=\"252\">252</a>\n<a href=\"#253\" id=\"253\">253</a>\n<a href=\"#254\" id=\"254\">254</a>\n<a href=\"#255\" id=\"255\">255</a>\n<a href=\"#256\" id=\"256\">256</a>\n<a href=\"#257\" id=\"257\">257</a>\n<a href=\"#258\" id=\"258\">258</a>\n<a href=\"#259\" id=\"259\">259</a>\n<a href=\"#260\" id=\"260\">260</a>\n<a href=\"#261\" id=\"261\">261</a>\n<a href=\"#262\" id=\"262\">262</a>\n<a href=\"#263\" id=\"263\">263</a>\n<a href=\"#264\" id=\"264\">264</a>\n<a href=\"#265\" id=\"265\">265</a>\n<a href=\"#266\" id=\"266\">266</a>\n<a href=\"#267\" id=\"267\">267</a>\n<a href=\"#268\" id=\"268\">268</a>\n<a href=\"#269\" id=\"269\">269</a>\n<a href=\"#270\" id=\"270\">270</a>\n<a href=\"#271\" id=\"271\">271</a>\n<a href=\"#272\" id=\"272\">272</a>\n<a href=\"#273\" id=\"273\">273</a>\n<a href=\"#274\" id=\"274\">274</a>\n<a href=\"#275\" id=\"275\">275</a>\n<a href=\"#276\" id=\"276\">276</a>\n<a href=\"#277\" id=\"277\">277</a>\n<a href=\"#278\" id=\"278\">278</a>\n<a href=\"#279\" id=\"279\">279</a>\n<a href=\"#280\" id=\"280\">280</a>\n<a href=\"#281\" id=\"281\">281</a>\n<a href=\"#282\" id=\"282\">282</a>\n<a href=\"#283\" id=\"283\">283</a>\n<a href=\"#284\" id=\"284\">284</a>\n<a href=\"#285\" id=\"285\">285</a>\n<a href=\"#286\" id=\"286\">286</a>\n<a href=\"#287\" id=\"287\">287</a>\n<a href=\"#288\" id=\"288\">288</a>\n<a href=\"#289\" id=\"289\">289</a>\n<a href=\"#290\" id=\"290\">290</a>\n<a href=\"#291\" id=\"291\">291</a>\n<a href=\"#292\" id=\"292\">292</a>\n<a href=\"#293\" id=\"293\">293</a>\n<a href=\"#294\" id=\"294\">294</a>\n<a href=\"#295\" id=\"295\">295</a>\n<a href=\"#296\" id=\"296\">296</a>\n<a href=\"#297\" id=\"297\">297</a>\n<a href=\"#298\" id=\"298\">298</a>\n<a href=\"#299\" id=\"299\">299</a>\n<a href=\"#300\" id=\"300\">300</a>\n<a href=\"#301\" id=\"301\">301</a>\n<a href=\"#302\" id=\"302\">302</a>\n<a href=\"#303\" id=\"303\">303</a>\n<a href=\"#304\" id=\"304\">304</a>\n<a href=\"#305\" id=\"305\">305</a>\n<a href=\"#306\" id=\"306\">306</a>\n<a href=\"#307\" id=\"307\">307</a>\n<a href=\"#308\" id=\"308\">308</a>\n<a href=\"#309\" id=\"309\">309</a>\n<a href=\"#310\" id=\"310\">310</a>\n<a href=\"#311\" id=\"311\">311</a>\n<a href=\"#312\" id=\"312\">312</a>\n<a href=\"#313\" id=\"313\">313</a>\n<a href=\"#314\" id=\"314\">314</a>\n<a href=\"#315\" id=\"315\">315</a>\n<a href=\"#316\" id=\"316\">316</a>\n<a href=\"#317\" id=\"317\">317</a>\n<a href=\"#318\" id=\"318\">318</a>\n<a href=\"#319\" id=\"319\">319</a>\n<a href=\"#320\" id=\"320\">320</a>\n<a href=\"#321\" id=\"321\">321</a>\n<a href=\"#322\" id=\"322\">322</a>\n<a href=\"#323\" id=\"323\">323</a>\n<a href=\"#324\" id=\"324\">324</a>\n<a href=\"#325\" id=\"325\">325</a>\n<a href=\"#326\" id=\"326\">326</a>\n<a href=\"#327\" id=\"327\">327</a>\n<a href=\"#328\" id=\"328\">328</a>\n<a href=\"#329\" id=\"329\">329</a>\n<a href=\"#330\" id=\"330\">330</a>\n<a href=\"#331\" id=\"331\">331</a>\n<a href=\"#332\" id=\"332\">332</a>\n<a href=\"#333\" id=\"333\">333</a>\n<a href=\"#334\" id=\"334\">334</a>\n<a href=\"#335\" id=\"335\">335</a>\n<a href=\"#336\" id=\"336\">336</a>\n<a href=\"#337\" id=\"337\">337</a>\n<a href=\"#338\" id=\"338\">338</a>\n<a href=\"#339\" id=\"339\">339</a>\n<a href=\"#340\" id=\"340\">340</a>\n<a href=\"#341\" id=\"341\">341</a>\n<a href=\"#342\" id=\"342\">342</a>\n<a href=\"#343\" id=\"343\">343</a>\n<a href=\"#344\" id=\"344\">344</a>\n<a href=\"#345\" id=\"345\">345</a>\n<a href=\"#346\" id=\"346\">346</a>\n<a href=\"#347\" id=\"347\">347</a>\n<a href=\"#348\" id=\"348\">348</a>\n<a href=\"#349\" id=\"349\">349</a>\n<a href=\"#350\" id=\"350\">350</a>\n<a href=\"#351\" id=\"351\">351</a>\n<a href=\"#352\" id=\"352\">352</a>\n<a href=\"#353\" id=\"353\">353</a>\n<a href=\"#354\" id=\"354\">354</a>\n<a href=\"#355\" id=\"355\">355</a>\n<a href=\"#356\" id=\"356\">356</a>\n<a href=\"#357\" id=\"357\">357</a>\n<a href=\"#358\" id=\"358\">358</a>\n<a href=\"#359\" id=\"359\">359</a>\n<a href=\"#360\" id=\"360\">360</a>\n<a href=\"#361\" id=\"361\">361</a>\n<a href=\"#362\" id=\"362\">362</a>\n<a href=\"#363\" id=\"363\">363</a>\n<a href=\"#364\" id=\"364\">364</a>\n<a href=\"#365\" id=\"365\">365</a>\n<a href=\"#366\" id=\"366\">366</a>\n<a href=\"#367\" id=\"367\">367</a>\n<a href=\"#368\" id=\"368\">368</a>\n<a href=\"#369\" id=\"369\">369</a>\n<a href=\"#370\" id=\"370\">370</a>\n<a href=\"#371\" id=\"371\">371</a>\n<a href=\"#372\" id=\"372\">372</a>\n<a href=\"#373\" id=\"373\">373</a>\n<a href=\"#374\" id=\"374\">374</a>\n<a href=\"#375\" id=\"375\">375</a>\n<a href=\"#376\" id=\"376\">376</a>\n<a href=\"#377\" id=\"377\">377</a>\n<a href=\"#378\" id=\"378\">378</a>\n<a href=\"#379\" id=\"379\">379</a>\n<a href=\"#380\" id=\"380\">380</a>\n<a href=\"#381\" id=\"381\">381</a>\n<a href=\"#382\" id=\"382\">382</a>\n<a href=\"#383\" id=\"383\">383</a>\n<a href=\"#384\" id=\"384\">384</a>\n<a href=\"#385\" id=\"385\">385</a>\n<a href=\"#386\" id=\"386\">386</a>\n<a href=\"#387\" id=\"387\">387</a>\n<a href=\"#388\" id=\"388\">388</a>\n<a href=\"#389\" id=\"389\">389</a>\n<a href=\"#390\" id=\"390\">390</a>\n<a href=\"#391\" id=\"391\">391</a>\n<a href=\"#392\" id=\"392\">392</a>\n<a href=\"#393\" id=\"393\">393</a>\n<a href=\"#394\" id=\"394\">394</a>\n<a href=\"#395\" id=\"395\">395</a>\n<a href=\"#396\" id=\"396\">396</a>\n<a href=\"#397\" id=\"397\">397</a>\n<a href=\"#398\" id=\"398\">398</a>\n<a href=\"#399\" id=\"399\">399</a>\n<a href=\"#400\" id=\"400\">400</a>\n<a href=\"#401\" id=\"401\">401</a>\n<a href=\"#402\" id=\"402\">402</a>\n<a href=\"#403\" id=\"403\">403</a>\n<a href=\"#404\" id=\"404\">404</a>\n<a href=\"#405\" id=\"405\">405</a>\n<a href=\"#406\" id=\"406\">406</a>\n<a href=\"#407\" id=\"407\">407</a>\n<a href=\"#408\" id=\"408\">408</a>\n<a href=\"#409\" id=\"409\">409</a>\n<a href=\"#410\" id=\"410\">410</a>\n<a href=\"#411\" id=\"411\">411</a>\n<a href=\"#412\" id=\"412\">412</a>\n<a href=\"#413\" id=\"413\">413</a>\n<a href=\"#414\" id=\"414\">414</a>\n<a href=\"#415\" id=\"415\">415</a>\n<a href=\"#416\" id=\"416\">416</a>\n<a href=\"#417\" id=\"417\">417</a>\n<a href=\"#418\" id=\"418\">418</a>\n<a href=\"#419\" id=\"419\">419</a>\n<a href=\"#420\" id=\"420\">420</a>\n<a href=\"#421\" id=\"421\">421</a>\n<a href=\"#422\" id=\"422\">422</a>\n<a href=\"#423\" id=\"423\">423</a>\n<a href=\"#424\" id=\"424\">424</a>\n<a href=\"#425\" id=\"425\">425</a>\n<a href=\"#426\" id=\"426\">426</a>\n<a href=\"#427\" id=\"427\">427</a>\n<a href=\"#428\" id=\"428\">428</a>\n<a href=\"#429\" id=\"429\">429</a>\n<a href=\"#430\" id=\"430\">430</a>\n<a href=\"#431\" id=\"431\">431</a>\n<a href=\"#432\" id=\"432\">432</a>\n<a href=\"#433\" id=\"433\">433</a>\n<a href=\"#434\" id=\"434\">434</a>\n<a href=\"#435\" id=\"435\">435</a>\n<a href=\"#436\" id=\"436\">436</a>\n<a href=\"#437\" id=\"437\">437</a>\n<a href=\"#438\" id=\"438\">438</a>\n<a href=\"#439\" id=\"439\">439</a>\n<a href=\"#440\" id=\"440\">440</a>\n<a href=\"#441\" id=\"441\">441</a>\n<a href=\"#442\" id=\"442\">442</a>\n<a href=\"#443\" id=\"443\">443</a>\n<a href=\"#444\" id=\"444\">444</a>\n<a href=\"#445\" id=\"445\">445</a>\n<a href=\"#446\" id=\"446\">446</a>\n<a href=\"#447\" id=\"447\">447</a>\n<a href=\"#448\" id=\"448\">448</a>\n<a href=\"#449\" id=\"449\">449</a>\n<a href=\"#450\" id=\"450\">450</a>\n<a href=\"#451\" id=\"451\">451</a>\n<a href=\"#452\" id=\"452\">452</a>\n<a href=\"#453\" id=\"453\">453</a>\n<a href=\"#454\" id=\"454\">454</a>\n<a href=\"#455\" id=\"455\">455</a>\n<a href=\"#456\" id=\"456\">456</a>\n<a href=\"#457\" id=\"457\">457</a>\n<a href=\"#458\" id=\"458\">458</a>\n<a href=\"#459\" id=\"459\">459</a>\n<a href=\"#460\" id=\"460\">460</a>\n<a href=\"#461\" id=\"461\">461</a>\n<a href=\"#462\" id=\"462\">462</a>\n<a href=\"#463\" id=\"463\">463</a>\n<a href=\"#464\" id=\"464\">464</a>\n<a href=\"#465\" id=\"465\">465</a>\n<a href=\"#466\" id=\"466\">466</a>\n<a href=\"#467\" id=\"467\">467</a>\n<a href=\"#468\" id=\"468\">468</a>\n<a href=\"#469\" id=\"469\">469</a>\n<a href=\"#470\" id=\"470\">470</a>\n<a href=\"#471\" id=\"471\">471</a>\n<a href=\"#472\" id=\"472\">472</a>\n<a href=\"#473\" id=\"473\">473</a>\n<a href=\"#474\" id=\"474\">474</a>\n<a href=\"#475\" id=\"475\">475</a>\n<a href=\"#476\" id=\"476\">476</a>\n<a href=\"#477\" id=\"477\">477</a>\n<a href=\"#478\" id=\"478\">478</a>\n<a href=\"#479\" id=\"479\">479</a>\n<a href=\"#480\" id=\"480\">480</a>\n<a href=\"#481\" id=\"481\">481</a>\n<a href=\"#482\" id=\"482\">482</a>\n<a href=\"#483\" id=\"483\">483</a>\n<a href=\"#484\" id=\"484\">484</a>\n<a href=\"#485\" id=\"485\">485</a>\n<a href=\"#486\" id=\"486\">486</a>\n<a href=\"#487\" id=\"487\">487</a>\n<a href=\"#488\" id=\"488\">488</a>\n<a href=\"#489\" id=\"489\">489</a>\n<a href=\"#490\" id=\"490\">490</a>\n<a href=\"#491\" id=\"491\">491</a>\n<a href=\"#492\" id=\"492\">492</a>\n<a href=\"#493\" id=\"493\">493</a>\n<a href=\"#494\" id=\"494\">494</a>\n<a href=\"#495\" id=\"495\">495</a>\n<a href=\"#496\" id=\"496\">496</a>\n<a href=\"#497\" id=\"497\">497</a>\n<a href=\"#498\" id=\"498\">498</a>\n<a href=\"#499\" id=\"499\">499</a>\n<a href=\"#500\" id=\"500\">500</a>\n<a href=\"#501\" id=\"501\">501</a>\n<a href=\"#502\" id=\"502\">502</a>\n<a href=\"#503\" id=\"503\">503</a>\n<a href=\"#504\" id=\"504\">504</a>\n<a href=\"#505\" id=\"505\">505</a>\n<a href=\"#506\" id=\"506\">506</a>\n<a href=\"#507\" id=\"507\">507</a>\n<a href=\"#508\" id=\"508\">508</a>\n<a href=\"#509\" id=\"509\">509</a>\n<a href=\"#510\" id=\"510\">510</a>\n<a href=\"#511\" id=\"511\">511</a>\n<a href=\"#512\" id=\"512\">512</a>\n<a href=\"#513\" id=\"513\">513</a>\n<a href=\"#514\" id=\"514\">514</a>\n<a href=\"#515\" id=\"515\">515</a>\n<a href=\"#516\" id=\"516\">516</a>\n<a href=\"#517\" id=\"517\">517</a>\n<a href=\"#518\" id=\"518\">518</a>\n<a href=\"#519\" id=\"519\">519</a>\n<a href=\"#520\" id=\"520\">520</a>\n<a href=\"#521\" id=\"521\">521</a>\n<a href=\"#522\" id=\"522\">522</a>\n<a href=\"#523\" id=\"523\">523</a>\n<a href=\"#524\" id=\"524\">524</a>\n<a href=\"#525\" id=\"525\">525</a>\n<a href=\"#526\" id=\"526\">526</a>\n<a href=\"#527\" id=\"527\">527</a>\n<a href=\"#528\" id=\"528\">528</a>\n<a href=\"#529\" id=\"529\">529</a>\n<a href=\"#530\" id=\"530\">530</a>\n<a href=\"#531\" id=\"531\">531</a>\n<a href=\"#532\" id=\"532\">532</a>\n<a href=\"#533\" id=\"533\">533</a>\n<a href=\"#534\" id=\"534\">534</a>\n<a href=\"#535\" id=\"535\">535</a>\n<a href=\"#536\" id=\"536\">536</a>\n<a href=\"#537\" id=\"537\">537</a>\n<a href=\"#538\" id=\"538\">538</a>\n<a href=\"#539\" id=\"539\">539</a>\n<a href=\"#540\" id=\"540\">540</a>\n<a href=\"#541\" id=\"541\">541</a>\n<a href=\"#542\" id=\"542\">542</a>\n<a href=\"#543\" id=\"543\">543</a>\n<a href=\"#544\" id=\"544\">544</a>\n<a href=\"#545\" id=\"545\">545</a>\n<a href=\"#546\" id=\"546\">546</a>\n<a href=\"#547\" id=\"547\">547</a>\n<a href=\"#548\" id=\"548\">548</a>\n<a href=\"#549\" id=\"549\">549</a>\n<a href=\"#550\" id=\"550\">550</a>\n<a href=\"#551\" id=\"551\">551</a>\n<a href=\"#552\" id=\"552\">552</a>\n<a href=\"#553\" id=\"553\">553</a>\n<a href=\"#554\" id=\"554\">554</a>\n<a href=\"#555\" id=\"555\">555</a>\n<a href=\"#556\" id=\"556\">556</a>\n<a href=\"#557\" id=\"557\">557</a>\n<a href=\"#558\" id=\"558\">558</a>\n<a href=\"#559\" id=\"559\">559</a>\n<a href=\"#560\" id=\"560\">560</a>\n<a href=\"#561\" id=\"561\">561</a>\n<a href=\"#562\" id=\"562\">562</a>\n<a href=\"#563\" id=\"563\">563</a>\n<a href=\"#564\" id=\"564\">564</a>\n<a href=\"#565\" id=\"565\">565</a>\n<a href=\"#566\" id=\"566\">566</a>\n<a href=\"#567\" id=\"567\">567</a>\n<a href=\"#568\" id=\"568\">568</a>\n<a href=\"#569\" id=\"569\">569</a>\n<a href=\"#570\" id=\"570\">570</a>\n<a href=\"#571\" id=\"571\">571</a>\n<a href=\"#572\" id=\"572\">572</a>\n<a href=\"#573\" id=\"573\">573</a>\n<a href=\"#574\" id=\"574\">574</a>\n<a href=\"#575\" id=\"575\">575</a>\n<a href=\"#576\" id=\"576\">576</a>\n<a href=\"#577\" id=\"577\">577</a>\n<a href=\"#578\" id=\"578\">578</a>\n<a href=\"#579\" id=\"579\">579</a>\n<a href=\"#580\" id=\"580\">580</a>\n<a href=\"#581\" id=\"581\">581</a>\n<a href=\"#582\" id=\"582\">582</a>\n<a href=\"#583\" id=\"583\">583</a>\n<a href=\"#584\" id=\"584\">584</a>\n<a href=\"#585\" id=\"585\">585</a>\n<a href=\"#586\" id=\"586\">586</a>\n<a href=\"#587\" id=\"587\">587</a>\n<a href=\"#588\" id=\"588\">588</a>\n<a href=\"#589\" id=\"589\">589</a>\n<a href=\"#590\" id=\"590\">590</a>\n<a href=\"#591\" id=\"591\">591</a>\n<a href=\"#592\" id=\"592\">592</a>\n<a href=\"#593\" id=\"593\">593</a>\n<a href=\"#594\" id=\"594\">594</a>\n<a href=\"#595\" id=\"595\">595</a>\n<a href=\"#596\" id=\"596\">596</a>\n<a href=\"#597\" id=\"597\">597</a>\n<a href=\"#598\" id=\"598\">598</a>\n<a href=\"#599\" id=\"599\">599</a>\n<a href=\"#600\" id=\"600\">600</a>\n<a href=\"#601\" id=\"601\">601</a>\n<a href=\"#602\" id=\"602\">602</a>\n<a href=\"#603\" id=\"603\">603</a>\n<a href=\"#604\" id=\"604\">604</a>\n<a href=\"#605\" id=\"605\">605</a>\n<a href=\"#606\" id=\"606\">606</a>\n<a href=\"#607\" id=\"607\">607</a>\n<a href=\"#608\" id=\"608\">608</a>\n<a href=\"#609\" id=\"609\">609</a>\n<a href=\"#610\" id=\"610\">610</a>\n<a href=\"#611\" id=\"611\">611</a>\n<a href=\"#612\" id=\"612\">612</a>\n<a href=\"#613\" id=\"613\">613</a>\n<a href=\"#614\" id=\"614\">614</a>\n<a href=\"#615\" id=\"615\">615</a>\n<a href=\"#616\" id=\"616\">616</a>\n<a href=\"#617\" id=\"617\">617</a>\n<a href=\"#618\" id=\"618\">618</a>\n<a href=\"#619\" id=\"619\">619</a>\n<a href=\"#620\" id=\"620\">620</a>\n<a href=\"#621\" id=\"621\">621</a>\n<a href=\"#622\" id=\"622\">622</a>\n<a href=\"#623\" id=\"623\">623</a>\n<a href=\"#624\" id=\"624\">624</a>\n<a href=\"#625\" id=\"625\">625</a>\n<a href=\"#626\" id=\"626\">626</a>\n<a href=\"#627\" id=\"627\">627</a>\n<a href=\"#628\" id=\"628\">628</a>\n<a href=\"#629\" id=\"629\">629</a>\n<a href=\"#630\" id=\"630\">630</a>\n<a href=\"#631\" id=\"631\">631</a>\n<a href=\"#632\" id=\"632\">632</a>\n<a href=\"#633\" id=\"633\">633</a>\n<a href=\"#634\" id=\"634\">634</a>\n<a href=\"#635\" id=\"635\">635</a>\n<a href=\"#636\" id=\"636\">636</a>\n<a href=\"#637\" id=\"637\">637</a>\n<a href=\"#638\" id=\"638\">638</a>\n<a href=\"#639\" id=\"639\">639</a>\n<a href=\"#640\" id=\"640\">640</a>\n<a href=\"#641\" id=\"641\">641</a>\n<a href=\"#642\" id=\"642\">642</a>\n<a href=\"#643\" id=\"643\">643</a>\n<a href=\"#644\" id=\"644\">644</a>\n<a href=\"#645\" id=\"645\">645</a>\n<a href=\"#646\" id=\"646\">646</a>\n<a href=\"#647\" id=\"647\">647</a>\n<a href=\"#648\" id=\"648\">648</a>\n<a href=\"#649\" id=\"649\">649</a>\n<a href=\"#650\" id=\"650\">650</a>\n<a href=\"#651\" id=\"651\">651</a>\n<a href=\"#652\" id=\"652\">652</a>\n<a href=\"#653\" id=\"653\">653</a>\n<a href=\"#654\" id=\"654\">654</a>\n<a href=\"#655\" id=\"655\">655</a>\n<a href=\"#656\" id=\"656\">656</a>\n<a href=\"#657\" id=\"657\">657</a>\n<a href=\"#658\" id=\"658\">658</a>\n<a href=\"#659\" id=\"659\">659</a>\n<a href=\"#660\" id=\"660\">660</a>\n<a href=\"#661\" id=\"661\">661</a>\n<a href=\"#662\" id=\"662\">662</a>\n<a href=\"#663\" id=\"663\">663</a>\n<a href=\"#664\" id=\"664\">664</a>\n<a href=\"#665\" id=\"665\">665</a>\n<a href=\"#666\" id=\"666\">666</a>\n<a href=\"#667\" id=\"667\">667</a>\n<a href=\"#668\" id=\"668\">668</a>\n<a href=\"#669\" id=\"669\">669</a>\n<a href=\"#670\" id=\"670\">670</a>\n<a href=\"#671\" id=\"671\">671</a>\n<a href=\"#672\" id=\"672\">672</a>\n<a href=\"#673\" id=\"673\">673</a>\n<a href=\"#674\" id=\"674\">674</a>\n<a href=\"#675\" id=\"675\">675</a>\n<a href=\"#676\" id=\"676\">676</a>\n<a href=\"#677\" id=\"677\">677</a>\n<a href=\"#678\" id=\"678\">678</a>\n<a href=\"#679\" id=\"679\">679</a>\n<a href=\"#680\" id=\"680\">680</a>\n<a href=\"#681\" id=\"681\">681</a>\n<a href=\"#682\" id=\"682\">682</a>\n<a href=\"#683\" id=\"683\">683</a>\n<a href=\"#684\" id=\"684\">684</a>\n<a href=\"#685\" id=\"685\">685</a>\n<a href=\"#686\" id=\"686\">686</a>\n<a href=\"#687\" id=\"687\">687</a>\n<a href=\"#688\" id=\"688\">688</a>\n<a href=\"#689\" id=\"689\">689</a>\n<a href=\"#690\" id=\"690\">690</a>\n<a href=\"#691\" id=\"691\">691</a>\n<a href=\"#692\" id=\"692\">692</a>\n<a href=\"#693\" id=\"693\">693</a>\n<a href=\"#694\" id=\"694\">694</a>\n<a href=\"#695\" id=\"695\">695</a>\n<a href=\"#696\" id=\"696\">696</a>\n<a href=\"#697\" id=\"697\">697</a>\n<a href=\"#698\" id=\"698\">698</a>\n<a href=\"#699\" id=\"699\">699</a>\n<a href=\"#700\" id=\"700\">700</a>\n<a href=\"#701\" id=\"701\">701</a>\n<a href=\"#702\" id=\"702\">702</a>\n<a href=\"#703\" id=\"703\">703</a>\n<a href=\"#704\" id=\"704\">704</a>\n<a href=\"#705\" id=\"705\">705</a>\n<a href=\"#706\" id=\"706\">706</a>\n<a href=\"#707\" id=\"707\">707</a>\n<a href=\"#708\" id=\"708\">708</a>\n<a href=\"#709\" id=\"709\">709</a>\n<a href=\"#710\" id=\"710\">710</a>\n<a href=\"#711\" id=\"711\">711</a>\n<a href=\"#712\" id=\"712\">712</a>\n<a href=\"#713\" id=\"713\">713</a>\n<a href=\"#714\" id=\"714\">714</a>\n<a href=\"#715\" id=\"715\">715</a>\n<a href=\"#716\" id=\"716\">716</a>\n<a href=\"#717\" id=\"717\">717</a>\n<a href=\"#718\" id=\"718\">718</a>\n<a href=\"#719\" id=\"719\">719</a>\n<a href=\"#720\" id=\"720\">720</a>\n<a href=\"#721\" id=\"721\">721</a>\n<a href=\"#722\" id=\"722\">722</a>\n<a href=\"#723\" id=\"723\">723</a>\n<a href=\"#724\" id=\"724\">724</a>\n<a href=\"#725\" id=\"725\">725</a>\n<a href=\"#726\" id=\"726\">726</a>\n<a href=\"#727\" id=\"727\">727</a>\n<a href=\"#728\" id=\"728\">728</a>\n<a href=\"#729\" id=\"729\">729</a>\n<a href=\"#730\" id=\"730\">730</a>\n<a href=\"#731\" id=\"731\">731</a>\n<a href=\"#732\" id=\"732\">732</a>\n<a href=\"#733\" id=\"733\">733</a>\n<a href=\"#734\" id=\"734\">734</a>\n<a href=\"#735\" id=\"735\">735</a>\n<a href=\"#736\" id=\"736\">736</a>\n<a href=\"#737\" id=\"737\">737</a>\n<a href=\"#738\" id=\"738\">738</a>\n<a href=\"#739\" id=\"739\">739</a>\n<a href=\"#740\" id=\"740\">740</a>\n<a href=\"#741\" id=\"741\">741</a>\n<a href=\"#742\" id=\"742\">742</a>\n<a href=\"#743\" id=\"743\">743</a>\n<a href=\"#744\" id=\"744\">744</a>\n<a href=\"#745\" id=\"745\">745</a>\n<a href=\"#746\" id=\"746\">746</a>\n<a href=\"#747\" id=\"747\">747</a>\n<a href=\"#748\" id=\"748\">748</a>\n<a href=\"#749\" id=\"749\">749</a>\n<a href=\"#750\" id=\"750\">750</a>\n<a href=\"#751\" id=\"751\">751</a>\n<a href=\"#752\" id=\"752\">752</a>\n<a href=\"#753\" id=\"753\">753</a>\n<a href=\"#754\" id=\"754\">754</a>\n<a href=\"#755\" id=\"755\">755</a>\n<a href=\"#756\" id=\"756\">756</a>\n<a href=\"#757\" id=\"757\">757</a>\n<a href=\"#758\" id=\"758\">758</a>\n<a href=\"#759\" id=\"759\">759</a>\n<a href=\"#760\" id=\"760\">760</a>\n<a href=\"#761\" id=\"761\">761</a>\n<a href=\"#762\" id=\"762\">762</a>\n<a href=\"#763\" id=\"763\">763</a>\n<a href=\"#764\" id=\"764\">764</a>\n<a href=\"#765\" id=\"765\">765</a>\n<a href=\"#766\" id=\"766\">766</a>\n<a href=\"#767\" id=\"767\">767</a>\n<a href=\"#768\" id=\"768\">768</a>\n<a href=\"#769\" id=\"769\">769</a>\n<a href=\"#770\" id=\"770\">770</a>\n<a href=\"#771\" id=\"771\">771</a>\n<a href=\"#772\" id=\"772\">772</a>\n<a href=\"#773\" id=\"773\">773</a>\n<a href=\"#774\" id=\"774\">774</a>\n<a href=\"#775\" id=\"775\">775</a>\n<a href=\"#776\" id=\"776\">776</a>\n<a href=\"#777\" id=\"777\">777</a>\n<a href=\"#778\" id=\"778\">778</a>\n<a href=\"#779\" id=\"779\">779</a>\n<a href=\"#780\" id=\"780\">780</a>\n<a href=\"#781\" id=\"781\">781</a>\n<a href=\"#782\" id=\"782\">782</a>\n<a href=\"#783\" id=\"783\">783</a>\n<a href=\"#784\" id=\"784\">784</a>\n<a href=\"#785\" id=\"785\">785</a>\n<a href=\"#786\" id=\"786\">786</a>\n<a href=\"#787\" id=\"787\">787</a>\n<a href=\"#788\" id=\"788\">788</a>\n<a href=\"#789\" id=\"789\">789</a>\n<a href=\"#790\" id=\"790\">790</a>\n<a href=\"#791\" id=\"791\">791</a>\n<a href=\"#792\" id=\"792\">792</a>\n<a href=\"#793\" id=\"793\">793</a>\n<a href=\"#794\" id=\"794\">794</a>\n<a href=\"#795\" id=\"795\">795</a>\n<a href=\"#796\" id=\"796\">796</a>\n<a href=\"#797\" id=\"797\">797</a>\n<a href=\"#798\" id=\"798\">798</a>\n<a href=\"#799\" id=\"799\">799</a>\n<a href=\"#800\" id=\"800\">800</a>\n<a href=\"#801\" id=\"801\">801</a>\n<a href=\"#802\" id=\"802\">802</a>\n<a href=\"#803\" id=\"803\">803</a>\n<a href=\"#804\" id=\"804\">804</a>\n<a href=\"#805\" id=\"805\">805</a>\n<a href=\"#806\" id=\"806\">806</a>\n<a href=\"#807\" id=\"807\">807</a>\n<a href=\"#808\" id=\"808\">808</a>\n<a href=\"#809\" id=\"809\">809</a>\n<a href=\"#810\" id=\"810\">810</a>\n<a href=\"#811\" id=\"811\">811</a>\n<a href=\"#812\" id=\"812\">812</a>\n<a href=\"#813\" id=\"813\">813</a>\n<a href=\"#814\" id=\"814\">814</a>\n<a href=\"#815\" id=\"815\">815</a>\n<a href=\"#816\" id=\"816\">816</a>\n<a href=\"#817\" id=\"817\">817</a>\n<a href=\"#818\" id=\"818\">818</a>\n<a href=\"#819\" id=\"819\">819</a>\n<a href=\"#820\" id=\"820\">820</a>\n<a href=\"#821\" id=\"821\">821</a>\n<a href=\"#822\" id=\"822\">822</a>\n<a href=\"#823\" id=\"823\">823</a>\n<a href=\"#824\" id=\"824\">824</a>\n<a href=\"#825\" id=\"825\">825</a>\n<a href=\"#826\" id=\"826\">826</a>\n<a href=\"#827\" id=\"827\">827</a>\n<a href=\"#828\" id=\"828\">828</a>\n<a href=\"#829\" id=\"829\">829</a>\n<a href=\"#830\" id=\"830\">830</a>\n<a href=\"#831\" id=\"831\">831</a>\n<a href=\"#832\" id=\"832\">832</a>\n<a href=\"#833\" id=\"833\">833</a>\n<a href=\"#834\" id=\"834\">834</a>\n<a href=\"#835\" id=\"835\">835</a>\n<a href=\"#836\" id=\"836\">836</a>\n<a href=\"#837\" id=\"837\">837</a>\n<a href=\"#838\" id=\"838\">838</a>\n<a href=\"#839\" id=\"839\">839</a>\n<a href=\"#840\" id=\"840\">840</a>\n<a href=\"#841\" id=\"841\">841</a>\n<a href=\"#842\" id=\"842\">842</a>\n<a href=\"#843\" id=\"843\">843</a>\n<a href=\"#844\" id=\"844\">844</a>\n<a href=\"#845\" id=\"845\">845</a>\n<a href=\"#846\" id=\"846\">846</a>\n<a href=\"#847\" id=\"847\">847</a>\n<a href=\"#848\" id=\"848\">848</a>\n<a href=\"#849\" id=\"849\">849</a>\n<a href=\"#850\" id=\"850\">850</a>\n<a href=\"#851\" id=\"851\">851</a>\n<a href=\"#852\" id=\"852\">852</a>\n<a href=\"#853\" id=\"853\">853</a>\n<a href=\"#854\" id=\"854\">854</a>\n<a href=\"#855\" id=\"855\">855</a>\n<a href=\"#856\" id=\"856\">856</a>\n<a href=\"#857\" id=\"857\">857</a>\n<a href=\"#858\" id=\"858\">858</a>\n<a href=\"#859\" id=\"859\">859</a>\n<a href=\"#860\" id=\"860\">860</a>\n<a href=\"#861\" id=\"861\">861</a>\n<a href=\"#862\" id=\"862\">862</a>\n<a href=\"#863\" id=\"863\">863</a>\n<a href=\"#864\" id=\"864\">864</a>\n<a href=\"#865\" id=\"865\">865</a>\n<a href=\"#866\" id=\"866\">866</a>\n<a href=\"#867\" id=\"867\">867</a>\n<a href=\"#868\" id=\"868\">868</a>\n<a href=\"#869\" id=\"869\">869</a>\n<a href=\"#870\" id=\"870\">870</a>\n<a href=\"#871\" id=\"871\">871</a>\n<a href=\"#872\" id=\"872\">872</a>\n<a href=\"#873\" id=\"873\">873</a>\n<a href=\"#874\" id=\"874\">874</a>\n<a href=\"#875\" id=\"875\">875</a>\n<a href=\"#876\" id=\"876\">876</a>\n<a href=\"#877\" id=\"877\">877</a>\n<a href=\"#878\" id=\"878\">878</a>\n<a href=\"#879\" id=\"879\">879</a>\n<a href=\"#880\" id=\"880\">880</a>\n<a href=\"#881\" id=\"881\">881</a>\n<a href=\"#882\" id=\"882\">882</a>\n<a href=\"#883\" id=\"883\">883</a>\n<a href=\"#884\" id=\"884\">884</a>\n<a href=\"#885\" id=\"885\">885</a>\n<a href=\"#886\" id=\"886\">886</a>\n<a href=\"#887\" id=\"887\">887</a>\n<a href=\"#888\" id=\"888\">888</a>\n<a href=\"#889\" id=\"889\">889</a>\n<a href=\"#890\" id=\"890\">890</a>\n<a href=\"#891\" id=\"891\">891</a>\n<a href=\"#892\" id=\"892\">892</a>\n<a href=\"#893\" id=\"893\">893</a>\n<a href=\"#894\" id=\"894\">894</a>\n<a href=\"#895\" id=\"895\">895</a>\n<a href=\"#896\" id=\"896\">896</a>\n<a href=\"#897\" id=\"897\">897</a>\n<a href=\"#898\" id=\"898\">898</a>\n<a href=\"#899\" id=\"899\">899</a>\n<a href=\"#900\" id=\"900\">900</a>\n<a href=\"#901\" id=\"901\">901</a>\n<a href=\"#902\" id=\"902\">902</a>\n<a href=\"#903\" id=\"903\">903</a>\n<a href=\"#904\" id=\"904\">904</a>\n<a href=\"#905\" id=\"905\">905</a>\n<a href=\"#906\" id=\"906\">906</a>\n<a href=\"#907\" id=\"907\">907</a>\n<a href=\"#908\" id=\"908\">908</a>\n<a href=\"#909\" id=\"909\">909</a>\n<a href=\"#910\" id=\"910\">910</a>\n<a href=\"#911\" id=\"911\">911</a>\n<a href=\"#912\" id=\"912\">912</a>\n<a href=\"#913\" id=\"913\">913</a>\n<a href=\"#914\" id=\"914\">914</a>\n<a href=\"#915\" id=\"915\">915</a>\n<a href=\"#916\" id=\"916\">916</a>\n<a href=\"#917\" id=\"917\">917</a>\n<a href=\"#918\" id=\"918\">918</a>\n<a href=\"#919\" id=\"919\">919</a>\n<a href=\"#920\" id=\"920\">920</a>\n<a href=\"#921\" id=\"921\">921</a>\n<a href=\"#922\" id=\"922\">922</a>\n<a href=\"#923\" id=\"923\">923</a>\n<a href=\"#924\" id=\"924\">924</a>\n<a href=\"#925\" id=\"925\">925</a>\n<a href=\"#926\" id=\"926\">926</a>\n<a href=\"#927\" id=\"927\">927</a>\n<a href=\"#928\" id=\"928\">928</a>\n<a href=\"#929\" id=\"929\">929</a>\n<a href=\"#930\" id=\"930\">930</a>\n<a href=\"#931\" id=\"931\">931</a>\n<a href=\"#932\" id=\"932\">932</a>\n<a href=\"#933\" id=\"933\">933</a>\n<a href=\"#934\" id=\"934\">934</a>\n<a href=\"#935\" id=\"935\">935</a>\n<a href=\"#936\" id=\"936\">936</a>\n<a href=\"#937\" id=\"937\">937</a>\n<a href=\"#938\" id=\"938\">938</a>\n<a href=\"#939\" id=\"939\">939</a>\n<a href=\"#940\" id=\"940\">940</a>\n<a href=\"#941\" id=\"941\">941</a>\n<a href=\"#942\" id=\"942\">942</a>\n<a href=\"#943\" id=\"943\">943</a>\n<a href=\"#944\" id=\"944\">944</a>\n<a href=\"#945\" id=\"945\">945</a>\n<a href=\"#946\" id=\"946\">946</a>\n<a href=\"#947\" id=\"947\">947</a>\n<a href=\"#948\" id=\"948\">948</a>\n<a href=\"#949\" id=\"949\">949</a>\n<a href=\"#950\" id=\"950\">950</a>\n<a href=\"#951\" id=\"951\">951</a>\n<a href=\"#952\" id=\"952\">952</a>\n<a href=\"#953\" id=\"953\">953</a>\n<a href=\"#954\" id=\"954\">954</a>\n<a href=\"#955\" id=\"955\">955</a>\n<a href=\"#956\" id=\"956\">956</a>\n<a href=\"#957\" id=\"957\">957</a>\n<a href=\"#958\" id=\"958\">958</a>\n<a href=\"#959\" id=\"959\">959</a>\n<a href=\"#960\" id=\"960\">960</a>\n<a href=\"#961\" id=\"961\">961</a>\n<a href=\"#962\" id=\"962\">962</a>\n<a href=\"#963\" id=\"963\">963</a>\n<a href=\"#964\" id=\"964\">964</a>\n<a href=\"#965\" id=\"965\">965</a>\n<a href=\"#966\" id=\"966\">966</a>\n<a href=\"#967\" id=\"967\">967</a>\n<a href=\"#968\" id=\"968\">968</a>\n<a href=\"#969\" id=\"969\">969</a>\n<a href=\"#970\" id=\"970\">970</a>\n<a href=\"#971\" id=\"971\">971</a>\n<a href=\"#972\" id=\"972\">972</a>\n<a href=\"#973\" id=\"973\">973</a>\n<a href=\"#974\" id=\"974\">974</a>\n<a href=\"#975\" id=\"975\">975</a>\n<a href=\"#976\" id=\"976\">976</a>\n<a href=\"#977\" id=\"977\">977</a>\n<a href=\"#978\" id=\"978\">978</a>\n<a href=\"#979\" id=\"979\">979</a>\n<a href=\"#980\" id=\"980\">980</a>\n<a href=\"#981\" id=\"981\">981</a>\n<a href=\"#982\" id=\"982\">982</a>\n<a href=\"#983\" id=\"983\">983</a>\n<a href=\"#984\" id=\"984\">984</a>\n<a href=\"#985\" id=\"985\">985</a>\n<a href=\"#986\" id=\"986\">986</a>\n<a href=\"#987\" id=\"987\">987</a>\n<a href=\"#988\" id=\"988\">988</a>\n<a href=\"#989\" id=\"989\">989</a>\n<a href=\"#990\" id=\"990\">990</a>\n<a href=\"#991\" id=\"991\">991</a>\n<a href=\"#992\" id=\"992\" class=\"line-highlighted\">992</a>\n<a href=\"#993\" id=\"993\" class=\"line-highlighted\">993</a>\n<a href=\"#994\" id=\"994\" class=\"line-highlighted\">994</a>\n<a href=\"#995\" id=\"995\" class=\"line-highlighted\">995</a>\n<a href=\"#996\" id=\"996\" class=\"line-highlighted\">996</a>\n<a href=\"#997\" id=\"997\" class=\"line-highlighted\">997</a>\n<a href=\"#998\" id=\"998\" class=\"line-highlighted\">998</a>\n<a href=\"#999\" id=\"999\" class=\"line-highlighted\">999</a>\n<a href=\"#1000\" id=\"1000\" class=\"line-highlighted\">1000</a>\n<a href=\"#1001\" id=\"1001\" class=\"line-highlighted\">1001</a>\n<a href=\"#1002\" id=\"1002\" class=\"line-highlighted\">1002</a>\n<a href=\"#1003\" id=\"1003\" class=\"line-highlighted\">1003</a>\n<a href=\"#1004\" id=\"1004\">1004</a>\n<a href=\"#1005\" id=\"1005\">1005</a>\n<a href=\"#1006\" id=\"1006\">1006</a>\n<a href=\"#1007\" id=\"1007\">1007</a>\n<a href=\"#1008\" id=\"1008\">1008</a>\n<a href=\"#1009\" id=\"1009\">1009</a>\n<a href=\"#1010\" id=\"1010\">1010</a>\n<a href=\"#1011\" id=\"1011\">1011</a>\n<a href=\"#1012\" id=\"1012\">1012</a>\n<a href=\"#1013\" id=\"1013\">1013</a>\n<a href=\"#1014\" id=\"1014\">1014</a>\n<a href=\"#1015\" id=\"1015\">1015</a>\n<a href=\"#1016\" id=\"1016\">1016</a>\n<a href=\"#1017\" id=\"1017\">1017</a>\n<a href=\"#1018\" id=\"1018\">1018</a>\n<a href=\"#1019\" id=\"1019\">1019</a>\n<a href=\"#1020\" id=\"1020\">1020</a>\n<a href=\"#1021\" id=\"1021\">1021</a>\n</pre></div><pre class=\"rust\"><code><span class=\"doccomment\">//! Primitive traits and types representing basic properties of types.\n//!\n//! Rust types can be classified in various useful ways according to\n//! their intrinsic properties. These classifications are represented\n//! as traits.\n\n</span><span class=\"attr\">#![stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n\n</span><span class=\"kw\">use </span><span class=\"kw\">crate</span>::cell::UnsafeCell;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::cmp;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::fmt::Debug;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::hash::Hash;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::hash::Hasher;\n\n<span class=\"doccomment\">/// Implements a given marker trait for multiple types at the same time.\n///\n/// The basic syntax looks like this:\n/// ```ignore private macro\n/// marker_impls! { MarkerTrait for u8, i8 }\n/// ```\n/// You can also implement `unsafe` traits\n/// ```ignore private macro\n/// marker_impls! { unsafe MarkerTrait for u8, i8 }\n/// ```\n/// Add attributes to all impls:\n/// ```ignore private macro\n/// marker_impls! {\n///     #[allow(lint)]\n///     #[unstable(feature = \"marker_trait\", issue = \"none\")]\n///     MarkerTrait for u8, i8\n/// }\n/// ```\n/// And use generics:\n/// ```ignore private macro\n/// marker_impls! {\n///     MarkerTrait for\n///         u8, i8,\n///         {T: ?Sized} *const T,\n///         {T: ?Sized} *mut T,\n///         {T: MarkerTrait} PhantomData&lt;T&gt;,\n///         u32,\n/// }\n/// ```\n</span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"internal_impls_macro\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n</span><span class=\"kw\">macro </span>marker_impls {\n    ( $(<span class=\"attr\">#[$(<span class=\"macro-nonterminal\">$meta</span>:tt)<span class=\"kw-2\">*</span>]</span>)* <span class=\"macro-nonterminal\">$Trait</span>:ident <span class=\"kw\">for </span>$({$(<span class=\"macro-nonterminal\">$bounds</span>:tt)<span class=\"kw-2\">*</span>})<span class=\"question-mark\">? </span><span class=\"macro-nonterminal\">$T</span>:ty $(, $(<span class=\"macro-nonterminal\">$rest</span>:tt)<span class=\"kw-2\">*</span>)<span class=\"question-mark\">? </span>) =&gt; {\n        $(<span class=\"attr\">#[$(<span class=\"macro-nonterminal\">$meta</span>)<span class=\"kw-2\">*</span>]</span>)* <span class=\"kw\">impl</span>&lt; $($(<span class=\"macro-nonterminal\">$bounds</span>)<span class=\"kw-2\">*</span>)<span class=\"question-mark\">? </span>&gt; <span class=\"macro-nonterminal\">$Trait </span><span class=\"kw\">for </span><span class=\"macro-nonterminal\">$T </span>{}\n        <span class=\"macro\">marker_impls!</span> { $(<span class=\"attr\">#[$(<span class=\"macro-nonterminal\">$meta</span>)<span class=\"kw-2\">*</span>]</span>)* <span class=\"macro-nonterminal\">$Trait </span><span class=\"kw\">for </span>$($(<span class=\"macro-nonterminal\">$rest</span>)<span class=\"kw-2\">*</span>)<span class=\"question-mark\">? </span>}\n    },\n    ( $(<span class=\"attr\">#[$(<span class=\"macro-nonterminal\">$meta</span>:tt)<span class=\"kw-2\">*</span>]</span>)* <span class=\"macro-nonterminal\">$Trait</span>:ident <span class=\"kw\">for </span>) =&gt; {},\n\n    ( $(<span class=\"attr\">#[$(<span class=\"macro-nonterminal\">$meta</span>:tt)<span class=\"kw-2\">*</span>]</span>)* <span class=\"kw\">unsafe </span><span class=\"macro-nonterminal\">$Trait</span>:ident <span class=\"kw\">for </span>$({$(<span class=\"macro-nonterminal\">$bounds</span>:tt)<span class=\"kw-2\">*</span>})<span class=\"question-mark\">? </span><span class=\"macro-nonterminal\">$T</span>:ty $(, $(<span class=\"macro-nonterminal\">$rest</span>:tt)<span class=\"kw-2\">*</span>)<span class=\"question-mark\">? </span>) =&gt; {\n        $(<span class=\"attr\">#[$(<span class=\"macro-nonterminal\">$meta</span>)<span class=\"kw-2\">*</span>]</span>)* <span class=\"kw\">unsafe impl</span>&lt; $($(<span class=\"macro-nonterminal\">$bounds</span>)<span class=\"kw-2\">*</span>)<span class=\"question-mark\">? </span>&gt; <span class=\"macro-nonterminal\">$Trait </span><span class=\"kw\">for </span><span class=\"macro-nonterminal\">$T </span>{}\n        <span class=\"macro\">marker_impls!</span> { $(<span class=\"attr\">#[$(<span class=\"macro-nonterminal\">$meta</span>)<span class=\"kw-2\">*</span>]</span>)* <span class=\"kw\">unsafe </span><span class=\"macro-nonterminal\">$Trait </span><span class=\"kw\">for </span>$($(<span class=\"macro-nonterminal\">$rest</span>)<span class=\"kw-2\">*</span>)<span class=\"question-mark\">? </span>}\n    },\n    ( $(<span class=\"attr\">#[$(<span class=\"macro-nonterminal\">$meta</span>:tt)<span class=\"kw-2\">*</span>]</span>)* <span class=\"kw\">unsafe </span><span class=\"macro-nonterminal\">$Trait</span>:ident <span class=\"kw\">for </span>) =&gt; {},\n}\n\n<span class=\"doccomment\">/// Types that can be transferred across thread boundaries.\n///\n/// This trait is automatically implemented when the compiler determines it's\n/// appropriate.\n///\n/// An example of a non-`Send` type is the reference-counting pointer\n/// [`rc::Rc`][`Rc`]. If two threads attempt to clone [`Rc`]s that point to the same\n/// reference-counted value, they might try to update the reference count at the\n/// same time, which is [undefined behavior][ub] because [`Rc`] doesn't use atomic\n/// operations. Its cousin [`sync::Arc`][arc] does use atomic operations (incurring\n/// some overhead) and thus is `Send`.\n///\n/// See [the Nomicon](../../nomicon/send-and-sync.html) and the [`Sync`] trait for more details.\n///\n/// [`Rc`]: ../../std/rc/struct.Rc.html\n/// [arc]: ../../std/sync/struct.Arc.html\n/// [ub]: ../../reference/behavior-considered-undefined.html\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"Send\"</span>)]\n#[diagnostic::on_unimplemented(\n    message = <span class=\"string\">\"`{Self}` cannot be sent between threads safely\"</span>,\n    label = <span class=\"string\">\"`{Self}` cannot be sent between threads safely\"\n</span>)]\n</span><span class=\"kw\">pub unsafe </span>auto <span class=\"kw\">trait </span>Send {\n    <span class=\"comment\">// empty.\n</span>}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; !Send <span class=\"kw\">for </span><span class=\"kw-2\">*const </span>T {}\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; !Send <span class=\"kw\">for </span><span class=\"kw-2\">*mut </span>T {}\n\n<span class=\"comment\">// Most instances arise automatically, but this instance is needed to link up `T: Sync` with\n// `&amp;T: Send` (and it also removes the unsound default instance `T Send` -&gt; `&amp;T: Send` that would\n// otherwise exist).\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">unsafe impl</span>&lt;T: Sync + <span class=\"question-mark\">?</span>Sized&gt; Send <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>T {}\n\n<span class=\"doccomment\">/// Types with a constant size known at compile time.\n///\n/// All type parameters have an implicit bound of `Sized`. The special syntax\n/// `?Sized` can be used to remove this bound if it's not appropriate.\n///\n/// ```\n/// # #![allow(dead_code)]\n/// struct Foo&lt;T&gt;(T);\n/// struct Bar&lt;T: ?Sized&gt;(T);\n///\n/// // struct FooUse(Foo&lt;[i32]&gt;); // error: Sized is not implemented for [i32]\n/// struct BarUse(Bar&lt;[i32]&gt;); // OK\n/// ```\n///\n/// The one exception is the implicit `Self` type of a trait. A trait does not\n/// have an implicit `Sized` bound as this is incompatible with [trait object]s\n/// where, by definition, the trait needs to work with all possible implementors,\n/// and thus could be any size.\n///\n/// Although Rust will let you bind `Sized` to a trait, you won't\n/// be able to use it to form a trait object later:\n///\n/// ```\n/// # #![allow(unused_variables)]\n/// trait Foo { }\n/// trait Bar: Sized { }\n///\n/// struct Impl;\n/// impl Foo for Impl { }\n/// impl Bar for Impl { }\n///\n/// let x: &amp;dyn Foo = &amp;Impl;    // OK\n/// // let y: &amp;dyn Bar = &amp;Impl; // error: the trait `Bar` cannot\n///                             // be made into an object\n/// ```\n///\n/// [trait object]: ../../book/ch17-02-trait-objects.html\n</span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"?\"</span>, alias = <span class=\"string\">\"?Sized\"</span>)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[lang = <span class=\"string\">\"sized\"</span>]\n#[diagnostic::on_unimplemented(\n    message = <span class=\"string\">\"the size for values of type `{Self}` cannot be known at compilation time\"</span>,\n    label = <span class=\"string\">\"doesn't have a size known at compile-time\"\n</span>)]\n#[fundamental] </span><span class=\"comment\">// for Default, for example, which requires that `[T]: !Default` be evaluatable\n</span><span class=\"attr\">#[rustc_specialization_trait]\n#[rustc_deny_explicit_impl(implement_via_object = <span class=\"bool-val\">false</span>)]\n#[rustc_coinductive]\n</span><span class=\"kw\">pub trait </span>Sized {\n    <span class=\"comment\">// Empty.\n</span>}\n\n<span class=\"doccomment\">/// Types that can be \"unsized\" to a dynamically-sized type.\n///\n/// For example, the sized array type `[i8; 2]` implements `Unsize&lt;[i8]&gt;` and\n/// `Unsize&lt;dyn fmt::Debug&gt;`.\n///\n/// All implementations of `Unsize` are provided automatically by the compiler.\n/// Those implementations are:\n///\n/// - Arrays `[T; N]` implement `Unsize&lt;[T]&gt;`.\n/// - A type implements `Unsize&lt;dyn Trait + 'a&gt;` if all of these conditions are met:\n///   - The type implements `Trait`.\n///   - `Trait` is object safe.\n///   - The type is sized.\n///   - The type outlives `'a`.\n/// - Structs `Foo&lt;..., T1, ..., Tn, ...&gt;` implement `Unsize&lt;Foo&lt;..., U1, ..., Un, ...&gt;&gt;`\n/// where any number of (type and const) parameters may be changed if all of these conditions\n/// are met:\n///   - Only the last field of `Foo` has a type involving the parameters `T1`, ..., `Tn`.\n///   - All other parameters of the struct are equal.\n///   - `Field&lt;T1, ..., Tn&gt;: Unsize&lt;Field&lt;U1, ..., Un&gt;&gt;`, where `Field&lt;...&gt;` stands for the actual\n///     type of the struct's last field.\n///\n/// `Unsize` is used along with [`ops::CoerceUnsized`] to allow\n/// \"user-defined\" containers such as [`Rc`] to contain dynamically-sized\n/// types. See the [DST coercion RFC][RFC982] and [the nomicon entry on coercion][nomicon-coerce]\n/// for more details.\n///\n/// [`ops::CoerceUnsized`]: crate::ops::CoerceUnsized\n/// [`Rc`]: ../../std/rc/struct.Rc.html\n/// [RFC982]: https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\n/// [nomicon-coerce]: ../../nomicon/coercions.html\n</span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"unsize\"</span>, issue = <span class=\"string\">\"18598\"</span>)]\n#[lang = <span class=\"string\">\"unsize\"</span>]\n#[rustc_deny_explicit_impl(implement_via_object = <span class=\"bool-val\">false</span>)]\n</span><span class=\"kw\">pub trait </span>Unsize&lt;T: <span class=\"question-mark\">?</span>Sized&gt; {\n    <span class=\"comment\">// Empty.\n</span>}\n\n<span class=\"doccomment\">/// Required trait for constants used in pattern matches.\n///\n/// Any type that derives `PartialEq` automatically implements this trait,\n/// *regardless* of whether its type-parameters implement `PartialEq`.\n///\n/// If a `const` item contains some type that does not implement this trait,\n/// then that type either (1.) does not implement `PartialEq` (which means the\n/// constant will not provide that comparison method, which code generation\n/// assumes is available), or (2.) it implements *its own* version of\n/// `PartialEq` (which we assume does not conform to a structural-equality\n/// comparison).\n///\n/// In either of the two scenarios above, we reject usage of such a constant in\n/// a pattern match.\n///\n/// See also the [structural match RFC][RFC1445], and [issue 63438] which\n/// motivated migrating from an attribute-based design to this trait.\n///\n/// [RFC1445]: https://github.com/rust-lang/rfcs/blob/master/text/1445-restrict-constants-in-patterns.md\n/// [issue 63438]: https://github.com/rust-lang/rust/issues/63438\n</span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"structural_match\"</span>, issue = <span class=\"string\">\"31434\"</span>)]\n#[diagnostic::on_unimplemented(message = <span class=\"string\">\"the type `{Self}` does not `#[derive(PartialEq)]`\"</span>)]\n#[lang = <span class=\"string\">\"structural_peq\"</span>]\n</span><span class=\"kw\">pub trait </span>StructuralPartialEq {\n    <span class=\"comment\">// Empty.\n</span>}\n\n<span class=\"macro\">marker_impls!</span> {\n    <span class=\"attr\">#[unstable(feature = <span class=\"string\">\"structural_match\"</span>, issue = <span class=\"string\">\"31434\"</span>)]\n    </span>StructuralPartialEq <span class=\"kw\">for\n        </span>usize, u8, u16, u32, u64, u128,\n        isize, i8, i16, i32, i64, i128,\n        bool,\n        char,\n        str <span class=\"comment\">/* Technically requires `[u8]: StructuralPartialEq` */</span>,\n        (),\n        {T, <span class=\"kw\">const </span>N: usize} [T; N],\n        {T} [T],\n        {T: <span class=\"question-mark\">?</span>Sized} <span class=\"kw-2\">&amp;</span>T,\n}\n\n<span class=\"doccomment\">/// Types whose values can be duplicated simply by copying bits.\n///\n/// By default, variable bindings have 'move semantics.' In other\n/// words:\n///\n/// ```\n/// #[derive(Debug)]\n/// struct Foo;\n///\n/// let x = Foo;\n///\n/// let y = x;\n///\n/// // `x` has moved into `y`, and so cannot be used\n///\n/// // println!(\"{x:?}\"); // error: use of moved value\n/// ```\n///\n/// However, if a type implements `Copy`, it instead has 'copy semantics':\n///\n/// ```\n/// // We can derive a `Copy` implementation. `Clone` is also required, as it's\n/// // a supertrait of `Copy`.\n/// #[derive(Debug, Copy, Clone)]\n/// struct Foo;\n///\n/// let x = Foo;\n///\n/// let y = x;\n///\n/// // `y` is a copy of `x`\n///\n/// println!(\"{x:?}\"); // A-OK!\n/// ```\n///\n/// It's important to note that in these two examples, the only difference is whether you\n/// are allowed to access `x` after the assignment. Under the hood, both a copy and a move\n/// can result in bits being copied in memory, although this is sometimes optimized away.\n///\n/// ## How can I implement `Copy`?\n///\n/// There are two ways to implement `Copy` on your type. The simplest is to use `derive`:\n///\n/// ```\n/// #[derive(Copy, Clone)]\n/// struct MyStruct;\n/// ```\n///\n/// You can also implement `Copy` and `Clone` manually:\n///\n/// ```\n/// struct MyStruct;\n///\n/// impl Copy for MyStruct { }\n///\n/// impl Clone for MyStruct {\n///     fn clone(&amp;self) -&gt; MyStruct {\n///         *self\n///     }\n/// }\n/// ```\n///\n/// There is a small difference between the two: the `derive` strategy will also place a `Copy`\n/// bound on type parameters, which isn't always desired.\n///\n/// ## What's the difference between `Copy` and `Clone`?\n///\n/// Copies happen implicitly, for example as part of an assignment `y = x`. The behavior of\n/// `Copy` is not overloadable; it is always a simple bit-wise copy.\n///\n/// Cloning is an explicit action, `x.clone()`. The implementation of [`Clone`] can\n/// provide any type-specific behavior necessary to duplicate values safely. For example,\n/// the implementation of [`Clone`] for [`String`] needs to copy the pointed-to string\n/// buffer in the heap. A simple bitwise copy of [`String`] values would merely copy the\n/// pointer, leading to a double free down the line. For this reason, [`String`] is [`Clone`]\n/// but not `Copy`.\n///\n/// [`Clone`] is a supertrait of `Copy`, so everything which is `Copy` must also implement\n/// [`Clone`]. If a type is `Copy` then its [`Clone`] implementation only needs to return `*self`\n/// (see the example above).\n///\n/// ## When can my type be `Copy`?\n///\n/// A type can implement `Copy` if all of its components implement `Copy`. For example, this\n/// struct can be `Copy`:\n///\n/// ```\n/// # #[allow(dead_code)]\n/// #[derive(Copy, Clone)]\n/// struct Point {\n///    x: i32,\n///    y: i32,\n/// }\n/// ```\n///\n/// A struct can be `Copy`, and [`i32`] is `Copy`, therefore `Point` is eligible to be `Copy`.\n/// By contrast, consider\n///\n/// ```\n/// # #![allow(dead_code)]\n/// # struct Point;\n/// struct PointList {\n///     points: Vec&lt;Point&gt;,\n/// }\n/// ```\n///\n/// The struct `PointList` cannot implement `Copy`, because [`Vec&lt;T&gt;`] is not `Copy`. If we\n/// attempt to derive a `Copy` implementation, we'll get an error:\n///\n/// ```text\n/// the trait `Copy` cannot be implemented for this type; field `points` does not implement `Copy`\n/// ```\n///\n/// Shared references (`&amp;T`) are also `Copy`, so a type can be `Copy`, even when it holds\n/// shared references of types `T` that are *not* `Copy`. Consider the following struct,\n/// which can implement `Copy`, because it only holds a *shared reference* to our non-`Copy`\n/// type `PointList` from above:\n///\n/// ```\n/// # #![allow(dead_code)]\n/// # struct PointList;\n/// #[derive(Copy, Clone)]\n/// struct PointListWrapper&lt;'a&gt; {\n///     point_list_ref: &amp;'a PointList,\n/// }\n/// ```\n///\n/// ## When *can't* my type be `Copy`?\n///\n/// Some types can't be copied safely. For example, copying `&amp;mut T` would create an aliased\n/// mutable reference. Copying [`String`] would duplicate responsibility for managing the\n/// [`String`]'s buffer, leading to a double free.\n///\n/// Generalizing the latter case, any type implementing [`Drop`] can't be `Copy`, because it's\n/// managing some resource besides its own [`size_of::&lt;T&gt;`] bytes.\n///\n/// If you try to implement `Copy` on a struct or enum containing non-`Copy` data, you will get\n/// the error [E0204].\n///\n/// [E0204]: ../../error_codes/E0204.html\n///\n/// ## When *should* my type be `Copy`?\n///\n/// Generally speaking, if your type _can_ implement `Copy`, it should. Keep in mind, though,\n/// that implementing `Copy` is part of the public API of your type. If the type might become\n/// non-`Copy` in the future, it could be prudent to omit the `Copy` implementation now, to\n/// avoid a breaking API change.\n///\n/// ## Additional implementors\n///\n/// In addition to the [implementors listed below][impls],\n/// the following types also implement `Copy`:\n///\n/// * Function item types (i.e., the distinct types defined for each function)\n/// * Function pointer types (e.g., `fn() -&gt; i32`)\n/// * Closure types, if they capture no value from the environment\n///   or if all such captured values implement `Copy` themselves.\n///   Note that variables captured by shared reference always implement `Copy`\n///   (even if the referent doesn't),\n///   while variables captured by mutable reference never implement `Copy`.\n///\n/// [`Vec&lt;T&gt;`]: ../../std/vec/struct.Vec.html\n/// [`String`]: ../../std/string/struct.String.html\n/// [`size_of::&lt;T&gt;`]: crate::mem::size_of\n/// [impls]: #implementors\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[lang = <span class=\"string\">\"copy\"</span>]\n</span><span class=\"comment\">// FIXME(matthewjasper) This allows copying a type that doesn't implement\n// `Copy` because of unsatisfied lifetime bounds (copying `A&lt;'_&gt;` when only\n// `A&lt;'static&gt;: Copy` and `A&lt;'_&gt;: Clone`).\n// We have this attribute here for now only because there are quite a few\n// existing specializations on `Copy` that already exist in the standard\n// library, and there's no way to safely have this behavior right now.\n</span><span class=\"attr\">#[rustc_unsafe_specialization_marker]\n#[rustc_diagnostic_item = <span class=\"string\">\"Copy\"</span>]\n</span><span class=\"kw\">pub trait </span>Copy: Clone {\n    <span class=\"comment\">// Empty.\n</span>}\n\n<span class=\"doccomment\">/// Derive macro generating an impl of the trait `Copy`.\n</span><span class=\"attr\">#[rustc_builtin_macro]\n#[stable(feature = <span class=\"string\">\"builtin_macro_prelude\"</span>, since = <span class=\"string\">\"1.38.0\"</span>)]\n#[allow_internal_unstable(core_intrinsics, derive_clone_copy)]\n</span><span class=\"kw\">pub macro </span>Copy(<span class=\"macro-nonterminal\">$item</span>:item) {\n    <span class=\"comment\">/* compiler built-in */\n</span>}\n\n<span class=\"comment\">// Implementations of `Copy` for primitive types.\n//\n// Implementations that cannot be described in Rust\n// are implemented in `traits::SelectionContext::copy_clone_conditions()`\n// in `rustc_trait_selection`.\n</span><span class=\"macro\">marker_impls!</span> {\n    <span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span>Copy <span class=\"kw\">for\n        </span>usize, u8, u16, u32, u64, u128,\n        isize, i8, i16, i32, i64, i128,\n        f16, f32, f64, f128,\n        bool, char,\n        {T: <span class=\"question-mark\">?</span>Sized} <span class=\"kw-2\">*const </span>T,\n        {T: <span class=\"question-mark\">?</span>Sized} <span class=\"kw-2\">*mut </span>T,\n\n}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"never_type\"</span>, issue = <span class=\"string\">\"35121\"</span>)]\n</span><span class=\"kw\">impl </span>Copy <span class=\"kw\">for </span>! {}\n\n<span class=\"doccomment\">/// Shared references can be copied, but mutable references *cannot*!\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; Copy <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>T {}\n\n<span class=\"doccomment\">/// Types for which it is safe to share references between threads.\n///\n/// This trait is automatically implemented when the compiler determines\n/// it's appropriate.\n///\n/// The precise definition is: a type `T` is [`Sync`] if and only if `&amp;T` is\n/// [`Send`]. In other words, if there is no possibility of\n/// [undefined behavior][ub] (including data races) when passing\n/// `&amp;T` references between threads.\n///\n/// As one would expect, primitive types like [`u8`] and [`f64`]\n/// are all [`Sync`], and so are simple aggregate types containing them,\n/// like tuples, structs and enums. More examples of basic [`Sync`]\n/// types include \"immutable\" types like `&amp;T`, and those with simple\n/// inherited mutability, such as [`Box&lt;T&gt;`][box], [`Vec&lt;T&gt;`][vec] and\n/// most other collection types. (Generic parameters need to be [`Sync`]\n/// for their container to be [`Sync`].)\n///\n/// A somewhat surprising consequence of the definition is that `&amp;mut T`\n/// is `Sync` (if `T` is `Sync`) even though it seems like that might\n/// provide unsynchronized mutation. The trick is that a mutable\n/// reference behind a shared reference (that is, `&amp; &amp;mut T`)\n/// becomes read-only, as if it were a `&amp; &amp;T`. Hence there is no risk\n/// of a data race.\n///\n/// A shorter overview of how [`Sync`] and [`Send`] relate to referencing:\n/// * `&amp;T` is [`Send`] if and only if `T` is [`Sync`]\n/// * `&amp;mut T` is [`Send`] if and only if `T` is [`Send`]\n/// * `&amp;T` and `&amp;mut T` are [`Sync`] if and only if `T` is [`Sync`]\n///\n/// Types that are not `Sync` are those that have \"interior\n/// mutability\" in a non-thread-safe form, such as [`Cell`][cell]\n/// and [`RefCell`][refcell]. These types allow for mutation of\n/// their contents even through an immutable, shared reference. For\n/// example the `set` method on [`Cell&lt;T&gt;`][cell] takes `&amp;self`, so it requires\n/// only a shared reference [`&amp;Cell&lt;T&gt;`][cell]. The method performs no\n/// synchronization, thus [`Cell`][cell] cannot be `Sync`.\n///\n/// Another example of a non-`Sync` type is the reference-counting\n/// pointer [`Rc`][rc]. Given any reference [`&amp;Rc&lt;T&gt;`][rc], you can clone\n/// a new [`Rc&lt;T&gt;`][rc], modifying the reference counts in a non-atomic way.\n///\n/// For cases when one does need thread-safe interior mutability,\n/// Rust provides [atomic data types], as well as explicit locking via\n/// [`sync::Mutex`][mutex] and [`sync::RwLock`][rwlock]. These types\n/// ensure that any mutation cannot cause data races, hence the types\n/// are `Sync`. Likewise, [`sync::Arc`][arc] provides a thread-safe\n/// analogue of [`Rc`][rc].\n///\n/// Any types with interior mutability must also use the\n/// [`cell::UnsafeCell`][unsafecell] wrapper around the value(s) which\n/// can be mutated through a shared reference. Failing to doing this is\n/// [undefined behavior][ub]. For example, [`transmute`][transmute]-ing\n/// from `&amp;T` to `&amp;mut T` is invalid.\n///\n/// See [the Nomicon][nomicon-send-and-sync] for more details about `Sync`.\n///\n/// [box]: ../../std/boxed/struct.Box.html\n/// [vec]: ../../std/vec/struct.Vec.html\n/// [cell]: crate::cell::Cell\n/// [refcell]: crate::cell::RefCell\n/// [rc]: ../../std/rc/struct.Rc.html\n/// [arc]: ../../std/sync/struct.Arc.html\n/// [atomic data types]: crate::sync::atomic\n/// [mutex]: ../../std/sync/struct.Mutex.html\n/// [rwlock]: ../../std/sync/struct.RwLock.html\n/// [unsafecell]: crate::cell::UnsafeCell\n/// [ub]: ../../reference/behavior-considered-undefined.html\n/// [transmute]: crate::mem::transmute\n/// [nomicon-send-and-sync]: ../../nomicon/send-and-sync.html\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"Sync\"</span>)]\n#[lang = <span class=\"string\">\"sync\"</span>]\n#[rustc_on_unimplemented(\n    on(\n        _Self = <span class=\"string\">\"core::cell::once::OnceCell&lt;T&gt;\"</span>,\n        note = <span class=\"string\">\"if you want to do aliasing and mutation between multiple threads, use `std::sync::OnceLock` instead\"\n    </span>),\n    on(\n        _Self = <span class=\"string\">\"core::cell::Cell&lt;u8&gt;\"</span>,\n        note = <span class=\"string\">\"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicU8` instead\"</span>,\n    ),\n    on(\n        _Self = <span class=\"string\">\"core::cell::Cell&lt;u16&gt;\"</span>,\n        note = <span class=\"string\">\"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicU16` instead\"</span>,\n    ),\n    on(\n        _Self = <span class=\"string\">\"core::cell::Cell&lt;u32&gt;\"</span>,\n        note = <span class=\"string\">\"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicU32` instead\"</span>,\n    ),\n    on(\n        _Self = <span class=\"string\">\"core::cell::Cell&lt;u64&gt;\"</span>,\n        note = <span class=\"string\">\"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicU64` instead\"</span>,\n    ),\n    on(\n        _Self = <span class=\"string\">\"core::cell::Cell&lt;usize&gt;\"</span>,\n        note = <span class=\"string\">\"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicUsize` instead\"</span>,\n    ),\n    on(\n        _Self = <span class=\"string\">\"core::cell::Cell&lt;i8&gt;\"</span>,\n        note = <span class=\"string\">\"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI8` instead\"</span>,\n    ),\n    on(\n        _Self = <span class=\"string\">\"core::cell::Cell&lt;i16&gt;\"</span>,\n        note = <span class=\"string\">\"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI16` instead\"</span>,\n    ),\n    on(\n        _Self = <span class=\"string\">\"core::cell::Cell&lt;i32&gt;\"</span>,\n        note = <span class=\"string\">\"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\"</span>,\n    ),\n    on(\n        _Self = <span class=\"string\">\"core::cell::Cell&lt;i64&gt;\"</span>,\n        note = <span class=\"string\">\"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI64` instead\"</span>,\n    ),\n    on(\n        _Self = <span class=\"string\">\"core::cell::Cell&lt;isize&gt;\"</span>,\n        note = <span class=\"string\">\"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicIsize` instead\"</span>,\n    ),\n    on(\n        _Self = <span class=\"string\">\"core::cell::Cell&lt;bool&gt;\"</span>,\n        note = <span class=\"string\">\"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicBool` instead\"</span>,\n    ),\n    on(\n        all(\n            _Self = <span class=\"string\">\"core::cell::Cell&lt;T&gt;\"</span>,\n            not(_Self = <span class=\"string\">\"core::cell::Cell&lt;u8&gt;\"</span>),\n            not(_Self = <span class=\"string\">\"core::cell::Cell&lt;u16&gt;\"</span>),\n            not(_Self = <span class=\"string\">\"core::cell::Cell&lt;u32&gt;\"</span>),\n            not(_Self = <span class=\"string\">\"core::cell::Cell&lt;u64&gt;\"</span>),\n            not(_Self = <span class=\"string\">\"core::cell::Cell&lt;usize&gt;\"</span>),\n            not(_Self = <span class=\"string\">\"core::cell::Cell&lt;i8&gt;\"</span>),\n            not(_Self = <span class=\"string\">\"core::cell::Cell&lt;i16&gt;\"</span>),\n            not(_Self = <span class=\"string\">\"core::cell::Cell&lt;i32&gt;\"</span>),\n            not(_Self = <span class=\"string\">\"core::cell::Cell&lt;i64&gt;\"</span>),\n            not(_Self = <span class=\"string\">\"core::cell::Cell&lt;isize&gt;\"</span>),\n            not(_Self = <span class=\"string\">\"core::cell::Cell&lt;bool&gt;\"</span>)\n        ),\n        note = <span class=\"string\">\"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock`\"</span>,\n    ),\n    on(\n        _Self = <span class=\"string\">\"core::cell::RefCell&lt;T&gt;\"</span>,\n        note = <span class=\"string\">\"if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\"</span>,\n    ),\n    message = <span class=\"string\">\"`{Self}` cannot be shared between threads safely\"</span>,\n    label = <span class=\"string\">\"`{Self}` cannot be shared between threads safely\"\n</span>)]\n</span><span class=\"kw\">pub unsafe </span>auto <span class=\"kw\">trait </span>Sync {\n    <span class=\"comment\">// FIXME(estebank): once support to add notes in `rustc_on_unimplemented`\n    // lands in beta, and it has been extended to check whether a closure is\n    // anywhere in the requirement chain, extend it as such (#48534):\n    // ```\n    // on(\n    //     closure,\n    //     note=\"`{Self}` cannot be shared safely, consider marking the closure `move`\"\n    // ),\n    // ```\n\n    // Empty\n</span>}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; !Sync <span class=\"kw\">for </span><span class=\"kw-2\">*const </span>T {}\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; !Sync <span class=\"kw\">for </span><span class=\"kw-2\">*mut </span>T {}\n\n<span class=\"doccomment\">/// Zero-sized type used to mark things that \"act like\" they own a `T`.\n///\n/// Adding a `PhantomData&lt;T&gt;` field to your type tells the compiler that your\n/// type acts as though it stores a value of type `T`, even though it doesn't\n/// really. This information is used when computing certain safety properties.\n///\n/// For a more in-depth explanation of how to use `PhantomData&lt;T&gt;`, please see\n/// [the Nomicon](../../nomicon/phantom-data.html).\n///\n/// # A ghastly note 👻👻👻\n///\n/// Though they both have scary names, `PhantomData` and 'phantom types' are\n/// related, but not identical. A phantom type parameter is simply a type\n/// parameter which is never used. In Rust, this often causes the compiler to\n/// complain, and the solution is to add a \"dummy\" use by way of `PhantomData`.\n///\n/// # Examples\n///\n/// ## Unused lifetime parameters\n///\n/// Perhaps the most common use case for `PhantomData` is a struct that has an\n/// unused lifetime parameter, typically as part of some unsafe code. For\n/// example, here is a struct `Slice` that has two pointers of type `*const T`,\n/// presumably pointing into an array somewhere:\n///\n/// ```compile_fail,E0392\n/// struct Slice&lt;'a, T&gt; {\n///     start: *const T,\n///     end: *const T,\n/// }\n/// ```\n///\n/// The intention is that the underlying data is only valid for the\n/// lifetime `'a`, so `Slice` should not outlive `'a`. However, this\n/// intent is not expressed in the code, since there are no uses of\n/// the lifetime `'a` and hence it is not clear what data it applies\n/// to. We can correct this by telling the compiler to act *as if* the\n/// `Slice` struct contained a reference `&amp;'a T`:\n///\n/// ```\n/// use std::marker::PhantomData;\n///\n/// # #[allow(dead_code)]\n/// struct Slice&lt;'a, T&gt; {\n///     start: *const T,\n///     end: *const T,\n///     phantom: PhantomData&lt;&amp;'a T&gt;,\n/// }\n/// ```\n///\n/// This also in turn infers the lifetime bound `T: 'a`, indicating\n/// that any references in `T` are valid over the lifetime `'a`.\n///\n/// When initializing a `Slice` you simply provide the value\n/// `PhantomData` for the field `phantom`:\n///\n/// ```\n/// # #![allow(dead_code)]\n/// # use std::marker::PhantomData;\n/// # struct Slice&lt;'a, T&gt; {\n/// #     start: *const T,\n/// #     end: *const T,\n/// #     phantom: PhantomData&lt;&amp;'a T&gt;,\n/// # }\n/// fn borrow_vec&lt;T&gt;(vec: &amp;Vec&lt;T&gt;) -&gt; Slice&lt;'_, T&gt; {\n///     let ptr = vec.as_ptr();\n///     Slice {\n///         start: ptr,\n///         end: unsafe { ptr.add(vec.len()) },\n///         phantom: PhantomData,\n///     }\n/// }\n/// ```\n///\n/// ## Unused type parameters\n///\n/// It sometimes happens that you have unused type parameters which\n/// indicate what type of data a struct is \"tied\" to, even though that\n/// data is not actually found in the struct itself. Here is an\n/// example where this arises with [FFI]. The foreign interface uses\n/// handles of type `*mut ()` to refer to Rust values of different\n/// types. We track the Rust type using a phantom type parameter on\n/// the struct `ExternalResource` which wraps a handle.\n///\n/// [FFI]: ../../book/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code\n///\n/// ```\n/// # #![allow(dead_code)]\n/// # trait ResType { }\n/// # struct ParamType;\n/// # mod foreign_lib {\n/// #     pub fn new(_: usize) -&gt; *mut () { 42 as *mut () }\n/// #     pub fn do_stuff(_: *mut (), _: usize) {}\n/// # }\n/// # fn convert_params(_: ParamType) -&gt; usize { 42 }\n/// use std::marker::PhantomData;\n/// use std::mem;\n///\n/// struct ExternalResource&lt;R&gt; {\n///    resource_handle: *mut (),\n///    resource_type: PhantomData&lt;R&gt;,\n/// }\n///\n/// impl&lt;R: ResType&gt; ExternalResource&lt;R&gt; {\n///     fn new() -&gt; Self {\n///         let size_of_res = mem::size_of::&lt;R&gt;();\n///         Self {\n///             resource_handle: foreign_lib::new(size_of_res),\n///             resource_type: PhantomData,\n///         }\n///     }\n///\n///     fn do_stuff(&amp;self, param: ParamType) {\n///         let foreign_params = convert_params(param);\n///         foreign_lib::do_stuff(self.resource_handle, foreign_params);\n///     }\n/// }\n/// ```\n///\n/// ## Ownership and the drop check\n///\n/// The exact interaction of `PhantomData` with drop check **may change in the future**.\n///\n/// Currently, adding a field of type `PhantomData&lt;T&gt;` indicates that your type *owns* data of type\n/// `T` in very rare circumstances. This in turn has effects on the Rust compiler's [drop check]\n/// analysis. For the exact rules, see the [drop check] documentation.\n///\n/// ## Layout\n///\n/// For all `T`, the following are guaranteed:\n/// * `size_of::&lt;PhantomData&lt;T&gt;&gt;() == 0`\n/// * `align_of::&lt;PhantomData&lt;T&gt;&gt;() == 1`\n///\n/// [drop check]: Drop#drop-check\n</span><span class=\"attr\">#[lang = <span class=\"string\">\"phantom_data\"</span>]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub struct </span>PhantomData&lt;T: <span class=\"question-mark\">?</span>Sized&gt;;\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; Hash <span class=\"kw\">for </span>PhantomData&lt;T&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>hash&lt;H: Hasher&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, <span class=\"kw\">_</span>: <span class=\"kw-2\">&amp;mut </span>H) {}\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; cmp::PartialEq <span class=\"kw\">for </span>PhantomData&lt;T&gt; {\n    <span class=\"kw\">fn </span>eq(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, _other: <span class=\"kw-2\">&amp;</span>PhantomData&lt;T&gt;) -&gt; bool {\n        <span class=\"bool-val\">true\n    </span>}\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; cmp::Eq <span class=\"kw\">for </span>PhantomData&lt;T&gt; {}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; cmp::PartialOrd <span class=\"kw\">for </span>PhantomData&lt;T&gt; {\n    <span class=\"kw\">fn </span>partial_cmp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, _other: <span class=\"kw-2\">&amp;</span>PhantomData&lt;T&gt;) -&gt; <span class=\"prelude-ty\">Option</span>&lt;cmp::Ordering&gt; {\n        Option::Some(cmp::Ordering::Equal)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; cmp::Ord <span class=\"kw\">for </span>PhantomData&lt;T&gt; {\n    <span class=\"kw\">fn </span>cmp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, _other: <span class=\"kw-2\">&amp;</span>PhantomData&lt;T&gt;) -&gt; cmp::Ordering {\n        cmp::Ordering::Equal\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; Copy <span class=\"kw\">for </span>PhantomData&lt;T&gt; {}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; Clone <span class=\"kw\">for </span>PhantomData&lt;T&gt; {\n    <span class=\"kw\">fn </span>clone(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self\n    </span>}\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; Default <span class=\"kw\">for </span>PhantomData&lt;T&gt; {\n    <span class=\"kw\">fn </span>default() -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self\n    </span>}\n}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"structural_match\"</span>, issue = <span class=\"string\">\"31434\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; StructuralPartialEq <span class=\"kw\">for </span>PhantomData&lt;T&gt; {}\n\n<span class=\"doccomment\">/// Compiler-internal trait used to indicate the type of enum discriminants.\n///\n/// This trait is automatically implemented for every type and does not add any\n/// guarantees to [`mem::Discriminant`]. It is **undefined behavior** to transmute\n/// between `DiscriminantKind::Discriminant` and `mem::Discriminant`.\n///\n/// [`mem::Discriminant`]: crate::mem::Discriminant\n</span><span class=\"attr\">#[unstable(\n    feature = <span class=\"string\">\"discriminant_kind\"</span>,\n    issue = <span class=\"string\">\"none\"</span>,\n    reason = <span class=\"string\">\"this trait is unlikely to ever be stabilized, use `mem::discriminant` instead\"\n</span>)]\n#[lang = <span class=\"string\">\"discriminant_kind\"</span>]\n#[rustc_deny_explicit_impl(implement_via_object = <span class=\"bool-val\">false</span>)]\n</span><span class=\"kw\">pub trait </span>DiscriminantKind {\n    <span class=\"doccomment\">/// The type of the discriminant, which must satisfy the trait\n    /// bounds required by `mem::Discriminant`.\n    </span><span class=\"attr\">#[lang = <span class=\"string\">\"discriminant_type\"</span>]\n    </span><span class=\"kw\">type </span>Discriminant: Clone + Copy + Debug + Eq + PartialEq + Hash + Send + Sync + Unpin;\n}\n\n<span class=\"doccomment\">/// Used to determine whether a type contains\n/// any `UnsafeCell` internally, but not through an indirection.\n/// This affects, for example, whether a `static` of that type is\n/// placed in read-only static memory or writable static memory.\n/// This can be used to declare that a constant with a generic type\n/// will not contain interior mutability, and subsequently allow\n/// placing the constant behind references.\n///\n/// # Safety\n///\n/// This trait is a core part of the language, it is just expressed as a trait in libcore for\n/// convenience. Do *not* implement it for other types.\n</span><span class=\"comment\">// FIXME: Eventually this trait should become `#[rustc_deny_explicit_impl]`.\n// That requires porting the impls below to native internal impls.\n</span><span class=\"attr\">#[lang = <span class=\"string\">\"freeze\"</span>]\n#[unstable(feature = <span class=\"string\">\"freeze\"</span>, issue = <span class=\"string\">\"121675\"</span>)]\n</span><span class=\"kw\">pub unsafe </span>auto <span class=\"kw\">trait </span>Freeze {}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"freeze\"</span>, issue = <span class=\"string\">\"121675\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized&gt; !Freeze <span class=\"kw\">for </span>UnsafeCell&lt;T&gt; {}\n<span class=\"macro\">marker_impls!</span> {\n    <span class=\"attr\">#[unstable(feature = <span class=\"string\">\"freeze\"</span>, issue = <span class=\"string\">\"121675\"</span>)]\n    </span><span class=\"kw\">unsafe </span>Freeze <span class=\"kw\">for\n        </span>{T: <span class=\"question-mark\">?</span>Sized} PhantomData&lt;T&gt;,\n        {T: <span class=\"question-mark\">?</span>Sized} <span class=\"kw-2\">*const </span>T,\n        {T: <span class=\"question-mark\">?</span>Sized} <span class=\"kw-2\">*mut </span>T,\n        {T: <span class=\"question-mark\">?</span>Sized} <span class=\"kw-2\">&amp;</span>T,\n        {T: <span class=\"question-mark\">?</span>Sized} <span class=\"kw-2\">&amp;mut </span>T,\n}\n\n<span class=\"doccomment\">/// Types that do not require any pinning guarantees.\n///\n/// For information on what \"pinning\" is, see the [`pin` module] documentation.\n///\n/// Implementing the `Unpin` trait for `T` expresses the fact that `T` is pinning-agnostic:\n/// it shall not expose nor rely on any pinning guarantees. This, in turn, means that a\n/// `Pin`-wrapped pointer to such a type can feature a *fully unrestricted* API.\n/// In other words, if `T: Unpin`, a value of type `T` will *not* be bound by the invariants\n/// which pinning otherwise offers, even when \"pinned\" by a [`Pin&lt;Ptr&gt;`] pointing at it.\n/// When a value of type `T` is pointed at by a [`Pin&lt;Ptr&gt;`], [`Pin`] will not restrict access\n/// to the pointee value like it normally would, thus allowing the user to do anything that they\n/// normally could with a non-[`Pin`]-wrapped `Ptr` to that value.\n///\n/// The idea of this trait is to alleviate the reduced ergonomics of APIs that require the use\n/// of [`Pin`] for soundness for some types, but which also want to be used by other types that\n/// don't care about pinning. The prime example of such an API is [`Future::poll`]. There are many\n/// [`Future`] types that don't care about pinning. These futures can implement `Unpin` and\n/// therefore get around the pinning related restrictions in the API, while still allowing the\n/// subset of [`Future`]s which *do* require pinning to be implemented soundly.\n///\n/// For more discussion on the consequences of [`Unpin`] within the wider scope of the pinning\n/// system, see the [section about `Unpin`] in the [`pin` module].\n///\n/// `Unpin` has no consequence at all for non-pinned data. In particular, [`mem::replace`] happily\n/// moves `!Unpin` data, which would be immovable when pinned ([`mem::replace`] works for any\n/// `&amp;mut T`, not just when `T: Unpin`).\n///\n/// *However*, you cannot use [`mem::replace`] on `!Unpin` data which is *pinned* by being wrapped\n/// inside a [`Pin&lt;Ptr&gt;`] pointing at it. This is because you cannot (safely) use a\n/// [`Pin&lt;Ptr&gt;`] to get an `&amp;mut T` to its pointee value, which you would need to call\n/// [`mem::replace`], and *that* is what makes this system work.\n///\n/// So this, for example, can only be done on types implementing `Unpin`:\n///\n/// ```rust\n/// # #![allow(unused_must_use)]\n/// use std::mem;\n/// use std::pin::Pin;\n///\n/// let mut string = \"this\".to_string();\n/// let mut pinned_string = Pin::new(&amp;mut string);\n///\n/// // We need a mutable reference to call `mem::replace`.\n/// // We can obtain such a reference by (implicitly) invoking `Pin::deref_mut`,\n/// // but that is only possible because `String` implements `Unpin`.\n/// mem::replace(&amp;mut *pinned_string, \"other\".to_string());\n/// ```\n///\n/// This trait is automatically implemented for almost every type. The compiler is free\n/// to take the conservative stance of marking types as [`Unpin`] so long as all of the types that\n/// compose its fields are also [`Unpin`]. This is because if a type implements [`Unpin`], then it\n/// is unsound for that type's implementation to rely on pinning-related guarantees for soundness,\n/// *even* when viewed through a \"pinning\" pointer! It is the responsibility of the implementor of\n/// a type that relies upon pinning for soundness to ensure that type is *not* marked as [`Unpin`]\n/// by adding [`PhantomPinned`] field. For more details, see the [`pin` module] docs.\n///\n/// [`mem::replace`]: crate::mem::replace \"mem replace\"\n/// [`Future`]: crate::future::Future \"Future\"\n/// [`Future::poll`]: crate::future::Future::poll \"Future poll\"\n/// [`Pin`]: crate::pin::Pin \"Pin\"\n/// [`Pin&lt;Ptr&gt;`]: crate::pin::Pin \"Pin\"\n/// [`pin` module]: crate::pin \"pin module\"\n/// [section about `Unpin`]: crate::pin#unpin \"pin module docs about unpin\"\n/// [`unsafe`]: ../../std/keyword.unsafe.html \"keyword unsafe\"\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"pin\"</span>, since = <span class=\"string\">\"1.33.0\"</span>)]\n#[diagnostic::on_unimplemented(\n    note = <span class=\"string\">\"consider using the `pin!` macro\\nconsider using `Box::pin` if you need to access the pinned value outside of the current scope\"</span>,\n    message = <span class=\"string\">\"`{Self}` cannot be unpinned\"\n</span>)]\n#[lang = <span class=\"string\">\"unpin\"</span>]\n</span><span class=\"kw\">pub </span>auto <span class=\"kw\">trait </span>Unpin {}\n\n<span class=\"doccomment\">/// A marker type which does not implement `Unpin`.\n///\n/// If a type contains a `PhantomPinned`, it will not implement `Unpin` by default.\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"pin\"</span>, since = <span class=\"string\">\"1.33.0\"</span>)]\n#[derive(Debug, Default, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n</span><span class=\"kw\">pub struct </span>PhantomPinned;\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"pin\"</span>, since = <span class=\"string\">\"1.33.0\"</span>)]\n</span><span class=\"kw\">impl </span>!Unpin <span class=\"kw\">for </span>PhantomPinned {}\n\n<span class=\"macro\">marker_impls!</span> {\n    <span class=\"attr\">#[stable(feature = <span class=\"string\">\"pin\"</span>, since = <span class=\"string\">\"1.33.0\"</span>)]\n    </span>Unpin <span class=\"kw\">for\n        </span>{T: <span class=\"question-mark\">?</span>Sized} <span class=\"kw-2\">&amp;</span>T,\n        {T: <span class=\"question-mark\">?</span>Sized} <span class=\"kw-2\">&amp;mut </span>T,\n}\n\n<span class=\"macro\">marker_impls!</span> {\n    <span class=\"attr\">#[stable(feature = <span class=\"string\">\"pin_raw\"</span>, since = <span class=\"string\">\"1.38.0\"</span>)]\n    </span>Unpin <span class=\"kw\">for\n        </span>{T: <span class=\"question-mark\">?</span>Sized} <span class=\"kw-2\">*const </span>T,\n        {T: <span class=\"question-mark\">?</span>Sized} <span class=\"kw-2\">*mut </span>T,\n}\n\n<span class=\"doccomment\">/// A marker for types that can be dropped.\n///\n/// This should be used for `~const` bounds,\n/// as non-const bounds will always hold for every type.\n</span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"const_trait_impl\"</span>, issue = <span class=\"string\">\"67792\"</span>)]\n#[lang = <span class=\"string\">\"destruct\"</span>]\n#[rustc_on_unimplemented(message = <span class=\"string\">\"can't drop `{Self}`\"</span>, append_const_msg)]\n#[rustc_deny_explicit_impl(implement_via_object = <span class=\"bool-val\">false</span>)]\n#[const_trait]\n</span><span class=\"kw\">pub trait </span>Destruct {}\n\n<span class=\"doccomment\">/// A marker for tuple types.\n///\n/// The implementation of this trait is built-in and cannot be implemented\n/// for any user type.\n</span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"tuple_trait\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[lang = <span class=\"string\">\"tuple_trait\"</span>]\n#[diagnostic::on_unimplemented(message = <span class=\"string\">\"`{Self}` is not a tuple\"</span>)]\n#[rustc_deny_explicit_impl(implement_via_object = <span class=\"bool-val\">false</span>)]\n</span><span class=\"kw\">pub trait </span>Tuple {}\n\n<span class=\"doccomment\">/// A marker for pointer-like types.\n///\n/// All types that have the same size and alignment as a `usize` or\n/// `*const ()` automatically implement this trait.\n</span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"pointer_like_trait\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[lang = <span class=\"string\">\"pointer_like\"</span>]\n#[diagnostic::on_unimplemented(\n    message = <span class=\"string\">\"`{Self}` needs to have the same ABI as a pointer\"</span>,\n    label = <span class=\"string\">\"`{Self}` needs to be a pointer-like type\"\n</span>)]\n</span><span class=\"kw\">pub trait </span>PointerLike {}\n\n<span class=\"doccomment\">/// A marker for types which can be used as types of `const` generic parameters.\n///\n/// These types must have a proper equivalence relation (`Eq`) and it must be automatically\n/// derived (`StructuralPartialEq`). There's a hard-coded check in the compiler ensuring\n/// that all fields are also `ConstParamTy`, which implies that recursively, all fields\n/// are `StructuralPartialEq`.\n</span><span class=\"attr\">#[lang = <span class=\"string\">\"const_param_ty\"</span>]\n#[unstable(feature = <span class=\"string\">\"adt_const_params\"</span>, issue = <span class=\"string\">\"95174\"</span>)]\n#[diagnostic::on_unimplemented(message = <span class=\"string\">\"`{Self}` can't be used as a const parameter type\"</span>)]\n#[allow(multiple_supertrait_upcastable)]\n</span><span class=\"kw\">pub trait </span>ConstParamTy: StructuralPartialEq + Eq {}\n\n<span class=\"doccomment\">/// Derive macro generating an impl of the trait `ConstParamTy`.\n</span><span class=\"attr\">#[rustc_builtin_macro]\n#[unstable(feature = <span class=\"string\">\"adt_const_params\"</span>, issue = <span class=\"string\">\"95174\"</span>)]\n</span><span class=\"kw\">pub macro </span>ConstParamTy(<span class=\"macro-nonterminal\">$item</span>:item) {\n    <span class=\"comment\">/* compiler built-in */\n</span>}\n\n<span class=\"comment\">// FIXME(adt_const_params): handle `ty::FnDef`/`ty::Closure`\n</span><span class=\"macro\">marker_impls!</span> {\n    <span class=\"attr\">#[unstable(feature = <span class=\"string\">\"adt_const_params\"</span>, issue = <span class=\"string\">\"95174\"</span>)]\n    </span>ConstParamTy <span class=\"kw\">for\n        </span>usize, u8, u16, u32, u64, u128,\n        isize, i8, i16, i32, i64, i128,\n        bool,\n        char,\n        str <span class=\"comment\">/* Technically requires `[u8]: ConstParamTy` */</span>,\n        {T: ConstParamTy, <span class=\"kw\">const </span>N: usize} [T; N],\n        {T: ConstParamTy} [T],\n        {T: <span class=\"question-mark\">?</span>Sized + ConstParamTy} <span class=\"kw-2\">&amp;</span>T,\n}\n\n<span class=\"comment\">// FIXME(adt_const_params): Add to marker_impls call above once not in bootstrap\n</span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"adt_const_params\"</span>, issue = <span class=\"string\">\"95174\"</span>)]\n</span><span class=\"kw\">impl </span>ConstParamTy <span class=\"kw\">for </span>() {}\n\n<span class=\"doccomment\">/// A common trait implemented by all function pointers.\n</span><span class=\"attr\">#[unstable(\n    feature = <span class=\"string\">\"fn_ptr_trait\"</span>,\n    issue = <span class=\"string\">\"none\"</span>,\n    reason = <span class=\"string\">\"internal trait for implementing various traits for all function pointers\"\n</span>)]\n#[lang = <span class=\"string\">\"fn_ptr_trait\"</span>]\n#[rustc_deny_explicit_impl(implement_via_object = <span class=\"bool-val\">false</span>)]\n</span><span class=\"kw\">pub trait </span>FnPtr: Copy + Clone {\n    <span class=\"doccomment\">/// Returns the address of the function pointer.\n    </span><span class=\"attr\">#[lang = <span class=\"string\">\"fn_ptr_addr\"</span>]\n    </span><span class=\"kw\">fn </span>addr(<span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">*const </span>();\n}\n</code></pre></div></section></main></body></html>",
	"crawlDate": "2024-07-28T05:13:39.735Z"
}