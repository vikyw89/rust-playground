{
	"title": "drop_in_place in std::ptr - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ptr/fn.drop_in_place.html",
	"markdown": "# drop\\_in\\_place in std::ptr - Rust\n\n```\npub unsafe fn drop_in_place<T>(to_drop: *mut T)where\n    T: ?Sized,\n```\n\nExpand description\n\nExecutes the destructor (if any) of the pointed-to value.\n\nThis is almost the same as calling [`ptr::read`](fn.read.html \"fn std::ptr::read\") and discarding the result, but has the following advantages:\n\n-   It is _required_ to use `drop_in_place` to drop unsized types like trait objects, because they can’t be read out onto the stack and dropped normally.\n    \n-   It is friendlier to the optimizer to do this over [`ptr::read`](fn.read.html \"fn std::ptr::read\") when dropping manually allocated memory (e.g., in the implementations of `Box`/`Rc`/`Vec`), as the compiler doesn’t need to prove that it’s sound to elide the copy.\n    \n-   It can be used to drop [pinned](../pin/index.html \"mod std::pin\") data when `T` is not `repr(packed)` (pinned data must not be moved before it is dropped).\n    \n\nUnaligned values cannot be dropped in place, they must be copied to an aligned location first using [`ptr::read_unaligned`](fn.read_unaligned.html \"fn std::ptr::read_unaligned\"). For packed structs, this move is done automatically by the compiler. This means the fields of packed structs are not dropped in-place.\n\n## [§](#safety)Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n-   `to_drop` must be [valid](about:blank/index.html#safety \"mod std::ptr\") for both reads and writes.\n    \n-   `to_drop` must be properly aligned, even if `T` has size 0.\n    \n-   `to_drop` must be nonnull, even if `T` has size 0.\n    \n-   The value `to_drop` points to must be valid for dropping, which may mean it must uphold additional invariants. These invariants depend on the type of the value being dropped. For instance, when dropping a Box, the box’s pointer to the heap must be valid.\n    \n-   While `drop_in_place` is executing, the only way to access parts of `to_drop` is through the `&mut self` references supplied to the `Drop::drop` methods that `drop_in_place` invokes.\n    \n\nAdditionally, if `T` is not [`Copy`](../marker/trait.Copy.html \"trait std::marker::Copy\"), using the pointed-to value after calling `drop_in_place` can cause undefined behavior. Note that `*to_drop = foo` counts as a use because it will cause the value to be dropped again. [`write()`](fn.write.html \"fn std::ptr::write\") can be used to overwrite data without causing it to be dropped.\n\n## [§](#examples)Examples\n\nManually remove the last item from a vector:\n\n```\nuse std::ptr;\nuse std::rc::Rc;\n\nlet last = Rc::new(1);\nlet weak = Rc::downgrade(&last);\n\nlet mut v = vec![Rc::new(0), last];\n\nunsafe {\n    // Get a raw pointer to the last element in `v`.\n    let ptr = &mut v[1] as *mut _;\n    // Shorten `v` to prevent the last item from being dropped. We do that first,\n    // to prevent issues if the `drop_in_place` below panics.\n    v.set_len(1);\n    // Without a call `drop_in_place`, the last item would never be dropped,\n    // and the memory it manages would be leaked.\n    ptr::drop_in_place(ptr);\n}\n\nassert_eq!(v, &[0.into()]);\n\n// Ensure that the last item was dropped.\nassert!(weak.upgrade().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++use+std::rc::Rc;%0A++++%0A++++let+last+=+Rc::new(1);%0A++++let+weak+=+Rc::downgrade(%26last);%0A++++%0A++++let+mut+v+=+vec!%5BRc::new(0),+last%5D;%0A++++%0A++++unsafe+%7B%0A++++++++//+Get+a+raw+pointer+to+the+last+element+in+%60v%60.%0A++++++++let+ptr+=+%26mut+v%5B1%5D+as+*mut+_;%0A++++++++//+Shorten+%60v%60+to+prevent+the+last+item+from+being+dropped.+We+do+that+first,%0A++++++++//+to+prevent+issues+if+the+%60drop_in_place%60+below+panics.%0A++++++++v.set_len(1);%0A++++++++//+Without+a+call+%60drop_in_place%60,+the+last+item+would+never+be+dropped,%0A++++++++//+and+the+memory+it+manages+would+be+leaked.%0A++++++++ptr::drop_in_place(ptr);%0A++++%7D%0A++++%0A++++assert_eq!(v,+%26%5B0.into()%5D);%0A++++%0A++++//+Ensure+that+the+last+item+was+dropped.%0A++++assert!(weak.upgrade().is_none());%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Executes the destructor (if any) of the pointed-to value.\"><title>drop_in_place in std::ptr - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::ptr</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.addr_of.html\">addr_of</a></li><li><a href=\"macro.addr_of_mut.html\">addr_of_mut</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Alignment.html\">Alignment</a></li><li><a href=\"struct.DynMetadata.html\">DynMetadata</a></li><li><a href=\"struct.NonNull.html\">NonNull</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Pointee.html\">Pointee</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.addr_eq.html\">addr_eq</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.copy_nonoverlapping.html\">copy_nonoverlapping</a></li><li><a href=\"fn.dangling.html\">dangling</a></li><li><a href=\"fn.dangling_mut.html\">dangling_mut</a></li><li><a href=\"fn.drop_in_place.html\">drop_in_place</a></li><li><a href=\"fn.eq.html\">eq</a></li><li><a href=\"fn.from_mut.html\">from_mut</a></li><li><a href=\"fn.from_raw_parts.html\">from_raw_parts</a></li><li><a href=\"fn.from_raw_parts_mut.html\">from_raw_parts_mut</a></li><li><a href=\"fn.from_ref.html\">from_ref</a></li><li><a href=\"fn.hash.html\">hash</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.null.html\">null</a></li><li><a href=\"fn.null_mut.html\">null_mut</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_unaligned.html\">read_unaligned</a></li><li><a href=\"fn.read_volatile.html\">read_volatile</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.slice_from_raw_parts.html\">slice_from_raw_parts</a></li><li><a href=\"fn.slice_from_raw_parts_mut.html\">slice_from_raw_parts_mut</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.swap_nonoverlapping.html\">swap_nonoverlapping</a></li><li><a href=\"fn.with_exposed_provenance.html\">with_exposed_provenance</a></li><li><a href=\"fn.with_exposed_provenance_mut.html\">with_exposed_provenance_mut</a></li><li><a href=\"fn.without_provenance.html\">without_provenance</a></li><li><a href=\"fn.without_provenance_mut.html\">without_provenance_mut</a></li><li><a href=\"fn.write.html\">write</a></li><li><a href=\"fn.write_bytes.html\">write_bytes</a></li><li><a href=\"fn.write_unaligned.html\">write_unaligned</a></li><li><a href=\"fn.write_volatile.html\">write_volatile</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ptr</a>::<wbr><a class=\"fn\" href=\"#\">drop_in_place</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mod.rs.html#542\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub unsafe fn drop_in_place&lt;T&gt;(to_drop: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>)<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Executes the destructor (if any) of the pointed-to value.</p>\n<p>This is almost the same as calling <a href=\"fn.read.html\" title=\"fn std::ptr::read\"><code>ptr::read</code></a> and discarding\nthe result, but has the following advantages:</p>\n<ul>\n<li>\n<p>It is <em>required</em> to use <code>drop_in_place</code> to drop unsized types like\ntrait objects, because they can’t be read out onto the stack and\ndropped normally.</p>\n</li>\n<li>\n<p>It is friendlier to the optimizer to do this over <a href=\"fn.read.html\" title=\"fn std::ptr::read\"><code>ptr::read</code></a> when\ndropping manually allocated memory (e.g., in the implementations of\n<code>Box</code>/<code>Rc</code>/<code>Vec</code>), as the compiler doesn’t need to prove that it’s\nsound to elide the copy.</p>\n</li>\n<li>\n<p>It can be used to drop <a href=\"../pin/index.html\" title=\"mod std::pin\">pinned</a> data when <code>T</code> is not <code>repr(packed)</code>\n(pinned data must not be moved before it is dropped).</p>\n</li>\n</ul>\n<p>Unaligned values cannot be dropped in place, they must be copied to an aligned\nlocation first using <a href=\"fn.read_unaligned.html\" title=\"fn std::ptr::read_unaligned\"><code>ptr::read_unaligned</code></a>. For packed structs, this move is\ndone automatically by the compiler. This means the fields of packed structs\nare not dropped in-place.</p>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h2>\n<p>Behavior is undefined if any of the following conditions are violated:</p>\n<ul>\n<li>\n<p><code>to_drop</code> must be <a href=\"index.html#safety\" title=\"mod std::ptr\">valid</a> for both reads and writes.</p>\n</li>\n<li>\n<p><code>to_drop</code> must be properly aligned, even if <code>T</code> has size 0.</p>\n</li>\n<li>\n<p><code>to_drop</code> must be nonnull, even if <code>T</code> has size 0.</p>\n</li>\n<li>\n<p>The value <code>to_drop</code> points to must be valid for dropping, which may mean\nit must uphold additional invariants. These invariants depend on the type\nof the value being dropped. For instance, when dropping a Box, the box’s\npointer to the heap must be valid.</p>\n</li>\n<li>\n<p>While <code>drop_in_place</code> is executing, the only way to access parts of\n<code>to_drop</code> is through the <code>&amp;mut self</code> references supplied to the\n<code>Drop::drop</code> methods that <code>drop_in_place</code> invokes.</p>\n</li>\n</ul>\n<p>Additionally, if <code>T</code> is not <a href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\"><code>Copy</code></a>, using the pointed-to value after\ncalling <code>drop_in_place</code> can cause undefined behavior. Note that <code>*to_drop = foo</code> counts as a use because it will cause the value to be dropped\nagain. <a href=\"fn.write.html\" title=\"fn std::ptr::write\"><code>write()</code></a> can be used to overwrite data without causing it to be\ndropped.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Manually remove the last item from a vector:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::rc::Rc;\n\n<span class=\"kw\">let </span>last = Rc::new(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>weak = Rc::downgrade(<span class=\"kw-2\">&amp;</span>last);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[Rc::new(<span class=\"number\">0</span>), last];\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Get a raw pointer to the last element in `v`.\n    </span><span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;mut </span>v[<span class=\"number\">1</span>] <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>;\n    <span class=\"comment\">// Shorten `v` to prevent the last item from being dropped. We do that first,\n    // to prevent issues if the `drop_in_place` below panics.\n    </span>v.set_len(<span class=\"number\">1</span>);\n    <span class=\"comment\">// Without a call `drop_in_place`, the last item would never be dropped,\n    // and the memory it manages would be leaked.\n    </span>ptr::drop_in_place(ptr);\n}\n\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>.into()]);\n\n<span class=\"comment\">// Ensure that the last item was dropped.\n</span><span class=\"macro\">assert!</span>(weak.upgrade().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++use+std::rc::Rc;%0A++++%0A++++let+last+=+Rc::new(1);%0A++++let+weak+=+Rc::downgrade(%26last);%0A++++%0A++++let+mut+v+=+vec!%5BRc::new(0),+last%5D;%0A++++%0A++++unsafe+%7B%0A++++++++//+Get+a+raw+pointer+to+the+last+element+in+%60v%60.%0A++++++++let+ptr+=+%26mut+v%5B1%5D+as+*mut+_;%0A++++++++//+Shorten+%60v%60+to+prevent+the+last+item+from+being+dropped.+We+do+that+first,%0A++++++++//+to+prevent+issues+if+the+%60drop_in_place%60+below+panics.%0A++++++++v.set_len(1);%0A++++++++//+Without+a+call+%60drop_in_place%60,+the+last+item+would+never+be+dropped,%0A++++++++//+and+the+memory+it+manages+would+be+leaked.%0A++++++++ptr::drop_in_place(ptr);%0A++++%7D%0A++++%0A++++assert_eq!(v,+%26%5B0.into()%5D);%0A++++%0A++++//+Ensure+that+the+last+item+was+dropped.%0A++++assert!(weak.upgrade().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:13:06.961Z"
}