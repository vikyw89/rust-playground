{
	"title": "std::hash - Rust",
	"url": "https://doc.rust-lang.org/stable/std/hash/index.html",
	"markdown": "# std::hash - Rust\n\n## Module [std](../index.html)::[hash](#)\n\n1.0.0 · [source](about:blank/src/std/hash/mod.rs.html#1-91) ·\n\nExpand description\n\nGeneric hashing support.\n\nThis module provides a generic way to compute the [hash](https://en.wikipedia.org/wiki/Hash_function) of a value. Hashes are most commonly used with [`HashMap`](../../std/collections/struct.HashMap.html) and [`HashSet`](../../std/collections/struct.HashSet.html).\n\nThe simplest way to make a type hashable is to use `#[derive(Hash)]`:\n\n## [§](#examples)Examples\n\n```\nuse std::hash::{DefaultHasher, Hash, Hasher};\n\n#[derive(Hash)]\nstruct Person {\n    id: u32,\n    name: String,\n    phone: u64,\n}\n\nlet person1 = Person {\n    id: 5,\n    name: \"Janet\".to_string(),\n    phone: 555_666_7777,\n};\nlet person2 = Person {\n    id: 5,\n    name: \"Bob\".to_string(),\n    phone: 555_666_7777,\n};\n\nassert!(calculate_hash(&person1) != calculate_hash(&person2));\n\nfn calculate_hash<T: Hash>(t: &T) -> u64 {\n    let mut s = DefaultHasher::new();\n    t.hash(&mut s);\n    s.finish()\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BDefaultHasher,+Hash,+Hasher%7D;%0A++++%0A++++%23%5Bderive(Hash)%5D%0A++++struct+Person+%7B%0A++++++++id:+u32,%0A++++++++name:+String,%0A++++++++phone:+u64,%0A++++%7D%0A++++%0A++++let+person1+=+Person+%7B%0A++++++++id:+5,%0A++++++++name:+%22Janet%22.to_string(),%0A++++++++phone:+555_666_7777,%0A++++%7D;%0A++++let+person2+=+Person+%7B%0A++++++++id:+5,%0A++++++++name:+%22Bob%22.to_string(),%0A++++++++phone:+555_666_7777,%0A++++%7D;%0A++++%0A++++assert!(calculate_hash(%26person1)+!=+calculate_hash(%26person2));%0A++++%0A++++fn+calculate_hash%3CT:+Hash%3E(t:+%26T)+-%3E+u64+%7B%0A++++++++let+mut+s+=+DefaultHasher::new();%0A++++++++t.hash(%26mut+s);%0A++++++++s.finish()%0A++++%7D%0A%7D&edition=2021)\n\nIf you need more control over how a value is hashed, you need to implement the [`Hash`](trait.Hash.html \"trait std::hash::Hash\") trait:\n\n```\nuse std::hash::{DefaultHasher, Hash, Hasher};\n\nstruct Person {\n    id: u32,\n    name: String,\n    phone: u64,\n}\n\nimpl Hash for Person {\n    fn hash<H: Hasher>(&self, state: &mut H) {\n        self.id.hash(state);\n        self.phone.hash(state);\n    }\n}\n\nlet person1 = Person {\n    id: 5,\n    name: \"Janet\".to_string(),\n    phone: 555_666_7777,\n};\nlet person2 = Person {\n    id: 5,\n    name: \"Bob\".to_string(),\n    phone: 555_666_7777,\n};\n\nassert_eq!(calculate_hash(&person1), calculate_hash(&person2));\n\nfn calculate_hash<T: Hash>(t: &T) -> u64 {\n    let mut s = DefaultHasher::new();\n    t.hash(&mut s);\n    s.finish()\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BDefaultHasher,+Hash,+Hasher%7D;%0A++++%0A++++struct+Person+%7B%0A++++++++id:+u32,%0A++++%23%5Ballow(dead_code)%5D%0A++++++++name:+String,%0A++++++++phone:+u64,%0A++++%7D%0A++++%0A++++impl+Hash+for+Person+%7B%0A++++++++fn+hash%3CH:+Hasher%3E(%26self,+state:+%26mut+H)+%7B%0A++++++++++++self.id.hash(state);%0A++++++++++++self.phone.hash(state);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+person1+=+Person+%7B%0A++++++++id:+5,%0A++++++++name:+%22Janet%22.to_string(),%0A++++++++phone:+555_666_7777,%0A++++%7D;%0A++++let+person2+=+Person+%7B%0A++++++++id:+5,%0A++++++++name:+%22Bob%22.to_string(),%0A++++++++phone:+555_666_7777,%0A++++%7D;%0A++++%0A++++assert_eq!(calculate_hash(%26person1),+calculate_hash(%26person2));%0A++++%0A++++fn+calculate_hash%3CT:+Hash%3E(t:+%26T)+-%3E+u64+%7B%0A++++++++let+mut+s+=+DefaultHasher::new();%0A++++++++t.hash(%26mut+s);%0A++++++++s.finish()%0A++++%7D%0A%7D&edition=2021)\n\n-   `RandomState` is the default state for [`HashMap`](../collections/hash_map/struct.HashMap.html \"struct std::collections::hash_map::HashMap\") types.\n    \n-   An implementation of SipHash 2-4.\n    \n\n-   A trait for creating instances of [`Hasher`](trait.Hasher.html \"trait std::hash::Hasher\").\n    \n-   A hashable type.\n    \n-   A trait for hashing an arbitrary stream of bytes.\n    \n\n-   Derive macro generating an impl of the trait `Hash`.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Generic hashing support.\"><title>std::hash - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Module hash</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Module hash</a></h2><div class=\"sidebar-elems\"><section><ul class=\"block\"><li><a href=\"#structs\">Structs</a></li><li><a href=\"#traits\">Traits</a></li><li><a href=\"#derives\">Derive Macros</a></li></ul></section><h2><a href=\"../index.html\">In crate std</a></h2><h3><a href=\"../index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"../primitive.array.html\">array</a></li><li><a href=\"../primitive.bool.html\">bool</a></li><li><a href=\"../primitive.char.html\">char</a></li><li><a href=\"../primitive.f128.html\">f128</a></li><li><a href=\"../primitive.f16.html\">f16</a></li><li><a href=\"../primitive.f32.html\">f32</a></li><li><a href=\"../primitive.f64.html\">f64</a></li><li><a href=\"../primitive.fn.html\">fn</a></li><li><a href=\"../primitive.i128.html\">i128</a></li><li><a href=\"../primitive.i16.html\">i16</a></li><li><a href=\"../primitive.i32.html\">i32</a></li><li><a href=\"../primitive.i64.html\">i64</a></li><li><a href=\"../primitive.i8.html\">i8</a></li><li><a href=\"../primitive.isize.html\">isize</a></li><li><a href=\"../primitive.never.html\">never</a></li><li><a href=\"../primitive.pointer.html\">pointer</a></li><li><a href=\"../primitive.reference.html\">reference</a></li><li><a href=\"../primitive.slice.html\">slice</a></li><li><a href=\"../primitive.str.html\">str</a></li><li><a href=\"../primitive.tuple.html\">tuple</a></li><li><a href=\"../primitive.u128.html\">u128</a></li><li><a href=\"../primitive.u16.html\">u16</a></li><li><a href=\"../primitive.u32.html\">u32</a></li><li><a href=\"../primitive.u64.html\">u64</a></li><li><a href=\"../primitive.u8.html\">u8</a></li><li><a href=\"../primitive.unit.html\">unit</a></li><li><a href=\"../primitive.usize.html\">usize</a></li></ul><h3><a href=\"../index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"../alloc/index.html\">alloc</a></li><li><a href=\"../any/index.html\">any</a></li><li><a href=\"../arch/index.html\">arch</a></li><li><a href=\"../array/index.html\">array</a></li><li><a href=\"../ascii/index.html\">ascii</a></li><li><a href=\"../assert_matches/index.html\">assert_matches</a></li><li><a href=\"../async_iter/index.html\">async_iter</a></li><li><a href=\"../backtrace/index.html\">backtrace</a></li><li><a href=\"../borrow/index.html\">borrow</a></li><li><a href=\"../boxed/index.html\">boxed</a></li><li><a href=\"../cell/index.html\">cell</a></li><li><a href=\"../char/index.html\">char</a></li><li><a href=\"../clone/index.html\">clone</a></li><li><a href=\"../cmp/index.html\">cmp</a></li><li><a href=\"../collections/index.html\">collections</a></li><li><a href=\"../convert/index.html\">convert</a></li><li><a href=\"../default/index.html\">default</a></li><li><a href=\"../env/index.html\">env</a></li><li><a href=\"../error/index.html\">error</a></li><li><a href=\"../f128/index.html\">f128</a></li><li><a href=\"../f16/index.html\">f16</a></li><li><a href=\"../f32/index.html\">f32</a></li><li><a href=\"../f64/index.html\">f64</a></li><li><a href=\"../ffi/index.html\">ffi</a></li><li><a href=\"../fmt/index.html\">fmt</a></li><li><a href=\"../fs/index.html\">fs</a></li><li><a href=\"../future/index.html\">future</a></li><li><a href=\"../hash/index.html\">hash</a></li><li><a href=\"../hint/index.html\">hint</a></li><li><a href=\"../i128/index.html\">i128</a></li><li><a href=\"../i16/index.html\">i16</a></li><li><a href=\"../i32/index.html\">i32</a></li><li><a href=\"../i64/index.html\">i64</a></li><li><a href=\"../i8/index.html\">i8</a></li><li><a href=\"../intrinsics/index.html\">intrinsics</a></li><li><a href=\"../io/index.html\">io</a></li><li><a href=\"../isize/index.html\">isize</a></li><li><a href=\"../iter/index.html\">iter</a></li><li><a href=\"../marker/index.html\">marker</a></li><li><a href=\"../mem/index.html\">mem</a></li><li><a href=\"../net/index.html\">net</a></li><li><a href=\"../num/index.html\">num</a></li><li><a href=\"../ops/index.html\">ops</a></li><li><a href=\"../option/index.html\">option</a></li><li><a href=\"../os/index.html\">os</a></li><li><a href=\"../panic/index.html\">panic</a></li><li><a href=\"../pat/index.html\">pat</a></li><li><a href=\"../path/index.html\">path</a></li><li><a href=\"../pin/index.html\">pin</a></li><li><a href=\"../prelude/index.html\">prelude</a></li><li><a href=\"../primitive/index.html\">primitive</a></li><li><a href=\"../process/index.html\">process</a></li><li><a href=\"../ptr/index.html\">ptr</a></li><li><a href=\"../rc/index.html\">rc</a></li><li><a href=\"../result/index.html\">result</a></li><li><a href=\"../simd/index.html\">simd</a></li><li><a href=\"../slice/index.html\">slice</a></li><li><a href=\"../str/index.html\">str</a></li><li><a href=\"../string/index.html\">string</a></li><li><a href=\"../sync/index.html\">sync</a></li><li><a href=\"../task/index.html\">task</a></li><li><a href=\"../thread/index.html\">thread</a></li><li><a href=\"../time/index.html\">time</a></li><li><a href=\"../u128/index.html\">u128</a></li><li><a href=\"../u16/index.html\">u16</a></li><li><a href=\"../u32/index.html\">u32</a></li><li><a href=\"../u64/index.html\">u64</a></li><li><a href=\"../u8/index.html\">u8</a></li><li><a href=\"../usize/index.html\">usize</a></li><li><a href=\"../vec/index.html\">vec</a></li></ul><h3><a href=\"../index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"../macro.assert.html\">assert</a></li><li><a href=\"../macro.assert_eq.html\">assert_eq</a></li><li><a href=\"../macro.assert_ne.html\">assert_ne</a></li><li><a href=\"../macro.cfg.html\">cfg</a></li><li><a href=\"../macro.cfg_match.html\">cfg_match</a></li><li><a href=\"../macro.column.html\">column</a></li><li><a href=\"../macro.compile_error.html\">compile_error</a></li><li><a href=\"../macro.concat.html\">concat</a></li><li><a href=\"../macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"../macro.concat_idents.html\">concat_idents</a></li><li><a href=\"../macro.const_format_args.html\">const_format_args</a></li><li><a href=\"../macro.dbg.html\">dbg</a></li><li><a href=\"../macro.debug_assert.html\">debug_assert</a></li><li><a href=\"../macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"../macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"../macro.env.html\">env</a></li><li><a href=\"../macro.eprint.html\">eprint</a></li><li><a href=\"../macro.eprintln.html\">eprintln</a></li><li><a href=\"../macro.file.html\">file</a></li><li><a href=\"../macro.format.html\">format</a></li><li><a href=\"../macro.format_args.html\">format_args</a></li><li><a href=\"../macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"../macro.include.html\">include</a></li><li><a href=\"../macro.include_bytes.html\">include_bytes</a></li><li><a href=\"../macro.include_str.html\">include_str</a></li><li><a href=\"../macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"../macro.line.html\">line</a></li><li><a href=\"../macro.log_syntax.html\">log_syntax</a></li><li><a href=\"../macro.matches.html\">matches</a></li><li><a href=\"../macro.module_path.html\">module_path</a></li><li><a href=\"../macro.option_env.html\">option_env</a></li><li><a href=\"../macro.panic.html\">panic</a></li><li><a href=\"../macro.print.html\">print</a></li><li><a href=\"../macro.println.html\">println</a></li><li><a href=\"../macro.stringify.html\">stringify</a></li><li><a href=\"../macro.thread_local.html\">thread_local</a></li><li><a href=\"../macro.todo.html\">todo</a></li><li><a href=\"../macro.trace_macros.html\">trace_macros</a></li><li><a href=\"../macro.try.html\">try</a></li><li><a href=\"../macro.unimplemented.html\">unimplemented</a></li><li><a href=\"../macro.unreachable.html\">unreachable</a></li><li><a href=\"../macro.vec.html\">vec</a></li><li><a href=\"../macro.write.html\">write</a></li><li><a href=\"../macro.writeln.html\">writeln</a></li></ul><h3><a href=\"../index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"../keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"../keyword.as.html\">as</a></li><li><a href=\"../keyword.async.html\">async</a></li><li><a href=\"../keyword.await.html\">await</a></li><li><a href=\"../keyword.break.html\">break</a></li><li><a href=\"../keyword.const.html\">const</a></li><li><a href=\"../keyword.continue.html\">continue</a></li><li><a href=\"../keyword.crate.html\">crate</a></li><li><a href=\"../keyword.dyn.html\">dyn</a></li><li><a href=\"../keyword.else.html\">else</a></li><li><a href=\"../keyword.enum.html\">enum</a></li><li><a href=\"../keyword.extern.html\">extern</a></li><li><a href=\"../keyword.false.html\">false</a></li><li><a href=\"../keyword.fn.html\">fn</a></li><li><a href=\"../keyword.for.html\">for</a></li><li><a href=\"../keyword.if.html\">if</a></li><li><a href=\"../keyword.impl.html\">impl</a></li><li><a href=\"../keyword.in.html\">in</a></li><li><a href=\"../keyword.let.html\">let</a></li><li><a href=\"../keyword.loop.html\">loop</a></li><li><a href=\"../keyword.match.html\">match</a></li><li><a href=\"../keyword.mod.html\">mod</a></li><li><a href=\"../keyword.move.html\">move</a></li><li><a href=\"../keyword.mut.html\">mut</a></li><li><a href=\"../keyword.pub.html\">pub</a></li><li><a href=\"../keyword.ref.html\">ref</a></li><li><a href=\"../keyword.return.html\">return</a></li><li><a href=\"../keyword.self.html\">self</a></li><li><a href=\"../keyword.static.html\">static</a></li><li><a href=\"../keyword.struct.html\">struct</a></li><li><a href=\"../keyword.super.html\">super</a></li><li><a href=\"../keyword.trait.html\">trait</a></li><li><a href=\"../keyword.true.html\">true</a></li><li><a href=\"../keyword.type.html\">type</a></li><li><a href=\"../keyword.union.html\">union</a></li><li><a href=\"../keyword.unsafe.html\">unsafe</a></li><li><a href=\"../keyword.use.html\">use</a></li><li><a href=\"../keyword.where.html\">where</a></li><li><a href=\"../keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Module <a href=\"../index.html\">std</a>::<wbr><a class=\"mod\" href=\"#\">hash</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/hash/mod.rs.html#1-91\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Generic hashing support.</p>\n<p>This module provides a generic way to compute the <a href=\"https://en.wikipedia.org/wiki/Hash_function\">hash</a> of a value.\nHashes are most commonly used with <a href=\"../../std/collections/struct.HashMap.html\"><code>HashMap</code></a> and <a href=\"../../std/collections/struct.HashSet.html\"><code>HashSet</code></a>.</p>\n<p>The simplest way to make a type hashable is to use <code>#[derive(Hash)]</code>:</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::{DefaultHasher, Hash, Hasher};\n\n<span class=\"attr\">#[derive(Hash)]\n</span><span class=\"kw\">struct </span>Person {\n    id: u32,\n    name: String,\n    phone: u64,\n}\n\n<span class=\"kw\">let </span>person1 = Person {\n    id: <span class=\"number\">5</span>,\n    name: <span class=\"string\">\"Janet\"</span>.to_string(),\n    phone: <span class=\"number\">555_666_7777</span>,\n};\n<span class=\"kw\">let </span>person2 = Person {\n    id: <span class=\"number\">5</span>,\n    name: <span class=\"string\">\"Bob\"</span>.to_string(),\n    phone: <span class=\"number\">555_666_7777</span>,\n};\n\n<span class=\"macro\">assert!</span>(calculate_hash(<span class=\"kw-2\">&amp;</span>person1) != calculate_hash(<span class=\"kw-2\">&amp;</span>person2));\n\n<span class=\"kw\">fn </span>calculate_hash&lt;T: Hash&gt;(t: <span class=\"kw-2\">&amp;</span>T) -&gt; u64 {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = DefaultHasher::new();\n    t.hash(<span class=\"kw-2\">&amp;mut </span>s);\n    s.finish()\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BDefaultHasher,+Hash,+Hasher%7D;%0A++++%0A++++%23%5Bderive(Hash)%5D%0A++++struct+Person+%7B%0A++++++++id:+u32,%0A++++++++name:+String,%0A++++++++phone:+u64,%0A++++%7D%0A++++%0A++++let+person1+=+Person+%7B%0A++++++++id:+5,%0A++++++++name:+%22Janet%22.to_string(),%0A++++++++phone:+555_666_7777,%0A++++%7D;%0A++++let+person2+=+Person+%7B%0A++++++++id:+5,%0A++++++++name:+%22Bob%22.to_string(),%0A++++++++phone:+555_666_7777,%0A++++%7D;%0A++++%0A++++assert!(calculate_hash(%26person1)+!=+calculate_hash(%26person2));%0A++++%0A++++fn+calculate_hash%3CT:+Hash%3E(t:+%26T)+-%3E+u64+%7B%0A++++++++let+mut+s+=+DefaultHasher::new();%0A++++++++t.hash(%26mut+s);%0A++++++++s.finish()%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If you need more control over how a value is hashed, you need to implement\nthe <a href=\"trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> trait:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::{DefaultHasher, Hash, Hasher};\n\n<span class=\"kw\">struct </span>Person {\n    id: u32,\n    name: String,\n    phone: u64,\n}\n\n<span class=\"kw\">impl </span>Hash <span class=\"kw\">for </span>Person {\n    <span class=\"kw\">fn </span>hash&lt;H: Hasher&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, state: <span class=\"kw-2\">&amp;mut </span>H) {\n        <span class=\"self\">self</span>.id.hash(state);\n        <span class=\"self\">self</span>.phone.hash(state);\n    }\n}\n\n<span class=\"kw\">let </span>person1 = Person {\n    id: <span class=\"number\">5</span>,\n    name: <span class=\"string\">\"Janet\"</span>.to_string(),\n    phone: <span class=\"number\">555_666_7777</span>,\n};\n<span class=\"kw\">let </span>person2 = Person {\n    id: <span class=\"number\">5</span>,\n    name: <span class=\"string\">\"Bob\"</span>.to_string(),\n    phone: <span class=\"number\">555_666_7777</span>,\n};\n\n<span class=\"macro\">assert_eq!</span>(calculate_hash(<span class=\"kw-2\">&amp;</span>person1), calculate_hash(<span class=\"kw-2\">&amp;</span>person2));\n\n<span class=\"kw\">fn </span>calculate_hash&lt;T: Hash&gt;(t: <span class=\"kw-2\">&amp;</span>T) -&gt; u64 {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = DefaultHasher::new();\n    t.hash(<span class=\"kw-2\">&amp;mut </span>s);\n    s.finish()\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BDefaultHasher,+Hash,+Hasher%7D;%0A++++%0A++++struct+Person+%7B%0A++++++++id:+u32,%0A++++%23%5Ballow(dead_code)%5D%0A++++++++name:+String,%0A++++++++phone:+u64,%0A++++%7D%0A++++%0A++++impl+Hash+for+Person+%7B%0A++++++++fn+hash%3CH:+Hasher%3E(%26self,+state:+%26mut+H)+%7B%0A++++++++++++self.id.hash(state);%0A++++++++++++self.phone.hash(state);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+person1+=+Person+%7B%0A++++++++id:+5,%0A++++++++name:+%22Janet%22.to_string(),%0A++++++++phone:+555_666_7777,%0A++++%7D;%0A++++let+person2+=+Person+%7B%0A++++++++id:+5,%0A++++++++name:+%22Bob%22.to_string(),%0A++++++++phone:+555_666_7777,%0A++++%7D;%0A++++%0A++++assert_eq!(calculate_hash(%26person1),+calculate_hash(%26person2));%0A++++%0A++++fn+calculate_hash%3CT:+Hash%3E(t:+%26T)+-%3E+u64+%7B%0A++++++++let+mut+s+=+DefaultHasher::new();%0A++++++++t.hash(%26mut+s);%0A++++++++s.finish()%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"structs\" class=\"section-header\">Structs<a href=\"#structs\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.BuildHasherDefault.html\" title=\"struct std::hash::BuildHasherDefault\">BuildHasherDefault</a></div><div class=\"desc docblock-short\">Used to create a default <a href=\"trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\"><code>BuildHasher</code></a> instance for types that implement\n<a href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a> and <a href=\"../default/trait.Default.html\" title=\"trait std::default::Default\"><code>Default</code></a>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.DefaultHasher.html\" title=\"struct std::hash::DefaultHasher\">DefaultHasher</a></div><div class=\"desc docblock-short\">The default <a href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a> used by <a href=\"../collections/hash_map/struct.RandomState.html\" title=\"struct std::collections::hash_map::RandomState\"><code>RandomState</code></a>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RandomState.html\" title=\"struct std::hash::RandomState\">RandomState</a></div><div class=\"desc docblock-short\"><code>RandomState</code> is the default state for <a href=\"../collections/hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\"><code>HashMap</code></a> types.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.SipHasher.html\" title=\"struct std::hash::SipHasher\">SipHasher</a><span class=\"stab deprecated\" title=\"\">Deprecated</span></div><div class=\"desc docblock-short\">An implementation of SipHash 2-4.</div></li></ul><h2 id=\"traits\" class=\"section-header\">Traits<a href=\"#traits\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a></div><div class=\"desc docblock-short\">A trait for creating instances of <a href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a></div><div class=\"desc docblock-short\">A hashable type.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a></div><div class=\"desc docblock-short\">A trait for hashing an arbitrary stream of bytes.</div></li></ul><h2 id=\"derives\" class=\"section-header\">Derive Macros<a href=\"#derives\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"derive\" href=\"derive.Hash.html\" title=\"derive std::hash::Hash\">Hash</a></div><div class=\"desc docblock-short\">Derive macro generating an impl of the trait <code>Hash</code>.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:10:58.475Z"
}