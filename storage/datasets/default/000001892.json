{
	"title": "transmute_copy in std::mem - Rust",
	"url": "https://doc.rust-lang.org/stable/std/mem/fn.transmute_copy.html",
	"markdown": "# transmute\\_copy in std::mem - Rust\n\n## Function [std](../index.html)::[mem](index.html)::[transmute\\_copy](#)\n\n1.0.0 (const: 1.74.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/mem/mod.rs.html#1007) ·\n\n```\npub const unsafe fn transmute_copy<Src, Dst>(src: &Src) -> Dst\n```\n\nExpand description\n\nInterprets `src` as having type `&Dst`, and then reads `src` without moving the contained value.\n\nThis function will unsafely assume the pointer `src` is valid for [`size_of::<Dst>`](fn.size_of.html \"fn std::mem::size_of\") bytes by transmuting `&Src` to `&Dst` and then reading the `&Dst` (except that this is done in a way that is correct even when `&Dst` has stricter alignment requirements than `&Src`). It will also unsafely create a copy of the contained value instead of moving out of `src`.\n\nIt is not a compile-time error if `Src` and `Dst` have different sizes, but it is highly encouraged to only invoke this function where `Src` and `Dst` have the same size. This function triggers [undefined behavior](../../reference/behavior-considered-undefined.html) if `Dst` is larger than `Src`.\n\n## [§](#examples)Examples\n\n```\nuse std::mem;\n\n#[repr(packed)]\nstruct Foo {\n    bar: u8,\n}\n\nlet foo_array = [10u8];\n\nunsafe {\n    // Copy the data from 'foo_array' and treat it as a 'Foo'\n    let mut foo_struct: Foo = mem::transmute_copy(&foo_array);\n    assert_eq!(foo_struct.bar, 10);\n\n    // Modify the copied data\n    foo_struct.bar = 20;\n    assert_eq!(foo_struct.bar, 20);\n}\n\n// The contents of 'foo_array' should not have changed\nassert_eq!(foo_array, [10]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++%23%5Brepr(packed)%5D%0A++++struct+Foo+%7B%0A++++++++bar:+u8,%0A++++%7D%0A++++%0A++++let+foo_array+=+%5B10u8%5D;%0A++++%0A++++unsafe+%7B%0A++++++++//+Copy+the+data+from+%27foo_array%27+and+treat+it+as+a+%27Foo%27%0A++++++++let+mut+foo_struct:+Foo+=+mem::transmute_copy(%26foo_array);%0A++++++++assert_eq!(foo_struct.bar,+10);%0A++++%0A++++++++//+Modify+the+copied+data%0A++++++++foo_struct.bar+=+20;%0A++++++++assert_eq!(foo_struct.bar,+20);%0A++++%7D%0A++++%0A++++//+The+contents+of+%27foo_array%27+should+not+have+changed%0A++++assert_eq!(foo_array,+%5B10%5D);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Interprets `src` as having type `&amp;Dst`, and then reads `src` without moving the contained value.\"><title>transmute_copy in std::mem - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::mem</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.offset_of.html\">offset_of</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Assume.html\">Assume</a></li><li><a href=\"struct.Discriminant.html\">Discriminant</a></li><li><a href=\"struct.ManuallyDrop.html\">ManuallyDrop</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BikeshedIntrinsicFrom.html\">BikeshedIntrinsicFrom</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.align_of.html\">align_of</a></li><li><a href=\"fn.align_of_val.html\">align_of_val</a></li><li><a href=\"fn.align_of_val_raw.html\">align_of_val_raw</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.discriminant.html\">discriminant</a></li><li><a href=\"fn.drop.html\">drop</a></li><li><a href=\"fn.forget.html\">forget</a></li><li><a href=\"fn.forget_unsized.html\">forget_unsized</a></li><li><a href=\"fn.min_align_of.html\">min_align_of</a></li><li><a href=\"fn.min_align_of_val.html\">min_align_of_val</a></li><li><a href=\"fn.needs_drop.html\">needs_drop</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.size_of.html\">size_of</a></li><li><a href=\"fn.size_of_val.html\">size_of_val</a></li><li><a href=\"fn.size_of_val_raw.html\">size_of_val_raw</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.take.html\">take</a></li><li><a href=\"fn.transmute.html\">transmute</a></li><li><a href=\"fn.transmute_copy.html\">transmute_copy</a></li><li><a href=\"fn.uninitialized.html\">uninitialized</a></li><li><a href=\"fn.variant_count.html\">variant_count</a></li><li><a href=\"fn.zeroed.html\">zeroed</a></li></ul><h3><a href=\"index.html#unions\">Unions</a></h3><ul class=\"block union\"><li><a href=\"union.MaybeUninit.html\">MaybeUninit</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">mem</a>::<wbr><a class=\"fn\" href=\"#\">transmute_copy</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.74.0\">1.0.0 (const: 1.74.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/mem/mod.rs.html#1007\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub const unsafe fn transmute_copy&lt;Src, Dst&gt;(src: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Src</a>) -&gt; Dst</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Interprets <code>src</code> as having type <code>&amp;Dst</code>, and then reads <code>src</code> without moving\nthe contained value.</p>\n<p>This function will unsafely assume the pointer <code>src</code> is valid for <a href=\"fn.size_of.html\" title=\"fn std::mem::size_of\"><code>size_of::&lt;Dst&gt;</code></a>\nbytes by transmuting <code>&amp;Src</code> to <code>&amp;Dst</code> and then reading the <code>&amp;Dst</code> (except that this is done\nin a way that is correct even when <code>&amp;Dst</code> has stricter alignment requirements than <code>&amp;Src</code>).\nIt will also unsafely create a copy of the contained value instead of moving out of <code>src</code>.</p>\n<p>It is not a compile-time error if <code>Src</code> and <code>Dst</code> have different sizes, but it\nis highly encouraged to only invoke this function where <code>Src</code> and <code>Dst</code> have the\nsame size. This function triggers <a href=\"../../reference/behavior-considered-undefined.html\">undefined behavior</a> if <code>Dst</code> is larger than\n<code>Src</code>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"attr\">#[repr(packed)]\n</span><span class=\"kw\">struct </span>Foo {\n    bar: u8,\n}\n\n<span class=\"kw\">let </span>foo_array = [<span class=\"number\">10u8</span>];\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Copy the data from 'foo_array' and treat it as a 'Foo'\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>foo_struct: Foo = mem::transmute_copy(<span class=\"kw-2\">&amp;</span>foo_array);\n    <span class=\"macro\">assert_eq!</span>(foo_struct.bar, <span class=\"number\">10</span>);\n\n    <span class=\"comment\">// Modify the copied data\n    </span>foo_struct.bar = <span class=\"number\">20</span>;\n    <span class=\"macro\">assert_eq!</span>(foo_struct.bar, <span class=\"number\">20</span>);\n}\n\n<span class=\"comment\">// The contents of 'foo_array' should not have changed\n</span><span class=\"macro\">assert_eq!</span>(foo_array, [<span class=\"number\">10</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++%23%5Brepr(packed)%5D%0A++++struct+Foo+%7B%0A++++++++bar:+u8,%0A++++%7D%0A++++%0A++++let+foo_array+=+%5B10u8%5D;%0A++++%0A++++unsafe+%7B%0A++++++++//+Copy+the+data+from+'foo_array'+and+treat+it+as+a+'Foo'%0A++++++++let+mut+foo_struct:+Foo+=+mem::transmute_copy(%26foo_array);%0A++++++++assert_eq!(foo_struct.bar,+10);%0A++++%0A++++++++//+Modify+the+copied+data%0A++++++++foo_struct.bar+=+20;%0A++++++++assert_eq!(foo_struct.bar,+20);%0A++++%7D%0A++++%0A++++//+The+contents+of+'foo_array'+should+not+have+changed%0A++++assert_eq!(foo_array,+%5B10%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:04.409Z"
}