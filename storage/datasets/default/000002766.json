{
	"title": "LocalWake in std::task - Rust",
	"url": "https://doc.rust-lang.org/stable/std/task/trait.LocalWake.html",
	"markdown": "# LocalWake in std::task - Rust\n\n```\npub trait LocalWake {\n    // Required method\n    fn wake(self: Rc<Self>);\n\n    // Provided method\n    fn wake_by_ref(self: &Rc<Self>) { ... }\n}\n```\n\nðŸ”¬This is a nightly-only experimental API. (`local_waker`Â [#118959](https://github.com/rust-lang/rust/issues/118959))\n\nExpand description\n\nAn analogous trait to `Wake` but used to construct a `LocalWaker`. This API works in exactly the same way as `Wake`, except that it uses an `Rc` instead of an `Arc`, and the result is a `LocalWaker` instead of a `Waker`.\n\nThe benefits of using `LocalWaker` over `Waker` are that it allows the local waker to hold data that does not implement `Send` and `Sync`. Additionally, it saves calls to `Arc::clone`, which requires atomic synchronization.\n\n## [Â§](#examples)Examples\n\nThis is a simplified example of a `spawn` and a `block_on` function. The `spawn` function is used to push new tasks onto the run queue, while the block on function will remove them and poll them. When a task is woken, it will put itself back on the run queue to be polled by the executor.\n\n**Note:** This example trades correctness for simplicity. A real world example would interleave poll calls with calls to an io reactor to wait for events instead of spinning on a loop.\n\n```\n#![feature(local_waker)]\n#![feature(noop_waker)]\nuse std::task::{LocalWake, ContextBuilder, LocalWaker, Waker};\nuse std::future::Future;\nuse std::pin::Pin;\nuse std::rc::Rc;\nuse std::cell::RefCell;\nuse std::collections::VecDeque;\n\n\nthread_local! {\n    // A queue containing all tasks ready to do progress\n    static RUN_QUEUE: RefCell<VecDeque<Rc<Task>>> = RefCell::default();\n}\n\ntype BoxedFuture = Pin<Box<dyn Future<Output = ()>>>;\n\nstruct Task(RefCell<BoxedFuture>);\n\nimpl LocalWake for Task {\n    fn wake(self: Rc<Self>) {\n        RUN_QUEUE.with_borrow_mut(|queue| {\n            queue.push_back(self)\n        })\n    }\n}\n\nfn spawn<F>(future: F)\nwhere\n    F: Future<Output=()> + 'static + Send + Sync\n{\n    let task = RefCell::new(Box::pin(future));\n    RUN_QUEUE.with_borrow_mut(|queue| {\n        queue.push_back(Rc::new(Task(task)));\n    });\n}\n\nfn block_on<F>(future: F)\nwhere\n    F: Future<Output=()> + 'static + Sync + Send\n{\n    spawn(future);\n    loop {\n        let Some(task) = RUN_QUEUE.with_borrow_mut(|queue| queue.pop_front()) else {\n            // we exit, since there are no more tasks remaining on the queue\n            return;\n        };\n\n        // cast the Rc<Task> into a `LocalWaker`\n        let local_waker: LocalWaker = task.clone().into();\n        // Build the context using `ContextBuilder`\n        let mut cx = ContextBuilder::from_waker(Waker::noop())\n            .local_waker(&local_waker)\n            .build();\n\n        // Poll the task\n        let _ = task.0\n            .borrow_mut()\n            .as_mut()\n            .poll(&mut cx);\n    }\n}\n\nblock_on(async {\n    println!(\"hello world\");\n});\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(local_waker)%5D%0A%23!%5Bfeature(noop_waker)%5D%0Afn+main()+%7B%0A++++use+std::task::%7BLocalWake,+ContextBuilder,+LocalWaker,+Waker%7D;%0A++++use+std::future::Future;%0A++++use+std::pin::Pin;%0A++++use+std::rc::Rc;%0A++++use+std::cell::RefCell;%0A++++use+std::collections::VecDeque;%0A++++%0A++++%0A++++thread_local!+%7B%0A++++++++//+A+queue+containing+all+tasks+ready+to+do+progress%0A++++++++static+RUN_QUEUE:+RefCell%3CVecDeque%3CRc%3CTask%3E%3E%3E+=+RefCell::default();%0A++++%7D%0A++++%0A++++type+BoxedFuture+=+Pin%3CBox%3Cdyn+Future%3COutput+=+()%3E%3E%3E;%0A++++%0A++++struct+Task(RefCell%3CBoxedFuture%3E);%0A++++%0A++++impl+LocalWake+for+Task+%7B%0A++++++++fn+wake(self:+Rc%3CSelf%3E)+%7B%0A++++++++++++RUN_QUEUE.with_borrow_mut(%7Cqueue%7C+%7B%0A++++++++++++++++queue.push_back(self)%0A++++++++++++%7D)%0A++++++++%7D%0A++++%7D%0A++++%0A++++fn+spawn%3CF%3E(future:+F)%0A++++where%0A++++++++F:+Future%3COutput=()%3E+%2B+%27static+%2B+Send+%2B+Sync%0A++++%7B%0A++++++++let+task+=+RefCell::new(Box::pin(future));%0A++++++++RUN_QUEUE.with_borrow_mut(%7Cqueue%7C+%7B%0A++++++++++++queue.push_back(Rc::new(Task(task)));%0A++++++++%7D);%0A++++%7D%0A++++%0A++++fn+block_on%3CF%3E(future:+F)%0A++++where%0A++++++++F:+Future%3COutput=()%3E+%2B+%27static+%2B+Sync+%2B+Send%0A++++%7B%0A++++++++spawn(future);%0A++++++++loop+%7B%0A++++++++++++let+Some(task)+=+RUN_QUEUE.with_borrow_mut(%7Cqueue%7C+queue.pop_front())+else+%7B%0A++++++++++++++++//+we+exit,+since+there+are+no+more+tasks+remaining+on+the+queue%0A++++++++++++++++return;%0A++++++++++++%7D;%0A++++%0A++++++++++++//+cast+the+Rc%3CTask%3E+into+a+%60LocalWaker%60%0A++++++++++++let+local_waker:+LocalWaker+=+task.clone().into();%0A++++++++++++//+Build+the+context+using+%60ContextBuilder%60%0A++++++++++++let+mut+cx+=+ContextBuilder::from_waker(Waker::noop())%0A++++++++++++++++.local_waker(%26local_waker)%0A++++++++++++++++.build();%0A++++%0A++++++++++++//+Poll+the+task%0A++++++++++++let+_+=+task.0%0A++++++++++++++++.borrow_mut()%0A++++++++++++++++.as_mut()%0A++++++++++++++++.poll(%26mut+cx);%0A++++++++%7D%0A++++%7D%0A++++%0A++++block_on(async+%7B%0A++++++++println!(%22hello+world%22);%0A++++%7D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#271)\n\nðŸ”¬This is a nightly-only experimental API. (`local_waker`Â [#118959](https://github.com/rust-lang/rust/issues/118959))\n\nWake this task.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#281)\n\nðŸ”¬This is a nightly-only experimental API. (`local_waker`Â [#118959](https://github.com/rust-lang/rust/issues/118959))\n\nWake this task without consuming the local waker.\n\nIf an executor supports a cheaper way to wake without consuming the waker, it should override this method. By default, it clones the [`Rc`](../rc/struct.Rc.html \"struct std::rc::Rc\") and calls [`wake`](about:blank/struct.LocalWaker.html#method.wake \"method std::task::LocalWaker::wake\") on the clone.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An analogous trait to `Wake` but used to construct a `LocalWaker`. This API works in exactly the same way as `Wake`, except that it uses an `Rc` instead of an `Arc`, and the result is a `LocalWaker` instead of a `Waker`.\"><title>LocalWake in std::task - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">LocalWake</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">LocalWake</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.wake\">wake</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.wake_by_ref\">wake_by_ref</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::task</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.ready.html\">ready</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Context.html\">Context</a></li><li><a href=\"struct.ContextBuilder.html\">ContextBuilder</a></li><li><a href=\"struct.LocalWaker.html\">LocalWaker</a></li><li><a href=\"struct.RawWaker.html\">RawWaker</a></li><li><a href=\"struct.RawWakerVTable.html\">RawWakerVTable</a></li><li><a href=\"struct.Waker.html\">Waker</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Poll.html\">Poll</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.LocalWake.html\">LocalWake</a></li><li><a href=\"trait.Wake.html\">Wake</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">task</a>::<wbr><a class=\"trait\" href=\"#\">LocalWake</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#268\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait LocalWake {\n    // Required method\n    fn <a href=\"#tymethod.wake\" class=\"fn\">wake</a>(self: <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;Self&gt;);\n\n    // Provided method\n    fn <a href=\"#method.wake_by_ref\" class=\"fn\">wake_by_ref</a>(self: &amp;<a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;Self&gt;) { ... }\n}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>local_waker</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/118959\">#118959</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An analogous trait to <code>Wake</code> but used to construct a <code>LocalWaker</code>. This API\nworks in exactly the same way as <code>Wake</code>, except that it uses an <code>Rc</code> instead\nof an <code>Arc</code>, and the result is a <code>LocalWaker</code> instead of a <code>Waker</code>.</p>\n<p>The benefits of using <code>LocalWaker</code> over <code>Waker</code> are that it allows the local waker\nto hold data that does not implement <code>Send</code> and <code>Sync</code>. Additionally, it saves calls\nto <code>Arc::clone</code>, which requires atomic synchronization.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<p>This is a simplified example of a <code>spawn</code> and a <code>block_on</code> function. The <code>spawn</code> function\nis used to push new tasks onto the run queue, while the block on function will remove them\nand poll them. When a task is woken, it will put itself back on the run queue to be polled\nby the executor.</p>\n<p><strong>Note:</strong> This example trades correctness for simplicity. A real world example would interleave\npoll calls with calls to an io reactor to wait for events instead of spinning on a loop.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(local_waker)]\n#![feature(noop_waker)]\n</span><span class=\"kw\">use </span>std::task::{LocalWake, ContextBuilder, LocalWaker, Waker};\n<span class=\"kw\">use </span>std::future::Future;\n<span class=\"kw\">use </span>std::pin::Pin;\n<span class=\"kw\">use </span>std::rc::Rc;\n<span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">use </span>std::collections::VecDeque;\n\n\n<span class=\"macro\">thread_local!</span> {\n    <span class=\"comment\">// A queue containing all tasks ready to do progress\n    </span><span class=\"kw\">static </span>RUN_QUEUE: RefCell&lt;VecDeque&lt;Rc&lt;Task&gt;&gt;&gt; = RefCell::default();\n}\n\n<span class=\"kw\">type </span>BoxedFuture = Pin&lt;Box&lt;<span class=\"kw\">dyn </span>Future&lt;Output = ()&gt;&gt;&gt;;\n\n<span class=\"kw\">struct </span>Task(RefCell&lt;BoxedFuture&gt;);\n\n<span class=\"kw\">impl </span>LocalWake <span class=\"kw\">for </span>Task {\n    <span class=\"kw\">fn </span>wake(<span class=\"self\">self</span>: Rc&lt;<span class=\"self\">Self</span>&gt;) {\n        RUN_QUEUE.with_borrow_mut(|queue| {\n            queue.push_back(<span class=\"self\">self</span>)\n        })\n    }\n}\n\n<span class=\"kw\">fn </span>spawn&lt;F&gt;(future: F)\n<span class=\"kw\">where\n    </span>F: Future&lt;Output=()&gt; + <span class=\"lifetime\">'static </span>+ Send + Sync\n{\n    <span class=\"kw\">let </span>task = RefCell::new(Box::pin(future));\n    RUN_QUEUE.with_borrow_mut(|queue| {\n        queue.push_back(Rc::new(Task(task)));\n    });\n}\n\n<span class=\"kw\">fn </span>block_on&lt;F&gt;(future: F)\n<span class=\"kw\">where\n    </span>F: Future&lt;Output=()&gt; + <span class=\"lifetime\">'static </span>+ Sync + Send\n{\n    spawn(future);\n    <span class=\"kw\">loop </span>{\n        <span class=\"kw\">let </span><span class=\"prelude-val\">Some</span>(task) = RUN_QUEUE.with_borrow_mut(|queue| queue.pop_front()) <span class=\"kw\">else </span>{\n            <span class=\"comment\">// we exit, since there are no more tasks remaining on the queue\n            </span><span class=\"kw\">return</span>;\n        };\n\n        <span class=\"comment\">// cast the Rc&lt;Task&gt; into a `LocalWaker`\n        </span><span class=\"kw\">let </span>local_waker: LocalWaker = task.clone().into();\n        <span class=\"comment\">// Build the context using `ContextBuilder`\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cx = ContextBuilder::from_waker(Waker::noop())\n            .local_waker(<span class=\"kw-2\">&amp;</span>local_waker)\n            .build();\n\n        <span class=\"comment\">// Poll the task\n        </span><span class=\"kw\">let _ </span>= task.<span class=\"number\">0\n            </span>.borrow_mut()\n            .as_mut()\n            .poll(<span class=\"kw-2\">&amp;mut </span>cx);\n    }\n}\n\nblock_on(<span class=\"kw\">async </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"hello world\"</span>);\n});</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(local_waker)%5D%0A%23!%5Bfeature(noop_waker)%5D%0Afn+main()+%7B%0A++++use+std::task::%7BLocalWake,+ContextBuilder,+LocalWaker,+Waker%7D;%0A++++use+std::future::Future;%0A++++use+std::pin::Pin;%0A++++use+std::rc::Rc;%0A++++use+std::cell::RefCell;%0A++++use+std::collections::VecDeque;%0A++++%0A++++%0A++++thread_local!+%7B%0A++++++++//+A+queue+containing+all+tasks+ready+to+do+progress%0A++++++++static+RUN_QUEUE:+RefCell%3CVecDeque%3CRc%3CTask%3E%3E%3E+=+RefCell::default();%0A++++%7D%0A++++%0A++++type+BoxedFuture+=+Pin%3CBox%3Cdyn+Future%3COutput+=+()%3E%3E%3E;%0A++++%0A++++struct+Task(RefCell%3CBoxedFuture%3E);%0A++++%0A++++impl+LocalWake+for+Task+%7B%0A++++++++fn+wake(self:+Rc%3CSelf%3E)+%7B%0A++++++++++++RUN_QUEUE.with_borrow_mut(%7Cqueue%7C+%7B%0A++++++++++++++++queue.push_back(self)%0A++++++++++++%7D)%0A++++++++%7D%0A++++%7D%0A++++%0A++++fn+spawn%3CF%3E(future:+F)%0A++++where%0A++++++++F:+Future%3COutput=()%3E+%2B+'static+%2B+Send+%2B+Sync%0A++++%7B%0A++++++++let+task+=+RefCell::new(Box::pin(future));%0A++++++++RUN_QUEUE.with_borrow_mut(%7Cqueue%7C+%7B%0A++++++++++++queue.push_back(Rc::new(Task(task)));%0A++++++++%7D);%0A++++%7D%0A++++%0A++++fn+block_on%3CF%3E(future:+F)%0A++++where%0A++++++++F:+Future%3COutput=()%3E+%2B+'static+%2B+Sync+%2B+Send%0A++++%7B%0A++++++++spawn(future);%0A++++++++loop+%7B%0A++++++++++++let+Some(task)+=+RUN_QUEUE.with_borrow_mut(%7Cqueue%7C+queue.pop_front())+else+%7B%0A++++++++++++++++//+we+exit,+since+there+are+no+more+tasks+remaining+on+the+queue%0A++++++++++++++++return;%0A++++++++++++%7D;%0A++++%0A++++++++++++//+cast+the+Rc%3CTask%3E+into+a+%60LocalWaker%60%0A++++++++++++let+local_waker:+LocalWaker+=+task.clone().into();%0A++++++++++++//+Build+the+context+using+%60ContextBuilder%60%0A++++++++++++let+mut+cx+=+ContextBuilder::from_waker(Waker::noop())%0A++++++++++++++++.local_waker(%26local_waker)%0A++++++++++++++++.build();%0A++++%0A++++++++++++//+Poll+the+task%0A++++++++++++let+_+=+task.0%0A++++++++++++++++.borrow_mut()%0A++++++++++++++++.as_mut()%0A++++++++++++++++.poll(%26mut+cx);%0A++++++++%7D%0A++++%7D%0A++++%0A++++block_on(async+%7B%0A++++++++println!(%22hello+world%22);%0A++++%7D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.wake\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#271\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.wake\" class=\"fn\">wake</a>(self: <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;Self&gt;)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>local_waker</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/118959\">#118959</a>)</span></div></span></summary><div class=\"docblock\"><p>Wake this task.</p>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wake_by_ref\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#281\">source</a><h4 class=\"code-header\">fn <a href=\"#method.wake_by_ref\" class=\"fn\">wake_by_ref</a>(self: &amp;<a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;Self&gt;)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>local_waker</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/118959\">#118959</a>)</span></div></span></summary><div class=\"docblock\"><p>Wake this task without consuming the local waker.</p>\n<p>If an executor supports a cheaper way to wake without consuming the\nwaker, it should override this method. By default, it clones the\n<a href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\"><code>Rc</code></a> and calls <a href=\"struct.LocalWaker.html#method.wake\" title=\"method std::task::LocalWaker::wake\"><code>wake</code></a> on the clone.</p>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">Â§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"></div><script src=\"../../trait.impl/alloc/task/trait.LocalWake.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:25:48.156Z"
}