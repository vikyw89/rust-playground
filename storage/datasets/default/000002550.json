{
	"title": "size_of_val_raw in std::mem - Rust",
	"url": "https://doc.rust-lang.org/stable/std/mem/fn.size_of_val_raw.html",
	"markdown": "# size\\_of\\_val\\_raw in std::mem - Rust\n\n```\npub const unsafe fn size_of_val_raw<T>(val: *const T) -> usizewhere\n    T: ?Sized,\n```\n\nðŸ”¬This is a nightly-only experimental API. (`layout_for_ptr`Â [#69835](https://github.com/rust-lang/rust/issues/69835))\n\nExpand description\n\nReturns the size of the pointed-to value in bytes.\n\nThis is usually the same as [`size_of::<T>()`](fn.size_of.html \"fn std::mem::size_of\"). However, when `T` _has_ no statically-known size, e.g., a slice [`[T]`](../primitive.slice.html \"primitive slice\") or a [trait object](../../book/ch17-02-trait-objects.html), then `size_of_val_raw` can be used to get the dynamically-known size.\n\n## [Â§](#safety)Safety\n\nThis function is only safe to call if the following conditions hold:\n\n-   If `T` is `Sized`, this function is always safe to call.\n-   If the unsized tail of `T` is:\n    -   a [slice](../primitive.slice.html \"primitive slice\"), then the length of the slice tail must be an initialized integer, and the size of the _entire value_ (dynamic tail length + statically sized prefix) must fit in `isize`.\n    -   a [trait object](../../book/ch17-02-trait-objects.html), then the vtable part of the pointer must point to a valid vtable acquired by an unsizing coercion, and the size of the _entire value_ (dynamic tail length + statically sized prefix) must fit in `isize`.\n    -   an (unstable) [extern type](../../unstable-book/language-features/extern-types.html), then this function is always safe to call, but may panic or otherwise return the wrong value, as the extern typeâ€™s layout is not known. This is the same behavior as [`size_of_val`](fn.size_of_val.html \"fn std::mem::size_of_val\") on a reference to a type with an extern type tail.\n    -   otherwise, it is conservatively not allowed to call this function.\n\n## [Â§](#examples)Examples\n\n```\n#![feature(layout_for_ptr)]\nuse std::mem;\n\nassert_eq!(4, mem::size_of_val(&5i32));\n\nlet x: [u8; 13] = [0; 13];\nlet y: &[u8] = &x;\nassert_eq!(13, unsafe { mem::size_of_val_raw(y) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(layout_for_ptr)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++assert_eq!(4,+mem::size_of_val(%265i32));%0A++++%0A++++let+x:+%5Bu8;+13%5D+=+%5B0;+13%5D;%0A++++let+y:+%26%5Bu8%5D+=+%26x;%0A++++assert_eq!(13,+unsafe+%7B+mem::size_of_val_raw(y)+%7D);%0A%7D&version=nightly&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Returns the size of the pointed-to value in bytes.\"><title>size_of_val_raw in std::mem - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::mem</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.offset_of.html\">offset_of</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Assume.html\">Assume</a></li><li><a href=\"struct.Discriminant.html\">Discriminant</a></li><li><a href=\"struct.ManuallyDrop.html\">ManuallyDrop</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BikeshedIntrinsicFrom.html\">BikeshedIntrinsicFrom</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.align_of.html\">align_of</a></li><li><a href=\"fn.align_of_val.html\">align_of_val</a></li><li><a href=\"fn.align_of_val_raw.html\">align_of_val_raw</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.discriminant.html\">discriminant</a></li><li><a href=\"fn.drop.html\">drop</a></li><li><a href=\"fn.forget.html\">forget</a></li><li><a href=\"fn.forget_unsized.html\">forget_unsized</a></li><li><a href=\"fn.min_align_of.html\">min_align_of</a></li><li><a href=\"fn.min_align_of_val.html\">min_align_of_val</a></li><li><a href=\"fn.needs_drop.html\">needs_drop</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.size_of.html\">size_of</a></li><li><a href=\"fn.size_of_val.html\">size_of_val</a></li><li><a href=\"fn.size_of_val_raw.html\">size_of_val_raw</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.take.html\">take</a></li><li><a href=\"fn.transmute.html\">transmute</a></li><li><a href=\"fn.transmute_copy.html\">transmute_copy</a></li><li><a href=\"fn.uninitialized.html\">uninitialized</a></li><li><a href=\"fn.variant_count.html\">variant_count</a></li><li><a href=\"fn.zeroed.html\">zeroed</a></li></ul><h3><a href=\"index.html#unions\">Unions</a></h3><ul class=\"block union\"><li><a href=\"union.MaybeUninit.html\">MaybeUninit</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">mem</a>::<wbr><a class=\"fn\" href=\"#\">size_of_val_raw</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/mem/mod.rs.html#392\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub const unsafe fn size_of_val_raw&lt;T&gt;(val: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>layout_for_ptr</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69835\">#69835</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Returns the size of the pointed-to value in bytes.</p>\n<p>This is usually the same as <a href=\"fn.size_of.html\" title=\"fn std::mem::size_of\"><code>size_of::&lt;T&gt;()</code></a>. However, when <code>T</code> <em>has</em> no\nstatically-known size, e.g., a slice <a href=\"../primitive.slice.html\" title=\"primitive slice\"><code>[T]</code></a> or a <a href=\"../../book/ch17-02-trait-objects.html\">trait object</a>,\nthen <code>size_of_val_raw</code> can be used to get the dynamically-known size.</p>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">Â§</a>Safety</h2>\n<p>This function is only safe to call if the following conditions hold:</p>\n<ul>\n<li>If <code>T</code> is <code>Sized</code>, this function is always safe to call.</li>\n<li>If the unsized tail of <code>T</code> is:\n<ul>\n<li>a <a href=\"../primitive.slice.html\" title=\"primitive slice\">slice</a>, then the length of the slice tail must be an initialized\ninteger, and the size of the <em>entire value</em>\n(dynamic tail length + statically sized prefix) must fit in <code>isize</code>.</li>\n<li>a <a href=\"../../book/ch17-02-trait-objects.html\">trait object</a>, then the vtable part of the pointer must point\nto a valid vtable acquired by an unsizing coercion, and the size\nof the <em>entire value</em> (dynamic tail length + statically sized prefix)\nmust fit in <code>isize</code>.</li>\n<li>an (unstable) <a href=\"../../unstable-book/language-features/extern-types.html\">extern type</a>, then this function is always safe to\ncall, but may panic or otherwise return the wrong value, as the\nextern typeâ€™s layout is not known. This is the same behavior as\n<a href=\"fn.size_of_val.html\" title=\"fn std::mem::size_of_val\"><code>size_of_val</code></a> on a reference to a type with an extern type tail.</li>\n<li>otherwise, it is conservatively not allowed to call this function.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(layout_for_ptr)]\n</span><span class=\"kw\">use </span>std::mem;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">4</span>, mem::size_of_val(<span class=\"kw-2\">&amp;</span><span class=\"number\">5i32</span>));\n\n<span class=\"kw\">let </span>x: [u8; <span class=\"number\">13</span>] = [<span class=\"number\">0</span>; <span class=\"number\">13</span>];\n<span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>x;\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">13</span>, <span class=\"kw\">unsafe </span>{ mem::size_of_val_raw(y) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(layout_for_ptr)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++assert_eq!(4,+mem::size_of_val(%265i32));%0A++++%0A++++let+x:+%5Bu8;+13%5D+=+%5B0;+13%5D;%0A++++let+y:+%26%5Bu8%5D+=+%26x;%0A++++assert_eq!(13,+unsafe+%7B+mem::size_of_val_raw(y)+%7D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:57.903Z"
}