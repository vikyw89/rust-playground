{
	"title": "CursorMut in std::collections::linked_list - Rust",
	"url": "https://doc.rust-lang.org/stable/std/collections/linked_list/struct.CursorMut.html",
	"markdown": "# CursorMut in std::collections::linked\\_list - Rust\n\n```\npub struct CursorMut<'a, T, A = Global>where\n    T: 'a,\n    A: Allocator,{ /* private fields */ }\n```\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nExpand description\n\nA cursor over a `LinkedList` with editing operations.\n\nA `Cursor` is like an iterator, except that it can freely seek back-and-forth, and can safely mutate the list during iteration. This is because the lifetime of its yielded references is tied to its own lifetime, instead of just the underlying list. This means cursors cannot yield multiple elements at once.\n\nCursors always rest between two elements in the list, and index in a logically circular way. To accommodate this, there is a “ghost” non-element that yields `None` between the head and tail of the list.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1500)[§](#impl-CursorMut%3C'a,+T,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1507)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nReturns the cursor position index within the `LinkedList`.\n\nThis returns `None` if the cursor is currently pointing to the “ghost” non-element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1518)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nMoves the cursor to the next element of the `LinkedList`.\n\nIf the cursor is pointing to the “ghost” non-element then this will move it to the first element of the `LinkedList`. If it is pointing to the last element of the `LinkedList` then this will move it to the “ghost” non-element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1540)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nMoves the cursor to the previous element of the `LinkedList`.\n\nIf the cursor is pointing to the “ghost” non-element then this will move it to the last element of the `LinkedList`. If it is pointing to the first element of the `LinkedList` then this will move it to the “ghost” non-element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1562)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nReturns a reference to the element that the cursor is currently pointing to.\n\nThis returns `None` if the cursor is currently pointing to the “ghost” non-element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1572)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nReturns a reference to the next element.\n\nIf the cursor is pointing to the “ghost” non-element then this returns the first element of the `LinkedList`. If it is pointing to the last element of the `LinkedList` then this returns `None`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1588)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nReturns a reference to the previous element.\n\nIf the cursor is pointing to the “ghost” non-element then this returns the last element of the `LinkedList`. If it is pointing to the first element of the `LinkedList` then this returns `None`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1605)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nReturns a read-only cursor pointing to the current element.\n\nThe lifetime of the returned `Cursor` is bound to that of the `CursorMut`, which means it cannot outlive the `CursorMut` and that the `CursorMut` is frozen for the lifetime of the `Cursor`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1612)[§](#impl-CursorMut%3C'a,+T%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1618)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nInserts the elements from the given `LinkedList` after the current one.\n\nIf the cursor is pointing at the “ghost” non-element then the new elements are inserted at the start of the `LinkedList`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1641)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nInserts the elements from the given `LinkedList` before the current one.\n\nIf the cursor is pointing at the “ghost” non-element then the new elements are inserted at the end of the `LinkedList`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1657)[§](#impl-CursorMut%3C'a,+T,+A%3E-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1663)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nInserts a new element into the `LinkedList` after the current one.\n\nIf the cursor is pointing at the “ghost” non-element then the new element is inserted at the front of the `LinkedList`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1683)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nInserts a new element into the `LinkedList` before the current one.\n\nIf the cursor is pointing at the “ghost” non-element then the new element is inserted at the end of the `LinkedList`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1703)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nRemoves the current element from the `LinkedList`.\n\nThe element that was removed is returned, and the cursor is moved to point to the next element in the `LinkedList`.\n\nIf the cursor is currently pointing to the “ghost” non-element then no element is removed and `None` is returned.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1721-1723)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nRemoves the current element from the `LinkedList` without deallocating the list node.\n\nThe node that was removed is returned as a new `LinkedList` containing only this node. The cursor is moved to point to the next element in the current `LinkedList`.\n\nIf the cursor is currently pointing to the “ghost” non-element then no element is removed and `None` is returned.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1749-1751)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nSplits the list into two after the current element. This will return a new list consisting of everything after the cursor, with the original list retaining everything before.\n\nIf the cursor is pointing at the “ghost” non-element then the entire contents of the `LinkedList` are moved.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1768-1770)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nSplits the list into two before the current element. This will return a new list consisting of everything before the cursor, with the original list retaining everything after.\n\nIf the cursor is pointing at the “ghost” non-element then the entire contents of the `LinkedList` are moved.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1784)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nAppends an element to the front of the cursor’s parent list. The node that the cursor points to is unchanged, even if it is the “ghost” node.\n\nThis operation should compute in _O_(1) time.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1798)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nAppends an element to the back of the cursor’s parent list. The node that the cursor points to is unchanged, even if it is the “ghost” node.\n\nThis operation should compute in _O_(1) time.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1817)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nRemoves the first element from the cursor’s parent list and returns it, or None if the list is empty. The element the cursor points to remains unchanged, unless it was pointing to the front element. In that case, it points to the new front element.\n\nThis operation should compute in _O_(1) time.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1845)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nRemoves the last element from the cursor’s parent list and returns it, or None if the list is empty. The element the cursor points to remains unchanged, unless it was pointing to the back element. In that case, it points to the “ghost” element.\n\nThis operation should compute in _O_(1) time.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1866)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nProvides a reference to the front element of the cursor’s parent list, or None if the list is empty.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1874)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nProvides a mutable reference to the front element of the cursor’s parent list, or None if the list is empty.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1883)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nProvides a reference to the back element of the cursor’s parent list, or None if the list is empty.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1910)\n\n🔬This is a nightly-only experimental API. (`linked_list_cursors` [#58533](https://github.com/rust-lang/rust/issues/58533))\n\nProvides a mutable reference to back element of the cursor’s parent list, or `None` if the list is empty.\n\n##### [§](#examples)Examples\n\nBuilding and mutating a list with a cursor, then getting the back element:\n\n```\n#![feature(linked_list_cursors)]\nuse std::collections::LinkedList;\nlet mut dl = LinkedList::new();\ndl.push_front(3);\ndl.push_front(2);\ndl.push_front(1);\nlet mut cursor = dl.cursor_front_mut();\n*cursor.current().unwrap() = 99;\n*cursor.back_mut().unwrap() = 0;\nlet mut contents = dl.into_iter();\nassert_eq!(contents.next(), Some(99));\nassert_eq!(contents.next(), Some(2));\nassert_eq!(contents.next(), Some(0));\nassert_eq!(contents.next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(linked_list_cursors)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++let+mut+dl+=+LinkedList::new();%0A++++dl.push_front(3);%0A++++dl.push_front(2);%0A++++dl.push_front(1);%0A++++let+mut+cursor+=+dl.cursor_front_mut();%0A++++*cursor.current().unwrap()+=+99;%0A++++*cursor.back_mut().unwrap()+=+0;%0A++++let+mut+contents+=+dl.into_iter();%0A++++assert_eq!(contents.next(),+Some(99));%0A++++assert_eq!(contents.next(),+Some(2));%0A++++assert_eq!(contents.next(),+Some(0));%0A++++assert_eq!(contents.next(),+None);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A cursor over a `LinkedList` with editing operations.\"><title>CursorMut in std::collections::linked_list - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">CursorMut</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">CursorMut</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_cursor\">as_cursor</a></li><li><a href=\"#method.back\">back</a></li><li><a href=\"#method.back_mut\">back_mut</a></li><li><a href=\"#method.current\">current</a></li><li><a href=\"#method.front\">front</a></li><li><a href=\"#method.front_mut\">front_mut</a></li><li><a href=\"#method.index\">index</a></li><li><a href=\"#method.insert_after\">insert_after</a></li><li><a href=\"#method.insert_before\">insert_before</a></li><li><a href=\"#method.move_next\">move_next</a></li><li><a href=\"#method.move_prev\">move_prev</a></li><li><a href=\"#method.peek_next\">peek_next</a></li><li><a href=\"#method.peek_prev\">peek_prev</a></li><li><a href=\"#method.pop_back\">pop_back</a></li><li><a href=\"#method.pop_front\">pop_front</a></li><li><a href=\"#method.push_back\">push_back</a></li><li><a href=\"#method.push_front\">push_front</a></li><li><a href=\"#method.remove_current\">remove_current</a></li><li><a href=\"#method.remove_current_as_list\">remove_current_as_list</a></li><li><a href=\"#method.splice_after\">splice_after</a></li><li><a href=\"#method.splice_before\">splice_before</a></li><li><a href=\"#method.split_after\">split_after</a></li><li><a href=\"#method.split_before\">split_before</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-CursorMut%3C'_,+T,+A%3E\">Debug</a></li><li><a href=\"#impl-Send-for-CursorMut%3C'_,+T,+A%3E\">Send</a></li><li><a href=\"#impl-Sync-for-CursorMut%3C'_,+T,+A%3E\">Sync</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-UnwindSafe-for-CursorMut%3C'a,+T,+A%3E\">!UnwindSafe</a></li><li><a href=\"#impl-Freeze-for-CursorMut%3C'a,+T,+A%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-CursorMut%3C'a,+T,+A%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Unpin-for-CursorMut%3C'a,+T,+A%3E\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::collections::linked_list</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.CursorMut.html\">CursorMut</a></li><li><a href=\"struct.ExtractIf.html\">ExtractIf</a></li><li><a href=\"struct.IntoIter.html\">IntoIter</a></li><li><a href=\"struct.Iter.html\">Iter</a></li><li><a href=\"struct.IterMut.html\">IterMut</a></li><li><a href=\"struct.LinkedList.html\">LinkedList</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">collections</a>::<wbr><a href=\"index.html\">linked_list</a>::<wbr><a class=\"struct\" href=\"#\">CursorMut</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1364-1368\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct CursorMut&lt;'a, T, A = <a class=\"struct\" href=\"../../alloc/struct.Global.html\" title=\"struct std::alloc::Global\">Global</a>&gt;<div class=\"where\">where\n    T: 'a,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div>{ <span class=\"comment\">/* private fields */</span> }</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A cursor over a <code>LinkedList</code> with editing operations.</p>\n<p>A <code>Cursor</code> is like an iterator, except that it can freely seek back-and-forth, and can\nsafely mutate the list during iteration. This is because the lifetime of its yielded\nreferences is tied to its own lifetime, instead of just the underlying list. This means\ncursors cannot yield multiple elements at once.</p>\n<p>Cursors always rest between two elements in the list, and index in a logically circular way.\nTo accommodate this, there is a “ghost” non-element that yields <code>None</code> between the head and\ntail of the list.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-CursorMut%3C'a,+T,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1500\">source</a><a href=\"#impl-CursorMut%3C'a,+T,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"struct\" href=\"struct.CursorMut.html\" title=\"struct std::collections::linked_list::CursorMut\">CursorMut</a>&lt;'a, T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1507\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.index\" class=\"fn\">index</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the cursor position index within the <code>LinkedList</code>.</p>\n<p>This returns <code>None</code> if the cursor is currently pointing to the\n“ghost” non-element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.move_next\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1518\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.move_next\" class=\"fn\">move_next</a>(&amp;mut self)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Moves the cursor to the next element of the <code>LinkedList</code>.</p>\n<p>If the cursor is pointing to the “ghost” non-element then this will move it to\nthe first element of the <code>LinkedList</code>. If it is pointing to the last\nelement of the <code>LinkedList</code> then this will move it to the “ghost” non-element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.move_prev\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1540\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.move_prev\" class=\"fn\">move_prev</a>(&amp;mut self)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Moves the cursor to the previous element of the <code>LinkedList</code>.</p>\n<p>If the cursor is pointing to the “ghost” non-element then this will move it to\nthe last element of the <code>LinkedList</code>. If it is pointing to the first\nelement of the <code>LinkedList</code> then this will move it to the “ghost” non-element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.current\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1562\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.current\" class=\"fn\">current</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the element that the cursor is currently\npointing to.</p>\n<p>This returns <code>None</code> if the cursor is currently pointing to the\n“ghost” non-element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.peek_next\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1572\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.peek_next\" class=\"fn\">peek_next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the next element.</p>\n<p>If the cursor is pointing to the “ghost” non-element then this returns\nthe first element of the <code>LinkedList</code>. If it is pointing to the last\nelement of the <code>LinkedList</code> then this returns <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.peek_prev\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1588\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.peek_prev\" class=\"fn\">peek_prev</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the previous element.</p>\n<p>If the cursor is pointing to the “ghost” non-element then this returns\nthe last element of the <code>LinkedList</code>. If it is pointing to the first\nelement of the <code>LinkedList</code> then this returns <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_cursor\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1605\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_cursor\" class=\"fn\">as_cursor</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Cursor.html\" title=\"struct std::collections::linked_list::Cursor\">Cursor</a>&lt;'_, T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a read-only cursor pointing to the current element.</p>\n<p>The lifetime of the returned <code>Cursor</code> is bound to that of the\n<code>CursorMut</code>, which means it cannot outlive the <code>CursorMut</code> and that the\n<code>CursorMut</code> is frozen for the lifetime of the <code>Cursor</code>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-CursorMut%3C'a,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1612\">source</a><a href=\"#impl-CursorMut%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"struct\" href=\"struct.CursorMut.html\" title=\"struct std::collections::linked_list::CursorMut\">CursorMut</a>&lt;'a, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.splice_after\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1618\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.splice_after\" class=\"fn\">splice_after</a>(&amp;mut self, list: <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T&gt;)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the elements from the given <code>LinkedList</code> after the current one.</p>\n<p>If the cursor is pointing at the “ghost” non-element then the new elements are\ninserted at the start of the <code>LinkedList</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.splice_before\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1641\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.splice_before\" class=\"fn\">splice_before</a>(&amp;mut self, list: <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T&gt;)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the elements from the given <code>LinkedList</code> before the current one.</p>\n<p>If the cursor is pointing at the “ghost” non-element then the new elements are\ninserted at the end of the <code>LinkedList</code>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-CursorMut%3C'a,+T,+A%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1657\">source</a><a href=\"#impl-CursorMut%3C'a,+T,+A%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"struct\" href=\"struct.CursorMut.html\" title=\"struct std::collections::linked_list::CursorMut\">CursorMut</a>&lt;'a, T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.insert_after\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1663\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.insert_after\" class=\"fn\">insert_after</a>(&amp;mut self, item: T)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Inserts a new element into the <code>LinkedList</code> after the current one.</p>\n<p>If the cursor is pointing at the “ghost” non-element then the new element is\ninserted at the front of the <code>LinkedList</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.insert_before\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1683\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.insert_before\" class=\"fn\">insert_before</a>(&amp;mut self, item: T)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Inserts a new element into the <code>LinkedList</code> before the current one.</p>\n<p>If the cursor is pointing at the “ghost” non-element then the new element is\ninserted at the end of the <code>LinkedList</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.remove_current\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1703\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.remove_current\" class=\"fn\">remove_current</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the current element from the <code>LinkedList</code>.</p>\n<p>The element that was removed is returned, and the cursor is\nmoved to point to the next element in the <code>LinkedList</code>.</p>\n<p>If the cursor is currently pointing to the “ghost” non-element then no element\nis removed and <code>None</code> is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.remove_current_as_list\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.remove_current_as_list\" class=\"fn\">remove_current_as_list</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the current element from the <code>LinkedList</code> without deallocating the list node.</p>\n<p>The node that was removed is returned as a new <code>LinkedList</code> containing only this node.\nThe cursor is moved to point to the next element in the current <code>LinkedList</code>.</p>\n<p>If the cursor is currently pointing to the “ghost” non-element then no element\nis removed and <code>None</code> is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_after\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1749-1751\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.split_after\" class=\"fn\">split_after</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Splits the list into two after the current element. This will return a\nnew list consisting of everything after the cursor, with the original\nlist retaining everything before.</p>\n<p>If the cursor is pointing at the “ghost” non-element then the entire contents\nof the <code>LinkedList</code> are moved.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_before\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1768-1770\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.split_before\" class=\"fn\">split_before</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Splits the list into two before the current element. This will return a\nnew list consisting of everything before the cursor, with the original\nlist retaining everything after.</p>\n<p>If the cursor is pointing at the “ghost” non-element then the entire contents\nof the <code>LinkedList</code> are moved.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.push_front\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1784\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.push_front\" class=\"fn\">push_front</a>(&amp;mut self, elt: T)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element to the front of the cursor’s parent list. The node\nthat the cursor points to is unchanged, even if it is the “ghost” node.</p>\n<p>This operation should compute in <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.push_back\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1798\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.push_back\" class=\"fn\">push_back</a>(&amp;mut self, elt: T)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element to the back of the cursor’s parent list. The node\nthat the cursor points to is unchanged, even if it is the “ghost” node.</p>\n<p>This operation should compute in <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pop_front\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1817\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.pop_front\" class=\"fn\">pop_front</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the first element from the cursor’s parent list and returns it,\nor None if the list is empty. The element the cursor points to remains\nunchanged, unless it was pointing to the front element. In that case, it\npoints to the new front element.</p>\n<p>This operation should compute in <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pop_back\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1845\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.pop_back\" class=\"fn\">pop_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the last element from the cursor’s parent list and returns it,\nor None if the list is empty. The element the cursor points to remains\nunchanged, unless it was pointing to the back element. In that case, it\npoints to the “ghost” element.</p>\n<p>This operation should compute in <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.front\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1866\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.front\" class=\"fn\">front</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Provides a reference to the front element of the cursor’s parent list,\nor None if the list is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.front_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1874\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.front_mut\" class=\"fn\">front_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Provides a mutable reference to the front element of the cursor’s\nparent list, or None if the list is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.back\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1883\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.back\" class=\"fn\">back</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Provides a reference to the back element of the cursor’s parent list,\nor None if the list is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.back_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1910\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.back_mut\" class=\"fn\">back_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Provides a mutable reference to back element of the cursor’s parent\nlist, or <code>None</code> if the list is empty.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Building and mutating a list with a cursor, then getting the back element:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(linked_list_cursors)]\n</span><span class=\"kw\">use </span>std::collections::LinkedList;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dl = LinkedList::new();\ndl.push_front(<span class=\"number\">3</span>);\ndl.push_front(<span class=\"number\">2</span>);\ndl.push_front(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cursor = dl.cursor_front_mut();\n<span class=\"kw-2\">*</span>cursor.current().unwrap() = <span class=\"number\">99</span>;\n<span class=\"kw-2\">*</span>cursor.back_mut().unwrap() = <span class=\"number\">0</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>contents = dl.into_iter();\n<span class=\"macro\">assert_eq!</span>(contents.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">99</span>));\n<span class=\"macro\">assert_eq!</span>(contents.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(contents.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(contents.next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(linked_list_cursors)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++let+mut+dl+=+LinkedList::new();%0A++++dl.push_front(3);%0A++++dl.push_front(2);%0A++++dl.push_front(1);%0A++++let+mut+cursor+=+dl.cursor_front_mut();%0A++++*cursor.current().unwrap()+=+99;%0A++++*cursor.back_mut().unwrap()+=+0;%0A++++let+mut+contents+=+dl.into_iter();%0A++++assert_eq!(contents.next(),+Some(99));%0A++++assert_eq!(contents.next(),+Some(2));%0A++++assert_eq!(contents.next(),+Some(0));%0A++++assert_eq!(contents.next(),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-CursorMut%3C'_,+T,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1375\">source</a><a href=\"#impl-Debug-for-CursorMut%3C'_,+T,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.CursorMut.html\" title=\"struct std::collections::linked_list::CursorMut\">CursorMut</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1376\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><section id=\"impl-Send-for-CursorMut%3C'_,+T,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2221\">source</a><a href=\"#impl-Send-for-CursorMut%3C'_,+T,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.CursorMut.html\" title=\"struct std::collections::linked_list::CursorMut\">CursorMut</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-CursorMut%3C'_,+T,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2224\">source</a><a href=\"#impl-Sync-for-CursorMut%3C'_,+T,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.CursorMut.html\" title=\"struct std::collections::linked_list::CursorMut\">CursorMut</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-CursorMut%3C'a,+T,+A%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-CursorMut%3C'a,+T,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.CursorMut.html\" title=\"struct std::collections::linked_list::CursorMut\">CursorMut</a>&lt;'a, T, A&gt;</h3></section><section id=\"impl-RefUnwindSafe-for-CursorMut%3C'a,+T,+A%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-CursorMut%3C'a,+T,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.CursorMut.html\" title=\"struct std::collections::linked_list::CursorMut\">CursorMut</a>&lt;'a, T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    T: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Unpin-for-CursorMut%3C'a,+T,+A%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-CursorMut%3C'a,+T,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.CursorMut.html\" title=\"struct std::collections::linked_list::CursorMut\">CursorMut</a>&lt;'a, T, A&gt;</h3></section><section id=\"impl-UnwindSafe-for-CursorMut%3C'a,+T,+A%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-CursorMut%3C'a,+T,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A = <a class=\"struct\" href=\"../../alloc/struct.Global.html\" title=\"struct std::alloc::Global\">Global</a>&gt; !<a class=\"trait\" href=\"../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.CursorMut.html\" title=\"struct std::collections::linked_list::CursorMut\">CursorMut</a>&lt;'a, T, A&gt;</h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:12.859Z"
}