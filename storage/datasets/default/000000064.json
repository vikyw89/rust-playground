{
	"title": "Publishing a Crate to Crates.io - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/ch14-02-publishing-to-crates-io.html",
	"markdown": "# Publishing a Crate to Crates.io\n\nWe’ve used packages from [crates.io](https://crates.io/) as dependencies of our project, but you can also share your code with other people by publishing your own packages. The crate registry at [crates.io](https://crates.io/) distributes the source code of your packages, so it primarily hosts code that is open source.\n\nRust and Cargo have features that make your published package easier for people to find and use. We’ll talk about some of these features next and then explain how to publish a package.\n\nAccurately documenting your packages will help other users know how and when to use them, so it’s worth investing the time to write documentation. In Chapter 3, we discussed how to comment Rust code using two slashes, `//`. Rust also has a particular kind of comment for documentation, known conveniently as a _documentation comment_, that will generate HTML documentation. The HTML displays the contents of documentation comments for public API items intended for programmers interested in knowing how to _use_ your crate as opposed to how your crate is _implemented_.\n\nDocumentation comments use three slashes, `///`, instead of two and support Markdown notation for formatting the text. Place documentation comments just before the item they’re documenting. Listing 14-1 shows documentation comments for an `add_one` function in a crate named `my_crate`.\n\nFilename: src/lib.rs\n\n```rust\n/// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```\n/// let arg = 5;\n/// let answer = my_crate::add_one(arg);\n///\n/// assert_eq!(6, answer);\n/// ```\npub fn add_one(x: i32) -> i32 {\n    x + 1\n}\n```\n\nListing 14-1: A documentation comment for a function\n\nHere, we give a description of what the `add_one` function does, start a section with the heading `Examples`, and then provide code that demonstrates how to use the `add_one` function. We can generate the HTML documentation from this documentation comment by running `cargo doc`. This command runs the `rustdoc` tool distributed with Rust and puts the generated HTML documentation in the _target/doc_ directory.\n\nFor convenience, running `cargo doc --open` will build the HTML for your current crate’s documentation (as well as the documentation for all of your crate’s dependencies) and open the result in a web browser. Navigate to the `add_one` function and you’ll see how the text in the documentation comments is rendered, as shown in Figure 14-1:\n\n![Rendered HTML documentation for the `add_one` function of `my_crate`](img/trpl14-01.png)\n\nFigure 14-1: HTML documentation for the `add_one` function\n\n#### [Commonly Used Sections](#commonly-used-sections)\n\nWe used the `# Examples` Markdown heading in Listing 14-1 to create a section in the HTML with the title “Examples.” Here are some other sections that crate authors commonly use in their documentation:\n\n-   **Panics**: The scenarios in which the function being documented could panic. Callers of the function who don’t want their programs to panic should make sure they don’t call the function in these situations.\n-   **Errors**: If the function returns a `Result`, describing the kinds of errors that might occur and what conditions might cause those errors to be returned can be helpful to callers so they can write code to handle the different kinds of errors in different ways.\n-   **Safety**: If the function is `unsafe` to call (we discuss unsafety in Chapter 19), there should be a section explaining why the function is unsafe and covering the invariants that the function expects callers to uphold.\n\nMost documentation comments don’t need all of these sections, but this is a good checklist to remind you of the aspects of your code users will be interested in knowing about.\n\nAdding example code blocks in your documentation comments can help demonstrate how to use your library, and doing so has an additional bonus: running `cargo test` will run the code examples in your documentation as tests! Nothing is better than documentation with examples. But nothing is worse than examples that don’t work because the code has changed since the documentation was written. If we run `cargo test` with the documentation for the `add_one` function from Listing 14-1, we will see a section in the test results like this:\n\n```text\n   Doc-tests my_crate\n\nrunning 1 test\ntest src/lib.rs - add_one (line 5) ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.27s\n\n```\n\nNow if we change either the function or the example so the `assert_eq!` in the example panics and run `cargo test` again, we’ll see that the doc tests catch that the example and the code are out of sync with each other!\n\nThe style of doc comment `//!` adds documentation to the item that contains the comments rather than to the items following the comments. We typically use these doc comments inside the crate root file (_src/lib.rs_ by convention) or inside a module to document the crate or the module as a whole.\n\nFor example, to add documentation that describes the purpose of the `my_crate` crate that contains the `add_one` function, we add documentation comments that start with `//!` to the beginning of the _src/lib.rs_ file, as shown in Listing 14-2:\n\nFilename: src/lib.rs\n\n```rust\n//! # My Crate\n//!\n//! `my_crate` is a collection of utilities to make performing certain\n//! calculations more convenient.\n\n/// Adds one to the number given.\n// --snip--\n///\n/// # Examples\n///\n/// ```\n/// let arg = 5;\n/// let answer = my_crate::add_one(arg);\n///\n/// assert_eq!(6, answer);\n/// ```\npub fn add_one(x: i32) -> i32 {\n    x + 1\n}\n```\n\nListing 14-2: Documentation for the `my_crate` crate as a whole\n\nNotice there isn’t any code after the last line that begins with `//!`. Because we started the comments with `//!` instead of `///`, we’re documenting the item that contains this comment rather than an item that follows this comment. In this case, that item is the _src/lib.rs_ file, which is the crate root. These comments describe the entire crate.\n\nWhen we run `cargo doc --open`, these comments will display on the front page of the documentation for `my_crate` above the list of public items in the crate, as shown in Figure 14-2:\n\n![Rendered HTML documentation with a comment for the crate as a whole](img/trpl14-02.png)\n\nFigure 14-2: Rendered documentation for `my_crate`, including the comment describing the crate as a whole\n\nDocumentation comments within items are useful for describing crates and modules especially. Use them to explain the overall purpose of the container to help your users understand the crate’s organization.\n\n### [Exporting a Convenient Public API with `pub use`](#exporting-a-convenient-public-api-with-pub-use)\n\nThe structure of your public API is a major consideration when publishing a crate. People who use your crate are less familiar with the structure than you are and might have difficulty finding the pieces they want to use if your crate has a large module hierarchy.\n\nIn Chapter 7, we covered how to make items public using the `pub` keyword, and bring items into a scope with the `use` keyword. However, the structure that makes sense to you while you’re developing a crate might not be very convenient for your users. You might want to organize your structs in a hierarchy containing multiple levels, but then people who want to use a type you’ve defined deep in the hierarchy might have trouble finding out that type exists. They might also be annoyed at having to enter `use` `my_crate::some_module::another_module::UsefulType;` rather than `use` `my_crate::UsefulType;`.\n\nThe good news is that if the structure _isn’t_ convenient for others to use from another library, you don’t have to rearrange your internal organization: instead, you can re-export items to make a public structure that’s different from your private structure by using `pub use`. Re-exporting takes a public item in one location and makes it public in another location, as if it were defined in the other location instead.\n\nFor example, say we made a library named `art` for modeling artistic concepts. Within this library are two modules: a `kinds` module containing two enums named `PrimaryColor` and `SecondaryColor` and a `utils` module containing a function named `mix`, as shown in Listing 14-3:\n\nFilename: src/lib.rs\n\n```rust\n//! # Art\n//!\n//! A library for modeling artistic concepts.\n\npub mod kinds {\n    /// The primary colors according to the RYB color model.\n    pub enum PrimaryColor {\n        Red,\n        Yellow,\n        Blue,\n    }\n\n    /// The secondary colors according to the RYB color model.\n    pub enum SecondaryColor {\n        Orange,\n        Green,\n        Purple,\n    }\n}\n\npub mod utils {\n    use crate::kinds::*;\n\n    /// Combines two primary colors in equal amounts to create\n    /// a secondary color.\n    pub fn mix(c1: PrimaryColor, c2: PrimaryColor) -> SecondaryColor {\n        // --snip--\n        unimplemented!();\n    }\n}\n```\n\nListing 14-3: An `art` library with items organized into `kinds` and `utils` modules\n\nFigure 14-3 shows what the front page of the documentation for this crate generated by `cargo doc` would look like:\n\n![Rendered documentation for the `art` crate that lists the `kinds` and `utils` modules](img/trpl14-03.png)\n\nFigure 14-3: Front page of the documentation for `art` that lists the `kinds` and `utils` modules\n\nNote that the `PrimaryColor` and `SecondaryColor` types aren’t listed on the front page, nor is the `mix` function. We have to click `kinds` and `utils` to see them.\n\nAnother crate that depends on this library would need `use` statements that bring the items from `art` into scope, specifying the module structure that’s currently defined. Listing 14-4 shows an example of a crate that uses the `PrimaryColor` and `mix` items from the `art` crate:\n\nFilename: src/main.rs\n\n```rust\nuse art::kinds::PrimaryColor;\nuse art::utils::mix;\n\nfn main() {\n    let red = PrimaryColor::Red;\n    let yellow = PrimaryColor::Yellow;\n    mix(red, yellow);\n}\n```\n\nListing 14-4: A crate using the `art` crate’s items with its internal structure exported\n\nThe author of the code in Listing 14-4, which uses the `art` crate, had to figure out that `PrimaryColor` is in the `kinds` module and `mix` is in the `utils` module. The module structure of the `art` crate is more relevant to developers working on the `art` crate than to those using it. The internal structure doesn’t contain any useful information for someone trying to understand how to use the `art` crate, but rather causes confusion because developers who use it have to figure out where to look, and must specify the module names in the `use` statements.\n\nTo remove the internal organization from the public API, we can modify the `art` crate code in Listing 14-3 to add `pub use` statements to re-export the items at the top level, as shown in Listing 14-5:\n\nFilename: src/lib.rs\n\n```rust\n//! # Art\n//!\n//! A library for modeling artistic concepts.\n\npub use self::kinds::PrimaryColor;\npub use self::kinds::SecondaryColor;\npub use self::utils::mix;\n\npub mod kinds {\n    // --snip--\n    /// The primary colors according to the RYB color model.\n    pub enum PrimaryColor {\n        Red,\n        Yellow,\n        Blue,\n    }\n\n    /// The secondary colors according to the RYB color model.\n    pub enum SecondaryColor {\n        Orange,\n        Green,\n        Purple,\n    }\n}\n\npub mod utils {\n    // --snip--\n    use crate::kinds::*;\n\n    /// Combines two primary colors in equal amounts to create\n    /// a secondary color.\n    pub fn mix(c1: PrimaryColor, c2: PrimaryColor) -> SecondaryColor {\n        SecondaryColor::Orange\n    }\n}\n```\n\nListing 14-5: Adding `pub use` statements to re-export items\n\nThe API documentation that `cargo doc` generates for this crate will now list and link re-exports on the front page, as shown in Figure 14-4, making the `PrimaryColor` and `SecondaryColor` types and the `mix` function easier to find.\n\n![Rendered documentation for the `art` crate with the re-exports on the front page](img/trpl14-04.png)\n\nFigure 14-4: The front page of the documentation for `art` that lists the re-exports\n\nThe `art` crate users can still see and use the internal structure from Listing 14-3 as demonstrated in Listing 14-4, or they can use the more convenient structure in Listing 14-5, as shown in Listing 14-6:\n\nFilename: src/main.rs\n\n```rust\nuse art::mix;\nuse art::PrimaryColor;\n\nfn main() {\n    // --snip--\n    let red = PrimaryColor::Red;\n    let yellow = PrimaryColor::Yellow;\n    mix(red, yellow);\n}\n```\n\nListing 14-6: A program using the re-exported items from the `art` crate\n\nIn cases where there are many nested modules, re-exporting the types at the top level with `pub use` can make a significant difference in the experience of people who use the crate. Another common use of `pub use` is to re-export definitions of a dependency in the current crate to make that crate’s definitions part of your crate’s public API.\n\nCreating a useful public API structure is more of an art than a science, and you can iterate to find the API that works best for your users. Choosing `pub use` gives you flexibility in how you structure your crate internally and decouples that internal structure from what you present to your users. Look at some of the code of crates you’ve installed to see if their internal structure differs from their public API.\n\n### [Setting Up a Crates.io Account](#setting-up-a-cratesio-account)\n\nBefore you can publish any crates, you need to create an account on [crates.io](https://crates.io/) and get an API token. To do so, visit the home page at [crates.io](https://crates.io/) and log in via a GitHub account. (The GitHub account is currently a requirement, but the site might support other ways of creating an account in the future.) Once you’re logged in, visit your account settings at [https://crates.io/me/](https://crates.io/me/) and retrieve your API key. Then run the `cargo login` command and paste your API key when prompted, like this:\n\n```console\n$ cargo login\nabcdefghijklmnopqrstuvwxyz012345\n\n```\n\nThis command will inform Cargo of your API token and store it locally in _~/.cargo/credentials_. Note that this token is a _secret_: do not share it with anyone else. If you do share it with anyone for any reason, you should revoke it and generate a new token on [crates.io](https://crates.io/).\n\n### [Adding Metadata to a New Crate](#adding-metadata-to-a-new-crate)\n\nLet’s say you have a crate you want to publish. Before publishing, you’ll need to add some metadata in the `[package]` section of the crate’s _Cargo.toml_ file.\n\nYour crate will need a unique name. While you’re working on a crate locally, you can name a crate whatever you’d like. However, crate names on [crates.io](https://crates.io/) are allocated on a first-come, first-served basis. Once a crate name is taken, no one else can publish a crate with that name. Before attempting to publish a crate, search for the name you want to use. If the name has been used, you will need to find another name and edit the `name` field in the _Cargo.toml_ file under the `[package]` section to use the new name for publishing, like so:\n\nFilename: Cargo.toml\n\n```toml\n[package]\nname = \"guessing_game\"\n\n```\n\nEven if you’ve chosen a unique name, when you run `cargo publish` to publish the crate at this point, you’ll get a warning and then an error:\n\n```console\n$ cargo publish\n    Updating crates.io index\nwarning: manifest has no description, license, license-file, documentation, homepage or repository.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#package-metadata for more info.\n--snip--\nerror: failed to publish to registry at https://crates.io\n\nCaused by:\n  the remote server responded with an error: missing or empty metadata fields: description, license. Please see https://doc.rust-lang.org/cargo/reference/manifest.html for how to upload metadata\n\n```\n\nThis errors because you’re missing some crucial information: a description and license are required so people will know what your crate does and under what terms they can use it. In _Cargo.toml_, add a description that’s just a sentence or two, because it will appear with your crate in search results. For the `license` field, you need to give a _license identifier value_. The [Linux Foundation’s Software Package Data Exchange (SPDX)](http://spdx.org/licenses/) lists the identifiers you can use for this value. For example, to specify that you’ve licensed your crate using the MIT License, add the `MIT` identifier:\n\nFilename: Cargo.toml\n\n```toml\n[package]\nname = \"guessing_game\"\nlicense = \"MIT\"\n\n```\n\nIf you want to use a license that doesn’t appear in the SPDX, you need to place the text of that license in a file, include the file in your project, and then use `license-file` to specify the name of that file instead of using the `license` key.\n\nGuidance on which license is appropriate for your project is beyond the scope of this book. Many people in the Rust community license their projects in the same way as Rust by using a dual license of `MIT OR Apache-2.0`. This practice demonstrates that you can also specify multiple license identifiers separated by `OR` to have multiple licenses for your project.\n\nWith a unique name, the version, your description, and a license added, the _Cargo.toml_ file for a project that is ready to publish might look like this:\n\nFilename: Cargo.toml\n\n```toml\n[package]\nname = \"guessing_game\"\nversion = \"0.1.0\"\nedition = \"2021\"\ndescription = \"A fun game where you guess what number the computer has chosen.\"\nlicense = \"MIT OR Apache-2.0\"\n\n[dependencies]\n\n```\n\n[Cargo’s documentation](https://doc.rust-lang.org/cargo/) describes other metadata you can specify to ensure others can discover and use your crate more easily.\n\n### [Publishing to Crates.io](#publishing-to-cratesio)\n\nNow that you’ve created an account, saved your API token, chosen a name for your crate, and specified the required metadata, you’re ready to publish! Publishing a crate uploads a specific version to [crates.io](https://crates.io/) for others to use.\n\nBe careful, because a publish is _permanent_. The version can never be overwritten, and the code cannot be deleted. One major goal of [crates.io](https://crates.io/) is to act as a permanent archive of code so that builds of all projects that depend on crates from [crates.io](https://crates.io/) will continue to work. Allowing version deletions would make fulfilling that goal impossible. However, there is no limit to the number of crate versions you can publish.\n\nRun the `cargo publish` command again. It should succeed now:\n\n```console\n$ cargo publish\n    Updating crates.io index\n   Packaging guessing_game v0.1.0 (file:///projects/guessing_game)\n   Verifying guessing_game v0.1.0 (file:///projects/guessing_game)\n   Compiling guessing_game v0.1.0\n(file:///projects/guessing_game/target/package/guessing_game-0.1.0)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.19s\n   Uploading guessing_game v0.1.0 (file:///projects/guessing_game)\n\n```\n\nCongratulations! You’ve now shared your code with the Rust community, and anyone can easily add your crate as a dependency of their project.\n\n### [Publishing a New Version of an Existing Crate](#publishing-a-new-version-of-an-existing-crate)\n\nWhen you’ve made changes to your crate and are ready to release a new version, you change the `version` value specified in your _Cargo.toml_ file and republish. Use the [Semantic Versioning rules](http://semver.org/) to decide what an appropriate next version number is based on the kinds of changes you’ve made. Then run `cargo publish` to upload the new version.\n\n### [Deprecating Versions from Crates.io with `cargo yank`](#deprecating-versions-from-cratesio-with-cargo-yank)\n\nAlthough you can’t remove previous versions of a crate, you can prevent any future projects from adding them as a new dependency. This is useful when a crate version is broken for one reason or another. In such situations, Cargo supports _yanking_ a crate version.\n\nYanking a version prevents new projects from depending on that version while allowing all existing projects that depend on it to continue. Essentially, a yank means that all projects with a _Cargo.lock_ will not break, and any future _Cargo.lock_ files generated will not use the yanked version.\n\nTo yank a version of a crate, in the directory of the crate that you’ve previously published, run `cargo yank` and specify which version you want to yank. For example, if we’ve published a crate named `guessing_game` version 1.0.1 and we want to yank it, in the project directory for `guessing_game` we’d run:\n\n```console\n$ cargo yank --vers 1.0.1\n    Updating crates.io index\n        Yank guessing_game@1.0.1\n\n```\n\nBy adding `--undo` to the command, you can also undo a yank and allow projects to start depending on a version again:\n\n```console\n$ cargo yank --vers 1.0.1 --undo\n    Updating crates.io index\n      Unyank guessing_game@1.0.1\n\n```\n\nA yank _does not_ delete any code. It cannot, for example, delete accidentally uploaded secrets. If that happens, you must reset those secrets immediately.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Publishing a Crate to Crates.io - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library’s Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and “Nightly Rust”</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h2 id=\"publishing-a-crate-to-cratesio\"><a class=\"header\" href=\"#publishing-a-crate-to-cratesio\">Publishing a Crate to Crates.io</a></h2>\n<p>We’ve used packages from <a href=\"https://crates.io/\">crates.io</a><!-- ignore --> as\ndependencies of our project, but you can also share your code with other people\nby publishing your own packages. The crate registry at\n<a href=\"https://crates.io/\">crates.io</a><!-- ignore --> distributes the source code of\nyour packages, so it primarily hosts code that is open source.</p>\n<p>Rust and Cargo have features that make your published package easier for people\nto find and use. We’ll talk about some of these features next and then explain\nhow to publish a package.</p>\n<h3 id=\"making-useful-documentation-comments\"><a class=\"header\" href=\"#making-useful-documentation-comments\">Making Useful Documentation Comments</a></h3>\n<p>Accurately documenting your packages will help other users know how and when to\nuse them, so it’s worth investing the time to write documentation. In Chapter\n3, we discussed how to comment Rust code using two slashes, <code class=\"hljs\">//</code>. Rust also has\na particular kind of comment for documentation, known conveniently as a\n<em>documentation comment</em>, that will generate HTML documentation. The HTML\ndisplays the contents of documentation comments for public API items intended\nfor programmers interested in knowing how to <em>use</em> your crate as opposed to how\nyour crate is <em>implemented</em>.</p>\n<p>Documentation comments use three slashes, <code class=\"hljs\">///</code>, instead of two and support\nMarkdown notation for formatting the text. Place documentation comments just\nbefore the item they’re documenting. Listing 14-1 shows documentation comments\nfor an <code class=\"hljs\">add_one</code> function in a crate named <code class=\"hljs\">my_crate</code>.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">/// Adds one to the number given.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// # Examples</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-comment\">/// let arg = 5;</span>\n<span class=\"hljs-comment\">/// let answer = my_crate::add_one(arg);</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// assert_eq!(6, answer);</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_one</span></span>(x: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    x + <span class=\"hljs-number\">1</span>\n}</code></pre>\n<p><span class=\"caption\">Listing 14-1: A documentation comment for a\nfunction</span></p>\n<p>Here, we give a description of what the <code class=\"hljs\">add_one</code> function does, start a\nsection with the heading <code class=\"hljs\">Examples</code>, and then provide code that demonstrates\nhow to use the <code class=\"hljs\">add_one</code> function. We can generate the HTML documentation from\nthis documentation comment by running <code class=\"hljs\">cargo doc</code>. This command runs the\n<code class=\"hljs\">rustdoc</code> tool distributed with Rust and puts the generated HTML documentation\nin the <em>target/doc</em> directory.</p>\n<p>For convenience, running <code class=\"hljs\">cargo doc --open</code> will build the HTML for your\ncurrent crate’s documentation (as well as the documentation for all of your\ncrate’s dependencies) and open the result in a web browser. Navigate to the\n<code class=\"hljs\">add_one</code> function and you’ll see how the text in the documentation comments is\nrendered, as shown in Figure 14-1:</p>\n<img alt=\"Rendered HTML documentation for the `add_one` function of `my_crate`\" src=\"img/trpl14-01.png\" class=\"center\">\n<p><span class=\"caption\">Figure 14-1: HTML documentation for the <code class=\"hljs\">add_one</code>\nfunction</span></p>\n<h4 id=\"commonly-used-sections\"><a class=\"header\" href=\"#commonly-used-sections\">Commonly Used Sections</a></h4>\n<p>We used the <code class=\"hljs\"># Examples</code> Markdown heading in Listing 14-1 to create a section\nin the HTML with the title “Examples.” Here are some other sections that crate\nauthors commonly use in their documentation:</p>\n<ul>\n<li><strong>Panics</strong>: The scenarios in which the function being documented could\npanic. Callers of the function who don’t want their programs to panic should\nmake sure they don’t call the function in these situations.</li>\n<li><strong>Errors</strong>: If the function returns a <code class=\"hljs\">Result</code>, describing the kinds of\nerrors that might occur and what conditions might cause those errors to be\nreturned can be helpful to callers so they can write code to handle the\ndifferent kinds of errors in different ways.</li>\n<li><strong>Safety</strong>: If the function is <code class=\"hljs\">unsafe</code> to call (we discuss unsafety in\nChapter 19), there should be a section explaining why the function is unsafe\nand covering the invariants that the function expects callers to uphold.</li>\n</ul>\n<p>Most documentation comments don’t need all of these sections, but this is a\ngood checklist to remind you of the aspects of your code users will be\ninterested in knowing about.</p>\n<h4 id=\"documentation-comments-as-tests\"><a class=\"header\" href=\"#documentation-comments-as-tests\">Documentation Comments as Tests</a></h4>\n<p>Adding example code blocks in your documentation comments can help demonstrate\nhow to use your library, and doing so has an additional bonus: running <code class=\"hljs\">cargo test</code> will run the code examples in your documentation as tests! Nothing is\nbetter than documentation with examples. But nothing is worse than examples\nthat don’t work because the code has changed since the documentation was\nwritten. If we run <code class=\"hljs\">cargo test</code> with the documentation for the <code class=\"hljs\">add_one</code>\nfunction from Listing 14-1, we will see a section in the test results like this:</p>\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-01/\ncargo test\ncopy just the doc-tests section below\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">   Doc-tests my_crate\n\nrunning 1 test\ntest src/lib.rs - add_one (line 5) ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.27s\n</code></pre>\n<p>Now if we change either the function or the example so the <code class=\"hljs\">assert_eq!</code> in the\nexample panics and run <code class=\"hljs\">cargo test</code> again, we’ll see that the doc tests catch\nthat the example and the code are out of sync with each other!</p>\n<h4 id=\"commenting-contained-items\"><a class=\"header\" href=\"#commenting-contained-items\">Commenting Contained Items</a></h4>\n<p>The style of doc comment <code class=\"hljs\">//!</code> adds documentation to the item that contains the\ncomments rather than to the items following the comments. We typically use\nthese doc comments inside the crate root file (<em>src/lib.rs</em> by convention) or\ninside a module to document the crate or the module as a whole.</p>\n<p>For example, to add documentation that describes the purpose of the <code class=\"hljs\">my_crate</code>\ncrate that contains the <code class=\"hljs\">add_one</code> function, we add documentation comments that\nstart with <code class=\"hljs\">//!</code> to the beginning of the <em>src/lib.rs</em> file, as shown in Listing\n14-2:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-comment\">//! # My Crate</span>\n<span class=\"hljs-comment\">//!</span>\n<span class=\"hljs-comment\">//! `my_crate` is a collection of utilities to make performing certain</span>\n<span class=\"hljs-comment\">//! calculations more convenient.</span>\n\n<span class=\"hljs-comment\">/// Adds one to the number given.</span>\n<span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\"><span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">/// # Examples</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">/// ```</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">/// let arg = 5;</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">/// let answer = my_crate::add_one(arg);</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">/// assert_eq!(6, answer);</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">/// ```</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_one</span></span>(x: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n</span><span class=\"boring\">    x + <span class=\"hljs-number\">1</span>\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 14-2: Documentation for the <code class=\"hljs\">my_crate</code> crate as a\nwhole</span></p>\n<p>Notice there isn’t any code after the last line that begins with <code class=\"hljs\">//!</code>. Because\nwe started the comments with <code class=\"hljs\">//!</code> instead of <code class=\"hljs\">///</code>, we’re documenting the item\nthat contains this comment rather than an item that follows this comment. In\nthis case, that item is the <em>src/lib.rs</em> file, which is the crate root. These\ncomments describe the entire crate.</p>\n<p>When we run <code class=\"hljs\">cargo doc --open</code>, these comments will display on the front\npage of the documentation for <code class=\"hljs\">my_crate</code> above the list of public items in the\ncrate, as shown in Figure 14-2:</p>\n<img alt=\"Rendered HTML documentation with a comment for the crate as a whole\" src=\"img/trpl14-02.png\" class=\"center\">\n<p><span class=\"caption\">Figure 14-2: Rendered documentation for <code class=\"hljs\">my_crate</code>,\nincluding the comment describing the crate as a whole</span></p>\n<p>Documentation comments within items are useful for describing crates and\nmodules especially. Use them to explain the overall purpose of the container to\nhelp your users understand the crate’s organization.</p>\n<h3 id=\"exporting-a-convenient-public-api-with-pub-use\"><a class=\"header\" href=\"#exporting-a-convenient-public-api-with-pub-use\">Exporting a Convenient Public API with <code>pub use</code></a></h3>\n<p>The structure of your public API is a major consideration when publishing a\ncrate. People who use your crate are less familiar with the structure than you\nare and might have difficulty finding the pieces they want to use if your crate\nhas a large module hierarchy.</p>\n<p>In Chapter 7, we covered how to make items public using the <code class=\"hljs\">pub</code> keyword, and\nbring items into a scope with the <code class=\"hljs\">use</code> keyword. However, the structure that\nmakes sense to you while you’re developing a crate might not be very convenient\nfor your users. You might want to organize your structs in a hierarchy\ncontaining multiple levels, but then people who want to use a type you’ve\ndefined deep in the hierarchy might have trouble finding out that type exists.\nThey might also be annoyed at having to enter <code class=\"hljs\">use</code>\n<code class=\"hljs\">my_crate::some_module::another_module::UsefulType;</code> rather than <code class=\"hljs\">use</code>\n<code class=\"hljs\">my_crate::UsefulType;</code>.</p>\n<p>The good news is that if the structure <em>isn’t</em> convenient for others to use\nfrom another library, you don’t have to rearrange your internal organization:\ninstead, you can re-export items to make a public structure that’s different\nfrom your private structure by using <code class=\"hljs\">pub use</code>. Re-exporting takes a public\nitem in one location and makes it public in another location, as if it were\ndefined in the other location instead.</p>\n<p>For example, say we made a library named <code class=\"hljs\">art</code> for modeling artistic concepts.\nWithin this library are two modules: a <code class=\"hljs\">kinds</code> module containing two enums\nnamed <code class=\"hljs\">PrimaryColor</code> and <code class=\"hljs\">SecondaryColor</code> and a <code class=\"hljs\">utils</code> module containing a\nfunction named <code class=\"hljs\">mix</code>, as shown in Listing 14-3:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground test_harness hljs hide-boring\"><span class=\"hljs-comment\">//! # Art</span>\n<span class=\"hljs-comment\">//!</span>\n<span class=\"hljs-comment\">//! A library for modeling artistic concepts.</span>\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> kinds {\n    <span class=\"hljs-comment\">/// The primary colors according to the RYB color model.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">PrimaryColor</span></span> {\n        Red,\n        Yellow,\n        Blue,\n    }\n\n    <span class=\"hljs-comment\">/// The secondary colors according to the RYB color model.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">SecondaryColor</span></span> {\n        Orange,\n        Green,\n        Purple,\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> utils {\n    <span class=\"hljs-keyword\">use</span> crate::kinds::*;\n\n    <span class=\"hljs-comment\">/// Combines two primary colors in equal amounts to create</span>\n    <span class=\"hljs-comment\">/// a secondary color.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">mix</span></span>(c1: PrimaryColor, c2: PrimaryColor) -&gt; SecondaryColor {\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">        <span class=\"hljs-built_in\">unimplemented!</span>();\n</span>    }\n}</code></pre>\n<p><span class=\"caption\">Listing 14-3: An <code class=\"hljs\">art</code> library with items organized into\n<code class=\"hljs\">kinds</code> and <code class=\"hljs\">utils</code> modules</span></p>\n<p>Figure 14-3 shows what the front page of the documentation for this crate\ngenerated by <code class=\"hljs\">cargo doc</code> would look like:</p>\n<img alt=\"Rendered documentation for the `art` crate that lists the `kinds` and `utils` modules\" src=\"img/trpl14-03.png\" class=\"center\">\n<p><span class=\"caption\">Figure 14-3: Front page of the documentation for <code class=\"hljs\">art</code>\nthat lists the <code class=\"hljs\">kinds</code> and <code class=\"hljs\">utils</code> modules</span></p>\n<p>Note that the <code class=\"hljs\">PrimaryColor</code> and <code class=\"hljs\">SecondaryColor</code> types aren’t listed on the\nfront page, nor is the <code class=\"hljs\">mix</code> function. We have to click <code class=\"hljs\">kinds</code> and <code class=\"hljs\">utils</code> to\nsee them.</p>\n<p>Another crate that depends on this library would need <code class=\"hljs\">use</code> statements that\nbring the items from <code class=\"hljs\">art</code> into scope, specifying the module structure that’s\ncurrently defined. Listing 14-4 shows an example of a crate that uses the\n<code class=\"hljs\">PrimaryColor</code> and <code class=\"hljs\">mix</code> items from the <code class=\"hljs\">art</code> crate:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> art::kinds::PrimaryColor;\n<span class=\"hljs-keyword\">use</span> art::utils::mix;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> red = PrimaryColor::Red;\n    <span class=\"hljs-keyword\">let</span> yellow = PrimaryColor::Yellow;\n    mix(red, yellow);\n}</code></pre>\n<p><span class=\"caption\">Listing 14-4: A crate using the <code class=\"hljs\">art</code> crate’s items with\nits internal structure exported</span></p>\n<p>The author of the code in Listing 14-4, which uses the <code class=\"hljs\">art</code> crate, had to\nfigure out that <code class=\"hljs\">PrimaryColor</code> is in the <code class=\"hljs\">kinds</code> module and <code class=\"hljs\">mix</code> is in the\n<code class=\"hljs\">utils</code> module. The module structure of the <code class=\"hljs\">art</code> crate is more relevant to\ndevelopers working on the <code class=\"hljs\">art</code> crate than to those using it. The internal\nstructure doesn’t contain any useful information for someone trying to\nunderstand how to use the <code class=\"hljs\">art</code> crate, but rather causes confusion because\ndevelopers who use it have to figure out where to look, and must specify the\nmodule names in the <code class=\"hljs\">use</code> statements.</p>\n<p>To remove the internal organization from the public API, we can modify the\n<code class=\"hljs\">art</code> crate code in Listing 14-3 to add <code class=\"hljs\">pub use</code> statements to re-export the\nitems at the top level, as shown in Listing 14-5:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-comment\">//! # Art</span>\n<span class=\"hljs-comment\">//!</span>\n<span class=\"hljs-comment\">//! A library for modeling artistic concepts.</span>\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">use</span> self::kinds::PrimaryColor;\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">use</span> self::kinds::SecondaryColor;\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">use</span> self::utils::mix;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> kinds {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-comment\">/// The primary colors according to the RYB color model.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">PrimaryColor</span></span> {\n</span><span class=\"boring\">        Red,\n</span><span class=\"boring\">        Yellow,\n</span><span class=\"boring\">        Blue,\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The secondary colors according to the RYB color model.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">SecondaryColor</span></span> {\n</span><span class=\"boring\">        Orange,\n</span><span class=\"boring\">        Green,\n</span><span class=\"boring\">        Purple,\n</span><span class=\"boring\">    }\n</span>}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> utils {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">use</span> crate::kinds::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// Combines two primary colors in equal amounts to create</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// a secondary color.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">mix</span></span>(c1: PrimaryColor, c2: PrimaryColor) -&gt; SecondaryColor {\n</span><span class=\"boring\">        SecondaryColor::Orange\n</span><span class=\"boring\">    }\n</span>}</code></pre>\n<p><span class=\"caption\">Listing 14-5: Adding <code class=\"hljs\">pub use</code> statements to re-export\nitems</span></p>\n<p>The API documentation that <code class=\"hljs\">cargo doc</code> generates for this crate will now list\nand link re-exports on the front page, as shown in Figure 14-4, making the\n<code class=\"hljs\">PrimaryColor</code> and <code class=\"hljs\">SecondaryColor</code> types and the <code class=\"hljs\">mix</code> function easier to find.</p>\n<img alt=\"Rendered documentation for the `art` crate with the re-exports on the front page\" src=\"img/trpl14-04.png\" class=\"center\">\n<p><span class=\"caption\">Figure 14-4: The front page of the documentation for <code class=\"hljs\">art</code>\nthat lists the re-exports</span></p>\n<p>The <code class=\"hljs\">art</code> crate users can still see and use the internal structure from Listing\n14-3 as demonstrated in Listing 14-4, or they can use the more convenient\nstructure in Listing 14-5, as shown in Listing 14-6:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-keyword\">use</span> art::mix;\n<span class=\"hljs-keyword\">use</span> art::PrimaryColor;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">let</span> red = PrimaryColor::Red;\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> yellow = PrimaryColor::Yellow;\n</span><span class=\"boring\">    mix(red, yellow);\n</span>}</code></pre>\n<p><span class=\"caption\">Listing 14-6: A program using the re-exported items from\nthe <code class=\"hljs\">art</code> crate</span></p>\n<p>In cases where there are many nested modules, re-exporting the types at the top\nlevel with <code class=\"hljs\">pub use</code> can make a significant difference in the experience of\npeople who use the crate. Another common use of <code class=\"hljs\">pub use</code> is to re-export\ndefinitions of a dependency in the current crate to make that crate’s\ndefinitions part of your crate’s public API.</p>\n<p>Creating a useful public API structure is more of an art than a science, and\nyou can iterate to find the API that works best for your users. Choosing <code class=\"hljs\">pub use</code> gives you flexibility in how you structure your crate internally and\ndecouples that internal structure from what you present to your users. Look at\nsome of the code of crates you’ve installed to see if their internal structure\ndiffers from their public API.</p>\n<h3 id=\"setting-up-a-cratesio-account\"><a class=\"header\" href=\"#setting-up-a-cratesio-account\">Setting Up a Crates.io Account</a></h3>\n<p>Before you can publish any crates, you need to create an account on\n<a href=\"https://crates.io/\">crates.io</a><!-- ignore --> and get an API token. To do so,\nvisit the home page at <a href=\"https://crates.io/\">crates.io</a><!-- ignore --> and log\nin via a GitHub account. (The GitHub account is currently a requirement, but\nthe site might support other ways of creating an account in the future.) Once\nyou’re logged in, visit your account settings at\n<a href=\"https://crates.io/me/\">https://crates.io/me/</a><!-- ignore --> and retrieve your\nAPI key. Then run the <code class=\"hljs\">cargo login</code> command and paste your API key when prompted, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo login</span>\nabcdefghijklmnopqrstuvwxyz012345\n</code></pre>\n<p>This command will inform Cargo of your API token and store it locally in\n<em>~/.cargo/credentials</em>. Note that this token is a <em>secret</em>: do not share it\nwith anyone else. If you do share it with anyone for any reason, you should\nrevoke it and generate a new token on <a href=\"https://crates.io/\">crates.io</a><!-- ignore\n-->.</p>\n<h3 id=\"adding-metadata-to-a-new-crate\"><a class=\"header\" href=\"#adding-metadata-to-a-new-crate\">Adding Metadata to a New Crate</a></h3>\n<p>Let’s say you have a crate you want to publish. Before publishing, you’ll need\nto add some metadata in the <code class=\"hljs\">[package]</code> section of the crate’s <em>Cargo.toml</em>\nfile.</p>\n<p>Your crate will need a unique name. While you’re working on a crate locally,\nyou can name a crate whatever you’d like. However, crate names on\n<a href=\"https://crates.io/\">crates.io</a><!-- ignore --> are allocated on a first-come,\nfirst-served basis. Once a crate name is taken, no one else can publish a crate\nwith that name. Before attempting to publish a crate, search for the name you\nwant to use. If the name has been used, you will need to find another name and\nedit the <code class=\"hljs\">name</code> field in the <em>Cargo.toml</em> file under the <code class=\"hljs\">[package]</code> section to\nuse the new name for publishing, like so:</p>\n<p><span class=\"filename\">Filename: Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"guessing_game\"</span>\n</code></pre>\n<p>Even if you’ve chosen a unique name, when you run <code class=\"hljs\">cargo publish</code> to publish\nthe crate at this point, you’ll get a warning and then an error:</p>\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-01/\ncargo publish\ncopy just the relevant lines below\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo publish</span>\n    Updating crates.io index\nwarning: manifest has no description, license, license-file, documentation, homepage or repository.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#package-metadata for more info.\n--snip--\nerror: failed to publish to registry at https://crates.io\n\nCaused by:\n  the remote server responded with an error: missing or empty metadata fields: description, license. Please see https://doc.rust-lang.org/cargo/reference/manifest.html for how to upload metadata\n</code></pre>\n<p>This errors because you’re missing some crucial information: a description and\nlicense are required so people will know what your crate does and under what\nterms they can use it. In <em>Cargo.toml</em>, add a description that’s just a\nsentence or two, because it will appear with your crate in search results. For\nthe <code class=\"hljs\">license</code> field, you need to give a <em>license identifier value</em>. The <a href=\"http://spdx.org/licenses/\">Linux\nFoundation’s Software Package Data Exchange (SPDX)</a> lists the identifiers\nyou can use for this value. For example, to specify that you’ve licensed your\ncrate using the MIT License, add the <code class=\"hljs\">MIT</code> identifier:</p>\n<p><span class=\"filename\">Filename: Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"guessing_game\"</span>\n<span class=\"hljs-attr\">license</span> = <span class=\"hljs-string\">\"MIT\"</span>\n</code></pre>\n<p>If you want to use a license that doesn’t appear in the SPDX, you need to place\nthe text of that license in a file, include the file in your project, and then\nuse <code class=\"hljs\">license-file</code> to specify the name of that file instead of using the\n<code class=\"hljs\">license</code> key.</p>\n<p>Guidance on which license is appropriate for your project is beyond the scope\nof this book. Many people in the Rust community license their projects in the\nsame way as Rust by using a dual license of <code class=\"hljs\">MIT OR Apache-2.0</code>. This practice\ndemonstrates that you can also specify multiple license identifiers separated\nby <code class=\"hljs\">OR</code> to have multiple licenses for your project.</p>\n<p>With a unique name, the version, your description, and a license added, the\n<em>Cargo.toml</em> file for a project that is ready to publish might look like this:</p>\n<p><span class=\"filename\">Filename: Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"guessing_game\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2021\"</span>\n<span class=\"hljs-attr\">description</span> = <span class=\"hljs-string\">\"A fun game where you guess what number the computer has chosen.\"</span>\n<span class=\"hljs-attr\">license</span> = <span class=\"hljs-string\">\"MIT OR Apache-2.0\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n</code></pre>\n<p><a href=\"https://doc.rust-lang.org/cargo/\">Cargo’s documentation</a> describes other\nmetadata you can specify to ensure others can discover and use your crate more\neasily.</p>\n<h3 id=\"publishing-to-cratesio\"><a class=\"header\" href=\"#publishing-to-cratesio\">Publishing to Crates.io</a></h3>\n<p>Now that you’ve created an account, saved your API token, chosen a name for\nyour crate, and specified the required metadata, you’re ready to publish!\nPublishing a crate uploads a specific version to\n<a href=\"https://crates.io/\">crates.io</a><!-- ignore --> for others to use.</p>\n<p>Be careful, because a publish is <em>permanent</em>. The version can never be\noverwritten, and the code cannot be deleted. One major goal of\n<a href=\"https://crates.io/\">crates.io</a><!-- ignore --> is to act as a permanent archive\nof code so that builds of all projects that depend on crates from\n<a href=\"https://crates.io/\">crates.io</a><!-- ignore --> will continue to work. Allowing\nversion deletions would make fulfilling that goal impossible. However, there is\nno limit to the number of crate versions you can publish.</p>\n<p>Run the <code class=\"hljs\">cargo publish</code> command again. It should succeed now:</p>\n<!-- manual-regeneration\ngo to some valid crate, publish a new version\ncargo publish\ncopy just the relevant lines below\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo publish</span>\n    Updating crates.io index\n   Packaging guessing_game v0.1.0 (file:///projects/guessing_game)\n   Verifying guessing_game v0.1.0 (file:///projects/guessing_game)\n   Compiling guessing_game v0.1.0\n(file:///projects/guessing_game/target/package/guessing_game-0.1.0)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.19s\n   Uploading guessing_game v0.1.0 (file:///projects/guessing_game)\n</code></pre>\n<p>Congratulations! You’ve now shared your code with the Rust community, and\nanyone can easily add your crate as a dependency of their project.</p>\n<h3 id=\"publishing-a-new-version-of-an-existing-crate\"><a class=\"header\" href=\"#publishing-a-new-version-of-an-existing-crate\">Publishing a New Version of an Existing Crate</a></h3>\n<p>When you’ve made changes to your crate and are ready to release a new version,\nyou change the <code class=\"hljs\">version</code> value specified in your <em>Cargo.toml</em> file and\nrepublish. Use the <a href=\"http://semver.org/\">Semantic Versioning rules</a> to decide what an\nappropriate next version number is based on the kinds of changes you’ve made.\nThen run <code class=\"hljs\">cargo publish</code> to upload the new version.</p>\n<!-- Old link, do not remove -->\n<p><a id=\"removing-versions-from-cratesio-with-cargo-yank\"></a></p>\n<h3 id=\"deprecating-versions-from-cratesio-with-cargo-yank\"><a class=\"header\" href=\"#deprecating-versions-from-cratesio-with-cargo-yank\">Deprecating Versions from Crates.io with <code>cargo yank</code></a></h3>\n<p>Although you can’t remove previous versions of a crate, you can prevent any\nfuture projects from adding them as a new dependency. This is useful when a\ncrate version is broken for one reason or another. In such situations, Cargo\nsupports <em>yanking</em> a crate version.</p>\n<p>Yanking a version prevents new projects from depending on that version while\nallowing all existing projects that depend on it to continue. Essentially, a\nyank means that all projects with a <em>Cargo.lock</em> will not break, and any future\n<em>Cargo.lock</em> files generated will not use the yanked version.</p>\n<p>To yank a version of a crate, in the directory of the crate that you’ve\npreviously published, run <code class=\"hljs\">cargo yank</code> and specify which version you want to\nyank. For example, if we’ve published a crate named <code class=\"hljs\">guessing_game</code> version\n1.0.1 and we want to yank it, in the project directory for <code class=\"hljs\">guessing_game</code> we’d\nrun:</p>\n<!-- manual-regeneration:\ncargo yank carol-test --version 2.1.0\ncargo yank carol-test --version 2.1.0 --undo\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo yank --vers 1.0.1</span>\n    Updating crates.io index\n        Yank guessing_game@1.0.1\n</code></pre>\n<p>By adding <code class=\"hljs\">--undo</code> to the command, you can also undo a yank and allow projects\nto start depending on a version again:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo yank --vers 1.0.1 --undo</span>\n    Updating crates.io index\n      Unyank guessing_game@1.0.1\n</code></pre>\n<p>A yank <em>does not</em> delete any code. It cannot, for example, delete accidentally\nuploaded secrets. If that happens, you must reset those secrets immediately.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"ch14-01-release-profiles.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"ch14-03-cargo-workspaces.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"ch14-01-release-profiles.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"ch14-03-cargo-workspaces.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:27.619Z"
}