{
	"title": "panicking in std::thread - Rust",
	"url": "https://doc.rust-lang.org/stable/std/thread/fn.panicking.html",
	"markdown": "# panicking in std::thread - Rust\n\n```\npub fn panicking() -> bool\n```\n\nExpand description\n\nDetermines whether the current thread is unwinding because of panic.\n\nA common use of this feature is to poison shared resources when writing unsafe code, by checking `panicking` when the `drop` is called.\n\nThis is usually not needed when writing safe code, as [`Mutex`es](../sync/struct.Mutex.html \"struct std::sync::Mutex\") already poison themselves when a thread panics while holding the lock.\n\nThis can also be used in multithreaded applications, in order to send a message to other threads warning that a thread has panicked (e.g., for monitoring purposes).\n\n## [§](#examples)Examples\n\n[ⓘ](# \"This example panics\")\n\n```\nuse std::thread;\n\nstruct SomeStruct;\n\nimpl Drop for SomeStruct {\n    fn drop(&mut self) {\n        if thread::panicking() {\n            println!(\"dropped while unwinding\");\n        } else {\n            println!(\"dropped while not unwinding\");\n        }\n    }\n}\n\n{\n    print!(\"a: \");\n    let a = SomeStruct;\n}\n\n{\n    print!(\"b: \");\n    let b = SomeStruct;\n    panic!()\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++%0A++++struct+SomeStruct;%0A++++%0A++++impl+Drop+for+SomeStruct+%7B%0A++++++++fn+drop(%26mut+self)+%7B%0A++++++++++++if+thread::panicking()+%7B%0A++++++++++++++++println!(%22dropped+while+unwinding%22);%0A++++++++++++%7D+else+%7B%0A++++++++++++++++println!(%22dropped+while+not+unwinding%22);%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++%7B%0A++++++++print!(%22a:+%22);%0A++++++++let+a+=+SomeStruct;%0A++++%7D%0A++++%0A++++%7B%0A++++++++print!(%22b:+%22);%0A++++++++let+b+=+SomeStruct;%0A++++++++panic!()%0A++++%7D%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Determines whether the current thread is unwinding because of panic.\"><title>panicking in std::thread - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::thread</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AccessError.html\">AccessError</a></li><li><a href=\"struct.Builder.html\">Builder</a></li><li><a href=\"struct.JoinHandle.html\">JoinHandle</a></li><li><a href=\"struct.LocalKey.html\">LocalKey</a></li><li><a href=\"struct.Scope.html\">Scope</a></li><li><a href=\"struct.ScopedJoinHandle.html\">ScopedJoinHandle</a></li><li><a href=\"struct.Thread.html\">Thread</a></li><li><a href=\"struct.ThreadId.html\">ThreadId</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.available_parallelism.html\">available_parallelism</a></li><li><a href=\"fn.current.html\">current</a></li><li><a href=\"fn.panicking.html\">panicking</a></li><li><a href=\"fn.park.html\">park</a></li><li><a href=\"fn.park_timeout.html\">park_timeout</a></li><li><a href=\"fn.park_timeout_ms.html\">park_timeout_ms</a></li><li><a href=\"fn.scope.html\">scope</a></li><li><a href=\"fn.sleep.html\">sleep</a></li><li><a href=\"fn.sleep_ms.html\">sleep_ms</a></li><li><a href=\"fn.sleep_until.html\">sleep_until</a></li><li><a href=\"fn.spawn.html\">spawn</a></li><li><a href=\"fn.yield_now.html\">yield_now</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">thread</a>::<wbr><a class=\"fn\" href=\"#\">panicking</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/thread/mod.rs.html#835-837\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn panicking() -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Determines whether the current thread is unwinding because of panic.</p>\n<p>A common use of this feature is to poison shared resources when writing\nunsafe code, by checking <code>panicking</code> when the <code>drop</code> is called.</p>\n<p>This is usually not needed when writing safe code, as <a href=\"../sync/struct.Mutex.html\" title=\"struct std::sync::Mutex\"><code>Mutex</code>es</a>\nalready poison themselves when a thread panics while holding the lock.</p>\n<p>This can also be used in multithreaded applications, in order to send a\nmessage to other threads warning that a thread has panicked (e.g., for\nmonitoring purposes).</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">struct </span>SomeStruct;\n\n<span class=\"kw\">impl </span>Drop <span class=\"kw\">for </span>SomeStruct {\n    <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"kw\">if </span>thread::panicking() {\n            <span class=\"macro\">println!</span>(<span class=\"string\">\"dropped while unwinding\"</span>);\n        } <span class=\"kw\">else </span>{\n            <span class=\"macro\">println!</span>(<span class=\"string\">\"dropped while not unwinding\"</span>);\n        }\n    }\n}\n\n{\n    <span class=\"macro\">print!</span>(<span class=\"string\">\"a: \"</span>);\n    <span class=\"kw\">let </span>a = SomeStruct;\n}\n\n{\n    <span class=\"macro\">print!</span>(<span class=\"string\">\"b: \"</span>);\n    <span class=\"kw\">let </span>b = SomeStruct;\n    <span class=\"macro\">panic!</span>()\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++%0A++++struct+SomeStruct;%0A++++%0A++++impl+Drop+for+SomeStruct+%7B%0A++++++++fn+drop(%26mut+self)+%7B%0A++++++++++++if+thread::panicking()+%7B%0A++++++++++++++++println!(%22dropped+while+unwinding%22);%0A++++++++++++%7D+else+%7B%0A++++++++++++++++println!(%22dropped+while+not+unwinding%22);%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++%7B%0A++++++++print!(%22a:+%22);%0A++++++++let+a+=+SomeStruct;%0A++++%7D%0A++++%0A++++%7B%0A++++++++print!(%22b:+%22);%0A++++++++let+b+=+SomeStruct;%0A++++++++panic!()%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:13:06.530Z"
}