{
	"title": "FileType in std::fs - Rust",
	"url": "https://doc.rust-lang.org/stable/std/fs/struct.FileType.html",
	"markdown": "# FileType in std::fs - Rust\n\n## Struct [std](../index.html)::[fs](index.html)::[FileType](#)\n\n1.1.0 Â· [source](about:blank/src/std/fs.rs.html#219) Â·\n\n```\npub struct FileType(/* private fields */);\n```\n\nExpand description\n\nA structure representing a type of file with accessors for each file type. It is returned by [`Metadata::file_type`](about:blank/struct.Metadata.html#method.file_type \"method std::fs::Metadata::file_type\") method.\n\n[source](about:blank/src/std/fs.rs.html#1679-1775)[Â§](#impl-FileType)\n\n1.1.0 Â· [source](about:blank/src/std/fs.rs.html#1703-1705)\n\nTests whether this file type represents a directory. The result is mutually exclusive to the results of [`is_file`](about:blank/struct.FileType.html#method.is_file \"method std::fs::FileType::is_file\") and [`is_symlink`](about:blank/struct.FileType.html#method.is_symlink \"method std::fs::FileType::is_symlink\"); only zero or one of these tests may pass.\n\n##### [Â§](#examples)Examples\n\n```\nfn main() -> std::io::Result<()> {\n    use std::fs;\n\n    let metadata = fs::metadata(\"foo.txt\")?;\n    let file_type = metadata.file_type();\n\n    assert_eq!(file_type.is_dir(), false);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++use+std::fs;%0A%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A++++let+file_type+=+metadata.file_type();%0A%0A++++assert_eq!(file_type.is_dir(),+false);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 Â· [source](about:blank/src/std/fs.rs.html#1736-1738)\n\nTests whether this file type represents a regular file. The result is mutually exclusive to the results of [`is_dir`](about:blank/struct.FileType.html#method.is_dir \"method std::fs::FileType::is_dir\") and [`is_symlink`](about:blank/struct.FileType.html#method.is_symlink \"method std::fs::FileType::is_symlink\"); only zero or one of these tests may pass.\n\nWhen the goal is simply to read from (or write to) the source, the most reliable way to test the source can be read (or written to) is to open it. Only using `is_file` can break workflows like `diff <( prog_a )` on a Unix-like system for example. See [`File::open`](about:blank/struct.File.html#method.open \"associated function std::fs::File::open\") or [`OpenOptions::open`](about:blank/struct.OpenOptions.html#method.open \"method std::fs::OpenOptions::open\") for more information.\n\n##### [Â§](#examples-1)Examples\n\n```\nfn main() -> std::io::Result<()> {\n    use std::fs;\n\n    let metadata = fs::metadata(\"foo.txt\")?;\n    let file_type = metadata.file_type();\n\n    assert_eq!(file_type.is_file(), true);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++use+std::fs;%0A%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A++++let+file_type+=+metadata.file_type();%0A%0A++++assert_eq!(file_type.is_file(),+true);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 Â· [source](about:blank/src/std/fs.rs.html#1772-1774)\n\nTests whether this file type represents a symbolic link. The result is mutually exclusive to the results of [`is_dir`](about:blank/struct.FileType.html#method.is_dir \"method std::fs::FileType::is_dir\") and [`is_file`](about:blank/struct.FileType.html#method.is_file \"method std::fs::FileType::is_file\"); only zero or one of these tests may pass.\n\nThe underlying [`Metadata`](struct.Metadata.html \"struct std::fs::Metadata\") struct needs to be retrieved with the [`fs::symlink_metadata`](fn.symlink_metadata.html \"fn std::fs::symlink_metadata\") function and not the [`fs::metadata`](fn.metadata.html \"fn std::fs::metadata\") function. The [`fs::metadata`](fn.metadata.html \"fn std::fs::metadata\") function follows symbolic links, so [`is_symlink`](about:blank/struct.FileType.html#method.is_symlink \"method std::fs::FileType::is_symlink\") would always return `false` for the target file.\n\n##### [Â§](#examples-2)Examples\n\n```\nuse std::fs;\n\nfn main() -> std::io::Result<()> {\n    let metadata = fs::symlink_metadata(\"foo.txt\")?;\n    let file_type = metadata.file_type();\n\n    assert_eq!(file_type.is_symlink(), false);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::symlink_metadata(%22foo.txt%22)?;%0A++++let+file_type+=+metadata.file_type();%0A%0A++++assert_eq!(file_type.is_symlink(),+false);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.1.0 Â· [source](about:blank/src/std/fs.rs.html#217)[Â§](#impl-Clone-for-FileType)\n\n1.16.0 Â· [source](about:blank/src/std/fs.rs.html#1778-1786)[Â§](#impl-Debug-for-FileType)\n\n1.5.0 Â· [source](about:blank/src/std/os/unix/fs.rs.html#851-864)[Â§](#impl-FileTypeExt-for-FileType)\n\nAvailable on **Unix** only.\n\n1.64.0 Â· [source](about:blank/src/std/os/windows/fs.rs.html#521-528)[Â§](#impl-FileTypeExt-for-FileType-1)\n\nAvailable on **Windows** only.\n\n[source](about:blank/src/std/os/windows/fs.rs.html#522-524)[Â§](#method.is_symlink_dir)\n\nReturns `true` if this file type is a symbolic link that is also a directory.\n\n[source](about:blank/src/std/os/windows/fs.rs.html#525-527)[Â§](#method.is_symlink_file)\n\nReturns `true` if this file type is a symbolic link that is also a file.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#477-490)[Â§](#impl-FileTypeExt-for-FileType-2)\n\nAvailable on **WASI** only.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#478-480)[Â§](#method.is_block_device-1)\n\nðŸ”¬This is a nightly-only experimental API. (`wasi_ext`Â [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReturns `true` if this file type is a block device.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#481-483)[Â§](#method.is_char_device-1)\n\nðŸ”¬This is a nightly-only experimental API. (`wasi_ext`Â [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReturns `true` if this file type is a character device.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#484-486)[Â§](#method.is_socket_dgram)\n\nðŸ”¬This is a nightly-only experimental API. (`wasi_ext`Â [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReturns `true` if this file type is a socket datagram.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#487-489)[Â§](#method.is_socket_stream)\n\nðŸ”¬This is a nightly-only experimental API. (`wasi_ext`Â [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReturns `true` if this file type is a socket stream.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#472-474)[Â§](#method.is_socket-1)\n\nðŸ”¬This is a nightly-only experimental API. (`wasi_ext`Â [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReturns `true` if this file type is any type of socket.\n\n1.1.0 Â· [source](about:blank/src/std/fs.rs.html#217)[Â§](#impl-Hash-for-FileType)\n\n1.1.0 Â· [source](about:blank/src/std/fs.rs.html#217)[Â§](#impl-PartialEq-for-FileType)\n\n[source](about:blank/src/std/fs.rs.html#217)[Â§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[Â§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.1.0 Â· [source](about:blank/src/std/fs.rs.html#217)[Â§](#impl-Copy-for-FileType)\n\n1.1.0 Â· [source](about:blank/src/std/fs.rs.html#217)[Â§](#impl-Eq-for-FileType)\n\n1.1.0 Â· [source](about:blank/src/std/fs.rs.html#217)[Â§](#impl-StructuralPartialEq-for-FileType)\n\n[Â§](#impl-Freeze-for-FileType)\n\n[Â§](#impl-RefUnwindSafe-for-FileType)\n\n[Â§](#impl-Send-for-FileType)\n\n[Â§](#impl-Sync-for-FileType)\n\n[Â§](#impl-Unpin-for-FileType)\n\n[Â§](#impl-UnwindSafe-for-FileType)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[Â§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[Â§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[Â§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[Â§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[Â§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[Â§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[Â§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[Â§](#impl-ToOwned-for-T)\n\n[Â§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[Â§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[Â§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[Â§](#impl-TryFrom%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[Â§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[Â§](#impl-TryInto%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[Â§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A structure representing a type of file with accessors for each file type. It is returned by `Metadata::file_type` method.\"><title>FileType in std::fs - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">FileType</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">FileType</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.is_dir\">is_dir</a></li><li><a href=\"#method.is_file\">is_file</a></li><li><a href=\"#method.is_symlink\">is_symlink</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-FileType\">Clone</a></li><li><a href=\"#impl-Copy-for-FileType\">Copy</a></li><li><a href=\"#impl-Debug-for-FileType\">Debug</a></li><li><a href=\"#impl-Eq-for-FileType\">Eq</a></li><li><a href=\"#impl-FileTypeExt-for-FileType\">FileTypeExt</a></li><li><a href=\"#impl-FileTypeExt-for-FileType-1\">FileTypeExt</a></li><li><a href=\"#impl-FileTypeExt-for-FileType-2\">FileTypeExt</a></li><li><a href=\"#impl-Hash-for-FileType\">Hash</a></li><li><a href=\"#impl-PartialEq-for-FileType\">PartialEq</a></li><li><a href=\"#impl-StructuralPartialEq-for-FileType\">StructuralPartialEq</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-FileType\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-FileType\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-FileType\">Send</a></li><li><a href=\"#impl-Sync-for-FileType\">Sync</a></li><li><a href=\"#impl-Unpin-for-FileType\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-FileType\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::fs</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.DirBuilder.html\">DirBuilder</a></li><li><a href=\"struct.DirEntry.html\">DirEntry</a></li><li><a href=\"struct.File.html\">File</a></li><li><a href=\"struct.FileTimes.html\">FileTimes</a></li><li><a href=\"struct.FileType.html\">FileType</a></li><li><a href=\"struct.Metadata.html\">Metadata</a></li><li><a href=\"struct.OpenOptions.html\">OpenOptions</a></li><li><a href=\"struct.Permissions.html\">Permissions</a></li><li><a href=\"struct.ReadDir.html\">ReadDir</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.canonicalize.html\">canonicalize</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.create_dir.html\">create_dir</a></li><li><a href=\"fn.create_dir_all.html\">create_dir_all</a></li><li><a href=\"fn.hard_link.html\">hard_link</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_dir.html\">read_dir</a></li><li><a href=\"fn.read_link.html\">read_link</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.remove_dir.html\">remove_dir</a></li><li><a href=\"fn.remove_dir_all.html\">remove_dir_all</a></li><li><a href=\"fn.remove_file.html\">remove_file</a></li><li><a href=\"fn.rename.html\">rename</a></li><li><a href=\"fn.set_permissions.html\">set_permissions</a></li><li><a href=\"fn.soft_link.html\">soft_link</a></li><li><a href=\"fn.symlink_metadata.html\">symlink_metadata</a></li><li><a href=\"fn.try_exists.html\">try_exists</a></li><li><a href=\"fn.write.html\">write</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">fs</a>::<wbr><a class=\"struct\" href=\"#\">FileType</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> Â· <a class=\"src\" href=\"../../src/std/fs.rs.html#219\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct FileType(<span class=\"comment\">/* private fields */</span>);</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A structure representing a type of file with accessors for each file type.\nIt is returned by <a href=\"struct.Metadata.html#method.file_type\" title=\"method std::fs::Metadata::file_type\"><code>Metadata::file_type</code></a> method.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FileType\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#1679-1775\">source</a><a href=\"#impl-FileType\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_dir\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> Â· <a class=\"src\" href=\"../../src/std/fs.rs.html#1703-1705\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_dir\" class=\"fn\">is_dir</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Tests whether this file type represents a directory. The\nresult is mutually exclusive to the results of\n<a href=\"struct.FileType.html#method.is_file\" title=\"method std::fs::FileType::is_file\"><code>is_file</code></a> and <a href=\"struct.FileType.html#method.is_symlink\" title=\"method std::fs::FileType::is_symlink\"><code>is_symlink</code></a>; only zero or one of these\ntests may pass.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">use </span>std::fs;\n\n    <span class=\"kw\">let </span>metadata = fs::metadata(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>file_type = metadata.file_type();\n\n    <span class=\"macro\">assert_eq!</span>(file_type.is_dir(), <span class=\"bool-val\">false</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++use+std::fs;%0A%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A++++let+file_type+=+metadata.file_type();%0A%0A++++assert_eq!(file_type.is_dir(),+false);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_file\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> Â· <a class=\"src\" href=\"../../src/std/fs.rs.html#1736-1738\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_file\" class=\"fn\">is_file</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Tests whether this file type represents a regular file.\nThe result is mutually exclusive to the results of\n<a href=\"struct.FileType.html#method.is_dir\" title=\"method std::fs::FileType::is_dir\"><code>is_dir</code></a> and <a href=\"struct.FileType.html#method.is_symlink\" title=\"method std::fs::FileType::is_symlink\"><code>is_symlink</code></a>; only zero or one of these\ntests may pass.</p>\n<p>When the goal is simply to read from (or write to) the source, the most\nreliable way to test the source can be read (or written to) is to open\nit. Only using <code>is_file</code> can break workflows like <code>diff &lt;( prog_a )</code> on\na Unix-like system for example. See <a href=\"struct.File.html#method.open\" title=\"associated function std::fs::File::open\"><code>File::open</code></a> or\n<a href=\"struct.OpenOptions.html#method.open\" title=\"method std::fs::OpenOptions::open\"><code>OpenOptions::open</code></a> for more information.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">use </span>std::fs;\n\n    <span class=\"kw\">let </span>metadata = fs::metadata(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>file_type = metadata.file_type();\n\n    <span class=\"macro\">assert_eq!</span>(file_type.is_file(), <span class=\"bool-val\">true</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++use+std::fs;%0A%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A++++let+file_type+=+metadata.file_type();%0A%0A++++assert_eq!(file_type.is_file(),+true);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_symlink\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> Â· <a class=\"src\" href=\"../../src/std/fs.rs.html#1772-1774\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_symlink\" class=\"fn\">is_symlink</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Tests whether this file type represents a symbolic link.\nThe result is mutually exclusive to the results of\n<a href=\"struct.FileType.html#method.is_dir\" title=\"method std::fs::FileType::is_dir\"><code>is_dir</code></a> and <a href=\"struct.FileType.html#method.is_file\" title=\"method std::fs::FileType::is_file\"><code>is_file</code></a>; only zero or one of these\ntests may pass.</p>\n<p>The underlying <a href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\"><code>Metadata</code></a> struct needs to be retrieved\nwith the <a href=\"fn.symlink_metadata.html\" title=\"fn std::fs::symlink_metadata\"><code>fs::symlink_metadata</code></a> function and not the\n<a href=\"fn.metadata.html\" title=\"fn std::fs::metadata\"><code>fs::metadata</code></a> function. The <a href=\"fn.metadata.html\" title=\"fn std::fs::metadata\"><code>fs::metadata</code></a> function\nfollows symbolic links, so <a href=\"struct.FileType.html#method.is_symlink\" title=\"method std::fs::FileType::is_symlink\"><code>is_symlink</code></a> would always\nreturn <code>false</code> for the target file.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>metadata = fs::symlink_metadata(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>file_type = metadata.file_type();\n\n    <span class=\"macro\">assert_eq!</span>(file_type.is_symlink(), <span class=\"bool-val\">false</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::symlink_metadata(%22foo.txt%22)?;%0A++++let+file_type+=+metadata.file_type();%0A%0A++++assert_eq!(file_type.is_symlink(),+false);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-FileType\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> Â· <a class=\"src\" href=\"../../src/std/fs.rs.html#217\">source</a></span><a href=\"#impl-Clone-for-FileType\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#217\">source</a><a href=\"#method.clone\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-FileType\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> Â· <a class=\"src\" href=\"../../src/std/fs.rs.html#1778-1786\">source</a></span><a href=\"#impl-Debug-for-FileType\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#1779-1785\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FileTypeExt-for-FileType\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> Â· <a class=\"src\" href=\"../../src/std/os/unix/fs.rs.html#851-864\">source</a></span><a href=\"#impl-FileTypeExt-for-FileType\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/unix/fs/trait.FileTypeExt.html\" title=\"trait std::os::unix::fs::FileTypeExt\">FileTypeExt</a> for <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_block_device\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#852-854\">source</a><a href=\"#method.is_block_device\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.FileTypeExt.html#tymethod.is_block_device\" class=\"fn\">is_block_device</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Returns <code>true</code> if this file type is a block device. <a href=\"../os/unix/fs/trait.FileTypeExt.html#tymethod.is_block_device\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_char_device\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#855-857\">source</a><a href=\"#method.is_char_device\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.FileTypeExt.html#tymethod.is_char_device\" class=\"fn\">is_char_device</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Returns <code>true</code> if this file type is a char device. <a href=\"../os/unix/fs/trait.FileTypeExt.html#tymethod.is_char_device\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_fifo\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#858-860\">source</a><a href=\"#method.is_fifo\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.FileTypeExt.html#tymethod.is_fifo\" class=\"fn\">is_fifo</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Returns <code>true</code> if this file type is a fifo. <a href=\"../os/unix/fs/trait.FileTypeExt.html#tymethod.is_fifo\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_socket\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#861-863\">source</a><a href=\"#method.is_socket\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.FileTypeExt.html#tymethod.is_socket\" class=\"fn\">is_socket</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Returns <code>true</code> if this file type is a socket. <a href=\"../os/unix/fs/trait.FileTypeExt.html#tymethod.is_socket\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FileTypeExt-for-FileType-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> Â· <a class=\"src\" href=\"../../src/std/os/windows/fs.rs.html#521-528\">source</a></span><a href=\"#impl-FileTypeExt-for-FileType-1\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/fs/trait.FileTypeExt.html\" title=\"trait std::os::windows::fs::FileTypeExt\">FileTypeExt</a> for <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_symlink_dir\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#522-524\">source</a><a href=\"#method.is_symlink_dir\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.FileTypeExt.html#tymethod.is_symlink_dir\" class=\"fn\">is_symlink_dir</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Returns <code>true</code> if this file type is a symbolic link that is also a directory.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_symlink_file\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#525-527\">source</a><a href=\"#method.is_symlink_file\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.FileTypeExt.html#tymethod.is_symlink_file\" class=\"fn\">is_symlink_file</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Returns <code>true</code> if this file type is a symbolic link that is also a file.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FileTypeExt-for-FileType-2\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#477-490\">source</a><a href=\"#impl-FileTypeExt-for-FileType-2\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/wasi/fs/trait.FileTypeExt.html\" title=\"trait std::os::wasi::fs::FileTypeExt\">FileTypeExt</a> for <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>WASI</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_block_device-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#478-480\">source</a><a href=\"#method.is_block_device-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileTypeExt.html#tymethod.is_block_device\" class=\"fn\">is_block_device</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Returns <code>true</code> if this file type is a block device.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_char_device-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#481-483\">source</a><a href=\"#method.is_char_device-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileTypeExt.html#tymethod.is_char_device\" class=\"fn\">is_char_device</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Returns <code>true</code> if this file type is a character device.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_socket_dgram\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#484-486\">source</a><a href=\"#method.is_socket_dgram\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileTypeExt.html#tymethod.is_socket_dgram\" class=\"fn\">is_socket_dgram</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Returns <code>true</code> if this file type is a socket datagram.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_socket_stream\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#487-489\">source</a><a href=\"#method.is_socket_stream\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileTypeExt.html#tymethod.is_socket_stream\" class=\"fn\">is_socket_stream</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Returns <code>true</code> if this file type is a socket stream.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_socket-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#472-474\">source</a><a href=\"#method.is_socket-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileTypeExt.html#method.is_socket\" class=\"fn\">is_socket</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Returns <code>true</code> if this file type is any type of socket.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-FileType\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> Â· <a class=\"src\" href=\"../../src/std/fs.rs.html#217\">source</a></span><a href=\"#impl-Hash-for-FileType\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#217\">source</a><a href=\"#method.hash\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut __H</a>)</h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-FileType\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> Â· <a class=\"src\" href=\"../../src/std/fs.rs.html#217\">source</a></span><a href=\"#impl-PartialEq-for-FileType\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#217\">source</a><a href=\"#method.eq\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><section id=\"impl-Copy-for-FileType\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> Â· <a class=\"src\" href=\"../../src/std/fs.rs.html#217\">source</a></span><a href=\"#impl-Copy-for-FileType\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3></section><section id=\"impl-Eq-for-FileType\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> Â· <a class=\"src\" href=\"../../src/std/fs.rs.html#217\">source</a></span><a href=\"#impl-Eq-for-FileType\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3></section><section id=\"impl-StructuralPartialEq-for-FileType\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> Â· <a class=\"src\" href=\"../../src/std/fs.rs.html#217\">source</a></span><a href=\"#impl-StructuralPartialEq-for-FileType\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-FileType\" class=\"impl\"><a href=\"#impl-Freeze-for-FileType\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3></section><section id=\"impl-RefUnwindSafe-for-FileType\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-FileType\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3></section><section id=\"impl-Send-for-FileType\" class=\"impl\"><a href=\"#impl-Send-for-FileType\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3></section><section id=\"impl-Sync-for-FileType\" class=\"impl\"><a href=\"#impl-Sync-for-FileType\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3></section><section id=\"impl-Unpin-for-FileType\" class=\"impl\"><a href=\"#impl-Unpin-for-FileType\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3></section><section id=\"impl-UnwindSafe-for-FileType\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-FileType\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:11.123Z"
}