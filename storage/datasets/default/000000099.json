{
	"title": "B - Operators and Symbols - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/appendix-02-operators.html",
	"markdown": "# B - Operators and Symbols\n\n## [Appendix B: Operators and Symbols](#appendix-b-operators-and-symbols)\n\nThis appendix contains a glossary of Rust’s syntax, including operators and other symbols that appear by themselves or in the context of paths, generics, trait bounds, macros, attributes, comments, tuples, and brackets.\n\n### [Operators](#operators)\n\nTable B-1 contains the operators in Rust, an example of how the operator would appear in context, a short explanation, and whether that operator is overloadable. If an operator is overloadable, the relevant trait to use to overload that operator is listed.\n\nTable B-1: Operators\n\n| Operator | Example | Explanation | Overloadable? |\n| --- | --- | --- | --- |\n| `!` | `ident!(...)`, `ident!{...}`, `ident![...]` | Macro expansion |  |\n| `!` | `!expr` | Bitwise or logical complement | `Not` |\n| `!=` | `expr != expr` | Nonequality comparison | `PartialEq` |\n| `%` | `expr % expr` | Arithmetic remainder | `Rem` |\n| `%=` | `var %= expr` | Arithmetic remainder and assignment | `RemAssign` |\n| `&` | `&expr`, `&mut expr` | Borrow |  |\n| `&` | `&type`, `&mut type`, `&'a type`, `&'a mut type` | Borrowed pointer type |  |\n| `&` | `expr & expr` | Bitwise AND | `BitAnd` |\n| `&=` | `var &= expr` | Bitwise AND and assignment | `BitAndAssign` |\n| `&&` | `expr && expr` | Short-circuiting logical AND |  |\n| `*` | `expr * expr` | Arithmetic multiplication | `Mul` |\n| `*=` | `var *= expr` | Arithmetic multiplication and assignment | `MulAssign` |\n| `*` | `*expr` | Dereference | `Deref` |\n| `*` | `*const type`, `*mut type` | Raw pointer |  |\n| `+` | `trait + trait`, `'a + trait` | Compound type constraint |  |\n| `+` | `expr + expr` | Arithmetic addition | `Add` |\n| `+=` | `var += expr` | Arithmetic addition and assignment | `AddAssign` |\n| `,` | `expr, expr` | Argument and element separator |  |\n| `-` | `- expr` | Arithmetic negation | `Neg` |\n| `-` | `expr - expr` | Arithmetic subtraction | `Sub` |\n| `-=` | `var -= expr` | Arithmetic subtraction and assignment | `SubAssign` |\n| `->` | `fn(...) -> type`, `|…| -> type` | Function and closure return type |  |\n| `.` | `expr.ident` | Member access |  |\n| `..` | `..`, `expr..`, `..expr`, `expr..expr` | Right-exclusive range literal | `PartialOrd` |\n| `..=` | `..=expr`, `expr..=expr` | Right-inclusive range literal | `PartialOrd` |\n| `..` | `..expr` | Struct literal update syntax |  |\n| `..` | `variant(x, ..)`, `struct_type { x, .. }` | “And the rest” pattern binding |  |\n| `...` | `expr...expr` | (Deprecated, use `..=` instead) In a pattern: inclusive range pattern |  |\n| `/` | `expr / expr` | Arithmetic division | `Div` |\n| `/=` | `var /= expr` | Arithmetic division and assignment | `DivAssign` |\n| `:` | `pat: type`, `ident: type` | Constraints |  |\n| `:` | `ident: expr` | Struct field initializer |  |\n| `:` | `'a: loop {...}` | Loop label |  |\n| `;` | `expr;` | Statement and item terminator |  |\n| `;` | `[...; len]` | Part of fixed-size array syntax |  |\n| `<<` | `expr << expr` | Left-shift | `Shl` |\n| `<<=` | `var <<= expr` | Left-shift and assignment | `ShlAssign` |\n| `<` | `expr < expr` | Less than comparison | `PartialOrd` |\n| `<=` | `expr <= expr` | Less than or equal to comparison | `PartialOrd` |\n| `=` | `var = expr`, `ident = type` | Assignment/equivalence |  |\n| `==` | `expr == expr` | Equality comparison | `PartialEq` |\n| `=>` | `pat => expr` | Part of match arm syntax |  |\n| `>` | `expr > expr` | Greater than comparison | `PartialOrd` |\n| `>=` | `expr >= expr` | Greater than or equal to comparison | `PartialOrd` |\n| `>>` | `expr >> expr` | Right-shift | `Shr` |\n| `>>=` | `var >>= expr` | Right-shift and assignment | `ShrAssign` |\n| `@` | `ident @ pat` | Pattern binding |  |\n| `^` | `expr ^ expr` | Bitwise exclusive OR | `BitXor` |\n| `^=` | `var ^= expr` | Bitwise exclusive OR and assignment | `BitXorAssign` |\n| `|` | `pat | pat` | Pattern alternatives |  |\n| `|` | `expr | expr` | Bitwise OR | `BitOr` |\n| `|=` | `var |= expr` | Bitwise OR and assignment | `BitOrAssign` |\n| `||` | `expr || expr` | Short-circuiting logical OR |  |\n| `?` | `expr?` | Error propagation |  |\n\n### [Non-operator Symbols](#non-operator-symbols)\n\nThe following list contains all symbols that don’t function as operators; that is, they don’t behave like a function or method call.\n\nTable B-2 shows symbols that appear on their own and are valid in a variety of locations.\n\nTable B-2: Stand-Alone Syntax\n\n| Symbol | Explanation |\n| --- | --- |\n| `'ident` | Named lifetime or loop label |\n| `...u8`, `...i32`, `...f64`, `...usize`, etc. | Numeric literal of specific type |\n| `\"...\"` | String literal |\n| `r\"...\"`, `r#\"...\"#`, `r##\"...\"##`, etc. | Raw string literal, escape characters not processed |\n| `b\"...\"` | Byte string literal; constructs an array of bytes instead of a string |\n| `br\"...\"`, `br#\"...\"#`, `br##\"...\"##`, etc. | Raw byte string literal, combination of raw and byte string literal |\n| `'...'` | Character literal |\n| `b'...'` | ASCII byte literal |\n| `|…| expr` | Closure |\n| `!` | Always empty bottom type for diverging functions |\n| `_` | “Ignored” pattern binding; also used to make integer literals readable |\n\nTable B-3 shows symbols that appear in the context of a path through the module hierarchy to an item.\n\nTable B-3: Path-Related Syntax\n\n| Symbol | Explanation |\n| --- | --- |\n| `ident::ident` | Namespace path |\n| `::path` | Path relative to the crate root (i.e., an explicitly absolute path) |\n| `self::path` | Path relative to the current module (i.e., an explicitly relative path). |\n| `super::path` | Path relative to the parent of the current module |\n| `type::ident`, `<type as trait>::ident` | Associated constants, functions, and types |\n| `<type>::...` | Associated item for a type that cannot be directly named (e.g., `<&T>::...`, `<[T]>::...`, etc.) |\n| `trait::method(...)` | Disambiguating a method call by naming the trait that defines it |\n| `type::method(...)` | Disambiguating a method call by naming the type for which it’s defined |\n| `<type as trait>::method(...)` | Disambiguating a method call by naming the trait and type |\n\nTable B-4 shows symbols that appear in the context of using generic type parameters.\n\nTable B-4: Generics\n\n| Symbol | Explanation |\n| --- | --- |\n| `path<...>` | Specifies parameters to generic type in a type (e.g., `Vec<u8>`) |\n| `path::<...>`, `method::<...>` | Specifies parameters to generic type, function, or method in an expression; often referred to as turbofish (e.g., `\"42\".parse::<i32>()`) |\n| `fn ident<...> ...` | Define generic function |\n| `struct ident<...> ...` | Define generic structure |\n| `enum ident<...> ...` | Define generic enumeration |\n| `impl<...> ...` | Define generic implementation |\n| `for<...> type` | Higher-ranked lifetime bounds |\n| `type<ident=type>` | A generic type where one or more associated types have specific assignments (e.g., `Iterator<Item=T>`) |\n\nTable B-5 shows symbols that appear in the context of constraining generic type parameters with trait bounds.\n\nTable B-5: Trait Bound Constraints\n\n| Symbol | Explanation |\n| --- | --- |\n| `T: U` | Generic parameter `T` constrained to types that implement `U` |\n| `T: 'a` | Generic type `T` must outlive lifetime `'a` (meaning the type cannot transitively contain any references with lifetimes shorter than `'a`) |\n| `T: 'static` | Generic type `T` contains no borrowed references other than `'static` ones |\n| `'b: 'a` | Generic lifetime `'b` must outlive lifetime `'a` |\n| `T: ?Sized` | Allow generic type parameter to be a dynamically sized type |\n| `'a + trait`, `trait + trait` | Compound type constraint |\n\nTable B-6 shows symbols that appear in the context of calling or defining macros and specifying attributes on an item.\n\nTable B-6: Macros and Attributes\n\n| Symbol | Explanation |\n| --- | --- |\n| `#[meta]` | Outer attribute |\n| `#![meta]` | Inner attribute |\n| `$ident` | Macro substitution |\n| `$ident:kind` | Macro capture |\n| `$(…)…` | Macro repetition |\n| `ident!(...)`, `ident!{...}`, `ident![...]` | Macro invocation |\n\nTable B-7 shows symbols that create comments.\n\nTable B-7: Comments\n\n| Symbol | Explanation |\n| --- | --- |\n| `//` | Line comment |\n| `//!` | Inner line doc comment |\n| `///` | Outer line doc comment |\n| `/*...*/` | Block comment |\n| `/*!...*/` | Inner block doc comment |\n| `/**...*/` | Outer block doc comment |\n\nTable B-8 shows symbols that appear in the context of using tuples.\n\nTable B-8: Tuples\n\n| Symbol | Explanation |\n| --- | --- |\n| `()` | Empty tuple (aka unit), both literal and type |\n| `(expr)` | Parenthesized expression |\n| `(expr,)` | Single-element tuple expression |\n| `(type,)` | Single-element tuple type |\n| `(expr, ...)` | Tuple expression |\n| `(type, ...)` | Tuple type |\n| `expr(expr, ...)` | Function call expression; also used to initialize tuple `struct`s and tuple `enum` variants |\n| `expr.0`, `expr.1`, etc. | Tuple indexing |\n\nTable B-9 shows the contexts in which curly braces are used.\n\nTable B-9: Curly Brackets\n\n| Context | Explanation |\n| --- | --- |\n| `{...}` | Block expression |\n| `Type {...}` | `struct` literal |\n\nTable B-10 shows the contexts in which square brackets are used.\n\nTable B-10: Square Brackets\n\n| Context | Explanation |\n| --- | --- |\n| `[...]` | Array literal |\n| `[expr; len]` | Array literal containing `len` copies of `expr` |\n| `[type; len]` | Array type containing `len` instances of `type` |\n| `expr[expr]` | Collection indexing. Overloadable (`Index`, `IndexMut`) |\n| `expr[..]`, `expr[a..]`, `expr[..b]`, `expr[a..b]` | Collection indexing pretending to be collection slicing, using `Range`, `RangeFrom`, `RangeTo`, or `RangeFull` as the “index” |",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>B - Operators and Symbols - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library’s Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and “Nightly Rust”</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h2 id=\"appendix-b-operators-and-symbols\"><a class=\"header\" href=\"#appendix-b-operators-and-symbols\">Appendix B: Operators and Symbols</a></h2>\n<p>This appendix contains a glossary of Rust’s syntax, including operators and\nother symbols that appear by themselves or in the context of paths, generics,\ntrait bounds, macros, attributes, comments, tuples, and brackets.</p>\n<h3 id=\"operators\"><a class=\"header\" href=\"#operators\">Operators</a></h3>\n<p>Table B-1 contains the operators in Rust, an example of how the operator would\nappear in context, a short explanation, and whether that operator is\noverloadable. If an operator is overloadable, the relevant trait to use to\noverload that operator is listed.</p>\n<p><span class=\"caption\">Table B-1: Operators</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Operator</th><th>Example</th><th>Explanation</th><th>Overloadable?</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">!</code></td><td><code class=\"hljs\">ident!(...)</code>, <code class=\"hljs\">ident!{...}</code>, <code class=\"hljs\">ident![...]</code></td><td>Macro expansion</td><td></td></tr>\n<tr><td><code class=\"hljs\">!</code></td><td><code class=\"hljs\">!expr</code></td><td>Bitwise or logical complement</td><td><code class=\"hljs\">Not</code></td></tr>\n<tr><td><code class=\"hljs\">!=</code></td><td><code class=\"hljs\">expr != expr</code></td><td>Nonequality comparison</td><td><code class=\"hljs\">PartialEq</code></td></tr>\n<tr><td><code class=\"hljs\">%</code></td><td><code class=\"hljs\">expr % expr</code></td><td>Arithmetic remainder</td><td><code class=\"hljs\">Rem</code></td></tr>\n<tr><td><code class=\"hljs\">%=</code></td><td><code class=\"hljs\">var %= expr</code></td><td>Arithmetic remainder and assignment</td><td><code class=\"hljs\">RemAssign</code></td></tr>\n<tr><td><code class=\"hljs\">&amp;</code></td><td><code class=\"hljs\">&amp;expr</code>, <code class=\"hljs\">&amp;mut expr</code></td><td>Borrow</td><td></td></tr>\n<tr><td><code class=\"hljs\">&amp;</code></td><td><code class=\"hljs\">&amp;type</code>, <code class=\"hljs\">&amp;mut type</code>, <code class=\"hljs\">&amp;'a type</code>, <code class=\"hljs\">&amp;'a mut type</code></td><td>Borrowed pointer type</td><td></td></tr>\n<tr><td><code class=\"hljs\">&amp;</code></td><td><code class=\"hljs\">expr &amp; expr</code></td><td>Bitwise AND</td><td><code class=\"hljs\">BitAnd</code></td></tr>\n<tr><td><code class=\"hljs\">&amp;=</code></td><td><code class=\"hljs\">var &amp;= expr</code></td><td>Bitwise AND and assignment</td><td><code class=\"hljs\">BitAndAssign</code></td></tr>\n<tr><td><code class=\"hljs\">&amp;&amp;</code></td><td><code class=\"hljs\">expr &amp;&amp; expr</code></td><td>Short-circuiting logical AND</td><td></td></tr>\n<tr><td><code class=\"hljs\">*</code></td><td><code class=\"hljs\">expr * expr</code></td><td>Arithmetic multiplication</td><td><code class=\"hljs\">Mul</code></td></tr>\n<tr><td><code class=\"hljs\">*=</code></td><td><code class=\"hljs\">var *= expr</code></td><td>Arithmetic multiplication and assignment</td><td><code class=\"hljs\">MulAssign</code></td></tr>\n<tr><td><code class=\"hljs\">*</code></td><td><code class=\"hljs\">*expr</code></td><td>Dereference</td><td><code class=\"hljs\">Deref</code></td></tr>\n<tr><td><code class=\"hljs\">*</code></td><td><code class=\"hljs\">*const type</code>, <code class=\"hljs\">*mut type</code></td><td>Raw pointer</td><td></td></tr>\n<tr><td><code class=\"hljs\">+</code></td><td><code class=\"hljs\">trait + trait</code>, <code class=\"hljs\">'a + trait</code></td><td>Compound type constraint</td><td></td></tr>\n<tr><td><code class=\"hljs\">+</code></td><td><code class=\"hljs\">expr + expr</code></td><td>Arithmetic addition</td><td><code class=\"hljs\">Add</code></td></tr>\n<tr><td><code class=\"hljs\">+=</code></td><td><code class=\"hljs\">var += expr</code></td><td>Arithmetic addition and assignment</td><td><code class=\"hljs\">AddAssign</code></td></tr>\n<tr><td><code class=\"hljs\">,</code></td><td><code class=\"hljs\">expr, expr</code></td><td>Argument and element separator</td><td></td></tr>\n<tr><td><code class=\"hljs\">-</code></td><td><code class=\"hljs\">- expr</code></td><td>Arithmetic negation</td><td><code class=\"hljs\">Neg</code></td></tr>\n<tr><td><code class=\"hljs\">-</code></td><td><code class=\"hljs\">expr - expr</code></td><td>Arithmetic subtraction</td><td><code class=\"hljs\">Sub</code></td></tr>\n<tr><td><code class=\"hljs\">-=</code></td><td><code class=\"hljs\">var -= expr</code></td><td>Arithmetic subtraction and assignment</td><td><code class=\"hljs\">SubAssign</code></td></tr>\n<tr><td><code class=\"hljs\">-&gt;</code></td><td><code class=\"hljs\">fn(...) -&gt; type</code>, <code class=\"hljs\">|…| -&gt; type</code></td><td>Function and closure return type</td><td></td></tr>\n<tr><td><code class=\"hljs\">.</code></td><td><code class=\"hljs\">expr.ident</code></td><td>Member access</td><td></td></tr>\n<tr><td><code class=\"hljs\">..</code></td><td><code class=\"hljs\">..</code>, <code class=\"hljs\">expr..</code>, <code class=\"hljs\">..expr</code>, <code class=\"hljs\">expr..expr</code></td><td>Right-exclusive range literal</td><td><code class=\"hljs\">PartialOrd</code></td></tr>\n<tr><td><code class=\"hljs\">..=</code></td><td><code class=\"hljs\">..=expr</code>, <code class=\"hljs\">expr..=expr</code></td><td>Right-inclusive range literal</td><td><code class=\"hljs\">PartialOrd</code></td></tr>\n<tr><td><code class=\"hljs\">..</code></td><td><code class=\"hljs\">..expr</code></td><td>Struct literal update syntax</td><td></td></tr>\n<tr><td><code class=\"hljs\">..</code></td><td><code class=\"hljs\">variant(x, ..)</code>, <code class=\"hljs\">struct_type { x, .. }</code></td><td>“And the rest” pattern binding</td><td></td></tr>\n<tr><td><code class=\"hljs\">...</code></td><td><code class=\"hljs\">expr...expr</code></td><td>(Deprecated, use <code class=\"hljs\">..=</code> instead) In a pattern: inclusive range pattern</td><td></td></tr>\n<tr><td><code class=\"hljs\">/</code></td><td><code class=\"hljs\">expr / expr</code></td><td>Arithmetic division</td><td><code class=\"hljs\">Div</code></td></tr>\n<tr><td><code class=\"hljs\">/=</code></td><td><code class=\"hljs\">var /= expr</code></td><td>Arithmetic division and assignment</td><td><code class=\"hljs\">DivAssign</code></td></tr>\n<tr><td><code class=\"hljs\">:</code></td><td><code class=\"hljs\">pat: type</code>, <code class=\"hljs\">ident: type</code></td><td>Constraints</td><td></td></tr>\n<tr><td><code class=\"hljs\">:</code></td><td><code class=\"hljs\">ident: expr</code></td><td>Struct field initializer</td><td></td></tr>\n<tr><td><code class=\"hljs\">:</code></td><td><code class=\"hljs\">'a: loop {...}</code></td><td>Loop label</td><td></td></tr>\n<tr><td><code class=\"hljs\">;</code></td><td><code class=\"hljs\">expr;</code></td><td>Statement and item terminator</td><td></td></tr>\n<tr><td><code class=\"hljs\">;</code></td><td><code class=\"hljs\">[...; len]</code></td><td>Part of fixed-size array syntax</td><td></td></tr>\n<tr><td><code class=\"hljs\">&lt;&lt;</code></td><td><code class=\"hljs\">expr &lt;&lt; expr</code></td><td>Left-shift</td><td><code class=\"hljs\">Shl</code></td></tr>\n<tr><td><code class=\"hljs\">&lt;&lt;=</code></td><td><code class=\"hljs\">var &lt;&lt;= expr</code></td><td>Left-shift and assignment</td><td><code class=\"hljs\">ShlAssign</code></td></tr>\n<tr><td><code class=\"hljs\">&lt;</code></td><td><code class=\"hljs\">expr &lt; expr</code></td><td>Less than comparison</td><td><code class=\"hljs\">PartialOrd</code></td></tr>\n<tr><td><code class=\"hljs\">&lt;=</code></td><td><code class=\"hljs\">expr &lt;= expr</code></td><td>Less than or equal to comparison</td><td><code class=\"hljs\">PartialOrd</code></td></tr>\n<tr><td><code class=\"hljs\">=</code></td><td><code class=\"hljs\">var = expr</code>, <code class=\"hljs\">ident = type</code></td><td>Assignment/equivalence</td><td></td></tr>\n<tr><td><code class=\"hljs\">==</code></td><td><code class=\"hljs\">expr == expr</code></td><td>Equality comparison</td><td><code class=\"hljs\">PartialEq</code></td></tr>\n<tr><td><code class=\"hljs\">=&gt;</code></td><td><code class=\"hljs\">pat =&gt; expr</code></td><td>Part of match arm syntax</td><td></td></tr>\n<tr><td><code class=\"hljs\">&gt;</code></td><td><code class=\"hljs\">expr &gt; expr</code></td><td>Greater than comparison</td><td><code class=\"hljs\">PartialOrd</code></td></tr>\n<tr><td><code class=\"hljs\">&gt;=</code></td><td><code class=\"hljs\">expr &gt;= expr</code></td><td>Greater than or equal to comparison</td><td><code class=\"hljs\">PartialOrd</code></td></tr>\n<tr><td><code class=\"hljs\">&gt;&gt;</code></td><td><code class=\"hljs\">expr &gt;&gt; expr</code></td><td>Right-shift</td><td><code class=\"hljs\">Shr</code></td></tr>\n<tr><td><code class=\"hljs\">&gt;&gt;=</code></td><td><code class=\"hljs\">var &gt;&gt;= expr</code></td><td>Right-shift and assignment</td><td><code class=\"hljs\">ShrAssign</code></td></tr>\n<tr><td><code class=\"hljs\">@</code></td><td><code class=\"hljs\">ident @ pat</code></td><td>Pattern binding</td><td></td></tr>\n<tr><td><code class=\"hljs\">^</code></td><td><code class=\"hljs\">expr ^ expr</code></td><td>Bitwise exclusive OR</td><td><code class=\"hljs\">BitXor</code></td></tr>\n<tr><td><code class=\"hljs\">^=</code></td><td><code class=\"hljs\">var ^= expr</code></td><td>Bitwise exclusive OR and assignment</td><td><code class=\"hljs\">BitXorAssign</code></td></tr>\n<tr><td><code class=\"hljs\">|</code></td><td><code class=\"hljs\">pat | pat</code></td><td>Pattern alternatives</td><td></td></tr>\n<tr><td><code class=\"hljs\">|</code></td><td><code class=\"hljs\">expr | expr</code></td><td>Bitwise OR</td><td><code class=\"hljs\">BitOr</code></td></tr>\n<tr><td><code class=\"hljs\">|=</code></td><td><code class=\"hljs\">var |= expr</code></td><td>Bitwise OR and assignment</td><td><code class=\"hljs\">BitOrAssign</code></td></tr>\n<tr><td><code class=\"hljs\">||</code></td><td><code class=\"hljs\">expr || expr</code></td><td>Short-circuiting logical OR</td><td></td></tr>\n<tr><td><code class=\"hljs\">?</code></td><td><code class=\"hljs\">expr?</code></td><td>Error propagation</td><td></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"non-operator-symbols\"><a class=\"header\" href=\"#non-operator-symbols\">Non-operator Symbols</a></h3>\n<p>The following list contains all symbols that don’t function as operators; that\nis, they don’t behave like a function or method call.</p>\n<p>Table B-2 shows symbols that appear on their own and are valid in a variety of\nlocations.</p>\n<p><span class=\"caption\">Table B-2: Stand-Alone Syntax</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">'ident</code></td><td>Named lifetime or loop label</td></tr>\n<tr><td><code class=\"hljs\">...u8</code>, <code class=\"hljs\">...i32</code>, <code class=\"hljs\">...f64</code>, <code class=\"hljs\">...usize</code>, etc.</td><td>Numeric literal of specific type</td></tr>\n<tr><td><code class=\"hljs\">\"...\"</code></td><td>String literal</td></tr>\n<tr><td><code class=\"hljs\">r\"...\"</code>, <code class=\"hljs\">r#\"...\"#</code>, <code class=\"hljs\">r##\"...\"##</code>, etc.</td><td>Raw string literal, escape characters not processed</td></tr>\n<tr><td><code class=\"hljs\">b\"...\"</code></td><td>Byte string literal; constructs an array of bytes instead of a string</td></tr>\n<tr><td><code class=\"hljs\">br\"...\"</code>, <code class=\"hljs\">br#\"...\"#</code>, <code class=\"hljs\">br##\"...\"##</code>, etc.</td><td>Raw byte string literal, combination of raw and byte string literal</td></tr>\n<tr><td><code class=\"hljs\">'...'</code></td><td>Character literal</td></tr>\n<tr><td><code class=\"hljs\">b'...'</code></td><td>ASCII byte literal</td></tr>\n<tr><td><code class=\"hljs\">|…| expr</code></td><td>Closure</td></tr>\n<tr><td><code class=\"hljs\">!</code></td><td>Always empty bottom type for diverging functions</td></tr>\n<tr><td><code class=\"hljs\">_</code></td><td>“Ignored” pattern binding; also used to make integer literals readable</td></tr>\n</tbody></table>\n</div>\n<p>Table B-3 shows symbols that appear in the context of a path through the module\nhierarchy to an item.</p>\n<p><span class=\"caption\">Table B-3: Path-Related Syntax</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">ident::ident</code></td><td>Namespace path</td></tr>\n<tr><td><code class=\"hljs\">::path</code></td><td>Path relative to the crate root (i.e., an explicitly absolute path)</td></tr>\n<tr><td><code class=\"hljs\">self::path</code></td><td>Path relative to the current module (i.e., an explicitly relative path).</td></tr>\n<tr><td><code class=\"hljs\">super::path</code></td><td>Path relative to the parent of the current module</td></tr>\n<tr><td><code class=\"hljs\">type::ident</code>, <code class=\"hljs\">&lt;type as trait&gt;::ident</code></td><td>Associated constants, functions, and types</td></tr>\n<tr><td><code class=\"hljs\">&lt;type&gt;::...</code></td><td>Associated item for a type that cannot be directly named (e.g., <code class=\"hljs\">&lt;&amp;T&gt;::...</code>, <code class=\"hljs\">&lt;[T]&gt;::...</code>, etc.)</td></tr>\n<tr><td><code class=\"hljs\">trait::method(...)</code></td><td>Disambiguating a method call by naming the trait that defines it</td></tr>\n<tr><td><code class=\"hljs\">type::method(...)</code></td><td>Disambiguating a method call by naming the type for which it’s defined</td></tr>\n<tr><td><code class=\"hljs\">&lt;type as trait&gt;::method(...)</code></td><td>Disambiguating a method call by naming the trait and type</td></tr>\n</tbody></table>\n</div>\n<p>Table B-4 shows symbols that appear in the context of using generic type\nparameters.</p>\n<p><span class=\"caption\">Table B-4: Generics</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">path&lt;...&gt;</code></td><td>Specifies parameters to generic type in a type (e.g., <code class=\"hljs\">Vec&lt;u8&gt;</code>)</td></tr>\n<tr><td><code class=\"hljs\">path::&lt;...&gt;</code>, <code class=\"hljs\">method::&lt;...&gt;</code></td><td>Specifies parameters to generic type, function, or method in an expression; often referred to as turbofish (e.g., <code class=\"hljs\">\"42\".parse::&lt;i32&gt;()</code>)</td></tr>\n<tr><td><code class=\"hljs\">fn ident&lt;...&gt; ...</code></td><td>Define generic function</td></tr>\n<tr><td><code class=\"hljs\">struct ident&lt;...&gt; ...</code></td><td>Define generic structure</td></tr>\n<tr><td><code class=\"hljs\">enum ident&lt;...&gt; ...</code></td><td>Define generic enumeration</td></tr>\n<tr><td><code class=\"hljs\">impl&lt;...&gt; ...</code></td><td>Define generic implementation</td></tr>\n<tr><td><code class=\"hljs\">for&lt;...&gt; type</code></td><td>Higher-ranked lifetime bounds</td></tr>\n<tr><td><code class=\"hljs\">type&lt;ident=type&gt;</code></td><td>A generic type where one or more associated types have specific assignments (e.g., <code class=\"hljs\">Iterator&lt;Item=T&gt;</code>)</td></tr>\n</tbody></table>\n</div>\n<p>Table B-5 shows symbols that appear in the context of constraining generic type\nparameters with trait bounds.</p>\n<p><span class=\"caption\">Table B-5: Trait Bound Constraints</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">T: U</code></td><td>Generic parameter <code class=\"hljs\">T</code> constrained to types that implement <code class=\"hljs\">U</code></td></tr>\n<tr><td><code class=\"hljs\">T: 'a</code></td><td>Generic type <code class=\"hljs\">T</code> must outlive lifetime <code class=\"hljs\">'a</code> (meaning the type cannot transitively contain any references with lifetimes shorter than <code class=\"hljs\">'a</code>)</td></tr>\n<tr><td><code class=\"hljs\">T: 'static</code></td><td>Generic type <code class=\"hljs\">T</code> contains no borrowed references other than <code class=\"hljs\">'static</code> ones</td></tr>\n<tr><td><code class=\"hljs\">'b: 'a</code></td><td>Generic lifetime <code class=\"hljs\">'b</code> must outlive lifetime <code class=\"hljs\">'a</code></td></tr>\n<tr><td><code class=\"hljs\">T: ?Sized</code></td><td>Allow generic type parameter to be a dynamically sized type</td></tr>\n<tr><td><code class=\"hljs\">'a + trait</code>, <code class=\"hljs\">trait + trait</code></td><td>Compound type constraint</td></tr>\n</tbody></table>\n</div>\n<p>Table B-6 shows symbols that appear in the context of calling or defining\nmacros and specifying attributes on an item.</p>\n<p><span class=\"caption\">Table B-6: Macros and Attributes</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">#[meta]</code></td><td>Outer attribute</td></tr>\n<tr><td><code class=\"hljs\">#![meta]</code></td><td>Inner attribute</td></tr>\n<tr><td><code class=\"hljs\">$ident</code></td><td>Macro substitution</td></tr>\n<tr><td><code class=\"hljs\">$ident:kind</code></td><td>Macro capture</td></tr>\n<tr><td><code class=\"hljs\">$(…)…</code></td><td>Macro repetition</td></tr>\n<tr><td><code class=\"hljs\">ident!(...)</code>, <code class=\"hljs\">ident!{...}</code>, <code class=\"hljs\">ident![...]</code></td><td>Macro invocation</td></tr>\n</tbody></table>\n</div>\n<p>Table B-7 shows symbols that create comments.</p>\n<p><span class=\"caption\">Table B-7: Comments</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">//</code></td><td>Line comment</td></tr>\n<tr><td><code class=\"hljs\">//!</code></td><td>Inner line doc comment</td></tr>\n<tr><td><code class=\"hljs\">///</code></td><td>Outer line doc comment</td></tr>\n<tr><td><code class=\"hljs\">/*...*/</code></td><td>Block comment</td></tr>\n<tr><td><code class=\"hljs\">/*!...*/</code></td><td>Inner block doc comment</td></tr>\n<tr><td><code class=\"hljs\">/**...*/</code></td><td>Outer block doc comment</td></tr>\n</tbody></table>\n</div>\n<p>Table B-8 shows symbols that appear in the context of using tuples.</p>\n<p><span class=\"caption\">Table B-8: Tuples</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">()</code></td><td>Empty tuple (aka unit), both literal and type</td></tr>\n<tr><td><code class=\"hljs\">(expr)</code></td><td>Parenthesized expression</td></tr>\n<tr><td><code class=\"hljs\">(expr,)</code></td><td>Single-element tuple expression</td></tr>\n<tr><td><code class=\"hljs\">(type,)</code></td><td>Single-element tuple type</td></tr>\n<tr><td><code class=\"hljs\">(expr, ...)</code></td><td>Tuple expression</td></tr>\n<tr><td><code class=\"hljs\">(type, ...)</code></td><td>Tuple type</td></tr>\n<tr><td><code class=\"hljs\">expr(expr, ...)</code></td><td>Function call expression; also used to initialize tuple <code class=\"hljs\">struct</code>s and tuple <code class=\"hljs\">enum</code> variants</td></tr>\n<tr><td><code class=\"hljs\">expr.0</code>, <code class=\"hljs\">expr.1</code>, etc.</td><td>Tuple indexing</td></tr>\n</tbody></table>\n</div>\n<p>Table B-9 shows the contexts in which curly braces are used.</p>\n<p><span class=\"caption\">Table B-9: Curly Brackets</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Context</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">{...}</code></td><td>Block expression</td></tr>\n<tr><td><code class=\"hljs\">Type {...}</code></td><td><code class=\"hljs\">struct</code> literal</td></tr>\n</tbody></table>\n</div>\n<p>Table B-10 shows the contexts in which square brackets are used.</p>\n<p><span class=\"caption\">Table B-10: Square Brackets</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Context</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">[...]</code></td><td>Array literal</td></tr>\n<tr><td><code class=\"hljs\">[expr; len]</code></td><td>Array literal containing <code class=\"hljs\">len</code> copies of <code class=\"hljs\">expr</code></td></tr>\n<tr><td><code class=\"hljs\">[type; len]</code></td><td>Array type containing <code class=\"hljs\">len</code> instances of <code class=\"hljs\">type</code></td></tr>\n<tr><td><code class=\"hljs\">expr[expr]</code></td><td>Collection indexing. Overloadable (<code class=\"hljs\">Index</code>, <code class=\"hljs\">IndexMut</code>)</td></tr>\n<tr><td><code class=\"hljs\">expr[..]</code>, <code class=\"hljs\">expr[a..]</code>, <code class=\"hljs\">expr[..b]</code>, <code class=\"hljs\">expr[a..b]</code></td><td>Collection indexing pretending to be collection slicing, using <code class=\"hljs\">Range</code>, <code class=\"hljs\">RangeFrom</code>, <code class=\"hljs\">RangeTo</code>, or <code class=\"hljs\">RangeFull</code> as the “index”</td></tr>\n</tbody></table>\n</div>\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"appendix-01-keywords.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"appendix-03-derivable-traits.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"appendix-01-keywords.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"appendix-03-derivable-traits.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:35.470Z"
}