{
	"title": "Instant in std::time - Rust",
	"url": "https://doc.rust-lang.org/stable/std/time/struct.Instant.html",
	"markdown": "# Instant in std::time - Rust\n\n## Struct [std](../index.html)::[time](index.html)::[Instant](#)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#156) ·\n\n```\npub struct Instant(/* private fields */);\n```\n\nExpand description\n\nA measurement of a monotonically nondecreasing clock. Opaque and useful only with [`Duration`](struct.Duration.html \"struct std::time::Duration\").\n\nInstants are always guaranteed, barring [platform bugs](about:blank/struct.Instant.html#monotonicity \"struct std::time::Instant\"), to be no less than any previously measured instant when created, and are often useful for tasks such as measuring benchmarks or timing how long an operation takes.\n\nNote, however, that instants are **not** guaranteed to be **steady**. In other words, each tick of the underlying clock might not be the same length (e.g. some seconds may be longer than others). An instant may jump forwards or experience time dilation (slow down or speed up), but it will never go backwards. As part of this non-guarantee it is also not specified whether system suspends count as elapsed time or not. The behavior varies across platforms and Rust versions.\n\nInstants are opaque types that can only be compared to one another. There is no method to get “the number of seconds” from an instant. Instead, it only allows measuring the duration between two instants (or comparing two instants).\n\nThe size of an `Instant` struct may vary depending on the target operating system.\n\nExample:\n\n```\nuse std::time::{Duration, Instant};\nuse std::thread::sleep;\n\nfn main() {\n   let now = Instant::now();\n\n   // we sleep for 2 seconds\n   sleep(Duration::new(2, 0));\n   // it prints '2'\n   println!(\"{}\", now.elapsed().as_secs());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::time::%7BDuration,+Instant%7D;%0Ause+std::thread::sleep;%0A%0Afn+main()+%7B%0A+++let+now+=+Instant::now();%0A%0A+++//+we+sleep+for+2+seconds%0A+++sleep(Duration::new(2,+0));%0A+++//+it+prints+%272%27%0A+++println!(%22%7B%7D%22,+now.elapsed().as_secs());%0A%7D&edition=2021)\n\n## [§](#os-specific-behaviors)OS-specific behaviors\n\nAn `Instant` is a wrapper around system-specific types and it may behave differently depending on the underlying operating system. For example, the following snippet is fine on Linux but panics on macOS:\n\n```\nuse std::time::{Instant, Duration};\n\nlet now = Instant::now();\nlet max_seconds = u64::MAX / 1_000_000_000;\nlet duration = Duration::new(max_seconds, 0);\nprintln!(\"{:?}\", now + duration);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::%7BInstant,+Duration%7D;%0A++++%0A++++let+now+=+Instant::now();%0A++++let+max_seconds+=+u64::MAX+/+1_000_000_000;%0A++++let+duration+=+Duration::new(max_seconds,+0);%0A++++println!(%22%7B:?%7D%22,+now+%2B+duration);%0A%7D&edition=2021)\n\n## [§](#underlying-system-calls)Underlying System calls\n\nThe following system calls are [currently](about:blank/io/index.html#platform-specific-behavior \"mod std::io\") being used by `now()` to find out the current time:\n\n**Disclaimer:** These system calls might change over time.\n\n> Note: mathematical operations like [`add`](about:blank/struct.Instant.html#method.add \"method std::time::Instant::add\") may panic if the underlying structure cannot represent the new point in time.\n\n### [§](#monotonicity)Monotonicity\n\nOn all platforms `Instant` will try to use an OS API that guarantees monotonic behavior if available, which is the case for all [tier 1](https://doc.rust-lang.org/rustc/platform-support.html) platforms. In practice such guarantees are – under rare circumstances – broken by hardware, virtualization or operating system bugs. To work around these bugs and platforms not offering monotonic clocks [`duration_since`](about:blank/struct.Instant.html#method.duration_since \"method std::time::Instant::duration_since\"), [`elapsed`](about:blank/struct.Instant.html#method.elapsed \"method std::time::Instant::elapsed\") and [`sub`](about:blank/struct.Instant.html#method.sub \"method std::time::Instant::sub\") saturate to zero. In older Rust versions this lead to a panic instead. [`checked_duration_since`](about:blank/struct.Instant.html#method.checked_duration_since \"method std::time::Instant::checked_duration_since\") can be used to detect and handle situations where monotonicity is violated, or `Instant`s are subtracted in the wrong order.\n\nThis workaround obscures programming errors where earlier and later instants are accidentally swapped. For this reason future Rust versions may reintroduce panics.\n\n[source](about:blank/src/std/time.rs.html#272-406)[§](#impl-Instant)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#284-286)\n\nReturns an instant corresponding to “now”.\n\n##### [§](#examples)Examples\n\n```\nuse std::time::Instant;\n\nlet now = Instant::now();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Instant;%0A++++%0A++++let+now+=+Instant::now();%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#313-315)\n\nReturns the amount of time elapsed from another instant to this one, or zero duration if that instant is later than this one.\n\n##### [§](#panics)Panics\n\nPrevious Rust versions panicked when `earlier` was later than `self`. Currently this method saturates. Future versions may reintroduce the panic in some circumstances. See [Monotonicity](about:blank/struct.Instant.html#monotonicity \"struct std::time::Instant\").\n\n##### [§](#examples-1)Examples\n\n```\nuse std::time::{Duration, Instant};\nuse std::thread::sleep;\n\nlet now = Instant::now();\nsleep(Duration::new(1, 0));\nlet new_now = Instant::now();\nprintln!(\"{:?}\", new_now.duration_since(now));\nprintln!(\"{:?}\", now.duration_since(new_now)); // 0ns\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::%7BDuration,+Instant%7D;%0A++++use+std::thread::sleep;%0A++++%0A++++let+now+=+Instant::now();%0A++++sleep(Duration::new(1,+0));%0A++++let+new_now+=+Instant::now();%0A++++println!(%22%7B:?%7D%22,+new_now.duration_since(now));%0A++++println!(%22%7B:?%7D%22,+now.duration_since(new_now));+//+0ns%0A%7D&edition=2021)\n\n1.39.0 · [source](about:blank/src/std/time.rs.html#339-341)\n\nReturns the amount of time elapsed from another instant to this one, or None if that instant is later than this one.\n\nDue to [monotonicity bugs](about:blank/struct.Instant.html#monotonicity \"struct std::time::Instant\"), even under correct logical ordering of the passed `Instant`s, this method can return `None`.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::time::{Duration, Instant};\nuse std::thread::sleep;\n\nlet now = Instant::now();\nsleep(Duration::new(1, 0));\nlet new_now = Instant::now();\nprintln!(\"{:?}\", new_now.checked_duration_since(now));\nprintln!(\"{:?}\", now.checked_duration_since(new_now)); // None\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::%7BDuration,+Instant%7D;%0A++++use+std::thread::sleep;%0A++++%0A++++let+now+=+Instant::now();%0A++++sleep(Duration::new(1,+0));%0A++++let+new_now+=+Instant::now();%0A++++println!(%22%7B:?%7D%22,+new_now.checked_duration_since(now));%0A++++println!(%22%7B:?%7D%22,+now.checked_duration_since(new_now));+//+None%0A%7D&edition=2021)\n\n1.39.0 · [source](about:blank/src/std/time.rs.html#360-362)\n\nReturns the amount of time elapsed from another instant to this one, or zero duration if that instant is later than this one.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::time::{Duration, Instant};\nuse std::thread::sleep;\n\nlet now = Instant::now();\nsleep(Duration::new(1, 0));\nlet new_now = Instant::now();\nprintln!(\"{:?}\", new_now.saturating_duration_since(now));\nprintln!(\"{:?}\", now.saturating_duration_since(new_now)); // 0ns\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::%7BDuration,+Instant%7D;%0A++++use+std::thread::sleep;%0A++++%0A++++let+now+=+Instant::now();%0A++++sleep(Duration::new(1,+0));%0A++++let+new_now+=+Instant::now();%0A++++println!(%22%7B:?%7D%22,+new_now.saturating_duration_since(now));%0A++++println!(%22%7B:?%7D%22,+now.saturating_duration_since(new_now));+//+0ns%0A%7D&edition=2021)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#387-389)\n\nReturns the amount of time elapsed since this instant.\n\n##### [§](#panics-1)Panics\n\nPrevious Rust versions panicked when the current time was earlier than self. Currently this method returns a Duration of zero in that case. Future versions may reintroduce the panic. See [Monotonicity](about:blank/struct.Instant.html#monotonicity \"struct std::time::Instant\").\n\n##### [§](#examples-4)Examples\n\n```\nuse std::thread::sleep;\nuse std::time::{Duration, Instant};\n\nlet instant = Instant::now();\nlet three_secs = Duration::from_secs(3);\nsleep(three_secs);\nassert!(instant.elapsed() >= three_secs);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread::sleep;%0A++++use+std::time::%7BDuration,+Instant%7D;%0A++++%0A++++let+instant+=+Instant::now();%0A++++let+three_secs+=+Duration::from_secs(3);%0A++++sleep(three_secs);%0A++++assert!(instant.elapsed()+%3E=+three_secs);%0A%7D&edition=2021)\n\n1.34.0 · [source](about:blank/src/std/time.rs.html#395-397)\n\nReturns `Some(t)` where `t` is the time `self + duration` if `t` can be represented as `Instant` (which means it’s inside the bounds of the underlying data structure), `None` otherwise.\n\n1.34.0 · [source](about:blank/src/std/time.rs.html#403-405)\n\nReturns `Some(t)` where `t` is the time `self - duration` if `t` can be represented as `Instant` (which means it’s inside the bounds of the underlying data structure), `None` otherwise.\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#409-419)[§](#impl-Add%3CDuration%3E-for-Instant)\n\n[source](about:blank/src/std/time.rs.html#416-418)[§](#method.add)\n\n##### [§](#panics-3)Panics\n\nThis function may panic if the resulting point in time cannot be represented by the underlying data structure. See [`Instant::checked_add`](about:blank/struct.Instant.html#method.checked_add \"method std::time::Instant::checked_add\") for a version without panic.\n\n[§](#associatedtype.Output-2)\n\nThe resulting type after applying the `+` operator.\n\n1.9.0 · [source](about:blank/src/std/time.rs.html#422-426)[§](#impl-AddAssign%3CDuration%3E-for-Instant)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#153)[§](#impl-Clone-for-Instant)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#464-468)[§](#impl-Debug-for-Instant)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#153)[§](#impl-Hash-for-Instant)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#153)[§](#impl-Ord-for-Instant)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#153)[§](#impl-PartialEq-for-Instant)\n\n[source](about:blank/src/std/time.rs.html#153)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#153)[§](#impl-PartialOrd-for-Instant)\n\n[source](about:blank/src/std/time.rs.html#153)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#429-435)[§](#impl-Sub%3CDuration%3E-for-Instant)\n\n[§](#associatedtype.Output)\n\nThe resulting type after applying the `-` operator.\n\n[source](about:blank/src/std/time.rs.html#432-434)[§](#method.sub)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#445-461)[§](#impl-Sub-for-Instant)\n\n[source](about:blank/src/std/time.rs.html#458-460)[§](#method.sub-1)\n\nReturns the amount of time elapsed from another instant to this one, or zero duration if that instant is later than this one.\n\n##### [§](#panics-2)Panics\n\nPrevious Rust versions panicked when `other` was later than `self`. Currently this method saturates. Future versions may reintroduce the panic in some circumstances. See [Monotonicity](about:blank/struct.Instant.html#monotonicity \"struct std::time::Instant\").\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `-` operator.\n\n1.9.0 · [source](about:blank/src/std/time.rs.html#438-442)[§](#impl-SubAssign%3CDuration%3E-for-Instant)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#153)[§](#impl-Copy-for-Instant)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#153)[§](#impl-Eq-for-Instant)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#153)[§](#impl-StructuralPartialEq-for-Instant)\n\n[§](#impl-Freeze-for-Instant)\n\n[§](#impl-RefUnwindSafe-for-Instant)\n\n[§](#impl-Send-for-Instant)\n\n[§](#impl-Sync-for-Instant)\n\n[§](#impl-Unpin-for-Instant)\n\n[§](#impl-UnwindSafe-for-Instant)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A measurement of a monotonically nondecreasing clock. Opaque and useful only with `Duration`.\"><title>Instant in std::time - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Instant</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Instant</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.checked_add\">checked_add</a></li><li><a href=\"#method.checked_duration_since\">checked_duration_since</a></li><li><a href=\"#method.checked_sub\">checked_sub</a></li><li><a href=\"#method.duration_since\">duration_since</a></li><li><a href=\"#method.elapsed\">elapsed</a></li><li><a href=\"#method.now\">now</a></li><li><a href=\"#method.saturating_duration_since\">saturating_duration_since</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Add%3CDuration%3E-for-Instant\">Add&lt;Duration&gt;</a></li><li><a href=\"#impl-AddAssign%3CDuration%3E-for-Instant\">AddAssign&lt;Duration&gt;</a></li><li><a href=\"#impl-Clone-for-Instant\">Clone</a></li><li><a href=\"#impl-Copy-for-Instant\">Copy</a></li><li><a href=\"#impl-Debug-for-Instant\">Debug</a></li><li><a href=\"#impl-Eq-for-Instant\">Eq</a></li><li><a href=\"#impl-Hash-for-Instant\">Hash</a></li><li><a href=\"#impl-Ord-for-Instant\">Ord</a></li><li><a href=\"#impl-PartialEq-for-Instant\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-Instant\">PartialOrd</a></li><li><a href=\"#impl-StructuralPartialEq-for-Instant\">StructuralPartialEq</a></li><li><a href=\"#impl-Sub-for-Instant\">Sub</a></li><li><a href=\"#impl-Sub%3CDuration%3E-for-Instant\">Sub&lt;Duration&gt;</a></li><li><a href=\"#impl-SubAssign%3CDuration%3E-for-Instant\">SubAssign&lt;Duration&gt;</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Instant\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Instant\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Instant\">Send</a></li><li><a href=\"#impl-Sync-for-Instant\">Sync</a></li><li><a href=\"#impl-Unpin-for-Instant\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Instant\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::time</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Duration.html\">Duration</a></li><li><a href=\"struct.Instant.html\">Instant</a></li><li><a href=\"struct.SystemTime.html\">SystemTime</a></li><li><a href=\"struct.SystemTimeError.html\">SystemTimeError</a></li><li><a href=\"struct.TryFromFloatSecsError.html\">TryFromFloatSecsError</a></li></ul><h3><a href=\"index.html#constants\">Constants</a></h3><ul class=\"block constant\"><li><a href=\"constant.UNIX_EPOCH.html\">UNIX_EPOCH</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">time</a>::<wbr><a class=\"struct\" href=\"#\">Instant</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#156\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Instant(<span class=\"comment\">/* private fields */</span>);</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A measurement of a monotonically nondecreasing clock.\nOpaque and useful only with <a href=\"struct.Duration.html\" title=\"struct std::time::Duration\"><code>Duration</code></a>.</p>\n<p>Instants are always guaranteed, barring <a href=\"struct.Instant.html#monotonicity\" title=\"struct std::time::Instant\">platform bugs</a>, to be no less than any previously\nmeasured instant when created, and are often useful for tasks such as measuring\nbenchmarks or timing how long an operation takes.</p>\n<p>Note, however, that instants are <strong>not</strong> guaranteed to be <strong>steady</strong>. In other\nwords, each tick of the underlying clock might not be the same length (e.g.\nsome seconds may be longer than others). An instant may jump forwards or\nexperience time dilation (slow down or speed up), but it will never go\nbackwards.\nAs part of this non-guarantee it is also not specified whether system suspends count as\nelapsed time or not. The behavior varies across platforms and Rust versions.</p>\n<p>Instants are opaque types that can only be compared to one another. There is\nno method to get “the number of seconds” from an instant. Instead, it only\nallows measuring the duration between two instants (or comparing two\ninstants).</p>\n<p>The size of an <code>Instant</code> struct may vary depending on the target operating\nsystem.</p>\n<p>Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::{Duration, Instant};\n<span class=\"kw\">use </span>std::thread::sleep;\n\n<span class=\"kw\">fn </span>main() {\n   <span class=\"kw\">let </span>now = Instant::now();\n\n   <span class=\"comment\">// we sleep for 2 seconds\n   </span>sleep(Duration::new(<span class=\"number\">2</span>, <span class=\"number\">0</span>));\n   <span class=\"comment\">// it prints '2'\n   </span><span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, now.elapsed().as_secs());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::time::%7BDuration,+Instant%7D;%0Ause+std::thread::sleep;%0A%0Afn+main()+%7B%0A+++let+now+=+Instant::now();%0A%0A+++//+we+sleep+for+2+seconds%0A+++sleep(Duration::new(2,+0));%0A+++//+it+prints+'2'%0A+++println!(%22%7B%7D%22,+now.elapsed().as_secs());%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"os-specific-behaviors\"><a class=\"doc-anchor\" href=\"#os-specific-behaviors\">§</a>OS-specific behaviors</h2>\n<p>An <code>Instant</code> is a wrapper around system-specific types and it may behave\ndifferently depending on the underlying operating system. For example,\nthe following snippet is fine on Linux but panics on macOS:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::{Instant, Duration};\n\n<span class=\"kw\">let </span>now = Instant::now();\n<span class=\"kw\">let </span>max_seconds = u64::MAX / <span class=\"number\">1_000_000_000</span>;\n<span class=\"kw\">let </span>duration = Duration::new(max_seconds, <span class=\"number\">0</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, now + duration);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::%7BInstant,+Duration%7D;%0A++++%0A++++let+now+=+Instant::now();%0A++++let+max_seconds+=+u64::MAX+/+1_000_000_000;%0A++++let+duration+=+Duration::new(max_seconds,+0);%0A++++println!(%22%7B:?%7D%22,+now+%2B+duration);%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"underlying-system-calls\"><a class=\"doc-anchor\" href=\"#underlying-system-calls\">§</a>Underlying System calls</h2>\n<p>The following system calls are <a href=\"../io/index.html#platform-specific-behavior\" title=\"mod std::io\">currently</a> being used by <code>now()</code> to find out\nthe current time:</p>\n<div><table><thead><tr><th>Platform</th><th>System call</th></tr></thead><tbody>\n<tr><td>SGX</td><td><a href=\"https://edp.fortanix.com/docs/api/fortanix_sgx_abi/struct.Usercalls.html#method.insecure_time\"><code>insecure_time</code> usercall</a>. More information on <a href=\"https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\">timekeeping in SGX</a></td></tr>\n<tr><td>UNIX</td><td><a href=\"https://linux.die.net/man/3/clock_gettime\">clock_gettime (Monotonic Clock)</a></td></tr>\n<tr><td>Darwin</td><td><a href=\"https://linux.die.net/man/3/clock_gettime\">clock_gettime (Monotonic Clock)</a></td></tr>\n<tr><td>VXWorks</td><td><a href=\"https://linux.die.net/man/3/clock_gettime\">clock_gettime (Monotonic Clock)</a></td></tr>\n<tr><td>SOLID</td><td><code>get_tim</code></td></tr>\n<tr><td>WASI</td><td><a href=\"https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/docs.md#clock_time_get\">__wasi_clock_time_get (Monotonic Clock)</a></td></tr>\n<tr><td>Windows</td><td><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/profileapi/nf-profileapi-queryperformancecounter\">QueryPerformanceCounter</a></td></tr>\n</tbody></table>\n</div>\n<p><strong>Disclaimer:</strong> These system calls might change over time.</p>\n<blockquote>\n<p>Note: mathematical operations like <a href=\"struct.Instant.html#method.add\" title=\"method std::time::Instant::add\"><code>add</code></a> may panic if the underlying\nstructure cannot represent the new point in time.</p>\n</blockquote>\n<h3 id=\"monotonicity\"><a class=\"doc-anchor\" href=\"#monotonicity\">§</a>Monotonicity</h3>\n<p>On all platforms <code>Instant</code> will try to use an OS API that guarantees monotonic behavior\nif available, which is the case for all <a href=\"https://doc.rust-lang.org/rustc/platform-support.html\">tier 1</a> platforms.\nIn practice such guarantees are – under rare circumstances – broken by hardware, virtualization\nor operating system bugs. To work around these bugs and platforms not offering monotonic clocks\n<a href=\"struct.Instant.html#method.duration_since\" title=\"method std::time::Instant::duration_since\"><code>duration_since</code></a>, <a href=\"struct.Instant.html#method.elapsed\" title=\"method std::time::Instant::elapsed\"><code>elapsed</code></a> and <a href=\"struct.Instant.html#method.sub\" title=\"method std::time::Instant::sub\"><code>sub</code></a> saturate to zero. In older Rust versions this\nlead to a panic instead. <a href=\"struct.Instant.html#method.checked_duration_since\" title=\"method std::time::Instant::checked_duration_since\"><code>checked_duration_since</code></a> can be used to detect and handle situations\nwhere monotonicity is violated, or <code>Instant</code>s are subtracted in the wrong order.</p>\n<p>This workaround obscures programming errors where earlier and later instants are accidentally\nswapped. For this reason future Rust versions may reintroduce panics.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Instant\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#272-406\">source</a><a href=\"#impl-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.now\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#284-286\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.now\" class=\"fn\">now</a>() -&gt; <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h4></section></summary><div class=\"docblock\"><p>Returns an instant corresponding to “now”.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::Instant;\n\n<span class=\"kw\">let </span>now = Instant::now();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::Instant;%0A++++%0A++++let+now+=+Instant::now();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.duration_since\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#313-315\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.duration_since\" class=\"fn\">duration_since</a>(&amp;self, earlier: <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Returns the amount of time elapsed from another instant to this one,\nor zero duration if that instant is later than this one.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Previous Rust versions panicked when <code>earlier</code> was later than <code>self</code>. Currently this\nmethod saturates. Future versions may reintroduce the panic in some circumstances.\nSee <a href=\"struct.Instant.html#monotonicity\" title=\"struct std::time::Instant\">Monotonicity</a>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::{Duration, Instant};\n<span class=\"kw\">use </span>std::thread::sleep;\n\n<span class=\"kw\">let </span>now = Instant::now();\nsleep(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>));\n<span class=\"kw\">let </span>new_now = Instant::now();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, new_now.duration_since(now));\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, now.duration_since(new_now)); <span class=\"comment\">// 0ns</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::%7BDuration,+Instant%7D;%0A++++use+std::thread::sleep;%0A++++%0A++++let+now+=+Instant::now();%0A++++sleep(Duration::new(1,+0));%0A++++let+new_now+=+Instant::now();%0A++++println!(%22%7B:?%7D%22,+new_now.duration_since(now));%0A++++println!(%22%7B:?%7D%22,+now.duration_since(new_now));+//+0ns%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_duration_since\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.39.0\">1.39.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#339-341\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.checked_duration_since\" class=\"fn\">checked_duration_since</a>(&amp;self, earlier: <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the amount of time elapsed from another instant to this one,\nor None if that instant is later than this one.</p>\n<p>Due to <a href=\"struct.Instant.html#monotonicity\" title=\"struct std::time::Instant\">monotonicity bugs</a>, even under correct logical ordering of the passed <code>Instant</code>s,\nthis method can return <code>None</code>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::{Duration, Instant};\n<span class=\"kw\">use </span>std::thread::sleep;\n\n<span class=\"kw\">let </span>now = Instant::now();\nsleep(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>));\n<span class=\"kw\">let </span>new_now = Instant::now();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, new_now.checked_duration_since(now));\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, now.checked_duration_since(new_now)); <span class=\"comment\">// None</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::%7BDuration,+Instant%7D;%0A++++use+std::thread::sleep;%0A++++%0A++++let+now+=+Instant::now();%0A++++sleep(Duration::new(1,+0));%0A++++let+new_now+=+Instant::now();%0A++++println!(%22%7B:?%7D%22,+new_now.checked_duration_since(now));%0A++++println!(%22%7B:?%7D%22,+now.checked_duration_since(new_now));+//+None%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_duration_since\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.39.0\">1.39.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#360-362\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.saturating_duration_since\" class=\"fn\">saturating_duration_since</a>(&amp;self, earlier: <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Returns the amount of time elapsed from another instant to this one,\nor zero duration if that instant is later than this one.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::{Duration, Instant};\n<span class=\"kw\">use </span>std::thread::sleep;\n\n<span class=\"kw\">let </span>now = Instant::now();\nsleep(Duration::new(<span class=\"number\">1</span>, <span class=\"number\">0</span>));\n<span class=\"kw\">let </span>new_now = Instant::now();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, new_now.saturating_duration_since(now));\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, now.saturating_duration_since(new_now)); <span class=\"comment\">// 0ns</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::%7BDuration,+Instant%7D;%0A++++use+std::thread::sleep;%0A++++%0A++++let+now+=+Instant::now();%0A++++sleep(Duration::new(1,+0));%0A++++let+new_now+=+Instant::now();%0A++++println!(%22%7B:?%7D%22,+new_now.saturating_duration_since(now));%0A++++println!(%22%7B:?%7D%22,+now.saturating_duration_since(new_now));+//+0ns%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.elapsed\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#387-389\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.elapsed\" class=\"fn\">elapsed</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Returns the amount of time elapsed since this instant.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Previous Rust versions panicked when the current time was earlier than self. Currently this\nmethod returns a Duration of zero in that case. Future versions may reintroduce the panic.\nSee <a href=\"struct.Instant.html#monotonicity\" title=\"struct std::time::Instant\">Monotonicity</a>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread::sleep;\n<span class=\"kw\">use </span>std::time::{Duration, Instant};\n\n<span class=\"kw\">let </span>instant = Instant::now();\n<span class=\"kw\">let </span>three_secs = Duration::from_secs(<span class=\"number\">3</span>);\nsleep(three_secs);\n<span class=\"macro\">assert!</span>(instant.elapsed() &gt;= three_secs);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread::sleep;%0A++++use+std::time::%7BDuration,+Instant%7D;%0A++++%0A++++let+instant+=+Instant::now();%0A++++let+three_secs+=+Duration::from_secs(3);%0A++++sleep(three_secs);%0A++++assert!(instant.elapsed()+%3E=+three_secs);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#395-397\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.checked_add\" class=\"fn\">checked_add</a>(&amp;self, duration: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> can be represented as\n<code>Instant</code> (which means it’s inside the bounds of the underlying data structure), <code>None</code>\notherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#403-405\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.checked_sub\" class=\"fn\">checked_sub</a>(&amp;self, duration: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> can be represented as\n<code>Instant</code> (which means it’s inside the bounds of the underlying data structure), <code>None</code>\notherwise.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add%3CDuration%3E-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#409-419\">source</a></span><a href=\"#impl-Add%3CDuration%3E-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#416-418\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>This function may panic if the resulting point in time cannot be represented by the\nunderlying data structure. See <a href=\"struct.Instant.html#method.checked_add\" title=\"method std::time::Instant::checked_add\"><code>Instant::checked_add</code></a> for a version without panic.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AddAssign%3CDuration%3E-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#422-426\">source</a></span><a href=\"#impl-AddAssign%3CDuration%3E-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#423-425\">source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>+=</code> operation. <a href=\"../ops/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#153\">source</a></span><a href=\"#impl-Clone-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#153\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#464-468\">source</a></span><a href=\"#impl-Debug-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#465-467\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#153\">source</a></span><a href=\"#impl-Hash-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#153\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut __H</a>)</h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#153\">source</a></span><a href=\"#impl-Ord-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#153\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#153\">source</a></span><a href=\"#impl-PartialEq-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#153\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#153\">source</a></span><a href=\"#impl-PartialOrd-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#153\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub%3CDuration%3E-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#429-435\">source</a></span><a href=\"#impl-Sub%3CDuration%3E-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#432-434\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#445-461\">source</a></span><a href=\"#impl-Sub-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a> for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#458-460\">source</a><a href=\"#method.sub-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a>) -&gt; <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Returns the amount of time elapsed from another instant to this one,\nor zero duration if that instant is later than this one.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Previous Rust versions panicked when <code>other</code> was later than <code>self</code>. Currently this\nmethod saturates. Future versions may reintroduce the panic in some circumstances.\nSee <a href=\"struct.Instant.html#monotonicity\" title=\"struct std::time::Instant\">Monotonicity</a>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SubAssign%3CDuration%3E-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#438-442\">source</a></span><a href=\"#impl-SubAssign%3CDuration%3E-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/time.rs.html#439-441\">source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>-=</code> operation. <a href=\"../ops/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details><section id=\"impl-Copy-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#153\">source</a></span><a href=\"#impl-Copy-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section><section id=\"impl-Eq-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#153\">source</a></span><a href=\"#impl-Eq-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section><section id=\"impl-StructuralPartialEq-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#153\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Instant\" class=\"impl\"><a href=\"#impl-Freeze-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section><section id=\"impl-RefUnwindSafe-for-Instant\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section><section id=\"impl-Send-for-Instant\" class=\"impl\"><a href=\"#impl-Send-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section><section id=\"impl-Sync-for-Instant\" class=\"impl\"><a href=\"#impl-Sync-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section><section id=\"impl-Unpin-for-Instant\" class=\"impl\"><a href=\"#impl-Unpin-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section><section id=\"impl-UnwindSafe-for-Instant\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:25:49.302Z"
}