{
	"title": "AtomicU8 in std::sync::atomic - Rust",
	"url": "https://doc.rust-lang.org/stable/std/sync/atomic/struct.AtomicU8.html",
	"markdown": "# AtomicU8 in std::sync::atomic - Rust\n\n```\n#[repr(C, align(1))]pub struct AtomicU8 { /* private fields */ }\n```\n\nExpand description\n\nAn integer type which can be safely shared between threads.\n\nThis type has the same size and bit validity as the underlying integer type, [`u8`](../../primitive.u8.html \"primitive u8\").\n\nFor more about the differences between atomic types and non-atomic types as well as information about the portability of this type, please see the [module-level documentation](index.html \"mod std::sync::atomic\").\n\n**Note:** This type is only available on platforms that support atomic loads and stores of [`u8`](../../primitive.u8.html \"primitive u8\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)[§](#impl-AtomicU8)\n\n1.34.0 (const: 1.34.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nCreates a new atomic integer.\n\n##### [§](#examples)Examples\n\n```\nuse std::sync::atomic::AtomicU8;\n\nlet atomic_forty_two = AtomicU8::new(42);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::AtomicU8;%0A++++%0A++++let+atomic_forty_two+=+AtomicU8::new(42);%0A%7D&edition=2021)\n\n1.75.0 (const: [unstable](https://github.com/rust-lang/rust/issues/108652 \"Tracking issue for const_atomic_from_ptr\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nCreates a new reference to an atomic integer from a pointer.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::sync::atomic::{self, AtomicU8};\n\n// Get a pointer to an allocated value\nlet ptr: *mut u8 = Box::into_raw(Box::new(0));\n\nassert!(ptr.cast::<AtomicU8>().is_aligned());\n\n{\n    // Create an atomic view of the allocated value\n    let atomic = unsafe {AtomicU8::from_ptr(ptr) };\n\n    // Use `atomic` for atomic operations, possibly share it with other threads\n    atomic.store(1, atomic::Ordering::Relaxed);\n}\n\n// It's ok to non-atomically access the value behind `ptr`,\n// since the reference to the atomic ended its lifetime in the block above\nassert_eq!(unsafe { *ptr }, 1);\n\n// Deallocate the value\nunsafe { drop(Box::from_raw(ptr)) }\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7Bself,+AtomicU8%7D;%0A++++%0A++++//+Get+a+pointer+to+an+allocated+value%0A++++let+ptr:+*mut+u8+=+Box::into_raw(Box::new(0));%0A++++%0A++++assert!(ptr.cast::%3CAtomicU8%3E().is_aligned());%0A++++%0A++++%7B%0A++++++++//+Create+an+atomic+view+of+the+allocated+value%0A++++++++let+atomic+=+unsafe+%7BAtomicU8::from_ptr(ptr)+%7D;%0A++++%0A++++++++//+Use+%60atomic%60+for+atomic+operations,+possibly+share+it+with+other+threads%0A++++++++atomic.store(1,+atomic::Ordering::Relaxed);%0A++++%7D%0A++++%0A++++//+It%27s+ok+to+non-atomically+access+the+value+behind+%60ptr%60,%0A++++//+since+the+reference+to+the+atomic+ended+its+lifetime+in+the+block+above%0A++++assert_eq!(unsafe+%7B+*ptr+%7D,+1);%0A++++%0A++++//+Deallocate+the+value%0A++++unsafe+%7B+drop(Box::from_raw(ptr))+%7D%0A%7D&edition=2021)\n\n##### [§](#safety)Safety\n\n-   `ptr` must be aligned to `align_of::<AtomicU8>()` (note that on some platforms this can be bigger than `align_of::<u8>()`).\n-   `ptr` must be [valid](about:blank/ptr/index.html#safety \"mod std::ptr\") for both reads and writes for the whole lifetime `'a`.\n-   You must adhere to the [Memory model for atomic accesses](about:blank/index.html#memory-model-for-atomic-accesses \"mod std::sync::atomic\"). In particular, it is not allowed to mix atomic and non-atomic accesses, or atomic accesses of different sizes, without synchronization.\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nReturns a mutable reference to the underlying integer.\n\nThis is safe because the mutable reference guarantees that no other threads are concurrently accessing the atomic data.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet mut some_var = AtomicU8::new(10);\nassert_eq!(*some_var.get_mut(), 10);\n*some_var.get_mut() = 5;\nassert_eq!(some_var.load(Ordering::SeqCst), 5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+mut+some_var+=+AtomicU8::new(10);%0A++++assert_eq!(*some_var.get_mut(),+10);%0A++++*some_var.get_mut()+=+5;%0A++++assert_eq!(some_var.load(Ordering::SeqCst),+5);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\n🔬This is a nightly-only experimental API. (`atomic_from_mut` [#76314](https://github.com/rust-lang/rust/issues/76314))\n\nGet atomic access to a `&mut u8`.\n\n##### [§](#examples-3)Examples\n\n```\n#![feature(atomic_from_mut)]\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet mut some_int = 123;\nlet a = AtomicU8::from_mut(&mut some_int);\na.store(100, Ordering::Relaxed);\nassert_eq!(some_int, 100);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(atomic_from_mut)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+mut+some_int+=+123;%0A++++let+a+=+AtomicU8::from_mut(%26mut+some_int);%0A++++a.store(100,+Ordering::Relaxed);%0A++++assert_eq!(some_int,+100);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\n🔬This is a nightly-only experimental API. (`atomic_from_mut` [#76314](https://github.com/rust-lang/rust/issues/76314))\n\nGet non-atomic access to a `&mut [AtomicU8]` slice\n\nThis is safe because the mutable reference guarantees that no other threads are concurrently accessing the atomic data.\n\n##### [§](#examples-4)Examples\n\n```\n#![feature(atomic_from_mut)]\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet mut some_ints = [const { AtomicU8::new(0) }; 10];\n\nlet view: &mut [u8] = AtomicU8::get_mut_slice(&mut some_ints);\nassert_eq!(view, [0; 10]);\nview\n    .iter_mut()\n    .enumerate()\n    .for_each(|(idx, int)| *int = idx as _);\n\nstd::thread::scope(|s| {\n    some_ints\n        .iter()\n        .enumerate()\n        .for_each(|(idx, int)| {\n            s.spawn(move || assert_eq!(int.load(Ordering::Relaxed), idx as _));\n        })\n});\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(atomic_from_mut)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+mut+some_ints+=+%5Bconst+%7B+AtomicU8::new(0)+%7D;+10%5D;%0A++++%0A++++let+view:+%26mut+%5Bu8%5D+=+AtomicU8::get_mut_slice(%26mut+some_ints);%0A++++assert_eq!(view,+%5B0;+10%5D);%0A++++view%0A++++++++.iter_mut()%0A++++++++.enumerate()%0A++++++++.for_each(%7C(idx,+int)%7C+*int+=+idx+as+_);%0A++++%0A++++std::thread::scope(%7Cs%7C+%7B%0A++++++++some_ints%0A++++++++++++.iter()%0A++++++++++++.enumerate()%0A++++++++++++.for_each(%7C(idx,+int)%7C+%7B%0A++++++++++++++++s.spawn(move+%7C%7C+assert_eq!(int.load(Ordering::Relaxed),+idx+as+_));%0A++++++++++++%7D)%0A++++%7D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\n🔬This is a nightly-only experimental API. (`atomic_from_mut` [#76314](https://github.com/rust-lang/rust/issues/76314))\n\nGet atomic access to a `&mut [u8]` slice.\n\n##### [§](#examples-5)Examples\n\n```\n#![feature(atomic_from_mut)]\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet mut some_ints = [0; 10];\nlet a = &*AtomicU8::from_mut_slice(&mut some_ints);\nstd::thread::scope(|s| {\n    for i in 0..a.len() {\n        s.spawn(move || a[i].store(i as _, Ordering::Relaxed));\n    }\n});\nfor (i, n) in some_ints.into_iter().enumerate() {\n    assert_eq!(i, n as usize);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(atomic_from_mut)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+mut+some_ints+=+%5B0;+10%5D;%0A++++let+a+=+%26*AtomicU8::from_mut_slice(%26mut+some_ints);%0A++++std::thread::scope(%7Cs%7C+%7B%0A++++++++for+i+in+0..a.len()+%7B%0A++++++++++++s.spawn(move+%7C%7C+a%5Bi%5D.store(i+as+_,+Ordering::Relaxed));%0A++++++++%7D%0A++++%7D);%0A++++for+(i,+n)+in+some_ints.into_iter().enumerate()+%7B%0A++++++++assert_eq!(i,+n+as+usize);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n1.34.0 (const: 1.79.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nConsumes the atomic and returns the contained value.\n\nThis is safe because passing `self` by value guarantees that no other threads are concurrently accessing the atomic data.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::sync::atomic::AtomicU8;\n\nlet some_var = AtomicU8::new(5);\nassert_eq!(some_var.into_inner(), 5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::AtomicU8;%0A++++%0A++++let+some_var+=+AtomicU8::new(5);%0A++++assert_eq!(some_var.into_inner(),+5);%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nLoads a value from the atomic integer.\n\n`load` takes an [`Ordering`](enum.Ordering.html \"enum std::sync::atomic::Ordering\") argument which describes the memory ordering of this operation. Possible values are [`SeqCst`](about:blank/enum.Ordering.html#variant.SeqCst \"variant std::sync::atomic::Ordering::SeqCst\"), [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") and [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n##### [§](#panics)Panics\n\nPanics if `order` is [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") or [`AcqRel`](about:blank/enum.Ordering.html#variant.AcqRel \"variant std::sync::atomic::Ordering::AcqRel\").\n\n##### [§](#examples-7)Examples\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet some_var = AtomicU8::new(5);\n\nassert_eq!(some_var.load(Ordering::Relaxed), 5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+some_var+=+AtomicU8::new(5);%0A++++%0A++++assert_eq!(some_var.load(Ordering::Relaxed),+5);%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nStores a value into the atomic integer.\n\n`store` takes an [`Ordering`](enum.Ordering.html \"enum std::sync::atomic::Ordering\") argument which describes the memory ordering of this operation. Possible values are [`SeqCst`](about:blank/enum.Ordering.html#variant.SeqCst \"variant std::sync::atomic::Ordering::SeqCst\"), [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") and [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n##### [§](#panics-1)Panics\n\nPanics if `order` is [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") or [`AcqRel`](about:blank/enum.Ordering.html#variant.AcqRel \"variant std::sync::atomic::Ordering::AcqRel\").\n\n##### [§](#examples-8)Examples\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet some_var = AtomicU8::new(5);\n\nsome_var.store(10, Ordering::Relaxed);\nassert_eq!(some_var.load(Ordering::Relaxed), 10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+some_var+=+AtomicU8::new(5);%0A++++%0A++++some_var.store(10,+Ordering::Relaxed);%0A++++assert_eq!(some_var.load(Ordering::Relaxed),+10);%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nStores a value into the atomic integer, returning the previous value.\n\n`swap` takes an [`Ordering`](enum.Ordering.html \"enum std::sync::atomic::Ordering\") argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") makes the store part of this operation [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\"), and using [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") makes the load part [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n**Note**: This method is only available on platforms that support atomic operations on [`u8`](../../primitive.u8.html \"primitive u8\").\n\n##### [§](#examples-9)Examples\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet some_var = AtomicU8::new(5);\n\nassert_eq!(some_var.swap(10, Ordering::Relaxed), 5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+some_var+=+AtomicU8::new(5);%0A++++%0A++++assert_eq!(some_var.swap(10,+Ordering::Relaxed),+5);%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\n👎Deprecated since 1.50.0: Use `compare_exchange` or `compare_exchange_weak` instead\n\nStores a value into the atomic integer if the current value is the same as the `current` value.\n\nThe return value is always the previous value. If it is equal to `current`, then the value was updated.\n\n`compare_and_swap` also takes an [`Ordering`](enum.Ordering.html \"enum std::sync::atomic::Ordering\") argument which describes the memory ordering of this operation. Notice that even when using [`AcqRel`](about:blank/enum.Ordering.html#variant.AcqRel \"variant std::sync::atomic::Ordering::AcqRel\"), the operation might fail and hence just perform an `Acquire` load, but not have `Release` semantics. Using [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") makes the store part of this operation [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\") if it happens, and using [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") makes the load part [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n**Note**: This method is only available on platforms that support atomic operations on [`u8`](../../primitive.u8.html \"primitive u8\").\n\n##### [§](#migrating-to-compare_exchange-and-compare_exchange_weak)Migrating to `compare_exchange` and `compare_exchange_weak`\n\n`compare_and_swap` is equivalent to `compare_exchange` with the following mapping for memory orderings:\n\n| Original | Success | Failure |\n| --- | --- | --- |\n| Relaxed | Relaxed | Relaxed |\n| Acquire | Acquire | Acquire |\n| Release | Release | Relaxed |\n| AcqRel | AcqRel | Acquire |\n| SeqCst | SeqCst | SeqCst |\n\n`compare_exchange_weak` is allowed to fail spuriously even when the comparison succeeds, which allows the compiler to generate better assembly code when the compare and swap is used in a loop.\n\n##### [§](#examples-10)Examples\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet some_var = AtomicU8::new(5);\n\nassert_eq!(some_var.compare_and_swap(5, 10, Ordering::Relaxed), 5);\nassert_eq!(some_var.load(Ordering::Relaxed), 10);\n\nassert_eq!(some_var.compare_and_swap(6, 12, Ordering::Relaxed), 10);\nassert_eq!(some_var.load(Ordering::Relaxed), 10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+some_var+=+AtomicU8::new(5);%0A++++%0A++++assert_eq!(some_var.compare_and_swap(5,+10,+Ordering::Relaxed),+5);%0A++++assert_eq!(some_var.load(Ordering::Relaxed),+10);%0A++++%0A++++assert_eq!(some_var.compare_and_swap(6,+12,+Ordering::Relaxed),+10);%0A++++assert_eq!(some_var.load(Ordering::Relaxed),+10);%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nStores a value into the atomic integer if the current value is the same as the `current` value.\n\nThe return value is a result indicating whether the new value was written and containing the previous value. On success this value is guaranteed to be equal to `current`.\n\n`compare_exchange` takes two [`Ordering`](enum.Ordering.html \"enum std::sync::atomic::Ordering\") arguments to describe the memory ordering of this operation. `success` describes the required ordering for the read-modify-write operation that takes place if the comparison with `current` succeeds. `failure` describes the required ordering for the load operation that takes place when the comparison fails. Using [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") as success ordering makes the store part of this operation [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\"), and using [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") makes the successful load [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\"). The failure ordering can only be [`SeqCst`](about:blank/enum.Ordering.html#variant.SeqCst \"variant std::sync::atomic::Ordering::SeqCst\"), [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") or [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n**Note**: This method is only available on platforms that support atomic operations on [`u8`](../../primitive.u8.html \"primitive u8\").\n\n##### [§](#examples-11)Examples\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet some_var = AtomicU8::new(5);\n\nassert_eq!(some_var.compare_exchange(5, 10,\n                                     Ordering::Acquire,\n                                     Ordering::Relaxed),\n           Ok(5));\nassert_eq!(some_var.load(Ordering::Relaxed), 10);\n\nassert_eq!(some_var.compare_exchange(6, 12,\n                                     Ordering::SeqCst,\n                                     Ordering::Acquire),\n           Err(10));\nassert_eq!(some_var.load(Ordering::Relaxed), 10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+some_var+=+AtomicU8::new(5);%0A++++%0A++++assert_eq!(some_var.compare_exchange(5,+10,%0A+++++++++++++++++++++++++++++++++++++++++Ordering::Acquire,%0A+++++++++++++++++++++++++++++++++++++++++Ordering::Relaxed),%0A+++++++++++++++Ok(5));%0A++++assert_eq!(some_var.load(Ordering::Relaxed),+10);%0A++++%0A++++assert_eq!(some_var.compare_exchange(6,+12,%0A+++++++++++++++++++++++++++++++++++++++++Ordering::SeqCst,%0A+++++++++++++++++++++++++++++++++++++++++Ordering::Acquire),%0A+++++++++++++++Err(10));%0A++++assert_eq!(some_var.load(Ordering::Relaxed),+10);%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nStores a value into the atomic integer if the current value is the same as the `current` value.\n\nUnlike [`AtomicU8::compare_exchange`](about:blank/struct.AtomicU8.html#method.compare_exchange \"method std::sync::atomic::AtomicU8::compare_exchange\"), this function is allowed to spuriously fail even when the comparison succeeds, which can result in more efficient code on some platforms. The return value is a result indicating whether the new value was written and containing the previous value.\n\n`compare_exchange_weak` takes two [`Ordering`](enum.Ordering.html \"enum std::sync::atomic::Ordering\") arguments to describe the memory ordering of this operation. `success` describes the required ordering for the read-modify-write operation that takes place if the comparison with `current` succeeds. `failure` describes the required ordering for the load operation that takes place when the comparison fails. Using [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") as success ordering makes the store part of this operation [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\"), and using [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") makes the successful load [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\"). The failure ordering can only be [`SeqCst`](about:blank/enum.Ordering.html#variant.SeqCst \"variant std::sync::atomic::Ordering::SeqCst\"), [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") or [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n**Note**: This method is only available on platforms that support atomic operations on [`u8`](../../primitive.u8.html \"primitive u8\").\n\n##### [§](#examples-12)Examples\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet val = AtomicU8::new(4);\n\nlet mut old = val.load(Ordering::Relaxed);\nloop {\n    let new = old * 2;\n    match val.compare_exchange_weak(old, new, Ordering::SeqCst, Ordering::Relaxed) {\n        Ok(_) => break,\n        Err(x) => old = x,\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+val+=+AtomicU8::new(4);%0A++++%0A++++let+mut+old+=+val.load(Ordering::Relaxed);%0A++++loop+%7B%0A++++++++let+new+=+old+*+2;%0A++++++++match+val.compare_exchange_weak(old,+new,+Ordering::SeqCst,+Ordering::Relaxed)+%7B%0A++++++++++++Ok(_)+=%3E+break,%0A++++++++++++Err(x)+=%3E+old+=+x,%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nAdds to the current value, returning the previous value.\n\nThis operation wraps around on overflow.\n\n`fetch_add` takes an [`Ordering`](enum.Ordering.html \"enum std::sync::atomic::Ordering\") argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") makes the store part of this operation [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\"), and using [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") makes the load part [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n**Note**: This method is only available on platforms that support atomic operations on [`u8`](../../primitive.u8.html \"primitive u8\").\n\n##### [§](#examples-13)Examples\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet foo = AtomicU8::new(0);\nassert_eq!(foo.fetch_add(10, Ordering::SeqCst), 0);\nassert_eq!(foo.load(Ordering::SeqCst), 10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(0);%0A++++assert_eq!(foo.fetch_add(10,+Ordering::SeqCst),+0);%0A++++assert_eq!(foo.load(Ordering::SeqCst),+10);%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nSubtracts from the current value, returning the previous value.\n\nThis operation wraps around on overflow.\n\n`fetch_sub` takes an [`Ordering`](enum.Ordering.html \"enum std::sync::atomic::Ordering\") argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") makes the store part of this operation [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\"), and using [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") makes the load part [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n**Note**: This method is only available on platforms that support atomic operations on [`u8`](../../primitive.u8.html \"primitive u8\").\n\n##### [§](#examples-14)Examples\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet foo = AtomicU8::new(20);\nassert_eq!(foo.fetch_sub(10, Ordering::SeqCst), 20);\nassert_eq!(foo.load(Ordering::SeqCst), 10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(20);%0A++++assert_eq!(foo.fetch_sub(10,+Ordering::SeqCst),+20);%0A++++assert_eq!(foo.load(Ordering::SeqCst),+10);%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nBitwise “and” with the current value.\n\nPerforms a bitwise “and” operation on the current value and the argument `val`, and sets the new value to the result.\n\nReturns the previous value.\n\n`fetch_and` takes an [`Ordering`](enum.Ordering.html \"enum std::sync::atomic::Ordering\") argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") makes the store part of this operation [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\"), and using [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") makes the load part [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n**Note**: This method is only available on platforms that support atomic operations on [`u8`](../../primitive.u8.html \"primitive u8\").\n\n##### [§](#examples-15)Examples\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet foo = AtomicU8::new(0b101101);\nassert_eq!(foo.fetch_and(0b110011, Ordering::SeqCst), 0b101101);\nassert_eq!(foo.load(Ordering::SeqCst), 0b100001);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(0b101101);%0A++++assert_eq!(foo.fetch_and(0b110011,+Ordering::SeqCst),+0b101101);%0A++++assert_eq!(foo.load(Ordering::SeqCst),+0b100001);%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nBitwise “nand” with the current value.\n\nPerforms a bitwise “nand” operation on the current value and the argument `val`, and sets the new value to the result.\n\nReturns the previous value.\n\n`fetch_nand` takes an [`Ordering`](enum.Ordering.html \"enum std::sync::atomic::Ordering\") argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") makes the store part of this operation [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\"), and using [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") makes the load part [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n**Note**: This method is only available on platforms that support atomic operations on [`u8`](../../primitive.u8.html \"primitive u8\").\n\n##### [§](#examples-16)Examples\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet foo = AtomicU8::new(0x13);\nassert_eq!(foo.fetch_nand(0x31, Ordering::SeqCst), 0x13);\nassert_eq!(foo.load(Ordering::SeqCst), !(0x13 & 0x31));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(0x13);%0A++++assert_eq!(foo.fetch_nand(0x31,+Ordering::SeqCst),+0x13);%0A++++assert_eq!(foo.load(Ordering::SeqCst),+!(0x13+%26+0x31));%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nBitwise “or” with the current value.\n\nPerforms a bitwise “or” operation on the current value and the argument `val`, and sets the new value to the result.\n\nReturns the previous value.\n\n`fetch_or` takes an [`Ordering`](enum.Ordering.html \"enum std::sync::atomic::Ordering\") argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") makes the store part of this operation [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\"), and using [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") makes the load part [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n**Note**: This method is only available on platforms that support atomic operations on [`u8`](../../primitive.u8.html \"primitive u8\").\n\n##### [§](#examples-17)Examples\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet foo = AtomicU8::new(0b101101);\nassert_eq!(foo.fetch_or(0b110011, Ordering::SeqCst), 0b101101);\nassert_eq!(foo.load(Ordering::SeqCst), 0b111111);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(0b101101);%0A++++assert_eq!(foo.fetch_or(0b110011,+Ordering::SeqCst),+0b101101);%0A++++assert_eq!(foo.load(Ordering::SeqCst),+0b111111);%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nBitwise “xor” with the current value.\n\nPerforms a bitwise “xor” operation on the current value and the argument `val`, and sets the new value to the result.\n\nReturns the previous value.\n\n`fetch_xor` takes an [`Ordering`](enum.Ordering.html \"enum std::sync::atomic::Ordering\") argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") makes the store part of this operation [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\"), and using [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") makes the load part [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n**Note**: This method is only available on platforms that support atomic operations on [`u8`](../../primitive.u8.html \"primitive u8\").\n\n##### [§](#examples-18)Examples\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet foo = AtomicU8::new(0b101101);\nassert_eq!(foo.fetch_xor(0b110011, Ordering::SeqCst), 0b101101);\nassert_eq!(foo.load(Ordering::SeqCst), 0b011110);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(0b101101);%0A++++assert_eq!(foo.fetch_xor(0b110011,+Ordering::SeqCst),+0b101101);%0A++++assert_eq!(foo.load(Ordering::SeqCst),+0b011110);%0A%7D&edition=2021)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nFetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.\n\nNote: This may call the function multiple times if the value has been changed from other threads in the meantime, as long as the function returns `Some(_)`, but the function will have been applied only once to the stored value.\n\n`fetch_update` takes two [`Ordering`](enum.Ordering.html \"enum std::sync::atomic::Ordering\") arguments to describe the memory ordering of this operation. The first describes the required ordering for when the operation finally succeeds while the second describes the required ordering for loads. These correspond to the success and failure orderings of [`AtomicU8::compare_exchange`](about:blank/struct.AtomicU8.html#method.compare_exchange \"method std::sync::atomic::AtomicU8::compare_exchange\") respectively.\n\nUsing [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") as success ordering makes the store part of this operation [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\"), and using [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") makes the final successful load [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\"). The (failed) load ordering can only be [`SeqCst`](about:blank/enum.Ordering.html#variant.SeqCst \"variant std::sync::atomic::Ordering::SeqCst\"), [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") or [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n**Note**: This method is only available on platforms that support atomic operations on [`u8`](../../primitive.u8.html \"primitive u8\").\n\n##### [§](#considerations)Considerations\n\nThis method is not magic; it is not provided by the hardware. It is implemented in terms of [`AtomicU8::compare_exchange_weak`](about:blank/struct.AtomicU8.html#method.compare_exchange_weak \"method std::sync::atomic::AtomicU8::compare_exchange_weak\"), and suffers from the same drawbacks. In particular, this method will not circumvent the [ABA Problem](https://en.wikipedia.org/wiki/ABA_problem).\n\n##### [§](#examples-19)Examples\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet x = AtomicU8::new(7);\nassert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(7));\nassert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(7));\nassert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(8));\nassert_eq!(x.load(Ordering::SeqCst), 9);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+x+=+AtomicU8::new(7);%0A++++assert_eq!(x.fetch_update(Ordering::SeqCst,+Ordering::SeqCst,+%7C_%7C+None),+Err(7));%0A++++assert_eq!(x.fetch_update(Ordering::SeqCst,+Ordering::SeqCst,+%7Cx%7C+Some(x+%2B+1)),+Ok(7));%0A++++assert_eq!(x.fetch_update(Ordering::SeqCst,+Ordering::SeqCst,+%7Cx%7C+Some(x+%2B+1)),+Ok(8));%0A++++assert_eq!(x.load(Ordering::SeqCst),+9);%0A%7D&edition=2021)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nMaximum with the current value.\n\nFinds the maximum of the current value and the argument `val`, and sets the new value to the result.\n\nReturns the previous value.\n\n`fetch_max` takes an [`Ordering`](enum.Ordering.html \"enum std::sync::atomic::Ordering\") argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") makes the store part of this operation [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\"), and using [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") makes the load part [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n**Note**: This method is only available on platforms that support atomic operations on [`u8`](../../primitive.u8.html \"primitive u8\").\n\n##### [§](#examples-20)Examples\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet foo = AtomicU8::new(23);\nassert_eq!(foo.fetch_max(42, Ordering::SeqCst), 23);\nassert_eq!(foo.load(Ordering::SeqCst), 42);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(23);%0A++++assert_eq!(foo.fetch_max(42,+Ordering::SeqCst),+23);%0A++++assert_eq!(foo.load(Ordering::SeqCst),+42);%0A%7D&edition=2021)\n\nIf you want to obtain the maximum value in one step, you can use the following:\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet foo = AtomicU8::new(23);\nlet bar = 42;\nlet max_foo = foo.fetch_max(bar, Ordering::SeqCst).max(bar);\nassert!(max_foo == 42);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(23);%0A++++let+bar+=+42;%0A++++let+max_foo+=+foo.fetch_max(bar,+Ordering::SeqCst).max(bar);%0A++++assert!(max_foo+==+42);%0A%7D&edition=2021)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nMinimum with the current value.\n\nFinds the minimum of the current value and the argument `val`, and sets the new value to the result.\n\nReturns the previous value.\n\n`fetch_min` takes an [`Ordering`](enum.Ordering.html \"enum std::sync::atomic::Ordering\") argument which describes the memory ordering of this operation. All ordering modes are possible. Note that using [`Acquire`](about:blank/enum.Ordering.html#variant.Acquire \"variant std::sync::atomic::Ordering::Acquire\") makes the store part of this operation [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\"), and using [`Release`](about:blank/enum.Ordering.html#variant.Release \"variant std::sync::atomic::Ordering::Release\") makes the load part [`Relaxed`](about:blank/enum.Ordering.html#variant.Relaxed \"variant std::sync::atomic::Ordering::Relaxed\").\n\n**Note**: This method is only available on platforms that support atomic operations on [`u8`](../../primitive.u8.html \"primitive u8\").\n\n##### [§](#examples-21)Examples\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet foo = AtomicU8::new(23);\nassert_eq!(foo.fetch_min(42, Ordering::Relaxed), 23);\nassert_eq!(foo.load(Ordering::Relaxed), 23);\nassert_eq!(foo.fetch_min(22, Ordering::Relaxed), 23);\nassert_eq!(foo.load(Ordering::Relaxed), 22);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(23);%0A++++assert_eq!(foo.fetch_min(42,+Ordering::Relaxed),+23);%0A++++assert_eq!(foo.load(Ordering::Relaxed),+23);%0A++++assert_eq!(foo.fetch_min(22,+Ordering::Relaxed),+23);%0A++++assert_eq!(foo.load(Ordering::Relaxed),+22);%0A%7D&edition=2021)\n\nIf you want to obtain the minimum value in one step, you can use the following:\n\n```\nuse std::sync::atomic::{AtomicU8, Ordering};\n\nlet foo = AtomicU8::new(23);\nlet bar = 12;\nlet min_foo = foo.fetch_min(bar, Ordering::SeqCst).min(bar);\nassert_eq!(min_foo, 12);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(23);%0A++++let+bar+=+12;%0A++++let+min_foo+=+foo.fetch_min(bar,+Ordering::SeqCst).min(bar);%0A++++assert_eq!(min_foo,+12);%0A%7D&edition=2021)\n\n1.70.0 (const: 1.70.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050)\n\nReturns a mutable pointer to the underlying integer.\n\nDoing non-atomic reads and writes on the resulting integer can be a data race. This method is mostly useful for FFI, where the function signature may use `*mut u8` instead of `&AtomicU8`.\n\nReturning an `*mut` pointer from a shared reference to this atomic is safe because the atomic types work with interior mutability. All modifications of an atomic change the value through a shared reference, and can do so safely as long as they use atomic operations. Any use of the returned raw pointer requires an `unsafe` block and still has to uphold the same restriction: operations on it must be atomic.\n\n##### [§](#examples-22)Examples\n\n[ⓘ](# \"This example is not tested\")\n\n```\nuse std::sync::atomic::AtomicU8;\n\nextern \"C\" {\n    fn my_atomic_op(arg: *mut u8);\n}\n\nlet atomic = AtomicU8::new(1);\n\n// SAFETY: Safe as long as `my_atomic_op` is atomic.\nunsafe {\n    my_atomic_op(atomic.as_ptr());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Ause+std::sync::atomic::AtomicU8;%0A%0Aextern+%22C%22+%7B%0A++++fn+my_atomic_op(arg:+*mut+u8);%0A%7D%0A%0Alet+atomic+=+AtomicU8::new(1);%0A%0A//+SAFETY:+Safe+as+long+as+%60my_atomic_op%60+is+atomic.%0Aunsafe+%7B%0A++++my_atomic_op(atomic.as_ptr());%0A%7D%0A%7D&edition=2021)\n\n[§](#impl-Freeze-for-AtomicU8)\n\n[§](#impl-Send-for-AtomicU8)\n\n[§](#impl-Unpin-for-AtomicU8)\n\n[§](#impl-UnwindSafe-for-AtomicU8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-1)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An integer type which can be safely shared between threads.\"><title>AtomicU8 in std::sync::atomic - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">AtomicU8</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">AtomicU8</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_ptr\">as_ptr</a></li><li><a href=\"#method.compare_and_swap\">compare_and_swap</a></li><li><a href=\"#method.compare_exchange\">compare_exchange</a></li><li><a href=\"#method.compare_exchange_weak\">compare_exchange_weak</a></li><li><a href=\"#method.fetch_add\">fetch_add</a></li><li><a href=\"#method.fetch_and\">fetch_and</a></li><li><a href=\"#method.fetch_max\">fetch_max</a></li><li><a href=\"#method.fetch_min\">fetch_min</a></li><li><a href=\"#method.fetch_nand\">fetch_nand</a></li><li><a href=\"#method.fetch_or\">fetch_or</a></li><li><a href=\"#method.fetch_sub\">fetch_sub</a></li><li><a href=\"#method.fetch_update\">fetch_update</a></li><li><a href=\"#method.fetch_xor\">fetch_xor</a></li><li><a href=\"#method.from_mut\">from_mut</a></li><li><a href=\"#method.from_mut_slice\">from_mut_slice</a></li><li><a href=\"#method.from_ptr\">from_ptr</a></li><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.get_mut_slice\">get_mut_slice</a></li><li><a href=\"#method.into_inner\">into_inner</a></li><li><a href=\"#method.load\">load</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.store\">store</a></li><li><a href=\"#method.swap\">swap</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-AtomicU8\">Debug</a></li><li><a href=\"#impl-Default-for-AtomicU8\">Default</a></li><li><a href=\"#impl-From%3Cu8%3E-for-AtomicU8\">From&lt;u8&gt;</a></li><li><a href=\"#impl-RefUnwindSafe-for-AtomicU8\">RefUnwindSafe</a></li><li><a href=\"#impl-Sync-for-AtomicU8\">Sync</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-AtomicU8\">!Freeze</a></li><li><a href=\"#impl-Send-for-AtomicU8\">Send</a></li><li><a href=\"#impl-Unpin-for-AtomicU8\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-AtomicU8\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::sync::atomic</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AtomicBool.html\">AtomicBool</a></li><li><a href=\"struct.AtomicI16.html\">AtomicI16</a></li><li><a href=\"struct.AtomicI32.html\">AtomicI32</a></li><li><a href=\"struct.AtomicI64.html\">AtomicI64</a></li><li><a href=\"struct.AtomicI8.html\">AtomicI8</a></li><li><a href=\"struct.AtomicIsize.html\">AtomicIsize</a></li><li><a href=\"struct.AtomicPtr.html\">AtomicPtr</a></li><li><a href=\"struct.AtomicU16.html\">AtomicU16</a></li><li><a href=\"struct.AtomicU32.html\">AtomicU32</a></li><li><a href=\"struct.AtomicU64.html\">AtomicU64</a></li><li><a href=\"struct.AtomicU8.html\">AtomicU8</a></li><li><a href=\"struct.AtomicUsize.html\">AtomicUsize</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Ordering.html\">Ordering</a></li></ul><h3><a href=\"index.html#constants\">Constants</a></h3><ul class=\"block constant\"><li><a href=\"constant.ATOMIC_BOOL_INIT.html\">ATOMIC_BOOL_INIT</a></li><li><a href=\"constant.ATOMIC_ISIZE_INIT.html\">ATOMIC_ISIZE_INIT</a></li><li><a href=\"constant.ATOMIC_USIZE_INIT.html\">ATOMIC_USIZE_INIT</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.compiler_fence.html\">compiler_fence</a></li><li><a href=\"fn.fence.html\">fence</a></li><li><a href=\"fn.spin_loop_hint.html\">spin_loop_hint</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">sync</a>::<wbr><a href=\"index.html\">atomic</a>::<wbr><a class=\"struct\" href=\"#\">AtomicU8</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code><div class=\"code-attribute\">#[repr(C, align(1))]</div>pub struct AtomicU8 { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An integer type which can be safely shared between threads.</p>\n<p>This type has the same size and bit validity as the underlying\ninteger type, <a href=\"../../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<p>For more about the differences between atomic types and\nnon-atomic types as well as information about the portability of\nthis type, please see the <a href=\"index.html\" title=\"mod std::sync::atomic\">module-level documentation</a>.</p>\n<p><strong>Note:</strong> This type is only available on platforms that support\natomic loads and stores of <a href=\"../../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AtomicU8\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a><a href=\"#impl-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.34.0\">1.34.0 (const: 1.34.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>(v: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a></h4></section></summary><div class=\"docblock\"><p>Creates a new atomic integer.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::AtomicU8;\n\n<span class=\"kw\">let </span>atomic_forty_two = AtomicU8::new(<span class=\"number\">42</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::AtomicU8;%0A++++%0A++++let+atomic_forty_two+=+AtomicU8::new(42);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const unstable\">1.75.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/108652\" title=\"Tracking issue for const_atomic_from_ptr\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.from_ptr\" class=\"fn\">from_ptr</a>&lt;'a&gt;(ptr: <a class=\"primitive\" href=\"../../primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>) -&gt; &amp;'a <a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a></h4></section></summary><div class=\"docblock\"><p>Creates a new reference to an atomic integer from a pointer.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{<span class=\"self\">self</span>, AtomicU8};\n\n<span class=\"comment\">// Get a pointer to an allocated value\n</span><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span>u8 = Box::into_raw(Box::new(<span class=\"number\">0</span>));\n\n<span class=\"macro\">assert!</span>(ptr.cast::&lt;AtomicU8&gt;().is_aligned());\n\n{\n    <span class=\"comment\">// Create an atomic view of the allocated value\n    </span><span class=\"kw\">let </span>atomic = <span class=\"kw\">unsafe </span>{AtomicU8::from_ptr(ptr) };\n\n    <span class=\"comment\">// Use `atomic` for atomic operations, possibly share it with other threads\n    </span>atomic.store(<span class=\"number\">1</span>, atomic::Ordering::Relaxed);\n}\n\n<span class=\"comment\">// It's ok to non-atomically access the value behind `ptr`,\n// since the reference to the atomic ended its lifetime in the block above\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>ptr }, <span class=\"number\">1</span>);\n\n<span class=\"comment\">// Deallocate the value\n</span><span class=\"kw\">unsafe </span>{ drop(Box::from_raw(ptr)) }</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7Bself,+AtomicU8%7D;%0A++++%0A++++//+Get+a+pointer+to+an+allocated+value%0A++++let+ptr:+*mut+u8+=+Box::into_raw(Box::new(0));%0A++++%0A++++assert!(ptr.cast::%3CAtomicU8%3E().is_aligned());%0A++++%0A++++%7B%0A++++++++//+Create+an+atomic+view+of+the+allocated+value%0A++++++++let+atomic+=+unsafe+%7BAtomicU8::from_ptr(ptr)+%7D;%0A++++%0A++++++++//+Use+%60atomic%60+for+atomic+operations,+possibly+share+it+with+other+threads%0A++++++++atomic.store(1,+atomic::Ordering::Relaxed);%0A++++%7D%0A++++%0A++++//+It's+ok+to+non-atomically+access+the+value+behind+%60ptr%60,%0A++++//+since+the+reference+to+the+atomic+ended+its+lifetime+in+the+block+above%0A++++assert_eq!(unsafe+%7B+*ptr+%7D,+1);%0A++++%0A++++//+Deallocate+the+value%0A++++unsafe+%7B+drop(Box::from_raw(ptr))+%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<ul>\n<li><code>ptr</code> must be aligned to <code>align_of::&lt;AtomicU8&gt;()</code> (note that on some platforms this can be bigger than <code>align_of::&lt;u8&gt;()</code>).</li>\n<li><code>ptr</code> must be <a href=\"../../ptr/index.html#safety\" title=\"mod std::ptr\">valid</a> for both reads and writes for the whole lifetime <code>'a</code>.</li>\n<li>You must adhere to the <a href=\"index.html#memory-model-for-atomic-accesses\" title=\"mod std::sync::atomic\">Memory model for atomic accesses</a>. In particular, it is not\nallowed to mix atomic and non-atomic accesses, or atomic accesses of different sizes,\nwithout synchronization.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the underlying integer.</p>\n<p>This is safe because the mutable reference guarantees that no other threads are\nconcurrently accessing the atomic data.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_var = AtomicU8::new(<span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>some_var.get_mut(), <span class=\"number\">10</span>);\n<span class=\"kw-2\">*</span>some_var.get_mut() = <span class=\"number\">5</span>;\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::SeqCst), <span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+mut+some_var+=+AtomicU8::new(10);%0A++++assert_eq!(*some_var.get_mut(),+10);%0A++++*some_var.get_mut()+=+5;%0A++++assert_eq!(some_var.load(Ordering::SeqCst),+5);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.from_mut\" class=\"fn\">from_mut</a>(v: &amp;mut <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>atomic_from_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76314\">#76314</a>)</span></div></span></summary><div class=\"docblock\"><p>Get atomic access to a <code>&amp;mut u8</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(atomic_from_mut)]\n</span><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_int = <span class=\"number\">123</span>;\n<span class=\"kw\">let </span>a = AtomicU8::from_mut(<span class=\"kw-2\">&amp;mut </span>some_int);\na.store(<span class=\"number\">100</span>, Ordering::Relaxed);\n<span class=\"macro\">assert_eq!</span>(some_int, <span class=\"number\">100</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(atomic_from_mut)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+mut+some_int+=+123;%0A++++let+a+=+AtomicU8::from_mut(%26mut+some_int);%0A++++a.store(100,+Ordering::Relaxed);%0A++++assert_eq!(some_int,+100);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut_slice\" class=\"fn\">get_mut_slice</a>(this: &amp;mut [<a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a>]) -&gt; &amp;mut [<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut [u8]\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>atomic_from_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76314\">#76314</a>)</span></div></span></summary><div class=\"docblock\"><p>Get non-atomic access to a <code>&amp;mut [AtomicU8]</code> slice</p>\n<p>This is safe because the mutable reference guarantees that no other threads are\nconcurrently accessing the atomic data.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(atomic_from_mut)]\n</span><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_ints = [<span class=\"kw\">const </span>{ AtomicU8::new(<span class=\"number\">0</span>) }; <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span>view: <span class=\"kw-2\">&amp;mut </span>[u8] = AtomicU8::get_mut_slice(<span class=\"kw-2\">&amp;mut </span>some_ints);\n<span class=\"macro\">assert_eq!</span>(view, [<span class=\"number\">0</span>; <span class=\"number\">10</span>]);\nview\n    .iter_mut()\n    .enumerate()\n    .for_each(|(idx, int)| <span class=\"kw-2\">*</span>int = idx <span class=\"kw\">as _</span>);\n\nstd::thread::scope(|s| {\n    some_ints\n        .iter()\n        .enumerate()\n        .for_each(|(idx, int)| {\n            s.spawn(<span class=\"kw\">move </span>|| <span class=\"macro\">assert_eq!</span>(int.load(Ordering::Relaxed), idx <span class=\"kw\">as _</span>));\n        })\n});</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(atomic_from_mut)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+mut+some_ints+=+%5Bconst+%7B+AtomicU8::new(0)+%7D;+10%5D;%0A++++%0A++++let+view:+%26mut+%5Bu8%5D+=+AtomicU8::get_mut_slice(%26mut+some_ints);%0A++++assert_eq!(view,+%5B0;+10%5D);%0A++++view%0A++++++++.iter_mut()%0A++++++++.enumerate()%0A++++++++.for_each(%7C(idx,+int)%7C+*int+=+idx+as+_);%0A++++%0A++++std::thread::scope(%7Cs%7C+%7B%0A++++++++some_ints%0A++++++++++++.iter()%0A++++++++++++.enumerate()%0A++++++++++++.for_each(%7C(idx,+int)%7C+%7B%0A++++++++++++++++s.spawn(move+%7C%7C+assert_eq!(int.load(Ordering::Relaxed),+idx+as+_));%0A++++++++++++%7D)%0A++++%7D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_mut_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.from_mut_slice\" class=\"fn\">from_mut_slice</a>(v: &amp;mut [<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>]) -&gt; &amp;mut [<a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a>]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>atomic_from_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/76314\">#76314</a>)</span></div></span></summary><div class=\"docblock\"><p>Get atomic access to a <code>&amp;mut [u8]</code> slice.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(atomic_from_mut)]\n</span><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_ints = [<span class=\"number\">0</span>; <span class=\"number\">10</span>];\n<span class=\"kw\">let </span>a = <span class=\"kw-2\">&amp;*</span>AtomicU8::from_mut_slice(<span class=\"kw-2\">&amp;mut </span>some_ints);\nstd::thread::scope(|s| {\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..a.len() {\n        s.spawn(<span class=\"kw\">move </span>|| a[i].store(i <span class=\"kw\">as _</span>, Ordering::Relaxed));\n    }\n});\n<span class=\"kw\">for </span>(i, n) <span class=\"kw\">in </span>some_ints.into_iter().enumerate() {\n    <span class=\"macro\">assert_eq!</span>(i, n <span class=\"kw\">as </span>usize);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(atomic_from_mut)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+mut+some_ints+=+%5B0;+10%5D;%0A++++let+a+=+%26*AtomicU8::from_mut_slice(%26mut+some_ints);%0A++++std::thread::scope(%7Cs%7C+%7B%0A++++++++for+i+in+0..a.len()+%7B%0A++++++++++++s.spawn(move+%7C%7C+a%5Bi%5D.store(i+as+_,+Ordering::Relaxed));%0A++++++++%7D%0A++++%7D);%0A++++for+(i,+n)+in+some_ints.into_iter().enumerate()+%7B%0A++++++++assert_eq!(i,+n+as+usize);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.79.0\">1.34.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Consumes the atomic and returns the contained value.</p>\n<p>This is safe because passing <code>self</code> by value guarantees that no other threads are\nconcurrently accessing the atomic data.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::AtomicU8;\n\n<span class=\"kw\">let </span>some_var = AtomicU8::new(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(some_var.into_inner(), <span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::AtomicU8;%0A++++%0A++++let+some_var+=+AtomicU8::new(5);%0A++++assert_eq!(some_var.into_inner(),+5);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.load\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.load\" class=\"fn\">load</a>(&amp;self, order: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Loads a value from the atomic integer.</p>\n<p><code>load</code> takes an <a href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering of this operation.\nPossible values are <a href=\"enum.Ordering.html#variant.SeqCst\" title=\"variant std::sync::atomic::Ordering::SeqCst\"><code>SeqCst</code></a>, <a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> and <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>order</code> is <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> or <a href=\"enum.Ordering.html#variant.AcqRel\" title=\"variant std::sync::atomic::Ordering::AcqRel\"><code>AcqRel</code></a>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>some_var = AtomicU8::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::Relaxed), <span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+some_var+=+AtomicU8::new(5);%0A++++%0A++++assert_eq!(some_var.load(Ordering::Relaxed),+5);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.store\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.store\" class=\"fn\">store</a>(&amp;self, val: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Stores a value into the atomic integer.</p>\n<p><code>store</code> takes an <a href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering of this operation.\nPossible values are <a href=\"enum.Ordering.html#variant.SeqCst\" title=\"variant std::sync::atomic::Ordering::SeqCst\"><code>SeqCst</code></a>, <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> and <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>order</code> is <a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> or <a href=\"enum.Ordering.html#variant.AcqRel\" title=\"variant std::sync::atomic::Ordering::AcqRel\"><code>AcqRel</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>some_var = AtomicU8::new(<span class=\"number\">5</span>);\n\nsome_var.store(<span class=\"number\">10</span>, Ordering::Relaxed);\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::Relaxed), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+some_var+=+AtomicU8::new(5);%0A++++%0A++++some_var.store(10,+Ordering::Relaxed);%0A++++assert_eq!(some_var.load(Ordering::Relaxed),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.swap\" class=\"fn\">swap</a>(&amp;self, val: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Stores a value into the atomic integer, returning the previous value.</p>\n<p><code>swap</code> takes an <a href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"../../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>some_var = AtomicU8::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(some_var.swap(<span class=\"number\">10</span>, Ordering::Relaxed), <span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+some_var+=+AtomicU8::new(5);%0A++++%0A++++assert_eq!(some_var.swap(10,+Ordering::Relaxed),+5);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.compare_and_swap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.compare_and_swap\" class=\"fn\">compare_and_swap</a>(&amp;self, current: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, new: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.50.0: Use <code>compare_exchange</code> or <code>compare_exchange_weak</code> instead</span></div></span></summary><div class=\"docblock\"><p>Stores a value into the atomic integer if the current value is the same as\nthe <code>current</code> value.</p>\n<p>The return value is always the previous value. If it is equal to <code>current</code>, then the\nvalue was updated.</p>\n<p><code>compare_and_swap</code> also takes an <a href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory\nordering of this operation. Notice that even when using <a href=\"enum.Ordering.html#variant.AcqRel\" title=\"variant std::sync::atomic::Ordering::AcqRel\"><code>AcqRel</code></a>, the operation\nmight fail and hence just perform an <code>Acquire</code> load, but not have <code>Release</code> semantics.\nUsing <a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a> if it\nhappens, and using <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"../../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"migrating-to-compare_exchange-and-compare_exchange_weak\"><a class=\"doc-anchor\" href=\"#migrating-to-compare_exchange-and-compare_exchange_weak\">§</a>Migrating to <code>compare_exchange</code> and <code>compare_exchange_weak</code></h5>\n<p><code>compare_and_swap</code> is equivalent to <code>compare_exchange</code> with the following mapping for\nmemory orderings:</p>\n<div><table><thead><tr><th>Original</th><th>Success</th><th>Failure</th></tr></thead><tbody>\n<tr><td>Relaxed</td><td>Relaxed</td><td>Relaxed</td></tr>\n<tr><td>Acquire</td><td>Acquire</td><td>Acquire</td></tr>\n<tr><td>Release</td><td>Release</td><td>Relaxed</td></tr>\n<tr><td>AcqRel</td><td>AcqRel</td><td>Acquire</td></tr>\n<tr><td>SeqCst</td><td>SeqCst</td><td>SeqCst</td></tr>\n</tbody></table>\n</div>\n<p><code>compare_exchange_weak</code> is allowed to fail spuriously even when the comparison succeeds,\nwhich allows the compiler to generate better assembly code when the compare and swap\nis used in a loop.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>some_var = AtomicU8::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(some_var.compare_and_swap(<span class=\"number\">5</span>, <span class=\"number\">10</span>, Ordering::Relaxed), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::Relaxed), <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(some_var.compare_and_swap(<span class=\"number\">6</span>, <span class=\"number\">12</span>, Ordering::Relaxed), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::Relaxed), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+some_var+=+AtomicU8::new(5);%0A++++%0A++++assert_eq!(some_var.compare_and_swap(5,+10,+Ordering::Relaxed),+5);%0A++++assert_eq!(some_var.load(Ordering::Relaxed),+10);%0A++++%0A++++assert_eq!(some_var.compare_and_swap(6,+12,+Ordering::Relaxed),+10);%0A++++assert_eq!(some_var.load(Ordering::Relaxed),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.compare_exchange\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.compare_exchange\" class=\"fn\">compare_exchange</a>(\n    &amp;self,\n    current: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>,\n    new: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>,\n    success: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>,\n    failure: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>,\n) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Stores a value into the atomic integer if the current value is the same as\nthe <code>current</code> value.</p>\n<p>The return value is a result indicating whether the new value was written and\ncontaining the previous value. On success this value is guaranteed to be equal to\n<code>current</code>.</p>\n<p><code>compare_exchange</code> takes two <a href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\"><code>Ordering</code></a> arguments to describe the memory\nordering of this operation. <code>success</code> describes the required ordering for the\nread-modify-write operation that takes place if the comparison with <code>current</code> succeeds.\n<code>failure</code> describes the required ordering for the load operation that takes place when\nthe comparison fails. Using <a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> as success ordering makes the store part\nof this operation <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and using <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the successful load\n<a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>. The failure ordering can only be <a href=\"enum.Ordering.html#variant.SeqCst\" title=\"variant std::sync::atomic::Ordering::SeqCst\"><code>SeqCst</code></a>, <a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> or <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"../../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>some_var = AtomicU8::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(some_var.compare_exchange(<span class=\"number\">5</span>, <span class=\"number\">10</span>,\n                                     Ordering::Acquire,\n                                     Ordering::Relaxed),\n           <span class=\"prelude-val\">Ok</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::Relaxed), <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(some_var.compare_exchange(<span class=\"number\">6</span>, <span class=\"number\">12</span>,\n                                     Ordering::SeqCst,\n                                     Ordering::Acquire),\n           <span class=\"prelude-val\">Err</span>(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::Relaxed), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+some_var+=+AtomicU8::new(5);%0A++++%0A++++assert_eq!(some_var.compare_exchange(5,+10,%0A+++++++++++++++++++++++++++++++++++++++++Ordering::Acquire,%0A+++++++++++++++++++++++++++++++++++++++++Ordering::Relaxed),%0A+++++++++++++++Ok(5));%0A++++assert_eq!(some_var.load(Ordering::Relaxed),+10);%0A++++%0A++++assert_eq!(some_var.compare_exchange(6,+12,%0A+++++++++++++++++++++++++++++++++++++++++Ordering::SeqCst,%0A+++++++++++++++++++++++++++++++++++++++++Ordering::Acquire),%0A+++++++++++++++Err(10));%0A++++assert_eq!(some_var.load(Ordering::Relaxed),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.compare_exchange_weak\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.compare_exchange_weak\" class=\"fn\">compare_exchange_weak</a>(\n    &amp;self,\n    current: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>,\n    new: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>,\n    success: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>,\n    failure: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>,\n) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Stores a value into the atomic integer if the current value is the same as\nthe <code>current</code> value.</p>\n<p>Unlike <a href=\"struct.AtomicU8.html#method.compare_exchange\" title=\"method std::sync::atomic::AtomicU8::compare_exchange\"><code>AtomicU8::compare_exchange</code></a>,\nthis function is allowed to spuriously fail even\nwhen the comparison succeeds, which can result in more efficient code on some\nplatforms. The return value is a result indicating whether the new value was\nwritten and containing the previous value.</p>\n<p><code>compare_exchange_weak</code> takes two <a href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\"><code>Ordering</code></a> arguments to describe the memory\nordering of this operation. <code>success</code> describes the required ordering for the\nread-modify-write operation that takes place if the comparison with <code>current</code> succeeds.\n<code>failure</code> describes the required ordering for the load operation that takes place when\nthe comparison fails. Using <a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> as success ordering makes the store part\nof this operation <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and using <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the successful load\n<a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>. The failure ordering can only be <a href=\"enum.Ordering.html#variant.SeqCst\" title=\"variant std::sync::atomic::Ordering::SeqCst\"><code>SeqCst</code></a>, <a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> or <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"../../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>val = AtomicU8::new(<span class=\"number\">4</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>old = val.load(Ordering::Relaxed);\n<span class=\"kw\">loop </span>{\n    <span class=\"kw\">let </span>new = old * <span class=\"number\">2</span>;\n    <span class=\"kw\">match </span>val.compare_exchange_weak(old, new, Ordering::SeqCst, Ordering::Relaxed) {\n        <span class=\"prelude-val\">Ok</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"kw\">break</span>,\n        <span class=\"prelude-val\">Err</span>(x) =&gt; old = x,\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+val+=+AtomicU8::new(4);%0A++++%0A++++let+mut+old+=+val.load(Ordering::Relaxed);%0A++++loop+%7B%0A++++++++let+new+=+old+*+2;%0A++++++++match+val.compare_exchange_weak(old,+new,+Ordering::SeqCst,+Ordering::Relaxed)+%7B%0A++++++++++++Ok(_)+=%3E+break,%0A++++++++++++Err(x)+=%3E+old+=+x,%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fetch_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.fetch_add\" class=\"fn\">fetch_add</a>(&amp;self, val: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Adds to the current value, returning the previous value.</p>\n<p>This operation wraps around on overflow.</p>\n<p><code>fetch_add</code> takes an <a href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"../../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_add(<span class=\"number\">10</span>, Ordering::SeqCst), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(0);%0A++++assert_eq!(foo.fetch_add(10,+Ordering::SeqCst),+0);%0A++++assert_eq!(foo.load(Ordering::SeqCst),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fetch_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.fetch_sub\" class=\"fn\">fetch_sub</a>(&amp;self, val: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Subtracts from the current value, returning the previous value.</p>\n<p>This operation wraps around on overflow.</p>\n<p><code>fetch_sub</code> takes an <a href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"../../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">20</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_sub(<span class=\"number\">10</span>, Ordering::SeqCst), <span class=\"number\">20</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(20);%0A++++assert_eq!(foo.fetch_sub(10,+Ordering::SeqCst),+20);%0A++++assert_eq!(foo.load(Ordering::SeqCst),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fetch_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.fetch_and\" class=\"fn\">fetch_and</a>(&amp;self, val: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Bitwise “and” with the current value.</p>\n<p>Performs a bitwise “and” operation on the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_and</code> takes an <a href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"../../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_and(<span class=\"number\">0b110011</span>, Ordering::SeqCst), <span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">0b100001</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(0b101101);%0A++++assert_eq!(foo.fetch_and(0b110011,+Ordering::SeqCst),+0b101101);%0A++++assert_eq!(foo.load(Ordering::SeqCst),+0b100001);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fetch_nand\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.fetch_nand\" class=\"fn\">fetch_nand</a>(&amp;self, val: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Bitwise “nand” with the current value.</p>\n<p>Performs a bitwise “nand” operation on the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_nand</code> takes an <a href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"../../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">0x13</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_nand(<span class=\"number\">0x31</span>, Ordering::SeqCst), <span class=\"number\">0x13</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), !(<span class=\"number\">0x13 </span>&amp; <span class=\"number\">0x31</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(0x13);%0A++++assert_eq!(foo.fetch_nand(0x31,+Ordering::SeqCst),+0x13);%0A++++assert_eq!(foo.load(Ordering::SeqCst),+!(0x13+%26+0x31));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fetch_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.fetch_or\" class=\"fn\">fetch_or</a>(&amp;self, val: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Bitwise “or” with the current value.</p>\n<p>Performs a bitwise “or” operation on the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_or</code> takes an <a href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"../../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_or(<span class=\"number\">0b110011</span>, Ordering::SeqCst), <span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">0b111111</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(0b101101);%0A++++assert_eq!(foo.fetch_or(0b110011,+Ordering::SeqCst),+0b101101);%0A++++assert_eq!(foo.load(Ordering::SeqCst),+0b111111);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fetch_xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.fetch_xor\" class=\"fn\">fetch_xor</a>(&amp;self, val: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Bitwise “xor” with the current value.</p>\n<p>Performs a bitwise “xor” operation on the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_xor</code> takes an <a href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"../../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_xor(<span class=\"number\">0b110011</span>, Ordering::SeqCst), <span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">0b011110</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(0b101101);%0A++++assert_eq!(foo.fetch_xor(0b110011,+Ordering::SeqCst),+0b101101);%0A++++assert_eq!(foo.load(Ordering::SeqCst),+0b011110);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fetch_update\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.fetch_update\" class=\"fn\">fetch_update</a>&lt;F&gt;(\n    &amp;self,\n    set_order: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>,\n    fetch_order: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Fetches the value, and applies a function to it that returns an optional\nnew value. Returns a <code>Result</code> of <code>Ok(previous_value)</code> if the function returned <code>Some(_)</code>, else\n<code>Err(previous_value)</code>.</p>\n<p>Note: This may call the function multiple times if the value has been changed from other threads in\nthe meantime, as long as the function returns <code>Some(_)</code>, but the function will have been applied\nonly once to the stored value.</p>\n<p><code>fetch_update</code> takes two <a href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\"><code>Ordering</code></a> arguments to describe the memory ordering of this operation.\nThe first describes the required ordering for when the operation finally succeeds while the second\ndescribes the required ordering for loads. These correspond to the success and failure orderings of\n<a href=\"struct.AtomicU8.html#method.compare_exchange\" title=\"method std::sync::atomic::AtomicU8::compare_exchange\"><code>AtomicU8::compare_exchange</code></a>\nrespectively.</p>\n<p>Using <a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> as success ordering makes the store part\nof this operation <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and using <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the final successful load\n<a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>. The (failed) load ordering can only be <a href=\"enum.Ordering.html#variant.SeqCst\" title=\"variant std::sync::atomic::Ordering::SeqCst\"><code>SeqCst</code></a>, <a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> or <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"../../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"considerations\"><a class=\"doc-anchor\" href=\"#considerations\">§</a>Considerations</h5>\n<p>This method is not magic;  it is not provided by the hardware.\nIt is implemented in terms of\n<a href=\"struct.AtomicU8.html#method.compare_exchange_weak\" title=\"method std::sync::atomic::AtomicU8::compare_exchange_weak\"><code>AtomicU8::compare_exchange_weak</code></a>,\nand suffers from the same drawbacks.\nIn particular, this method will not circumvent the <a href=\"https://en.wikipedia.org/wiki/ABA_problem\">ABA Problem</a>.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>x = AtomicU8::new(<span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |<span class=\"kw\">_</span>| <span class=\"prelude-val\">None</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">7</span>));\n<span class=\"macro\">assert_eq!</span>(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| <span class=\"prelude-val\">Some</span>(x + <span class=\"number\">1</span>)), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">7</span>));\n<span class=\"macro\">assert_eq!</span>(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| <span class=\"prelude-val\">Some</span>(x + <span class=\"number\">1</span>)), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">8</span>));\n<span class=\"macro\">assert_eq!</span>(x.load(Ordering::SeqCst), <span class=\"number\">9</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+x+=+AtomicU8::new(7);%0A++++assert_eq!(x.fetch_update(Ordering::SeqCst,+Ordering::SeqCst,+%7C_%7C+None),+Err(7));%0A++++assert_eq!(x.fetch_update(Ordering::SeqCst,+Ordering::SeqCst,+%7Cx%7C+Some(x+%2B+1)),+Ok(7));%0A++++assert_eq!(x.fetch_update(Ordering::SeqCst,+Ordering::SeqCst,+%7Cx%7C+Some(x+%2B+1)),+Ok(8));%0A++++assert_eq!(x.load(Ordering::SeqCst),+9);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fetch_max\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.fetch_max\" class=\"fn\">fetch_max</a>(&amp;self, val: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Maximum with the current value.</p>\n<p>Finds the maximum of the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_max</code> takes an <a href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"../../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_max(<span class=\"number\">42</span>, Ordering::SeqCst), <span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">42</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(23);%0A++++assert_eq!(foo.fetch_max(42,+Ordering::SeqCst),+23);%0A++++assert_eq!(foo.load(Ordering::SeqCst),+42);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If you want to obtain the maximum value in one step, you can use the following:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">23</span>);\n<span class=\"kw\">let </span>bar = <span class=\"number\">42</span>;\n<span class=\"kw\">let </span>max_foo = foo.fetch_max(bar, Ordering::SeqCst).max(bar);\n<span class=\"macro\">assert!</span>(max_foo == <span class=\"number\">42</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(23);%0A++++let+bar+=+42;%0A++++let+max_foo+=+foo.fetch_max(bar,+Ordering::SeqCst).max(bar);%0A++++assert!(max_foo+==+42);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fetch_min\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.fetch_min\" class=\"fn\">fetch_min</a>(&amp;self, val: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, order: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Minimum with the current value.</p>\n<p>Finds the minimum of the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_min</code> takes an <a href=\"enum.Ordering.html\" title=\"enum std::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n<a href=\"enum.Ordering.html#variant.Acquire\" title=\"variant std::sync::atomic::Ordering::Acquire\"><code>Acquire</code></a> makes the store part of this operation <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>, and\nusing <a href=\"enum.Ordering.html#variant.Release\" title=\"variant std::sync::atomic::Ordering::Release\"><code>Release</code></a> makes the load part <a href=\"enum.Ordering.html#variant.Relaxed\" title=\"variant std::sync::atomic::Ordering::Relaxed\"><code>Relaxed</code></a>.</p>\n<p><strong>Note</strong>: This method is only available on platforms that support atomic operations on\n<a href=\"../../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_min(<span class=\"number\">42</span>, Ordering::Relaxed), <span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), <span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_min(<span class=\"number\">22</span>, Ordering::Relaxed), <span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), <span class=\"number\">22</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(23);%0A++++assert_eq!(foo.fetch_min(42,+Ordering::Relaxed),+23);%0A++++assert_eq!(foo.load(Ordering::Relaxed),+23);%0A++++assert_eq!(foo.fetch_min(22,+Ordering::Relaxed),+23);%0A++++assert_eq!(foo.load(Ordering::Relaxed),+22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If you want to obtain the minimum value in one step, you can use the following:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicU8, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU8::new(<span class=\"number\">23</span>);\n<span class=\"kw\">let </span>bar = <span class=\"number\">12</span>;\n<span class=\"kw\">let </span>min_foo = foo.fetch_min(bar, Ordering::SeqCst).min(bar);\n<span class=\"macro\">assert_eq!</span>(min_foo, <span class=\"number\">12</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::%7BAtomicU8,+Ordering%7D;%0A++++%0A++++let+foo+=+AtomicU8::new(23);%0A++++let+bar+=+12;%0A++++let+min_foo+=+foo.fetch_min(bar,+Ordering::SeqCst).min(bar);%0A++++assert_eq!(min_foo,+12);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0, const since 1.70.0\">1.70.0 (const: 1.70.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable pointer to the underlying integer.</p>\n<p>Doing non-atomic reads and writes on the resulting integer can be a data race.\nThis method is mostly useful for FFI, where the function signature may use\n<code>*mut u8</code> instead of <code>&amp;AtomicU8</code>.</p>\n<p>Returning an <code>*mut</code> pointer from a shared reference to this atomic is safe because the\natomic types work with interior mutability. All modifications of an atomic change the value\nthrough a shared reference, and can do so safely as long as they use atomic operations. Any\nuse of the returned raw pointer requires an <code>unsafe</code> block and still has to uphold the same\nrestriction: operations on it must be atomic.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::AtomicU8;\n\n<span class=\"kw\">extern </span><span class=\"string\">\"C\" </span>{\n    <span class=\"kw\">fn </span>my_atomic_op(arg: <span class=\"kw-2\">*mut </span>u8);\n}\n\n<span class=\"kw\">let </span>atomic = AtomicU8::new(<span class=\"number\">1</span>);\n\n<span class=\"comment\">// SAFETY: Safe as long as `my_atomic_op` is atomic.\n</span><span class=\"kw\">unsafe </span>{\n    my_atomic_op(atomic.as_ptr());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Ause+std::sync::atomic::AtomicU8;%0A%0Aextern+%22C%22+%7B%0A++++fn+my_atomic_op(arg:+*mut+u8);%0A%7D%0A%0Alet+atomic+=+AtomicU8::new(1);%0A%0A//+SAFETY:+Safe+as+long+as+%60my_atomic_op%60+is+atomic.%0Aunsafe+%7B%0A++++my_atomic_op(atomic.as_ptr());%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-AtomicU8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><a href=\"#impl-Debug-for-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-AtomicU8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><a href=\"#impl-Default-for-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cu8%3E-for-AtomicU8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt; for <a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a></h4></section></summary><div class=\"docblock\"><p>Converts an <code>u8</code> into an <code>AtomicU8</code>.</p>\n</div></details></div></details><section id=\"impl-RefUnwindSafe-for-AtomicU8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/unwind_safe.rs.html#228\">source</a></span><a href=\"#impl-RefUnwindSafe-for-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a></h3></section><section id=\"impl-Sync-for-AtomicU8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#3034-3050\">source</a></span><a href=\"#impl-Sync-for-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-AtomicU8\" class=\"impl\"><a href=\"#impl-Freeze-for-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl !<a class=\"trait\" href=\"../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a></h3></section><section id=\"impl-Send-for-AtomicU8\" class=\"impl\"><a href=\"#impl-Send-for-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a></h3></section><section id=\"impl-Unpin-for-AtomicU8\" class=\"impl\"><a href=\"#impl-Unpin-for-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a></h3></section><section id=\"impl-UnwindSafe-for-AtomicU8\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-AtomicU8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.AtomicU8.html\" title=\"struct std::sync::atomic::AtomicU8\">AtomicU8</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"&mut [u8]\":\"<h3>Notable traits for <code>&amp;mut [<a class=\\\"primitive\\\" href=\\\"../../primitive.u8.html\\\">u8</a>]</code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../../io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for &amp;mut [<a class=\\\"primitive\\\" href=\\\"../../primitive.u8.html\\\">u8</a>]</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:52.663Z"
}